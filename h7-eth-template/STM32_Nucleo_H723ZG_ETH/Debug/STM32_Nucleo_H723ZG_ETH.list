
STM32_Nucleo_H723ZG_ETH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011f8c  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ea4  0801225c  0801225c  0001325c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015100  08015100  00016100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08015108  08015108  00016108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801510c  0801510c  0001610c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000008c  24000000  08015110  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000e894  24000090  0801519c  00017090  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  2400e924  0801519c  00017924  2**0
                  ALLOC
  9 .lwip_sec     00000160  30000000  30000000  00018000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  0001708c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00054937  00000000  00000000  000170ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000b506  00000000  00000000  0006b9f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000024e8  00000000  00000000  00076ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00003c9b  00000000  00000000  000793e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0004575e  00000000  00000000  0007d07b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00055f1f  00000000  00000000  000c27d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017334b  00000000  00000000  001186f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0028ba43  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00007c0c  00000000  00000000  0028ba88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loclists 000221ba  00000000  00000000  00293694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  002b584e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000090 	.word	0x24000090
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08012244 	.word	0x08012244

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000094 	.word	0x24000094
 800030c:	08012244 	.word	0x08012244

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80003b0:	4b04      	ldr	r3, [pc, #16]	@ (80003c4 <vApplicationGetIdleTaskMemory+0x14>)
{
 80003b2:	b410      	push	{r4}
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80003b4:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80003b6:	2380      	movs	r3, #128	@ 0x80
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80003b8:	4c03      	ldr	r4, [pc, #12]	@ (80003c8 <vApplicationGetIdleTaskMemory+0x18>)
 80003ba:	600c      	str	r4, [r1, #0]
  /* place for user code */
}
 80003bc:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80003c0:	6013      	str	r3, [r2, #0]
}
 80003c2:	4770      	bx	lr
 80003c4:	240002ac 	.word	0x240002ac
 80003c8:	240000ac 	.word	0x240000ac

080003cc <StartTCPTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTCPTask */
void StartTCPTask(void const * argument)
{
 80003cc:	b508      	push	{r3, lr}
  /* init code for LWIP */
  MX_LWIP_Init();
 80003ce:	f004 f8c3 	bl	8004558 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */

  server_init();
 80003d2:	f000 fbfd 	bl	8000bd0 <server_init>
	for (;;) {
	  osDelay(1000);
 80003d6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80003da:	f004 fc6d 	bl	8004cb8 <osDelay>
	for (;;) {
 80003de:	e7fa      	b.n	80003d6 <StartTCPTask+0xa>

080003e0 <StartHeartbeatTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartHeartbeatTask */
void StartHeartbeatTask(void const * argument)
{
 80003e0:	b538      	push	{r3, r4, r5, lr}
 80003e2:	4c0c      	ldr	r4, [pc, #48]	@ (8000414 <StartHeartbeatTask+0x34>)
  // Infinite loop

  for(;;)
  {
	  // Heartbeat LED0
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1); // FC Blue RGB LED
 80003e4:	4d0c      	ldr	r5, [pc, #48]	@ (8000418 <StartHeartbeatTask+0x38>)
 80003e6:	2102      	movs	r1, #2
 80003e8:	4628      	mov	r0, r5
 80003ea:	f002 f939 	bl	8002660 <HAL_GPIO_TogglePin>

	  char* msg = malloc(12);
 80003ee:	200c      	movs	r0, #12
 80003f0:	f010 fe82 	bl	80110f8 <malloc>
 80003f4:	4603      	mov	r3, r0
	  memcpy(msg, "heartbeat\r\n", 12);
 80003f6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80003fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	  server_sendMsg(ALL_CONNECTIONS,  msg, 12);
 80003fe:	220c      	movs	r2, #12
 8000400:	4619      	mov	r1, r3
 8000402:	f04f 30ff 	mov.w	r0, #4294967295
 8000406:	f000 fd65 	bl	8000ed4 <server_sendMsg>

	  osDelay(500);
 800040a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800040e:	f004 fc53 	bl	8004cb8 <osDelay>
  for(;;)
 8000412:	e7e8      	b.n	80003e6 <StartHeartbeatTask+0x6>
 8000414:	080122e8 	.word	0x080122e8
 8000418:	58021000 	.word	0x58021000

0800041c <StartRXMessages>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRXMessages */
void StartRXMessages(void const * argument)
{
 800041c:	b500      	push	{lr}
 800041e:	b0d3      	sub	sp, #332	@ 0x14c
  /* USER CODE BEGIN StartRXMessages */
	char buf[MAX_MSG_LEN];
  // Infinite loop
  for(;;)
  {
	struct message msg = {-1, buf, MAX_MSG_LEN};
 8000420:	f04f 35ff 	mov.w	r5, #4294967295
 8000424:	f44f 7496 	mov.w	r4, #300	@ 0x12c
 8000428:	ae07      	add	r6, sp, #28
	server_retrieveMsg(&msg);
 800042a:	a804      	add	r0, sp, #16
	struct message msg = {-1, buf, MAX_MSG_LEN};
 800042c:	9406      	str	r4, [sp, #24]
 800042e:	e9cd 5604 	strd	r5, r6, [sp, #16]
	server_retrieveMsg(&msg);
 8000432:	f000 fd8f 	bl	8000f54 <server_retrieveMsg>
	struct packet rx_packet;
	struct packet tx_packet;

	rx_packet.packet = msg.buf;
	rx_packet.packet_len = msg.len;
	rx_tcppacket_parse(&rx_packet, &tx_packet);
 8000436:	a902      	add	r1, sp, #8
 8000438:	4668      	mov	r0, sp
	rx_packet.packet_len = msg.len;
 800043a:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 800043e:	e9cd 2300 	strd	r2, r3, [sp]
	rx_tcppacket_parse(&rx_packet, &tx_packet);
 8000442:	f000 fb69 	bl	8000b18 <rx_tcppacket_parse>
	/*
	if (tx_packet.len > 0) {
		server_sendMsg(msg.connfd, tx_packet.packet, tx_packet.len);
	}
	*/
	osDelay(1);
 8000446:	2001      	movs	r0, #1
 8000448:	f004 fc36 	bl	8004cb8 <osDelay>
  for(;;)
 800044c:	e7ed      	b.n	800042a <StartRXMessages+0xe>
 800044e:	bf00      	nop

08000450 <SystemClock_Config>:
{
 8000450:	b530      	push	{r4, r5, lr}
 8000452:	b09f      	sub	sp, #124	@ 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000454:	224c      	movs	r2, #76	@ 0x4c
 8000456:	2100      	movs	r1, #0
 8000458:	a80a      	add	r0, sp, #40	@ 0x28
 800045a:	f011 f975 	bl	8011748 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800045e:	2220      	movs	r2, #32
 8000460:	2100      	movs	r1, #0
 8000462:	a802      	add	r0, sp, #8
 8000464:	f011 f970 	bl	8011748 <memset>
  HAL_PWREx_ConfigSupply(PWR_EXTERNAL_SOURCE_SUPPLY);
 8000468:	2001      	movs	r0, #1
 800046a:	f002 f903 	bl	8002674 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800046e:	4a21      	ldr	r2, [pc, #132]	@ (80004f4 <SystemClock_Config+0xa4>)
 8000470:	2300      	movs	r3, #0
 8000472:	9301      	str	r3, [sp, #4]
 8000474:	6993      	ldr	r3, [r2, #24]
 8000476:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800047a:	6193      	str	r3, [r2, #24]
 800047c:	6993      	ldr	r3, [r2, #24]
 800047e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000482:	9301      	str	r3, [sp, #4]
 8000484:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000486:	6993      	ldr	r3, [r2, #24]
 8000488:	049b      	lsls	r3, r3, #18
 800048a:	d5fc      	bpl.n	8000486 <SystemClock_Config+0x36>
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800048c:	2301      	movs	r3, #1
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800048e:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000490:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000492:	2009      	movs	r0, #9
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000494:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000496:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
  RCC_OscInitStruct.PLL.PLLP = 1;
 800049a:	9317      	str	r3, [sp, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800049c:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLR = 2;
 800049e:	e9cd 2418 	strd	r2, r4, [sp, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80004a2:	e9cd 231a 	strd	r2, r3, [sp, #104]	@ 0x68
 80004a6:	931c      	str	r3, [sp, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLN = 125;
 80004a8:	2210      	movs	r2, #16
 80004aa:	237d      	movs	r3, #125	@ 0x7d
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80004ac:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004b0:	a80a      	add	r0, sp, #40	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 125;
 80004b2:	e9cd 2315 	strd	r2, r3, [sp, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004b6:	e9cd 4413 	strd	r4, r4, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ba:	f002 f971 	bl	80027a0 <HAL_RCC_OscConfig>
 80004be:	4603      	mov	r3, r0
 80004c0:	b108      	cbz	r0, 80004c6 <SystemClock_Config+0x76>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004c2:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004c4:	e7fe      	b.n	80004c4 <SystemClock_Config+0x74>
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80004c6:	2240      	movs	r2, #64	@ 0x40
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80004c8:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80004ca:	2308      	movs	r3, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004cc:	253f      	movs	r5, #63	@ 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004ce:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004d0:	2403      	movs	r4, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004d2:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004d4:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004d6:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80004d8:	9207      	str	r2, [sp, #28]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80004da:	e9cd 3205 	strd	r3, r2, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80004de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004e2:	e9cd 3208 	strd	r3, r2, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004e6:	f002 fc23 	bl	8002d30 <HAL_RCC_ClockConfig>
 80004ea:	b108      	cbz	r0, 80004f0 <SystemClock_Config+0xa0>
 80004ec:	b672      	cpsid	i
  while (1)
 80004ee:	e7fe      	b.n	80004ee <SystemClock_Config+0x9e>
}
 80004f0:	b01f      	add	sp, #124	@ 0x7c
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	58024800 	.word	0x58024800

080004f8 <main>:
{
 80004f8:	b580      	push	{r7, lr}
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80004fa:	2400      	movs	r4, #0
{
 80004fc:	b09c      	sub	sp, #112	@ 0x70
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80004fe:	2501      	movs	r5, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000500:	e9cd 4415 	strd	r4, r4, [sp, #84]	@ 0x54
 8000504:	e9cd 4417 	strd	r4, r4, [sp, #92]	@ 0x5c
  HAL_MPU_Disable();
 8000508:	f000 ff70 	bl	80013ec <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800050c:	f248 721f 	movw	r2, #34591	@ 0x871f
 8000510:	f240 1301 	movw	r3, #257	@ 0x101
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000514:	a815      	add	r0, sp, #84	@ 0x54
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000516:	f8ad 5054 	strh.w	r5, [sp, #84]	@ 0x54
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800051a:	9318      	str	r3, [sp, #96]	@ 0x60
 800051c:	e9cd 4216 	strd	r4, r2, [sp, #88]	@ 0x58
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000520:	f000 ff82 	bl	8001428 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x30000000;
 8000524:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000528:	4bad      	ldr	r3, [pc, #692]	@ (80007e0 <main+0x2e8>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800052a:	a815      	add	r0, sp, #84	@ 0x54
  MPU_InitStruct.BaseAddress = 0x30000000;
 800052c:	9216      	str	r2, [sp, #88]	@ 0x58
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 800052e:	9317      	str	r3, [sp, #92]	@ 0x5c
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000530:	f88d 5055 	strb.w	r5, [sp, #85]	@ 0x55
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000534:	f88d 4061 	strb.w	r4, [sp, #97]	@ 0x61
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000538:	f000 ff76 	bl	8001428 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 800053c:	2202      	movs	r2, #2
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 800053e:	2308      	movs	r3, #8
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000540:	a815      	add	r0, sp, #84	@ 0x54
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000542:	f88d 405e 	strb.w	r4, [sp, #94]	@ 0x5e
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000546:	f88d 2055 	strb.w	r2, [sp, #85]	@ 0x55
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 800054a:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800054e:	f88d 5061 	strb.w	r5, [sp, #97]	@ 0x61
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000552:	f88d 5063 	strb.w	r5, [sp, #99]	@ 0x63
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000556:	f000 ff67 	bl	8001428 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800055a:	2004      	movs	r0, #4
 800055c:	f000 ff54 	bl	8001408 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000560:	4aa0      	ldr	r2, [pc, #640]	@ (80007e4 <main+0x2ec>)
 8000562:	6953      	ldr	r3, [r2, #20]
 8000564:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 8000568:	d111      	bne.n	800058e <main+0x96>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800056a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800056e:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000572:	f8c2 3250 	str.w	r3, [r2, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000576:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800057a:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800057e:	6953      	ldr	r3, [r2, #20]
 8000580:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000584:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000586:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800058a:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800058e:	4895      	ldr	r0, [pc, #596]	@ (80007e4 <main+0x2ec>)
 8000590:	6943      	ldr	r3, [r0, #20]
 8000592:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 8000596:	d124      	bne.n	80005e2 <main+0xea>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000598:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800059c:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80005a0:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005a4:	f643 7ee0 	movw	lr, #16352	@ 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80005a8:	f3c3 344e 	ubfx	r4, r3, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80005ac:	f3c3 0cc9 	ubfx	ip, r3, #3, #10
 80005b0:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005b2:	ea04 010e 	and.w	r1, r4, lr
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80005b6:	4663      	mov	r3, ip
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005b8:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80005bc:	3b01      	subs	r3, #1
 80005be:	1c5d      	adds	r5, r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005c0:	f8c0 2260 	str.w	r2, [r0, #608]	@ 0x260
      } while (ways-- != 0U);
 80005c4:	d1f8      	bne.n	80005b8 <main+0xc0>
    } while(sets-- != 0U);
 80005c6:	3c20      	subs	r4, #32
 80005c8:	f114 0f20 	cmn.w	r4, #32
 80005cc:	d1f1      	bne.n	80005b2 <main+0xba>
 80005ce:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005d2:	6943      	ldr	r3, [r0, #20]
 80005d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80005d8:	6143      	str	r3, [r0, #20]
 80005da:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80005de:	f3bf 8f6f 	isb	sy
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e2:	2400      	movs	r4, #0
  HAL_Init();
 80005e4:	f000 fe5a 	bl	800129c <HAL_Init>
  SystemClock_Config();
 80005e8:	f7ff ff32 	bl	8000450 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ec:	4b7e      	ldr	r3, [pc, #504]	@ (80007e8 <main+0x2f0>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ee:	9419      	str	r4, [sp, #100]	@ 0x64
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 80005f0:	f244 0101 	movw	r1, #16385	@ 0x4001
 80005f4:	4622      	mov	r2, r4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f6:	2501      	movs	r5, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005f8:	2602      	movs	r6, #2
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80005fa:	f44f 6780 	mov.w	r7, #1024	@ 0x400
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fe:	e9cd 4415 	strd	r4, r4, [sp, #84]	@ 0x54
 8000602:	e9cd 4417 	strd	r4, r4, [sp, #92]	@ 0x5c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000606:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 800060a:	f040 0004 	orr.w	r0, r0, #4
 800060e:	f8c3 00e0 	str.w	r0, [r3, #224]	@ 0xe0
 8000612:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 8000616:	f000 0004 	and.w	r0, r0, #4
 800061a:	9000      	str	r0, [sp, #0]
 800061c:	9800      	ldr	r0, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800061e:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 8000622:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 8000626:	f8c3 00e0 	str.w	r0, [r3, #224]	@ 0xe0
 800062a:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 800062e:	f000 0080 	and.w	r0, r0, #128	@ 0x80
 8000632:	9001      	str	r0, [sp, #4]
 8000634:	9801      	ldr	r0, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000636:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 800063a:	f040 0001 	orr.w	r0, r0, #1
 800063e:	f8c3 00e0 	str.w	r0, [r3, #224]	@ 0xe0
 8000642:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 8000646:	f000 0001 	and.w	r0, r0, #1
 800064a:	9002      	str	r0, [sp, #8]
 800064c:	9802      	ldr	r0, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800064e:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 8000652:	f040 0002 	orr.w	r0, r0, #2
 8000656:	f8c3 00e0 	str.w	r0, [r3, #224]	@ 0xe0
 800065a:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 800065e:	f000 0002 	and.w	r0, r0, #2
 8000662:	9003      	str	r0, [sp, #12]
 8000664:	9803      	ldr	r0, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000666:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 800066a:	f040 0008 	orr.w	r0, r0, #8
 800066e:	f8c3 00e0 	str.w	r0, [r3, #224]	@ 0xe0
 8000672:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 8000676:	f000 0008 	and.w	r0, r0, #8
 800067a:	9004      	str	r0, [sp, #16]
 800067c:	9804      	ldr	r0, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800067e:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 8000682:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 8000686:	f8c3 00e0 	str.w	r0, [r3, #224]	@ 0xe0
 800068a:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 800068e:	f000 0040 	and.w	r0, r0, #64	@ 0x40
 8000692:	9005      	str	r0, [sp, #20]
 8000694:	9805      	ldr	r0, [sp, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000696:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 800069a:	f040 0010 	orr.w	r0, r0, #16
 800069e:	f8c3 00e0 	str.w	r0, [r3, #224]	@ 0xe0
 80006a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 80006a6:	4851      	ldr	r0, [pc, #324]	@ (80007ec <main+0x2f4>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006a8:	f003 0310 	and.w	r3, r3, #16
 80006ac:	9306      	str	r3, [sp, #24]
 80006ae:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 80006b0:	f001 ffd2 	bl	8002658 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80006b4:	4622      	mov	r2, r4
 80006b6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006ba:	484d      	ldr	r0, [pc, #308]	@ (80007f0 <main+0x2f8>)
 80006bc:	f001 ffcc 	bl	8002658 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 80006c0:	4622      	mov	r2, r4
 80006c2:	2102      	movs	r1, #2
 80006c4:	484b      	ldr	r0, [pc, #300]	@ (80007f4 <main+0x2fc>)
 80006c6:	f001 ffc7 	bl	8002658 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 80006ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006ce:	a915      	add	r1, sp, #84	@ 0x54
 80006d0:	4849      	ldr	r0, [pc, #292]	@ (80007f8 <main+0x300>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	9417      	str	r4, [sp, #92]	@ 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006d4:	e9cd 3415 	strd	r3, r4, [sp, #84]	@ 0x54
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006d8:	f001 fe8a 	bl	80023f0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 80006dc:	f244 0301 	movw	r3, #16385	@ 0x4001
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e0:	a915      	add	r1, sp, #84	@ 0x54
 80006e2:	4842      	ldr	r0, [pc, #264]	@ (80007ec <main+0x2f4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	9417      	str	r4, [sp, #92]	@ 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e6:	9418      	str	r4, [sp, #96]	@ 0x60
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e8:	e9cd 3515 	strd	r3, r5, [sp, #84]	@ 0x54
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ec:	f001 fe80 	bl	80023f0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 80006f0:	f44f 7340 	mov.w	r3, #768	@ 0x300
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006f4:	a915      	add	r1, sp, #84	@ 0x54
 80006f6:	483e      	ldr	r0, [pc, #248]	@ (80007f0 <main+0x2f8>)
  GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 80006f8:	9315      	str	r3, [sp, #84]	@ 0x54
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80006fa:	2307      	movs	r3, #7
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fc:	9418      	str	r4, [sp, #96]	@ 0x60
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80006fe:	9319      	str	r3, [sp, #100]	@ 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000700:	e9cd 6416 	strd	r6, r4, [sp, #88]	@ 0x58
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000704:	f001 fe74 	bl	80023f0 <HAL_GPIO_Init>
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000708:	a915      	add	r1, sp, #84	@ 0x54
 800070a:	4839      	ldr	r0, [pc, #228]	@ (80007f0 <main+0x2f8>)
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 800070c:	9715      	str	r7, [sp, #84]	@ 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070e:	9418      	str	r4, [sp, #96]	@ 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	e9cd 5416 	strd	r5, r4, [sp, #88]	@ 0x58
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000714:	f001 fe6c 	bl	80023f0 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000718:	2280      	movs	r2, #128	@ 0x80
 800071a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800071e:	a915      	add	r1, sp, #84	@ 0x54
 8000720:	4836      	ldr	r0, [pc, #216]	@ (80007fc <main+0x304>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	9417      	str	r4, [sp, #92]	@ 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000724:	e9cd 2315 	strd	r2, r3, [sp, #84]	@ 0x54
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000728:	f001 fe62 	bl	80023f0 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800072c:	230a      	movs	r3, #10
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 800072e:	a915      	add	r1, sp, #84	@ 0x54
 8000730:	4833      	ldr	r0, [pc, #204]	@ (8000800 <main+0x308>)
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000732:	9715      	str	r7, [sp, #84]	@ 0x54
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000734:	e9cd 4318 	strd	r4, r3, [sp, #96]	@ 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	e9cd 6416 	strd	r6, r4, [sp, #88]	@ 0x58
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 800073c:	f001 fe58 	bl	80023f0 <HAL_GPIO_Init>
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8000740:	a915      	add	r1, sp, #84	@ 0x54
 8000742:	482c      	ldr	r0, [pc, #176]	@ (80007f4 <main+0x2fc>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000744:	e9cd 6515 	strd	r6, r5, [sp, #84]	@ 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000748:	e9cd 4417 	strd	r4, r4, [sp, #92]	@ 0x5c
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 800074c:	f001 fe50 	bl	80023f0 <HAL_GPIO_Init>
  hrtc.Instance = RTC;
 8000750:	482c      	ldr	r0, [pc, #176]	@ (8000804 <main+0x30c>)
  hrtc.Init.AsynchPrediv = 127;
 8000752:	237f      	movs	r3, #127	@ 0x7f
  hrtc.Instance = RTC;
 8000754:	4a2c      	ldr	r2, [pc, #176]	@ (8000808 <main+0x310>)
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000756:	6144      	str	r4, [r0, #20]
  hrtc.Init.AsynchPrediv = 127;
 8000758:	6083      	str	r3, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 800075a:	23ff      	movs	r3, #255	@ 0xff
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800075c:	e9c0 2400 	strd	r2, r4, [r0]
  hrtc.Init.SynchPrediv = 255;
 8000760:	e9c0 3403 	strd	r3, r4, [r0, #12]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000764:	e9c0 4406 	strd	r4, r4, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000768:	f003 fcda 	bl	8004120 <HAL_RTC_Init>
 800076c:	4605      	mov	r5, r0
 800076e:	b108      	cbz	r0, 8000774 <main+0x27c>
  __ASM volatile ("cpsid i" : : : "memory");
 8000770:	b672      	cpsid	i
  while (1)
 8000772:	e7fe      	b.n	8000772 <main+0x27a>
  osThreadDef(tcpTask, StartTCPTask, osPriorityAboveNormal, 0, 512);
 8000774:	4c25      	ldr	r4, [pc, #148]	@ (800080c <main+0x314>)
 8000776:	f10d 0c1c 	add.w	ip, sp, #28
 800077a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800077c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000780:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000784:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  tcpTaskHandle = osThreadCreate(osThread(tcpTask), NULL);
 8000788:	4629      	mov	r1, r5
 800078a:	a807      	add	r0, sp, #28
 800078c:	f004 fa64 	bl	8004c58 <osThreadCreate>
 8000790:	4b1f      	ldr	r3, [pc, #124]	@ (8000810 <main+0x318>)
  osThreadDef(HeartbeatTask, StartHeartbeatTask, osPriorityBelowNormal, 0, 256);
 8000792:	f104 0e0c 	add.w	lr, r4, #12
 8000796:	f10d 0c38 	add.w	ip, sp, #56	@ 0x38
  tcpTaskHandle = osThreadCreate(osThread(tcpTask), NULL);
 800079a:	6018      	str	r0, [r3, #0]
  osThreadDef(rxMessages, StartRXMessages, osPriorityIdle, 0, 256);
 800079c:	3428      	adds	r4, #40	@ 0x28
  osThreadDef(HeartbeatTask, StartHeartbeatTask, osPriorityBelowNormal, 0, 256);
 800079e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80007a2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80007a6:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80007aa:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  HeartbeatTaskHandle = osThreadCreate(osThread(HeartbeatTask), NULL);
 80007ae:	4629      	mov	r1, r5
 80007b0:	a80e      	add	r0, sp, #56	@ 0x38
 80007b2:	f004 fa51 	bl	8004c58 <osThreadCreate>
 80007b6:	4b17      	ldr	r3, [pc, #92]	@ (8000814 <main+0x31c>)
  osThreadDef(rxMessages, StartRXMessages, osPriorityIdle, 0, 256);
 80007b8:	f10d 0c54 	add.w	ip, sp, #84	@ 0x54
  HeartbeatTaskHandle = osThreadCreate(osThread(HeartbeatTask), NULL);
 80007bc:	6018      	str	r0, [r3, #0]
  osThreadDef(rxMessages, StartRXMessages, osPriorityIdle, 0, 256);
 80007be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80007c4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80007c8:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  rxMessagesHandle = osThreadCreate(osThread(rxMessages), NULL);
 80007cc:	4629      	mov	r1, r5
 80007ce:	a815      	add	r0, sp, #84	@ 0x54
 80007d0:	f004 fa42 	bl	8004c58 <osThreadCreate>
 80007d4:	4b10      	ldr	r3, [pc, #64]	@ (8000818 <main+0x320>)
 80007d6:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80007d8:	f004 fa30 	bl	8004c3c <osKernelStart>
  while (1)
 80007dc:	e7fe      	b.n	80007dc <main+0x2e4>
 80007de:	bf00      	nop
 80007e0:	0301000e 	.word	0x0301000e
 80007e4:	e000ed00 	.word	0xe000ed00
 80007e8:	58024400 	.word	0x58024400
 80007ec:	58020400 	.word	0x58020400
 80007f0:	58020c00 	.word	0x58020c00
 80007f4:	58021000 	.word	0x58021000
 80007f8:	58020800 	.word	0x58020800
 80007fc:	58021800 	.word	0x58021800
 8000800:	58020000 	.word	0x58020000
 8000804:	24000358 	.word	0x24000358
 8000808:	58004000 	.word	0x58004000
 800080c:	0801225c 	.word	0x0801225c
 8000810:	24000354 	.word	0x24000354
 8000814:	24000350 	.word	0x24000350
 8000818:	2400034c 	.word	0x2400034c

0800081c <fsm_transition>:
};
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop

08000820 <sw_reset>:
};
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop

08000824 <set_bootloader>:
void set_bootloader(void) {
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop

08000828 <get_git_hash>:
void get_git_hash(void) {
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop

0800082c <valve_control>:
	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800082c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000830:	4801      	ldr	r0, [pc, #4]	@ (8000838 <valve_control+0xc>)
 8000832:	f001 bf15 	b.w	8002660 <HAL_GPIO_TogglePin>
 8000836:	bf00      	nop
 8000838:	58020400 	.word	0x58020400

0800083c <config_calibration>:
};
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop

08000840 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM2) {
 8000840:	6803      	ldr	r3, [r0, #0]
 8000842:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000846:	d000      	beq.n	800084a <HAL_TIM_PeriodElapsedCallback+0xa>
}
 8000848:	4770      	bx	lr
    HAL_IncTick();
 800084a:	f000 bd57 	b.w	80012fc <HAL_IncTick>
 800084e:	bf00      	nop

08000850 <Error_Handler>:
 8000850:	b672      	cpsid	i
  while (1)
 8000852:	e7fe      	b.n	8000852 <Error_Handler+0x2>

08000854 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000854:	4b0b      	ldr	r3, [pc, #44]	@ (8000884 <HAL_MspInit+0x30>)

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000856:	2200      	movs	r2, #0
 8000858:	210f      	movs	r1, #15
 800085a:	f06f 0001 	mvn.w	r0, #1
{
 800085e:	b410      	push	{r4}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000860:	f8d3 40f4 	ldr.w	r4, [r3, #244]	@ 0xf4
{
 8000864:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000866:	f044 0402 	orr.w	r4, r4, #2
 800086a:	f8c3 40f4 	str.w	r4, [r3, #244]	@ 0xf4
 800086e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000872:	f003 0302 	and.w	r3, r3, #2
 8000876:	9301      	str	r3, [sp, #4]
 8000878:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087a:	b003      	add	sp, #12
 800087c:	f85d 4b04 	ldr.w	r4, [sp], #4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000880:	f000 bd6a 	b.w	8001358 <HAL_NVIC_SetPriority>
 8000884:	58024400 	.word	0x58024400

08000888 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000888:	b510      	push	{r4, lr}
 800088a:	b0ae      	sub	sp, #184	@ 0xb8
 800088c:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800088e:	22b8      	movs	r2, #184	@ 0xb8
 8000890:	2100      	movs	r1, #0
 8000892:	4668      	mov	r0, sp
 8000894:	f010 ff58 	bl	8011748 <memset>
  if(hrtc->Instance==RTC)
 8000898:	4b0f      	ldr	r3, [pc, #60]	@ (80008d8 <HAL_RTC_MspInit+0x50>)
 800089a:	6822      	ldr	r2, [r4, #0]
 800089c:	429a      	cmp	r2, r3
 800089e:	d001      	beq.n	80008a4 <HAL_RTC_MspInit+0x1c>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 80008a0:	b02e      	add	sp, #184	@ 0xb8
 80008a2:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80008a4:	ed9f 7b0a 	vldr	d7, [pc, #40]	@ 80008d0 <HAL_RTC_MspInit+0x48>
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80008a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008ac:	4668      	mov	r0, sp
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80008ae:	ed8d 7b00 	vstr	d7, [sp]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80008b2:	932c      	str	r3, [sp, #176]	@ 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008b4:	f002 fcc8 	bl	8003248 <HAL_RCCEx_PeriphCLKConfig>
 80008b8:	b930      	cbnz	r0, 80008c8 <HAL_RTC_MspInit+0x40>
    __HAL_RCC_RTC_ENABLE();
 80008ba:	4a08      	ldr	r2, [pc, #32]	@ (80008dc <HAL_RTC_MspInit+0x54>)
 80008bc:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80008be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80008c2:	6713      	str	r3, [r2, #112]	@ 0x70
}
 80008c4:	b02e      	add	sp, #184	@ 0xb8
 80008c6:	bd10      	pop	{r4, pc}
      Error_Handler();
 80008c8:	f7ff ffc2 	bl	8000850 <Error_Handler>
 80008cc:	e7f5      	b.n	80008ba <HAL_RTC_MspInit+0x32>
 80008ce:	bf00      	nop
 80008d0:	00400000 	.word	0x00400000
 80008d4:	00000000 	.word	0x00000000
 80008d8:	58004000 	.word	0x58004000
 80008dc:	58024400 	.word	0x58024400

080008e0 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008e0:	280f      	cmp	r0, #15
 80008e2:	d901      	bls.n	80008e8 <HAL_InitTick+0x8>
     HAL_NVIC_EnableIRQ(TIM2_IRQn);
     uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 80008e4:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim2);
  }

  /* Return function status */
  return HAL_ERROR;
}
 80008e6:	4770      	bx	lr
{
 80008e8:	b530      	push	{r4, r5, lr}
     HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 80008ea:	4601      	mov	r1, r0
{
 80008ec:	b08b      	sub	sp, #44	@ 0x2c
     HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 80008ee:	2200      	movs	r2, #0
 80008f0:	4604      	mov	r4, r0
 80008f2:	201c      	movs	r0, #28
 80008f4:	f000 fd30 	bl	8001358 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80008f8:	201c      	movs	r0, #28
 80008fa:	f000 fd69 	bl	80013d0 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_TIM2_CLK_ENABLE();
 80008fe:	4b1b      	ldr	r3, [pc, #108]	@ (800096c <HAL_InitTick+0x8c>)
     uwTickPrio = TickPriority;
 8000900:	4a1b      	ldr	r2, [pc, #108]	@ (8000970 <HAL_InitTick+0x90>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000902:	4669      	mov	r1, sp
 8000904:	a802      	add	r0, sp, #8
     uwTickPrio = TickPriority;
 8000906:	6014      	str	r4, [r2, #0]
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000908:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800090c:	f042 0201 	orr.w	r2, r2, #1
 8000910:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8000914:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000918:	f003 0301 	and.w	r3, r3, #1
 800091c:	9301      	str	r3, [sp, #4]
 800091e:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000920:	f002 fb82 	bl	8003028 <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000924:	9b07      	ldr	r3, [sp, #28]
 8000926:	b9cb      	cbnz	r3, 800095c <HAL_InitTick+0x7c>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000928:	f002 fb6c 	bl	8003004 <HAL_RCC_GetPCLK1Freq>
 800092c:	4603      	mov	r3, r0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800092e:	4911      	ldr	r1, [pc, #68]	@ (8000974 <HAL_InitTick+0x94>)
  htim2.Init.ClockDivision = 0;
 8000930:	2200      	movs	r2, #0
  htim2.Instance = TIM2;
 8000932:	4c11      	ldr	r4, [pc, #68]	@ (8000978 <HAL_InitTick+0x98>)
 8000934:	f04f 4580 	mov.w	r5, #1073741824	@ 0x40000000
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000938:	fba1 1303 	umull	r1, r3, r1, r3
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800093c:	f240 31e7 	movw	r1, #999	@ 0x3e7
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8000940:	4620      	mov	r0, r4
  htim2.Instance = TIM2;
 8000942:	6025      	str	r5, [r4, #0]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000944:	0c9b      	lsrs	r3, r3, #18
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000946:	60a2      	str	r2, [r4, #8]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000948:	3b01      	subs	r3, #1
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800094a:	e9c4 1203 	strd	r1, r2, [r4, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800094e:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8000950:	f003 fdc8 	bl	80044e4 <HAL_TIM_Base_Init>
 8000954:	b130      	cbz	r0, 8000964 <HAL_InitTick+0x84>
    return HAL_ERROR;
 8000956:	2001      	movs	r0, #1
}
 8000958:	b00b      	add	sp, #44	@ 0x2c
 800095a:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800095c:	f002 fb52 	bl	8003004 <HAL_RCC_GetPCLK1Freq>
 8000960:	0043      	lsls	r3, r0, #1
 8000962:	e7e4      	b.n	800092e <HAL_InitTick+0x4e>
    return HAL_TIM_Base_Start_IT(&htim2);
 8000964:	4620      	mov	r0, r4
 8000966:	f003 fc2d 	bl	80041c4 <HAL_TIM_Base_Start_IT>
 800096a:	e7f5      	b.n	8000958 <HAL_InitTick+0x78>
 800096c:	58024400 	.word	0x58024400
 8000970:	2400000c 	.word	0x2400000c
 8000974:	431bde83 	.word	0x431bde83
 8000978:	2400037c 	.word	0x2400037c

0800097c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800097c:	e7fe      	b.n	800097c <NMI_Handler>
 800097e:	bf00      	nop

08000980 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <HardFault_Handler>
 8000982:	bf00      	nop

08000984 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000984:	e7fe      	b.n	8000984 <MemManage_Handler>
 8000986:	bf00      	nop

08000988 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <BusFault_Handler>
 800098a:	bf00      	nop

0800098c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800098c:	e7fe      	b.n	800098c <UsageFault_Handler>
 800098e:	bf00      	nop

08000990 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop

08000994 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000994:	4801      	ldr	r0, [pc, #4]	@ (800099c <TIM2_IRQHandler+0x8>)
 8000996:	f003 bc7b 	b.w	8004290 <HAL_TIM_IRQHandler>
 800099a:	bf00      	nop
 800099c:	2400037c 	.word	0x2400037c

080009a0 <ETH_IRQHandler>:
void ETH_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80009a0:	4801      	ldr	r0, [pc, #4]	@ (80009a8 <ETH_IRQHandler+0x8>)
 80009a2:	f001 b9e1 	b.w	8001d68 <HAL_ETH_IRQHandler>
 80009a6:	bf00      	nop
 80009a8:	240004a0 	.word	0x240004a0

080009ac <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80009ac:	2001      	movs	r0, #1
 80009ae:	4770      	bx	lr

080009b0 <_kill>:

int _kill(int pid, int sig)
{
	errno = EINVAL;
 80009b0:	4b02      	ldr	r3, [pc, #8]	@ (80009bc <_kill+0xc>)
 80009b2:	2216      	movs	r2, #22
	return -1;
}
 80009b4:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 80009b8:	601a      	str	r2, [r3, #0]
}
 80009ba:	4770      	bx	lr
 80009bc:	24009f98 	.word	0x24009f98

080009c0 <_exit>:
	errno = EINVAL;
 80009c0:	4b01      	ldr	r3, [pc, #4]	@ (80009c8 <_exit+0x8>)
 80009c2:	2216      	movs	r2, #22
 80009c4:	601a      	str	r2, [r3, #0]

void _exit (int status)
{
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80009c6:	e7fe      	b.n	80009c6 <_exit+0x6>
 80009c8:	24009f98 	.word	0x24009f98

080009cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009cc:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ce:	1e16      	subs	r6, r2, #0
 80009d0:	dd07      	ble.n	80009e2 <_read+0x16>
 80009d2:	460c      	mov	r4, r1
 80009d4:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 80009d6:	f3af 8000 	nop.w
 80009da:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009de:	42a5      	cmp	r5, r4
 80009e0:	d1f9      	bne.n	80009d6 <_read+0xa>
	}

return len;
}
 80009e2:	4630      	mov	r0, r6
 80009e4:	bd70      	pop	{r4, r5, r6, pc}
 80009e6:	bf00      	nop

080009e8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009e8:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ea:	1e16      	subs	r6, r2, #0
 80009ec:	dd07      	ble.n	80009fe <_write+0x16>
 80009ee:	460c      	mov	r4, r1
 80009f0:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 80009f2:	f814 0b01 	ldrb.w	r0, [r4], #1
 80009f6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009fa:	42a5      	cmp	r5, r4
 80009fc:	d1f9      	bne.n	80009f2 <_write+0xa>
	}
	return len;
}
 80009fe:	4630      	mov	r0, r6
 8000a00:	bd70      	pop	{r4, r5, r6, pc}
 8000a02:	bf00      	nop

08000a04 <_close>:

int _close(int file)
{
	return -1;
}
 8000a04:	f04f 30ff 	mov.w	r0, #4294967295
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8000a0c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
	return 0;
}
 8000a10:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8000a12:	604b      	str	r3, [r1, #4]
}
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000a18:	2001      	movs	r0, #1
 8000a1a:	4770      	bx	lr

08000a1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	4770      	bx	lr

08000a20 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a20:	490d      	ldr	r1, [pc, #52]	@ (8000a58 <_sbrk+0x38>)
{
 8000a22:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a24:	4a0d      	ldr	r2, [pc, #52]	@ (8000a5c <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 8000a26:	6808      	ldr	r0, [r1, #0]
{
 8000a28:	b410      	push	{r4}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a2a:	4c0d      	ldr	r4, [pc, #52]	@ (8000a60 <_sbrk+0x40>)
 8000a2c:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8000a2e:	b170      	cbz	r0, 8000a4e <_sbrk+0x2e>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a30:	4403      	add	r3, r0
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d803      	bhi.n	8000a3e <_sbrk+0x1e>

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8000a36:	f85d 4b04 	ldr.w	r4, [sp], #4
  __sbrk_heap_end += incr;
 8000a3a:	600b      	str	r3, [r1, #0]
}
 8000a3c:	4770      	bx	lr
    errno = ENOMEM;
 8000a3e:	4b09      	ldr	r3, [pc, #36]	@ (8000a64 <_sbrk+0x44>)
 8000a40:	220c      	movs	r2, #12
    return (void *)-1;
 8000a42:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000a46:	f85d 4b04 	ldr.w	r4, [sp], #4
    errno = ENOMEM;
 8000a4a:	601a      	str	r2, [r3, #0]
}
 8000a4c:	4770      	bx	lr
    __sbrk_heap_end = &_end;
 8000a4e:	4c06      	ldr	r4, [pc, #24]	@ (8000a68 <_sbrk+0x48>)
 8000a50:	4620      	mov	r0, r4
 8000a52:	600c      	str	r4, [r1, #0]
 8000a54:	e7ec      	b.n	8000a30 <_sbrk+0x10>
 8000a56:	bf00      	nop
 8000a58:	240003c8 	.word	0x240003c8
 8000a5c:	24050000 	.word	0x24050000
 8000a60:	00000400 	.word	0x00000400
 8000a64:	24009f98 	.word	0x24009f98
 8000a68:	2400e928 	.word	0x2400e928

08000a6c <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a6c:	4922      	ldr	r1, [pc, #136]	@ (8000af8 <SystemInit+0x8c>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a6e:	4a23      	ldr	r2, [pc, #140]	@ (8000afc <SystemInit+0x90>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a70:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8000a74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
{
 8000a78:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a7e:	6813      	ldr	r3, [r2, #0]
 8000a80:	f003 030f 	and.w	r3, r3, #15
 8000a84:	2b06      	cmp	r3, #6
 8000a86:	d805      	bhi.n	8000a94 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a88:	6813      	ldr	r3, [r2, #0]
 8000a8a:	f023 030f 	bic.w	r3, r3, #15
 8000a8e:	f043 0307 	orr.w	r3, r3, #7
 8000a92:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000a94:	4b1a      	ldr	r3, [pc, #104]	@ (8000b00 <SystemInit+0x94>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a96:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000a98:	4a1a      	ldr	r2, [pc, #104]	@ (8000b04 <SystemInit+0x98>)
  RCC->CR |= RCC_CR_HSION;
 8000a9a:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a9c:	4817      	ldr	r0, [pc, #92]	@ (8000afc <SystemInit+0x90>)
  RCC->CR |= RCC_CR_HSION;
 8000a9e:	f041 0101 	orr.w	r1, r1, #1
 8000aa2:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000aa4:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8000aa6:	6819      	ldr	r1, [r3, #0]
 8000aa8:	400a      	ands	r2, r1
 8000aaa:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000aac:	6803      	ldr	r3, [r0, #0]
 8000aae:	071b      	lsls	r3, r3, #28
 8000ab0:	d505      	bpl.n	8000abe <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ab2:	6803      	ldr	r3, [r0, #0]
 8000ab4:	f023 030f 	bic.w	r3, r3, #15
 8000ab8:	f043 0307 	orr.w	r3, r3, #7
 8000abc:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000abe:	4b10      	ldr	r3, [pc, #64]	@ (8000b00 <SystemInit+0x94>)
 8000ac0:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000ac2:	4911      	ldr	r1, [pc, #68]	@ (8000b08 <SystemInit+0x9c>)
  RCC->PLLCKSELR = 0x02020200;
 8000ac4:	4c11      	ldr	r4, [pc, #68]	@ (8000b0c <SystemInit+0xa0>)
  RCC->PLLCFGR = 0x01FF0000;
 8000ac6:	4812      	ldr	r0, [pc, #72]	@ (8000b10 <SystemInit+0xa4>)
  RCC->D1CFGR = 0x00000000;
 8000ac8:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8000aca:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8000acc:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8000ace:	629c      	str	r4, [r3, #40]	@ 0x28
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000ad0:	f243 04d2 	movw	r4, #12498	@ 0x30d2
  RCC->PLLCFGR = 0x01FF0000;
 8000ad4:	62d8      	str	r0, [r3, #44]	@ 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8000ad6:	6319      	str	r1, [r3, #48]	@ 0x30
  RCC->PLL1FRACR = 0x00000000;
 8000ad8:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC->PLL2DIVR = 0x01010280;
 8000ada:	6399      	str	r1, [r3, #56]	@ 0x38
  RCC->PLL2FRACR = 0x00000000;
 8000adc:	63da      	str	r2, [r3, #60]	@ 0x3c
  RCC->PLL3DIVR = 0x01010280;
 8000ade:	6419      	str	r1, [r3, #64]	@ 0x40
  RCC->PLL3FRACR = 0x00000000;
 8000ae0:	645a      	str	r2, [r3, #68]	@ 0x44
  RCC->CR &= 0xFFFBFFFFU;
 8000ae2:	6819      	ldr	r1, [r3, #0]
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000ae4:	480b      	ldr	r0, [pc, #44]	@ (8000b14 <SystemInit+0xa8>)
  RCC->CR &= 0xFFFBFFFFU;
 8000ae6:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 8000aea:	6019      	str	r1, [r3, #0]
  RCC->CIER = 0x00000000;
 8000aec:	661a      	str	r2, [r3, #96]	@ 0x60
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000aee:	6004      	str	r4, [r0, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000af0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	e000ed00 	.word	0xe000ed00
 8000afc:	52002000 	.word	0x52002000
 8000b00:	58024400 	.word	0x58024400
 8000b04:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b08:	01010280 	.word	0x01010280
 8000b0c:	02020200 	.word	0x02020200
 8000b10:	01ff0000 	.word	0x01ff0000
 8000b14:	52004000 	.word	0x52004000

08000b18 <rx_tcppacket_parse>:

/* Decodes an incoming TCP packet and creates an outgoing packet if needed */
int rx_tcppacket_parse(struct packet *incoming_packet, struct packet *outgoing_packet) {
    int ack = 0x05; // Acknowledge bit
    // Get the incoming packet data in bytes
    char *data = incoming_packet->packet;
 8000b18:	6800      	ldr	r0, [r0, #0]
int rx_tcppacket_parse(struct packet *incoming_packet, struct packet *outgoing_packet) {
 8000b1a:	b508      	push	{r3, lr}
    int len = incoming_packet->packet_len; // We don't use this, but it's good to have
    // Get the first byte of the incoming packet
    int header = data[0];
    // Switch statement based on the first byte of the incoming packet
    switch (header) {
 8000b1c:	7803      	ldrb	r3, [r0, #0]
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	2b03      	cmp	r3, #3
 8000b22:	d850      	bhi.n	8000bc6 <rx_tcppacket_parse+0xae>
 8000b24:	e8df f003 	tbb	[pc, r3]
 8000b28:	02060d05 	.word	0x02060d05
            //tcppacket_encode((ack | header | valve_selection | valve_state), 10, outgoing_packet); // Make a ack packet with the valve selection and state

            break;
        case 0x04: // Config calibration
            data++; // Skip the header byte
            config_calibration((uint64_t*)data); // Pass the data to the calibration function
 8000b2c:	3001      	adds	r0, #1
 8000b2e:	f7ff fe85 	bl	800083c <config_calibration>

            //char* return_message = strncat(ack << 8 | header);
        	//tcppacket_encode(return_message, (2+len), outgoing_packet);
            return -1;
    }
};
 8000b32:	bd08      	pop	{r3, pc}
            valve_control(valve_selection, valve_state);
 8000b34:	f8d0 1005 	ldr.w	r1, [r0, #5]
 8000b38:	f8d0 0001 	ldr.w	r0, [r0, #1]
 8000b3c:	f7ff fe76 	bl	800082c <valve_control>
};
 8000b40:	bd08      	pop	{r3, pc}
            switch (command) {
 8000b42:	7843      	ldrb	r3, [r0, #1]
 8000b44:	2b0a      	cmp	r3, #10
 8000b46:	d83e      	bhi.n	8000bc6 <rx_tcppacket_parse+0xae>
 8000b48:	a201      	add	r2, pc, #4	@ (adr r2, 8000b50 <rx_tcppacket_parse+0x38>)
 8000b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b4e:	bf00      	nop
 8000b50:	08000b83 	.word	0x08000b83
 8000b54:	08000b8b 	.word	0x08000b8b
 8000b58:	08000b93 	.word	0x08000b93
 8000b5c:	08000b9b 	.word	0x08000b9b
 8000b60:	08000ba3 	.word	0x08000ba3
 8000b64:	08000bab 	.word	0x08000bab
 8000b68:	08000bb3 	.word	0x08000bb3
 8000b6c:	08000bbb 	.word	0x08000bbb
 8000b70:	08000bc1 	.word	0x08000bc1
 8000b74:	08000b7d 	.word	0x08000b7d
 8000b78:	08000b33 	.word	0x08000b33
                    get_git_hash();
 8000b7c:	f7ff fe54 	bl	8000828 <get_git_hash>
};
 8000b80:	bd08      	pop	{r3, pc}
                    fsm_transition(0);
 8000b82:	2000      	movs	r0, #0
 8000b84:	f7ff fe4a 	bl	800081c <fsm_transition>
};
 8000b88:	bd08      	pop	{r3, pc}
                    fsm_transition(1);
 8000b8a:	2001      	movs	r0, #1
 8000b8c:	f7ff fe46 	bl	800081c <fsm_transition>
};
 8000b90:	bd08      	pop	{r3, pc}
                    fsm_transition(2);
 8000b92:	2002      	movs	r0, #2
 8000b94:	f7ff fe42 	bl	800081c <fsm_transition>
};
 8000b98:	bd08      	pop	{r3, pc}
                    fsm_transition(3);
 8000b9a:	2003      	movs	r0, #3
 8000b9c:	f7ff fe3e 	bl	800081c <fsm_transition>
};
 8000ba0:	bd08      	pop	{r3, pc}
                    fsm_transition(4);
 8000ba2:	2004      	movs	r0, #4
 8000ba4:	f7ff fe3a 	bl	800081c <fsm_transition>
};
 8000ba8:	bd08      	pop	{r3, pc}
                    fsm_transition(5);
 8000baa:	2005      	movs	r0, #5
 8000bac:	f7ff fe36 	bl	800081c <fsm_transition>
};
 8000bb0:	bd08      	pop	{r3, pc}
                    fsm_transition(6);
 8000bb2:	2006      	movs	r0, #6
 8000bb4:	f7ff fe32 	bl	800081c <fsm_transition>
};
 8000bb8:	bd08      	pop	{r3, pc}
                    sw_reset();
 8000bba:	f7ff fe31 	bl	8000820 <sw_reset>
};
 8000bbe:	bd08      	pop	{r3, pc}
                    set_bootloader();
 8000bc0:	f7ff fe30 	bl	8000824 <set_bootloader>
};
 8000bc4:	bd08      	pop	{r3, pc}
 8000bc6:	f04f 30ff 	mov.w	r0, #4294967295
 8000bca:	bd08      	pop	{r3, pc}

08000bcc <msgFreeCallback>:

}
#endif

void msgFreeCallback(void * data) {
	free(data);
 8000bcc:	f010 ba9c 	b.w	8011108 <free>

08000bd0 <server_init>:

/*
 * Starts the TCP server
 * Creates a listen thread, a recv thread, and a send thread
 */
void server_init() {
 8000bd0:	b510      	push	{r4, lr}

	memset(connections, -1, MAX_CONN_NUM * sizeof(int));
 8000bd2:	2220      	movs	r2, #32
void server_init() {
 8000bd4:	b082      	sub	sp, #8
	memset(connections, -1, MAX_CONN_NUM * sizeof(int));
 8000bd6:	f04f 31ff 	mov.w	r1, #4294967295
 8000bda:	481d      	ldr	r0, [pc, #116]	@ (8000c50 <server_init+0x80>)
 8000bdc:	f010 fdb4 	bl	8011748 <memset>

	conn_mu = malloc(sizeof(sys_mutex_t));
 8000be0:	2004      	movs	r0, #4
 8000be2:	f010 fa89 	bl	80110f8 <malloc>
 8000be6:	4b1b      	ldr	r3, [pc, #108]	@ (8000c54 <server_init+0x84>)
 8000be8:	6018      	str	r0, [r3, #0]
	err_t err = sys_mutex_new(conn_mu);
 8000bea:	f010 fa03 	bl	8010ff4 <sys_mutex_new>

	// size of list element is max message size + length and connfd integers
	rxMsgBuffer = list_create(MAX_MSG_LEN + 2*sizeof(int), msgFreeCallback);
 8000bee:	491a      	ldr	r1, [pc, #104]	@ (8000c58 <server_init+0x88>)
	err_t err = sys_mutex_new(conn_mu);
 8000bf0:	4604      	mov	r4, r0
	rxMsgBuffer = list_create(MAX_MSG_LEN + 2*sizeof(int), msgFreeCallback);
 8000bf2:	f44f 709a 	mov.w	r0, #308	@ 0x134
 8000bf6:	f000 f9b5 	bl	8000f64 <list_create>
 8000bfa:	4b18      	ldr	r3, [pc, #96]	@ (8000c5c <server_init+0x8c>)
 8000bfc:	4602      	mov	r2, r0
	txMsgBuffer = list_create(MAX_MSG_LEN + 2*sizeof(int), msgFreeCallback);
 8000bfe:	4916      	ldr	r1, [pc, #88]	@ (8000c58 <server_init+0x88>)
 8000c00:	f44f 709a 	mov.w	r0, #308	@ 0x134
	rxMsgBuffer = list_create(MAX_MSG_LEN + 2*sizeof(int), msgFreeCallback);
 8000c04:	601a      	str	r2, [r3, #0]
	txMsgBuffer = list_create(MAX_MSG_LEN + 2*sizeof(int), msgFreeCallback);
 8000c06:	f000 f9ad 	bl	8000f64 <list_create>
 8000c0a:	4b15      	ldr	r3, [pc, #84]	@ (8000c60 <server_init+0x90>)
 8000c0c:	6018      	str	r0, [r3, #0]

	if (err == ERR_OK) {
 8000c0e:	b9cc      	cbnz	r4, 8000c44 <server_init+0x74>

		// prime server to connect to clients
		if ( NULL == sys_thread_new("server_listen_thread", server_listen, NULL, 512,
 8000c10:	4622      	mov	r2, r4
 8000c12:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c16:	4913      	ldr	r1, [pc, #76]	@ (8000c64 <server_init+0x94>)
 8000c18:	9400      	str	r4, [sp, #0]
 8000c1a:	4813      	ldr	r0, [pc, #76]	@ (8000c68 <server_init+0x98>)
 8000c1c:	f010 fa04 	bl	8011028 <sys_thread_new>
						osPriorityNormal)) {
		}

		// prime server to receive messages from clients
		if ( NULL == sys_thread_new("server_recv_thread", server_recv, NULL, 512,
 8000c20:	4622      	mov	r2, r4
 8000c22:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c26:	4911      	ldr	r1, [pc, #68]	@ (8000c6c <server_init+0x9c>)
 8000c28:	9400      	str	r4, [sp, #0]
 8000c2a:	4811      	ldr	r0, [pc, #68]	@ (8000c70 <server_init+0xa0>)
 8000c2c:	f010 f9fc 	bl	8011028 <sys_thread_new>
						osPriorityNormal)) {
		}

		// prime server to send messages to clients
		if ( NULL == sys_thread_new("server_recv_thread", server_send, NULL, 512,
 8000c30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c34:	4622      	mov	r2, r4
 8000c36:	490f      	ldr	r1, [pc, #60]	@ (8000c74 <server_init+0xa4>)
 8000c38:	9400      	str	r4, [sp, #0]
 8000c3a:	480d      	ldr	r0, [pc, #52]	@ (8000c70 <server_init+0xa0>)
 8000c3c:	f010 f9f4 	bl	8011028 <sys_thread_new>
		}
	}
	else {
		printf("Error in server init\r\n");
	}
}
 8000c40:	b002      	add	sp, #8
 8000c42:	bd10      	pop	{r4, pc}
		printf("Error in server init\r\n");
 8000c44:	480c      	ldr	r0, [pc, #48]	@ (8000c78 <server_init+0xa8>)
}
 8000c46:	b002      	add	sp, #8
 8000c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printf("Error in server init\r\n");
 8000c4c:	f010 bc8c 	b.w	8011568 <puts>
 8000c50:	240003d0 	.word	0x240003d0
 8000c54:	240003cc 	.word	0x240003cc
 8000c58:	08000bcd 	.word	0x08000bcd
 8000c5c:	240003f4 	.word	0x240003f4
 8000c60:	240003f0 	.word	0x240003f0
 8000c64:	08000cc1 	.word	0x08000cc1
 8000c68:	08012328 	.word	0x08012328
 8000c6c:	08000ea1 	.word	0x08000ea1
 8000c70:	08012340 	.word	0x08012340
 8000c74:	08000d79 	.word	0x08000d79
 8000c78:	08012354 	.word	0x08012354

08000c7c <server_addConnection>:
}

/*
 * Adds socket to connections list
 */
void server_addConnection(int connfd) {
 8000c7c:	b538      	push	{r3, r4, r5, lr}

	sys_mutex_lock(conn_mu);
 8000c7e:	4d0d      	ldr	r5, [pc, #52]	@ (8000cb4 <server_addConnection+0x38>)
void server_addConnection(int connfd) {
 8000c80:	4604      	mov	r4, r0
	sys_mutex_lock(conn_mu);
 8000c82:	6828      	ldr	r0, [r5, #0]
 8000c84:	f010 f9c6 	bl	8011014 <sys_mutex_lock>

	for (int i = 0; i < MAX_CONN_NUM; ++i) {
 8000c88:	4a0b      	ldr	r2, [pc, #44]	@ (8000cb8 <server_addConnection+0x3c>)
 8000c8a:	2300      	movs	r3, #0
		if (connections[i] == -1) {
 8000c8c:	f852 1f04 	ldr.w	r1, [r2, #4]!
 8000c90:	3101      	adds	r1, #1
 8000c92:	d007      	beq.n	8000ca4 <server_addConnection+0x28>
	for (int i = 0; i < MAX_CONN_NUM; ++i) {
 8000c94:	3301      	adds	r3, #1
 8000c96:	2b08      	cmp	r3, #8
 8000c98:	d1f8      	bne.n	8000c8c <server_addConnection+0x10>
			sys_mutex_unlock(conn_mu);
			return;
		}
	}

	sys_mutex_unlock(conn_mu);
 8000c9a:	6828      	ldr	r0, [r5, #0]

}
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	sys_mutex_unlock(conn_mu);
 8000ca0:	f010 b9be 	b.w	8011020 <sys_mutex_unlock>
			connections[i] = connfd;
 8000ca4:	4a05      	ldr	r2, [pc, #20]	@ (8000cbc <server_addConnection+0x40>)
			sys_mutex_unlock(conn_mu);
 8000ca6:	6828      	ldr	r0, [r5, #0]
			connections[i] = connfd;
 8000ca8:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
}
 8000cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			sys_mutex_unlock(conn_mu);
 8000cb0:	f010 b9b6 	b.w	8011020 <sys_mutex_unlock>
 8000cb4:	240003cc 	.word	0x240003cc
 8000cb8:	240003cc 	.word	0x240003cc
 8000cbc:	240003d0 	.word	0x240003d0

08000cc0 <server_listen>:
void server_listen(void *arg) {
 8000cc0:	b530      	push	{r4, r5, lr}
	serv.sin_family = AF_INET;
 8000cc2:	2402      	movs	r4, #2
void server_listen(void *arg) {
 8000cc4:	b08b      	sub	sp, #44	@ 0x2c
	serv.sin_port = htons(SERVER_PORT);
 8000cc6:	f24c 3050 	movw	r0, #50000	@ 0xc350
	serv.sin_family = AF_INET;
 8000cca:	f88d 4009 	strb.w	r4, [sp, #9]
	serv.sin_port = htons(SERVER_PORT);
 8000cce:	f008 fea1 	bl	8009a14 <lwip_htons>
	serv.sin_addr.s_addr = (in_addr_t) ipaddr.addr;
 8000cd2:	4b14      	ldr	r3, [pc, #80]	@ (8000d24 <server_listen+0x64>)
	serv.sin_port = htons(SERVER_PORT);
 8000cd4:	4605      	mov	r5, r0
	listen_sockfd = socket(AF_INET, SOCK_STREAM, 6); // 6 is the DARPA protocol # for tcp
 8000cd6:	2206      	movs	r2, #6
 8000cd8:	2101      	movs	r1, #1
	serv.sin_addr.s_addr = (in_addr_t) ipaddr.addr;
 8000cda:	681b      	ldr	r3, [r3, #0]
	listen_sockfd = socket(AF_INET, SOCK_STREAM, 6); // 6 is the DARPA protocol # for tcp
 8000cdc:	4620      	mov	r0, r4
	serv.sin_port = htons(SERVER_PORT);
 8000cde:	f8ad 500a 	strh.w	r5, [sp, #10]
	serv.sin_addr.s_addr = (in_addr_t) ipaddr.addr;
 8000ce2:	9303      	str	r3, [sp, #12]
	listen_sockfd = socket(AF_INET, SOCK_STREAM, 6); // 6 is the DARPA protocol # for tcp
 8000ce4:	f008 fb82 	bl	80093ec <lwip_socket>
	if (listen_sockfd != -1) {
 8000ce8:	1c43      	adds	r3, r0, #1
 8000cea:	d101      	bne.n	8000cf0 <server_listen+0x30>
}
 8000cec:	b00b      	add	sp, #44	@ 0x2c
 8000cee:	bd30      	pop	{r4, r5, pc}
		err = bind(listen_sockfd, (struct sockaddr* ) &serv, sizeof(serv));
 8000cf0:	2210      	movs	r2, #16
 8000cf2:	a902      	add	r1, sp, #8
 8000cf4:	4604      	mov	r4, r0
 8000cf6:	f008 f975 	bl	8008fe4 <lwip_bind>
		if (err == 0) {
 8000cfa:	b968      	cbnz	r0, 8000d18 <server_listen+0x58>
			err = listen(listen_sockfd, MAX_CONN_NUM);
 8000cfc:	2108      	movs	r1, #8
 8000cfe:	4620      	mov	r0, r4
				clilen = sizeof(cli);
 8000d00:	2510      	movs	r5, #16
			err = listen(listen_sockfd, MAX_CONN_NUM);
 8000d02:	f008 f9fb 	bl	80090fc <lwip_listen>
				connfd = accept(listen_sockfd, (struct sockaddr* ) &cli, &clilen);
 8000d06:	aa01      	add	r2, sp, #4
 8000d08:	a906      	add	r1, sp, #24
 8000d0a:	4620      	mov	r0, r4
				clilen = sizeof(cli);
 8000d0c:	9501      	str	r5, [sp, #4]
				connfd = accept(listen_sockfd, (struct sockaddr* ) &cli, &clilen);
 8000d0e:	f008 f89f 	bl	8008e50 <lwip_accept>
				server_addConnection(connfd);
 8000d12:	f7ff ffb3 	bl	8000c7c <server_addConnection>
			for (;;) {
 8000d16:	e7f6      	b.n	8000d06 <server_listen+0x46>
			close(listen_sockfd);
 8000d18:	4620      	mov	r0, r4
 8000d1a:	f008 f9a5 	bl	8009068 <lwip_close>
}
 8000d1e:	b00b      	add	sp, #44	@ 0x2c
 8000d20:	bd30      	pop	{r4, r5, pc}
 8000d22:	bf00      	nop
 8000d24:	24000410 	.word	0x24000410

08000d28 <server_removeConnection>:

/*
 * Removes socket from connections list and frees fd for a new socket to use
 */
void server_removeConnection(int connfd) {
 8000d28:	b538      	push	{r3, r4, r5, lr}

	sys_mutex_lock(conn_mu);
 8000d2a:	4d10      	ldr	r5, [pc, #64]	@ (8000d6c <server_removeConnection+0x44>)
void server_removeConnection(int connfd) {
 8000d2c:	4604      	mov	r4, r0
	sys_mutex_lock(conn_mu);
 8000d2e:	6828      	ldr	r0, [r5, #0]
 8000d30:	f010 f970 	bl	8011014 <sys_mutex_lock>

	for (int i = 0; i < MAX_CONN_NUM; ++i) {
 8000d34:	4a0e      	ldr	r2, [pc, #56]	@ (8000d70 <server_removeConnection+0x48>)
 8000d36:	2300      	movs	r3, #0
		if (connections[i] == connfd) {
 8000d38:	f852 1f04 	ldr.w	r1, [r2, #4]!
 8000d3c:	42a1      	cmp	r1, r4
 8000d3e:	d007      	beq.n	8000d50 <server_removeConnection+0x28>
	for (int i = 0; i < MAX_CONN_NUM; ++i) {
 8000d40:	3301      	adds	r3, #1
 8000d42:	2b08      	cmp	r3, #8
 8000d44:	d1f8      	bne.n	8000d38 <server_removeConnection+0x10>
	sys_mutex_unlock(conn_mu);
 8000d46:	6828      	ldr	r0, [r5, #0]
			return;
		}
	}

	sys_mutex_unlock(conn_mu);
}
 8000d48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	sys_mutex_unlock(conn_mu);
 8000d4c:	f010 b968 	b.w	8011020 <sys_mutex_unlock>
			connections[i] = -1;
 8000d50:	4a08      	ldr	r2, [pc, #32]	@ (8000d74 <server_removeConnection+0x4c>)
 8000d52:	f04f 31ff 	mov.w	r1, #4294967295
			close(connfd);
 8000d56:	4620      	mov	r0, r4
			connections[i] = -1;
 8000d58:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			close(connfd);
 8000d5c:	f008 f984 	bl	8009068 <lwip_close>
			sys_mutex_unlock(conn_mu);
 8000d60:	6828      	ldr	r0, [r5, #0]
}
 8000d62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			sys_mutex_unlock(conn_mu);
 8000d66:	f010 b95b 	b.w	8011020 <sys_mutex_unlock>
 8000d6a:	bf00      	nop
 8000d6c:	240003cc 	.word	0x240003cc
 8000d70:	240003cc 	.word	0x240003cc
 8000d74:	240003d0 	.word	0x240003d0

08000d78 <server_send>:

void server_retrieveMsg(struct message* msg) {
	list_pop(rxMsgBuffer, (void*)(msg));
}

void server_send(void* args) {
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b0ce      	sub	sp, #312	@ 0x138
 8000d7c:	4e0d      	ldr	r6, [pc, #52]	@ (8000db4 <server_send+0x3c>)

	char buf[MAX_MSG_LEN];

	for (;;) {

		struct message msg = {-1, buf, MAX_MSG_LEN};
 8000d7e:	f04f 35ff 	mov.w	r5, #4294967295
 8000d82:	f44f 7496 	mov.w	r4, #300	@ 0x12c
 8000d86:	af03      	add	r7, sp, #12

		list_pop(txMsgBuffer, (void*)(&msg));
 8000d88:	4669      	mov	r1, sp
 8000d8a:	6830      	ldr	r0, [r6, #0]
		struct message msg = {-1, buf, MAX_MSG_LEN};
 8000d8c:	9402      	str	r4, [sp, #8]
 8000d8e:	e9cd 5700 	strd	r5, r7, [sp]
		list_pop(txMsgBuffer, (void*)(&msg));
 8000d92:	f000 f9bb 	bl	800110c <list_pop>

		if (-1 == send(msg.connfd, msg.buf, msg.len, 0)) { // opts = 0
 8000d96:	2300      	movs	r3, #0
 8000d98:	9800      	ldr	r0, [sp, #0]
 8000d9a:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
 8000d9e:	f008 fae1 	bl	8009364 <lwip_send>
 8000da2:	3001      	adds	r0, #1
 8000da4:	d102      	bne.n	8000dac <server_send+0x34>
			// message failed to send
			server_removeConnection(msg.connfd);
 8000da6:	9800      	ldr	r0, [sp, #0]
 8000da8:	f7ff ffbe 	bl	8000d28 <server_removeConnection>
		}

		free(msg.buf);
 8000dac:	9801      	ldr	r0, [sp, #4]
 8000dae:	f010 f9ab 	bl	8011108 <free>
	for (;;) {
 8000db2:	e7e9      	b.n	8000d88 <server_send+0x10>
 8000db4:	240003f0 	.word	0x240003f0

08000db8 <server_setFDs>:
void server_setFDs(fd_set *rfds) {
 8000db8:	b570      	push	{r4, r5, r6, lr}
	FD_ZERO(rfds);
 8000dba:	2300      	movs	r3, #0
void server_setFDs(fd_set *rfds) {
 8000dbc:	4605      	mov	r5, r0
	sys_mutex_lock(conn_mu);
 8000dbe:	4e12      	ldr	r6, [pc, #72]	@ (8000e08 <server_setFDs+0x50>)
 8000dc0:	4c12      	ldr	r4, [pc, #72]	@ (8000e0c <server_setFDs+0x54>)
 8000dc2:	6830      	ldr	r0, [r6, #0]
	FD_ZERO(rfds);
 8000dc4:	e9c5 3300 	strd	r3, r3, [r5]
	sys_mutex_lock(conn_mu);
 8000dc8:	f010 f924 	bl	8011014 <sys_mutex_lock>
			FD_SET(connections[i], rfds);
 8000dcc:	f04f 0c01 	mov.w	ip, #1
 8000dd0:	f104 0020 	add.w	r0, r4, #32
		if (connections[i] != -1) {
 8000dd4:	f854 3f04 	ldr.w	r3, [r4, #4]!
			FD_SET(connections[i], rfds);
 8000dd8:	f003 011f 	and.w	r1, r3, #31
		if (connections[i] != -1) {
 8000ddc:	1c5a      	adds	r2, r3, #1
			FD_SET(connections[i], rfds);
 8000dde:	461a      	mov	r2, r3
 8000de0:	fa0c f101 	lsl.w	r1, ip, r1
		if (connections[i] != -1) {
 8000de4:	d009      	beq.n	8000dfa <server_setFDs+0x42>
			FD_SET(connections[i], rfds);
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	bfb8      	it	lt
 8000dea:	f103 021f 	addlt.w	r2, r3, #31
 8000dee:	1153      	asrs	r3, r2, #5
 8000df0:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 8000df4:	430a      	orrs	r2, r1
 8000df6:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
	for (int i = 0; i < MAX_CONN_NUM; ++i) {
 8000dfa:	4284      	cmp	r4, r0
 8000dfc:	d1ea      	bne.n	8000dd4 <server_setFDs+0x1c>
	sys_mutex_unlock(conn_mu);
 8000dfe:	6830      	ldr	r0, [r6, #0]
}
 8000e00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	sys_mutex_unlock(conn_mu);
 8000e04:	f010 b90c 	b.w	8011020 <sys_mutex_unlock>
 8000e08:	240003cc 	.word	0x240003cc
 8000e0c:	240003cc 	.word	0x240003cc

08000e10 <server_handleRecv>:
void server_handleRecv(fd_set *rfds) {
 8000e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_mutex_lock(conn_mu);
 8000e14:	4e1f      	ldr	r6, [pc, #124]	@ (8000e94 <server_handleRecv+0x84>)
void server_handleRecv(fd_set *rfds) {
 8000e16:	4680      	mov	r8, r0
 8000e18:	4d1f      	ldr	r5, [pc, #124]	@ (8000e98 <server_handleRecv+0x88>)
 8000e1a:	b084      	sub	sp, #16
	sys_mutex_lock(conn_mu);
 8000e1c:	6830      	ldr	r0, [r6, #0]
				list_push(rxMsgBuffer, (void*)(&msg));
 8000e1e:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 8000e9c <server_handleRecv+0x8c>
 8000e22:	f105 0720 	add.w	r7, r5, #32
	sys_mutex_lock(conn_mu);
 8000e26:	f010 f8f5 	bl	8011014 <sys_mutex_lock>
	for (int i = 0; i < MAX_CONN_NUM; ++i) {
 8000e2a:	e004      	b.n	8000e36 <server_handleRecv+0x26>
		sys_mutex_unlock(conn_mu);
 8000e2c:	6830      	ldr	r0, [r6, #0]
 8000e2e:	f010 f8f7 	bl	8011020 <sys_mutex_unlock>
	for (int i = 0; i < MAX_CONN_NUM; ++i) {
 8000e32:	42bd      	cmp	r5, r7
 8000e34:	d02a      	beq.n	8000e8c <server_handleRecv+0x7c>
		if (connections[i] != -1) {
 8000e36:	f855 4f04 	ldr.w	r4, [r5, #4]!
 8000e3a:	1c61      	adds	r1, r4, #1
			if (FD_ISSET(connfd, rfds)) { // FD data recv
 8000e3c:	f004 021f 	and.w	r2, r4, #31
 8000e40:	4623      	mov	r3, r4
		if (connections[i] != -1) {
 8000e42:	d0f3      	beq.n	8000e2c <server_handleRecv+0x1c>
			if (FD_ISSET(connfd, rfds)) { // FD data recv
 8000e44:	2c00      	cmp	r4, #0
 8000e46:	bfb8      	it	lt
 8000e48:	f104 031f 	addlt.w	r3, r4, #31
 8000e4c:	115b      	asrs	r3, r3, #5
 8000e4e:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8000e52:	40d3      	lsrs	r3, r2
 8000e54:	07db      	lsls	r3, r3, #31
 8000e56:	d5e9      	bpl.n	8000e2c <server_handleRecv+0x1c>
				char* buf = malloc(MAX_MSG_LEN);
 8000e58:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000e5c:	f010 f94c 	bl	80110f8 <malloc>
				int n = recv(connfd, buf, MAX_MSG_LEN, 0);
 8000e60:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000e64:	4601      	mov	r1, r0
 8000e66:	2300      	movs	r3, #0
				char* buf = malloc(MAX_MSG_LEN);
 8000e68:	4682      	mov	sl, r0
				int n = recv(connfd, buf, MAX_MSG_LEN, 0);
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	f008 f9e6 	bl	800923c <lwip_recv>
 8000e70:	4603      	mov	r3, r0
				list_push(rxMsgBuffer, (void*)(&msg));
 8000e72:	a901      	add	r1, sp, #4
 8000e74:	f8d9 0000 	ldr.w	r0, [r9]
				struct message msg = {connfd, buf, n};
 8000e78:	9303      	str	r3, [sp, #12]
 8000e7a:	e9cd 4a01 	strd	r4, sl, [sp, #4]
				list_push(rxMsgBuffer, (void*)(&msg));
 8000e7e:	f000 f8e9 	bl	8001054 <list_push>
		sys_mutex_unlock(conn_mu);
 8000e82:	6830      	ldr	r0, [r6, #0]
 8000e84:	f010 f8cc 	bl	8011020 <sys_mutex_unlock>
	for (int i = 0; i < MAX_CONN_NUM; ++i) {
 8000e88:	42bd      	cmp	r5, r7
 8000e8a:	d1d4      	bne.n	8000e36 <server_handleRecv+0x26>
}
 8000e8c:	b004      	add	sp, #16
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	bf00      	nop
 8000e94:	240003cc 	.word	0x240003cc
 8000e98:	240003cc 	.word	0x240003cc
 8000e9c:	240003f4 	.word	0x240003f4

08000ea0 <server_recv>:
void server_recv(void *arg) {
 8000ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ea2:	b089      	sub	sp, #36	@ 0x24
		tv.tv_sec = 1;
 8000ea4:	2601      	movs	r6, #1
 8000ea6:	2700      	movs	r7, #0
		tv.tv_usec = 0;
 8000ea8:	2400      	movs	r4, #0
 8000eaa:	ad04      	add	r5, sp, #16
		server_setFDs(&rfds);
 8000eac:	a802      	add	r0, sp, #8
 8000eae:	f7ff ff83 	bl	8000db8 <server_setFDs>
		retval = select(MAX_CONN_NUM+1, &rfds, NULL, NULL, &tv);
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	a902      	add	r1, sp, #8
 8000eb6:	2009      	movs	r0, #9
 8000eb8:	461a      	mov	r2, r3
 8000eba:	9500      	str	r5, [sp, #0]
		tv.tv_usec = 0;
 8000ebc:	9406      	str	r4, [sp, #24]
		tv.tv_sec = 1;
 8000ebe:	e9cd 6704 	strd	r6, r7, [sp, #16]
		retval = select(MAX_CONN_NUM+1, &rfds, NULL, NULL, &tv);
 8000ec2:	f008 facd 	bl	8009460 <lwip_select>
		} else if (retval) { // FD_ISSET will have some true fd
 8000ec6:	3001      	adds	r0, #1
 8000ec8:	2801      	cmp	r0, #1
 8000eca:	d9ef      	bls.n	8000eac <server_recv+0xc>
			server_handleRecv(&rfds);
 8000ecc:	a802      	add	r0, sp, #8
 8000ece:	f7ff ff9f 	bl	8000e10 <server_handleRecv>
 8000ed2:	e7eb      	b.n	8000eac <server_recv+0xc>

08000ed4 <server_sendMsg>:
void server_sendMsg(int destIP, char* data, int len) {
 8000ed4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ed8:	4604      	mov	r4, r0
		sys_mutex_lock(conn_mu);
 8000eda:	f8df 8074 	ldr.w	r8, [pc, #116]	@ 8000f50 <server_sendMsg+0x7c>
void server_sendMsg(int destIP, char* data, int len) {
 8000ede:	460e      	mov	r6, r1
 8000ee0:	b085      	sub	sp, #20
	if (destIP == ALL_CONNECTIONS) {
 8000ee2:	1c61      	adds	r1, r4, #1
void server_sendMsg(int destIP, char* data, int len) {
 8000ee4:	4615      	mov	r5, r2
		sys_mutex_lock(conn_mu);
 8000ee6:	f8d8 0000 	ldr.w	r0, [r8]
	if (destIP == ALL_CONNECTIONS) {
 8000eea:	d010      	beq.n	8000f0e <server_sendMsg+0x3a>
		sys_mutex_lock(conn_mu);
 8000eec:	f010 f892 	bl	8011014 <sys_mutex_lock>
				list_push(txMsgBuffer, (void*)(&msg));
 8000ef0:	4b15      	ldr	r3, [pc, #84]	@ (8000f48 <server_sendMsg+0x74>)
 8000ef2:	a901      	add	r1, sp, #4
				struct message msg = {destIP, data, len};
 8000ef4:	9503      	str	r5, [sp, #12]
				list_push(txMsgBuffer, (void*)(&msg));
 8000ef6:	6818      	ldr	r0, [r3, #0]
				struct message msg = {destIP, data, len};
 8000ef8:	e9cd 4601 	strd	r4, r6, [sp, #4]
				list_push(txMsgBuffer, (void*)(&msg));
 8000efc:	f000 f8aa 	bl	8001054 <list_push>
		sys_mutex_unlock(conn_mu);
 8000f00:	f8d8 0000 	ldr.w	r0, [r8]
 8000f04:	f010 f88c 	bl	8011020 <sys_mutex_unlock>
}
 8000f08:	b005      	add	sp, #20
 8000f0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		sys_mutex_lock(conn_mu);
 8000f0e:	4c0f      	ldr	r4, [pc, #60]	@ (8000f4c <server_sendMsg+0x78>)
 8000f10:	f010 f880 	bl	8011014 <sys_mutex_lock>
				list_push(txMsgBuffer, (void*)(&msg));
 8000f14:	f8df 9030 	ldr.w	r9, [pc, #48]	@ 8000f48 <server_sendMsg+0x74>
 8000f18:	f104 0720 	add.w	r7, r4, #32
			if (connections[i] != -1) {
 8000f1c:	f854 3f04 	ldr.w	r3, [r4, #4]!
				list_push(txMsgBuffer, (void*)(&msg));
 8000f20:	a901      	add	r1, sp, #4
			if (connections[i] != -1) {
 8000f22:	1c5a      	adds	r2, r3, #1
 8000f24:	d006      	beq.n	8000f34 <server_sendMsg+0x60>
				list_push(txMsgBuffer, (void*)(&msg));
 8000f26:	f8d9 0000 	ldr.w	r0, [r9]
				struct message msg = {connfd, data, len};
 8000f2a:	9301      	str	r3, [sp, #4]
 8000f2c:	e9cd 6502 	strd	r6, r5, [sp, #8]
				list_push(txMsgBuffer, (void*)(&msg));
 8000f30:	f000 f890 	bl	8001054 <list_push>
		for (int i = 0; i < MAX_CONN_NUM; ++i) {
 8000f34:	42bc      	cmp	r4, r7
 8000f36:	d1f1      	bne.n	8000f1c <server_sendMsg+0x48>
		sys_mutex_unlock(conn_mu);
 8000f38:	f8d8 0000 	ldr.w	r0, [r8]
}
 8000f3c:	b005      	add	sp, #20
 8000f3e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		sys_mutex_unlock(conn_mu);
 8000f42:	f010 b86d 	b.w	8011020 <sys_mutex_unlock>
 8000f46:	bf00      	nop
 8000f48:	240003f0 	.word	0x240003f0
 8000f4c:	240003cc 	.word	0x240003cc
 8000f50:	240003cc 	.word	0x240003cc

08000f54 <server_retrieveMsg>:
	list_pop(rxMsgBuffer, (void*)(msg));
 8000f54:	4b02      	ldr	r3, [pc, #8]	@ (8000f60 <server_retrieveMsg+0xc>)
void server_retrieveMsg(struct message* msg) {
 8000f56:	4601      	mov	r1, r0
	list_pop(rxMsgBuffer, (void*)(msg));
 8000f58:	6818      	ldr	r0, [r3, #0]
 8000f5a:	f000 b8d7 	b.w	800110c <list_pop>
 8000f5e:	bf00      	nop
 8000f60:	240003f4 	.word	0x240003f4

08000f64 <list_create>:
		free_callback(data);
	else
		free(data);
}

List *list_create(int dataSize, CallbackFree free_callback) {
 8000f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	assert(dataSize > 0);
 8000f66:	1e05      	subs	r5, r0, #0
 8000f68:	dd21      	ble.n	8000fae <list_create+0x4a>

	List *list = (List *)malloc(sizeof(List));
	list->count = 0;
 8000f6a:	2700      	movs	r7, #0
	List *list = (List *)malloc(sizeof(List));
 8000f6c:	2020      	movs	r0, #32
 8000f6e:	460e      	mov	r6, r1
 8000f70:	f010 f8c2 	bl	80110f8 <malloc>
	list->data_size = dataSize;
	list->head = calloc(sizeof(Node), 1); // next init to NULL
 8000f74:	2101      	movs	r1, #1
	List *list = (List *)malloc(sizeof(List));
 8000f76:	4604      	mov	r4, r0
	list->data_size = dataSize;
 8000f78:	e9c0 7500 	strd	r7, r5, [r0]
	list->head = calloc(sizeof(Node), 1); // next init to NULL
 8000f7c:	2008      	movs	r0, #8
 8000f7e:	f010 f89f 	bl	80110c0 <calloc>
 8000f82:	4603      	mov	r3, r0
	list->callback_free = free_callback;
 8000f84:	6126      	str	r6, [r4, #16]
	list->mutex = xSemaphoreCreateMutex();
 8000f86:	2001      	movs	r0, #1
	list->head = calloc(sizeof(Node), 1); // next init to NULL
 8000f88:	60a3      	str	r3, [r4, #8]
	list->mutex = xSemaphoreCreateMutex();
 8000f8a:	f004 facb 	bl	8005524 <xQueueCreateMutex>
 8000f8e:	4603      	mov	r3, r0
	list->msgs = xSemaphoreCreateCounting(MAX_QUEUE_SIZE, 0);
 8000f90:	4639      	mov	r1, r7
 8000f92:	2064      	movs	r0, #100	@ 0x64
	list->mutex = xSemaphoreCreateMutex();
 8000f94:	6163      	str	r3, [r4, #20]
	list->msgs = xSemaphoreCreateCounting(MAX_QUEUE_SIZE, 0);
 8000f96:	f004 f9b1 	bl	80052fc <xQueueCreateCountingSemaphore>
	list->remainingSpace = xSemaphoreCreateCounting(MAX_QUEUE_SIZE, MAX_QUEUE_SIZE);
 8000f9a:	2164      	movs	r1, #100	@ 0x64
	list->msgs = xSemaphoreCreateCounting(MAX_QUEUE_SIZE, 0);
 8000f9c:	4603      	mov	r3, r0
	list->remainingSpace = xSemaphoreCreateCounting(MAX_QUEUE_SIZE, MAX_QUEUE_SIZE);
 8000f9e:	4608      	mov	r0, r1
	list->msgs = xSemaphoreCreateCounting(MAX_QUEUE_SIZE, 0);
 8000fa0:	61a3      	str	r3, [r4, #24]
	list->remainingSpace = xSemaphoreCreateCounting(MAX_QUEUE_SIZE, MAX_QUEUE_SIZE);
 8000fa2:	f004 f9ab 	bl	80052fc <xQueueCreateCountingSemaphore>
 8000fa6:	4603      	mov	r3, r0

	return list;
}
 8000fa8:	4620      	mov	r0, r4
	list->remainingSpace = xSemaphoreCreateCounting(MAX_QUEUE_SIZE, MAX_QUEUE_SIZE);
 8000faa:	61e3      	str	r3, [r4, #28]
}
 8000fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	assert(dataSize > 0);
 8000fae:	4b03      	ldr	r3, [pc, #12]	@ (8000fbc <list_create+0x58>)
 8000fb0:	2120      	movs	r1, #32
 8000fb2:	4a03      	ldr	r2, [pc, #12]	@ (8000fc0 <list_create+0x5c>)
 8000fb4:	4803      	ldr	r0, [pc, #12]	@ (8000fc4 <list_create+0x60>)
 8000fb6:	f010 f865 	bl	8011084 <__assert_func>
 8000fba:	bf00      	nop
 8000fbc:	0801236c 	.word	0x0801236c
 8000fc0:	080123dc 	.word	0x080123dc
 8000fc4:	0801237c 	.word	0x0801237c

08000fc8 <list_add>:

	free(list);
}


void list_add(List *list, void *data) { // push to front
 8000fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	assert(list != NULL);
 8000fcc:	b368      	cbz	r0, 800102a <list_add+0x62>

	xSemaphoreTake(list->remainingSpace, portMAX_DELAY); // Only add to queue if there is space
 8000fce:	4604      	mov	r4, r0
 8000fd0:	460e      	mov	r6, r1
 8000fd2:	69c0      	ldr	r0, [r0, #28]
 8000fd4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fd8:	f004 fc38 	bl	800584c <xQueueSemaphoreTake>

	xSemaphoreTake(list->mutex, portMAX_DELAY); // Lock mutex
 8000fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe0:	6960      	ldr	r0, [r4, #20]
 8000fe2:	f004 fc33 	bl	800584c <xQueueSemaphoreTake>

	assert(data != NULL);
 8000fe6:	b336      	cbz	r6, 8001036 <list_add+0x6e>

	Node *newNode = malloc(sizeof(Node));
 8000fe8:	2008      	movs	r0, #8
 8000fea:	f010 f885 	bl	80110f8 <malloc>
	newNode->data = malloc(list->data_size);
 8000fee:	6867      	ldr	r7, [r4, #4]
	Node *newNode = malloc(sizeof(Node));
 8000ff0:	4605      	mov	r5, r0
	newNode->data = malloc(list->data_size);
 8000ff2:	4638      	mov	r0, r7
 8000ff4:	f010 f880 	bl	80110f8 <malloc>
	memcpy(newNode->data, data, list->data_size);
 8000ff8:	463a      	mov	r2, r7
 8000ffa:	4631      	mov	r1, r6
	newNode->data = malloc(list->data_size);
 8000ffc:	6028      	str	r0, [r5, #0]
	memcpy(newNode->data, data, list->data_size);
 8000ffe:	f010 fc7e 	bl	80118fe <memcpy>

	newNode->next = list->head;
	list->head = newNode;
	list->count++;
 8001002:	6822      	ldr	r2, [r4, #0]
	newNode->next = list->head;
 8001004:	68a1      	ldr	r1, [r4, #8]

	xSemaphoreGive(list->mutex); // Unlock mutex
 8001006:	2300      	movs	r3, #0
	list->count++;
 8001008:	1c50      	adds	r0, r2, #1
	list->head = newNode;
 800100a:	60a5      	str	r5, [r4, #8]
	xSemaphoreGive(list->mutex); // Unlock mutex
 800100c:	461a      	mov	r2, r3
	newNode->next = list->head;
 800100e:	6069      	str	r1, [r5, #4]
	list->count++;
 8001010:	6020      	str	r0, [r4, #0]
	xSemaphoreGive(list->mutex); // Unlock mutex
 8001012:	4619      	mov	r1, r3
 8001014:	6960      	ldr	r0, [r4, #20]
 8001016:	f004 f98f 	bl	8005338 <xQueueGenericSend>

	xSemaphoreGive(list->msgs); // Notify waiting consumers
 800101a:	2300      	movs	r3, #0
 800101c:	69a0      	ldr	r0, [r4, #24]
 800101e:	461a      	mov	r2, r3
 8001020:	4619      	mov	r1, r3
}
 8001022:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	xSemaphoreGive(list->msgs); // Notify waiting consumers
 8001026:	f004 b987 	b.w	8005338 <xQueueGenericSend>
	assert(list != NULL);
 800102a:	4b06      	ldr	r3, [pc, #24]	@ (8001044 <list_add+0x7c>)
 800102c:	2145      	movs	r1, #69	@ 0x45
 800102e:	4a06      	ldr	r2, [pc, #24]	@ (8001048 <list_add+0x80>)
 8001030:	4806      	ldr	r0, [pc, #24]	@ (800104c <list_add+0x84>)
 8001032:	f010 f827 	bl	8011084 <__assert_func>
	assert(data != NULL);
 8001036:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <list_add+0x88>)
 8001038:	214b      	movs	r1, #75	@ 0x4b
 800103a:	4a03      	ldr	r2, [pc, #12]	@ (8001048 <list_add+0x80>)
 800103c:	4803      	ldr	r0, [pc, #12]	@ (800104c <list_add+0x84>)
 800103e:	f010 f821 	bl	8011084 <__assert_func>
 8001042:	bf00      	nop
 8001044:	08012394 	.word	0x08012394
 8001048:	080123d0 	.word	0x080123d0
 800104c:	0801237c 	.word	0x0801237c
 8001050:	080123a4 	.word	0x080123a4

08001054 <list_push>:
	list_add(list, data); // push to front
 8001054:	f7ff bfb8 	b.w	8000fc8 <list_add>

08001058 <list_remove>:

void list_remove(List *list, void* data) {
 8001058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	assert(list != NULL);
 800105c:	2800      	cmp	r0, #0
 800105e:	d040      	beq.n	80010e2 <list_remove+0x8a>

	xSemaphoreTake(list->msgs, portMAX_DELAY); // Remove message when at least one exists
 8001060:	4605      	mov	r5, r0
 8001062:	460f      	mov	r7, r1
 8001064:	6980      	ldr	r0, [r0, #24]
 8001066:	f04f 31ff 	mov.w	r1, #4294967295
 800106a:	f004 fbef 	bl	800584c <xQueueSemaphoreTake>

	xSemaphoreTake(list->mutex, portMAX_DELAY); // Lock mutex
 800106e:	f04f 31ff 	mov.w	r1, #4294967295
 8001072:	6968      	ldr	r0, [r5, #20]
 8001074:	f004 fbea 	bl	800584c <xQueueSemaphoreTake>

	assert(list->count > 0);
 8001078:	682b      	ldr	r3, [r5, #0]
 800107a:	2b00      	cmp	r3, #0
 800107c:	dd37      	ble.n	80010ee <list_remove+0x96>

	Node *prev_node = NULL;
	Node *curr_node = list->head;
 800107e:	68ac      	ldr	r4, [r5, #8]
	Node *prev_node = NULL;
 8001080:	2600      	movs	r6, #0

	// Condition OK because count > 0
	while (curr_node->next->next != NULL){ // look for last node in list
 8001082:	6863      	ldr	r3, [r4, #4]
 8001084:	e001      	b.n	800108a <list_remove+0x32>
 8001086:	4626      	mov	r6, r4
 8001088:	4614      	mov	r4, r2
 800108a:	461a      	mov	r2, r3
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d1f9      	bne.n	8001086 <list_remove+0x2e>
		prev_node = curr_node;
		curr_node = prev_node->next;
	}

	memcpy(data, curr_node->data, list->data_size);
 8001092:	686a      	ldr	r2, [r5, #4]
 8001094:	4638      	mov	r0, r7
 8001096:	6821      	ldr	r1, [r4, #0]
 8001098:	f010 fc31 	bl	80118fe <memcpy>

	if (prev_node != NULL) {
		prev_node->next = curr_node->next;
 800109c:	6863      	ldr	r3, [r4, #4]
	if (prev_node != NULL) {
 800109e:	b1c6      	cbz	r6, 80010d2 <list_remove+0x7a>
		prev_node->next = curr_node->next;
 80010a0:	6073      	str	r3, [r6, #4]
	} else {
		list->head = curr_node->next;
	}
	free_node_data(list->callback_free, curr_node->data);
 80010a2:	692b      	ldr	r3, [r5, #16]
 80010a4:	6820      	ldr	r0, [r4, #0]
	if (free_callback != NULL)
 80010a6:	b1cb      	cbz	r3, 80010dc <list_remove+0x84>
		free_callback(data);
 80010a8:	4798      	blx	r3
	free(curr_node);
 80010aa:	4620      	mov	r0, r4
 80010ac:	f010 f82c 	bl	8011108 <free>

	list->count--;
 80010b0:	682a      	ldr	r2, [r5, #0]

	xSemaphoreGive(list->mutex); // Unlock mutex
 80010b2:	2300      	movs	r3, #0
	list->count--;
 80010b4:	1e50      	subs	r0, r2, #1
	xSemaphoreGive(list->mutex); // Unlock mutex
 80010b6:	4619      	mov	r1, r3
 80010b8:	461a      	mov	r2, r3
	list->count--;
 80010ba:	6028      	str	r0, [r5, #0]
	xSemaphoreGive(list->mutex); // Unlock mutex
 80010bc:	6968      	ldr	r0, [r5, #20]
 80010be:	f004 f93b 	bl	8005338 <xQueueGenericSend>

	xSemaphoreGive(list->remainingSpace); // Notify waiting producers
 80010c2:	2300      	movs	r3, #0
 80010c4:	69e8      	ldr	r0, [r5, #28]
 80010c6:	461a      	mov	r2, r3
 80010c8:	4619      	mov	r1, r3
}
 80010ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	xSemaphoreGive(list->remainingSpace); // Notify waiting producers
 80010ce:	f004 b933 	b.w	8005338 <xQueueGenericSend>
		list->head = curr_node->next;
 80010d2:	60ab      	str	r3, [r5, #8]
	free_node_data(list->callback_free, curr_node->data);
 80010d4:	692b      	ldr	r3, [r5, #16]
 80010d6:	6820      	ldr	r0, [r4, #0]
	if (free_callback != NULL)
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d1e5      	bne.n	80010a8 <list_remove+0x50>
		free(data);
 80010dc:	f010 f814 	bl	8011108 <free>
 80010e0:	e7e3      	b.n	80010aa <list_remove+0x52>
	assert(list != NULL);
 80010e2:	4b06      	ldr	r3, [pc, #24]	@ (80010fc <list_remove+0xa4>)
 80010e4:	215c      	movs	r1, #92	@ 0x5c
 80010e6:	4a06      	ldr	r2, [pc, #24]	@ (8001100 <list_remove+0xa8>)
 80010e8:	4806      	ldr	r0, [pc, #24]	@ (8001104 <list_remove+0xac>)
 80010ea:	f00f ffcb 	bl	8011084 <__assert_func>
	assert(list->count > 0);
 80010ee:	4b06      	ldr	r3, [pc, #24]	@ (8001108 <list_remove+0xb0>)
 80010f0:	2162      	movs	r1, #98	@ 0x62
 80010f2:	4a03      	ldr	r2, [pc, #12]	@ (8001100 <list_remove+0xa8>)
 80010f4:	4803      	ldr	r0, [pc, #12]	@ (8001104 <list_remove+0xac>)
 80010f6:	f00f ffc5 	bl	8011084 <__assert_func>
 80010fa:	bf00      	nop
 80010fc:	08012394 	.word	0x08012394
 8001100:	080123c4 	.word	0x080123c4
 8001104:	0801237c 	.word	0x0801237c
 8001108:	080123b4 	.word	0x080123b4

0800110c <list_pop>:
	list_remove(list, data); // pop from end
 800110c:	f7ff bfa4 	b.w	8001058 <list_remove>

08001110 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001110:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001148 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001114:	f7ff fcaa 	bl	8000a6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001118:	480c      	ldr	r0, [pc, #48]	@ (800114c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800111a:	490d      	ldr	r1, [pc, #52]	@ (8001150 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800111c:	4a0d      	ldr	r2, [pc, #52]	@ (8001154 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800111e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001120:	e002      	b.n	8001128 <LoopCopyDataInit>

08001122 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001122:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001124:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001126:	3304      	adds	r3, #4

08001128 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001128:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800112a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800112c:	d3f9      	bcc.n	8001122 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800112e:	4a0a      	ldr	r2, [pc, #40]	@ (8001158 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001130:	4c0a      	ldr	r4, [pc, #40]	@ (800115c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001132:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001134:	e001      	b.n	800113a <LoopFillZerobss>

08001136 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001136:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001138:	3204      	adds	r2, #4

0800113a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800113a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800113c:	d3fb      	bcc.n	8001136 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800113e:	f010 fbb7 	bl	80118b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001142:	f7ff f9d9 	bl	80004f8 <main>
  bx  lr
 8001146:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001148:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800114c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001150:	2400008c 	.word	0x2400008c
  ldr r2, =_sidata
 8001154:	08015110 	.word	0x08015110
  ldr r2, =_sbss
 8001158:	24000090 	.word	0x24000090
  ldr r4, =_ebss
 800115c:	2400e924 	.word	0x2400e924

08001160 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001160:	e7fe      	b.n	8001160 <ADC3_IRQHandler>
	...

08001164 <LAN8742_RegisterBusIO>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001164:	b188      	cbz	r0, 800118a <LAN8742_RegisterBusIO+0x26>
 8001166:	68ca      	ldr	r2, [r1, #12]
 8001168:	b17a      	cbz	r2, 800118a <LAN8742_RegisterBusIO+0x26>
{
 800116a:	b430      	push	{r4, r5}
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800116c:	688c      	ldr	r4, [r1, #8]
 800116e:	b17c      	cbz	r4, 8001190 <LAN8742_RegisterBusIO+0x2c>
 8001170:	690d      	ldr	r5, [r1, #16]
 8001172:	b16d      	cbz	r5, 8001190 <LAN8742_RegisterBusIO+0x2c>
 8001174:	4603      	mov	r3, r0
  {
    return LAN8742_STATUS_ERROR;
  }

  pObj->IO.Init = ioctx->Init;
 8001176:	e9d1 0100 	ldrd	r0, r1, [r1]
  pObj->IO.DeInit = ioctx->DeInit;
  pObj->IO.ReadReg = ioctx->ReadReg;
 800117a:	615a      	str	r2, [r3, #20]
  pObj->IO.Init = ioctx->Init;
 800117c:	6098      	str	r0, [r3, #8]
  pObj->IO.WriteReg = ioctx->WriteReg;
  pObj->IO.GetTick = ioctx->GetTick;

  return LAN8742_STATUS_OK;
 800117e:	2000      	movs	r0, #0
  pObj->IO.GetTick = ioctx->GetTick;
 8001180:	619d      	str	r5, [r3, #24]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001182:	e9c3 1403 	strd	r1, r4, [r3, #12]
}
 8001186:	bc30      	pop	{r4, r5}
 8001188:	4770      	bx	lr
    return LAN8742_STATUS_ERROR;
 800118a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800118e:	4770      	bx	lr
    return LAN8742_STATUS_ERROR;
 8001190:	f04f 30ff 	mov.w	r0, #4294967295
 8001194:	e7f7      	b.n	8001186 <LAN8742_RegisterBusIO+0x22>
 8001196:	bf00      	nop

08001198 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001198:	b570      	push	{r4, r5, r6, lr}
   uint32_t regvalue = 0, addr = 0;
 800119a:	2300      	movs	r3, #0
 {
 800119c:	b082      	sub	sp, #8
   int32_t status = LAN8742_STATUS_OK;

   if(pObj->Is_Initialized == 0)
 800119e:	6844      	ldr	r4, [r0, #4]
   uint32_t regvalue = 0, addr = 0;
 80011a0:	9301      	str	r3, [sp, #4]
   if(pObj->Is_Initialized == 0)
 80011a2:	b11c      	cbz	r4, 80011ac <LAN8742_Init+0x14>
   int32_t status = LAN8742_STATUS_OK;
 80011a4:	2600      	movs	r6, #0
       pObj->Is_Initialized = 1;
     }
   }

   return status;
 }
 80011a6:	4630      	mov	r0, r6
 80011a8:	b002      	add	sp, #8
 80011aa:	bd70      	pop	{r4, r5, r6, pc}
     if(pObj->IO.Init != 0)
 80011ac:	6883      	ldr	r3, [r0, #8]
 80011ae:	4605      	mov	r5, r0
 80011b0:	b103      	cbz	r3, 80011b4 <LAN8742_Init+0x1c>
       pObj->IO.Init();
 80011b2:	4798      	blx	r3
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80011b4:	2320      	movs	r3, #32
   int32_t status = LAN8742_STATUS_OK;
 80011b6:	2600      	movs	r6, #0
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80011b8:	602b      	str	r3, [r5, #0]
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80011ba:	e007      	b.n	80011cc <LAN8742_Init+0x34>
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80011bc:	9b01      	ldr	r3, [sp, #4]
 80011be:	f003 031f 	and.w	r3, r3, #31
 80011c2:	42a3      	cmp	r3, r4
 80011c4:	d015      	beq.n	80011f2 <LAN8742_Init+0x5a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80011c6:	3401      	adds	r4, #1
 80011c8:	2c20      	cmp	r4, #32
 80011ca:	d00b      	beq.n	80011e4 <LAN8742_Init+0x4c>
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80011cc:	4620      	mov	r0, r4
 80011ce:	696b      	ldr	r3, [r5, #20]
 80011d0:	aa01      	add	r2, sp, #4
 80011d2:	2112      	movs	r1, #18
 80011d4:	4798      	blx	r3
 80011d6:	2800      	cmp	r0, #0
 80011d8:	daf0      	bge.n	80011bc <LAN8742_Init+0x24>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80011da:	3401      	adds	r4, #1
         status = LAN8742_STATUS_READ_ERROR;
 80011dc:	f06f 0604 	mvn.w	r6, #4
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80011e0:	2c20      	cmp	r4, #32
 80011e2:	d1f3      	bne.n	80011cc <LAN8742_Init+0x34>
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80011e4:	682b      	ldr	r3, [r5, #0]
 80011e6:	2b1f      	cmp	r3, #31
 80011e8:	d807      	bhi.n	80011fa <LAN8742_Init+0x62>
     if(status == LAN8742_STATUS_OK)
 80011ea:	b11e      	cbz	r6, 80011f4 <LAN8742_Init+0x5c>
 }
 80011ec:	4630      	mov	r0, r6
 80011ee:	b002      	add	sp, #8
 80011f0:	bd70      	pop	{r4, r5, r6, pc}
         pObj->DevAddr = addr;
 80011f2:	602c      	str	r4, [r5, #0]
       pObj->Is_Initialized = 1;
 80011f4:	2301      	movs	r3, #1
 80011f6:	606b      	str	r3, [r5, #4]
 80011f8:	e7d4      	b.n	80011a4 <LAN8742_Init+0xc>
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80011fa:	f06f 0602 	mvn.w	r6, #2
   return status;
 80011fe:	e7d2      	b.n	80011a6 <LAN8742_Init+0xe>

08001200 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001200:	b530      	push	{r4, r5, lr}
  uint32_t readval = 0;
 8001202:	2500      	movs	r5, #0
{
 8001204:	b083      	sub	sp, #12

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001206:	6943      	ldr	r3, [r0, #20]
{
 8001208:	4604      	mov	r4, r0
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800120a:	aa01      	add	r2, sp, #4
 800120c:	2101      	movs	r1, #1
 800120e:	6800      	ldr	r0, [r0, #0]
  uint32_t readval = 0;
 8001210:	9501      	str	r5, [sp, #4]
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001212:	4798      	blx	r3
 8001214:	42a8      	cmp	r0, r5
 8001216:	db3d      	blt.n	8001294 <LAN8742_GetLinkState+0x94>
  {
    return LAN8742_STATUS_READ_ERROR;
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001218:	6963      	ldr	r3, [r4, #20]
 800121a:	aa01      	add	r2, sp, #4
 800121c:	2101      	movs	r1, #1
 800121e:	6820      	ldr	r0, [r4, #0]
 8001220:	4798      	blx	r3
 8001222:	2800      	cmp	r0, #0
 8001224:	db36      	blt.n	8001294 <LAN8742_GetLinkState+0x94>
  {
    return LAN8742_STATUS_READ_ERROR;
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001226:	9b01      	ldr	r3, [sp, #4]
 8001228:	075b      	lsls	r3, r3, #29
 800122a:	d52a      	bpl.n	8001282 <LAN8742_GetLinkState+0x82>
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800122c:	6963      	ldr	r3, [r4, #20]
 800122e:	aa01      	add	r2, sp, #4
 8001230:	4629      	mov	r1, r5
 8001232:	6820      	ldr	r0, [r4, #0]
 8001234:	4798      	blx	r3
 8001236:	2800      	cmp	r0, #0
 8001238:	db2c      	blt.n	8001294 <LAN8742_GetLinkState+0x94>
  {
    return LAN8742_STATUS_READ_ERROR;
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800123a:	9b01      	ldr	r3, [sp, #4]
 800123c:	04dd      	lsls	r5, r3, #19
 800123e:	d514      	bpl.n	800126a <LAN8742_GetLinkState+0x6a>
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001240:	6963      	ldr	r3, [r4, #20]
 8001242:	aa01      	add	r2, sp, #4
 8001244:	211f      	movs	r1, #31
 8001246:	6820      	ldr	r0, [r4, #0]
 8001248:	4798      	blx	r3
 800124a:	2800      	cmp	r0, #0
 800124c:	db22      	blt.n	8001294 <LAN8742_GetLinkState+0x94>
    {
      return LAN8742_STATUS_READ_ERROR;
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800124e:	9b01      	ldr	r3, [sp, #4]
 8001250:	04da      	lsls	r2, r3, #19
 8001252:	d51d      	bpl.n	8001290 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001254:	f003 031c 	and.w	r3, r3, #28
 8001258:	2b18      	cmp	r3, #24
 800125a:	d017      	beq.n	800128c <LAN8742_GetLinkState+0x8c>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800125c:	2b08      	cmp	r3, #8
 800125e:	d013      	beq.n	8001288 <LAN8742_GetLinkState+0x88>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001260:	2b14      	cmp	r3, #20
 8001262:	d10b      	bne.n	800127c <LAN8742_GetLinkState+0x7c>
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001264:	2004      	movs	r0, #4
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
    }
  }
}
 8001266:	b003      	add	sp, #12
 8001268:	bd30      	pop	{r4, r5, pc}
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 800126a:	f403 5204 	and.w	r2, r3, #8448	@ 0x2100
 800126e:	f5b2 5f04 	cmp.w	r2, #8448	@ 0x2100
 8001272:	d00b      	beq.n	800128c <LAN8742_GetLinkState+0x8c>
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001274:	0498      	lsls	r0, r3, #18
 8001276:	d407      	bmi.n	8001288 <LAN8742_GetLinkState+0x88>
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001278:	05d9      	lsls	r1, r3, #23
 800127a:	d4f3      	bmi.n	8001264 <LAN8742_GetLinkState+0x64>
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800127c:	2005      	movs	r0, #5
}
 800127e:	b003      	add	sp, #12
 8001280:	bd30      	pop	{r4, r5, pc}
    return LAN8742_STATUS_LINK_DOWN;
 8001282:	2001      	movs	r0, #1
}
 8001284:	b003      	add	sp, #12
 8001286:	bd30      	pop	{r4, r5, pc}
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001288:	2003      	movs	r0, #3
 800128a:	e7f8      	b.n	800127e <LAN8742_GetLinkState+0x7e>
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800128c:	2002      	movs	r0, #2
 800128e:	e7f6      	b.n	800127e <LAN8742_GetLinkState+0x7e>
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001290:	2006      	movs	r0, #6
 8001292:	e7f4      	b.n	800127e <LAN8742_GetLinkState+0x7e>
    return LAN8742_STATUS_READ_ERROR;
 8001294:	f06f 0004 	mvn.w	r0, #4
 8001298:	e7f1      	b.n	800127e <LAN8742_GetLinkState+0x7e>
 800129a:	bf00      	nop

0800129c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800129c:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800129e:	2003      	movs	r0, #3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012a0:	4c12      	ldr	r4, [pc, #72]	@ (80012ec <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012a2:	f000 f847 	bl	8001334 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012a6:	f001 fd21 	bl	8002cec <HAL_RCC_GetSysClockFreq>
 80012aa:	4b11      	ldr	r3, [pc, #68]	@ (80012f0 <HAL_Init+0x54>)
 80012ac:	4911      	ldr	r1, [pc, #68]	@ (80012f4 <HAL_Init+0x58>)
 80012ae:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012b0:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012b2:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012b6:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012ba:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012bc:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012be:	f002 021f 	and.w	r2, r2, #31
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80012c2:	490d      	ldr	r1, [pc, #52]	@ (80012f8 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012c4:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012c8:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012ca:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 80012ce:	6008      	str	r0, [r1, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012d0:	200f      	movs	r0, #15
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012d2:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012d4:	f7ff fb04 	bl	80008e0 <HAL_InitTick>
 80012d8:	b110      	cbz	r0, 80012e0 <HAL_Init+0x44>
  {
    return HAL_ERROR;
 80012da:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
 80012dc:	4620      	mov	r0, r4
 80012de:	bd10      	pop	{r4, pc}
 80012e0:	4604      	mov	r4, r0
  HAL_MspInit();
 80012e2:	f7ff fab7 	bl	8000854 <HAL_MspInit>
}
 80012e6:	4620      	mov	r0, r4
 80012e8:	bd10      	pop	{r4, pc}
 80012ea:	bf00      	nop
 80012ec:	24000000 	.word	0x24000000
 80012f0:	58024400 	.word	0x58024400
 80012f4:	08012318 	.word	0x08012318
 80012f8:	24000004 	.word	0x24000004

080012fc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80012fc:	4a03      	ldr	r2, [pc, #12]	@ (800130c <HAL_IncTick+0x10>)
 80012fe:	4b04      	ldr	r3, [pc, #16]	@ (8001310 <HAL_IncTick+0x14>)
 8001300:	6811      	ldr	r1, [r2, #0]
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	440b      	add	r3, r1
 8001306:	6013      	str	r3, [r2, #0]
}
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	240003f8 	.word	0x240003f8
 8001310:	24000008 	.word	0x24000008

08001314 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001314:	4b01      	ldr	r3, [pc, #4]	@ (800131c <HAL_GetTick+0x8>)
 8001316:	6818      	ldr	r0, [r3, #0]
}
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	240003f8 	.word	0x240003f8

08001320 <HAL_SYSCFG_ETHInterfaceSelect>:
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001320:	4a03      	ldr	r2, [pc, #12]	@ (8001330 <HAL_SYSCFG_ETHInterfaceSelect+0x10>)
 8001322:	6853      	ldr	r3, [r2, #4]
 8001324:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 8001328:	4303      	orrs	r3, r0
 800132a:	6053      	str	r3, [r2, #4]
}
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	58000400 	.word	0x58000400

08001334 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001334:	4906      	ldr	r1, [pc, #24]	@ (8001350 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001336:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800133a:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 800133c:	4b05      	ldr	r3, [pc, #20]	@ (8001354 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800133e:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001340:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001344:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001348:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 800134a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800134c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800134e:	4770      	bx	lr
 8001350:	e000ed00 	.word	0xe000ed00
 8001354:	05fa0000 	.word	0x05fa0000

08001358 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001358:	4b1a      	ldr	r3, [pc, #104]	@ (80013c4 <HAL_NVIC_SetPriority+0x6c>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001360:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001362:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001366:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800136a:	f1be 0f04 	cmp.w	lr, #4
 800136e:	bf28      	it	cs
 8001370:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001374:	f1bc 0f06 	cmp.w	ip, #6
 8001378:	d91a      	bls.n	80013b0 <HAL_NVIC_SetPriority+0x58>
 800137a:	f1a3 0c03 	sub.w	ip, r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800137e:	f04f 33ff 	mov.w	r3, #4294967295
 8001382:	fa03 f30c 	lsl.w	r3, r3, ip
 8001386:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800138a:	f04f 33ff 	mov.w	r3, #4294967295
  if ((int32_t)(IRQn) >= 0)
 800138e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001390:	fa03 f30e 	lsl.w	r3, r3, lr
 8001394:	ea21 0303 	bic.w	r3, r1, r3
 8001398:	fa03 f30c 	lsl.w	r3, r3, ip
 800139c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80013a4:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80013a6:	db06      	blt.n	80013b6 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a8:	4a07      	ldr	r2, [pc, #28]	@ (80013c8 <HAL_NVIC_SetPriority+0x70>)
 80013aa:	5413      	strb	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80013ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80013b0:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013b2:	4694      	mov	ip, r2
 80013b4:	e7e9      	b.n	800138a <HAL_NVIC_SetPriority+0x32>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b6:	f000 000f 	and.w	r0, r0, #15
 80013ba:	4a04      	ldr	r2, [pc, #16]	@ (80013cc <HAL_NVIC_SetPriority+0x74>)
 80013bc:	5413      	strb	r3, [r2, r0]
 80013be:	f85d fb04 	ldr.w	pc, [sp], #4
 80013c2:	bf00      	nop
 80013c4:	e000ed00 	.word	0xe000ed00
 80013c8:	e000e400 	.word	0xe000e400
 80013cc:	e000ed14 	.word	0xe000ed14

080013d0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80013d0:	2800      	cmp	r0, #0
 80013d2:	db07      	blt.n	80013e4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013d4:	2301      	movs	r3, #1
 80013d6:	f000 011f 	and.w	r1, r0, #31
 80013da:	4a03      	ldr	r2, [pc, #12]	@ (80013e8 <HAL_NVIC_EnableIRQ+0x18>)
 80013dc:	0940      	lsrs	r0, r0, #5
 80013de:	408b      	lsls	r3, r1
 80013e0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	e000e100 	.word	0xe000e100

080013ec <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80013ec:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80013f0:	4b04      	ldr	r3, [pc, #16]	@ (8001404 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80013f2:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80013f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80013f6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80013fa:	625a      	str	r2, [r3, #36]	@ 0x24
  MPU->CTRL = 0;
 80013fc:	f8c3 1094 	str.w	r1, [r3, #148]	@ 0x94
}
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001408:	4b06      	ldr	r3, [pc, #24]	@ (8001424 <HAL_MPU_Enable+0x1c>)
 800140a:	f040 0001 	orr.w	r0, r0, #1
 800140e:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001412:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001414:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001418:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800141a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800141e:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001422:	4770      	bx	lr
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001428:	4a16      	ldr	r2, [pc, #88]	@ (8001484 <HAL_MPU_ConfigRegion+0x5c>)
 800142a:	7843      	ldrb	r3, [r0, #1]
 800142c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001430:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 8001434:	f023 0301 	bic.w	r3, r3, #1
 8001438:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800143c:	6843      	ldr	r3, [r0, #4]
 800143e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001442:	7ac3      	ldrb	r3, [r0, #11]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001444:	f890 c00c 	ldrb.w	ip, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001448:	061b      	lsls	r3, r3, #24
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800144a:	7801      	ldrb	r1, [r0, #0]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800144c:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001450:	f890 c00a 	ldrb.w	ip, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001454:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001456:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001458:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800145c:	f890 c00e 	ldrb.w	ip, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001460:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001464:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001466:	ea43 434c 	orr.w	r3, r3, ip, lsl #17
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800146a:	f890 c009 	ldrb.w	ip, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800146e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001472:	7a01      	ldrb	r1, [r0, #8]
 8001474:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8001478:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800147c:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001488:	b430      	push	{r4, r5}
               macconf->BackOffLimit |
               ((uint32_t)macconf->DeferralCheck << 4) |
               macconf->PreambleLength);

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800148a:	688b      	ldr	r3, [r1, #8]
 800148c:	680d      	ldr	r5, [r1, #0]
 800148e:	694c      	ldr	r4, [r1, #20]
 8001490:	432b      	orrs	r3, r5
 8001492:	6802      	ldr	r2, [r0, #0]
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001494:	f891 c011 	ldrb.w	ip, [r1, #17]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001498:	4323      	orrs	r3, r4
 800149a:	698c      	ldr	r4, [r1, #24]
 800149c:	6810      	ldr	r0, [r2, #0]
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800149e:	fabc fc8c 	clz	ip, ip
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80014a2:	4323      	orrs	r3, r4
 80014a4:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80014a6:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
               macconf->GiantPacketSizeLimit);

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80014aa:	4d52      	ldr	r5, [pc, #328]	@ (80015f4 <ETH_SetMACConfig+0x16c>)
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80014ac:	4323      	orrs	r3, r4
 80014ae:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 80014b0:	4323      	orrs	r3, r4
 80014b2:	4c51      	ldr	r4, [pc, #324]	@ (80015f8 <ETH_SetMACConfig+0x170>)
 80014b4:	4020      	ands	r0, r4
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80014b6:	790c      	ldrb	r4, [r1, #4]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80014b8:	4303      	orrs	r3, r0
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80014ba:	7b48      	ldrb	r0, [r1, #13]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80014bc:	ea43 63c4 	orr.w	r3, r3, r4, lsl #27
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80014c0:	7b0c      	ldrb	r4, [r1, #12]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80014c2:	ea43 53c4 	orr.w	r3, r3, r4, lsl #23
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80014c6:	7b8c      	ldrb	r4, [r1, #14]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80014c8:	ea43 5380 	orr.w	r3, r3, r0, lsl #22
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80014cc:	7bc8      	ldrb	r0, [r1, #15]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80014ce:	ea43 5344 	orr.w	r3, r3, r4, lsl #21
               ((uint32_t)macconf->JumboPacket << 16) |
 80014d2:	7c8c      	ldrb	r4, [r1, #18]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80014d4:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
               ((uint32_t)macconf->LoopbackMode << 12) |
 80014d8:	7f08      	ldrb	r0, [r1, #28]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80014da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80014de:	7f4c      	ldrb	r4, [r1, #29]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80014e0:	ea43 3300 	orr.w	r3, r3, r0, lsl #12
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80014e4:	7fc8      	ldrb	r0, [r1, #31]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80014e6:	ea43 23c4 	orr.w	r3, r3, r4, lsl #11
               ((uint32_t)macconf->DeferralCheck << 4) |
 80014ea:	f891 4028 	ldrb.w	r4, [r1, #40]	@ 0x28
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80014ee:	ea43 2340 	orr.w	r3, r3, r0, lsl #9
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80014f2:	7c08      	ldrb	r0, [r1, #16]
 80014f4:	fab0 f080 	clz	r0, r0
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80014f8:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80014fc:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80014fe:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001500:	ea43 43c0 	orr.w	r3, r3, r0, lsl #19
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001504:	7f88      	ldrb	r0, [r1, #30]
 8001506:	fab0 f080 	clz	r0, r0
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800150a:	ea43 434c 	orr.w	r3, r3, ip, lsl #17
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800150e:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001510:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001514:	f891 0020 	ldrb.w	r0, [r1, #32]
 8001518:	fab0 f080 	clz	r0, r0
 800151c:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800151e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001522:	6b48      	ldr	r0, [r1, #52]	@ 0x34
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001524:	6013      	str	r3, [r2, #0]
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001526:	6853      	ldr	r3, [r2, #4]
 8001528:	402b      	ands	r3, r5
               macconf->PauseLowThreshold |
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
               (macconf->PauseTime << 16));

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800152a:	f64f 750d 	movw	r5, #65293	@ 0xff0d
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800152e:	ea43 6344 	orr.w	r3, r3, r4, lsl #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001532:	f891 4038 	ldrb.w	r4, [r1, #56]	@ 0x38
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001536:	4303      	orrs	r3, r0
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001538:	f891 0030 	ldrb.w	r0, [r1, #48]	@ 0x30
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800153c:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001540:	f891 4031 	ldrb.w	r4, [r1, #49]	@ 0x31
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001544:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001548:	f891 0032 	ldrb.w	r0, [r1, #50]	@ 0x32
 800154c:	fab0 f080 	clz	r0, r0
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001550:	ea43 4344 	orr.w	r3, r3, r4, lsl #17
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001554:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001556:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800155a:	4828      	ldr	r0, [pc, #160]	@ (80015fc <ETH_SetMACConfig+0x174>)
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800155c:	6053      	str	r3, [r2, #4]
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800155e:	68d3      	ldr	r3, [r2, #12]
               (macconf->PauseTime << 16));
 8001560:	6c8c      	ldr	r4, [r1, #72]	@ 0x48
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001562:	4018      	ands	r0, r3
 8001564:	6c4b      	ldr	r3, [r1, #68]	@ 0x44
 8001566:	4318      	orrs	r0, r3
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001568:	f891 3040 	ldrb.w	r3, [r1, #64]	@ 0x40
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800156c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8001570:	60d0      	str	r0, [r2, #12]
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001572:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8001574:	6d08      	ldr	r0, [r1, #80]	@ 0x50
 8001576:	402b      	ands	r3, r5
 8001578:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800157c:	f891 4054 	ldrb.w	r4, [r1, #84]	@ 0x54
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001580:	4303      	orrs	r3, r0
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001582:	f891 004c 	ldrb.w	r0, [r1, #76]	@ 0x4c
 8001586:	fab0 f080 	clz	r0, r0
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800158a:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800158e:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001590:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001594:	e9d1 5416 	ldrd	r5, r4, [r1, #88]	@ 0x58
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001598:	6713      	str	r3, [r2, #112]	@ 0x70
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800159a:	f8d2 0090 	ldr.w	r0, [r2, #144]	@ 0x90
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800159e:	f891 3056 	ldrb.w	r3, [r1, #86]	@ 0x56
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80015a2:	f020 0003 	bic.w	r0, r0, #3
 80015a6:	4303      	orrs	r3, r0
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80015a8:	f891 0055 	ldrb.w	r0, [r1, #85]	@ 0x55
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80015ac:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 80015b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80015b4:	f8d2 3d00 	ldr.w	r3, [r2, #3328]	@ 0xd00
 80015b8:	f023 0372 	bic.w	r3, r3, #114	@ 0x72
 80015bc:	432b      	orrs	r3, r5
 80015be:	f8c2 3d00 	str.w	r3, [r2, #3328]	@ 0xd00
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80015c2:	f8d2 3d30 	ldr.w	r3, [r2, #3376]	@ 0xd30
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80015c6:	f891 0061 	ldrb.w	r0, [r1, #97]	@ 0x61
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80015ca:	f023 037b 	bic.w	r3, r3, #123	@ 0x7b
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80015ce:	f891 c062 	ldrb.w	ip, [r1, #98]	@ 0x62
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80015d2:	4323      	orrs	r3, r4
 80015d4:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80015d8:	f891 0060 	ldrb.w	r0, [r1, #96]	@ 0x60
 80015dc:	fab0 f180 	clz	r1, r0
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80015e0:	ea43 03cc 	orr.w	r3, r3, ip, lsl #3
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80015e4:	0949      	lsrs	r1, r1, #5
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80015e6:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
}
 80015ea:	bc30      	pop	{r4, r5}
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80015ec:	f8c2 3d30 	str.w	r3, [r2, #3376]	@ 0xd30
}
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	c0f88000 	.word	0xc0f88000
 80015f8:	00048083 	.word	0x00048083
 80015fc:	fffffef0 	.word	0xfffffef0

08001600 <ETH_SetDMAConfig>:
static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001600:	6803      	ldr	r3, [r0, #0]
 8001602:	4a1e      	ldr	r2, [pc, #120]	@ (800167c <ETH_SetDMAConfig+0x7c>)
 8001604:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001608:	6808      	ldr	r0, [r1, #0]
{
 800160a:	b410      	push	{r4}
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800160c:	681c      	ldr	r4, [r3, #0]
 800160e:	4022      	ands	r2, r4
 8001610:	4302      	orrs	r2, r0
 8001612:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
               dmaconf->BurstMode |
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001614:	7b0a      	ldrb	r2, [r1, #12]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001616:	790c      	ldrb	r4, [r1, #4]
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001618:	03d2      	lsls	r2, r2, #15

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800161a:	6858      	ldr	r0, [r3, #4]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800161c:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
 8001620:	688c      	ldr	r4, [r1, #8]
 8001622:	4322      	orrs	r2, r4
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001624:	4c16      	ldr	r4, [pc, #88]	@ (8001680 <ETH_SetDMAConfig+0x80>)
 8001626:	4004      	ands	r4, r0

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001628:	6a08      	ldr	r0, [r1, #32]
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800162a:	4322      	orrs	r2, r4
 800162c:	605a      	str	r2, [r3, #4]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800162e:	7b4a      	ldrb	r2, [r1, #13]
               dmaconf->MaximumSegmentSize);
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001630:	f8d3 4100 	ldr.w	r4, [r3, #256]	@ 0x100
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001634:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001638:	4812      	ldr	r0, [pc, #72]	@ (8001684 <ETH_SetDMAConfig+0x84>)
 800163a:	4020      	ands	r0, r4
 800163c:	4302      	orrs	r2, r0
 800163e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001642:	7f4a      	ldrb	r2, [r1, #29]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001644:	7d0c      	ldrb	r4, [r1, #20]
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001646:	0312      	lsls	r2, r2, #12

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001648:	f8d3 0104 	ldr.w	r0, [r3, #260]	@ 0x104
  dmaregval = (dmaconf->TxDMABurstLength |
 800164c:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8001650:	690c      	ldr	r4, [r1, #16]
 8001652:	4322      	orrs	r2, r4
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001654:	4c0c      	ldr	r4, [pc, #48]	@ (8001688 <ETH_SetDMAConfig+0x88>)
 8001656:	4004      	ands	r4, r0

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001658:	6988      	ldr	r0, [r1, #24]
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800165a:	4322      	orrs	r2, r4
 800165c:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
               dmaconf->RxDMABurstLength);

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001660:	f8d3 4108 	ldr.w	r4, [r3, #264]	@ 0x108
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001664:	7f0a      	ldrb	r2, [r1, #28]
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001666:	4909      	ldr	r1, [pc, #36]	@ (800168c <ETH_SetDMAConfig+0x8c>)
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001668:	ea40 72c2 	orr.w	r2, r0, r2, lsl #31
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800166c:	4021      	ands	r1, r4
}
 800166e:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001672:	430a      	orrs	r2, r1
 8001674:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
}
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	ffff87fd 	.word	0xffff87fd
 8001680:	ffff2ffe 	.word	0xffff2ffe
 8001684:	fffec000 	.word	0xfffec000
 8001688:	ffc0efef 	.word	0xffc0efef
 800168c:	7fc0ffff 	.word	0x7fc0ffff

08001690 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8001690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8001694:	6a84      	ldr	r4, [r0, #40]	@ 0x28
{
 8001696:	4692      	mov	sl, r2
 8001698:	b085      	sub	sp, #20
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
  uint32_t idx;
  uint32_t descnbr = 0;
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800169a:	688e      	ldr	r6, [r1, #8]
 800169c:	eb00 0e84 	add.w	lr, r0, r4, lsl #2
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80016a0:	f8de 3018 	ldr.w	r3, [lr, #24]
  uint32_t           bd_count = 0;
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80016a4:	68da      	ldr	r2, [r3, #12]
 80016a6:	2a00      	cmp	r2, #0
 80016a8:	f2c0 8141 	blt.w	800192e <ETH_Prepare_Tx_Descriptors+0x29e>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80016ac:	f8de 202c 	ldr.w	r2, [lr, #44]	@ 0x2c
 80016b0:	2a00      	cmp	r2, #0
 80016b2:	f040 813c 	bne.w	800192e <ETH_Prepare_Tx_Descriptors+0x29e>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80016b6:	680d      	ldr	r5, [r1, #0]
 80016b8:	f015 0c04 	ands.w	ip, r5, #4
 80016bc:	d02a      	beq.n	8001714 <ETH_Prepare_Tx_Descriptors+0x84>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 80016be:	68da      	ldr	r2, [r3, #12]
 80016c0:	4fa9      	ldr	r7, [pc, #676]	@ (8001968 <ETH_Prepare_Tx_Descriptors+0x2d8>)
 80016c2:	4017      	ands	r7, r2
 80016c4:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 80016c6:	4317      	orrs	r7, r2
 80016c8:	60df      	str	r7, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 80016ca:	68da      	ldr	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 80016cc:	6807      	ldr	r7, [r0, #0]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 80016ce:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80016d2:	60da      	str	r2, [r3, #12]
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 80016d4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80016d6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80016da:	663a      	str	r2, [r7, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 80016dc:	072a      	lsls	r2, r5, #28
 80016de:	d519      	bpl.n	8001714 <ETH_Prepare_Tx_Descriptors+0x84>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 80016e0:	689a      	ldr	r2, [r3, #8]
 80016e2:	fa1f f882 	uxth.w	r8, r2
 80016e6:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80016e8:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
 80016ec:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 80016ee:	68da      	ldr	r2, [r3, #12]
 80016f0:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80016f4:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 80016f6:	68da      	ldr	r2, [r3, #12]
 80016f8:	f422 2840 	bic.w	r8, r2, #786432	@ 0xc0000
 80016fc:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80016fe:	ea48 0202 	orr.w	r2, r8, r2
 8001702:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8001704:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001706:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800170a:	667a      	str	r2, [r7, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 800170c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800170e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001712:	653a      	str	r2, [r7, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8001714:	f015 0810 	ands.w	r8, r5, #16
 8001718:	d009      	beq.n	800172e <ETH_Prepare_Tx_Descriptors+0x9e>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	4f93      	ldr	r7, [pc, #588]	@ (800196c <ETH_Prepare_Tx_Descriptors+0x2dc>)
 800171e:	4017      	ands	r7, r2
 8001720:	698a      	ldr	r2, [r1, #24]
 8001722:	4317      	orrs	r7, r2
 8001724:	609f      	str	r7, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8001726:	68da      	ldr	r2, [r3, #12]
 8001728:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800172c:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800172e:	f015 0f14 	tst.w	r5, #20
 8001732:	f040 80c1 	bne.w	80018b8 <ETH_Prepare_Tx_Descriptors+0x228>
 8001736:	2701      	movs	r7, #1
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8001738:	4622      	mov	r2, r4
 800173a:	9701      	str	r7, [sp, #4]
  /***************************************************************************/

  descnbr += 1U;

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800173c:	6837      	ldr	r7, [r6, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800173e:	f8df 922c 	ldr.w	r9, [pc, #556]	@ 800196c <ETH_Prepare_Tx_Descriptors+0x2dc>
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8001742:	601f      	str	r7, [r3, #0]
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8001744:	689f      	ldr	r7, [r3, #8]
 8001746:	ea07 0909 	and.w	r9, r7, r9
 800174a:	6877      	ldr	r7, [r6, #4]
 800174c:	ea49 0707 	orr.w	r7, r9, r7
 8001750:	609f      	str	r7, [r3, #8]

  if (txbuffer->next != NULL)
 8001752:	68b7      	ldr	r7, [r6, #8]
 8001754:	2f00      	cmp	r7, #0
 8001756:	f000 8132 	beq.w	80019be <ETH_Prepare_Tx_Descriptors+0x32e>
  {
    txbuffer = txbuffer->next;
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800175a:	683e      	ldr	r6, [r7, #0]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800175c:	f8df 9214 	ldr.w	r9, [pc, #532]	@ 8001974 <ETH_Prepare_Tx_Descriptors+0x2e4>
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8001760:	605e      	str	r6, [r3, #4]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8001762:	689e      	ldr	r6, [r3, #8]
 8001764:	ea06 0909 	and.w	r9, r6, r9
 8001768:	687e      	ldr	r6, [r7, #4]
 800176a:	ea49 4606 	orr.w	r6, r9, r6, lsl #16
 800176e:	609e      	str	r6, [r3, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8001770:	68de      	ldr	r6, [r3, #12]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8001772:	f1b8 0f00 	cmp.w	r8, #0
 8001776:	f000 80dc 	beq.w	8001932 <ETH_Prepare_Tx_Descriptors+0x2a2>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 800177a:	6a0d      	ldr	r5, [r1, #32]
 800177c:	f426 06f0 	bic.w	r6, r6, #7864320	@ 0x780000
 8001780:	ea46 45c5 	orr.w	r5, r6, r5, lsl #19
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8001784:	4e7a      	ldr	r6, [pc, #488]	@ (8001970 <ETH_Prepare_Tx_Descriptors+0x2e0>)
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8001786:	60dd      	str	r5, [r3, #12]
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8001788:	68dd      	ldr	r5, [r3, #12]
 800178a:	402e      	ands	r6, r5
 800178c:	69cd      	ldr	r5, [r1, #28]
 800178e:	432e      	orrs	r6, r5
 8001790:	60de      	str	r6, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8001792:	68dd      	ldr	r5, [r3, #12]
 8001794:	f445 2580 	orr.w	r5, r5, #262144	@ 0x40000
 8001798:	60dd      	str	r5, [r3, #12]
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800179a:	f1bc 0f00 	cmp.w	ip, #0
 800179e:	d005      	beq.n	80017ac <ETH_Prepare_Tx_Descriptors+0x11c>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 80017a0:	689e      	ldr	r6, [r3, #8]
 80017a2:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 80017a4:	f426 4640 	bic.w	r6, r6, #49152	@ 0xc000
 80017a8:	4335      	orrs	r5, r6
 80017aa:	609d      	str	r5, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80017ac:	68dd      	ldr	r5, [r3, #12]
 80017ae:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 80017b2:	60dd      	str	r5, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80017b4:	68dd      	ldr	r5, [r3, #12]
 80017b6:	f025 4580 	bic.w	r5, r5, #1073741824	@ 0x40000000
 80017ba:	60dd      	str	r5, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80017bc:	f3bf 8f5f 	dmb	sy
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80017c0:	68dd      	ldr	r5, [r3, #12]
 80017c2:	f045 4500 	orr.w	r5, r5, #2147483648	@ 0x80000000
 80017c6:	60dd      	str	r5, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 80017c8:	680d      	ldr	r5, [r1, #0]
 80017ca:	07ad      	lsls	r5, r5, #30
 80017cc:	d505      	bpl.n	80017da <ETH_Prepare_Tx_Descriptors+0x14a>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 80017ce:	68de      	ldr	r6, [r3, #12]
 80017d0:	68cd      	ldr	r5, [r1, #12]
 80017d2:	f026 7660 	bic.w	r6, r6, #58720256	@ 0x3800000
 80017d6:	4335      	orrs	r5, r6
 80017d8:	60dd      	str	r5, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80017da:	f8d7 9008 	ldr.w	r9, [r7, #8]
 80017de:	f1b9 0f00 	cmp.w	r9, #0
 80017e2:	f000 8102 	beq.w	80019ea <ETH_Prepare_Tx_Descriptors+0x35a>
 80017e6:	2500      	movs	r5, #0
    txbuffer = txbuffer->next;

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80017e8:	4f60      	ldr	r7, [pc, #384]	@ (800196c <ETH_Prepare_Tx_Descriptors+0x2dc>)
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80017ea:	f8df c188 	ldr.w	ip, [pc, #392]	@ 8001974 <ETH_Prepare_Tx_Descriptors+0x2e4>
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80017ee:	464e      	mov	r6, r9
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80017f0:	f8df 8184 	ldr.w	r8, [pc, #388]	@ 8001978 <ETH_Prepare_Tx_Descriptors+0x2e8>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80017f4:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8001970 <ETH_Prepare_Tx_Descriptors+0x2e0>
 80017f8:	e9cd 4a02 	strd	r4, sl, [sp, #8]
 80017fc:	e018      	b.n	8001830 <ETH_Prepare_Tx_Descriptors+0x1a0>
 80017fe:	ea06 090b 	and.w	r9, r6, fp
 8001802:	69ce      	ldr	r6, [r1, #28]
 8001804:	ea49 0606 	orr.w	r6, r9, r6
 8001808:	60de      	str	r6, [r3, #12]
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800180a:	68de      	ldr	r6, [r3, #12]
 800180c:	f446 2680 	orr.w	r6, r6, #262144	@ 0x40000
 8001810:	60de      	str	r6, [r3, #12]
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
      }
    }

    bd_count += 1U;
 8001812:	3501      	adds	r5, #1
 8001814:	f3bf 8f5f 	dmb	sy
  while (txbuffer->next != NULL)
 8001818:	68a6      	ldr	r6, [r4, #8]

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800181a:	68dc      	ldr	r4, [r3, #12]
 800181c:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 8001820:	60dc      	str	r4, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8001822:	68dc      	ldr	r4, [r3, #12]
 8001824:	f024 4480 	bic.w	r4, r4, #1073741824	@ 0x40000000
 8001828:	60dc      	str	r4, [r3, #12]
  while (txbuffer->next != NULL)
 800182a:	2e00      	cmp	r6, #0
 800182c:	f000 80a6 	beq.w	800197c <ETH_Prepare_Tx_Descriptors+0x2ec>
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8001830:	68dc      	ldr	r4, [r3, #12]
 8001832:	f024 5480 	bic.w	r4, r4, #268435456	@ 0x10000000
 8001836:	60dc      	str	r4, [r3, #12]
    INCR_TX_DESC_INDEX(descidx, 1U);
 8001838:	1c53      	adds	r3, r2, #1
 800183a:	2b03      	cmp	r3, #3
 800183c:	bf94      	ite	ls
 800183e:	461a      	movls	r2, r3
 8001840:	3a03      	subhi	r2, #3
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001842:	eb00 0982 	add.w	r9, r0, r2, lsl #2
 8001846:	f8d9 3018 	ldr.w	r3, [r9, #24]
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 800184a:	68dc      	ldr	r4, [r3, #12]
 800184c:	f024 5400 	bic.w	r4, r4, #536870912	@ 0x20000000
 8001850:	60dc      	str	r4, [r3, #12]
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8001852:	68dc      	ldr	r4, [r3, #12]
 8001854:	2c00      	cmp	r4, #0
 8001856:	db52      	blt.n	80018fe <ETH_Prepare_Tx_Descriptors+0x26e>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8001858:	f8d9 402c 	ldr.w	r4, [r9, #44]	@ 0x2c
 800185c:	2c00      	cmp	r4, #0
 800185e:	d14e      	bne.n	80018fe <ETH_Prepare_Tx_Descriptors+0x26e>
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8001860:	6834      	ldr	r4, [r6, #0]
 8001862:	601c      	str	r4, [r3, #0]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8001864:	689c      	ldr	r4, [r3, #8]
 8001866:	ea04 0907 	and.w	r9, r4, r7
 800186a:	6874      	ldr	r4, [r6, #4]
 800186c:	ea49 0404 	orr.w	r4, r9, r4
 8001870:	609c      	str	r4, [r3, #8]
    if (txbuffer->next != NULL)
 8001872:	68b4      	ldr	r4, [r6, #8]
 8001874:	2c00      	cmp	r4, #0
 8001876:	d03b      	beq.n	80018f0 <ETH_Prepare_Tx_Descriptors+0x260>
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8001878:	6826      	ldr	r6, [r4, #0]
 800187a:	605e      	str	r6, [r3, #4]
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800187c:	689e      	ldr	r6, [r3, #8]
 800187e:	ea06 090c 	and.w	r9, r6, ip
 8001882:	6866      	ldr	r6, [r4, #4]
 8001884:	ea49 4606 	orr.w	r6, r9, r6, lsl #16
 8001888:	609e      	str	r6, [r3, #8]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800188a:	f8d1 a000 	ldr.w	sl, [r1]
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800188e:	68de      	ldr	r6, [r3, #12]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8001890:	f01a 0f10 	tst.w	sl, #16
 8001894:	d1b3      	bne.n	80017fe <ETH_Prepare_Tx_Descriptors+0x16e>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8001896:	ea06 0908 	and.w	r9, r6, r8
 800189a:	684e      	ldr	r6, [r1, #4]
      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800189c:	f01a 0f01 	tst.w	sl, #1
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80018a0:	ea49 0606 	orr.w	r6, r9, r6
 80018a4:	60de      	str	r6, [r3, #12]
      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80018a6:	d0b4      	beq.n	8001812 <ETH_Prepare_Tx_Descriptors+0x182>
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80018a8:	68de      	ldr	r6, [r3, #12]
 80018aa:	f426 3940 	bic.w	r9, r6, #196608	@ 0x30000
 80018ae:	694e      	ldr	r6, [r1, #20]
 80018b0:	ea49 0606 	orr.w	r6, r9, r6
 80018b4:	60de      	str	r6, [r3, #12]
 80018b6:	e7ac      	b.n	8001812 <ETH_Prepare_Tx_Descriptors+0x182>
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 80018b8:	68da      	ldr	r2, [r3, #12]
 80018ba:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80018be:	60da      	str	r2, [r3, #12]
 80018c0:	f3bf 8f5f 	dmb	sy
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80018c4:	68da      	ldr	r2, [r3, #12]
 80018c6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80018ca:	60da      	str	r2, [r3, #12]
    INCR_TX_DESC_INDEX(descidx, 1U);
 80018cc:	1c62      	adds	r2, r4, #1
 80018ce:	2a03      	cmp	r2, #3
 80018d0:	bf88      	it	hi
 80018d2:	1ee2      	subhi	r2, r4, #3
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80018d4:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 80018d8:	699b      	ldr	r3, [r3, #24]
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80018da:	68dd      	ldr	r5, [r3, #12]
 80018dc:	2d00      	cmp	r5, #0
 80018de:	db7b      	blt.n	80019d8 <ETH_Prepare_Tx_Descriptors+0x348>
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80018e0:	680d      	ldr	r5, [r1, #0]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80018e2:	2702      	movs	r7, #2
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80018e4:	f005 0810 	and.w	r8, r5, #16
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80018e8:	f005 0c04 	and.w	ip, r5, #4
 80018ec:	9701      	str	r7, [sp, #4]
 80018ee:	e725      	b.n	800173c <ETH_Prepare_Tx_Descriptors+0xac>
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80018f0:	605c      	str	r4, [r3, #4]
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80018f2:	4634      	mov	r4, r6
 80018f4:	689e      	ldr	r6, [r3, #8]
 80018f6:	ea06 060c 	and.w	r6, r6, ip
 80018fa:	609e      	str	r6, [r3, #8]
 80018fc:	e7c5      	b.n	800188a <ETH_Prepare_Tx_Descriptors+0x1fa>
      for (idx = 0; idx < descnbr; idx ++)
 80018fe:	9b01      	ldr	r3, [sp, #4]
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001900:	9c02      	ldr	r4, [sp, #8]
      for (idx = 0; idx < descnbr; idx ++)
 8001902:	195e      	adds	r6, r3, r5
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001904:	f8de 2018 	ldr.w	r2, [lr, #24]
      for (idx = 0; idx < descnbr; idx ++)
 8001908:	d011      	beq.n	800192e <ETH_Prepare_Tx_Descriptors+0x29e>
 800190a:	2100      	movs	r1, #0
 800190c:	f3bf 8f5f 	dmb	sy
        INCR_TX_DESC_INDEX(descidx, 1U);
 8001910:	1c65      	adds	r5, r4, #1
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8001912:	68d3      	ldr	r3, [r2, #12]
        INCR_TX_DESC_INDEX(descidx, 1U);
 8001914:	3c03      	subs	r4, #3
      for (idx = 0; idx < descnbr; idx ++)
 8001916:	3101      	adds	r1, #1
        INCR_TX_DESC_INDEX(descidx, 1U);
 8001918:	2d03      	cmp	r5, #3
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800191a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800191e:	bf98      	it	ls
 8001920:	462c      	movls	r4, r5
 8001922:	60d3      	str	r3, [r2, #12]
      for (idx = 0; idx < descnbr; idx ++)
 8001924:	42b1      	cmp	r1, r6
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001926:	eb00 0384 	add.w	r3, r0, r4, lsl #2
 800192a:	699a      	ldr	r2, [r3, #24]
      for (idx = 0; idx < descnbr; idx ++)
 800192c:	d1ee      	bne.n	800190c <ETH_Prepare_Tx_Descriptors+0x27c>
    return HAL_ETH_ERROR_BUSY;
 800192e:	2002      	movs	r0, #2
 8001930:	e042      	b.n	80019b8 <ETH_Prepare_Tx_Descriptors+0x328>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8001932:	f8df 8044 	ldr.w	r8, [pc, #68]	@ 8001978 <ETH_Prepare_Tx_Descriptors+0x2e8>
 8001936:	ea06 0808 	and.w	r8, r6, r8
 800193a:	684e      	ldr	r6, [r1, #4]
 800193c:	ea48 0606 	orr.w	r6, r8, r6
 8001940:	60de      	str	r6, [r3, #12]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8001942:	07ee      	lsls	r6, r5, #31
 8001944:	d506      	bpl.n	8001954 <ETH_Prepare_Tx_Descriptors+0x2c4>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8001946:	68de      	ldr	r6, [r3, #12]
 8001948:	f426 3840 	bic.w	r8, r6, #196608	@ 0x30000
 800194c:	694e      	ldr	r6, [r1, #20]
 800194e:	ea48 0606 	orr.w	r6, r8, r6
 8001952:	60de      	str	r6, [r3, #12]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8001954:	06ae      	lsls	r6, r5, #26
 8001956:	f57f af20 	bpl.w	800179a <ETH_Prepare_Tx_Descriptors+0x10a>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 800195a:	68de      	ldr	r6, [r3, #12]
 800195c:	690d      	ldr	r5, [r1, #16]
 800195e:	f026 6640 	bic.w	r6, r6, #201326592	@ 0xc000000
 8001962:	4335      	orrs	r5, r6
 8001964:	60dd      	str	r5, [r3, #12]
 8001966:	e718      	b.n	800179a <ETH_Prepare_Tx_Descriptors+0x10a>
 8001968:	ffff0000 	.word	0xffff0000
 800196c:	ffffc000 	.word	0xffffc000
 8001970:	fffc0000 	.word	0xfffc0000
 8001974:	c000ffff 	.word	0xc000ffff
 8001978:	ffff8000 	.word	0xffff8000
 800197c:	f8dd a00c 	ldr.w	sl, [sp, #12]
  }

  if (ItMode != ((uint32_t)RESET))
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8001980:	6899      	ldr	r1, [r3, #8]
  if (ItMode != ((uint32_t)RESET))
 8001982:	f1ba 0f00 	cmp.w	sl, #0
 8001986:	d023      	beq.n	80019d0 <ETH_Prepare_Tx_Descriptors+0x340>
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8001988:	f041 4100 	orr.w	r1, r1, #2147483648	@ 0x80000000
 800198c:	6099      	str	r1, [r3, #8]
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800198e:	68d9      	ldr	r1, [r3, #12]
 8001990:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8001994:	60d9      	str	r1, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8001996:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 800199a:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 800199c:	62d9      	str	r1, [r3, #44]	@ 0x2c

  dmatxdesclist->CurTxDesc = descidx;
 800199e:	6282      	str	r2, [r0, #40]	@ 0x28
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80019a0:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80019a4:	2301      	movs	r3, #1
 80019a6:	f383 8810 	msr	PRIMASK, r3

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80019aa:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80019ac:	3301      	adds	r3, #1
 80019ae:	442b      	add	r3, r5
 80019b0:	6403      	str	r3, [r0, #64]	@ 0x40
 80019b2:	f382 8810 	msr	PRIMASK, r2

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80019b6:	2000      	movs	r0, #0
}
 80019b8:	b005      	add	sp, #20
 80019ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80019be:	605f      	str	r7, [r3, #4]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80019c0:	4637      	mov	r7, r6
 80019c2:	f8d3 9008 	ldr.w	r9, [r3, #8]
 80019c6:	4e0a      	ldr	r6, [pc, #40]	@ (80019f0 <ETH_Prepare_Tx_Descriptors+0x360>)
 80019c8:	ea09 0606 	and.w	r6, r9, r6
 80019cc:	609e      	str	r6, [r3, #8]
 80019ce:	e6cf      	b.n	8001770 <ETH_Prepare_Tx_Descriptors+0xe0>
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80019d0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80019d4:	6099      	str	r1, [r3, #8]
 80019d6:	e7da      	b.n	800198e <ETH_Prepare_Tx_Descriptors+0x2fe>
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80019d8:	f8de 2018 	ldr.w	r2, [lr, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80019dc:	f3bf 8f5f 	dmb	sy
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80019e0:	68d3      	ldr	r3, [r2, #12]
 80019e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80019e6:	60d3      	str	r3, [r2, #12]
      return HAL_ETH_ERROR_BUSY;
 80019e8:	e7a1      	b.n	800192e <ETH_Prepare_Tx_Descriptors+0x29e>
  while (txbuffer->next != NULL)
 80019ea:	464d      	mov	r5, r9
 80019ec:	e7c8      	b.n	8001980 <ETH_Prepare_Tx_Descriptors+0x2f0>
 80019ee:	bf00      	nop
 80019f0:	c000ffff 	.word	0xc000ffff

080019f4 <ETH_UpdateDescriptor>:
{
 80019f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t *buff = NULL;
 80019f6:	2300      	movs	r3, #0
{
 80019f8:	b083      	sub	sp, #12
 80019fa:	4605      	mov	r5, r0
  uint8_t *buff = NULL;
 80019fc:	9301      	str	r3, [sp, #4]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80019fe:	e9d0 761a 	ldrd	r7, r6, [r0, #104]	@ 0x68
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001a02:	f107 0312 	add.w	r3, r7, #18
 8001a06:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001a0a:	b31e      	cbz	r6, 8001a54 <ETH_UpdateDescriptor+0x60>
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001a0c:	6923      	ldr	r3, [r4, #16]
 8001a0e:	b18b      	cbz	r3, 8001a34 <ETH_UpdateDescriptor+0x40>
      if (heth->RxDescList.ItMode != 0U)
 8001a10:	6dab      	ldr	r3, [r5, #88]	@ 0x58
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8001a12:	f04f 4141 	mov.w	r1, #3238002688	@ 0xc1000000
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8001a16:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
      if (heth->RxDescList.ItMode != 0U)
 8001a1a:	b9cb      	cbnz	r3, 8001a50 <ETH_UpdateDescriptor+0x5c>
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8001a1c:	60e2      	str	r2, [r4, #12]
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001a1e:	1c7b      	adds	r3, r7, #1
      desccount--;
 8001a20:	3e01      	subs	r6, #1
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001a22:	2b03      	cmp	r3, #3
 8001a24:	bf88      	it	hi
 8001a26:	1efb      	subhi	r3, r7, #3
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001a28:	f103 0212 	add.w	r2, r3, #18
      desccount--;
 8001a2c:	461f      	mov	r7, r3
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001a2e:	f855 4022 	ldr.w	r4, [r5, r2, lsl #2]
      desccount--;
 8001a32:	e7ea      	b.n	8001a0a <ETH_UpdateDescriptor+0x16>
      HAL_ETH_RxAllocateCallback(&buff);
 8001a34:	a801      	add	r0, sp, #4
 8001a36:	f003 f8ab 	bl	8004b90 <HAL_ETH_RxAllocateCallback>
      if (buff == NULL)
 8001a3a:	9b01      	ldr	r3, [sp, #4]
 8001a3c:	b153      	cbz	r3, 8001a54 <ETH_UpdateDescriptor+0x60>
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8001a3e:	6023      	str	r3, [r4, #0]
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8001a40:	f04f 4141 	mov.w	r1, #3238002688	@ 0xc1000000
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001a44:	6123      	str	r3, [r4, #16]
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8001a46:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
      if (heth->RxDescList.ItMode != 0U)
 8001a4a:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d0e5      	beq.n	8001a1c <ETH_UpdateDescriptor+0x28>
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8001a50:	60e1      	str	r1, [r4, #12]
 8001a52:	e7e4      	b.n	8001a1e <ETH_UpdateDescriptor+0x2a>
  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001a54:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 8001a56:	42b3      	cmp	r3, r6
 8001a58:	d010      	beq.n	8001a7c <ETH_UpdateDescriptor+0x88>
 8001a5a:	f3bf 8f5f 	dmb	sy
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8001a5e:	1c7b      	adds	r3, r7, #1
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8001a60:	682a      	ldr	r2, [r5, #0]
 8001a62:	6929      	ldr	r1, [r5, #16]
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8001a64:	f003 0303 	and.w	r3, r3, #3
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8001a68:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a6c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001a70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8001a74:	f8c2 1128 	str.w	r1, [r2, #296]	@ 0x128
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001a78:	e9c5 761a 	strd	r7, r6, [r5, #104]	@ 0x68
}
 8001a7c:	b003      	add	sp, #12
 8001a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a80 <HAL_ETH_Start_IT>:
{
 8001a80:	b538      	push	{r3, r4, r5, lr}
  if (heth->gState == HAL_ETH_STATE_READY)
 8001a82:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 8001a86:	2b10      	cmp	r3, #16
 8001a88:	d001      	beq.n	8001a8e <HAL_ETH_Start_IT+0xe>
    return HAL_ERROR;
 8001a8a:	2001      	movs	r0, #1
}
 8001a8c:	bd38      	pop	{r3, r4, r5, pc}
    heth->gState = HAL_ETH_STATE_BUSY;
 8001a8e:	2523      	movs	r5, #35	@ 0x23
    heth->RxDescList.ItMode = 1U;
 8001a90:	2201      	movs	r2, #1
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001a92:	2304      	movs	r3, #4
 8001a94:	4604      	mov	r4, r0
    heth->gState = HAL_ETH_STATE_BUSY;
 8001a96:	f8c0 5084 	str.w	r5, [r0, #132]	@ 0x84
    heth->RxDescList.ItMode = 1U;
 8001a9a:	6582      	str	r2, [r0, #88]	@ 0x58
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001a9c:	66c3      	str	r3, [r0, #108]	@ 0x6c
    ETH_UpdateDescriptor(heth);
 8001a9e:	f7ff ffa9 	bl	80019f4 <ETH_UpdateDescriptor>
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001aa2:	6822      	ldr	r2, [r4, #0]
    return HAL_OK;
 8001aa4:	2000      	movs	r0, #0
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001aa6:	f502 5380 	add.w	r3, r2, #4096	@ 0x1000
 8001aaa:	f8d3 1104 	ldr.w	r1, [r3, #260]	@ 0x104
 8001aae:	f041 0101 	orr.w	r1, r1, #1
 8001ab2:	f8c3 1104 	str.w	r1, [r3, #260]	@ 0x104
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001ab6:	f8d3 1108 	ldr.w	r1, [r3, #264]	@ 0x108
 8001aba:	f041 0101 	orr.w	r1, r1, #1
 8001abe:	f8c3 1108 	str.w	r1, [r3, #264]	@ 0x108
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8001ac2:	f8d3 1160 	ldr.w	r1, [r3, #352]	@ 0x160
 8001ac6:	f441 7181 	orr.w	r1, r1, #258	@ 0x102
 8001aca:	f8c3 1160 	str.w	r1, [r3, #352]	@ 0x160
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001ace:	f8d2 1d00 	ldr.w	r1, [r2, #3328]	@ 0xd00
 8001ad2:	f041 0101 	orr.w	r1, r1, #1
 8001ad6:	f8c2 1d00 	str.w	r1, [r2, #3328]	@ 0xd00
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001ada:	6811      	ldr	r1, [r2, #0]
 8001adc:	f041 0102 	orr.w	r1, r1, #2
 8001ae0:	6011      	str	r1, [r2, #0]
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001ae2:	6811      	ldr	r1, [r2, #0]
 8001ae4:	f041 0101 	orr.w	r1, r1, #1
 8001ae8:	6011      	str	r1, [r2, #0]
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001aea:	f24d 02c1 	movw	r2, #53441	@ 0xd0c1
 8001aee:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8001af2:	430a      	orrs	r2, r1
 8001af4:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
    heth->gState = HAL_ETH_STATE_STARTED;
 8001af8:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
}
 8001afc:	bd38      	pop	{r3, r4, r5, pc}
 8001afe:	bf00      	nop

08001b00 <HAL_ETH_Stop_IT>:
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001b00:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 8001b04:	2a23      	cmp	r2, #35	@ 0x23
 8001b06:	d001      	beq.n	8001b0c <HAL_ETH_Stop_IT+0xc>
    return HAL_ERROR;
 8001b08:	2001      	movs	r0, #1
}
 8001b0a:	4770      	bx	lr
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001b0c:	4601      	mov	r1, r0
 8001b0e:	4603      	mov	r3, r0
{
 8001b10:	b430      	push	{r4, r5}
    heth->gState = HAL_ETH_STATE_BUSY;
 8001b12:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001b16:	f103 0c54 	add.w	ip, r3, #84	@ 0x54
 8001b1a:	f851 2b44 	ldr.w	r2, [r1], #68
 8001b1e:	4c19      	ldr	r4, [pc, #100]	@ (8001b84 <HAL_ETH_Stop_IT+0x84>)
 8001b20:	f502 5080 	add.w	r0, r2, #4096	@ 0x1000
 8001b24:	f8d0 5134 	ldr.w	r5, [r0, #308]	@ 0x134
 8001b28:	402c      	ands	r4, r5
 8001b2a:	f8c0 4134 	str.w	r4, [r0, #308]	@ 0x134
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001b2e:	f8d0 4104 	ldr.w	r4, [r0, #260]	@ 0x104
 8001b32:	f024 0401 	bic.w	r4, r4, #1
 8001b36:	f8c0 4104 	str.w	r4, [r0, #260]	@ 0x104
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001b3a:	f8d0 4108 	ldr.w	r4, [r0, #264]	@ 0x108
 8001b3e:	f024 0401 	bic.w	r4, r4, #1
 8001b42:	f8c0 4108 	str.w	r4, [r0, #264]	@ 0x108
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001b46:	6810      	ldr	r0, [r2, #0]
 8001b48:	f020 0001 	bic.w	r0, r0, #1
 8001b4c:	6010      	str	r0, [r2, #0]
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001b4e:	f8d2 0d00 	ldr.w	r0, [r2, #3328]	@ 0xd00
 8001b52:	f040 0001 	orr.w	r0, r0, #1
 8001b56:	f8c2 0d00 	str.w	r0, [r2, #3328]	@ 0xd00
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001b5a:	6810      	ldr	r0, [r2, #0]
 8001b5c:	f020 0002 	bic.w	r0, r0, #2
 8001b60:	6010      	str	r0, [r2, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001b62:	f851 0f04 	ldr.w	r0, [r1, #4]!
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001b66:	68c2      	ldr	r2, [r0, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001b68:	4561      	cmp	r1, ip
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001b6a:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 8001b6e:	60c2      	str	r2, [r0, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001b70:	d1f7      	bne.n	8001b62 <HAL_ETH_Stop_IT+0x62>
    heth->RxDescList.ItMode = 0U;
 8001b72:	2200      	movs	r2, #0
    heth->gState = HAL_ETH_STATE_READY;
 8001b74:	2110      	movs	r1, #16
    return HAL_OK;
 8001b76:	4610      	mov	r0, r2
    heth->RxDescList.ItMode = 0U;
 8001b78:	659a      	str	r2, [r3, #88]	@ 0x58
    heth->gState = HAL_ETH_STATE_READY;
 8001b7a:	f8c3 1084 	str.w	r1, [r3, #132]	@ 0x84
}
 8001b7e:	bc30      	pop	{r4, r5}
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	ffff2f3e 	.word	0xffff2f3e

08001b88 <HAL_ETH_Transmit_IT>:
{
 8001b88:	b510      	push	{r4, lr}
 8001b8a:	4604      	mov	r4, r0
  if (pTxConfig == NULL)
 8001b8c:	b321      	cbz	r1, 8001bd8 <HAL_ETH_Transmit_IT+0x50>
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001b8e:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 8001b92:	2a23      	cmp	r2, #35	@ 0x23
 8001b94:	d001      	beq.n	8001b9a <HAL_ETH_Transmit_IT+0x12>
    return HAL_ERROR;
 8001b96:	2001      	movs	r0, #1
}
 8001b98:	bd10      	pop	{r4, pc}
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001b9a:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001b9c:	2201      	movs	r2, #1
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001b9e:	63c3      	str	r3, [r0, #60]	@ 0x3c
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001ba0:	f7ff fd76 	bl	8001690 <ETH_Prepare_Tx_Descriptors>
 8001ba4:	b130      	cbz	r0, 8001bb4 <HAL_ETH_Transmit_IT+0x2c>
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001ba6:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
 8001baa:	f043 0302 	orr.w	r3, r3, #2
 8001bae:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_ERROR;
 8001bb2:	e7f0      	b.n	8001b96 <HAL_ETH_Transmit_IT+0xe>
  __ASM volatile ("dsb 0xF":::"memory");
 8001bb4:	f3bf 8f4f 	dsb	sy
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001bb8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    return HAL_OK;
 8001bba:	2000      	movs	r0, #0
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001bbc:	1c53      	adds	r3, r2, #1
 8001bbe:	2b03      	cmp	r3, #3
 8001bc0:	bf88      	it	hi
 8001bc2:	1ed3      	subhi	r3, r2, #3
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001bc4:	6822      	ldr	r2, [r4, #0]
 8001bc6:	1d99      	adds	r1, r3, #6
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001bc8:	62a3      	str	r3, [r4, #40]	@ 0x28
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001bca:	f502 5380 	add.w	r3, r2, #4096	@ 0x1000
 8001bce:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 8001bd2:	f8c3 1120 	str.w	r1, [r3, #288]	@ 0x120
}
 8001bd6:	bd10      	pop	{r4, pc}
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001bd8:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    return HAL_ERROR;
 8001be4:	e7d7      	b.n	8001b96 <HAL_ETH_Transmit_IT+0xe>
 8001be6:	bf00      	nop

08001be8 <HAL_ETH_ReadData>:
{
 8001be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bec:	4604      	mov	r4, r0
 8001bee:	b083      	sub	sp, #12
  if (pAppBuff == NULL)
 8001bf0:	2900      	cmp	r1, #0
 8001bf2:	d070      	beq.n	8001cd6 <HAL_ETH_ReadData+0xee>
  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001bf4:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 8001bf8:	2b23      	cmp	r3, #35	@ 0x23
 8001bfa:	d162      	bne.n	8001cc2 <HAL_ETH_ReadData+0xda>
  descidx = heth->RxDescList.RxDescIdx;
 8001bfc:	f8d0 805c 	ldr.w	r8, [r0, #92]	@ 0x5c
 8001c00:	460f      	mov	r7, r1
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001c02:	f108 0312 	add.w	r3, r8, #18
 8001c06:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001c0a:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001c0c:	68e9      	ldr	r1, [r5, #12]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001c0e:	f1c3 0b04 	rsb	fp, r3, #4
         && (rxdataready == 0U))
 8001c12:	2900      	cmp	r1, #0
 8001c14:	db6a      	blt.n	8001cec <HAL_ETH_ReadData+0x104>
 8001c16:	f1bb 0f00 	cmp.w	fp, #0
 8001c1a:	d069      	beq.n	8001cf0 <HAL_ETH_ReadData+0x108>
  uint32_t desccnt = 0U;
 8001c1c:	f04f 0900 	mov.w	r9, #0
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001c20:	f100 0380 	add.w	r3, r0, #128	@ 0x80
      dmarxdesc->BackupAddr0 = 0;
 8001c24:	9701      	str	r7, [sp, #4]
 8001c26:	46ca      	mov	sl, r9
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001c28:	9300      	str	r3, [sp, #0]
 8001c2a:	e02e      	b.n	8001c8a <HAL_ETH_ReadData+0xa2>
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8001c2c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001c2e:	68ef      	ldr	r7, [r5, #12]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8001c30:	68ee      	ldr	r6, [r5, #12]
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8001c32:	f3c7 070e 	ubfx	r7, r7, #0, #15
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8001c36:	f016 5680 	ands.w	r6, r6, #268435456	@ 0x10000000
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8001c3a:	eba7 0703 	sub.w	r7, r7, r3
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8001c3e:	d002      	beq.n	8001c46 <HAL_ETH_ReadData+0x5e>
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8001c40:	68eb      	ldr	r3, [r5, #12]
        rxdataready = 1;
 8001c42:	2601      	movs	r6, #1
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8001c44:	6723      	str	r3, [r4, #112]	@ 0x70
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001c46:	b2bb      	uxth	r3, r7
 8001c48:	692a      	ldr	r2, [r5, #16]
 8001c4a:	9900      	ldr	r1, [sp, #0]
 8001c4c:	f104 007c 	add.w	r0, r4, #124	@ 0x7c
 8001c50:	f002 ffc2 	bl	8004bd8 <HAL_ETH_RxLinkCallback>
      heth->RxDescList.RxDescCnt++;
 8001c54:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8001c56:	3301      	adds	r3, #1
 8001c58:	6623      	str	r3, [r4, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001c5a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001c5c:	443b      	add	r3, r7
 8001c5e:	6663      	str	r3, [r4, #100]	@ 0x64
      dmarxdesc->BackupAddr0 = 0;
 8001c60:	f8c5 a010 	str.w	sl, [r5, #16]
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001c64:	f108 0301 	add.w	r3, r8, #1
    desccnt++;
 8001c68:	f109 0901 	add.w	r9, r9, #1
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001c6c:	2b03      	cmp	r3, #3
 8001c6e:	bf8c      	ite	hi
 8001c70:	f1a8 0803 	subhi.w	r8, r8, #3
 8001c74:	4698      	movls	r8, r3
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001c76:	f108 0312 	add.w	r3, r8, #18
 8001c7a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001c7e:	68eb      	ldr	r3, [r5, #12]
         && (rxdataready == 0U))
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	db16      	blt.n	8001cb2 <HAL_ETH_ReadData+0xca>
 8001c84:	45cb      	cmp	fp, r9
 8001c86:	d914      	bls.n	8001cb2 <HAL_ETH_ReadData+0xca>
 8001c88:	b99e      	cbnz	r6, 8001cb2 <HAL_ETH_ReadData+0xca>
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8001c8a:	68eb      	ldr	r3, [r5, #12]
 8001c8c:	0059      	lsls	r1, r3, #1
 8001c8e:	d503      	bpl.n	8001c98 <HAL_ETH_ReadData+0xb0>
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8001c90:	686b      	ldr	r3, [r5, #4]
 8001c92:	67a3      	str	r3, [r4, #120]	@ 0x78
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8001c94:	682b      	ldr	r3, [r5, #0]
 8001c96:	6763      	str	r3, [r4, #116]	@ 0x74
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001c98:	68eb      	ldr	r3, [r5, #12]
 8001c9a:	009a      	lsls	r2, r3, #2
 8001c9c:	d402      	bmi.n	8001ca4 <HAL_ETH_ReadData+0xbc>
 8001c9e:	6fe6      	ldr	r6, [r4, #124]	@ 0x7c
 8001ca0:	2e00      	cmp	r6, #0
 8001ca2:	d0df      	beq.n	8001c64 <HAL_ETH_ReadData+0x7c>
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8001ca4:	68eb      	ldr	r3, [r5, #12]
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	d5c0      	bpl.n	8001c2c <HAL_ETH_ReadData+0x44>
        heth->RxDescList.RxDescCnt = 0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	e9c4 aa18 	strd	sl, sl, [r4, #96]	@ 0x60
 8001cb0:	e7bd      	b.n	8001c2e <HAL_ETH_ReadData+0x46>
  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001cb2:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8001cb4:	9f01      	ldr	r7, [sp, #4]
 8001cb6:	444b      	add	r3, r9
 8001cb8:	66e3      	str	r3, [r4, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001cba:	b99b      	cbnz	r3, 8001ce4 <HAL_ETH_ReadData+0xfc>
  heth->RxDescList.RxDescIdx = descidx;
 8001cbc:	f8c4 805c 	str.w	r8, [r4, #92]	@ 0x5c
  if (rxdataready == 1U)
 8001cc0:	b91e      	cbnz	r6, 8001cca <HAL_ETH_ReadData+0xe2>
    return HAL_ERROR;
 8001cc2:	2001      	movs	r0, #1
}
 8001cc4:	b003      	add	sp, #12
 8001cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    *pAppBuff = heth->RxDescList.pRxStart;
 8001cca:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
    heth->RxDescList.pRxStart = NULL;
 8001ccc:	2300      	movs	r3, #0
    *pAppBuff = heth->RxDescList.pRxStart;
 8001cce:	603a      	str	r2, [r7, #0]
    return HAL_OK;
 8001cd0:	4618      	mov	r0, r3
    heth->RxDescList.pRxStart = NULL;
 8001cd2:	67e3      	str	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 8001cd4:	e7f6      	b.n	8001cc4 <HAL_ETH_ReadData+0xdc>
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001cd6:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8001cda:	f043 0301 	orr.w	r3, r3, #1
 8001cde:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    return HAL_ERROR;
 8001ce2:	e7ee      	b.n	8001cc2 <HAL_ETH_ReadData+0xda>
    ETH_UpdateDescriptor(heth);
 8001ce4:	4620      	mov	r0, r4
 8001ce6:	f7ff fe85 	bl	80019f4 <ETH_UpdateDescriptor>
 8001cea:	e7e7      	b.n	8001cbc <HAL_ETH_ReadData+0xd4>
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d0e8      	beq.n	8001cc2 <HAL_ETH_ReadData+0xda>
    ETH_UpdateDescriptor(heth);
 8001cf0:	f7ff fe80 	bl	80019f4 <ETH_UpdateDescriptor>
  heth->RxDescList.RxDescIdx = descidx;
 8001cf4:	f8c4 805c 	str.w	r8, [r4, #92]	@ 0x5c
  if (rxdataready == 1U)
 8001cf8:	e7e3      	b.n	8001cc2 <HAL_ETH_ReadData+0xda>
 8001cfa:	bf00      	nop

08001cfc <HAL_ETH_ReleaseTxPacket>:
{
 8001cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001d00:	e9d0 5410 	ldrd	r5, r4, [r0, #64]	@ 0x40
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001d04:	b17d      	cbz	r5, 8001d26 <HAL_ETH_ReleaseTxPacket+0x2a>
 8001d06:	4606      	mov	r6, r0
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001d08:	f04f 0800 	mov.w	r8, #0
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8001d0c:	eb06 0784 	add.w	r7, r6, r4, lsl #2
    numOfBuf--;
 8001d10:	3d01      	subs	r5, #1
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8001d12:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001d16:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001d18:	b140      	cbz	r0, 8001d2c <HAL_ETH_ReleaseTxPacket+0x30>
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8001d1a:	68f3      	ldr	r3, [r6, #12]
 8001d1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	da0c      	bge.n	8001d40 <HAL_ETH_ReleaseTxPacket+0x44>
}
 8001d26:	2000      	movs	r0, #0
 8001d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      INCR_TX_DESC_INDEX(idx, 1U);
 8001d2c:	1c63      	adds	r3, r4, #1
 8001d2e:	3c03      	subs	r4, #3
 8001d30:	2b03      	cmp	r3, #3
 8001d32:	d800      	bhi.n	8001d36 <HAL_ETH_ReleaseTxPacket+0x3a>
 8001d34:	461c      	mov	r4, r3
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001d36:	2d00      	cmp	r5, #0
 8001d38:	d1e8      	bne.n	8001d0c <HAL_ETH_ReleaseTxPacket+0x10>
}
 8001d3a:	2000      	movs	r0, #0
 8001d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001d40:	f002 ff7a 	bl	8004c38 <HAL_ETH_TxFreeCallback>
        INCR_TX_DESC_INDEX(idx, 1U);
 8001d44:	1c63      	adds	r3, r4, #1
 8001d46:	3c03      	subs	r4, #3
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001d48:	f8c7 802c 	str.w	r8, [r7, #44]	@ 0x2c
        INCR_TX_DESC_INDEX(idx, 1U);
 8001d4c:	2b03      	cmp	r3, #3
 8001d4e:	bf98      	it	ls
 8001d50:	461c      	movls	r4, r3
        dmatxdesclist->releaseIndex = idx;
 8001d52:	e9c6 5410 	strd	r5, r4, [r6, #64]	@ 0x40
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001d56:	2d00      	cmp	r5, #0
 8001d58:	d1d8      	bne.n	8001d0c <HAL_ETH_ReleaseTxPacket+0x10>
 8001d5a:	e7ee      	b.n	8001d3a <HAL_ETH_ReleaseTxPacket+0x3e>

08001d5c <HAL_ETH_PMTCallback>:
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop

08001d60 <HAL_ETH_EEECallback>:
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop

08001d64 <HAL_ETH_WakeUpCallback>:
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop

08001d68 <HAL_ETH_IRQHandler>:
  uint32_t mac_flag = READ_REG(heth->Instance->MACISR);
 8001d68:	6802      	ldr	r2, [r0, #0]
  uint32_t dma_flag = READ_REG(heth->Instance->DMACSR);
 8001d6a:	f502 5380 	add.w	r3, r2, #4096	@ 0x1000
{
 8001d6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t mac_flag = READ_REG(heth->Instance->MACISR);
 8001d72:	f8d2 60b0 	ldr.w	r6, [r2, #176]	@ 0xb0
  uint32_t exti_d1_flag = READ_REG(EXTI_D1->PR3);
 8001d76:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
  uint32_t dma_flag = READ_REG(heth->Instance->DMACSR);
 8001d7a:	f8d3 5160 	ldr.w	r5, [r3, #352]	@ 0x160
{
 8001d7e:	4604      	mov	r4, r0
  uint32_t dma_itsource = READ_REG(heth->Instance->DMACIER);
 8001d80:	f8d3 7134 	ldr.w	r7, [r3, #308]	@ 0x134
  if (((dma_flag & ETH_DMACSR_RI) != 0U) && ((dma_itsource & ETH_DMACIER_RIE) != 0U))
 8001d84:	0669      	lsls	r1, r5, #25
  uint32_t exti_d1_flag = READ_REG(EXTI_D1->PR3);
 8001d86:	f8d2 80a8 	ldr.w	r8, [r2, #168]	@ 0xa8
  if (((dma_flag & ETH_DMACSR_RI) != 0U) && ((dma_itsource & ETH_DMACIER_RIE) != 0U))
 8001d8a:	d501      	bpl.n	8001d90 <HAL_ETH_IRQHandler+0x28>
 8001d8c:	067a      	lsls	r2, r7, #25
 8001d8e:	d479      	bmi.n	8001e84 <HAL_ETH_IRQHandler+0x11c>
  if (((dma_flag & ETH_DMACSR_TI) != 0U) && ((dma_itsource & ETH_DMACIER_TIE) != 0U))
 8001d90:	07e9      	lsls	r1, r5, #31
 8001d92:	d501      	bpl.n	8001d98 <HAL_ETH_IRQHandler+0x30>
 8001d94:	07fa      	lsls	r2, r7, #31
 8001d96:	d46a      	bmi.n	8001e6e <HAL_ETH_IRQHandler+0x106>
  if (((dma_flag & ETH_DMACSR_AIS) != 0U) && ((dma_itsource & ETH_DMACIER_AIE) != 0U))
 8001d98:	046b      	lsls	r3, r5, #17
 8001d9a:	d501      	bpl.n	8001da0 <HAL_ETH_IRQHandler+0x38>
 8001d9c:	0478      	lsls	r0, r7, #17
 8001d9e:	d40b      	bmi.n	8001db8 <HAL_ETH_IRQHandler+0x50>
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8001da0:	f416 4fc0 	tst.w	r6, #24576	@ 0x6000
 8001da4:	d123      	bne.n	8001dee <HAL_ETH_IRQHandler+0x86>
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8001da6:	06f2      	lsls	r2, r6, #27
 8001da8:	d437      	bmi.n	8001e1a <HAL_ETH_IRQHandler+0xb2>
  if ((mac_flag & ETH_MAC_LPI_IT) != 0U)
 8001daa:	06b3      	lsls	r3, r6, #26
 8001dac:	d444      	bmi.n	8001e38 <HAL_ETH_IRQHandler+0xd0>
  if ((exti_d1_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8001dae:	f418 0f80 	tst.w	r8, #4194304	@ 0x400000
 8001db2:	d151      	bne.n	8001e58 <HAL_ETH_IRQHandler+0xf0>
}
 8001db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001db8:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
    if ((dma_flag & ETH_DMACSR_FBE) != 0U)
 8001dbc:	04e9      	lsls	r1, r5, #19
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001dbe:	f043 0308 	orr.w	r3, r3, #8
 8001dc2:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8001dc6:	6823      	ldr	r3, [r4, #0]
 8001dc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dcc:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
    if ((dma_flag & ETH_DMACSR_FBE) != 0U)
 8001dd0:	d45f      	bmi.n	8001e92 <HAL_ETH_IRQHandler+0x12a>
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001dd2:	f402 42cd 	and.w	r2, r2, #26240	@ 0x6680
 8001dd6:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001dda:	f44f 42cd 	mov.w	r2, #26240	@ 0x6680
 8001dde:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
    HAL_ETH_ErrorCallback(heth);
 8001de2:	4620      	mov	r0, r4
 8001de4:	f002 fce6 	bl	80047b4 <HAL_ETH_ErrorCallback>
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8001de8:	f416 4fc0 	tst.w	r6, #24576	@ 0x6000
 8001dec:	d0db      	beq.n	8001da6 <HAL_ETH_IRQHandler+0x3e>
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8001dee:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
    HAL_ETH_ErrorCallback(heth);
 8001df2:	4620      	mov	r0, r4
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8001df4:	6822      	ldr	r2, [r4, #0]
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8001df6:	f043 0310 	orr.w	r3, r3, #16
 8001dfa:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8001dfe:	f8d2 30b8 	ldr.w	r3, [r2, #184]	@ 0xb8
 8001e02:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
    heth->gState = HAL_ETH_STATE_ERROR;
 8001e06:	23e0      	movs	r3, #224	@ 0xe0
 8001e08:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
    HAL_ETH_ErrorCallback(heth);
 8001e0c:	f002 fcd2 	bl	80047b4 <HAL_ETH_ErrorCallback>
    heth->MACErrorCode = (uint32_t)(0x0U);
 8001e10:	2300      	movs	r3, #0
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8001e12:	06f2      	lsls	r2, r6, #27
    heth->MACErrorCode = (uint32_t)(0x0U);
 8001e14:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8001e18:	d5c7      	bpl.n	8001daa <HAL_ETH_IRQHandler+0x42>
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8001e1a:	6823      	ldr	r3, [r4, #0]
    HAL_ETH_PMTCallback(heth);
 8001e1c:	4620      	mov	r0, r4
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8001e1e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001e22:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8001e26:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
    HAL_ETH_PMTCallback(heth);
 8001e2a:	f7ff ff97 	bl	8001d5c <HAL_ETH_PMTCallback>
    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001e2e:	2300      	movs	r3, #0
 8001e30:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
  if ((mac_flag & ETH_MAC_LPI_IT) != 0U)
 8001e34:	06b3      	lsls	r3, r6, #26
 8001e36:	d5ba      	bpl.n	8001dae <HAL_ETH_IRQHandler+0x46>
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACLCSR, 0x0000000FU);
 8001e38:	6823      	ldr	r3, [r4, #0]
    HAL_ETH_EEECallback(heth);
 8001e3a:	4620      	mov	r0, r4
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACLCSR, 0x0000000FU);
 8001e3c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8001e40:	f003 030f 	and.w	r3, r3, #15
 8001e44:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
    HAL_ETH_EEECallback(heth);
 8001e48:	f7ff ff8a 	bl	8001d60 <HAL_ETH_EEECallback>
    heth->MACLPIEvent = (uint32_t)(0x0U);
 8001e4c:	2300      	movs	r3, #0
  if ((exti_d1_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8001e4e:	f418 0f80 	tst.w	r8, #4194304	@ 0x400000
    heth->MACLPIEvent = (uint32_t)(0x0U);
 8001e52:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
  if ((exti_d1_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8001e56:	d0ad      	beq.n	8001db4 <HAL_ETH_IRQHandler+0x4c>
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001e58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e5c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
    HAL_ETH_WakeUpCallback(heth);
 8001e60:	4620      	mov	r0, r4
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001e62:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
    HAL_ETH_WakeUpCallback(heth);
 8001e66:	f7ff ff7d 	bl	8001d64 <HAL_ETH_WakeUpCallback>
}
 8001e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8001e6e:	6823      	ldr	r3, [r4, #0]
 8001e70:	f248 0201 	movw	r2, #32769	@ 0x8001
    HAL_ETH_TxCpltCallback(heth);
 8001e74:	4620      	mov	r0, r4
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8001e76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e7a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
    HAL_ETH_TxCpltCallback(heth);
 8001e7e:	f002 fc93 	bl	80047a8 <HAL_ETH_TxCpltCallback>
 8001e82:	e789      	b.n	8001d98 <HAL_ETH_IRQHandler+0x30>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8001e84:	f248 0240 	movw	r2, #32832	@ 0x8040
 8001e88:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
    HAL_ETH_RxCpltCallback(heth);
 8001e8c:	f002 fc86 	bl	800479c <HAL_ETH_RxCpltCallback>
 8001e90:	e77e      	b.n	8001d90 <HAL_ETH_IRQHandler+0x28>
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8001e92:	f241 1102 	movw	r1, #4354	@ 0x1102
 8001e96:	400a      	ands	r2, r1
 8001e98:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8001e9c:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 8001ea0:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8001ea4:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
      heth->gState = HAL_ETH_STATE_ERROR;
 8001ea8:	23e0      	movs	r3, #224	@ 0xe0
 8001eaa:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 8001eae:	e798      	b.n	8001de2 <HAL_ETH_IRQHandler+0x7a>

08001eb0 <HAL_ETH_ReadPHYRegister>:
{
 8001eb0:	b570      	push	{r4, r5, r6, lr}
 8001eb2:	4604      	mov	r4, r0
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001eb4:	6800      	ldr	r0, [r0, #0]
{
 8001eb6:	461d      	mov	r5, r3
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001eb8:	f8d0 3200 	ldr.w	r3, [r0, #512]	@ 0x200
 8001ebc:	07db      	lsls	r3, r3, #31
 8001ebe:	d501      	bpl.n	8001ec4 <HAL_ETH_ReadPHYRegister+0x14>
    return HAL_ERROR;
 8001ec0:	2001      	movs	r0, #1
}
 8001ec2:	bd70      	pop	{r4, r5, r6, pc}
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001ec4:	f8d0 3200 	ldr.w	r3, [r0, #512]	@ 0x200
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001ec8:	f023 7378 	bic.w	r3, r3, #65011712	@ 0x3e00000
 8001ecc:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001ed0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001ed4:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001ed8:	f042 020d 	orr.w	r2, r2, #13
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8001edc:	f8c0 2200 	str.w	r2, [r0, #512]	@ 0x200
  tickstart = HAL_GetTick();
 8001ee0:	f7ff fa18 	bl	8001314 <HAL_GetTick>
 8001ee4:	4606      	mov	r6, r0
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001ee6:	e005      	b.n	8001ef4 <HAL_ETH_ReadPHYRegister+0x44>
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8001ee8:	f7ff fa14 	bl	8001314 <HAL_GetTick>
 8001eec:	1b82      	subs	r2, r0, r6
 8001eee:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 8001ef2:	d8e5      	bhi.n	8001ec0 <HAL_ETH_ReadPHYRegister+0x10>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001ef4:	6821      	ldr	r1, [r4, #0]
 8001ef6:	f8d1 2200 	ldr.w	r2, [r1, #512]	@ 0x200
 8001efa:	f012 0201 	ands.w	r2, r2, #1
 8001efe:	d1f3      	bne.n	8001ee8 <HAL_ETH_ReadPHYRegister+0x38>
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8001f00:	f8d1 3204 	ldr.w	r3, [r1, #516]	@ 0x204
  return HAL_OK;
 8001f04:	4610      	mov	r0, r2
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	602b      	str	r3, [r5, #0]
}
 8001f0a:	bd70      	pop	{r4, r5, r6, pc}

08001f0c <HAL_ETH_WritePHYRegister>:
{
 8001f0c:	b538      	push	{r3, r4, r5, lr}
 8001f0e:	4604      	mov	r4, r0
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001f10:	6800      	ldr	r0, [r0, #0]
 8001f12:	f8d0 5200 	ldr.w	r5, [r0, #512]	@ 0x200
 8001f16:	07ed      	lsls	r5, r5, #31
 8001f18:	d501      	bpl.n	8001f1e <HAL_ETH_WritePHYRegister+0x12>
    return HAL_ERROR;
 8001f1a:	2001      	movs	r0, #1
}
 8001f1c:	bd38      	pop	{r3, r4, r5, pc}
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001f1e:	f8d0 0200 	ldr.w	r0, [r0, #512]	@ 0x200
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001f22:	b29d      	uxth	r5, r3
 8001f24:	f020 7378 	bic.w	r3, r0, #65011712	@ 0x3e00000
 8001f28:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8001f2c:	490f      	ldr	r1, [pc, #60]	@ (8001f6c <HAL_ETH_WritePHYRegister+0x60>)
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001f2e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8001f32:	f8c1 5204 	str.w	r5, [r1, #516]	@ 0x204
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001f36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8001f3a:	f023 030c 	bic.w	r3, r3, #12
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001f3e:	f043 0305 	orr.w	r3, r3, #5
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8001f42:	f8c1 3200 	str.w	r3, [r1, #512]	@ 0x200
  tickstart = HAL_GetTick();
 8001f46:	f7ff f9e5 	bl	8001314 <HAL_GetTick>
 8001f4a:	4605      	mov	r5, r0
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001f4c:	e005      	b.n	8001f5a <HAL_ETH_WritePHYRegister+0x4e>
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8001f4e:	f7ff f9e1 	bl	8001314 <HAL_GetTick>
 8001f52:	1b43      	subs	r3, r0, r5
 8001f54:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f58:	d8df      	bhi.n	8001f1a <HAL_ETH_WritePHYRegister+0xe>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001f5a:	6823      	ldr	r3, [r4, #0]
 8001f5c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001f60:	f013 0301 	ands.w	r3, r3, #1
 8001f64:	d1f3      	bne.n	8001f4e <HAL_ETH_WritePHYRegister+0x42>
  return HAL_OK;
 8001f66:	4618      	mov	r0, r3
}
 8001f68:	bd38      	pop	{r3, r4, r5, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40028000 	.word	0x40028000

08001f70 <HAL_ETH_GetMACConfig>:
  if (macconf == NULL)
 8001f70:	2900      	cmp	r1, #0
 8001f72:	f000 80c4 	beq.w	80020fe <HAL_ETH_GetMACConfig+0x18e>
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8001f76:	6803      	ldr	r3, [r0, #0]
  return HAL_OK;
 8001f78:	2000      	movs	r0, #0
{
 8001f7a:	b410      	push	{r4}
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8001f7c:	681c      	ldr	r4, [r3, #0]
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001f7e:	681a      	ldr	r2, [r3, #0]
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8001f80:	f004 040c 	and.w	r4, r4, #12
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001f84:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001f88:	f881 2028 	strb.w	r2, [r1, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001f8c:	681a      	ldr	r2, [r3, #0]
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8001f8e:	62cc      	str	r4, [r1, #44]	@ 0x2c
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001f90:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 8001f94:	624a      	str	r2, [r1, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	f482 7280 	eor.w	r2, r2, #256	@ 0x100
 8001f9c:	f3c2 2200 	ubfx	r2, r2, #8, #1
 8001fa0:	f881 2020 	strb.w	r2, [r1, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8001fa4:	681a      	ldr	r2, [r3, #0]
                                        ? ENABLE : DISABLE;
 8001fa6:	f3c2 2240 	ubfx	r2, r2, #9, #1
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8001faa:	77ca      	strb	r2, [r1, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	f482 6280 	eor.w	r2, r2, #1024	@ 0x400
 8001fb2:	f3c2 2280 	ubfx	r2, r2, #10, #1
 8001fb6:	778a      	strb	r2, [r1, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8001fb8:	681a      	ldr	r2, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8001fba:	f3c2 22c0 	ubfx	r2, r2, #11, #1
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8001fbe:	774a      	strb	r2, [r1, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8001fc6:	770a      	strb	r2, [r1, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001fc8:	681c      	ldr	r4, [r3, #0]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001fca:	681a      	ldr	r2, [r3, #0]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001fcc:	f404 5400 	and.w	r4, r4, #8192	@ 0x2000
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001fd0:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001fd4:	e9c1 2405 	strd	r2, r4, [r1, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	f3c2 4200 	ubfx	r2, r2, #16, #1
 8001fde:	748a      	strb	r2, [r1, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	f482 3200 	eor.w	r2, r2, #131072	@ 0x20000
 8001fe6:	f3c2 4240 	ubfx	r2, r2, #17, #1
 8001fea:	744a      	strb	r2, [r1, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8001ff2:	f3c2 42c0 	ubfx	r2, r2, #19, #1
 8001ff6:	740a      	strb	r2, [r1, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	f3c2 5200 	ubfx	r2, r2, #20, #1
 8001ffe:	73ca      	strb	r2, [r1, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	f3c2 5240 	ubfx	r2, r2, #21, #1
 8002006:	738a      	strb	r2, [r1, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	f3c2 5280 	ubfx	r2, r2, #22, #1
 800200e:	734a      	strb	r2, [r1, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8002010:	681a      	ldr	r2, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8002012:	f3c2 52c0 	ubfx	r2, r2, #23, #1
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8002016:	730a      	strb	r2, [r1, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8002018:	681c      	ldr	r4, [r3, #0]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 800201a:	681a      	ldr	r2, [r3, #0]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 800201c:	f004 64e0 	and.w	r4, r4, #117440512	@ 0x7000000
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002020:	f3c2 62c0 	ubfx	r2, r2, #27, #1
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8002024:	608c      	str	r4, [r1, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002026:	710a      	strb	r2, [r1, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8002028:	681c      	ldr	r4, [r3, #0]
  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 800202a:	685a      	ldr	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 800202c:	f004 44e0 	and.w	r4, r4, #1879048192	@ 0x70000000
  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002030:	f3c2 020d 	ubfx	r2, r2, #0, #14
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8002034:	600c      	str	r4, [r1, #0]
  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002036:	634a      	str	r2, [r1, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8002038:	685a      	ldr	r2, [r3, #4]
 800203a:	f482 3280 	eor.w	r2, r2, #65536	@ 0x10000
 800203e:	f3c2 4200 	ubfx	r2, r2, #16, #1
 8002042:	f881 2032 	strb.w	r2, [r1, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8002046:	685a      	ldr	r2, [r3, #4]
 8002048:	f3c2 4240 	ubfx	r2, r2, #17, #1
 800204c:	f881 2031 	strb.w	r2, [r1, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002050:	685a      	ldr	r2, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8002052:	f3c2 4280 	ubfx	r2, r2, #18, #1
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002056:	f881 2030 	strb.w	r2, [r1, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 800205a:	685a      	ldr	r2, [r3, #4]
                                    ? ENABLE : DISABLE;
 800205c:	f3c2 6200 	ubfx	r2, r2, #24, #1
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8002060:	f881 2038 	strb.w	r2, [r1, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8002064:	685c      	ldr	r4, [r3, #4]
  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8002066:	68da      	ldr	r2, [r3, #12]
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8002068:	f3c4 6444 	ubfx	r4, r4, #25, #5
  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 800206c:	f3c2 2200 	ubfx	r2, r2, #8, #1
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8002070:	63cc      	str	r4, [r1, #60]	@ 0x3c
  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8002072:	f881 2040 	strb.w	r2, [r1, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8002076:	68dc      	ldr	r4, [r3, #12]
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002078:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 800207a:	f004 040f 	and.w	r4, r4, #15
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 800207e:	f3c2 0240 	ubfx	r2, r2, #1, #1
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8002082:	644c      	str	r4, [r1, #68]	@ 0x44
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002084:	f881 2054 	strb.w	r2, [r1, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8002088:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800208a:	f082 0280 	eor.w	r2, r2, #128	@ 0x80
 800208e:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8002092:	f881 204c 	strb.w	r2, [r1, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002096:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8002098:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 800209a:	f004 0470 	and.w	r4, r4, #112	@ 0x70
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 800209e:	0c12      	lsrs	r2, r2, #16
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 80020a0:	650c      	str	r4, [r1, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 80020a2:	648a      	str	r2, [r1, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 80020a4:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80020a8:	f002 0201 	and.w	r2, r2, #1
 80020ac:	f881 2056 	strb.w	r2, [r1, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80020b0:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
                                      ? ENABLE : DISABLE;
 80020b4:	f3c2 0240 	ubfx	r2, r2, #1, #1
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80020b8:	f881 2055 	strb.w	r2, [r1, #85]	@ 0x55
  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 80020bc:	f8d3 4d00 	ldr.w	r4, [r3, #3328]	@ 0xd00
  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 80020c0:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	@ 0xd30
  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 80020c4:	f004 0472 	and.w	r4, r4, #114	@ 0x72
  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 80020c8:	f002 0223 	and.w	r2, r2, #35	@ 0x23
 80020cc:	e9c1 4216 	strd	r4, r2, [r1, #88]	@ 0x58
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80020d0:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	@ 0xd30
}
 80020d4:	f85d 4b04 	ldr.w	r4, [sp], #4
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 80020d8:	f3c2 02c0 	ubfx	r2, r2, #3, #1
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80020dc:	f881 2062 	strb.w	r2, [r1, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 80020e0:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	@ 0xd30
 80020e4:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80020e8:	f881 2061 	strb.w	r2, [r1, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80020ec:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 80020f0:	f083 0340 	eor.w	r3, r3, #64	@ 0x40
 80020f4:	f3c3 1380 	ubfx	r3, r3, #6, #1
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80020f8:	f881 3060 	strb.w	r3, [r1, #96]	@ 0x60
}
 80020fc:	4770      	bx	lr
    return HAL_ERROR;
 80020fe:	2001      	movs	r0, #1
}
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop

08002104 <HAL_ETH_SetMACConfig>:
  if (macconf == NULL)
 8002104:	b131      	cbz	r1, 8002114 <HAL_ETH_SetMACConfig+0x10>
{
 8002106:	b508      	push	{r3, lr}
  if (heth->gState == HAL_ETH_STATE_READY)
 8002108:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 800210c:	2b10      	cmp	r3, #16
 800210e:	d003      	beq.n	8002118 <HAL_ETH_SetMACConfig+0x14>
    return HAL_ERROR;
 8002110:	2001      	movs	r0, #1
}
 8002112:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 8002114:	2001      	movs	r0, #1
}
 8002116:	4770      	bx	lr
    ETH_SetMACConfig(heth, macconf);
 8002118:	f7ff f9b6 	bl	8001488 <ETH_SetMACConfig>
    return HAL_OK;
 800211c:	2000      	movs	r0, #0
}
 800211e:	bd08      	pop	{r3, pc}

08002120 <HAL_ETH_SetMDIOClockRange>:
{
 8002120:	b538      	push	{r3, r4, r5, lr}
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002122:	6803      	ldr	r3, [r0, #0]
{
 8002124:	4605      	mov	r5, r0
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002126:	f8d3 4200 	ldr.w	r4, [r3, #512]	@ 0x200
  hclk = HAL_RCC_GetHCLKFreq();
 800212a:	f000 ff2b 	bl	8002f84 <HAL_RCC_GetHCLKFreq>
  if (hclk < 35000000U)
 800212e:	4b12      	ldr	r3, [pc, #72]	@ (8002178 <HAL_ETH_SetMDIOClockRange+0x58>)
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002130:	f424 6470 	bic.w	r4, r4, #3840	@ 0xf00
  if (hclk < 35000000U)
 8002134:	4298      	cmp	r0, r3
 8002136:	d805      	bhi.n	8002144 <HAL_ETH_SetMDIOClockRange+0x24>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002138:	f444 7400 	orr.w	r4, r4, #512	@ 0x200
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800213c:	682b      	ldr	r3, [r5, #0]
 800213e:	f8c3 4200 	str.w	r4, [r3, #512]	@ 0x200
}
 8002142:	bd38      	pop	{r3, r4, r5, pc}
  else if (hclk < 60000000U)
 8002144:	4b0d      	ldr	r3, [pc, #52]	@ (800217c <HAL_ETH_SetMDIOClockRange+0x5c>)
 8002146:	4298      	cmp	r0, r3
 8002148:	d205      	bcs.n	8002156 <HAL_ETH_SetMDIOClockRange+0x36>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800214a:	f444 7440 	orr.w	r4, r4, #768	@ 0x300
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800214e:	682b      	ldr	r3, [r5, #0]
 8002150:	f8c3 4200 	str.w	r4, [r3, #512]	@ 0x200
}
 8002154:	bd38      	pop	{r3, r4, r5, pc}
  else if (hclk < 100000000U)
 8002156:	4b0a      	ldr	r3, [pc, #40]	@ (8002180 <HAL_ETH_SetMDIOClockRange+0x60>)
 8002158:	4298      	cmp	r0, r3
 800215a:	d9ef      	bls.n	800213c <HAL_ETH_SetMDIOClockRange+0x1c>
  else if (hclk < 150000000U)
 800215c:	4b09      	ldr	r3, [pc, #36]	@ (8002184 <HAL_ETH_SetMDIOClockRange+0x64>)
 800215e:	4298      	cmp	r0, r3
 8002160:	d802      	bhi.n	8002168 <HAL_ETH_SetMDIOClockRange+0x48>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002162:	f444 7480 	orr.w	r4, r4, #256	@ 0x100
 8002166:	e7e9      	b.n	800213c <HAL_ETH_SetMDIOClockRange+0x1c>
  else if (hclk < 250000000U)
 8002168:	4b07      	ldr	r3, [pc, #28]	@ (8002188 <HAL_ETH_SetMDIOClockRange+0x68>)
 800216a:	4298      	cmp	r0, r3
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800216c:	bf94      	ite	ls
 800216e:	f444 6480 	orrls.w	r4, r4, #1024	@ 0x400
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8002172:	f444 64a0 	orrhi.w	r4, r4, #1280	@ 0x500
 8002176:	e7e1      	b.n	800213c <HAL_ETH_SetMDIOClockRange+0x1c>
 8002178:	02160ebf 	.word	0x02160ebf
 800217c:	03938700 	.word	0x03938700
 8002180:	05f5e0ff 	.word	0x05f5e0ff
 8002184:	08f0d17f 	.word	0x08f0d17f
 8002188:	0ee6b27f 	.word	0x0ee6b27f

0800218c <HAL_ETH_Init>:
  if (heth == NULL)
 800218c:	2800      	cmp	r0, #0
 800218e:	f000 8117 	beq.w	80023c0 <HAL_ETH_Init+0x234>
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002192:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
{
 8002196:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002198:	4605      	mov	r5, r0
 800219a:	b0a5      	sub	sp, #148	@ 0x94
  if (heth->gState == HAL_ETH_STATE_RESET)
 800219c:	2b00      	cmp	r3, #0
 800219e:	f000 80af 	beq.w	8002300 <HAL_ETH_Init+0x174>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021a2:	4b88      	ldr	r3, [pc, #544]	@ (80023c4 <HAL_ETH_Init+0x238>)
 80021a4:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 80021a8:	f042 0202 	orr.w	r2, r2, #2
 80021ac:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 80021b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80021b4:	7a28      	ldrb	r0, [r5, #8]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	9301      	str	r3, [sp, #4]
 80021bc:	9b01      	ldr	r3, [sp, #4]
  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80021be:	2800      	cmp	r0, #0
 80021c0:	f040 8094 	bne.w	80022ec <HAL_ETH_Init+0x160>
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80021c4:	f7ff f8ac 	bl	8001320 <HAL_SYSCFG_ETHInterfaceSelect>
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80021c8:	682b      	ldr	r3, [r5, #0]
  (void)SYSCFG->PMCR;
 80021ca:	4a7f      	ldr	r2, [pc, #508]	@ (80023c8 <HAL_ETH_Init+0x23c>)
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80021cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
  (void)SYSCFG->PMCR;
 80021d0:	6852      	ldr	r2, [r2, #4]
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	f042 0201 	orr.w	r2, r2, #1
 80021d8:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80021da:	f7ff f89b 	bl	8001314 <HAL_GetTick>
 80021de:	4606      	mov	r6, r0
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80021e0:	e006      	b.n	80021f0 <HAL_ETH_Init+0x64>
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80021e2:	f7ff f897 	bl	8001314 <HAL_GetTick>
 80021e6:	1b80      	subs	r0, r0, r6
 80021e8:	f5b0 7ffa 	cmp.w	r0, #500	@ 0x1f4
 80021ec:	f200 8081 	bhi.w	80022f2 <HAL_ETH_Init+0x166>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80021f0:	682b      	ldr	r3, [r5, #0]
 80021f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021f6:	681c      	ldr	r4, [r3, #0]
 80021f8:	f014 0401 	ands.w	r4, r4, #1
 80021fc:	d1f1      	bne.n	80021e2 <HAL_ETH_Init+0x56>
  HAL_ETH_SetMDIOClockRange(heth);
 80021fe:	4628      	mov	r0, r5
  macDefaultConf.ChecksumOffload = ENABLE;
 8002200:	2701      	movs	r7, #1
  HAL_ETH_SetMDIOClockRange(heth);
 8002202:	f7ff ff8d 	bl	8002120 <HAL_ETH_SetMDIOClockRange>
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002206:	f000 febd 	bl	8002f84 <HAL_RCC_GetHCLKFreq>
 800220a:	4b70      	ldr	r3, [pc, #448]	@ (80023cc <HAL_ETH_Init+0x240>)
 800220c:	682e      	ldr	r6, [r5, #0]
  ETH_SetMACConfig(heth, &macDefaultConf);
 800220e:	a90b      	add	r1, sp, #44	@ 0x2c
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002210:	fba3 2300 	umull	r2, r3, r3, r0
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002214:	4628      	mov	r0, r5
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002216:	9414      	str	r4, [sp, #80]	@ 0x50
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002218:	0c9b      	lsrs	r3, r3, #18
  macDefaultConf.DeferralCheck = DISABLE;
 800221a:	f88d 4054 	strb.w	r4, [sp, #84]	@ 0x54
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800221e:	f88d 4064 	strb.w	r4, [sp, #100]	@ 0x64
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002222:	3b01      	subs	r3, #1
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8002224:	941a      	str	r4, [sp, #104]	@ 0x68
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002226:	f88d 408e 	strb.w	r4, [sp, #142]	@ 0x8e
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800222a:	f8c6 30dc 	str.w	r3, [r6, #220]	@ 0xdc
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800222e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002232:	940d      	str	r4, [sp, #52]	@ 0x34
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002234:	9311      	str	r3, [sp, #68]	@ 0x44
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8002236:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
  macDefaultConf.ChecksumOffload = ENABLE;
 800223a:	f88d 7030 	strb.w	r7, [sp, #48]	@ 0x30
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 800223e:	9318      	str	r3, [sp, #96]	@ 0x60
  macDefaultConf.LoopbackMode = DISABLE;
 8002240:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002244:	f88d 705e 	strb.w	r7, [sp, #94]	@ 0x5e
  macDefaultConf.LoopbackMode = DISABLE;
 8002248:	9312      	str	r3, [sp, #72]	@ 0x48
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800224a:	2320      	movs	r3, #32
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800224c:	f8ad 708c 	strh.w	r7, [sp, #140]	@ 0x8c
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002250:	9322      	str	r3, [sp, #136]	@ 0x88
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002252:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
  macDefaultConf.JumboPacket = DISABLE;
 8002256:	f88d 403e 	strb.w	r4, [sp, #62]	@ 0x3e
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800225a:	930b      	str	r3, [sp, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800225c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002260:	941f      	str	r4, [sp, #124]	@ 0x7c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002262:	9310      	str	r3, [sp, #64]	@ 0x40
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002264:	4b5a      	ldr	r3, [pc, #360]	@ (80023d0 <HAL_ETH_Init+0x244>)
  macDefaultConf.PauseTime = 0x0U;
 8002266:	941d      	str	r4, [sp, #116]	@ 0x74
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002268:	930e      	str	r3, [sp, #56]	@ 0x38
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800226a:	2302      	movs	r3, #2
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800226c:	9416      	str	r4, [sp, #88]	@ 0x58
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800226e:	9321      	str	r3, [sp, #132]	@ 0x84
  macDefaultConf.Watchdog = ENABLE;
 8002270:	f240 1301 	movw	r3, #257	@ 0x101
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002274:	f88d 406c 	strb.w	r4, [sp, #108]	@ 0x6c
  macDefaultConf.Watchdog = ENABLE;
 8002278:	f8ad 303c 	strh.w	r3, [sp, #60]	@ 0x3c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800227c:	f88d 4082 	strb.w	r4, [sp, #130]	@ 0x82
  macDefaultConf.RetryTransmission = ENABLE;
 8002280:	f88d 704c 	strb.w	r7, [sp, #76]	@ 0x4c
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002284:	f8ad 4080 	strh.w	r4, [sp, #128]	@ 0x80
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002288:	f8ad 405c 	strh.w	r4, [sp, #92]	@ 0x5c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800228c:	941c      	str	r4, [sp, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800228e:	f88d 7078 	strb.w	r7, [sp, #120]	@ 0x78
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002292:	f7ff f8f9 	bl	8001488 <ETH_SetMACConfig>
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002296:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800229a:	a902      	add	r1, sp, #8
 800229c:	4628      	mov	r0, r5
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800229e:	f88d 700c 	strb.w	r7, [sp, #12]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80022a2:	9308      	str	r3, [sp, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80022a4:	9306      	str	r3, [sp, #24]
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80022a6:	f44f 7306 	mov.w	r3, #536	@ 0x218
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80022aa:	9704      	str	r7, [sp, #16]
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80022ac:	930a      	str	r3, [sp, #40]	@ 0x28
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80022ae:	9402      	str	r4, [sp, #8]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80022b0:	f8ad 4014 	strh.w	r4, [sp, #20]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80022b4:	f88d 401c 	strb.w	r4, [sp, #28]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80022b8:	f8ad 4024 	strh.w	r4, [sp, #36]	@ 0x24
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80022bc:	f7ff f9a0 	bl	8001600 <ETH_SetDMAConfig>
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80022c0:	f506 5180 	add.w	r1, r6, #4096	@ 0x1000
 80022c4:	f8d1 3100 	ldr.w	r3, [r1, #256]	@ 0x100
 80022c8:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80022cc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80022d0:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80022d4:	696b      	ldr	r3, [r5, #20]
 80022d6:	f013 0203 	ands.w	r2, r3, #3
 80022da:	d017      	beq.n	800230c <HAL_ETH_Init+0x180>
    heth->gState = HAL_ETH_STATE_ERROR;
 80022dc:	23e0      	movs	r3, #224	@ 0xe0
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80022de:	f8c5 7088 	str.w	r7, [r5, #136]	@ 0x88
    heth->gState = HAL_ETH_STATE_ERROR;
 80022e2:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84
    return HAL_ERROR;
 80022e6:	2001      	movs	r0, #1
}
 80022e8:	b025      	add	sp, #148	@ 0x94
 80022ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80022ec:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80022f0:	e768      	b.n	80021c4 <HAL_ETH_Init+0x38>
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80022f2:	2204      	movs	r2, #4
      heth->gState = HAL_ETH_STATE_ERROR;
 80022f4:	23e0      	movs	r3, #224	@ 0xe0
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80022f6:	f8c5 2088 	str.w	r2, [r5, #136]	@ 0x88
      heth->gState = HAL_ETH_STATE_ERROR;
 80022fa:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84
      return HAL_ERROR;
 80022fe:	e7f2      	b.n	80022e6 <HAL_ETH_Init+0x15a>
    heth->gState = HAL_ETH_STATE_BUSY;
 8002300:	2323      	movs	r3, #35	@ 0x23
 8002302:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
    HAL_ETH_MspInit(heth);
 8002306:	f002 fb59 	bl	80049bc <HAL_ETH_MspInit>
 800230a:	e74a      	b.n	80021a2 <HAL_ETH_Init+0x16>
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800230c:	f8d1 4108 	ldr.w	r4, [r1, #264]	@ 0x108
 8002310:	4830      	ldr	r0, [pc, #192]	@ (80023d4 <HAL_ETH_Init+0x248>)
 8002312:	68ef      	ldr	r7, [r5, #12]
 8002314:	4020      	ands	r0, r4
 8002316:	f107 0460 	add.w	r4, r7, #96	@ 0x60
 800231a:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
    dmatxdesc = heth->Init.TxDesc + i;
 800231e:	463b      	mov	r3, r7
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002320:	f8c1 0108 	str.w	r0, [r1, #264]	@ 0x108
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002324:	f105 0014 	add.w	r0, r5, #20
    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002328:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800232a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800232c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800232e:	60da      	str	r2, [r3, #12]
    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002330:	f840 3f04 	str.w	r3, [r0, #4]!
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002334:	3318      	adds	r3, #24
 8002336:	429c      	cmp	r4, r3
 8002338:	d1f6      	bne.n	8002328 <HAL_ETH_Init+0x19c>
    dmarxdesc =  heth->Init.RxDesc + i;
 800233a:	692c      	ldr	r4, [r5, #16]
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800233c:	2303      	movs	r3, #3
  heth->TxDescList.CurTxDesc = 0;
 800233e:	62aa      	str	r2, [r5, #40]	@ 0x28
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002340:	f105 0044 	add.w	r0, r5, #68	@ 0x44
 8002344:	f8c1 312c 	str.w	r3, [r1, #300]	@ 0x12c
    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002348:	2200      	movs	r2, #0
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800234a:	f8c1 7114 	str.w	r7, [r1, #276]	@ 0x114
    dmarxdesc =  heth->Init.RxDesc + i;
 800234e:	4623      	mov	r3, r4
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002350:	f8c1 7120 	str.w	r7, [r1, #288]	@ 0x120
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002354:	f105 0754 	add.w	r7, r5, #84	@ 0x54
    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002358:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800235a:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800235c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800235e:	615a      	str	r2, [r3, #20]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002360:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002362:	60da      	str	r2, [r3, #12]
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002364:	f840 3f04 	str.w	r3, [r0, #4]!
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002368:	4287      	cmp	r7, r0
 800236a:	f103 0318 	add.w	r3, r3, #24
 800236e:	d1f3      	bne.n	8002358 <HAL_ETH_Init+0x1cc>
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002370:	2003      	movs	r0, #3
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002372:	686b      	ldr	r3, [r5, #4]
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002374:	65aa      	str	r2, [r5, #88]	@ 0x58
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002376:	e9c5 2217 	strd	r2, r2, [r5, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800237a:	e9c5 221a 	strd	r2, r2, [r5, #104]	@ 0x68
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800237e:	f8c1 0130 	str.w	r0, [r1, #304]	@ 0x130
  return HAL_OK;
 8002382:	2000      	movs	r0, #0
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002384:	f8c1 411c 	str.w	r4, [r1, #284]	@ 0x11c
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002388:	3448      	adds	r4, #72	@ 0x48
 800238a:	f8c1 4128 	str.w	r4, [r1, #296]	@ 0x128
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800238e:	8899      	ldrh	r1, [r3, #4]
 8002390:	f8c6 1300 	str.w	r1, [r6, #768]	@ 0x300
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002394:	681b      	ldr	r3, [r3, #0]
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8002396:	4910      	ldr	r1, [pc, #64]	@ (80023d8 <HAL_ETH_Init+0x24c>)
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002398:	f8c6 3304 	str.w	r3, [r6, #772]	@ 0x304
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 800239c:	f8d6 370c 	ldr.w	r3, [r6, #1804]	@ 0x70c
 80023a0:	4319      	orrs	r1, r3
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80023a2:	4b0e      	ldr	r3, [pc, #56]	@ (80023dc <HAL_ETH_Init+0x250>)
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80023a4:	f8c6 170c 	str.w	r1, [r6, #1804]	@ 0x70c
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80023a8:	f8d6 1710 	ldr.w	r1, [r6, #1808]	@ 0x710
 80023ac:	430b      	orrs	r3, r1
  heth->gState = HAL_ETH_STATE_READY;
 80023ae:	2110      	movs	r1, #16
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80023b0:	f8c6 3710 	str.w	r3, [r6, #1808]	@ 0x710
  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80023b4:	f8c5 2088 	str.w	r2, [r5, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80023b8:	f8c5 1084 	str.w	r1, [r5, #132]	@ 0x84
}
 80023bc:	b025      	add	sp, #148	@ 0x94
 80023be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80023c0:	2001      	movs	r0, #1
}
 80023c2:	4770      	bx	lr
 80023c4:	58024400 	.word	0x58024400
 80023c8:	58000400 	.word	0x58000400
 80023cc:	431bde83 	.word	0x431bde83
 80023d0:	01010000 	.word	0x01010000
 80023d4:	ffff8001 	.word	0xffff8001
 80023d8:	0c020060 	.word	0x0c020060
 80023dc:	0c20c000 	.word	0x0c20c000

080023e0 <HAL_ETH_GetError>:
  return heth->ErrorCode;
 80023e0:	f8d0 0088 	ldr.w	r0, [r0, #136]	@ 0x88
}
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop

080023e8 <HAL_ETH_GetDMAError>:
  return heth->DMAErrorCode;
 80023e8:	f8d0 008c 	ldr.w	r0, [r0, #140]	@ 0x8c
}
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop

080023f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80023f4:	680c      	ldr	r4, [r1, #0]
{
 80023f6:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80023f8:	2c00      	cmp	r4, #0
 80023fa:	f000 80a0 	beq.w	800253e <HAL_GPIO_Init+0x14e>
  uint32_t position = 0x00U;
 80023fe:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002400:	f04f 0b01 	mov.w	fp, #1
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002404:	f04f 4eb0 	mov.w	lr, #1476395008	@ 0x58000000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002408:	9100      	str	r1, [sp, #0]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800240a:	fa0b fc03 	lsl.w	ip, fp, r3
    if (iocurrent != 0x00U)
 800240e:	ea1c 0a04 	ands.w	sl, ip, r4
 8002412:	f000 808f 	beq.w	8002534 <HAL_GPIO_Init+0x144>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002416:	9900      	ldr	r1, [sp, #0]
 8002418:	005f      	lsls	r7, r3, #1
 800241a:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800241c:	2103      	movs	r1, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800241e:	f005 0203 	and.w	r2, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002422:	fa01 f607 	lsl.w	r6, r1, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002426:	f102 38ff 	add.w	r8, r2, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800242a:	43f6      	mvns	r6, r6
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800242c:	f1b8 0f01 	cmp.w	r8, #1
 8002430:	f240 8088 	bls.w	8002544 <HAL_GPIO_Init+0x154>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002434:	2a03      	cmp	r2, #3
 8002436:	f040 80c6 	bne.w	80025c6 <HAL_GPIO_Init+0x1d6>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800243a:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 800243c:	6807      	ldr	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800243e:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002442:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002446:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->MODER = temp;
 800244a:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800244c:	d072      	beq.n	8002534 <HAL_GPIO_Init+0x144>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800244e:	4e79      	ldr	r6, [pc, #484]	@ (8002634 <HAL_GPIO_Init+0x244>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002450:	f003 0703 	and.w	r7, r3, #3
 8002454:	210f      	movs	r1, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002456:	f8d6 20f4 	ldr.w	r2, [r6, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800245a:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800245c:	f042 0202 	orr.w	r2, r2, #2
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002460:	fa01 fc07 	lsl.w	ip, r1, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002464:	4974      	ldr	r1, [pc, #464]	@ (8002638 <HAL_GPIO_Init+0x248>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002466:	f8c6 20f4 	str.w	r2, [r6, #244]	@ 0xf4
 800246a:	f8d6 20f4 	ldr.w	r2, [r6, #244]	@ 0xf4
 800246e:	f023 0603 	bic.w	r6, r3, #3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002472:	4288      	cmp	r0, r1
 8002474:	f106 46b0 	add.w	r6, r6, #1476395008	@ 0x58000000
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002478:	f002 0202 	and.w	r2, r2, #2
 800247c:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8002480:	9203      	str	r2, [sp, #12]
 8002482:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002484:	68b2      	ldr	r2, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002486:	ea22 020c 	bic.w	r2, r2, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800248a:	d02c      	beq.n	80024e6 <HAL_GPIO_Init+0xf6>
 800248c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8002490:	4288      	cmp	r0, r1
 8002492:	f000 80ab 	beq.w	80025ec <HAL_GPIO_Init+0x1fc>
 8002496:	4969      	ldr	r1, [pc, #420]	@ (800263c <HAL_GPIO_Init+0x24c>)
 8002498:	4288      	cmp	r0, r1
 800249a:	f000 80ad 	beq.w	80025f8 <HAL_GPIO_Init+0x208>
 800249e:	f8df c1a0 	ldr.w	ip, [pc, #416]	@ 8002640 <HAL_GPIO_Init+0x250>
 80024a2:	4560      	cmp	r0, ip
 80024a4:	f000 809c 	beq.w	80025e0 <HAL_GPIO_Init+0x1f0>
 80024a8:	f8df c198 	ldr.w	ip, [pc, #408]	@ 8002644 <HAL_GPIO_Init+0x254>
 80024ac:	4560      	cmp	r0, ip
 80024ae:	f000 80af 	beq.w	8002610 <HAL_GPIO_Init+0x220>
 80024b2:	f8df c194 	ldr.w	ip, [pc, #404]	@ 8002648 <HAL_GPIO_Init+0x258>
 80024b6:	4560      	cmp	r0, ip
 80024b8:	f000 80b0 	beq.w	800261c <HAL_GPIO_Init+0x22c>
 80024bc:	f8df c18c 	ldr.w	ip, [pc, #396]	@ 800264c <HAL_GPIO_Init+0x25c>
 80024c0:	4560      	cmp	r0, ip
 80024c2:	f000 809f 	beq.w	8002604 <HAL_GPIO_Init+0x214>
 80024c6:	f8df c188 	ldr.w	ip, [pc, #392]	@ 8002650 <HAL_GPIO_Init+0x260>
 80024ca:	4560      	cmp	r0, ip
 80024cc:	f000 80ac 	beq.w	8002628 <HAL_GPIO_Init+0x238>
 80024d0:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8002654 <HAL_GPIO_Init+0x264>
 80024d4:	4560      	cmp	r0, ip
 80024d6:	bf0c      	ite	eq
 80024d8:	f04f 0c09 	moveq.w	ip, #9
 80024dc:	f04f 0c0a 	movne.w	ip, #10
 80024e0:	fa0c f707 	lsl.w	r7, ip, r7
 80024e4:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024e6:	60b2      	str	r2, [r6, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024e8:	02ef      	lsls	r7, r5, #11
        temp = EXTI->RTSR1;
 80024ea:	f8de 2000 	ldr.w	r2, [lr]
        temp &= ~(iocurrent);
 80024ee:	ea6f 060a 	mvn.w	r6, sl
        {
          temp |= iocurrent;
 80024f2:	bf4c      	ite	mi
 80024f4:	ea4a 0202 	orrmi.w	r2, sl, r2
        temp &= ~(iocurrent);
 80024f8:	4032      	andpl	r2, r6
        }
        EXTI->RTSR1 = temp;

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024fa:	02a9      	lsls	r1, r5, #10
        EXTI->RTSR1 = temp;
 80024fc:	f8ce 2000 	str.w	r2, [lr]
        temp = EXTI->FTSR1;
 8002500:	f8de 2004 	ldr.w	r2, [lr, #4]
        temp &= ~(iocurrent);
 8002504:	bf54      	ite	pl
 8002506:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8002508:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->FTSR1 = temp;

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800250c:	03af      	lsls	r7, r5, #14
        EXTI->FTSR1 = temp;
 800250e:	f8ce 2004 	str.w	r2, [lr, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8002512:	f8de 2084 	ldr.w	r2, [lr, #132]	@ 0x84
        temp &= ~(iocurrent);
 8002516:	bf54      	ite	pl
 8002518:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 800251a:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI_CurrentCPU->EMR1 = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800251e:	03e9      	lsls	r1, r5, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8002520:	f8ce 2084 	str.w	r2, [lr, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8002524:	f8de 2080 	ldr.w	r2, [lr, #128]	@ 0x80
        temp &= ~(iocurrent);
 8002528:	bf54      	ite	pl
 800252a:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 800252c:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002530:	f8ce 2080 	str.w	r2, [lr, #128]	@ 0x80
      }
    }

    position++;
 8002534:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002536:	fa34 f203 	lsrs.w	r2, r4, r3
 800253a:	f47f af66 	bne.w	800240a <HAL_GPIO_Init+0x1a>
  }
}
 800253e:	b005      	add	sp, #20
 8002540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002544:	9900      	ldr	r1, [sp, #0]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002546:	2a02      	cmp	r2, #2
        temp = GPIOx->OSPEEDR;
 8002548:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800254c:	68c9      	ldr	r1, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800254e:	ea09 0906 	and.w	r9, r9, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002552:	fa01 f807 	lsl.w	r8, r1, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002556:	9900      	ldr	r1, [sp, #0]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002558:	ea48 0809 	orr.w	r8, r8, r9
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800255c:	6889      	ldr	r1, [r1, #8]
        GPIOx->OSPEEDR = temp;
 800255e:	f8c0 8008 	str.w	r8, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002562:	f3c5 1800 	ubfx	r8, r5, #4, #1
        temp = GPIOx->OTYPER;
 8002566:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800256a:	fa08 f803 	lsl.w	r8, r8, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800256e:	ea29 0c0c 	bic.w	ip, r9, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002572:	ea48 0c0c 	orr.w	ip, r8, ip
        GPIOx->OTYPER = temp;
 8002576:	f8c0 c004 	str.w	ip, [r0, #4]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800257a:	fa01 fc07 	lsl.w	ip, r1, r7
      temp = GPIOx->PUPDR;
 800257e:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002582:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002586:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 800258a:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800258e:	f47f af54 	bne.w	800243a <HAL_GPIO_Init+0x4a>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002592:	f003 0c07 	and.w	ip, r3, #7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002596:	9900      	ldr	r1, [sp, #0]
        temp = GPIOx->AFR[position >> 3U];
 8002598:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800259c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80025a0:	6909      	ldr	r1, [r1, #16]
 80025a2:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 80025a6:	fa01 f10c 	lsl.w	r1, r1, ip
        temp = GPIOx->AFR[position >> 3U];
 80025aa:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80025ae:	9101      	str	r1, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80025b0:	210f      	movs	r1, #15
 80025b2:	fa01 fc0c 	lsl.w	ip, r1, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80025b6:	9901      	ldr	r1, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80025b8:	ea29 090c 	bic.w	r9, r9, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80025bc:	ea41 0c09 	orr.w	ip, r1, r9
        GPIOx->AFR[position >> 3U] = temp;
 80025c0:	f8c8 c020 	str.w	ip, [r8, #32]
 80025c4:	e739      	b.n	800243a <HAL_GPIO_Init+0x4a>
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025c6:	9900      	ldr	r1, [sp, #0]
      temp = GPIOx->PUPDR;
 80025c8:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025cc:	6889      	ldr	r1, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80025ce:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025d2:	fa01 fc07 	lsl.w	ip, r1, r7
 80025d6:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 80025da:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025de:	e72c      	b.n	800243a <HAL_GPIO_Init+0x4a>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80025e0:	f04f 0c03 	mov.w	ip, #3
 80025e4:	fa0c f707 	lsl.w	r7, ip, r7
 80025e8:	433a      	orrs	r2, r7
 80025ea:	e77c      	b.n	80024e6 <HAL_GPIO_Init+0xf6>
 80025ec:	f04f 0c01 	mov.w	ip, #1
 80025f0:	fa0c f707 	lsl.w	r7, ip, r7
 80025f4:	433a      	orrs	r2, r7
 80025f6:	e776      	b.n	80024e6 <HAL_GPIO_Init+0xf6>
 80025f8:	f04f 0c02 	mov.w	ip, #2
 80025fc:	fa0c f707 	lsl.w	r7, ip, r7
 8002600:	433a      	orrs	r2, r7
 8002602:	e770      	b.n	80024e6 <HAL_GPIO_Init+0xf6>
 8002604:	f04f 0c06 	mov.w	ip, #6
 8002608:	fa0c f707 	lsl.w	r7, ip, r7
 800260c:	433a      	orrs	r2, r7
 800260e:	e76a      	b.n	80024e6 <HAL_GPIO_Init+0xf6>
 8002610:	f04f 0c04 	mov.w	ip, #4
 8002614:	fa0c f707 	lsl.w	r7, ip, r7
 8002618:	433a      	orrs	r2, r7
 800261a:	e764      	b.n	80024e6 <HAL_GPIO_Init+0xf6>
 800261c:	f04f 0c05 	mov.w	ip, #5
 8002620:	fa0c f707 	lsl.w	r7, ip, r7
 8002624:	433a      	orrs	r2, r7
 8002626:	e75e      	b.n	80024e6 <HAL_GPIO_Init+0xf6>
 8002628:	f04f 0c07 	mov.w	ip, #7
 800262c:	fa0c f707 	lsl.w	r7, ip, r7
 8002630:	433a      	orrs	r2, r7
 8002632:	e758      	b.n	80024e6 <HAL_GPIO_Init+0xf6>
 8002634:	58024400 	.word	0x58024400
 8002638:	58020000 	.word	0x58020000
 800263c:	58020800 	.word	0x58020800
 8002640:	58020c00 	.word	0x58020c00
 8002644:	58021000 	.word	0x58021000
 8002648:	58021400 	.word	0x58021400
 800264c:	58021800 	.word	0x58021800
 8002650:	58021c00 	.word	0x58021c00
 8002654:	58022400 	.word	0x58022400

08002658 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002658:	b902      	cbnz	r2, 800265c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800265a:	0409      	lsls	r1, r1, #16
 800265c:	6181      	str	r1, [r0, #24]
  }
}
 800265e:	4770      	bx	lr

08002660 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002660:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002662:	ea01 0203 	and.w	r2, r1, r3
 8002666:	ea21 0103 	bic.w	r1, r1, r3
 800266a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800266e:	6181      	str	r1, [r0, #24]
}
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop

08002674 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002674:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002676:	4c10      	ldr	r4, [pc, #64]	@ (80026b8 <HAL_PWREx_ConfigSupply+0x44>)
 8002678:	68e3      	ldr	r3, [r4, #12]
 800267a:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800267e:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002680:	d105      	bne.n	800268e <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	1a18      	subs	r0, r3, r0
 8002688:	bf18      	it	ne
 800268a:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800268c:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800268e:	f023 0307 	bic.w	r3, r3, #7
 8002692:	4303      	orrs	r3, r0
 8002694:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 8002696:	f7fe fe3d 	bl	8001314 <HAL_GetTick>
 800269a:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800269c:	e005      	b.n	80026aa <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800269e:	f7fe fe39 	bl	8001314 <HAL_GetTick>
 80026a2:	1b40      	subs	r0, r0, r5
 80026a4:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80026a8:	d804      	bhi.n	80026b4 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80026aa:	6863      	ldr	r3, [r4, #4]
 80026ac:	049b      	lsls	r3, r3, #18
 80026ae:	d5f6      	bpl.n	800269e <HAL_PWREx_ConfigSupply+0x2a>
      return HAL_OK;
 80026b0:	2000      	movs	r0, #0
}
 80026b2:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 80026b4:	2001      	movs	r0, #1
}
 80026b6:	bd38      	pop	{r3, r4, r5, pc}
 80026b8:	58024800 	.word	0x58024800

080026bc <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80026bc:	4b33      	ldr	r3, [pc, #204]	@ (800278c <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 80026be:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80026c0:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80026c2:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80026c4:	6add      	ldr	r5, [r3, #44]	@ 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 80026c6:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80026ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80026cc:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 80026d0:	d036      	beq.n	8002740 <HAL_RCC_GetSysClockFreq.part.0+0x84>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80026d2:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80026d6:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80026da:	f001 0103 	and.w	r1, r1, #3
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80026de:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80026e2:	fb05 f202 	mul.w	r2, r5, r2
 80026e6:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80026e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026ec:	ee06 2a90 	vmov	s13, r2
 80026f0:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 80026f4:	d002      	beq.n	80026fc <HAL_RCC_GetSysClockFreq.part.0+0x40>
 80026f6:	2902      	cmp	r1, #2
 80026f8:	d042      	beq.n	8002780 <HAL_RCC_GetSysClockFreq.part.0+0xc4>
 80026fa:	b319      	cbz	r1, 8002744 <HAL_RCC_GetSysClockFreq.part.0+0x88>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80026fc:	eddf 7a24 	vldr	s15, [pc, #144]	@ 8002790 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 8002700:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8002704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800270a:	ee07 3a90 	vmov	s15, r3
 800270e:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8002712:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002716:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800271a:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800271e:	ee67 7a86 	vmul.f32	s15, s15, s12
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002722:	4b1a      	ldr	r3, [pc, #104]	@ (800278c <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002726:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800272a:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800272c:	ee07 3a10 	vmov	s14, r3
 8002730:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8002734:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002738:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800273c:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8002740:	bc30      	pop	{r4, r5}
 8002742:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	0692      	lsls	r2, r2, #26
 8002748:	d51d      	bpl.n	8002786 <HAL_RCC_GetSysClockFreq.part.0+0xca>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800274a:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800274c:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002750:	4a10      	ldr	r2, [pc, #64]	@ (8002794 <HAL_RCC_GetSysClockFreq.part.0+0xd8>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002754:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002758:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800275c:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800275e:	ee07 3a90 	vmov	s15, r3
 8002762:	ee06 2a10 	vmov	s12, r2
 8002766:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800276a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800276e:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8002772:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8002776:	ee36 7aa5 	vadd.f32	s14, s13, s11
 800277a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800277e:	e7d0      	b.n	8002722 <HAL_RCC_GetSysClockFreq.part.0+0x66>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002780:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8002798 <HAL_RCC_GetSysClockFreq.part.0+0xdc>
 8002784:	e7bc      	b.n	8002700 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002786:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800279c <HAL_RCC_GetSysClockFreq.part.0+0xe0>
 800278a:	e7b9      	b.n	8002700 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 800278c:	58024400 	.word	0x58024400
 8002790:	4a742400 	.word	0x4a742400
 8002794:	03d09000 	.word	0x03d09000
 8002798:	4c371b00 	.word	0x4c371b00
 800279c:	4c742400 	.word	0x4c742400

080027a0 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 80027a0:	2800      	cmp	r0, #0
 80027a2:	f000 82a1 	beq.w	8002ce8 <HAL_RCC_OscConfig+0x548>
{
 80027a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027a8:	6803      	ldr	r3, [r0, #0]
 80027aa:	4604      	mov	r4, r0
 80027ac:	07d9      	lsls	r1, r3, #31
 80027ae:	d52e      	bpl.n	800280e <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027b0:	499b      	ldr	r1, [pc, #620]	@ (8002a20 <HAL_RCC_OscConfig+0x280>)
 80027b2:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027b4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027b6:	f002 0238 	and.w	r2, r2, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80027ba:	2a10      	cmp	r2, #16
 80027bc:	f000 80d6 	beq.w	800296c <HAL_RCC_OscConfig+0x1cc>
 80027c0:	2a18      	cmp	r2, #24
 80027c2:	f000 80ce 	beq.w	8002962 <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027c6:	6863      	ldr	r3, [r4, #4]
 80027c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027cc:	f000 80ee 	beq.w	80029ac <HAL_RCC_OscConfig+0x20c>
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f000 8144 	beq.w	8002a5e <HAL_RCC_OscConfig+0x2be>
 80027d6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027da:	4b91      	ldr	r3, [pc, #580]	@ (8002a20 <HAL_RCC_OscConfig+0x280>)
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	f000 824e 	beq.w	8002c7e <HAL_RCC_OscConfig+0x4de>
 80027e2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80027ee:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80027f0:	f7fe fd90 	bl	8001314 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027f4:	4e8a      	ldr	r6, [pc, #552]	@ (8002a20 <HAL_RCC_OscConfig+0x280>)
        tickstart = HAL_GetTick();
 80027f6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027f8:	e005      	b.n	8002806 <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027fa:	f7fe fd8b 	bl	8001314 <HAL_GetTick>
 80027fe:	1b40      	subs	r0, r0, r5
 8002800:	2864      	cmp	r0, #100	@ 0x64
 8002802:	f200 812a 	bhi.w	8002a5a <HAL_RCC_OscConfig+0x2ba>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002806:	6833      	ldr	r3, [r6, #0]
 8002808:	039b      	lsls	r3, r3, #14
 800280a:	d5f6      	bpl.n	80027fa <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800280c:	6823      	ldr	r3, [r4, #0]
 800280e:	079d      	lsls	r5, r3, #30
 8002810:	d464      	bmi.n	80028dc <HAL_RCC_OscConfig+0x13c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002812:	06d9      	lsls	r1, r3, #27
 8002814:	d528      	bpl.n	8002868 <HAL_RCC_OscConfig+0xc8>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002816:	4982      	ldr	r1, [pc, #520]	@ (8002a20 <HAL_RCC_OscConfig+0x280>)
 8002818:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800281a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800281c:	f002 0238 	and.w	r2, r2, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002820:	2a08      	cmp	r2, #8
 8002822:	f000 80b3 	beq.w	800298c <HAL_RCC_OscConfig+0x1ec>
 8002826:	2a18      	cmp	r2, #24
 8002828:	f000 80ab 	beq.w	8002982 <HAL_RCC_OscConfig+0x1e2>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800282c:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 800282e:	4d7c      	ldr	r5, [pc, #496]	@ (8002a20 <HAL_RCC_OscConfig+0x280>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 814c 	beq.w	8002ace <HAL_RCC_OscConfig+0x32e>
        __HAL_RCC_CSI_ENABLE();
 8002836:	682b      	ldr	r3, [r5, #0]
 8002838:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800283c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800283e:	f7fe fd69 	bl	8001314 <HAL_GetTick>
 8002842:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002844:	e005      	b.n	8002852 <HAL_RCC_OscConfig+0xb2>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002846:	f7fe fd65 	bl	8001314 <HAL_GetTick>
 800284a:	1b80      	subs	r0, r0, r6
 800284c:	2802      	cmp	r0, #2
 800284e:	f200 8104 	bhi.w	8002a5a <HAL_RCC_OscConfig+0x2ba>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002852:	682b      	ldr	r3, [r5, #0]
 8002854:	05db      	lsls	r3, r3, #23
 8002856:	d5f6      	bpl.n	8002846 <HAL_RCC_OscConfig+0xa6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002858:	68eb      	ldr	r3, [r5, #12]
 800285a:	6a22      	ldr	r2, [r4, #32]
 800285c:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8002860:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002864:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002866:	6823      	ldr	r3, [r4, #0]
 8002868:	071d      	lsls	r5, r3, #28
 800286a:	d516      	bpl.n	800289a <HAL_RCC_OscConfig+0xfa>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800286c:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 800286e:	4d6c      	ldr	r5, [pc, #432]	@ (8002a20 <HAL_RCC_OscConfig+0x280>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002870:	2b00      	cmp	r3, #0
 8002872:	f000 810a 	beq.w	8002a8a <HAL_RCC_OscConfig+0x2ea>
      __HAL_RCC_LSI_ENABLE();
 8002876:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8002878:	f043 0301 	orr.w	r3, r3, #1
 800287c:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800287e:	f7fe fd49 	bl	8001314 <HAL_GetTick>
 8002882:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002884:	e005      	b.n	8002892 <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002886:	f7fe fd45 	bl	8001314 <HAL_GetTick>
 800288a:	1b80      	subs	r0, r0, r6
 800288c:	2802      	cmp	r0, #2
 800288e:	f200 80e4 	bhi.w	8002a5a <HAL_RCC_OscConfig+0x2ba>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002892:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8002894:	0798      	lsls	r0, r3, #30
 8002896:	d5f6      	bpl.n	8002886 <HAL_RCC_OscConfig+0xe6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002898:	6823      	ldr	r3, [r4, #0]
 800289a:	069a      	lsls	r2, r3, #26
 800289c:	d516      	bpl.n	80028cc <HAL_RCC_OscConfig+0x12c>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800289e:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 80028a0:	4d5f      	ldr	r5, [pc, #380]	@ (8002a20 <HAL_RCC_OscConfig+0x280>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f000 8102 	beq.w	8002aac <HAL_RCC_OscConfig+0x30c>
      __HAL_RCC_HSI48_ENABLE();
 80028a8:	682b      	ldr	r3, [r5, #0]
 80028aa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80028ae:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80028b0:	f7fe fd30 	bl	8001314 <HAL_GetTick>
 80028b4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80028b6:	e005      	b.n	80028c4 <HAL_RCC_OscConfig+0x124>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028b8:	f7fe fd2c 	bl	8001314 <HAL_GetTick>
 80028bc:	1b80      	subs	r0, r0, r6
 80028be:	2802      	cmp	r0, #2
 80028c0:	f200 80cb 	bhi.w	8002a5a <HAL_RCC_OscConfig+0x2ba>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80028c4:	682b      	ldr	r3, [r5, #0]
 80028c6:	049f      	lsls	r7, r3, #18
 80028c8:	d5f6      	bpl.n	80028b8 <HAL_RCC_OscConfig+0x118>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028ca:	6823      	ldr	r3, [r4, #0]
 80028cc:	0759      	lsls	r1, r3, #29
 80028ce:	d473      	bmi.n	80029b8 <HAL_RCC_OscConfig+0x218>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028d0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f040 80a8 	bne.w	8002a28 <HAL_RCC_OscConfig+0x288>
  return HAL_OK;
 80028d8:	2000      	movs	r0, #0
}
 80028da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028dc:	4a50      	ldr	r2, [pc, #320]	@ (8002a20 <HAL_RCC_OscConfig+0x280>)
 80028de:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80028e0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80028e2:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 80028e6:	d122      	bne.n	800292e <HAL_RCC_OscConfig+0x18e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028e8:	4b4d      	ldr	r3, [pc, #308]	@ (8002a20 <HAL_RCC_OscConfig+0x280>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80028ea:	68e2      	ldr	r2, [r4, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	0759      	lsls	r1, r3, #29
 80028f0:	d501      	bpl.n	80028f6 <HAL_RCC_OscConfig+0x156>
 80028f2:	2a00      	cmp	r2, #0
 80028f4:	d043      	beq.n	800297e <HAL_RCC_OscConfig+0x1de>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80028f6:	4d4a      	ldr	r5, [pc, #296]	@ (8002a20 <HAL_RCC_OscConfig+0x280>)
 80028f8:	682b      	ldr	r3, [r5, #0]
 80028fa:	f023 0319 	bic.w	r3, r3, #25
 80028fe:	4313      	orrs	r3, r2
 8002900:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002902:	f7fe fd07 	bl	8001314 <HAL_GetTick>
 8002906:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002908:	e005      	b.n	8002916 <HAL_RCC_OscConfig+0x176>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800290a:	f7fe fd03 	bl	8001314 <HAL_GetTick>
 800290e:	1b80      	subs	r0, r0, r6
 8002910:	2802      	cmp	r0, #2
 8002912:	f200 80a2 	bhi.w	8002a5a <HAL_RCC_OscConfig+0x2ba>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002916:	682b      	ldr	r3, [r5, #0]
 8002918:	075b      	lsls	r3, r3, #29
 800291a:	d5f6      	bpl.n	800290a <HAL_RCC_OscConfig+0x16a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800291c:	686b      	ldr	r3, [r5, #4]
 800291e:	6922      	ldr	r2, [r4, #16]
 8002920:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002924:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002928:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800292a:	6823      	ldr	r3, [r4, #0]
 800292c:	e771      	b.n	8002812 <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800292e:	2b18      	cmp	r3, #24
 8002930:	f000 80f0 	beq.w	8002b14 <HAL_RCC_OscConfig+0x374>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002934:	4d3a      	ldr	r5, [pc, #232]	@ (8002a20 <HAL_RCC_OscConfig+0x280>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002936:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002938:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800293a:	2a00      	cmp	r2, #0
 800293c:	f000 80d9 	beq.w	8002af2 <HAL_RCC_OscConfig+0x352>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002940:	f023 0319 	bic.w	r3, r3, #25
 8002944:	4313      	orrs	r3, r2
 8002946:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002948:	f7fe fce4 	bl	8001314 <HAL_GetTick>
 800294c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800294e:	e004      	b.n	800295a <HAL_RCC_OscConfig+0x1ba>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002950:	f7fe fce0 	bl	8001314 <HAL_GetTick>
 8002954:	1b80      	subs	r0, r0, r6
 8002956:	2802      	cmp	r0, #2
 8002958:	d87f      	bhi.n	8002a5a <HAL_RCC_OscConfig+0x2ba>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800295a:	682b      	ldr	r3, [r5, #0]
 800295c:	075f      	lsls	r7, r3, #29
 800295e:	d5f7      	bpl.n	8002950 <HAL_RCC_OscConfig+0x1b0>
 8002960:	e7dc      	b.n	800291c <HAL_RCC_OscConfig+0x17c>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002962:	f001 0103 	and.w	r1, r1, #3
 8002966:	2902      	cmp	r1, #2
 8002968:	f47f af2d 	bne.w	80027c6 <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800296c:	4a2c      	ldr	r2, [pc, #176]	@ (8002a20 <HAL_RCC_OscConfig+0x280>)
 800296e:	6812      	ldr	r2, [r2, #0]
 8002970:	0392      	lsls	r2, r2, #14
 8002972:	f57f af4c 	bpl.w	800280e <HAL_RCC_OscConfig+0x6e>
 8002976:	6862      	ldr	r2, [r4, #4]
 8002978:	2a00      	cmp	r2, #0
 800297a:	f47f af48 	bne.w	800280e <HAL_RCC_OscConfig+0x6e>
    return HAL_ERROR;
 800297e:	2001      	movs	r0, #1
}
 8002980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002982:	f001 0103 	and.w	r1, r1, #3
 8002986:	2901      	cmp	r1, #1
 8002988:	f47f af50 	bne.w	800282c <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800298c:	4a24      	ldr	r2, [pc, #144]	@ (8002a20 <HAL_RCC_OscConfig+0x280>)
 800298e:	6812      	ldr	r2, [r2, #0]
 8002990:	05d2      	lsls	r2, r2, #23
 8002992:	d502      	bpl.n	800299a <HAL_RCC_OscConfig+0x1fa>
 8002994:	69e2      	ldr	r2, [r4, #28]
 8002996:	2a80      	cmp	r2, #128	@ 0x80
 8002998:	d1f1      	bne.n	800297e <HAL_RCC_OscConfig+0x1de>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800299a:	4921      	ldr	r1, [pc, #132]	@ (8002a20 <HAL_RCC_OscConfig+0x280>)
 800299c:	6a20      	ldr	r0, [r4, #32]
 800299e:	68ca      	ldr	r2, [r1, #12]
 80029a0:	f022 527c 	bic.w	r2, r2, #1056964608	@ 0x3f000000
 80029a4:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 80029a8:	60ca      	str	r2, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029aa:	e75d      	b.n	8002868 <HAL_RCC_OscConfig+0xc8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029ac:	4a1c      	ldr	r2, [pc, #112]	@ (8002a20 <HAL_RCC_OscConfig+0x280>)
 80029ae:	6813      	ldr	r3, [r2, #0]
 80029b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029b4:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029b6:	e71b      	b.n	80027f0 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 80029b8:	4d1a      	ldr	r5, [pc, #104]	@ (8002a24 <HAL_RCC_OscConfig+0x284>)
 80029ba:	682b      	ldr	r3, [r5, #0]
 80029bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029c0:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80029c2:	f7fe fca7 	bl	8001314 <HAL_GetTick>
 80029c6:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029c8:	e004      	b.n	80029d4 <HAL_RCC_OscConfig+0x234>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ca:	f7fe fca3 	bl	8001314 <HAL_GetTick>
 80029ce:	1b80      	subs	r0, r0, r6
 80029d0:	2864      	cmp	r0, #100	@ 0x64
 80029d2:	d842      	bhi.n	8002a5a <HAL_RCC_OscConfig+0x2ba>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029d4:	682b      	ldr	r3, [r5, #0]
 80029d6:	05da      	lsls	r2, r3, #23
 80029d8:	d5f7      	bpl.n	80029ca <HAL_RCC_OscConfig+0x22a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029da:	68a3      	ldr	r3, [r4, #8]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	f000 816f 	beq.w	8002cc0 <HAL_RCC_OscConfig+0x520>
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 8153 	beq.w	8002c8e <HAL_RCC_OscConfig+0x4ee>
 80029e8:	2b05      	cmp	r3, #5
 80029ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002a20 <HAL_RCC_OscConfig+0x280>)
 80029ec:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80029ee:	f000 8173 	beq.w	8002cd8 <HAL_RCC_OscConfig+0x538>
 80029f2:	f022 0201 	bic.w	r2, r2, #1
 80029f6:	671a      	str	r2, [r3, #112]	@ 0x70
 80029f8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80029fa:	f022 0204 	bic.w	r2, r2, #4
 80029fe:	671a      	str	r2, [r3, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8002a00:	f7fe fc88 	bl	8001314 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a04:	4e06      	ldr	r6, [pc, #24]	@ (8002a20 <HAL_RCC_OscConfig+0x280>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a06:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8002a0a:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a0c:	e004      	b.n	8002a18 <HAL_RCC_OscConfig+0x278>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a0e:	f7fe fc81 	bl	8001314 <HAL_GetTick>
 8002a12:	1b40      	subs	r0, r0, r5
 8002a14:	42b8      	cmp	r0, r7
 8002a16:	d820      	bhi.n	8002a5a <HAL_RCC_OscConfig+0x2ba>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a18:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8002a1a:	079b      	lsls	r3, r3, #30
 8002a1c:	d5f7      	bpl.n	8002a0e <HAL_RCC_OscConfig+0x26e>
 8002a1e:	e757      	b.n	80028d0 <HAL_RCC_OscConfig+0x130>
 8002a20:	58024400 	.word	0x58024400
 8002a24:	58024800 	.word	0x58024800
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002a28:	4da8      	ldr	r5, [pc, #672]	@ (8002ccc <HAL_RCC_OscConfig+0x52c>)
 8002a2a:	692a      	ldr	r2, [r5, #16]
 8002a2c:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8002a30:	2a18      	cmp	r2, #24
 8002a32:	f000 80d7 	beq.w	8002be4 <HAL_RCC_OscConfig+0x444>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a36:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8002a38:	682b      	ldr	r3, [r5, #0]
 8002a3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a3e:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a40:	d06c      	beq.n	8002b1c <HAL_RCC_OscConfig+0x37c>
        tickstart = HAL_GetTick();
 8002a42:	f7fe fc67 	bl	8001314 <HAL_GetTick>
 8002a46:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a48:	682b      	ldr	r3, [r5, #0]
 8002a4a:	019b      	lsls	r3, r3, #6
 8002a4c:	f57f af44 	bpl.w	80028d8 <HAL_RCC_OscConfig+0x138>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a50:	f7fe fc60 	bl	8001314 <HAL_GetTick>
 8002a54:	1b00      	subs	r0, r0, r4
 8002a56:	2802      	cmp	r0, #2
 8002a58:	d9f6      	bls.n	8002a48 <HAL_RCC_OscConfig+0x2a8>
            return HAL_TIMEOUT;
 8002a5a:	2003      	movs	r0, #3
}
 8002a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a5e:	4d9b      	ldr	r5, [pc, #620]	@ (8002ccc <HAL_RCC_OscConfig+0x52c>)
 8002a60:	682b      	ldr	r3, [r5, #0]
 8002a62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a66:	602b      	str	r3, [r5, #0]
 8002a68:	682b      	ldr	r3, [r5, #0]
 8002a6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a6e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002a70:	f7fe fc50 	bl	8001314 <HAL_GetTick>
 8002a74:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a76:	e004      	b.n	8002a82 <HAL_RCC_OscConfig+0x2e2>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a78:	f7fe fc4c 	bl	8001314 <HAL_GetTick>
 8002a7c:	1b80      	subs	r0, r0, r6
 8002a7e:	2864      	cmp	r0, #100	@ 0x64
 8002a80:	d8eb      	bhi.n	8002a5a <HAL_RCC_OscConfig+0x2ba>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a82:	682b      	ldr	r3, [r5, #0]
 8002a84:	039f      	lsls	r7, r3, #14
 8002a86:	d4f7      	bmi.n	8002a78 <HAL_RCC_OscConfig+0x2d8>
 8002a88:	e6c0      	b.n	800280c <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 8002a8a:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8002a8c:	f023 0301 	bic.w	r3, r3, #1
 8002a90:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8002a92:	f7fe fc3f 	bl	8001314 <HAL_GetTick>
 8002a96:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a98:	e004      	b.n	8002aa4 <HAL_RCC_OscConfig+0x304>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a9a:	f7fe fc3b 	bl	8001314 <HAL_GetTick>
 8002a9e:	1b80      	subs	r0, r0, r6
 8002aa0:	2802      	cmp	r0, #2
 8002aa2:	d8da      	bhi.n	8002a5a <HAL_RCC_OscConfig+0x2ba>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002aa4:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8002aa6:	0799      	lsls	r1, r3, #30
 8002aa8:	d4f7      	bmi.n	8002a9a <HAL_RCC_OscConfig+0x2fa>
 8002aaa:	e6f5      	b.n	8002898 <HAL_RCC_OscConfig+0xf8>
      __HAL_RCC_HSI48_DISABLE();
 8002aac:	682b      	ldr	r3, [r5, #0]
 8002aae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002ab2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002ab4:	f7fe fc2e 	bl	8001314 <HAL_GetTick>
 8002ab8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002aba:	e004      	b.n	8002ac6 <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002abc:	f7fe fc2a 	bl	8001314 <HAL_GetTick>
 8002ac0:	1b80      	subs	r0, r0, r6
 8002ac2:	2802      	cmp	r0, #2
 8002ac4:	d8c9      	bhi.n	8002a5a <HAL_RCC_OscConfig+0x2ba>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ac6:	682b      	ldr	r3, [r5, #0]
 8002ac8:	0498      	lsls	r0, r3, #18
 8002aca:	d4f7      	bmi.n	8002abc <HAL_RCC_OscConfig+0x31c>
 8002acc:	e6fd      	b.n	80028ca <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_CSI_DISABLE();
 8002ace:	682b      	ldr	r3, [r5, #0]
 8002ad0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ad4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002ad6:	f7fe fc1d 	bl	8001314 <HAL_GetTick>
 8002ada:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002adc:	e004      	b.n	8002ae8 <HAL_RCC_OscConfig+0x348>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002ade:	f7fe fc19 	bl	8001314 <HAL_GetTick>
 8002ae2:	1b80      	subs	r0, r0, r6
 8002ae4:	2802      	cmp	r0, #2
 8002ae6:	d8b8      	bhi.n	8002a5a <HAL_RCC_OscConfig+0x2ba>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ae8:	682b      	ldr	r3, [r5, #0]
 8002aea:	05df      	lsls	r7, r3, #23
 8002aec:	d4f7      	bmi.n	8002ade <HAL_RCC_OscConfig+0x33e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aee:	6823      	ldr	r3, [r4, #0]
 8002af0:	e6ba      	b.n	8002868 <HAL_RCC_OscConfig+0xc8>
        __HAL_RCC_HSI_DISABLE();
 8002af2:	f023 0301 	bic.w	r3, r3, #1
 8002af6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002af8:	f7fe fc0c 	bl	8001314 <HAL_GetTick>
 8002afc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002afe:	e004      	b.n	8002b0a <HAL_RCC_OscConfig+0x36a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b00:	f7fe fc08 	bl	8001314 <HAL_GetTick>
 8002b04:	1b80      	subs	r0, r0, r6
 8002b06:	2802      	cmp	r0, #2
 8002b08:	d8a7      	bhi.n	8002a5a <HAL_RCC_OscConfig+0x2ba>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b0a:	682b      	ldr	r3, [r5, #0]
 8002b0c:	0758      	lsls	r0, r3, #29
 8002b0e:	d4f7      	bmi.n	8002b00 <HAL_RCC_OscConfig+0x360>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002b10:	6823      	ldr	r3, [r4, #0]
 8002b12:	e67e      	b.n	8002812 <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002b14:	0790      	lsls	r0, r2, #30
 8002b16:	f47f af0d 	bne.w	8002934 <HAL_RCC_OscConfig+0x194>
 8002b1a:	e6e5      	b.n	80028e8 <HAL_RCC_OscConfig+0x148>
        tickstart = HAL_GetTick();
 8002b1c:	f7fe fbfa 	bl	8001314 <HAL_GetTick>
 8002b20:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b22:	e004      	b.n	8002b2e <HAL_RCC_OscConfig+0x38e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b24:	f7fe fbf6 	bl	8001314 <HAL_GetTick>
 8002b28:	1b80      	subs	r0, r0, r6
 8002b2a:	2802      	cmp	r0, #2
 8002b2c:	d895      	bhi.n	8002a5a <HAL_RCC_OscConfig+0x2ba>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b2e:	682b      	ldr	r3, [r5, #0]
 8002b30:	0199      	lsls	r1, r3, #6
 8002b32:	d4f7      	bmi.n	8002b24 <HAL_RCC_OscConfig+0x384>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b34:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8002b36:	4b66      	ldr	r3, [pc, #408]	@ (8002cd0 <HAL_RCC_OscConfig+0x530>)
 8002b38:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002b3a:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002b3c:	4965      	ldr	r1, [pc, #404]	@ (8002cd4 <HAL_RCC_OscConfig+0x534>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b3e:	4e63      	ldr	r6, [pc, #396]	@ (8002ccc <HAL_RCC_OscConfig+0x52c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b40:	4313      	orrs	r3, r2
 8002b42:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002b44:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8002b48:	62ab      	str	r3, [r5, #40]	@ 0x28
 8002b4a:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	@ 0x34
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	3a01      	subs	r2, #1
 8002b52:	025b      	lsls	r3, r3, #9
 8002b54:	0412      	lsls	r2, r2, #16
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8002b60:	3a01      	subs	r2, #1
 8002b62:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b66:	4313      	orrs	r3, r2
 8002b68:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8002b6a:	3a01      	subs	r2, #1
 8002b6c:	0612      	lsls	r2, r2, #24
 8002b6e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8002b72:	4313      	orrs	r3, r2
 8002b74:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8002b76:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8002b78:	f023 0301 	bic.w	r3, r3, #1
 8002b7c:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002b7e:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8002b80:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8002b82:	4011      	ands	r1, r2
 8002b84:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8002b88:	6369      	str	r1, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002b8a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8002b8c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002b8e:	f023 030c 	bic.w	r3, r3, #12
 8002b92:	4313      	orrs	r3, r2
 8002b94:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002b96:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8002b98:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8002b9a:	f023 0302 	bic.w	r3, r3, #2
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002ba2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8002ba4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ba8:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002baa:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8002bac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bb0:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002bb2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8002bb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bb8:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8002bba:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8002bbc:	f043 0301 	orr.w	r3, r3, #1
 8002bc0:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 8002bc2:	682b      	ldr	r3, [r5, #0]
 8002bc4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bc8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002bca:	f7fe fba3 	bl	8001314 <HAL_GetTick>
 8002bce:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002bd0:	6833      	ldr	r3, [r6, #0]
 8002bd2:	019a      	lsls	r2, r3, #6
 8002bd4:	f53f ae80 	bmi.w	80028d8 <HAL_RCC_OscConfig+0x138>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bd8:	f7fe fb9c 	bl	8001314 <HAL_GetTick>
 8002bdc:	1b00      	subs	r0, r0, r4
 8002bde:	2802      	cmp	r0, #2
 8002be0:	d9f6      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x430>
 8002be2:	e73a      	b.n	8002a5a <HAL_RCC_OscConfig+0x2ba>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002be4:	2b01      	cmp	r3, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002be6:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002be8:	6b28      	ldr	r0, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bea:	f43f aec8 	beq.w	800297e <HAL_RCC_OscConfig+0x1de>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bee:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bf2:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8002bf4:	428b      	cmp	r3, r1
 8002bf6:	f47f aec2 	bne.w	800297e <HAL_RCC_OscConfig+0x1de>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bfa:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bfe:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002c00:	429a      	cmp	r2, r3
 8002c02:	f47f aebc 	bne.w	800297e <HAL_RCC_OscConfig+0x1de>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c06:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002c08:	f3c0 0208 	ubfx	r2, r0, #0, #9
 8002c0c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	f47f aeb5 	bne.w	800297e <HAL_RCC_OscConfig+0x1de>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c14:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002c16:	f3c0 2246 	ubfx	r2, r0, #9, #7
 8002c1a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	f47f aeae 	bne.w	800297e <HAL_RCC_OscConfig+0x1de>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c22:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002c24:	f3c0 4206 	ubfx	r2, r0, #16, #7
 8002c28:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	f47f aea7 	bne.w	800297e <HAL_RCC_OscConfig+0x1de>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002c30:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002c32:	f3c0 6006 	ubfx	r0, r0, #24, #7
 8002c36:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c38:	4298      	cmp	r0, r3
 8002c3a:	f47f aea0 	bne.w	800297e <HAL_RCC_OscConfig+0x1de>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002c3e:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002c40:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002c42:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002c46:	429a      	cmp	r2, r3
 8002c48:	f43f ae46 	beq.w	80028d8 <HAL_RCC_OscConfig+0x138>
          __HAL_RCC_PLLFRACN_DISABLE();
 8002c4c:	4a1f      	ldr	r2, [pc, #124]	@ (8002ccc <HAL_RCC_OscConfig+0x52c>)
 8002c4e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8002c50:	f023 0301 	bic.w	r3, r3, #1
 8002c54:	62d3      	str	r3, [r2, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 8002c56:	f7fe fb5d 	bl	8001314 <HAL_GetTick>
 8002c5a:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002c5c:	f7fe fb5a 	bl	8001314 <HAL_GetTick>
 8002c60:	42a8      	cmp	r0, r5
 8002c62:	d0fb      	beq.n	8002c5c <HAL_RCC_OscConfig+0x4bc>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c64:	4a19      	ldr	r2, [pc, #100]	@ (8002ccc <HAL_RCC_OscConfig+0x52c>)
 8002c66:	4b1b      	ldr	r3, [pc, #108]	@ (8002cd4 <HAL_RCC_OscConfig+0x534>)
 8002c68:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 8002c6a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8002c6c:	4003      	ands	r3, r0
 8002c6e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002c72:	6353      	str	r3, [r2, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8002c74:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8002c76:	f043 0301 	orr.w	r3, r3, #1
 8002c7a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8002c7c:	e62c      	b.n	80028d8 <HAL_RCC_OscConfig+0x138>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c7e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002c8a:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c8c:	e5b0      	b.n	80027f0 <HAL_RCC_OscConfig+0x50>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c8e:	4d0f      	ldr	r5, [pc, #60]	@ (8002ccc <HAL_RCC_OscConfig+0x52c>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c90:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c94:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8002c96:	f023 0301 	bic.w	r3, r3, #1
 8002c9a:	672b      	str	r3, [r5, #112]	@ 0x70
 8002c9c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8002c9e:	f023 0304 	bic.w	r3, r3, #4
 8002ca2:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8002ca4:	f7fe fb36 	bl	8001314 <HAL_GetTick>
 8002ca8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002caa:	e005      	b.n	8002cb8 <HAL_RCC_OscConfig+0x518>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cac:	f7fe fb32 	bl	8001314 <HAL_GetTick>
 8002cb0:	1b80      	subs	r0, r0, r6
 8002cb2:	42b8      	cmp	r0, r7
 8002cb4:	f63f aed1 	bhi.w	8002a5a <HAL_RCC_OscConfig+0x2ba>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002cb8:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8002cba:	0798      	lsls	r0, r3, #30
 8002cbc:	d4f6      	bmi.n	8002cac <HAL_RCC_OscConfig+0x50c>
 8002cbe:	e607      	b.n	80028d0 <HAL_RCC_OscConfig+0x130>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cc0:	4a02      	ldr	r2, [pc, #8]	@ (8002ccc <HAL_RCC_OscConfig+0x52c>)
 8002cc2:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8002cc4:	f043 0301 	orr.w	r3, r3, #1
 8002cc8:	6713      	str	r3, [r2, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cca:	e699      	b.n	8002a00 <HAL_RCC_OscConfig+0x260>
 8002ccc:	58024400 	.word	0x58024400
 8002cd0:	fffffc0c 	.word	0xfffffc0c
 8002cd4:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cd8:	f042 0204 	orr.w	r2, r2, #4
 8002cdc:	671a      	str	r2, [r3, #112]	@ 0x70
 8002cde:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002ce0:	f042 0201 	orr.w	r2, r2, #1
 8002ce4:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ce6:	e68b      	b.n	8002a00 <HAL_RCC_OscConfig+0x260>
    return HAL_ERROR;
 8002ce8:	2001      	movs	r0, #1
}
 8002cea:	4770      	bx	lr

08002cec <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cec:	4a0c      	ldr	r2, [pc, #48]	@ (8002d20 <HAL_RCC_GetSysClockFreq+0x34>)
 8002cee:	6913      	ldr	r3, [r2, #16]
 8002cf0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002cf4:	2b10      	cmp	r3, #16
 8002cf6:	d004      	beq.n	8002d02 <HAL_RCC_GetSysClockFreq+0x16>
 8002cf8:	2b18      	cmp	r3, #24
 8002cfa:	d00d      	beq.n	8002d18 <HAL_RCC_GetSysClockFreq+0x2c>
 8002cfc:	b11b      	cbz	r3, 8002d06 <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
 8002cfe:	4809      	ldr	r0, [pc, #36]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0x38>)
 8002d00:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d02:	4809      	ldr	r0, [pc, #36]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002d04:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d06:	6813      	ldr	r3, [r2, #0]
 8002d08:	069b      	lsls	r3, r3, #26
 8002d0a:	d507      	bpl.n	8002d1c <HAL_RCC_GetSysClockFreq+0x30>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002d0c:	6813      	ldr	r3, [r2, #0]
 8002d0e:	4807      	ldr	r0, [pc, #28]	@ (8002d2c <HAL_RCC_GetSysClockFreq+0x40>)
 8002d10:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8002d14:	40d8      	lsrs	r0, r3
 8002d16:	4770      	bx	lr
 8002d18:	f7ff bcd0 	b.w	80026bc <HAL_RCC_GetSysClockFreq.part.0>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002d1c:	4803      	ldr	r0, [pc, #12]	@ (8002d2c <HAL_RCC_GetSysClockFreq+0x40>)
}
 8002d1e:	4770      	bx	lr
 8002d20:	58024400 	.word	0x58024400
 8002d24:	003d0900 	.word	0x003d0900
 8002d28:	02dc6c00 	.word	0x02dc6c00
 8002d2c:	03d09000 	.word	0x03d09000

08002d30 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002d30:	2800      	cmp	r0, #0
 8002d32:	f000 810e 	beq.w	8002f52 <HAL_RCC_ClockConfig+0x222>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d36:	4a8d      	ldr	r2, [pc, #564]	@ (8002f6c <HAL_RCC_ClockConfig+0x23c>)
 8002d38:	6813      	ldr	r3, [r2, #0]
 8002d3a:	f003 030f 	and.w	r3, r3, #15
 8002d3e:	428b      	cmp	r3, r1
{
 8002d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d44:	4604      	mov	r4, r0
 8002d46:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d48:	d20c      	bcs.n	8002d64 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d4a:	6813      	ldr	r3, [r2, #0]
 8002d4c:	f023 030f 	bic.w	r3, r3, #15
 8002d50:	430b      	orrs	r3, r1
 8002d52:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d54:	6813      	ldr	r3, [r2, #0]
 8002d56:	f003 030f 	and.w	r3, r3, #15
 8002d5a:	428b      	cmp	r3, r1
 8002d5c:	d002      	beq.n	8002d64 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8002d5e:	2001      	movs	r0, #1
}
 8002d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002d64:	6823      	ldr	r3, [r4, #0]
 8002d66:	0758      	lsls	r0, r3, #29
 8002d68:	d50b      	bpl.n	8002d82 <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002d6a:	4981      	ldr	r1, [pc, #516]	@ (8002f70 <HAL_RCC_ClockConfig+0x240>)
 8002d6c:	6920      	ldr	r0, [r4, #16]
 8002d6e:	698a      	ldr	r2, [r1, #24]
 8002d70:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8002d74:	4290      	cmp	r0, r2
 8002d76:	d904      	bls.n	8002d82 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d78:	698a      	ldr	r2, [r1, #24]
 8002d7a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002d7e:	4302      	orrs	r2, r0
 8002d80:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d82:	0719      	lsls	r1, r3, #28
 8002d84:	d50b      	bpl.n	8002d9e <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002d86:	497a      	ldr	r1, [pc, #488]	@ (8002f70 <HAL_RCC_ClockConfig+0x240>)
 8002d88:	6960      	ldr	r0, [r4, #20]
 8002d8a:	69ca      	ldr	r2, [r1, #28]
 8002d8c:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8002d90:	4290      	cmp	r0, r2
 8002d92:	d904      	bls.n	8002d9e <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d94:	69ca      	ldr	r2, [r1, #28]
 8002d96:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002d9a:	4302      	orrs	r2, r0
 8002d9c:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d9e:	06da      	lsls	r2, r3, #27
 8002da0:	d50b      	bpl.n	8002dba <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002da2:	4973      	ldr	r1, [pc, #460]	@ (8002f70 <HAL_RCC_ClockConfig+0x240>)
 8002da4:	69a0      	ldr	r0, [r4, #24]
 8002da6:	69ca      	ldr	r2, [r1, #28]
 8002da8:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8002dac:	4290      	cmp	r0, r2
 8002dae:	d904      	bls.n	8002dba <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002db0:	69ca      	ldr	r2, [r1, #28]
 8002db2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002db6:	4302      	orrs	r2, r0
 8002db8:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002dba:	069f      	lsls	r7, r3, #26
 8002dbc:	d50b      	bpl.n	8002dd6 <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002dbe:	496c      	ldr	r1, [pc, #432]	@ (8002f70 <HAL_RCC_ClockConfig+0x240>)
 8002dc0:	69e0      	ldr	r0, [r4, #28]
 8002dc2:	6a0a      	ldr	r2, [r1, #32]
 8002dc4:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8002dc8:	4290      	cmp	r0, r2
 8002dca:	d904      	bls.n	8002dd6 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002dcc:	6a0a      	ldr	r2, [r1, #32]
 8002dce:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002dd2:	4302      	orrs	r2, r0
 8002dd4:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dd6:	079e      	lsls	r6, r3, #30
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dd8:	f003 0201 	and.w	r2, r3, #1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ddc:	f140 80ab 	bpl.w	8002f36 <HAL_RCC_ClockConfig+0x206>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002de0:	4e63      	ldr	r6, [pc, #396]	@ (8002f70 <HAL_RCC_ClockConfig+0x240>)
 8002de2:	68e0      	ldr	r0, [r4, #12]
 8002de4:	69b1      	ldr	r1, [r6, #24]
 8002de6:	f001 010f 	and.w	r1, r1, #15
 8002dea:	4288      	cmp	r0, r1
 8002dec:	d904      	bls.n	8002df8 <HAL_RCC_ClockConfig+0xc8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dee:	69b1      	ldr	r1, [r6, #24]
 8002df0:	f021 010f 	bic.w	r1, r1, #15
 8002df4:	4301      	orrs	r1, r0
 8002df6:	61b1      	str	r1, [r6, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002df8:	2a00      	cmp	r2, #0
 8002dfa:	d030      	beq.n	8002e5e <HAL_RCC_ClockConfig+0x12e>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002dfc:	4a5c      	ldr	r2, [pc, #368]	@ (8002f70 <HAL_RCC_ClockConfig+0x240>)
 8002dfe:	68a1      	ldr	r1, [r4, #8]
 8002e00:	6993      	ldr	r3, [r2, #24]
 8002e02:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002e06:	430b      	orrs	r3, r1
 8002e08:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e0a:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e0c:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e0e:	2902      	cmp	r1, #2
 8002e10:	f000 80a1 	beq.w	8002f56 <HAL_RCC_ClockConfig+0x226>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e14:	2903      	cmp	r1, #3
 8002e16:	f000 8098 	beq.w	8002f4a <HAL_RCC_ClockConfig+0x21a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002e1a:	2901      	cmp	r1, #1
 8002e1c:	f000 80a1 	beq.w	8002f62 <HAL_RCC_ClockConfig+0x232>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e20:	075f      	lsls	r7, r3, #29
 8002e22:	d59c      	bpl.n	8002d5e <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e24:	4e52      	ldr	r6, [pc, #328]	@ (8002f70 <HAL_RCC_ClockConfig+0x240>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e26:	f241 3888 	movw	r8, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e2a:	6933      	ldr	r3, [r6, #16]
 8002e2c:	f023 0307 	bic.w	r3, r3, #7
 8002e30:	430b      	orrs	r3, r1
 8002e32:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 8002e34:	f7fe fa6e 	bl	8001314 <HAL_GetTick>
 8002e38:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e3a:	e005      	b.n	8002e48 <HAL_RCC_ClockConfig+0x118>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e3c:	f7fe fa6a 	bl	8001314 <HAL_GetTick>
 8002e40:	1bc0      	subs	r0, r0, r7
 8002e42:	4540      	cmp	r0, r8
 8002e44:	f200 808b 	bhi.w	8002f5e <HAL_RCC_ClockConfig+0x22e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e48:	6933      	ldr	r3, [r6, #16]
 8002e4a:	6862      	ldr	r2, [r4, #4]
 8002e4c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e50:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8002e54:	d1f2      	bne.n	8002e3c <HAL_RCC_ClockConfig+0x10c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e56:	6823      	ldr	r3, [r4, #0]
 8002e58:	079e      	lsls	r6, r3, #30
 8002e5a:	d506      	bpl.n	8002e6a <HAL_RCC_ClockConfig+0x13a>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e5c:	68e0      	ldr	r0, [r4, #12]
 8002e5e:	4944      	ldr	r1, [pc, #272]	@ (8002f70 <HAL_RCC_ClockConfig+0x240>)
 8002e60:	698a      	ldr	r2, [r1, #24]
 8002e62:	f002 020f 	and.w	r2, r2, #15
 8002e66:	4282      	cmp	r2, r0
 8002e68:	d869      	bhi.n	8002f3e <HAL_RCC_ClockConfig+0x20e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e6a:	4940      	ldr	r1, [pc, #256]	@ (8002f6c <HAL_RCC_ClockConfig+0x23c>)
 8002e6c:	680a      	ldr	r2, [r1, #0]
 8002e6e:	f002 020f 	and.w	r2, r2, #15
 8002e72:	42aa      	cmp	r2, r5
 8002e74:	d90a      	bls.n	8002e8c <HAL_RCC_ClockConfig+0x15c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e76:	680a      	ldr	r2, [r1, #0]
 8002e78:	f022 020f 	bic.w	r2, r2, #15
 8002e7c:	432a      	orrs	r2, r5
 8002e7e:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e80:	680a      	ldr	r2, [r1, #0]
 8002e82:	f002 020f 	and.w	r2, r2, #15
 8002e86:	42aa      	cmp	r2, r5
 8002e88:	f47f af69 	bne.w	8002d5e <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e8c:	0758      	lsls	r0, r3, #29
 8002e8e:	d50b      	bpl.n	8002ea8 <HAL_RCC_ClockConfig+0x178>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e90:	4937      	ldr	r1, [pc, #220]	@ (8002f70 <HAL_RCC_ClockConfig+0x240>)
 8002e92:	6920      	ldr	r0, [r4, #16]
 8002e94:	698a      	ldr	r2, [r1, #24]
 8002e96:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8002e9a:	4290      	cmp	r0, r2
 8002e9c:	d204      	bcs.n	8002ea8 <HAL_RCC_ClockConfig+0x178>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e9e:	698a      	ldr	r2, [r1, #24]
 8002ea0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002ea4:	4302      	orrs	r2, r0
 8002ea6:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ea8:	0719      	lsls	r1, r3, #28
 8002eaa:	d50b      	bpl.n	8002ec4 <HAL_RCC_ClockConfig+0x194>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002eac:	4930      	ldr	r1, [pc, #192]	@ (8002f70 <HAL_RCC_ClockConfig+0x240>)
 8002eae:	6960      	ldr	r0, [r4, #20]
 8002eb0:	69ca      	ldr	r2, [r1, #28]
 8002eb2:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8002eb6:	4290      	cmp	r0, r2
 8002eb8:	d204      	bcs.n	8002ec4 <HAL_RCC_ClockConfig+0x194>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002eba:	69ca      	ldr	r2, [r1, #28]
 8002ebc:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002ec0:	4302      	orrs	r2, r0
 8002ec2:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ec4:	06da      	lsls	r2, r3, #27
 8002ec6:	d50b      	bpl.n	8002ee0 <HAL_RCC_ClockConfig+0x1b0>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002ec8:	4929      	ldr	r1, [pc, #164]	@ (8002f70 <HAL_RCC_ClockConfig+0x240>)
 8002eca:	69a0      	ldr	r0, [r4, #24]
 8002ecc:	69ca      	ldr	r2, [r1, #28]
 8002ece:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8002ed2:	4290      	cmp	r0, r2
 8002ed4:	d204      	bcs.n	8002ee0 <HAL_RCC_ClockConfig+0x1b0>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ed6:	69ca      	ldr	r2, [r1, #28]
 8002ed8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002edc:	4302      	orrs	r2, r0
 8002ede:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002ee0:	069b      	lsls	r3, r3, #26
 8002ee2:	d50b      	bpl.n	8002efc <HAL_RCC_ClockConfig+0x1cc>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002ee4:	4a22      	ldr	r2, [pc, #136]	@ (8002f70 <HAL_RCC_ClockConfig+0x240>)
 8002ee6:	69e1      	ldr	r1, [r4, #28]
 8002ee8:	6a13      	ldr	r3, [r2, #32]
 8002eea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002eee:	4299      	cmp	r1, r3
 8002ef0:	d204      	bcs.n	8002efc <HAL_RCC_ClockConfig+0x1cc>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002ef2:	6a13      	ldr	r3, [r2, #32]
 8002ef4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ef8:	430b      	orrs	r3, r1
 8002efa:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002efc:	f7ff fef6 	bl	8002cec <HAL_RCC_GetSysClockFreq>
 8002f00:	4a1b      	ldr	r2, [pc, #108]	@ (8002f70 <HAL_RCC_ClockConfig+0x240>)
 8002f02:	4603      	mov	r3, r0
 8002f04:	481b      	ldr	r0, [pc, #108]	@ (8002f74 <HAL_RCC_ClockConfig+0x244>)
 8002f06:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f08:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002f0a:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 8002f0e:	4d1a      	ldr	r5, [pc, #104]	@ (8002f78 <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f10:	f002 020f 	and.w	r2, r2, #15
 8002f14:	4c19      	ldr	r4, [pc, #100]	@ (8002f7c <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002f16:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f18:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002f1a:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 8002f1e:	4818      	ldr	r0, [pc, #96]	@ (8002f80 <HAL_RCC_ClockConfig+0x250>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f20:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002f24:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 8002f26:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 8002f28:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f2a:	40d3      	lsrs	r3, r2
 8002f2c:	6023      	str	r3, [r4, #0]
}
 8002f2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 8002f32:	f7fd bcd5 	b.w	80008e0 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f36:	2a00      	cmp	r2, #0
 8002f38:	f47f af60 	bne.w	8002dfc <HAL_RCC_ClockConfig+0xcc>
 8002f3c:	e795      	b.n	8002e6a <HAL_RCC_ClockConfig+0x13a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f3e:	698a      	ldr	r2, [r1, #24]
 8002f40:	f022 020f 	bic.w	r2, r2, #15
 8002f44:	4302      	orrs	r2, r0
 8002f46:	618a      	str	r2, [r1, #24]
 8002f48:	e78f      	b.n	8002e6a <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f4a:	019a      	lsls	r2, r3, #6
 8002f4c:	f53f af6a 	bmi.w	8002e24 <HAL_RCC_ClockConfig+0xf4>
 8002f50:	e705      	b.n	8002d5e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8002f52:	2001      	movs	r0, #1
}
 8002f54:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f56:	0398      	lsls	r0, r3, #14
 8002f58:	f53f af64 	bmi.w	8002e24 <HAL_RCC_ClockConfig+0xf4>
 8002f5c:	e6ff      	b.n	8002d5e <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8002f5e:	2003      	movs	r0, #3
 8002f60:	e6fe      	b.n	8002d60 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f62:	05db      	lsls	r3, r3, #23
 8002f64:	f53f af5e 	bmi.w	8002e24 <HAL_RCC_ClockConfig+0xf4>
 8002f68:	e6f9      	b.n	8002d5e <HAL_RCC_ClockConfig+0x2e>
 8002f6a:	bf00      	nop
 8002f6c:	52002000 	.word	0x52002000
 8002f70:	58024400 	.word	0x58024400
 8002f74:	08012318 	.word	0x08012318
 8002f78:	24000004 	.word	0x24000004
 8002f7c:	24000000 	.word	0x24000000
 8002f80:	2400000c 	.word	0x2400000c

08002f84 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f84:	4a18      	ldr	r2, [pc, #96]	@ (8002fe8 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f86:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f88:	6913      	ldr	r3, [r2, #16]
 8002f8a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f8e:	2b10      	cmp	r3, #16
 8002f90:	d019      	beq.n	8002fc6 <HAL_RCC_GetHCLKFreq+0x42>
 8002f92:	2b18      	cmp	r3, #24
 8002f94:	d022      	beq.n	8002fdc <HAL_RCC_GetHCLKFreq+0x58>
 8002f96:	b1c3      	cbz	r3, 8002fca <HAL_RCC_GetHCLKFreq+0x46>
      sysclockfreq = CSI_VALUE;
 8002f98:	4b14      	ldr	r3, [pc, #80]	@ (8002fec <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002f9a:	4913      	ldr	r1, [pc, #76]	@ (8002fe8 <HAL_RCC_GetHCLKFreq+0x64>)
 8002f9c:	4814      	ldr	r0, [pc, #80]	@ (8002ff0 <HAL_RCC_GetHCLKFreq+0x6c>)
 8002f9e:	698a      	ldr	r2, [r1, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002fa0:	6989      	ldr	r1, [r1, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002fa2:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002fa6:	4c13      	ldr	r4, [pc, #76]	@ (8002ff4 <HAL_RCC_GetHCLKFreq+0x70>)
 8002fa8:	f001 010f 	and.w	r1, r1, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002fac:	4d12      	ldr	r5, [pc, #72]	@ (8002ff8 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002fae:	5c82      	ldrb	r2, [r0, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002fb0:	5c40      	ldrb	r0, [r0, r1]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002fb2:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002fb6:	f000 001f 	and.w	r0, r0, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002fba:	40d3      	lsrs	r3, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002fbc:	fa23 f000 	lsr.w	r0, r3, r0
  SystemCoreClock = common_system_clock;
 8002fc0:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002fc2:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8002fc4:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8002ffc <HAL_RCC_GetHCLKFreq+0x78>)
 8002fc8:	e7e7      	b.n	8002f9a <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002fca:	6813      	ldr	r3, [r2, #0]
 8002fcc:	069b      	lsls	r3, r3, #26
 8002fce:	d509      	bpl.n	8002fe4 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002fd0:	6812      	ldr	r2, [r2, #0]
 8002fd2:	4b0b      	ldr	r3, [pc, #44]	@ (8003000 <HAL_RCC_GetHCLKFreq+0x7c>)
 8002fd4:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8002fd8:	40d3      	lsrs	r3, r2
 8002fda:	e7de      	b.n	8002f9a <HAL_RCC_GetHCLKFreq+0x16>
 8002fdc:	f7ff fb6e 	bl	80026bc <HAL_RCC_GetSysClockFreq.part.0>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	e7da      	b.n	8002f9a <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002fe4:	4b06      	ldr	r3, [pc, #24]	@ (8003000 <HAL_RCC_GetHCLKFreq+0x7c>)
 8002fe6:	e7d8      	b.n	8002f9a <HAL_RCC_GetHCLKFreq+0x16>
 8002fe8:	58024400 	.word	0x58024400
 8002fec:	003d0900 	.word	0x003d0900
 8002ff0:	08012318 	.word	0x08012318
 8002ff4:	24000000 	.word	0x24000000
 8002ff8:	24000004 	.word	0x24000004
 8002ffc:	02dc6c00 	.word	0x02dc6c00
 8003000:	03d09000 	.word	0x03d09000

08003004 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003004:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003006:	f7ff ffbd 	bl	8002f84 <HAL_RCC_GetHCLKFreq>
 800300a:	4b05      	ldr	r3, [pc, #20]	@ (8003020 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800300c:	4a05      	ldr	r2, [pc, #20]	@ (8003024 <HAL_RCC_GetPCLK1Freq+0x20>)
 800300e:	69db      	ldr	r3, [r3, #28]
 8003010:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003014:	5cd3      	ldrb	r3, [r2, r3]
 8003016:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800301a:	40d8      	lsrs	r0, r3
 800301c:	bd08      	pop	{r3, pc}
 800301e:	bf00      	nop
 8003020:	58024400 	.word	0x58024400
 8003024:	08012318 	.word	0x08012318

08003028 <HAL_RCC_GetClockConfig>:
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003028:	4b13      	ldr	r3, [pc, #76]	@ (8003078 <HAL_RCC_GetClockConfig+0x50>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800302a:	223f      	movs	r2, #63	@ 0x3f
 800302c:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800302e:	691a      	ldr	r2, [r3, #16]
 8003030:	f002 0207 	and.w	r2, r2, #7
 8003034:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8003036:	699a      	ldr	r2, [r3, #24]
 8003038:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 800303c:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800303e:	699a      	ldr	r2, [r3, #24]
 8003040:	f002 020f 	and.w	r2, r2, #15
 8003044:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8003046:	699a      	ldr	r2, [r3, #24]
 8003048:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800304c:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800304e:	69da      	ldr	r2, [r3, #28]
 8003050:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8003054:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8003056:	69da      	ldr	r2, [r3, #28]
 8003058:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800305c:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800305e:	6a1b      	ldr	r3, [r3, #32]
{
 8003060:	b410      	push	{r4}
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8003062:	f003 0370 	and.w	r3, r3, #112	@ 0x70
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003066:	4c05      	ldr	r4, [pc, #20]	@ (800307c <HAL_RCC_GetClockConfig+0x54>)
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8003068:	61c3      	str	r3, [r0, #28]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800306a:	6823      	ldr	r3, [r4, #0]
}
 800306c:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003070:	f003 030f 	and.w	r3, r3, #15
 8003074:	600b      	str	r3, [r1, #0]
}
 8003076:	4770      	bx	lr
 8003078:	58024400 	.word	0x58024400
 800307c:	52002000 	.word	0x52002000

08003080 <RCCEx_PLL2_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 8003080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003082:	4c36      	ldr	r4, [pc, #216]	@ (800315c <RCCEx_PLL2_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 8003084:	4606      	mov	r6, r0
 8003086:	460f      	mov	r7, r1
    __HAL_RCC_PLL2_DISABLE();
 8003088:	6823      	ldr	r3, [r4, #0]
 800308a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800308e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003090:	f7fe f940 	bl	8001314 <HAL_GetTick>
 8003094:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003096:	e004      	b.n	80030a2 <RCCEx_PLL2_Config.part.0+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003098:	f7fe f93c 	bl	8001314 <HAL_GetTick>
 800309c:	1b40      	subs	r0, r0, r5
 800309e:	2802      	cmp	r0, #2
 80030a0:	d856      	bhi.n	8003150 <RCCEx_PLL2_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80030a2:	6823      	ldr	r3, [r4, #0]
 80030a4:	011a      	lsls	r2, r3, #4
 80030a6:	d4f7      	bmi.n	8003098 <RCCEx_PLL2_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80030a8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80030aa:	6832      	ldr	r2, [r6, #0]
 80030ac:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80030b0:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80030b4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80030b6:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 80030ba:	3b01      	subs	r3, #1
 80030bc:	3a01      	subs	r2, #1
 80030be:	025b      	lsls	r3, r3, #9
 80030c0:	0412      	lsls	r2, r2, #16
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80030c8:	4313      	orrs	r3, r2
 80030ca:	6872      	ldr	r2, [r6, #4]
 80030cc:	3a01      	subs	r2, #1
 80030ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030d2:	4313      	orrs	r3, r2
 80030d4:	6932      	ldr	r2, [r6, #16]
 80030d6:	3a01      	subs	r2, #1
 80030d8:	0612      	lsls	r2, r2, #24
 80030da:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80030de:	4313      	orrs	r3, r2
 80030e0:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80030e2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80030e4:	6972      	ldr	r2, [r6, #20]
 80030e6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80030ea:	4313      	orrs	r3, r2
 80030ec:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80030ee:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80030f0:	69b3      	ldr	r3, [r6, #24]
 80030f2:	f022 0220 	bic.w	r2, r2, #32
 80030f6:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80030f8:	4b19      	ldr	r3, [pc, #100]	@ (8003160 <RCCEx_PLL2_Config.part.0+0xe0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80030fa:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 80030fc:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80030fe:	f022 0210 	bic.w	r2, r2, #16
 8003102:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003104:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8003106:	69f2      	ldr	r2, [r6, #28]
 8003108:	400b      	ands	r3, r1
 800310a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800310e:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003110:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003112:	f043 0310 	orr.w	r3, r3, #16
 8003116:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003118:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800311a:	b1df      	cbz	r7, 8003154 <RCCEx_PLL2_Config.part.0+0xd4>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800311c:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800311e:	bf0c      	ite	eq
 8003120:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003124:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 8003128:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800312a:	4c0c      	ldr	r4, [pc, #48]	@ (800315c <RCCEx_PLL2_Config.part.0+0xdc>)
 800312c:	6823      	ldr	r3, [r4, #0]
 800312e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003132:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003134:	f7fe f8ee 	bl	8001314 <HAL_GetTick>
 8003138:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800313a:	e004      	b.n	8003146 <RCCEx_PLL2_Config.part.0+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800313c:	f7fe f8ea 	bl	8001314 <HAL_GetTick>
 8003140:	1b40      	subs	r0, r0, r5
 8003142:	2802      	cmp	r0, #2
 8003144:	d804      	bhi.n	8003150 <RCCEx_PLL2_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003146:	6823      	ldr	r3, [r4, #0]
 8003148:	011b      	lsls	r3, r3, #4
 800314a:	d5f7      	bpl.n	800313c <RCCEx_PLL2_Config.part.0+0xbc>
    }

  }


  return status;
 800314c:	2000      	movs	r0, #0
}
 800314e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8003150:	2003      	movs	r0, #3
}
 8003152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003154:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003158:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800315a:	e7e6      	b.n	800312a <RCCEx_PLL2_Config.part.0+0xaa>
 800315c:	58024400 	.word	0x58024400
 8003160:	ffff0007 	.word	0xffff0007

08003164 <RCCEx_PLL3_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 8003164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003166:	4c36      	ldr	r4, [pc, #216]	@ (8003240 <RCCEx_PLL3_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 8003168:	4606      	mov	r6, r0
 800316a:	460f      	mov	r7, r1
    __HAL_RCC_PLL3_DISABLE();
 800316c:	6823      	ldr	r3, [r4, #0]
 800316e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003172:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003174:	f7fe f8ce 	bl	8001314 <HAL_GetTick>
 8003178:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800317a:	e004      	b.n	8003186 <RCCEx_PLL3_Config.part.0+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800317c:	f7fe f8ca 	bl	8001314 <HAL_GetTick>
 8003180:	1b40      	subs	r0, r0, r5
 8003182:	2802      	cmp	r0, #2
 8003184:	d856      	bhi.n	8003234 <RCCEx_PLL3_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003186:	6823      	ldr	r3, [r4, #0]
 8003188:	009a      	lsls	r2, r3, #2
 800318a:	d4f7      	bmi.n	800317c <RCCEx_PLL3_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800318c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800318e:	6832      	ldr	r2, [r6, #0]
 8003190:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 8003194:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8003198:	62a3      	str	r3, [r4, #40]	@ 0x28
 800319a:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800319e:	3b01      	subs	r3, #1
 80031a0:	3a01      	subs	r2, #1
 80031a2:	025b      	lsls	r3, r3, #9
 80031a4:	0412      	lsls	r2, r2, #16
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80031ac:	4313      	orrs	r3, r2
 80031ae:	6872      	ldr	r2, [r6, #4]
 80031b0:	3a01      	subs	r2, #1
 80031b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031b6:	4313      	orrs	r3, r2
 80031b8:	6932      	ldr	r2, [r6, #16]
 80031ba:	3a01      	subs	r2, #1
 80031bc:	0612      	lsls	r2, r2, #24
 80031be:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80031c2:	4313      	orrs	r3, r2
 80031c4:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80031c6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80031c8:	6972      	ldr	r2, [r6, #20]
 80031ca:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80031ce:	4313      	orrs	r3, r2
 80031d0:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80031d2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80031d4:	69b3      	ldr	r3, [r6, #24]
 80031d6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80031da:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80031dc:	4b19      	ldr	r3, [pc, #100]	@ (8003244 <RCCEx_PLL3_Config.part.0+0xe0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80031de:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 80031e0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80031e2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031e6:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80031e8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80031ea:	69f2      	ldr	r2, [r6, #28]
 80031ec:	400b      	ands	r3, r1
 80031ee:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80031f2:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80031f4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80031f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031fa:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80031fc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 80031fe:	b1df      	cbz	r7, 8003238 <RCCEx_PLL3_Config.part.0+0xd4>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003200:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003202:	bf0c      	ite	eq
 8003204:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003208:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 800320c:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800320e:	4c0c      	ldr	r4, [pc, #48]	@ (8003240 <RCCEx_PLL3_Config.part.0+0xdc>)
 8003210:	6823      	ldr	r3, [r4, #0]
 8003212:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003216:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003218:	f7fe f87c 	bl	8001314 <HAL_GetTick>
 800321c:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800321e:	e004      	b.n	800322a <RCCEx_PLL3_Config.part.0+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003220:	f7fe f878 	bl	8001314 <HAL_GetTick>
 8003224:	1b40      	subs	r0, r0, r5
 8003226:	2802      	cmp	r0, #2
 8003228:	d804      	bhi.n	8003234 <RCCEx_PLL3_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800322a:	6823      	ldr	r3, [r4, #0]
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	d5f7      	bpl.n	8003220 <RCCEx_PLL3_Config.part.0+0xbc>
    }

  }


  return status;
 8003230:	2000      	movs	r0, #0
}
 8003232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8003234:	2003      	movs	r0, #3
}
 8003236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003238:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800323c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800323e:	e7e6      	b.n	800320e <RCCEx_PLL3_Config.part.0+0xaa>
 8003240:	58024400 	.word	0x58024400
 8003244:	ffff0007 	.word	0xffff0007

08003248 <HAL_RCCEx_PeriphCLKConfig>:
{
 8003248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800324c:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 8003250:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003252:	0118      	lsls	r0, r3, #4
 8003254:	f003 6600 	and.w	r6, r3, #134217728	@ 0x8000000
 8003258:	d526      	bpl.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x60>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800325a:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 800325c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8003260:	f000 8630 	beq.w	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8003264:	d815      	bhi.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8003266:	2900      	cmp	r1, #0
 8003268:	f000 84bc 	beq.w	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x99c>
 800326c:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8003270:	f040 83c5 	bne.w	80039fe <HAL_RCCEx_PeriphCLKConfig+0x7b6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003274:	49b0      	ldr	r1, [pc, #704]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003276:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003278:	f001 0103 	and.w	r1, r1, #3
 800327c:	2903      	cmp	r1, #3
 800327e:	f000 83be 	beq.w	80039fe <HAL_RCCEx_PeriphCLKConfig+0x7b6>
 8003282:	2102      	movs	r1, #2
 8003284:	f104 0008 	add.w	r0, r4, #8
 8003288:	f7ff fefa 	bl	8003080 <RCCEx_PLL2_Config.part.0>
 800328c:	4606      	mov	r6, r0
 800328e:	f000 be26 	b.w	8003ede <HAL_RCCEx_PeriphCLKConfig+0xc96>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8003292:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 8003296:	f040 83b2 	bne.w	80039fe <HAL_RCCEx_PeriphCLKConfig+0x7b6>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800329a:	4da7      	ldr	r5, [pc, #668]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800329c:	2600      	movs	r6, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800329e:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 80032a0:	f420 1040 	bic.w	r0, r0, #3145728	@ 0x300000
 80032a4:	4301      	orrs	r1, r0
 80032a6:	6529      	str	r1, [r5, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80032a8:	05d9      	lsls	r1, r3, #23
 80032aa:	d50a      	bpl.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    switch (PeriphClkInit->Sai1ClockSelection)
 80032ac:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 80032ae:	2904      	cmp	r1, #4
 80032b0:	d806      	bhi.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80032b2:	e8df f011 	tbh	[pc, r1, lsl #1]
 80032b6:	047a      	.short	0x047a
 80032b8:	05d505af 	.word	0x05d505af
 80032bc:	047f047f 	.word	0x047f047f
        ret = HAL_ERROR;
 80032c0:	2601      	movs	r6, #1
 80032c2:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80032c4:	055f      	lsls	r7, r3, #21
 80032c6:	d528      	bpl.n	800331a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    switch (PeriphClkInit->Sai4AClockSelection)
 80032c8:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
 80032cc:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 80032d0:	f000 85e7 	beq.w	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0xc5a>
 80032d4:	f200 80f9 	bhi.w	80034ca <HAL_RCCEx_PeriphCLKConfig+0x282>
 80032d8:	2900      	cmp	r1, #0
 80032da:	f000 8478 	beq.w	8003bce <HAL_RCCEx_PeriphCLKConfig+0x986>
 80032de:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80032e2:	f040 80fc 	bne.w	80034de <HAL_RCCEx_PeriphCLKConfig+0x296>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80032e6:	4994      	ldr	r1, [pc, #592]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80032e8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80032ea:	f001 0103 	and.w	r1, r1, #3
 80032ee:	2903      	cmp	r1, #3
 80032f0:	f000 80f5 	beq.w	80034de <HAL_RCCEx_PeriphCLKConfig+0x296>
 80032f4:	2100      	movs	r1, #0
 80032f6:	f104 0008 	add.w	r0, r4, #8
 80032fa:	f7ff fec1 	bl	8003080 <RCCEx_PLL2_Config.part.0>
 80032fe:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003300:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003304:	2d00      	cmp	r5, #0
 8003306:	f040 846a 	bne.w	8003bde <HAL_RCCEx_PeriphCLKConfig+0x996>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800330a:	4f8b      	ldr	r7, [pc, #556]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800330c:	f8d4 00a4 	ldr.w	r0, [r4, #164]	@ 0xa4
 8003310:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003312:	f421 0160 	bic.w	r1, r1, #14680064	@ 0xe00000
 8003316:	4301      	orrs	r1, r0
 8003318:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800331a:	0518      	lsls	r0, r3, #20
 800331c:	d528      	bpl.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x128>
    switch (PeriphClkInit->Sai4BClockSelection)
 800331e:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
 8003322:	f1b1 7f00 	cmp.w	r1, #33554432	@ 0x2000000
 8003326:	f000 858a 	beq.w	8003e3e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800332a:	f200 80db 	bhi.w	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 800332e:	2900      	cmp	r1, #0
 8003330:	f000 8430 	beq.w	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x94c>
 8003334:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
 8003338:	f040 80de 	bne.w	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800333c:	497e      	ldr	r1, [pc, #504]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800333e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003340:	f001 0103 	and.w	r1, r1, #3
 8003344:	2903      	cmp	r1, #3
 8003346:	f000 80d7 	beq.w	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800334a:	2100      	movs	r1, #0
 800334c:	f104 0008 	add.w	r0, r4, #8
 8003350:	f7ff fe96 	bl	8003080 <RCCEx_PLL2_Config.part.0>
 8003354:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003356:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800335a:	2d00      	cmp	r5, #0
 800335c:	f040 8422 	bne.w	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003360:	4f75      	ldr	r7, [pc, #468]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003362:	f8d4 00a8 	ldr.w	r0, [r4, #168]	@ 0xa8
 8003366:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003368:	f021 61e0 	bic.w	r1, r1, #117440512	@ 0x7000000
 800336c:	4301      	orrs	r1, r0
 800336e:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003370:	0199      	lsls	r1, r3, #6
 8003372:	d518      	bpl.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    switch (PeriphClkInit->OspiClockSelection)
 8003374:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8003376:	2920      	cmp	r1, #32
 8003378:	f000 849f 	beq.w	8003cba <HAL_RCCEx_PeriphCLKConfig+0xa72>
 800337c:	f200 80bf 	bhi.w	80034fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 8003380:	b139      	cbz	r1, 8003392 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003382:	2910      	cmp	r1, #16
 8003384:	f040 80be 	bne.w	8003504 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003388:	486b      	ldr	r0, [pc, #428]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800338a:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800338c:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8003390:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8003392:	2d00      	cmp	r5, #0
 8003394:	f040 847b 	bne.w	8003c8e <HAL_RCCEx_PeriphCLKConfig+0xa46>
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003398:	4f67      	ldr	r7, [pc, #412]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800339a:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800339c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800339e:	f021 0130 	bic.w	r1, r1, #48	@ 0x30
 80033a2:	4301      	orrs	r1, r0
 80033a4:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80033a6:	04df      	lsls	r7, r3, #19
 80033a8:	d526      	bpl.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    switch (PeriphClkInit->Spi123ClockSelection)
 80033aa:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 80033ac:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 80033b0:	f000 8566 	beq.w	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xc38>
 80033b4:	f200 80a9 	bhi.w	800350a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80033b8:	2900      	cmp	r1, #0
 80033ba:	f000 841a 	beq.w	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
 80033be:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 80033c2:	f040 80aa 	bne.w	800351a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80033c6:	495c      	ldr	r1, [pc, #368]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033c8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80033ca:	f001 0103 	and.w	r1, r1, #3
 80033ce:	2903      	cmp	r1, #3
 80033d0:	f000 80a3 	beq.w	800351a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80033d4:	2100      	movs	r1, #0
 80033d6:	f104 0008 	add.w	r0, r4, #8
 80033da:	f7ff fe51 	bl	8003080 <RCCEx_PLL2_Config.part.0>
 80033de:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80033e0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80033e4:	2d00      	cmp	r5, #0
 80033e6:	f040 840c 	bne.w	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80033ea:	4f53      	ldr	r7, [pc, #332]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033ec:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 80033ee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80033f0:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 80033f4:	4301      	orrs	r1, r0
 80033f6:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80033f8:	0498      	lsls	r0, r3, #18
 80033fa:	d524      	bpl.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    switch (PeriphClkInit->Spi45ClockSelection)
 80033fc:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 80033fe:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 8003402:	f000 84b9 	beq.w	8003d78 <HAL_RCCEx_PeriphCLKConfig+0xb30>
 8003406:	f200 808b 	bhi.w	8003520 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800340a:	b191      	cbz	r1, 8003432 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800340c:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8003410:	f040 808e 	bne.w	8003530 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003414:	4948      	ldr	r1, [pc, #288]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003416:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003418:	f001 0103 	and.w	r1, r1, #3
 800341c:	2903      	cmp	r1, #3
 800341e:	f000 8087 	beq.w	8003530 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8003422:	2101      	movs	r1, #1
 8003424:	f104 0008 	add.w	r0, r4, #8
 8003428:	f7ff fe2a 	bl	8003080 <RCCEx_PLL2_Config.part.0>
 800342c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800342e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003432:	2d00      	cmp	r5, #0
 8003434:	f040 856b 	bne.w	8003f0e <HAL_RCCEx_PeriphCLKConfig+0xcc6>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003438:	4f3f      	ldr	r7, [pc, #252]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800343a:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 800343c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800343e:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 8003442:	4301      	orrs	r1, r0
 8003444:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003446:	0459      	lsls	r1, r3, #17
 8003448:	d523      	bpl.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x24a>
    switch (PeriphClkInit->Spi6ClockSelection)
 800344a:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 800344e:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8003452:	f000 847e 	beq.w	8003d52 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8003456:	d871      	bhi.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8003458:	b181      	cbz	r1, 800347c <HAL_RCCEx_PeriphCLKConfig+0x234>
 800345a:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 800345e:	d175      	bne.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x304>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003460:	4935      	ldr	r1, [pc, #212]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003462:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003464:	f001 0103 	and.w	r1, r1, #3
 8003468:	2903      	cmp	r1, #3
 800346a:	d06f      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x304>
 800346c:	2101      	movs	r1, #1
 800346e:	f104 0008 	add.w	r0, r4, #8
 8003472:	f7ff fe05 	bl	8003080 <RCCEx_PLL2_Config.part.0>
 8003476:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003478:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800347c:	2d00      	cmp	r5, #0
 800347e:	f040 8543 	bne.w	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003482:	4f2d      	ldr	r7, [pc, #180]	@ (8003538 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003484:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 8003488:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800348a:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 800348e:	4301      	orrs	r1, r0
 8003490:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003492:	041f      	lsls	r7, r3, #16
 8003494:	d50d      	bpl.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
    switch (PeriphClkInit->FdcanClockSelection)
 8003496:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 8003498:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 800349c:	f000 8273 	beq.w	8003986 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80034a0:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 80034a4:	f000 83c8 	beq.w	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x9f0>
 80034a8:	2900      	cmp	r1, #0
 80034aa:	f000 8271 	beq.w	8003990 <HAL_RCCEx_PeriphCLKConfig+0x748>
        ret = HAL_ERROR;
 80034ae:	2601      	movs	r6, #1
 80034b0:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80034b2:	01d8      	lsls	r0, r3, #7
 80034b4:	d55c      	bpl.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x328>
    switch (PeriphClkInit->FmcClockSelection)
 80034b6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80034b8:	2903      	cmp	r1, #3
 80034ba:	f200 8586 	bhi.w	8003fca <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80034be:	e8df f011 	tbh	[pc, r1, lsl #1]
 80034c2:	004d      	.short	0x004d
 80034c4:	04220048 	.word	0x04220048
 80034c8:	004d      	.short	0x004d
    switch (PeriphClkInit->Sai4AClockSelection)
 80034ca:	f421 1000 	bic.w	r0, r1, #2097152	@ 0x200000
 80034ce:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80034d2:	f43f af17 	beq.w	8003304 <HAL_RCCEx_PeriphCLKConfig+0xbc>
 80034d6:	f5b1 0fc0 	cmp.w	r1, #6291456	@ 0x600000
 80034da:	f43f af13 	beq.w	8003304 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        ret = HAL_ERROR;
 80034de:	2601      	movs	r6, #1
 80034e0:	4635      	mov	r5, r6
 80034e2:	e71a      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    switch (PeriphClkInit->Sai4BClockSelection)
 80034e4:	f021 7080 	bic.w	r0, r1, #16777216	@ 0x1000000
 80034e8:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 80034ec:	f43f af35 	beq.w	800335a <HAL_RCCEx_PeriphCLKConfig+0x112>
 80034f0:	f1b1 7f40 	cmp.w	r1, #50331648	@ 0x3000000
 80034f4:	f43f af31 	beq.w	800335a <HAL_RCCEx_PeriphCLKConfig+0x112>
        ret = HAL_ERROR;
 80034f8:	2601      	movs	r6, #1
 80034fa:	4635      	mov	r5, r6
 80034fc:	e738      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x128>
    switch (PeriphClkInit->OspiClockSelection)
 80034fe:	2930      	cmp	r1, #48	@ 0x30
 8003500:	f43f af47 	beq.w	8003392 <HAL_RCCEx_PeriphCLKConfig+0x14a>
        ret = HAL_ERROR;
 8003504:	2601      	movs	r6, #1
 8003506:	4635      	mov	r5, r6
 8003508:	e74d      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    switch (PeriphClkInit->Spi123ClockSelection)
 800350a:	f5b1 5f40 	cmp.w	r1, #12288	@ 0x3000
 800350e:	f43f af69 	beq.w	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8003512:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 8003516:	f43f af65 	beq.w	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
        ret = HAL_ERROR;
 800351a:	2601      	movs	r6, #1
 800351c:	4635      	mov	r5, r6
 800351e:	e76b      	b.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    switch (PeriphClkInit->Spi45ClockSelection)
 8003520:	f421 3080 	bic.w	r0, r1, #65536	@ 0x10000
 8003524:	f5b0 2f80 	cmp.w	r0, #262144	@ 0x40000
 8003528:	d083      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800352a:	f5b1 3f40 	cmp.w	r1, #196608	@ 0x30000
 800352e:	d080      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
        ret = HAL_ERROR;
 8003530:	2601      	movs	r6, #1
 8003532:	4635      	mov	r5, r6
 8003534:	e787      	b.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8003536:	bf00      	nop
 8003538:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Spi6ClockSelection)
 800353c:	f021 5080 	bic.w	r0, r1, #268435456	@ 0x10000000
 8003540:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003544:	d09a      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003546:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 800354a:	d097      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x234>
        ret = HAL_ERROR;
 800354c:	2601      	movs	r6, #1
 800354e:	4635      	mov	r5, r6
 8003550:	e79f      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x24a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003552:	483d      	ldr	r0, [pc, #244]	@ (8003648 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003554:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8003556:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800355a:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800355c:	2d00      	cmp	r5, #0
 800355e:	f040 8390 	bne.w	8003c82 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003562:	4f39      	ldr	r7, [pc, #228]	@ (8003648 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003564:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8003566:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8003568:	f021 0103 	bic.w	r1, r1, #3
 800356c:	4301      	orrs	r1, r0
 800356e:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003570:	0259      	lsls	r1, r3, #9
 8003572:	f100 8260 	bmi.w	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x7ee>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003576:	07d9      	lsls	r1, r3, #31
 8003578:	d52f      	bpl.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x392>
    switch (PeriphClkInit->Usart16ClockSelection)
 800357a:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 800357c:	2928      	cmp	r1, #40	@ 0x28
 800357e:	d82a      	bhi.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
 8003580:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003584:	0029024e 	.word	0x0029024e
 8003588:	00290029 	.word	0x00290029
 800358c:	00290029 	.word	0x00290029
 8003590:	00290029 	.word	0x00290029
 8003594:	0029023f 	.word	0x0029023f
 8003598:	00290029 	.word	0x00290029
 800359c:	00290029 	.word	0x00290029
 80035a0:	00290029 	.word	0x00290029
 80035a4:	002904f4 	.word	0x002904f4
 80035a8:	00290029 	.word	0x00290029
 80035ac:	00290029 	.word	0x00290029
 80035b0:	00290029 	.word	0x00290029
 80035b4:	0029024e 	.word	0x0029024e
 80035b8:	00290029 	.word	0x00290029
 80035bc:	00290029 	.word	0x00290029
 80035c0:	00290029 	.word	0x00290029
 80035c4:	0029024e 	.word	0x0029024e
 80035c8:	00290029 	.word	0x00290029
 80035cc:	00290029 	.word	0x00290029
 80035d0:	00290029 	.word	0x00290029
 80035d4:	024e      	.short	0x024e
        ret = HAL_ERROR;
 80035d6:	2601      	movs	r6, #1
 80035d8:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80035da:	079f      	lsls	r7, r3, #30
 80035dc:	d524      	bpl.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    switch (PeriphClkInit->Usart234578ClockSelection)
 80035de:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 80035e0:	2905      	cmp	r1, #5
 80035e2:	f200 84ea 	bhi.w	8003fba <HAL_RCCEx_PeriphCLKConfig+0xd72>
 80035e6:	e8df f011 	tbh	[pc, r1, lsl #1]
 80035ea:	0015      	.short	0x0015
 80035ec:	04af0006 	.word	0x04af0006
 80035f0:	00150015 	.word	0x00150015
 80035f4:	0015      	.short	0x0015
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80035f6:	4914      	ldr	r1, [pc, #80]	@ (8003648 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80035f8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80035fa:	f001 0103 	and.w	r1, r1, #3
 80035fe:	2903      	cmp	r1, #3
 8003600:	f000 84db 	beq.w	8003fba <HAL_RCCEx_PeriphCLKConfig+0xd72>
 8003604:	2101      	movs	r1, #1
 8003606:	f104 0008 	add.w	r0, r4, #8
 800360a:	f7ff fd39 	bl	8003080 <RCCEx_PLL2_Config.part.0>
 800360e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003610:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003614:	2d00      	cmp	r5, #0
 8003616:	f040 846a 	bne.w	8003eee <HAL_RCCEx_PeriphCLKConfig+0xca6>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800361a:	4f0b      	ldr	r7, [pc, #44]	@ (8003648 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800361c:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800361e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003620:	f021 0107 	bic.w	r1, r1, #7
 8003624:	4301      	orrs	r1, r0
 8003626:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003628:	0758      	lsls	r0, r3, #29
 800362a:	d529      	bpl.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x438>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800362c:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 8003630:	2905      	cmp	r1, #5
 8003632:	f200 84c6 	bhi.w	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xd7a>
 8003636:	e8df f011 	tbh	[pc, r1, lsl #1]
 800363a:	0018      	.short	0x0018
 800363c:	04720009 	.word	0x04720009
 8003640:	00180018 	.word	0x00180018
 8003644:	0018      	.short	0x0018
 8003646:	bf00      	nop
 8003648:	58024400 	.word	0x58024400
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800364c:	49ae      	ldr	r1, [pc, #696]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
 800364e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003650:	f001 0103 	and.w	r1, r1, #3
 8003654:	2903      	cmp	r1, #3
 8003656:	f000 84b4 	beq.w	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xd7a>
 800365a:	2101      	movs	r1, #1
 800365c:	f104 0008 	add.w	r0, r4, #8
 8003660:	f7ff fd0e 	bl	8003080 <RCCEx_PLL2_Config.part.0>
 8003664:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003666:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800366a:	2d00      	cmp	r5, #0
 800366c:	f040 8442 	bne.w	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003670:	4fa5      	ldr	r7, [pc, #660]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
 8003672:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8003676:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003678:	f021 0107 	bic.w	r1, r1, #7
 800367c:	4301      	orrs	r1, r0
 800367e:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003680:	0699      	lsls	r1, r3, #26
 8003682:	d526      	bpl.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003684:	f8d4 108c 	ldr.w	r1, [r4, #140]	@ 0x8c
 8003688:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 800368c:	f000 8387 	beq.w	8003d9e <HAL_RCCEx_PeriphCLKConfig+0xb56>
 8003690:	f200 812d 	bhi.w	80038ee <HAL_RCCEx_PeriphCLKConfig+0x6a6>
 8003694:	b191      	cbz	r1, 80036bc <HAL_RCCEx_PeriphCLKConfig+0x474>
 8003696:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 800369a:	f040 8132 	bne.w	8003902 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800369e:	499a      	ldr	r1, [pc, #616]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
 80036a0:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80036a2:	f001 0103 	and.w	r1, r1, #3
 80036a6:	2903      	cmp	r1, #3
 80036a8:	f000 812b 	beq.w	8003902 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 80036ac:	2100      	movs	r1, #0
 80036ae:	f104 0008 	add.w	r0, r4, #8
 80036b2:	f7ff fce5 	bl	8003080 <RCCEx_PLL2_Config.part.0>
 80036b6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80036b8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80036bc:	2d00      	cmp	r5, #0
 80036be:	f040 841e 	bne.w	8003efe <HAL_RCCEx_PeriphCLKConfig+0xcb6>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036c2:	4f91      	ldr	r7, [pc, #580]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
 80036c4:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 80036c8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80036ca:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 80036ce:	4301      	orrs	r1, r0
 80036d0:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80036d2:	065f      	lsls	r7, r3, #25
 80036d4:	d526      	bpl.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    switch (PeriphClkInit->Lptim2ClockSelection)
 80036d6:	f8d4 1098 	ldr.w	r1, [r4, #152]	@ 0x98
 80036da:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 80036de:	f000 82ff 	beq.w	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xa98>
 80036e2:	f200 8113 	bhi.w	800390c <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 80036e6:	b191      	cbz	r1, 800370e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80036e8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80036ec:	f040 8118 	bne.w	8003920 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80036f0:	4985      	ldr	r1, [pc, #532]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
 80036f2:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80036f4:	f001 0103 	and.w	r1, r1, #3
 80036f8:	2903      	cmp	r1, #3
 80036fa:	f000 8111 	beq.w	8003920 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 80036fe:	2100      	movs	r1, #0
 8003700:	f104 0008 	add.w	r0, r4, #8
 8003704:	f7ff fcbc 	bl	8003080 <RCCEx_PLL2_Config.part.0>
 8003708:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800370a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800370e:	2d00      	cmp	r5, #0
 8003710:	f040 8400 	bne.w	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003714:	4f7c      	ldr	r7, [pc, #496]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
 8003716:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 800371a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800371c:	f421 51e0 	bic.w	r1, r1, #7168	@ 0x1c00
 8003720:	4301      	orrs	r1, r0
 8003722:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003724:	0618      	lsls	r0, r3, #24
 8003726:	d526      	bpl.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003728:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 800372c:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 8003730:	f000 82b0 	beq.w	8003c94 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8003734:	f200 80f7 	bhi.w	8003926 <HAL_RCCEx_PeriphCLKConfig+0x6de>
 8003738:	b191      	cbz	r1, 8003760 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800373a:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 800373e:	f040 80fc 	bne.w	800393a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003742:	4971      	ldr	r1, [pc, #452]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
 8003744:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003746:	f001 0103 	and.w	r1, r1, #3
 800374a:	2903      	cmp	r1, #3
 800374c:	f000 80f5 	beq.w	800393a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003750:	2100      	movs	r1, #0
 8003752:	f104 0008 	add.w	r0, r4, #8
 8003756:	f7ff fc93 	bl	8003080 <RCCEx_PLL2_Config.part.0>
 800375a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800375c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003760:	2d00      	cmp	r5, #0
 8003762:	f040 83cf 	bne.w	8003f04 <HAL_RCCEx_PeriphCLKConfig+0xcbc>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003766:	4f68      	ldr	r7, [pc, #416]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
 8003768:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 800376c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800376e:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 8003772:	4301      	orrs	r1, r0
 8003774:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8003776:	0719      	lsls	r1, r3, #28
 8003778:	d50b      	bpl.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800377a:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800377e:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8003782:	f000 8333 	beq.w	8003dec <HAL_RCCEx_PeriphCLKConfig+0xba4>
    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8003786:	4f60      	ldr	r7, [pc, #384]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
 8003788:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800378a:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 800378e:	4301      	orrs	r1, r0
 8003790:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003792:	06df      	lsls	r7, r3, #27
 8003794:	d50b      	bpl.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x566>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003796:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 800379a:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800379e:	f000 8311 	beq.w	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80037a2:	4f59      	ldr	r7, [pc, #356]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
 80037a4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80037a6:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
 80037aa:	4301      	orrs	r1, r0
 80037ac:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037ae:	0318      	lsls	r0, r3, #12
 80037b0:	d50e      	bpl.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x588>
    switch (PeriphClkInit->AdcClockSelection)
 80037b2:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 80037b6:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 80037ba:	f000 8105 	beq.w	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x780>
 80037be:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 80037c2:	f000 8110 	beq.w	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
 80037c6:	2900      	cmp	r1, #0
 80037c8:	f000 8249 	beq.w	8003c5e <HAL_RCCEx_PeriphCLKConfig+0xa16>
        ret = HAL_ERROR;
 80037cc:	2601      	movs	r6, #1
 80037ce:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80037d0:	0359      	lsls	r1, r3, #13
 80037d2:	d50f      	bpl.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    switch (PeriphClkInit->UsbClockSelection)
 80037d4:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 80037d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80037dc:	f000 82a6 	beq.w	8003d2c <HAL_RCCEx_PeriphCLKConfig+0xae4>
 80037e0:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 80037e4:	f000 80e4 	beq.w	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x768>
 80037e8:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80037ec:	f000 80db 	beq.w	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x75e>
        ret = HAL_ERROR;
 80037f0:	2601      	movs	r6, #1
 80037f2:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80037f4:	03df      	lsls	r7, r3, #15
 80037f6:	d520      	bpl.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
    switch (PeriphClkInit->SdmmcClockSelection)
 80037f8:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 80037fa:	2900      	cmp	r1, #0
 80037fc:	f000 8212 	beq.w	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x9dc>
 8003800:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8003804:	f040 80a8 	bne.w	8003958 <HAL_RCCEx_PeriphCLKConfig+0x710>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003808:	493f      	ldr	r1, [pc, #252]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
 800380a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800380c:	f001 0103 	and.w	r1, r1, #3
 8003810:	2903      	cmp	r1, #3
 8003812:	f000 80a1 	beq.w	8003958 <HAL_RCCEx_PeriphCLKConfig+0x710>
 8003816:	2102      	movs	r1, #2
 8003818:	f104 0008 	add.w	r0, r4, #8
 800381c:	f7ff fc30 	bl	8003080 <RCCEx_PLL2_Config.part.0>
 8003820:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003822:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003826:	2d00      	cmp	r5, #0
 8003828:	f040 8204 	bne.w	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x9ec>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800382c:	4f36      	ldr	r7, [pc, #216]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
 800382e:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8003830:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8003832:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8003836:	4301      	orrs	r1, r0
 8003838:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800383a:	0098      	lsls	r0, r3, #2
 800383c:	f100 8091 	bmi.w	8003962 <HAL_RCCEx_PeriphCLKConfig+0x71a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003840:	0399      	lsls	r1, r3, #14
 8003842:	f140 8087 	bpl.w	8003954 <HAL_RCCEx_PeriphCLKConfig+0x70c>
    switch (PeriphClkInit->RngClockSelection)
 8003846:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 8003848:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800384c:	f000 81dc 	beq.w	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x9c0>
 8003850:	d976      	bls.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003852:	f421 7080 	bic.w	r0, r1, #256	@ 0x100
 8003856:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 800385a:	d073      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x6fc>
 800385c:	2501      	movs	r5, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800385e:	02df      	lsls	r7, r3, #11
 8003860:	d506      	bpl.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x628>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003862:	4829      	ldr	r0, [pc, #164]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
 8003864:	6f26      	ldr	r6, [r4, #112]	@ 0x70
 8003866:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8003868:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800386c:	4331      	orrs	r1, r6
 800386e:	6501      	str	r1, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003870:	029e      	lsls	r6, r3, #10
 8003872:	d506      	bpl.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003874:	4824      	ldr	r0, [pc, #144]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
 8003876:	6ea6      	ldr	r6, [r4, #104]	@ 0x68
 8003878:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 800387a:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 800387e:	4331      	orrs	r1, r6
 8003880:	6501      	str	r1, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003882:	0058      	lsls	r0, r3, #1
 8003884:	d509      	bpl.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x652>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003886:	4920      	ldr	r1, [pc, #128]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
 8003888:	6908      	ldr	r0, [r1, #16]
 800388a:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 800388e:	6108      	str	r0, [r1, #16]
 8003890:	6908      	ldr	r0, [r1, #16]
 8003892:	f8d4 60b4 	ldr.w	r6, [r4, #180]	@ 0xb4
 8003896:	4330      	orrs	r0, r6
 8003898:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800389a:	2b00      	cmp	r3, #0
 800389c:	da06      	bge.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x664>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800389e:	481a      	ldr	r0, [pc, #104]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
 80038a0:	6d66      	ldr	r6, [r4, #84]	@ 0x54
 80038a2:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 80038a4:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 80038a8:	4331      	orrs	r1, r6
 80038aa:	64c1      	str	r1, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80038ac:	0219      	lsls	r1, r3, #8
 80038ae:	d507      	bpl.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80038b0:	4915      	ldr	r1, [pc, #84]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
 80038b2:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 80038b6:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 80038b8:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80038bc:	4303      	orrs	r3, r0
 80038be:	654b      	str	r3, [r1, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80038c0:	07d3      	lsls	r3, r2, #31
 80038c2:	f100 810c 	bmi.w	8003ade <HAL_RCCEx_PeriphCLKConfig+0x896>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80038c6:	0797      	lsls	r7, r2, #30
 80038c8:	f100 80f7 	bmi.w	8003aba <HAL_RCCEx_PeriphCLKConfig+0x872>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80038cc:	0756      	lsls	r6, r2, #29
 80038ce:	f100 813d 	bmi.w	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x904>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80038d2:	0710      	lsls	r0, r2, #28
 80038d4:	f100 8128 	bmi.w	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x8e0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80038d8:	06d1      	lsls	r1, r2, #27
 80038da:	f100 8112 	bmi.w	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80038de:	0693      	lsls	r3, r2, #26
 80038e0:	f100 8146 	bmi.w	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x928>
  if (status == HAL_OK)
 80038e4:	1e28      	subs	r0, r5, #0
 80038e6:	bf18      	it	ne
 80038e8:	2001      	movne	r0, #1
}
 80038ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
 80038ee:	f021 5080 	bic.w	r0, r1, #268435456	@ 0x10000000
 80038f2:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80038f6:	f43f aee1 	beq.w	80036bc <HAL_RCCEx_PeriphCLKConfig+0x474>
 80038fa:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 80038fe:	f43f aedd 	beq.w	80036bc <HAL_RCCEx_PeriphCLKConfig+0x474>
        ret = HAL_ERROR;
 8003902:	2601      	movs	r6, #1
 8003904:	4635      	mov	r5, r6
 8003906:	e6e4      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8003908:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Lptim2ClockSelection)
 800390c:	f421 6080 	bic.w	r0, r1, #1024	@ 0x400
 8003910:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8003914:	f43f aefb 	beq.w	800370e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8003918:	f5b1 6f40 	cmp.w	r1, #3072	@ 0xc00
 800391c:	f43f aef7 	beq.w	800370e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
        ret = HAL_ERROR;
 8003920:	2601      	movs	r6, #1
 8003922:	4635      	mov	r5, r6
 8003924:	e6fe      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003926:	f421 5000 	bic.w	r0, r1, #8192	@ 0x2000
 800392a:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800392e:	f43f af17 	beq.w	8003760 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003932:	f5b1 4fc0 	cmp.w	r1, #24576	@ 0x6000
 8003936:	f43f af13 	beq.w	8003760 <HAL_RCCEx_PeriphCLKConfig+0x518>
        ret = HAL_ERROR;
 800393a:	2601      	movs	r6, #1
 800393c:	4635      	mov	r5, r6
 800393e:	e71a      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    switch (PeriphClkInit->RngClockSelection)
 8003940:	2900      	cmp	r1, #0
 8003942:	d18b      	bne.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x614>
    if (ret == HAL_OK)
 8003944:	2d00      	cmp	r5, #0
 8003946:	d18a      	bne.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x616>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003948:	4db4      	ldr	r5, [pc, #720]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 800394a:	6d68      	ldr	r0, [r5, #84]	@ 0x54
 800394c:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 8003950:	4301      	orrs	r1, r0
 8003952:	6569      	str	r1, [r5, #84]	@ 0x54
      status = HAL_ERROR;
 8003954:	4635      	mov	r5, r6
 8003956:	e782      	b.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x616>
        ret = HAL_ERROR;
 8003958:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800395a:	0098      	lsls	r0, r3, #2
        ret = HAL_ERROR;
 800395c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800395e:	f57f af6f 	bpl.w	8003840 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003962:	49ae      	ldr	r1, [pc, #696]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8003964:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003966:	f001 0103 	and.w	r1, r1, #3
 800396a:	2903      	cmp	r1, #3
 800396c:	d009      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 800396e:	2102      	movs	r1, #2
 8003970:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003974:	f7ff fbf6 	bl	8003164 <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003978:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800397c:	2800      	cmp	r0, #0
 800397e:	f43f af5f 	beq.w	8003840 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      status = HAL_ERROR;
 8003982:	2601      	movs	r6, #1
 8003984:	e75c      	b.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003986:	48a5      	ldr	r0, [pc, #660]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8003988:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800398a:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800398e:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8003990:	2d00      	cmp	r5, #0
 8003992:	f040 817a 	bne.w	8003c8a <HAL_RCCEx_PeriphCLKConfig+0xa42>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003996:	4fa1      	ldr	r7, [pc, #644]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8003998:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 800399a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800399c:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 80039a0:	4301      	orrs	r1, r0
 80039a2:	6539      	str	r1, [r7, #80]	@ 0x50
 80039a4:	e585      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039a6:	489d      	ldr	r0, [pc, #628]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 80039a8:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80039aa:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 80039ae:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 80039b0:	2d00      	cmp	r5, #0
 80039b2:	f040 8168 	bne.w	8003c86 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039b6:	4f99      	ldr	r7, [pc, #612]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 80039b8:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 80039bc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80039be:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 80039c2:	4301      	orrs	r1, r0
 80039c4:	6579      	str	r1, [r7, #84]	@ 0x54
 80039c6:	e715      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80039c8:	4994      	ldr	r1, [pc, #592]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 80039ca:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80039cc:	f001 0103 	and.w	r1, r1, #3
 80039d0:	2903      	cmp	r1, #3
 80039d2:	f43f aefb 	beq.w	80037cc <HAL_RCCEx_PeriphCLKConfig+0x584>
 80039d6:	2102      	movs	r1, #2
 80039d8:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80039dc:	f7ff fbc2 	bl	8003164 <RCCEx_PLL3_Config.part.0>
 80039e0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80039e2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80039e6:	2d00      	cmp	r5, #0
 80039e8:	f040 8287 	bne.w	8003efa <HAL_RCCEx_PeriphCLKConfig+0xcb2>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039ec:	4f8b      	ldr	r7, [pc, #556]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 80039ee:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
 80039f2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80039f4:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 80039f8:	4301      	orrs	r1, r0
 80039fa:	65b9      	str	r1, [r7, #88]	@ 0x58
 80039fc:	e6e8      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x588>
        ret = HAL_ERROR;
 80039fe:	2601      	movs	r6, #1
 8003a00:	e452      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x60>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003a02:	4986      	ldr	r1, [pc, #536]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8003a04:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003a06:	f001 0103 	and.w	r1, r1, #3
 8003a0a:	2903      	cmp	r1, #3
 8003a0c:	f43f ade3 	beq.w	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
 8003a10:	2101      	movs	r1, #1
 8003a12:	f104 0008 	add.w	r0, r4, #8
 8003a16:	f7ff fb33 	bl	8003080 <RCCEx_PLL2_Config.part.0>
 8003a1a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003a1c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003a20:	2d00      	cmp	r5, #0
 8003a22:	f040 8279 	bne.w	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xcd0>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003a26:	4f7d      	ldr	r7, [pc, #500]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8003a28:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8003a2a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a2c:	f021 0138 	bic.w	r1, r1, #56	@ 0x38
 8003a30:	4301      	orrs	r1, r0
 8003a32:	6579      	str	r1, [r7, #84]	@ 0x54
 8003a34:	e5d1      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x392>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a36:	4f7a      	ldr	r7, [pc, #488]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a3e:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8003a40:	f7fd fc68 	bl	8001314 <HAL_GetTick>
 8003a44:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a46:	e006      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a48:	f7fd fc64 	bl	8001314 <HAL_GetTick>
 8003a4c:	eba0 0008 	sub.w	r0, r0, r8
 8003a50:	2864      	cmp	r0, #100	@ 0x64
 8003a52:	f200 829e 	bhi.w	8003f92 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	05db      	lsls	r3, r3, #23
 8003a5a:	d5f5      	bpl.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x800>
    if (ret == HAL_OK)
 8003a5c:	2d00      	cmp	r5, #0
 8003a5e:	f040 8299 	bne.w	8003f94 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003a62:	4a6e      	ldr	r2, [pc, #440]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8003a64:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 8003a68:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8003a6a:	4059      	eors	r1, r3
 8003a6c:	f411 7f40 	tst.w	r1, #768	@ 0x300
 8003a70:	d00b      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x842>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a72:	6f11      	ldr	r1, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a74:	6f10      	ldr	r0, [r2, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a76:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a7a:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 8003a7e:	6710      	str	r0, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a80:	6f10      	ldr	r0, [r2, #112]	@ 0x70
 8003a82:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
 8003a86:	6710      	str	r0, [r2, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 8003a88:	6711      	str	r1, [r2, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003a8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a8e:	f000 82a6 	beq.w	8003fde <HAL_RCCEx_PeriphCLKConfig+0xd96>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a92:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8003a96:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8003a9a:	f000 82b4 	beq.w	8004006 <HAL_RCCEx_PeriphCLKConfig+0xdbe>
 8003a9e:	495f      	ldr	r1, [pc, #380]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8003aa0:	690a      	ldr	r2, [r1, #16]
 8003aa2:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 8003aa6:	610a      	str	r2, [r1, #16]
 8003aa8:	485c      	ldr	r0, [pc, #368]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8003aaa:	f3c3 010b 	ubfx	r1, r3, #0, #12
 8003aae:	6f07      	ldr	r7, [r0, #112]	@ 0x70
 8003ab0:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003ab2:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ab6:	6701      	str	r1, [r0, #112]	@ 0x70
 8003ab8:	e55d      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x32e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003aba:	4b58      	ldr	r3, [pc, #352]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8003abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003abe:	f003 0303 	and.w	r3, r3, #3
 8003ac2:	2b03      	cmp	r3, #3
 8003ac4:	f000 826d 	beq.w	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
 8003ac8:	2101      	movs	r1, #1
 8003aca:	f104 0008 	add.w	r0, r4, #8
 8003ace:	f7ff fad7 	bl	8003080 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003ad2:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8003ad4:	2800      	cmp	r0, #0
 8003ad6:	f43f aef9 	beq.w	80038cc <HAL_RCCEx_PeriphCLKConfig+0x684>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003ada:	4605      	mov	r5, r0
 8003adc:	e6f6      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x684>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003ade:	4b4f      	ldr	r3, [pc, #316]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8003ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ae2:	f003 0303 	and.w	r3, r3, #3
 8003ae6:	2b03      	cmp	r3, #3
 8003ae8:	f000 8259 	beq.w	8003f9e <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8003aec:	2100      	movs	r1, #0
 8003aee:	f104 0008 	add.w	r0, r4, #8
 8003af2:	f7ff fac5 	bl	8003080 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003af6:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8003af8:	2800      	cmp	r0, #0
 8003afa:	f43f aee4 	beq.w	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003afe:	4605      	mov	r5, r0
 8003b00:	e6e1      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003b02:	4b46      	ldr	r3, [pc, #280]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b04:	f104 0628 	add.w	r6, r4, #40	@ 0x28
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b0a:	f003 0303 	and.w	r3, r3, #3
 8003b0e:	2b03      	cmp	r3, #3
 8003b10:	f000 824b 	beq.w	8003faa <HAL_RCCEx_PeriphCLKConfig+0xd62>
 8003b14:	2101      	movs	r1, #1
 8003b16:	4630      	mov	r0, r6
 8003b18:	f7ff fb24 	bl	8003164 <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003b1c:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8003b1e:	2800      	cmp	r0, #0
 8003b20:	f43f aedd 	beq.w	80038de <HAL_RCCEx_PeriphCLKConfig+0x696>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003b24:	4605      	mov	r5, r0
 8003b26:	e241      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xd64>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003b28:	4b3c      	ldr	r3, [pc, #240]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8003b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b2c:	f003 0303 	and.w	r3, r3, #3
 8003b30:	2b03      	cmp	r3, #3
 8003b32:	f000 8238 	beq.w	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0xd5e>
 8003b36:	2100      	movs	r1, #0
 8003b38:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003b3c:	f7ff fb12 	bl	8003164 <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003b40:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8003b42:	2800      	cmp	r0, #0
 8003b44:	f43f aec8 	beq.w	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x690>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003b48:	4605      	mov	r5, r0
 8003b4a:	e6c5      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x690>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003b4c:	4b33      	ldr	r3, [pc, #204]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8003b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b50:	f003 0303 	and.w	r3, r3, #3
 8003b54:	2b03      	cmp	r3, #3
 8003b56:	f000 822e 	beq.w	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8003b5a:	2102      	movs	r1, #2
 8003b5c:	f104 0008 	add.w	r0, r4, #8
 8003b60:	f7ff fa8e 	bl	8003080 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003b64:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8003b66:	2800      	cmp	r0, #0
 8003b68:	f43f aeb3 	beq.w	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x68a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003b6c:	4605      	mov	r5, r0
 8003b6e:	e6b0      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x68a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b70:	f104 0628 	add.w	r6, r4, #40	@ 0x28
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003b74:	4b29      	ldr	r3, [pc, #164]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8003b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b78:	f003 0303 	and.w	r3, r3, #3
 8003b7c:	2b03      	cmp	r3, #3
 8003b7e:	d006      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x946>
 8003b80:	2102      	movs	r1, #2
 8003b82:	4630      	mov	r0, r6
 8003b84:	f7ff faee 	bl	8003164 <RCCEx_PLL3_Config.part.0>
    if (ret == HAL_OK)
 8003b88:	2800      	cmp	r0, #0
 8003b8a:	f43f aeab 	beq.w	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  return HAL_ERROR;
 8003b8e:	2001      	movs	r0, #1
}
 8003b90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b94:	4821      	ldr	r0, [pc, #132]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8003b96:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8003b98:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8003b9c:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8003b9e:	2d00      	cmp	r5, #0
 8003ba0:	f43f abde 	beq.w	8003360 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8003ba4:	462e      	mov	r6, r5
 8003ba6:	f7ff bbe3 	b.w	8003370 <HAL_RCCEx_PeriphCLKConfig+0x128>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003baa:	481c      	ldr	r0, [pc, #112]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8003bac:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8003bae:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8003bb2:	62c1      	str	r1, [r0, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003bb4:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 8003bb6:	2d00      	cmp	r5, #0
 8003bb8:	f040 813e 	bne.w	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bbc:	4f17      	ldr	r7, [pc, #92]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8003bbe:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003bc0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003bc2:	f021 0107 	bic.w	r1, r1, #7
 8003bc6:	4301      	orrs	r1, r0
 8003bc8:	6539      	str	r1, [r7, #80]	@ 0x50
 8003bca:	f7ff bb7b 	b.w	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bce:	4813      	ldr	r0, [pc, #76]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8003bd0:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8003bd2:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8003bd6:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8003bd8:	2d00      	cmp	r5, #0
 8003bda:	f43f ab96 	beq.w	800330a <HAL_RCCEx_PeriphCLKConfig+0xc2>
 8003bde:	462e      	mov	r6, r5
 8003be0:	f7ff bb9b 	b.w	800331a <HAL_RCCEx_PeriphCLKConfig+0xd2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003be4:	4d0d      	ldr	r5, [pc, #52]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8003be6:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8003be8:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8003bec:	62e8      	str	r0, [r5, #44]	@ 0x2c
    if (ret == HAL_OK)
 8003bee:	f7ff bb54 	b.w	800329a <HAL_RCCEx_PeriphCLKConfig+0x52>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bf2:	480a      	ldr	r0, [pc, #40]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8003bf4:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8003bf6:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8003bfa:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8003bfc:	2d00      	cmp	r5, #0
 8003bfe:	f43f abf4 	beq.w	80033ea <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8003c02:	462e      	mov	r6, r5
 8003c04:	f7ff bbf8 	b.w	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c08:	4f04      	ldr	r7, [pc, #16]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8003c0a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003c0c:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8003c10:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (ret == HAL_OK)
 8003c12:	2d00      	cmp	r5, #0
 8003c14:	f47f ae23 	bne.w	800385e <HAL_RCCEx_PeriphCLKConfig+0x616>
 8003c18:	e696      	b.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003c1a:	bf00      	nop
 8003c1c:	58024400 	.word	0x58024400
 8003c20:	58024800 	.word	0x58024800
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c24:	48c7      	ldr	r0, [pc, #796]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xcfc>)
 8003c26:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8003c28:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8003c2c:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8003c2e:	2d00      	cmp	r5, #0
 8003c30:	f43f adfc 	beq.w	800382c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
 8003c34:	462e      	mov	r6, r5
 8003c36:	e600      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003c38:	49c2      	ldr	r1, [pc, #776]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xcfc>)
 8003c3a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003c3c:	f001 0103 	and.w	r1, r1, #3
 8003c40:	2903      	cmp	r1, #3
 8003c42:	f43f ac34 	beq.w	80034ae <HAL_RCCEx_PeriphCLKConfig+0x266>
 8003c46:	2101      	movs	r1, #1
 8003c48:	f104 0008 	add.w	r0, r4, #8
 8003c4c:	f7ff fa18 	bl	8003080 <RCCEx_PLL2_Config.part.0>
 8003c50:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003c52:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003c56:	2d00      	cmp	r5, #0
 8003c58:	f43f ae9d 	beq.w	8003996 <HAL_RCCEx_PeriphCLKConfig+0x74e>
 8003c5c:	e015      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0xa42>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003c5e:	48b9      	ldr	r0, [pc, #740]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xcfc>)
 8003c60:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8003c62:	f000 0003 	and.w	r0, r0, #3
 8003c66:	2803      	cmp	r0, #3
 8003c68:	f43f adb0 	beq.w	80037cc <HAL_RCCEx_PeriphCLKConfig+0x584>
 8003c6c:	f104 0008 	add.w	r0, r4, #8
 8003c70:	f7ff fa06 	bl	8003080 <RCCEx_PLL2_Config.part.0>
 8003c74:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c76:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003c7a:	2d00      	cmp	r5, #0
 8003c7c:	f43f aeb6 	beq.w	80039ec <HAL_RCCEx_PeriphCLKConfig+0x7a4>
 8003c80:	e13b      	b.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0xcb2>
 8003c82:	462e      	mov	r6, r5
 8003c84:	e474      	b.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8003c86:	462e      	mov	r6, r5
 8003c88:	e5b4      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8003c8a:	462e      	mov	r6, r5
 8003c8c:	e411      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8003c8e:	462e      	mov	r6, r5
 8003c90:	f7ff bb89 	b.w	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003c94:	49ab      	ldr	r1, [pc, #684]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xcfc>)
 8003c96:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003c98:	f001 0103 	and.w	r1, r1, #3
 8003c9c:	2903      	cmp	r1, #3
 8003c9e:	f43f ae4c 	beq.w	800393a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003ca2:	2102      	movs	r1, #2
 8003ca4:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003ca8:	f7ff fa5c 	bl	8003164 <RCCEx_PLL3_Config.part.0>
 8003cac:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8003cae:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003cb2:	2d00      	cmp	r5, #0
 8003cb4:	f43f ad57 	beq.w	8003766 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003cb8:	e124      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0xcbc>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003cba:	49a2      	ldr	r1, [pc, #648]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xcfc>)
 8003cbc:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003cbe:	f001 0103 	and.w	r1, r1, #3
 8003cc2:	2903      	cmp	r1, #3
 8003cc4:	f43f ac1e 	beq.w	8003504 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8003cc8:	2102      	movs	r1, #2
 8003cca:	f104 0008 	add.w	r0, r4, #8
 8003cce:	f7ff f9d7 	bl	8003080 <RCCEx_PLL2_Config.part.0>
 8003cd2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003cd4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003cd8:	2d00      	cmp	r5, #0
 8003cda:	f43f ab5d 	beq.w	8003398 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8003cde:	e7d6      	b.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0xa46>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003ce0:	4998      	ldr	r1, [pc, #608]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xcfc>)
 8003ce2:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003ce4:	f001 0103 	and.w	r1, r1, #3
 8003ce8:	2903      	cmp	r1, #3
 8003cea:	f43f ae19 	beq.w	8003920 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 8003cee:	2102      	movs	r1, #2
 8003cf0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003cf4:	f7ff fa36 	bl	8003164 <RCCEx_PLL3_Config.part.0>
 8003cf8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003cfa:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003cfe:	2d00      	cmp	r5, #0
 8003d00:	f43f ad08 	beq.w	8003714 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 8003d04:	e106      	b.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xccc>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003d06:	498f      	ldr	r1, [pc, #572]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xcfc>)
 8003d08:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003d0a:	f001 0103 	and.w	r1, r1, #3
 8003d0e:	2903      	cmp	r1, #3
 8003d10:	f000 815b 	beq.w	8003fca <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8003d14:	2102      	movs	r1, #2
 8003d16:	f104 0008 	add.w	r0, r4, #8
 8003d1a:	f7ff f9b1 	bl	8003080 <RCCEx_PLL2_Config.part.0>
 8003d1e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d20:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003d24:	2d00      	cmp	r5, #0
 8003d26:	f43f ac1c 	beq.w	8003562 <HAL_RCCEx_PeriphCLKConfig+0x31a>
 8003d2a:	e7aa      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003d2c:	4985      	ldr	r1, [pc, #532]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xcfc>)
 8003d2e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003d30:	f001 0103 	and.w	r1, r1, #3
 8003d34:	2903      	cmp	r1, #3
 8003d36:	f43f ad5b 	beq.w	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
 8003d3a:	2101      	movs	r1, #1
 8003d3c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003d40:	f7ff fa10 	bl	8003164 <RCCEx_PLL3_Config.part.0>
 8003d44:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003d46:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003d4a:	2d00      	cmp	r5, #0
 8003d4c:	f43f ae33 	beq.w	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x76e>
 8003d50:	e799      	b.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003d52:	497c      	ldr	r1, [pc, #496]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xcfc>)
 8003d54:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003d56:	f001 0103 	and.w	r1, r1, #3
 8003d5a:	2903      	cmp	r1, #3
 8003d5c:	f43f abf6 	beq.w	800354c <HAL_RCCEx_PeriphCLKConfig+0x304>
 8003d60:	2101      	movs	r1, #1
 8003d62:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003d66:	f7ff f9fd 	bl	8003164 <RCCEx_PLL3_Config.part.0>
 8003d6a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d6c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003d70:	2d00      	cmp	r5, #0
 8003d72:	f43f ab86 	beq.w	8003482 <HAL_RCCEx_PeriphCLKConfig+0x23a>
 8003d76:	e0c7      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003d78:	4972      	ldr	r1, [pc, #456]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xcfc>)
 8003d7a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003d7c:	f001 0103 	and.w	r1, r1, #3
 8003d80:	2903      	cmp	r1, #3
 8003d82:	f43f abd5 	beq.w	8003530 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8003d86:	2101      	movs	r1, #1
 8003d88:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003d8c:	f7ff f9ea 	bl	8003164 <RCCEx_PLL3_Config.part.0>
 8003d90:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003d92:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003d96:	2d00      	cmp	r5, #0
 8003d98:	f43f ab4e 	beq.w	8003438 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8003d9c:	e0b7      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0xcc6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003d9e:	4969      	ldr	r1, [pc, #420]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xcfc>)
 8003da0:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003da2:	f001 0103 	and.w	r1, r1, #3
 8003da6:	2903      	cmp	r1, #3
 8003da8:	f43f adab 	beq.w	8003902 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 8003dac:	2102      	movs	r1, #2
 8003dae:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003db2:	f7ff f9d7 	bl	8003164 <RCCEx_PLL3_Config.part.0>
 8003db6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003db8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003dbc:	2d00      	cmp	r5, #0
 8003dbe:	f43f ac80 	beq.w	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8003dc2:	e09c      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0xcb6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003dc4:	495f      	ldr	r1, [pc, #380]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xcfc>)
 8003dc6:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003dc8:	f001 0103 	and.w	r1, r1, #3
 8003dcc:	2903      	cmp	r1, #3
 8003dce:	f000 8103 	beq.w	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8003dd2:	2102      	movs	r1, #2
 8003dd4:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003dd8:	f7ff f9c4 	bl	8003164 <RCCEx_PLL3_Config.part.0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003ddc:	2800      	cmp	r0, #0
 8003dde:	f040 8122 	bne.w	8004026 <HAL_RCCEx_PeriphCLKConfig+0xdde>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003de2:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003de6:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003dea:	e4da      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x55a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003dec:	4955      	ldr	r1, [pc, #340]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xcfc>)
 8003dee:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003df0:	f001 0103 	and.w	r1, r1, #3
 8003df4:	2903      	cmp	r1, #3
 8003df6:	f000 80ec 	beq.w	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8003dfa:	2102      	movs	r1, #2
 8003dfc:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003e00:	f7ff f9b0 	bl	8003164 <RCCEx_PLL3_Config.part.0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003e04:	2800      	cmp	r0, #0
 8003e06:	f040 8115 	bne.w	8004034 <HAL_RCCEx_PeriphCLKConfig+0xdec>
    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8003e0a:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e0e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003e12:	e4b8      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x53e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003e14:	494b      	ldr	r1, [pc, #300]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xcfc>)
 8003e16:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003e18:	f001 0103 	and.w	r1, r1, #3
 8003e1c:	2903      	cmp	r1, #3
 8003e1e:	f43f aa4f 	beq.w	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003e22:	2100      	movs	r1, #0
 8003e24:	f104 0008 	add.w	r0, r4, #8
 8003e28:	f7ff f92a 	bl	8003080 <RCCEx_PLL2_Config.part.0>
 8003e2c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003e2e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003e32:	2d00      	cmp	r5, #0
 8003e34:	f43f aec2 	beq.w	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x974>
 8003e38:	462e      	mov	r6, r5
 8003e3a:	f7ff ba43 	b.w	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003e3e:	4941      	ldr	r1, [pc, #260]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xcfc>)
 8003e40:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003e42:	f001 0103 	and.w	r1, r1, #3
 8003e46:	2903      	cmp	r1, #3
 8003e48:	f43f ab56 	beq.w	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003e4c:	2100      	movs	r1, #0
 8003e4e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003e52:	f7ff f987 	bl	8003164 <RCCEx_PLL3_Config.part.0>
 8003e56:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003e58:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003e5c:	f7ff ba7d 	b.w	800335a <HAL_RCCEx_PeriphCLKConfig+0x112>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003e60:	4938      	ldr	r1, [pc, #224]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xcfc>)
 8003e62:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003e64:	f001 0103 	and.w	r1, r1, #3
 8003e68:	2903      	cmp	r1, #3
 8003e6a:	f43f aa29 	beq.w	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003e6e:	2100      	movs	r1, #0
 8003e70:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003e74:	f7ff f976 	bl	8003164 <RCCEx_PLL3_Config.part.0>
 8003e78:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003e7a:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003e7e:	e69a      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003e80:	4930      	ldr	r1, [pc, #192]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xcfc>)
 8003e82:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003e84:	f001 0103 	and.w	r1, r1, #3
 8003e88:	2903      	cmp	r1, #3
 8003e8a:	f43f ab46 	beq.w	800351a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003e8e:	2100      	movs	r1, #0
 8003e90:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003e94:	f7ff f966 	bl	8003164 <RCCEx_PLL3_Config.part.0>
 8003e98:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003e9a:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003e9e:	f7ff baa1 	b.w	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003ea2:	4928      	ldr	r1, [pc, #160]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xcfc>)
 8003ea4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003ea6:	f001 0103 	and.w	r1, r1, #3
 8003eaa:	2903      	cmp	r1, #3
 8003eac:	f43f ab17 	beq.w	80034de <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003eb0:	2100      	movs	r1, #0
 8003eb2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003eb6:	f7ff f955 	bl	8003164 <RCCEx_PLL3_Config.part.0>
 8003eba:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003ebc:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003ec0:	f7ff ba20 	b.w	8003304 <HAL_RCCEx_PeriphCLKConfig+0xbc>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003ec4:	491f      	ldr	r1, [pc, #124]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xcfc>)
 8003ec6:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003ec8:	f001 0103 	and.w	r1, r1, #3
 8003ecc:	2903      	cmp	r1, #3
 8003ece:	f43f ad96 	beq.w	80039fe <HAL_RCCEx_PeriphCLKConfig+0x7b6>
 8003ed2:	2102      	movs	r1, #2
 8003ed4:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003ed8:	f7ff f944 	bl	8003164 <RCCEx_PLL3_Config.part.0>
 8003edc:	4606      	mov	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003ede:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003ee2:	2e00      	cmp	r6, #0
 8003ee4:	f47f a9e0 	bne.w	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x60>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003ee8:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8003eea:	f7ff b9d6 	b.w	800329a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003eee:	462e      	mov	r6, r5
 8003ef0:	f7ff bb9a 	b.w	8003628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003ef4:	462e      	mov	r6, r5
 8003ef6:	f7ff bbc3 	b.w	8003680 <HAL_RCCEx_PeriphCLKConfig+0x438>
 8003efa:	462e      	mov	r6, r5
 8003efc:	e468      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003efe:	462e      	mov	r6, r5
 8003f00:	f7ff bbe7 	b.w	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8003f04:	462e      	mov	r6, r5
 8003f06:	e436      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x52e>
 8003f08:	462e      	mov	r6, r5
 8003f0a:	f7ff bac2 	b.w	8003492 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8003f0e:	462e      	mov	r6, r5
 8003f10:	f7ff ba99 	b.w	8003446 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8003f14:	462e      	mov	r6, r5
 8003f16:	e405      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 8003f18:	462e      	mov	r6, r5
 8003f1a:	f7ff bb5e 	b.w	80035da <HAL_RCCEx_PeriphCLKConfig+0x392>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f1e:	4909      	ldr	r1, [pc, #36]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xcfc>)
 8003f20:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003f22:	f001 0103 	and.w	r1, r1, #3
 8003f26:	2903      	cmp	r1, #3
 8003f28:	d04b      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xd7a>
 8003f2a:	2101      	movs	r1, #1
 8003f2c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003f30:	f7ff f918 	bl	8003164 <RCCEx_PLL3_Config.part.0>
 8003f34:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f36:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003f3a:	2d00      	cmp	r5, #0
 8003f3c:	f43f ab98 	beq.w	8003670 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8003f40:	e7d8      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8003f42:	bf00      	nop
 8003f44:	58024400 	.word	0x58024400
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f48:	493e      	ldr	r1, [pc, #248]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003f4a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003f4c:	f001 0103 	and.w	r1, r1, #3
 8003f50:	2903      	cmp	r1, #3
 8003f52:	d032      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0xd72>
 8003f54:	2101      	movs	r1, #1
 8003f56:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003f5a:	f7ff f903 	bl	8003164 <RCCEx_PLL3_Config.part.0>
 8003f5e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f60:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003f64:	2d00      	cmp	r5, #0
 8003f66:	f43f ab58 	beq.w	800361a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8003f6a:	e7c0      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0xca6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f6c:	4935      	ldr	r1, [pc, #212]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8003f6e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8003f70:	f001 0103 	and.w	r1, r1, #3
 8003f74:	2903      	cmp	r1, #3
 8003f76:	f43f ab2e 	beq.w	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
 8003f7a:	2101      	movs	r1, #1
 8003f7c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8003f80:	f7ff f8f0 	bl	8003164 <RCCEx_PLL3_Config.part.0>
 8003f84:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003f86:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003f8a:	2d00      	cmp	r5, #0
 8003f8c:	f43f ad4b 	beq.w	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x7de>
 8003f90:	e7c2      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xcd0>
        ret = HAL_TIMEOUT;
 8003f92:	2503      	movs	r5, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003f94:	462e      	mov	r6, r5
 8003f96:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003f9a:	f7ff baec 	b.w	8003576 <HAL_RCCEx_PeriphCLKConfig+0x32e>
    return HAL_ERROR;
 8003f9e:	2501      	movs	r5, #1
 8003fa0:	e491      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8003fa2:	2501      	movs	r5, #1
 8003fa4:	e492      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x684>
    return HAL_ERROR;
 8003fa6:	2501      	movs	r5, #1
 8003fa8:	e496      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x690>
 8003faa:	2501      	movs	r5, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003fac:	0692      	lsls	r2, r2, #26
 8003fae:	f53f ade1 	bmi.w	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x92c>
  return HAL_ERROR;
 8003fb2:	2001      	movs	r0, #1
 8003fb4:	e5ec      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x948>
    return HAL_ERROR;
 8003fb6:	2501      	movs	r5, #1
 8003fb8:	e48b      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x68a>
        ret = HAL_ERROR;
 8003fba:	2601      	movs	r6, #1
 8003fbc:	4635      	mov	r5, r6
 8003fbe:	f7ff bb33 	b.w	8003628 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
        ret = HAL_ERROR;
 8003fc2:	2601      	movs	r6, #1
 8003fc4:	4635      	mov	r5, r6
 8003fc6:	f7ff bb5b 	b.w	8003680 <HAL_RCCEx_PeriphCLKConfig+0x438>
        ret = HAL_ERROR;
 8003fca:	2601      	movs	r6, #1
 8003fcc:	4635      	mov	r5, r6
 8003fce:	f7ff bacf 	b.w	8003570 <HAL_RCCEx_PeriphCLKConfig+0x328>
        status = HAL_ERROR;
 8003fd2:	2601      	movs	r6, #1
 8003fd4:	f7ff bbd7 	b.w	8003786 <HAL_RCCEx_PeriphCLKConfig+0x53e>
        status = HAL_ERROR;
 8003fd8:	2601      	movs	r6, #1
 8003fda:	f7ff bbe2 	b.w	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x55a>
        tickstart = HAL_GetTick();
 8003fde:	f7fd f999 	bl	8001314 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003fe2:	f8df 8060 	ldr.w	r8, [pc, #96]	@ 8004044 <HAL_RCCEx_PeriphCLKConfig+0xdfc>
        tickstart = HAL_GetTick();
 8003fe6:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fe8:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003fec:	e004      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fee:	f7fd f991 	bl	8001314 <HAL_GetTick>
 8003ff2:	1bc0      	subs	r0, r0, r7
 8003ff4:	4548      	cmp	r0, r9
 8003ff6:	d810      	bhi.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ff8:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8003ffc:	0798      	lsls	r0, r3, #30
 8003ffe:	d5f6      	bpl.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0xda6>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004000:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 8004004:	e545      	b.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x84a>
 8004006:	480f      	ldr	r0, [pc, #60]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8004008:	4a0f      	ldr	r2, [pc, #60]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800400a:	6901      	ldr	r1, [r0, #16]
 800400c:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8004010:	f421 517c 	bic.w	r1, r1, #16128	@ 0x3f00
 8004014:	430a      	orrs	r2, r1
 8004016:	6102      	str	r2, [r0, #16]
 8004018:	e546      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x860>
        status = ret;
 800401a:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800401c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8004020:	4635      	mov	r5, r6
 8004022:	f7ff baa8 	b.w	8003576 <HAL_RCCEx_PeriphCLKConfig+0x32e>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004026:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
        status = HAL_ERROR;
 800402a:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800402c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8004030:	f7ff bbb7 	b.w	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x55a>
    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004034:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
        status = HAL_ERROR;
 8004038:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800403a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800403e:	f7ff bba2 	b.w	8003786 <HAL_RCCEx_PeriphCLKConfig+0x53e>
 8004042:	bf00      	nop
 8004044:	58024400 	.word	0x58024400
 8004048:	00ffffcf 	.word	0x00ffffcf

0800404c <RTC_EnterInitMode>:
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800404c:	6803      	ldr	r3, [r0, #0]
{
 800404e:	b570      	push	{r4, r5, r6, lr}
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004050:	68dc      	ldr	r4, [r3, #12]
 8004052:	f014 0440 	ands.w	r4, r4, #64	@ 0x40
 8004056:	d002      	beq.n	800405e <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 8004058:	2200      	movs	r2, #0
      }
    }
  }

  return status;
}
 800405a:	4610      	mov	r0, r2
 800405c:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800405e:	f04f 32ff 	mov.w	r2, #4294967295
 8004062:	4605      	mov	r5, r0
 8004064:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8004066:	f7fd f955 	bl	8001314 <HAL_GetTick>
  HAL_StatusTypeDef status = HAL_OK;
 800406a:	4622      	mov	r2, r4
    tickstart = HAL_GetTick();
 800406c:	4606      	mov	r6, r0
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800406e:	682b      	ldr	r3, [r5, #0]
 8004070:	68dc      	ldr	r4, [r3, #12]
 8004072:	f014 0440 	ands.w	r4, r4, #64	@ 0x40
 8004076:	d1f0      	bne.n	800405a <RTC_EnterInitMode+0xe>
 8004078:	2a03      	cmp	r2, #3
 800407a:	d0ee      	beq.n	800405a <RTC_EnterInitMode+0xe>
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800407c:	f7fd f94a 	bl	8001314 <HAL_GetTick>
 8004080:	1b83      	subs	r3, r0, r6
 8004082:	4622      	mov	r2, r4
 8004084:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004088:	d9f1      	bls.n	800406e <RTC_EnterInitMode+0x22>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800408a:	2303      	movs	r3, #3
        status = HAL_TIMEOUT;
 800408c:	461a      	mov	r2, r3
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800408e:	f885 3021 	strb.w	r3, [r5, #33]	@ 0x21
 8004092:	e7ec      	b.n	800406e <RTC_EnterInitMode+0x22>

08004094 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004094:	b538      	push	{r3, r4, r5, lr}

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8004096:	4b20      	ldr	r3, [pc, #128]	@ (8004118 <RTC_ExitInitMode+0x84>)
{
 8004098:	4604      	mov	r4, r0
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800409a:	6801      	ldr	r1, [r0, #0]
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800409c:	68da      	ldr	r2, [r3, #12]
 800409e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80040a2:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80040a4:	689a      	ldr	r2, [r3, #8]
 80040a6:	0690      	lsls	r0, r2, #26
 80040a8:	d411      	bmi.n	80040ce <RTC_ExitInitMode+0x3a>
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80040aa:	4b1c      	ldr	r3, [pc, #112]	@ (800411c <RTC_ExitInitMode+0x88>)
 80040ac:	60cb      	str	r3, [r1, #12]
  tickstart = HAL_GetTick();
 80040ae:	f7fd f931 	bl	8001314 <HAL_GetTick>
 80040b2:	4605      	mov	r5, r0
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80040b4:	e005      	b.n	80040c2 <RTC_ExitInitMode+0x2e>
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80040b6:	f7fd f92d 	bl	8001314 <HAL_GetTick>
 80040ba:	1b43      	subs	r3, r0, r5
 80040bc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80040c0:	d825      	bhi.n	800410e <RTC_ExitInitMode+0x7a>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80040c2:	6823      	ldr	r3, [r4, #0]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	069a      	lsls	r2, r3, #26
 80040c8:	d5f5      	bpl.n	80040b6 <RTC_ExitInitMode+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 80040ca:	2000      	movs	r0, #0
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
  }

  return status;
}
 80040cc:	bd38      	pop	{r3, r4, r5, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80040ce:	689a      	ldr	r2, [r3, #8]
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80040d0:	4812      	ldr	r0, [pc, #72]	@ (800411c <RTC_ExitInitMode+0x88>)
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80040d2:	f022 0220 	bic.w	r2, r2, #32
 80040d6:	609a      	str	r2, [r3, #8]
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80040d8:	60c8      	str	r0, [r1, #12]
  tickstart = HAL_GetTick();
 80040da:	f7fd f91b 	bl	8001314 <HAL_GetTick>
 80040de:	4605      	mov	r5, r0
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80040e0:	e005      	b.n	80040ee <RTC_ExitInitMode+0x5a>
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80040e2:	f7fd f917 	bl	8001314 <HAL_GetTick>
 80040e6:	1b43      	subs	r3, r0, r5
 80040e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80040ec:	d80a      	bhi.n	8004104 <RTC_ExitInitMode+0x70>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80040ee:	6823      	ldr	r3, [r4, #0]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	069b      	lsls	r3, r3, #26
 80040f4:	d5f5      	bpl.n	80040e2 <RTC_ExitInitMode+0x4e>
  HAL_StatusTypeDef status = HAL_OK;
 80040f6:	2000      	movs	r0, #0
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80040f8:	4a07      	ldr	r2, [pc, #28]	@ (8004118 <RTC_ExitInitMode+0x84>)
 80040fa:	6893      	ldr	r3, [r2, #8]
 80040fc:	f043 0320 	orr.w	r3, r3, #32
 8004100:	6093      	str	r3, [r2, #8]
}
 8004102:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004104:	2303      	movs	r3, #3
      status = HAL_TIMEOUT;
 8004106:	4618      	mov	r0, r3
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004108:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
      status = HAL_TIMEOUT;
 800410c:	e7f4      	b.n	80040f8 <RTC_ExitInitMode+0x64>
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800410e:	2303      	movs	r3, #3
      status = HAL_TIMEOUT;
 8004110:	4618      	mov	r0, r3
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004112:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
}
 8004116:	bd38      	pop	{r3, r4, r5, pc}
 8004118:	58004000 	.word	0x58004000
 800411c:	0003ff5f 	.word	0x0003ff5f

08004120 <HAL_RTC_Init>:
  if(hrtc != NULL)
 8004120:	b318      	cbz	r0, 800416a <HAL_RTC_Init+0x4a>
{
 8004122:	b538      	push	{r3, r4, r5, lr}
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8004124:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8004128:	4604      	mov	r4, r0
 800412a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800412e:	b1bb      	cbz	r3, 8004160 <HAL_RTC_Init+0x40>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004130:	2202      	movs	r2, #2
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004132:	6823      	ldr	r3, [r4, #0]
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004134:	f884 2021 	strb.w	r2, [r4, #33]	@ 0x21
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004138:	68da      	ldr	r2, [r3, #12]
 800413a:	06d2      	lsls	r2, r2, #27
 800413c:	d504      	bpl.n	8004148 <HAL_RTC_Init+0x28>
      hrtc->State = HAL_RTC_STATE_READY;
 800413e:	2301      	movs	r3, #1
 8004140:	2000      	movs	r0, #0
 8004142:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
}
 8004146:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004148:	21ca      	movs	r1, #202	@ 0xca
 800414a:	2253      	movs	r2, #83	@ 0x53
      status = RTC_EnterInitMode(hrtc);
 800414c:	4620      	mov	r0, r4
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800414e:	6259      	str	r1, [r3, #36]	@ 0x24
 8004150:	625a      	str	r2, [r3, #36]	@ 0x24
      status = RTC_EnterInitMode(hrtc);
 8004152:	f7ff ff7b 	bl	800404c <RTC_EnterInitMode>
      if (status == HAL_OK)
 8004156:	b150      	cbz	r0, 800416e <HAL_RTC_Init+0x4e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004158:	6823      	ldr	r3, [r4, #0]
 800415a:	22ff      	movs	r2, #255	@ 0xff
 800415c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800415e:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Lock = HAL_UNLOCKED;
 8004160:	f880 2020 	strb.w	r2, [r0, #32]
      HAL_RTC_MspInit(hrtc);
 8004164:	f7fc fb90 	bl	8000888 <HAL_RTC_MspInit>
 8004168:	e7e2      	b.n	8004130 <HAL_RTC_Init+0x10>
  HAL_StatusTypeDef status = HAL_ERROR;
 800416a:	2001      	movs	r0, #1
}
 800416c:	4770      	bx	lr
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800416e:	e9d4 2300 	ldrd	r2, r3, [r4]
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004172:	4912      	ldr	r1, [pc, #72]	@ (80041bc <HAL_RTC_Init+0x9c>)
 8004174:	6890      	ldr	r0, [r2, #8]
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004176:	6925      	ldr	r5, [r4, #16]
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004178:	4001      	ands	r1, r0
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800417a:	432b      	orrs	r3, r5
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800417c:	6091      	str	r1, [r2, #8]
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800417e:	69a1      	ldr	r1, [r4, #24]
 8004180:	6890      	ldr	r0, [r2, #8]
 8004182:	430b      	orrs	r3, r1
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8004184:	68a1      	ldr	r1, [r4, #8]
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004186:	4303      	orrs	r3, r0
        status = RTC_ExitInitMode(hrtc);
 8004188:	4620      	mov	r0, r4
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800418a:	6093      	str	r3, [r2, #8]
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800418c:	68e3      	ldr	r3, [r4, #12]
 800418e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004192:	6113      	str	r3, [r2, #16]
        status = RTC_ExitInitMode(hrtc);
 8004194:	f7ff ff7e 	bl	8004094 <RTC_ExitInitMode>
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004198:	6823      	ldr	r3, [r4, #0]
      if(status == HAL_OK)
 800419a:	b960      	cbnz	r0, 80041b6 <HAL_RTC_Init+0x96>
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800419c:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800419e:	20ff      	movs	r0, #255	@ 0xff
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80041a0:	69e2      	ldr	r2, [r4, #28]
 80041a2:	6965      	ldr	r5, [r4, #20]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80041a4:	f021 0103 	bic.w	r1, r1, #3
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80041a8:	432a      	orrs	r2, r5
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80041aa:	64d9      	str	r1, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80041ac:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80041ae:	430a      	orrs	r2, r1
 80041b0:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80041b2:	6258      	str	r0, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 80041b4:	e7c3      	b.n	800413e <HAL_RTC_Init+0x1e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80041b6:	22ff      	movs	r2, #255	@ 0xff
 80041b8:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80041ba:	bd38      	pop	{r3, r4, r5, pc}
 80041bc:	ff8fffbf 	.word	0xff8fffbf

080041c0 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop

080041c4 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041c4:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d149      	bne.n	8004260 <HAL_TIM_Base_Start_IT+0x9c>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041cc:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80041ce:	2102      	movs	r1, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041d0:	4b24      	ldr	r3, [pc, #144]	@ (8004264 <HAL_TIM_Base_Start_IT+0xa0>)
 80041d2:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80041d6:	bf18      	it	ne
 80041d8:	429a      	cmpne	r2, r3
{
 80041da:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041dc:	bf0c      	ite	eq
 80041de:	2301      	moveq	r3, #1
 80041e0:	2300      	movne	r3, #0
 80041e2:	4d21      	ldr	r5, [pc, #132]	@ (8004268 <HAL_TIM_Base_Start_IT+0xa4>)
 80041e4:	4c21      	ldr	r4, [pc, #132]	@ (800426c <HAL_TIM_Base_Start_IT+0xa8>)
 80041e6:	42aa      	cmp	r2, r5
 80041e8:	bf08      	it	eq
 80041ea:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80041ee:	f880 103d 	strb.w	r1, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041f2:	481f      	ldr	r0, [pc, #124]	@ (8004270 <HAL_TIM_Base_Start_IT+0xac>)
 80041f4:	42a2      	cmp	r2, r4
 80041f6:	bf08      	it	eq
 80041f8:	f043 0301 	orreq.w	r3, r3, #1
 80041fc:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004200:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004202:	42a2      	cmp	r2, r4
 8004204:	bf08      	it	eq
 8004206:	f043 0301 	orreq.w	r3, r3, #1
 800420a:	f504 6440 	add.w	r4, r4, #3072	@ 0xc00
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800420e:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004212:	4282      	cmp	r2, r0
 8004214:	bf08      	it	eq
 8004216:	f043 0301 	orreq.w	r3, r3, #1
 800421a:	f500 5070 	add.w	r0, r0, #15360	@ 0x3c00
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800421e:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004220:	42a2      	cmp	r2, r4
 8004222:	bf08      	it	eq
 8004224:	f043 0301 	orreq.w	r3, r3, #1
 8004228:	4912      	ldr	r1, [pc, #72]	@ (8004274 <HAL_TIM_Base_Start_IT+0xb0>)
 800422a:	4282      	cmp	r2, r0
 800422c:	bf08      	it	eq
 800422e:	f043 0301 	orreq.w	r3, r3, #1
 8004232:	428a      	cmp	r2, r1
 8004234:	bf08      	it	eq
 8004236:	f043 0301 	orreq.w	r3, r3, #1
 800423a:	b913      	cbnz	r3, 8004242 <HAL_TIM_Base_Start_IT+0x7e>
 800423c:	4b0e      	ldr	r3, [pc, #56]	@ (8004278 <HAL_TIM_Base_Start_IT+0xb4>)
 800423e:	429a      	cmp	r2, r3
 8004240:	d107      	bne.n	8004252 <HAL_TIM_Base_Start_IT+0x8e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004242:	6891      	ldr	r1, [r2, #8]
 8004244:	4b0d      	ldr	r3, [pc, #52]	@ (800427c <HAL_TIM_Base_Start_IT+0xb8>)
 8004246:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004248:	2b06      	cmp	r3, #6
 800424a:	d006      	beq.n	800425a <HAL_TIM_Base_Start_IT+0x96>
 800424c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004250:	d003      	beq.n	800425a <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8004252:	6813      	ldr	r3, [r2, #0]
 8004254:	f043 0301 	orr.w	r3, r3, #1
 8004258:	6013      	str	r3, [r2, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800425a:	2000      	movs	r0, #0
}
 800425c:	bc30      	pop	{r4, r5}
 800425e:	4770      	bx	lr
    return HAL_ERROR;
 8004260:	2001      	movs	r0, #1
}
 8004262:	4770      	bx	lr
 8004264:	40010000 	.word	0x40010000
 8004268:	40000400 	.word	0x40000400
 800426c:	40000800 	.word	0x40000800
 8004270:	40010400 	.word	0x40010400
 8004274:	4000e000 	.word	0x4000e000
 8004278:	4000e400 	.word	0x4000e400
 800427c:	00010007 	.word	0x00010007

08004280 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop

08004284 <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop

08004288 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop

0800428c <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop

08004290 <HAL_TIM_IRQHandler>:
{
 8004290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t itsource = htim->Instance->DIER;
 8004292:	6803      	ldr	r3, [r0, #0]
{
 8004294:	4605      	mov	r5, r0
  uint32_t itsource = htim->Instance->DIER;
 8004296:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004298:	691c      	ldr	r4, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800429a:	07a1      	lsls	r1, r4, #30
 800429c:	d501      	bpl.n	80042a2 <HAL_TIM_IRQHandler+0x12>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800429e:	07b2      	lsls	r2, r6, #30
 80042a0:	d457      	bmi.n	8004352 <HAL_TIM_IRQHandler+0xc2>
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80042a2:	0767      	lsls	r7, r4, #29
 80042a4:	d501      	bpl.n	80042aa <HAL_TIM_IRQHandler+0x1a>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80042a6:	0770      	lsls	r0, r6, #29
 80042a8:	d440      	bmi.n	800432c <HAL_TIM_IRQHandler+0x9c>
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80042aa:	0721      	lsls	r1, r4, #28
 80042ac:	d501      	bpl.n	80042b2 <HAL_TIM_IRQHandler+0x22>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80042ae:	0732      	lsls	r2, r6, #28
 80042b0:	d42a      	bmi.n	8004308 <HAL_TIM_IRQHandler+0x78>
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80042b2:	06e7      	lsls	r7, r4, #27
 80042b4:	d501      	bpl.n	80042ba <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80042b6:	06f0      	lsls	r0, r6, #27
 80042b8:	d413      	bmi.n	80042e2 <HAL_TIM_IRQHandler+0x52>
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80042ba:	07e1      	lsls	r1, r4, #31
 80042bc:	d501      	bpl.n	80042c2 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80042be:	07f2      	lsls	r2, r6, #31
 80042c0:	d465      	bmi.n	800438e <HAL_TIM_IRQHandler+0xfe>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80042c2:	f414 5f02 	tst.w	r4, #8320	@ 0x2080
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80042c6:	f404 7780 	and.w	r7, r4, #256	@ 0x100
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80042ca:	d052      	beq.n	8004372 <HAL_TIM_IRQHandler+0xe2>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80042cc:	0633      	lsls	r3, r6, #24
 80042ce:	d466      	bmi.n	800439e <HAL_TIM_IRQHandler+0x10e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80042d0:	0660      	lsls	r0, r4, #25
 80042d2:	d501      	bpl.n	80042d8 <HAL_TIM_IRQHandler+0x48>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80042d4:	0671      	lsls	r1, r6, #25
 80042d6:	d473      	bmi.n	80043c0 <HAL_TIM_IRQHandler+0x130>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80042d8:	06a2      	lsls	r2, r4, #26
 80042da:	d501      	bpl.n	80042e0 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80042dc:	06b3      	lsls	r3, r6, #26
 80042de:	d44d      	bmi.n	800437c <HAL_TIM_IRQHandler+0xec>
}
 80042e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80042e2:	682b      	ldr	r3, [r5, #0]
 80042e4:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 80042e8:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80042ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042ec:	2208      	movs	r2, #8
 80042ee:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042f0:	69db      	ldr	r3, [r3, #28]
 80042f2:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80042f6:	d174      	bne.n	80043e2 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042f8:	f7ff ffc2 	bl	8004280 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042fc:	4628      	mov	r0, r5
 80042fe:	f7ff ffc3 	bl	8004288 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004302:	2300      	movs	r3, #0
 8004304:	772b      	strb	r3, [r5, #28]
 8004306:	e7d8      	b.n	80042ba <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004308:	682b      	ldr	r3, [r5, #0]
 800430a:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800430e:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004310:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004312:	2204      	movs	r2, #4
 8004314:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004316:	69db      	ldr	r3, [r3, #28]
 8004318:	079b      	lsls	r3, r3, #30
 800431a:	d15f      	bne.n	80043dc <HAL_TIM_IRQHandler+0x14c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800431c:	f7ff ffb0 	bl	8004280 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004320:	4628      	mov	r0, r5
 8004322:	f7ff ffb1 	bl	8004288 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004326:	2300      	movs	r3, #0
 8004328:	772b      	strb	r3, [r5, #28]
 800432a:	e7c2      	b.n	80042b2 <HAL_TIM_IRQHandler+0x22>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800432c:	682b      	ldr	r3, [r5, #0]
 800432e:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8004332:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004334:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004336:	2202      	movs	r2, #2
 8004338:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8004340:	d149      	bne.n	80043d6 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004342:	f7ff ff9d 	bl	8004280 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004346:	4628      	mov	r0, r5
 8004348:	f7ff ff9e 	bl	8004288 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800434c:	2300      	movs	r3, #0
 800434e:	772b      	strb	r3, [r5, #28]
 8004350:	e7ab      	b.n	80042aa <HAL_TIM_IRQHandler+0x1a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004352:	f06f 0202 	mvn.w	r2, #2
 8004356:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004358:	2201      	movs	r2, #1
 800435a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	079b      	lsls	r3, r3, #30
 8004360:	d136      	bne.n	80043d0 <HAL_TIM_IRQHandler+0x140>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004362:	f7ff ff8d 	bl	8004280 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004366:	4628      	mov	r0, r5
 8004368:	f7ff ff8e 	bl	8004288 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800436c:	2300      	movs	r3, #0
 800436e:	772b      	strb	r3, [r5, #28]
 8004370:	e797      	b.n	80042a2 <HAL_TIM_IRQHandler+0x12>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004372:	2f00      	cmp	r7, #0
 8004374:	d0ac      	beq.n	80042d0 <HAL_TIM_IRQHandler+0x40>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004376:	0637      	lsls	r7, r6, #24
 8004378:	d41a      	bmi.n	80043b0 <HAL_TIM_IRQHandler+0x120>
 800437a:	e7a9      	b.n	80042d0 <HAL_TIM_IRQHandler+0x40>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800437c:	682b      	ldr	r3, [r5, #0]
 800437e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8004382:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004384:	611a      	str	r2, [r3, #16]
}
 8004386:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      HAL_TIMEx_CommutCallback(htim);
 800438a:	f000 b8dd 	b.w	8004548 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800438e:	682b      	ldr	r3, [r5, #0]
 8004390:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8004394:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004396:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004398:	f7fc fa52 	bl	8000840 <HAL_TIM_PeriodElapsedCallback>
 800439c:	e791      	b.n	80042c2 <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800439e:	682b      	ldr	r3, [r5, #0]
 80043a0:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
      HAL_TIMEx_BreakCallback(htim);
 80043a4:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80043a6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80043a8:	f000 f8d0 	bl	800454c <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80043ac:	2f00      	cmp	r7, #0
 80043ae:	d08f      	beq.n	80042d0 <HAL_TIM_IRQHandler+0x40>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80043b0:	682b      	ldr	r3, [r5, #0]
 80043b2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
      HAL_TIMEx_Break2Callback(htim);
 80043b6:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80043b8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80043ba:	f000 f8c9 	bl	8004550 <HAL_TIMEx_Break2Callback>
 80043be:	e787      	b.n	80042d0 <HAL_TIM_IRQHandler+0x40>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80043c0:	682b      	ldr	r3, [r5, #0]
 80043c2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 80043c6:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80043c8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80043ca:	f7ff ff5f 	bl	800428c <HAL_TIM_TriggerCallback>
 80043ce:	e783      	b.n	80042d8 <HAL_TIM_IRQHandler+0x48>
          HAL_TIM_IC_CaptureCallback(htim);
 80043d0:	f7ff ff58 	bl	8004284 <HAL_TIM_IC_CaptureCallback>
 80043d4:	e7ca      	b.n	800436c <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 80043d6:	f7ff ff55 	bl	8004284 <HAL_TIM_IC_CaptureCallback>
 80043da:	e7b7      	b.n	800434c <HAL_TIM_IRQHandler+0xbc>
        HAL_TIM_IC_CaptureCallback(htim);
 80043dc:	f7ff ff52 	bl	8004284 <HAL_TIM_IC_CaptureCallback>
 80043e0:	e7a1      	b.n	8004326 <HAL_TIM_IRQHandler+0x96>
        HAL_TIM_IC_CaptureCallback(htim);
 80043e2:	f7ff ff4f 	bl	8004284 <HAL_TIM_IC_CaptureCallback>
 80043e6:	e78c      	b.n	8004302 <HAL_TIM_IRQHandler+0x72>

080043e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80043e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043ea:	4a38      	ldr	r2, [pc, #224]	@ (80044cc <TIM_Base_SetConfig+0xe4>)
 80043ec:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80043f0:	4c37      	ldr	r4, [pc, #220]	@ (80044d0 <TIM_Base_SetConfig+0xe8>)
 80043f2:	eba0 0202 	sub.w	r2, r0, r2
  tmpcr1 = TIMx->CR1;
 80043f6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043f8:	eba0 0e04 	sub.w	lr, r0, r4
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043fc:	694f      	ldr	r7, [r1, #20]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043fe:	fab2 f282 	clz	r2, r2

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004402:	680d      	ldr	r5, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004404:	fabe fe8e 	clz	lr, lr
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004408:	688e      	ldr	r6, [r1, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800440a:	ea4f 1252 	mov.w	r2, r2, lsr #5
 800440e:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8004412:	d028      	beq.n	8004466 <TIM_Base_SetConfig+0x7e>
 8004414:	bb3a      	cbnz	r2, 8004466 <TIM_Base_SetConfig+0x7e>
 8004416:	f8df c0c8 	ldr.w	ip, [pc, #200]	@ 80044e0 <TIM_Base_SetConfig+0xf8>
 800441a:	4560      	cmp	r0, ip
 800441c:	d023      	beq.n	8004466 <TIM_Base_SetConfig+0x7e>
 800441e:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8004422:	4560      	cmp	r0, ip
 8004424:	d01f      	beq.n	8004466 <TIM_Base_SetConfig+0x7e>
 8004426:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 800442a:	4560      	cmp	r0, ip
 800442c:	d01b      	beq.n	8004466 <TIM_Base_SetConfig+0x7e>
 800442e:	f1be 0f00 	cmp.w	lr, #0
 8004432:	d118      	bne.n	8004466 <TIM_Base_SetConfig+0x7e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004434:	4a27      	ldr	r2, [pc, #156]	@ (80044d4 <TIM_Base_SetConfig+0xec>)
 8004436:	4290      	cmp	r0, r2
 8004438:	d03d      	beq.n	80044b6 <TIM_Base_SetConfig+0xce>
 800443a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800443e:	4290      	cmp	r0, r2
 8004440:	d039      	beq.n	80044b6 <TIM_Base_SetConfig+0xce>
 8004442:	4c25      	ldr	r4, [pc, #148]	@ (80044d8 <TIM_Base_SetConfig+0xf0>)
 8004444:	f5a2 42c8 	sub.w	r2, r2, #25600	@ 0x6400
 8004448:	4290      	cmp	r0, r2
 800444a:	bf18      	it	ne
 800444c:	42a0      	cmpne	r0, r4
 800444e:	d032      	beq.n	80044b6 <TIM_Base_SetConfig+0xce>
 8004450:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004454:	4290      	cmp	r0, r2
 8004456:	d02e      	beq.n	80044b6 <TIM_Base_SetConfig+0xce>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004458:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800445c:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
 800445e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004460:	62c6      	str	r6, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004462:	6285      	str	r5, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004464:	e01d      	b.n	80044a2 <TIM_Base_SetConfig+0xba>
    tmpcr1 |= Structure->CounterMode;
 8004466:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004468:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800446c:	4323      	orrs	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800446e:	68cc      	ldr	r4, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004470:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004474:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004476:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800447a:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
 800447c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800447e:	62c6      	str	r6, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004480:	6285      	str	r5, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004482:	b962      	cbnz	r2, 800449e <TIM_Base_SetConfig+0xb6>
 8004484:	f1be 0f00 	cmp.w	lr, #0
 8004488:	d109      	bne.n	800449e <TIM_Base_SetConfig+0xb6>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800448a:	4a14      	ldr	r2, [pc, #80]	@ (80044dc <TIM_Base_SetConfig+0xf4>)
 800448c:	4b11      	ldr	r3, [pc, #68]	@ (80044d4 <TIM_Base_SetConfig+0xec>)
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800448e:	4298      	cmp	r0, r3
 8004490:	bf18      	it	ne
 8004492:	4290      	cmpne	r0, r2
 8004494:	d003      	beq.n	800449e <TIM_Base_SetConfig+0xb6>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004496:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800449a:	4298      	cmp	r0, r3
 800449c:	d101      	bne.n	80044a2 <TIM_Base_SetConfig+0xba>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800449e:	690b      	ldr	r3, [r1, #16]
 80044a0:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044a2:	2301      	movs	r3, #1
 80044a4:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80044a6:	6903      	ldr	r3, [r0, #16]
 80044a8:	07db      	lsls	r3, r3, #31
 80044aa:	d503      	bpl.n	80044b4 <TIM_Base_SetConfig+0xcc>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80044ac:	6903      	ldr	r3, [r0, #16]
 80044ae:	f023 0301 	bic.w	r3, r3, #1
 80044b2:	6103      	str	r3, [r0, #16]
  }
}
 80044b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044b6:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80044b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044bc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044c2:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
 80044c4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044c6:	62c6      	str	r6, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80044c8:	6285      	str	r5, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044ca:	e7de      	b.n	800448a <TIM_Base_SetConfig+0xa2>
 80044cc:	40010000 	.word	0x40010000
 80044d0:	40010400 	.word	0x40010400
 80044d4:	40014000 	.word	0x40014000
 80044d8:	40014800 	.word	0x40014800
 80044dc:	40014400 	.word	0x40014400
 80044e0:	40000400 	.word	0x40000400

080044e4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80044e4:	b370      	cbz	r0, 8004544 <HAL_TIM_Base_Init+0x60>
{
 80044e6:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80044e8:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80044ec:	4604      	mov	r4, r0
 80044ee:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80044f2:	b313      	cbz	r3, 800453a <HAL_TIM_Base_Init+0x56>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044f4:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80044f6:	2302      	movs	r3, #2
 80044f8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044fc:	f851 0b04 	ldr.w	r0, [r1], #4
 8004500:	f7ff ff72 	bl	80043e8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004504:	2301      	movs	r3, #1
  return HAL_OK;
 8004506:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004508:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800450c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8004510:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8004514:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8004518:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800451c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004520:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004524:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8004528:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800452c:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8004530:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8004534:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8004538:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800453a:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800453e:	f7ff fe3f 	bl	80041c0 <HAL_TIM_Base_MspInit>
 8004542:	e7d7      	b.n	80044f4 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8004544:	2001      	movs	r0, #1
}
 8004546:	4770      	bx	lr

08004548 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop

0800454c <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop

08004550 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop

08004554 <ethernet_link_status_updated>:
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop

08004558 <MX_LWIP_Init>:
{
 8004558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  IP_ADDRESS[0] = 192;
 800455c:	4b1f      	ldr	r3, [pc, #124]	@ (80045dc <MX_LWIP_Init+0x84>)
  GATEWAY_ADDRESS[0] = 0;
 800455e:	2400      	movs	r4, #0
  IP_ADDRESS[0] = 192;
 8004560:	f8df 80a4 	ldr.w	r8, [pc, #164]	@ 8004608 <MX_LWIP_Init+0xb0>
{
 8004564:	b08c      	sub	sp, #48	@ 0x30
  NETMASK_ADDRESS[0] = 255;
 8004566:	4f1e      	ldr	r7, [pc, #120]	@ (80045e0 <MX_LWIP_Init+0x88>)
  tcpip_init( NULL, NULL );
 8004568:	4621      	mov	r1, r4
  GATEWAY_ADDRESS[0] = 0;
 800456a:	4e1e      	ldr	r6, [pc, #120]	@ (80045e4 <MX_LWIP_Init+0x8c>)
  tcpip_init( NULL, NULL );
 800456c:	4620      	mov	r0, r4
  IP_ADDRESS[0] = 192;
 800456e:	f8c8 3000 	str.w	r3, [r8]
  NETMASK_ADDRESS[0] = 255;
 8004572:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
  GATEWAY_ADDRESS[0] = 0;
 8004576:	6034      	str	r4, [r6, #0]
  NETMASK_ADDRESS[0] = 255;
 8004578:	603b      	str	r3, [r7, #0]
  tcpip_init( NULL, NULL );
 800457a:	f005 fa05 	bl	8009988 <tcpip_init>
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800457e:	9400      	str	r4, [sp, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004580:	4a19      	ldr	r2, [pc, #100]	@ (80045e8 <MX_LWIP_Init+0x90>)
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004582:	f8d8 3000 	ldr.w	r3, [r8]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004586:	6838      	ldr	r0, [r7, #0]
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004588:	4918      	ldr	r1, [pc, #96]	@ (80045ec <MX_LWIP_Init+0x94>)
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800458a:	6010      	str	r0, [r2, #0]
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800458c:	600b      	str	r3, [r1, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800458e:	6830      	ldr	r0, [r6, #0]
 8004590:	4b17      	ldr	r3, [pc, #92]	@ (80045f0 <MX_LWIP_Init+0x98>)
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004592:	4d18      	ldr	r5, [pc, #96]	@ (80045f4 <MX_LWIP_Init+0x9c>)
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004594:	6018      	str	r0, [r3, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004596:	4818      	ldr	r0, [pc, #96]	@ (80045f8 <MX_LWIP_Init+0xa0>)
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8004598:	4c18      	ldr	r4, [pc, #96]	@ (80045fc <MX_LWIP_Init+0xa4>)
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800459a:	9002      	str	r0, [sp, #8]
 800459c:	4818      	ldr	r0, [pc, #96]	@ (8004600 <MX_LWIP_Init+0xa8>)
 800459e:	9001      	str	r0, [sp, #4]
 80045a0:	4628      	mov	r0, r5
 80045a2:	f005 fec1 	bl	800a328 <netif_add>
  netif_set_default(&gnetif);
 80045a6:	4628      	mov	r0, r5
 80045a8:	f005 ff66 	bl	800a478 <netif_set_default>
  netif_set_up(&gnetif);
 80045ac:	4628      	mov	r0, r5
 80045ae:	f005 ff69 	bl	800a484 <netif_set_up>
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80045b2:	4628      	mov	r0, r5
 80045b4:	4913      	ldr	r1, [pc, #76]	@ (8004604 <MX_LWIP_Init+0xac>)
 80045b6:	f005 ffd9 	bl	800a56c <netif_set_link_callback>
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 80045ba:	f10d 0c14 	add.w	ip, sp, #20
 80045be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80045c4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80045c8:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 80045cc:	4629      	mov	r1, r5
 80045ce:	a805      	add	r0, sp, #20
 80045d0:	f000 fb42 	bl	8004c58 <osThreadCreate>
}
 80045d4:	b00c      	add	sp, #48	@ 0x30
 80045d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045da:	bf00      	nop
 80045dc:	0a32a8c0 	.word	0x0a32a8c0
 80045e0:	24000400 	.word	0x24000400
 80045e4:	240003fc 	.word	0x240003fc
 80045e8:	2400040c 	.word	0x2400040c
 80045ec:	24000410 	.word	0x24000410
 80045f0:	24000408 	.word	0x24000408
 80045f4:	24000414 	.word	0x24000414
 80045f8:	080098ed 	.word	0x080098ed
 80045fc:	080122b0 	.word	0x080122b0
 8004600:	080047d1 	.word	0x080047d1
 8004604:	08004555 	.word	0x08004555
 8004608:	24000404 	.word	0x24000404

0800460c <ETH_PHY_IO_DeInit>:
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
  return 0;
}
 800460c:	2000      	movs	r0, #0
 800460e:	4770      	bx	lr

08004610 <low_level_output>:
{
 8004610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004612:	b08d      	sub	sp, #52	@ 0x34
 8004614:	460c      	mov	r4, r1
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8004616:	2230      	movs	r2, #48	@ 0x30
 8004618:	2100      	movs	r1, #0
 800461a:	4668      	mov	r0, sp
 800461c:	f00d f894 	bl	8011748 <memset>
  for(q = p; q != NULL; q = q->next)
 8004620:	b1fc      	cbz	r4, 8004662 <low_level_output+0x52>
 8004622:	466b      	mov	r3, sp
 8004624:	4622      	mov	r2, r4
  uint32_t i = 0U;
 8004626:	2000      	movs	r0, #0
    Txbuffer[i].len = q->len;
 8004628:	8951      	ldrh	r1, [r2, #10]
    Txbuffer[i].buffer = q->payload;
 800462a:	6855      	ldr	r5, [r2, #4]
    if(q->next == NULL)
 800462c:	6812      	ldr	r2, [r2, #0]
    Txbuffer[i].len = q->len;
 800462e:	e9c3 5100 	strd	r5, r1, [r3]
    if(i>0)
 8004632:	b918      	cbnz	r0, 800463c <low_level_output+0x2c>
    if(i >= ETH_TX_DESC_CNT)
 8004634:	330c      	adds	r3, #12
    if(q->next == NULL)
 8004636:	b162      	cbz	r2, 8004652 <low_level_output+0x42>
    i++;
 8004638:	2001      	movs	r0, #1
 800463a:	e7f5      	b.n	8004628 <low_level_output+0x18>
      Txbuffer[i-1].next = &Txbuffer[i];
 800463c:	f843 3c04 	str.w	r3, [r3, #-4]
    if(q->next == NULL)
 8004640:	b13a      	cbz	r2, 8004652 <low_level_output+0x42>
    i++;
 8004642:	3001      	adds	r0, #1
    if(i >= ETH_TX_DESC_CNT)
 8004644:	330c      	adds	r3, #12
 8004646:	2804      	cmp	r0, #4
 8004648:	d1ee      	bne.n	8004628 <low_level_output+0x18>
      return ERR_IF;
 800464a:	f06f 000b 	mvn.w	r0, #11
}
 800464e:	b00d      	add	sp, #52	@ 0x34
 8004650:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Txbuffer[i].next = NULL;
 8004652:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8004656:	aa0c      	add	r2, sp, #48	@ 0x30
 8004658:	2300      	movs	r3, #0
 800465a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800465e:	f840 3c28 	str.w	r3, [r0, #-40]
  TxConfig.Length = p->tot_len;
 8004662:	8923      	ldrh	r3, [r4, #8]
  pbuf_ref(p);
 8004664:	4620      	mov	r0, r4
  TxConfig.Length = p->tot_len;
 8004666:	4e10      	ldr	r6, [pc, #64]	@ (80046a8 <low_level_output+0x98>)
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 8004668:	4d10      	ldr	r5, [pc, #64]	@ (80046ac <low_level_output+0x9c>)
        osSemaphoreWait(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 800466a:	4f11      	ldr	r7, [pc, #68]	@ (80046b0 <low_level_output+0xa0>)
  TxConfig.Length = p->tot_len;
 800466c:	6073      	str	r3, [r6, #4]
  TxConfig.TxBuffer = Txbuffer;
 800466e:	f8c6 d008 	str.w	sp, [r6, #8]
  TxConfig.pData = p;
 8004672:	6374      	str	r4, [r6, #52]	@ 0x34
  pbuf_ref(p);
 8004674:	f006 fa1c 	bl	800aab0 <pbuf_ref>
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 8004678:	4631      	mov	r1, r6
 800467a:	4628      	mov	r0, r5
 800467c:	f7fd fa84 	bl	8001b88 <HAL_ETH_Transmit_IT>
 8004680:	2800      	cmp	r0, #0
 8004682:	d0e4      	beq.n	800464e <low_level_output+0x3e>
      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 8004684:	4628      	mov	r0, r5
 8004686:	f7fd feab 	bl	80023e0 <HAL_ETH_GetError>
 800468a:	0783      	lsls	r3, r0, #30
        osSemaphoreWait(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 800468c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 8004690:	d506      	bpl.n	80046a0 <low_level_output+0x90>
        osSemaphoreWait(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 8004692:	6838      	ldr	r0, [r7, #0]
 8004694:	f000 fb9e 	bl	8004dd4 <osSemaphoreWait>
        HAL_ETH_ReleaseTxPacket(&heth);
 8004698:	4628      	mov	r0, r5
 800469a:	f7fd fb2f 	bl	8001cfc <HAL_ETH_ReleaseTxPacket>
  }while(errval == ERR_BUF);
 800469e:	e7eb      	b.n	8004678 <low_level_output+0x68>
        pbuf_free(p);
 80046a0:	4620      	mov	r0, r4
 80046a2:	f006 f86d 	bl	800a780 <pbuf_free>
  }while(errval == ERR_BUF);
 80046a6:	e7d0      	b.n	800464a <low_level_output+0x3a>
 80046a8:	24000468 	.word	0x24000468
 80046ac:	240004a0 	.word	0x240004a0
 80046b0:	24000550 	.word	0x24000550

080046b4 <ETH_PHY_IO_GetTick>:
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
  return HAL_GetTick();
 80046b4:	f7fc be2e 	b.w	8001314 <HAL_GetTick>

080046b8 <ETH_PHY_IO_Init>:
  HAL_ETH_SetMDIOClockRange(&heth);
 80046b8:	4802      	ldr	r0, [pc, #8]	@ (80046c4 <ETH_PHY_IO_Init+0xc>)
{
 80046ba:	b508      	push	{r3, lr}
  HAL_ETH_SetMDIOClockRange(&heth);
 80046bc:	f7fd fd30 	bl	8002120 <HAL_ETH_SetMDIOClockRange>
}
 80046c0:	2000      	movs	r0, #0
 80046c2:	bd08      	pop	{r3, pc}
 80046c4:	240004a0 	.word	0x240004a0

080046c8 <ETH_PHY_IO_ReadReg>:
{
 80046c8:	4684      	mov	ip, r0
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80046ca:	4806      	ldr	r0, [pc, #24]	@ (80046e4 <ETH_PHY_IO_ReadReg+0x1c>)
{
 80046cc:	b508      	push	{r3, lr}
 80046ce:	4613      	mov	r3, r2
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80046d0:	460a      	mov	r2, r1
 80046d2:	4661      	mov	r1, ip
 80046d4:	f7fd fbec 	bl	8001eb0 <HAL_ETH_ReadPHYRegister>
 80046d8:	3800      	subs	r0, #0
 80046da:	bf18      	it	ne
 80046dc:	2001      	movne	r0, #1
}
 80046de:	4240      	negs	r0, r0
 80046e0:	bd08      	pop	{r3, pc}
 80046e2:	bf00      	nop
 80046e4:	240004a0 	.word	0x240004a0

080046e8 <ETH_PHY_IO_WriteReg>:
{
 80046e8:	4684      	mov	ip, r0
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80046ea:	4806      	ldr	r0, [pc, #24]	@ (8004704 <ETH_PHY_IO_WriteReg+0x1c>)
{
 80046ec:	b508      	push	{r3, lr}
 80046ee:	4613      	mov	r3, r2
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80046f0:	460a      	mov	r2, r1
 80046f2:	4661      	mov	r1, ip
 80046f4:	f7fd fc0a 	bl	8001f0c <HAL_ETH_WritePHYRegister>
 80046f8:	3800      	subs	r0, #0
 80046fa:	bf18      	it	ne
 80046fc:	2001      	movne	r0, #1
}
 80046fe:	4240      	negs	r0, r0
 8004700:	bd08      	pop	{r3, pc}
 8004702:	bf00      	nop
 8004704:	240004a0 	.word	0x240004a0

08004708 <pbuf_free_custom>:
{
 8004708:	4601      	mov	r1, r0
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800470a:	4808      	ldr	r0, [pc, #32]	@ (800472c <pbuf_free_custom+0x24>)
{
 800470c:	b508      	push	{r3, lr}
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800470e:	f005 fd3d 	bl	800a18c <memp_free_pool>
  if (RxAllocStatus == RX_ALLOC_ERROR)
 8004712:	4b07      	ldr	r3, [pc, #28]	@ (8004730 <pbuf_free_custom+0x28>)
 8004714:	781a      	ldrb	r2, [r3, #0]
 8004716:	2a01      	cmp	r2, #1
 8004718:	d000      	beq.n	800471c <pbuf_free_custom+0x14>
}
 800471a:	bd08      	pop	{r3, pc}
    osSemaphoreRelease(RxPktSemaphore);
 800471c:	4905      	ldr	r1, [pc, #20]	@ (8004734 <pbuf_free_custom+0x2c>)
    RxAllocStatus = RX_ALLOC_OK;
 800471e:	2200      	movs	r2, #0
    osSemaphoreRelease(RxPktSemaphore);
 8004720:	6808      	ldr	r0, [r1, #0]
    RxAllocStatus = RX_ALLOC_OK;
 8004722:	701a      	strb	r2, [r3, #0]
}
 8004724:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    osSemaphoreRelease(RxPktSemaphore);
 8004728:	f000 bb80 	b.w	8004e2c <osSemaphoreRelease>
 800472c:	08012484 	.word	0x08012484
 8004730:	24000558 	.word	0x24000558
 8004734:	24000554 	.word	0x24000554

08004738 <ethernetif_input>:
{
 8004738:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800473c:	4c14      	ldr	r4, [pc, #80]	@ (8004790 <ethernetif_input+0x58>)
 800473e:	b083      	sub	sp, #12
 8004740:	f8df 8050 	ldr.w	r8, [pc, #80]	@ 8004794 <ethernetif_input+0x5c>
 8004744:	4606      	mov	r6, r0
  struct pbuf *p = NULL;
 8004746:	2700      	movs	r7, #0
    HAL_ETH_ReadData(&heth, (void **)&p);
 8004748:	f8df 904c 	ldr.w	r9, [pc, #76]	@ 8004798 <ethernetif_input+0x60>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800474c:	f04f 31ff 	mov.w	r1, #4294967295
 8004750:	6820      	ldr	r0, [r4, #0]
 8004752:	f000 fb3f 	bl	8004dd4 <osSemaphoreWait>
 8004756:	2800      	cmp	r0, #0
 8004758:	d1f8      	bne.n	800474c <ethernetif_input+0x14>
  if(RxAllocStatus == RX_ALLOC_OK)
 800475a:	f898 3000 	ldrb.w	r3, [r8]
  struct pbuf *p = NULL;
 800475e:	9701      	str	r7, [sp, #4]
  if(RxAllocStatus == RX_ALLOC_OK)
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1f3      	bne.n	800474c <ethernetif_input+0x14>
    HAL_ETH_ReadData(&heth, (void **)&p);
 8004764:	a901      	add	r1, sp, #4
 8004766:	4648      	mov	r0, r9
 8004768:	f7fd fa3e 	bl	8001be8 <HAL_ETH_ReadData>
  return p;
 800476c:	9d01      	ldr	r5, [sp, #4]
          if (netif->input( p, netif) != ERR_OK )
 800476e:	4631      	mov	r1, r6
 8004770:	4628      	mov	r0, r5
        if (p != NULL)
 8004772:	2d00      	cmp	r5, #0
 8004774:	d0ea      	beq.n	800474c <ethernetif_input+0x14>
          if (netif->input( p, netif) != ERR_OK )
 8004776:	6933      	ldr	r3, [r6, #16]
 8004778:	4798      	blx	r3
 800477a:	2800      	cmp	r0, #0
 800477c:	d0ed      	beq.n	800475a <ethernetif_input+0x22>
            pbuf_free(p);
 800477e:	4628      	mov	r0, r5
 8004780:	f005 fffe 	bl	800a780 <pbuf_free>
  if(RxAllocStatus == RX_ALLOC_OK)
 8004784:	f898 3000 	ldrb.w	r3, [r8]
  struct pbuf *p = NULL;
 8004788:	9701      	str	r7, [sp, #4]
  if(RxAllocStatus == RX_ALLOC_OK)
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1de      	bne.n	800474c <ethernetif_input+0x14>
 800478e:	e7e9      	b.n	8004764 <ethernetif_input+0x2c>
 8004790:	24000554 	.word	0x24000554
 8004794:	24000558 	.word	0x24000558
 8004798:	240004a0 	.word	0x240004a0

0800479c <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(RxPktSemaphore);
 800479c:	4b01      	ldr	r3, [pc, #4]	@ (80047a4 <HAL_ETH_RxCpltCallback+0x8>)
 800479e:	6818      	ldr	r0, [r3, #0]
 80047a0:	f000 bb44 	b.w	8004e2c <osSemaphoreRelease>
 80047a4:	24000554 	.word	0x24000554

080047a8 <HAL_ETH_TxCpltCallback>:
  osSemaphoreRelease(TxPktSemaphore);
 80047a8:	4b01      	ldr	r3, [pc, #4]	@ (80047b0 <HAL_ETH_TxCpltCallback+0x8>)
 80047aa:	6818      	ldr	r0, [r3, #0]
 80047ac:	f000 bb3e 	b.w	8004e2c <osSemaphoreRelease>
 80047b0:	24000550 	.word	0x24000550

080047b4 <HAL_ETH_ErrorCallback>:
{
 80047b4:	b508      	push	{r3, lr}
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 80047b6:	f7fd fe17 	bl	80023e8 <HAL_ETH_GetDMAError>
 80047ba:	0603      	lsls	r3, r0, #24
 80047bc:	d400      	bmi.n	80047c0 <HAL_ETH_ErrorCallback+0xc>
}
 80047be:	bd08      	pop	{r3, pc}
     osSemaphoreRelease(RxPktSemaphore);
 80047c0:	4b02      	ldr	r3, [pc, #8]	@ (80047cc <HAL_ETH_ErrorCallback+0x18>)
 80047c2:	6818      	ldr	r0, [r3, #0]
}
 80047c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     osSemaphoreRelease(RxPktSemaphore);
 80047c8:	f000 bb30 	b.w	8004e2c <osSemaphoreRelease>
 80047cc:	24000554 	.word	0x24000554

080047d0 <ethernetif_init>:
{
 80047d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80047d4:	4604      	mov	r4, r0
{
 80047d6:	b0a7      	sub	sp, #156	@ 0x9c
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80047d8:	2800      	cmp	r0, #0
 80047da:	f000 80bf 	beq.w	800495c <ethernetif_init+0x18c>
  netif->linkoutput = low_level_output;
 80047de:	4b63      	ldr	r3, [pc, #396]	@ (800496c <ethernetif_init+0x19c>)
  netif->name[0] = IFNAME0;
 80047e0:	f247 4173 	movw	r1, #29811	@ 0x7473
  netif->output = etharp_output;
 80047e4:	4a62      	ldr	r2, [pc, #392]	@ (8004970 <ethernetif_init+0x1a0>)
  ETH_MACConfigTypeDef MACConf = {0};
 80047e6:	a80d      	add	r0, sp, #52	@ 0x34
  netif->name[0] = IFNAME0;
 80047e8:	85e1      	strh	r1, [r4, #46]	@ 0x2e
  ETH_MACConfigTypeDef MACConf = {0};
 80047ea:	2100      	movs	r1, #0
  netif->output = etharp_output;
 80047ec:	6162      	str	r2, [r4, #20]
  ETH_MACConfigTypeDef MACConf = {0};
 80047ee:	2264      	movs	r2, #100	@ 0x64
  netif->linkoutput = low_level_output;
 80047f0:	61a3      	str	r3, [r4, #24]
  MACAddr[4] = 0x00;
 80047f2:	2500      	movs	r5, #0
  ETH_MACConfigTypeDef MACConf = {0};
 80047f4:	f00c ffa8 	bl	8011748 <memset>
  heth.Instance = ETH;
 80047f8:	4e5e      	ldr	r6, [pc, #376]	@ (8004974 <ethernetif_init+0x1a4>)
 80047fa:	4b5f      	ldr	r3, [pc, #380]	@ (8004978 <ethernetif_init+0x1a8>)
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80047fc:	2701      	movs	r7, #1
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80047fe:	f8df 91b4 	ldr.w	r9, [pc, #436]	@ 80049b4 <ethernetif_init+0x1e4>
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004802:	4630      	mov	r0, r6
  heth.Instance = ETH;
 8004804:	6033      	str	r3, [r6, #0]
  MACAddr[0] = 0x00;
 8004806:	4b5d      	ldr	r3, [pc, #372]	@ (800497c <ethernetif_init+0x1ac>)
  MACAddr[4] = 0x00;
 8004808:	f8ad 5004 	strh.w	r5, [sp, #4]
  MACAddr[0] = 0x00;
 800480c:	9300      	str	r3, [sp, #0]
  heth.Init.TxDesc = DMATxDscrTab;
 800480e:	4b5c      	ldr	r3, [pc, #368]	@ (8004980 <ethernetif_init+0x1b0>)
  heth.Init.MACAddr = &MACAddr[0];
 8004810:	f8c6 d004 	str.w	sp, [r6, #4]
  heth.Init.TxDesc = DMATxDscrTab;
 8004814:	60f3      	str	r3, [r6, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004816:	4b5b      	ldr	r3, [pc, #364]	@ (8004984 <ethernetif_init+0x1b4>)
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004818:	7237      	strb	r7, [r6, #8]
  heth.Init.RxDesc = DMARxDscrTab;
 800481a:	6133      	str	r3, [r6, #16]
  heth.Init.RxBuffLen = 1536;
 800481c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8004820:	6173      	str	r3, [r6, #20]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004822:	f7fd fcb3 	bl	800218c <HAL_ETH_Init>
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004826:	4629      	mov	r1, r5
 8004828:	2234      	movs	r2, #52	@ 0x34
  hal_eth_init_status = HAL_ETH_Init(&heth);
 800482a:	4680      	mov	r8, r0
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800482c:	4648      	mov	r0, r9
 800482e:	f00c ff8b 	bl	8011748 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8004832:	2321      	movs	r3, #33	@ 0x21
  LWIP_MEMPOOL_INIT(RX_POOL);
 8004834:	4854      	ldr	r0, [pc, #336]	@ (8004988 <ethernetif_init+0x1b8>)
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8004836:	f849 3c04 	str.w	r3, [r9, #-4]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800483a:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800483e:	f8c9 3010 	str.w	r3, [r9, #16]
  LWIP_MEMPOOL_INIT(RX_POOL);
 8004842:	f005 fc2b 	bl	800a09c <memp_init_pool>
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004846:	6873      	ldr	r3, [r6, #4]
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004848:	2206      	movs	r2, #6
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 800484a:	4e50      	ldr	r6, [pc, #320]	@ (800498c <ethernetif_init+0x1bc>)
 800484c:	4639      	mov	r1, r7
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800484e:	f884 202c 	strb.w	r2, [r4, #44]	@ 0x2c
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 8004852:	a802      	add	r0, sp, #8
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004854:	781a      	ldrb	r2, [r3, #0]
 8004856:	f884 2026 	strb.w	r2, [r4, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800485a:	785a      	ldrb	r2, [r3, #1]
 800485c:	f884 2027 	strb.w	r2, [r4, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004860:	789a      	ldrb	r2, [r3, #2]
 8004862:	f884 2028 	strb.w	r2, [r4, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004866:	78da      	ldrb	r2, [r3, #3]
  osSemaphoreDef(RxSem);
 8004868:	9502      	str	r5, [sp, #8]
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800486a:	f884 2029 	strb.w	r2, [r4, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800486e:	791a      	ldrb	r2, [r3, #4]
 8004870:	f884 202a 	strb.w	r2, [r4, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004874:	795b      	ldrb	r3, [r3, #5]
  osSemaphoreDef(RxSem);
 8004876:	9503      	str	r5, [sp, #12]
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004878:	f884 302b 	strb.w	r3, [r4, #43]	@ 0x2b
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800487c:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8004880:	f043 030a 	orr.w	r3, r3, #10
 8004884:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
  netif->mtu = ETH_MAX_PAYLOAD;
 8004888:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800488c:	84a3      	strh	r3, [r4, #36]	@ 0x24
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 800488e:	f000 fa75 	bl	8004d7c <osSemaphoreCreate>
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 8004892:	4639      	mov	r1, r7
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 8004894:	6030      	str	r0, [r6, #0]
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 8004896:	a804      	add	r0, sp, #16
  osSemaphoreDef(TxSem);
 8004898:	e9cd 5504 	strd	r5, r5, [sp, #16]
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 800489c:	f000 fa6e 	bl	8004d7c <osSemaphoreCreate>
 80048a0:	4603      	mov	r3, r0
  osSemaphoreWait(RxPktSemaphore, 0);
 80048a2:	6830      	ldr	r0, [r6, #0]
 80048a4:	4629      	mov	r1, r5
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 80048a6:	4e3a      	ldr	r6, [pc, #232]	@ (8004990 <ethernetif_init+0x1c0>)
 80048a8:	6033      	str	r3, [r6, #0]
  osSemaphoreWait(RxPktSemaphore, 0);
 80048aa:	f000 fa93 	bl	8004dd4 <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 80048ae:	4629      	mov	r1, r5
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80048b0:	4d38      	ldr	r5, [pc, #224]	@ (8004994 <ethernetif_init+0x1c4>)
  osSemaphoreWait(TxPktSemaphore, 0);
 80048b2:	6830      	ldr	r0, [r6, #0]
 80048b4:	f000 fa8e 	bl	8004dd4 <osSemaphoreWait>
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80048b8:	f10d 0c18 	add.w	ip, sp, #24
 80048bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048be:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80048c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80048c6:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 80048ca:	4621      	mov	r1, r4
 80048cc:	a806      	add	r0, sp, #24
 80048ce:	f000 f9c3 	bl	8004c58 <osThreadCreate>
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80048d2:	4931      	ldr	r1, [pc, #196]	@ (8004998 <ethernetif_init+0x1c8>)
 80048d4:	4831      	ldr	r0, [pc, #196]	@ (800499c <ethernetif_init+0x1cc>)
 80048d6:	f7fc fc45 	bl	8001164 <LAN8742_RegisterBusIO>
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 80048da:	4830      	ldr	r0, [pc, #192]	@ (800499c <ethernetif_init+0x1cc>)
 80048dc:	f7fc fc5c 	bl	8001198 <LAN8742_Init>
 80048e0:	bb68      	cbnz	r0, 800493e <ethernetif_init+0x16e>
  if (hal_eth_init_status == HAL_OK)
 80048e2:	f1b8 0f00 	cmp.w	r8, #0
 80048e6:	d124      	bne.n	8004932 <ethernetif_init+0x162>
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80048e8:	482c      	ldr	r0, [pc, #176]	@ (800499c <ethernetif_init+0x1cc>)
 80048ea:	f7fc fc89 	bl	8001200 <LAN8742_GetLinkState>
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 80048ee:	2801      	cmp	r0, #1
 80048f0:	dd25      	ble.n	800493e <ethernetif_init+0x16e>
      switch (PHYLinkState)
 80048f2:	3803      	subs	r0, #3
 80048f4:	2802      	cmp	r0, #2
 80048f6:	d82c      	bhi.n	8004952 <ethernetif_init+0x182>
 80048f8:	4a29      	ldr	r2, [pc, #164]	@ (80049a0 <ethernetif_init+0x1d0>)
 80048fa:	4b2a      	ldr	r3, [pc, #168]	@ (80049a4 <ethernetif_init+0x1d4>)
 80048fc:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8004900:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004904:	a90d      	add	r1, sp, #52	@ 0x34
 8004906:	481b      	ldr	r0, [pc, #108]	@ (8004974 <ethernetif_init+0x1a4>)
 8004908:	f7fd fb32 	bl	8001f70 <HAL_ETH_GetMACConfig>
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800490c:	a90d      	add	r1, sp, #52	@ 0x34
 800490e:	4819      	ldr	r0, [pc, #100]	@ (8004974 <ethernetif_init+0x1a4>)
    MACConf.Speed = speed;
 8004910:	e9cd 5612 	strd	r5, r6, [sp, #72]	@ 0x48
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004914:	f7fd fbf6 	bl	8002104 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8004918:	4816      	ldr	r0, [pc, #88]	@ (8004974 <ethernetif_init+0x1a4>)
 800491a:	f7fd f8b1 	bl	8001a80 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800491e:	4620      	mov	r0, r4
 8004920:	f005 fdb0 	bl	800a484 <netif_set_up>
    netif_set_link_up(netif);
 8004924:	4620      	mov	r0, r4
 8004926:	f005 fde3 	bl	800a4f0 <netif_set_link_up>
}
 800492a:	2000      	movs	r0, #0
 800492c:	b027      	add	sp, #156	@ 0x9c
 800492e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    Error_Handler();
 8004932:	f7fb ff8d 	bl	8000850 <Error_Handler>
}
 8004936:	2000      	movs	r0, #0
 8004938:	b027      	add	sp, #156	@ 0x9c
 800493a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      netif_set_link_down(netif);
 800493e:	4620      	mov	r0, r4
 8004940:	f005 fdfa 	bl	800a538 <netif_set_link_down>
      netif_set_down(netif);
 8004944:	4620      	mov	r0, r4
 8004946:	f005 fdb7 	bl	800a4b8 <netif_set_down>
}
 800494a:	2000      	movs	r0, #0
 800494c:	b027      	add	sp, #156	@ 0x9c
 800494e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      switch (PHYLinkState)
 8004952:	f44f 4580 	mov.w	r5, #16384	@ 0x4000
 8004956:	f44f 5600 	mov.w	r6, #8192	@ 0x2000
 800495a:	e7d3      	b.n	8004904 <ethernetif_init+0x134>
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800495c:	4b12      	ldr	r3, [pc, #72]	@ (80049a8 <ethernetif_init+0x1d8>)
 800495e:	f240 2219 	movw	r2, #537	@ 0x219
 8004962:	4912      	ldr	r1, [pc, #72]	@ (80049ac <ethernetif_init+0x1dc>)
 8004964:	4812      	ldr	r0, [pc, #72]	@ (80049b0 <ethernetif_init+0x1e0>)
 8004966:	f00c fd97 	bl	8011498 <iprintf>
 800496a:	e738      	b.n	80047de <ethernetif_init+0xe>
 800496c:	08004611 	.word	0x08004611
 8004970:	0800fda9 	.word	0x0800fda9
 8004974:	240004a0 	.word	0x240004a0
 8004978:	40028000 	.word	0x40028000
 800497c:	00e18000 	.word	0x00e18000
 8004980:	30000100 	.word	0x30000100
 8004984:	30000000 	.word	0x30000000
 8004988:	08012484 	.word	0x08012484
 800498c:	24000554 	.word	0x24000554
 8004990:	24000550 	.word	0x24000550
 8004994:	080122cc 	.word	0x080122cc
 8004998:	24000010 	.word	0x24000010
 800499c:	24000448 	.word	0x24000448
 80049a0:	08012470 	.word	0x08012470
 80049a4:	08012464 	.word	0x08012464
 80049a8:	080123f0 	.word	0x080123f0
 80049ac:	0801240c 	.word	0x0801240c
 80049b0:	0801241c 	.word	0x0801241c
 80049b4:	2400046c 	.word	0x2400046c

080049b8 <sys_now>:
  return HAL_GetTick();
 80049b8:	f7fc bcac 	b.w	8001314 <HAL_GetTick>

080049bc <HAL_ETH_MspInit>:
  if(ethHandle->Instance==ETH)
 80049bc:	4b41      	ldr	r3, [pc, #260]	@ (8004ac4 <HAL_ETH_MspInit+0x108>)
 80049be:	6802      	ldr	r2, [r0, #0]
{
 80049c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(ethHandle->Instance==ETH)
 80049c2:	429a      	cmp	r2, r3
{
 80049c4:	b08d      	sub	sp, #52	@ 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049c6:	f04f 0400 	mov.w	r4, #0
 80049ca:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80049ce:	e9cd 4408 	strd	r4, r4, [sp, #32]
 80049d2:	940a      	str	r4, [sp, #40]	@ 0x28
  if(ethHandle->Instance==ETH)
 80049d4:	d001      	beq.n	80049da <HAL_ETH_MspInit+0x1e>
}
 80049d6:	b00d      	add	sp, #52	@ 0x34
 80049d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80049da:	4b3b      	ldr	r3, [pc, #236]	@ (8004ac8 <HAL_ETH_MspInit+0x10c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049dc:	2603      	movs	r6, #3
 80049de:	250b      	movs	r5, #11
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049e0:	a906      	add	r1, sp, #24
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80049e2:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049e6:	2702      	movs	r7, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049e8:	4838      	ldr	r0, [pc, #224]	@ (8004acc <HAL_ETH_MspInit+0x110>)
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80049ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80049ee:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 80049f2:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 80049f6:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 80049fa:	9200      	str	r2, [sp, #0]
 80049fc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80049fe:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8004a02:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004a06:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 8004a0a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8004a0e:	f402 3280 	and.w	r2, r2, #65536	@ 0x10000
 8004a12:	9201      	str	r2, [sp, #4]
 8004a14:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8004a16:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8004a1a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004a1e:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 8004a22:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8004a26:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8004a2a:	9202      	str	r2, [sp, #8]
 8004a2c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a2e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8004a32:	f042 0204 	orr.w	r2, r2, #4
 8004a36:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8004a3a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8004a3e:	f002 0204 	and.w	r2, r2, #4
 8004a42:	9203      	str	r2, [sp, #12]
 8004a44:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a46:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8004a4a:	f042 0201 	orr.w	r2, r2, #1
 8004a4e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8004a52:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8004a56:	f002 0201 	and.w	r2, r2, #1
 8004a5a:	9204      	str	r2, [sp, #16]
 8004a5c:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a5e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8004a62:	f042 0202 	orr.w	r2, r2, #2
 8004a66:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004a6a:	2232      	movs	r2, #50	@ 0x32
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a70:	f003 0302 	and.w	r3, r3, #2
 8004a74:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004a76:	2302      	movs	r3, #2
 8004a78:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a7c:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a7e:	e9cd 6509 	strd	r6, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a82:	f7fd fcb5 	bl	80023f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004a86:	2386      	movs	r3, #134	@ 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a88:	a906      	add	r1, sp, #24
 8004a8a:	4811      	ldr	r0, [pc, #68]	@ (8004ad0 <HAL_ETH_MspInit+0x114>)
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004a8c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004a8e:	950a      	str	r5, [sp, #40]	@ 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a90:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a92:	e9cd 4608 	strd	r4, r6, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a96:	f7fd fcab 	bl	80023f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin|RMII_TXD1_Pin;
 8004a9a:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a9e:	a906      	add	r1, sp, #24
 8004aa0:	480c      	ldr	r0, [pc, #48]	@ (8004ad4 <HAL_ETH_MspInit+0x118>)
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin|RMII_TXD1_Pin;
 8004aa2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aa4:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004aa6:	950a      	str	r5, [sp, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004aa8:	e9cd 4608 	strd	r4, r6, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004aac:	f7fd fca0 	bl	80023f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8004ab0:	4622      	mov	r2, r4
 8004ab2:	2105      	movs	r1, #5
 8004ab4:	203d      	movs	r0, #61	@ 0x3d
 8004ab6:	f7fc fc4f 	bl	8001358 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8004aba:	203d      	movs	r0, #61	@ 0x3d
 8004abc:	f7fc fc88 	bl	80013d0 <HAL_NVIC_EnableIRQ>
}
 8004ac0:	b00d      	add	sp, #52	@ 0x34
 8004ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ac4:	40028000 	.word	0x40028000
 8004ac8:	58024400 	.word	0x58024400
 8004acc:	58020800 	.word	0x58020800
 8004ad0:	58020000 	.word	0x58020000
 8004ad4:	58020400 	.word	0x58020400

08004ad8 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8004ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004adc:	b09b      	sub	sp, #108	@ 0x6c
  ETH_MACConfigTypeDef MACConf = {0};
 8004ade:	2700      	movs	r7, #0
{
 8004ae0:	4604      	mov	r4, r0
  ETH_MACConfigTypeDef MACConf = {0};
 8004ae2:	2264      	movs	r2, #100	@ 0x64
 8004ae4:	2100      	movs	r1, #0
 8004ae6:	4668      	mov	r0, sp
 8004ae8:	46b9      	mov	r9, r7
  int32_t PHYLinkState = 0;
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8004aea:	46b8      	mov	r8, r7
 8004aec:	f8df b098 	ldr.w	fp, [pc, #152]	@ 8004b88 <ethernet_link_thread+0xb0>
  ETH_MACConfigTypeDef MACConf = {0};
 8004af0:	f00c fe2a 	bl	8011748 <memset>

  struct netif *netif = (struct netif *) argument;
 8004af4:	f8df a094 	ldr.w	sl, [pc, #148]	@ 8004b8c <ethernet_link_thread+0xb4>

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004af8:	4d21      	ldr	r5, [pc, #132]	@ (8004b80 <ethernet_link_thread+0xa8>)
    }

    if(linkchanged)
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004afa:	4e22      	ldr	r6, [pc, #136]	@ (8004b84 <ethernet_link_thread+0xac>)
 8004afc:	e022      	b.n	8004b44 <ethernet_link_thread+0x6c>
  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8004afe:	2801      	cmp	r0, #1
 8004b00:	dd34      	ble.n	8004b6c <ethernet_link_thread+0x94>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8004b02:	075a      	lsls	r2, r3, #29
 8004b04:	d41b      	bmi.n	8004b3e <ethernet_link_thread+0x66>
    switch (PHYLinkState)
 8004b06:	3802      	subs	r0, #2
 8004b08:	2803      	cmp	r0, #3
 8004b0a:	d82b      	bhi.n	8004b64 <ethernet_link_thread+0x8c>
 8004b0c:	f85b 7020 	ldr.w	r7, [fp, r0, lsl #2]
 8004b10:	f85a 9020 	ldr.w	r9, [sl, r0, lsl #2]
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004b14:	4669      	mov	r1, sp
 8004b16:	4630      	mov	r0, r6
 8004b18:	f7fd fa2a 	bl	8001f70 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
      MACConf.Speed = speed;
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004b1c:	4669      	mov	r1, sp
 8004b1e:	4630      	mov	r0, r6
      HAL_ETH_Start_IT(&heth);
      netif_set_up(netif);
      netif_set_link_up(netif);
 8004b20:	f04f 0801 	mov.w	r8, #1
      MACConf.Speed = speed;
 8004b24:	e9cd 7905 	strd	r7, r9, [sp, #20]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004b28:	f7fd faec 	bl	8002104 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8004b2c:	4630      	mov	r0, r6
 8004b2e:	f7fc ffa7 	bl	8001a80 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8004b32:	4620      	mov	r0, r4
 8004b34:	f005 fca6 	bl	800a484 <netif_set_up>
      netif_set_link_up(netif);
 8004b38:	4620      	mov	r0, r4
 8004b3a:	f005 fcd9 	bl	800a4f0 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8004b3e:	2064      	movs	r0, #100	@ 0x64
 8004b40:	f000 f8ba 	bl	8004cb8 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004b44:	4628      	mov	r0, r5
 8004b46:	f7fc fb5b 	bl	8001200 <LAN8742_GetLinkState>
  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8004b4a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8004b4e:	0759      	lsls	r1, r3, #29
 8004b50:	ea4f 0293 	mov.w	r2, r3, lsr #2
 8004b54:	d4d3      	bmi.n	8004afe <ethernet_link_thread+0x26>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8004b56:	07d3      	lsls	r3, r2, #31
 8004b58:	d4f1      	bmi.n	8004b3e <ethernet_link_thread+0x66>
 8004b5a:	2801      	cmp	r0, #1
 8004b5c:	ddef      	ble.n	8004b3e <ethernet_link_thread+0x66>
    switch (PHYLinkState)
 8004b5e:	3802      	subs	r0, #2
 8004b60:	2803      	cmp	r0, #3
 8004b62:	d9d3      	bls.n	8004b0c <ethernet_link_thread+0x34>
    if(linkchanged)
 8004b64:	f1b8 0f00 	cmp.w	r8, #0
 8004b68:	d0e9      	beq.n	8004b3e <ethernet_link_thread+0x66>
 8004b6a:	e7d3      	b.n	8004b14 <ethernet_link_thread+0x3c>
    HAL_ETH_Stop_IT(&heth);
 8004b6c:	4630      	mov	r0, r6
 8004b6e:	f7fc ffc7 	bl	8001b00 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8004b72:	4620      	mov	r0, r4
 8004b74:	f005 fca0 	bl	800a4b8 <netif_set_down>
    netif_set_link_down(netif);
 8004b78:	4620      	mov	r0, r4
 8004b7a:	f005 fcdd 	bl	800a538 <netif_set_link_down>
 8004b7e:	e7de      	b.n	8004b3e <ethernet_link_thread+0x66>
 8004b80:	24000448 	.word	0x24000448
 8004b84:	240004a0 	.word	0x240004a0
 8004b88:	08012454 	.word	0x08012454
 8004b8c:	08012444 	.word	0x08012444

08004b90 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8004b90:	b530      	push	{r4, r5, lr}
 8004b92:	4604      	mov	r4, r0
 8004b94:	b083      	sub	sp, #12
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8004b96:	480d      	ldr	r0, [pc, #52]	@ (8004bcc <HAL_ETH_RxAllocateCallback+0x3c>)
 8004b98:	f005 fac8 	bl	800a12c <memp_malloc_pool>
  if (p)
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	b178      	cbz	r0, 8004bc0 <HAL_ETH_RxAllocateCallback+0x30>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8004ba0:	f100 0520 	add.w	r5, r0, #32
    p->custom_free_function = pbuf_free_custom;
 8004ba4:	4a0a      	ldr	r2, [pc, #40]	@ (8004bd0 <HAL_ETH_RxAllocateCallback+0x40>)
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8004ba6:	2100      	movs	r1, #0
 8004ba8:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8004bac:	6025      	str	r5, [r4, #0]
    p->custom_free_function = pbuf_free_custom;
 8004bae:	611a      	str	r2, [r3, #16]
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8004bb0:	2241      	movs	r2, #65	@ 0x41
 8004bb2:	9001      	str	r0, [sp, #4]
 8004bb4:	4608      	mov	r0, r1
 8004bb6:	9500      	str	r5, [sp, #0]
 8004bb8:	f005 fd30 	bl	800a61c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8004bbc:	b003      	add	sp, #12
 8004bbe:	bd30      	pop	{r4, r5, pc}
    RxAllocStatus = RX_ALLOC_ERROR;
 8004bc0:	4a04      	ldr	r2, [pc, #16]	@ (8004bd4 <HAL_ETH_RxAllocateCallback+0x44>)
 8004bc2:	2101      	movs	r1, #1
    *buff = NULL;
 8004bc4:	6020      	str	r0, [r4, #0]
    RxAllocStatus = RX_ALLOC_ERROR;
 8004bc6:	7011      	strb	r1, [r2, #0]
}
 8004bc8:	b003      	add	sp, #12
 8004bca:	bd30      	pop	{r4, r5, pc}
 8004bcc:	08012484 	.word	0x08012484
 8004bd0:	08004709 	.word	0x08004709
 8004bd4:	24000558 	.word	0x24000558

08004bd8 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8004bd8:	b430      	push	{r4, r5}
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
  struct pbuf *p = NULL;

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
  p->next = NULL;
 8004bda:	2500      	movs	r5, #0
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8004bdc:	f1a2 0420 	sub.w	r4, r2, #32
  p->tot_len = 0;
  p->len = Length;
 8004be0:	f822 3c16 	strh.w	r3, [r2, #-22]
  p->next = NULL;
 8004be4:	f842 5c20 	str.w	r5, [r2, #-32]
  p->tot_len = 0;
 8004be8:	f822 5c18 	strh.w	r5, [r2, #-24]

  /* Chain the buffer. */
  if (!*ppStart)
 8004bec:	6805      	ldr	r5, [r0, #0]
 8004bee:	b1f5      	cbz	r5, 8004c2e <HAL_ETH_RxLinkCallback+0x56>
    *ppStart = p;
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8004bf0:	680d      	ldr	r5, [r1, #0]
 8004bf2:	602c      	str	r4, [r5, #0]
  }
  *ppEnd  = p;
 8004bf4:	600c      	str	r4, [r1, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8004bf6:	6801      	ldr	r1, [r0, #0]
 8004bf8:	b129      	cbz	r1, 8004c06 <HAL_ETH_RxLinkCallback+0x2e>
  {
    p->tot_len += Length;
 8004bfa:	8908      	ldrh	r0, [r1, #8]
 8004bfc:	4418      	add	r0, r3
 8004bfe:	8108      	strh	r0, [r1, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8004c00:	6809      	ldr	r1, [r1, #0]
 8004c02:	2900      	cmp	r1, #0
 8004c04:	d1f9      	bne.n	8004bfa <HAL_ETH_RxLinkCallback+0x22>
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8004c06:	b183      	cbz	r3, 8004c2a <HAL_ETH_RxLinkCallback+0x52>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8004c08:	f002 011f 	and.w	r1, r2, #31
 8004c0c:	4419      	add	r1, r3
 8004c0e:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8004c12:	4808      	ldr	r0, [pc, #32]	@ (8004c34 <HAL_ETH_RxLinkCallback+0x5c>)
 8004c14:	4411      	add	r1, r2
 8004c16:	f8c0 225c 	str.w	r2, [r0, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8004c1a:	3220      	adds	r2, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 8004c1c:	1a8b      	subs	r3, r1, r2
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	dcf9      	bgt.n	8004c16 <HAL_ETH_RxLinkCallback+0x3e>
 8004c22:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004c26:	f3bf 8f6f 	isb	sy

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);

/* USER CODE END HAL ETH RxLinkCallback */
}
 8004c2a:	bc30      	pop	{r4, r5}
 8004c2c:	4770      	bx	lr
    *ppStart = p;
 8004c2e:	6004      	str	r4, [r0, #0]
 8004c30:	e7e0      	b.n	8004bf4 <HAL_ETH_RxLinkCallback+0x1c>
 8004c32:	bf00      	nop
 8004c34:	e000ed00 	.word	0xe000ed00

08004c38 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8004c38:	f005 bda2 	b.w	800a780 <pbuf_free>

08004c3c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004c3c:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8004c3e:	f001 f971 	bl	8005f24 <vTaskStartScheduler>
  
  return osOK;
}
 8004c42:	2000      	movs	r0, #0
 8004c44:	bd08      	pop	{r3, pc}
 8004c46:	bf00      	nop

08004c48 <osKernelSysTick>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c48:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 8004c4c:	b10b      	cbz	r3, 8004c52 <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
 8004c4e:	f001 b9b9 	b.w	8005fc4 <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
 8004c52:	f001 b9b1 	b.w	8005fb8 <xTaskGetTickCount>
 8004c56:	bf00      	nop

08004c58 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004c58:	4684      	mov	ip, r0
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	b570      	push	{r4, r5, r6, lr}
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004c5e:	6945      	ldr	r5, [r0, #20]
{
 8004c60:	b086      	sub	sp, #24
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c62:	6840      	ldr	r0, [r0, #4]
 8004c64:	f8dc 1000 	ldr.w	r1, [ip]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004c68:	f8dc 2010 	ldr.w	r2, [ip, #16]
 8004c6c:	f9bc e008 	ldrsh.w	lr, [ip, #8]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004c70:	b17d      	cbz	r5, 8004c92 <osThreadCreate+0x3a>
 8004c72:	f8dc 6018 	ldr.w	r6, [ip, #24]
 8004c76:	b166      	cbz	r6, 8004c92 <osThreadCreate+0x3a>
  if (priority != osPriorityError) {
 8004c78:	f1be 0f84 	cmp.w	lr, #132	@ 0x84
    fpriority += (priority - osPriorityIdle);
 8004c7c:	bf14      	ite	ne
 8004c7e:	f10e 0403 	addne.w	r4, lr, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004c82:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c84:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8004c88:	9400      	str	r4, [sp, #0]
 8004c8a:	f001 f8e1 	bl	8005e50 <xTaskCreateStatic>
    return NULL;
  }     
#endif
  
  return handle;
}
 8004c8e:	b006      	add	sp, #24
 8004c90:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 8004c92:	f1be 0f84 	cmp.w	lr, #132	@ 0x84
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c96:	b292      	uxth	r2, r2
    fpriority += (priority - osPriorityIdle);
 8004c98:	bf14      	ite	ne
 8004c9a:	f10e 0403 	addne.w	r4, lr, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004c9e:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ca0:	9400      	str	r4, [sp, #0]
 8004ca2:	ac05      	add	r4, sp, #20
 8004ca4:	9401      	str	r4, [sp, #4]
 8004ca6:	f001 f90d 	bl	8005ec4 <xTaskCreate>
 8004caa:	2801      	cmp	r0, #1
  return handle;
 8004cac:	bf0c      	ite	eq
 8004cae:	9805      	ldreq	r0, [sp, #20]
      return NULL;
 8004cb0:	2000      	movne	r0, #0
}
 8004cb2:	b006      	add	sp, #24
 8004cb4:	bd70      	pop	{r4, r5, r6, pc}
 8004cb6:	bf00      	nop

08004cb8 <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004cb8:	2801      	cmp	r0, #1
{
 8004cba:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004cbc:	bf38      	it	cc
 8004cbe:	2001      	movcc	r0, #1
 8004cc0:	f001 fade 	bl	8006280 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004cc4:	2000      	movs	r0, #0
 8004cc6:	bd08      	pop	{r3, pc}

08004cc8 <osMutexCreate>:
{
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8004cc8:	6841      	ldr	r1, [r0, #4]
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8004cca:	2001      	movs	r0, #1
  if (mutex_def->controlblock != NULL) {
 8004ccc:	b109      	cbz	r1, 8004cd2 <osMutexCreate+0xa>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8004cce:	f000 bbf7 	b.w	80054c0 <xQueueCreateMutexStatic>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8004cd2:	f000 bc27 	b.w	8005524 <xQueueCreateMutex>
 8004cd6:	bf00      	nop

08004cd8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8004cd8:	b500      	push	{lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004cda:	2300      	movs	r3, #0
{
 8004cdc:	b083      	sub	sp, #12
  portBASE_TYPE taskWoken = pdFALSE;  
 8004cde:	9301      	str	r3, [sp, #4]
  
  
  if (mutex_id == NULL) {
 8004ce0:	b310      	cbz	r0, 8004d28 <osMutexWait+0x50>
 8004ce2:	f3ef 8205 	mrs	r2, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8004ce6:	b1aa      	cbz	r2, 8004d14 <osMutexWait+0x3c>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004ce8:	aa01      	add	r2, sp, #4
 8004cea:	4619      	mov	r1, r3
 8004cec:	f000 fe88 	bl	8005a00 <xQueueReceiveFromISR>
 8004cf0:	2801      	cmp	r0, #1
 8004cf2:	d115      	bne.n	8004d20 <osMutexWait+0x48>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004cf4:	9b01      	ldr	r3, [sp, #4]
 8004cf6:	b18b      	cbz	r3, 8004d1c <osMutexWait+0x44>
 8004cf8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004cfc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d00:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004d04:	f3bf 8f4f 	dsb	sy
 8004d08:	f3bf 8f6f 	isb	sy
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 8004d0c:	2000      	movs	r0, #0
}
 8004d0e:	b003      	add	sp, #12
 8004d10:	f85d fb04 	ldr.w	pc, [sp], #4
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8004d14:	f000 fd9a 	bl	800584c <xQueueSemaphoreTake>
 8004d18:	2801      	cmp	r0, #1
 8004d1a:	d101      	bne.n	8004d20 <osMutexWait+0x48>
  return osOK;
 8004d1c:	2000      	movs	r0, #0
 8004d1e:	e7f6      	b.n	8004d0e <osMutexWait+0x36>
      return osErrorOS;
 8004d20:	20ff      	movs	r0, #255	@ 0xff
}
 8004d22:	b003      	add	sp, #12
 8004d24:	f85d fb04 	ldr.w	pc, [sp], #4
    return osErrorParameter;
 8004d28:	2080      	movs	r0, #128	@ 0x80
}
 8004d2a:	b003      	add	sp, #12
 8004d2c:	f85d fb04 	ldr.w	pc, [sp], #4

08004d30 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8004d30:	b500      	push	{lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8004d32:	2300      	movs	r3, #0
{
 8004d34:	b083      	sub	sp, #12
  portBASE_TYPE taskWoken = pdFALSE;
 8004d36:	9301      	str	r3, [sp, #4]
 8004d38:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 8004d3c:	b1a3      	cbz	r3, 8004d68 <osMutexRelease+0x38>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004d3e:	a901      	add	r1, sp, #4
 8004d40:	f000 fc70 	bl	8005624 <xQueueGiveFromISR>
 8004d44:	2801      	cmp	r0, #1
 8004d46:	d115      	bne.n	8004d74 <osMutexRelease+0x44>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004d48:	9b01      	ldr	r3, [sp, #4]
 8004d4a:	b14b      	cbz	r3, 8004d60 <osMutexRelease+0x30>
 8004d4c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004d50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d54:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004d58:	f3bf 8f4f 	dsb	sy
 8004d5c:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8004d60:	2000      	movs	r0, #0
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 8004d62:	b003      	add	sp, #12
 8004d64:	f85d fb04 	ldr.w	pc, [sp], #4
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8004d68:	461a      	mov	r2, r3
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	f000 fae4 	bl	8005338 <xQueueGenericSend>
 8004d70:	2801      	cmp	r0, #1
 8004d72:	d0f5      	beq.n	8004d60 <osMutexRelease+0x30>
      return osErrorOS;
 8004d74:	20ff      	movs	r0, #255	@ 0xff
}
 8004d76:	b003      	add	sp, #12
 8004d78:	f85d fb04 	ldr.w	pc, [sp], #4

08004d7c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8004d7c:	b530      	push	{r4, r5, lr}
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8004d7e:	6844      	ldr	r4, [r0, #4]
{ 
 8004d80:	b083      	sub	sp, #12
 8004d82:	4608      	mov	r0, r1
  if (semaphore_def->controlblock != NULL){
 8004d84:	b194      	cbz	r4, 8004dac <osSemaphoreCreate+0x30>
    if (count == 1) {
 8004d86:	2901      	cmp	r1, #1
 8004d88:	d005      	beq.n	8004d96 <osSemaphoreCreate+0x1a>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 8004d8a:	4622      	mov	r2, r4
#else
    return NULL;
#endif
  }
#endif
}
 8004d8c:	b003      	add	sp, #12
 8004d8e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 8004d92:	f000 ba8f 	b.w	80052b4 <xQueueCreateCountingSemaphoreStatic>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8004d96:	2200      	movs	r2, #0
 8004d98:	2503      	movs	r5, #3
 8004d9a:	4623      	mov	r3, r4
 8004d9c:	9500      	str	r5, [sp, #0]
 8004d9e:	4611      	mov	r1, r2
 8004da0:	f000 fa14 	bl	80051cc <xQueueGenericCreateStatic>
 8004da4:	4605      	mov	r5, r0
}
 8004da6:	4628      	mov	r0, r5
 8004da8:	b003      	add	sp, #12
 8004daa:	bd30      	pop	{r4, r5, pc}
    if (count == 1) {
 8004dac:	2901      	cmp	r1, #1
 8004dae:	d004      	beq.n	8004dba <osSemaphoreCreate+0x3e>
}
 8004db0:	b003      	add	sp, #12
 8004db2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return xSemaphoreCreateCounting(count, count);
 8004db6:	f000 baa1 	b.w	80052fc <xQueueCreateCountingSemaphore>
      vSemaphoreCreateBinary(sema);
 8004dba:	2203      	movs	r2, #3
 8004dbc:	4621      	mov	r1, r4
 8004dbe:	f000 fa53 	bl	8005268 <xQueueGenericCreate>
 8004dc2:	4605      	mov	r5, r0
 8004dc4:	2800      	cmp	r0, #0
 8004dc6:	d0ee      	beq.n	8004da6 <osSemaphoreCreate+0x2a>
 8004dc8:	4623      	mov	r3, r4
 8004dca:	4622      	mov	r2, r4
 8004dcc:	4621      	mov	r1, r4
 8004dce:	f000 fab3 	bl	8005338 <xQueueGenericSend>
 8004dd2:	e7e8      	b.n	8004da6 <osSemaphoreCreate+0x2a>

08004dd4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8004dd4:	b500      	push	{lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004dd6:	2300      	movs	r3, #0
{
 8004dd8:	b083      	sub	sp, #12
  portBASE_TYPE taskWoken = pdFALSE;  
 8004dda:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 8004ddc:	b310      	cbz	r0, 8004e24 <osSemaphoreWait+0x50>
 8004dde:	f3ef 8205 	mrs	r2, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8004de2:	b1aa      	cbz	r2, 8004e10 <osSemaphoreWait+0x3c>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004de4:	aa01      	add	r2, sp, #4
 8004de6:	4619      	mov	r1, r3
 8004de8:	f000 fe0a 	bl	8005a00 <xQueueReceiveFromISR>
 8004dec:	2801      	cmp	r0, #1
 8004dee:	d115      	bne.n	8004e1c <osSemaphoreWait+0x48>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004df0:	9b01      	ldr	r3, [sp, #4]
 8004df2:	b18b      	cbz	r3, 8004e18 <osSemaphoreWait+0x44>
 8004df4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004df8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004dfc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004e00:	f3bf 8f4f 	dsb	sy
 8004e04:	f3bf 8f6f 	isb	sy
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 8004e08:	2000      	movs	r0, #0
}
 8004e0a:	b003      	add	sp, #12
 8004e0c:	f85d fb04 	ldr.w	pc, [sp], #4
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8004e10:	f000 fd1c 	bl	800584c <xQueueSemaphoreTake>
 8004e14:	2801      	cmp	r0, #1
 8004e16:	d101      	bne.n	8004e1c <osSemaphoreWait+0x48>
  return osOK;
 8004e18:	2000      	movs	r0, #0
 8004e1a:	e7f6      	b.n	8004e0a <osSemaphoreWait+0x36>
      return osErrorOS;
 8004e1c:	20ff      	movs	r0, #255	@ 0xff
}
 8004e1e:	b003      	add	sp, #12
 8004e20:	f85d fb04 	ldr.w	pc, [sp], #4
    return osErrorParameter;
 8004e24:	2080      	movs	r0, #128	@ 0x80
}
 8004e26:	b003      	add	sp, #12
 8004e28:	f85d fb04 	ldr.w	pc, [sp], #4

08004e2c <osSemaphoreRelease>:
* @brief Release a Semaphore token
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
 8004e2c:	b500      	push	{lr}
 8004e2e:	2300      	movs	r3, #0
 8004e30:	b083      	sub	sp, #12
 8004e32:	9301      	str	r3, [sp, #4]
 8004e34:	f3ef 8305 	mrs	r3, IPSR
 8004e38:	b1a3      	cbz	r3, 8004e64 <osSemaphoreRelease+0x38>
 8004e3a:	a901      	add	r1, sp, #4
 8004e3c:	f000 fbf2 	bl	8005624 <xQueueGiveFromISR>
 8004e40:	2801      	cmp	r0, #1
 8004e42:	d115      	bne.n	8004e70 <osSemaphoreRelease+0x44>
 8004e44:	9b01      	ldr	r3, [sp, #4]
 8004e46:	b14b      	cbz	r3, 8004e5c <osSemaphoreRelease+0x30>
 8004e48:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004e4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e50:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004e54:	f3bf 8f4f 	dsb	sy
 8004e58:	f3bf 8f6f 	isb	sy
 8004e5c:	2000      	movs	r0, #0
 8004e5e:	b003      	add	sp, #12
 8004e60:	f85d fb04 	ldr.w	pc, [sp], #4
 8004e64:	461a      	mov	r2, r3
 8004e66:	4619      	mov	r1, r3
 8004e68:	f000 fa66 	bl	8005338 <xQueueGenericSend>
 8004e6c:	2801      	cmp	r0, #1
 8004e6e:	d0f5      	beq.n	8004e5c <osSemaphoreRelease+0x30>
 8004e70:	20ff      	movs	r0, #255	@ 0xff
 8004e72:	b003      	add	sp, #12
 8004e74:	f85d fb04 	ldr.w	pc, [sp], #4

08004e78 <osSemaphoreDelete>:
* @brief Delete a Semaphore
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
 8004e78:	b510      	push	{r4, lr}
 8004e7a:	f3ef 8405 	mrs	r4, IPSR
 8004e7e:	b91c      	cbnz	r4, 8004e88 <osSemaphoreDelete+0x10>
 8004e80:	f000 fe3a 	bl	8005af8 <vQueueDelete>
 8004e84:	4620      	mov	r0, r4
 8004e86:	bd10      	pop	{r4, pc}
 8004e88:	2482      	movs	r4, #130	@ 0x82
 8004e8a:	4620      	mov	r0, r4
 8004e8c:	bd10      	pop	{r4, pc}
 8004e8e:	bf00      	nop

08004e90 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8004e90:	4603      	mov	r3, r0
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8004e92:	6882      	ldr	r2, [r0, #8]
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004e94:	6800      	ldr	r0, [r0, #0]
 8004e96:	6859      	ldr	r1, [r3, #4]
  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8004e98:	b14a      	cbz	r2, 8004eae <osMessageCreate+0x1e>
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	b13b      	cbz	r3, 8004eae <osMessageCreate+0x1e>
{
 8004e9e:	b510      	push	{r4, lr}
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004ea0:	2400      	movs	r4, #0
{
 8004ea2:	b082      	sub	sp, #8
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004ea4:	9400      	str	r4, [sp, #0]
 8004ea6:	f000 f991 	bl	80051cc <xQueueGenericCreateStatic>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004eaa:	b002      	add	sp, #8
 8004eac:	bd10      	pop	{r4, pc}
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f000 b9da 	b.w	8005268 <xQueueGenericCreate>

08004eb4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8004eb4:	b510      	push	{r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 8004eb6:	2400      	movs	r4, #0
{
 8004eb8:	b084      	sub	sp, #16
 8004eba:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8004ebc:	9403      	str	r4, [sp, #12]
 8004ebe:	f3ef 8305 	mrs	r3, IPSR
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
  }
  
  if (inHandlerMode()) {
 8004ec2:	b1ab      	cbz	r3, 8004ef0 <osMessagePut+0x3c>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8004ec4:	4623      	mov	r3, r4
 8004ec6:	aa03      	add	r2, sp, #12
 8004ec8:	a901      	add	r1, sp, #4
 8004eca:	f000 fb45 	bl	8005558 <xQueueGenericSendFromISR>
 8004ece:	2801      	cmp	r0, #1
 8004ed0:	d116      	bne.n	8004f00 <osMessagePut+0x4c>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004ed2:	9b03      	ldr	r3, [sp, #12]
 8004ed4:	b14b      	cbz	r3, 8004eea <osMessagePut+0x36>
 8004ed6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004eda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ede:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004ee2:	f3bf 8f4f 	dsb	sy
 8004ee6:	f3bf 8f6f 	isb	sy
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 8004eea:	2000      	movs	r0, #0
}
 8004eec:	b004      	add	sp, #16
 8004eee:	bd10      	pop	{r4, pc}
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8004ef0:	2a01      	cmp	r2, #1
 8004ef2:	a901      	add	r1, sp, #4
 8004ef4:	bf38      	it	cc
 8004ef6:	2201      	movcc	r2, #1
 8004ef8:	f000 fa1e 	bl	8005338 <xQueueGenericSend>
 8004efc:	2801      	cmp	r0, #1
 8004efe:	d0f4      	beq.n	8004eea <osMessagePut+0x36>
      return osErrorOS;
 8004f00:	20ff      	movs	r0, #255	@ 0xff
}
 8004f02:	b004      	add	sp, #16
 8004f04:	bd10      	pop	{r4, pc}
 8004f06:	bf00      	nop

08004f08 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8004f08:	b570      	push	{r4, r5, r6, lr}
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 8004f0a:	2600      	movs	r6, #0
{
 8004f0c:	b084      	sub	sp, #16
 8004f0e:	4604      	mov	r4, r0
  event.def.message_id = queue_id;
 8004f10:	e9cd 6102 	strd	r6, r1, [sp, #8]
  
  if (queue_id == NULL) {
 8004f14:	b391      	cbz	r1, 8004f7c <osMessageGet+0x74>
    event.status = osErrorParameter;
    return event;
  }
  
  taskWoken = pdFALSE;
 8004f16:	460b      	mov	r3, r1
 8004f18:	9600      	str	r6, [sp, #0]
 8004f1a:	f3ef 8105 	mrs	r1, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8004f1e:	b999      	cbnz	r1, 8004f48 <osMessageGet+0x40>
      event.status = osOK;
    }
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8004f20:	a902      	add	r1, sp, #8
 8004f22:	4618      	mov	r0, r3
 8004f24:	4615      	mov	r5, r2
 8004f26:	f000 fbd3 	bl	80056d0 <xQueueReceive>
 8004f2a:	2801      	cmp	r0, #1
 8004f2c:	d029      	beq.n	8004f82 <osMessageGet+0x7a>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8004f2e:	1e2a      	subs	r2, r5, #0
 8004f30:	bf18      	it	ne
 8004f32:	2201      	movne	r2, #1
 8004f34:	0192      	lsls	r2, r2, #6
 8004f36:	9201      	str	r2, [sp, #4]
    return event;
 8004f38:	ab04      	add	r3, sp, #16
 8004f3a:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8004f3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
  }
  
  return event;
}
 8004f42:	4620      	mov	r0, r4
 8004f44:	b004      	add	sp, #16
 8004f46:	bd70      	pop	{r4, r5, r6, pc}
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8004f48:	4618      	mov	r0, r3
 8004f4a:	466a      	mov	r2, sp
 8004f4c:	a902      	add	r1, sp, #8
 8004f4e:	f000 fd57 	bl	8005a00 <xQueueReceiveFromISR>
 8004f52:	f1a0 0001 	sub.w	r0, r0, #1
    portEND_SWITCHING_ISR(taskWoken);
 8004f56:	9b00      	ldr	r3, [sp, #0]
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8004f58:	fab0 f080 	clz	r0, r0
 8004f5c:	0940      	lsrs	r0, r0, #5
 8004f5e:	0100      	lsls	r0, r0, #4
 8004f60:	9001      	str	r0, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d0e8      	beq.n	8004f38 <osMessageGet+0x30>
 8004f66:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004f6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f6e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004f72:	f3bf 8f4f 	dsb	sy
 8004f76:	f3bf 8f6f 	isb	sy
 8004f7a:	e7dd      	b.n	8004f38 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8004f7c:	2380      	movs	r3, #128	@ 0x80
 8004f7e:	9301      	str	r3, [sp, #4]
    return event;
 8004f80:	e7da      	b.n	8004f38 <osMessageGet+0x30>
      event.status = osEventMessage;
 8004f82:	2310      	movs	r3, #16
 8004f84:	9301      	str	r3, [sp, #4]
 8004f86:	e7d7      	b.n	8004f38 <osMessageGet+0x30>

08004f88 <osMessageWaiting>:
 8004f88:	f3ef 8305 	mrs	r3, IPSR
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
  if (inHandlerMode()) {
 8004f8c:	b10b      	cbz	r3, 8004f92 <osMessageWaiting+0xa>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8004f8e:	f000 bda7 	b.w	8005ae0 <uxQueueMessagesWaitingFromISR>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8004f92:	f000 bd91 	b.w	8005ab8 <uxQueueMessagesWaiting>
 8004f96:	bf00      	nop

08004f98 <osMessageDelete>:
/**
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
 8004f98:	b510      	push	{r4, lr}
 8004f9a:	f3ef 8405 	mrs	r4, IPSR
 8004f9e:	b91c      	cbnz	r4, 8004fa8 <osMessageDelete+0x10>
 8004fa0:	f000 fdaa 	bl	8005af8 <vQueueDelete>
 8004fa4:	4620      	mov	r0, r4
 8004fa6:	bd10      	pop	{r4, pc}
 8004fa8:	2482      	movs	r4, #130	@ 0x82
 8004faa:	4620      	mov	r0, r4
 8004fac:	bd10      	pop	{r4, pc}
 8004fae:	bf00      	nop

08004fb0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fb0:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004fb4:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004fb8:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004fba:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004fbc:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fbe:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fc0:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop

08004fc8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004fcc:	4770      	bx	lr
 8004fce:	bf00      	nop

08004fd0 <vListInsertEnd>:
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8004fd0:	6803      	ldr	r3, [r0, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004fd2:	6842      	ldr	r2, [r0, #4]
	( pxList->uxNumberOfItems )++;
 8004fd4:	3301      	adds	r3, #1
{
 8004fd6:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004fd8:	6894      	ldr	r4, [r2, #8]
 8004fda:	e9c1 2401 	strd	r2, r4, [r1, #4]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004fde:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004fe0:	6091      	str	r1, [r2, #8]
}
 8004fe2:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 8004fe6:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8004fe8:	6003      	str	r3, [r0, #0]
}
 8004fea:	4770      	bx	lr

08004fec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004fec:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004fee:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004ff0:	1c6b      	adds	r3, r5, #1
 8004ff2:	d010      	beq.n	8005016 <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004ff4:	f100 0308 	add.w	r3, r0, #8
 8004ff8:	461c      	mov	r4, r3
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	42aa      	cmp	r2, r5
 8005000:	d9fa      	bls.n	8004ff8 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8005002:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8005004:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8005006:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005008:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800500a:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800500c:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 800500e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8005010:	6002      	str	r2, [r0, #0]
}
 8005012:	bc30      	pop	{r4, r5}
 8005014:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8005016:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8005018:	6863      	ldr	r3, [r4, #4]
 800501a:	e7f2      	b.n	8005002 <vListInsert+0x16>

0800501c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800501c:	6903      	ldr	r3, [r0, #16]
{
 800501e:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005020:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005022:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
	if( pxList->pxIndex == pxItemToRemove )
 8005026:	4284      	cmp	r4, r0

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
 8005028:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800502c:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800502e:	6051      	str	r1, [r2, #4]
	pxItemToRemove->pxContainer = NULL;
 8005030:	f04f 0100 	mov.w	r1, #0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005034:	bf08      	it	eq
 8005036:	605a      	streq	r2, [r3, #4]
	( pxList->uxNumberOfItems )--;
 8005038:	681a      	ldr	r2, [r3, #0]
	pxItemToRemove->pxContainer = NULL;
 800503a:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800503c:	3a01      	subs	r2, #1
 800503e:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 8005040:	6818      	ldr	r0, [r3, #0]
}
 8005042:	4770      	bx	lr

08005044 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005044:	b570      	push	{r4, r5, r6, lr}
 8005046:	4616      	mov	r6, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005048:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 800504a:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800504c:	6b85      	ldr	r5, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800504e:	b92a      	cbnz	r2, 800505c <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005050:	6806      	ldr	r6, [r0, #0]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005052:	3501      	adds	r5, #1
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005054:	b34e      	cbz	r6, 80050aa <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8005056:	4610      	mov	r0, r2
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005058:	63a5      	str	r5, [r4, #56]	@ 0x38

	return xReturn;
}
 800505a:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800505c:	b97e      	cbnz	r6, 800507e <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800505e:	6840      	ldr	r0, [r0, #4]
 8005060:	f00c fc4d 	bl	80118fe <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005064:	6863      	ldr	r3, [r4, #4]
 8005066:	6c21      	ldr	r1, [r4, #64]	@ 0x40
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005068:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800506a:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800506c:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800506e:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005070:	bf24      	itt	cs
 8005072:	6823      	ldrcs	r3, [r4, #0]
 8005074:	6063      	strcs	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005076:	3501      	adds	r5, #1
BaseType_t xReturn = pdFALSE;
 8005078:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800507a:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 800507c:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800507e:	68c0      	ldr	r0, [r0, #12]
 8005080:	f00c fc3d 	bl	80118fe <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005084:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8005086:	68e3      	ldr	r3, [r4, #12]
 8005088:	4251      	negs	r1, r2
 800508a:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800508c:	6822      	ldr	r2, [r4, #0]
 800508e:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005090:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005092:	d202      	bcs.n	800509a <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005094:	68a3      	ldr	r3, [r4, #8]
 8005096:	440b      	add	r3, r1
 8005098:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800509a:	2e02      	cmp	r6, #2
 800509c:	d1eb      	bne.n	8005076 <prvCopyDataToQueue+0x32>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800509e:	2d01      	cmp	r5, #1
BaseType_t xReturn = pdFALSE;
 80050a0:	f04f 0000 	mov.w	r0, #0
 80050a4:	bf38      	it	cc
 80050a6:	2501      	movcc	r5, #1
 80050a8:	e7d6      	b.n	8005058 <prvCopyDataToQueue+0x14>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80050aa:	6880      	ldr	r0, [r0, #8]
 80050ac:	f001 fa66 	bl	800657c <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80050b0:	60a6      	str	r6, [r4, #8]
 80050b2:	e7d1      	b.n	8005058 <prvCopyDataToQueue+0x14>

080050b4 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80050b4:	b570      	push	{r4, r5, r6, lr}
 80050b6:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80050b8:	f001 fb8c 	bl	80067d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80050bc:	f895 3045 	ldrb.w	r3, [r5, #69]	@ 0x45
 80050c0:	b25c      	sxtb	r4, r3

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80050c2:	2c00      	cmp	r4, #0
 80050c4:	dd14      	ble.n	80050f0 <prvUnlockQueue+0x3c>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050c6:	f105 0624 	add.w	r6, r5, #36	@ 0x24
 80050ca:	e003      	b.n	80050d4 <prvUnlockQueue+0x20>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80050cc:	1e63      	subs	r3, r4, #1
 80050ce:	b2da      	uxtb	r2, r3
 80050d0:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80050d2:	b16a      	cbz	r2, 80050f0 <prvUnlockQueue+0x3c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050d4:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050d6:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050d8:	b153      	cbz	r3, 80050f0 <prvUnlockQueue+0x3c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050da:	f001 f95b 	bl	8006394 <xTaskRemoveFromEventList>
 80050de:	2800      	cmp	r0, #0
 80050e0:	d0f4      	beq.n	80050cc <prvUnlockQueue+0x18>
						vTaskMissedYield();
 80050e2:	f001 f9eb 	bl	80064bc <vTaskMissedYield>
			--cTxLock;
 80050e6:	1e63      	subs	r3, r4, #1
 80050e8:	b2da      	uxtb	r2, r3
 80050ea:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80050ec:	2a00      	cmp	r2, #0
 80050ee:	d1f1      	bne.n	80050d4 <prvUnlockQueue+0x20>
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80050f0:	23ff      	movs	r3, #255	@ 0xff
 80050f2:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80050f6:	f001 fb8f 	bl	8006818 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80050fa:	f001 fb6b 	bl	80067d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80050fe:	f895 3044 	ldrb.w	r3, [r5, #68]	@ 0x44
 8005102:	b25c      	sxtb	r4, r3

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005104:	2c00      	cmp	r4, #0
 8005106:	dd14      	ble.n	8005132 <prvUnlockQueue+0x7e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005108:	f105 0610 	add.w	r6, r5, #16
 800510c:	e003      	b.n	8005116 <prvUnlockQueue+0x62>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800510e:	1e63      	subs	r3, r4, #1
 8005110:	b2da      	uxtb	r2, r3
 8005112:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005114:	b16a      	cbz	r2, 8005132 <prvUnlockQueue+0x7e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005116:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005118:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800511a:	b153      	cbz	r3, 8005132 <prvUnlockQueue+0x7e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800511c:	f001 f93a 	bl	8006394 <xTaskRemoveFromEventList>
 8005120:	2800      	cmp	r0, #0
 8005122:	d0f4      	beq.n	800510e <prvUnlockQueue+0x5a>
					vTaskMissedYield();
 8005124:	f001 f9ca 	bl	80064bc <vTaskMissedYield>
				--cRxLock;
 8005128:	1e63      	subs	r3, r4, #1
 800512a:	b2da      	uxtb	r2, r3
 800512c:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800512e:	2a00      	cmp	r2, #0
 8005130:	d1f1      	bne.n	8005116 <prvUnlockQueue+0x62>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005132:	23ff      	movs	r3, #255	@ 0xff
 8005134:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
}
 8005138:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800513c:	f001 bb6c 	b.w	8006818 <vPortExitCritical>

08005140 <xQueueGenericReset>:
{
 8005140:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8005142:	b1e0      	cbz	r0, 800517e <xQueueGenericReset+0x3e>
 8005144:	4604      	mov	r4, r0
 8005146:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8005148:	f001 fb44 	bl	80067d4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800514c:	6822      	ldr	r2, [r4, #0]
 800514e:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005152:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005154:	fb01 f303 	mul.w	r3, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005158:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800515a:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800515c:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800515e:	60a3      	str	r3, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005160:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8005162:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005164:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005166:	63a1      	str	r1, [r4, #56]	@ 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8005168:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800516c:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 8005170:	b975      	cbnz	r5, 8005190 <xQueueGenericReset+0x50>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005172:	6923      	ldr	r3, [r4, #16]
 8005174:	b9c3      	cbnz	r3, 80051a8 <xQueueGenericReset+0x68>
	taskEXIT_CRITICAL();
 8005176:	f001 fb4f 	bl	8006818 <vPortExitCritical>
}
 800517a:	2001      	movs	r0, #1
 800517c:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800517e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005182:	f383 8811 	msr	BASEPRI, r3
 8005186:	f3bf 8f6f 	isb	sy
 800518a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800518e:	e7fe      	b.n	800518e <xQueueGenericReset+0x4e>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005190:	f104 0010 	add.w	r0, r4, #16
 8005194:	f7ff ff0c 	bl	8004fb0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005198:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800519c:	f7ff ff08 	bl	8004fb0 <vListInitialise>
	taskEXIT_CRITICAL();
 80051a0:	f001 fb3a 	bl	8006818 <vPortExitCritical>
}
 80051a4:	2001      	movs	r0, #1
 80051a6:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051a8:	f104 0010 	add.w	r0, r4, #16
 80051ac:	f001 f8f2 	bl	8006394 <xTaskRemoveFromEventList>
 80051b0:	2800      	cmp	r0, #0
 80051b2:	d0e0      	beq.n	8005176 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 80051b4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80051b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051bc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80051c0:	f3bf 8f4f 	dsb	sy
 80051c4:	f3bf 8f6f 	isb	sy
 80051c8:	e7d5      	b.n	8005176 <xQueueGenericReset+0x36>
 80051ca:	bf00      	nop

080051cc <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80051cc:	b940      	cbnz	r0, 80051e0 <xQueueGenericCreateStatic+0x14>
 80051ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051d2:	f383 8811 	msr	BASEPRI, r3
 80051d6:	f3bf 8f6f 	isb	sy
 80051da:	f3bf 8f4f 	dsb	sy
 80051de:	e7fe      	b.n	80051de <xQueueGenericCreateStatic+0x12>
		configASSERT( pxStaticQueue != NULL );
 80051e0:	b16b      	cbz	r3, 80051fe <xQueueGenericCreateStatic+0x32>
	{
 80051e2:	b510      	push	{r4, lr}
 80051e4:	460c      	mov	r4, r1
 80051e6:	b084      	sub	sp, #16
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80051e8:	b30a      	cbz	r2, 800522e <xQueueGenericCreateStatic+0x62>
 80051ea:	b989      	cbnz	r1, 8005210 <xQueueGenericCreateStatic+0x44>
 80051ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051f0:	f383 8811 	msr	BASEPRI, r3
 80051f4:	f3bf 8f6f 	isb	sy
 80051f8:	f3bf 8f4f 	dsb	sy
 80051fc:	e7fe      	b.n	80051fc <xQueueGenericCreateStatic+0x30>
 80051fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005202:	f383 8811 	msr	BASEPRI, r3
 8005206:	f3bf 8f6f 	isb	sy
 800520a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 800520e:	e7fe      	b.n	800520e <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005210:	b16a      	cbz	r2, 800522e <xQueueGenericCreateStatic+0x62>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005212:	2148      	movs	r1, #72	@ 0x48
 8005214:	9103      	str	r1, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005216:	9903      	ldr	r1, [sp, #12]
 8005218:	2948      	cmp	r1, #72	@ 0x48
 800521a:	d013      	beq.n	8005244 <xQueueGenericCreateStatic+0x78>
 800521c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005220:	f383 8811 	msr	BASEPRI, r3
 8005224:	f3bf 8f6f 	isb	sy
 8005228:	f3bf 8f4f 	dsb	sy
 800522c:	e7fe      	b.n	800522c <xQueueGenericCreateStatic+0x60>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800522e:	2c00      	cmp	r4, #0
 8005230:	d0ef      	beq.n	8005212 <xQueueGenericCreateStatic+0x46>
 8005232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005236:	f383 8811 	msr	BASEPRI, r3
 800523a:	f3bf 8f6f 	isb	sy
 800523e:	f3bf 8f4f 	dsb	sy
 8005242:	e7fe      	b.n	8005242 <xQueueGenericCreateStatic+0x76>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005244:	2c00      	cmp	r4, #0
 8005246:	bf08      	it	eq
 8005248:	461a      	moveq	r2, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800524a:	2101      	movs	r1, #1
	pxNewQueue->uxLength = uxQueueLength;
 800524c:	63d8      	str	r0, [r3, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800524e:	4618      	mov	r0, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005250:	f883 1046 	strb.w	r1, [r3, #70]	@ 0x46
 8005254:	601a      	str	r2, [r3, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8005256:	641c      	str	r4, [r3, #64]	@ 0x40
 8005258:	9301      	str	r3, [sp, #4]
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800525a:	9a03      	ldr	r2, [sp, #12]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800525c:	f7ff ff70 	bl	8005140 <xQueueGenericReset>
	}
 8005260:	9b01      	ldr	r3, [sp, #4]
 8005262:	4618      	mov	r0, r3
 8005264:	b004      	add	sp, #16
 8005266:	bd10      	pop	{r4, pc}

08005268 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005268:	b940      	cbnz	r0, 800527c <xQueueGenericCreate+0x14>
 800526a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800526e:	f383 8811 	msr	BASEPRI, r3
 8005272:	f3bf 8f6f 	isb	sy
 8005276:	f3bf 8f4f 	dsb	sy
 800527a:	e7fe      	b.n	800527a <xQueueGenericCreate+0x12>
	{
 800527c:	b570      	push	{r4, r5, r6, lr}
 800527e:	4604      	mov	r4, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005280:	fb01 f000 	mul.w	r0, r1, r0
 8005284:	460d      	mov	r5, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005286:	3048      	adds	r0, #72	@ 0x48
 8005288:	f001 fc18 	bl	8006abc <pvPortMalloc>
		if( pxNewQueue != NULL )
 800528c:	4606      	mov	r6, r0
 800528e:	b160      	cbz	r0, 80052aa <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005290:	2300      	movs	r3, #0
 8005292:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8005296:	b155      	cbz	r5, 80052ae <xQueueGenericCreate+0x46>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005298:	f100 0348 	add.w	r3, r0, #72	@ 0x48
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800529c:	2101      	movs	r1, #1
 800529e:	4630      	mov	r0, r6
 80052a0:	6033      	str	r3, [r6, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80052a2:	63f4      	str	r4, [r6, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80052a4:	6435      	str	r5, [r6, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80052a6:	f7ff ff4b 	bl	8005140 <xQueueGenericReset>
	}
 80052aa:	4630      	mov	r0, r6
 80052ac:	bd70      	pop	{r4, r5, r6, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80052ae:	4603      	mov	r3, r0
 80052b0:	e7f4      	b.n	800529c <xQueueGenericCreate+0x34>
 80052b2:	bf00      	nop

080052b4 <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 80052b4:	b940      	cbnz	r0, 80052c8 <xQueueCreateCountingSemaphoreStatic+0x14>
 80052b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ba:	f383 8811 	msr	BASEPRI, r3
 80052be:	f3bf 8f6f 	isb	sy
 80052c2:	f3bf 8f4f 	dsb	sy
 80052c6:	e7fe      	b.n	80052c6 <xQueueCreateCountingSemaphoreStatic+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 80052c8:	4288      	cmp	r0, r1
	{
 80052ca:	b510      	push	{r4, lr}
 80052cc:	460c      	mov	r4, r1
 80052ce:	b082      	sub	sp, #8
		configASSERT( uxInitialCount <= uxMaxCount );
 80052d0:	d208      	bcs.n	80052e4 <xQueueCreateCountingSemaphoreStatic+0x30>
 80052d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052d6:	f383 8811 	msr	BASEPRI, r3
 80052da:	f3bf 8f6f 	isb	sy
 80052de:	f3bf 8f4f 	dsb	sy
 80052e2:	e7fe      	b.n	80052e2 <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80052e4:	2102      	movs	r1, #2
 80052e6:	4613      	mov	r3, r2
 80052e8:	2200      	movs	r2, #0
 80052ea:	9100      	str	r1, [sp, #0]
 80052ec:	4611      	mov	r1, r2
 80052ee:	f7ff ff6d 	bl	80051cc <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 80052f2:	b100      	cbz	r0, 80052f6 <xQueueCreateCountingSemaphoreStatic+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80052f4:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 80052f6:	b002      	add	sp, #8
 80052f8:	bd10      	pop	{r4, pc}
 80052fa:	bf00      	nop

080052fc <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 80052fc:	b940      	cbnz	r0, 8005310 <xQueueCreateCountingSemaphore+0x14>
 80052fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005302:	f383 8811 	msr	BASEPRI, r3
 8005306:	f3bf 8f6f 	isb	sy
 800530a:	f3bf 8f4f 	dsb	sy
 800530e:	e7fe      	b.n	800530e <xQueueCreateCountingSemaphore+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005310:	4288      	cmp	r0, r1
	{
 8005312:	b510      	push	{r4, lr}
 8005314:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 8005316:	d208      	bcs.n	800532a <xQueueCreateCountingSemaphore+0x2e>
 8005318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800531c:	f383 8811 	msr	BASEPRI, r3
 8005320:	f3bf 8f6f 	isb	sy
 8005324:	f3bf 8f4f 	dsb	sy
 8005328:	e7fe      	b.n	8005328 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800532a:	2202      	movs	r2, #2
 800532c:	2100      	movs	r1, #0
 800532e:	f7ff ff9b 	bl	8005268 <xQueueGenericCreate>
		if( xHandle != NULL )
 8005332:	b100      	cbz	r0, 8005336 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005334:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 8005336:	bd10      	pop	{r4, pc}

08005338 <xQueueGenericSend>:
{
 8005338:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800533c:	b085      	sub	sp, #20
 800533e:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8005340:	2800      	cmp	r0, #0
 8005342:	d07e      	beq.n	8005442 <xQueueGenericSend+0x10a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005344:	460f      	mov	r7, r1
 8005346:	4604      	mov	r4, r0
 8005348:	461e      	mov	r6, r3
 800534a:	2900      	cmp	r1, #0
 800534c:	d069      	beq.n	8005422 <xQueueGenericSend+0xea>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800534e:	2e02      	cmp	r6, #2
 8005350:	d10b      	bne.n	800536a <xQueueGenericSend+0x32>
 8005352:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005354:	2b01      	cmp	r3, #1
 8005356:	d008      	beq.n	800536a <xQueueGenericSend+0x32>
 8005358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800535c:	f383 8811 	msr	BASEPRI, r3
 8005360:	f3bf 8f6f 	isb	sy
 8005364:	f3bf 8f4f 	dsb	sy
 8005368:	e7fe      	b.n	8005368 <xQueueGenericSend+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800536a:	f001 f8ad 	bl	80064c8 <xTaskGetSchedulerState>
 800536e:	2800      	cmp	r0, #0
 8005370:	d070      	beq.n	8005454 <xQueueGenericSend+0x11c>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005372:	f1a6 0802 	sub.w	r8, r6, #2
 8005376:	2500      	movs	r5, #0
 8005378:	fab8 f888 	clz	r8, r8
		prvLockQueue( pxQueue );
 800537c:	46a9      	mov	r9, r5
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800537e:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8005382:	e007      	b.n	8005394 <xQueueGenericSend+0x5c>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8005384:	f001 fa48 	bl	8006818 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8005388:	4620      	mov	r0, r4
 800538a:	f7ff fe93 	bl	80050b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800538e:	f000 ff67 	bl	8006260 <xTaskResumeAll>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005392:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 8005394:	f001 fa1e 	bl	80067d4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005398:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800539a:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800539c:	4290      	cmp	r0, r2
 800539e:	d365      	bcc.n	800546c <xQueueGenericSend+0x134>
 80053a0:	f1b8 0f00 	cmp.w	r8, #0
 80053a4:	d162      	bne.n	800546c <xQueueGenericSend+0x134>
				if( xTicksToWait == ( TickType_t ) 0 )
 80053a6:	9b01      	ldr	r3, [sp, #4]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d077      	beq.n	800549c <xQueueGenericSend+0x164>
				else if( xEntryTimeSet == pdFALSE )
 80053ac:	2d00      	cmp	r5, #0
 80053ae:	d044      	beq.n	800543a <xQueueGenericSend+0x102>
		taskEXIT_CRITICAL();
 80053b0:	f001 fa32 	bl	8006818 <vPortExitCritical>
		vTaskSuspendAll();
 80053b4:	f000 fdf8 	bl	8005fa8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80053b8:	f001 fa0c 	bl	80067d4 <vPortEnterCritical>
 80053bc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80053c0:	2bff      	cmp	r3, #255	@ 0xff
 80053c2:	d101      	bne.n	80053c8 <xQueueGenericSend+0x90>
 80053c4:	f884 9044 	strb.w	r9, [r4, #68]	@ 0x44
 80053c8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80053cc:	2bff      	cmp	r3, #255	@ 0xff
 80053ce:	d101      	bne.n	80053d4 <xQueueGenericSend+0x9c>
 80053d0:	f884 9045 	strb.w	r9, [r4, #69]	@ 0x45
 80053d4:	f001 fa20 	bl	8006818 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80053d8:	a901      	add	r1, sp, #4
 80053da:	a802      	add	r0, sp, #8
 80053dc:	f001 f82c 	bl	8006438 <xTaskCheckForTimeOut>
 80053e0:	2800      	cmp	r0, #0
 80053e2:	d15f      	bne.n	80054a4 <xQueueGenericSend+0x16c>
	taskENTER_CRITICAL();
 80053e4:	f001 f9f6 	bl	80067d4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80053e8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80053ea:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d1c9      	bne.n	8005384 <xQueueGenericSend+0x4c>
	taskEXIT_CRITICAL();
 80053f0:	f001 fa12 	bl	8006818 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80053f4:	9901      	ldr	r1, [sp, #4]
 80053f6:	f104 0010 	add.w	r0, r4, #16
 80053fa:	f000 ffb1 	bl	8006360 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80053fe:	4620      	mov	r0, r4
 8005400:	f7ff fe58 	bl	80050b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005404:	f000 ff2c 	bl	8006260 <xTaskResumeAll>
 8005408:	2800      	cmp	r0, #0
 800540a:	d1c2      	bne.n	8005392 <xQueueGenericSend+0x5a>
					portYIELD_WITHIN_API();
 800540c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005410:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005414:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005418:	f3bf 8f4f 	dsb	sy
 800541c:	f3bf 8f6f 	isb	sy
 8005420:	e7b7      	b.n	8005392 <xQueueGenericSend+0x5a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005422:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8005424:	2b00      	cmp	r3, #0
 8005426:	d092      	beq.n	800534e <xQueueGenericSend+0x16>
 8005428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800542c:	f383 8811 	msr	BASEPRI, r3
 8005430:	f3bf 8f6f 	isb	sy
 8005434:	f3bf 8f4f 	dsb	sy
 8005438:	e7fe      	b.n	8005438 <xQueueGenericSend+0x100>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800543a:	a802      	add	r0, sp, #8
 800543c:	f000 fff0 	bl	8006420 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005440:	e7b6      	b.n	80053b0 <xQueueGenericSend+0x78>
 8005442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005446:	f383 8811 	msr	BASEPRI, r3
 800544a:	f3bf 8f6f 	isb	sy
 800544e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8005452:	e7fe      	b.n	8005452 <xQueueGenericSend+0x11a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005454:	9b01      	ldr	r3, [sp, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d08b      	beq.n	8005372 <xQueueGenericSend+0x3a>
 800545a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800545e:	f383 8811 	msr	BASEPRI, r3
 8005462:	f3bf 8f6f 	isb	sy
 8005466:	f3bf 8f4f 	dsb	sy
 800546a:	e7fe      	b.n	800546a <xQueueGenericSend+0x132>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800546c:	4632      	mov	r2, r6
 800546e:	4639      	mov	r1, r7
 8005470:	4620      	mov	r0, r4
 8005472:	f7ff fde7 	bl	8005044 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005476:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005478:	b9d3      	cbnz	r3, 80054b0 <xQueueGenericSend+0x178>
					else if( xYieldRequired != pdFALSE )
 800547a:	b148      	cbz	r0, 8005490 <xQueueGenericSend+0x158>
						queueYIELD_IF_USING_PREEMPTION();
 800547c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005480:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005484:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005488:	f3bf 8f4f 	dsb	sy
 800548c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8005490:	f001 f9c2 	bl	8006818 <vPortExitCritical>
				return pdPASS;
 8005494:	2001      	movs	r0, #1
}
 8005496:	b005      	add	sp, #20
 8005498:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					taskEXIT_CRITICAL();
 800549c:	f001 f9bc 	bl	8006818 <vPortExitCritical>
					return errQUEUE_FULL;
 80054a0:	2000      	movs	r0, #0
 80054a2:	e7f8      	b.n	8005496 <xQueueGenericSend+0x15e>
			prvUnlockQueue( pxQueue );
 80054a4:	4620      	mov	r0, r4
 80054a6:	f7ff fe05 	bl	80050b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80054aa:	f000 fed9 	bl	8006260 <xTaskResumeAll>
			return errQUEUE_FULL;
 80054ae:	e7f7      	b.n	80054a0 <xQueueGenericSend+0x168>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054b0:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80054b4:	f000 ff6e 	bl	8006394 <xTaskRemoveFromEventList>
 80054b8:	2800      	cmp	r0, #0
 80054ba:	d0e9      	beq.n	8005490 <xQueueGenericSend+0x158>
 80054bc:	e7de      	b.n	800547c <xQueueGenericSend+0x144>
 80054be:	bf00      	nop

080054c0 <xQueueCreateMutexStatic>:
		configASSERT( pxStaticQueue != NULL );
 80054c0:	b179      	cbz	r1, 80054e2 <xQueueCreateMutexStatic+0x22>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80054c2:	2348      	movs	r3, #72	@ 0x48
	{
 80054c4:	b530      	push	{r4, r5, lr}
 80054c6:	b083      	sub	sp, #12
			volatile size_t xSize = sizeof( StaticQueue_t );
 80054c8:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 80054ca:	9b01      	ldr	r3, [sp, #4]
 80054cc:	2b48      	cmp	r3, #72	@ 0x48
 80054ce:	d011      	beq.n	80054f4 <xQueueCreateMutexStatic+0x34>
 80054d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054d4:	f383 8811 	msr	BASEPRI, r3
 80054d8:	f3bf 8f6f 	isb	sy
 80054dc:	f3bf 8f4f 	dsb	sy
 80054e0:	e7fe      	b.n	80054e0 <xQueueCreateMutexStatic+0x20>
 80054e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054e6:	f383 8811 	msr	BASEPRI, r3
 80054ea:	f3bf 8f6f 	isb	sy
 80054ee:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 80054f2:	e7fe      	b.n	80054f2 <xQueueCreateMutexStatic+0x32>
 80054f4:	460c      	mov	r4, r1
	pxNewQueue->uxLength = uxQueueLength;
 80054f6:	2500      	movs	r5, #0
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80054f8:	2101      	movs	r1, #1
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80054fa:	9a01      	ldr	r2, [sp, #4]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80054fc:	4620      	mov	r0, r4
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80054fe:	6024      	str	r4, [r4, #0]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005500:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
	pxNewQueue->uxLength = uxQueueLength;
 8005504:	e9c4 150f 	strd	r1, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005508:	f7ff fe1a 	bl	8005140 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800550c:	462b      	mov	r3, r5
 800550e:	462a      	mov	r2, r5
 8005510:	4629      	mov	r1, r5
 8005512:	4620      	mov	r0, r4
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005514:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005516:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005518:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800551a:	f7ff ff0d 	bl	8005338 <xQueueGenericSend>
	}
 800551e:	4620      	mov	r0, r4
 8005520:	b003      	add	sp, #12
 8005522:	bd30      	pop	{r4, r5, pc}

08005524 <xQueueCreateMutex>:
	{
 8005524:	b538      	push	{r3, r4, r5, lr}
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005526:	2048      	movs	r0, #72	@ 0x48
 8005528:	f001 fac8 	bl	8006abc <pvPortMalloc>
		if( pxNewQueue != NULL )
 800552c:	4604      	mov	r4, r0
 800552e:	b188      	cbz	r0, 8005554 <xQueueCreateMutex+0x30>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005530:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 8005532:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005534:	6020      	str	r0, [r4, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005536:	f880 5046 	strb.w	r5, [r0, #70]	@ 0x46
	pxNewQueue->uxLength = uxQueueLength;
 800553a:	e9c0 150f 	strd	r1, r5, [r0, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800553e:	f7ff fdff 	bl	8005140 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005542:	462b      	mov	r3, r5
 8005544:	462a      	mov	r2, r5
 8005546:	4629      	mov	r1, r5
 8005548:	4620      	mov	r0, r4
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800554a:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800554c:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800554e:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005550:	f7ff fef2 	bl	8005338 <xQueueGenericSend>
	}
 8005554:	4620      	mov	r0, r4
 8005556:	bd38      	pop	{r3, r4, r5, pc}

08005558 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
 8005558:	2800      	cmp	r0, #0
 800555a:	d04b      	beq.n	80055f4 <xQueueGenericSendFromISR+0x9c>
{
 800555c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005560:	460e      	mov	r6, r1
 8005562:	4604      	mov	r4, r0
 8005564:	4617      	mov	r7, r2
 8005566:	461d      	mov	r5, r3
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005568:	b339      	cbz	r1, 80055ba <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800556a:	2d02      	cmp	r5, #2
 800556c:	d10b      	bne.n	8005586 <xQueueGenericSendFromISR+0x2e>
 800556e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005570:	2b01      	cmp	r3, #1
 8005572:	d008      	beq.n	8005586 <xQueueGenericSendFromISR+0x2e>
 8005574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005578:	f383 8811 	msr	BASEPRI, r3
 800557c:	f3bf 8f6f 	isb	sy
 8005580:	f3bf 8f4f 	dsb	sy
 8005584:	e7fe      	b.n	8005584 <xQueueGenericSendFromISR+0x2c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005586:	f001 fa41 	bl	8006a0c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800558a:	f3ef 8811 	mrs	r8, BASEPRI
 800558e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005592:	f383 8811 	msr	BASEPRI, r3
 8005596:	f3bf 8f6f 	isb	sy
 800559a:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800559e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80055a0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d315      	bcc.n	80055d2 <xQueueGenericSendFromISR+0x7a>
 80055a6:	f1a5 0002 	sub.w	r0, r5, #2
 80055aa:	fab0 f080 	clz	r0, r0
 80055ae:	0940      	lsrs	r0, r0, #5
 80055b0:	b978      	cbnz	r0, 80055d2 <xQueueGenericSendFromISR+0x7a>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80055b2:	f388 8811 	msr	BASEPRI, r8
}
 80055b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055ba:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d0d4      	beq.n	800556a <xQueueGenericSendFromISR+0x12>
	__asm volatile
 80055c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055c4:	f383 8811 	msr	BASEPRI, r3
 80055c8:	f3bf 8f6f 	isb	sy
 80055cc:	f3bf 8f4f 	dsb	sy
 80055d0:	e7fe      	b.n	80055d0 <xQueueGenericSendFromISR+0x78>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80055d2:	462a      	mov	r2, r5
			const int8_t cTxLock = pxQueue->cTxLock;
 80055d4:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80055d8:	4631      	mov	r1, r6
 80055da:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 80055dc:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055de:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80055e0:	f7ff fd30 	bl	8005044 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80055e4:	1c6b      	adds	r3, r5, #1
 80055e6:	d00e      	beq.n	8005606 <xQueueGenericSendFromISR+0xae>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80055e8:	1c6b      	adds	r3, r5, #1
 80055ea:	b25b      	sxtb	r3, r3
 80055ec:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
			xReturn = pdPASS;
 80055f0:	2001      	movs	r0, #1
 80055f2:	e7de      	b.n	80055b2 <xQueueGenericSendFromISR+0x5a>
 80055f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055f8:	f383 8811 	msr	BASEPRI, r3
 80055fc:	f3bf 8f6f 	isb	sy
 8005600:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8005604:	e7fe      	b.n	8005604 <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005606:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005608:	2b00      	cmp	r3, #0
 800560a:	d0f1      	beq.n	80055f0 <xQueueGenericSendFromISR+0x98>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800560c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8005610:	f000 fec0 	bl	8006394 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 8005614:	2800      	cmp	r0, #0
 8005616:	d0eb      	beq.n	80055f0 <xQueueGenericSendFromISR+0x98>
 8005618:	2f00      	cmp	r7, #0
 800561a:	d0e9      	beq.n	80055f0 <xQueueGenericSendFromISR+0x98>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800561c:	2301      	movs	r3, #1
 800561e:	603b      	str	r3, [r7, #0]
 8005620:	e7e6      	b.n	80055f0 <xQueueGenericSendFromISR+0x98>
 8005622:	bf00      	nop

08005624 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8005624:	b360      	cbz	r0, 8005680 <xQueueGiveFromISR+0x5c>
	configASSERT( pxQueue->uxItemSize == 0 );
 8005626:	6c03      	ldr	r3, [r0, #64]	@ 0x40
{
 8005628:	b570      	push	{r4, r5, r6, lr}
 800562a:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800562c:	b143      	cbz	r3, 8005640 <xQueueGiveFromISR+0x1c>
 800562e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005632:	f383 8811 	msr	BASEPRI, r3
 8005636:	f3bf 8f6f 	isb	sy
 800563a:	f3bf 8f4f 	dsb	sy
 800563e:	e7fe      	b.n	800563e <xQueueGiveFromISR+0x1a>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005640:	6803      	ldr	r3, [r0, #0]
 8005642:	460d      	mov	r5, r1
 8005644:	b32b      	cbz	r3, 8005692 <xQueueGiveFromISR+0x6e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005646:	f001 f9e1 	bl	8006a0c <vPortValidateInterruptPriority>
	__asm volatile
 800564a:	f3ef 8611 	mrs	r6, BASEPRI
 800564e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005652:	f383 8811 	msr	BASEPRI, r3
 8005656:	f3bf 8f6f 	isb	sy
 800565a:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800565e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005660:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8005662:	429a      	cmp	r2, r3
 8005664:	d921      	bls.n	80056aa <xQueueGiveFromISR+0x86>
			const int8_t cTxLock = pxQueue->cTxLock;
 8005666:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800566a:	3301      	adds	r3, #1
			if( cTxLock == queueUNLOCKED )
 800566c:	2aff      	cmp	r2, #255	@ 0xff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800566e:	63a3      	str	r3, [r4, #56]	@ 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8005670:	b253      	sxtb	r3, r2
			if( cTxLock == queueUNLOCKED )
 8005672:	d01e      	beq.n	80056b2 <xQueueGiveFromISR+0x8e>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005674:	3301      	adds	r3, #1
 8005676:	b25b      	sxtb	r3, r3
 8005678:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
			xReturn = pdPASS;
 800567c:	2001      	movs	r0, #1
 800567e:	e015      	b.n	80056ac <xQueueGiveFromISR+0x88>
	__asm volatile
 8005680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005684:	f383 8811 	msr	BASEPRI, r3
 8005688:	f3bf 8f6f 	isb	sy
 800568c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8005690:	e7fe      	b.n	8005690 <xQueueGiveFromISR+0x6c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005692:	6883      	ldr	r3, [r0, #8]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d0d6      	beq.n	8005646 <xQueueGiveFromISR+0x22>
 8005698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800569c:	f383 8811 	msr	BASEPRI, r3
 80056a0:	f3bf 8f6f 	isb	sy
 80056a4:	f3bf 8f4f 	dsb	sy
 80056a8:	e7fe      	b.n	80056a8 <xQueueGiveFromISR+0x84>
			xReturn = errQUEUE_FULL;
 80056aa:	2000      	movs	r0, #0
	__asm volatile
 80056ac:	f386 8811 	msr	BASEPRI, r6
}
 80056b0:	bd70      	pop	{r4, r5, r6, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056b2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d0e1      	beq.n	800567c <xQueueGiveFromISR+0x58>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056b8:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80056bc:	f000 fe6a 	bl	8006394 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 80056c0:	2d00      	cmp	r5, #0
 80056c2:	d0db      	beq.n	800567c <xQueueGiveFromISR+0x58>
 80056c4:	2800      	cmp	r0, #0
 80056c6:	d0d9      	beq.n	800567c <xQueueGiveFromISR+0x58>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80056c8:	2301      	movs	r3, #1
 80056ca:	602b      	str	r3, [r5, #0]
 80056cc:	e7d6      	b.n	800567c <xQueueGiveFromISR+0x58>
 80056ce:	bf00      	nop

080056d0 <xQueueReceive>:
{
 80056d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056d2:	b085      	sub	sp, #20
 80056d4:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80056d6:	2800      	cmp	r0, #0
 80056d8:	f000 809d 	beq.w	8005816 <xQueueReceive+0x146>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056dc:	460e      	mov	r6, r1
 80056de:	4604      	mov	r4, r0
 80056e0:	2900      	cmp	r1, #0
 80056e2:	d041      	beq.n	8005768 <xQueueReceive+0x98>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056e4:	f000 fef0 	bl	80064c8 <xTaskGetSchedulerState>
 80056e8:	2800      	cmp	r0, #0
 80056ea:	d049      	beq.n	8005780 <xQueueReceive+0xb0>
		taskENTER_CRITICAL();
 80056ec:	f001 f872 	bl	80067d4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056f0:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80056f2:	2d00      	cmp	r5, #0
 80056f4:	d161      	bne.n	80057ba <xQueueReceive+0xea>
				if( xTicksToWait == ( TickType_t ) 0 )
 80056f6:	9b01      	ldr	r3, [sp, #4]
 80056f8:	b38b      	cbz	r3, 800575e <xQueueReceive+0x8e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80056fa:	a802      	add	r0, sp, #8
		prvLockQueue( pxQueue );
 80056fc:	462f      	mov	r7, r5
					vTaskInternalSetTimeOutState( &xTimeOut );
 80056fe:	f000 fe8f 	bl	8006420 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8005702:	f001 f889 	bl	8006818 <vPortExitCritical>
		vTaskSuspendAll();
 8005706:	f000 fc4f 	bl	8005fa8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800570a:	f001 f863 	bl	80067d4 <vPortEnterCritical>
 800570e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8005712:	2bff      	cmp	r3, #255	@ 0xff
 8005714:	d101      	bne.n	800571a <xQueueReceive+0x4a>
 8005716:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
 800571a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800571e:	2bff      	cmp	r3, #255	@ 0xff
 8005720:	d101      	bne.n	8005726 <xQueueReceive+0x56>
 8005722:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005726:	f001 f877 	bl	8006818 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800572a:	a901      	add	r1, sp, #4
 800572c:	a802      	add	r0, sp, #8
 800572e:	f000 fe83 	bl	8006438 <xTaskCheckForTimeOut>
 8005732:	2800      	cmp	r0, #0
 8005734:	d130      	bne.n	8005798 <xQueueReceive+0xc8>
	taskENTER_CRITICAL();
 8005736:	f001 f84d 	bl	80067d4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800573a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800573c:	2b00      	cmp	r3, #0
 800573e:	d051      	beq.n	80057e4 <xQueueReceive+0x114>
	taskEXIT_CRITICAL();
 8005740:	f001 f86a 	bl	8006818 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8005744:	4620      	mov	r0, r4
 8005746:	f7ff fcb5 	bl	80050b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800574a:	f000 fd89 	bl	8006260 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800574e:	f001 f841 	bl	80067d4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005752:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005754:	2d00      	cmp	r5, #0
 8005756:	d130      	bne.n	80057ba <xQueueReceive+0xea>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005758:	9b01      	ldr	r3, [sp, #4]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1d1      	bne.n	8005702 <xQueueReceive+0x32>
					taskEXIT_CRITICAL();
 800575e:	f001 f85b 	bl	8006818 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8005762:	2000      	movs	r0, #0
}
 8005764:	b005      	add	sp, #20
 8005766:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005768:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800576a:	2b00      	cmp	r3, #0
 800576c:	d0ba      	beq.n	80056e4 <xQueueReceive+0x14>
	__asm volatile
 800576e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005772:	f383 8811 	msr	BASEPRI, r3
 8005776:	f3bf 8f6f 	isb	sy
 800577a:	f3bf 8f4f 	dsb	sy
 800577e:	e7fe      	b.n	800577e <xQueueReceive+0xae>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005780:	9b01      	ldr	r3, [sp, #4]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d0b2      	beq.n	80056ec <xQueueReceive+0x1c>
 8005786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800578a:	f383 8811 	msr	BASEPRI, r3
 800578e:	f3bf 8f6f 	isb	sy
 8005792:	f3bf 8f4f 	dsb	sy
 8005796:	e7fe      	b.n	8005796 <xQueueReceive+0xc6>
			prvUnlockQueue( pxQueue );
 8005798:	4620      	mov	r0, r4
 800579a:	f7ff fc8b 	bl	80050b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800579e:	f000 fd5f 	bl	8006260 <xTaskResumeAll>
	taskENTER_CRITICAL();
 80057a2:	f001 f817 	bl	80067d4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80057a6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d0d8      	beq.n	800575e <xQueueReceive+0x8e>
	taskEXIT_CRITICAL();
 80057ac:	f001 f834 	bl	8006818 <vPortExitCritical>
		taskENTER_CRITICAL();
 80057b0:	f001 f810 	bl	80067d4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057b4:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80057b6:	2d00      	cmp	r5, #0
 80057b8:	d0ce      	beq.n	8005758 <xQueueReceive+0x88>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80057ba:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80057bc:	b152      	cbz	r2, 80057d4 <xQueueReceive+0x104>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80057be:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80057c0:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80057c2:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80057c4:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80057c6:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80057c8:	d301      	bcc.n	80057ce <xQueueReceive+0xfe>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80057ca:	6821      	ldr	r1, [r4, #0]
 80057cc:	60e1      	str	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80057ce:	4630      	mov	r0, r6
 80057d0:	f00c f895 	bl	80118fe <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80057d4:	3d01      	subs	r5, #1
 80057d6:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057d8:	6923      	ldr	r3, [r4, #16]
 80057da:	bb2b      	cbnz	r3, 8005828 <xQueueReceive+0x158>
				taskEXIT_CRITICAL();
 80057dc:	f001 f81c 	bl	8006818 <vPortExitCritical>
				return pdPASS;
 80057e0:	2001      	movs	r0, #1
 80057e2:	e7bf      	b.n	8005764 <xQueueReceive+0x94>
	taskEXIT_CRITICAL();
 80057e4:	f001 f818 	bl	8006818 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80057e8:	9901      	ldr	r1, [sp, #4]
 80057ea:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80057ee:	f000 fdb7 	bl	8006360 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80057f2:	4620      	mov	r0, r4
 80057f4:	f7ff fc5e 	bl	80050b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80057f8:	f000 fd32 	bl	8006260 <xTaskResumeAll>
 80057fc:	2800      	cmp	r0, #0
 80057fe:	d1d7      	bne.n	80057b0 <xQueueReceive+0xe0>
					portYIELD_WITHIN_API();
 8005800:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005804:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005808:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800580c:	f3bf 8f4f 	dsb	sy
 8005810:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 8005814:	e7cc      	b.n	80057b0 <xQueueReceive+0xe0>
 8005816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800581a:	f383 8811 	msr	BASEPRI, r3
 800581e:	f3bf 8f6f 	isb	sy
 8005822:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8005826:	e7fe      	b.n	8005826 <xQueueReceive+0x156>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005828:	f104 0010 	add.w	r0, r4, #16
 800582c:	f000 fdb2 	bl	8006394 <xTaskRemoveFromEventList>
 8005830:	2800      	cmp	r0, #0
 8005832:	d0d3      	beq.n	80057dc <xQueueReceive+0x10c>
						queueYIELD_IF_USING_PREEMPTION();
 8005834:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005838:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800583c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005840:	f3bf 8f4f 	dsb	sy
 8005844:	f3bf 8f6f 	isb	sy
 8005848:	e7c8      	b.n	80057dc <xQueueReceive+0x10c>
 800584a:	bf00      	nop

0800584c <xQueueSemaphoreTake>:
{
 800584c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800584e:	b085      	sub	sp, #20
 8005850:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8005852:	2800      	cmp	r0, #0
 8005854:	d056      	beq.n	8005904 <xQueueSemaphoreTake+0xb8>
	configASSERT( pxQueue->uxItemSize == 0 );
 8005856:	6c06      	ldr	r6, [r0, #64]	@ 0x40
 8005858:	4604      	mov	r4, r0
 800585a:	b146      	cbz	r6, 800586e <xQueueSemaphoreTake+0x22>
 800585c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005860:	f383 8811 	msr	BASEPRI, r3
 8005864:	f3bf 8f6f 	isb	sy
 8005868:	f3bf 8f4f 	dsb	sy
 800586c:	e7fe      	b.n	800586c <xQueueSemaphoreTake+0x20>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800586e:	f000 fe2b 	bl	80064c8 <xTaskGetSchedulerState>
 8005872:	4605      	mov	r5, r0
 8005874:	2800      	cmp	r0, #0
 8005876:	d04e      	beq.n	8005916 <xQueueSemaphoreTake+0xca>
 8005878:	4635      	mov	r5, r6
		taskENTER_CRITICAL();
 800587a:	f000 ffab 	bl	80067d4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800587e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
		prvLockQueue( pxQueue );
 8005880:	2700      	movs	r7, #0
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005882:	bb8b      	cbnz	r3, 80058e8 <xQueueSemaphoreTake+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005884:	9b01      	ldr	r3, [sp, #4]
 8005886:	2b00      	cmp	r3, #0
 8005888:	f000 809a 	beq.w	80059c0 <xQueueSemaphoreTake+0x174>
				else if( xEntryTimeSet == pdFALSE )
 800588c:	2d00      	cmp	r5, #0
 800588e:	d05c      	beq.n	800594a <xQueueSemaphoreTake+0xfe>
		taskEXIT_CRITICAL();
 8005890:	f000 ffc2 	bl	8006818 <vPortExitCritical>
		vTaskSuspendAll();
 8005894:	f000 fb88 	bl	8005fa8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005898:	f000 ff9c 	bl	80067d4 <vPortEnterCritical>
 800589c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80058a0:	2bff      	cmp	r3, #255	@ 0xff
 80058a2:	d101      	bne.n	80058a8 <xQueueSemaphoreTake+0x5c>
 80058a4:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
 80058a8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80058ac:	2bff      	cmp	r3, #255	@ 0xff
 80058ae:	d101      	bne.n	80058b4 <xQueueSemaphoreTake+0x68>
 80058b0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80058b4:	f000 ffb0 	bl	8006818 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80058b8:	a901      	add	r1, sp, #4
 80058ba:	a802      	add	r0, sp, #8
 80058bc:	f000 fdbc 	bl	8006438 <xTaskCheckForTimeOut>
 80058c0:	2800      	cmp	r0, #0
 80058c2:	d134      	bne.n	800592e <xQueueSemaphoreTake+0xe2>
	taskENTER_CRITICAL();
 80058c4:	f000 ff86 	bl	80067d4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80058c8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d044      	beq.n	8005958 <xQueueSemaphoreTake+0x10c>
	taskEXIT_CRITICAL();
 80058ce:	f000 ffa3 	bl	8006818 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 80058d2:	4620      	mov	r0, r4
 80058d4:	f7ff fbee 	bl	80050b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80058d8:	f000 fcc2 	bl	8006260 <xTaskResumeAll>
		taskENTER_CRITICAL();
 80058dc:	f000 ff7a 	bl	80067d4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80058e0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80058e2:	2501      	movs	r5, #1
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d0cd      	beq.n	8005884 <xQueueSemaphoreTake+0x38>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80058e8:	3b01      	subs	r3, #1
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80058ea:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80058ec:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80058ee:	2a00      	cmp	r2, #0
 80058f0:	f000 8082 	beq.w	80059f8 <xQueueSemaphoreTake+0x1ac>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058f4:	6923      	ldr	r3, [r4, #16]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d16d      	bne.n	80059d6 <xQueueSemaphoreTake+0x18a>
				taskEXIT_CRITICAL();
 80058fa:	f000 ff8d 	bl	8006818 <vPortExitCritical>
				return pdPASS;
 80058fe:	2001      	movs	r0, #1
}
 8005900:	b005      	add	sp, #20
 8005902:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005908:	f383 8811 	msr	BASEPRI, r3
 800590c:	f3bf 8f6f 	isb	sy
 8005910:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8005914:	e7fe      	b.n	8005914 <xQueueSemaphoreTake+0xc8>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005916:	9b01      	ldr	r3, [sp, #4]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d038      	beq.n	800598e <xQueueSemaphoreTake+0x142>
 800591c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005920:	f383 8811 	msr	BASEPRI, r3
 8005924:	f3bf 8f6f 	isb	sy
 8005928:	f3bf 8f4f 	dsb	sy
 800592c:	e7fe      	b.n	800592c <xQueueSemaphoreTake+0xe0>
			prvUnlockQueue( pxQueue );
 800592e:	4620      	mov	r0, r4
 8005930:	f7ff fbc0 	bl	80050b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005934:	f000 fc94 	bl	8006260 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8005938:	f000 ff4c 	bl	80067d4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800593c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800593e:	b943      	cbnz	r3, 8005952 <xQueueSemaphoreTake+0x106>
	taskEXIT_CRITICAL();
 8005940:	f000 ff6a 	bl	8006818 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 8005944:	bb2e      	cbnz	r6, 8005992 <xQueueSemaphoreTake+0x146>
					return errQUEUE_EMPTY;
 8005946:	2000      	movs	r0, #0
 8005948:	e7da      	b.n	8005900 <xQueueSemaphoreTake+0xb4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800594a:	a802      	add	r0, sp, #8
 800594c:	f000 fd68 	bl	8006420 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005950:	e79e      	b.n	8005890 <xQueueSemaphoreTake+0x44>
	taskEXIT_CRITICAL();
 8005952:	f000 ff61 	bl	8006818 <vPortExitCritical>
	return xReturn;
 8005956:	e7c1      	b.n	80058dc <xQueueSemaphoreTake+0x90>
	taskEXIT_CRITICAL();
 8005958:	f000 ff5e 	bl	8006818 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800595c:	6823      	ldr	r3, [r4, #0]
 800595e:	b333      	cbz	r3, 80059ae <xQueueSemaphoreTake+0x162>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005960:	9901      	ldr	r1, [sp, #4]
 8005962:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8005966:	f000 fcfb 	bl	8006360 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800596a:	4620      	mov	r0, r4
 800596c:	f7ff fba2 	bl	80050b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005970:	f000 fc76 	bl	8006260 <xTaskResumeAll>
 8005974:	2800      	cmp	r0, #0
 8005976:	d1b1      	bne.n	80058dc <xQueueSemaphoreTake+0x90>
					portYIELD_WITHIN_API();
 8005978:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800597c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005980:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005984:	f3bf 8f4f 	dsb	sy
 8005988:	f3bf 8f6f 	isb	sy
 800598c:	e7a6      	b.n	80058dc <xQueueSemaphoreTake+0x90>
 800598e:	462e      	mov	r6, r5
 8005990:	e773      	b.n	800587a <xQueueSemaphoreTake+0x2e>
						taskENTER_CRITICAL();
 8005992:	f000 ff1f 	bl	80067d4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005996:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005998:	b119      	cbz	r1, 80059a2 <xQueueSemaphoreTake+0x156>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800599a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800599c:	6819      	ldr	r1, [r3, #0]
 800599e:	f1c1 0110 	rsb	r1, r1, #16
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80059a2:	68a0      	ldr	r0, [r4, #8]
 80059a4:	f000 fe42 	bl	800662c <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 80059a8:	f000 ff36 	bl	8006818 <vPortExitCritical>
 80059ac:	e7cb      	b.n	8005946 <xQueueSemaphoreTake+0xfa>
						taskENTER_CRITICAL();
 80059ae:	f000 ff11 	bl	80067d4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80059b2:	68a0      	ldr	r0, [r4, #8]
 80059b4:	f000 fd98 	bl	80064e8 <xTaskPriorityInherit>
 80059b8:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 80059ba:	f000 ff2d 	bl	8006818 <vPortExitCritical>
 80059be:	e7cf      	b.n	8005960 <xQueueSemaphoreTake+0x114>
						configASSERT( xInheritanceOccurred == pdFALSE );
 80059c0:	2e00      	cmp	r6, #0
 80059c2:	d0f1      	beq.n	80059a8 <xQueueSemaphoreTake+0x15c>
 80059c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059c8:	f383 8811 	msr	BASEPRI, r3
 80059cc:	f3bf 8f6f 	isb	sy
 80059d0:	f3bf 8f4f 	dsb	sy
 80059d4:	e7fe      	b.n	80059d4 <xQueueSemaphoreTake+0x188>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059d6:	f104 0010 	add.w	r0, r4, #16
 80059da:	f000 fcdb 	bl	8006394 <xTaskRemoveFromEventList>
 80059de:	2800      	cmp	r0, #0
 80059e0:	d08b      	beq.n	80058fa <xQueueSemaphoreTake+0xae>
						queueYIELD_IF_USING_PREEMPTION();
 80059e2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80059e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059ea:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80059ee:	f3bf 8f4f 	dsb	sy
 80059f2:	f3bf 8f6f 	isb	sy
 80059f6:	e780      	b.n	80058fa <xQueueSemaphoreTake+0xae>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80059f8:	f000 fe72 	bl	80066e0 <pvTaskIncrementMutexHeldCount>
 80059fc:	60a0      	str	r0, [r4, #8]
 80059fe:	e779      	b.n	80058f4 <xQueueSemaphoreTake+0xa8>

08005a00 <xQueueReceiveFromISR>:
{
 8005a00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8005a04:	b310      	cbz	r0, 8005a4c <xQueueReceiveFromISR+0x4c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a06:	460f      	mov	r7, r1
 8005a08:	4604      	mov	r4, r0
 8005a0a:	4616      	mov	r6, r2
 8005a0c:	b191      	cbz	r1, 8005a34 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a0e:	f000 fffd 	bl	8006a0c <vPortValidateInterruptPriority>
	__asm volatile
 8005a12:	f3ef 8911 	mrs	r9, BASEPRI
 8005a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a1a:	f383 8811 	msr	BASEPRI, r3
 8005a1e:	f3bf 8f6f 	isb	sy
 8005a22:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a26:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a28:	b9cd      	cbnz	r5, 8005a5e <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 8005a2a:	4628      	mov	r0, r5
	__asm volatile
 8005a2c:	f389 8811 	msr	BASEPRI, r9
}
 8005a30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a34:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d0e9      	beq.n	8005a0e <xQueueReceiveFromISR+0xe>
	__asm volatile
 8005a3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a3e:	f383 8811 	msr	BASEPRI, r3
 8005a42:	f3bf 8f6f 	isb	sy
 8005a46:	f3bf 8f4f 	dsb	sy
 8005a4a:	e7fe      	b.n	8005a4a <xQueueReceiveFromISR+0x4a>
 8005a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a50:	f383 8811 	msr	BASEPRI, r3
 8005a54:	f3bf 8f6f 	isb	sy
 8005a58:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8005a5c:	e7fe      	b.n	8005a5c <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 8005a5e:	f894 8044 	ldrb.w	r8, [r4, #68]	@ 0x44
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005a62:	6c22      	ldr	r2, [r4, #64]	@ 0x40
			const int8_t cRxLock = pxQueue->cRxLock;
 8005a64:	fa4f f888 	sxtb.w	r8, r8
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005a68:	b142      	cbz	r2, 8005a7c <xQueueReceiveFromISR+0x7c>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005a6a:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005a6c:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005a6e:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005a70:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005a72:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005a74:	d21c      	bcs.n	8005ab0 <xQueueReceiveFromISR+0xb0>
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005a76:	4638      	mov	r0, r7
 8005a78:	f00b ff41 	bl	80118fe <memcpy>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a7c:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 8005a7e:	f1b8 3fff 	cmp.w	r8, #4294967295
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a82:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 8005a84:	d006      	beq.n	8005a94 <xQueueReceiveFromISR+0x94>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005a86:	f108 0301 	add.w	r3, r8, #1
 8005a8a:	b25b      	sxtb	r3, r3
 8005a8c:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
			xReturn = pdPASS;
 8005a90:	2001      	movs	r0, #1
 8005a92:	e7cb      	b.n	8005a2c <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a94:	6923      	ldr	r3, [r4, #16]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d0fa      	beq.n	8005a90 <xQueueReceiveFromISR+0x90>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a9a:	f104 0010 	add.w	r0, r4, #16
 8005a9e:	f000 fc79 	bl	8006394 <xTaskRemoveFromEventList>
						if( pxHigherPriorityTaskWoken != NULL )
 8005aa2:	2e00      	cmp	r6, #0
 8005aa4:	d0f4      	beq.n	8005a90 <xQueueReceiveFromISR+0x90>
 8005aa6:	2800      	cmp	r0, #0
 8005aa8:	d0f2      	beq.n	8005a90 <xQueueReceiveFromISR+0x90>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	6033      	str	r3, [r6, #0]
 8005aae:	e7ef      	b.n	8005a90 <xQueueReceiveFromISR+0x90>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005ab0:	6821      	ldr	r1, [r4, #0]
 8005ab2:	60e1      	str	r1, [r4, #12]
 8005ab4:	e7df      	b.n	8005a76 <xQueueReceiveFromISR+0x76>
 8005ab6:	bf00      	nop

08005ab8 <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
 8005ab8:	b140      	cbz	r0, 8005acc <uxQueueMessagesWaiting+0x14>
{
 8005aba:	b510      	push	{r4, lr}
 8005abc:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8005abe:	f000 fe89 	bl	80067d4 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005ac2:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
	taskEXIT_CRITICAL();
 8005ac4:	f000 fea8 	bl	8006818 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005ac8:	4620      	mov	r0, r4
 8005aca:	bd10      	pop	{r4, pc}
 8005acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ad0:	f383 8811 	msr	BASEPRI, r3
 8005ad4:	f3bf 8f6f 	isb	sy
 8005ad8:	f3bf 8f4f 	dsb	sy
	configASSERT( xQueue );
 8005adc:	e7fe      	b.n	8005adc <uxQueueMessagesWaiting+0x24>
 8005ade:	bf00      	nop

08005ae0 <uxQueueMessagesWaitingFromISR>:
	configASSERT( pxQueue );
 8005ae0:	b108      	cbz	r0, 8005ae6 <uxQueueMessagesWaitingFromISR+0x6>
	uxReturn = pxQueue->uxMessagesWaiting;
 8005ae2:	6b80      	ldr	r0, [r0, #56]	@ 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005ae4:	4770      	bx	lr
 8005ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aea:	f383 8811 	msr	BASEPRI, r3
 8005aee:	f3bf 8f6f 	isb	sy
 8005af2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8005af6:	e7fe      	b.n	8005af6 <uxQueueMessagesWaitingFromISR+0x16>

08005af8 <vQueueDelete>:
	configASSERT( pxQueue );
 8005af8:	b170      	cbz	r0, 8005b18 <vQueueDelete+0x20>
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005afa:	2300      	movs	r3, #0
 8005afc:	4911      	ldr	r1, [pc, #68]	@ (8005b44 <vQueueDelete+0x4c>)
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005afe:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 8005b02:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b06:	3301      	adds	r3, #1
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005b08:	4290      	cmp	r0, r2
 8005b0a:	d010      	beq.n	8005b2e <vQueueDelete+0x36>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b0c:	2b08      	cmp	r3, #8
 8005b0e:	d1f6      	bne.n	8005afe <vQueueDelete+0x6>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005b10:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 8005b14:	b14b      	cbz	r3, 8005b2a <vQueueDelete+0x32>
}
 8005b16:	4770      	bx	lr
 8005b18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b1c:	f383 8811 	msr	BASEPRI, r3
 8005b20:	f3bf 8f6f 	isb	sy
 8005b24:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8005b28:	e7fe      	b.n	8005b28 <vQueueDelete+0x30>
			vPortFree( pxQueue );
 8005b2a:	f001 b85d 	b.w	8006be8 <vPortFree>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005b2e:	4906      	ldr	r1, [pc, #24]	@ (8005b48 <vQueueDelete+0x50>)
 8005b30:	2300      	movs	r3, #0
 8005b32:	2200      	movs	r2, #0
 8005b34:	448c      	add	ip, r1
 8005b36:	e9cc 2300 	strd	r2, r3, [ip]
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005b3a:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d1e9      	bne.n	8005b16 <vQueueDelete+0x1e>
 8005b42:	e7f2      	b.n	8005b2a <vQueueDelete+0x32>
 8005b44:	24000564 	.word	0x24000564
 8005b48:	24000560 	.word	0x24000560

08005b4c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005b4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b50:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005b52:	f000 fe3f 	bl	80067d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005b56:	4a35      	ldr	r2, [pc, #212]	@ (8005c2c <prvAddNewTaskToReadyList+0xe0>)
		if( pxCurrentTCB == NULL )
 8005b58:	4d35      	ldr	r5, [pc, #212]	@ (8005c30 <prvAddNewTaskToReadyList+0xe4>)
		uxCurrentNumberOfTasks++;
 8005b5a:	6813      	ldr	r3, [r2, #0]
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005b60:	682b      	ldr	r3, [r5, #0]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d033      	beq.n	8005bce <prvAddNewTaskToReadyList+0x82>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005b66:	4e33      	ldr	r6, [pc, #204]	@ (8005c34 <prvAddNewTaskToReadyList+0xe8>)
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005b68:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 8005b6a:	6832      	ldr	r2, [r6, #0]
 8005b6c:	b33a      	cbz	r2, 8005bbe <prvAddNewTaskToReadyList+0x72>
 8005b6e:	f8df 80e8 	ldr.w	r8, [pc, #232]	@ 8005c58 <prvAddNewTaskToReadyList+0x10c>
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005b72:	2201      	movs	r2, #1
		uxTaskNumber++;
 8005b74:	4f30      	ldr	r7, [pc, #192]	@ (8005c38 <prvAddNewTaskToReadyList+0xec>)
		prvAddTaskToReadyList( pxNewTCB );
 8005b76:	4931      	ldr	r1, [pc, #196]	@ (8005c3c <prvAddNewTaskToReadyList+0xf0>)
 8005b78:	409a      	lsls	r2, r3
 8005b7a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005b7e:	eb08 0083 	add.w	r0, r8, r3, lsl #2
		uxTaskNumber++;
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	3301      	adds	r3, #1
 8005b86:	603b      	str	r3, [r7, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8005b88:	680b      	ldr	r3, [r1, #0]
 8005b8a:	431a      	orrs	r2, r3
 8005b8c:	600a      	str	r2, [r1, #0]
 8005b8e:	1d21      	adds	r1, r4, #4
 8005b90:	f7ff fa1e 	bl	8004fd0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005b94:	f000 fe40 	bl	8006818 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005b98:	6833      	ldr	r3, [r6, #0]
 8005b9a:	b173      	cbz	r3, 8005bba <prvAddNewTaskToReadyList+0x6e>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005b9c:	682a      	ldr	r2, [r5, #0]
 8005b9e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005ba0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d209      	bcs.n	8005bba <prvAddNewTaskToReadyList+0x6e>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005ba6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005baa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bae:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005bb2:	f3bf 8f4f 	dsb	sy
 8005bb6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005bba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005bbe:	682a      	ldr	r2, [r5, #0]
 8005bc0:	f8df 8094 	ldr.w	r8, [pc, #148]	@ 8005c58 <prvAddNewTaskToReadyList+0x10c>
 8005bc4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d8d3      	bhi.n	8005b72 <prvAddNewTaskToReadyList+0x26>
					pxCurrentTCB = pxNewTCB;
 8005bca:	602c      	str	r4, [r5, #0]
 8005bcc:	e7d1      	b.n	8005b72 <prvAddNewTaskToReadyList+0x26>
			pxCurrentTCB = pxNewTCB;
 8005bce:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005bd0:	6813      	ldr	r3, [r2, #0]
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d004      	beq.n	8005be0 <prvAddNewTaskToReadyList+0x94>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005bd6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005bd8:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8005c58 <prvAddNewTaskToReadyList+0x10c>
 8005bdc:	4e15      	ldr	r6, [pc, #84]	@ (8005c34 <prvAddNewTaskToReadyList+0xe8>)
 8005bde:	e7c8      	b.n	8005b72 <prvAddNewTaskToReadyList+0x26>
 8005be0:	f8df 8074 	ldr.w	r8, [pc, #116]	@ 8005c58 <prvAddNewTaskToReadyList+0x10c>
 8005be4:	4646      	mov	r6, r8
 8005be6:	f508 77a0 	add.w	r7, r8, #320	@ 0x140
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005bea:	4630      	mov	r0, r6
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005bec:	3614      	adds	r6, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005bee:	f7ff f9df 	bl	8004fb0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005bf2:	42be      	cmp	r6, r7
 8005bf4:	d1f9      	bne.n	8005bea <prvAddNewTaskToReadyList+0x9e>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005bf6:	f8df 9064 	ldr.w	r9, [pc, #100]	@ 8005c5c <prvAddNewTaskToReadyList+0x110>
	vListInitialise( &xDelayedTaskList2 );
 8005bfa:	4f11      	ldr	r7, [pc, #68]	@ (8005c40 <prvAddNewTaskToReadyList+0xf4>)
	vListInitialise( &xDelayedTaskList1 );
 8005bfc:	4648      	mov	r0, r9
 8005bfe:	4e0d      	ldr	r6, [pc, #52]	@ (8005c34 <prvAddNewTaskToReadyList+0xe8>)
 8005c00:	f7ff f9d6 	bl	8004fb0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005c04:	4638      	mov	r0, r7
 8005c06:	f7ff f9d3 	bl	8004fb0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005c0a:	480e      	ldr	r0, [pc, #56]	@ (8005c44 <prvAddNewTaskToReadyList+0xf8>)
 8005c0c:	f7ff f9d0 	bl	8004fb0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005c10:	480d      	ldr	r0, [pc, #52]	@ (8005c48 <prvAddNewTaskToReadyList+0xfc>)
 8005c12:	f7ff f9cd 	bl	8004fb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005c16:	480d      	ldr	r0, [pc, #52]	@ (8005c4c <prvAddNewTaskToReadyList+0x100>)
 8005c18:	f7ff f9ca 	bl	8004fb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8005c50 <prvAddNewTaskToReadyList+0x104>)
 8005c1e:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005c22:	4b0c      	ldr	r3, [pc, #48]	@ (8005c54 <prvAddNewTaskToReadyList+0x108>)
 8005c24:	601f      	str	r7, [r3, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8005c26:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
}
 8005c28:	e7a3      	b.n	8005b72 <prvAddNewTaskToReadyList+0x26>
 8005c2a:	bf00      	nop
 8005c2c:	240005c4 	.word	0x240005c4
 8005c30:	24000778 	.word	0x24000778
 8005c34:	240005b8 	.word	0x240005b8
 8005c38:	240005a8 	.word	0x240005a8
 8005c3c:	240005bc 	.word	0x240005bc
 8005c40:	24000610 	.word	0x24000610
 8005c44:	240005f4 	.word	0x240005f4
 8005c48:	240005e0 	.word	0x240005e0
 8005c4c:	240005c8 	.word	0x240005c8
 8005c50:	2400060c 	.word	0x2400060c
 8005c54:	24000608 	.word	0x24000608
 8005c58:	24000638 	.word	0x24000638
 8005c5c:	24000624 	.word	0x24000624

08005c60 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005c62:	4b1b      	ldr	r3, [pc, #108]	@ (8005cd0 <prvAddCurrentTaskToDelayedList+0x70>)
{
 8005c64:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c66:	4e1b      	ldr	r6, [pc, #108]	@ (8005cd4 <prvAddCurrentTaskToDelayedList+0x74>)
{
 8005c68:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8005c6a:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c6c:	6833      	ldr	r3, [r6, #0]
 8005c6e:	1d18      	adds	r0, r3, #4
 8005c70:	f7ff f9d4 	bl	800501c <uxListRemove>
 8005c74:	b940      	cbnz	r0, 8005c88 <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005c76:	6833      	ldr	r3, [r6, #0]
 8005c78:	2201      	movs	r2, #1
 8005c7a:	4917      	ldr	r1, [pc, #92]	@ (8005cd8 <prvAddCurrentTaskToDelayedList+0x78>)
 8005c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c7e:	409a      	lsls	r2, r3
 8005c80:	680b      	ldr	r3, [r1, #0]
 8005c82:	ea23 0302 	bic.w	r3, r3, r2
 8005c86:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005c88:	1c62      	adds	r2, r4, #1
 8005c8a:	d101      	bne.n	8005c90 <prvAddCurrentTaskToDelayedList+0x30>
 8005c8c:	07fb      	lsls	r3, r7, #31
 8005c8e:	d417      	bmi.n	8005cc0 <prvAddCurrentTaskToDelayedList+0x60>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005c90:	192d      	adds	r5, r5, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005c92:	6833      	ldr	r3, [r6, #0]
 8005c94:	605d      	str	r5, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8005c96:	d307      	bcc.n	8005ca8 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c98:	4b10      	ldr	r3, [pc, #64]	@ (8005cdc <prvAddCurrentTaskToDelayedList+0x7c>)
 8005c9a:	6818      	ldr	r0, [r3, #0]
 8005c9c:	6831      	ldr	r1, [r6, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005c9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ca2:	3104      	adds	r1, #4
 8005ca4:	f7ff b9a2 	b.w	8004fec <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ca8:	4b0d      	ldr	r3, [pc, #52]	@ (8005ce0 <prvAddCurrentTaskToDelayedList+0x80>)
 8005caa:	6818      	ldr	r0, [r3, #0]
 8005cac:	6831      	ldr	r1, [r6, #0]
 8005cae:	3104      	adds	r1, #4
 8005cb0:	f7ff f99c 	bl	8004fec <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8005ce4 <prvAddCurrentTaskToDelayedList+0x84>)
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	42aa      	cmp	r2, r5
 8005cba:	d900      	bls.n	8005cbe <prvAddCurrentTaskToDelayedList+0x5e>
					xNextTaskUnblockTime = xTimeToWake;
 8005cbc:	601d      	str	r5, [r3, #0]
}
 8005cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cc0:	6831      	ldr	r1, [r6, #0]
 8005cc2:	4809      	ldr	r0, [pc, #36]	@ (8005ce8 <prvAddCurrentTaskToDelayedList+0x88>)
 8005cc4:	3104      	adds	r1, #4
}
 8005cc6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cca:	f7ff b981 	b.w	8004fd0 <vListInsertEnd>
 8005cce:	bf00      	nop
 8005cd0:	240005c0 	.word	0x240005c0
 8005cd4:	24000778 	.word	0x24000778
 8005cd8:	240005bc 	.word	0x240005bc
 8005cdc:	24000608 	.word	0x24000608
 8005ce0:	2400060c 	.word	0x2400060c
 8005ce4:	240005a4 	.word	0x240005a4
 8005ce8:	240005c8 	.word	0x240005c8

08005cec <prvDeleteTCB>:
	{
 8005cec:	b510      	push	{r4, lr}
 8005cee:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005cf0:	304c      	adds	r0, #76	@ 0x4c
 8005cf2:	f00b fd41 	bl	8011778 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005cf6:	f894 309d 	ldrb.w	r3, [r4, #157]	@ 0x9d
 8005cfa:	b163      	cbz	r3, 8005d16 <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d013      	beq.n	8005d28 <prvDeleteTCB+0x3c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	d010      	beq.n	8005d26 <prvDeleteTCB+0x3a>
 8005d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d08:	f383 8811 	msr	BASEPRI, r3
 8005d0c:	f3bf 8f6f 	isb	sy
 8005d10:	f3bf 8f4f 	dsb	sy
 8005d14:	e7fe      	b.n	8005d14 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 8005d16:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8005d18:	f000 ff66 	bl	8006be8 <vPortFree>
				vPortFree( pxTCB );
 8005d1c:	4620      	mov	r0, r4
	}
 8005d1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8005d22:	f000 bf61 	b.w	8006be8 <vPortFree>
	}
 8005d26:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8005d28:	4620      	mov	r0, r4
	}
 8005d2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8005d2e:	f000 bf5b 	b.w	8006be8 <vPortFree>
 8005d32:	bf00      	nop

08005d34 <prvIdleTask>:
{
 8005d34:	4c15      	ldr	r4, [pc, #84]	@ (8005d8c <prvIdleTask+0x58>)
				taskYIELD();
 8005d36:	f04f 29e0 	mov.w	r9, #3758153728	@ 0xe000e000
 8005d3a:	4e15      	ldr	r6, [pc, #84]	@ (8005d90 <prvIdleTask+0x5c>)
 8005d3c:	f04f 5880 	mov.w	r8, #268435456	@ 0x10000000
 8005d40:	4d14      	ldr	r5, [pc, #80]	@ (8005d94 <prvIdleTask+0x60>)
 8005d42:	f8df a054 	ldr.w	sl, [pc, #84]	@ 8005d98 <prvIdleTask+0x64>
{
 8005d46:	b580      	push	{r7, lr}
 8005d48:	e011      	b.n	8005d6e <prvIdleTask+0x3a>
			taskENTER_CRITICAL();
 8005d4a:	f000 fd43 	bl	80067d4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d4e:	68f3      	ldr	r3, [r6, #12]
 8005d50:	68df      	ldr	r7, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d52:	1d38      	adds	r0, r7, #4
 8005d54:	f7ff f962 	bl	800501c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005d58:	682b      	ldr	r3, [r5, #0]
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005d5e:	6823      	ldr	r3, [r4, #0]
 8005d60:	3b01      	subs	r3, #1
 8005d62:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8005d64:	f000 fd58 	bl	8006818 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8005d68:	4638      	mov	r0, r7
 8005d6a:	f7ff ffbf 	bl	8005cec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d6e:	6823      	ldr	r3, [r4, #0]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1ea      	bne.n	8005d4a <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005d74:	f8da 3000 	ldr.w	r3, [sl]
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d9f8      	bls.n	8005d6e <prvIdleTask+0x3a>
				taskYIELD();
 8005d7c:	f8c9 8d04 	str.w	r8, [r9, #3332]	@ 0xd04
 8005d80:	f3bf 8f4f 	dsb	sy
 8005d84:	f3bf 8f6f 	isb	sy
 8005d88:	e7f1      	b.n	8005d6e <prvIdleTask+0x3a>
 8005d8a:	bf00      	nop
 8005d8c:	240005dc 	.word	0x240005dc
 8005d90:	240005e0 	.word	0x240005e0
 8005d94:	240005c4 	.word	0x240005c4
 8005d98:	24000638 	.word	0x24000638

08005d9c <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8005d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005da0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005da2:	461f      	mov	r7, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005da4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8005da8:	4606      	mov	r6, r0
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005daa:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8005dac:	4413      	add	r3, r2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8005dae:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005db2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005db6:	f025 0507 	bic.w	r5, r5, #7
	if( pcName != NULL )
 8005dba:	2900      	cmp	r1, #0
 8005dbc:	d042      	beq.n	8005e44 <prvInitialiseNewTask.constprop.0+0xa8>
 8005dbe:	f101 3cff 	add.w	ip, r1, #4294967295
 8005dc2:	f104 0333 	add.w	r3, r4, #51	@ 0x33
 8005dc6:	310f      	adds	r1, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005dc8:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
 8005dcc:	f803 2f01 	strb.w	r2, [r3, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8005dd0:	b10a      	cbz	r2, 8005dd6 <prvInitialiseNewTask.constprop.0+0x3a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005dd2:	458c      	cmp	ip, r1
 8005dd4:	d1f8      	bne.n	8005dc8 <prvInitialiseNewTask.constprop.0+0x2c>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005ddc:	9b08      	ldr	r3, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 8005dde:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005de2:	1d20      	adds	r0, r4, #4
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005de4:	2b0f      	cmp	r3, #15
		pxNewTCB->uxMutexesHeld = 0;
 8005de6:	f8c4 a048 	str.w	sl, [r4, #72]	@ 0x48
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005dea:	bf28      	it	cs
 8005dec:	230f      	movcs	r3, #15
 8005dee:	4699      	mov	r9, r3
	pxNewTCB->uxPriority = uxPriority;
 8005df0:	62e3      	str	r3, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8005df2:	6463      	str	r3, [r4, #68]	@ 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005df4:	f7ff f8e8 	bl	8004fc8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005df8:	f104 0018 	add.w	r0, r4, #24
 8005dfc:	f7ff f8e4 	bl	8004fc8 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e00:	f1c9 0310 	rsb	r3, r9, #16
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005e04:	224c      	movs	r2, #76	@ 0x4c
 8005e06:	4651      	mov	r1, sl
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e08:	61a3      	str	r3, [r4, #24]
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005e0a:	18a0      	adds	r0, r4, r2
		pxNewTCB->ulNotifiedValue = 0;
 8005e0c:	f8c4 a098 	str.w	sl, [r4, #152]	@ 0x98
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005e10:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005e12:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005e14:	f884 a09c 	strb.w	sl, [r4, #156]	@ 0x9c
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005e18:	f00b fc96 	bl	8011748 <memset>
 8005e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8005e4c <prvInitialiseNewTask.constprop.0+0xb0>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005e1e:	4628      	mov	r0, r5
 8005e20:	463a      	mov	r2, r7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005e22:	f103 0568 	add.w	r5, r3, #104	@ 0x68
 8005e26:	6523      	str	r3, [r4, #80]	@ 0x50
 8005e28:	33d0      	adds	r3, #208	@ 0xd0
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005e2a:	4631      	mov	r1, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005e2c:	6565      	str	r5, [r4, #84]	@ 0x54
 8005e2e:	65a3      	str	r3, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005e30:	f000 fca0 	bl	8006774 <pxPortInitialiseStack>
 8005e34:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8005e36:	f1b8 0f00 	cmp.w	r8, #0
 8005e3a:	d001      	beq.n	8005e40 <prvInitialiseNewTask.constprop.0+0xa4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005e3c:	f8c8 4000 	str.w	r4, [r8]
}
 8005e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005e44:	f884 1034 	strb.w	r1, [r4, #52]	@ 0x34
 8005e48:	e7c8      	b.n	8005ddc <prvInitialiseNewTask.constprop.0+0x40>
 8005e4a:	bf00      	nop
 8005e4c:	24009e5c 	.word	0x24009e5c

08005e50 <xTaskCreateStatic>:
	{
 8005e50:	b530      	push	{r4, r5, lr}
 8005e52:	b087      	sub	sp, #28
 8005e54:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8005e56:	b1c4      	cbz	r4, 8005e8a <xTaskCreateStatic+0x3a>
		configASSERT( pxTaskBuffer != NULL );
 8005e58:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8005e5a:	b16d      	cbz	r5, 8005e78 <xTaskCreateStatic+0x28>
			volatile size_t xSize = sizeof( StaticTask_t );
 8005e5c:	25a0      	movs	r5, #160	@ 0xa0
 8005e5e:	9505      	str	r5, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005e60:	9d05      	ldr	r5, [sp, #20]
 8005e62:	2da0      	cmp	r5, #160	@ 0xa0
 8005e64:	d01a      	beq.n	8005e9c <xTaskCreateStatic+0x4c>
 8005e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e6a:	f383 8811 	msr	BASEPRI, r3
 8005e6e:	f3bf 8f6f 	isb	sy
 8005e72:	f3bf 8f4f 	dsb	sy
 8005e76:	e7fe      	b.n	8005e76 <xTaskCreateStatic+0x26>
 8005e78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e7c:	f383 8811 	msr	BASEPRI, r3
 8005e80:	f3bf 8f6f 	isb	sy
 8005e84:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8005e88:	e7fe      	b.n	8005e88 <xTaskCreateStatic+0x38>
 8005e8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e8e:	f383 8811 	msr	BASEPRI, r3
 8005e92:	f3bf 8f6f 	isb	sy
 8005e96:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8005e9a:	e7fe      	b.n	8005e9a <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005e9c:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8005e9e:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005ea0:	2402      	movs	r4, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005ea2:	9502      	str	r5, [sp, #8]
 8005ea4:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8005ea6:	9500      	str	r5, [sp, #0]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005ea8:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8005eaa:	f885 409d 	strb.w	r4, [r5, #157]	@ 0x9d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005eae:	ac04      	add	r4, sp, #16
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005eb0:	9d05      	ldr	r5, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005eb2:	9401      	str	r4, [sp, #4]
 8005eb4:	f7ff ff72 	bl	8005d9c <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005eb8:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8005eba:	f7ff fe47 	bl	8005b4c <prvAddNewTaskToReadyList>
	}
 8005ebe:	9804      	ldr	r0, [sp, #16]
 8005ec0:	b007      	add	sp, #28
 8005ec2:	bd30      	pop	{r4, r5, pc}

08005ec4 <xTaskCreate>:
	{
 8005ec4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005ec8:	4607      	mov	r7, r0
 8005eca:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005ecc:	0090      	lsls	r0, r2, #2
	{
 8005ece:	4615      	mov	r5, r2
 8005ed0:	4688      	mov	r8, r1
 8005ed2:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005ed4:	f000 fdf2 	bl	8006abc <pvPortMalloc>
			if( pxStack != NULL )
 8005ed8:	b1f0      	cbz	r0, 8005f18 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005eda:	4604      	mov	r4, r0
 8005edc:	20a0      	movs	r0, #160	@ 0xa0
 8005ede:	f000 fded 	bl	8006abc <pvPortMalloc>
				if( pxNewTCB != NULL )
 8005ee2:	4606      	mov	r6, r0
 8005ee4:	b1a8      	cbz	r0, 8005f12 <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 8005ee6:	6304      	str	r4, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005ee8:	2400      	movs	r4, #0
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005eea:	464b      	mov	r3, r9
 8005eec:	462a      	mov	r2, r5
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005eee:	f886 409d 	strb.w	r4, [r6, #157]	@ 0x9d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005ef2:	4641      	mov	r1, r8
 8005ef4:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8005ef6:	4638      	mov	r0, r7
 8005ef8:	9602      	str	r6, [sp, #8]
 8005efa:	9401      	str	r4, [sp, #4]
 8005efc:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8005efe:	9400      	str	r4, [sp, #0]
 8005f00:	f7ff ff4c 	bl	8005d9c <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f04:	4630      	mov	r0, r6
 8005f06:	f7ff fe21 	bl	8005b4c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005f0a:	2001      	movs	r0, #1
	}
 8005f0c:	b005      	add	sp, #20
 8005f0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8005f12:	4620      	mov	r0, r4
 8005f14:	f000 fe68 	bl	8006be8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005f18:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8005f1c:	b005      	add	sp, #20
 8005f1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f22:	bf00      	nop

08005f24 <vTaskStartScheduler>:
{
 8005f24:	b510      	push	{r4, lr}
 8005f26:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005f28:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005f2a:	aa07      	add	r2, sp, #28
 8005f2c:	a906      	add	r1, sp, #24
 8005f2e:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005f30:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005f34:	f7fa fa3c 	bl	80003b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005f38:	4623      	mov	r3, r4
 8005f3a:	9a07      	ldr	r2, [sp, #28]
 8005f3c:	9400      	str	r4, [sp, #0]
 8005f3e:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 8005f42:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8005f46:	4911      	ldr	r1, [pc, #68]	@ (8005f8c <vTaskStartScheduler+0x68>)
 8005f48:	4811      	ldr	r0, [pc, #68]	@ (8005f90 <vTaskStartScheduler+0x6c>)
 8005f4a:	f7ff ff81 	bl	8005e50 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8005f4e:	b1d0      	cbz	r0, 8005f86 <vTaskStartScheduler+0x62>
 8005f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f54:	f383 8811 	msr	BASEPRI, r3
 8005f58:	f3bf 8f6f 	isb	sy
 8005f5c:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005f60:	4b0c      	ldr	r3, [pc, #48]	@ (8005f94 <vTaskStartScheduler+0x70>)
		xNextTaskUnblockTime = portMAX_DELAY;
 8005f62:	f04f 31ff 	mov.w	r1, #4294967295
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005f66:	480c      	ldr	r0, [pc, #48]	@ (8005f98 <vTaskStartScheduler+0x74>)
 8005f68:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8005f6a:	4a0c      	ldr	r2, [pc, #48]	@ (8005f9c <vTaskStartScheduler+0x78>)
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005f6c:	334c      	adds	r3, #76	@ 0x4c
		xNextTaskUnblockTime = portMAX_DELAY;
 8005f6e:	6011      	str	r1, [r2, #0]
		xSchedulerRunning = pdTRUE;
 8005f70:	2101      	movs	r1, #1
 8005f72:	4a0b      	ldr	r2, [pc, #44]	@ (8005fa0 <vTaskStartScheduler+0x7c>)
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005f74:	6003      	str	r3, [r0, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005f76:	4b0b      	ldr	r3, [pc, #44]	@ (8005fa4 <vTaskStartScheduler+0x80>)
		xSchedulerRunning = pdTRUE;
 8005f78:	6011      	str	r1, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005f7a:	601c      	str	r4, [r3, #0]
}
 8005f7c:	b008      	add	sp, #32
 8005f7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8005f82:	f000 bcb9 	b.w	80068f8 <xPortStartScheduler>
}
 8005f86:	b008      	add	sp, #32
 8005f88:	bd10      	pop	{r4, pc}
 8005f8a:	bf00      	nop
 8005f8c:	08012490 	.word	0x08012490
 8005f90:	08005d35 	.word	0x08005d35
 8005f94:	24000778 	.word	0x24000778
 8005f98:	2400003c 	.word	0x2400003c
 8005f9c:	240005a4 	.word	0x240005a4
 8005fa0:	240005b8 	.word	0x240005b8
 8005fa4:	240005c0 	.word	0x240005c0

08005fa8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8005fa8:	4a02      	ldr	r2, [pc, #8]	@ (8005fb4 <vTaskSuspendAll+0xc>)
 8005faa:	6813      	ldr	r3, [r2, #0]
 8005fac:	3301      	adds	r3, #1
 8005fae:	6013      	str	r3, [r2, #0]
}
 8005fb0:	4770      	bx	lr
 8005fb2:	bf00      	nop
 8005fb4:	240005a0 	.word	0x240005a0

08005fb8 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8005fb8:	4b01      	ldr	r3, [pc, #4]	@ (8005fc0 <xTaskGetTickCount+0x8>)
 8005fba:	6818      	ldr	r0, [r3, #0]
}
 8005fbc:	4770      	bx	lr
 8005fbe:	bf00      	nop
 8005fc0:	240005c0 	.word	0x240005c0

08005fc4 <xTaskGetTickCountFromISR>:
{
 8005fc4:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005fc6:	f000 fd21 	bl	8006a0c <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8005fca:	4b01      	ldr	r3, [pc, #4]	@ (8005fd0 <xTaskGetTickCountFromISR+0xc>)
 8005fcc:	6818      	ldr	r0, [r3, #0]
}
 8005fce:	bd08      	pop	{r3, pc}
 8005fd0:	240005c0 	.word	0x240005c0

08005fd4 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fd4:	4b51      	ldr	r3, [pc, #324]	@ (800611c <xTaskIncrementTick+0x148>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
{
 8005fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fdc:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d148      	bne.n	8006074 <xTaskIncrementTick+0xa0>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005fe2:	4b4f      	ldr	r3, [pc, #316]	@ (8006120 <xTaskIncrementTick+0x14c>)
 8005fe4:	681d      	ldr	r5, [r3, #0]
 8005fe6:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8005fe8:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005fea:	2d00      	cmp	r5, #0
 8005fec:	d04b      	beq.n	8006086 <xTaskIncrementTick+0xb2>
 8005fee:	4b4d      	ldr	r3, [pc, #308]	@ (8006124 <xTaskIncrementTick+0x150>)
 8005ff0:	9301      	str	r3, [sp, #4]
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005ff2:	9b01      	ldr	r3, [sp, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	429d      	cmp	r5, r3
 8005ff8:	d352      	bcc.n	80060a0 <xTaskIncrementTick+0xcc>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ffa:	4e4b      	ldr	r6, [pc, #300]	@ (8006128 <xTaskIncrementTick+0x154>)
 8005ffc:	6833      	ldr	r3, [r6, #0]
 8005ffe:	681c      	ldr	r4, [r3, #0]
 8006000:	2c00      	cmp	r4, #0
 8006002:	d079      	beq.n	80060f8 <xTaskIncrementTick+0x124>
BaseType_t xSwitchRequired = pdFALSE;
 8006004:	2400      	movs	r4, #0
 8006006:	f8df 8138 	ldr.w	r8, [pc, #312]	@ 8006140 <xTaskIncrementTick+0x16c>
 800600a:	f8df 9138 	ldr.w	r9, [pc, #312]	@ 8006144 <xTaskIncrementTick+0x170>
					prvAddTaskToReadyList( pxTCB );
 800600e:	4f47      	ldr	r7, [pc, #284]	@ (800612c <xTaskIncrementTick+0x158>)
 8006010:	e022      	b.n	8006058 <xTaskIncrementTick+0x84>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006012:	f7ff f803 	bl	800501c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006016:	f8db 2028 	ldr.w	r2, [fp, #40]	@ 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800601a:	f10b 0018 	add.w	r0, fp, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800601e:	b10a      	cbz	r2, 8006024 <xTaskIncrementTick+0x50>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006020:	f7fe fffc 	bl	800501c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006024:	f8db 002c 	ldr.w	r0, [fp, #44]	@ 0x2c
 8006028:	2201      	movs	r2, #1
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	4651      	mov	r1, sl
 800602e:	4082      	lsls	r2, r0
 8006030:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006034:	431a      	orrs	r2, r3
 8006036:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 800603a:	603a      	str	r2, [r7, #0]
 800603c:	f7fe ffc8 	bl	8004fd0 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006040:	f8d9 3000 	ldr.w	r3, [r9]
 8006044:	f8db 202c 	ldr.w	r2, [fp, #44]	@ 0x2c
 8006048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 800604a:	429a      	cmp	r2, r3
 800604c:	bf28      	it	cs
 800604e:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006050:	6833      	ldr	r3, [r6, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d053      	beq.n	8006100 <xTaskIncrementTick+0x12c>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006058:	6833      	ldr	r3, [r6, #0]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006060:	f8db 2004 	ldr.w	r2, [fp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006064:	f10b 0a04 	add.w	sl, fp, #4
					if( xConstTickCount < xItemValue )
 8006068:	4295      	cmp	r5, r2
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800606a:	4650      	mov	r0, sl
					if( xConstTickCount < xItemValue )
 800606c:	d2d1      	bcs.n	8006012 <xTaskIncrementTick+0x3e>
						xNextTaskUnblockTime = xItemValue;
 800606e:	9b01      	ldr	r3, [sp, #4]
 8006070:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006072:	e01a      	b.n	80060aa <xTaskIncrementTick+0xd6>
		++xPendedTicks;
 8006074:	4a2e      	ldr	r2, [pc, #184]	@ (8006130 <xTaskIncrementTick+0x15c>)
BaseType_t xSwitchRequired = pdFALSE;
 8006076:	2400      	movs	r4, #0
		++xPendedTicks;
 8006078:	6813      	ldr	r3, [r2, #0]
}
 800607a:	4620      	mov	r0, r4
		++xPendedTicks;
 800607c:	3301      	adds	r3, #1
 800607e:	6013      	str	r3, [r2, #0]
}
 8006080:	b003      	add	sp, #12
 8006082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8006086:	4b28      	ldr	r3, [pc, #160]	@ (8006128 <xTaskIncrementTick+0x154>)
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	6812      	ldr	r2, [r2, #0]
 800608c:	b30a      	cbz	r2, 80060d2 <xTaskIncrementTick+0xfe>
 800608e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006092:	f383 8811 	msr	BASEPRI, r3
 8006096:	f3bf 8f6f 	isb	sy
 800609a:	f3bf 8f4f 	dsb	sy
 800609e:	e7fe      	b.n	800609e <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 80060a0:	2400      	movs	r4, #0
 80060a2:	f8df 809c 	ldr.w	r8, [pc, #156]	@ 8006140 <xTaskIncrementTick+0x16c>
 80060a6:	f8df 909c 	ldr.w	r9, [pc, #156]	@ 8006144 <xTaskIncrementTick+0x170>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80060aa:	f8d9 3000 	ldr.w	r3, [r9]
			if( xYieldPending != pdFALSE )
 80060ae:	4921      	ldr	r1, [pc, #132]	@ (8006134 <xTaskIncrementTick+0x160>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80060b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060b2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	f858 2003 	ldr.w	r2, [r8, r3]
			if( xYieldPending != pdFALSE )
 80060bc:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
 80060be:	2a02      	cmp	r2, #2
 80060c0:	bf28      	it	cs
 80060c2:	2401      	movcs	r4, #1
				xSwitchRequired = pdTRUE;
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	bf18      	it	ne
 80060c8:	2401      	movne	r4, #1
}
 80060ca:	4620      	mov	r0, r4
 80060cc:	b003      	add	sp, #12
 80060ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 80060d2:	4a19      	ldr	r2, [pc, #100]	@ (8006138 <xTaskIncrementTick+0x164>)
 80060d4:	6818      	ldr	r0, [r3, #0]
 80060d6:	6811      	ldr	r1, [r2, #0]
 80060d8:	6019      	str	r1, [r3, #0]
 80060da:	4918      	ldr	r1, [pc, #96]	@ (800613c <xTaskIncrementTick+0x168>)
 80060dc:	6010      	str	r0, [r2, #0]
 80060de:	680a      	ldr	r2, [r1, #0]
 80060e0:	3201      	adds	r2, #1
 80060e2:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	6812      	ldr	r2, [r2, #0]
 80060e8:	b97a      	cbnz	r2, 800610a <xTaskIncrementTick+0x136>
		xNextTaskUnblockTime = portMAX_DELAY;
 80060ea:	4b0e      	ldr	r3, [pc, #56]	@ (8006124 <xTaskIncrementTick+0x150>)
 80060ec:	461a      	mov	r2, r3
 80060ee:	9301      	str	r3, [sp, #4]
 80060f0:	f04f 33ff 	mov.w	r3, #4294967295
 80060f4:	6013      	str	r3, [r2, #0]
 80060f6:	e77c      	b.n	8005ff2 <xTaskIncrementTick+0x1e>
 80060f8:	f8df 8044 	ldr.w	r8, [pc, #68]	@ 8006140 <xTaskIncrementTick+0x16c>
 80060fc:	f8df 9044 	ldr.w	r9, [pc, #68]	@ 8006144 <xTaskIncrementTick+0x170>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006100:	f04f 33ff 	mov.w	r3, #4294967295
 8006104:	9a01      	ldr	r2, [sp, #4]
 8006106:	6013      	str	r3, [r2, #0]
					break;
 8006108:	e7cf      	b.n	80060aa <xTaskIncrementTick+0xd6>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800610a:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800610c:	4a05      	ldr	r2, [pc, #20]	@ (8006124 <xTaskIncrementTick+0x150>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800610e:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006110:	9201      	str	r2, [sp, #4]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	6013      	str	r3, [r2, #0]
}
 8006118:	e76b      	b.n	8005ff2 <xTaskIncrementTick+0x1e>
 800611a:	bf00      	nop
 800611c:	240005a0 	.word	0x240005a0
 8006120:	240005c0 	.word	0x240005c0
 8006124:	240005a4 	.word	0x240005a4
 8006128:	2400060c 	.word	0x2400060c
 800612c:	240005bc 	.word	0x240005bc
 8006130:	240005b4 	.word	0x240005b4
 8006134:	240005b0 	.word	0x240005b0
 8006138:	24000608 	.word	0x24000608
 800613c:	240005ac 	.word	0x240005ac
 8006140:	24000638 	.word	0x24000638
 8006144:	24000778 	.word	0x24000778

08006148 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 8006148:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	taskENTER_CRITICAL();
 800614c:	f000 fb42 	bl	80067d4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8006150:	4b39      	ldr	r3, [pc, #228]	@ (8006238 <xTaskResumeAll.part.0+0xf0>)
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	3a01      	subs	r2, #1
 8006156:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d15d      	bne.n	800621a <xTaskResumeAll.part.0+0xd2>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800615e:	4b37      	ldr	r3, [pc, #220]	@ (800623c <xTaskResumeAll.part.0+0xf4>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d059      	beq.n	800621a <xTaskResumeAll.part.0+0xd2>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006166:	f8df b0ec 	ldr.w	fp, [pc, #236]	@ 8006254 <xTaskResumeAll.part.0+0x10c>
 800616a:	f8db 3000 	ldr.w	r3, [fp]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d05e      	beq.n	8006230 <xTaskResumeAll.part.0+0xe8>
 8006172:	4d33      	ldr	r5, [pc, #204]	@ (8006240 <xTaskResumeAll.part.0+0xf8>)
					prvAddTaskToReadyList( pxTCB );
 8006174:	2601      	movs	r6, #1
 8006176:	f8df 80e0 	ldr.w	r8, [pc, #224]	@ 8006258 <xTaskResumeAll.part.0+0x110>
 800617a:	4f32      	ldr	r7, [pc, #200]	@ (8006244 <xTaskResumeAll.part.0+0xfc>)
 800617c:	f8df 90dc 	ldr.w	r9, [pc, #220]	@ 800625c <xTaskResumeAll.part.0+0x114>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006180:	f8db 300c 	ldr.w	r3, [fp, #12]
 8006184:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006186:	f104 0a04 	add.w	sl, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800618a:	f104 0018 	add.w	r0, r4, #24
 800618e:	f7fe ff45 	bl	800501c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006192:	4650      	mov	r0, sl
 8006194:	f7fe ff42 	bl	800501c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006198:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800619a:	682a      	ldr	r2, [r5, #0]
 800619c:	4651      	mov	r1, sl
 800619e:	fa06 f300 	lsl.w	r3, r6, r0
 80061a2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80061a6:	4313      	orrs	r3, r2
 80061a8:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 80061ac:	602b      	str	r3, [r5, #0]
 80061ae:	f7fe ff0f 	bl	8004fd0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80061b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d301      	bcc.n	80061c0 <xTaskResumeAll.part.0+0x78>
						xYieldPending = pdTRUE;
 80061bc:	f8c9 6000 	str.w	r6, [r9]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80061c0:	f8db 3000 	ldr.w	r3, [fp]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d1db      	bne.n	8006180 <xTaskResumeAll.part.0+0x38>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061c8:	4b1f      	ldr	r3, [pc, #124]	@ (8006248 <xTaskResumeAll.part.0+0x100>)
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	6812      	ldr	r2, [r2, #0]
 80061ce:	b352      	cbz	r2, 8006226 <xTaskResumeAll.part.0+0xde>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061d0:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80061d2:	4b1e      	ldr	r3, [pc, #120]	@ (800624c <xTaskResumeAll.part.0+0x104>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061d4:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80061d6:	68d2      	ldr	r2, [r2, #12]
 80061d8:	6852      	ldr	r2, [r2, #4]
 80061da:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80061dc:	4e1c      	ldr	r6, [pc, #112]	@ (8006250 <xTaskResumeAll.part.0+0x108>)
 80061de:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 80061e0:	b144      	cbz	r4, 80061f4 <xTaskResumeAll.part.0+0xac>
								xYieldPending = pdTRUE;
 80061e2:	2501      	movs	r5, #1
							if( xTaskIncrementTick() != pdFALSE )
 80061e4:	f7ff fef6 	bl	8005fd4 <xTaskIncrementTick>
 80061e8:	b108      	cbz	r0, 80061ee <xTaskResumeAll.part.0+0xa6>
								xYieldPending = pdTRUE;
 80061ea:	f8c9 5000 	str.w	r5, [r9]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80061ee:	3c01      	subs	r4, #1
 80061f0:	d1f8      	bne.n	80061e4 <xTaskResumeAll.part.0+0x9c>
						xPendedTicks = 0;
 80061f2:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 80061f4:	f8d9 3000 	ldr.w	r3, [r9]
 80061f8:	b17b      	cbz	r3, 800621a <xTaskResumeAll.part.0+0xd2>
					taskYIELD_IF_USING_PREEMPTION();
 80061fa:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80061fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006202:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006206:	f3bf 8f4f 	dsb	sy
 800620a:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800620e:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8006210:	f000 fb02 	bl	8006818 <vPortExitCritical>
}
 8006214:	4620      	mov	r0, r4
 8006216:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
BaseType_t xAlreadyYielded = pdFALSE;
 800621a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800621c:	f000 fafc 	bl	8006818 <vPortExitCritical>
}
 8006220:	4620      	mov	r0, r4
 8006222:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xNextTaskUnblockTime = portMAX_DELAY;
 8006226:	4b09      	ldr	r3, [pc, #36]	@ (800624c <xTaskResumeAll.part.0+0x104>)
 8006228:	f04f 32ff 	mov.w	r2, #4294967295
 800622c:	601a      	str	r2, [r3, #0]
 800622e:	e7d5      	b.n	80061dc <xTaskResumeAll.part.0+0x94>
 8006230:	f8df 9028 	ldr.w	r9, [pc, #40]	@ 800625c <xTaskResumeAll.part.0+0x114>
 8006234:	e7d2      	b.n	80061dc <xTaskResumeAll.part.0+0x94>
 8006236:	bf00      	nop
 8006238:	240005a0 	.word	0x240005a0
 800623c:	240005c4 	.word	0x240005c4
 8006240:	240005bc 	.word	0x240005bc
 8006244:	24000778 	.word	0x24000778
 8006248:	2400060c 	.word	0x2400060c
 800624c:	240005a4 	.word	0x240005a4
 8006250:	240005b4 	.word	0x240005b4
 8006254:	240005f4 	.word	0x240005f4
 8006258:	24000638 	.word	0x24000638
 800625c:	240005b0 	.word	0x240005b0

08006260 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8006260:	4b06      	ldr	r3, [pc, #24]	@ (800627c <xTaskResumeAll+0x1c>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	b943      	cbnz	r3, 8006278 <xTaskResumeAll+0x18>
 8006266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800626a:	f383 8811 	msr	BASEPRI, r3
 800626e:	f3bf 8f6f 	isb	sy
 8006272:	f3bf 8f4f 	dsb	sy
 8006276:	e7fe      	b.n	8006276 <xTaskResumeAll+0x16>
 8006278:	f7ff bf66 	b.w	8006148 <xTaskResumeAll.part.0>
 800627c:	240005a0 	.word	0x240005a0

08006280 <vTaskDelay>:
	{
 8006280:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006282:	b950      	cbnz	r0, 800629a <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8006284:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006288:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800628c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006290:	f3bf 8f4f 	dsb	sy
 8006294:	f3bf 8f6f 	isb	sy
	}
 8006298:	bd10      	pop	{r4, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800629a:	4c10      	ldr	r4, [pc, #64]	@ (80062dc <vTaskDelay+0x5c>)
 800629c:	6821      	ldr	r1, [r4, #0]
 800629e:	b141      	cbz	r1, 80062b2 <vTaskDelay+0x32>
 80062a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062a4:	f383 8811 	msr	BASEPRI, r3
 80062a8:	f3bf 8f6f 	isb	sy
 80062ac:	f3bf 8f4f 	dsb	sy
 80062b0:	e7fe      	b.n	80062b0 <vTaskDelay+0x30>
	++uxSchedulerSuspended;
 80062b2:	6823      	ldr	r3, [r4, #0]
 80062b4:	3301      	adds	r3, #1
 80062b6:	6023      	str	r3, [r4, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80062b8:	f7ff fcd2 	bl	8005c60 <prvAddCurrentTaskToDelayedList>
	configASSERT( uxSchedulerSuspended );
 80062bc:	6823      	ldr	r3, [r4, #0]
 80062be:	b943      	cbnz	r3, 80062d2 <vTaskDelay+0x52>
 80062c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062c4:	f383 8811 	msr	BASEPRI, r3
 80062c8:	f3bf 8f6f 	isb	sy
 80062cc:	f3bf 8f4f 	dsb	sy
 80062d0:	e7fe      	b.n	80062d0 <vTaskDelay+0x50>
 80062d2:	f7ff ff39 	bl	8006148 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 80062d6:	2800      	cmp	r0, #0
 80062d8:	d0d4      	beq.n	8006284 <vTaskDelay+0x4>
	}
 80062da:	bd10      	pop	{r4, pc}
 80062dc:	240005a0 	.word	0x240005a0

080062e0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80062e0:	4b19      	ldr	r3, [pc, #100]	@ (8006348 <vTaskSwitchContext+0x68>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	b11b      	cbz	r3, 80062ee <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 80062e6:	4b19      	ldr	r3, [pc, #100]	@ (800634c <vTaskSwitchContext+0x6c>)
 80062e8:	2201      	movs	r2, #1
 80062ea:	601a      	str	r2, [r3, #0]
 80062ec:	4770      	bx	lr
		xYieldPending = pdFALSE;
 80062ee:	4917      	ldr	r1, [pc, #92]	@ (800634c <vTaskSwitchContext+0x6c>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062f0:	4a17      	ldr	r2, [pc, #92]	@ (8006350 <vTaskSwitchContext+0x70>)
		xYieldPending = pdFALSE;
 80062f2:	600b      	str	r3, [r1, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062f4:	6813      	ldr	r3, [r2, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80062f6:	fab3 f383 	clz	r3, r3
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	4915      	ldr	r1, [pc, #84]	@ (8006354 <vTaskSwitchContext+0x74>)
 80062fe:	f1c3 031f 	rsb	r3, r3, #31
 8006302:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006306:	009a      	lsls	r2, r3, #2
 8006308:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800630c:	5888      	ldr	r0, [r1, r2]
 800630e:	b940      	cbnz	r0, 8006322 <vTaskSwitchContext+0x42>
	__asm volatile
 8006310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006314:	f383 8811 	msr	BASEPRI, r3
 8006318:	f3bf 8f6f 	isb	sy
 800631c:	f3bf 8f4f 	dsb	sy
 8006320:	e7fe      	b.n	8006320 <vTaskSwitchContext+0x40>
 8006322:	6858      	ldr	r0, [r3, #4]
 8006324:	3208      	adds	r2, #8
 8006326:	6840      	ldr	r0, [r0, #4]
 8006328:	440a      	add	r2, r1
 800632a:	4290      	cmp	r0, r2
 800632c:	6058      	str	r0, [r3, #4]
 800632e:	d007      	beq.n	8006340 <vTaskSwitchContext+0x60>
 8006330:	4b09      	ldr	r3, [pc, #36]	@ (8006358 <vTaskSwitchContext+0x78>)
 8006332:	68c1      	ldr	r1, [r0, #12]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006334:	4a09      	ldr	r2, [pc, #36]	@ (800635c <vTaskSwitchContext+0x7c>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006336:	6019      	str	r1, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	334c      	adds	r3, #76	@ 0x4c
 800633c:	6013      	str	r3, [r2, #0]
}
 800633e:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006340:	6840      	ldr	r0, [r0, #4]
 8006342:	6058      	str	r0, [r3, #4]
 8006344:	e7f4      	b.n	8006330 <vTaskSwitchContext+0x50>
 8006346:	bf00      	nop
 8006348:	240005a0 	.word	0x240005a0
 800634c:	240005b0 	.word	0x240005b0
 8006350:	240005bc 	.word	0x240005bc
 8006354:	24000638 	.word	0x24000638
 8006358:	24000778 	.word	0x24000778
 800635c:	2400003c 	.word	0x2400003c

08006360 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8006360:	b160      	cbz	r0, 800637c <vTaskPlaceOnEventList+0x1c>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006362:	4b0b      	ldr	r3, [pc, #44]	@ (8006390 <vTaskPlaceOnEventList+0x30>)
{
 8006364:	b510      	push	{r4, lr}
 8006366:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006368:	6819      	ldr	r1, [r3, #0]
 800636a:	3118      	adds	r1, #24
 800636c:	f7fe fe3e 	bl	8004fec <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006370:	4620      	mov	r0, r4
 8006372:	2101      	movs	r1, #1
}
 8006374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006378:	f7ff bc72 	b.w	8005c60 <prvAddCurrentTaskToDelayedList>
 800637c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006380:	f383 8811 	msr	BASEPRI, r3
 8006384:	f3bf 8f6f 	isb	sy
 8006388:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 800638c:	e7fe      	b.n	800638c <vTaskPlaceOnEventList+0x2c>
 800638e:	bf00      	nop
 8006390:	24000778 	.word	0x24000778

08006394 <xTaskRemoveFromEventList>:
{
 8006394:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006396:	68c3      	ldr	r3, [r0, #12]
 8006398:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800639a:	b354      	cbz	r4, 80063f2 <xTaskRemoveFromEventList+0x5e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800639c:	f104 0518 	add.w	r5, r4, #24
 80063a0:	4628      	mov	r0, r5
 80063a2:	f7fe fe3b 	bl	800501c <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063a6:	4b18      	ldr	r3, [pc, #96]	@ (8006408 <xTaskRemoveFromEventList+0x74>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	b173      	cbz	r3, 80063ca <xTaskRemoveFromEventList+0x36>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80063ac:	4629      	mov	r1, r5
 80063ae:	4817      	ldr	r0, [pc, #92]	@ (800640c <xTaskRemoveFromEventList+0x78>)
 80063b0:	f7fe fe0e 	bl	8004fd0 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80063b4:	4b16      	ldr	r3, [pc, #88]	@ (8006410 <xTaskRemoveFromEventList+0x7c>)
 80063b6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063bc:	429a      	cmp	r2, r3
 80063be:	d921      	bls.n	8006404 <xTaskRemoveFromEventList+0x70>
		xYieldPending = pdTRUE;
 80063c0:	2301      	movs	r3, #1
 80063c2:	4a14      	ldr	r2, [pc, #80]	@ (8006414 <xTaskRemoveFromEventList+0x80>)
		xReturn = pdTRUE;
 80063c4:	4618      	mov	r0, r3
		xYieldPending = pdTRUE;
 80063c6:	6013      	str	r3, [r2, #0]
}
 80063c8:	bd38      	pop	{r3, r4, r5, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80063ca:	1d25      	adds	r5, r4, #4
 80063cc:	4628      	mov	r0, r5
 80063ce:	f7fe fe25 	bl	800501c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80063d2:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80063d4:	4a10      	ldr	r2, [pc, #64]	@ (8006418 <xTaskRemoveFromEventList+0x84>)
 80063d6:	2301      	movs	r3, #1
 80063d8:	4629      	mov	r1, r5
 80063da:	4083      	lsls	r3, r0
 80063dc:	6815      	ldr	r5, [r2, #0]
 80063de:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80063e2:	432b      	orrs	r3, r5
 80063e4:	6013      	str	r3, [r2, #0]
 80063e6:	4b0d      	ldr	r3, [pc, #52]	@ (800641c <xTaskRemoveFromEventList+0x88>)
 80063e8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80063ec:	f7fe fdf0 	bl	8004fd0 <vListInsertEnd>
 80063f0:	e7e0      	b.n	80063b4 <xTaskRemoveFromEventList+0x20>
 80063f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063f6:	f383 8811 	msr	BASEPRI, r3
 80063fa:	f3bf 8f6f 	isb	sy
 80063fe:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8006402:	e7fe      	b.n	8006402 <xTaskRemoveFromEventList+0x6e>
		xReturn = pdFALSE;
 8006404:	2000      	movs	r0, #0
}
 8006406:	bd38      	pop	{r3, r4, r5, pc}
 8006408:	240005a0 	.word	0x240005a0
 800640c:	240005f4 	.word	0x240005f4
 8006410:	24000778 	.word	0x24000778
 8006414:	240005b0 	.word	0x240005b0
 8006418:	240005bc 	.word	0x240005bc
 800641c:	24000638 	.word	0x24000638

08006420 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006420:	4a03      	ldr	r2, [pc, #12]	@ (8006430 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006422:	4b04      	ldr	r3, [pc, #16]	@ (8006434 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006424:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	e9c0 2300 	strd	r2, r3, [r0]
}
 800642c:	4770      	bx	lr
 800642e:	bf00      	nop
 8006430:	240005ac 	.word	0x240005ac
 8006434:	240005c0 	.word	0x240005c0

08006438 <xTaskCheckForTimeOut>:
{
 8006438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 800643a:	b308      	cbz	r0, 8006480 <xTaskCheckForTimeOut+0x48>
	configASSERT( pxTicksToWait );
 800643c:	460d      	mov	r5, r1
 800643e:	b1b1      	cbz	r1, 800646e <xTaskCheckForTimeOut+0x36>
 8006440:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8006442:	f000 f9c7 	bl	80067d4 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 8006446:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 8006448:	4a1a      	ldr	r2, [pc, #104]	@ (80064b4 <xTaskCheckForTimeOut+0x7c>)
			if( *pxTicksToWait == portMAX_DELAY )
 800644a:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 800644c:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800644e:	d02c      	beq.n	80064aa <xTaskCheckForTimeOut+0x72>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006450:	f8df c064 	ldr.w	ip, [pc, #100]	@ 80064b8 <xTaskCheckForTimeOut+0x80>
 8006454:	6826      	ldr	r6, [r4, #0]
 8006456:	f8dc 7000 	ldr.w	r7, [ip]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800645a:	6860      	ldr	r0, [r4, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800645c:	42be      	cmp	r6, r7
 800645e:	d018      	beq.n	8006492 <xTaskCheckForTimeOut+0x5a>
 8006460:	4288      	cmp	r0, r1
 8006462:	d816      	bhi.n	8006492 <xTaskCheckForTimeOut+0x5a>
			xReturn = pdTRUE;
 8006464:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8006466:	f000 f9d7 	bl	8006818 <vPortExitCritical>
}
 800646a:	4620      	mov	r0, r4
 800646c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800646e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006472:	f383 8811 	msr	BASEPRI, r3
 8006476:	f3bf 8f6f 	isb	sy
 800647a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 800647e:	e7fe      	b.n	800647e <xTaskCheckForTimeOut+0x46>
 8006480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006484:	f383 8811 	msr	BASEPRI, r3
 8006488:	f3bf 8f6f 	isb	sy
 800648c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8006490:	e7fe      	b.n	8006490 <xTaskCheckForTimeOut+0x58>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006492:	eba1 0e00 	sub.w	lr, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006496:	4573      	cmp	r3, lr
 8006498:	d909      	bls.n	80064ae <xTaskCheckForTimeOut+0x76>
			*pxTicksToWait -= xElapsedTime;
 800649a:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800649c:	f8dc 1000 	ldr.w	r1, [ip]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80064a0:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
 80064a2:	4403      	add	r3, r0
 80064a4:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80064a6:	e9c4 1200 	strd	r1, r2, [r4]
				xReturn = pdFALSE;
 80064aa:	2400      	movs	r4, #0
 80064ac:	e7db      	b.n	8006466 <xTaskCheckForTimeOut+0x2e>
			*pxTicksToWait = 0;
 80064ae:	2300      	movs	r3, #0
 80064b0:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 80064b2:	e7d7      	b.n	8006464 <xTaskCheckForTimeOut+0x2c>
 80064b4:	240005c0 	.word	0x240005c0
 80064b8:	240005ac 	.word	0x240005ac

080064bc <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80064bc:	4b01      	ldr	r3, [pc, #4]	@ (80064c4 <vTaskMissedYield+0x8>)
 80064be:	2201      	movs	r2, #1
 80064c0:	601a      	str	r2, [r3, #0]
}
 80064c2:	4770      	bx	lr
 80064c4:	240005b0 	.word	0x240005b0

080064c8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80064c8:	4b05      	ldr	r3, [pc, #20]	@ (80064e0 <xTaskGetSchedulerState+0x18>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	b133      	cbz	r3, 80064dc <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064ce:	4b05      	ldr	r3, [pc, #20]	@ (80064e4 <xTaskGetSchedulerState+0x1c>)
 80064d0:	6818      	ldr	r0, [r3, #0]
 80064d2:	fab0 f080 	clz	r0, r0
 80064d6:	0940      	lsrs	r0, r0, #5
 80064d8:	0040      	lsls	r0, r0, #1
 80064da:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80064dc:	2001      	movs	r0, #1
	}
 80064de:	4770      	bx	lr
 80064e0:	240005b8 	.word	0x240005b8
 80064e4:	240005a0 	.word	0x240005a0

080064e8 <xTaskPriorityInherit>:
	{
 80064e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 80064ea:	4604      	mov	r4, r0
 80064ec:	b1c8      	cbz	r0, 8006522 <xTaskPriorityInherit+0x3a>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80064ee:	4d20      	ldr	r5, [pc, #128]	@ (8006570 <xTaskPriorityInherit+0x88>)
 80064f0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80064f2:	682a      	ldr	r2, [r5, #0]
 80064f4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d214      	bcs.n	8006524 <xTaskPriorityInherit+0x3c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80064fa:	6982      	ldr	r2, [r0, #24]
 80064fc:	2a00      	cmp	r2, #0
 80064fe:	db04      	blt.n	800650a <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006500:	682a      	ldr	r2, [r5, #0]
 8006502:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006504:	f1c2 0210 	rsb	r2, r2, #16
 8006508:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800650a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800650e:	4e19      	ldr	r6, [pc, #100]	@ (8006574 <xTaskPriorityInherit+0x8c>)
 8006510:	6962      	ldr	r2, [r4, #20]
 8006512:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006516:	429a      	cmp	r2, r3
 8006518:	d00c      	beq.n	8006534 <xTaskPriorityInherit+0x4c>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800651a:	682b      	ldr	r3, [r5, #0]
 800651c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800651e:	62e3      	str	r3, [r4, #44]	@ 0x2c
				xReturn = pdTRUE;
 8006520:	2001      	movs	r0, #1
	}
 8006522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006524:	682b      	ldr	r3, [r5, #0]
 8006526:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 8006528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800652a:	4298      	cmp	r0, r3
 800652c:	bf2c      	ite	cs
 800652e:	2000      	movcs	r0, #0
 8006530:	2001      	movcc	r0, #1
	}
 8006532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006534:	1d27      	adds	r7, r4, #4
 8006536:	4638      	mov	r0, r7
 8006538:	f7fe fd70 	bl	800501c <uxListRemove>
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800653c:	4a0e      	ldr	r2, [pc, #56]	@ (8006578 <xTaskPriorityInherit+0x90>)
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800653e:	b930      	cbnz	r0, 800654e <xTaskPriorityInherit+0x66>
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8006540:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006542:	2101      	movs	r1, #1
 8006544:	4099      	lsls	r1, r3
 8006546:	6813      	ldr	r3, [r2, #0]
 8006548:	ea23 0301 	bic.w	r3, r3, r1
 800654c:	6013      	str	r3, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800654e:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006550:	4639      	mov	r1, r7
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006552:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006554:	2301      	movs	r3, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006556:	62e0      	str	r0, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006558:	4083      	lsls	r3, r0
 800655a:	6814      	ldr	r4, [r2, #0]
 800655c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006560:	4323      	orrs	r3, r4
 8006562:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8006566:	6013      	str	r3, [r2, #0]
 8006568:	f7fe fd32 	bl	8004fd0 <vListInsertEnd>
 800656c:	e7d8      	b.n	8006520 <xTaskPriorityInherit+0x38>
 800656e:	bf00      	nop
 8006570:	24000778 	.word	0x24000778
 8006574:	24000638 	.word	0x24000638
 8006578:	240005bc 	.word	0x240005bc

0800657c <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800657c:	b310      	cbz	r0, 80065c4 <xTaskPriorityDisinherit+0x48>
	{
 800657e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 8006580:	4b27      	ldr	r3, [pc, #156]	@ (8006620 <xTaskPriorityDisinherit+0xa4>)
 8006582:	4604      	mov	r4, r0
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4283      	cmp	r3, r0
 8006588:	d008      	beq.n	800659c <xTaskPriorityDisinherit+0x20>
 800658a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800658e:	f383 8811 	msr	BASEPRI, r3
 8006592:	f3bf 8f6f 	isb	sy
 8006596:	f3bf 8f4f 	dsb	sy
 800659a:	e7fe      	b.n	800659a <xTaskPriorityDisinherit+0x1e>
			configASSERT( pxTCB->uxMutexesHeld );
 800659c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800659e:	b143      	cbz	r3, 80065b2 <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80065a0:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
			( pxTCB->uxMutexesHeld )--;
 80065a2:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80065a4:	6c42      	ldr	r2, [r0, #68]	@ 0x44
			( pxTCB->uxMutexesHeld )--;
 80065a6:	6483      	str	r3, [r0, #72]	@ 0x48
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80065a8:	4291      	cmp	r1, r2
 80065aa:	d000      	beq.n	80065ae <xTaskPriorityDisinherit+0x32>
 80065ac:	b163      	cbz	r3, 80065c8 <xTaskPriorityDisinherit+0x4c>
	BaseType_t xReturn = pdFALSE;
 80065ae:	2000      	movs	r0, #0
	}
 80065b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065b6:	f383 8811 	msr	BASEPRI, r3
 80065ba:	f3bf 8f6f 	isb	sy
 80065be:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 80065c2:	e7fe      	b.n	80065c2 <xTaskPriorityDisinherit+0x46>
	BaseType_t xReturn = pdFALSE;
 80065c4:	2000      	movs	r0, #0
	}
 80065c6:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065c8:	1d06      	adds	r6, r0, #4
 80065ca:	4630      	mov	r0, r6
 80065cc:	f7fe fd26 	bl	800501c <uxListRemove>
 80065d0:	b1a8      	cbz	r0, 80065fe <xTaskPriorityDisinherit+0x82>
 80065d2:	4814      	ldr	r0, [pc, #80]	@ (8006624 <xTaskPriorityDisinherit+0xa8>)
 80065d4:	4a14      	ldr	r2, [pc, #80]	@ (8006628 <xTaskPriorityDisinherit+0xac>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80065d6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
					prvAddTaskToReadyList( pxTCB );
 80065d8:	2501      	movs	r5, #1
 80065da:	4631      	mov	r1, r6
 80065dc:	6816      	ldr	r6, [r2, #0]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065de:	f1c3 0710 	rsb	r7, r3, #16
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80065e2:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065e4:	61a7      	str	r7, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80065e6:	fa05 f403 	lsl.w	r4, r5, r3
 80065ea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80065ee:	4334      	orrs	r4, r6
 80065f0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80065f4:	6014      	str	r4, [r2, #0]
 80065f6:	f7fe fceb 	bl	8004fd0 <vListInsertEnd>
					xReturn = pdTRUE;
 80065fa:	4628      	mov	r0, r5
	}
 80065fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80065fe:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006600:	4808      	ldr	r0, [pc, #32]	@ (8006624 <xTaskPriorityDisinherit+0xa8>)
 8006602:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8006606:	0092      	lsls	r2, r2, #2
 8006608:	5882      	ldr	r2, [r0, r2]
 800660a:	b10a      	cbz	r2, 8006610 <xTaskPriorityDisinherit+0x94>
 800660c:	4a06      	ldr	r2, [pc, #24]	@ (8006628 <xTaskPriorityDisinherit+0xac>)
 800660e:	e7e2      	b.n	80065d6 <xTaskPriorityDisinherit+0x5a>
 8006610:	4a05      	ldr	r2, [pc, #20]	@ (8006628 <xTaskPriorityDisinherit+0xac>)
 8006612:	2501      	movs	r5, #1
 8006614:	409d      	lsls	r5, r3
 8006616:	6813      	ldr	r3, [r2, #0]
 8006618:	ea23 0305 	bic.w	r3, r3, r5
 800661c:	6013      	str	r3, [r2, #0]
 800661e:	e7da      	b.n	80065d6 <xTaskPriorityDisinherit+0x5a>
 8006620:	24000778 	.word	0x24000778
 8006624:	24000638 	.word	0x24000638
 8006628:	240005bc 	.word	0x240005bc

0800662c <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 800662c:	2800      	cmp	r0, #0
 800662e:	d03e      	beq.n	80066ae <vTaskPriorityDisinheritAfterTimeout+0x82>
			configASSERT( pxTCB->uxMutexesHeld );
 8006630:	6c83      	ldr	r3, [r0, #72]	@ 0x48
	{
 8006632:	b570      	push	{r4, r5, r6, lr}
 8006634:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 8006636:	b14b      	cbz	r3, 800664c <vTaskPriorityDisinheritAfterTimeout+0x20>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006638:	6c40      	ldr	r0, [r0, #68]	@ 0x44
			if( pxTCB->uxPriority != uxPriorityToUse )
 800663a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800663c:	4281      	cmp	r1, r0
 800663e:	bf38      	it	cc
 8006640:	4601      	movcc	r1, r0
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006642:	428a      	cmp	r2, r1
 8006644:	d001      	beq.n	800664a <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8006646:	2b01      	cmp	r3, #1
 8006648:	d009      	beq.n	800665e <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 800664a:	bd70      	pop	{r4, r5, r6, pc}
 800664c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006650:	f383 8811 	msr	BASEPRI, r3
 8006654:	f3bf 8f6f 	isb	sy
 8006658:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 800665c:	e7fe      	b.n	800665c <vTaskPriorityDisinheritAfterTimeout+0x30>
					configASSERT( pxTCB != pxCurrentTCB );
 800665e:	4b1d      	ldr	r3, [pc, #116]	@ (80066d4 <vTaskPriorityDisinheritAfterTimeout+0xa8>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	42a3      	cmp	r3, r4
 8006664:	d024      	beq.n	80066b0 <vTaskPriorityDisinheritAfterTimeout+0x84>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006666:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
 8006668:	62e1      	str	r1, [r4, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800666a:	2b00      	cmp	r3, #0
 800666c:	db02      	blt.n	8006674 <vTaskPriorityDisinheritAfterTimeout+0x48>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800666e:	f1c1 0110 	rsb	r1, r1, #16
 8006672:	61a1      	str	r1, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006674:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8006678:	4d17      	ldr	r5, [pc, #92]	@ (80066d8 <vTaskPriorityDisinheritAfterTimeout+0xac>)
 800667a:	6961      	ldr	r1, [r4, #20]
 800667c:	eb05 0382 	add.w	r3, r5, r2, lsl #2
 8006680:	4299      	cmp	r1, r3
 8006682:	d1e2      	bne.n	800664a <vTaskPriorityDisinheritAfterTimeout+0x1e>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006684:	1d26      	adds	r6, r4, #4
 8006686:	4630      	mov	r0, r6
 8006688:	f7fe fcc8 	bl	800501c <uxListRemove>
 800668c:	b1c8      	cbz	r0, 80066c2 <vTaskPriorityDisinheritAfterTimeout+0x96>
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800668e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
						prvAddTaskToReadyList( pxTCB );
 8006690:	2301      	movs	r3, #1
 8006692:	4a12      	ldr	r2, [pc, #72]	@ (80066dc <vTaskPriorityDisinheritAfterTimeout+0xb0>)
 8006694:	4083      	lsls	r3, r0
 8006696:	6814      	ldr	r4, [r2, #0]
 8006698:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800669c:	4631      	mov	r1, r6
 800669e:	4323      	orrs	r3, r4
 80066a0:	eb05 0080 	add.w	r0, r5, r0, lsl #2
	}
 80066a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 80066a8:	6013      	str	r3, [r2, #0]
 80066aa:	f7fe bc91 	b.w	8004fd0 <vListInsertEnd>
 80066ae:	4770      	bx	lr
 80066b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066b4:	f383 8811 	msr	BASEPRI, r3
 80066b8:	f3bf 8f6f 	isb	sy
 80066bc:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 80066c0:	e7fe      	b.n	80066c0 <vTaskPriorityDisinheritAfterTimeout+0x94>
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80066c2:	4a06      	ldr	r2, [pc, #24]	@ (80066dc <vTaskPriorityDisinheritAfterTimeout+0xb0>)
 80066c4:	2301      	movs	r3, #1
 80066c6:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80066c8:	6814      	ldr	r4, [r2, #0]
 80066ca:	4083      	lsls	r3, r0
 80066cc:	ea24 0403 	bic.w	r4, r4, r3
 80066d0:	6014      	str	r4, [r2, #0]
 80066d2:	e7e0      	b.n	8006696 <vTaskPriorityDisinheritAfterTimeout+0x6a>
 80066d4:	24000778 	.word	0x24000778
 80066d8:	24000638 	.word	0x24000638
 80066dc:	240005bc 	.word	0x240005bc

080066e0 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80066e0:	4b04      	ldr	r3, [pc, #16]	@ (80066f4 <pvTaskIncrementMutexHeldCount+0x14>)
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	b11a      	cbz	r2, 80066ee <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 80066e6:	6819      	ldr	r1, [r3, #0]
 80066e8:	6c8a      	ldr	r2, [r1, #72]	@ 0x48
 80066ea:	3201      	adds	r2, #1
 80066ec:	648a      	str	r2, [r1, #72]	@ 0x48
		return pxCurrentTCB;
 80066ee:	6818      	ldr	r0, [r3, #0]
	}
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop
 80066f4:	24000778 	.word	0x24000778

080066f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80066f8:	4808      	ldr	r0, [pc, #32]	@ (800671c <prvPortStartFirstTask+0x24>)
 80066fa:	6800      	ldr	r0, [r0, #0]
 80066fc:	6800      	ldr	r0, [r0, #0]
 80066fe:	f380 8808 	msr	MSP, r0
 8006702:	f04f 0000 	mov.w	r0, #0
 8006706:	f380 8814 	msr	CONTROL, r0
 800670a:	b662      	cpsie	i
 800670c:	b661      	cpsie	f
 800670e:	f3bf 8f4f 	dsb	sy
 8006712:	f3bf 8f6f 	isb	sy
 8006716:	df00      	svc	0
 8006718:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800671a:	0000      	.short	0x0000
 800671c:	e000ed08 	.word	0xe000ed08

08006720 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006720:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006730 <vPortEnableVFP+0x10>
 8006724:	6801      	ldr	r1, [r0, #0]
 8006726:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800672a:	6001      	str	r1, [r0, #0]
 800672c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800672e:	0000      	.short	0x0000
 8006730:	e000ed88 	.word	0xe000ed88

08006734 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 8006734:	4b0e      	ldr	r3, [pc, #56]	@ (8006770 <prvTaskExitError+0x3c>)
{
 8006736:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8006738:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 800673a:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0;
 800673c:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800673e:	3301      	adds	r3, #1
 8006740:	d008      	beq.n	8006754 <prvTaskExitError+0x20>
 8006742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006746:	f383 8811 	msr	BASEPRI, r3
 800674a:	f3bf 8f6f 	isb	sy
 800674e:	f3bf 8f4f 	dsb	sy
 8006752:	e7fe      	b.n	8006752 <prvTaskExitError+0x1e>
 8006754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006758:	f383 8811 	msr	BASEPRI, r3
 800675c:	f3bf 8f6f 	isb	sy
 8006760:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8006764:	9b01      	ldr	r3, [sp, #4]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d0fc      	beq.n	8006764 <prvTaskExitError+0x30>
}
 800676a:	b002      	add	sp, #8
 800676c:	4770      	bx	lr
 800676e:	bf00      	nop
 8006770:	24000024 	.word	0x24000024

08006774 <pxPortInitialiseStack>:
{
 8006774:	4603      	mov	r3, r0
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006776:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800677a:	4809      	ldr	r0, [pc, #36]	@ (80067a0 <pxPortInitialiseStack+0x2c>)
{
 800677c:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800677e:	f04f 7480 	mov.w	r4, #16777216	@ 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006782:	f843 0c0c 	str.w	r0, [r3, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006786:	f843 2c20 	str.w	r2, [r3, #-32]
}
 800678a:	f1a3 0044 	sub.w	r0, r3, #68	@ 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800678e:	e943 1402 	strd	r1, r4, [r3, #-8]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006792:	f06f 0102 	mvn.w	r1, #2
}
 8006796:	f85d 4b04 	ldr.w	r4, [sp], #4
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800679a:	f843 1c24 	str.w	r1, [r3, #-36]
}
 800679e:	4770      	bx	lr
 80067a0:	08006735 	.word	0x08006735
	...

080067b0 <SVC_Handler>:
	__asm volatile (
 80067b0:	4b07      	ldr	r3, [pc, #28]	@ (80067d0 <pxCurrentTCBConst2>)
 80067b2:	6819      	ldr	r1, [r3, #0]
 80067b4:	6808      	ldr	r0, [r1, #0]
 80067b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ba:	f380 8809 	msr	PSP, r0
 80067be:	f3bf 8f6f 	isb	sy
 80067c2:	f04f 0000 	mov.w	r0, #0
 80067c6:	f380 8811 	msr	BASEPRI, r0
 80067ca:	4770      	bx	lr
 80067cc:	f3af 8000 	nop.w

080067d0 <pxCurrentTCBConst2>:
 80067d0:	24000778 	.word	0x24000778

080067d4 <vPortEnterCritical>:
 80067d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067d8:	f383 8811 	msr	BASEPRI, r3
 80067dc:	f3bf 8f6f 	isb	sy
 80067e0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80067e4:	4a0b      	ldr	r2, [pc, #44]	@ (8006814 <vPortEnterCritical+0x40>)
 80067e6:	6813      	ldr	r3, [r2, #0]
 80067e8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80067ea:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80067ec:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80067ee:	d000      	beq.n	80067f2 <vPortEnterCritical+0x1e>
}
 80067f0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80067f2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80067f6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d0f7      	beq.n	80067f0 <vPortEnterCritical+0x1c>
 8006800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006804:	f383 8811 	msr	BASEPRI, r3
 8006808:	f3bf 8f6f 	isb	sy
 800680c:	f3bf 8f4f 	dsb	sy
 8006810:	e7fe      	b.n	8006810 <vPortEnterCritical+0x3c>
 8006812:	bf00      	nop
 8006814:	24000024 	.word	0x24000024

08006818 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8006818:	4a08      	ldr	r2, [pc, #32]	@ (800683c <vPortExitCritical+0x24>)
 800681a:	6813      	ldr	r3, [r2, #0]
 800681c:	b943      	cbnz	r3, 8006830 <vPortExitCritical+0x18>
 800681e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006822:	f383 8811 	msr	BASEPRI, r3
 8006826:	f3bf 8f6f 	isb	sy
 800682a:	f3bf 8f4f 	dsb	sy
 800682e:	e7fe      	b.n	800682e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8006830:	3b01      	subs	r3, #1
 8006832:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006834:	b90b      	cbnz	r3, 800683a <vPortExitCritical+0x22>
	__asm volatile
 8006836:	f383 8811 	msr	BASEPRI, r3
}
 800683a:	4770      	bx	lr
 800683c:	24000024 	.word	0x24000024

08006840 <PendSV_Handler>:
	__asm volatile
 8006840:	f3ef 8009 	mrs	r0, PSP
 8006844:	f3bf 8f6f 	isb	sy
 8006848:	4b15      	ldr	r3, [pc, #84]	@ (80068a0 <pxCurrentTCBConst>)
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	f01e 0f10 	tst.w	lr, #16
 8006850:	bf08      	it	eq
 8006852:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006856:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800685a:	6010      	str	r0, [r2, #0]
 800685c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006860:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006864:	f380 8811 	msr	BASEPRI, r0
 8006868:	f3bf 8f4f 	dsb	sy
 800686c:	f3bf 8f6f 	isb	sy
 8006870:	f7ff fd36 	bl	80062e0 <vTaskSwitchContext>
 8006874:	f04f 0000 	mov.w	r0, #0
 8006878:	f380 8811 	msr	BASEPRI, r0
 800687c:	bc09      	pop	{r0, r3}
 800687e:	6819      	ldr	r1, [r3, #0]
 8006880:	6808      	ldr	r0, [r1, #0]
 8006882:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006886:	f01e 0f10 	tst.w	lr, #16
 800688a:	bf08      	it	eq
 800688c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006890:	f380 8809 	msr	PSP, r0
 8006894:	f3bf 8f6f 	isb	sy
 8006898:	4770      	bx	lr
 800689a:	bf00      	nop
 800689c:	f3af 8000 	nop.w

080068a0 <pxCurrentTCBConst>:
 80068a0:	24000778 	.word	0x24000778

080068a4 <SysTick_Handler>:
{
 80068a4:	b508      	push	{r3, lr}
	__asm volatile
 80068a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068aa:	f383 8811 	msr	BASEPRI, r3
 80068ae:	f3bf 8f6f 	isb	sy
 80068b2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80068b6:	f7ff fb8d 	bl	8005fd4 <xTaskIncrementTick>
 80068ba:	b128      	cbz	r0, 80068c8 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80068bc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80068c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068c4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 80068c8:	2300      	movs	r3, #0
 80068ca:	f383 8811 	msr	BASEPRI, r3
}
 80068ce:	bd08      	pop	{r3, pc}

080068d0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80068d0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 80068d4:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80068d6:	4806      	ldr	r0, [pc, #24]	@ (80068f0 <vPortSetupTimerInterrupt+0x20>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80068d8:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80068da:	4906      	ldr	r1, [pc, #24]	@ (80068f4 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80068dc:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80068de:	6803      	ldr	r3, [r0, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80068e0:	2007      	movs	r0, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80068e2:	fba1 1303 	umull	r1, r3, r1, r3
 80068e6:	099b      	lsrs	r3, r3, #6
 80068e8:	3b01      	subs	r3, #1
 80068ea:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80068ec:	6110      	str	r0, [r2, #16]
}
 80068ee:	4770      	bx	lr
 80068f0:	24000004 	.word	0x24000004
 80068f4:	10624dd3 	.word	0x10624dd3

080068f8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80068f8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80068fc:	4a3d      	ldr	r2, [pc, #244]	@ (80069f4 <xPortStartScheduler+0xfc>)
 80068fe:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 8006902:	4291      	cmp	r1, r2
 8006904:	d041      	beq.n	800698a <xPortStartScheduler+0x92>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006906:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800690a:	4b3b      	ldr	r3, [pc, #236]	@ (80069f8 <xPortStartScheduler+0x100>)
 800690c:	429a      	cmp	r2, r3
 800690e:	d033      	beq.n	8006978 <xPortStartScheduler+0x80>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006910:	4b3a      	ldr	r3, [pc, #232]	@ (80069fc <xPortStartScheduler+0x104>)
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006912:	f04f 0cff 	mov.w	ip, #255	@ 0xff
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006916:	483a      	ldr	r0, [pc, #232]	@ (8006a00 <xPortStartScheduler+0x108>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006918:	493a      	ldr	r1, [pc, #232]	@ (8006a04 <xPortStartScheduler+0x10c>)
{
 800691a:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800691c:	781a      	ldrb	r2, [r3, #0]
{
 800691e:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006920:	b2d2      	uxtb	r2, r2
 8006922:	9201      	str	r2, [sp, #4]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006924:	2207      	movs	r2, #7
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006926:	f883 c000 	strb.w	ip, [r3]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800692a:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800692c:	6002      	str	r2, [r0, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800692e:	b2db      	uxtb	r3, r3
 8006930:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006934:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006938:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800693c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006940:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006942:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006944:	d50f      	bpl.n	8006966 <xPortStartScheduler+0x6e>
 8006946:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006948:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800694c:	4611      	mov	r1, r2
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800694e:	3a01      	subs	r2, #1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006950:	005b      	lsls	r3, r3, #1
 8006952:	b2db      	uxtb	r3, r3
 8006954:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006958:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800695c:	061b      	lsls	r3, r3, #24
 800695e:	d4f3      	bmi.n	8006948 <xPortStartScheduler+0x50>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006960:	2903      	cmp	r1, #3
 8006962:	d01b      	beq.n	800699c <xPortStartScheduler+0xa4>
 8006964:	6001      	str	r1, [r0, #0]
	__asm volatile
 8006966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800696a:	f383 8811 	msr	BASEPRI, r3
 800696e:	f3bf 8f6f 	isb	sy
 8006972:	f3bf 8f4f 	dsb	sy
 8006976:	e7fe      	b.n	8006976 <xPortStartScheduler+0x7e>
 8006978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800697c:	f383 8811 	msr	BASEPRI, r3
 8006980:	f3bf 8f6f 	isb	sy
 8006984:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006988:	e7fe      	b.n	8006988 <xPortStartScheduler+0x90>
 800698a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800698e:	f383 8811 	msr	BASEPRI, r3
 8006992:	f3bf 8f6f 	isb	sy
 8006996:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800699a:	e7fe      	b.n	800699a <xPortStartScheduler+0xa2>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800699c:	9b01      	ldr	r3, [sp, #4]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800699e:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80069a2:	4a16      	ldr	r2, [pc, #88]	@ (80069fc <xPortStartScheduler+0x104>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80069a4:	f44f 7140 	mov.w	r1, #768	@ 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80069a8:	b2db      	uxtb	r3, r3
	uxCriticalNesting = 0;
 80069aa:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80069ac:	6001      	str	r1, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80069ae:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80069b0:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 80069b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80069b8:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80069bc:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 80069c0:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80069c4:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 80069c8:	f7ff ff82 	bl	80068d0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80069cc:	4b0e      	ldr	r3, [pc, #56]	@ (8006a08 <xPortStartScheduler+0x110>)
 80069ce:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 80069d0:	f7ff fea6 	bl	8006720 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80069d4:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 80069d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80069dc:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 80069e0:	f7ff fe8a 	bl	80066f8 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80069e4:	f7ff fc7c 	bl	80062e0 <vTaskSwitchContext>
}
 80069e8:	4628      	mov	r0, r5
	prvTaskExitError();
 80069ea:	f7ff fea3 	bl	8006734 <prvTaskExitError>
}
 80069ee:	b003      	add	sp, #12
 80069f0:	bd30      	pop	{r4, r5, pc}
 80069f2:	bf00      	nop
 80069f4:	410fc271 	.word	0x410fc271
 80069f8:	410fc270 	.word	0x410fc270
 80069fc:	e000e400 	.word	0xe000e400
 8006a00:	2400077c 	.word	0x2400077c
 8006a04:	24000780 	.word	0x24000780
 8006a08:	24000024 	.word	0x24000024

08006a0c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006a0c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006a10:	2b0f      	cmp	r3, #15
 8006a12:	d90e      	bls.n	8006a32 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006a14:	4911      	ldr	r1, [pc, #68]	@ (8006a5c <vPortValidateInterruptPriority+0x50>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006a16:	4a12      	ldr	r2, [pc, #72]	@ (8006a60 <vPortValidateInterruptPriority+0x54>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006a18:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006a1a:	7812      	ldrb	r2, [r2, #0]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d908      	bls.n	8006a32 <vPortValidateInterruptPriority+0x26>
 8006a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a24:	f383 8811 	msr	BASEPRI, r3
 8006a28:	f3bf 8f6f 	isb	sy
 8006a2c:	f3bf 8f4f 	dsb	sy
 8006a30:	e7fe      	b.n	8006a30 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006a32:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006a36:	4a0b      	ldr	r2, [pc, #44]	@ (8006a64 <vPortValidateInterruptPriority+0x58>)
 8006a38:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8006a3c:	6812      	ldr	r2, [r2, #0]
 8006a3e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d908      	bls.n	8006a58 <vPortValidateInterruptPriority+0x4c>
 8006a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a4a:	f383 8811 	msr	BASEPRI, r3
 8006a4e:	f3bf 8f6f 	isb	sy
 8006a52:	f3bf 8f4f 	dsb	sy
 8006a56:	e7fe      	b.n	8006a56 <vPortValidateInterruptPriority+0x4a>
	}
 8006a58:	4770      	bx	lr
 8006a5a:	bf00      	nop
 8006a5c:	e000e3f0 	.word	0xe000e3f0
 8006a60:	24000780 	.word	0x24000780
 8006a64:	2400077c 	.word	0x2400077c

08006a68 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006a68:	4b12      	ldr	r3, [pc, #72]	@ (8006ab4 <prvInsertBlockIntoFreeList+0x4c>)
{
 8006a6a:	b430      	push	{r4, r5}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4283      	cmp	r3, r0
 8006a72:	d3fb      	bcc.n	8006a6c <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006a74:	6854      	ldr	r4, [r2, #4]
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006a76:	6841      	ldr	r1, [r0, #4]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006a78:	eb02 0c04 	add.w	ip, r2, r4
 8006a7c:	4560      	cmp	r0, ip
 8006a7e:	d008      	beq.n	8006a92 <prvInsertBlockIntoFreeList+0x2a>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006a80:	1844      	adds	r4, r0, r1
 8006a82:	42a3      	cmp	r3, r4
 8006a84:	d00b      	beq.n	8006a9e <prvInsertBlockIntoFreeList+0x36>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006a86:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006a88:	4282      	cmp	r2, r0
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006a8a:	bf18      	it	ne
 8006a8c:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a8e:	bc30      	pop	{r4, r5}
 8006a90:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006a92:	4421      	add	r1, r4
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006a94:	1850      	adds	r0, r2, r1
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006a96:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006a98:	4283      	cmp	r3, r0
 8006a9a:	d1f8      	bne.n	8006a8e <prvInsertBlockIntoFreeList+0x26>
 8006a9c:	4610      	mov	r0, r2
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006a9e:	4c06      	ldr	r4, [pc, #24]	@ (8006ab8 <prvInsertBlockIntoFreeList+0x50>)
 8006aa0:	6824      	ldr	r4, [r4, #0]
 8006aa2:	42a3      	cmp	r3, r4
 8006aa4:	d003      	beq.n	8006aae <prvInsertBlockIntoFreeList+0x46>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006aa6:	e9d3 4500 	ldrd	r4, r5, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006aaa:	4429      	add	r1, r5
 8006aac:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006aae:	6004      	str	r4, [r0, #0]
 8006ab0:	e7ea      	b.n	8006a88 <prvInsertBlockIntoFreeList+0x20>
 8006ab2:	bf00      	nop
 8006ab4:	2400079c 	.word	0x2400079c
 8006ab8:	24000798 	.word	0x24000798

08006abc <pvPortMalloc>:
{
 8006abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		if( pxEnd == NULL )
 8006ac0:	4d41      	ldr	r5, [pc, #260]	@ (8006bc8 <pvPortMalloc+0x10c>)
{
 8006ac2:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8006ac4:	f7ff fa70 	bl	8005fa8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8006ac8:	682b      	ldr	r3, [r5, #0]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d05c      	beq.n	8006b88 <pvPortMalloc+0xcc>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006ace:	4b3f      	ldr	r3, [pc, #252]	@ (8006bcc <pvPortMalloc+0x110>)
 8006ad0:	681e      	ldr	r6, [r3, #0]
 8006ad2:	4234      	tst	r4, r6
 8006ad4:	d12e      	bne.n	8006b34 <pvPortMalloc+0x78>
			if( xWantedSize > 0 )
 8006ad6:	b36c      	cbz	r4, 8006b34 <pvPortMalloc+0x78>
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006ad8:	0760      	lsls	r0, r4, #29
				xWantedSize += xHeapStructSize;
 8006ada:	f104 0108 	add.w	r1, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006ade:	d002      	beq.n	8006ae6 <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006ae0:	f021 0107 	bic.w	r1, r1, #7
 8006ae4:	3108      	adds	r1, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006ae6:	b329      	cbz	r1, 8006b34 <pvPortMalloc+0x78>
 8006ae8:	f8df 80f8 	ldr.w	r8, [pc, #248]	@ 8006be4 <pvPortMalloc+0x128>
 8006aec:	f8d8 7000 	ldr.w	r7, [r8]
 8006af0:	428f      	cmp	r7, r1
 8006af2:	d31f      	bcc.n	8006b34 <pvPortMalloc+0x78>
				pxBlock = xStart.pxNextFreeBlock;
 8006af4:	4836      	ldr	r0, [pc, #216]	@ (8006bd0 <pvPortMalloc+0x114>)
 8006af6:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006af8:	e003      	b.n	8006b02 <pvPortMalloc+0x46>
 8006afa:	6823      	ldr	r3, [r4, #0]
 8006afc:	b123      	cbz	r3, 8006b08 <pvPortMalloc+0x4c>
 8006afe:	4620      	mov	r0, r4
 8006b00:	461c      	mov	r4, r3
 8006b02:	6862      	ldr	r2, [r4, #4]
 8006b04:	428a      	cmp	r2, r1
 8006b06:	d3f8      	bcc.n	8006afa <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 8006b08:	682b      	ldr	r3, [r5, #0]
 8006b0a:	42a3      	cmp	r3, r4
 8006b0c:	d012      	beq.n	8006b34 <pvPortMalloc+0x78>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006b0e:	1a53      	subs	r3, r2, r1
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006b10:	6825      	ldr	r5, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006b12:	f8d0 9000 	ldr.w	r9, [r0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006b16:	2b10      	cmp	r3, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006b18:	6005      	str	r5, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006b1a:	d916      	bls.n	8006b4a <pvPortMalloc+0x8e>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006b1c:	1860      	adds	r0, r4, r1
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b1e:	0742      	lsls	r2, r0, #29
 8006b20:	d00e      	beq.n	8006b40 <pvPortMalloc+0x84>
 8006b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b26:	f383 8811 	msr	BASEPRI, r3
 8006b2a:	f3bf 8f6f 	isb	sy
 8006b2e:	f3bf 8f4f 	dsb	sy
 8006b32:	e7fe      	b.n	8006b32 <pvPortMalloc+0x76>
void *pvReturn = NULL;
 8006b34:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 8006b36:	f7ff fb93 	bl	8006260 <xTaskResumeAll>
}
 8006b3a:	4628      	mov	r0, r5
 8006b3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006b40:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006b42:	6061      	str	r1, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006b44:	f7ff ff90 	bl	8006a68 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006b48:	6862      	ldr	r2, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006b4a:	4b22      	ldr	r3, [pc, #136]	@ (8006bd4 <pvPortMalloc+0x118>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006b4c:	1abf      	subs	r7, r7, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006b4e:	4332      	orrs	r2, r6
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006b50:	f109 0508 	add.w	r5, r9, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006b54:	6819      	ldr	r1, [r3, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006b56:	f8c8 7000 	str.w	r7, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006b5a:	428f      	cmp	r7, r1
					xNumberOfSuccessfulAllocations++;
 8006b5c:	491e      	ldr	r1, [pc, #120]	@ (8006bd8 <pvPortMalloc+0x11c>)
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006b5e:	bf38      	it	cc
 8006b60:	601f      	strcc	r7, [r3, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8006b62:	2300      	movs	r3, #0
 8006b64:	e9c4 3200 	strd	r3, r2, [r4]
					xNumberOfSuccessfulAllocations++;
 8006b68:	680b      	ldr	r3, [r1, #0]
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	600b      	str	r3, [r1, #0]
	( void ) xTaskResumeAll();
 8006b6e:	f7ff fb77 	bl	8006260 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b72:	076b      	lsls	r3, r5, #29
 8006b74:	d0e1      	beq.n	8006b3a <pvPortMalloc+0x7e>
 8006b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b7a:	f383 8811 	msr	BASEPRI, r3
 8006b7e:	f3bf 8f6f 	isb	sy
 8006b82:	f3bf 8f4f 	dsb	sy
 8006b86:	e7fe      	b.n	8006b86 <pvPortMalloc+0xca>
	uxAddress = ( size_t ) ucHeap;
 8006b88:	4b14      	ldr	r3, [pc, #80]	@ (8006bdc <pvPortMalloc+0x120>)
	xStart.xBlockSize = ( size_t ) 0;
 8006b8a:	2100      	movs	r1, #0
	uxAddress -= xHeapStructSize;
 8006b8c:	4a14      	ldr	r2, [pc, #80]	@ (8006be0 <pvPortMalloc+0x124>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006b8e:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006b92:	075e      	lsls	r6, r3, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006b94:	4e0e      	ldr	r6, [pc, #56]	@ (8006bd0 <pvPortMalloc+0x114>)
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b96:	f022 0207 	bic.w	r2, r2, #7
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006b9a:	bf18      	it	ne
 8006b9c:	3307      	addne	r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8006b9e:	6071      	str	r1, [r6, #4]
	pxEnd = ( void * ) uxAddress;
 8006ba0:	602a      	str	r2, [r5, #0]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ba2:	bf18      	it	ne
 8006ba4:	f023 0307 	bicne.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006ba8:	6033      	str	r3, [r6, #0]
 8006baa:	4618      	mov	r0, r3
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006bac:	1ad3      	subs	r3, r2, r3
}
 8006bae:	463e      	mov	r6, r7
	pxEnd->pxNextFreeBlock = NULL;
 8006bb0:	e9c2 1100 	strd	r1, r1, [r2]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006bb4:	e9c0 2300 	strd	r2, r3, [r0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006bb8:	4a06      	ldr	r2, [pc, #24]	@ (8006bd4 <pvPortMalloc+0x118>)
 8006bba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006bbc:	4a09      	ldr	r2, [pc, #36]	@ (8006be4 <pvPortMalloc+0x128>)
 8006bbe:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006bc0:	4b02      	ldr	r3, [pc, #8]	@ (8006bcc <pvPortMalloc+0x110>)
 8006bc2:	601f      	str	r7, [r3, #0]
}
 8006bc4:	e785      	b.n	8006ad2 <pvPortMalloc+0x16>
 8006bc6:	bf00      	nop
 8006bc8:	24000798 	.word	0x24000798
 8006bcc:	24000784 	.word	0x24000784
 8006bd0:	2400079c 	.word	0x2400079c
 8006bd4:	24000790 	.word	0x24000790
 8006bd8:	2400078c 	.word	0x2400078c
 8006bdc:	240007a4 	.word	0x240007a4
 8006be0:	24006b9c 	.word	0x24006b9c
 8006be4:	24000794 	.word	0x24000794

08006be8 <vPortFree>:
	if( pv != NULL )
 8006be8:	b1d0      	cbz	r0, 8006c20 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006bea:	4a1c      	ldr	r2, [pc, #112]	@ (8006c5c <vPortFree+0x74>)
 8006bec:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8006bf0:	6812      	ldr	r2, [r2, #0]
 8006bf2:	4213      	tst	r3, r2
 8006bf4:	d00b      	beq.n	8006c0e <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006bf6:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8006bfa:	b191      	cbz	r1, 8006c22 <vPortFree+0x3a>
 8006bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c00:	f383 8811 	msr	BASEPRI, r3
 8006c04:	f3bf 8f6f 	isb	sy
 8006c08:	f3bf 8f4f 	dsb	sy
 8006c0c:	e7fe      	b.n	8006c0c <vPortFree+0x24>
 8006c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c12:	f383 8811 	msr	BASEPRI, r3
 8006c16:	f3bf 8f6f 	isb	sy
 8006c1a:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006c1e:	e7fe      	b.n	8006c1e <vPortFree+0x36>
 8006c20:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006c22:	ea23 0302 	bic.w	r3, r3, r2
{
 8006c26:	b500      	push	{lr}
 8006c28:	b083      	sub	sp, #12
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006c2a:	f840 3c04 	str.w	r3, [r0, #-4]
 8006c2e:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
 8006c30:	f7ff f9ba 	bl	8005fa8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006c34:	4a0a      	ldr	r2, [pc, #40]	@ (8006c60 <vPortFree+0x78>)
 8006c36:	9801      	ldr	r0, [sp, #4]
 8006c38:	6811      	ldr	r1, [r2, #0]
 8006c3a:	f850 3c04 	ldr.w	r3, [r0, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006c3e:	3808      	subs	r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006c40:	440b      	add	r3, r1
 8006c42:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006c44:	f7ff ff10 	bl	8006a68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006c48:	4a06      	ldr	r2, [pc, #24]	@ (8006c64 <vPortFree+0x7c>)
 8006c4a:	6813      	ldr	r3, [r2, #0]
 8006c4c:	3301      	adds	r3, #1
 8006c4e:	6013      	str	r3, [r2, #0]
}
 8006c50:	b003      	add	sp, #12
 8006c52:	f85d eb04 	ldr.w	lr, [sp], #4
				( void ) xTaskResumeAll();
 8006c56:	f7ff bb03 	b.w	8006260 <xTaskResumeAll>
 8006c5a:	bf00      	nop
 8006c5c:	24000784 	.word	0x24000784
 8006c60:	24000794 	.word	0x24000794
 8006c64:	24000788 	.word	0x24000788

08006c68 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8006c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  void *buf = NULL;
 8006c6c:	2300      	movs	r3, #0
{
 8006c6e:	b082      	sub	sp, #8
  void *buf = NULL;
 8006c70:	9301      	str	r3, [sp, #4]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8006c72:	2900      	cmp	r1, #0
 8006c74:	d074      	beq.n	8006d60 <netconn_recv_data+0xf8>
  *new_buf = NULL;
 8006c76:	4604      	mov	r4, r0
 8006c78:	460d      	mov	r5, r1
 8006c7a:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8006c7c:	2800      	cmp	r0, #0
 8006c7e:	d065      	beq.n	8006d4c <netconn_recv_data+0xe4>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8006c80:	f100 0810 	add.w	r8, r0, #16
 8006c84:	4616      	mov	r6, r2
 8006c86:	4640      	mov	r0, r8
 8006c88:	f00a f958 	bl	8010f3c <sys_mbox_valid>
 8006c8c:	4607      	mov	r7, r0
 8006c8e:	b310      	cbz	r0, 8006cd6 <netconn_recv_data+0x6e>
    }
    return ERR_CONN;
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8006c90:	7f23      	ldrb	r3, [r4, #28]
 8006c92:	f006 0204 	and.w	r2, r6, #4
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8006c96:	a901      	add	r1, sp, #4
 8006c98:	4640      	mov	r0, r8
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8006c9a:	f003 0303 	and.w	r3, r3, #3
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	d025      	beq.n	8006cee <netconn_recv_data+0x86>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8006ca2:	f00a f935 	bl	8010f10 <sys_arch_mbox_tryfetch>
 8006ca6:	3001      	adds	r0, #1
 8006ca8:	d034      	beq.n	8006d14 <netconn_recv_data+0xac>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8006caa:	7823      	ldrb	r3, [r4, #0]
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8006cac:	9801      	ldr	r0, [sp, #4]
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8006cae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006cb2:	2b10      	cmp	r3, #16
 8006cb4:	d022      	beq.n	8006cfc <netconn_recv_data+0x94>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8006cb6:	2800      	cmp	r0, #0
 8006cb8:	d03c      	beq.n	8006d34 <netconn_recv_data+0xcc>
    len = netbuf_len((struct netbuf *)buf);
 8006cba:	6803      	ldr	r3, [r0, #0]
 8006cbc:	891a      	ldrh	r2, [r3, #8]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8006cbe:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006cc0:	b11b      	cbz	r3, 8006cca <netconn_recv_data+0x62>
 8006cc2:	4620      	mov	r0, r4
 8006cc4:	2101      	movs	r1, #1
 8006cc6:	4798      	blx	r3
 8006cc8:	9801      	ldr	r0, [sp, #4]

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8006cca:	2600      	movs	r6, #0
  *new_buf = buf;
 8006ccc:	6028      	str	r0, [r5, #0]
}
 8006cce:	4630      	mov	r0, r6
 8006cd0:	b002      	add	sp, #8
 8006cd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
    return ERR_OK;
  }
  SYS_ARCH_PROTECT(lev);
 8006cd6:	f00a f9c3 	bl	8011060 <sys_arch_protect>
  err = conn->pending_err;
 8006cda:	f994 6008 	ldrsb.w	r6, [r4, #8]
  conn->pending_err = ERR_OK;
 8006cde:	7227      	strb	r7, [r4, #8]
  SYS_ARCH_UNPROTECT(lev);
 8006ce0:	f00a f9ca 	bl	8011078 <sys_arch_unprotect>
    if (err != ERR_OK) {
 8006ce4:	2e00      	cmp	r6, #0
 8006ce6:	d1f2      	bne.n	8006cce <netconn_recv_data+0x66>
    return ERR_CONN;
 8006ce8:	f06f 060a 	mvn.w	r6, #10
 8006cec:	e7ef      	b.n	8006cce <netconn_recv_data+0x66>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8006cee:	f994 2008 	ldrsb.w	r2, [r4, #8]
 8006cf2:	2a00      	cmp	r2, #0
 8006cf4:	d1d5      	bne.n	8006ca2 <netconn_recv_data+0x3a>
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8006cf6:	f00a f8e9 	bl	8010ecc <sys_arch_mbox_fetch>
 8006cfa:	e7d6      	b.n	8006caa <netconn_recv_data+0x42>
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8006cfc:	f10d 0103 	add.w	r1, sp, #3
 8006d00:	f001 f87a 	bl	8007df8 <lwip_netconn_is_err_msg>
 8006d04:	b1f8      	cbz	r0, 8006d46 <netconn_recv_data+0xde>
      if (err == ERR_CLSD) {
 8006d06:	f99d 6003 	ldrsb.w	r6, [sp, #3]
        return ERR_OK;
 8006d0a:	f116 0f0f 	cmn.w	r6, #15
 8006d0e:	bf08      	it	eq
 8006d10:	2600      	moveq	r6, #0
 8006d12:	e7dc      	b.n	8006cce <netconn_recv_data+0x66>
  SYS_ARCH_PROTECT(lev);
 8006d14:	f00a f9a4 	bl	8011060 <sys_arch_protect>
  conn->pending_err = ERR_OK;
 8006d18:	2300      	movs	r3, #0
  err = conn->pending_err;
 8006d1a:	f994 6008 	ldrsb.w	r6, [r4, #8]
  conn->pending_err = ERR_OK;
 8006d1e:	7223      	strb	r3, [r4, #8]
  SYS_ARCH_UNPROTECT(lev);
 8006d20:	f00a f9aa 	bl	8011078 <sys_arch_unprotect>
      if (err != ERR_OK) {
 8006d24:	2e00      	cmp	r6, #0
 8006d26:	d1d2      	bne.n	8006cce <netconn_recv_data+0x66>
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8006d28:	7f23      	ldrb	r3, [r4, #28]
 8006d2a:	07db      	lsls	r3, r3, #31
 8006d2c:	d4dc      	bmi.n	8006ce8 <netconn_recv_data+0x80>
      return ERR_WOULDBLOCK;
 8006d2e:	f06f 0606 	mvn.w	r6, #6
 8006d32:	e7cc      	b.n	8006cce <netconn_recv_data+0x66>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8006d34:	4b0e      	ldr	r3, [pc, #56]	@ (8006d70 <netconn_recv_data+0x108>)
 8006d36:	f240 2291 	movw	r2, #657	@ 0x291
 8006d3a:	490e      	ldr	r1, [pc, #56]	@ (8006d74 <netconn_recv_data+0x10c>)
 8006d3c:	480e      	ldr	r0, [pc, #56]	@ (8006d78 <netconn_recv_data+0x110>)
 8006d3e:	f00a fbab 	bl	8011498 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8006d42:	9801      	ldr	r0, [sp, #4]
 8006d44:	e7b9      	b.n	8006cba <netconn_recv_data+0x52>
    len = ((struct pbuf *)buf)->tot_len;
 8006d46:	9801      	ldr	r0, [sp, #4]
 8006d48:	8902      	ldrh	r2, [r0, #8]
 8006d4a:	e7b8      	b.n	8006cbe <netconn_recv_data+0x56>
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8006d4c:	4b08      	ldr	r3, [pc, #32]	@ (8006d70 <netconn_recv_data+0x108>)
 8006d4e:	f240 224a 	movw	r2, #586	@ 0x24a
 8006d52:	490a      	ldr	r1, [pc, #40]	@ (8006d7c <netconn_recv_data+0x114>)
 8006d54:	4808      	ldr	r0, [pc, #32]	@ (8006d78 <netconn_recv_data+0x110>)
 8006d56:	f00a fb9f 	bl	8011498 <iprintf>
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8006d5a:	f06f 060f 	mvn.w	r6, #15
 8006d5e:	e7b6      	b.n	8006cce <netconn_recv_data+0x66>
 8006d60:	4b03      	ldr	r3, [pc, #12]	@ (8006d70 <netconn_recv_data+0x108>)
 8006d62:	f44f 7212 	mov.w	r2, #584	@ 0x248
 8006d66:	4906      	ldr	r1, [pc, #24]	@ (8006d80 <netconn_recv_data+0x118>)
 8006d68:	4803      	ldr	r0, [pc, #12]	@ (8006d78 <netconn_recv_data+0x110>)
 8006d6a:	f00a fb95 	bl	8011498 <iprintf>
 8006d6e:	e7f4      	b.n	8006d5a <netconn_recv_data+0xf2>
 8006d70:	08012498 	.word	0x08012498
 8006d74:	08012508 	.word	0x08012508
 8006d78:	0801241c 	.word	0x0801241c
 8006d7c:	080124ec 	.word	0x080124ec
 8006d80:	080124cc 	.word	0x080124cc

08006d84 <netconn_recv_data_tcp>:
{
 8006d84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d86:	4604      	mov	r4, r0
 8006d88:	b091      	sub	sp, #68	@ 0x44
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8006d8a:	3010      	adds	r0, #16
{
 8006d8c:	460e      	mov	r6, r1
 8006d8e:	4617      	mov	r7, r2
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8006d90:	f00a f8d4 	bl	8010f3c <sys_mbox_valid>
 8006d94:	2800      	cmp	r0, #0
 8006d96:	d053      	beq.n	8006e40 <netconn_recv_data_tcp+0xbc>
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8006d98:	f994 201c 	ldrsb.w	r2, [r4, #28]
 8006d9c:	7f23      	ldrb	r3, [r4, #28]
 8006d9e:	2a00      	cmp	r2, #0
 8006da0:	db1c      	blt.n	8006ddc <netconn_recv_data_tcp+0x58>
  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8006da2:	463a      	mov	r2, r7
 8006da4:	4631      	mov	r1, r6
 8006da6:	4620      	mov	r0, r4
 8006da8:	f7ff ff5e 	bl	8006c68 <netconn_recv_data>
  if (err != ERR_OK) {
 8006dac:	4605      	mov	r5, r0
 8006dae:	b990      	cbnz	r0, 8006dd6 <netconn_recv_data_tcp+0x52>
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8006db0:	073a      	lsls	r2, r7, #28
  buf = *new_buf;
 8006db2:	6836      	ldr	r6, [r6, #0]
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8006db4:	d40e      	bmi.n	8006dd4 <netconn_recv_data_tcp+0x50>
    u16_t len = buf ? buf->tot_len : 1;
 8006db6:	b39e      	cbz	r6, 8006e20 <netconn_recv_data_tcp+0x9c>
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8006db8:	8932      	ldrh	r2, [r6, #8]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8006dba:	7823      	ldrb	r3, [r4, #0]
 8006dbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006dc0:	2b10      	cmp	r3, #16
 8006dc2:	d140      	bne.n	8006e46 <netconn_recv_data_tcp+0xc2>
  msg->msg.r.len = len;
 8006dc4:	9202      	str	r2, [sp, #8]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006dc6:	4669      	mov	r1, sp
 8006dc8:	f104 020c 	add.w	r2, r4, #12
 8006dcc:	4823      	ldr	r0, [pc, #140]	@ (8006e5c <netconn_recv_data_tcp+0xd8>)
  msg->conn = conn;
 8006dce:	9400      	str	r4, [sp, #0]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006dd0:	f002 fdca 	bl	8009968 <tcpip_send_msg_wait_sem>
  if (buf == NULL) {
 8006dd4:	b1de      	cbz	r6, 8006e0e <netconn_recv_data_tcp+0x8a>
}
 8006dd6:	4628      	mov	r0, r5
 8006dd8:	b011      	add	sp, #68	@ 0x44
 8006dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8006ddc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006de0:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8006de2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006de4:	b11b      	cbz	r3, 8006dee <netconn_recv_data_tcp+0x6a>
 8006de6:	2200      	movs	r2, #0
 8006de8:	2101      	movs	r1, #1
 8006dea:	4620      	mov	r0, r4
 8006dec:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8006dee:	6866      	ldr	r6, [r4, #4]
 8006df0:	b9c6      	cbnz	r6, 8006e24 <netconn_recv_data_tcp+0xa0>
  SYS_ARCH_PROTECT(lev);
 8006df2:	f00a f935 	bl	8011060 <sys_arch_protect>
  err = conn->pending_err;
 8006df6:	f994 5008 	ldrsb.w	r5, [r4, #8]
  conn->pending_err = ERR_OK;
 8006dfa:	7226      	strb	r6, [r4, #8]
  SYS_ARCH_UNPROTECT(lev);
 8006dfc:	f00a f93c 	bl	8011078 <sys_arch_unprotect>
        return ERR_RST;
 8006e00:	2d00      	cmp	r5, #0
 8006e02:	bf08      	it	eq
 8006e04:	f06f 050d 	mvneq.w	r5, #13
}
 8006e08:	4628      	mov	r0, r5
 8006e0a:	b011      	add	sp, #68	@ 0x44
 8006e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (apiflags & NETCONN_NOFIN) {
 8006e0e:	06fb      	lsls	r3, r7, #27
 8006e10:	d5e7      	bpl.n	8006de2 <netconn_recv_data_tcp+0x5e>
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8006e12:	7f23      	ldrb	r3, [r4, #28]
      return ERR_WOULDBLOCK;
 8006e14:	f06f 0506 	mvn.w	r5, #6
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8006e18:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006e1c:	7723      	strb	r3, [r4, #28]
      return ERR_WOULDBLOCK;
 8006e1e:	e7da      	b.n	8006dd6 <netconn_recv_data_tcp+0x52>
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8006e20:	2201      	movs	r2, #1
 8006e22:	e7ca      	b.n	8006dba <netconn_recv_data_tcp+0x36>
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8006e24:	f642 1301 	movw	r3, #10497	@ 0x2901
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006e28:	f104 020c 	add.w	r2, r4, #12
 8006e2c:	a908      	add	r1, sp, #32
 8006e2e:	480c      	ldr	r0, [pc, #48]	@ (8006e60 <netconn_recv_data_tcp+0xdc>)
      return ERR_CLSD;
 8006e30:	f06f 050e 	mvn.w	r5, #14
  API_MSG_VAR_REF(msg).conn = conn;
 8006e34:	9408      	str	r4, [sp, #32]
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8006e36:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006e3a:	f002 fd95 	bl	8009968 <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8006e3e:	e7ca      	b.n	8006dd6 <netconn_recv_data_tcp+0x52>
    return ERR_CONN;
 8006e40:	f06f 050a 	mvn.w	r5, #10
 8006e44:	e7c7      	b.n	8006dd6 <netconn_recv_data_tcp+0x52>
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8006e46:	4b07      	ldr	r3, [pc, #28]	@ (8006e64 <netconn_recv_data_tcp+0xe0>)
 8006e48:	f240 22a7 	movw	r2, #679	@ 0x2a7
 8006e4c:	4906      	ldr	r1, [pc, #24]	@ (8006e68 <netconn_recv_data_tcp+0xe4>)
 8006e4e:	4807      	ldr	r0, [pc, #28]	@ (8006e6c <netconn_recv_data_tcp+0xe8>)
 8006e50:	f00a fb22 	bl	8011498 <iprintf>
  if (buf == NULL) {
 8006e54:	2e00      	cmp	r6, #0
 8006e56:	d1be      	bne.n	8006dd6 <netconn_recv_data_tcp+0x52>
 8006e58:	e7d9      	b.n	8006e0e <netconn_recv_data_tcp+0x8a>
 8006e5a:	bf00      	nop
 8006e5c:	08008401 	.word	0x08008401
 8006e60:	0800859d 	.word	0x0800859d
 8006e64:	08012498 	.word	0x08012498
 8006e68:	08012514 	.word	0x08012514
 8006e6c:	0801241c 	.word	0x0801241c

08006e70 <netconn_new_with_proto_and_callback>:
{
 8006e70:	b570      	push	{r4, r5, r6, lr}
 8006e72:	460d      	mov	r5, r1
 8006e74:	b088      	sub	sp, #32
  conn = netconn_alloc(t, callback);
 8006e76:	4611      	mov	r1, r2
 8006e78:	f001 f820 	bl	8007ebc <netconn_alloc>
  if (conn != NULL) {
 8006e7c:	b398      	cbz	r0, 8006ee6 <netconn_new_with_proto_and_callback+0x76>
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006e7e:	f100 060c 	add.w	r6, r0, #12
 8006e82:	4604      	mov	r4, r0
 8006e84:	4669      	mov	r1, sp
 8006e86:	4823      	ldr	r0, [pc, #140]	@ (8006f14 <netconn_new_with_proto_and_callback+0xa4>)
 8006e88:	4632      	mov	r2, r6
    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8006e8a:	f88d 5008 	strb.w	r5, [sp, #8]
    API_MSG_VAR_REF(msg).conn = conn;
 8006e8e:	9400      	str	r4, [sp, #0]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006e90:	f002 fd6a 	bl	8009968 <tcpip_send_msg_wait_sem>
    if (err != ERR_OK) {
 8006e94:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006e98:	4318      	orrs	r0, r3
 8006e9a:	b240      	sxtb	r0, r0
 8006e9c:	b910      	cbnz	r0, 8006ea4 <netconn_new_with_proto_and_callback+0x34>
}
 8006e9e:	4620      	mov	r0, r4
 8006ea0:	b008      	add	sp, #32
 8006ea2:	bd70      	pop	{r4, r5, r6, pc}
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8006ea4:	6863      	ldr	r3, [r4, #4]
 8006ea6:	b12b      	cbz	r3, 8006eb4 <netconn_new_with_proto_and_callback+0x44>
 8006ea8:	4b1b      	ldr	r3, [pc, #108]	@ (8006f18 <netconn_new_with_proto_and_callback+0xa8>)
 8006eaa:	22a3      	movs	r2, #163	@ 0xa3
 8006eac:	491b      	ldr	r1, [pc, #108]	@ (8006f1c <netconn_new_with_proto_and_callback+0xac>)
 8006eae:	481c      	ldr	r0, [pc, #112]	@ (8006f20 <netconn_new_with_proto_and_callback+0xb0>)
 8006eb0:	f00a faf2 	bl	8011498 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8006eb4:	f104 0510 	add.w	r5, r4, #16
 8006eb8:	4628      	mov	r0, r5
 8006eba:	f00a f83f 	bl	8010f3c <sys_mbox_valid>
 8006ebe:	b310      	cbz	r0, 8006f06 <netconn_new_with_proto_and_callback+0x96>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8006ec0:	f104 0014 	add.w	r0, r4, #20
 8006ec4:	f00a f83a 	bl	8010f3c <sys_mbox_valid>
 8006ec8:	b9b0      	cbnz	r0, 8006ef8 <netconn_new_with_proto_and_callback+0x88>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8006eca:	4630      	mov	r0, r6
 8006ecc:	f00a f87c 	bl	8010fc8 <sys_sem_valid>
 8006ed0:	b158      	cbz	r0, 8006eea <netconn_new_with_proto_and_callback+0x7a>
      sys_sem_free(&conn->op_completed);
 8006ed2:	4630      	mov	r0, r6
 8006ed4:	f00a f874 	bl	8010fc0 <sys_sem_free>
      sys_mbox_free(&conn->recvmbox);
 8006ed8:	4628      	mov	r0, r5
 8006eda:	f009 ffe3 	bl	8010ea4 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8006ede:	4621      	mov	r1, r4
 8006ee0:	2007      	movs	r0, #7
 8006ee2:	f003 f97d 	bl	800a1e0 <memp_free>
      return NULL;
 8006ee6:	2400      	movs	r4, #0
 8006ee8:	e7d9      	b.n	8006e9e <netconn_new_with_proto_and_callback+0x2e>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8006eea:	4b0b      	ldr	r3, [pc, #44]	@ (8006f18 <netconn_new_with_proto_and_callback+0xa8>)
 8006eec:	22a9      	movs	r2, #169	@ 0xa9
 8006eee:	490d      	ldr	r1, [pc, #52]	@ (8006f24 <netconn_new_with_proto_and_callback+0xb4>)
 8006ef0:	480b      	ldr	r0, [pc, #44]	@ (8006f20 <netconn_new_with_proto_and_callback+0xb0>)
 8006ef2:	f00a fad1 	bl	8011498 <iprintf>
 8006ef6:	e7ec      	b.n	8006ed2 <netconn_new_with_proto_and_callback+0x62>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8006ef8:	4b07      	ldr	r3, [pc, #28]	@ (8006f18 <netconn_new_with_proto_and_callback+0xa8>)
 8006efa:	22a6      	movs	r2, #166	@ 0xa6
 8006efc:	490a      	ldr	r1, [pc, #40]	@ (8006f28 <netconn_new_with_proto_and_callback+0xb8>)
 8006efe:	4808      	ldr	r0, [pc, #32]	@ (8006f20 <netconn_new_with_proto_and_callback+0xb0>)
 8006f00:	f00a faca 	bl	8011498 <iprintf>
 8006f04:	e7e1      	b.n	8006eca <netconn_new_with_proto_and_callback+0x5a>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8006f06:	4b04      	ldr	r3, [pc, #16]	@ (8006f18 <netconn_new_with_proto_and_callback+0xa8>)
 8006f08:	22a4      	movs	r2, #164	@ 0xa4
 8006f0a:	4908      	ldr	r1, [pc, #32]	@ (8006f2c <netconn_new_with_proto_and_callback+0xbc>)
 8006f0c:	4804      	ldr	r0, [pc, #16]	@ (8006f20 <netconn_new_with_proto_and_callback+0xb0>)
 8006f0e:	f00a fac3 	bl	8011498 <iprintf>
 8006f12:	e7d5      	b.n	8006ec0 <netconn_new_with_proto_and_callback+0x50>
 8006f14:	08007e55 	.word	0x08007e55
 8006f18:	08012498 	.word	0x08012498
 8006f1c:	08012538 	.word	0x08012538
 8006f20:	0801241c 	.word	0x0801241c
 8006f24:	08012598 	.word	0x08012598
 8006f28:	08012574 	.word	0x08012574
 8006f2c:	0801255c 	.word	0x0801255c

08006f30 <netconn_prepare_delete>:
  if (conn == NULL) {
 8006f30:	4603      	mov	r3, r0
 8006f32:	b1a8      	cbz	r0, 8006f60 <netconn_prepare_delete+0x30>
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8006f34:	f04f 0c29 	mov.w	ip, #41	@ 0x29
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006f38:	f100 020c 	add.w	r2, r0, #12
 8006f3c:	4809      	ldr	r0, [pc, #36]	@ (8006f64 <netconn_prepare_delete+0x34>)
{
 8006f3e:	b500      	push	{lr}
 8006f40:	b089      	sub	sp, #36	@ 0x24
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006f42:	4669      	mov	r1, sp
  API_MSG_VAR_REF(msg).conn = conn;
 8006f44:	9300      	str	r3, [sp, #0]
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8006f46:	f88d c009 	strb.w	ip, [sp, #9]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006f4a:	f002 fd0d 	bl	8009968 <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8006f4e:	b110      	cbz	r0, 8006f56 <netconn_prepare_delete+0x26>
}
 8006f50:	b009      	add	sp, #36	@ 0x24
 8006f52:	f85d fb04 	ldr.w	pc, [sp], #4
    return apimsg->err;
 8006f56:	f99d 0004 	ldrsb.w	r0, [sp, #4]
}
 8006f5a:	b009      	add	sp, #36	@ 0x24
 8006f5c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006f60:	4770      	bx	lr
 8006f62:	bf00      	nop
 8006f64:	080081a9 	.word	0x080081a9

08006f68 <netconn_delete>:
  if (conn == NULL) {
 8006f68:	b1c8      	cbz	r0, 8006f9e <netconn_delete+0x36>
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8006f6a:	2329      	movs	r3, #41	@ 0x29
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006f6c:	f100 020c 	add.w	r2, r0, #12
{
 8006f70:	b510      	push	{r4, lr}
 8006f72:	b088      	sub	sp, #32
 8006f74:	4604      	mov	r4, r0
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006f76:	480b      	ldr	r0, [pc, #44]	@ (8006fa4 <netconn_delete+0x3c>)
 8006f78:	4669      	mov	r1, sp
  API_MSG_VAR_REF(msg).conn = conn;
 8006f7a:	9400      	str	r4, [sp, #0]
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8006f7c:	f88d 3009 	strb.w	r3, [sp, #9]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006f80:	f002 fcf2 	bl	8009968 <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8006f84:	b108      	cbz	r0, 8006f8a <netconn_delete+0x22>
}
 8006f86:	b008      	add	sp, #32
 8006f88:	bd10      	pop	{r4, pc}
    return apimsg->err;
 8006f8a:	f99d 0004 	ldrsb.w	r0, [sp, #4]
  if (err != ERR_OK) {
 8006f8e:	2800      	cmp	r0, #0
 8006f90:	d1f9      	bne.n	8006f86 <netconn_delete+0x1e>
    netconn_free(conn);
 8006f92:	4620      	mov	r0, r4
 8006f94:	f000 ffd8 	bl	8007f48 <netconn_free>
    return ERR_OK;
 8006f98:	2000      	movs	r0, #0
}
 8006f9a:	b008      	add	sp, #32
 8006f9c:	bd10      	pop	{r4, pc}
    return ERR_OK;
 8006f9e:	2000      	movs	r0, #0
}
 8006fa0:	4770      	bx	lr
 8006fa2:	bf00      	nop
 8006fa4:	080081a9 	.word	0x080081a9

08006fa8 <netconn_getaddr>:
{
 8006fa8:	b530      	push	{r4, r5, lr}
 8006faa:	b089      	sub	sp, #36	@ 0x24
  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 8006fac:	b328      	cbz	r0, 8006ffa <netconn_getaddr+0x52>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 8006fae:	460c      	mov	r4, r1
 8006fb0:	b1d9      	cbz	r1, 8006fea <netconn_getaddr+0x42>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 8006fb2:	4615      	mov	r5, r2
 8006fb4:	b17a      	cbz	r2, 8006fd6 <netconn_getaddr+0x2e>
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006fb6:	f100 020c 	add.w	r2, r0, #12
  API_MSG_VAR_REF(msg).conn = conn;
 8006fba:	9000      	str	r0, [sp, #0]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006fbc:	4669      	mov	r1, sp
 8006fbe:	4813      	ldr	r0, [pc, #76]	@ (800700c <netconn_getaddr+0x64>)
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 8006fc0:	f88d 3010 	strb.w	r3, [sp, #16]
  msg.msg.ad.port = port;
 8006fc4:	e9cd 4502 	strd	r4, r5, [sp, #8]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006fc8:	f002 fcce 	bl	8009968 <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8006fcc:	b908      	cbnz	r0, 8006fd2 <netconn_getaddr+0x2a>
    return apimsg->err;
 8006fce:	f99d 0004 	ldrsb.w	r0, [sp, #4]
}
 8006fd2:	b009      	add	sp, #36	@ 0x24
 8006fd4:	bd30      	pop	{r4, r5, pc}
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 8006fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8007010 <netconn_getaddr+0x68>)
 8006fd8:	f44f 728a 	mov.w	r2, #276	@ 0x114
 8006fdc:	490d      	ldr	r1, [pc, #52]	@ (8007014 <netconn_getaddr+0x6c>)
 8006fde:	480e      	ldr	r0, [pc, #56]	@ (8007018 <netconn_getaddr+0x70>)
 8006fe0:	f00a fa5a 	bl	8011498 <iprintf>
  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 8006fe4:	f06f 000f 	mvn.w	r0, #15
 8006fe8:	e7f3      	b.n	8006fd2 <netconn_getaddr+0x2a>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 8006fea:	4b09      	ldr	r3, [pc, #36]	@ (8007010 <netconn_getaddr+0x68>)
 8006fec:	f240 1213 	movw	r2, #275	@ 0x113
 8006ff0:	490a      	ldr	r1, [pc, #40]	@ (800701c <netconn_getaddr+0x74>)
 8006ff2:	4809      	ldr	r0, [pc, #36]	@ (8007018 <netconn_getaddr+0x70>)
 8006ff4:	f00a fa50 	bl	8011498 <iprintf>
 8006ff8:	e7f4      	b.n	8006fe4 <netconn_getaddr+0x3c>
  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 8006ffa:	4b05      	ldr	r3, [pc, #20]	@ (8007010 <netconn_getaddr+0x68>)
 8006ffc:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8007000:	4907      	ldr	r1, [pc, #28]	@ (8007020 <netconn_getaddr+0x78>)
 8007002:	4805      	ldr	r0, [pc, #20]	@ (8007018 <netconn_getaddr+0x70>)
 8007004:	f00a fa48 	bl	8011498 <iprintf>
 8007008:	e7ec      	b.n	8006fe4 <netconn_getaddr+0x3c>
 800700a:	bf00      	nop
 800700c:	08008511 	.word	0x08008511
 8007010:	08012498 	.word	0x08012498
 8007014:	080125f4 	.word	0x080125f4
 8007018:	0801241c 	.word	0x0801241c
 800701c:	080125d4 	.word	0x080125d4
 8007020:	080125b4 	.word	0x080125b4

08007024 <netconn_bind>:
{
 8007024:	b500      	push	{lr}
 8007026:	b089      	sub	sp, #36	@ 0x24
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8007028:	b1a0      	cbz	r0, 8007054 <netconn_bind+0x30>
  if (addr == NULL) {
 800702a:	460b      	mov	r3, r1
 800702c:	4694      	mov	ip, r2
 800702e:	b179      	cbz	r1, 8007050 <netconn_bind+0x2c>
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8007030:	f100 020c 	add.w	r2, r0, #12
  API_MSG_VAR_REF(msg).conn = conn;
 8007034:	9000      	str	r0, [sp, #0]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8007036:	4669      	mov	r1, sp
 8007038:	480b      	ldr	r0, [pc, #44]	@ (8007068 <netconn_bind+0x44>)
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800703a:	9302      	str	r3, [sp, #8]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800703c:	f8ad c00c 	strh.w	ip, [sp, #12]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8007040:	f002 fc92 	bl	8009968 <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8007044:	b908      	cbnz	r0, 800704a <netconn_bind+0x26>
    return apimsg->err;
 8007046:	f99d 0004 	ldrsb.w	r0, [sp, #4]
}
 800704a:	b009      	add	sp, #36	@ 0x24
 800704c:	f85d fb04 	ldr.w	pc, [sp], #4
    addr = IP4_ADDR_ANY;
 8007050:	4b06      	ldr	r3, [pc, #24]	@ (800706c <netconn_bind+0x48>)
 8007052:	e7ed      	b.n	8007030 <netconn_bind+0xc>
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8007054:	4b06      	ldr	r3, [pc, #24]	@ (8007070 <netconn_bind+0x4c>)
 8007056:	f44f 729c 	mov.w	r2, #312	@ 0x138
 800705a:	4906      	ldr	r1, [pc, #24]	@ (8007074 <netconn_bind+0x50>)
 800705c:	4806      	ldr	r0, [pc, #24]	@ (8007078 <netconn_bind+0x54>)
 800705e:	f00a fa1b 	bl	8011498 <iprintf>
 8007062:	f06f 000f 	mvn.w	r0, #15
 8007066:	e7f0      	b.n	800704a <netconn_bind+0x26>
 8007068:	080082c1 	.word	0x080082c1
 800706c:	08014e14 	.word	0x08014e14
 8007070:	08012498 	.word	0x08012498
 8007074:	08012614 	.word	0x08012614
 8007078:	0801241c 	.word	0x0801241c

0800707c <netconn_listen_with_backlog>:
{
 800707c:	b500      	push	{lr}
 800707e:	b089      	sub	sp, #36	@ 0x24
  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8007080:	b168      	cbz	r0, 800709e <netconn_listen_with_backlog+0x22>
  API_MSG_VAR_REF(msg).conn = conn;
 8007082:	4603      	mov	r3, r0
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8007084:	f100 020c 	add.w	r2, r0, #12
 8007088:	4669      	mov	r1, sp
 800708a:	480a      	ldr	r0, [pc, #40]	@ (80070b4 <netconn_listen_with_backlog+0x38>)
  API_MSG_VAR_REF(msg).conn = conn;
 800708c:	9300      	str	r3, [sp, #0]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800708e:	f002 fc6b 	bl	8009968 <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8007092:	b908      	cbnz	r0, 8007098 <netconn_listen_with_backlog+0x1c>
    return apimsg->err;
 8007094:	f99d 0004 	ldrsb.w	r0, [sp, #4]
}
 8007098:	b009      	add	sp, #36	@ 0x24
 800709a:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800709e:	4b06      	ldr	r3, [pc, #24]	@ (80070b8 <netconn_listen_with_backlog+0x3c>)
 80070a0:	f240 12bb 	movw	r2, #443	@ 0x1bb
 80070a4:	4905      	ldr	r1, [pc, #20]	@ (80070bc <netconn_listen_with_backlog+0x40>)
 80070a6:	4806      	ldr	r0, [pc, #24]	@ (80070c0 <netconn_listen_with_backlog+0x44>)
 80070a8:	f00a f9f6 	bl	8011498 <iprintf>
 80070ac:	f06f 000f 	mvn.w	r0, #15
 80070b0:	e7f2      	b.n	8007098 <netconn_listen_with_backlog+0x1c>
 80070b2:	bf00      	nop
 80070b4:	080082f9 	.word	0x080082f9
 80070b8:	08012498 	.word	0x08012498
 80070bc:	08012630 	.word	0x08012630
 80070c0:	0801241c 	.word	0x0801241c

080070c4 <netconn_accept>:
{
 80070c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070c6:	b083      	sub	sp, #12
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 80070c8:	2900      	cmp	r1, #0
 80070ca:	d04d      	beq.n	8007168 <netconn_accept+0xa4>
  *new_conn = NULL;
 80070cc:	2700      	movs	r7, #0
 80070ce:	4604      	mov	r4, r0
 80070d0:	460d      	mov	r5, r1
 80070d2:	600f      	str	r7, [r1, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 80070d4:	2800      	cmp	r0, #0
 80070d6:	d03d      	beq.n	8007154 <netconn_accept+0x90>
  SYS_ARCH_PROTECT(lev);
 80070d8:	f009 ffc2 	bl	8011060 <sys_arch_protect>
  err = conn->pending_err;
 80070dc:	f994 6008 	ldrsb.w	r6, [r4, #8]
  conn->pending_err = ERR_OK;
 80070e0:	7227      	strb	r7, [r4, #8]
  SYS_ARCH_UNPROTECT(lev);
 80070e2:	f009 ffc9 	bl	8011078 <sys_arch_unprotect>
  err = netconn_err(conn);
 80070e6:	f88d 6003 	strb.w	r6, [sp, #3]
  if (err != ERR_OK) {
 80070ea:	b116      	cbz	r6, 80070f2 <netconn_accept+0x2e>
}
 80070ec:	4630      	mov	r0, r6
 80070ee:	b003      	add	sp, #12
 80070f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 80070f2:	f104 0714 	add.w	r7, r4, #20
 80070f6:	4638      	mov	r0, r7
 80070f8:	f009 ff20 	bl	8010f3c <sys_mbox_valid>
 80070fc:	b338      	cbz	r0, 800714e <netconn_accept+0x8a>
 80070fe:	7f23      	ldrb	r3, [r4, #28]
 8007100:	07da      	lsls	r2, r3, #31
 8007102:	d424      	bmi.n	800714e <netconn_accept+0x8a>
  if (netconn_is_nonblocking(conn)) {
 8007104:	079b      	lsls	r3, r3, #30
 8007106:	d517      	bpl.n	8007138 <netconn_accept+0x74>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8007108:	a901      	add	r1, sp, #4
 800710a:	4638      	mov	r0, r7
 800710c:	f009 ff00 	bl	8010f10 <sys_arch_mbox_tryfetch>
 8007110:	3001      	adds	r0, #1
 8007112:	d031      	beq.n	8007178 <netconn_accept+0xb4>
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8007114:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007116:	b11b      	cbz	r3, 8007120 <netconn_accept+0x5c>
 8007118:	2200      	movs	r2, #0
 800711a:	4620      	mov	r0, r4
 800711c:	2101      	movs	r1, #1
 800711e:	4798      	blx	r3
  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8007120:	f10d 0103 	add.w	r1, sp, #3
 8007124:	9801      	ldr	r0, [sp, #4]
 8007126:	f000 fe67 	bl	8007df8 <lwip_netconn_is_err_msg>
 800712a:	b958      	cbnz	r0, 8007144 <netconn_accept+0x80>
  if (accept_ptr == NULL) {
 800712c:	9b01      	ldr	r3, [sp, #4]
 800712e:	b173      	cbz	r3, 800714e <netconn_accept+0x8a>
}
 8007130:	4630      	mov	r0, r6
  *new_conn = newconn;
 8007132:	602b      	str	r3, [r5, #0]
}
 8007134:	b003      	add	sp, #12
 8007136:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8007138:	4632      	mov	r2, r6
 800713a:	4638      	mov	r0, r7
 800713c:	a901      	add	r1, sp, #4
 800713e:	f009 fec5 	bl	8010ecc <sys_arch_mbox_fetch>
 8007142:	e7e7      	b.n	8007114 <netconn_accept+0x50>
    return err;
 8007144:	f99d 6003 	ldrsb.w	r6, [sp, #3]
}
 8007148:	4630      	mov	r0, r6
 800714a:	b003      	add	sp, #12
 800714c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ERR_CLSD;
 800714e:	f06f 060e 	mvn.w	r6, #14
 8007152:	e7cb      	b.n	80070ec <netconn_accept+0x28>
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8007154:	4b0a      	ldr	r3, [pc, #40]	@ (8007180 <netconn_accept+0xbc>)
 8007156:	f240 12e3 	movw	r2, #483	@ 0x1e3
 800715a:	490a      	ldr	r1, [pc, #40]	@ (8007184 <netconn_accept+0xc0>)
 800715c:	480a      	ldr	r0, [pc, #40]	@ (8007188 <netconn_accept+0xc4>)
 800715e:	f00a f99b 	bl	8011498 <iprintf>
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8007162:	f06f 060f 	mvn.w	r6, #15
 8007166:	e7c1      	b.n	80070ec <netconn_accept+0x28>
 8007168:	4b05      	ldr	r3, [pc, #20]	@ (8007180 <netconn_accept+0xbc>)
 800716a:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800716e:	4907      	ldr	r1, [pc, #28]	@ (800718c <netconn_accept+0xc8>)
 8007170:	4805      	ldr	r0, [pc, #20]	@ (8007188 <netconn_accept+0xc4>)
 8007172:	f00a f991 	bl	8011498 <iprintf>
 8007176:	e7f4      	b.n	8007162 <netconn_accept+0x9e>
      return ERR_WOULDBLOCK;
 8007178:	f06f 0606 	mvn.w	r6, #6
 800717c:	e7b6      	b.n	80070ec <netconn_accept+0x28>
 800717e:	bf00      	nop
 8007180:	08012498 	.word	0x08012498
 8007184:	08012670 	.word	0x08012670
 8007188:	0801241c 	.word	0x0801241c
 800718c:	08012650 	.word	0x08012650

08007190 <netconn_tcp_recvd>:
{
 8007190:	b510      	push	{r4, lr}
 8007192:	b088      	sub	sp, #32
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8007194:	b198      	cbz	r0, 80071be <netconn_tcp_recvd+0x2e>
 8007196:	7802      	ldrb	r2, [r0, #0]
 8007198:	4603      	mov	r3, r0
 800719a:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 800719e:	2a10      	cmp	r2, #16
 80071a0:	d10d      	bne.n	80071be <netconn_tcp_recvd+0x2e>
  err = netconn_tcp_recvd_msg(conn, len, &API_VAR_REF(msg));
 80071a2:	460c      	mov	r4, r1
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80071a4:	f100 020c 	add.w	r2, r0, #12
 80071a8:	4669      	mov	r1, sp
 80071aa:	480a      	ldr	r0, [pc, #40]	@ (80071d4 <netconn_tcp_recvd+0x44>)
  msg->conn = conn;
 80071ac:	9300      	str	r3, [sp, #0]
  msg->msg.r.len = len;
 80071ae:	9402      	str	r4, [sp, #8]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80071b0:	f002 fbda 	bl	8009968 <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 80071b4:	b908      	cbnz	r0, 80071ba <netconn_tcp_recvd+0x2a>
    return apimsg->err;
 80071b6:	f99d 0004 	ldrsb.w	r0, [sp, #4]
}
 80071ba:	b008      	add	sp, #32
 80071bc:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 80071be:	4b06      	ldr	r3, [pc, #24]	@ (80071d8 <netconn_tcp_recvd+0x48>)
 80071c0:	f240 22b5 	movw	r2, #693	@ 0x2b5
 80071c4:	4905      	ldr	r1, [pc, #20]	@ (80071dc <netconn_tcp_recvd+0x4c>)
 80071c6:	4806      	ldr	r0, [pc, #24]	@ (80071e0 <netconn_tcp_recvd+0x50>)
 80071c8:	f00a f966 	bl	8011498 <iprintf>
 80071cc:	f06f 000f 	mvn.w	r0, #15
 80071d0:	e7f3      	b.n	80071ba <netconn_tcp_recvd+0x2a>
 80071d2:	bf00      	nop
 80071d4:	08008401 	.word	0x08008401
 80071d8:	08012498 	.word	0x08012498
 80071dc:	08012514 	.word	0x08012514
 80071e0:	0801241c 	.word	0x0801241c

080071e4 <netconn_recv_tcp_pbuf_flags>:
{
 80071e4:	b508      	push	{r3, lr}
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 80071e6:	b140      	cbz	r0, 80071fa <netconn_recv_tcp_pbuf_flags+0x16>
 80071e8:	7803      	ldrb	r3, [r0, #0]
 80071ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80071ee:	2b10      	cmp	r3, #16
 80071f0:	d103      	bne.n	80071fa <netconn_recv_tcp_pbuf_flags+0x16>
}
 80071f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return netconn_recv_data_tcp(conn, new_buf, apiflags);
 80071f6:	f7ff bdc5 	b.w	8006d84 <netconn_recv_data_tcp>
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 80071fa:	4b05      	ldr	r3, [pc, #20]	@ (8007210 <netconn_recv_tcp_pbuf_flags+0x2c>)
 80071fc:	f240 3225 	movw	r2, #805	@ 0x325
 8007200:	4904      	ldr	r1, [pc, #16]	@ (8007214 <netconn_recv_tcp_pbuf_flags+0x30>)
 8007202:	4805      	ldr	r0, [pc, #20]	@ (8007218 <netconn_recv_tcp_pbuf_flags+0x34>)
 8007204:	f00a f948 	bl	8011498 <iprintf>
}
 8007208:	f06f 000f 	mvn.w	r0, #15
 800720c:	bd08      	pop	{r3, pc}
 800720e:	bf00      	nop
 8007210:	08012498 	.word	0x08012498
 8007214:	08012514 	.word	0x08012514
 8007218:	0801241c 	.word	0x0801241c

0800721c <netconn_recv_udp_raw_netbuf_flags>:
{
 800721c:	b508      	push	{r3, lr}
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 800721e:	b140      	cbz	r0, 8007232 <netconn_recv_udp_raw_netbuf_flags+0x16>
 8007220:	7803      	ldrb	r3, [r0, #0]
 8007222:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007226:	2b10      	cmp	r3, #16
 8007228:	d003      	beq.n	8007232 <netconn_recv_udp_raw_netbuf_flags+0x16>
}
 800722a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return netconn_recv_data(conn, (void **)new_buf, apiflags);
 800722e:	f7ff bd1b 	b.w	8006c68 <netconn_recv_data>
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 8007232:	4b05      	ldr	r3, [pc, #20]	@ (8007248 <netconn_recv_udp_raw_netbuf_flags+0x2c>)
 8007234:	f44f 7253 	mov.w	r2, #844	@ 0x34c
 8007238:	4904      	ldr	r1, [pc, #16]	@ (800724c <netconn_recv_udp_raw_netbuf_flags+0x30>)
 800723a:	4805      	ldr	r0, [pc, #20]	@ (8007250 <netconn_recv_udp_raw_netbuf_flags+0x34>)
 800723c:	f00a f92c 	bl	8011498 <iprintf>
}
 8007240:	f06f 000f 	mvn.w	r0, #15
 8007244:	bd08      	pop	{r3, pc}
 8007246:	bf00      	nop
 8007248:	08012498 	.word	0x08012498
 800724c:	08012690 	.word	0x08012690
 8007250:	0801241c 	.word	0x0801241c

08007254 <netconn_send>:
{
 8007254:	b510      	push	{r4, lr}
 8007256:	b088      	sub	sp, #32
  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 8007258:	b170      	cbz	r0, 8007278 <netconn_send+0x24>
  API_MSG_VAR_REF(msg).conn = conn;
 800725a:	4603      	mov	r3, r0
 800725c:	460c      	mov	r4, r1
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800725e:	f100 020c 	add.w	r2, r0, #12
 8007262:	4669      	mov	r1, sp
 8007264:	4809      	ldr	r0, [pc, #36]	@ (800728c <netconn_send+0x38>)
  API_MSG_VAR_REF(msg).conn = conn;
 8007266:	9300      	str	r3, [sp, #0]
  API_MSG_VAR_REF(msg).msg.b = buf;
 8007268:	9402      	str	r4, [sp, #8]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800726a:	f002 fb7d 	bl	8009968 <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 800726e:	b908      	cbnz	r0, 8007274 <netconn_send+0x20>
    return apimsg->err;
 8007270:	f99d 0004 	ldrsb.w	r0, [sp, #4]
}
 8007274:	b008      	add	sp, #32
 8007276:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 8007278:	4b05      	ldr	r3, [pc, #20]	@ (8007290 <netconn_send+0x3c>)
 800727a:	f240 32b2 	movw	r2, #946	@ 0x3b2
 800727e:	4905      	ldr	r1, [pc, #20]	@ (8007294 <netconn_send+0x40>)
 8007280:	4805      	ldr	r0, [pc, #20]	@ (8007298 <netconn_send+0x44>)
 8007282:	f00a f909 	bl	8011498 <iprintf>
 8007286:	f06f 000f 	mvn.w	r0, #15
 800728a:	e7f3      	b.n	8007274 <netconn_send+0x20>
 800728c:	080083c5 	.word	0x080083c5
 8007290:	08012498 	.word	0x08012498
 8007294:	080126bc 	.word	0x080126bc
 8007298:	0801241c 	.word	0x0801241c

0800729c <netconn_write_vectors_partly>:
{
 800729c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800729e:	b089      	sub	sp, #36	@ 0x24
 80072a0:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 80072a2:	2800      	cmp	r0, #0
 80072a4:	d05b      	beq.n	800735e <netconn_write_vectors_partly+0xc2>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 80072a6:	7804      	ldrb	r4, [r0, #0]
 80072a8:	f004 04f0 	and.w	r4, r4, #240	@ 0xf0
 80072ac:	2c10      	cmp	r4, #16
 80072ae:	d14e      	bne.n	800734e <netconn_write_vectors_partly+0xb2>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80072b0:	7f04      	ldrb	r4, [r0, #28]
 80072b2:	f003 0604 	and.w	r6, r3, #4
 80072b6:	f004 0402 	and.w	r4, r4, #2
 80072ba:	4334      	orrs	r4, r6
 80072bc:	d016      	beq.n	80072ec <netconn_write_vectors_partly+0x50>
  if (dontblock && !bytes_written) {
 80072be:	b18d      	cbz	r5, 80072e4 <netconn_write_vectors_partly+0x48>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80072c0:	2701      	movs	r7, #1
  for (i = 0; i < vectorcnt; i++) {
 80072c2:	2a00      	cmp	r2, #0
 80072c4:	d038      	beq.n	8007338 <netconn_write_vectors_partly+0x9c>
 80072c6:	f04f 0c00 	mov.w	ip, #0
 80072ca:	f101 0e04 	add.w	lr, r1, #4
  size = 0;
 80072ce:	4666      	mov	r6, ip
 80072d0:	e001      	b.n	80072d6 <netconn_write_vectors_partly+0x3a>
  for (i = 0; i < vectorcnt; i++) {
 80072d2:	4562      	cmp	r2, ip
 80072d4:	d00c      	beq.n	80072f0 <netconn_write_vectors_partly+0x54>
 80072d6:	f85e 403c 	ldr.w	r4, [lr, ip, lsl #3]
 80072da:	f10c 0c01 	add.w	ip, ip, #1
 80072de:	19a4      	adds	r4, r4, r6
    size += vectors[i].len;
 80072e0:	4626      	mov	r6, r4
    if (size < vectors[i].len) {
 80072e2:	d3f6      	bcc.n	80072d2 <netconn_write_vectors_partly+0x36>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 80072e4:	f06f 0005 	mvn.w	r0, #5
}
 80072e8:	b009      	add	sp, #36	@ 0x24
 80072ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80072ec:	4627      	mov	r7, r4
 80072ee:	e7e8      	b.n	80072c2 <netconn_write_vectors_partly+0x26>
  if (size == 0) {
 80072f0:	2c00      	cmp	r4, #0
 80072f2:	d021      	beq.n	8007338 <netconn_write_vectors_partly+0x9c>
  } else if (size > SSIZE_MAX) {
 80072f4:	da03      	bge.n	80072fe <netconn_write_vectors_partly+0x62>
    if (!bytes_written) {
 80072f6:	2d00      	cmp	r5, #0
 80072f8:	d0f4      	beq.n	80072e4 <netconn_write_vectors_partly+0x48>
    size = (size_t)limited;
 80072fa:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 80072fe:	f88d 301c 	strb.w	r3, [sp, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8007302:	2300      	movs	r3, #0
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8007304:	9102      	str	r1, [sp, #8]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8007306:	4669      	mov	r1, sp
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8007308:	f8ad 200c 	strh.w	r2, [sp, #12]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800730c:	f100 020c 	add.w	r2, r0, #12
  API_MSG_VAR_REF(msg).conn = conn;
 8007310:	9000      	str	r0, [sp, #0]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8007312:	4818      	ldr	r0, [pc, #96]	@ (8007374 <netconn_write_vectors_partly+0xd8>)
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8007314:	9306      	str	r3, [sp, #24]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8007316:	e9cd 3604 	strd	r3, r6, [sp, #16]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800731a:	f002 fb25 	bl	8009968 <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 800731e:	2800      	cmp	r0, #0
 8007320:	d1e2      	bne.n	80072e8 <netconn_write_vectors_partly+0x4c>
    return apimsg->err;
 8007322:	f99d 0004 	ldrsb.w	r0, [sp, #4]
  if (err == ERR_OK) {
 8007326:	2800      	cmp	r0, #0
 8007328:	d1de      	bne.n	80072e8 <netconn_write_vectors_partly+0x4c>
    if (bytes_written != NULL) {
 800732a:	b10d      	cbz	r5, 8007330 <netconn_write_vectors_partly+0x94>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800732c:	9b06      	ldr	r3, [sp, #24]
 800732e:	602b      	str	r3, [r5, #0]
    if (!dontblock) {
 8007330:	b917      	cbnz	r7, 8007338 <netconn_write_vectors_partly+0x9c>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8007332:	9b06      	ldr	r3, [sp, #24]
 8007334:	42b3      	cmp	r3, r6
 8007336:	d102      	bne.n	800733e <netconn_write_vectors_partly+0xa2>
    return ERR_OK;
 8007338:	2000      	movs	r0, #0
}
 800733a:	b009      	add	sp, #36	@ 0x24
 800733c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800733e:	4b0e      	ldr	r3, [pc, #56]	@ (8007378 <netconn_write_vectors_partly+0xdc>)
 8007340:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8007344:	490d      	ldr	r1, [pc, #52]	@ (800737c <netconn_write_vectors_partly+0xe0>)
 8007346:	480e      	ldr	r0, [pc, #56]	@ (8007380 <netconn_write_vectors_partly+0xe4>)
 8007348:	f00a f8a6 	bl	8011498 <iprintf>
 800734c:	e7f4      	b.n	8007338 <netconn_write_vectors_partly+0x9c>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800734e:	4b0a      	ldr	r3, [pc, #40]	@ (8007378 <netconn_write_vectors_partly+0xdc>)
 8007350:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 8007354:	490b      	ldr	r1, [pc, #44]	@ (8007384 <netconn_write_vectors_partly+0xe8>)
 8007356:	480a      	ldr	r0, [pc, #40]	@ (8007380 <netconn_write_vectors_partly+0xe4>)
 8007358:	f00a f89e 	bl	8011498 <iprintf>
 800735c:	e7c2      	b.n	80072e4 <netconn_write_vectors_partly+0x48>
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800735e:	4b06      	ldr	r3, [pc, #24]	@ (8007378 <netconn_write_vectors_partly+0xdc>)
 8007360:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8007364:	4908      	ldr	r1, [pc, #32]	@ (8007388 <netconn_write_vectors_partly+0xec>)
 8007366:	4806      	ldr	r0, [pc, #24]	@ (8007380 <netconn_write_vectors_partly+0xe4>)
 8007368:	f00a f896 	bl	8011498 <iprintf>
 800736c:	f06f 000f 	mvn.w	r0, #15
 8007370:	e7ba      	b.n	80072e8 <netconn_write_vectors_partly+0x4c>
 8007372:	bf00      	nop
 8007374:	0800843d 	.word	0x0800843d
 8007378:	08012498 	.word	0x08012498
 800737c:	08012718 	.word	0x08012718
 8007380:	0801241c 	.word	0x0801241c
 8007384:	080126f4 	.word	0x080126f4
 8007388:	080126d8 	.word	0x080126d8

0800738c <netconn_write_partly>:
{
 800738c:	b510      	push	{r4, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	4614      	mov	r4, r2
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8007392:	9a06      	ldr	r2, [sp, #24]
  vector.len = size;
 8007394:	e9cd 1402 	strd	r1, r4, [sp, #8]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8007398:	9200      	str	r2, [sp, #0]
 800739a:	a902      	add	r1, sp, #8
 800739c:	2201      	movs	r2, #1
 800739e:	f7ff ff7d 	bl	800729c <netconn_write_vectors_partly>
}
 80073a2:	b004      	add	sp, #16
 80073a4:	bd10      	pop	{r4, pc}
 80073a6:	bf00      	nop

080073a8 <netconn_err>:
{
 80073a8:	b538      	push	{r3, r4, r5, lr}
  if (conn == NULL) {
 80073aa:	4604      	mov	r4, r0
 80073ac:	b148      	cbz	r0, 80073c2 <netconn_err+0x1a>
  SYS_ARCH_PROTECT(lev);
 80073ae:	f009 fe57 	bl	8011060 <sys_arch_protect>
  conn->pending_err = ERR_OK;
 80073b2:	2300      	movs	r3, #0
  err = conn->pending_err;
 80073b4:	f994 5008 	ldrsb.w	r5, [r4, #8]
  conn->pending_err = ERR_OK;
 80073b8:	7223      	strb	r3, [r4, #8]
  SYS_ARCH_UNPROTECT(lev);
 80073ba:	f009 fe5d 	bl	8011078 <sys_arch_unprotect>
  return err;
}
 80073be:	4628      	mov	r0, r5
 80073c0:	bd38      	pop	{r3, r4, r5, pc}
    return ERR_OK;
 80073c2:	4605      	mov	r5, r0
}
 80073c4:	4628      	mov	r0, r5
 80073c6:	bd38      	pop	{r3, r4, r5, pc}

080073c8 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 80073c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073cc:	4604      	mov	r4, r0
 80073ce:	f8bd 8020 	ldrh.w	r8, [sp, #32]
 80073d2:	4617      	mov	r7, r2
 80073d4:	461e      	mov	r6, r3
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 80073d6:	460d      	mov	r5, r1
 80073d8:	b379      	cbz	r1, 800743a <recv_udp+0x72>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 80073da:	2c00      	cmp	r4, #0
 80073dc:	d03b      	beq.n	8007456 <recv_udp+0x8e>
  if (conn == NULL) {
    pbuf_free(p);
    return;
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 80073de:	6863      	ldr	r3, [r4, #4]
 80073e0:	42ab      	cmp	r3, r5
 80073e2:	d005      	beq.n	80073f0 <recv_udp+0x28>
 80073e4:	4b21      	ldr	r3, [pc, #132]	@ (800746c <recv_udp+0xa4>)
 80073e6:	22ee      	movs	r2, #238	@ 0xee
 80073e8:	4921      	ldr	r1, [pc, #132]	@ (8007470 <recv_udp+0xa8>)
 80073ea:	4822      	ldr	r0, [pc, #136]	@ (8007474 <recv_udp+0xac>)
 80073ec:	f00a f854 	bl	8011498 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80073f0:	f104 0910 	add.w	r9, r4, #16
 80073f4:	4648      	mov	r0, r9
 80073f6:	f009 fda1 	bl	8010f3c <sys_mbox_valid>
 80073fa:	b1c8      	cbz	r0, 8007430 <recv_udp+0x68>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
    return;
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80073fc:	2006      	movs	r0, #6
 80073fe:	f002 fea9 	bl	800a154 <memp_malloc>
  if (buf == NULL) {
 8007402:	4605      	mov	r5, r0
 8007404:	b1a0      	cbz	r0, 8007430 <recv_udp+0x68>
    pbuf_free(p);
    return;
  } else {
    buf->p = p;
 8007406:	e9c0 7700 	strd	r7, r7, [r0]
    buf->ptr = p;
    ip_addr_set(&buf->addr, addr);
 800740a:	b106      	cbz	r6, 800740e <recv_udp+0x46>
 800740c:	6836      	ldr	r6, [r6, #0]
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800740e:	4629      	mov	r1, r5
    ip_addr_set(&buf->addr, addr);
 8007410:	60ae      	str	r6, [r5, #8]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8007412:	4648      	mov	r0, r9
    buf->port = port;
 8007414:	f8a5 800c 	strh.w	r8, [r5, #12]
  len = p->tot_len;
 8007418:	893e      	ldrh	r6, [r7, #8]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800741a:	f009 fd4d 	bl	8010eb8 <sys_mbox_trypost>
 800741e:	4601      	mov	r1, r0
 8007420:	b990      	cbnz	r0, 8007448 <recv_udp+0x80>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8007422:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007424:	b1ab      	cbz	r3, 8007452 <recv_udp+0x8a>
 8007426:	4632      	mov	r2, r6
 8007428:	4620      	mov	r0, r4
  }
}
 800742a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800742e:	4718      	bx	r3
    pbuf_free(p);
 8007430:	4638      	mov	r0, r7
}
 8007432:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    pbuf_free(p);
 8007436:	f003 b9a3 	b.w	800a780 <pbuf_free>
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800743a:	4b0c      	ldr	r3, [pc, #48]	@ (800746c <recv_udp+0xa4>)
 800743c:	22e5      	movs	r2, #229	@ 0xe5
 800743e:	490e      	ldr	r1, [pc, #56]	@ (8007478 <recv_udp+0xb0>)
 8007440:	480c      	ldr	r0, [pc, #48]	@ (8007474 <recv_udp+0xac>)
 8007442:	f00a f829 	bl	8011498 <iprintf>
 8007446:	e7c8      	b.n	80073da <recv_udp+0x12>
    netbuf_delete(buf);
 8007448:	4628      	mov	r0, r5
}
 800744a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    netbuf_delete(buf);
 800744e:	f001 b915 	b.w	800867c <netbuf_delete>
}
 8007452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8007456:	4b05      	ldr	r3, [pc, #20]	@ (800746c <recv_udp+0xa4>)
 8007458:	22e6      	movs	r2, #230	@ 0xe6
 800745a:	4908      	ldr	r1, [pc, #32]	@ (800747c <recv_udp+0xb4>)
 800745c:	4805      	ldr	r0, [pc, #20]	@ (8007474 <recv_udp+0xac>)
 800745e:	f00a f81b 	bl	8011498 <iprintf>
    pbuf_free(p);
 8007462:	4638      	mov	r0, r7
}
 8007464:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    pbuf_free(p);
 8007468:	f003 b98a 	b.w	800a780 <pbuf_free>
 800746c:	0801273c 	.word	0x0801273c
 8007470:	080127b4 	.word	0x080127b4
 8007474:	0801241c 	.word	0x0801241c
 8007478:	08012770 	.word	0x08012770
 800747c:	08012794 	.word	0x08012794

08007480 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8007480:	b510      	push	{r4, lr}
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8007482:	6844      	ldr	r4, [r0, #4]
{
 8007484:	4601      	mov	r1, r0
  tcp_arg(pcb, conn);
 8007486:	4620      	mov	r0, r4
 8007488:	f003 fee0 	bl	800b24c <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800748c:	4620      	mov	r0, r4
 800748e:	4909      	ldr	r1, [pc, #36]	@ (80074b4 <setup_tcp+0x34>)
 8007490:	f003 fee0 	bl	800b254 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8007494:	4620      	mov	r0, r4
 8007496:	4908      	ldr	r1, [pc, #32]	@ (80074b8 <setup_tcp+0x38>)
 8007498:	f003 fef8 	bl	800b28c <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800749c:	4620      	mov	r0, r4
 800749e:	4907      	ldr	r1, [pc, #28]	@ (80074bc <setup_tcp+0x3c>)
 80074a0:	2202      	movs	r2, #2
 80074a2:	f003 ff31 	bl	800b308 <tcp_poll>
  tcp_err(pcb, err_tcp);
 80074a6:	4620      	mov	r0, r4
 80074a8:	4905      	ldr	r1, [pc, #20]	@ (80074c0 <setup_tcp+0x40>)
}
 80074aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_err(pcb, err_tcp);
 80074ae:	f003 bf09 	b.w	800b2c4 <tcp_err>
 80074b2:	bf00      	nop
 80074b4:	08007bd9 	.word	0x08007bd9
 80074b8:	08007b6d 	.word	0x08007b6d
 80074bc:	08007af1 	.word	0x08007af1
 80074c0:	08007cb1 	.word	0x08007cb1

080074c4 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80074c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 80074c8:	4680      	mov	r8, r0
{
 80074ca:	b083      	sub	sp, #12
 80074cc:	460d      	mov	r5, r1
  LWIP_ASSERT("conn != NULL", conn != NULL);
 80074ce:	2800      	cmp	r0, #0
 80074d0:	f000 813f 	beq.w	8007752 <lwip_netconn_do_writemore+0x28e>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 80074d4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d006      	beq.n	80074ea <lwip_netconn_do_writemore+0x26>
 80074dc:	4bab      	ldr	r3, [pc, #684]	@ (800778c <lwip_netconn_do_writemore+0x2c8>)
 80074de:	f240 6274 	movw	r2, #1652	@ 0x674
 80074e2:	49ab      	ldr	r1, [pc, #684]	@ (8007790 <lwip_netconn_do_writemore+0x2cc>)
 80074e4:	48ab      	ldr	r0, [pc, #684]	@ (8007794 <lwip_netconn_do_writemore+0x2d0>)
 80074e6:	f009 ffd7 	bl	8011498 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80074ea:	f8d8 3020 	ldr.w	r3, [r8, #32]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	f000 8137 	beq.w	8007762 <lwip_netconn_do_writemore+0x29e>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 80074f4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	f000 813e 	beq.w	800777a <lwip_netconn_do_writemore+0x2b6>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 80074fe:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8007502:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
 8007506:	4291      	cmp	r1, r2
 8007508:	f080 80ce 	bcs.w	80076a8 <lwip_netconn_do_writemore+0x1e4>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800750c:	899a      	ldrh	r2, [r3, #12]
 800750e:	2a00      	cmp	r2, #0
 8007510:	f000 80c0 	beq.w	8007694 <lwip_netconn_do_writemore+0x1d0>

  apiflags = conn->current_msg->msg.w.apiflags;
 8007514:	7f1f      	ldrb	r7, [r3, #28]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8007516:	f898 901c 	ldrb.w	r9, [r8, #28]
 800751a:	f007 0204 	and.w	r2, r7, #4
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800751e:	f8df b26c 	ldr.w	fp, [pc, #620]	@ 800778c <lwip_netconn_do_writemore+0x2c8>
 8007522:	f009 0902 	and.w	r9, r9, #2
 8007526:	f8df a284 	ldr.w	sl, [pc, #644]	@ 80077ac <lwip_netconn_do_writemore+0x2e8>
 800752a:	9501      	str	r5, [sp, #4]
 800752c:	ea49 0902 	orr.w	r9, r9, r2
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8007530:	689a      	ldr	r2, [r3, #8]
 8007532:	6919      	ldr	r1, [r3, #16]
 8007534:	e9d2 6c00 	ldrd	r6, ip, [r2]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8007538:	ebac 0501 	sub.w	r5, ip, r1
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800753c:	440e      	add	r6, r1
      if (diff > 0xffffUL) { /* max_u16_t */
 800753e:	f5b5 3f80 	cmp.w	r5, #65536	@ 0x10000
 8007542:	d370      	bcc.n	8007626 <lwip_netconn_do_writemore+0x162>
        apiflags |= TCP_WRITE_FLAG_MORE;
 8007544:	f047 0702 	orr.w	r7, r7, #2
        len = 0xffff;
 8007548:	f64f 74ff 	movw	r4, #65535	@ 0xffff
      available = tcp_sndbuf(conn->pcb.tcp);
 800754c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8007550:	f8b2 e064 	ldrh.w	lr, [r2, #100]	@ 0x64
 8007554:	4610      	mov	r0, r2
      if (available < len) {
 8007556:	4574      	cmp	r4, lr
 8007558:	d908      	bls.n	800756c <lwip_netconn_do_writemore+0xa8>
        if (dontblock) {
 800755a:	f1b9 0f00 	cmp.w	r9, #0
 800755e:	f000 8087 	beq.w	8007670 <lwip_netconn_do_writemore+0x1ac>
          if (!len) {
 8007562:	f1be 0f00 	cmp.w	lr, #0
 8007566:	f000 80a9 	beq.w	80076bc <lwip_netconn_do_writemore+0x1f8>
 800756a:	4674      	mov	r4, lr
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800756c:	4421      	add	r1, r4
 800756e:	458c      	cmp	ip, r1
 8007570:	d374      	bcc.n	800765c <lwip_netconn_do_writemore+0x198>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8007572:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007576:	429c      	cmp	r4, r3
 8007578:	d16b      	bne.n	8007652 <lwip_netconn_do_writemore+0x18e>
 800757a:	429d      	cmp	r5, r3
 800757c:	d969      	bls.n	8007652 <lwip_netconn_do_writemore+0x18e>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
        write_more = 1;
        apiflags |= TCP_WRITE_FLAG_MORE;
 800757e:	f047 0702 	orr.w	r7, r7, #2
        write_more = 1;
 8007582:	2501      	movs	r5, #1
      } else {
        write_more = 0;
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8007584:	463b      	mov	r3, r7
 8007586:	4622      	mov	r2, r4
 8007588:	4631      	mov	r1, r6
 800758a:	f006 fbed 	bl	800dd68 <tcp_write>
      if (err == ERR_OK) {
 800758e:	2800      	cmp	r0, #0
 8007590:	d14b      	bne.n	800762a <lwip_netconn_do_writemore+0x166>
        conn->current_msg->msg.w.offset += len;
 8007592:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8007596:	699a      	ldr	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8007598:	6899      	ldr	r1, [r3, #8]
        conn->current_msg->msg.w.offset += len;
 800759a:	4422      	add	r2, r4
 800759c:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800759e:	691a      	ldr	r2, [r3, #16]
 80075a0:	4414      	add	r4, r2
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 80075a2:	684a      	ldr	r2, [r1, #4]
 80075a4:	4294      	cmp	r4, r2
        conn->current_msg->msg.w.vector_off += len;
 80075a6:	611c      	str	r4, [r3, #16]
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 80075a8:	d031      	beq.n	800760e <lwip_netconn_do_writemore+0x14a>
            conn->current_msg->msg.w.vector++;
            conn->current_msg->msg.w.vector_off = 0;
          }
        }
      }
    } while (write_more && err == ERR_OK);
 80075aa:	2d00      	cmp	r5, #0
 80075ac:	d1c0      	bne.n	8007530 <lwip_netconn_do_writemore+0x6c>
 80075ae:	4606      	mov	r6, r0
 80075b0:	9d01      	ldr	r5, [sp, #4]
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
err_mem:
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 80075b2:	f1b9 0f00 	cmp.w	r9, #0
 80075b6:	f040 80fb 	bne.w	80077b0 <lwip_netconn_do_writemore+0x2ec>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80075ba:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80075be:	f8b2 3064 	ldrh.w	r3, [r2, #100]	@ 0x64
 80075c2:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 80075c6:	d303      	bcc.n	80075d0 <lwip_netconn_do_writemore+0x10c>
 80075c8:	f8b2 3066 	ldrh.w	r3, [r2, #102]	@ 0x66
 80075cc:	2b04      	cmp	r3, #4
 80075ce:	d908      	bls.n	80075e2 <lwip_netconn_do_writemore+0x11e>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80075d0:	f8d8 3024 	ldr.w	r3, [r8, #36]	@ 0x24
 80075d4:	b12b      	cbz	r3, 80075e2 <lwip_netconn_do_writemore+0x11e>
 80075d6:	2200      	movs	r2, #0
 80075d8:	2103      	movs	r1, #3
 80075da:	4640      	mov	r0, r8
 80075dc:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 80075de:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80075e2:	2e00      	cmp	r6, #0
 80075e4:	f000 8086 	beq.w	80076f4 <lwip_netconn_do_writemore+0x230>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 80075e8:	4610      	mov	r0, r2
 80075ea:	f007 f9b1 	bl	800e950 <tcp_output>
      if (out_err == ERR_RTE) {
 80075ee:	1d03      	adds	r3, r0, #4
      err_t out_err = tcp_output(conn->pcb.tcp);
 80075f0:	4606      	mov	r6, r0
      if (out_err == ERR_RTE) {
 80075f2:	d020      	beq.n	8007636 <lwip_netconn_do_writemore+0x172>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
        write_finished = 1;
      } else if (dontblock) {
 80075f4:	f1b9 0f00 	cmp.w	r9, #0
 80075f8:	f000 808b 	beq.w	8007712 <lwip_netconn_do_writemore+0x24e>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80075fc:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8007600:	699a      	ldr	r2, [r3, #24]
 8007602:	2a00      	cmp	r2, #0
 8007604:	bf14      	ite	ne
 8007606:	2600      	movne	r6, #0
 8007608:	f06f 0606 	mvneq.w	r6, #6
 800760c:	e015      	b.n	800763a <lwip_netconn_do_writemore+0x176>
          conn->current_msg->msg.w.vector_cnt--;
 800760e:	899a      	ldrh	r2, [r3, #12]
 8007610:	3a01      	subs	r2, #1
 8007612:	b292      	uxth	r2, r2
 8007614:	819a      	strh	r2, [r3, #12]
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8007616:	2a00      	cmp	r2, #0
 8007618:	d0c7      	beq.n	80075aa <lwip_netconn_do_writemore+0xe6>
            conn->current_msg->msg.w.vector++;
 800761a:	3108      	adds	r1, #8
            conn->current_msg->msg.w.vector_off = 0;
 800761c:	6118      	str	r0, [r3, #16]
            conn->current_msg->msg.w.vector++;
 800761e:	6099      	str	r1, [r3, #8]
    } while (write_more && err == ERR_OK);
 8007620:	2d00      	cmp	r5, #0
 8007622:	d185      	bne.n	8007530 <lwip_netconn_do_writemore+0x6c>
 8007624:	e7c3      	b.n	80075ae <lwip_netconn_do_writemore+0xea>
        len = (u16_t)diff;
 8007626:	b2ac      	uxth	r4, r5
 8007628:	e790      	b.n	800754c <lwip_netconn_do_writemore+0x88>
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800762a:	1c43      	adds	r3, r0, #1
 800762c:	4606      	mov	r6, r0
 800762e:	9d01      	ldr	r5, [sp, #4]
 8007630:	b2db      	uxtb	r3, r3
 8007632:	2b01      	cmp	r3, #1
 8007634:	d927      	bls.n	8007686 <lwip_netconn_do_writemore+0x1c2>
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8007636:	f8d8 3020 	ldr.w	r3, [r8, #32]
    }
  }
  if (write_finished) {
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800763a:	6818      	ldr	r0, [r3, #0]
    conn->current_msg->err = err;
 800763c:	711e      	strb	r6, [r3, #4]
    conn->current_msg = NULL;
 800763e:	2300      	movs	r3, #0
 8007640:	f8c8 3020 	str.w	r3, [r8, #32]
    conn->state = NETCONN_NONE;
 8007644:	f888 3001 	strb.w	r3, [r8, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8007648:	bb05      	cbnz	r5, 800768c <lwip_netconn_do_writemore+0x1c8>
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
  }
#endif
  return ERR_OK;
 800764a:	2000      	movs	r0, #0
}
 800764c:	b003      	add	sp, #12
 800764e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ((len == 0xffff && diff > 0xffffUL) ||
 8007652:	b2ad      	uxth	r5, r5
 8007654:	42a5      	cmp	r5, r4
 8007656:	d00f      	beq.n	8007678 <lwip_netconn_do_writemore+0x1b4>
        write_more = 0;
 8007658:	2500      	movs	r5, #0
 800765a:	e793      	b.n	8007584 <lwip_netconn_do_writemore+0xc0>
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800765c:	465b      	mov	r3, fp
 800765e:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8007662:	4651      	mov	r1, sl
 8007664:	484b      	ldr	r0, [pc, #300]	@ (8007794 <lwip_netconn_do_writemore+0x2d0>)
 8007666:	f009 ff17 	bl	8011498 <iprintf>
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800766a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800766e:	e780      	b.n	8007572 <lwip_netconn_do_writemore+0xae>
          apiflags |= TCP_WRITE_FLAG_MORE;
 8007670:	f047 0702 	orr.w	r7, r7, #2
 8007674:	4674      	mov	r4, lr
 8007676:	e779      	b.n	800756c <lwip_netconn_do_writemore+0xa8>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8007678:	f8d8 3020 	ldr.w	r3, [r8, #32]
 800767c:	899b      	ldrh	r3, [r3, #12]
 800767e:	2b01      	cmp	r3, #1
 8007680:	f63f af7d 	bhi.w	800757e <lwip_netconn_do_writemore+0xba>
 8007684:	e7e8      	b.n	8007658 <lwip_netconn_do_writemore+0x194>
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8007686:	f04f 36ff 	mov.w	r6, #4294967295
 800768a:	e792      	b.n	80075b2 <lwip_netconn_do_writemore+0xee>
      sys_sem_signal(op_completed_sem);
 800768c:	300c      	adds	r0, #12
 800768e:	f009 fc93 	bl	8010fb8 <sys_sem_signal>
 8007692:	e7da      	b.n	800764a <lwip_netconn_do_writemore+0x186>
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8007694:	4b3d      	ldr	r3, [pc, #244]	@ (800778c <lwip_netconn_do_writemore+0x2c8>)
 8007696:	f240 6279 	movw	r2, #1657	@ 0x679
 800769a:	493f      	ldr	r1, [pc, #252]	@ (8007798 <lwip_netconn_do_writemore+0x2d4>)
 800769c:	483d      	ldr	r0, [pc, #244]	@ (8007794 <lwip_netconn_do_writemore+0x2d0>)
 800769e:	f009 fefb 	bl	8011498 <iprintf>
  apiflags = conn->current_msg->msg.w.apiflags;
 80076a2:	f8d8 3020 	ldr.w	r3, [r8, #32]
 80076a6:	e735      	b.n	8007514 <lwip_netconn_do_writemore+0x50>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 80076a8:	4b38      	ldr	r3, [pc, #224]	@ (800778c <lwip_netconn_do_writemore+0x2c8>)
 80076aa:	f240 6277 	movw	r2, #1655	@ 0x677
 80076ae:	493b      	ldr	r1, [pc, #236]	@ (800779c <lwip_netconn_do_writemore+0x2d8>)
 80076b0:	4838      	ldr	r0, [pc, #224]	@ (8007794 <lwip_netconn_do_writemore+0x2d0>)
 80076b2:	f009 fef1 	bl	8011498 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 80076b6:	f8d8 3020 	ldr.w	r3, [r8, #32]
 80076ba:	e727      	b.n	800750c <lwip_netconn_do_writemore+0x48>
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80076bc:	6999      	ldr	r1, [r3, #24]
 80076be:	9d01      	ldr	r5, [sp, #4]
 80076c0:	b961      	cbnz	r1, 80076dc <lwip_netconn_do_writemore+0x218>
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 80076c2:	695a      	ldr	r2, [r3, #20]
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80076c4:	f8d8 4024 	ldr.w	r4, [r8, #36]	@ 0x24
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 80076c8:	bb32      	cbnz	r2, 8007718 <lwip_netconn_do_writemore+0x254>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80076ca:	b124      	cbz	r4, 80076d6 <lwip_netconn_do_writemore+0x212>
 80076cc:	2103      	movs	r1, #3
 80076ce:	4640      	mov	r0, r8
 80076d0:	47a0      	blx	r4
    if (err == ERR_OK) {
 80076d2:	f8d8 3020 	ldr.w	r3, [r8, #32]
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80076d6:	f06f 0606 	mvn.w	r6, #6
 80076da:	e7ae      	b.n	800763a <lwip_netconn_do_writemore+0x176>
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 80076dc:	695b      	ldr	r3, [r3, #20]
 80076de:	4299      	cmp	r1, r3
 80076e0:	d37c      	bcc.n	80077dc <lwip_netconn_do_writemore+0x318>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80076e2:	f8d8 3024 	ldr.w	r3, [r8, #36]	@ 0x24
 80076e6:	b34b      	cbz	r3, 800773c <lwip_netconn_do_writemore+0x278>
 80076e8:	4672      	mov	r2, lr
 80076ea:	2103      	movs	r1, #3
 80076ec:	4640      	mov	r0, r8
 80076ee:	4798      	blx	r3
    if (err == ERR_OK) {
 80076f0:	f8d8 2004 	ldr.w	r2, [r8, #4]
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 80076f4:	f8d8 3020 	ldr.w	r3, [r8, #32]
 80076f8:	e9d3 3105 	ldrd	r3, r1, [r3, #20]
 80076fc:	4299      	cmp	r1, r3
 80076fe:	d01d      	beq.n	800773c <lwip_netconn_do_writemore+0x278>
 8007700:	f1b9 0f00 	cmp.w	r9, #0
 8007704:	d11a      	bne.n	800773c <lwip_netconn_do_writemore+0x278>
      out_err = tcp_output(conn->pcb.tcp);
 8007706:	4610      	mov	r0, r2
 8007708:	f007 f922 	bl	800e950 <tcp_output>
      if (out_err == ERR_RTE) {
 800770c:	1d02      	adds	r2, r0, #4
      out_err = tcp_output(conn->pcb.tcp);
 800770e:	4606      	mov	r6, r0
      if (out_err == ERR_RTE) {
 8007710:	d091      	beq.n	8007636 <lwip_netconn_do_writemore+0x172>
    return ERR_MEM;
 8007712:	f04f 30ff 	mov.w	r0, #4294967295
 8007716:	e799      	b.n	800764c <lwip_netconn_do_writemore+0x188>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8007718:	2c00      	cmp	r4, #0
 800771a:	d064      	beq.n	80077e6 <lwip_netconn_do_writemore+0x322>
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800771c:	f06f 0606 	mvn.w	r6, #6
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8007720:	2200      	movs	r2, #0
 8007722:	2103      	movs	r1, #3
 8007724:	4640      	mov	r0, r8
 8007726:	47a0      	blx	r4
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8007728:	f898 301c 	ldrb.w	r3, [r8, #28]
 800772c:	f043 0310 	orr.w	r3, r3, #16
 8007730:	f888 301c 	strb.w	r3, [r8, #28]
    if (err == ERR_OK) {
 8007734:	2e00      	cmp	r6, #0
 8007736:	d164      	bne.n	8007802 <lwip_netconn_do_writemore+0x33e>
 8007738:	f8d8 2004 	ldr.w	r2, [r8, #4]
      out_err = tcp_output(conn->pcb.tcp);
 800773c:	4610      	mov	r0, r2
 800773e:	f007 f907 	bl	800e950 <tcp_output>
      if (out_err == ERR_RTE) {
 8007742:	1d01      	adds	r1, r0, #4
      out_err = tcp_output(conn->pcb.tcp);
 8007744:	4606      	mov	r6, r0
      if (out_err == ERR_RTE) {
 8007746:	f43f af76 	beq.w	8007636 <lwip_netconn_do_writemore+0x172>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800774a:	f8d8 3020 	ldr.w	r3, [r8, #32]
 800774e:	2600      	movs	r6, #0
 8007750:	e773      	b.n	800763a <lwip_netconn_do_writemore+0x176>
  LWIP_ASSERT("conn != NULL", conn != NULL);
 8007752:	4b0e      	ldr	r3, [pc, #56]	@ (800778c <lwip_netconn_do_writemore+0x2c8>)
 8007754:	f240 6273 	movw	r2, #1651	@ 0x673
 8007758:	4911      	ldr	r1, [pc, #68]	@ (80077a0 <lwip_netconn_do_writemore+0x2dc>)
 800775a:	480e      	ldr	r0, [pc, #56]	@ (8007794 <lwip_netconn_do_writemore+0x2d0>)
 800775c:	f009 fe9c 	bl	8011498 <iprintf>
 8007760:	e6b8      	b.n	80074d4 <lwip_netconn_do_writemore+0x10>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8007762:	4b0a      	ldr	r3, [pc, #40]	@ (800778c <lwip_netconn_do_writemore+0x2c8>)
 8007764:	f240 6275 	movw	r2, #1653	@ 0x675
 8007768:	490e      	ldr	r1, [pc, #56]	@ (80077a4 <lwip_netconn_do_writemore+0x2e0>)
 800776a:	480a      	ldr	r0, [pc, #40]	@ (8007794 <lwip_netconn_do_writemore+0x2d0>)
 800776c:	f009 fe94 	bl	8011498 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8007770:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007774:	2b00      	cmp	r3, #0
 8007776:	f47f aec2 	bne.w	80074fe <lwip_netconn_do_writemore+0x3a>
 800777a:	4b04      	ldr	r3, [pc, #16]	@ (800778c <lwip_netconn_do_writemore+0x2c8>)
 800777c:	f240 6276 	movw	r2, #1654	@ 0x676
 8007780:	4909      	ldr	r1, [pc, #36]	@ (80077a8 <lwip_netconn_do_writemore+0x2e4>)
 8007782:	4804      	ldr	r0, [pc, #16]	@ (8007794 <lwip_netconn_do_writemore+0x2d0>)
 8007784:	f009 fe88 	bl	8011498 <iprintf>
 8007788:	e6b9      	b.n	80074fe <lwip_netconn_do_writemore+0x3a>
 800778a:	bf00      	nop
 800778c:	0801273c 	.word	0x0801273c
 8007790:	080127e4 	.word	0x080127e4
 8007794:	0801241c 	.word	0x0801241c
 8007798:	08012878 	.word	0x08012878
 800779c:	08012838 	.word	0x08012838
 80077a0:	080127d4 	.word	0x080127d4
 80077a4:	08012804 	.word	0x08012804
 80077a8:	08012820 	.word	0x08012820
 80077ac:	080128a0 	.word	0x080128a0
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 80077b0:	f8d8 3020 	ldr.w	r3, [r8, #32]
 80077b4:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
 80077b8:	429a      	cmp	r2, r3
 80077ba:	f4bf aefe 	bcs.w	80075ba <lwip_netconn_do_writemore+0xf6>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80077be:	f8d8 4024 	ldr.w	r4, [r8, #36]	@ 0x24
 80077c2:	2c00      	cmp	r4, #0
 80077c4:	d1ac      	bne.n	8007720 <lwip_netconn_do_writemore+0x25c>
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 80077c6:	f898 301c 	ldrb.w	r3, [r8, #28]
 80077ca:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80077ce:	f043 0310 	orr.w	r3, r3, #16
 80077d2:	f888 301c 	strb.w	r3, [r8, #28]
    if (err == ERR_OK) {
 80077d6:	2e00      	cmp	r6, #0
 80077d8:	d0b0      	beq.n	800773c <lwip_netconn_do_writemore+0x278>
 80077da:	e705      	b.n	80075e8 <lwip_netconn_do_writemore+0x124>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80077dc:	f8d8 4024 	ldr.w	r4, [r8, #36]	@ 0x24
 80077e0:	b144      	cbz	r4, 80077f4 <lwip_netconn_do_writemore+0x330>
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80077e2:	4676      	mov	r6, lr
 80077e4:	e79c      	b.n	8007720 <lwip_netconn_do_writemore+0x25c>
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 80077e6:	f898 201c 	ldrb.w	r2, [r8, #28]
 80077ea:	f042 0210 	orr.w	r2, r2, #16
 80077ee:	f888 201c 	strb.w	r2, [r8, #28]
    } else if (err == ERR_MEM) {
 80077f2:	e770      	b.n	80076d6 <lwip_netconn_do_writemore+0x212>
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 80077f4:	f898 301c 	ldrb.w	r3, [r8, #28]
 80077f8:	f043 0310 	orr.w	r3, r3, #16
 80077fc:	f888 301c 	strb.w	r3, [r8, #28]
    if (err == ERR_OK) {
 8007800:	e79c      	b.n	800773c <lwip_netconn_do_writemore+0x278>
    } else if (err == ERR_MEM) {
 8007802:	3601      	adds	r6, #1
 8007804:	d004      	beq.n	8007810 <lwip_netconn_do_writemore+0x34c>
 8007806:	f8d8 3020 	ldr.w	r3, [r8, #32]
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800780a:	f06f 0606 	mvn.w	r6, #6
 800780e:	e714      	b.n	800763a <lwip_netconn_do_writemore+0x176>
 8007810:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8007814:	e6e8      	b.n	80075e8 <lwip_netconn_do_writemore+0x124>
 8007816:	bf00      	nop

08007818 <lwip_netconn_do_close_internal>:
{
 8007818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("invalid conn", (conn != NULL));
 800781c:	4604      	mov	r4, r0
{
 800781e:	460e      	mov	r6, r1
  LWIP_ASSERT("invalid conn", (conn != NULL));
 8007820:	2800      	cmp	r0, #0
 8007822:	f000 80e7 	beq.w	80079f4 <lwip_netconn_do_close_internal+0x1dc>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8007826:	7823      	ldrb	r3, [r4, #0]
 8007828:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800782c:	2b10      	cmp	r3, #16
 800782e:	d006      	beq.n	800783e <lwip_netconn_do_close_internal+0x26>
 8007830:	4ba4      	ldr	r3, [pc, #656]	@ (8007ac4 <lwip_netconn_do_close_internal+0x2ac>)
 8007832:	f240 32a3 	movw	r2, #931	@ 0x3a3
 8007836:	49a4      	ldr	r1, [pc, #656]	@ (8007ac8 <lwip_netconn_do_close_internal+0x2b0>)
 8007838:	48a4      	ldr	r0, [pc, #656]	@ (8007acc <lwip_netconn_do_close_internal+0x2b4>)
 800783a:	f009 fe2d 	bl	8011498 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800783e:	7863      	ldrb	r3, [r4, #1]
 8007840:	2b04      	cmp	r3, #4
 8007842:	d006      	beq.n	8007852 <lwip_netconn_do_close_internal+0x3a>
 8007844:	4b9f      	ldr	r3, [pc, #636]	@ (8007ac4 <lwip_netconn_do_close_internal+0x2ac>)
 8007846:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 800784a:	49a1      	ldr	r1, [pc, #644]	@ (8007ad0 <lwip_netconn_do_close_internal+0x2b8>)
 800784c:	489f      	ldr	r0, [pc, #636]	@ (8007acc <lwip_netconn_do_close_internal+0x2b4>)
 800784e:	f009 fe23 	bl	8011498 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8007852:	6863      	ldr	r3, [r4, #4]
 8007854:	2b00      	cmp	r3, #0
 8007856:	f000 80b9 	beq.w	80079cc <lwip_netconn_do_close_internal+0x1b4>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800785a:	6a23      	ldr	r3, [r4, #32]
 800785c:	2b00      	cmp	r3, #0
 800785e:	f000 80c0 	beq.w	80079e2 <lwip_netconn_do_close_internal+0x1ca>
  shut = conn->current_msg->msg.sd.shut;
 8007862:	7a1b      	ldrb	r3, [r3, #8]
  tpcb = conn->pcb.tcp;
 8007864:	6865      	ldr	r5, [r4, #4]
  if (shut == NETCONN_SHUT_RDWR) {
 8007866:	2b03      	cmp	r3, #3
  shut_rx = shut & NETCONN_SHUT_RD;
 8007868:	f003 0701 	and.w	r7, r3, #1
  shut_tx = shut & NETCONN_SHUT_WR;
 800786c:	f003 0802 	and.w	r8, r3, #2
  if (shut == NETCONN_SHUT_RDWR) {
 8007870:	d03d      	beq.n	80078ee <lwip_netconn_do_close_internal+0xd6>
  } else if (shut_rx &&
 8007872:	b36f      	cbz	r7, 80078d0 <lwip_netconn_do_close_internal+0xb8>
             ((tpcb->state == FIN_WAIT_1) ||
 8007874:	7d2b      	ldrb	r3, [r5, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8007876:	1f5a      	subs	r2, r3, #5
  } else if (shut_rx &&
 8007878:	2a01      	cmp	r2, #1
 800787a:	d978      	bls.n	800796e <lwip_netconn_do_close_internal+0x156>
 800787c:	2b08      	cmp	r3, #8
 800787e:	d076      	beq.n	800796e <lwip_netconn_do_close_internal+0x156>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8007880:	f1b8 0f00 	cmp.w	r8, #0
 8007884:	f040 80be 	bne.w	8007a04 <lwip_netconn_do_close_internal+0x1ec>
  if (tpcb->state == LISTEN) {
 8007888:	2b01      	cmp	r3, #1
 800788a:	d06b      	beq.n	8007964 <lwip_netconn_do_close_internal+0x14c>
      tcp_recv(tpcb, NULL);
 800788c:	4641      	mov	r1, r8
 800788e:	4628      	mov	r0, r5
 8007890:	f003 fce0 	bl	800b254 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8007894:	4641      	mov	r1, r8
 8007896:	4628      	mov	r0, r5
 8007898:	f003 fd30 	bl	800b2fc <tcp_accept>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800789c:	4642      	mov	r2, r8
 800789e:	4639      	mov	r1, r7
 80078a0:	4628      	mov	r0, r5
 80078a2:	f004 fb87 	bl	800bfb4 <tcp_shutdown>
      if (conn->current_msg->msg.sd.polls_left == 0) {
 80078a6:	6a23      	ldr	r3, [r4, #32]
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 80078a8:	4602      	mov	r2, r0
  if (err == ERR_OK) {
 80078aa:	2800      	cmp	r0, #0
 80078ac:	f000 8088 	beq.w	80079c0 <lwip_netconn_do_close_internal+0x1a8>
    if (err == ERR_MEM) {
 80078b0:	1c41      	adds	r1, r0, #1
 80078b2:	d17e      	bne.n	80079b2 <lwip_netconn_do_close_internal+0x19a>
      if (conn->current_msg->msg.sd.polls_left == 0) {
 80078b4:	7a5a      	ldrb	r2, [r3, #9]
 80078b6:	2a00      	cmp	r2, #0
 80078b8:	f040 80e0 	bne.w	8007a7c <lwip_netconn_do_close_internal+0x264>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80078bc:	681d      	ldr	r5, [r3, #0]
    conn->current_msg->err = err;
 80078be:	7118      	strb	r0, [r3, #4]
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80078c0:	350c      	adds	r5, #12
    conn->current_msg = NULL;
 80078c2:	6222      	str	r2, [r4, #32]
    conn->state = NETCONN_NONE;
 80078c4:	7062      	strb	r2, [r4, #1]
    if (delayed)
 80078c6:	2e00      	cmp	r6, #0
 80078c8:	d145      	bne.n	8007956 <lwip_netconn_do_close_internal+0x13e>
    return ERR_OK;
 80078ca:	2000      	movs	r0, #0
}
 80078cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 80078d0:	f1b8 0f00 	cmp.w	r8, #0
 80078d4:	d043      	beq.n	800795e <lwip_netconn_do_close_internal+0x146>
 80078d6:	8b6b      	ldrh	r3, [r5, #26]
 80078d8:	06d8      	lsls	r0, r3, #27
 80078da:	f100 8097 	bmi.w	8007a0c <lwip_netconn_do_close_internal+0x1f4>
  if (tpcb->state == LISTEN) {
 80078de:	7d2b      	ldrb	r3, [r5, #20]
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d03f      	beq.n	8007964 <lwip_netconn_do_close_internal+0x14c>
      tcp_sent(tpcb, NULL);
 80078e4:	4639      	mov	r1, r7
 80078e6:	4628      	mov	r0, r5
 80078e8:	f003 fcd0 	bl	800b28c <tcp_sent>
    if (shut_close) {
 80078ec:	e7d6      	b.n	800789c <lwip_netconn_do_close_internal+0x84>
    tcp_arg(tpcb, NULL);
 80078ee:	2100      	movs	r1, #0
 80078f0:	4628      	mov	r0, r5
 80078f2:	f003 fcab 	bl	800b24c <tcp_arg>
  if (tpcb->state == LISTEN) {
 80078f6:	7d2b      	ldrb	r3, [r5, #20]
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	f040 80a8 	bne.w	8007a4e <lwip_netconn_do_close_internal+0x236>
    tcp_accept(tpcb, NULL);
 80078fe:	2100      	movs	r1, #0
 8007900:	4628      	mov	r0, r5
 8007902:	f003 fcfb 	bl	800b2fc <tcp_accept>
      err = tcp_close(tpcb);
 8007906:	4628      	mov	r0, r5
 8007908:	f004 fb36 	bl	800bf78 <tcp_close>
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800790c:	6a23      	ldr	r3, [r4, #32]
      err = tcp_close(tpcb);
 800790e:	4602      	mov	r2, r0
  if (err == ERR_OK) {
 8007910:	2800      	cmp	r0, #0
 8007912:	d14c      	bne.n	80079ae <lwip_netconn_do_close_internal+0x196>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8007914:	681d      	ldr	r5, [r3, #0]
    conn->current_msg->err = err;
 8007916:	7118      	strb	r0, [r3, #4]
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8007918:	350c      	adds	r5, #12
    conn->current_msg = NULL;
 800791a:	2200      	movs	r2, #0
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800791c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    conn->current_msg = NULL;
 800791e:	6222      	str	r2, [r4, #32]
    conn->state = NETCONN_NONE;
 8007920:	7062      	strb	r2, [r4, #1]
        conn->pcb.tcp = NULL;
 8007922:	6062      	str	r2, [r4, #4]
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8007924:	2b00      	cmp	r3, #0
 8007926:	d07f      	beq.n	8007a28 <lwip_netconn_do_close_internal+0x210>
 8007928:	2104      	movs	r1, #4
 800792a:	4620      	mov	r0, r4
 800792c:	4798      	blx	r3
      if (shut_rx) {
 800792e:	b137      	cbz	r7, 800793e <lwip_netconn_do_close_internal+0x126>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8007930:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007932:	2b00      	cmp	r3, #0
 8007934:	d0c7      	beq.n	80078c6 <lwip_netconn_do_close_internal+0xae>
 8007936:	2200      	movs	r2, #0
 8007938:	4620      	mov	r0, r4
 800793a:	4611      	mov	r1, r2
 800793c:	4798      	blx	r3
      if (shut_tx) {
 800793e:	f1b8 0f00 	cmp.w	r8, #0
 8007942:	d0c0      	beq.n	80078c6 <lwip_netconn_do_close_internal+0xae>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8007944:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007946:	2b00      	cmp	r3, #0
 8007948:	d0bd      	beq.n	80078c6 <lwip_netconn_do_close_internal+0xae>
 800794a:	2200      	movs	r2, #0
 800794c:	4620      	mov	r0, r4
 800794e:	2102      	movs	r1, #2
 8007950:	4798      	blx	r3
    if (delayed)
 8007952:	2e00      	cmp	r6, #0
 8007954:	d0b9      	beq.n	80078ca <lwip_netconn_do_close_internal+0xb2>
      sys_sem_signal(op_completed_sem);
 8007956:	4628      	mov	r0, r5
 8007958:	f009 fb2e 	bl	8010fb8 <sys_sem_signal>
 800795c:	e7b5      	b.n	80078ca <lwip_netconn_do_close_internal+0xb2>
  if (tpcb->state == LISTEN) {
 800795e:	7d2b      	ldrb	r3, [r5, #20]
 8007960:	2b01      	cmp	r3, #1
 8007962:	d19b      	bne.n	800789c <lwip_netconn_do_close_internal+0x84>
    tcp_accept(tpcb, NULL);
 8007964:	2100      	movs	r1, #0
 8007966:	4628      	mov	r0, r5
 8007968:	f003 fcc8 	bl	800b2fc <tcp_accept>
  if (shut_close) {
 800796c:	e796      	b.n	800789c <lwip_netconn_do_close_internal+0x84>
    tcp_arg(tpcb, NULL);
 800796e:	2100      	movs	r1, #0
 8007970:	4628      	mov	r0, r5
 8007972:	f003 fc6b 	bl	800b24c <tcp_arg>
  if (tpcb->state == LISTEN) {
 8007976:	7d2b      	ldrb	r3, [r5, #20]
 8007978:	2b01      	cmp	r3, #1
 800797a:	d0c0      	beq.n	80078fe <lwip_netconn_do_close_internal+0xe6>
      tcp_recv(tpcb, NULL);
 800797c:	2100      	movs	r1, #0
 800797e:	4628      	mov	r0, r5
 8007980:	f003 fc68 	bl	800b254 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8007984:	2100      	movs	r1, #0
 8007986:	4628      	mov	r0, r5
 8007988:	f003 fcb8 	bl	800b2fc <tcp_accept>
    if (shut_tx) {
 800798c:	f1b8 0f00 	cmp.w	r8, #0
 8007990:	d003      	beq.n	800799a <lwip_netconn_do_close_internal+0x182>
      tcp_sent(tpcb, NULL);
 8007992:	2100      	movs	r1, #0
 8007994:	4628      	mov	r0, r5
 8007996:	f003 fc79 	bl	800b28c <tcp_sent>
      tcp_poll(tpcb, NULL, 0);
 800799a:	2200      	movs	r2, #0
 800799c:	4628      	mov	r0, r5
 800799e:	4611      	mov	r1, r2
 80079a0:	f003 fcb2 	bl	800b308 <tcp_poll>
      tcp_err(tpcb, NULL);
 80079a4:	2100      	movs	r1, #0
 80079a6:	4628      	mov	r0, r5
 80079a8:	f003 fc8c 	bl	800b2c4 <tcp_err>
  if (shut_close) {
 80079ac:	e7ab      	b.n	8007906 <lwip_netconn_do_close_internal+0xee>
    if (err == ERR_MEM) {
 80079ae:	3001      	adds	r0, #1
 80079b0:	d056      	beq.n	8007a60 <lwip_netconn_do_close_internal+0x248>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80079b2:	681d      	ldr	r5, [r3, #0]
    conn->current_msg->err = err;
 80079b4:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80079b6:	2300      	movs	r3, #0
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80079b8:	350c      	adds	r5, #12
    conn->current_msg = NULL;
 80079ba:	6223      	str	r3, [r4, #32]
    conn->state = NETCONN_NONE;
 80079bc:	7063      	strb	r3, [r4, #1]
    if (err == ERR_OK) {
 80079be:	e782      	b.n	80078c6 <lwip_netconn_do_close_internal+0xae>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80079c0:	681d      	ldr	r5, [r3, #0]
    conn->current_msg->err = err;
 80079c2:	7118      	strb	r0, [r3, #4]
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80079c4:	350c      	adds	r5, #12
    conn->current_msg = NULL;
 80079c6:	6220      	str	r0, [r4, #32]
    conn->state = NETCONN_NONE;
 80079c8:	7060      	strb	r0, [r4, #1]
 80079ca:	e7b0      	b.n	800792e <lwip_netconn_do_close_internal+0x116>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 80079cc:	4b3d      	ldr	r3, [pc, #244]	@ (8007ac4 <lwip_netconn_do_close_internal+0x2ac>)
 80079ce:	f240 32a5 	movw	r2, #933	@ 0x3a5
 80079d2:	4940      	ldr	r1, [pc, #256]	@ (8007ad4 <lwip_netconn_do_close_internal+0x2bc>)
 80079d4:	483d      	ldr	r0, [pc, #244]	@ (8007acc <lwip_netconn_do_close_internal+0x2b4>)
 80079d6:	f009 fd5f 	bl	8011498 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80079da:	6a23      	ldr	r3, [r4, #32]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	f47f af40 	bne.w	8007862 <lwip_netconn_do_close_internal+0x4a>
 80079e2:	4b38      	ldr	r3, [pc, #224]	@ (8007ac4 <lwip_netconn_do_close_internal+0x2ac>)
 80079e4:	f240 32a6 	movw	r2, #934	@ 0x3a6
 80079e8:	493b      	ldr	r1, [pc, #236]	@ (8007ad8 <lwip_netconn_do_close_internal+0x2c0>)
 80079ea:	4838      	ldr	r0, [pc, #224]	@ (8007acc <lwip_netconn_do_close_internal+0x2b4>)
 80079ec:	f009 fd54 	bl	8011498 <iprintf>
  shut = conn->current_msg->msg.sd.shut;
 80079f0:	6a23      	ldr	r3, [r4, #32]
 80079f2:	e736      	b.n	8007862 <lwip_netconn_do_close_internal+0x4a>
  LWIP_ASSERT("invalid conn", (conn != NULL));
 80079f4:	4b33      	ldr	r3, [pc, #204]	@ (8007ac4 <lwip_netconn_do_close_internal+0x2ac>)
 80079f6:	f240 32a2 	movw	r2, #930	@ 0x3a2
 80079fa:	4938      	ldr	r1, [pc, #224]	@ (8007adc <lwip_netconn_do_close_internal+0x2c4>)
 80079fc:	4833      	ldr	r0, [pc, #204]	@ (8007acc <lwip_netconn_do_close_internal+0x2b4>)
 80079fe:	f009 fd4b 	bl	8011498 <iprintf>
 8007a02:	e710      	b.n	8007826 <lwip_netconn_do_close_internal+0xe>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8007a04:	8b69      	ldrh	r1, [r5, #26]
 8007a06:	f011 0910 	ands.w	r9, r1, #16
 8007a0a:	d011      	beq.n	8007a30 <lwip_netconn_do_close_internal+0x218>
    tcp_arg(tpcb, NULL);
 8007a0c:	2100      	movs	r1, #0
 8007a0e:	4628      	mov	r0, r5
 8007a10:	f003 fc1c 	bl	800b24c <tcp_arg>
  if (tpcb->state == LISTEN) {
 8007a14:	7d2b      	ldrb	r3, [r5, #20]
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	f43f af71 	beq.w	80078fe <lwip_netconn_do_close_internal+0xe6>
    if (shut_rx) {
 8007a1c:	2f00      	cmp	r7, #0
 8007a1e:	d1ad      	bne.n	800797c <lwip_netconn_do_close_internal+0x164>
    if (shut_tx) {
 8007a20:	f1b8 0f00 	cmp.w	r8, #0
 8007a24:	d0b9      	beq.n	800799a <lwip_netconn_do_close_internal+0x182>
 8007a26:	e7b4      	b.n	8007992 <lwip_netconn_do_close_internal+0x17a>
      if (shut_rx) {
 8007a28:	2f00      	cmp	r7, #0
 8007a2a:	f47f af4c 	bne.w	80078c6 <lwip_netconn_do_close_internal+0xae>
 8007a2e:	e786      	b.n	800793e <lwip_netconn_do_close_internal+0x126>
  if (tpcb->state == LISTEN) {
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d097      	beq.n	8007964 <lwip_netconn_do_close_internal+0x14c>
      tcp_recv(tpcb, NULL);
 8007a34:	4649      	mov	r1, r9
 8007a36:	4628      	mov	r0, r5
 8007a38:	f003 fc0c 	bl	800b254 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8007a3c:	4649      	mov	r1, r9
 8007a3e:	4628      	mov	r0, r5
 8007a40:	f003 fc5c 	bl	800b2fc <tcp_accept>
      tcp_sent(tpcb, NULL);
 8007a44:	4649      	mov	r1, r9
 8007a46:	4628      	mov	r0, r5
 8007a48:	f003 fc20 	bl	800b28c <tcp_sent>
    if (shut_close) {
 8007a4c:	e726      	b.n	800789c <lwip_netconn_do_close_internal+0x84>
      tcp_recv(tpcb, NULL);
 8007a4e:	4628      	mov	r0, r5
 8007a50:	2100      	movs	r1, #0
 8007a52:	f003 fbff 	bl	800b254 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8007a56:	2100      	movs	r1, #0
 8007a58:	4628      	mov	r0, r5
 8007a5a:	f003 fc4f 	bl	800b2fc <tcp_accept>
    if (shut_tx) {
 8007a5e:	e798      	b.n	8007992 <lwip_netconn_do_close_internal+0x17a>
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8007a60:	f893 9009 	ldrb.w	r9, [r3, #9]
 8007a64:	f1b9 0f00 	cmp.w	r9, #0
 8007a68:	d108      	bne.n	8007a7c <lwip_netconn_do_close_internal+0x264>
          tcp_abort(tpcb);
 8007a6a:	4628      	mov	r0, r5
 8007a6c:	f004 f8a6 	bl	800bbbc <tcp_abort>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8007a70:	6a23      	ldr	r3, [r4, #32]
 8007a72:	681d      	ldr	r5, [r3, #0]
    conn->current_msg->err = err;
 8007a74:	f883 9004 	strb.w	r9, [r3, #4]
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8007a78:	350c      	adds	r5, #12
      if (shut_close) {
 8007a7a:	e74e      	b.n	800791a <lwip_netconn_do_close_internal+0x102>
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8007a7c:	7d2b      	ldrb	r3, [r5, #20]
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d012      	beq.n	8007aa8 <lwip_netconn_do_close_internal+0x290>
    if (shut_tx) {
 8007a82:	f1b8 0f00 	cmp.w	r8, #0
 8007a86:	d117      	bne.n	8007ab8 <lwip_netconn_do_close_internal+0x2a0>
    tcp_poll(tpcb, poll_tcp, 1);
 8007a88:	2201      	movs	r2, #1
 8007a8a:	4915      	ldr	r1, [pc, #84]	@ (8007ae0 <lwip_netconn_do_close_internal+0x2c8>)
 8007a8c:	4628      	mov	r0, r5
 8007a8e:	f003 fc3b 	bl	800b308 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8007a92:	4914      	ldr	r1, [pc, #80]	@ (8007ae4 <lwip_netconn_do_close_internal+0x2cc>)
 8007a94:	4628      	mov	r0, r5
 8007a96:	f003 fc15 	bl	800b2c4 <tcp_err>
    tcp_arg(tpcb, conn);
 8007a9a:	4628      	mov	r0, r5
 8007a9c:	4621      	mov	r1, r4
 8007a9e:	f003 fbd5 	bl	800b24c <tcp_arg>
  return err;
 8007aa2:	f04f 30ff 	mov.w	r0, #4294967295
 8007aa6:	e711      	b.n	80078cc <lwip_netconn_do_close_internal+0xb4>
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8007aa8:	4b06      	ldr	r3, [pc, #24]	@ (8007ac4 <lwip_netconn_do_close_internal+0x2ac>)
 8007aaa:	f240 4241 	movw	r2, #1089	@ 0x441
 8007aae:	490e      	ldr	r1, [pc, #56]	@ (8007ae8 <lwip_netconn_do_close_internal+0x2d0>)
 8007ab0:	4806      	ldr	r0, [pc, #24]	@ (8007acc <lwip_netconn_do_close_internal+0x2b4>)
 8007ab2:	f009 fcf1 	bl	8011498 <iprintf>
 8007ab6:	e7e4      	b.n	8007a82 <lwip_netconn_do_close_internal+0x26a>
      tcp_sent(tpcb, sent_tcp);
 8007ab8:	490c      	ldr	r1, [pc, #48]	@ (8007aec <lwip_netconn_do_close_internal+0x2d4>)
 8007aba:	4628      	mov	r0, r5
 8007abc:	f003 fbe6 	bl	800b28c <tcp_sent>
 8007ac0:	e7e2      	b.n	8007a88 <lwip_netconn_do_close_internal+0x270>
 8007ac2:	bf00      	nop
 8007ac4:	0801273c 	.word	0x0801273c
 8007ac8:	080128cc 	.word	0x080128cc
 8007acc:	0801241c 	.word	0x0801241c
 8007ad0:	080128ec 	.word	0x080128ec
 8007ad4:	08012910 	.word	0x08012910
 8007ad8:	08012804 	.word	0x08012804
 8007adc:	08012640 	.word	0x08012640
 8007ae0:	08007af1 	.word	0x08007af1
 8007ae4:	08007cb1 	.word	0x08007cb1
 8007ae8:	08012924 	.word	0x08012924
 8007aec:	08007b6d 	.word	0x08007b6d

08007af0 <poll_tcp>:
{
 8007af0:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8007af2:	4604      	mov	r4, r0
 8007af4:	b360      	cbz	r0, 8007b50 <poll_tcp+0x60>
  if (conn->state == NETCONN_WRITE) {
 8007af6:	7861      	ldrb	r1, [r4, #1]
 8007af8:	2901      	cmp	r1, #1
 8007afa:	d025      	beq.n	8007b48 <poll_tcp+0x58>
  } else if (conn->state == NETCONN_CLOSE) {
 8007afc:	2904      	cmp	r1, #4
 8007afe:	d018      	beq.n	8007b32 <poll_tcp+0x42>
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8007b00:	7f23      	ldrb	r3, [r4, #28]
 8007b02:	06da      	lsls	r2, r3, #27
 8007b04:	d513      	bpl.n	8007b2e <poll_tcp+0x3e>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8007b06:	6862      	ldr	r2, [r4, #4]
 8007b08:	b18a      	cbz	r2, 8007b2e <poll_tcp+0x3e>
 8007b0a:	f8b2 1064 	ldrh.w	r1, [r2, #100]	@ 0x64
 8007b0e:	f5b1 6f86 	cmp.w	r1, #1072	@ 0x430
 8007b12:	d30c      	bcc.n	8007b2e <poll_tcp+0x3e>
 8007b14:	f8b2 2066 	ldrh.w	r2, [r2, #102]	@ 0x66
 8007b18:	2a04      	cmp	r2, #4
 8007b1a:	d808      	bhi.n	8007b2e <poll_tcp+0x3e>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8007b1c:	f023 0310 	bic.w	r3, r3, #16
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8007b20:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8007b22:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8007b24:	b11d      	cbz	r5, 8007b2e <poll_tcp+0x3e>
 8007b26:	2200      	movs	r2, #0
 8007b28:	2102      	movs	r1, #2
 8007b2a:	4620      	mov	r0, r4
 8007b2c:	47a8      	blx	r5
}
 8007b2e:	2000      	movs	r0, #0
 8007b30:	bd38      	pop	{r3, r4, r5, pc}
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8007b32:	6a23      	ldr	r3, [r4, #32]
 8007b34:	b11b      	cbz	r3, 8007b3e <poll_tcp+0x4e>
 8007b36:	7a5a      	ldrb	r2, [r3, #9]
 8007b38:	b10a      	cbz	r2, 8007b3e <poll_tcp+0x4e>
      conn->current_msg->msg.sd.polls_left--;
 8007b3a:	3a01      	subs	r2, #1
 8007b3c:	725a      	strb	r2, [r3, #9]
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8007b3e:	2101      	movs	r1, #1
 8007b40:	4620      	mov	r0, r4
 8007b42:	f7ff fe69 	bl	8007818 <lwip_netconn_do_close_internal>
 8007b46:	e7db      	b.n	8007b00 <poll_tcp+0x10>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8007b48:	4620      	mov	r0, r4
 8007b4a:	f7ff fcbb 	bl	80074c4 <lwip_netconn_do_writemore>
 8007b4e:	e7d7      	b.n	8007b00 <poll_tcp+0x10>
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8007b50:	4b03      	ldr	r3, [pc, #12]	@ (8007b60 <poll_tcp+0x70>)
 8007b52:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 8007b56:	4903      	ldr	r1, [pc, #12]	@ (8007b64 <poll_tcp+0x74>)
 8007b58:	4803      	ldr	r0, [pc, #12]	@ (8007b68 <poll_tcp+0x78>)
 8007b5a:	f009 fc9d 	bl	8011498 <iprintf>
 8007b5e:	e7ca      	b.n	8007af6 <poll_tcp+0x6>
 8007b60:	0801273c 	.word	0x0801273c
 8007b64:	080127d4 	.word	0x080127d4
 8007b68:	0801241c 	.word	0x0801241c

08007b6c <sent_tcp>:
{
 8007b6c:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8007b6e:	b1e8      	cbz	r0, 8007bac <sent_tcp+0x40>
    if (conn->state == NETCONN_WRITE) {
 8007b70:	7841      	ldrb	r1, [r0, #1]
 8007b72:	4604      	mov	r4, r0
 8007b74:	4615      	mov	r5, r2
 8007b76:	2901      	cmp	r1, #1
 8007b78:	d021      	beq.n	8007bbe <sent_tcp+0x52>
    } else if (conn->state == NETCONN_CLOSE) {
 8007b7a:	2904      	cmp	r1, #4
 8007b7c:	d022      	beq.n	8007bc4 <sent_tcp+0x58>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8007b7e:	6863      	ldr	r3, [r4, #4]
 8007b80:	b193      	cbz	r3, 8007ba8 <sent_tcp+0x3c>
 8007b82:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8007b86:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8007b8a:	d30d      	bcc.n	8007ba8 <sent_tcp+0x3c>
 8007b8c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8007b90:	2b04      	cmp	r3, #4
 8007b92:	d809      	bhi.n	8007ba8 <sent_tcp+0x3c>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8007b94:	7f23      	ldrb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8007b96:	6a66      	ldr	r6, [r4, #36]	@ 0x24
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8007b98:	f023 0310 	bic.w	r3, r3, #16
 8007b9c:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8007b9e:	b11e      	cbz	r6, 8007ba8 <sent_tcp+0x3c>
 8007ba0:	462a      	mov	r2, r5
 8007ba2:	2102      	movs	r1, #2
 8007ba4:	4620      	mov	r0, r4
 8007ba6:	47b0      	blx	r6
}
 8007ba8:	2000      	movs	r0, #0
 8007baa:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8007bac:	4b07      	ldr	r3, [pc, #28]	@ (8007bcc <sent_tcp+0x60>)
 8007bae:	f240 1293 	movw	r2, #403	@ 0x193
 8007bb2:	4907      	ldr	r1, [pc, #28]	@ (8007bd0 <sent_tcp+0x64>)
 8007bb4:	4807      	ldr	r0, [pc, #28]	@ (8007bd4 <sent_tcp+0x68>)
 8007bb6:	f009 fc6f 	bl	8011498 <iprintf>
}
 8007bba:	2000      	movs	r0, #0
 8007bbc:	bd70      	pop	{r4, r5, r6, pc}
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8007bbe:	f7ff fc81 	bl	80074c4 <lwip_netconn_do_writemore>
 8007bc2:	e7dc      	b.n	8007b7e <sent_tcp+0x12>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8007bc4:	2101      	movs	r1, #1
 8007bc6:	f7ff fe27 	bl	8007818 <lwip_netconn_do_close_internal>
 8007bca:	e7d8      	b.n	8007b7e <sent_tcp+0x12>
 8007bcc:	0801273c 	.word	0x0801273c
 8007bd0:	080127d4 	.word	0x080127d4
 8007bd4:	0801241c 	.word	0x0801241c

08007bd8 <recv_tcp>:
{
 8007bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bda:	4604      	mov	r4, r0
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8007bdc:	460f      	mov	r7, r1
{
 8007bde:	4615      	mov	r5, r2
 8007be0:	461e      	mov	r6, r3
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8007be2:	2900      	cmp	r1, #0
 8007be4:	d037      	beq.n	8007c56 <recv_tcp+0x7e>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8007be6:	2c00      	cmp	r4, #0
 8007be8:	d03e      	beq.n	8007c68 <recv_tcp+0x90>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8007bea:	bb4e      	cbnz	r6, 8007c40 <recv_tcp+0x68>
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8007bec:	6863      	ldr	r3, [r4, #4]
 8007bee:	42bb      	cmp	r3, r7
 8007bf0:	d006      	beq.n	8007c00 <recv_tcp+0x28>
 8007bf2:	4b28      	ldr	r3, [pc, #160]	@ (8007c94 <recv_tcp+0xbc>)
 8007bf4:	f240 1235 	movw	r2, #309	@ 0x135
 8007bf8:	4927      	ldr	r1, [pc, #156]	@ (8007c98 <recv_tcp+0xc0>)
 8007bfa:	4828      	ldr	r0, [pc, #160]	@ (8007c9c <recv_tcp+0xc4>)
 8007bfc:	f009 fc4c 	bl	8011498 <iprintf>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8007c00:	f104 0610 	add.w	r6, r4, #16
 8007c04:	4630      	mov	r0, r6
 8007c06:	f009 f999 	bl	8010f3c <sys_mbox_valid>
 8007c0a:	b178      	cbz	r0, 8007c2c <recv_tcp+0x54>
  if (p != NULL) {
 8007c0c:	b305      	cbz	r5, 8007c50 <recv_tcp+0x78>
    len = p->tot_len;
 8007c0e:	892f      	ldrh	r7, [r5, #8]
  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8007c10:	4629      	mov	r1, r5
 8007c12:	4630      	mov	r0, r6
 8007c14:	f009 f950 	bl	8010eb8 <sys_mbox_trypost>
 8007c18:	4601      	mov	r1, r0
 8007c1a:	2800      	cmp	r0, #0
 8007c1c:	d137      	bne.n	8007c8e <recv_tcp+0xb6>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8007c1e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007c20:	b113      	cbz	r3, 8007c28 <recv_tcp+0x50>
 8007c22:	463a      	mov	r2, r7
 8007c24:	4620      	mov	r0, r4
 8007c26:	4798      	blx	r3
    return ERR_OK;
 8007c28:	2000      	movs	r0, #0
}
 8007c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (p != NULL) {
 8007c2c:	2d00      	cmp	r5, #0
 8007c2e:	d0fb      	beq.n	8007c28 <recv_tcp+0x50>
      tcp_recved(pcb, p->tot_len);
 8007c30:	4638      	mov	r0, r7
 8007c32:	8929      	ldrh	r1, [r5, #8]
 8007c34:	f003 fa8c 	bl	800b150 <tcp_recved>
      pbuf_free(p);
 8007c38:	4628      	mov	r0, r5
 8007c3a:	f002 fda1 	bl	800a780 <pbuf_free>
 8007c3e:	e7f3      	b.n	8007c28 <recv_tcp+0x50>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8007c40:	4b14      	ldr	r3, [pc, #80]	@ (8007c94 <recv_tcp+0xbc>)
 8007c42:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 8007c46:	4916      	ldr	r1, [pc, #88]	@ (8007ca0 <recv_tcp+0xc8>)
 8007c48:	4814      	ldr	r0, [pc, #80]	@ (8007c9c <recv_tcp+0xc4>)
 8007c4a:	f009 fc25 	bl	8011498 <iprintf>
  if (conn == NULL) {
 8007c4e:	e7cd      	b.n	8007bec <recv_tcp+0x14>
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8007c50:	4d14      	ldr	r5, [pc, #80]	@ (8007ca4 <recv_tcp+0xcc>)
    len = 0;
 8007c52:	2700      	movs	r7, #0
 8007c54:	e7dc      	b.n	8007c10 <recv_tcp+0x38>
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8007c56:	4b0f      	ldr	r3, [pc, #60]	@ (8007c94 <recv_tcp+0xbc>)
 8007c58:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8007c5c:	4912      	ldr	r1, [pc, #72]	@ (8007ca8 <recv_tcp+0xd0>)
 8007c5e:	480f      	ldr	r0, [pc, #60]	@ (8007c9c <recv_tcp+0xc4>)
 8007c60:	f009 fc1a 	bl	8011498 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8007c64:	2c00      	cmp	r4, #0
 8007c66:	d1c0      	bne.n	8007bea <recv_tcp+0x12>
 8007c68:	4b0a      	ldr	r3, [pc, #40]	@ (8007c94 <recv_tcp+0xbc>)
 8007c6a:	f240 122d 	movw	r2, #301	@ 0x12d
 8007c6e:	490f      	ldr	r1, [pc, #60]	@ (8007cac <recv_tcp+0xd4>)
 8007c70:	480a      	ldr	r0, [pc, #40]	@ (8007c9c <recv_tcp+0xc4>)
 8007c72:	f009 fc11 	bl	8011498 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8007c76:	b916      	cbnz	r6, 8007c7e <recv_tcp+0xa6>
    return ERR_VAL;
 8007c78:	f06f 0005 	mvn.w	r0, #5
}
 8007c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8007c7e:	4b05      	ldr	r3, [pc, #20]	@ (8007c94 <recv_tcp+0xbc>)
 8007c80:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 8007c84:	4906      	ldr	r1, [pc, #24]	@ (8007ca0 <recv_tcp+0xc8>)
 8007c86:	4805      	ldr	r0, [pc, #20]	@ (8007c9c <recv_tcp+0xc4>)
 8007c88:	f009 fc06 	bl	8011498 <iprintf>
  if (conn == NULL) {
 8007c8c:	e7f4      	b.n	8007c78 <recv_tcp+0xa0>
    return ERR_MEM;
 8007c8e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c94:	0801273c 	.word	0x0801273c
 8007c98:	080129a4 	.word	0x080129a4
 8007c9c:	0801241c 	.word	0x0801241c
 8007ca0:	0801296c 	.word	0x0801296c
 8007ca4:	08012b80 	.word	0x08012b80
 8007ca8:	08012948 	.word	0x08012948
 8007cac:	08012984 	.word	0x08012984

08007cb0 <err_tcp>:
{
 8007cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8007cb4:	4604      	mov	r4, r0
{
 8007cb6:	460d      	mov	r5, r1
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8007cb8:	2800      	cmp	r0, #0
 8007cba:	d073      	beq.n	8007da4 <err_tcp+0xf4>
  SYS_ARCH_PROTECT(lev);
 8007cbc:	f009 f9d0 	bl	8011060 <sys_arch_protect>
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8007cc0:	7f23      	ldrb	r3, [r4, #28]
  conn->pcb.tcp = NULL;
 8007cc2:	2600      	movs	r6, #0
  old_state = conn->state;
 8007cc4:	7867      	ldrb	r7, [r4, #1]
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8007cc6:	f043 0301 	orr.w	r3, r3, #1
  conn->pending_err = err;
 8007cca:	7225      	strb	r5, [r4, #8]
  conn->pcb.tcp = NULL;
 8007ccc:	6066      	str	r6, [r4, #4]
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8007cce:	7723      	strb	r3, [r4, #28]
  conn->state = NETCONN_NONE;
 8007cd0:	7066      	strb	r6, [r4, #1]
  SYS_ARCH_UNPROTECT(lev);
 8007cd2:	f009 f9d1 	bl	8011078 <sys_arch_unprotect>
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8007cd6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007cd8:	b17b      	cbz	r3, 8007cfa <err_tcp+0x4a>
 8007cda:	4632      	mov	r2, r6
 8007cdc:	2104      	movs	r1, #4
 8007cde:	4620      	mov	r0, r4
 8007ce0:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8007ce2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007ce4:	b14b      	cbz	r3, 8007cfa <err_tcp+0x4a>
 8007ce6:	4632      	mov	r2, r6
 8007ce8:	4631      	mov	r1, r6
 8007cea:	4620      	mov	r0, r4
 8007cec:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8007cee:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007cf0:	b11b      	cbz	r3, 8007cfa <err_tcp+0x4a>
 8007cf2:	4632      	mov	r2, r6
 8007cf4:	2102      	movs	r1, #2
 8007cf6:	4620      	mov	r0, r4
 8007cf8:	4798      	blx	r3
  switch (err) {
 8007cfa:	f105 030f 	add.w	r3, r5, #15
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	2b02      	cmp	r3, #2
 8007d02:	d83b      	bhi.n	8007d7c <err_tcp+0xcc>
 8007d04:	4a34      	ldr	r2, [pc, #208]	@ (8007dd8 <err_tcp+0x128>)
 8007d06:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8007d0a:	f104 0610 	add.w	r6, r4, #16
 8007d0e:	4630      	mov	r0, r6
 8007d10:	f009 f914 	bl	8010f3c <sys_mbox_valid>
 8007d14:	bb68      	cbnz	r0, 8007d72 <err_tcp+0xc2>
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8007d16:	f104 0614 	add.w	r6, r4, #20
 8007d1a:	4630      	mov	r0, r6
 8007d1c:	f009 f90e 	bl	8010f3c <sys_mbox_valid>
 8007d20:	bb10      	cbnz	r0, 8007d68 <err_tcp+0xb8>
  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8007d22:	1efb      	subs	r3, r7, #3
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d901      	bls.n	8007d2c <err_tcp+0x7c>
 8007d28:	2f01      	cmp	r7, #1
 8007d2a:	d119      	bne.n	8007d60 <err_tcp+0xb0>
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8007d2c:	7f23      	ldrb	r3, [r4, #28]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8007d2e:	f023 0204 	bic.w	r2, r3, #4
    if (!was_nonblocking_connect) {
 8007d32:	075b      	lsls	r3, r3, #29
    SET_NONBLOCKING_CONNECT(conn, 0);
 8007d34:	7722      	strb	r2, [r4, #28]
    if (!was_nonblocking_connect) {
 8007d36:	d415      	bmi.n	8007d64 <err_tcp+0xb4>
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8007d38:	6a23      	ldr	r3, [r4, #32]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d042      	beq.n	8007dc4 <err_tcp+0x114>
      if (old_state == NETCONN_CLOSE) {
 8007d3e:	2f04      	cmp	r7, #4
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8007d40:	681e      	ldr	r6, [r3, #0]
 8007d42:	bf08      	it	eq
 8007d44:	2500      	moveq	r5, #0
 8007d46:	360c      	adds	r6, #12
        conn->current_msg->err = ERR_OK;
 8007d48:	711d      	strb	r5, [r3, #4]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8007d4a:	4630      	mov	r0, r6
 8007d4c:	f009 f93c 	bl	8010fc8 <sys_sem_valid>
 8007d50:	b380      	cbz	r0, 8007db4 <err_tcp+0x104>
      conn->current_msg = NULL;
 8007d52:	2300      	movs	r3, #0
      sys_sem_signal(op_completed_sem);
 8007d54:	4630      	mov	r0, r6
      conn->current_msg = NULL;
 8007d56:	6223      	str	r3, [r4, #32]
}
 8007d58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      sys_sem_signal(op_completed_sem);
 8007d5c:	f009 b92c 	b.w	8010fb8 <sys_sem_signal>
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8007d60:	6a23      	ldr	r3, [r4, #32]
 8007d62:	b97b      	cbnz	r3, 8007d84 <err_tcp+0xd4>
}
 8007d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8007d68:	4641      	mov	r1, r8
 8007d6a:	4630      	mov	r0, r6
 8007d6c:	f009 f8a4 	bl	8010eb8 <sys_mbox_trypost>
 8007d70:	e7d7      	b.n	8007d22 <err_tcp+0x72>
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8007d72:	4630      	mov	r0, r6
 8007d74:	4641      	mov	r1, r8
 8007d76:	f009 f89f 	bl	8010eb8 <sys_mbox_trypost>
 8007d7a:	e7cc      	b.n	8007d16 <err_tcp+0x66>
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8007d7c:	b95d      	cbnz	r5, 8007d96 <err_tcp+0xe6>
{
 8007d7e:	f04f 0800 	mov.w	r8, #0
 8007d82:	e7c2      	b.n	8007d0a <err_tcp+0x5a>
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8007d84:	4b15      	ldr	r3, [pc, #84]	@ (8007ddc <err_tcp+0x12c>)
 8007d86:	f240 12f7 	movw	r2, #503	@ 0x1f7
 8007d8a:	4915      	ldr	r1, [pc, #84]	@ (8007de0 <err_tcp+0x130>)
 8007d8c:	4815      	ldr	r0, [pc, #84]	@ (8007de4 <err_tcp+0x134>)
}
 8007d8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8007d92:	f009 bb81 	b.w	8011498 <iprintf>
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8007d96:	4b11      	ldr	r3, [pc, #68]	@ (8007ddc <err_tcp+0x12c>)
 8007d98:	227d      	movs	r2, #125	@ 0x7d
 8007d9a:	4913      	ldr	r1, [pc, #76]	@ (8007de8 <err_tcp+0x138>)
 8007d9c:	4811      	ldr	r0, [pc, #68]	@ (8007de4 <err_tcp+0x134>)
 8007d9e:	f009 fb7b 	bl	8011498 <iprintf>
 8007da2:	e7ec      	b.n	8007d7e <err_tcp+0xce>
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8007da4:	4b0d      	ldr	r3, [pc, #52]	@ (8007ddc <err_tcp+0x12c>)
 8007da6:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8007daa:	4910      	ldr	r1, [pc, #64]	@ (8007dec <err_tcp+0x13c>)
 8007dac:	480d      	ldr	r0, [pc, #52]	@ (8007de4 <err_tcp+0x134>)
 8007dae:	f009 fb73 	bl	8011498 <iprintf>
 8007db2:	e783      	b.n	8007cbc <err_tcp+0xc>
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8007db4:	4b09      	ldr	r3, [pc, #36]	@ (8007ddc <err_tcp+0x12c>)
 8007db6:	f240 12ef 	movw	r2, #495	@ 0x1ef
 8007dba:	490d      	ldr	r1, [pc, #52]	@ (8007df0 <err_tcp+0x140>)
 8007dbc:	4809      	ldr	r0, [pc, #36]	@ (8007de4 <err_tcp+0x134>)
 8007dbe:	f009 fb6b 	bl	8011498 <iprintf>
 8007dc2:	e7c6      	b.n	8007d52 <err_tcp+0xa2>
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8007dc4:	4b05      	ldr	r3, [pc, #20]	@ (8007ddc <err_tcp+0x12c>)
 8007dc6:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8007dca:	490a      	ldr	r1, [pc, #40]	@ (8007df4 <err_tcp+0x144>)
 8007dcc:	4805      	ldr	r0, [pc, #20]	@ (8007de4 <err_tcp+0x134>)
 8007dce:	f009 fb63 	bl	8011498 <iprintf>
        conn->current_msg->err = ERR_OK;
 8007dd2:	6a23      	ldr	r3, [r4, #32]
 8007dd4:	e7b3      	b.n	8007d3e <err_tcp+0x8e>
 8007dd6:	bf00      	nop
 8007dd8:	08012b74 	.word	0x08012b74
 8007ddc:	0801273c 	.word	0x0801273c
 8007de0:	080129f0 	.word	0x080129f0
 8007de4:	0801241c 	.word	0x0801241c
 8007de8:	080129c4 	.word	0x080129c4
 8007dec:	080127d4 	.word	0x080127d4
 8007df0:	080129d4 	.word	0x080129d4
 8007df4:	08012804 	.word	0x08012804

08007df8 <lwip_netconn_is_err_msg>:
{
 8007df8:	b538      	push	{r3, r4, r5, lr}
 8007dfa:	4604      	mov	r4, r0
  LWIP_ASSERT("err != NULL", err != NULL);
 8007dfc:	460d      	mov	r5, r1
 8007dfe:	b179      	cbz	r1, 8007e20 <lwip_netconn_is_err_msg+0x28>
  if (msg == &netconn_aborted) {
 8007e00:	4b0e      	ldr	r3, [pc, #56]	@ (8007e3c <lwip_netconn_is_err_msg+0x44>)
 8007e02:	429c      	cmp	r4, r3
 8007e04:	d007      	beq.n	8007e16 <lwip_netconn_is_err_msg+0x1e>
  } else if (msg == &netconn_reset) {
 8007e06:	4b0e      	ldr	r3, [pc, #56]	@ (8007e40 <lwip_netconn_is_err_msg+0x48>)
 8007e08:	429c      	cmp	r4, r3
 8007e0a:	d010      	beq.n	8007e2e <lwip_netconn_is_err_msg+0x36>
  } else if (msg == &netconn_closed) {
 8007e0c:	4b0d      	ldr	r3, [pc, #52]	@ (8007e44 <lwip_netconn_is_err_msg+0x4c>)
 8007e0e:	429c      	cmp	r4, r3
 8007e10:	d010      	beq.n	8007e34 <lwip_netconn_is_err_msg+0x3c>
  return 0;
 8007e12:	2000      	movs	r0, #0
}
 8007e14:	bd38      	pop	{r3, r4, r5, pc}
 8007e16:	f06f 030c 	mvn.w	r3, #12
    return 1;
 8007e1a:	2001      	movs	r0, #1
    *err = ERR_RST;
 8007e1c:	702b      	strb	r3, [r5, #0]
}
 8007e1e:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("err != NULL", err != NULL);
 8007e20:	4b09      	ldr	r3, [pc, #36]	@ (8007e48 <lwip_netconn_is_err_msg+0x50>)
 8007e22:	2285      	movs	r2, #133	@ 0x85
 8007e24:	4909      	ldr	r1, [pc, #36]	@ (8007e4c <lwip_netconn_is_err_msg+0x54>)
 8007e26:	480a      	ldr	r0, [pc, #40]	@ (8007e50 <lwip_netconn_is_err_msg+0x58>)
 8007e28:	f009 fb36 	bl	8011498 <iprintf>
 8007e2c:	e7e8      	b.n	8007e00 <lwip_netconn_is_err_msg+0x8>
 8007e2e:	f06f 030d 	mvn.w	r3, #13
 8007e32:	e7f2      	b.n	8007e1a <lwip_netconn_is_err_msg+0x22>
 8007e34:	f06f 030e 	mvn.w	r3, #14
 8007e38:	e7ef      	b.n	8007e1a <lwip_netconn_is_err_msg+0x22>
 8007e3a:	bf00      	nop
 8007e3c:	08012b82 	.word	0x08012b82
 8007e40:	08012b81 	.word	0x08012b81
 8007e44:	08012b80 	.word	0x08012b80
 8007e48:	0801273c 	.word	0x0801273c
 8007e4c:	08012a0c 	.word	0x08012a0c
 8007e50:	0801241c 	.word	0x0801241c

08007e54 <lwip_netconn_do_newconn>:
{
 8007e54:	b538      	push	{r3, r4, r5, lr}
  msg->err = ERR_OK;
 8007e56:	2300      	movs	r3, #0
  if (msg->conn->pcb.tcp == NULL) {
 8007e58:	6805      	ldr	r5, [r0, #0]
{
 8007e5a:	4604      	mov	r4, r0
  msg->err = ERR_OK;
 8007e5c:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8007e5e:	6868      	ldr	r0, [r5, #4]
 8007e60:	b100      	cbz	r0, 8007e64 <lwip_netconn_do_newconn+0x10>
}
 8007e62:	bd38      	pop	{r3, r4, r5, pc}
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8007e64:	782b      	ldrb	r3, [r5, #0]
 8007e66:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007e6a:	2b10      	cmp	r3, #16
 8007e6c:	d016      	beq.n	8007e9c <lwip_netconn_do_newconn+0x48>
 8007e6e:	2b20      	cmp	r3, #32
 8007e70:	d11f      	bne.n	8007eb2 <lwip_netconn_do_newconn+0x5e>
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8007e72:	f007 fc19 	bl	800f6a8 <udp_new_ip_type>
      if (msg->conn->pcb.udp != NULL) {
 8007e76:	6822      	ldr	r2, [r4, #0]
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8007e78:	6068      	str	r0, [r5, #4]
      if (msg->conn->pcb.udp != NULL) {
 8007e7a:	6850      	ldr	r0, [r2, #4]
 8007e7c:	b158      	cbz	r0, 8007e96 <lwip_netconn_do_newconn+0x42>
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8007e7e:	7813      	ldrb	r3, [r2, #0]
 8007e80:	2b22      	cmp	r3, #34	@ 0x22
 8007e82:	d101      	bne.n	8007e88 <lwip_netconn_do_newconn+0x34>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8007e84:	2301      	movs	r3, #1
 8007e86:	7403      	strb	r3, [r0, #16]
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8007e88:	490b      	ldr	r1, [pc, #44]	@ (8007eb8 <lwip_netconn_do_newconn+0x64>)
 8007e8a:	f007 fbd5 	bl	800f638 <udp_recv>
  if (msg->conn->pcb.ip == NULL) {
 8007e8e:	6823      	ldr	r3, [r4, #0]
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d1e5      	bne.n	8007e62 <lwip_netconn_do_newconn+0xe>
    msg->err = ERR_MEM;
 8007e96:	23ff      	movs	r3, #255	@ 0xff
 8007e98:	7123      	strb	r3, [r4, #4]
}
 8007e9a:	bd38      	pop	{r3, r4, r5, pc}
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8007e9c:	f003 ff9a 	bl	800bdd4 <tcp_new_ip_type>
      if (msg->conn->pcb.tcp != NULL) {
 8007ea0:	6823      	ldr	r3, [r4, #0]
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8007ea2:	6068      	str	r0, [r5, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8007ea4:	685a      	ldr	r2, [r3, #4]
 8007ea6:	2a00      	cmp	r2, #0
 8007ea8:	d0f5      	beq.n	8007e96 <lwip_netconn_do_newconn+0x42>
        setup_tcp(msg->conn);
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f7ff fae8 	bl	8007480 <setup_tcp>
 8007eb0:	e7ed      	b.n	8007e8e <lwip_netconn_do_newconn+0x3a>
      msg->err = ERR_VAL;
 8007eb2:	23fa      	movs	r3, #250	@ 0xfa
 8007eb4:	7123      	strb	r3, [r4, #4]
}
 8007eb6:	bd38      	pop	{r3, r4, r5, pc}
 8007eb8:	080073c9 	.word	0x080073c9

08007ebc <netconn_alloc>:
{
 8007ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ebe:	4605      	mov	r5, r0
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8007ec0:	2007      	movs	r0, #7
{
 8007ec2:	460e      	mov	r6, r1
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8007ec4:	f002 f946 	bl	800a154 <memp_malloc>
  if (conn == NULL) {
 8007ec8:	b380      	cbz	r0, 8007f2c <netconn_alloc+0x70>
  conn->pending_err = ERR_OK;
 8007eca:	f005 03f0 	and.w	r3, r5, #240	@ 0xf0
 8007ece:	2200      	movs	r2, #0
 8007ed0:	4604      	mov	r4, r0
  conn->type = t;
 8007ed2:	7005      	strb	r5, [r0, #0]
  switch (NETCONNTYPE_GROUP(t)) {
 8007ed4:	2b10      	cmp	r3, #16
  conn->pending_err = ERR_OK;
 8007ed6:	7202      	strb	r2, [r0, #8]
  conn->pcb.tcp = NULL;
 8007ed8:	6042      	str	r2, [r0, #4]
  switch (NETCONNTYPE_GROUP(t)) {
 8007eda:	d001      	beq.n	8007ee0 <netconn_alloc+0x24>
 8007edc:	2b20      	cmp	r3, #32
 8007ede:	d11a      	bne.n	8007f16 <netconn_alloc+0x5a>
  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8007ee0:	f104 0710 	add.w	r7, r4, #16
 8007ee4:	2106      	movs	r1, #6
 8007ee6:	4638      	mov	r0, r7
 8007ee8:	f008 ffc6 	bl	8010e78 <sys_mbox_new>
 8007eec:	4601      	mov	r1, r0
 8007eee:	b9c8      	cbnz	r0, 8007f24 <netconn_alloc+0x68>
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8007ef0:	f104 000c 	add.w	r0, r4, #12
 8007ef4:	f009 f82c 	bl	8010f50 <sys_sem_new>
 8007ef8:	4605      	mov	r5, r0
 8007efa:	b9d0      	cbnz	r0, 8007f32 <netconn_alloc+0x76>
  sys_mbox_set_invalid(&conn->acceptmbox);
 8007efc:	f104 0014 	add.w	r0, r4, #20
 8007f00:	f009 f822 	bl	8010f48 <sys_mbox_set_invalid>
  conn->socket       = -1;
 8007f04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007f08:	4620      	mov	r0, r4
  conn->state        = NETCONN_NONE;
 8007f0a:	7065      	strb	r5, [r4, #1]
  conn->callback     = callback;
 8007f0c:	6266      	str	r6, [r4, #36]	@ 0x24
  conn->socket       = -1;
 8007f0e:	61a3      	str	r3, [r4, #24]
  conn->current_msg  = NULL;
 8007f10:	6225      	str	r5, [r4, #32]
  conn->flags = init_flags;
 8007f12:	7725      	strb	r5, [r4, #28]
}
 8007f14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8007f16:	4b09      	ldr	r3, [pc, #36]	@ (8007f3c <netconn_alloc+0x80>)
 8007f18:	f240 22e5 	movw	r2, #741	@ 0x2e5
 8007f1c:	4908      	ldr	r1, [pc, #32]	@ (8007f40 <netconn_alloc+0x84>)
 8007f1e:	4809      	ldr	r0, [pc, #36]	@ (8007f44 <netconn_alloc+0x88>)
 8007f20:	f009 faba 	bl	8011498 <iprintf>
  memp_free(MEMP_NETCONN, conn);
 8007f24:	4621      	mov	r1, r4
 8007f26:	2007      	movs	r0, #7
 8007f28:	f002 f95a 	bl	800a1e0 <memp_free>
    return NULL;
 8007f2c:	2400      	movs	r4, #0
}
 8007f2e:	4620      	mov	r0, r4
 8007f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sys_mbox_free(&conn->recvmbox);
 8007f32:	4638      	mov	r0, r7
 8007f34:	f008 ffb6 	bl	8010ea4 <sys_mbox_free>
    goto free_and_return;
 8007f38:	e7f4      	b.n	8007f24 <netconn_alloc+0x68>
 8007f3a:	bf00      	nop
 8007f3c:	0801273c 	.word	0x0801273c
 8007f40:	08012a18 	.word	0x08012a18
 8007f44:	0801241c 	.word	0x0801241c

08007f48 <netconn_free>:
{
 8007f48:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8007f4a:	6843      	ldr	r3, [r0, #4]
{
 8007f4c:	4604      	mov	r4, r0
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8007f4e:	b133      	cbz	r3, 8007f5e <netconn_free+0x16>
 8007f50:	4b19      	ldr	r3, [pc, #100]	@ (8007fb8 <netconn_free+0x70>)
 8007f52:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8007f56:	4919      	ldr	r1, [pc, #100]	@ (8007fbc <netconn_free+0x74>)
 8007f58:	4819      	ldr	r0, [pc, #100]	@ (8007fc0 <netconn_free+0x78>)
 8007f5a:	f009 fa9d 	bl	8011498 <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8007f5e:	f104 0010 	add.w	r0, r4, #16
 8007f62:	f008 ffeb 	bl	8010f3c <sys_mbox_valid>
 8007f66:	b990      	cbnz	r0, 8007f8e <netconn_free+0x46>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8007f68:	f104 0014 	add.w	r0, r4, #20
 8007f6c:	f008 ffe6 	bl	8010f3c <sys_mbox_valid>
 8007f70:	b9d0      	cbnz	r0, 8007fa8 <netconn_free+0x60>
  sys_sem_free(&conn->op_completed);
 8007f72:	f104 050c 	add.w	r5, r4, #12
 8007f76:	4628      	mov	r0, r5
 8007f78:	f009 f822 	bl	8010fc0 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8007f7c:	4628      	mov	r0, r5
 8007f7e:	f009 f829 	bl	8010fd4 <sys_sem_set_invalid>
  memp_free(MEMP_NETCONN, conn);
 8007f82:	4621      	mov	r1, r4
 8007f84:	2007      	movs	r0, #7
}
 8007f86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_NETCONN, conn);
 8007f8a:	f002 b929 	b.w	800a1e0 <memp_free>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8007f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8007fb8 <netconn_free+0x70>)
 8007f90:	f240 3223 	movw	r2, #803	@ 0x323
 8007f94:	490b      	ldr	r1, [pc, #44]	@ (8007fc4 <netconn_free+0x7c>)
 8007f96:	480a      	ldr	r0, [pc, #40]	@ (8007fc0 <netconn_free+0x78>)
 8007f98:	f009 fa7e 	bl	8011498 <iprintf>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8007f9c:	f104 0014 	add.w	r0, r4, #20
 8007fa0:	f008 ffcc 	bl	8010f3c <sys_mbox_valid>
 8007fa4:	2800      	cmp	r0, #0
 8007fa6:	d0e4      	beq.n	8007f72 <netconn_free+0x2a>
 8007fa8:	4b03      	ldr	r3, [pc, #12]	@ (8007fb8 <netconn_free+0x70>)
 8007faa:	f240 3226 	movw	r2, #806	@ 0x326
 8007fae:	4906      	ldr	r1, [pc, #24]	@ (8007fc8 <netconn_free+0x80>)
 8007fb0:	4803      	ldr	r0, [pc, #12]	@ (8007fc0 <netconn_free+0x78>)
 8007fb2:	f009 fa71 	bl	8011498 <iprintf>
 8007fb6:	e7dc      	b.n	8007f72 <netconn_free+0x2a>
 8007fb8:	0801273c 	.word	0x0801273c
 8007fbc:	08012a40 	.word	0x08012a40
 8007fc0:	0801241c 	.word	0x0801241c
 8007fc4:	08012a70 	.word	0x08012a70
 8007fc8:	08012aac 	.word	0x08012aac

08007fcc <netconn_drain>:
{
 8007fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (sys_mbox_valid(&conn->recvmbox)) {
 8007fd0:	f100 0610 	add.w	r6, r0, #16
{
 8007fd4:	b082      	sub	sp, #8
 8007fd6:	4604      	mov	r4, r0
  if (sys_mbox_valid(&conn->recvmbox)) {
 8007fd8:	4630      	mov	r0, r6
 8007fda:	f008 ffaf 	bl	8010f3c <sys_mbox_valid>
 8007fde:	b300      	cbz	r0, 8008022 <netconn_drain+0x56>
 8007fe0:	ad01      	add	r5, sp, #4
  } else if (msg == &netconn_reset) {
 8007fe2:	f8df 80c4 	ldr.w	r8, [pc, #196]	@ 80080a8 <netconn_drain+0xdc>
  if (msg == &netconn_aborted) {
 8007fe6:	4f2f      	ldr	r7, [pc, #188]	@ (80080a4 <netconn_drain+0xd8>)
  } else if (msg == &netconn_closed) {
 8007fe8:	f8df 90c0 	ldr.w	r9, [pc, #192]	@ 80080ac <netconn_drain+0xe0>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8007fec:	4629      	mov	r1, r5
 8007fee:	4630      	mov	r0, r6
 8007ff0:	f008 ff8e 	bl	8010f10 <sys_arch_mbox_tryfetch>
 8007ff4:	3001      	adds	r0, #1
 8007ff6:	d00e      	beq.n	8008016 <netconn_drain+0x4a>
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8007ff8:	7823      	ldrb	r3, [r4, #0]
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8007ffa:	9a01      	ldr	r2, [sp, #4]
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8007ffc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          netbuf_delete((struct netbuf *)mem);
 8008000:	4610      	mov	r0, r2
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8008002:	2b10      	cmp	r3, #16
 8008004:	d045      	beq.n	8008092 <netconn_drain+0xc6>
          netbuf_delete((struct netbuf *)mem);
 8008006:	f000 fb39 	bl	800867c <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800800a:	4629      	mov	r1, r5
 800800c:	4630      	mov	r0, r6
 800800e:	f008 ff7f 	bl	8010f10 <sys_arch_mbox_tryfetch>
 8008012:	3001      	adds	r0, #1
 8008014:	d1f0      	bne.n	8007ff8 <netconn_drain+0x2c>
    sys_mbox_free(&conn->recvmbox);
 8008016:	4630      	mov	r0, r6
 8008018:	f008 ff44 	bl	8010ea4 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800801c:	4630      	mov	r0, r6
 800801e:	f008 ff93 	bl	8010f48 <sys_mbox_set_invalid>
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8008022:	3414      	adds	r4, #20
 8008024:	4620      	mov	r0, r4
 8008026:	f008 ff89 	bl	8010f3c <sys_mbox_valid>
 800802a:	b378      	cbz	r0, 800808c <netconn_drain+0xc0>
 800802c:	ad01      	add	r5, sp, #4
  if (msg == &netconn_aborted) {
 800802e:	f8df 9074 	ldr.w	r9, [pc, #116]	@ 80080a4 <netconn_drain+0xd8>
  } else if (msg == &netconn_reset) {
 8008032:	f8df 8074 	ldr.w	r8, [pc, #116]	@ 80080a8 <netconn_drain+0xdc>
  } else if (msg == &netconn_closed) {
 8008036:	f8df a074 	ldr.w	sl, [pc, #116]	@ 80080ac <netconn_drain+0xe0>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800803a:	4629      	mov	r1, r5
 800803c:	4620      	mov	r0, r4
 800803e:	f008 ff67 	bl	8010f10 <sys_arch_mbox_tryfetch>
 8008042:	3001      	adds	r0, #1
 8008044:	d01c      	beq.n	8008080 <netconn_drain+0xb4>
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8008046:	9e01      	ldr	r6, [sp, #4]
  } else if (msg == &netconn_closed) {
 8008048:	4546      	cmp	r6, r8
 800804a:	bf18      	it	ne
 800804c:	454e      	cmpne	r6, r9
          netconn_drain(newconn);
 800804e:	4630      	mov	r0, r6
  } else if (msg == &netconn_closed) {
 8008050:	d0f3      	beq.n	800803a <netconn_drain+0x6e>
 8008052:	eba6 070a 	sub.w	r7, r6, sl
 8008056:	fab7 f787 	clz	r7, r7
 800805a:	097f      	lsrs	r7, r7, #5
 800805c:	2f00      	cmp	r7, #0
 800805e:	d1ec      	bne.n	800803a <netconn_drain+0x6e>
          netconn_drain(newconn);
 8008060:	f7ff ffb4 	bl	8007fcc <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8008064:	6870      	ldr	r0, [r6, #4]
 8008066:	b110      	cbz	r0, 800806e <netconn_drain+0xa2>
            tcp_abort(newconn->pcb.tcp);
 8008068:	f003 fda8 	bl	800bbbc <tcp_abort>
            newconn->pcb.tcp = NULL;
 800806c:	6077      	str	r7, [r6, #4]
          netconn_free(newconn);
 800806e:	4630      	mov	r0, r6
 8008070:	f7ff ff6a 	bl	8007f48 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8008074:	4629      	mov	r1, r5
 8008076:	4620      	mov	r0, r4
 8008078:	f008 ff4a 	bl	8010f10 <sys_arch_mbox_tryfetch>
 800807c:	3001      	adds	r0, #1
 800807e:	d1e2      	bne.n	8008046 <netconn_drain+0x7a>
    sys_mbox_free(&conn->acceptmbox);
 8008080:	4620      	mov	r0, r4
 8008082:	f008 ff0f 	bl	8010ea4 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8008086:	4620      	mov	r0, r4
 8008088:	f008 ff5e 	bl	8010f48 <sys_mbox_set_invalid>
}
 800808c:	b002      	add	sp, #8
 800808e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  } else if (msg == &netconn_closed) {
 8008092:	42ba      	cmp	r2, r7
 8008094:	bf18      	it	ne
 8008096:	4542      	cmpne	r2, r8
 8008098:	d0a8      	beq.n	8007fec <netconn_drain+0x20>
 800809a:	454a      	cmp	r2, r9
 800809c:	d0a6      	beq.n	8007fec <netconn_drain+0x20>
            pbuf_free((struct pbuf *)mem);
 800809e:	f002 fb6f 	bl	800a780 <pbuf_free>
 80080a2:	e7a3      	b.n	8007fec <netconn_drain+0x20>
 80080a4:	08012b82 	.word	0x08012b82
 80080a8:	08012b81 	.word	0x08012b81
 80080ac:	08012b80 	.word	0x08012b80

080080b0 <accept_function>:
{
 80080b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (conn == NULL) {
 80080b2:	2800      	cmp	r0, #0
 80080b4:	d066      	beq.n	8008184 <accept_function+0xd4>
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 80080b6:	f100 0714 	add.w	r7, r0, #20
 80080ba:	4604      	mov	r4, r0
 80080bc:	460d      	mov	r5, r1
 80080be:	4616      	mov	r6, r2
 80080c0:	4638      	mov	r0, r7
 80080c2:	f008 ff3b 	bl	8010f3c <sys_mbox_valid>
 80080c6:	2800      	cmp	r0, #0
 80080c8:	d05c      	beq.n	8008184 <accept_function+0xd4>
  if (newpcb == NULL) {
 80080ca:	2d00      	cmp	r5, #0
 80080cc:	d054      	beq.n	8008178 <accept_function+0xc8>
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 80080ce:	b9be      	cbnz	r6, 8008100 <accept_function+0x50>
  newconn = netconn_alloc(conn->type, conn->callback);
 80080d0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80080d2:	7820      	ldrb	r0, [r4, #0]
 80080d4:	f7ff fef2 	bl	8007ebc <netconn_alloc>
  if (newconn == NULL) {
 80080d8:	4606      	mov	r6, r0
 80080da:	2800      	cmp	r0, #0
 80080dc:	d03e      	beq.n	800815c <accept_function+0xac>
  newconn->pcb.tcp = newpcb;
 80080de:	6045      	str	r5, [r0, #4]
  setup_tcp(newconn);
 80080e0:	f7ff f9ce 	bl	8007480 <setup_tcp>
  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 80080e4:	4631      	mov	r1, r6
 80080e6:	4638      	mov	r0, r7
 80080e8:	f008 fee6 	bl	8010eb8 <sys_mbox_trypost>
 80080ec:	4605      	mov	r5, r0
 80080ee:	b978      	cbnz	r0, 8008110 <accept_function+0x60>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80080f0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80080f2:	b11b      	cbz	r3, 80080fc <accept_function+0x4c>
 80080f4:	4602      	mov	r2, r0
 80080f6:	4601      	mov	r1, r0
 80080f8:	4620      	mov	r0, r4
 80080fa:	4798      	blx	r3
}
 80080fc:	4628      	mov	r0, r5
 80080fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8008100:	4b25      	ldr	r3, [pc, #148]	@ (8008198 <accept_function+0xe8>)
 8008102:	f240 222a 	movw	r2, #554	@ 0x22a
 8008106:	4925      	ldr	r1, [pc, #148]	@ (800819c <accept_function+0xec>)
 8008108:	4825      	ldr	r0, [pc, #148]	@ (80081a0 <accept_function+0xf0>)
 800810a:	f009 f9c5 	bl	8011498 <iprintf>
 800810e:	e7df      	b.n	80080d0 <accept_function+0x20>
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8008110:	6874      	ldr	r4, [r6, #4]
    tcp_arg(pcb, NULL);
 8008112:	2100      	movs	r1, #0
 8008114:	4620      	mov	r0, r4
 8008116:	f003 f899 	bl	800b24c <tcp_arg>
    tcp_recv(pcb, NULL);
 800811a:	4620      	mov	r0, r4
 800811c:	2100      	movs	r1, #0
 800811e:	f003 f899 	bl	800b254 <tcp_recv>
    tcp_sent(pcb, NULL);
 8008122:	4620      	mov	r0, r4
 8008124:	2100      	movs	r1, #0
 8008126:	f003 f8b1 	bl	800b28c <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800812a:	2200      	movs	r2, #0
 800812c:	4620      	mov	r0, r4
 800812e:	4611      	mov	r1, r2
 8008130:	f003 f8ea 	bl	800b308 <tcp_poll>
    tcp_err(pcb, NULL);
 8008134:	2100      	movs	r1, #0
 8008136:	4620      	mov	r0, r4
    sys_mbox_free(&newconn->recvmbox);
 8008138:	f106 0410 	add.w	r4, r6, #16
    tcp_err(pcb, NULL);
 800813c:	f003 f8c2 	bl	800b2c4 <tcp_err>
    newconn->pcb.tcp = NULL;
 8008140:	2300      	movs	r3, #0
    sys_mbox_free(&newconn->recvmbox);
 8008142:	4620      	mov	r0, r4
    newconn->pcb.tcp = NULL;
 8008144:	6073      	str	r3, [r6, #4]
    sys_mbox_free(&newconn->recvmbox);
 8008146:	f008 fead 	bl	8010ea4 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800814a:	4620      	mov	r0, r4
 800814c:	f008 fefc 	bl	8010f48 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8008150:	4630      	mov	r0, r6
 8008152:	f7ff fef9 	bl	8007f48 <netconn_free>
    return ERR_MEM;
 8008156:	f04f 35ff 	mov.w	r5, #4294967295
 800815a:	e7cf      	b.n	80080fc <accept_function+0x4c>
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800815c:	4911      	ldr	r1, [pc, #68]	@ (80081a4 <accept_function+0xf4>)
 800815e:	4638      	mov	r0, r7
 8008160:	f008 feaa 	bl	8010eb8 <sys_mbox_trypost>
 8008164:	2800      	cmp	r0, #0
 8008166:	d1f6      	bne.n	8008156 <accept_function+0xa6>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008168:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800816a:	2b00      	cmp	r3, #0
 800816c:	d0f3      	beq.n	8008156 <accept_function+0xa6>
 800816e:	4602      	mov	r2, r0
 8008170:	4601      	mov	r1, r0
 8008172:	4620      	mov	r0, r4
 8008174:	4798      	blx	r3
 8008176:	e7ee      	b.n	8008156 <accept_function+0xa6>
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8008178:	490a      	ldr	r1, [pc, #40]	@ (80081a4 <accept_function+0xf4>)
 800817a:	4638      	mov	r0, r7
 800817c:	f008 fe9c 	bl	8010eb8 <sys_mbox_trypost>
 8008180:	4602      	mov	r2, r0
 8008182:	b110      	cbz	r0, 800818a <accept_function+0xda>
    return ERR_VAL;
 8008184:	f06f 0505 	mvn.w	r5, #5
 8008188:	e7b8      	b.n	80080fc <accept_function+0x4c>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800818a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800818c:	2b00      	cmp	r3, #0
 800818e:	d0f9      	beq.n	8008184 <accept_function+0xd4>
 8008190:	4601      	mov	r1, r0
 8008192:	4620      	mov	r0, r4
 8008194:	4798      	blx	r3
 8008196:	e7f5      	b.n	8008184 <accept_function+0xd4>
 8008198:	0801273c 	.word	0x0801273c
 800819c:	08012ae8 	.word	0x08012ae8
 80081a0:	0801241c 	.word	0x0801241c
 80081a4:	08012b82 	.word	0x08012b82

080081a8 <lwip_netconn_do_delconn>:
{
 80081a8:	b570      	push	{r4, r5, r6, lr}
 80081aa:	4604      	mov	r4, r0
  enum netconn_state state = msg->conn->state;
 80081ac:	6800      	ldr	r0, [r0, #0]
 80081ae:	7845      	ldrb	r5, [r0, #1]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 80081b0:	b195      	cbz	r5, 80081d8 <lwip_netconn_do_delconn+0x30>
 80081b2:	7803      	ldrb	r3, [r0, #0]
 80081b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80081b8:	2b10      	cmp	r3, #16
 80081ba:	d135      	bne.n	8008228 <lwip_netconn_do_delconn+0x80>
  if (((state != NETCONN_NONE) &&
 80081bc:	2d02      	cmp	r5, #2
 80081be:	d00b      	beq.n	80081d8 <lwip_netconn_do_delconn+0x30>
       (state != NETCONN_LISTEN) &&
 80081c0:	2d03      	cmp	r5, #3
 80081c2:	d006      	beq.n	80081d2 <lwip_netconn_do_delconn+0x2a>
    msg->err = ERR_INPROGRESS;
 80081c4:	23fb      	movs	r3, #251	@ 0xfb
 80081c6:	7123      	strb	r3, [r4, #4]
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 80081c8:	300c      	adds	r0, #12
}
 80081ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 80081ce:	f008 befb 	b.w	8010fc8 <sys_sem_valid>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 80081d2:	7f03      	ldrb	r3, [r0, #28]
 80081d4:	075b      	lsls	r3, r3, #29
 80081d6:	d5f5      	bpl.n	80081c4 <lwip_netconn_do_delconn+0x1c>
    msg->err = ERR_OK;
 80081d8:	2500      	movs	r5, #0
 80081da:	7125      	strb	r5, [r4, #4]
    netconn_drain(msg->conn);
 80081dc:	f7ff fef6 	bl	8007fcc <netconn_drain>
    if (msg->conn->pcb.tcp != NULL) {
 80081e0:	6820      	ldr	r0, [r4, #0]
 80081e2:	6842      	ldr	r2, [r0, #4]
 80081e4:	b16a      	cbz	r2, 8008202 <lwip_netconn_do_delconn+0x5a>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80081e6:	7803      	ldrb	r3, [r0, #0]
 80081e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80081ec:	2b10      	cmp	r3, #16
 80081ee:	d024      	beq.n	800823a <lwip_netconn_do_delconn+0x92>
 80081f0:	2b20      	cmp	r3, #32
 80081f2:	d104      	bne.n	80081fe <lwip_netconn_do_delconn+0x56>
          udp_remove(msg->conn->pcb.udp);
 80081f4:	4610      	mov	r0, r2
          msg->conn->pcb.udp->recv_arg = NULL;
 80081f6:	61d5      	str	r5, [r2, #28]
          udp_remove(msg->conn->pcb.udp);
 80081f8:	f007 fa30 	bl	800f65c <udp_remove>
      msg->conn->pcb.tcp = NULL;
 80081fc:	6820      	ldr	r0, [r4, #0]
 80081fe:	2300      	movs	r3, #0
 8008200:	6043      	str	r3, [r0, #4]
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8008202:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8008204:	2b00      	cmp	r3, #0
 8008206:	d0df      	beq.n	80081c8 <lwip_netconn_do_delconn+0x20>
 8008208:	2200      	movs	r2, #0
 800820a:	4611      	mov	r1, r2
 800820c:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800820e:	6820      	ldr	r0, [r4, #0]
 8008210:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8008212:	2b00      	cmp	r3, #0
 8008214:	d0d8      	beq.n	80081c8 <lwip_netconn_do_delconn+0x20>
 8008216:	2200      	movs	r2, #0
 8008218:	2102      	movs	r1, #2
 800821a:	4798      	blx	r3
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800821c:	6820      	ldr	r0, [r4, #0]
}
 800821e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8008222:	300c      	adds	r0, #12
 8008224:	f008 bed0 	b.w	8010fc8 <sys_sem_valid>
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8008228:	4b1f      	ldr	r3, [pc, #124]	@ (80082a8 <lwip_netconn_do_delconn+0x100>)
 800822a:	f240 425e 	movw	r2, #1118	@ 0x45e
 800822e:	491f      	ldr	r1, [pc, #124]	@ (80082ac <lwip_netconn_do_delconn+0x104>)
 8008230:	481f      	ldr	r0, [pc, #124]	@ (80082b0 <lwip_netconn_do_delconn+0x108>)
 8008232:	f009 f931 	bl	8011498 <iprintf>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8008236:	6820      	ldr	r0, [r4, #0]
 8008238:	e7c0      	b.n	80081bc <lwip_netconn_do_delconn+0x14>
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800823a:	6a03      	ldr	r3, [r0, #32]
 800823c:	b13b      	cbz	r3, 800824e <lwip_netconn_do_delconn+0xa6>
 800823e:	4b1a      	ldr	r3, [pc, #104]	@ (80082a8 <lwip_netconn_do_delconn+0x100>)
 8008240:	f240 4294 	movw	r2, #1172	@ 0x494
 8008244:	491b      	ldr	r1, [pc, #108]	@ (80082b4 <lwip_netconn_do_delconn+0x10c>)
 8008246:	481a      	ldr	r0, [pc, #104]	@ (80082b0 <lwip_netconn_do_delconn+0x108>)
 8008248:	f009 f926 	bl	8011498 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800824c:	6820      	ldr	r0, [r4, #0]
 800824e:	2204      	movs	r2, #4
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8008250:	2303      	movs	r3, #3
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8008252:	2100      	movs	r1, #0
          msg->conn->state = NETCONN_CLOSE;
 8008254:	7042      	strb	r2, [r0, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8008256:	7223      	strb	r3, [r4, #8]
          msg->conn->current_msg = msg;
 8008258:	6204      	str	r4, [r0, #32]
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800825a:	f7ff fadd 	bl	8007818 <lwip_netconn_do_close_internal>
 800825e:	b188      	cbz	r0, 8008284 <lwip_netconn_do_delconn+0xdc>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8008260:	6823      	ldr	r3, [r4, #0]
 8008262:	785b      	ldrb	r3, [r3, #1]
 8008264:	2b04      	cmp	r3, #4
 8008266:	d10e      	bne.n	8008286 <lwip_netconn_do_delconn+0xde>
            UNLOCK_TCPIP_CORE();
 8008268:	4813      	ldr	r0, [pc, #76]	@ (80082b8 <lwip_netconn_do_delconn+0x110>)
 800826a:	f008 fed9 	bl	8011020 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800826e:	6820      	ldr	r0, [r4, #0]
 8008270:	2100      	movs	r1, #0
 8008272:	300c      	adds	r0, #12
 8008274:	f008 fe84 	bl	8010f80 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8008278:	480f      	ldr	r0, [pc, #60]	@ (80082b8 <lwip_netconn_do_delconn+0x110>)
 800827a:	f008 fecb 	bl	8011014 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800827e:	6823      	ldr	r3, [r4, #0]
 8008280:	785b      	ldrb	r3, [r3, #1]
 8008282:	b943      	cbnz	r3, 8008296 <lwip_netconn_do_delconn+0xee>
}
 8008284:	bd70      	pop	{r4, r5, r6, pc}
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8008286:	4b08      	ldr	r3, [pc, #32]	@ (80082a8 <lwip_netconn_do_delconn+0x100>)
 8008288:	f240 429a 	movw	r2, #1178	@ 0x49a
 800828c:	490b      	ldr	r1, [pc, #44]	@ (80082bc <lwip_netconn_do_delconn+0x114>)
 800828e:	4808      	ldr	r0, [pc, #32]	@ (80082b0 <lwip_netconn_do_delconn+0x108>)
 8008290:	f009 f902 	bl	8011498 <iprintf>
 8008294:	e7e8      	b.n	8008268 <lwip_netconn_do_delconn+0xc0>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8008296:	4b04      	ldr	r3, [pc, #16]	@ (80082a8 <lwip_netconn_do_delconn+0x100>)
 8008298:	f240 429e 	movw	r2, #1182	@ 0x49e
 800829c:	4907      	ldr	r1, [pc, #28]	@ (80082bc <lwip_netconn_do_delconn+0x114>)
 800829e:	4804      	ldr	r0, [pc, #16]	@ (80082b0 <lwip_netconn_do_delconn+0x108>)
}
 80082a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80082a4:	f009 b8f8 	b.w	8011498 <iprintf>
 80082a8:	0801273c 	.word	0x0801273c
 80082ac:	08012b10 	.word	0x08012b10
 80082b0:	0801241c 	.word	0x0801241c
 80082b4:	08012b24 	.word	0x08012b24
 80082b8:	24006be8 	.word	0x24006be8
 80082bc:	08012b40 	.word	0x08012b40

080082c0 <lwip_netconn_do_bind>:
  if (msg->conn->pcb.tcp != NULL) {
 80082c0:	6803      	ldr	r3, [r0, #0]
{
 80082c2:	b510      	push	{r4, lr}
 80082c4:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
 80082c6:	6858      	ldr	r0, [r3, #4]
 80082c8:	b130      	cbz	r0, 80082d8 <lwip_netconn_do_bind+0x18>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80082d0:	2b10      	cmp	r3, #16
 80082d2:	d00b      	beq.n	80082ec <lwip_netconn_do_bind+0x2c>
 80082d4:	2b20      	cmp	r3, #32
 80082d6:	d003      	beq.n	80082e0 <lwip_netconn_do_bind+0x20>
 80082d8:	f06f 0005 	mvn.w	r0, #5
  msg->err = err;
 80082dc:	7120      	strb	r0, [r4, #4]
}
 80082de:	bd10      	pop	{r4, pc}
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80082e0:	89a2      	ldrh	r2, [r4, #12]
 80082e2:	68a1      	ldr	r1, [r4, #8]
 80082e4:	f006 ffce 	bl	800f284 <udp_bind>
  msg->err = err;
 80082e8:	7120      	strb	r0, [r4, #4]
}
 80082ea:	bd10      	pop	{r4, pc}
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80082ec:	89a2      	ldrh	r2, [r4, #12]
 80082ee:	68a1      	ldr	r1, [r4, #8]
 80082f0:	f002 fe18 	bl	800af24 <tcp_bind>
  msg->err = err;
 80082f4:	7120      	strb	r0, [r4, #4]
}
 80082f6:	bd10      	pop	{r4, pc}

080082f8 <lwip_netconn_do_listen>:
  if (msg->conn->pcb.tcp != NULL) {
 80082f8:	6803      	ldr	r3, [r0, #0]
{
 80082fa:	b530      	push	{r4, r5, lr}
 80082fc:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
 80082fe:	6858      	ldr	r0, [r3, #4]
{
 8008300:	b083      	sub	sp, #12
  if (msg->conn->pcb.tcp != NULL) {
 8008302:	b180      	cbz	r0, 8008326 <lwip_netconn_do_listen+0x2e>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8008304:	781a      	ldrb	r2, [r3, #0]
 8008306:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 800830a:	2a10      	cmp	r2, #16
 800830c:	d004      	beq.n	8008318 <lwip_netconn_do_listen+0x20>
 800830e:	f06f 030f 	mvn.w	r3, #15
  msg->err = err;
 8008312:	7123      	strb	r3, [r4, #4]
}
 8008314:	b003      	add	sp, #12
 8008316:	bd30      	pop	{r4, r5, pc}
      if (msg->conn->state == NETCONN_NONE) {
 8008318:	785b      	ldrb	r3, [r3, #1]
 800831a:	b94b      	cbnz	r3, 8008330 <lwip_netconn_do_listen+0x38>
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800831c:	7d03      	ldrb	r3, [r0, #20]
 800831e:	b17b      	cbz	r3, 8008340 <lwip_netconn_do_listen+0x48>
 8008320:	f06f 0305 	mvn.w	r3, #5
 8008324:	e7f5      	b.n	8008312 <lwip_netconn_do_listen+0x1a>
 8008326:	f06f 030a 	mvn.w	r3, #10
  msg->err = err;
 800832a:	7123      	strb	r3, [r4, #4]
}
 800832c:	b003      	add	sp, #12
 800832e:	bd30      	pop	{r4, r5, pc}
      } else if (msg->conn->state == NETCONN_LISTEN) {
 8008330:	2b02      	cmp	r3, #2
 8008332:	bf14      	ite	ne
 8008334:	f06f 030a 	mvnne.w	r3, #10
 8008338:	2300      	moveq	r3, #0
  msg->err = err;
 800833a:	7123      	strb	r3, [r4, #4]
}
 800833c:	b003      	add	sp, #12
 800833e:	bd30      	pop	{r4, r5, pc}
          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8008340:	f10d 0207 	add.w	r2, sp, #7
 8008344:	21ff      	movs	r1, #255	@ 0xff
 8008346:	f002 fe49 	bl	800afdc <tcp_listen_with_backlog_and_err>
          if (lpcb == NULL) {
 800834a:	4605      	mov	r5, r0
 800834c:	b1d8      	cbz	r0, 8008386 <lwip_netconn_do_listen+0x8e>
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800834e:	6820      	ldr	r0, [r4, #0]
 8008350:	3010      	adds	r0, #16
 8008352:	f008 fdf3 	bl	8010f3c <sys_mbox_valid>
 8008356:	bb50      	cbnz	r0, 80083ae <lwip_netconn_do_listen+0xb6>
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8008358:	6820      	ldr	r0, [r4, #0]
            err = ERR_OK;
 800835a:	2300      	movs	r3, #0
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800835c:	3014      	adds	r0, #20
            err = ERR_OK;
 800835e:	f88d 3007 	strb.w	r3, [sp, #7]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8008362:	f008 fdeb 	bl	8010f3c <sys_mbox_valid>
 8008366:	b1d0      	cbz	r0, 800839e <lwip_netconn_do_listen+0xa6>
            if (err == ERR_OK) {
 8008368:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 800836c:	b970      	cbnz	r0, 800838c <lwip_netconn_do_listen+0x94>
              msg->conn->state = NETCONN_LISTEN;
 800836e:	6821      	ldr	r1, [r4, #0]
 8008370:	2302      	movs	r3, #2
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8008372:	4628      	mov	r0, r5
              msg->conn->state = NETCONN_LISTEN;
 8008374:	704b      	strb	r3, [r1, #1]
              msg->conn->pcb.tcp = lpcb;
 8008376:	604d      	str	r5, [r1, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8008378:	f002 ff68 	bl	800b24c <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800837c:	6823      	ldr	r3, [r4, #0]
 800837e:	4910      	ldr	r1, [pc, #64]	@ (80083c0 <lwip_netconn_do_listen+0xc8>)
 8008380:	6858      	ldr	r0, [r3, #4]
 8008382:	f002 ffbb 	bl	800b2fc <tcp_accept>
  msg->err = err;
 8008386:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 800838a:	e7c2      	b.n	8008312 <lwip_netconn_do_listen+0x1a>
              tcp_close(lpcb);
 800838c:	4628      	mov	r0, r5
 800838e:	f003 fdf3 	bl	800bf78 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8008392:	6822      	ldr	r2, [r4, #0]
 8008394:	2100      	movs	r1, #0
  msg->err = err;
 8008396:	f99d 3007 	ldrsb.w	r3, [sp, #7]
              msg->conn->pcb.tcp = NULL;
 800839a:	6051      	str	r1, [r2, #4]
 800839c:	e7b9      	b.n	8008312 <lwip_netconn_do_listen+0x1a>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800839e:	6820      	ldr	r0, [r4, #0]
 80083a0:	2106      	movs	r1, #6
 80083a2:	3014      	adds	r0, #20
 80083a4:	f008 fd68 	bl	8010e78 <sys_mbox_new>
 80083a8:	f88d 0007 	strb.w	r0, [sp, #7]
 80083ac:	e7de      	b.n	800836c <lwip_netconn_do_listen+0x74>
              sys_mbox_free(&msg->conn->recvmbox);
 80083ae:	6820      	ldr	r0, [r4, #0]
 80083b0:	3010      	adds	r0, #16
 80083b2:	f008 fd77 	bl	8010ea4 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 80083b6:	6820      	ldr	r0, [r4, #0]
 80083b8:	3010      	adds	r0, #16
 80083ba:	f008 fdc5 	bl	8010f48 <sys_mbox_set_invalid>
 80083be:	e7cb      	b.n	8008358 <lwip_netconn_do_listen+0x60>
 80083c0:	080080b1 	.word	0x080080b1

080083c4 <lwip_netconn_do_send>:
{
 80083c4:	b510      	push	{r4, lr}
 80083c6:	4604      	mov	r4, r0
  err_t err = netconn_err(msg->conn);
 80083c8:	6800      	ldr	r0, [r0, #0]
 80083ca:	f7fe ffed 	bl	80073a8 <netconn_err>
  if (err == ERR_OK) {
 80083ce:	b948      	cbnz	r0, 80083e4 <lwip_netconn_do_send+0x20>
    if (msg->conn->pcb.tcp != NULL) {
 80083d0:	6823      	ldr	r3, [r4, #0]
 80083d2:	6858      	ldr	r0, [r3, #4]
 80083d4:	b120      	cbz	r0, 80083e0 <lwip_netconn_do_send+0x1c>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80083dc:	2b20      	cmp	r3, #32
 80083de:	d003      	beq.n	80083e8 <lwip_netconn_do_send+0x24>
          err = ERR_CONN;
 80083e0:	f06f 000a 	mvn.w	r0, #10
  msg->err = err;
 80083e4:	7120      	strb	r0, [r4, #4]
}
 80083e6:	bd10      	pop	{r4, pc}
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 80083e8:	68a2      	ldr	r2, [r4, #8]
 80083ea:	6893      	ldr	r3, [r2, #8]
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 80083ec:	6811      	ldr	r1, [r2, #0]
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 80083ee:	b913      	cbnz	r3, 80083f6 <lwip_netconn_do_send+0x32>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 80083f0:	f007 f8fe 	bl	800f5f0 <udp_send>
 80083f4:	e7f6      	b.n	80083e4 <lwip_netconn_do_send+0x20>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 80083f6:	8993      	ldrh	r3, [r2, #12]
 80083f8:	3208      	adds	r2, #8
 80083fa:	f007 f8b3 	bl	800f564 <udp_sendto>
 80083fe:	e7f1      	b.n	80083e4 <lwip_netconn_do_send+0x20>

08008400 <lwip_netconn_do_recv>:
{
 8008400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  msg->err = ERR_OK;
 8008402:	2200      	movs	r2, #0
  if (msg->conn->pcb.tcp != NULL) {
 8008404:	6803      	ldr	r3, [r0, #0]
{
 8008406:	4606      	mov	r6, r0
  msg->err = ERR_OK;
 8008408:	7102      	strb	r2, [r0, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800840a:	6858      	ldr	r0, [r3, #4]
 800840c:	b120      	cbz	r0, 8008418 <lwip_netconn_do_recv+0x18>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008414:	2b10      	cmp	r3, #16
 8008416:	d000      	beq.n	800841a <lwip_netconn_do_recv+0x1a>
}
 8008418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      size_t remaining = msg->msg.r.len;
 800841a:	68b4      	ldr	r4, [r6, #8]
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800841c:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 8008420:	e001      	b.n	8008426 <lwip_netconn_do_recv+0x26>
        tcp_recved(msg->conn->pcb.tcp, recved);
 8008422:	6833      	ldr	r3, [r6, #0]
 8008424:	6858      	ldr	r0, [r3, #4]
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8008426:	42bc      	cmp	r4, r7
 8008428:	4625      	mov	r5, r4
 800842a:	bf28      	it	cs
 800842c:	463d      	movcs	r5, r7
        tcp_recved(msg->conn->pcb.tcp, recved);
 800842e:	b2a9      	uxth	r1, r5
 8008430:	f002 fe8e 	bl	800b150 <tcp_recved>
      } while (remaining != 0);
 8008434:	1b64      	subs	r4, r4, r5
 8008436:	d1f4      	bne.n	8008422 <lwip_netconn_do_recv+0x22>
}
 8008438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800843a:	bf00      	nop

0800843c <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800843c:	b510      	push	{r4, lr}
 800843e:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg *)m;

  err_t err = netconn_err(msg->conn);
 8008440:	6800      	ldr	r0, [r0, #0]
 8008442:	f7fe ffb1 	bl	80073a8 <netconn_err>
  if (err == ERR_OK) {
 8008446:	b938      	cbnz	r0, 8008458 <lwip_netconn_do_write+0x1c>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8008448:	6822      	ldr	r2, [r4, #0]
 800844a:	7813      	ldrb	r3, [r2, #0]
 800844c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008450:	2b10      	cmp	r3, #16
 8008452:	d003      	beq.n	800845c <lwip_netconn_do_write+0x20>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8008454:	f06f 0005 	mvn.w	r0, #5
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8008458:	7120      	strb	r0, [r4, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800845a:	bd10      	pop	{r4, pc}
      if (msg->conn->state != NETCONN_NONE) {
 800845c:	7853      	ldrb	r3, [r2, #1]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d13a      	bne.n	80084d8 <lwip_netconn_do_write+0x9c>
      } else if (msg->conn->pcb.tcp != NULL) {
 8008462:	6853      	ldr	r3, [r2, #4]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d03b      	beq.n	80084e0 <lwip_netconn_do_write+0xa4>
        msg->conn->state = NETCONN_WRITE;
 8008468:	2101      	movs	r1, #1
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800846a:	6a13      	ldr	r3, [r2, #32]
        msg->conn->state = NETCONN_WRITE;
 800846c:	7051      	strb	r1, [r2, #1]
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800846e:	b133      	cbz	r3, 800847e <lwip_netconn_do_write+0x42>
 8008470:	4b21      	ldr	r3, [pc, #132]	@ (80084f8 <lwip_netconn_do_write+0xbc>)
 8008472:	f240 7223 	movw	r2, #1827	@ 0x723
 8008476:	4921      	ldr	r1, [pc, #132]	@ (80084fc <lwip_netconn_do_write+0xc0>)
 8008478:	4821      	ldr	r0, [pc, #132]	@ (8008500 <lwip_netconn_do_write+0xc4>)
 800847a:	f009 f80d 	bl	8011498 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800847e:	6963      	ldr	r3, [r4, #20]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d031      	beq.n	80084e8 <lwip_netconn_do_write+0xac>
        msg->conn->current_msg = msg;
 8008484:	6820      	ldr	r0, [r4, #0]
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8008486:	2100      	movs	r1, #0
        msg->conn->current_msg = msg;
 8008488:	6204      	str	r4, [r0, #32]
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800848a:	f7ff f81b 	bl	80074c4 <lwip_netconn_do_writemore>
 800848e:	2800      	cmp	r0, #0
 8008490:	d0e3      	beq.n	800845a <lwip_netconn_do_write+0x1e>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8008492:	6823      	ldr	r3, [r4, #0]
 8008494:	785b      	ldrb	r3, [r3, #1]
 8008496:	2b01      	cmp	r3, #1
 8008498:	d006      	beq.n	80084a8 <lwip_netconn_do_write+0x6c>
 800849a:	4b17      	ldr	r3, [pc, #92]	@ (80084f8 <lwip_netconn_do_write+0xbc>)
 800849c:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 80084a0:	4918      	ldr	r1, [pc, #96]	@ (8008504 <lwip_netconn_do_write+0xc8>)
 80084a2:	4817      	ldr	r0, [pc, #92]	@ (8008500 <lwip_netconn_do_write+0xc4>)
 80084a4:	f008 fff8 	bl	8011498 <iprintf>
          UNLOCK_TCPIP_CORE();
 80084a8:	4817      	ldr	r0, [pc, #92]	@ (8008508 <lwip_netconn_do_write+0xcc>)
 80084aa:	f008 fdb9 	bl	8011020 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80084ae:	6820      	ldr	r0, [r4, #0]
 80084b0:	2100      	movs	r1, #0
 80084b2:	300c      	adds	r0, #12
 80084b4:	f008 fd64 	bl	8010f80 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 80084b8:	4813      	ldr	r0, [pc, #76]	@ (8008508 <lwip_netconn_do_write+0xcc>)
 80084ba:	f008 fdab 	bl	8011014 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 80084be:	6823      	ldr	r3, [r4, #0]
 80084c0:	785b      	ldrb	r3, [r3, #1]
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d1c9      	bne.n	800845a <lwip_netconn_do_write+0x1e>
 80084c6:	4b0c      	ldr	r3, [pc, #48]	@ (80084f8 <lwip_netconn_do_write+0xbc>)
 80084c8:	f240 722c 	movw	r2, #1836	@ 0x72c
 80084cc:	490d      	ldr	r1, [pc, #52]	@ (8008504 <lwip_netconn_do_write+0xc8>)
 80084ce:	480c      	ldr	r0, [pc, #48]	@ (8008500 <lwip_netconn_do_write+0xc4>)
}
 80084d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 80084d4:	f008 bfe0 	b.w	8011498 <iprintf>
        err = ERR_INPROGRESS;
 80084d8:	f06f 0004 	mvn.w	r0, #4
  msg->err = err;
 80084dc:	7120      	strb	r0, [r4, #4]
  TCPIP_APIMSG_ACK(msg);
 80084de:	e7bc      	b.n	800845a <lwip_netconn_do_write+0x1e>
        err = ERR_CONN;
 80084e0:	f06f 000a 	mvn.w	r0, #10
  msg->err = err;
 80084e4:	7120      	strb	r0, [r4, #4]
  TCPIP_APIMSG_ACK(msg);
 80084e6:	e7b8      	b.n	800845a <lwip_netconn_do_write+0x1e>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 80084e8:	4b03      	ldr	r3, [pc, #12]	@ (80084f8 <lwip_netconn_do_write+0xbc>)
 80084ea:	f240 7224 	movw	r2, #1828	@ 0x724
 80084ee:	4907      	ldr	r1, [pc, #28]	@ (800850c <lwip_netconn_do_write+0xd0>)
 80084f0:	4803      	ldr	r0, [pc, #12]	@ (8008500 <lwip_netconn_do_write+0xc4>)
 80084f2:	f008 ffd1 	bl	8011498 <iprintf>
 80084f6:	e7c5      	b.n	8008484 <lwip_netconn_do_write+0x48>
 80084f8:	0801273c 	.word	0x0801273c
 80084fc:	08012b24 	.word	0x08012b24
 8008500:	0801241c 	.word	0x0801241c
 8008504:	08012b40 	.word	0x08012b40
 8008508:	24006be8 	.word	0x24006be8
 800850c:	08012b48 	.word	0x08012b48

08008510 <lwip_netconn_do_getaddr>:
void
lwip_netconn_do_getaddr(void *m)
{
  struct api_msg *msg = (struct api_msg *)m;

  if (msg->conn->pcb.ip != NULL) {
 8008510:	6803      	ldr	r3, [r0, #0]
 8008512:	685a      	ldr	r2, [r3, #4]
 8008514:	2a00      	cmp	r2, #0
 8008516:	d02e      	beq.n	8008576 <lwip_netconn_do_getaddr+0x66>
    if (msg->msg.ad.local) {
 8008518:	7c01      	ldrb	r1, [r0, #16]
{
 800851a:	b430      	push	{r4, r5}
 800851c:	781b      	ldrb	r3, [r3, #0]
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800851e:	6884      	ldr	r4, [r0, #8]
 8008520:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (msg->msg.ad.local) {
 8008524:	b169      	cbz	r1, 8008542 <lwip_netconn_do_getaddr+0x32>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 8008526:	6811      	ldr	r1, [r2, #0]
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8008528:	2b10      	cmp	r3, #16
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800852a:	6021      	str	r1, [r4, #0]
    msg->err = ERR_OK;
 800852c:	f04f 0100 	mov.w	r1, #0
 8008530:	7101      	strb	r1, [r0, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8008532:	d02b      	beq.n	800858c <lwip_netconn_do_getaddr+0x7c>
 8008534:	2b20      	cmp	r3, #32
 8008536:	d112      	bne.n	800855e <lwip_netconn_do_getaddr+0x4e>
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.ad.local) {
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 8008538:	68c3      	ldr	r3, [r0, #12]
 800853a:	8a52      	ldrh	r2, [r2, #18]
 800853c:	801a      	strh	r2, [r3, #0]
    }
  } else {
    msg->err = ERR_CONN;
  }
  TCPIP_APIMSG_ACK(msg);
}
 800853e:	bc30      	pop	{r4, r5}
 8008540:	4770      	bx	lr
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 8008542:	6855      	ldr	r5, [r2, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8008544:	2b10      	cmp	r3, #16
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 8008546:	6025      	str	r5, [r4, #0]
    msg->err = ERR_OK;
 8008548:	7101      	strb	r1, [r0, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800854a:	d017      	beq.n	800857c <lwip_netconn_do_getaddr+0x6c>
 800854c:	2b20      	cmp	r3, #32
 800854e:	d106      	bne.n	800855e <lwip_netconn_do_getaddr+0x4e>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 8008550:	7c13      	ldrb	r3, [r2, #16]
 8008552:	075b      	lsls	r3, r3, #29
 8008554:	d50b      	bpl.n	800856e <lwip_netconn_do_getaddr+0x5e>
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 8008556:	68c3      	ldr	r3, [r0, #12]
 8008558:	8a92      	ldrh	r2, [r2, #20]
 800855a:	801a      	strh	r2, [r3, #0]
 800855c:	e7ef      	b.n	800853e <lwip_netconn_do_getaddr+0x2e>
        LWIP_ASSERT("invalid netconn_type", 0);
 800855e:	4b0c      	ldr	r3, [pc, #48]	@ (8008590 <lwip_netconn_do_getaddr+0x80>)
 8008560:	f240 727d 	movw	r2, #1917	@ 0x77d
 8008564:	490b      	ldr	r1, [pc, #44]	@ (8008594 <lwip_netconn_do_getaddr+0x84>)
 8008566:	480c      	ldr	r0, [pc, #48]	@ (8008598 <lwip_netconn_do_getaddr+0x88>)
}
 8008568:	bc30      	pop	{r4, r5}
        LWIP_ASSERT("invalid netconn_type", 0);
 800856a:	f008 bf95 	b.w	8011498 <iprintf>
            msg->err = ERR_CONN;
 800856e:	23f5      	movs	r3, #245	@ 0xf5
 8008570:	7103      	strb	r3, [r0, #4]
}
 8008572:	bc30      	pop	{r4, r5}
 8008574:	4770      	bx	lr
            msg->err = ERR_CONN;
 8008576:	23f5      	movs	r3, #245	@ 0xf5
 8008578:	7103      	strb	r3, [r0, #4]
 800857a:	4770      	bx	lr
        if ((msg->msg.ad.local == 0) &&
 800857c:	7d13      	ldrb	r3, [r2, #20]
 800857e:	2b01      	cmp	r3, #1
 8008580:	d9f5      	bls.n	800856e <lwip_netconn_do_getaddr+0x5e>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 8008582:	8b12      	ldrh	r2, [r2, #24]
 8008584:	68c3      	ldr	r3, [r0, #12]
}
 8008586:	bc30      	pop	{r4, r5}
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 8008588:	801a      	strh	r2, [r3, #0]
}
 800858a:	4770      	bx	lr
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 800858c:	8ad2      	ldrh	r2, [r2, #22]
 800858e:	e7f9      	b.n	8008584 <lwip_netconn_do_getaddr+0x74>
 8008590:	0801273c 	.word	0x0801273c
 8008594:	08012b5c 	.word	0x08012b5c
 8008598:	0801241c 	.word	0x0801241c

0800859c <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800859c:	b510      	push	{r4, lr}
 800859e:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg *)m;

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 80085a0:	6800      	ldr	r0, [r0, #0]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 80085a2:	6843      	ldr	r3, [r0, #4]
  enum netconn_state state = msg->conn->state;
 80085a4:	7842      	ldrb	r2, [r0, #1]
  if ((msg->conn->pcb.tcp != NULL) &&
 80085a6:	b123      	cbz	r3, 80085b2 <lwip_netconn_do_close+0x16>
 80085a8:	7803      	ldrb	r3, [r0, #0]
 80085aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80085ae:	2b10      	cmp	r3, #16
 80085b0:	d002      	beq.n	80085b8 <lwip_netconn_do_close+0x1c>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 80085b2:	23f5      	movs	r3, #245	@ 0xf5
 80085b4:	7123      	strb	r3, [r4, #4]
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
  }
  TCPIP_APIMSG_ACK(msg);
}
 80085b6:	bd10      	pop	{r4, pc}
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80085b8:	7a23      	ldrb	r3, [r4, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 80085ba:	2b03      	cmp	r3, #3
 80085bc:	d03b      	beq.n	8008636 <lwip_netconn_do_close+0x9a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80085be:	1e91      	subs	r1, r2, #2
 80085c0:	2901      	cmp	r1, #1
 80085c2:	d9f6      	bls.n	80085b2 <lwip_netconn_do_close+0x16>
    } else if (state == NETCONN_WRITE) {
 80085c4:	2a01      	cmp	r2, #1
 80085c6:	d03a      	beq.n	800863e <lwip_netconn_do_close+0xa2>
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 80085c8:	07db      	lsls	r3, r3, #31
 80085ca:	d43b      	bmi.n	8008644 <lwip_netconn_do_close+0xa8>
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80085cc:	6a03      	ldr	r3, [r0, #32]
 80085ce:	b13b      	cbz	r3, 80085e0 <lwip_netconn_do_close+0x44>
 80085d0:	4b1e      	ldr	r3, [pc, #120]	@ (800864c <lwip_netconn_do_close+0xb0>)
 80085d2:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 80085d6:	491e      	ldr	r1, [pc, #120]	@ (8008650 <lwip_netconn_do_close+0xb4>)
 80085d8:	481e      	ldr	r0, [pc, #120]	@ (8008654 <lwip_netconn_do_close+0xb8>)
 80085da:	f008 ff5d 	bl	8011498 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 80085de:	6820      	ldr	r0, [r4, #0]
 80085e0:	2304      	movs	r3, #4
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80085e2:	2100      	movs	r1, #0
      msg->conn->current_msg = msg;
 80085e4:	6204      	str	r4, [r0, #32]
      msg->conn->state = NETCONN_CLOSE;
 80085e6:	7043      	strb	r3, [r0, #1]
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80085e8:	f7ff f916 	bl	8007818 <lwip_netconn_do_close_internal>
 80085ec:	2800      	cmp	r0, #0
 80085ee:	d0e2      	beq.n	80085b6 <lwip_netconn_do_close+0x1a>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80085f0:	6823      	ldr	r3, [r4, #0]
 80085f2:	785b      	ldrb	r3, [r3, #1]
 80085f4:	2b04      	cmp	r3, #4
 80085f6:	d006      	beq.n	8008606 <lwip_netconn_do_close+0x6a>
 80085f8:	4b14      	ldr	r3, [pc, #80]	@ (800864c <lwip_netconn_do_close+0xb0>)
 80085fa:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 80085fe:	4916      	ldr	r1, [pc, #88]	@ (8008658 <lwip_netconn_do_close+0xbc>)
 8008600:	4814      	ldr	r0, [pc, #80]	@ (8008654 <lwip_netconn_do_close+0xb8>)
 8008602:	f008 ff49 	bl	8011498 <iprintf>
        UNLOCK_TCPIP_CORE();
 8008606:	4815      	ldr	r0, [pc, #84]	@ (800865c <lwip_netconn_do_close+0xc0>)
 8008608:	f008 fd0a 	bl	8011020 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800860c:	6820      	ldr	r0, [r4, #0]
 800860e:	2100      	movs	r1, #0
 8008610:	300c      	adds	r0, #12
 8008612:	f008 fcb5 	bl	8010f80 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8008616:	4811      	ldr	r0, [pc, #68]	@ (800865c <lwip_netconn_do_close+0xc0>)
 8008618:	f008 fcfc 	bl	8011014 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800861c:	6823      	ldr	r3, [r4, #0]
 800861e:	785b      	ldrb	r3, [r3, #1]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d0c8      	beq.n	80085b6 <lwip_netconn_do_close+0x1a>
 8008624:	4b09      	ldr	r3, [pc, #36]	@ (800864c <lwip_netconn_do_close+0xb0>)
 8008626:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 800862a:	490b      	ldr	r1, [pc, #44]	@ (8008658 <lwip_netconn_do_close+0xbc>)
 800862c:	4809      	ldr	r0, [pc, #36]	@ (8008654 <lwip_netconn_do_close+0xb8>)
}
 800862e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8008632:	f008 bf31 	b.w	8011498 <iprintf>
    if (state == NETCONN_CONNECT) {
 8008636:	2a03      	cmp	r2, #3
 8008638:	d0bb      	beq.n	80085b2 <lwip_netconn_do_close+0x16>
    } else if (state == NETCONN_WRITE) {
 800863a:	2a01      	cmp	r2, #1
 800863c:	d102      	bne.n	8008644 <lwip_netconn_do_close+0xa8>
      msg->err = ERR_INPROGRESS;
 800863e:	23fb      	movs	r3, #251	@ 0xfb
 8008640:	7123      	strb	r3, [r4, #4]
}
 8008642:	bd10      	pop	{r4, pc}
        netconn_drain(msg->conn);
 8008644:	f7ff fcc2 	bl	8007fcc <netconn_drain>
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8008648:	6820      	ldr	r0, [r4, #0]
 800864a:	e7bf      	b.n	80085cc <lwip_netconn_do_close+0x30>
 800864c:	0801273c 	.word	0x0801273c
 8008650:	08012b24 	.word	0x08012b24
 8008654:	0801241c 	.word	0x0801241c
 8008658:	08012b40 	.word	0x08012b40
 800865c:	24006be8 	.word	0x24006be8

08008660 <err_to_errno>:
};

int
err_to_errno(err_t err)
{
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 8008660:	f100 0310 	add.w	r3, r0, #16
 8008664:	b2db      	uxtb	r3, r3
 8008666:	2b10      	cmp	r3, #16
 8008668:	d804      	bhi.n	8008674 <err_to_errno+0x14>
    return EIO;
  }
  return err_to_errno_table[-err];
 800866a:	4b03      	ldr	r3, [pc, #12]	@ (8008678 <err_to_errno+0x18>)
 800866c:	4240      	negs	r0, r0
 800866e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8008672:	4770      	bx	lr
    return EIO;
 8008674:	2005      	movs	r0, #5
}
 8008676:	4770      	bx	lr
 8008678:	08012b84 	.word	0x08012b84

0800867c <netbuf_delete>:
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
  if (buf != NULL) {
 800867c:	b170      	cbz	r0, 800869c <netbuf_delete+0x20>
{
 800867e:	b510      	push	{r4, lr}
 8008680:	4604      	mov	r4, r0
    if (buf->p != NULL) {
 8008682:	6800      	ldr	r0, [r0, #0]
 8008684:	b120      	cbz	r0, 8008690 <netbuf_delete+0x14>
      pbuf_free(buf->p);
 8008686:	f002 f87b 	bl	800a780 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800868a:	2300      	movs	r3, #0
 800868c:	e9c4 3300 	strd	r3, r3, [r4]
    }
    memp_free(MEMP_NETBUF, buf);
 8008690:	4621      	mov	r1, r4
 8008692:	2006      	movs	r0, #6
  }
}
 8008694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_NETBUF, buf);
 8008698:	f001 bda2 	b.w	800a1e0 <memp_free>
 800869c:	4770      	bx	lr
 800869e:	bf00      	nop

080086a0 <netbuf_free>:
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 80086a0:	b148      	cbz	r0, 80086b6 <netbuf_free+0x16>
{
 80086a2:	b510      	push	{r4, lr}
 80086a4:	4604      	mov	r4, r0
  if (buf->p != NULL) {
 80086a6:	6800      	ldr	r0, [r0, #0]
 80086a8:	b108      	cbz	r0, 80086ae <netbuf_free+0xe>
    pbuf_free(buf->p);
 80086aa:	f002 f869 	bl	800a780 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 80086ae:	2300      	movs	r3, #0
 80086b0:	e9c4 3300 	strd	r3, r3, [r4]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 80086b4:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 80086b6:	4b03      	ldr	r3, [pc, #12]	@ (80086c4 <netbuf_free+0x24>)
 80086b8:	2281      	movs	r2, #129	@ 0x81
 80086ba:	4903      	ldr	r1, [pc, #12]	@ (80086c8 <netbuf_free+0x28>)
 80086bc:	4803      	ldr	r0, [pc, #12]	@ (80086cc <netbuf_free+0x2c>)
 80086be:	f008 beeb 	b.w	8011498 <iprintf>
 80086c2:	bf00      	nop
 80086c4:	08012bc8 	.word	0x08012bc8
 80086c8:	08012c3c 	.word	0x08012c3c
 80086cc:	0801241c 	.word	0x0801241c

080086d0 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 80086d0:	b570      	push	{r4, r5, r6, lr}
 80086d2:	2500      	movs	r5, #0
 80086d4:	f362 050f 	bfi	r5, r2, #0, #16
 80086d8:	f362 451f 	bfi	r5, r2, #16, #16
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 80086dc:	b1b0      	cbz	r0, 800870c <netbuf_ref+0x3c>
  if (buf->p != NULL) {
 80086de:	4604      	mov	r4, r0
 80086e0:	6800      	ldr	r0, [r0, #0]
 80086e2:	460e      	mov	r6, r1
 80086e4:	b108      	cbz	r0, 80086ea <netbuf_ref+0x1a>
    pbuf_free(buf->p);
 80086e6:	f002 f84b 	bl	800a780 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 80086ea:	2241      	movs	r2, #65	@ 0x41
 80086ec:	2100      	movs	r1, #0
 80086ee:	2036      	movs	r0, #54	@ 0x36
 80086f0:	f002 f8b6 	bl	800a860 <pbuf_alloc>
 80086f4:	4603      	mov	r3, r0
 80086f6:	6020      	str	r0, [r4, #0]
  if (buf->p == NULL) {
 80086f8:	b120      	cbz	r0, 8008704 <netbuf_ref+0x34>
    return ERR_MEM;
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
  buf->p->len = buf->p->tot_len = size;
  buf->ptr = buf->p;
  return ERR_OK;
 80086fa:	2000      	movs	r0, #0
  buf->p->len = buf->p->tot_len = size;
 80086fc:	e9c3 6501 	strd	r6, r5, [r3, #4]
  buf->ptr = buf->p;
 8008700:	6063      	str	r3, [r4, #4]
}
 8008702:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 8008704:	f04f 30ff 	mov.w	r0, #4294967295
    buf->ptr = NULL;
 8008708:	6063      	str	r3, [r4, #4]
}
 800870a:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 800870c:	4b04      	ldr	r3, [pc, #16]	@ (8008720 <netbuf_ref+0x50>)
 800870e:	2299      	movs	r2, #153	@ 0x99
 8008710:	4904      	ldr	r1, [pc, #16]	@ (8008724 <netbuf_ref+0x54>)
 8008712:	4805      	ldr	r0, [pc, #20]	@ (8008728 <netbuf_ref+0x58>)
 8008714:	f008 fec0 	bl	8011498 <iprintf>
 8008718:	f06f 000f 	mvn.w	r0, #15
}
 800871c:	bd70      	pop	{r4, r5, r6, pc}
 800871e:	bf00      	nop
 8008720:	08012bc8 	.word	0x08012bc8
 8008724:	08012c58 	.word	0x08012c58
 8008728:	0801241c 	.word	0x0801241c

0800872c <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 800872c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 8008730:	2400      	movs	r4, #0
 8008732:	4d1b      	ldr	r5, [pc, #108]	@ (80087a0 <alloc_socket+0x74>)
{
 8008734:	4681      	mov	r9, r0
 8008736:	468a      	mov	sl, r1
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
    if (!sockets[i].conn) {
 8008738:	0126      	lsls	r6, r4, #4
    SYS_ARCH_PROTECT(lev);
 800873a:	f008 fc91 	bl	8011060 <sys_arch_protect>
    if (!sockets[i].conn) {
 800873e:	59af      	ldr	r7, [r5, r6]
 8008740:	eb05 1804 	add.w	r8, r5, r4, lsl #4
 8008744:	b14f      	cbz	r7, 800875a <alloc_socket+0x2e>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 8008746:	3401      	adds	r4, #1
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
      sockets[i].errevent   = 0;
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
    }
    SYS_ARCH_UNPROTECT(lev);
 8008748:	f008 fc96 	bl	8011078 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800874c:	2c04      	cmp	r4, #4
 800874e:	d1f3      	bne.n	8008738 <alloc_socket+0xc>
  }
  return -1;
 8008750:	f04f 34ff 	mov.w	r4, #4294967295
}
 8008754:	4620      	mov	r0, r4
 8008756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      sockets[i].conn       = newconn;
 800875a:	f845 9006 	str.w	r9, [r5, r6]
      SYS_ARCH_UNPROTECT(lev);
 800875e:	f008 fc8b 	bl	8011078 <sys_arch_unprotect>
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 8008762:	f898 300e 	ldrb.w	r3, [r8, #14]
      sockets[i].lastdata.pbuf = NULL;
 8008766:	f8c8 7004 	str.w	r7, [r8, #4]
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 800876a:	b98b      	cbnz	r3, 8008790 <alloc_socket+0x64>
      sockets[i].rcvevent   = 0;
 800876c:	4435      	add	r5, r6
 800876e:	2200      	movs	r2, #0
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 8008770:	f00a 0101 	and.w	r1, sl, #1
}
 8008774:	4620      	mov	r0, r4
      sockets[i].rcvevent   = 0;
 8008776:	812a      	strh	r2, [r5, #8]
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 8008778:	f899 3000 	ldrb.w	r3, [r9]
      sockets[i].errevent   = 0;
 800877c:	81aa      	strh	r2, [r5, #12]
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 800877e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008782:	2b10      	cmp	r3, #16
 8008784:	bf18      	it	ne
 8008786:	f041 0101 	orrne.w	r1, r1, #1
 800878a:	8169      	strh	r1, [r5, #10]
}
 800878c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 8008790:	4b04      	ldr	r3, [pc, #16]	@ (80087a4 <alloc_socket+0x78>)
 8008792:	f240 220e 	movw	r2, #526	@ 0x20e
 8008796:	4904      	ldr	r1, [pc, #16]	@ (80087a8 <alloc_socket+0x7c>)
 8008798:	4804      	ldr	r0, [pc, #16]	@ (80087ac <alloc_socket+0x80>)
 800879a:	f008 fe7d 	bl	8011498 <iprintf>
 800879e:	e7e5      	b.n	800876c <alloc_socket+0x40>
 80087a0:	24006ba8 	.word	0x24006ba8
 80087a4:	08012c70 	.word	0x08012c70
 80087a8:	08012ca4 	.word	0x08012ca4
 80087ac:	0801241c 	.word	0x0801241c

080087b0 <lwip_selscan>:
 * @return number of sockets that had events (read/write/exception) (>= 0)
 */
static int
lwip_selscan(int maxfdp1, fd_set *readset_in, fd_set *writeset_in, fd_set *exceptset_in,
             fd_set *readset_out, fd_set *writeset_out, fd_set *exceptset_out)
{
 80087b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FD_ZERO(&lwriteset);
  FD_ZERO(&lexceptset);

  /* Go through each socket in each list to count number of sockets which
     currently match */
  for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 80087b4:	f1b0 0a00 	subs.w	sl, r0, #0
{
 80087b8:	b087      	sub	sp, #28
  for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 80087ba:	f340 80ad 	ble.w	8008918 <lwip_selscan+0x168>
  FD_ZERO(&lexceptset);
 80087be:	f04f 0c00 	mov.w	ip, #0
 80087c2:	4d58      	ldr	r5, [pc, #352]	@ (8008924 <lwip_selscan+0x174>)
  for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 80087c4:	4614      	mov	r4, r2
 80087c6:	460f      	mov	r7, r1
 80087c8:	46a8      	mov	r8, r5
 80087ca:	46e1      	mov	r9, ip
 80087cc:	46e3      	mov	fp, ip
 80087ce:	461d      	mov	r5, r3
 80087d0:	f8cd c014 	str.w	ip, [sp, #20]
  FD_ZERO(&lreadset);
 80087d4:	e9cd cc03 	strd	ip, ip, [sp, #12]
    /* if this FD is not in the set, continue */
    if (!(readset_in && FD_ISSET(i, readset_in)) &&
 80087d8:	2f00      	cmp	r7, #0
 80087da:	d069      	beq.n	80088b0 <lwip_selscan+0x100>
 80087dc:	ea4f 1069 	mov.w	r0, r9, asr #5
 80087e0:	f009 061f 	and.w	r6, r9, #31
 80087e4:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 80087e8:	40f0      	lsrs	r0, r6
 80087ea:	07c3      	lsls	r3, r0, #31
 80087ec:	d560      	bpl.n	80088b0 <lwip_selscan+0x100>
        !(writeset_in && FD_ISSET(i, writeset_in)) &&
        !(exceptset_in && FD_ISSET(i, exceptset_in))) {
      continue;
    }
    /* First get the socket's status (protected)... */
    SYS_ARCH_PROTECT(lev);
 80087ee:	f008 fc37 	bl	8011060 <sys_arch_protect>
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 80087f2:	f1b9 0f03 	cmp.w	r9, #3
    SYS_ARCH_PROTECT(lev);
 80087f6:	4606      	mov	r6, r0
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 80087f8:	f300 8085 	bgt.w	8008906 <lwip_selscan+0x156>
    sock = tryget_socket_unconn_locked(i);
    if (sock != NULL) {
      void *lastdata = sock->lastdata.pbuf;
 80087fc:	f8d8 3004 	ldr.w	r3, [r8, #4]
      s16_t rcvevent = sock->rcvevent;
      u16_t sendevent = sock->sendevent;
      u16_t errevent = sock->errevent;
 8008800:	f8b8 600c 	ldrh.w	r6, [r8, #12]
      void *lastdata = sock->lastdata.pbuf;
 8008804:	9301      	str	r3, [sp, #4]
      s16_t rcvevent = sock->rcvevent;
 8008806:	f9b8 3008 	ldrsh.w	r3, [r8, #8]
 800880a:	9302      	str	r3, [sp, #8]
      u16_t sendevent = sock->sendevent;
 800880c:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8008810:	9300      	str	r3, [sp, #0]
      SYS_ARCH_UNPROTECT(lev);
 8008812:	f008 fc31 	bl	8011078 <sys_arch_unprotect>

      /* ... then examine it: */
      /* See if netconn of this socket is ready for read */
      if (readset_in && FD_ISSET(i, readset_in) && ((lastdata != NULL) || (rcvevent > 0))) {
 8008816:	6838      	ldr	r0, [r7, #0]
 8008818:	fa20 f009 	lsr.w	r0, r0, r9
 800881c:	07c1      	lsls	r1, r0, #31
 800881e:	d505      	bpl.n	800882c <lwip_selscan+0x7c>
 8008820:	9b01      	ldr	r3, [sp, #4]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d13b      	bne.n	800889e <lwip_selscan+0xee>
 8008826:	9b02      	ldr	r3, [sp, #8]
 8008828:	2b00      	cmp	r3, #0
 800882a:	dc38      	bgt.n	800889e <lwip_selscan+0xee>
        FD_SET(i, &lreadset);
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for reading\n", i));
        nready++;
      }
      /* See if netconn of this socket is ready for write */
      if (writeset_in && FD_ISSET(i, writeset_in) && (sendevent != 0)) {
 800882c:	b134      	cbz	r4, 800883c <lwip_selscan+0x8c>
 800882e:	6820      	ldr	r0, [r4, #0]
 8008830:	fa20 f009 	lsr.w	r0, r0, r9
 8008834:	07c2      	lsls	r2, r0, #31
 8008836:	d501      	bpl.n	800883c <lwip_selscan+0x8c>
 8008838:	9b00      	ldr	r3, [sp, #0]
 800883a:	bb3b      	cbnz	r3, 800888c <lwip_selscan+0xdc>
        FD_SET(i, &lwriteset);
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for writing\n", i));
        nready++;
      }
      /* See if netconn of this socket had an error */
      if (exceptset_in && FD_ISSET(i, exceptset_in) && (errevent != 0)) {
 800883c:	b16d      	cbz	r5, 800885a <lwip_selscan+0xaa>
 800883e:	6828      	ldr	r0, [r5, #0]
 8008840:	fa20 f009 	lsr.w	r0, r0, r9
 8008844:	07c3      	lsls	r3, r0, #31
 8008846:	d508      	bpl.n	800885a <lwip_selscan+0xaa>
 8008848:	b13e      	cbz	r6, 800885a <lwip_selscan+0xaa>
        FD_SET(i, &lexceptset);
 800884a:	2001      	movs	r0, #1
 800884c:	9b05      	ldr	r3, [sp, #20]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for exception\n", i));
        nready++;
 800884e:	f10b 0b01 	add.w	fp, fp, #1
        FD_SET(i, &lexceptset);
 8008852:	fa00 f009 	lsl.w	r0, r0, r9
 8008856:	4303      	orrs	r3, r0
 8008858:	9305      	str	r3, [sp, #20]
  for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 800885a:	f109 0901 	add.w	r9, r9, #1
 800885e:	f108 0810 	add.w	r8, r8, #16
 8008862:	45ca      	cmp	sl, r9
 8008864:	d1b8      	bne.n	80087d8 <lwip_selscan+0x28>
 8008866:	f8dd c014 	ldr.w	ip, [sp, #20]
 800886a:	465f      	mov	r7, fp
      /* no a valid open socket */
      return -1;
    }
  }
  /* copy local sets to the ones provided as arguments */
  *readset_out = lreadset;
 800886c:	2300      	movs	r3, #0
 800886e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8008870:	9903      	ldr	r1, [sp, #12]
  *writeset_out = lwriteset;
  *exceptset_out = lexceptset;

  LWIP_ASSERT("nready >= 0", nready >= 0);
  return nready;
}
 8008872:	4638      	mov	r0, r7
  *readset_out = lreadset;
 8008874:	e9c2 1300 	strd	r1, r3, [r2]
  *writeset_out = lwriteset;
 8008878:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800887a:	9904      	ldr	r1, [sp, #16]
 800887c:	e9c2 1300 	strd	r1, r3, [r2]
  *exceptset_out = lexceptset;
 8008880:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008882:	e9c2 c300 	strd	ip, r3, [r2]
}
 8008886:	b007      	add	sp, #28
 8008888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        FD_SET(i, &lwriteset);
 800888c:	2001      	movs	r0, #1
 800888e:	9b04      	ldr	r3, [sp, #16]
        nready++;
 8008890:	f10b 0b01 	add.w	fp, fp, #1
        FD_SET(i, &lwriteset);
 8008894:	fa00 f009 	lsl.w	r0, r0, r9
 8008898:	4303      	orrs	r3, r0
 800889a:	9304      	str	r3, [sp, #16]
        nready++;
 800889c:	e7ce      	b.n	800883c <lwip_selscan+0x8c>
        FD_SET(i, &lreadset);
 800889e:	2001      	movs	r0, #1
 80088a0:	9b03      	ldr	r3, [sp, #12]
        nready++;
 80088a2:	f10b 0b01 	add.w	fp, fp, #1
        FD_SET(i, &lreadset);
 80088a6:	fa00 f009 	lsl.w	r0, r0, r9
 80088aa:	4303      	orrs	r3, r0
 80088ac:	9303      	str	r3, [sp, #12]
        nready++;
 80088ae:	e7bd      	b.n	800882c <lwip_selscan+0x7c>
    if (!(readset_in && FD_ISSET(i, readset_in)) &&
 80088b0:	b144      	cbz	r4, 80088c4 <lwip_selscan+0x114>
        !(writeset_in && FD_ISSET(i, writeset_in)) &&
 80088b2:	ea4f 1069 	mov.w	r0, r9, asr #5
 80088b6:	f009 061f 	and.w	r6, r9, #31
 80088ba:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 80088be:	40f0      	lsrs	r0, r6
 80088c0:	07c6      	lsls	r6, r0, #31
 80088c2:	d40a      	bmi.n	80088da <lwip_selscan+0x12a>
 80088c4:	2d00      	cmp	r5, #0
 80088c6:	d0c8      	beq.n	800885a <lwip_selscan+0xaa>
        !(exceptset_in && FD_ISSET(i, exceptset_in))) {
 80088c8:	ea4f 1069 	mov.w	r0, r9, asr #5
 80088cc:	f009 061f 	and.w	r6, r9, #31
 80088d0:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 80088d4:	40f0      	lsrs	r0, r6
 80088d6:	07c0      	lsls	r0, r0, #31
 80088d8:	d5bf      	bpl.n	800885a <lwip_selscan+0xaa>
    SYS_ARCH_PROTECT(lev);
 80088da:	f008 fbc1 	bl	8011060 <sys_arch_protect>
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 80088de:	f1b9 0f03 	cmp.w	r9, #3
    SYS_ARCH_PROTECT(lev);
 80088e2:	4606      	mov	r6, r0
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 80088e4:	dc0f      	bgt.n	8008906 <lwip_selscan+0x156>
      void *lastdata = sock->lastdata.pbuf;
 80088e6:	f8d8 3004 	ldr.w	r3, [r8, #4]
      u16_t errevent = sock->errevent;
 80088ea:	f8b8 600c 	ldrh.w	r6, [r8, #12]
      void *lastdata = sock->lastdata.pbuf;
 80088ee:	9301      	str	r3, [sp, #4]
      s16_t rcvevent = sock->rcvevent;
 80088f0:	f9b8 3008 	ldrsh.w	r3, [r8, #8]
 80088f4:	9302      	str	r3, [sp, #8]
      u16_t sendevent = sock->sendevent;
 80088f6:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 80088fa:	9300      	str	r3, [sp, #0]
      SYS_ARCH_UNPROTECT(lev);
 80088fc:	f008 fbbc 	bl	8011078 <sys_arch_unprotect>
      if (readset_in && FD_ISSET(i, readset_in) && ((lastdata != NULL) || (rcvevent > 0))) {
 8008900:	2f00      	cmp	r7, #0
 8008902:	d093      	beq.n	800882c <lwip_selscan+0x7c>
 8008904:	e787      	b.n	8008816 <lwip_selscan+0x66>
      return -1;
 8008906:	f04f 37ff 	mov.w	r7, #4294967295
      SYS_ARCH_UNPROTECT(lev);
 800890a:	4630      	mov	r0, r6
 800890c:	f008 fbb4 	bl	8011078 <sys_arch_unprotect>
}
 8008910:	4638      	mov	r0, r7
 8008912:	b007      	add	sp, #28
 8008914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  FD_ZERO(&lexceptset);
 8008918:	f04f 0c00 	mov.w	ip, #0
  int i, nready = 0;
 800891c:	4667      	mov	r7, ip
  FD_ZERO(&lreadset);
 800891e:	e9cd cc03 	strd	ip, ip, [sp, #12]
 8008922:	e7a3      	b.n	800886c <lwip_selscan+0xbc>
 8008924:	24006ba8 	.word	0x24006ba8

08008928 <lwip_unlink_select_cb>:
{
 8008928:	b538      	push	{r3, r4, r5, lr}
 800892a:	4604      	mov	r4, r0
  LWIP_SOCKET_SELECT_PROTECT(lev);
 800892c:	4815      	ldr	r0, [pc, #84]	@ (8008984 <lwip_unlink_select_cb+0x5c>)
 800892e:	f008 fb71 	bl	8011014 <sys_mutex_lock>
  if (select_cb->next != NULL) {
 8008932:	6823      	ldr	r3, [r4, #0]
 8008934:	b10b      	cbz	r3, 800893a <lwip_unlink_select_cb+0x12>
    select_cb->next->prev = select_cb->prev;
 8008936:	6862      	ldr	r2, [r4, #4]
 8008938:	605a      	str	r2, [r3, #4]
  if (select_cb_list == select_cb) {
 800893a:	4d13      	ldr	r5, [pc, #76]	@ (8008988 <lwip_unlink_select_cb+0x60>)
    LWIP_ASSERT("select_cb->prev == NULL", select_cb->prev == NULL);
 800893c:	6862      	ldr	r2, [r4, #4]
  if (select_cb_list == select_cb) {
 800893e:	6829      	ldr	r1, [r5, #0]
 8008940:	42a1      	cmp	r1, r4
 8008942:	d006      	beq.n	8008952 <lwip_unlink_select_cb+0x2a>
    LWIP_ASSERT("select_cb->prev != NULL", select_cb->prev != NULL);
 8008944:	b1a2      	cbz	r2, 8008970 <lwip_unlink_select_cb+0x48>
    select_cb->prev->next = select_cb->next;
 8008946:	6013      	str	r3, [r2, #0]
  LWIP_SOCKET_SELECT_UNPROTECT(lev);
 8008948:	480e      	ldr	r0, [pc, #56]	@ (8008984 <lwip_unlink_select_cb+0x5c>)
}
 800894a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  LWIP_SOCKET_SELECT_UNPROTECT(lev);
 800894e:	f008 bb67 	b.w	8011020 <sys_mutex_unlock>
    LWIP_ASSERT("select_cb->prev == NULL", select_cb->prev == NULL);
 8008952:	b13a      	cbz	r2, 8008964 <lwip_unlink_select_cb+0x3c>
 8008954:	4b0d      	ldr	r3, [pc, #52]	@ (800898c <lwip_unlink_select_cb+0x64>)
 8008956:	f240 720d 	movw	r2, #1805	@ 0x70d
 800895a:	490d      	ldr	r1, [pc, #52]	@ (8008990 <lwip_unlink_select_cb+0x68>)
 800895c:	480d      	ldr	r0, [pc, #52]	@ (8008994 <lwip_unlink_select_cb+0x6c>)
 800895e:	f008 fd9b 	bl	8011498 <iprintf>
    select_cb_list = select_cb->next;
 8008962:	6823      	ldr	r3, [r4, #0]
 8008964:	602b      	str	r3, [r5, #0]
  LWIP_SOCKET_SELECT_UNPROTECT(lev);
 8008966:	4807      	ldr	r0, [pc, #28]	@ (8008984 <lwip_unlink_select_cb+0x5c>)
}
 8008968:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  LWIP_SOCKET_SELECT_UNPROTECT(lev);
 800896c:	f008 bb58 	b.w	8011020 <sys_mutex_unlock>
    LWIP_ASSERT("select_cb->prev != NULL", select_cb->prev != NULL);
 8008970:	4b06      	ldr	r3, [pc, #24]	@ (800898c <lwip_unlink_select_cb+0x64>)
 8008972:	f44f 62e2 	mov.w	r2, #1808	@ 0x710
 8008976:	4908      	ldr	r1, [pc, #32]	@ (8008998 <lwip_unlink_select_cb+0x70>)
 8008978:	4806      	ldr	r0, [pc, #24]	@ (8008994 <lwip_unlink_select_cb+0x6c>)
 800897a:	f008 fd8d 	bl	8011498 <iprintf>
    select_cb->prev->next = select_cb->next;
 800897e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008982:	e7e0      	b.n	8008946 <lwip_unlink_select_cb+0x1e>
 8008984:	24006be8 	.word	0x24006be8
 8008988:	24006ba4 	.word	0x24006ba4
 800898c:	08012c70 	.word	0x08012c70
 8008990:	08012cec 	.word	0x08012cec
 8008994:	0801241c 	.word	0x0801241c
 8008998:	08012d04 	.word	0x08012d04

0800899c <lwip_recv_tcp>:
{
 800899c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089a0:	4699      	mov	r9, r3
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 80089a2:	6803      	ldr	r3, [r0, #0]
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 80089a4:	2a00      	cmp	r2, #0
{
 80089a6:	b083      	sub	sp, #12
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 80089a8:	781b      	ldrb	r3, [r3, #0]
{
 80089aa:	4680      	mov	r8, r0
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 80089ac:	bfac      	ite	ge
 80089ae:	4615      	movge	r5, r2
 80089b0:	f06f 4500 	mvnlt.w	r5, #2147483648	@ 0x80000000
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 80089b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
{
 80089b8:	468a      	mov	sl, r1
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 80089ba:	2b10      	cmp	r3, #16
 80089bc:	d006      	beq.n	80089cc <lwip_recv_tcp+0x30>
 80089be:	4b48      	ldr	r3, [pc, #288]	@ (8008ae0 <lwip_recv_tcp+0x144>)
 80089c0:	f240 329f 	movw	r2, #927	@ 0x39f
 80089c4:	4947      	ldr	r1, [pc, #284]	@ (8008ae4 <lwip_recv_tcp+0x148>)
 80089c6:	4848      	ldr	r0, [pc, #288]	@ (8008ae8 <lwip_recv_tcp+0x14c>)
 80089c8:	f008 fd66 	bl	8011498 <iprintf>
    apiflags |= NETCONN_DONTBLOCK;
 80089cc:	f019 0f08 	tst.w	r9, #8
    if (sock->lastdata.pbuf) {
 80089d0:	f8d8 0004 	ldr.w	r0, [r8, #4]
  u8_t apiflags = NETCONN_NOAUTORCVD;
 80089d4:	f04f 0700 	mov.w	r7, #0
    apiflags |= NETCONN_DONTBLOCK;
 80089d8:	bf0c      	ite	eq
 80089da:	2208      	moveq	r2, #8
 80089dc:	220c      	movne	r2, #12
    if (sock->lastdata.pbuf) {
 80089de:	b370      	cbz	r0, 8008a3e <lwip_recv_tcp+0xa2>
      p = sock->lastdata.pbuf;
 80089e0:	9001      	str	r0, [sp, #4]
    if (recv_left > p->tot_len) {
 80089e2:	8904      	ldrh	r4, [r0, #8]
 80089e4:	42ac      	cmp	r4, r5
 80089e6:	4626      	mov	r6, r4
 80089e8:	db01      	blt.n	80089ee <lwip_recv_tcp+0x52>
      copylen = (u16_t)recv_left;
 80089ea:	b2ac      	uxth	r4, r5
 80089ec:	462e      	mov	r6, r5
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 80089ee:	2300      	movs	r3, #0
 80089f0:	4622      	mov	r2, r4
 80089f2:	eb0a 0107 	add.w	r1, sl, r7
    if (recvd + copylen < recvd) {
 80089f6:	eb07 0b06 	add.w	fp, r7, r6
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 80089fa:	f002 f9a1 	bl	800ad40 <pbuf_copy_partial>
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 80089fe:	42b5      	cmp	r5, r6
 8008a00:	db29      	blt.n	8008a56 <lwip_recv_tcp+0xba>
    if ((flags & MSG_PEEK) == 0) {
 8008a02:	f019 0f01 	tst.w	r9, #1
 8008a06:	d006      	beq.n	8008a16 <lwip_recv_tcp+0x7a>
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 8008a08:	f1bb 0f00 	cmp.w	fp, #0
 8008a0c:	d038      	beq.n	8008a80 <lwip_recv_tcp+0xe4>
}
 8008a0e:	4658      	mov	r0, fp
 8008a10:	b003      	add	sp, #12
 8008a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 8008a16:	9801      	ldr	r0, [sp, #4]
 8008a18:	8903      	ldrh	r3, [r0, #8]
 8008a1a:	42a3      	cmp	r3, r4
 8008a1c:	d333      	bcc.n	8008a86 <lwip_recv_tcp+0xea>
      if (p->tot_len - copylen > 0) {
 8008a1e:	42b3      	cmp	r3, r6
 8008a20:	dd21      	ble.n	8008a66 <lwip_recv_tcp+0xca>
    recv_left -= copylen;
 8008a22:	1bad      	subs	r5, r5, r6
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 8008a24:	4621      	mov	r1, r4
 8008a26:	f002 f81b 	bl	800aa60 <pbuf_free_header>
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 8008a2a:	221c      	movs	r2, #28
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 8008a2c:	2d00      	cmp	r5, #0
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 8008a2e:	f8c8 0004 	str.w	r0, [r8, #4]
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 8008a32:	dd22      	ble.n	8008a7a <lwip_recv_tcp+0xde>
    if (sock->lastdata.pbuf) {
 8008a34:	f8d8 0004 	ldr.w	r0, [r8, #4]
    if (recvd + copylen < recvd) {
 8008a38:	465f      	mov	r7, fp
    if (sock->lastdata.pbuf) {
 8008a3a:	2800      	cmp	r0, #0
 8008a3c:	d1d0      	bne.n	80089e0 <lwip_recv_tcp+0x44>
      err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
 8008a3e:	a901      	add	r1, sp, #4
 8008a40:	f8d8 0000 	ldr.w	r0, [r8]
 8008a44:	f7fe fbce 	bl	80071e4 <netconn_recv_tcp_pbuf_flags>
      if (err != ERR_OK) {
 8008a48:	4604      	mov	r4, r0
 8008a4a:	bb78      	cbnz	r0, 8008aac <lwip_recv_tcp+0x110>
      LWIP_ASSERT("p != NULL", p != NULL);
 8008a4c:	9801      	ldr	r0, [sp, #4]
 8008a4e:	b320      	cbz	r0, 8008a9a <lwip_recv_tcp+0xfe>
      sock->lastdata.pbuf = p;
 8008a50:	f8c8 0004 	str.w	r0, [r8, #4]
 8008a54:	e7c5      	b.n	80089e2 <lwip_recv_tcp+0x46>
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 8008a56:	4b22      	ldr	r3, [pc, #136]	@ (8008ae0 <lwip_recv_tcp+0x144>)
 8008a58:	f240 32dd 	movw	r2, #989	@ 0x3dd
 8008a5c:	4923      	ldr	r1, [pc, #140]	@ (8008aec <lwip_recv_tcp+0x150>)
 8008a5e:	4822      	ldr	r0, [pc, #136]	@ (8008ae8 <lwip_recv_tcp+0x14c>)
 8008a60:	f008 fd1a 	bl	8011498 <iprintf>
 8008a64:	e7cd      	b.n	8008a02 <lwip_recv_tcp+0x66>
        sock->lastdata.pbuf = NULL;
 8008a66:	2300      	movs	r3, #0
    recv_left -= copylen;
 8008a68:	1bad      	subs	r5, r5, r6
        sock->lastdata.pbuf = NULL;
 8008a6a:	f8c8 3004 	str.w	r3, [r8, #4]
        pbuf_free(p);
 8008a6e:	f001 fe87 	bl	800a780 <pbuf_free>
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 8008a72:	2d00      	cmp	r5, #0
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 8008a74:	f04f 021c 	mov.w	r2, #28
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 8008a78:	dcdc      	bgt.n	8008a34 <lwip_recv_tcp+0x98>
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 8008a7a:	f1bb 0f00 	cmp.w	fp, #0
 8008a7e:	d11a      	bne.n	8008ab6 <lwip_recv_tcp+0x11a>
 8008a80:	f04f 0b00 	mov.w	fp, #0
 8008a84:	e7c3      	b.n	8008a0e <lwip_recv_tcp+0x72>
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 8008a86:	4b16      	ldr	r3, [pc, #88]	@ (8008ae0 <lwip_recv_tcp+0x144>)
 8008a88:	f240 32e3 	movw	r2, #995	@ 0x3e3
 8008a8c:	4918      	ldr	r1, [pc, #96]	@ (8008af0 <lwip_recv_tcp+0x154>)
 8008a8e:	4816      	ldr	r0, [pc, #88]	@ (8008ae8 <lwip_recv_tcp+0x14c>)
 8008a90:	f008 fd02 	bl	8011498 <iprintf>
      if (p->tot_len - copylen > 0) {
 8008a94:	9801      	ldr	r0, [sp, #4]
 8008a96:	8903      	ldrh	r3, [r0, #8]
 8008a98:	e7c1      	b.n	8008a1e <lwip_recv_tcp+0x82>
      LWIP_ASSERT("p != NULL", p != NULL);
 8008a9a:	4b11      	ldr	r3, [pc, #68]	@ (8008ae0 <lwip_recv_tcp+0x144>)
 8008a9c:	f240 32c5 	movw	r2, #965	@ 0x3c5
 8008aa0:	4914      	ldr	r1, [pc, #80]	@ (8008af4 <lwip_recv_tcp+0x158>)
 8008aa2:	4811      	ldr	r0, [pc, #68]	@ (8008ae8 <lwip_recv_tcp+0x14c>)
 8008aa4:	f008 fcf8 	bl	8011498 <iprintf>
      sock->lastdata.pbuf = p;
 8008aa8:	9801      	ldr	r0, [sp, #4]
 8008aaa:	e7d1      	b.n	8008a50 <lwip_recv_tcp+0xb4>
        if (recvd > 0) {
 8008aac:	b167      	cbz	r7, 8008ac8 <lwip_recv_tcp+0x12c>
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 8008aae:	f019 0f01 	tst.w	r9, #1
 8008ab2:	46bb      	mov	fp, r7
 8008ab4:	d1ab      	bne.n	8008a0e <lwip_recv_tcp+0x72>
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
 8008ab6:	4659      	mov	r1, fp
 8008ab8:	f8d8 0000 	ldr.w	r0, [r8]
 8008abc:	f7fe fb68 	bl	8007190 <netconn_tcp_recvd>
}
 8008ac0:	4658      	mov	r0, fp
 8008ac2:	b003      	add	sp, #12
 8008ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        sock_set_errno(sock, err_to_errno(err));
 8008ac8:	f7ff fdca 	bl	8008660 <err_to_errno>
 8008acc:	b108      	cbz	r0, 8008ad2 <lwip_recv_tcp+0x136>
 8008ace:	4b0a      	ldr	r3, [pc, #40]	@ (8008af8 <lwip_recv_tcp+0x15c>)
 8008ad0:	6018      	str	r0, [r3, #0]
        if (err == ERR_CLSD) {
 8008ad2:	f114 010f 	adds.w	r1, r4, #15
 8008ad6:	bf18      	it	ne
 8008ad8:	2101      	movne	r1, #1
 8008ada:	f1c1 0b00 	rsb	fp, r1, #0
 8008ade:	e796      	b.n	8008a0e <lwip_recv_tcp+0x72>
 8008ae0:	08012c70 	.word	0x08012c70
 8008ae4:	08012d1c 	.word	0x08012d1c
 8008ae8:	0801241c 	.word	0x0801241c
 8008aec:	08012d40 	.word	0x08012d40
 8008af0:	08012d68 	.word	0x08012d68
 8008af4:	0801282c 	.word	0x0801282c
 8008af8:	24009f98 	.word	0x24009f98

08008afc <lwip_sock_make_addr.constprop.0.isra.0>:
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
 8008afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008afe:	4606      	mov	r6, r0
 8008b00:	b085      	sub	sp, #20
 8008b02:	460f      	mov	r7, r1
 8008b04:	461c      	mov	r4, r3
  LWIP_ASSERT("from != NULL", from != NULL);
 8008b06:	4615      	mov	r5, r2
 8008b08:	b302      	cbz	r2, 8008b4c <lwip_sock_make_addr.constprop.0.isra.0+0x50>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 8008b0a:	b344      	cbz	r4, 8008b5e <lwip_sock_make_addr.constprop.0.isra.0+0x62>
  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 8008b0c:	f44f 7304 	mov.w	r3, #528	@ 0x210
 8008b10:	4638      	mov	r0, r7
 8008b12:	f8ad 3000 	strh.w	r3, [sp]
 8008b16:	f000 ff7d 	bl	8009a14 <lwip_htons>
  if (*fromlen < saddr.sa.sa_len) {
 8008b1a:	6822      	ldr	r2, [r4, #0]
  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	6831      	ldr	r1, [r6, #0]
  } else if (*fromlen > saddr.sa.sa_len) {
 8008b20:	2a10      	cmp	r2, #16
  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 8008b22:	f8ad 0002 	strh.w	r0, [sp, #2]
 8008b26:	9101      	str	r1, [sp, #4]
 8008b28:	e9cd 3302 	strd	r3, r3, [sp, #8]
  } else if (*fromlen > saddr.sa.sa_len) {
 8008b2c:	d805      	bhi.n	8008b3a <lwip_sock_make_addr.constprop.0.isra.0+0x3e>
  MEMCPY(from, &saddr, *fromlen);
 8008b2e:	4669      	mov	r1, sp
 8008b30:	4628      	mov	r0, r5
 8008b32:	f008 fee4 	bl	80118fe <memcpy>
}
 8008b36:	b005      	add	sp, #20
 8008b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *fromlen = saddr.sa.sa_len;
 8008b3a:	2310      	movs	r3, #16
  MEMCPY(from, &saddr, *fromlen);
 8008b3c:	4669      	mov	r1, sp
 8008b3e:	4628      	mov	r0, r5
    *fromlen = saddr.sa.sa_len;
 8008b40:	461a      	mov	r2, r3
 8008b42:	6023      	str	r3, [r4, #0]
  MEMCPY(from, &saddr, *fromlen);
 8008b44:	f008 fedb 	bl	80118fe <memcpy>
}
 8008b48:	b005      	add	sp, #20
 8008b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("from != NULL", from != NULL);
 8008b4c:	4b08      	ldr	r3, [pc, #32]	@ (8008b70 <lwip_sock_make_addr.constprop.0.isra.0+0x74>)
 8008b4e:	f44f 6281 	mov.w	r2, #1032	@ 0x408
 8008b52:	4908      	ldr	r1, [pc, #32]	@ (8008b74 <lwip_sock_make_addr.constprop.0.isra.0+0x78>)
 8008b54:	4808      	ldr	r0, [pc, #32]	@ (8008b78 <lwip_sock_make_addr.constprop.0.isra.0+0x7c>)
 8008b56:	f008 fc9f 	bl	8011498 <iprintf>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 8008b5a:	2c00      	cmp	r4, #0
 8008b5c:	d1d6      	bne.n	8008b0c <lwip_sock_make_addr.constprop.0.isra.0+0x10>
 8008b5e:	4b04      	ldr	r3, [pc, #16]	@ (8008b70 <lwip_sock_make_addr.constprop.0.isra.0+0x74>)
 8008b60:	f240 4209 	movw	r2, #1033	@ 0x409
 8008b64:	4905      	ldr	r1, [pc, #20]	@ (8008b7c <lwip_sock_make_addr.constprop.0.isra.0+0x80>)
 8008b66:	4804      	ldr	r0, [pc, #16]	@ (8008b78 <lwip_sock_make_addr.constprop.0.isra.0+0x7c>)
 8008b68:	f008 fc96 	bl	8011498 <iprintf>
 8008b6c:	e7ce      	b.n	8008b0c <lwip_sock_make_addr.constprop.0.isra.0+0x10>
 8008b6e:	bf00      	nop
 8008b70:	08012c70 	.word	0x08012c70
 8008b74:	08012d78 	.word	0x08012d78
 8008b78:	0801241c 	.word	0x0801241c
 8008b7c:	08012d88 	.word	0x08012d88

08008b80 <lwip_recvfrom_udp_raw.constprop.0>:
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
 8008b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b84:	4699      	mov	r9, r3
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 8008b86:	6893      	ldr	r3, [r2, #8]
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
 8008b88:	b082      	sub	sp, #8
 8008b8a:	4615      	mov	r5, r2
 8008b8c:	4680      	mov	r8, r0
 8008b8e:	460f      	mov	r7, r1
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d050      	beq.n	8008c36 <lwip_recvfrom_udp_raw.constprop.0+0xb6>
  buf = sock->lastdata.netbuf;
 8008b94:	6843      	ldr	r3, [r0, #4]
 8008b96:	9301      	str	r3, [sp, #4]
  if (buf == NULL) {
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d052      	beq.n	8008c42 <lwip_recvfrom_udp_raw.constprop.0+0xc2>
  buflen = buf->p->tot_len;
 8008b9c:	6818      	ldr	r0, [r3, #0]
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 8008b9e:	68eb      	ldr	r3, [r5, #12]
  buflen = buf->p->tot_len;
 8008ba0:	8906      	ldrh	r6, [r0, #8]
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	dd16      	ble.n	8008bd4 <lwip_recvfrom_udp_raw.constprop.0+0x54>
 8008ba6:	b1ae      	cbz	r6, 8008bd4 <lwip_recvfrom_udp_raw.constprop.0+0x54>
 8008ba8:	2400      	movs	r4, #0
  copied = 0;
 8008baa:	4623      	mov	r3, r4
    if (msg->msg_iov[i].iov_len > len_left) {
 8008bac:	68a9      	ldr	r1, [r5, #8]
    u16_t len_left = (u16_t)(buflen - copied);
 8008bae:	eba6 0c03 	sub.w	ip, r6, r3
    if (msg->msg_iov[i].iov_len > len_left) {
 8008bb2:	eb01 02c4 	add.w	r2, r1, r4, lsl #3
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 8008bb6:	f851 1034 	ldr.w	r1, [r1, r4, lsl #3]
    u16_t len_left = (u16_t)(buflen - copied);
 8008bba:	fa1f fc8c 	uxth.w	ip, ip
    if (msg->msg_iov[i].iov_len > len_left) {
 8008bbe:	f8d2 e004 	ldr.w	lr, [r2, #4]
      copylen = (u16_t)msg->msg_iov[i].iov_len;
 8008bc2:	fa1f f28e 	uxth.w	r2, lr
    if (msg->msg_iov[i].iov_len > len_left) {
 8008bc6:	45e6      	cmp	lr, ip
    copied = (u16_t)(copied + copylen);
 8008bc8:	eb02 0e03 	add.w	lr, r2, r3
    if (msg->msg_iov[i].iov_len > len_left) {
 8008bcc:	d914      	bls.n	8008bf8 <lwip_recvfrom_udp_raw.constprop.0+0x78>
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 8008bce:	4662      	mov	r2, ip
 8008bd0:	f002 f8b6 	bl	800ad40 <pbuf_copy_partial>
  if (msg->msg_name && msg->msg_namelen)
 8008bd4:	682a      	ldr	r2, [r5, #0]
 8008bd6:	b10a      	cbz	r2, 8008bdc <lwip_recvfrom_udp_raw.constprop.0+0x5c>
 8008bd8:	686b      	ldr	r3, [r5, #4]
 8008bda:	b9fb      	cbnz	r3, 8008c1c <lwip_recvfrom_udp_raw.constprop.0+0x9c>
  msg->msg_flags = 0;
 8008bdc:	2300      	movs	r3, #0
  if (msg->msg_control) {
 8008bde:	692a      	ldr	r2, [r5, #16]
  msg->msg_flags = 0;
 8008be0:	61ab      	str	r3, [r5, #24]
  if (msg->msg_control) {
 8008be2:	b102      	cbz	r2, 8008be6 <lwip_recvfrom_udp_raw.constprop.0+0x66>
      msg->msg_controllen = 0;
 8008be4:	616b      	str	r3, [r5, #20]
  if ((flags & MSG_PEEK) == 0) {
 8008be6:	f017 0701 	ands.w	r7, r7, #1
 8008bea:	d01e      	beq.n	8008c2a <lwip_recvfrom_udp_raw.constprop.0+0xaa>
  return ERR_OK;
 8008bec:	2000      	movs	r0, #0
    *datagram_len = buflen;
 8008bee:	f8a9 6000 	strh.w	r6, [r9]
}
 8008bf2:	b002      	add	sp, #8
 8008bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    copied = (u16_t)(copied + copylen);
 8008bf8:	fa1f fa8e 	uxth.w	sl, lr
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 8008bfc:	3401      	adds	r4, #1
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 8008bfe:	f002 f89f 	bl	800ad40 <pbuf_copy_partial>
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 8008c02:	68e9      	ldr	r1, [r5, #12]
 8008c04:	4556      	cmp	r6, sl
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 8008c06:	4653      	mov	r3, sl
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 8008c08:	bf94      	ite	ls
 8008c0a:	2200      	movls	r2, #0
 8008c0c:	2201      	movhi	r2, #1
 8008c0e:	428c      	cmp	r4, r1
 8008c10:	dae0      	bge.n	8008bd4 <lwip_recvfrom_udp_raw.constprop.0+0x54>
 8008c12:	2a00      	cmp	r2, #0
 8008c14:	d0de      	beq.n	8008bd4 <lwip_recvfrom_udp_raw.constprop.0+0x54>
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 8008c16:	9a01      	ldr	r2, [sp, #4]
 8008c18:	6810      	ldr	r0, [r2, #0]
 8008c1a:	e7c7      	b.n	8008bac <lwip_recvfrom_udp_raw.constprop.0+0x2c>
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 8008c1c:	9801      	ldr	r0, [sp, #4]
 8008c1e:	1d2b      	adds	r3, r5, #4
 8008c20:	8981      	ldrh	r1, [r0, #12]
 8008c22:	3008      	adds	r0, #8
 8008c24:	f7ff ff6a 	bl	8008afc <lwip_sock_make_addr.constprop.0.isra.0>
 8008c28:	e7d8      	b.n	8008bdc <lwip_recvfrom_udp_raw.constprop.0+0x5c>
    netbuf_delete(buf);
 8008c2a:	9801      	ldr	r0, [sp, #4]
    sock->lastdata.netbuf = NULL;
 8008c2c:	f8c8 7004 	str.w	r7, [r8, #4]
    netbuf_delete(buf);
 8008c30:	f7ff fd24 	bl	800867c <netbuf_delete>
  if (datagram_len) {
 8008c34:	e7da      	b.n	8008bec <lwip_recvfrom_udp_raw.constprop.0+0x6c>
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 8008c36:	68d3      	ldr	r3, [r2, #12]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	dc1d      	bgt.n	8008c78 <lwip_recvfrom_udp_raw.constprop.0+0xf8>
  buf = sock->lastdata.netbuf;
 8008c3c:	6843      	ldr	r3, [r0, #4]
 8008c3e:	9301      	str	r3, [sp, #4]
  if (buf == NULL) {
 8008c40:	b973      	cbnz	r3, 8008c60 <lwip_recvfrom_udp_raw.constprop.0+0xe0>
  if (flags & MSG_DONTWAIT) {
 8008c42:	f3c7 02c0 	ubfx	r2, r7, #3, #1
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 8008c46:	a901      	add	r1, sp, #4
 8008c48:	f8d8 0000 	ldr.w	r0, [r8]
  if (flags & MSG_DONTWAIT) {
 8008c4c:	0092      	lsls	r2, r2, #2
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 8008c4e:	f7fe fae5 	bl	800721c <netconn_recv_udp_raw_netbuf_flags>
    if (err != ERR_OK) {
 8008c52:	2800      	cmp	r0, #0
 8008c54:	d1cd      	bne.n	8008bf2 <lwip_recvfrom_udp_raw.constprop.0+0x72>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8008c56:	9b01      	ldr	r3, [sp, #4]
 8008c58:	b12b      	cbz	r3, 8008c66 <lwip_recvfrom_udp_raw.constprop.0+0xe6>
    sock->lastdata.netbuf = buf;
 8008c5a:	f8c8 3004 	str.w	r3, [r8, #4]
 8008c5e:	e79d      	b.n	8008b9c <lwip_recvfrom_udp_raw.constprop.0+0x1c>
  buflen = buf->p->tot_len;
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	891e      	ldrh	r6, [r3, #8]
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 8008c64:	e7b6      	b.n	8008bd4 <lwip_recvfrom_udp_raw.constprop.0+0x54>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8008c66:	4b09      	ldr	r3, [pc, #36]	@ (8008c8c <lwip_recvfrom_udp_raw.constprop.0+0x10c>)
 8008c68:	f240 425e 	movw	r2, #1118	@ 0x45e
 8008c6c:	4908      	ldr	r1, [pc, #32]	@ (8008c90 <lwip_recvfrom_udp_raw.constprop.0+0x110>)
 8008c6e:	4809      	ldr	r0, [pc, #36]	@ (8008c94 <lwip_recvfrom_udp_raw.constprop.0+0x114>)
 8008c70:	f008 fc12 	bl	8011498 <iprintf>
    sock->lastdata.netbuf = buf;
 8008c74:	9b01      	ldr	r3, [sp, #4]
 8008c76:	e7f0      	b.n	8008c5a <lwip_recvfrom_udp_raw.constprop.0+0xda>
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 8008c78:	4b04      	ldr	r3, [pc, #16]	@ (8008c8c <lwip_recvfrom_udp_raw.constprop.0+0x10c>)
 8008c7a:	f240 4249 	movw	r2, #1097	@ 0x449
 8008c7e:	4906      	ldr	r1, [pc, #24]	@ (8008c98 <lwip_recvfrom_udp_raw.constprop.0+0x118>)
 8008c80:	4804      	ldr	r0, [pc, #16]	@ (8008c94 <lwip_recvfrom_udp_raw.constprop.0+0x114>)
 8008c82:	f008 fc09 	bl	8011498 <iprintf>
 8008c86:	f06f 000f 	mvn.w	r0, #15
 8008c8a:	e7b2      	b.n	8008bf2 <lwip_recvfrom_udp_raw.constprop.0+0x72>
 8008c8c:	08012c70 	.word	0x08012c70
 8008c90:	08012508 	.word	0x08012508
 8008c94:	0801241c 	.word	0x0801241c
 8008c98:	08012d98 	.word	0x08012d98

08008c9c <event_callback>:
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 8008c9c:	2800      	cmp	r0, #0
 8008c9e:	f000 80b9 	beq.w	8008e14 <event_callback+0x178>
{
 8008ca2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    s = conn->socket;
 8008ca6:	6984      	ldr	r4, [r0, #24]
 8008ca8:	4605      	mov	r5, r0
 8008caa:	460f      	mov	r7, r1
    if (s < 0) {
 8008cac:	2c00      	cmp	r4, #0
 8008cae:	db17      	blt.n	8008ce0 <event_callback+0x44>
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8008cb0:	2c03      	cmp	r4, #3
 8008cb2:	dc10      	bgt.n	8008cd6 <event_callback+0x3a>
    if (sock->conn) {
 8008cb4:	4d60      	ldr	r5, [pc, #384]	@ (8008e38 <event_callback+0x19c>)
 8008cb6:	ea4f 1804 	mov.w	r8, r4, lsl #4
 8008cba:	f855 3008 	ldr.w	r3, [r5, r8]
 8008cbe:	b153      	cbz	r3, 8008cd6 <event_callback+0x3a>
  } else {
    return;
  }

  check_waiters = 1;
  SYS_ARCH_PROTECT(lev);
 8008cc0:	f008 f9ce 	bl	8011060 <sys_arch_protect>
 8008cc4:	4606      	mov	r6, r0
  /* Set event as required */
  switch (evt) {
 8008cc6:	2f04      	cmp	r7, #4
 8008cc8:	f200 80a8 	bhi.w	8008e1c <event_callback+0x180>
 8008ccc:	e8df f007 	tbb	[pc, r7]
 8008cd0:	4f57676c 	.word	0x4f57676c
 8008cd4:	11          	.byte	0x11
 8008cd5:	00          	.byte	0x00
    set_errno(EBADF);
 8008cd6:	4b59      	ldr	r3, [pc, #356]	@ (8008e3c <event_callback+0x1a0>)
 8008cd8:	2209      	movs	r2, #9
 8008cda:	601a      	str	r2, [r3, #0]
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
  } else {
    SYS_ARCH_UNPROTECT(lev);
  }
  done_socket(sock);
}
 8008cdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      SYS_ARCH_PROTECT(lev);
 8008ce0:	f008 f9be 	bl	8011060 <sys_arch_protect>
      if (conn->socket < 0) {
 8008ce4:	69ac      	ldr	r4, [r5, #24]
      SYS_ARCH_PROTECT(lev);
 8008ce6:	4603      	mov	r3, r0
      if (conn->socket < 0) {
 8008ce8:	2c00      	cmp	r4, #0
 8008cea:	db6c      	blt.n	8008dc6 <event_callback+0x12a>
      SYS_ARCH_UNPROTECT(lev);
 8008cec:	f008 f9c4 	bl	8011078 <sys_arch_unprotect>
 8008cf0:	e7de      	b.n	8008cb0 <event_callback+0x14>
      sock->errevent = 1;
 8008cf2:	4445      	add	r5, r8
 8008cf4:	f04f 0801 	mov.w	r8, #1
  if (sock->select_waiting && check_waiters) {
 8008cf8:	7bab      	ldrb	r3, [r5, #14]
      sock->errevent = 1;
 8008cfa:	f8a5 800c 	strh.w	r8, [r5, #12]
  if (sock->select_waiting && check_waiters) {
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d038      	beq.n	8008d74 <event_callback+0xd8>
    has_recvevent = sock->rcvevent > 0;
 8008d02:	f9b5 7008 	ldrsh.w	r7, [r5, #8]
    has_sendevent = sock->sendevent != 0;
 8008d06:	f8b5 900a 	ldrh.w	r9, [r5, #10]
    SYS_ARCH_UNPROTECT(lev);
 8008d0a:	4630      	mov	r0, r6
 8008d0c:	f008 f9b4 	bl	8011078 <sys_arch_unprotect>
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 8008d10:	4b4b      	ldr	r3, [pc, #300]	@ (8008e40 <event_callback+0x1a4>)
 8008d12:	681d      	ldr	r5, [r3, #0]
 8008d14:	2d00      	cmp	r5, #0
 8008d16:	d0e1      	beq.n	8008cdc <event_callback+0x40>
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
        scb->sem_signalled = 1;
 8008d18:	2601      	movs	r6, #1
    if (scb->sem_signalled == 0) {
 8008d1a:	69eb      	ldr	r3, [r5, #28]
 8008d1c:	bb1b      	cbnz	r3, 8008d66 <event_callback+0xca>
      if (scb->poll_fds != NULL) {
 8008d1e:	6969      	ldr	r1, [r5, #20]
 8008d20:	2900      	cmp	r1, #0
 8008d22:	d058      	beq.n	8008dd6 <event_callback+0x13a>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 8008d24:	69a8      	ldr	r0, [r5, #24]
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 8008d26:	b1f0      	cbz	r0, 8008d66 <event_callback+0xca>
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 8008d28:	f101 0c04 	add.w	ip, r1, #4
 8008d2c:	e002      	b.n	8008d34 <event_callback+0x98>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 8008d2e:	3301      	adds	r3, #1
 8008d30:	4298      	cmp	r0, r3
 8008d32:	d018      	beq.n	8008d66 <event_callback+0xca>
    if (pollfd->fd == fd) {
 8008d34:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 8008d38:	4294      	cmp	r4, r2
 8008d3a:	d1f8      	bne.n	8008d2e <event_callback+0x92>
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 8008d3c:	2f00      	cmp	r7, #0
 8008d3e:	dd03      	ble.n	8008d48 <event_callback+0xac>
 8008d40:	f83c 2033 	ldrh.w	r2, [ip, r3, lsl #3]
 8008d44:	07d2      	lsls	r2, r2, #31
 8008d46:	d409      	bmi.n	8008d5c <event_callback+0xc0>
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 8008d48:	f1b9 0f00 	cmp.w	r9, #0
 8008d4c:	d003      	beq.n	8008d56 <event_callback+0xba>
 8008d4e:	f83c 2033 	ldrh.w	r2, [ip, r3, lsl #3]
 8008d52:	0792      	lsls	r2, r2, #30
 8008d54:	d402      	bmi.n	8008d5c <event_callback+0xc0>
      if (has_errevent) {
 8008d56:	f1b8 0f00 	cmp.w	r8, #0
 8008d5a:	d0e8      	beq.n	8008d2e <event_callback+0x92>
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 8008d5c:	f105 0020 	add.w	r0, r5, #32
        scb->sem_signalled = 1;
 8008d60:	61ee      	str	r6, [r5, #28]
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 8008d62:	f008 f929 	bl	8010fb8 <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 8008d66:	682d      	ldr	r5, [r5, #0]
 8008d68:	2d00      	cmp	r5, #0
 8008d6a:	d1d6      	bne.n	8008d1a <event_callback+0x7e>
 8008d6c:	e7b6      	b.n	8008cdc <event_callback+0x40>
      sock->sendevent = 0;
 8008d6e:	4445      	add	r5, r8
 8008d70:	2300      	movs	r3, #0
 8008d72:	816b      	strh	r3, [r5, #10]
    SYS_ARCH_UNPROTECT(lev);
 8008d74:	4630      	mov	r0, r6
}
 8008d76:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    SYS_ARCH_UNPROTECT(lev);
 8008d7a:	f008 b97d 	b.w	8011078 <sys_arch_unprotect>
      if (sock->sendevent) {
 8008d7e:	4445      	add	r5, r8
 8008d80:	896b      	ldrh	r3, [r5, #10]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d147      	bne.n	8008e16 <event_callback+0x17a>
      sock->sendevent = 1;
 8008d86:	f04f 0901 	mov.w	r9, #1
  if (sock->select_waiting && check_waiters) {
 8008d8a:	7bab      	ldrb	r3, [r5, #14]
      sock->sendevent = 1;
 8008d8c:	f8a5 900a 	strh.w	r9, [r5, #10]
  if (sock->select_waiting && check_waiters) {
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d0ef      	beq.n	8008d74 <event_callback+0xd8>
    has_recvevent = sock->rcvevent > 0;
 8008d94:	f9b5 7008 	ldrsh.w	r7, [r5, #8]
    has_errevent = sock->errevent != 0;
 8008d98:	f8b5 800c 	ldrh.w	r8, [r5, #12]
 8008d9c:	e7b5      	b.n	8008d0a <event_callback+0x6e>
      sock->rcvevent--;
 8008d9e:	4445      	add	r5, r8
 8008da0:	892b      	ldrh	r3, [r5, #8]
 8008da2:	3b01      	subs	r3, #1
 8008da4:	812b      	strh	r3, [r5, #8]
  if (sock->select_waiting && check_waiters) {
 8008da6:	e7e5      	b.n	8008d74 <event_callback+0xd8>
      sock->rcvevent++;
 8008da8:	4445      	add	r5, r8
 8008daa:	892f      	ldrh	r7, [r5, #8]
 8008dac:	3701      	adds	r7, #1
 8008dae:	b23f      	sxth	r7, r7
      if (sock->rcvevent > 1) {
 8008db0:	2f01      	cmp	r7, #1
      sock->rcvevent++;
 8008db2:	812f      	strh	r7, [r5, #8]
      if (sock->rcvevent > 1) {
 8008db4:	dcde      	bgt.n	8008d74 <event_callback+0xd8>
  if (sock->select_waiting && check_waiters) {
 8008db6:	7bab      	ldrb	r3, [r5, #14]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d0db      	beq.n	8008d74 <event_callback+0xd8>
    has_sendevent = sock->sendevent != 0;
 8008dbc:	f8b5 900a 	ldrh.w	r9, [r5, #10]
    has_errevent = sock->errevent != 0;
 8008dc0:	f8b5 800c 	ldrh.w	r8, [r5, #12]
 8008dc4:	e7a1      	b.n	8008d0a <event_callback+0x6e>
        if (evt == NETCONN_EVT_RCVPLUS) {
 8008dc6:	b90f      	cbnz	r7, 8008dcc <event_callback+0x130>
          conn->socket--;
 8008dc8:	3c01      	subs	r4, #1
 8008dca:	61ac      	str	r4, [r5, #24]
        SYS_ARCH_UNPROTECT(lev);
 8008dcc:	4618      	mov	r0, r3
}
 8008dce:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        SYS_ARCH_UNPROTECT(lev);
 8008dd2:	f008 b951 	b.w	8011078 <sys_arch_unprotect>
        if (has_recvevent) {
 8008dd6:	2f00      	cmp	r7, #0
 8008dd8:	dd06      	ble.n	8008de8 <event_callback+0x14c>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 8008dda:	68ab      	ldr	r3, [r5, #8]
 8008ddc:	b123      	cbz	r3, 8008de8 <event_callback+0x14c>
 8008dde:	681a      	ldr	r2, [r3, #0]
 8008de0:	2301      	movs	r3, #1
 8008de2:	40a3      	lsls	r3, r4
 8008de4:	4213      	tst	r3, r2
 8008de6:	d1b9      	bne.n	8008d5c <event_callback+0xc0>
        if (has_sendevent) {
 8008de8:	f1b9 0f00 	cmp.w	r9, #0
 8008dec:	d006      	beq.n	8008dfc <event_callback+0x160>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 8008dee:	68eb      	ldr	r3, [r5, #12]
 8008df0:	b123      	cbz	r3, 8008dfc <event_callback+0x160>
 8008df2:	681a      	ldr	r2, [r3, #0]
 8008df4:	2301      	movs	r3, #1
 8008df6:	40a3      	lsls	r3, r4
 8008df8:	4213      	tst	r3, r2
 8008dfa:	d1af      	bne.n	8008d5c <event_callback+0xc0>
        if (has_errevent) {
 8008dfc:	f1b8 0f00 	cmp.w	r8, #0
 8008e00:	d0b1      	beq.n	8008d66 <event_callback+0xca>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 8008e02:	692b      	ldr	r3, [r5, #16]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d0ae      	beq.n	8008d66 <event_callback+0xca>
 8008e08:	681a      	ldr	r2, [r3, #0]
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	40a3      	lsls	r3, r4
 8008e0e:	4213      	tst	r3, r2
 8008e10:	d0a9      	beq.n	8008d66 <event_callback+0xca>
 8008e12:	e7a3      	b.n	8008d5c <event_callback+0xc0>
 8008e14:	4770      	bx	lr
      sock->sendevent = 1;
 8008e16:	2301      	movs	r3, #1
 8008e18:	816b      	strh	r3, [r5, #10]
  if (sock->select_waiting && check_waiters) {
 8008e1a:	e7ab      	b.n	8008d74 <event_callback+0xd8>
 8008e1c:	4445      	add	r5, r8
      LWIP_ASSERT("unknown event", 0);
 8008e1e:	4b09      	ldr	r3, [pc, #36]	@ (8008e44 <event_callback+0x1a8>)
 8008e20:	f44f 621f 	mov.w	r2, #2544	@ 0x9f0
 8008e24:	4908      	ldr	r1, [pc, #32]	@ (8008e48 <event_callback+0x1ac>)
 8008e26:	4809      	ldr	r0, [pc, #36]	@ (8008e4c <event_callback+0x1b0>)
 8008e28:	f008 fb36 	bl	8011498 <iprintf>
  if (sock->select_waiting && check_waiters) {
 8008e2c:	7bab      	ldrb	r3, [r5, #14]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d0a0      	beq.n	8008d74 <event_callback+0xd8>
    has_recvevent = sock->rcvevent > 0;
 8008e32:	f9b5 7008 	ldrsh.w	r7, [r5, #8]
 8008e36:	e7c1      	b.n	8008dbc <event_callback+0x120>
 8008e38:	24006ba8 	.word	0x24006ba8
 8008e3c:	24009f98 	.word	0x24009f98
 8008e40:	24006ba4 	.word	0x24006ba4
 8008e44:	08012c70 	.word	0x08012c70
 8008e48:	08012dc4 	.word	0x08012dc4
 8008e4c:	0801241c 	.word	0x0801241c

08008e50 <lwip_accept>:
{
 8008e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t port = 0;
 8008e54:	2300      	movs	r3, #0
{
 8008e56:	b088      	sub	sp, #32
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8008e58:	2803      	cmp	r0, #3
  u16_t port = 0;
 8008e5a:	f8ad 3006 	strh.w	r3, [sp, #6]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8008e5e:	d867      	bhi.n	8008f30 <lwip_accept+0xe0>
    if (sock->conn) {
 8008e60:	4f58      	ldr	r7, [pc, #352]	@ (8008fc4 <lwip_accept+0x174>)
 8008e62:	0104      	lsls	r4, r0, #4
 8008e64:	5938      	ldr	r0, [r7, r4]
 8008e66:	2800      	cmp	r0, #0
 8008e68:	d062      	beq.n	8008f30 <lwip_accept+0xe0>
  err = netconn_accept(sock->conn, &newconn);
 8008e6a:	460d      	mov	r5, r1
 8008e6c:	a902      	add	r1, sp, #8
 8008e6e:	4616      	mov	r6, r2
 8008e70:	f7fe f928 	bl	80070c4 <netconn_accept>
  if (err != ERR_OK) {
 8008e74:	4603      	mov	r3, r0
 8008e76:	2800      	cmp	r0, #0
 8008e78:	f040 808d 	bne.w	8008f96 <lwip_accept+0x146>
  LWIP_ASSERT("newconn != NULL", newconn != NULL);
 8008e7c:	9802      	ldr	r0, [sp, #8]
 8008e7e:	2800      	cmp	r0, #0
 8008e80:	d05c      	beq.n	8008f3c <lwip_accept+0xec>
  newsock = alloc_socket(newconn, 1);
 8008e82:	2101      	movs	r1, #1
 8008e84:	f7ff fc52 	bl	800872c <alloc_socket>
  if (newsock == -1) {
 8008e88:	f1b0 3fff 	cmp.w	r0, #4294967295
  newsock = alloc_socket(newconn, 1);
 8008e8c:	4680      	mov	r8, r0
  if (newsock == -1) {
 8008e8e:	f000 8092 	beq.w	8008fb6 <lwip_accept+0x166>
  LWIP_ASSERT("invalid socket index", (newsock >= LWIP_SOCKET_OFFSET) && (newsock < NUM_SOCKETS + LWIP_SOCKET_OFFSET));
 8008e92:	2803      	cmp	r0, #3
 8008e94:	d844      	bhi.n	8008f20 <lwip_accept+0xd0>
  SYS_ARCH_PROTECT(lev);
 8008e96:	f008 f8e3 	bl	8011060 <sys_arch_protect>
  recvevent = (s16_t)(-1 - newconn->socket);
 8008e9a:	9b02      	ldr	r3, [sp, #8]
 8008e9c:	699c      	ldr	r4, [r3, #24]
  newconn->socket = newsock;
 8008e9e:	f8c3 8018 	str.w	r8, [r3, #24]
  SYS_ARCH_UNPROTECT(lev);
 8008ea2:	f008 f8e9 	bl	8011078 <sys_arch_unprotect>
  if (newconn->callback) {
 8008ea6:	9b02      	ldr	r3, [sp, #8]
 8008ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008eaa:	b18b      	cbz	r3, 8008ed0 <lwip_accept+0x80>
  recvevent = (s16_t)(-1 - newconn->socket);
 8008eac:	43e4      	mvns	r4, r4
    LOCK_TCPIP_CORE();
 8008eae:	4846      	ldr	r0, [pc, #280]	@ (8008fc8 <lwip_accept+0x178>)
 8008eb0:	f008 f8b0 	bl	8011014 <sys_mutex_lock>
  recvevent = (s16_t)(-1 - newconn->socket);
 8008eb4:	b224      	sxth	r4, r4
    while (recvevent > 0) {
 8008eb6:	2c00      	cmp	r4, #0
 8008eb8:	dd07      	ble.n	8008eca <lwip_accept+0x7a>
      newconn->callback(newconn, NETCONN_EVT_RCVPLUS, 0);
 8008eba:	9802      	ldr	r0, [sp, #8]
 8008ebc:	2200      	movs	r2, #0
      recvevent--;
 8008ebe:	3c01      	subs	r4, #1
      newconn->callback(newconn, NETCONN_EVT_RCVPLUS, 0);
 8008ec0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8008ec2:	4611      	mov	r1, r2
 8008ec4:	4798      	blx	r3
    while (recvevent > 0) {
 8008ec6:	2c00      	cmp	r4, #0
 8008ec8:	d1f7      	bne.n	8008eba <lwip_accept+0x6a>
    UNLOCK_TCPIP_CORE();
 8008eca:	483f      	ldr	r0, [pc, #252]	@ (8008fc8 <lwip_accept+0x178>)
 8008ecc:	f008 f8a8 	bl	8011020 <sys_mutex_unlock>
  if ((addr != NULL) && (addrlen != NULL)) {
 8008ed0:	b315      	cbz	r5, 8008f18 <lwip_accept+0xc8>
 8008ed2:	b30e      	cbz	r6, 8008f18 <lwip_accept+0xc8>
    err = netconn_peer(newconn, &naddr, &port);
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	f10d 0206 	add.w	r2, sp, #6
 8008eda:	a903      	add	r1, sp, #12
 8008edc:	9802      	ldr	r0, [sp, #8]
 8008ede:	f7fe f863 	bl	8006fa8 <netconn_getaddr>
    if (err != ERR_OK) {
 8008ee2:	4604      	mov	r4, r0
 8008ee4:	2800      	cmp	r0, #0
 8008ee6:	d132      	bne.n	8008f4e <lwip_accept+0xfe>
    IPADDR_PORT_TO_SOCKADDR(&tempaddr, &naddr, port);
 8008ee8:	f44f 7304 	mov.w	r3, #528	@ 0x210
 8008eec:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8008ef0:	f8ad 3010 	strh.w	r3, [sp, #16]
 8008ef4:	f000 fd8e 	bl	8009a14 <lwip_htons>
    if (*addrlen > tempaddr.sa.sa_len) {
 8008ef8:	6832      	ldr	r2, [r6, #0]
    IPADDR_PORT_TO_SOCKADDR(&tempaddr, &naddr, port);
 8008efa:	9b03      	ldr	r3, [sp, #12]
    if (*addrlen > tempaddr.sa.sa_len) {
 8008efc:	2a10      	cmp	r2, #16
    IPADDR_PORT_TO_SOCKADDR(&tempaddr, &naddr, port);
 8008efe:	f8ad 0012 	strh.w	r0, [sp, #18]
 8008f02:	9305      	str	r3, [sp, #20]
 8008f04:	e9cd 4406 	strd	r4, r4, [sp, #24]
    if (*addrlen > tempaddr.sa.sa_len) {
 8008f08:	d902      	bls.n	8008f10 <lwip_accept+0xc0>
      *addrlen = tempaddr.sa.sa_len;
 8008f0a:	2310      	movs	r3, #16
 8008f0c:	461a      	mov	r2, r3
 8008f0e:	6033      	str	r3, [r6, #0]
    MEMCPY(addr, &tempaddr, *addrlen);
 8008f10:	a904      	add	r1, sp, #16
 8008f12:	4628      	mov	r0, r5
 8008f14:	f008 fcf3 	bl	80118fe <memcpy>
}
 8008f18:	4640      	mov	r0, r8
 8008f1a:	b008      	add	sp, #32
 8008f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("invalid socket index", (newsock >= LWIP_SOCKET_OFFSET) && (newsock < NUM_SOCKETS + LWIP_SOCKET_OFFSET));
 8008f20:	4b2a      	ldr	r3, [pc, #168]	@ (8008fcc <lwip_accept+0x17c>)
 8008f22:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8008f26:	492a      	ldr	r1, [pc, #168]	@ (8008fd0 <lwip_accept+0x180>)
 8008f28:	482a      	ldr	r0, [pc, #168]	@ (8008fd4 <lwip_accept+0x184>)
 8008f2a:	f008 fab5 	bl	8011498 <iprintf>
 8008f2e:	e7b2      	b.n	8008e96 <lwip_accept+0x46>
    set_errno(EBADF);
 8008f30:	4b29      	ldr	r3, [pc, #164]	@ (8008fd8 <lwip_accept+0x188>)
 8008f32:	2209      	movs	r2, #9
 8008f34:	601a      	str	r2, [r3, #0]
    return -1;
 8008f36:	f04f 38ff 	mov.w	r8, #4294967295
 8008f3a:	e7ed      	b.n	8008f18 <lwip_accept+0xc8>
  LWIP_ASSERT("newconn != NULL", newconn != NULL);
 8008f3c:	4b23      	ldr	r3, [pc, #140]	@ (8008fcc <lwip_accept+0x17c>)
 8008f3e:	f240 228b 	movw	r2, #651	@ 0x28b
 8008f42:	4926      	ldr	r1, [pc, #152]	@ (8008fdc <lwip_accept+0x18c>)
 8008f44:	4823      	ldr	r0, [pc, #140]	@ (8008fd4 <lwip_accept+0x184>)
 8008f46:	f008 faa7 	bl	8011498 <iprintf>
  newsock = alloc_socket(newconn, 1);
 8008f4a:	9802      	ldr	r0, [sp, #8]
 8008f4c:	e799      	b.n	8008e82 <lwip_accept+0x32>
      netconn_delete(newconn);
 8008f4e:	9802      	ldr	r0, [sp, #8]
  *lastdata = sock->lastdata;
 8008f50:	ea4f 1808 	mov.w	r8, r8, lsl #4
      netconn_delete(newconn);
 8008f54:	f7fe f808 	bl	8006f68 <netconn_delete>
  SYS_ARCH_PROTECT(lev);
 8008f58:	f008 f882 	bl	8011060 <sys_arch_protect>
  *lastdata = sock->lastdata;
 8008f5c:	4b20      	ldr	r3, [pc, #128]	@ (8008fe0 <lwip_accept+0x190>)
  sock->lastdata.pbuf = NULL;
 8008f5e:	eb07 0208 	add.w	r2, r7, r8
  *conn = sock->conn;
 8008f62:	f857 5008 	ldr.w	r5, [r7, r8]
  *lastdata = sock->lastdata;
 8008f66:	f853 6008 	ldr.w	r6, [r3, r8]
  sock->lastdata.pbuf = NULL;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	6053      	str	r3, [r2, #4]
  sock->conn = NULL;
 8008f6e:	f847 3008 	str.w	r3, [r7, r8]
  SYS_ARCH_UNPROTECT(lev);
 8008f72:	f008 f881 	bl	8011078 <sys_arch_unprotect>
  if (lastdata->pbuf != NULL) {
 8008f76:	b116      	cbz	r6, 8008f7e <lwip_accept+0x12e>
      pbuf_free(lastdata->pbuf);
 8008f78:	4630      	mov	r0, r6
 8008f7a:	f001 fc01 	bl	800a780 <pbuf_free>
  if (conn != NULL) {
 8008f7e:	b115      	cbz	r5, 8008f86 <lwip_accept+0x136>
    netconn_delete(conn);
 8008f80:	4628      	mov	r0, r5
 8008f82:	f7fd fff1 	bl	8006f68 <netconn_delete>
      sock_set_errno(sock, err_to_errno(err));
 8008f86:	4620      	mov	r0, r4
 8008f88:	f7ff fb6a 	bl	8008660 <err_to_errno>
 8008f8c:	2800      	cmp	r0, #0
 8008f8e:	d0d2      	beq.n	8008f36 <lwip_accept+0xe6>
 8008f90:	4a11      	ldr	r2, [pc, #68]	@ (8008fd8 <lwip_accept+0x188>)
 8008f92:	6010      	str	r0, [r2, #0]
      return -1;
 8008f94:	e7cf      	b.n	8008f36 <lwip_accept+0xe6>
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 8008f96:	593a      	ldr	r2, [r7, r4]
 8008f98:	7812      	ldrb	r2, [r2, #0]
 8008f9a:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8008f9e:	2a10      	cmp	r2, #16
 8008fa0:	d003      	beq.n	8008faa <lwip_accept+0x15a>
      sock_set_errno(sock, EOPNOTSUPP);
 8008fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8008fd8 <lwip_accept+0x188>)
 8008fa4:	225f      	movs	r2, #95	@ 0x5f
 8008fa6:	601a      	str	r2, [r3, #0]
 8008fa8:	e7c5      	b.n	8008f36 <lwip_accept+0xe6>
    } else if (err == ERR_CLSD) {
 8008faa:	330f      	adds	r3, #15
 8008fac:	d1ec      	bne.n	8008f88 <lwip_accept+0x138>
      sock_set_errno(sock, EINVAL);
 8008fae:	4b0a      	ldr	r3, [pc, #40]	@ (8008fd8 <lwip_accept+0x188>)
 8008fb0:	2216      	movs	r2, #22
 8008fb2:	601a      	str	r2, [r3, #0]
 8008fb4:	e7bf      	b.n	8008f36 <lwip_accept+0xe6>
    netconn_delete(newconn);
 8008fb6:	9802      	ldr	r0, [sp, #8]
 8008fb8:	f7fd ffd6 	bl	8006f68 <netconn_delete>
    sock_set_errno(sock, ENFILE);
 8008fbc:	4b06      	ldr	r3, [pc, #24]	@ (8008fd8 <lwip_accept+0x188>)
 8008fbe:	2217      	movs	r2, #23
 8008fc0:	601a      	str	r2, [r3, #0]
    return -1;
 8008fc2:	e7b8      	b.n	8008f36 <lwip_accept+0xe6>
 8008fc4:	24006ba8 	.word	0x24006ba8
 8008fc8:	24006be8 	.word	0x24006be8
 8008fcc:	08012c70 	.word	0x08012c70
 8008fd0:	08012de4 	.word	0x08012de4
 8008fd4:	0801241c 	.word	0x0801241c
 8008fd8:	24009f98 	.word	0x24009f98
 8008fdc:	08012dd4 	.word	0x08012dd4
 8008fe0:	24006bac 	.word	0x24006bac

08008fe4 <lwip_bind>:
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8008fe4:	2803      	cmp	r0, #3
 8008fe6:	d81f      	bhi.n	8009028 <lwip_bind+0x44>
{
 8008fe8:	b530      	push	{r4, r5, lr}
    if (sock->conn) {
 8008fea:	4d1a      	ldr	r5, [pc, #104]	@ (8009054 <lwip_bind+0x70>)
 8008fec:	0104      	lsls	r4, r0, #4
{
 8008fee:	b083      	sub	sp, #12
    if (sock->conn) {
 8008ff0:	592b      	ldr	r3, [r5, r4]
 8008ff2:	b19b      	cbz	r3, 800901c <lwip_bind+0x38>
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 8008ff4:	2a10      	cmp	r2, #16
 8008ff6:	d11d      	bne.n	8009034 <lwip_bind+0x50>
 8008ff8:	784b      	ldrb	r3, [r1, #1]
 8008ffa:	2b02      	cmp	r3, #2
 8008ffc:	d11a      	bne.n	8009034 <lwip_bind+0x50>
 8008ffe:	078b      	lsls	r3, r1, #30
 8009000:	d118      	bne.n	8009034 <lwip_bind+0x50>
  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
 8009002:	684b      	ldr	r3, [r1, #4]
 8009004:	8848      	ldrh	r0, [r1, #2]
 8009006:	9301      	str	r3, [sp, #4]
 8009008:	f000 fd04 	bl	8009a14 <lwip_htons>
  err = netconn_bind(sock->conn, &local_addr, local_port);
 800900c:	a901      	add	r1, sp, #4
  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
 800900e:	4602      	mov	r2, r0
  err = netconn_bind(sock->conn, &local_addr, local_port);
 8009010:	5928      	ldr	r0, [r5, r4]
 8009012:	f7fe f807 	bl	8007024 <netconn_bind>
  if (err != ERR_OK) {
 8009016:	b9b0      	cbnz	r0, 8009046 <lwip_bind+0x62>
}
 8009018:	b003      	add	sp, #12
 800901a:	bd30      	pop	{r4, r5, pc}
    set_errno(EBADF);
 800901c:	4b0e      	ldr	r3, [pc, #56]	@ (8009058 <lwip_bind+0x74>)
 800901e:	2209      	movs	r2, #9
 8009020:	601a      	str	r2, [r3, #0]
    return -1;
 8009022:	f04f 30ff 	mov.w	r0, #4294967295
 8009026:	e7f7      	b.n	8009018 <lwip_bind+0x34>
    set_errno(EBADF);
 8009028:	4b0b      	ldr	r3, [pc, #44]	@ (8009058 <lwip_bind+0x74>)
 800902a:	2209      	movs	r2, #9
    return -1;
 800902c:	f04f 30ff 	mov.w	r0, #4294967295
    set_errno(EBADF);
 8009030:	601a      	str	r2, [r3, #0]
}
 8009032:	4770      	bx	lr
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 8009034:	4b09      	ldr	r3, [pc, #36]	@ (800905c <lwip_bind+0x78>)
 8009036:	f240 22e2 	movw	r2, #738	@ 0x2e2
 800903a:	4909      	ldr	r1, [pc, #36]	@ (8009060 <lwip_bind+0x7c>)
 800903c:	4809      	ldr	r0, [pc, #36]	@ (8009064 <lwip_bind+0x80>)
 800903e:	f008 fa2b 	bl	8011498 <iprintf>
 8009042:	f06f 000f 	mvn.w	r0, #15
 8009046:	f7ff fb0b 	bl	8008660 <err_to_errno>
 800904a:	2800      	cmp	r0, #0
 800904c:	d0e9      	beq.n	8009022 <lwip_bind+0x3e>
 800904e:	4b02      	ldr	r3, [pc, #8]	@ (8009058 <lwip_bind+0x74>)
 8009050:	6018      	str	r0, [r3, #0]
 8009052:	e7e6      	b.n	8009022 <lwip_bind+0x3e>
 8009054:	24006ba8 	.word	0x24006ba8
 8009058:	24009f98 	.word	0x24009f98
 800905c:	08012c70 	.word	0x08012c70
 8009060:	08012dfc 	.word	0x08012dfc
 8009064:	0801241c 	.word	0x0801241c

08009068 <lwip_close>:
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8009068:	2803      	cmp	r0, #3
 800906a:	d835      	bhi.n	80090d8 <lwip_close+0x70>
    if (sock->conn) {
 800906c:	4603      	mov	r3, r0
{
 800906e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (sock->conn) {
 8009072:	4d20      	ldr	r5, [pc, #128]	@ (80090f4 <lwip_close+0x8c>)
 8009074:	0106      	lsls	r6, r0, #4
 8009076:	59a8      	ldr	r0, [r5, r6]
 8009078:	eb05 1403 	add.w	r4, r5, r3, lsl #4
 800907c:	b300      	cbz	r0, 80090c0 <lwip_close+0x58>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 800907e:	7807      	ldrb	r7, [r0, #0]
  err = netconn_prepare_delete(sock->conn);
 8009080:	f7fd ff56 	bl	8006f30 <netconn_prepare_delete>
  if (err != ERR_OK) {
 8009084:	bb70      	cbnz	r0, 80090e4 <lwip_close+0x7c>
  SYS_ARCH_PROTECT(lev);
 8009086:	f007 ffeb 	bl	8011060 <sys_arch_protect>
  *lastdata = sock->lastdata;
 800908a:	1d2b      	adds	r3, r5, #4
  *conn = sock->conn;
 800908c:	f855 8006 	ldr.w	r8, [r5, r6]
  sock->conn = NULL;
 8009090:	2200      	movs	r2, #0
  *lastdata = sock->lastdata;
 8009092:	599d      	ldr	r5, [r3, r6]
  sock->conn = NULL;
 8009094:	2300      	movs	r3, #0
 8009096:	e9c4 2300 	strd	r2, r3, [r4]
  SYS_ARCH_UNPROTECT(lev);
 800909a:	f007 ffed 	bl	8011078 <sys_arch_unprotect>
  if (lastdata->pbuf != NULL) {
 800909e:	b135      	cbz	r5, 80090ae <lwip_close+0x46>
    if (is_tcp) {
 80090a0:	f007 07f0 	and.w	r7, r7, #240	@ 0xf0
      pbuf_free(lastdata->pbuf);
 80090a4:	4628      	mov	r0, r5
    if (is_tcp) {
 80090a6:	2f10      	cmp	r7, #16
 80090a8:	d110      	bne.n	80090cc <lwip_close+0x64>
      pbuf_free(lastdata->pbuf);
 80090aa:	f001 fb69 	bl	800a780 <pbuf_free>
  if (conn != NULL) {
 80090ae:	f1b8 0f00 	cmp.w	r8, #0
 80090b2:	d002      	beq.n	80090ba <lwip_close+0x52>
    netconn_delete(conn);
 80090b4:	4640      	mov	r0, r8
 80090b6:	f7fd ff57 	bl	8006f68 <netconn_delete>
  return 0;
 80090ba:	2000      	movs	r0, #0
}
 80090bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    set_errno(EBADF);
 80090c0:	4b0d      	ldr	r3, [pc, #52]	@ (80090f8 <lwip_close+0x90>)
 80090c2:	2209      	movs	r2, #9
 80090c4:	601a      	str	r2, [r3, #0]
    return -1;
 80090c6:	f04f 30ff 	mov.w	r0, #4294967295
 80090ca:	e7f7      	b.n	80090bc <lwip_close+0x54>
      netbuf_delete(lastdata->netbuf);
 80090cc:	f7ff fad6 	bl	800867c <netbuf_delete>
  if (conn != NULL) {
 80090d0:	f1b8 0f00 	cmp.w	r8, #0
 80090d4:	d1ee      	bne.n	80090b4 <lwip_close+0x4c>
 80090d6:	e7f0      	b.n	80090ba <lwip_close+0x52>
    set_errno(EBADF);
 80090d8:	4b07      	ldr	r3, [pc, #28]	@ (80090f8 <lwip_close+0x90>)
 80090da:	2209      	movs	r2, #9
    return -1;
 80090dc:	f04f 30ff 	mov.w	r0, #4294967295
    set_errno(EBADF);
 80090e0:	601a      	str	r2, [r3, #0]
}
 80090e2:	4770      	bx	lr
    sock_set_errno(sock, err_to_errno(err));
 80090e4:	f7ff fabc 	bl	8008660 <err_to_errno>
 80090e8:	2800      	cmp	r0, #0
 80090ea:	d0ec      	beq.n	80090c6 <lwip_close+0x5e>
 80090ec:	4b02      	ldr	r3, [pc, #8]	@ (80090f8 <lwip_close+0x90>)
 80090ee:	6018      	str	r0, [r3, #0]
 80090f0:	e7e9      	b.n	80090c6 <lwip_close+0x5e>
 80090f2:	bf00      	nop
 80090f4:	24006ba8 	.word	0x24006ba8
 80090f8:	24009f98 	.word	0x24009f98

080090fc <lwip_listen>:
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 80090fc:	2803      	cmp	r0, #3
{
 80090fe:	b538      	push	{r3, r4, r5, lr}
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8009100:	d80a      	bhi.n	8009118 <lwip_listen+0x1c>
    if (sock->conn) {
 8009102:	4d11      	ldr	r5, [pc, #68]	@ (8009148 <lwip_listen+0x4c>)
 8009104:	0104      	lsls	r4, r0, #4
 8009106:	5928      	ldr	r0, [r5, r4]
 8009108:	b130      	cbz	r0, 8009118 <lwip_listen+0x1c>
  err = netconn_listen_with_backlog(sock->conn, (u8_t)backlog);
 800910a:	f381 0108 	usat	r1, #8, r1
 800910e:	b2c9      	uxtb	r1, r1
 8009110:	f7fd ffb4 	bl	800707c <netconn_listen_with_backlog>
  if (err != ERR_OK) {
 8009114:	b930      	cbnz	r0, 8009124 <lwip_listen+0x28>
}
 8009116:	bd38      	pop	{r3, r4, r5, pc}
    set_errno(EBADF);
 8009118:	4b0c      	ldr	r3, [pc, #48]	@ (800914c <lwip_listen+0x50>)
 800911a:	2209      	movs	r2, #9
 800911c:	601a      	str	r2, [r3, #0]
    return -1;
 800911e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8009122:	bd38      	pop	{r3, r4, r5, pc}
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 8009124:	592b      	ldr	r3, [r5, r4]
 8009126:	781b      	ldrb	r3, [r3, #0]
 8009128:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800912c:	2b10      	cmp	r3, #16
 800912e:	d003      	beq.n	8009138 <lwip_listen+0x3c>
      sock_set_errno(sock, EOPNOTSUPP);
 8009130:	4b06      	ldr	r3, [pc, #24]	@ (800914c <lwip_listen+0x50>)
 8009132:	225f      	movs	r2, #95	@ 0x5f
 8009134:	601a      	str	r2, [r3, #0]
 8009136:	e7f2      	b.n	800911e <lwip_listen+0x22>
      sock_set_errno(sock, err_to_errno(err));
 8009138:	f7ff fa92 	bl	8008660 <err_to_errno>
 800913c:	2800      	cmp	r0, #0
 800913e:	d0ee      	beq.n	800911e <lwip_listen+0x22>
 8009140:	4a02      	ldr	r2, [pc, #8]	@ (800914c <lwip_listen+0x50>)
 8009142:	6010      	str	r0, [r2, #0]
 8009144:	e7eb      	b.n	800911e <lwip_listen+0x22>
 8009146:	bf00      	nop
 8009148:	24006ba8 	.word	0x24006ba8
 800914c:	24009f98 	.word	0x24009f98

08009150 <lwip_recvfrom>:
{
 8009150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8009154:	2803      	cmp	r0, #3
{
 8009156:	b08a      	sub	sp, #40	@ 0x28
 8009158:	9e11      	ldr	r6, [sp, #68]	@ 0x44
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800915a:	d836      	bhi.n	80091ca <lwip_recvfrom+0x7a>
    if (sock->conn) {
 800915c:	4f35      	ldr	r7, [pc, #212]	@ (8009234 <lwip_recvfrom+0xe4>)
 800915e:	ea4f 1800 	mov.w	r8, r0, lsl #4
 8009162:	f857 e008 	ldr.w	lr, [r7, r8]
 8009166:	eb07 1000 	add.w	r0, r7, r0, lsl #4
 800916a:	f1be 0f00 	cmp.w	lr, #0
 800916e:	d02c      	beq.n	80091ca <lwip_recvfrom+0x7a>
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 8009170:	f89e e000 	ldrb.w	lr, [lr]
 8009174:	f00e 0ef0 	and.w	lr, lr, #240	@ 0xf0
 8009178:	f1be 0f10 	cmp.w	lr, #16
 800917c:	d03c      	beq.n	80091f8 <lwip_recvfrom+0xa8>
    u16_t datagram_len = 0;
 800917e:	469c      	mov	ip, r3
    msg.msg_iov = &vec;
 8009180:	ab01      	add	r3, sp, #4
 8009182:	4614      	mov	r4, r2
    vec.iov_len = len;
 8009184:	9202      	str	r2, [sp, #8]
    msg.msg_iov = &vec;
 8009186:	9305      	str	r3, [sp, #20]
    msg.msg_iovlen = 1;
 8009188:	2301      	movs	r3, #1
    msg.msg_name = from;
 800918a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
    msg.msg_iovlen = 1;
 800918c:	9306      	str	r3, [sp, #24]
    u16_t datagram_len = 0;
 800918e:	2300      	movs	r3, #0
    vec.iov_base = mem;
 8009190:	9101      	str	r1, [sp, #4]
    msg.msg_name = from;
 8009192:	9203      	str	r2, [sp, #12]
    u16_t datagram_len = 0;
 8009194:	f8ad 3002 	strh.w	r3, [sp, #2]
    msg.msg_flags = 0;
 8009198:	9309      	str	r3, [sp, #36]	@ 0x24
    msg.msg_controllen = 0;
 800919a:	e9cd 3307 	strd	r3, r3, [sp, #28]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 800919e:	b1d6      	cbz	r6, 80091d6 <lwip_recvfrom+0x86>
 80091a0:	6833      	ldr	r3, [r6, #0]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 80091a2:	4661      	mov	r1, ip
 80091a4:	aa03      	add	r2, sp, #12
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 80091a6:	9304      	str	r3, [sp, #16]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 80091a8:	f10d 0302 	add.w	r3, sp, #2
 80091ac:	f7ff fce8 	bl	8008b80 <lwip_recvfrom_udp_raw.constprop.0>
    if (err != ERR_OK) {
 80091b0:	2800      	cmp	r0, #0
 80091b2:	d138      	bne.n	8009226 <lwip_recvfrom+0xd6>
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 80091b4:	f8bd 0002 	ldrh.w	r0, [sp, #2]
      *fromlen = msg.msg_namelen;
 80091b8:	9b04      	ldr	r3, [sp, #16]
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 80091ba:	4284      	cmp	r4, r0
      *fromlen = msg.msg_namelen;
 80091bc:	6033      	str	r3, [r6, #0]
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 80091be:	bf28      	it	cs
 80091c0:	4604      	movcs	r4, r0
}
 80091c2:	4620      	mov	r0, r4
 80091c4:	b00a      	add	sp, #40	@ 0x28
 80091c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    set_errno(EBADF);
 80091ca:	4b1b      	ldr	r3, [pc, #108]	@ (8009238 <lwip_recvfrom+0xe8>)
 80091cc:	2209      	movs	r2, #9
 80091ce:	601a      	str	r2, [r3, #0]
    return -1;
 80091d0:	f04f 34ff 	mov.w	r4, #4294967295
 80091d4:	e7f5      	b.n	80091c2 <lwip_recvfrom+0x72>
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 80091d6:	f10d 0302 	add.w	r3, sp, #2
 80091da:	4661      	mov	r1, ip
 80091dc:	aa03      	add	r2, sp, #12
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 80091de:	9604      	str	r6, [sp, #16]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 80091e0:	f7ff fcce 	bl	8008b80 <lwip_recvfrom_udp_raw.constprop.0>
    if (err != ERR_OK) {
 80091e4:	b9f8      	cbnz	r0, 8009226 <lwip_recvfrom+0xd6>
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 80091e6:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 80091ea:	4284      	cmp	r4, r0
 80091ec:	bf28      	it	cs
 80091ee:	4604      	movcs	r4, r0
}
 80091f0:	4620      	mov	r0, r4
 80091f2:	b00a      	add	sp, #40	@ 0x28
 80091f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = lwip_recv_tcp(sock, mem, len, flags);
 80091f8:	f7ff fbd0 	bl	800899c <lwip_recv_tcp>
  if (from && fromlen)
 80091fc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
    ret = lwip_recv_tcp(sock, mem, len, flags);
 80091fe:	4604      	mov	r4, r0
  if (from && fromlen)
 8009200:	2b00      	cmp	r3, #0
 8009202:	d0de      	beq.n	80091c2 <lwip_recvfrom+0x72>
 8009204:	2e00      	cmp	r6, #0
 8009206:	d0dc      	beq.n	80091c2 <lwip_recvfrom+0x72>
    netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
 8009208:	aa01      	add	r2, sp, #4
 800920a:	a903      	add	r1, sp, #12
 800920c:	f857 0008 	ldr.w	r0, [r7, r8]
 8009210:	2300      	movs	r3, #0
 8009212:	f7fd fec9 	bl	8006fa8 <netconn_getaddr>
      return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
 8009216:	4633      	mov	r3, r6
 8009218:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800921a:	a803      	add	r0, sp, #12
 800921c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8009220:	f7ff fc6c 	bl	8008afc <lwip_sock_make_addr.constprop.0.isra.0>
 8009224:	e7cd      	b.n	80091c2 <lwip_recvfrom+0x72>
      sock_set_errno(sock, err_to_errno(err));
 8009226:	f7ff fa1b 	bl	8008660 <err_to_errno>
 800922a:	2800      	cmp	r0, #0
 800922c:	d0d0      	beq.n	80091d0 <lwip_recvfrom+0x80>
 800922e:	4b02      	ldr	r3, [pc, #8]	@ (8009238 <lwip_recvfrom+0xe8>)
 8009230:	6018      	str	r0, [r3, #0]
      return -1;
 8009232:	e7cd      	b.n	80091d0 <lwip_recvfrom+0x80>
 8009234:	24006ba8 	.word	0x24006ba8
 8009238:	24009f98 	.word	0x24009f98

0800923c <lwip_recv>:
{
 800923c:	b510      	push	{r4, lr}
  return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
 800923e:	2400      	movs	r4, #0
{
 8009240:	b082      	sub	sp, #8
  return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
 8009242:	e9cd 4400 	strd	r4, r4, [sp]
 8009246:	f7ff ff83 	bl	8009150 <lwip_recvfrom>
}
 800924a:	b002      	add	sp, #8
 800924c:	bd10      	pop	{r4, pc}
 800924e:	bf00      	nop

08009250 <lwip_sendto>:
{
 8009250:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8009254:	2803      	cmp	r0, #3
{
 8009256:	b085      	sub	sp, #20
 8009258:	e9dd 7e0c 	ldrd	r7, lr, [sp, #48]	@ 0x30
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800925c:	d844      	bhi.n	80092e8 <lwip_sendto+0x98>
    if (sock->conn) {
 800925e:	0104      	lsls	r4, r0, #4
 8009260:	f8df 80fc 	ldr.w	r8, [pc, #252]	@ 8009360 <lwip_sendto+0x110>
 8009264:	f858 c004 	ldr.w	ip, [r8, r4]
 8009268:	f1bc 0f00 	cmp.w	ip, #0
 800926c:	d03c      	beq.n	80092e8 <lwip_sendto+0x98>
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800926e:	f89c c000 	ldrb.w	ip, [ip]
 8009272:	f00c 0cf0 	and.w	ip, ip, #240	@ 0xf0
 8009276:	f1bc 0f10 	cmp.w	ip, #16
 800927a:	d052      	beq.n	8009322 <lwip_sendto+0xd2>
  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 800927c:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8009280:	4615      	mov	r5, r2
 8009282:	d261      	bcs.n	8009348 <lwip_sendto+0xf8>
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 8009284:	ea5e 0007 	orrs.w	r0, lr, r7
 8009288:	460e      	mov	r6, r1
  short_size = (u16_t)size;
 800928a:	fa1f f982 	uxth.w	r9, r2
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 800928e:	d013      	beq.n	80092b8 <lwip_sendto+0x68>
 8009290:	f1be 0f10 	cmp.w	lr, #16
 8009294:	d14a      	bne.n	800932c <lwip_sendto+0xdc>
 8009296:	2f00      	cmp	r7, #0
 8009298:	d048      	beq.n	800932c <lwip_sendto+0xdc>
 800929a:	787b      	ldrb	r3, [r7, #1]
 800929c:	2b02      	cmp	r3, #2
 800929e:	d145      	bne.n	800932c <lwip_sendto+0xdc>
 80092a0:	07bb      	lsls	r3, r7, #30
 80092a2:	d143      	bne.n	800932c <lwip_sendto+0xdc>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 80092a4:	687b      	ldr	r3, [r7, #4]
  buf.p = buf.ptr = NULL;
 80092a6:	2200      	movs	r2, #0
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 80092a8:	8878      	ldrh	r0, [r7, #2]
 80092aa:	9302      	str	r3, [sp, #8]
  buf.p = buf.ptr = NULL;
 80092ac:	2300      	movs	r3, #0
 80092ae:	e9cd 2300 	strd	r2, r3, [sp]
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 80092b2:	f000 fbaf 	bl	8009a14 <lwip_htons>
 80092b6:	e004      	b.n	80092c2 <lwip_sendto+0x72>
  buf.p = buf.ptr = NULL;
 80092b8:	2200      	movs	r2, #0
 80092ba:	2300      	movs	r3, #0
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 80092bc:	9002      	str	r0, [sp, #8]
  buf.p = buf.ptr = NULL;
 80092be:	e9cd 2300 	strd	r2, r3, [sp]
  err = netbuf_ref(&buf, data, short_size);
 80092c2:	4631      	mov	r1, r6
  netbuf_fromport(&buf) = remote_port;
 80092c4:	f8ad 000c 	strh.w	r0, [sp, #12]
  err = netbuf_ref(&buf, data, short_size);
 80092c8:	464a      	mov	r2, r9
 80092ca:	4668      	mov	r0, sp
 80092cc:	f7ff fa00 	bl	80086d0 <netbuf_ref>
  if (err == ERR_OK) {
 80092d0:	4606      	mov	r6, r0
 80092d2:	b188      	cbz	r0, 80092f8 <lwip_sendto+0xa8>
  netbuf_free(&buf);
 80092d4:	4668      	mov	r0, sp
 80092d6:	f7ff f9e3 	bl	80086a0 <netbuf_free>
  sock_set_errno(sock, err_to_errno(err));
 80092da:	4630      	mov	r0, r6
 80092dc:	f7ff f9c0 	bl	8008660 <err_to_errno>
 80092e0:	b128      	cbz	r0, 80092ee <lwip_sendto+0x9e>
 80092e2:	4b1b      	ldr	r3, [pc, #108]	@ (8009350 <lwip_sendto+0x100>)
 80092e4:	6018      	str	r0, [r3, #0]
  return (err == ERR_OK ? short_size : -1);
 80092e6:	e002      	b.n	80092ee <lwip_sendto+0x9e>
    set_errno(EBADF);
 80092e8:	4b19      	ldr	r3, [pc, #100]	@ (8009350 <lwip_sendto+0x100>)
 80092ea:	2209      	movs	r2, #9
 80092ec:	601a      	str	r2, [r3, #0]
    return -1;
 80092ee:	f04f 30ff 	mov.w	r0, #4294967295
}
 80092f2:	b005      	add	sp, #20
 80092f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    err = netconn_send(sock->conn, &buf);
 80092f8:	4669      	mov	r1, sp
 80092fa:	f858 0004 	ldr.w	r0, [r8, r4]
 80092fe:	f7fd ffa9 	bl	8007254 <netconn_send>
 8009302:	4604      	mov	r4, r0
  netbuf_free(&buf);
 8009304:	4668      	mov	r0, sp
 8009306:	f7ff f9cb 	bl	80086a0 <netbuf_free>
  sock_set_errno(sock, err_to_errno(err));
 800930a:	4620      	mov	r0, r4
 800930c:	f7ff f9a8 	bl	8008660 <err_to_errno>
 8009310:	b108      	cbz	r0, 8009316 <lwip_sendto+0xc6>
 8009312:	4b0f      	ldr	r3, [pc, #60]	@ (8009350 <lwip_sendto+0x100>)
 8009314:	6018      	str	r0, [r3, #0]
  return (err == ERR_OK ? short_size : -1);
 8009316:	2c00      	cmp	r4, #0
 8009318:	d1e9      	bne.n	80092ee <lwip_sendto+0x9e>
 800931a:	4628      	mov	r0, r5
}
 800931c:	b005      	add	sp, #20
 800931e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009322:	b005      	add	sp, #20
 8009324:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    return lwip_send(s, data, size, flags);
 8009328:	f000 b81c 	b.w	8009364 <lwip_send>
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 800932c:	4b09      	ldr	r3, [pc, #36]	@ (8009354 <lwip_sendto+0x104>)
 800932e:	f240 6252 	movw	r2, #1618	@ 0x652
 8009332:	4909      	ldr	r1, [pc, #36]	@ (8009358 <lwip_sendto+0x108>)
 8009334:	4809      	ldr	r0, [pc, #36]	@ (800935c <lwip_sendto+0x10c>)
 8009336:	f008 f8af 	bl	8011498 <iprintf>
 800933a:	f06f 000f 	mvn.w	r0, #15
 800933e:	f7ff f98f 	bl	8008660 <err_to_errno>
 8009342:	2800      	cmp	r0, #0
 8009344:	d0d3      	beq.n	80092ee <lwip_sendto+0x9e>
 8009346:	e7cc      	b.n	80092e2 <lwip_sendto+0x92>
    sock_set_errno(sock, EMSGSIZE);
 8009348:	4b01      	ldr	r3, [pc, #4]	@ (8009350 <lwip_sendto+0x100>)
 800934a:	225a      	movs	r2, #90	@ 0x5a
 800934c:	601a      	str	r2, [r3, #0]
    return -1;
 800934e:	e7ce      	b.n	80092ee <lwip_sendto+0x9e>
 8009350:	24009f98 	.word	0x24009f98
 8009354:	08012c70 	.word	0x08012c70
 8009358:	08012e18 	.word	0x08012e18
 800935c:	0801241c 	.word	0x0801241c
 8009360:	24006ba8 	.word	0x24006ba8

08009364 <lwip_send>:
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8009364:	2803      	cmp	r0, #3
 8009366:	d836      	bhi.n	80093d6 <lwip_send+0x72>
    if (sock->conn) {
 8009368:	ea4f 1c00 	mov.w	ip, r0, lsl #4
{
 800936c:	b510      	push	{r4, lr}
    if (sock->conn) {
 800936e:	4c1d      	ldr	r4, [pc, #116]	@ (80093e4 <lwip_send+0x80>)
{
 8009370:	b084      	sub	sp, #16
    if (sock->conn) {
 8009372:	f854 400c 	ldr.w	r4, [r4, ip]
 8009376:	b344      	cbz	r4, 80093ca <lwip_send+0x66>
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 8009378:	f894 c000 	ldrb.w	ip, [r4]
 800937c:	f00c 0cf0 	and.w	ip, ip, #240	@ 0xf0
 8009380:	f1bc 0f10 	cmp.w	ip, #16
 8009384:	d11a      	bne.n	80093bc <lwip_send+0x58>
  write_flags = (u8_t)(NETCONN_COPY |
 8009386:	f013 0f10 	tst.w	r3, #16
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800938a:	ea4f 0363 	mov.w	r3, r3, asr #1
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 800938e:	4620      	mov	r0, r4
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 8009390:	f003 0304 	and.w	r3, r3, #4
  write_flags = (u8_t)(NETCONN_COPY |
 8009394:	bf14      	ite	ne
 8009396:	2403      	movne	r4, #3
 8009398:	2401      	moveq	r4, #1
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 800939a:	4323      	orrs	r3, r4
 800939c:	ac03      	add	r4, sp, #12
 800939e:	9400      	str	r4, [sp, #0]
  written = 0;
 80093a0:	2400      	movs	r4, #0
 80093a2:	9403      	str	r4, [sp, #12]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 80093a4:	f7fd fff2 	bl	800738c <netconn_write_partly>
 80093a8:	4604      	mov	r4, r0
  sock_set_errno(sock, err_to_errno(err));
 80093aa:	f7ff f959 	bl	8008660 <err_to_errno>
 80093ae:	b108      	cbz	r0, 80093b4 <lwip_send+0x50>
 80093b0:	4b0d      	ldr	r3, [pc, #52]	@ (80093e8 <lwip_send+0x84>)
 80093b2:	6018      	str	r0, [r3, #0]
  return (err == ERR_OK ? (ssize_t)written : -1);
 80093b4:	b964      	cbnz	r4, 80093d0 <lwip_send+0x6c>
 80093b6:	9803      	ldr	r0, [sp, #12]
}
 80093b8:	b004      	add	sp, #16
 80093ba:	bd10      	pop	{r4, pc}
    return lwip_sendto(s, data, size, flags, NULL, 0);
 80093bc:	2400      	movs	r4, #0
 80093be:	e9cd 4400 	strd	r4, r4, [sp]
 80093c2:	f7ff ff45 	bl	8009250 <lwip_sendto>
}
 80093c6:	b004      	add	sp, #16
 80093c8:	bd10      	pop	{r4, pc}
    set_errno(EBADF);
 80093ca:	4b07      	ldr	r3, [pc, #28]	@ (80093e8 <lwip_send+0x84>)
 80093cc:	2209      	movs	r2, #9
 80093ce:	601a      	str	r2, [r3, #0]
    return -1;
 80093d0:	f04f 30ff 	mov.w	r0, #4294967295
 80093d4:	e7f0      	b.n	80093b8 <lwip_send+0x54>
    set_errno(EBADF);
 80093d6:	4b04      	ldr	r3, [pc, #16]	@ (80093e8 <lwip_send+0x84>)
 80093d8:	2209      	movs	r2, #9
    return -1;
 80093da:	f04f 30ff 	mov.w	r0, #4294967295
    set_errno(EBADF);
 80093de:	601a      	str	r2, [r3, #0]
}
 80093e0:	4770      	bx	lr
 80093e2:	bf00      	nop
 80093e4:	24006ba8 	.word	0x24006ba8
 80093e8:	24009f98 	.word	0x24009f98

080093ec <lwip_socket>:
  switch (type) {
 80093ec:	2902      	cmp	r1, #2
{
 80093ee:	4613      	mov	r3, r2
 80093f0:	b510      	push	{r4, lr}
  switch (type) {
 80093f2:	d009      	beq.n	8009408 <lwip_socket+0x1c>
 80093f4:	2903      	cmp	r1, #3
 80093f6:	d021      	beq.n	800943c <lwip_socket+0x50>
 80093f8:	2901      	cmp	r1, #1
 80093fa:	d018      	beq.n	800942e <lwip_socket+0x42>
 80093fc:	2316      	movs	r3, #22
    set_errno(ENOBUFS);
 80093fe:	4a16      	ldr	r2, [pc, #88]	@ (8009458 <lwip_socket+0x6c>)
      return -1;
 8009400:	f04f 30ff 	mov.w	r0, #4294967295
    set_errno(ENOBUFS);
 8009404:	6013      	str	r3, [r2, #0]
}
 8009406:	bd10      	pop	{r4, pc}
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 8009408:	2a88      	cmp	r2, #136	@ 0x88
 800940a:	f04f 0100 	mov.w	r1, #0
 800940e:	4a13      	ldr	r2, [pc, #76]	@ (800945c <lwip_socket+0x70>)
 8009410:	bf14      	ite	ne
 8009412:	2020      	movne	r0, #32
 8009414:	2021      	moveq	r0, #33	@ 0x21
 8009416:	f7fd fd2b 	bl	8006e70 <netconn_new_with_proto_and_callback>
 800941a:	4604      	mov	r4, r0
  if (!conn) {
 800941c:	b1ac      	cbz	r4, 800944a <lwip_socket+0x5e>
  i = alloc_socket(conn, 0);
 800941e:	2100      	movs	r1, #0
 8009420:	4620      	mov	r0, r4
 8009422:	f7ff f983 	bl	800872c <alloc_socket>
  if (i == -1) {
 8009426:	1c43      	adds	r3, r0, #1
 8009428:	d011      	beq.n	800944e <lwip_socket+0x62>
  conn->socket = i;
 800942a:	61a0      	str	r0, [r4, #24]
}
 800942c:	bd10      	pop	{r4, pc}
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 800942e:	4a0b      	ldr	r2, [pc, #44]	@ (800945c <lwip_socket+0x70>)
 8009430:	2100      	movs	r1, #0
 8009432:	2010      	movs	r0, #16
 8009434:	f7fd fd1c 	bl	8006e70 <netconn_new_with_proto_and_callback>
 8009438:	4604      	mov	r4, r0
      break;
 800943a:	e7ef      	b.n	800941c <lwip_socket+0x30>
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 800943c:	4a07      	ldr	r2, [pc, #28]	@ (800945c <lwip_socket+0x70>)
 800943e:	b2d9      	uxtb	r1, r3
 8009440:	2040      	movs	r0, #64	@ 0x40
 8009442:	f7fd fd15 	bl	8006e70 <netconn_new_with_proto_and_callback>
 8009446:	4604      	mov	r4, r0
      break;
 8009448:	e7e8      	b.n	800941c <lwip_socket+0x30>
 800944a:	2369      	movs	r3, #105	@ 0x69
 800944c:	e7d7      	b.n	80093fe <lwip_socket+0x12>
    netconn_delete(conn);
 800944e:	4620      	mov	r0, r4
 8009450:	f7fd fd8a 	bl	8006f68 <netconn_delete>
    return -1;
 8009454:	2317      	movs	r3, #23
 8009456:	e7d2      	b.n	80093fe <lwip_socket+0x12>
 8009458:	24009f98 	.word	0x24009f98
 800945c:	08008c9d 	.word	0x08008c9d

08009460 <lwip_select>:
{
 8009460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((maxfdp1 < 0) || (maxfdp1 > LWIP_SELECT_MAXNFDS)) {
 8009464:	2840      	cmp	r0, #64	@ 0x40
{
 8009466:	b099      	sub	sp, #100	@ 0x64
 8009468:	9c22      	ldr	r4, [sp, #136]	@ 0x88
 800946a:	9006      	str	r0, [sp, #24]
  if ((maxfdp1 < 0) || (maxfdp1 > LWIP_SELECT_MAXNFDS)) {
 800946c:	f200 8165 	bhi.w	800973a <lwip_select+0x2da>
  nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
 8009470:	ad0d      	add	r5, sp, #52	@ 0x34
 8009472:	4699      	mov	r9, r3
 8009474:	460e      	mov	r6, r1
 8009476:	4617      	mov	r7, r2
 8009478:	9502      	str	r5, [sp, #8]
 800947a:	ad0b      	add	r5, sp, #44	@ 0x2c
 800947c:	9501      	str	r5, [sp, #4]
 800947e:	ad09      	add	r5, sp, #36	@ 0x24
 8009480:	9500      	str	r5, [sp, #0]
 8009482:	f7ff f995 	bl	80087b0 <lwip_selscan>
  if (nready < 0) {
 8009486:	1e03      	subs	r3, r0, #0
 8009488:	9305      	str	r3, [sp, #20]
 800948a:	f2c0 8167 	blt.w	800975c <lwip_select+0x2fc>
  } else if (nready > 0) {
 800948e:	f040 80c7 	bne.w	8009620 <lwip_select+0x1c0>
    if (timeout && timeout->tv_sec == 0 && timeout->tv_usec == 0) {
 8009492:	b13c      	cbz	r4, 80094a4 <lwip_select+0x44>
 8009494:	e9d4 3200 	ldrd	r3, r2, [r4]
 8009498:	4313      	orrs	r3, r2
 800949a:	d103      	bne.n	80094a4 <lwip_select+0x44>
 800949c:	68a3      	ldr	r3, [r4, #8]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	f000 80be 	beq.w	8009620 <lwip_select+0x1c0>
      memset(&API_SELECT_CB_VAR_REF(select_cb), 0, sizeof(struct lwip_select_cb));
 80094a4:	2100      	movs	r1, #0
 80094a6:	2224      	movs	r2, #36	@ 0x24
 80094a8:	a80f      	add	r0, sp, #60	@ 0x3c
 80094aa:	f008 f94d 	bl	8011748 <memset>
      if (sys_sem_new(&API_SELECT_CB_VAR_REF(select_cb).sem, 0) != ERR_OK) {
 80094ae:	2100      	movs	r1, #0
 80094b0:	a817      	add	r0, sp, #92	@ 0x5c
      API_SELECT_CB_VAR_REF(select_cb).exceptset = exceptset;
 80094b2:	f8cd 904c 	str.w	r9, [sp, #76]	@ 0x4c
      API_SELECT_CB_VAR_REF(select_cb).writeset = writeset;
 80094b6:	e9cd 6711 	strd	r6, r7, [sp, #68]	@ 0x44
      if (sys_sem_new(&API_SELECT_CB_VAR_REF(select_cb).sem, 0) != ERR_OK) {
 80094ba:	f007 fd49 	bl	8010f50 <sys_sem_new>
 80094be:	2800      	cmp	r0, #0
 80094c0:	f040 8148 	bne.w	8009754 <lwip_select+0x2f4>
  LWIP_SOCKET_SELECT_PROTECT(lev);
 80094c4:	48af      	ldr	r0, [pc, #700]	@ (8009784 <lwip_select+0x324>)
 80094c6:	f007 fda5 	bl	8011014 <sys_mutex_lock>
  select_cb->next = select_cb_list;
 80094ca:	4aaf      	ldr	r2, [pc, #700]	@ (8009788 <lwip_select+0x328>)
 80094cc:	6813      	ldr	r3, [r2, #0]
 80094ce:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (select_cb_list != NULL) {
 80094d0:	b10b      	cbz	r3, 80094d6 <lwip_select+0x76>
    select_cb_list->prev = select_cb;
 80094d2:	a90f      	add	r1, sp, #60	@ 0x3c
 80094d4:	6059      	str	r1, [r3, #4]
  select_cb_list = select_cb;
 80094d6:	ab0f      	add	r3, sp, #60	@ 0x3c
  LWIP_SOCKET_SELECT_UNPROTECT(lev);
 80094d8:	48aa      	ldr	r0, [pc, #680]	@ (8009784 <lwip_select+0x324>)
  select_cb_list = select_cb;
 80094da:	6013      	str	r3, [r2, #0]
  LWIP_SOCKET_SELECT_UNPROTECT(lev);
 80094dc:	f007 fda0 	bl	8011020 <sys_mutex_unlock>
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 80094e0:	9b06      	ldr	r3, [sp, #24]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	f000 80ef 	beq.w	80096c6 <lwip_select+0x266>
 80094e8:	f8df 82b0 	ldr.w	r8, [pc, #688]	@ 800979c <lwip_select+0x33c>
 80094ec:	469b      	mov	fp, r3
 80094ee:	9d05      	ldr	r5, [sp, #20]
 80094f0:	46c2      	mov	sl, r8
        if ((readset && FD_ISSET(i, readset)) ||
 80094f2:	116b      	asrs	r3, r5, #5
 80094f4:	f005 021f 	and.w	r2, r5, #31
            (writeset && FD_ISSET(i, writeset)) ||
 80094f8:	4618      	mov	r0, r3
 80094fa:	4611      	mov	r1, r2
        if ((readset && FD_ISSET(i, readset)) ||
 80094fc:	b126      	cbz	r6, 8009508 <lwip_select+0xa8>
 80094fe:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8009502:	40d3      	lsrs	r3, r2
 8009504:	07da      	lsls	r2, r3, #31
 8009506:	d409      	bmi.n	800951c <lwip_select+0xbc>
            (exceptset && FD_ISSET(i, exceptset))) {
 8009508:	116a      	asrs	r2, r5, #5
        if ((readset && FD_ISSET(i, readset)) ||
 800950a:	2f00      	cmp	r7, #0
 800950c:	f000 80a0 	beq.w	8009650 <lwip_select+0x1f0>
            (writeset && FD_ISSET(i, writeset)) ||
 8009510:	f857 3020 	ldr.w	r3, [r7, r0, lsl #2]
 8009514:	40cb      	lsrs	r3, r1
 8009516:	07db      	lsls	r3, r3, #31
 8009518:	f140 809a 	bpl.w	8009650 <lwip_select+0x1f0>
          SYS_ARCH_PROTECT(lev);
 800951c:	f007 fda0 	bl	8011060 <sys_arch_protect>
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8009520:	2d03      	cmp	r5, #3
 8009522:	dc3e      	bgt.n	80095a2 <lwip_select+0x142>
            sock->select_waiting++;
 8009524:	f89a 300e 	ldrb.w	r3, [sl, #14]
 8009528:	3301      	adds	r3, #1
 800952a:	b2db      	uxtb	r3, r3
 800952c:	f88a 300e 	strb.w	r3, [sl, #14]
            if (sock->select_waiting == 0) {
 8009530:	2b00      	cmp	r3, #0
 8009532:	f000 80f0 	beq.w	8009716 <lwip_select+0x2b6>
            SYS_ARCH_UNPROTECT(lev);
 8009536:	f007 fd9f 	bl	8011078 <sys_arch_unprotect>
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 800953a:	3501      	adds	r5, #1
 800953c:	f10a 0a10 	add.w	sl, sl, #16
 8009540:	45ab      	cmp	fp, r5
 8009542:	d1d6      	bne.n	80094f2 <lwip_select+0x92>
        nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
 8009544:	ab0d      	add	r3, sp, #52	@ 0x34
 8009546:	463a      	mov	r2, r7
 8009548:	4631      	mov	r1, r6
 800954a:	9806      	ldr	r0, [sp, #24]
 800954c:	9302      	str	r3, [sp, #8]
 800954e:	ab0b      	add	r3, sp, #44	@ 0x2c
 8009550:	9301      	str	r3, [sp, #4]
 8009552:	ab09      	add	r3, sp, #36	@ 0x24
 8009554:	9300      	str	r3, [sp, #0]
 8009556:	464b      	mov	r3, r9
 8009558:	f7ff f92a 	bl	80087b0 <lwip_selscan>
        if (!nready) {
 800955c:	4680      	mov	r8, r0
 800955e:	2800      	cmp	r0, #0
 8009560:	f040 80d6 	bne.w	8009710 <lwip_select+0x2b0>
          if (timeout == 0) {
 8009564:	2c00      	cmp	r4, #0
 8009566:	f000 80ef 	beq.w	8009748 <lwip_select+0x2e8>
            long msecs_long = ((timeout->tv_sec * 1000) + ((timeout->tv_usec + 500) / 1000));
 800956a:	68a3      	ldr	r3, [r4, #8]
 800956c:	4a87      	ldr	r2, [pc, #540]	@ (800978c <lwip_select+0x32c>)
 800956e:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8009572:	6820      	ldr	r0, [r4, #0]
 8009574:	fb82 1203 	smull	r1, r2, r2, r3
 8009578:	17d9      	asrs	r1, r3, #31
 800957a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800957e:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 8009582:	fb03 1100 	mla	r1, r3, r0, r1
          waitres = sys_arch_sem_wait(SELECT_SEM_PTR(API_SELECT_CB_VAR_REF(select_cb).sem), msectimeout);
 8009586:	a817      	add	r0, sp, #92	@ 0x5c
 8009588:	2901      	cmp	r1, #1
 800958a:	bfb8      	it	lt
 800958c:	2101      	movlt	r1, #1
 800958e:	f007 fcf7 	bl	8010f80 <sys_arch_sem_wait>
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
 8009592:	9d06      	ldr	r5, [sp, #24]
          waitres = sys_arch_sem_wait(SELECT_SEM_PTR(API_SELECT_CB_VAR_REF(select_cb).sem), msectimeout);
 8009594:	4683      	mov	fp, r0
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
 8009596:	2d00      	cmp	r5, #0
 8009598:	f000 80ec 	beq.w	8009774 <lwip_select+0x314>
        nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
 800959c:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80095a0:	e008      	b.n	80095b4 <lwip_select+0x154>
            SYS_ARCH_UNPROTECT(lev);
 80095a2:	f007 fd69 	bl	8011078 <sys_arch_unprotect>
            nready = -1;
 80095a6:	f04f 38ff 	mov.w	r8, #4294967295
            set_errno(EBADF);
 80095aa:	4b79      	ldr	r3, [pc, #484]	@ (8009790 <lwip_select+0x330>)
 80095ac:	2209      	movs	r2, #9
 80095ae:	f04f 0b00 	mov.w	fp, #0
 80095b2:	601a      	str	r2, [r3, #0]
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
 80095b4:	9c05      	ldr	r4, [sp, #20]
            LWIP_ASSERT("sock->select_waiting > 0", sock->select_waiting > 0);
 80095b6:	f8df a1e8 	ldr.w	sl, [pc, #488]	@ 80097a0 <lwip_select+0x340>
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
 80095ba:	f8cd 8014 	str.w	r8, [sp, #20]
 80095be:	f8df 81dc 	ldr.w	r8, [pc, #476]	@ 800979c <lwip_select+0x33c>
            LWIP_ASSERT("sock->select_waiting > 0", sock->select_waiting > 0);
 80095c2:	f8cd b01c 	str.w	fp, [sp, #28]
        if ((readset && FD_ISSET(i, readset)) ||
 80095c6:	2e00      	cmp	r6, #0
 80095c8:	d04f      	beq.n	800966a <lwip_select+0x20a>
 80095ca:	1163      	asrs	r3, r4, #5
 80095cc:	f004 021f 	and.w	r2, r4, #31
 80095d0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80095d4:	40d3      	lsrs	r3, r2
 80095d6:	07d9      	lsls	r1, r3, #31
 80095d8:	d547      	bpl.n	800966a <lwip_select+0x20a>
          SYS_ARCH_PROTECT(lev);
 80095da:	f007 fd41 	bl	8011060 <sys_arch_protect>
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 80095de:	2c03      	cmp	r4, #3
          SYS_ARCH_PROTECT(lev);
 80095e0:	4683      	mov	fp, r0
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 80095e2:	dc5b      	bgt.n	800969c <lwip_select+0x23c>
            LWIP_ASSERT("sock->select_waiting > 0", sock->select_waiting > 0);
 80095e4:	f898 300e 	ldrb.w	r3, [r8, #14]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d060      	beq.n	80096ae <lwip_select+0x24e>
              sock->select_waiting--;
 80095ec:	3b01      	subs	r3, #1
 80095ee:	f888 300e 	strb.w	r3, [r8, #14]
            SYS_ARCH_UNPROTECT(lev);
 80095f2:	4658      	mov	r0, fp
 80095f4:	f007 fd40 	bl	8011078 <sys_arch_unprotect>
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
 80095f8:	3401      	adds	r4, #1
 80095fa:	f108 0810 	add.w	r8, r8, #16
 80095fe:	42ac      	cmp	r4, r5
 8009600:	dbe1      	blt.n	80095c6 <lwip_select+0x166>
      lwip_unlink_select_cb(&API_SELECT_CB_VAR_REF(select_cb));
 8009602:	a80f      	add	r0, sp, #60	@ 0x3c
 8009604:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8009608:	f7ff f98e 	bl	8008928 <lwip_unlink_select_cb>
      sys_sem_free(&API_SELECT_CB_VAR_REF(select_cb).sem);
 800960c:	a817      	add	r0, sp, #92	@ 0x5c
 800960e:	f007 fcd7 	bl	8010fc0 <sys_sem_free>
      if (nready < 0) {
 8009612:	9b05      	ldr	r3, [sp, #20]
 8009614:	2b00      	cmp	r3, #0
 8009616:	f2c0 8093 	blt.w	8009740 <lwip_select+0x2e0>
      if (waitres == SYS_ARCH_TIMEOUT) {
 800961a:	f1bb 3fff 	cmp.w	fp, #4294967295
 800961e:	d169      	bne.n	80096f4 <lwip_select+0x294>
  if (readset) {
 8009620:	b126      	cbz	r6, 800962c <lwip_select+0x1cc>
    *readset = lreadset;
 8009622:	ab09      	add	r3, sp, #36	@ 0x24
 8009624:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009628:	e886 0003 	stmia.w	r6, {r0, r1}
  if (writeset) {
 800962c:	b127      	cbz	r7, 8009638 <lwip_select+0x1d8>
    *writeset = lwriteset;
 800962e:	ab0b      	add	r3, sp, #44	@ 0x2c
 8009630:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009634:	e887 0003 	stmia.w	r7, {r0, r1}
  if (exceptset) {
 8009638:	f1b9 0f00 	cmp.w	r9, #0
 800963c:	d004      	beq.n	8009648 <lwip_select+0x1e8>
    *exceptset = lexceptset;
 800963e:	ab0d      	add	r3, sp, #52	@ 0x34
 8009640:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009644:	e889 0003 	stmia.w	r9, {r0, r1}
}
 8009648:	9805      	ldr	r0, [sp, #20]
 800964a:	b019      	add	sp, #100	@ 0x64
 800964c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            (writeset && FD_ISSET(i, writeset)) ||
 8009650:	f1b9 0f00 	cmp.w	r9, #0
 8009654:	f43f af71 	beq.w	800953a <lwip_select+0xda>
            (exceptset && FD_ISSET(i, exceptset))) {
 8009658:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800965c:	f005 021f 	and.w	r2, r5, #31
 8009660:	40d3      	lsrs	r3, r2
 8009662:	07d8      	lsls	r0, r3, #31
 8009664:	f57f af69 	bpl.w	800953a <lwip_select+0xda>
 8009668:	e758      	b.n	800951c <lwip_select+0xbc>
        if ((readset && FD_ISSET(i, readset)) ||
 800966a:	b13f      	cbz	r7, 800967c <lwip_select+0x21c>
            (writeset && FD_ISSET(i, writeset)) ||
 800966c:	1163      	asrs	r3, r4, #5
 800966e:	f004 021f 	and.w	r2, r4, #31
 8009672:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8009676:	40d3      	lsrs	r3, r2
 8009678:	07da      	lsls	r2, r3, #31
 800967a:	d4ae      	bmi.n	80095da <lwip_select+0x17a>
 800967c:	f1b9 0f00 	cmp.w	r9, #0
 8009680:	d0ba      	beq.n	80095f8 <lwip_select+0x198>
            (exceptset && FD_ISSET(i, exceptset))) {
 8009682:	1163      	asrs	r3, r4, #5
 8009684:	f004 021f 	and.w	r2, r4, #31
 8009688:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800968c:	40d3      	lsrs	r3, r2
 800968e:	07db      	lsls	r3, r3, #31
 8009690:	d5b2      	bpl.n	80095f8 <lwip_select+0x198>
          SYS_ARCH_PROTECT(lev);
 8009692:	f007 fce5 	bl	8011060 <sys_arch_protect>
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8009696:	2c03      	cmp	r4, #3
          SYS_ARCH_PROTECT(lev);
 8009698:	4683      	mov	fp, r0
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800969a:	dda3      	ble.n	80095e4 <lwip_select+0x184>
            SYS_ARCH_UNPROTECT(lev);
 800969c:	f007 fcec 	bl	8011078 <sys_arch_unprotect>
            set_errno(EBADF);
 80096a0:	2309      	movs	r3, #9
 80096a2:	4a3b      	ldr	r2, [pc, #236]	@ (8009790 <lwip_select+0x330>)
 80096a4:	6013      	str	r3, [r2, #0]
            nready = -1;
 80096a6:	f04f 33ff 	mov.w	r3, #4294967295
 80096aa:	9305      	str	r3, [sp, #20]
 80096ac:	e7a4      	b.n	80095f8 <lwip_select+0x198>
            LWIP_ASSERT("sock->select_waiting > 0", sock->select_waiting > 0);
 80096ae:	4b39      	ldr	r3, [pc, #228]	@ (8009794 <lwip_select+0x334>)
 80096b0:	f640 023c 	movw	r2, #2108	@ 0x83c
 80096b4:	4651      	mov	r1, sl
 80096b6:	4838      	ldr	r0, [pc, #224]	@ (8009798 <lwip_select+0x338>)
 80096b8:	f007 feee 	bl	8011498 <iprintf>
            if (sock->select_waiting > 0) {
 80096bc:	f898 300e 	ldrb.w	r3, [r8, #14]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d096      	beq.n	80095f2 <lwip_select+0x192>
 80096c4:	e792      	b.n	80095ec <lwip_select+0x18c>
        nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
 80096c6:	ab0d      	add	r3, sp, #52	@ 0x34
 80096c8:	463a      	mov	r2, r7
 80096ca:	4631      	mov	r1, r6
 80096cc:	9806      	ldr	r0, [sp, #24]
 80096ce:	9302      	str	r3, [sp, #8]
 80096d0:	ab0b      	add	r3, sp, #44	@ 0x2c
 80096d2:	9301      	str	r3, [sp, #4]
 80096d4:	ab09      	add	r3, sp, #36	@ 0x24
 80096d6:	9300      	str	r3, [sp, #0]
 80096d8:	464b      	mov	r3, r9
 80096da:	f7ff f869 	bl	80087b0 <lwip_selscan>
        if (!nready) {
 80096de:	4605      	mov	r5, r0
 80096e0:	2800      	cmp	r0, #0
 80096e2:	d03f      	beq.n	8009764 <lwip_select+0x304>
      lwip_unlink_select_cb(&API_SELECT_CB_VAR_REF(select_cb));
 80096e4:	a80f      	add	r0, sp, #60	@ 0x3c
 80096e6:	f7ff f91f 	bl	8008928 <lwip_unlink_select_cb>
      sys_sem_free(&API_SELECT_CB_VAR_REF(select_cb).sem);
 80096ea:	a817      	add	r0, sp, #92	@ 0x5c
 80096ec:	f007 fc68 	bl	8010fc0 <sys_sem_free>
      if (nready < 0) {
 80096f0:	2d00      	cmp	r5, #0
 80096f2:	db25      	blt.n	8009740 <lwip_select+0x2e0>
        nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
 80096f4:	ab0d      	add	r3, sp, #52	@ 0x34
 80096f6:	9806      	ldr	r0, [sp, #24]
 80096f8:	463a      	mov	r2, r7
 80096fa:	4631      	mov	r1, r6
 80096fc:	9302      	str	r3, [sp, #8]
 80096fe:	ab0b      	add	r3, sp, #44	@ 0x2c
 8009700:	9301      	str	r3, [sp, #4]
 8009702:	ab09      	add	r3, sp, #36	@ 0x24
 8009704:	9300      	str	r3, [sp, #0]
 8009706:	464b      	mov	r3, r9
 8009708:	f7ff f852 	bl	80087b0 <lwip_selscan>
 800970c:	9005      	str	r0, [sp, #20]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: nready=%d\n", nready));
 800970e:	e787      	b.n	8009620 <lwip_select+0x1c0>
 8009710:	f04f 0b00 	mov.w	fp, #0
 8009714:	e74e      	b.n	80095b4 <lwip_select+0x154>
              sock->select_waiting--;
 8009716:	22ff      	movs	r2, #255	@ 0xff
 8009718:	eb08 1805 	add.w	r8, r8, r5, lsl #4
 800971c:	9307      	str	r3, [sp, #28]
 800971e:	f888 200e 	strb.w	r2, [r8, #14]
              SYS_ARCH_UNPROTECT(lev);
 8009722:	f007 fca9 	bl	8011078 <sys_arch_unprotect>
              set_errno(EBUSY);
 8009726:	4a1a      	ldr	r2, [pc, #104]	@ (8009790 <lwip_select+0x330>)
 8009728:	2110      	movs	r1, #16
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
 800972a:	9b07      	ldr	r3, [sp, #28]
              set_errno(EBUSY);
 800972c:	6011      	str	r1, [r2, #0]
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
 800972e:	2d00      	cmp	r5, #0
 8009730:	d038      	beq.n	80097a4 <lwip_select+0x344>
  u32_t waitres = 0;
 8009732:	469b      	mov	fp, r3
              nready = -1;
 8009734:	f04f 38ff 	mov.w	r8, #4294967295
 8009738:	e73c      	b.n	80095b4 <lwip_select+0x154>
    set_errno(EINVAL);
 800973a:	4b15      	ldr	r3, [pc, #84]	@ (8009790 <lwip_select+0x330>)
 800973c:	2216      	movs	r2, #22
 800973e:	601a      	str	r2, [r3, #0]
    return -1;
 8009740:	f04f 33ff 	mov.w	r3, #4294967295
 8009744:	9305      	str	r3, [sp, #20]
 8009746:	e77f      	b.n	8009648 <lwip_select+0x1e8>
          waitres = sys_arch_sem_wait(SELECT_SEM_PTR(API_SELECT_CB_VAR_REF(select_cb).sem), msectimeout);
 8009748:	4641      	mov	r1, r8
 800974a:	a817      	add	r0, sp, #92	@ 0x5c
 800974c:	f007 fc18 	bl	8010f80 <sys_arch_sem_wait>
 8009750:	4683      	mov	fp, r0
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
 8009752:	e72f      	b.n	80095b4 <lwip_select+0x154>
        set_errno(ENOMEM);
 8009754:	4b0e      	ldr	r3, [pc, #56]	@ (8009790 <lwip_select+0x330>)
 8009756:	220c      	movs	r2, #12
 8009758:	601a      	str	r2, [r3, #0]
        return -1;
 800975a:	e7f1      	b.n	8009740 <lwip_select+0x2e0>
    set_errno(EBADF);
 800975c:	4b0c      	ldr	r3, [pc, #48]	@ (8009790 <lwip_select+0x330>)
 800975e:	2209      	movs	r2, #9
 8009760:	601a      	str	r2, [r3, #0]
    return -1;
 8009762:	e7ed      	b.n	8009740 <lwip_select+0x2e0>
          if (timeout == 0) {
 8009764:	2c00      	cmp	r4, #0
 8009766:	f47f af00 	bne.w	800956a <lwip_select+0x10a>
          waitres = sys_arch_sem_wait(SELECT_SEM_PTR(API_SELECT_CB_VAR_REF(select_cb).sem), msectimeout);
 800976a:	9906      	ldr	r1, [sp, #24]
 800976c:	a817      	add	r0, sp, #92	@ 0x5c
 800976e:	f007 fc07 	bl	8010f80 <sys_arch_sem_wait>
 8009772:	4683      	mov	fp, r0
      lwip_unlink_select_cb(&API_SELECT_CB_VAR_REF(select_cb));
 8009774:	a80f      	add	r0, sp, #60	@ 0x3c
 8009776:	f7ff f8d7 	bl	8008928 <lwip_unlink_select_cb>
      sys_sem_free(&API_SELECT_CB_VAR_REF(select_cb).sem);
 800977a:	a817      	add	r0, sp, #92	@ 0x5c
 800977c:	f007 fc20 	bl	8010fc0 <sys_sem_free>
      if (nready < 0) {
 8009780:	e74b      	b.n	800961a <lwip_select+0x1ba>
 8009782:	bf00      	nop
 8009784:	24006be8 	.word	0x24006be8
 8009788:	24006ba4 	.word	0x24006ba4
 800978c:	10624dd3 	.word	0x10624dd3
 8009790:	24009f98 	.word	0x24009f98
 8009794:	08012c70 	.word	0x08012c70
 8009798:	0801241c 	.word	0x0801241c
 800979c:	24006ba8 	.word	0x24006ba8
 80097a0:	08012cd0 	.word	0x08012cd0
      lwip_unlink_select_cb(&API_SELECT_CB_VAR_REF(select_cb));
 80097a4:	a80f      	add	r0, sp, #60	@ 0x3c
 80097a6:	f7ff f8bf 	bl	8008928 <lwip_unlink_select_cb>
      sys_sem_free(&API_SELECT_CB_VAR_REF(select_cb).sem);
 80097aa:	a817      	add	r0, sp, #92	@ 0x5c
 80097ac:	f007 fc08 	bl	8010fc0 <sys_sem_free>
      if (nready < 0) {
 80097b0:	e7c6      	b.n	8009740 <lwip_select+0x2e0>
 80097b2:	bf00      	nop

080097b4 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80097b4:	b580      	push	{r7, lr}
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80097b6:	482f      	ldr	r0, [pc, #188]	@ (8009874 <tcpip_thread+0xc0>)
{
 80097b8:	b082      	sub	sp, #8
  LOCK_TCPIP_CORE();
 80097ba:	f007 fc2b 	bl	8011014 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80097be:	4b2e      	ldr	r3, [pc, #184]	@ (8009878 <tcpip_thread+0xc4>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	b113      	cbz	r3, 80097ca <tcpip_thread+0x16>
    tcpip_init_done(tcpip_init_done_arg);
 80097c4:	4a2d      	ldr	r2, [pc, #180]	@ (800987c <tcpip_thread+0xc8>)
 80097c6:	6810      	ldr	r0, [r2, #0]
 80097c8:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 80097ca:	4d2a      	ldr	r5, [pc, #168]	@ (8009874 <tcpip_thread+0xc0>)
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80097cc:	4e2c      	ldr	r6, [pc, #176]	@ (8009880 <tcpip_thread+0xcc>)
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80097ce:	4f2d      	ldr	r7, [pc, #180]	@ (8009884 <tcpip_thread+0xd0>)
 80097d0:	e010      	b.n	80097f4 <tcpip_thread+0x40>
  } else if (sleeptime == 0) {
 80097d2:	b168      	cbz	r0, 80097f0 <tcpip_thread+0x3c>
  UNLOCK_TCPIP_CORE();
 80097d4:	4628      	mov	r0, r5
 80097d6:	f007 fc23 	bl	8011020 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80097da:	4622      	mov	r2, r4
 80097dc:	a901      	add	r1, sp, #4
 80097de:	4630      	mov	r0, r6
 80097e0:	f007 fb74 	bl	8010ecc <sys_arch_mbox_fetch>
 80097e4:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 80097e6:	4628      	mov	r0, r5
 80097e8:	f007 fc14 	bl	8011014 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80097ec:	3401      	adds	r4, #1
 80097ee:	d111      	bne.n	8009814 <tcpip_thread+0x60>
    sys_check_timeouts();
 80097f0:	f005 fc02 	bl	800eff8 <sys_check_timeouts>
  sleeptime = sys_timeouts_sleeptime();
 80097f4:	f005 fc28 	bl	800f048 <sys_timeouts_sleeptime>
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80097f8:	1c43      	adds	r3, r0, #1
  sleeptime = sys_timeouts_sleeptime();
 80097fa:	4604      	mov	r4, r0
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80097fc:	d1e9      	bne.n	80097d2 <tcpip_thread+0x1e>
    UNLOCK_TCPIP_CORE();
 80097fe:	4628      	mov	r0, r5
 8009800:	f007 fc0e 	bl	8011020 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8009804:	2200      	movs	r2, #0
 8009806:	a901      	add	r1, sp, #4
 8009808:	4630      	mov	r0, r6
 800980a:	f007 fb5f 	bl	8010ecc <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800980e:	4628      	mov	r0, r5
 8009810:	f007 fc00 	bl	8011014 <sys_mutex_lock>
    if (msg == NULL) {
 8009814:	9c01      	ldr	r4, [sp, #4]
 8009816:	b164      	cbz	r4, 8009832 <tcpip_thread+0x7e>
  switch (msg->type) {
 8009818:	7823      	ldrb	r3, [r4, #0]
 800981a:	2b01      	cmp	r3, #1
 800981c:	d01e      	beq.n	800985c <tcpip_thread+0xa8>
 800981e:	2b02      	cmp	r3, #2
 8009820:	d018      	beq.n	8009854 <tcpip_thread+0xa0>
 8009822:	b16b      	cbz	r3, 8009840 <tcpip_thread+0x8c>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009824:	463b      	mov	r3, r7
 8009826:	22cf      	movs	r2, #207	@ 0xcf
 8009828:	4917      	ldr	r1, [pc, #92]	@ (8009888 <tcpip_thread+0xd4>)
 800982a:	4818      	ldr	r0, [pc, #96]	@ (800988c <tcpip_thread+0xd8>)
 800982c:	f007 fe34 	bl	8011498 <iprintf>
      break;
 8009830:	e7e0      	b.n	80097f4 <tcpip_thread+0x40>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009832:	463b      	mov	r3, r7
 8009834:	2291      	movs	r2, #145	@ 0x91
 8009836:	4914      	ldr	r1, [pc, #80]	@ (8009888 <tcpip_thread+0xd4>)
 8009838:	4814      	ldr	r0, [pc, #80]	@ (800988c <tcpip_thread+0xd8>)
 800983a:	f007 fe2d 	bl	8011498 <iprintf>
      continue;
 800983e:	e7d9      	b.n	80097f4 <tcpip_thread+0x40>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8009840:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 8009844:	6860      	ldr	r0, [r4, #4]
 8009846:	4798      	blx	r3
 8009848:	b980      	cbnz	r0, 800986c <tcpip_thread+0xb8>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800984a:	4621      	mov	r1, r4
 800984c:	2009      	movs	r0, #9
 800984e:	f000 fcc7 	bl	800a1e0 <memp_free>
      break;
 8009852:	e7cf      	b.n	80097f4 <tcpip_thread+0x40>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009854:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8009858:	4798      	blx	r3
      break;
 800985a:	e7cb      	b.n	80097f4 <tcpip_thread+0x40>
      msg->msg.cb.function(msg->msg.cb.ctx);
 800985c:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8009860:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8009862:	4621      	mov	r1, r4
 8009864:	2008      	movs	r0, #8
 8009866:	f000 fcbb 	bl	800a1e0 <memp_free>
      break;
 800986a:	e7c3      	b.n	80097f4 <tcpip_thread+0x40>
        pbuf_free(msg->msg.inp.p);
 800986c:	6860      	ldr	r0, [r4, #4]
 800986e:	f000 ff87 	bl	800a780 <pbuf_free>
 8009872:	e7ea      	b.n	800984a <tcpip_thread+0x96>
 8009874:	24006be8 	.word	0x24006be8
 8009878:	24006bf4 	.word	0x24006bf4
 800987c:	24006bf0 	.word	0x24006bf0
 8009880:	24006bec 	.word	0x24006bec
 8009884:	08012e38 	.word	0x08012e38
 8009888:	08012e68 	.word	0x08012e68
 800988c:	0801241c 	.word	0x0801241c

08009890 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8009890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009892:	4607      	mov	r7, r0
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009894:	4811      	ldr	r0, [pc, #68]	@ (80098dc <tcpip_inpkt+0x4c>)
{
 8009896:	460e      	mov	r6, r1
 8009898:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800989a:	f007 fb4f 	bl	8010f3c <sys_mbox_valid>
 800989e:	b178      	cbz	r0, 80098c0 <tcpip_inpkt+0x30>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80098a0:	2009      	movs	r0, #9
 80098a2:	f000 fc57 	bl	800a154 <memp_malloc>
  if (msg == NULL) {
 80098a6:	4604      	mov	r4, r0
 80098a8:	b1a8      	cbz	r0, 80098d6 <tcpip_inpkt+0x46>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 80098aa:	2300      	movs	r3, #0
  msg->msg.inp.p = p;
 80098ac:	6047      	str	r7, [r0, #4]
  msg->msg.inp.netif = inp;
 80098ae:	6086      	str	r6, [r0, #8]
  msg->msg.inp.input_fn = input_fn;
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80098b0:	4601      	mov	r1, r0
  msg->type = TCPIP_MSG_INPKT;
 80098b2:	7003      	strb	r3, [r0, #0]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80098b4:	4809      	ldr	r0, [pc, #36]	@ (80098dc <tcpip_inpkt+0x4c>)
  msg->msg.inp.input_fn = input_fn;
 80098b6:	60e5      	str	r5, [r4, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80098b8:	f007 fafe 	bl	8010eb8 <sys_mbox_trypost>
 80098bc:	b938      	cbnz	r0, 80098ce <tcpip_inpkt+0x3e>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80098be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80098c0:	4b07      	ldr	r3, [pc, #28]	@ (80098e0 <tcpip_inpkt+0x50>)
 80098c2:	22fc      	movs	r2, #252	@ 0xfc
 80098c4:	4907      	ldr	r1, [pc, #28]	@ (80098e4 <tcpip_inpkt+0x54>)
 80098c6:	4808      	ldr	r0, [pc, #32]	@ (80098e8 <tcpip_inpkt+0x58>)
 80098c8:	f007 fde6 	bl	8011498 <iprintf>
 80098cc:	e7e8      	b.n	80098a0 <tcpip_inpkt+0x10>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80098ce:	4621      	mov	r1, r4
 80098d0:	2009      	movs	r0, #9
 80098d2:	f000 fc85 	bl	800a1e0 <memp_free>
    return ERR_MEM;
 80098d6:	f04f 30ff 	mov.w	r0, #4294967295
}
 80098da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098dc:	24006bec 	.word	0x24006bec
 80098e0:	08012e38 	.word	0x08012e38
 80098e4:	08012e88 	.word	0x08012e88
 80098e8:	0801241c 	.word	0x0801241c

080098ec <tcpip_input>:
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80098ec:	f891 302d 	ldrb.w	r3, [r1, #45]	@ 0x2d
 80098f0:	f013 0f18 	tst.w	r3, #24
 80098f4:	d002      	beq.n	80098fc <tcpip_input+0x10>
    return tcpip_inpkt(p, inp, ethernet_input);
 80098f6:	4a03      	ldr	r2, [pc, #12]	@ (8009904 <tcpip_input+0x18>)
 80098f8:	f7ff bfca 	b.w	8009890 <tcpip_inpkt>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 80098fc:	4a02      	ldr	r2, [pc, #8]	@ (8009908 <tcpip_input+0x1c>)
 80098fe:	f7ff bfc7 	b.w	8009890 <tcpip_inpkt>
 8009902:	bf00      	nop
 8009904:	08010d65 	.word	0x08010d65
 8009908:	080101a1 	.word	0x080101a1

0800990c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800990c:	b570      	push	{r4, r5, r6, lr}
 800990e:	4606      	mov	r6, r0
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009910:	4811      	ldr	r0, [pc, #68]	@ (8009958 <tcpip_try_callback+0x4c>)
{
 8009912:	460d      	mov	r5, r1
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009914:	f007 fb12 	bl	8010f3c <sys_mbox_valid>
 8009918:	b170      	cbz	r0, 8009938 <tcpip_try_callback+0x2c>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800991a:	2008      	movs	r0, #8
 800991c:	f000 fc1a 	bl	800a154 <memp_malloc>
  if (msg == NULL) {
 8009920:	4604      	mov	r4, r0
 8009922:	b1a8      	cbz	r0, 8009950 <tcpip_try_callback+0x44>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8009924:	2301      	movs	r3, #1
  msg->msg.cb.function = function;
  msg->msg.cb.ctx = ctx;

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009926:	4601      	mov	r1, r0
  msg->msg.cb.ctx = ctx;
 8009928:	e9c0 6501 	strd	r6, r5, [r0, #4]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800992c:	480a      	ldr	r0, [pc, #40]	@ (8009958 <tcpip_try_callback+0x4c>)
  msg->type = TCPIP_MSG_CALLBACK;
 800992e:	7023      	strb	r3, [r4, #0]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009930:	f007 fac2 	bl	8010eb8 <sys_mbox_trypost>
 8009934:	b940      	cbnz	r0, 8009948 <tcpip_try_callback+0x3c>
    memp_free(MEMP_TCPIP_MSG_API, msg);
    return ERR_MEM;
  }
  return ERR_OK;
}
 8009936:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009938:	4b08      	ldr	r3, [pc, #32]	@ (800995c <tcpip_try_callback+0x50>)
 800993a:	f240 125d 	movw	r2, #349	@ 0x15d
 800993e:	4908      	ldr	r1, [pc, #32]	@ (8009960 <tcpip_try_callback+0x54>)
 8009940:	4808      	ldr	r0, [pc, #32]	@ (8009964 <tcpip_try_callback+0x58>)
 8009942:	f007 fda9 	bl	8011498 <iprintf>
 8009946:	e7e8      	b.n	800991a <tcpip_try_callback+0xe>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8009948:	4621      	mov	r1, r4
 800994a:	2008      	movs	r0, #8
 800994c:	f000 fc48 	bl	800a1e0 <memp_free>
    return ERR_MEM;
 8009950:	f04f 30ff 	mov.w	r0, #4294967295
}
 8009954:	bd70      	pop	{r4, r5, r6, pc}
 8009956:	bf00      	nop
 8009958:	24006bec 	.word	0x24006bec
 800995c:	08012e38 	.word	0x08012e38
 8009960:	08012e88 	.word	0x08012e88
 8009964:	0801241c 	.word	0x0801241c

08009968 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8009968:	b570      	push	{r4, r5, r6, lr}
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800996a:	4e06      	ldr	r6, [pc, #24]	@ (8009984 <tcpip_send_msg_wait_sem+0x1c>)
{
 800996c:	460d      	mov	r5, r1
 800996e:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 8009970:	4630      	mov	r0, r6
 8009972:	f007 fb4f 	bl	8011014 <sys_mutex_lock>
  fn(apimsg);
 8009976:	4628      	mov	r0, r5
 8009978:	47a0      	blx	r4
  UNLOCK_TCPIP_CORE();
 800997a:	4630      	mov	r0, r6
 800997c:	f007 fb50 	bl	8011020 <sys_mutex_unlock>
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8009980:	2000      	movs	r0, #0
 8009982:	bd70      	pop	{r4, r5, r6, pc}
 8009984:	24006be8 	.word	0x24006be8

08009988 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8009988:	b530      	push	{r4, r5, lr}
 800998a:	b083      	sub	sp, #12
 800998c:	4605      	mov	r5, r0
 800998e:	460c      	mov	r4, r1
  lwip_init();
 8009990:	f000 f8b2 	bl	8009af8 <lwip_init>

  tcpip_init_done = initfunc;
 8009994:	4a15      	ldr	r2, [pc, #84]	@ (80099ec <tcpip_init+0x64>)
  tcpip_init_done_arg = arg;
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8009996:	2106      	movs	r1, #6
  tcpip_init_done_arg = arg;
 8009998:	4b15      	ldr	r3, [pc, #84]	@ (80099f0 <tcpip_init+0x68>)
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800999a:	4816      	ldr	r0, [pc, #88]	@ (80099f4 <tcpip_init+0x6c>)
  tcpip_init_done = initfunc;
 800999c:	6015      	str	r5, [r2, #0]
  tcpip_init_done_arg = arg;
 800999e:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80099a0:	f007 fa6a 	bl	8010e78 <sys_mbox_new>
 80099a4:	b968      	cbnz	r0, 80099c2 <tcpip_init+0x3a>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80099a6:	4814      	ldr	r0, [pc, #80]	@ (80099f8 <tcpip_init+0x70>)
 80099a8:	f007 fb24 	bl	8010ff4 <sys_mutex_new>
 80099ac:	b9a8      	cbnz	r0, 80099da <tcpip_init+0x52>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80099ae:	2200      	movs	r2, #0
 80099b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80099b4:	4911      	ldr	r1, [pc, #68]	@ (80099fc <tcpip_init+0x74>)
 80099b6:	9200      	str	r2, [sp, #0]
 80099b8:	4811      	ldr	r0, [pc, #68]	@ (8009a00 <tcpip_init+0x78>)
 80099ba:	f007 fb35 	bl	8011028 <sys_thread_new>
}
 80099be:	b003      	add	sp, #12
 80099c0:	bd30      	pop	{r4, r5, pc}
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80099c2:	4b10      	ldr	r3, [pc, #64]	@ (8009a04 <tcpip_init+0x7c>)
 80099c4:	f240 2261 	movw	r2, #609	@ 0x261
 80099c8:	490f      	ldr	r1, [pc, #60]	@ (8009a08 <tcpip_init+0x80>)
 80099ca:	4810      	ldr	r0, [pc, #64]	@ (8009a0c <tcpip_init+0x84>)
 80099cc:	f007 fd64 	bl	8011498 <iprintf>
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80099d0:	4809      	ldr	r0, [pc, #36]	@ (80099f8 <tcpip_init+0x70>)
 80099d2:	f007 fb0f 	bl	8010ff4 <sys_mutex_new>
 80099d6:	2800      	cmp	r0, #0
 80099d8:	d0e9      	beq.n	80099ae <tcpip_init+0x26>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80099da:	4b0a      	ldr	r3, [pc, #40]	@ (8009a04 <tcpip_init+0x7c>)
 80099dc:	f240 2265 	movw	r2, #613	@ 0x265
 80099e0:	490b      	ldr	r1, [pc, #44]	@ (8009a10 <tcpip_init+0x88>)
 80099e2:	480a      	ldr	r0, [pc, #40]	@ (8009a0c <tcpip_init+0x84>)
 80099e4:	f007 fd58 	bl	8011498 <iprintf>
 80099e8:	e7e1      	b.n	80099ae <tcpip_init+0x26>
 80099ea:	bf00      	nop
 80099ec:	24006bf4 	.word	0x24006bf4
 80099f0:	24006bf0 	.word	0x24006bf0
 80099f4:	24006bec 	.word	0x24006bec
 80099f8:	24006be8 	.word	0x24006be8
 80099fc:	080097b5 	.word	0x080097b5
 8009a00:	08012ee0 	.word	0x08012ee0
 8009a04:	08012e38 	.word	0x08012e38
 8009a08:	08012e98 	.word	0x08012e98
 8009a0c:	0801241c 	.word	0x0801241c
 8009a10:	08012ebc 	.word	0x08012ebc

08009a14 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 8009a14:	ba40      	rev16	r0, r0
}
 8009a16:	b280      	uxth	r0, r0
 8009a18:	4770      	bx	lr
 8009a1a:	bf00      	nop

08009a1c <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
}
 8009a1c:	ba00      	rev	r0, r0
 8009a1e:	4770      	bx	lr

08009a20 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8009a20:	b530      	push	{r4, r5, lr}
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
 8009a22:	f04f 0e00 	mov.w	lr, #0
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);
 8009a26:	f000 0501 	and.w	r5, r0, #1

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8009a2a:	4571      	cmp	r1, lr
 8009a2c:	dd05      	ble.n	8009a3a <lwip_standard_chksum+0x1a>
 8009a2e:	b125      	cbz	r5, 8009a3a <lwip_standard_chksum+0x1a>
    ((u8_t *)&t)[1] = *pb++;
 8009a30:	f810 3b01 	ldrb.w	r3, [r0], #1
    len--;
 8009a34:	3901      	subs	r1, #1
    ((u8_t *)&t)[1] = *pb++;
 8009a36:	f363 2e1f 	bfi	lr, r3, #8, #24
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
 8009a3a:	2901      	cmp	r1, #1
 8009a3c:	dd27      	ble.n	8009a8e <lwip_standard_chksum+0x6e>
 8009a3e:	3902      	subs	r1, #2
  u32_t sum = 0;
 8009a40:	2300      	movs	r3, #0
 8009a42:	084c      	lsrs	r4, r1, #1
 8009a44:	f104 0c01 	add.w	ip, r4, #1
 8009a48:	eb00 0c4c 	add.w	ip, r0, ip, lsl #1
    sum += *ps++;
 8009a4c:	f830 2b02 	ldrh.w	r2, [r0], #2
  while (len > 1) {
 8009a50:	4584      	cmp	ip, r0
    sum += *ps++;
 8009a52:	4413      	add	r3, r2
  while (len > 1) {
 8009a54:	d1fa      	bne.n	8009a4c <lwip_standard_chksum+0x2c>
    len -= 2;
 8009a56:	ebc4 74c4 	rsb	r4, r4, r4, lsl #31
 8009a5a:	eb01 0144 	add.w	r1, r1, r4, lsl #1
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8009a5e:	2901      	cmp	r1, #1
 8009a60:	d105      	bne.n	8009a6e <lwip_standard_chksum+0x4e>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8009a62:	f89c 2000 	ldrb.w	r2, [ip]
 8009a66:	f362 0e07 	bfi	lr, r2, #0, #8
 8009a6a:	fa1f fe8e 	uxth.w	lr, lr
  }

  /* Add end bytes */
  sum += t;
 8009a6e:	449e      	add	lr, r3

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8009a70:	fa1f f38e 	uxth.w	r3, lr
 8009a74:	eb03 431e 	add.w	r3, r3, lr, lsr #16
  sum = FOLD_U32T(sum);
 8009a78:	b298      	uxth	r0, r3
 8009a7a:	eb00 4013 	add.w	r0, r0, r3, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 8009a7e:	b125      	cbz	r5, 8009a8a <lwip_standard_chksum+0x6a>
    sum = SWAP_BYTES_IN_WORD(sum);
 8009a80:	0203      	lsls	r3, r0, #8
 8009a82:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8009a86:	b29b      	uxth	r3, r3
 8009a88:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 8009a8a:	b280      	uxth	r0, r0
 8009a8c:	bd30      	pop	{r4, r5, pc}
  ps = (const u16_t *)(const void *)pb;
 8009a8e:	4684      	mov	ip, r0
  u32_t sum = 0;
 8009a90:	2300      	movs	r3, #0
 8009a92:	e7e4      	b.n	8009a5e <lwip_standard_chksum+0x3e>

08009a94 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8009a94:	b508      	push	{r3, lr}
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8009a96:	f7ff ffc3 	bl	8009a20 <lwip_standard_chksum>
 8009a9a:	43c0      	mvns	r0, r0
}
 8009a9c:	b280      	uxth	r0, r0
 8009a9e:	bd08      	pop	{r3, pc}

08009aa0 <inet_chksum_pbuf>:
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;

  acc = 0;
  for (q = p; q != NULL; q = q->next) {
 8009aa0:	b338      	cbz	r0, 8009af2 <inet_chksum_pbuf+0x52>
{
 8009aa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int swapped = 0;
 8009aa4:	2700      	movs	r7, #0
 8009aa6:	4605      	mov	r5, r0
  acc = 0;
 8009aa8:	463c      	mov	r4, r7
    acc += LWIP_CHKSUM(q->payload, q->len);
 8009aaa:	896e      	ldrh	r6, [r5, #10]
 8009aac:	6868      	ldr	r0, [r5, #4]
 8009aae:	4631      	mov	r1, r6
 8009ab0:	f7ff ffb6 	bl	8009a20 <lwip_standard_chksum>
 8009ab4:	4404      	add	r4, r0
    acc = FOLD_U32T(acc);
    if (q->len % 2 != 0) {
 8009ab6:	f016 0f01 	tst.w	r6, #1
    acc = FOLD_U32T(acc);
 8009aba:	b2a3      	uxth	r3, r4
 8009abc:	eb03 4414 	add.w	r4, r3, r4, lsr #16
      swapped = !swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
 8009ac0:	ea4f 2304 	mov.w	r3, r4, lsl #8
 8009ac4:	f3c4 2207 	ubfx	r2, r4, #8, #8
    if (q->len % 2 != 0) {
 8009ac8:	d004      	beq.n	8009ad4 <inet_chksum_pbuf+0x34>
      acc = SWAP_BYTES_IN_WORD(acc);
 8009aca:	b29b      	uxth	r3, r3
 8009acc:	f087 0701 	eor.w	r7, r7, #1
 8009ad0:	ea43 0402 	orr.w	r4, r3, r2
  for (q = p; q != NULL; q = q->next) {
 8009ad4:	682d      	ldr	r5, [r5, #0]
 8009ad6:	2d00      	cmp	r5, #0
 8009ad8:	d1e7      	bne.n	8009aaa <inet_chksum_pbuf+0xa>
    }
  }

  if (swapped) {
 8009ada:	b13f      	cbz	r7, 8009aec <inet_chksum_pbuf+0x4c>
    acc = SWAP_BYTES_IN_WORD(acc);
 8009adc:	0220      	lsls	r0, r4, #8
 8009ade:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8009ae2:	b280      	uxth	r0, r0
 8009ae4:	4320      	orrs	r0, r4
  }
  return (u16_t)~(acc & 0xffffUL);
 8009ae6:	43c0      	mvns	r0, r0
 8009ae8:	b280      	uxth	r0, r0
}
 8009aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return (u16_t)~(acc & 0xffffUL);
 8009aec:	43e4      	mvns	r4, r4
 8009aee:	b2a0      	uxth	r0, r4
}
 8009af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  for (q = p; q != NULL; q = q->next) {
 8009af2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
}
 8009af6:	4770      	bx	lr

08009af8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8009af8:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8009afa:	f007 fa6f 	bl	8010fdc <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8009afe:	f000 f80d 	bl	8009b1c <mem_init>
  memp_init();
 8009b02:	f000 fae5 	bl	800a0d0 <memp_init>
  pbuf_init();
  netif_init();
 8009b06:	f000 fbbf 	bl	800a288 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8009b0a:	f005 faaf 	bl	800f06c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8009b0e:	f001 f9df 	bl	800aed0 <tcp_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 8009b12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 8009b16:	f005 ba55 	b.w	800efc4 <sys_timeouts_init>
 8009b1a:	bf00      	nop

08009b1c <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8009b1c:	4b13      	ldr	r3, [pc, #76]	@ (8009b6c <mem_init+0x50>)
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
 8009b1e:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8009b22:	4813      	ldr	r0, [pc, #76]	@ (8009b70 <mem_init+0x54>)
  mem->next = MEM_SIZE_ALIGNED;
 8009b24:	f647 51e8 	movw	r1, #32232	@ 0x7de8
{
 8009b28:	b510      	push	{r4, lr}
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8009b2a:	6003      	str	r3, [r0, #0]
  mem->prev = 0;
  mem->used = 0;
 8009b2c:	2400      	movs	r4, #0
  mem->next = MEM_SIZE_ALIGNED;
 8009b2e:	f8c2 1200 	str.w	r1, [r2, #512]	@ 0x200
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8009b32:	4419      	add	r1, r3
 8009b34:	4a0f      	ldr	r2, [pc, #60]	@ (8009b74 <mem_init+0x58>)
  mem->used = 0;
 8009b36:	711c      	strb	r4, [r3, #4]
  ram_end->used = 1;
  ram_end->next = MEM_SIZE_ALIGNED;
 8009b38:	480f      	ldr	r0, [pc, #60]	@ (8009b78 <mem_init+0x5c>)
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8009b3a:	6011      	str	r1, [r2, #0]
  ram_end->used = 1;
 8009b3c:	2101      	movs	r1, #1
 8009b3e:	4a0f      	ldr	r2, [pc, #60]	@ (8009b7c <mem_init+0x60>)
  ram_end->next = MEM_SIZE_ALIGNED;
 8009b40:	4c0f      	ldr	r4, [pc, #60]	@ (8009b80 <mem_init+0x64>)
 8009b42:	f8c0 4fe8 	str.w	r4, [r0, #4072]	@ 0xfe8
  ram_end->used = 1;
 8009b46:	f882 10ec 	strb.w	r1, [r2, #236]	@ 0xec
  ram_end->prev = MEM_SIZE_ALIGNED;
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8009b4a:	4a0e      	ldr	r2, [pc, #56]	@ (8009b84 <mem_init+0x68>)

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8009b4c:	480e      	ldr	r0, [pc, #56]	@ (8009b88 <mem_init+0x6c>)
  lfree = (struct mem *)(void *)ram;
 8009b4e:	6013      	str	r3, [r2, #0]
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8009b50:	f007 fa50 	bl	8010ff4 <sys_mutex_new>
 8009b54:	b900      	cbnz	r0, 8009b58 <mem_init+0x3c>
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8009b56:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8009b58:	4b0c      	ldr	r3, [pc, #48]	@ (8009b8c <mem_init+0x70>)
 8009b5a:	f240 221f 	movw	r2, #543	@ 0x21f
 8009b5e:	490c      	ldr	r1, [pc, #48]	@ (8009b90 <mem_init+0x74>)
 8009b60:	480c      	ldr	r0, [pc, #48]	@ (8009b94 <mem_init+0x78>)
}
 8009b62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8009b66:	f007 bc97 	b.w	8011498 <iprintf>
 8009b6a:	bf00      	nop
 8009b6c:	30000200 	.word	0x30000200
 8009b70:	24006c1c 	.word	0x24006c1c
 8009b74:	24006c18 	.word	0x24006c18
 8009b78:	30007000 	.word	0x30007000
 8009b7c:	30007f00 	.word	0x30007f00
 8009b80:	7de87de8 	.word	0x7de87de8
 8009b84:	24006c10 	.word	0x24006c10
 8009b88:	24006c14 	.word	0x24006c14
 8009b8c:	08012ef0 	.word	0x08012ef0
 8009b90:	08012f20 	.word	0x08012f20
 8009b94:	0801241c 	.word	0x0801241c

08009b98 <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8009b98:	2800      	cmp	r0, #0
 8009b9a:	f000 8099 	beq.w	8009cd0 <mem_free+0x138>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8009b9e:	0783      	lsls	r3, r0, #30
{
 8009ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ba4:	4604      	mov	r4, r0
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8009ba6:	f040 808e 	bne.w	8009cc6 <mem_free+0x12e>

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8009baa:	4e62      	ldr	r6, [pc, #392]	@ (8009d34 <mem_free+0x19c>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009bac:	f1a0 0508 	sub.w	r5, r0, #8
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8009bb0:	6833      	ldr	r3, [r6, #0]
 8009bb2:	42ab      	cmp	r3, r5
 8009bb4:	d805      	bhi.n	8009bc2 <mem_free+0x2a>
 8009bb6:	4f60      	ldr	r7, [pc, #384]	@ (8009d38 <mem_free+0x1a0>)
 8009bb8:	f100 030c 	add.w	r3, r0, #12
 8009bbc:	683a      	ldr	r2, [r7, #0]
 8009bbe:	429a      	cmp	r2, r3
 8009bc0:	d20c      	bcs.n	8009bdc <mem_free+0x44>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8009bc2:	4b5e      	ldr	r3, [pc, #376]	@ (8009d3c <mem_free+0x1a4>)
 8009bc4:	f240 227f 	movw	r2, #639	@ 0x27f
 8009bc8:	495d      	ldr	r1, [pc, #372]	@ (8009d40 <mem_free+0x1a8>)
 8009bca:	485e      	ldr	r0, [pc, #376]	@ (8009d44 <mem_free+0x1ac>)
 8009bcc:	f007 fc64 	bl	8011498 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009bd0:	f007 fa46 	bl	8011060 <sys_arch_protect>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8009bd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    MEM_STATS_INC_LOCKED(illegal);
 8009bd8:	f007 ba4e 	b.w	8011078 <sys_arch_unprotect>
  LWIP_MEM_FREE_PROTECT();
 8009bdc:	485a      	ldr	r0, [pc, #360]	@ (8009d48 <mem_free+0x1b0>)
 8009bde:	f007 fa19 	bl	8011014 <sys_mutex_lock>
  if (!mem->used) {
 8009be2:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	f000 809e 	beq.w	8009d28 <mem_free+0x190>
  pmem = ptr_to_mem(mem->prev);
 8009bec:	f834 1c06 	ldrh.w	r1, [r4, #-6]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009bf0:	f647 50e8 	movw	r0, #32232	@ 0x7de8
  return (mem_size_t)((u8_t *)mem - ram);
 8009bf4:	6832      	ldr	r2, [r6, #0]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009bf6:	4281      	cmp	r1, r0
  nmem = ptr_to_mem(mem->next);
 8009bf8:	f834 3c08 	ldrh.w	r3, [r4, #-8]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009bfc:	d808      	bhi.n	8009c10 <mem_free+0x78>
 8009bfe:	4283      	cmp	r3, r0
 8009c00:	d806      	bhi.n	8009c10 <mem_free+0x78>
  return (mem_size_t)((u8_t *)mem - ram);
 8009c02:	1aa8      	subs	r0, r5, r2
 8009c04:	b280      	uxth	r0, r0
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009c06:	4288      	cmp	r0, r1
 8009c08:	d012      	beq.n	8009c30 <mem_free+0x98>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009c0a:	5a51      	ldrh	r1, [r2, r1]
 8009c0c:	4281      	cmp	r1, r0
 8009c0e:	d00f      	beq.n	8009c30 <mem_free+0x98>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8009c10:	4b4a      	ldr	r3, [pc, #296]	@ (8009d3c <mem_free+0x1a4>)
 8009c12:	f240 2295 	movw	r2, #661	@ 0x295
 8009c16:	494d      	ldr	r1, [pc, #308]	@ (8009d4c <mem_free+0x1b4>)
 8009c18:	484a      	ldr	r0, [pc, #296]	@ (8009d44 <mem_free+0x1ac>)
 8009c1a:	f007 fc3d 	bl	8011498 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8009c1e:	484a      	ldr	r0, [pc, #296]	@ (8009d48 <mem_free+0x1b0>)
 8009c20:	f007 f9fe 	bl	8011020 <sys_mutex_unlock>
    MEM_STATS_INC_LOCKED(illegal);
 8009c24:	f007 fa1c 	bl	8011060 <sys_arch_protect>
}
 8009c28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    MEM_STATS_INC_LOCKED(illegal);
 8009c2c:	f007 ba24 	b.w	8011078 <sys_arch_unprotect>
  return (struct mem *)(void *)&ram[ptr];
 8009c30:	18d1      	adds	r1, r2, r3
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009c32:	f8d7 c000 	ldr.w	ip, [r7]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009c36:	4561      	cmp	r1, ip
 8009c38:	d002      	beq.n	8009c40 <mem_free+0xa8>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009c3a:	8849      	ldrh	r1, [r1, #2]
 8009c3c:	4281      	cmp	r1, r0
 8009c3e:	d1e7      	bne.n	8009c10 <mem_free+0x78>
  if (mem < lfree) {
 8009c40:	f8df 8124 	ldr.w	r8, [pc, #292]	@ 8009d68 <mem_free+0x1d0>
  mem->used = 0;
 8009c44:	2100      	movs	r1, #0
 8009c46:	f804 1c04 	strb.w	r1, [r4, #-4]
  if (mem < lfree) {
 8009c4a:	f8d8 1000 	ldr.w	r1, [r8]
 8009c4e:	42a9      	cmp	r1, r5
    lfree = mem;
 8009c50:	bf88      	it	hi
 8009c52:	f8c8 5000 	strhi.w	r5, [r8]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8009c56:	4295      	cmp	r5, r2
 8009c58:	d33b      	bcc.n	8009cd2 <mem_free+0x13a>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8009c5a:	4565      	cmp	r5, ip
 8009c5c:	d243      	bcs.n	8009ce6 <mem_free+0x14e>
  return (struct mem *)(void *)&ram[ptr];
 8009c5e:	6832      	ldr	r2, [r6, #0]
 8009c60:	4413      	add	r3, r2
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8009c62:	429d      	cmp	r5, r3
 8009c64:	d014      	beq.n	8009c90 <mem_free+0xf8>
 8009c66:	7919      	ldrb	r1, [r3, #4]
 8009c68:	b991      	cbnz	r1, 8009c90 <mem_free+0xf8>
 8009c6a:	6839      	ldr	r1, [r7, #0]
 8009c6c:	428b      	cmp	r3, r1
 8009c6e:	d00f      	beq.n	8009c90 <mem_free+0xf8>
    if (lfree == nmem) {
 8009c70:	f8d8 1000 	ldr.w	r1, [r8]
 8009c74:	428b      	cmp	r3, r1
    mem->next = nmem->next;
 8009c76:	881b      	ldrh	r3, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8009c78:	f647 51e8 	movw	r1, #32232	@ 0x7de8
      lfree = mem;
 8009c7c:	bf08      	it	eq
 8009c7e:	f8c8 5000 	streq.w	r5, [r8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8009c82:	428b      	cmp	r3, r1
    mem->next = nmem->next;
 8009c84:	f824 3c08 	strh.w	r3, [r4, #-8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8009c88:	d002      	beq.n	8009c90 <mem_free+0xf8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8009c8a:	4413      	add	r3, r2
  return (mem_size_t)((u8_t *)mem - ram);
 8009c8c:	1aa9      	subs	r1, r5, r2
 8009c8e:	8059      	strh	r1, [r3, #2]
  pmem = ptr_to_mem(mem->prev);
 8009c90:	f834 1c06 	ldrh.w	r1, [r4, #-6]
  return (struct mem *)(void *)&ram[ptr];
 8009c94:	1853      	adds	r3, r2, r1
  if (pmem != mem && pmem->used == 0) {
 8009c96:	429d      	cmp	r5, r3
 8009c98:	d010      	beq.n	8009cbc <mem_free+0x124>
 8009c9a:	7918      	ldrb	r0, [r3, #4]
 8009c9c:	b970      	cbnz	r0, 8009cbc <mem_free+0x124>
    if (lfree == mem) {
 8009c9e:	f8d8 0000 	ldr.w	r0, [r8]
 8009ca2:	4285      	cmp	r5, r0
    if (mem->next != MEM_SIZE_ALIGNED) {
 8009ca4:	f647 50e8 	movw	r0, #32232	@ 0x7de8
      lfree = pmem;
 8009ca8:	bf08      	it	eq
 8009caa:	f8c8 3000 	streq.w	r3, [r8]
    pmem->next = mem->next;
 8009cae:	f834 3c08 	ldrh.w	r3, [r4, #-8]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8009cb2:	4283      	cmp	r3, r0
    pmem->next = mem->next;
 8009cb4:	5253      	strh	r3, [r2, r1]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8009cb6:	d001      	beq.n	8009cbc <mem_free+0x124>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8009cb8:	441a      	add	r2, r3
 8009cba:	8051      	strh	r1, [r2, #2]
  LWIP_MEM_FREE_UNPROTECT();
 8009cbc:	4822      	ldr	r0, [pc, #136]	@ (8009d48 <mem_free+0x1b0>)
}
 8009cbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_MEM_FREE_UNPROTECT();
 8009cc2:	f007 b9ad 	b.w	8011020 <sys_mutex_unlock>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8009cc6:	4b1d      	ldr	r3, [pc, #116]	@ (8009d3c <mem_free+0x1a4>)
 8009cc8:	f240 2273 	movw	r2, #627	@ 0x273
 8009ccc:	4920      	ldr	r1, [pc, #128]	@ (8009d50 <mem_free+0x1b8>)
 8009cce:	e77c      	b.n	8009bca <mem_free+0x32>
 8009cd0:	4770      	bx	lr
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8009cd2:	4b1a      	ldr	r3, [pc, #104]	@ (8009d3c <mem_free+0x1a4>)
 8009cd4:	f240 12df 	movw	r2, #479	@ 0x1df
 8009cd8:	491e      	ldr	r1, [pc, #120]	@ (8009d54 <mem_free+0x1bc>)
 8009cda:	481a      	ldr	r0, [pc, #104]	@ (8009d44 <mem_free+0x1ac>)
 8009cdc:	f007 fbdc 	bl	8011498 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	429d      	cmp	r5, r3
 8009ce4:	d306      	bcc.n	8009cf4 <mem_free+0x15c>
 8009ce6:	4b15      	ldr	r3, [pc, #84]	@ (8009d3c <mem_free+0x1a4>)
 8009ce8:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8009cec:	491a      	ldr	r1, [pc, #104]	@ (8009d58 <mem_free+0x1c0>)
 8009cee:	4815      	ldr	r0, [pc, #84]	@ (8009d44 <mem_free+0x1ac>)
 8009cf0:	f007 fbd2 	bl	8011498 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8009cf4:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8009cf8:	b133      	cbz	r3, 8009d08 <mem_free+0x170>
 8009cfa:	4b10      	ldr	r3, [pc, #64]	@ (8009d3c <mem_free+0x1a4>)
 8009cfc:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8009d00:	4916      	ldr	r1, [pc, #88]	@ (8009d5c <mem_free+0x1c4>)
 8009d02:	4810      	ldr	r0, [pc, #64]	@ (8009d44 <mem_free+0x1ac>)
 8009d04:	f007 fbc8 	bl	8011498 <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8009d08:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 8009d0c:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d9a4      	bls.n	8009c5e <mem_free+0xc6>
 8009d14:	4b09      	ldr	r3, [pc, #36]	@ (8009d3c <mem_free+0x1a4>)
 8009d16:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8009d1a:	4911      	ldr	r1, [pc, #68]	@ (8009d60 <mem_free+0x1c8>)
 8009d1c:	4809      	ldr	r0, [pc, #36]	@ (8009d44 <mem_free+0x1ac>)
 8009d1e:	f007 fbbb 	bl	8011498 <iprintf>
  nmem = ptr_to_mem(mem->next);
 8009d22:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 8009d26:	e79a      	b.n	8009c5e <mem_free+0xc6>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8009d28:	4b04      	ldr	r3, [pc, #16]	@ (8009d3c <mem_free+0x1a4>)
 8009d2a:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8009d2e:	490d      	ldr	r1, [pc, #52]	@ (8009d64 <mem_free+0x1cc>)
 8009d30:	e772      	b.n	8009c18 <mem_free+0x80>
 8009d32:	bf00      	nop
 8009d34:	24006c1c 	.word	0x24006c1c
 8009d38:	24006c18 	.word	0x24006c18
 8009d3c:	08012ef0 	.word	0x08012ef0
 8009d40:	08012f60 	.word	0x08012f60
 8009d44:	0801241c 	.word	0x0801241c
 8009d48:	24006c14 	.word	0x24006c14
 8009d4c:	08012fa4 	.word	0x08012fa4
 8009d50:	08012f3c 	.word	0x08012f3c
 8009d54:	08012fd8 	.word	0x08012fd8
 8009d58:	08012ff0 	.word	0x08012ff0
 8009d5c:	0801300c 	.word	0x0801300c
 8009d60:	08013028 	.word	0x08013028
 8009d64:	08012f7c 	.word	0x08012f7c
 8009d68:	24006c10 	.word	0x24006c10

08009d6c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8009d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8009d70:	1ccb      	adds	r3, r1, #3
 8009d72:	f023 0303 	bic.w	r3, r3, #3
 8009d76:	b29b      	uxth	r3, r3
  if (newsize < MIN_SIZE_ALIGNED) {
 8009d78:	2b0c      	cmp	r3, #12
 8009d7a:	461d      	mov	r5, r3
 8009d7c:	bf38      	it	cc
 8009d7e:	250c      	movcc	r5, #12
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8009d80:	428d      	cmp	r5, r1
 8009d82:	f0c0 8087 	bcc.w	8009e94 <mem_trim+0x128>
 8009d86:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	f200 8082 	bhi.w	8009e94 <mem_trim+0x128>
    return NULL;
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8009d90:	4f4c      	ldr	r7, [pc, #304]	@ (8009ec4 <mem_trim+0x158>)
 8009d92:	4604      	mov	r4, r0
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	4283      	cmp	r3, r0
 8009d98:	d841      	bhi.n	8009e1e <mem_trim+0xb2>
 8009d9a:	4a4b      	ldr	r2, [pc, #300]	@ (8009ec8 <mem_trim+0x15c>)
 8009d9c:	6812      	ldr	r2, [r2, #0]
 8009d9e:	4282      	cmp	r2, r0
 8009da0:	d93d      	bls.n	8009e1e <mem_trim+0xb2>
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009da2:	f1a4 0808 	sub.w	r8, r4, #8
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8009da6:	f834 6c08 	ldrh.w	r6, [r4, #-8]
  return (mem_size_t)((u8_t *)mem - ram);
 8009daa:	eba8 0803 	sub.w	r8, r8, r3
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8009dae:	3e08      	subs	r6, #8
  return (mem_size_t)((u8_t *)mem - ram);
 8009db0:	fa1f f888 	uxth.w	r8, r8
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8009db4:	eba6 0608 	sub.w	r6, r6, r8
 8009db8:	b2b6      	uxth	r6, r6
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8009dba:	42b5      	cmp	r5, r6
 8009dbc:	d863      	bhi.n	8009e86 <mem_trim+0x11a>
  if (newsize > size) {
    /* not supported */
    return NULL;
  }
  if (newsize == size) {
 8009dbe:	d02c      	beq.n	8009e1a <mem_trim+0xae>
    /* No change in size, simply return */
    return rmem;
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8009dc0:	4842      	ldr	r0, [pc, #264]	@ (8009ecc <mem_trim+0x160>)
 8009dc2:	f007 f927 	bl	8011014 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8009dc6:	f834 2c08 	ldrh.w	r2, [r4, #-8]
  return (struct mem *)(void *)&ram[ptr];
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	eb03 0902 	add.w	r9, r3, r2
  if (mem2->used == 0) {
 8009dd0:	f899 1004 	ldrb.w	r1, [r9, #4]
 8009dd4:	2900      	cmp	r1, #0
 8009dd6:	d136      	bne.n	8009e46 <mem_trim+0xda>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009dd8:	f647 51e8 	movw	r1, #32232	@ 0x7de8
 8009ddc:	428a      	cmp	r2, r1
 8009dde:	d067      	beq.n	8009eb0 <mem_trim+0x144>
    /* remember the old next pointer */
    next = mem2->next;
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009de0:	3508      	adds	r5, #8
    if (lfree == mem2) {
 8009de2:	493b      	ldr	r1, [pc, #236]	@ (8009ed0 <mem_trim+0x164>)
    next = mem2->next;
 8009de4:	f8b9 6000 	ldrh.w	r6, [r9]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009de8:	4445      	add	r5, r8
    if (lfree == mem2) {
 8009dea:	6808      	ldr	r0, [r1, #0]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009dec:	b2ad      	uxth	r5, r5
    if (lfree == mem2) {
 8009dee:	4548      	cmp	r0, r9
  return (struct mem *)(void *)&ram[ptr];
 8009df0:	eb03 0205 	add.w	r2, r3, r5
      lfree = ptr_to_mem(ptr2);
 8009df4:	bf08      	it	eq
 8009df6:	600a      	streq	r2, [r1, #0]
    }
    mem2 = ptr_to_mem(ptr2);
    mem2->used = 0;
 8009df8:	2100      	movs	r1, #0
    /* restore the next pointer */
    mem2->next = next;
 8009dfa:	8016      	strh	r6, [r2, #0]
    mem2->used = 0;
 8009dfc:	7111      	strb	r1, [r2, #4]
    /* link mem to it */
    mem->next = ptr2;
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009dfe:	f647 51e8 	movw	r1, #32232	@ 0x7de8
    mem2->prev = ptr;
 8009e02:	f8a2 8002 	strh.w	r8, [r2, #2]
    mem->next = ptr2;
 8009e06:	f824 5c08 	strh.w	r5, [r4, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009e0a:	8812      	ldrh	r2, [r2, #0]
 8009e0c:	428a      	cmp	r2, r1
 8009e0e:	d001      	beq.n	8009e14 <mem_trim+0xa8>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009e10:	441a      	add	r2, r3
 8009e12:	8055      	strh	r5, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8009e14:	482d      	ldr	r0, [pc, #180]	@ (8009ecc <mem_trim+0x160>)
 8009e16:	f007 f903 	bl	8011020 <sys_mutex_unlock>
    return NULL;
 8009e1a:	4620      	mov	r0, r4
 8009e1c:	e03b      	b.n	8009e96 <mem_trim+0x12a>
  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8009e1e:	4b2d      	ldr	r3, [pc, #180]	@ (8009ed4 <mem_trim+0x168>)
 8009e20:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8009e24:	492c      	ldr	r1, [pc, #176]	@ (8009ed8 <mem_trim+0x16c>)
 8009e26:	482d      	ldr	r0, [pc, #180]	@ (8009edc <mem_trim+0x170>)
 8009e28:	f007 fb36 	bl	8011498 <iprintf>
  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	42a3      	cmp	r3, r4
 8009e30:	d803      	bhi.n	8009e3a <mem_trim+0xce>
 8009e32:	4a25      	ldr	r2, [pc, #148]	@ (8009ec8 <mem_trim+0x15c>)
 8009e34:	6812      	ldr	r2, [r2, #0]
 8009e36:	42a2      	cmp	r2, r4
 8009e38:	d8b3      	bhi.n	8009da2 <mem_trim+0x36>
    MEM_STATS_INC_LOCKED(illegal);
 8009e3a:	f007 f911 	bl	8011060 <sys_arch_protect>
 8009e3e:	f007 f91b 	bl	8011078 <sys_arch_unprotect>
    return NULL;
 8009e42:	4620      	mov	r0, r4
 8009e44:	e027      	b.n	8009e96 <mem_trim+0x12a>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8009e46:	f105 0114 	add.w	r1, r5, #20
 8009e4a:	42b1      	cmp	r1, r6
 8009e4c:	d8e2      	bhi.n	8009e14 <mem_trim+0xa8>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009e4e:	3508      	adds	r5, #8
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009e50:	f647 51e8 	movw	r1, #32232	@ 0x7de8
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009e54:	4445      	add	r5, r8
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009e56:	428a      	cmp	r2, r1
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009e58:	b2ad      	uxth	r5, r5
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009e5a:	d01e      	beq.n	8009e9a <mem_trim+0x12e>
    if (mem2 < lfree) {
 8009e5c:	481c      	ldr	r0, [pc, #112]	@ (8009ed0 <mem_trim+0x164>)
  return (struct mem *)(void *)&ram[ptr];
 8009e5e:	1959      	adds	r1, r3, r5
    if (mem2 < lfree) {
 8009e60:	6806      	ldr	r6, [r0, #0]
    mem2->next = mem->next;
 8009e62:	800a      	strh	r2, [r1, #0]
    mem2->used = 0;
 8009e64:	2200      	movs	r2, #0
    if (mem2 < lfree) {
 8009e66:	428e      	cmp	r6, r1
    mem2->prev = ptr;
 8009e68:	f8a1 8002 	strh.w	r8, [r1, #2]
    mem2->used = 0;
 8009e6c:	710a      	strb	r2, [r1, #4]
      lfree = mem2;
 8009e6e:	bf88      	it	hi
 8009e70:	6001      	strhi	r1, [r0, #0]
    mem->next = ptr2;
 8009e72:	f824 5c08 	strh.w	r5, [r4, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009e76:	880a      	ldrh	r2, [r1, #0]
 8009e78:	f647 51e8 	movw	r1, #32232	@ 0x7de8
 8009e7c:	428a      	cmp	r2, r1
 8009e7e:	d0c9      	beq.n	8009e14 <mem_trim+0xa8>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009e80:	4413      	add	r3, r2
 8009e82:	805d      	strh	r5, [r3, #2]
 8009e84:	e7c6      	b.n	8009e14 <mem_trim+0xa8>
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8009e86:	4b13      	ldr	r3, [pc, #76]	@ (8009ed4 <mem_trim+0x168>)
 8009e88:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8009e8c:	4914      	ldr	r1, [pc, #80]	@ (8009ee0 <mem_trim+0x174>)
 8009e8e:	4813      	ldr	r0, [pc, #76]	@ (8009edc <mem_trim+0x170>)
 8009e90:	f007 fb02 	bl	8011498 <iprintf>
    return NULL;
 8009e94:	2000      	movs	r0, #0
  return rmem;
}
 8009e96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8009ed4 <mem_trim+0x168>)
 8009e9c:	f240 3216 	movw	r2, #790	@ 0x316
 8009ea0:	4910      	ldr	r1, [pc, #64]	@ (8009ee4 <mem_trim+0x178>)
 8009ea2:	480e      	ldr	r0, [pc, #56]	@ (8009edc <mem_trim+0x170>)
 8009ea4:	f007 faf8 	bl	8011498 <iprintf>
    mem2->next = mem->next;
 8009ea8:	f834 2c08 	ldrh.w	r2, [r4, #-8]
  return (struct mem *)(void *)&ram[ptr];
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	e7d5      	b.n	8009e5c <mem_trim+0xf0>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009eb0:	4b08      	ldr	r3, [pc, #32]	@ (8009ed4 <mem_trim+0x168>)
 8009eb2:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8009eb6:	490b      	ldr	r1, [pc, #44]	@ (8009ee4 <mem_trim+0x178>)
 8009eb8:	4808      	ldr	r0, [pc, #32]	@ (8009edc <mem_trim+0x170>)
 8009eba:	f007 faed 	bl	8011498 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	e78e      	b.n	8009de0 <mem_trim+0x74>
 8009ec2:	bf00      	nop
 8009ec4:	24006c1c 	.word	0x24006c1c
 8009ec8:	24006c18 	.word	0x24006c18
 8009ecc:	24006c14 	.word	0x24006c14
 8009ed0:	24006c10 	.word	0x24006c10
 8009ed4:	08012ef0 	.word	0x08012ef0
 8009ed8:	08013054 	.word	0x08013054
 8009edc:	0801241c 	.word	0x0801241c
 8009ee0:	0801306c 	.word	0x0801306c
 8009ee4:	0801308c 	.word	0x0801308c

08009ee8 <mem_malloc>:
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8009ee8:	2800      	cmp	r0, #0
 8009eea:	d06c      	beq.n	8009fc6 <mem_malloc+0xde>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8009eec:	1cc3      	adds	r3, r0, #3
 8009eee:	f023 0303 	bic.w	r3, r3, #3
 8009ef2:	b29b      	uxth	r3, r3
  if (size < MIN_SIZE_ALIGNED) {
 8009ef4:	2b0c      	cmp	r3, #12
{
 8009ef6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (size < MIN_SIZE_ALIGNED) {
 8009efa:	4698      	mov	r8, r3
 8009efc:	bf38      	it	cc
 8009efe:	f04f 080c 	movcc.w	r8, #12
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8009f02:	4580      	cmp	r8, r0
 8009f04:	d327      	bcc.n	8009f56 <mem_malloc+0x6e>
 8009f06:	f647 54e8 	movw	r4, #32232	@ 0x7de8
 8009f0a:	42a3      	cmp	r3, r4
 8009f0c:	d823      	bhi.n	8009f56 <mem_malloc+0x6e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009f0e:	4f47      	ldr	r7, [pc, #284]	@ (800a02c <mem_malloc+0x144>)
  return (mem_size_t)((u8_t *)mem - ram);
 8009f10:	f8df a13c 	ldr.w	sl, [pc, #316]	@ 800a050 <mem_malloc+0x168>
  sys_mutex_lock(&mem_mutex);
 8009f14:	4846      	ldr	r0, [pc, #280]	@ (800a030 <mem_malloc+0x148>)
 8009f16:	f007 f87d 	bl	8011014 <sys_mutex_lock>
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009f1a:	f8d7 c000 	ldr.w	ip, [r7]
  return (mem_size_t)((u8_t *)mem - ram);
 8009f1e:	f8da 0000 	ldr.w	r0, [sl]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009f22:	eba4 0e08 	sub.w	lr, r4, r8
  return (mem_size_t)((u8_t *)mem - ram);
 8009f26:	ebac 0300 	sub.w	r3, ip, r0
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009f2a:	b299      	uxth	r1, r3
 8009f2c:	4571      	cmp	r1, lr
  return (mem_size_t)((u8_t *)mem - ram);
 8009f2e:	460b      	mov	r3, r1
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009f30:	d20e      	bcs.n	8009f50 <mem_malloc+0x68>
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8009f32:	f06f 0907 	mvn.w	r9, #7
  return (struct mem *)(void *)&ram[ptr];
 8009f36:	1844      	adds	r4, r0, r1
      if ((!mem->used) &&
 8009f38:	461d      	mov	r5, r3
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8009f3a:	5a43      	ldrh	r3, [r0, r1]
 8009f3c:	eba9 0201 	sub.w	r2, r9, r1
      if ((!mem->used) &&
 8009f40:	7926      	ldrb	r6, [r4, #4]
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8009f42:	4619      	mov	r1, r3
      if ((!mem->used) &&
 8009f44:	b916      	cbnz	r6, 8009f4c <mem_malloc+0x64>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8009f46:	441a      	add	r2, r3
      if ((!mem->used) &&
 8009f48:	4542      	cmp	r2, r8
 8009f4a:	d207      	bcs.n	8009f5c <mem_malloc+0x74>
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009f4c:	459e      	cmp	lr, r3
 8009f4e:	d8f2      	bhi.n	8009f36 <mem_malloc+0x4e>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8009f50:	4837      	ldr	r0, [pc, #220]	@ (800a030 <mem_malloc+0x148>)
 8009f52:	f007 f865 	bl	8011020 <sys_mutex_unlock>
    return NULL;
 8009f56:	2000      	movs	r0, #0
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
}
 8009f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8009f5c:	f108 0114 	add.w	r1, r8, #20
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8009f60:	f108 0808 	add.w	r8, r8, #8
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8009f64:	428a      	cmp	r2, r1
 8009f66:	d32b      	bcc.n	8009fc0 <mem_malloc+0xd8>
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8009f68:	eb05 0908 	add.w	r9, r5, r8
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8009f6c:	f647 52e8 	movw	r2, #32232	@ 0x7de8
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8009f70:	fa1f f989 	uxth.w	r9, r9
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8009f74:	4591      	cmp	r9, r2
 8009f76:	d04c      	beq.n	800a012 <mem_malloc+0x12a>
  return (struct mem *)(void *)&ram[ptr];
 8009f78:	eb00 0209 	add.w	r2, r0, r9
          mem2->used = 0;
 8009f7c:	2100      	movs	r1, #0
 8009f7e:	7111      	strb	r1, [r2, #4]
          mem2->next = mem->next;
 8009f80:	f820 3009 	strh.w	r3, [r0, r9]
          mem->used = 1;
 8009f84:	2301      	movs	r3, #1
          mem2->prev = ptr;
 8009f86:	8055      	strh	r5, [r2, #2]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8009f88:	f647 52e8 	movw	r2, #32232	@ 0x7de8
          mem->next = ptr2;
 8009f8c:	f8a4 9000 	strh.w	r9, [r4]
          mem->used = 1;
 8009f90:	7123      	strb	r3, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8009f92:	f830 3009 	ldrh.w	r3, [r0, r9]
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d002      	beq.n	8009fa0 <mem_malloc+0xb8>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8009f9a:	4418      	add	r0, r3
 8009f9c:	f8a0 9002 	strh.w	r9, [r0, #2]
        if (mem == lfree) {
 8009fa0:	4564      	cmp	r4, ip
          while (cur->used && cur != ram_end) {
 8009fa2:	4d24      	ldr	r5, [pc, #144]	@ (800a034 <mem_malloc+0x14c>)
        if (mem == lfree) {
 8009fa4:	d028      	beq.n	8009ff8 <mem_malloc+0x110>
        sys_mutex_unlock(&mem_mutex);
 8009fa6:	4822      	ldr	r0, [pc, #136]	@ (800a030 <mem_malloc+0x148>)
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8009fa8:	44a0      	add	r8, r4
        sys_mutex_unlock(&mem_mutex);
 8009faa:	f007 f839 	bl	8011020 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8009fae:	682b      	ldr	r3, [r5, #0]
 8009fb0:	4543      	cmp	r3, r8
 8009fb2:	d319      	bcc.n	8009fe8 <mem_malloc+0x100>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8009fb4:	07a3      	lsls	r3, r4, #30
 8009fb6:	d108      	bne.n	8009fca <mem_malloc+0xe2>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8009fb8:	f104 0008 	add.w	r0, r4, #8
}
 8009fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          mem->used = 1;
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	7123      	strb	r3, [r4, #4]
 8009fc4:	e7ec      	b.n	8009fa0 <mem_malloc+0xb8>
    return NULL;
 8009fc6:	2000      	movs	r0, #0
}
 8009fc8:	4770      	bx	lr
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8009fca:	4b1b      	ldr	r3, [pc, #108]	@ (800a038 <mem_malloc+0x150>)
 8009fcc:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8009fd0:	491a      	ldr	r1, [pc, #104]	@ (800a03c <mem_malloc+0x154>)
 8009fd2:	481b      	ldr	r0, [pc, #108]	@ (800a040 <mem_malloc+0x158>)
 8009fd4:	f007 fa60 	bl	8011498 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8009fd8:	4b17      	ldr	r3, [pc, #92]	@ (800a038 <mem_malloc+0x150>)
 8009fda:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8009fde:	4919      	ldr	r1, [pc, #100]	@ (800a044 <mem_malloc+0x15c>)
 8009fe0:	4817      	ldr	r0, [pc, #92]	@ (800a040 <mem_malloc+0x158>)
 8009fe2:	f007 fa59 	bl	8011498 <iprintf>
 8009fe6:	e7e7      	b.n	8009fb8 <mem_malloc+0xd0>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8009fe8:	4b13      	ldr	r3, [pc, #76]	@ (800a038 <mem_malloc+0x150>)
 8009fea:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8009fee:	4916      	ldr	r1, [pc, #88]	@ (800a048 <mem_malloc+0x160>)
 8009ff0:	4813      	ldr	r0, [pc, #76]	@ (800a040 <mem_malloc+0x158>)
 8009ff2:	f007 fa51 	bl	8011498 <iprintf>
 8009ff6:	e7dd      	b.n	8009fb4 <mem_malloc+0xcc>
  return (struct mem *)(void *)&ram[ptr];
 8009ff8:	f8da 0000 	ldr.w	r0, [sl]
 8009ffc:	4623      	mov	r3, r4
          while (cur->used && cur != ram_end) {
 8009ffe:	6829      	ldr	r1, [r5, #0]
 800a000:	e003      	b.n	800a00a <mem_malloc+0x122>
  return (struct mem *)(void *)&ram[ptr];
 800a002:	881b      	ldrh	r3, [r3, #0]
 800a004:	4403      	add	r3, r0
          while (cur->used && cur != ram_end) {
 800a006:	791a      	ldrb	r2, [r3, #4]
 800a008:	b10a      	cbz	r2, 800a00e <mem_malloc+0x126>
 800a00a:	4299      	cmp	r1, r3
 800a00c:	d1f9      	bne.n	800a002 <mem_malloc+0x11a>
          lfree = cur;
 800a00e:	603b      	str	r3, [r7, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800a010:	e7c9      	b.n	8009fa6 <mem_malloc+0xbe>
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800a012:	4b09      	ldr	r3, [pc, #36]	@ (800a038 <mem_malloc+0x150>)
 800a014:	f240 3287 	movw	r2, #903	@ 0x387
 800a018:	490c      	ldr	r1, [pc, #48]	@ (800a04c <mem_malloc+0x164>)
 800a01a:	4809      	ldr	r0, [pc, #36]	@ (800a040 <mem_malloc+0x158>)
 800a01c:	f007 fa3c 	bl	8011498 <iprintf>
          mem2->next = mem->next;
 800a020:	8823      	ldrh	r3, [r4, #0]
  return (struct mem *)(void *)&ram[ptr];
 800a022:	f8da 0000 	ldr.w	r0, [sl]
        if (mem == lfree) {
 800a026:	f8d7 c000 	ldr.w	ip, [r7]
 800a02a:	e7a5      	b.n	8009f78 <mem_malloc+0x90>
 800a02c:	24006c10 	.word	0x24006c10
 800a030:	24006c14 	.word	0x24006c14
 800a034:	24006c18 	.word	0x24006c18
 800a038:	08012ef0 	.word	0x08012ef0
 800a03c:	080130d0 	.word	0x080130d0
 800a040:	0801241c 	.word	0x0801241c
 800a044:	08013100 	.word	0x08013100
 800a048:	080130a0 	.word	0x080130a0
 800a04c:	0801308c 	.word	0x0801308c
 800a050:	24006c1c 	.word	0x24006c1c

0800a054 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a054:	b538      	push	{r3, r4, r5, lr}
 800a056:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800a058:	f007 f802 	bl	8011060 <sys_arch_protect>

  memp = *desc->tab;
 800a05c:	68a3      	ldr	r3, [r4, #8]
 800a05e:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800a060:	b18c      	cbz	r4, 800a086 <do_memp_malloc_pool+0x32>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800a062:	6822      	ldr	r2, [r4, #0]
 800a064:	4605      	mov	r5, r0
 800a066:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800a068:	07a3      	lsls	r3, r4, #30
 800a06a:	d104      	bne.n	800a076 <do_memp_malloc_pool+0x22>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800a06c:	4628      	mov	r0, r5
 800a06e:	f007 f803 	bl	8011078 <sys_arch_unprotect>
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
 800a072:	4620      	mov	r0, r4
 800a074:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800a076:	4b06      	ldr	r3, [pc, #24]	@ (800a090 <do_memp_malloc_pool+0x3c>)
 800a078:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800a07c:	4905      	ldr	r1, [pc, #20]	@ (800a094 <do_memp_malloc_pool+0x40>)
 800a07e:	4806      	ldr	r0, [pc, #24]	@ (800a098 <do_memp_malloc_pool+0x44>)
 800a080:	f007 fa0a 	bl	8011498 <iprintf>
 800a084:	e7f2      	b.n	800a06c <do_memp_malloc_pool+0x18>
    SYS_ARCH_UNPROTECT(old_level);
 800a086:	f006 fff7 	bl	8011078 <sys_arch_unprotect>
}
 800a08a:	4620      	mov	r0, r4
 800a08c:	bd38      	pop	{r3, r4, r5, pc}
 800a08e:	bf00      	nop
 800a090:	08013124 	.word	0x08013124
 800a094:	08013154 	.word	0x08013154
 800a098:	0801241c 	.word	0x0801241c

0800a09c <memp_init_pool>:
{
 800a09c:	b430      	push	{r4, r5}
  *desc->tab = NULL;
 800a09e:	2100      	movs	r1, #0
  for (i = 0; i < desc->num; ++i) {
 800a0a0:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 800a0a2:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
 800a0a6:	6029      	str	r1, [r5, #0]
  for (i = 0; i < desc->num; ++i) {
 800a0a8:	b17c      	cbz	r4, 800a0ca <memp_init_pool+0x2e>
 800a0aa:	3303      	adds	r3, #3
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800a0ac:	f8b0 c000 	ldrh.w	ip, [r0]
  for (i = 0; i < desc->num; ++i) {
 800a0b0:	460a      	mov	r2, r1
 800a0b2:	f023 0303 	bic.w	r3, r3, #3
 800a0b6:	e000      	b.n	800a0ba <memp_init_pool+0x1e>
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800a0b8:	4603      	mov	r3, r0
  for (i = 0; i < desc->num; ++i) {
 800a0ba:	3201      	adds	r2, #1
    memp->next = *desc->tab;
 800a0bc:	6019      	str	r1, [r3, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800a0be:	eb03 000c 	add.w	r0, r3, ip
  for (i = 0; i < desc->num; ++i) {
 800a0c2:	4619      	mov	r1, r3
 800a0c4:	42a2      	cmp	r2, r4
 800a0c6:	d1f7      	bne.n	800a0b8 <memp_init_pool+0x1c>
 800a0c8:	602b      	str	r3, [r5, #0]
}
 800a0ca:	bc30      	pop	{r4, r5}
 800a0cc:	4770      	bx	lr
 800a0ce:	bf00      	nop

0800a0d0 <memp_init>:
{
 800a0d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0d2:	f8df e054 	ldr.w	lr, [pc, #84]	@ 800a128 <memp_init+0x58>
 800a0d6:	2404      	movs	r4, #4
 800a0d8:	4b11      	ldr	r3, [pc, #68]	@ (800a120 <memp_init+0x50>)
  *desc->tab = NULL;
 800a0da:	2600      	movs	r6, #0
{
 800a0dc:	4d11      	ldr	r5, [pc, #68]	@ (800a124 <memp_init+0x54>)
 800a0de:	f10e 0734 	add.w	r7, lr, #52	@ 0x34
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800a0e2:	3303      	adds	r3, #3
    memp_init_pool(memp_pools[i]);
 800a0e4:	f85e 2b04 	ldr.w	r2, [lr], #4
  *desc->tab = NULL;
 800a0e8:	602e      	str	r6, [r5, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800a0ea:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 800a0ee:	b16c      	cbz	r4, 800a10c <memp_init+0x3c>
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800a0f0:	2100      	movs	r1, #0
 800a0f2:	f8b2 c000 	ldrh.w	ip, [r2]
  for (i = 0; i < desc->num; ++i) {
 800a0f6:	460a      	mov	r2, r1
 800a0f8:	e000      	b.n	800a0fc <memp_init+0x2c>
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800a0fa:	4603      	mov	r3, r0
  for (i = 0; i < desc->num; ++i) {
 800a0fc:	3201      	adds	r2, #1
    memp->next = *desc->tab;
 800a0fe:	6019      	str	r1, [r3, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800a100:	eb03 000c 	add.w	r0, r3, ip
  for (i = 0; i < desc->num; ++i) {
 800a104:	4619      	mov	r1, r3
 800a106:	42a2      	cmp	r2, r4
 800a108:	d1f7      	bne.n	800a0fa <memp_init+0x2a>
 800a10a:	602b      	str	r3, [r5, #0]
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a10c:	4577      	cmp	r7, lr
 800a10e:	d005      	beq.n	800a11c <memp_init+0x4c>
    memp_init_pool(memp_pools[i]);
 800a110:	f8de 2000 	ldr.w	r2, [lr]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800a114:	e9d2 3501 	ldrd	r3, r5, [r2, #4]
  for (i = 0; i < desc->num; ++i) {
 800a118:	8854      	ldrh	r4, [r2, #2]
 800a11a:	e7e2      	b.n	800a0e2 <memp_init+0x12>
}
 800a11c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a11e:	bf00      	nop
 800a120:	24009c68 	.word	0x24009c68
 800a124:	24009c64 	.word	0x24009c64
 800a128:	080131e8 	.word	0x080131e8

0800a12c <memp_malloc_pool>:
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800a12c:	b108      	cbz	r0, 800a132 <memp_malloc_pool+0x6>
  if (desc == NULL) {
    return NULL;
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800a12e:	f7ff bf91 	b.w	800a054 <do_memp_malloc_pool>
{
 800a132:	b510      	push	{r4, lr}
 800a134:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800a136:	4b04      	ldr	r3, [pc, #16]	@ (800a148 <memp_malloc_pool+0x1c>)
 800a138:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800a13c:	4903      	ldr	r1, [pc, #12]	@ (800a14c <memp_malloc_pool+0x20>)
 800a13e:	4804      	ldr	r0, [pc, #16]	@ (800a150 <memp_malloc_pool+0x24>)
 800a140:	f007 f9aa 	bl	8011498 <iprintf>
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800a144:	4620      	mov	r0, r4
 800a146:	bd10      	pop	{r4, pc}
 800a148:	08013124 	.word	0x08013124
 800a14c:	08013178 	.word	0x08013178
 800a150:	0801241c 	.word	0x0801241c

0800a154 <memp_malloc>:
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800a154:	280c      	cmp	r0, #12
{
 800a156:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800a158:	d806      	bhi.n	800a168 <memp_malloc+0x14>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800a15a:	4b08      	ldr	r3, [pc, #32]	@ (800a17c <memp_malloc+0x28>)
 800a15c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
}
 800a160:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool(memp_pools[type]);
 800a164:	f7ff bf76 	b.w	800a054 <do_memp_malloc_pool>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800a168:	4b05      	ldr	r3, [pc, #20]	@ (800a180 <memp_malloc+0x2c>)
 800a16a:	f240 1257 	movw	r2, #343	@ 0x157
 800a16e:	4905      	ldr	r1, [pc, #20]	@ (800a184 <memp_malloc+0x30>)
 800a170:	4805      	ldr	r0, [pc, #20]	@ (800a188 <memp_malloc+0x34>)
 800a172:	f007 f991 	bl	8011498 <iprintf>
}
 800a176:	2000      	movs	r0, #0
 800a178:	bd08      	pop	{r3, pc}
 800a17a:	bf00      	nop
 800a17c:	080131e8 	.word	0x080131e8
 800a180:	08013124 	.word	0x08013124
 800a184:	0801318c 	.word	0x0801318c
 800a188:	0801241c 	.word	0x0801241c

0800a18c <memp_free_pool>:
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800a18c:	b1c0      	cbz	r0, 800a1c0 <memp_free_pool+0x34>
{
 800a18e:	b570      	push	{r4, r5, r6, lr}
 800a190:	460c      	mov	r4, r1
  if ((desc == NULL) || (mem == NULL)) {
 800a192:	b161      	cbz	r1, 800a1ae <memp_free_pool+0x22>
  LWIP_ASSERT("memp_free: mem properly aligned",
 800a194:	078b      	lsls	r3, r1, #30
 800a196:	4605      	mov	r5, r0
 800a198:	d10a      	bne.n	800a1b0 <memp_free_pool+0x24>
  SYS_ARCH_PROTECT(old_level);
 800a19a:	f006 ff61 	bl	8011060 <sys_arch_protect>
  memp->next = *desc->tab;
 800a19e:	68ab      	ldr	r3, [r5, #8]
 800a1a0:	681a      	ldr	r2, [r3, #0]
 800a1a2:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 800a1a4:	601c      	str	r4, [r3, #0]
    return;
  }

  do_memp_free_pool(desc, mem);
}
 800a1a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  SYS_ARCH_UNPROTECT(old_level);
 800a1aa:	f006 bf65 	b.w	8011078 <sys_arch_unprotect>
}
 800a1ae:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("memp_free: mem properly aligned",
 800a1b0:	4b07      	ldr	r3, [pc, #28]	@ (800a1d0 <memp_free_pool+0x44>)
 800a1b2:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800a1b6:	4907      	ldr	r1, [pc, #28]	@ (800a1d4 <memp_free_pool+0x48>)
 800a1b8:	4807      	ldr	r0, [pc, #28]	@ (800a1d8 <memp_free_pool+0x4c>)
 800a1ba:	f007 f96d 	bl	8011498 <iprintf>
 800a1be:	e7ec      	b.n	800a19a <memp_free_pool+0xe>
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800a1c0:	4b03      	ldr	r3, [pc, #12]	@ (800a1d0 <memp_free_pool+0x44>)
 800a1c2:	f240 1295 	movw	r2, #405	@ 0x195
 800a1c6:	4905      	ldr	r1, [pc, #20]	@ (800a1dc <memp_free_pool+0x50>)
 800a1c8:	4803      	ldr	r0, [pc, #12]	@ (800a1d8 <memp_free_pool+0x4c>)
 800a1ca:	f007 b965 	b.w	8011498 <iprintf>
 800a1ce:	bf00      	nop
 800a1d0:	08013124 	.word	0x08013124
 800a1d4:	080131ac 	.word	0x080131ac
 800a1d8:	0801241c 	.word	0x0801241c
 800a1dc:	08013178 	.word	0x08013178

0800a1e0 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800a1e0:	280c      	cmp	r0, #12
 800a1e2:	d812      	bhi.n	800a20a <memp_free+0x2a>
{
 800a1e4:	b570      	push	{r4, r5, r6, lr}
 800a1e6:	460c      	mov	r4, r1

  if (mem == NULL) {
 800a1e8:	b171      	cbz	r1, 800a208 <memp_free+0x28>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800a1ea:	4b0f      	ldr	r3, [pc, #60]	@ (800a228 <memp_free+0x48>)
 800a1ec:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
  LWIP_ASSERT("memp_free: mem properly aligned",
 800a1f0:	078b      	lsls	r3, r1, #30
 800a1f2:	d111      	bne.n	800a218 <memp_free+0x38>
  SYS_ARCH_PROTECT(old_level);
 800a1f4:	f006 ff34 	bl	8011060 <sys_arch_protect>
  memp->next = *desc->tab;
 800a1f8:	68ab      	ldr	r3, [r5, #8]
 800a1fa:	681a      	ldr	r2, [r3, #0]
 800a1fc:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 800a1fe:	601c      	str	r4, [r3, #0]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800a200:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  SYS_ARCH_UNPROTECT(old_level);
 800a204:	f006 bf38 	b.w	8011078 <sys_arch_unprotect>
}
 800a208:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800a20a:	4b08      	ldr	r3, [pc, #32]	@ (800a22c <memp_free+0x4c>)
 800a20c:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800a210:	4907      	ldr	r1, [pc, #28]	@ (800a230 <memp_free+0x50>)
 800a212:	4808      	ldr	r0, [pc, #32]	@ (800a234 <memp_free+0x54>)
 800a214:	f007 b940 	b.w	8011498 <iprintf>
  LWIP_ASSERT("memp_free: mem properly aligned",
 800a218:	4b04      	ldr	r3, [pc, #16]	@ (800a22c <memp_free+0x4c>)
 800a21a:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800a21e:	4906      	ldr	r1, [pc, #24]	@ (800a238 <memp_free+0x58>)
 800a220:	4804      	ldr	r0, [pc, #16]	@ (800a234 <memp_free+0x54>)
 800a222:	f007 f939 	bl	8011498 <iprintf>
 800a226:	e7e5      	b.n	800a1f4 <memp_free+0x14>
 800a228:	080131e8 	.word	0x080131e8
 800a22c:	08013124 	.word	0x08013124
 800a230:	080131cc 	.word	0x080131cc
 800a234:	0801241c 	.word	0x0801241c
 800a238:	080131ac 	.word	0x080131ac

0800a23c <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 800a23c:	f06f 000b 	mvn.w	r0, #11
 800a240:	4770      	bx	lr
 800a242:	bf00      	nop

0800a244 <netif_issue_reports>:
{
 800a244:	b510      	push	{r4, lr}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800a246:	4604      	mov	r4, r0
 800a248:	b150      	cbz	r0, 800a260 <netif_issue_reports+0x1c>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800a24a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800a24e:	f003 0205 	and.w	r2, r3, #5
 800a252:	2a05      	cmp	r2, #5
 800a254:	d103      	bne.n	800a25e <netif_issue_reports+0x1a>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a256:	6862      	ldr	r2, [r4, #4]
 800a258:	b10a      	cbz	r2, 800a25e <netif_issue_reports+0x1a>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800a25a:	071b      	lsls	r3, r3, #28
 800a25c:	d408      	bmi.n	800a270 <netif_issue_reports+0x2c>
}
 800a25e:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800a260:	4b06      	ldr	r3, [pc, #24]	@ (800a27c <netif_issue_reports+0x38>)
 800a262:	f240 326d 	movw	r2, #877	@ 0x36d
 800a266:	4906      	ldr	r1, [pc, #24]	@ (800a280 <netif_issue_reports+0x3c>)
 800a268:	4806      	ldr	r0, [pc, #24]	@ (800a284 <netif_issue_reports+0x40>)
 800a26a:	f007 f915 	bl	8011498 <iprintf>
 800a26e:	e7ec      	b.n	800a24a <netif_issue_reports+0x6>
      etharp_gratuitous(netif);
 800a270:	1d21      	adds	r1, r4, #4
 800a272:	4620      	mov	r0, r4
}
 800a274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      etharp_gratuitous(netif);
 800a278:	f005 be44 	b.w	800ff04 <etharp_request>
 800a27c:	080132b8 	.word	0x080132b8
 800a280:	080132ec 	.word	0x080132ec
 800a284:	0801241c 	.word	0x0801241c

0800a288 <netif_init>:
}
 800a288:	4770      	bx	lr
 800a28a:	bf00      	nop

0800a28c <netif_set_addr>:
{
 800a28c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY4;
 800a28e:	2900      	cmp	r1, #0
{
 800a290:	461e      	mov	r6, r3
    ipaddr = IP4_ADDR_ANY4;
 800a292:	4b24      	ldr	r3, [pc, #144]	@ (800a324 <netif_set_addr+0x98>)
  if (ipaddr == NULL) {
 800a294:	460c      	mov	r4, r1
{
 800a296:	b083      	sub	sp, #12
 800a298:	4605      	mov	r5, r0
    ipaddr = IP4_ADDR_ANY4;
 800a29a:	bf14      	ite	ne
 800a29c:	460c      	movne	r4, r1
 800a29e:	461c      	moveq	r4, r3
  if (netmask == NULL) {
 800a2a0:	b36a      	cbz	r2, 800a2fe <netif_set_addr+0x72>
 800a2a2:	4617      	mov	r7, r2
  if (gw == NULL) {
 800a2a4:	b34e      	cbz	r6, 800a2fa <netif_set_addr+0x6e>
  remove = ip4_addr_isany(ipaddr);
 800a2a6:	6823      	ldr	r3, [r4, #0]
 800a2a8:	b16b      	cbz	r3, 800a2c6 <netif_set_addr+0x3a>
 800a2aa:	2100      	movs	r1, #0
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	68aa      	ldr	r2, [r5, #8]
 800a2b0:	4293      	cmp	r3, r2
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800a2b2:	68ea      	ldr	r2, [r5, #12]
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800a2b4:	bf18      	it	ne
 800a2b6:	60ab      	strne	r3, [r5, #8]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800a2b8:	6833      	ldr	r3, [r6, #0]
 800a2ba:	4293      	cmp	r3, r2
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800a2bc:	bf18      	it	ne
 800a2be:	60eb      	strne	r3, [r5, #12]
  if (!remove) {
 800a2c0:	b129      	cbz	r1, 800a2ce <netif_set_addr+0x42>
}
 800a2c2:	b003      	add	sp, #12
 800a2c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800a2c6:	686a      	ldr	r2, [r5, #4]
 800a2c8:	b9da      	cbnz	r2, 800a302 <netif_set_addr+0x76>
  remove = ip4_addr_isany(ipaddr);
 800a2ca:	2101      	movs	r1, #1
 800a2cc:	e7ee      	b.n	800a2ac <netif_set_addr+0x20>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800a2ce:	686b      	ldr	r3, [r5, #4]
 800a2d0:	6822      	ldr	r2, [r4, #0]
 800a2d2:	429a      	cmp	r2, r3
 800a2d4:	d0f5      	beq.n	800a2c2 <netif_set_addr+0x36>
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800a2d6:	a901      	add	r1, sp, #4
 800a2d8:	4668      	mov	r0, sp
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800a2da:	e9cd 3200 	strd	r3, r2, [sp]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800a2de:	f001 ffa1 	bl	800c224 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800a2e2:	a901      	add	r1, sp, #4
 800a2e4:	4668      	mov	r0, sp
 800a2e6:	f005 f9ed 	bl	800f6c4 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800a2ea:	6823      	ldr	r3, [r4, #0]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800a2ec:	2101      	movs	r1, #1
 800a2ee:	4628      	mov	r0, r5
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800a2f0:	606b      	str	r3, [r5, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800a2f2:	f7ff ffa7 	bl	800a244 <netif_issue_reports>
}
 800a2f6:	b003      	add	sp, #12
 800a2f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    gw = IP4_ADDR_ANY4;
 800a2fa:	4e0a      	ldr	r6, [pc, #40]	@ (800a324 <netif_set_addr+0x98>)
 800a2fc:	e7d3      	b.n	800a2a6 <netif_set_addr+0x1a>
    netmask = IP4_ADDR_ANY4;
 800a2fe:	461f      	mov	r7, r3
 800a300:	e7d0      	b.n	800a2a4 <netif_set_addr+0x18>
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800a302:	a901      	add	r1, sp, #4
 800a304:	4668      	mov	r0, sp
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800a306:	e9cd 2300 	strd	r2, r3, [sp]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800a30a:	f001 ff8b 	bl	800c224 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800a30e:	a901      	add	r1, sp, #4
 800a310:	4668      	mov	r0, sp
 800a312:	f005 f9d7 	bl	800f6c4 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800a316:	6823      	ldr	r3, [r4, #0]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800a318:	2101      	movs	r1, #1
 800a31a:	4628      	mov	r0, r5
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800a31c:	606b      	str	r3, [r5, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800a31e:	f7ff ff91 	bl	800a244 <netif_issue_reports>
    return 1; /* address changed */
 800a322:	e7d2      	b.n	800a2ca <netif_set_addr+0x3e>
 800a324:	08014e14 	.word	0x08014e14

0800a328 <netif_add>:
{
 800a328:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a32c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800a32e:	2800      	cmp	r0, #0
 800a330:	d07c      	beq.n	800a42c <netif_add+0x104>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800a332:	2c00      	cmp	r4, #0
 800a334:	f000 8083 	beq.w	800a43e <netif_add+0x116>
  if (ipaddr == NULL) {
 800a338:	4606      	mov	r6, r0
 800a33a:	2900      	cmp	r1, #0
 800a33c:	d06d      	beq.n	800a41a <netif_add+0xf2>
  if (netmask == NULL) {
 800a33e:	2a00      	cmp	r2, #0
 800a340:	d066      	beq.n	800a410 <netif_add+0xe8>
  if (gw == NULL) {
 800a342:	2b00      	cmp	r3, #0
 800a344:	d067      	beq.n	800a416 <netif_add+0xee>
  netif->state = state;
 800a346:	980a      	ldr	r0, [sp, #40]	@ 0x28
  netif->num = netif_num;
 800a348:	f8df b120 	ldr.w	fp, [pc, #288]	@ 800a46c <netif_add+0x144>
  netif->state = state;
 800a34c:	6230      	str	r0, [r6, #32]
  netif->input = input;
 800a34e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800a350:	6130      	str	r0, [r6, #16]
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800a352:	2000      	movs	r0, #0
 800a354:	e9c6 0001 	strd	r0, r0, [r6, #4]
  ip_addr_set_zero_ip4(&netif->gw);
 800a358:	60f0      	str	r0, [r6, #12]
  netif->mtu = 0;
 800a35a:	84b0      	strh	r0, [r6, #36]	@ 0x24
  netif->flags = 0;
 800a35c:	f886 002d 	strb.w	r0, [r6, #45]	@ 0x2d
  netif->link_callback = NULL;
 800a360:	61f0      	str	r0, [r6, #28]
  netif->num = netif_num;
 800a362:	f89b 0000 	ldrb.w	r0, [fp]
 800a366:	f886 0030 	strb.w	r0, [r6, #48]	@ 0x30
  netif->output = netif_null_output_ip4;
 800a36a:	4839      	ldr	r0, [pc, #228]	@ (800a450 <netif_add+0x128>)
 800a36c:	6170      	str	r0, [r6, #20]
  netif_set_addr(netif, ipaddr, netmask, gw);
 800a36e:	4630      	mov	r0, r6
 800a370:	f7ff ff8c 	bl	800a28c <netif_set_addr>
  if (init(netif) != ERR_OK) {
 800a374:	4630      	mov	r0, r6
 800a376:	47a0      	blx	r4
 800a378:	2800      	cmp	r0, #0
 800a37a:	d15e      	bne.n	800a43a <netif_add+0x112>
      if (netif->num == 255) {
 800a37c:	f896 3030 	ldrb.w	r3, [r6, #48]	@ 0x30
 800a380:	f8df 90ec 	ldr.w	r9, [pc, #236]	@ 800a470 <netif_add+0x148>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800a384:	f8df 80d8 	ldr.w	r8, [pc, #216]	@ 800a460 <netif_add+0x138>
 800a388:	f8df a0e8 	ldr.w	sl, [pc, #232]	@ 800a474 <netif_add+0x14c>
 800a38c:	4f31      	ldr	r7, [pc, #196]	@ (800a454 <netif_add+0x12c>)
      if (netif->num == 255) {
 800a38e:	2bff      	cmp	r3, #255	@ 0xff
 800a390:	d102      	bne.n	800a398 <netif_add+0x70>
        netif->num = 0;
 800a392:	2300      	movs	r3, #0
 800a394:	f886 3030 	strb.w	r3, [r6, #48]	@ 0x30
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a398:	f8d9 4000 	ldr.w	r4, [r9]
 800a39c:	2c00      	cmp	r4, #0
 800a39e:	d042      	beq.n	800a426 <netif_add+0xfe>
      num_netifs = 0;
 800a3a0:	2500      	movs	r5, #0
 800a3a2:	e007      	b.n	800a3b4 <netif_add+0x8c>
        if (netif2->num == netif->num) {
 800a3a4:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 800a3a8:	f896 2030 	ldrb.w	r2, [r6, #48]	@ 0x30
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d014      	beq.n	800a3da <netif_add+0xb2>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a3b0:	6824      	ldr	r4, [r4, #0]
 800a3b2:	b1fc      	cbz	r4, 800a3f4 <netif_add+0xcc>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800a3b4:	42a6      	cmp	r6, r4
        num_netifs++;
 800a3b6:	f105 0501 	add.w	r5, r5, #1
        LWIP_ASSERT("netif already added", netif2 != netif);
 800a3ba:	d013      	beq.n	800a3e4 <netif_add+0xbc>
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800a3bc:	2dff      	cmp	r5, #255	@ 0xff
 800a3be:	ddf1      	ble.n	800a3a4 <netif_add+0x7c>
 800a3c0:	4643      	mov	r3, r8
 800a3c2:	f240 128d 	movw	r2, #397	@ 0x18d
 800a3c6:	4924      	ldr	r1, [pc, #144]	@ (800a458 <netif_add+0x130>)
 800a3c8:	4638      	mov	r0, r7
 800a3ca:	f007 f865 	bl	8011498 <iprintf>
        if (netif2->num == netif->num) {
 800a3ce:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 800a3d2:	f896 2030 	ldrb.w	r2, [r6, #48]	@ 0x30
 800a3d6:	4293      	cmp	r3, r2
 800a3d8:	d1ea      	bne.n	800a3b0 <netif_add+0x88>
          netif->num++;
 800a3da:	3301      	adds	r3, #1
 800a3dc:	b2db      	uxtb	r3, r3
 800a3de:	f886 3030 	strb.w	r3, [r6, #48]	@ 0x30
    } while (netif2 != NULL);
 800a3e2:	e7d4      	b.n	800a38e <netif_add+0x66>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800a3e4:	4643      	mov	r3, r8
 800a3e6:	f240 128b 	movw	r2, #395	@ 0x18b
 800a3ea:	4651      	mov	r1, sl
 800a3ec:	4638      	mov	r0, r7
 800a3ee:	f007 f853 	bl	8011498 <iprintf>
 800a3f2:	e7e3      	b.n	800a3bc <netif_add+0x94>
  netif->next = netif_list;
 800a3f4:	f8d9 4000 	ldr.w	r4, [r9]
  if (netif->num == 254) {
 800a3f8:	2afe      	cmp	r2, #254	@ 0xfe
 800a3fa:	d012      	beq.n	800a422 <netif_add+0xfa>
    netif_num = (u8_t)(netif->num + 1);
 800a3fc:	1c53      	adds	r3, r2, #1
 800a3fe:	b2db      	uxtb	r3, r3
  return netif;
 800a400:	4630      	mov	r0, r6
  netif->next = netif_list;
 800a402:	6034      	str	r4, [r6, #0]
 800a404:	f88b 3000 	strb.w	r3, [fp]
  netif_list = netif;
 800a408:	f8c9 6000 	str.w	r6, [r9]
}
 800a40c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800a410:	4a12      	ldr	r2, [pc, #72]	@ (800a45c <netif_add+0x134>)
  if (gw == NULL) {
 800a412:	2b00      	cmp	r3, #0
 800a414:	d197      	bne.n	800a346 <netif_add+0x1e>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800a416:	4b11      	ldr	r3, [pc, #68]	@ (800a45c <netif_add+0x134>)
 800a418:	e795      	b.n	800a346 <netif_add+0x1e>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800a41a:	4910      	ldr	r1, [pc, #64]	@ (800a45c <netif_add+0x134>)
  if (netmask == NULL) {
 800a41c:	2a00      	cmp	r2, #0
 800a41e:	d190      	bne.n	800a342 <netif_add+0x1a>
 800a420:	e7f6      	b.n	800a410 <netif_add+0xe8>
    netif_num = 0;
 800a422:	2300      	movs	r3, #0
 800a424:	e7ec      	b.n	800a400 <netif_add+0xd8>
  if (netif->num == 254) {
 800a426:	f896 2030 	ldrb.w	r2, [r6, #48]	@ 0x30
 800a42a:	e7e5      	b.n	800a3f8 <netif_add+0xd0>
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800a42c:	4b0c      	ldr	r3, [pc, #48]	@ (800a460 <netif_add+0x138>)
 800a42e:	f240 1227 	movw	r2, #295	@ 0x127
 800a432:	490c      	ldr	r1, [pc, #48]	@ (800a464 <netif_add+0x13c>)
 800a434:	4807      	ldr	r0, [pc, #28]	@ (800a454 <netif_add+0x12c>)
 800a436:	f007 f82f 	bl	8011498 <iprintf>
 800a43a:	2000      	movs	r0, #0
 800a43c:	e7e6      	b.n	800a40c <netif_add+0xe4>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800a43e:	4b08      	ldr	r3, [pc, #32]	@ (800a460 <netif_add+0x138>)
 800a440:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800a444:	4908      	ldr	r1, [pc, #32]	@ (800a468 <netif_add+0x140>)
 800a446:	4803      	ldr	r0, [pc, #12]	@ (800a454 <netif_add+0x12c>)
 800a448:	f007 f826 	bl	8011498 <iprintf>
 800a44c:	e7f5      	b.n	800a43a <netif_add+0x112>
 800a44e:	bf00      	nop
 800a450:	0800a23d 	.word	0x0800a23d
 800a454:	0801241c 	.word	0x0801241c
 800a458:	08013364 	.word	0x08013364
 800a45c:	08014e14 	.word	0x08014e14
 800a460:	080132b8 	.word	0x080132b8
 800a464:	08013310 	.word	0x08013310
 800a468:	0801332c 	.word	0x0801332c
 800a46c:	24009ceb 	.word	0x24009ceb
 800a470:	24009cf0 	.word	0x24009cf0
 800a474:	08013350 	.word	0x08013350

0800a478 <netif_set_default>:
  netif_default = netif;
 800a478:	4b01      	ldr	r3, [pc, #4]	@ (800a480 <netif_set_default+0x8>)
 800a47a:	6018      	str	r0, [r3, #0]
}
 800a47c:	4770      	bx	lr
 800a47e:	bf00      	nop
 800a480:	24009cec 	.word	0x24009cec

0800a484 <netif_set_up>:
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800a484:	b158      	cbz	r0, 800a49e <netif_set_up+0x1a>
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800a486:	f890 202d 	ldrb.w	r2, [r0, #45]	@ 0x2d
 800a48a:	07d1      	lsls	r1, r2, #31
 800a48c:	d500      	bpl.n	800a490 <netif_set_up+0xc>
}
 800a48e:	4770      	bx	lr
    netif_set_flags(netif, NETIF_FLAG_UP);
 800a490:	f042 0201 	orr.w	r2, r2, #1
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a494:	2103      	movs	r1, #3
    netif_set_flags(netif, NETIF_FLAG_UP);
 800a496:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a49a:	f7ff bed3 	b.w	800a244 <netif_issue_reports>
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800a49e:	4b03      	ldr	r3, [pc, #12]	@ (800a4ac <netif_set_up+0x28>)
 800a4a0:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800a4a4:	4902      	ldr	r1, [pc, #8]	@ (800a4b0 <netif_set_up+0x2c>)
 800a4a6:	4803      	ldr	r0, [pc, #12]	@ (800a4b4 <netif_set_up+0x30>)
 800a4a8:	f006 bff6 	b.w	8011498 <iprintf>
 800a4ac:	080132b8 	.word	0x080132b8
 800a4b0:	08013394 	.word	0x08013394
 800a4b4:	0801241c 	.word	0x0801241c

0800a4b8 <netif_set_down>:
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800a4b8:	b160      	cbz	r0, 800a4d4 <netif_set_down+0x1c>
  if (netif->flags & NETIF_FLAG_UP) {
 800a4ba:	f890 202d 	ldrb.w	r2, [r0, #45]	@ 0x2d
 800a4be:	07d1      	lsls	r1, r2, #31
 800a4c0:	d505      	bpl.n	800a4ce <netif_set_down+0x16>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 800a4c2:	f022 0101 	bic.w	r1, r2, #1
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800a4c6:	0713      	lsls	r3, r2, #28
    netif_clear_flags(netif, NETIF_FLAG_UP);
 800a4c8:	f880 102d 	strb.w	r1, [r0, #45]	@ 0x2d
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800a4cc:	d400      	bmi.n	800a4d0 <netif_set_down+0x18>
}
 800a4ce:	4770      	bx	lr
      etharp_cleanup_netif(netif);
 800a4d0:	f005 bae8 	b.w	800faa4 <etharp_cleanup_netif>
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800a4d4:	4b03      	ldr	r3, [pc, #12]	@ (800a4e4 <netif_set_down+0x2c>)
 800a4d6:	f240 329b 	movw	r2, #923	@ 0x39b
 800a4da:	4903      	ldr	r1, [pc, #12]	@ (800a4e8 <netif_set_down+0x30>)
 800a4dc:	4803      	ldr	r0, [pc, #12]	@ (800a4ec <netif_set_down+0x34>)
 800a4de:	f006 bfdb 	b.w	8011498 <iprintf>
 800a4e2:	bf00      	nop
 800a4e4:	080132b8 	.word	0x080132b8
 800a4e8:	080133b0 	.word	0x080133b0
 800a4ec:	0801241c 	.word	0x0801241c

0800a4f0 <netif_set_link_up>:
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800a4f0:	b1a0      	cbz	r0, 800a51c <netif_set_link_up+0x2c>
{
 800a4f2:	b510      	push	{r4, lr}
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800a4f4:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 800a4f8:	4604      	mov	r4, r0
 800a4fa:	075a      	lsls	r2, r3, #29
 800a4fc:	d500      	bpl.n	800a500 <netif_set_link_up+0x10>
}
 800a4fe:	bd10      	pop	{r4, pc}
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800a500:	f043 0304 	orr.w	r3, r3, #4
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a504:	2103      	movs	r1, #3
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800a506:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a50a:	f7ff fe9b 	bl	800a244 <netif_issue_reports>
    NETIF_LINK_CALLBACK(netif);
 800a50e:	69e3      	ldr	r3, [r4, #28]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d0f4      	beq.n	800a4fe <netif_set_link_up+0xe>
 800a514:	4620      	mov	r0, r4
}
 800a516:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_LINK_CALLBACK(netif);
 800a51a:	4718      	bx	r3
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800a51c:	4b03      	ldr	r3, [pc, #12]	@ (800a52c <netif_set_link_up+0x3c>)
 800a51e:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800a522:	4903      	ldr	r1, [pc, #12]	@ (800a530 <netif_set_link_up+0x40>)
 800a524:	4803      	ldr	r0, [pc, #12]	@ (800a534 <netif_set_link_up+0x44>)
 800a526:	f006 bfb7 	b.w	8011498 <iprintf>
 800a52a:	bf00      	nop
 800a52c:	080132b8 	.word	0x080132b8
 800a530:	080133d0 	.word	0x080133d0
 800a534:	0801241c 	.word	0x0801241c

0800a538 <netif_set_link_down>:
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800a538:	b158      	cbz	r0, 800a552 <netif_set_link_down+0x1a>
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800a53a:	f890 202d 	ldrb.w	r2, [r0, #45]	@ 0x2d
 800a53e:	0751      	lsls	r1, r2, #29
 800a540:	d506      	bpl.n	800a550 <netif_set_link_down+0x18>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800a542:	f022 0204 	bic.w	r2, r2, #4
    NETIF_LINK_CALLBACK(netif);
 800a546:	69c1      	ldr	r1, [r0, #28]
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800a548:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800a54c:	b101      	cbz	r1, 800a550 <netif_set_link_down+0x18>
 800a54e:	4708      	bx	r1
}
 800a550:	4770      	bx	lr
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800a552:	4b03      	ldr	r3, [pc, #12]	@ (800a560 <netif_set_link_down+0x28>)
 800a554:	f240 4206 	movw	r2, #1030	@ 0x406
 800a558:	4902      	ldr	r1, [pc, #8]	@ (800a564 <netif_set_link_down+0x2c>)
 800a55a:	4803      	ldr	r0, [pc, #12]	@ (800a568 <netif_set_link_down+0x30>)
 800a55c:	f006 bf9c 	b.w	8011498 <iprintf>
 800a560:	080132b8 	.word	0x080132b8
 800a564:	080133f4 	.word	0x080133f4
 800a568:	0801241c 	.word	0x0801241c

0800a56c <netif_set_link_callback>:
  if (netif) {
 800a56c:	b100      	cbz	r0, 800a570 <netif_set_link_callback+0x4>
    netif->link_callback = link_callback;
 800a56e:	61c1      	str	r1, [r0, #28]
}
 800a570:	4770      	bx	lr
 800a572:	bf00      	nop

0800a574 <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800a574:	4602      	mov	r2, r0
 800a576:	b158      	cbz	r0, 800a590 <netif_get_by_index+0x1c>
    NETIF_FOREACH(netif) {
 800a578:	4b06      	ldr	r3, [pc, #24]	@ (800a594 <netif_get_by_index+0x20>)
 800a57a:	6818      	ldr	r0, [r3, #0]
 800a57c:	b910      	cbnz	r0, 800a584 <netif_get_by_index+0x10>
 800a57e:	e007      	b.n	800a590 <netif_get_by_index+0x1c>
 800a580:	6800      	ldr	r0, [r0, #0]
 800a582:	b130      	cbz	r0, 800a592 <netif_get_by_index+0x1e>
      if (idx == netif_get_index(netif)) {
 800a584:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 800a588:	3301      	adds	r3, #1
 800a58a:	b2db      	uxtb	r3, r3
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d1f7      	bne.n	800a580 <netif_get_by_index+0xc>
      }
    }
  }

  return NULL;
}
 800a590:	4770      	bx	lr
 800a592:	4770      	bx	lr
 800a594:	24009cf0 	.word	0x24009cf0

0800a598 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800a598:	b508      	push	{r3, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800a59a:	f006 fd61 	bl	8011060 <sys_arch_protect>
 800a59e:	4b09      	ldr	r3, [pc, #36]	@ (800a5c4 <pbuf_free_ooseq_callback+0x2c>)
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	701a      	strb	r2, [r3, #0]
 800a5a4:	f006 fd68 	bl	8011078 <sys_arch_unprotect>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800a5a8:	4b07      	ldr	r3, [pc, #28]	@ (800a5c8 <pbuf_free_ooseq_callback+0x30>)
 800a5aa:	6818      	ldr	r0, [r3, #0]
 800a5ac:	b910      	cbnz	r0, 800a5b4 <pbuf_free_ooseq_callback+0x1c>
 800a5ae:	e008      	b.n	800a5c2 <pbuf_free_ooseq_callback+0x2a>
 800a5b0:	68c0      	ldr	r0, [r0, #12]
 800a5b2:	b130      	cbz	r0, 800a5c2 <pbuf_free_ooseq_callback+0x2a>
    if (pcb->ooseq != NULL) {
 800a5b4:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d0fa      	beq.n	800a5b0 <pbuf_free_ooseq_callback+0x18>
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
}
 800a5ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      tcp_free_ooseq(pcb);
 800a5be:	f001 be5b 	b.w	800c278 <tcp_free_ooseq>
}
 800a5c2:	bd08      	pop	{r3, pc}
 800a5c4:	24009cf4 	.word	0x24009cf4
 800a5c8:	24009cfc 	.word	0x24009cfc

0800a5cc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800a5cc:	b570      	push	{r4, r5, r6, lr}
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800a5ce:	f022 0340 	bic.w	r3, r2, #64	@ 0x40
 800a5d2:	2500      	movs	r5, #0
{
 800a5d4:	4614      	mov	r4, r2
 800a5d6:	4606      	mov	r6, r0
 800a5d8:	f361 050f 	bfi	r5, r1, #0, #16
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800a5dc:	2b01      	cmp	r3, #1
 800a5de:	f361 451f 	bfi	r5, r1, #16, #16
 800a5e2:	d10c      	bne.n	800a5fe <pbuf_alloc_reference+0x32>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800a5e4:	200b      	movs	r0, #11
 800a5e6:	f7ff fdb5 	bl	800a154 <memp_malloc>
  if (p == NULL) {
 800a5ea:	b138      	cbz	r0, 800a5fc <pbuf_alloc_reference+0x30>
  p->next = NULL;
 800a5ec:	2300      	movs	r3, #0
  p->ref = 1;
 800a5ee:	2201      	movs	r2, #1
  p->payload = payload;
 800a5f0:	6046      	str	r6, [r0, #4]
  p->tot_len = tot_len;
 800a5f2:	6085      	str	r5, [r0, #8]
  p->next = NULL;
 800a5f4:	6003      	str	r3, [r0, #0]
  p->type_internal = (u8_t)type;
 800a5f6:	7304      	strb	r4, [r0, #12]
  p->flags = flags;
 800a5f8:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 800a5fa:	81c2      	strh	r2, [r0, #14]
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
  return p;
}
 800a5fc:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800a5fe:	4b04      	ldr	r3, [pc, #16]	@ (800a610 <pbuf_alloc_reference+0x44>)
 800a600:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800a604:	4903      	ldr	r1, [pc, #12]	@ (800a614 <pbuf_alloc_reference+0x48>)
 800a606:	4804      	ldr	r0, [pc, #16]	@ (800a618 <pbuf_alloc_reference+0x4c>)
 800a608:	f006 ff46 	bl	8011498 <iprintf>
 800a60c:	e7ea      	b.n	800a5e4 <pbuf_alloc_reference+0x18>
 800a60e:	bf00      	nop
 800a610:	08013418 	.word	0x08013418
 800a614:	08013448 	.word	0x08013448
 800a618:	0801241c 	.word	0x0801241c

0800a61c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800a61c:	b430      	push	{r4, r5}
  u16_t offset = (u16_t)l;
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800a61e:	3003      	adds	r0, #3
 800a620:	2400      	movs	r4, #0
{
 800a622:	f8bd c00c 	ldrh.w	ip, [sp, #12]
 800a626:	f361 040f 	bfi	r4, r1, #0, #16
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800a62a:	f020 0003 	bic.w	r0, r0, #3
{
 800a62e:	9d02      	ldr	r5, [sp, #8]
 800a630:	f361 441f 	bfi	r4, r1, #16, #16
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800a634:	4401      	add	r1, r0
 800a636:	4561      	cmp	r1, ip
 800a638:	d80d      	bhi.n	800a656 <pbuf_alloced_custom+0x3a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
  }

  if (payload_mem != NULL) {
 800a63a:	b105      	cbz	r5, 800a63e <pbuf_alloced_custom+0x22>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800a63c:	4405      	add	r5, r0
  } else {
    payload = NULL;
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800a63e:	4618      	mov	r0, r3
  p->next = NULL;
 800a640:	2300      	movs	r3, #0
  p->flags = flags;
 800a642:	2102      	movs	r1, #2
  p->next = NULL;
 800a644:	6003      	str	r3, [r0, #0]
  p->ref = 1;
 800a646:	2301      	movs	r3, #1
  p->payload = payload;
 800a648:	6045      	str	r5, [r0, #4]
  p->tot_len = tot_len;
 800a64a:	6084      	str	r4, [r0, #8]
  p->type_internal = (u8_t)type;
 800a64c:	7302      	strb	r2, [r0, #12]
  p->flags = flags;
 800a64e:	7341      	strb	r1, [r0, #13]
  p->ref = 1;
 800a650:	81c3      	strh	r3, [r0, #14]
  return &p->pbuf;
}
 800a652:	bc30      	pop	{r4, r5}
 800a654:	4770      	bx	lr
    return NULL;
 800a656:	2000      	movs	r0, #0
}
 800a658:	bc30      	pop	{r4, r5}
 800a65a:	4770      	bx	lr

0800a65c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800a65c:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 800a65e:	b1f0      	cbz	r0, 800a69e <pbuf_add_header+0x42>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800a660:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800a664:	d20b      	bcs.n	800a67e <pbuf_add_header+0x22>
  if (header_size_increment == 0) {
 800a666:	b1c1      	cbz	r1, 800a69a <pbuf_add_header+0x3e>
  increment_magnitude = (u16_t)header_size_increment;
 800a668:	b28a      	uxth	r2, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800a66a:	8903      	ldrh	r3, [r0, #8]
 800a66c:	4413      	add	r3, r2
 800a66e:	b29b      	uxth	r3, r3
 800a670:	429a      	cmp	r2, r3
 800a672:	d804      	bhi.n	800a67e <pbuf_add_header+0x22>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800a674:	f990 c00c 	ldrsb.w	ip, [r0, #12]
 800a678:	f1bc 0f00 	cmp.w	ip, #0
 800a67c:	db01      	blt.n	800a682 <pbuf_add_header+0x26>
    return 1;
 800a67e:	2001      	movs	r0, #1
  return pbuf_add_header_impl(p, header_size_increment, 0);
}
 800a680:	bd10      	pop	{r4, pc}
    payload = (u8_t *)p->payload - header_size_increment;
 800a682:	6844      	ldr	r4, [r0, #4]
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800a684:	f100 0c10 	add.w	ip, r0, #16
    payload = (u8_t *)p->payload - header_size_increment;
 800a688:	1a61      	subs	r1, r4, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800a68a:	4561      	cmp	r1, ip
 800a68c:	d3f7      	bcc.n	800a67e <pbuf_add_header+0x22>
  p->len = (u16_t)(p->len + increment_magnitude);
 800a68e:	f8b0 c00a 	ldrh.w	ip, [r0, #10]
  p->payload = payload;
 800a692:	6041      	str	r1, [r0, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800a694:	4462      	add	r2, ip
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800a696:	8103      	strh	r3, [r0, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 800a698:	8142      	strh	r2, [r0, #10]
    return 0;
 800a69a:	2000      	movs	r0, #0
}
 800a69c:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 800a69e:	4b04      	ldr	r3, [pc, #16]	@ (800a6b0 <pbuf_add_header+0x54>)
 800a6a0:	f240 12df 	movw	r2, #479	@ 0x1df
 800a6a4:	4903      	ldr	r1, [pc, #12]	@ (800a6b4 <pbuf_add_header+0x58>)
 800a6a6:	4804      	ldr	r0, [pc, #16]	@ (800a6b8 <pbuf_add_header+0x5c>)
 800a6a8:	f006 fef6 	bl	8011498 <iprintf>
    return 1;
 800a6ac:	2001      	movs	r0, #1
 800a6ae:	e7e7      	b.n	800a680 <pbuf_add_header+0x24>
 800a6b0:	08013418 	.word	0x08013418
 800a6b4:	0801282c 	.word	0x0801282c
 800a6b8:	0801241c 	.word	0x0801241c

0800a6bc <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800a6bc:	b510      	push	{r4, lr}
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a6be:	b188      	cbz	r0, 800a6e4 <pbuf_remove_header+0x28>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800a6c0:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800a6c4:	d215      	bcs.n	800a6f2 <pbuf_remove_header+0x36>
    return 1;
  }
  if (header_size_decrement == 0) {
 800a6c6:	b159      	cbz	r1, 800a6e0 <pbuf_remove_header+0x24>
    return 0;
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800a6c8:	b28a      	uxth	r2, r1
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800a6ca:	8943      	ldrh	r3, [r0, #10]
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d312      	bcc.n	800a6f6 <pbuf_remove_header+0x3a>
  /* remember current payload pointer */
  payload = p->payload;
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800a6d0:	6844      	ldr	r4, [r0, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800a6d2:	1a9b      	subs	r3, r3, r2
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800a6d4:	440c      	add	r4, r1
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800a6d6:	8901      	ldrh	r1, [r0, #8]
  p->len = (u16_t)(p->len - increment_magnitude);
 800a6d8:	8143      	strh	r3, [r0, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800a6da:	1a8b      	subs	r3, r1, r2
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800a6dc:	6044      	str	r4, [r0, #4]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800a6de:	8103      	strh	r3, [r0, #8]
    return 0;
 800a6e0:	2000      	movs	r0, #0

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
}
 800a6e2:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 800a6e4:	4b08      	ldr	r3, [pc, #32]	@ (800a708 <pbuf_remove_header+0x4c>)
 800a6e6:	f240 224b 	movw	r2, #587	@ 0x24b
 800a6ea:	4908      	ldr	r1, [pc, #32]	@ (800a70c <pbuf_remove_header+0x50>)
 800a6ec:	4808      	ldr	r0, [pc, #32]	@ (800a710 <pbuf_remove_header+0x54>)
 800a6ee:	f006 fed3 	bl	8011498 <iprintf>
    return 1;
 800a6f2:	2001      	movs	r0, #1
}
 800a6f4:	bd10      	pop	{r4, pc}
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800a6f6:	4b04      	ldr	r3, [pc, #16]	@ (800a708 <pbuf_remove_header+0x4c>)
 800a6f8:	f240 2255 	movw	r2, #597	@ 0x255
 800a6fc:	4905      	ldr	r1, [pc, #20]	@ (800a714 <pbuf_remove_header+0x58>)
 800a6fe:	4804      	ldr	r0, [pc, #16]	@ (800a710 <pbuf_remove_header+0x54>)
 800a700:	f006 feca 	bl	8011498 <iprintf>
 800a704:	e7f5      	b.n	800a6f2 <pbuf_remove_header+0x36>
 800a706:	bf00      	nop
 800a708:	08013418 	.word	0x08013418
 800a70c:	0801282c 	.word	0x0801282c
 800a710:	0801241c 	.word	0x0801241c
 800a714:	0801345c 	.word	0x0801345c

0800a718 <pbuf_header_force>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
  if (header_size_increment < 0) {
 800a718:	2900      	cmp	r1, #0
 800a71a:	db19      	blt.n	800a750 <pbuf_header_force+0x38>
  LWIP_ASSERT("p != NULL", p != NULL);
 800a71c:	4603      	mov	r3, r0
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800a71e:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 800a720:	b1c8      	cbz	r0, 800a756 <pbuf_header_force+0x3e>
  if (header_size_increment == 0) {
 800a722:	b199      	cbz	r1, 800a74c <pbuf_header_force+0x34>
  increment_magnitude = (u16_t)header_size_increment;
 800a724:	b288      	uxth	r0, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800a726:	891a      	ldrh	r2, [r3, #8]
 800a728:	4402      	add	r2, r0
 800a72a:	b292      	uxth	r2, r2
 800a72c:	4290      	cmp	r0, r2
 800a72e:	d819      	bhi.n	800a764 <pbuf_header_force+0x4c>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800a730:	f993 c00c 	ldrsb.w	ip, [r3, #12]
    payload = (u8_t *)p->payload - header_size_increment;
 800a734:	685c      	ldr	r4, [r3, #4]
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800a736:	f1bc 0f00 	cmp.w	ip, #0
    payload = (u8_t *)p->payload - header_size_increment;
 800a73a:	eba4 0101 	sub.w	r1, r4, r1
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800a73e:	db13      	blt.n	800a768 <pbuf_header_force+0x50>
  p->len = (u16_t)(p->len + increment_magnitude);
 800a740:	f8b3 c00a 	ldrh.w	ip, [r3, #10]
  p->payload = payload;
 800a744:	6059      	str	r1, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800a746:	4460      	add	r0, ip
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800a748:	811a      	strh	r2, [r3, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 800a74a:	8158      	strh	r0, [r3, #10]
    return 0;
 800a74c:	2000      	movs	r0, #0
  return pbuf_header_impl(p, header_size_increment, 1);
}
 800a74e:	bd10      	pop	{r4, pc}
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800a750:	4249      	negs	r1, r1
 800a752:	f7ff bfb3 	b.w	800a6bc <pbuf_remove_header>
  LWIP_ASSERT("p != NULL", p != NULL);
 800a756:	4b07      	ldr	r3, [pc, #28]	@ (800a774 <pbuf_header_force+0x5c>)
 800a758:	f240 12df 	movw	r2, #479	@ 0x1df
 800a75c:	4906      	ldr	r1, [pc, #24]	@ (800a778 <pbuf_header_force+0x60>)
 800a75e:	4807      	ldr	r0, [pc, #28]	@ (800a77c <pbuf_header_force+0x64>)
 800a760:	f006 fe9a 	bl	8011498 <iprintf>
    return 1;
 800a764:	2001      	movs	r0, #1
}
 800a766:	bd10      	pop	{r4, pc}
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800a768:	f103 0c10 	add.w	ip, r3, #16
 800a76c:	4561      	cmp	r1, ip
 800a76e:	d2e7      	bcs.n	800a740 <pbuf_header_force+0x28>
 800a770:	e7f8      	b.n	800a764 <pbuf_header_force+0x4c>
 800a772:	bf00      	nop
 800a774:	08013418 	.word	0x08013418
 800a778:	0801282c 	.word	0x0801282c
 800a77c:	0801241c 	.word	0x0801241c

0800a780 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800a780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800a784:	4605      	mov	r5, r0
 800a786:	2800      	cmp	r0, #0
 800a788:	d055      	beq.n	800a836 <pbuf_free+0xb6>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800a78a:	2600      	movs	r6, #0
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a78c:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 800a850 <pbuf_free+0xd0>
 800a790:	f8df 90c8 	ldr.w	r9, [pc, #200]	@ 800a85c <pbuf_free+0xdc>
 800a794:	4f2c      	ldr	r7, [pc, #176]	@ (800a848 <pbuf_free+0xc8>)
 800a796:	e008      	b.n	800a7aa <pbuf_free+0x2a>
      alloc_src = pbuf_get_allocsrc(p);
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800a798:	692b      	ldr	r3, [r5, #16]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d03d      	beq.n	800a81a <pbuf_free+0x9a>
        pc->custom_free_function(p);
 800a79e:	4628      	mov	r0, r5
 800a7a0:	4798      	blx	r3
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
        }
      }
      count++;
 800a7a2:	3601      	adds	r6, #1
 800a7a4:	b2f6      	uxtb	r6, r6
  while (p != NULL) {
 800a7a6:	b1fc      	cbz	r4, 800a7e8 <pbuf_free+0x68>
      /* proceed to next pbuf */
      p = q;
 800a7a8:	4625      	mov	r5, r4
    SYS_ARCH_PROTECT(old_level);
 800a7aa:	f006 fc59 	bl	8011060 <sys_arch_protect>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a7ae:	7bab      	ldrb	r3, [r5, #14]
    SYS_ARCH_PROTECT(old_level);
 800a7b0:	4604      	mov	r4, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a7b2:	b1e3      	cbz	r3, 800a7ee <pbuf_free+0x6e>
    ref = --(p->ref);
 800a7b4:	3b01      	subs	r3, #1
    SYS_ARCH_UNPROTECT(old_level);
 800a7b6:	4620      	mov	r0, r4
    ref = --(p->ref);
 800a7b8:	b2dc      	uxtb	r4, r3
 800a7ba:	73ac      	strb	r4, [r5, #14]
    SYS_ARCH_UNPROTECT(old_level);
 800a7bc:	f006 fc5c 	bl	8011078 <sys_arch_unprotect>
    if (ref == 0) {
 800a7c0:	b994      	cbnz	r4, 800a7e8 <pbuf_free+0x68>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800a7c2:	7b6a      	ldrb	r2, [r5, #13]
      q = p->next;
 800a7c4:	682c      	ldr	r4, [r5, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800a7c6:	0792      	lsls	r2, r2, #30
      alloc_src = pbuf_get_allocsrc(p);
 800a7c8:	7b2b      	ldrb	r3, [r5, #12]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800a7ca:	d4e5      	bmi.n	800a798 <pbuf_free+0x18>
      alloc_src = pbuf_get_allocsrc(p);
 800a7cc:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800a7d0:	2b02      	cmp	r3, #2
 800a7d2:	d01d      	beq.n	800a810 <pbuf_free+0x90>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800a7d4:	2b01      	cmp	r3, #1
 800a7d6:	d029      	beq.n	800a82c <pbuf_free+0xac>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800a7d8:	b993      	cbnz	r3, 800a800 <pbuf_free+0x80>
      count++;
 800a7da:	3601      	adds	r6, #1
          mem_free(p);
 800a7dc:	4628      	mov	r0, r5
 800a7de:	f7ff f9db 	bl	8009b98 <mem_free>
      count++;
 800a7e2:	b2f6      	uxtb	r6, r6
  while (p != NULL) {
 800a7e4:	2c00      	cmp	r4, #0
 800a7e6:	d1df      	bne.n	800a7a8 <pbuf_free+0x28>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 800a7e8:	4630      	mov	r0, r6
 800a7ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a7ee:	4643      	mov	r3, r8
 800a7f0:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800a7f4:	4649      	mov	r1, r9
 800a7f6:	4638      	mov	r0, r7
 800a7f8:	f006 fe4e 	bl	8011498 <iprintf>
    ref = --(p->ref);
 800a7fc:	7bab      	ldrb	r3, [r5, #14]
 800a7fe:	e7d9      	b.n	800a7b4 <pbuf_free+0x34>
          LWIP_ASSERT("invalid pbuf type", 0);
 800a800:	4643      	mov	r3, r8
 800a802:	f240 320f 	movw	r2, #783	@ 0x30f
 800a806:	4911      	ldr	r1, [pc, #68]	@ (800a84c <pbuf_free+0xcc>)
 800a808:	4638      	mov	r0, r7
 800a80a:	f006 fe45 	bl	8011498 <iprintf>
 800a80e:	e7c8      	b.n	800a7a2 <pbuf_free+0x22>
          memp_free(MEMP_PBUF_POOL, p);
 800a810:	4629      	mov	r1, r5
 800a812:	200c      	movs	r0, #12
 800a814:	f7ff fce4 	bl	800a1e0 <memp_free>
 800a818:	e7c3      	b.n	800a7a2 <pbuf_free+0x22>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800a81a:	4b0d      	ldr	r3, [pc, #52]	@ (800a850 <pbuf_free+0xd0>)
 800a81c:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800a820:	490c      	ldr	r1, [pc, #48]	@ (800a854 <pbuf_free+0xd4>)
 800a822:	4809      	ldr	r0, [pc, #36]	@ (800a848 <pbuf_free+0xc8>)
 800a824:	f006 fe38 	bl	8011498 <iprintf>
        pc->custom_free_function(p);
 800a828:	692b      	ldr	r3, [r5, #16]
 800a82a:	e7b8      	b.n	800a79e <pbuf_free+0x1e>
          memp_free(MEMP_PBUF, p);
 800a82c:	4629      	mov	r1, r5
 800a82e:	200b      	movs	r0, #11
 800a830:	f7ff fcd6 	bl	800a1e0 <memp_free>
 800a834:	e7b5      	b.n	800a7a2 <pbuf_free+0x22>
    LWIP_ASSERT("p != NULL", p != NULL);
 800a836:	4b06      	ldr	r3, [pc, #24]	@ (800a850 <pbuf_free+0xd0>)
 800a838:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800a83c:	4906      	ldr	r1, [pc, #24]	@ (800a858 <pbuf_free+0xd8>)
    return 0;
 800a83e:	462e      	mov	r6, r5
    LWIP_ASSERT("p != NULL", p != NULL);
 800a840:	4801      	ldr	r0, [pc, #4]	@ (800a848 <pbuf_free+0xc8>)
 800a842:	f006 fe29 	bl	8011498 <iprintf>
    return 0;
 800a846:	e7cf      	b.n	800a7e8 <pbuf_free+0x68>
 800a848:	0801241c 	.word	0x0801241c
 800a84c:	080134b8 	.word	0x080134b8
 800a850:	08013418 	.word	0x08013418
 800a854:	08013494 	.word	0x08013494
 800a858:	0801282c 	.word	0x0801282c
 800a85c:	0801347c 	.word	0x0801347c

0800a860 <pbuf_alloc>:
  switch (type) {
 800a860:	f5b2 7fc1 	cmp.w	r2, #386	@ 0x182
{
 800a864:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a868:	4688      	mov	r8, r1
 800a86a:	b083      	sub	sp, #12
  switch (type) {
 800a86c:	d041      	beq.n	800a8f2 <pbuf_alloc+0x92>
 800a86e:	d80f      	bhi.n	800a890 <pbuf_alloc+0x30>
 800a870:	f022 0340 	bic.w	r3, r2, #64	@ 0x40
 800a874:	2b01      	cmp	r3, #1
 800a876:	d036      	beq.n	800a8e6 <pbuf_alloc+0x86>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800a878:	4b44      	ldr	r3, [pc, #272]	@ (800a98c <pbuf_alloc+0x12c>)
 800a87a:	f240 1227 	movw	r2, #295	@ 0x127
 800a87e:	4944      	ldr	r1, [pc, #272]	@ (800a990 <pbuf_alloc+0x130>)
 800a880:	4844      	ldr	r0, [pc, #272]	@ (800a994 <pbuf_alloc+0x134>)
 800a882:	f006 fe09 	bl	8011498 <iprintf>
          return NULL;
 800a886:	2400      	movs	r4, #0
}
 800a888:	4620      	mov	r0, r4
 800a88a:	b003      	add	sp, #12
 800a88c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  switch (type) {
 800a890:	f5b2 7f20 	cmp.w	r2, #640	@ 0x280
 800a894:	d1f0      	bne.n	800a878 <pbuf_alloc+0x18>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800a896:	1cc3      	adds	r3, r0, #3
 800a898:	1cca      	adds	r2, r1, #3
 800a89a:	4605      	mov	r5, r0
 800a89c:	f022 0203 	bic.w	r2, r2, #3
 800a8a0:	f023 0303 	bic.w	r3, r3, #3
 800a8a4:	4413      	add	r3, r2
 800a8a6:	b29b      	uxth	r3, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800a8a8:	f103 0010 	add.w	r0, r3, #16
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a8ac:	4293      	cmp	r3, r2
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800a8ae:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a8b0:	d3e9      	bcc.n	800a886 <pbuf_alloc+0x26>
 800a8b2:	4282      	cmp	r2, r0
 800a8b4:	d8e7      	bhi.n	800a886 <pbuf_alloc+0x26>
      p = (struct pbuf *)mem_malloc(alloc_len);
 800a8b6:	f7ff fb17 	bl	8009ee8 <mem_malloc>
      if (p == NULL) {
 800a8ba:	4604      	mov	r4, r0
 800a8bc:	2800      	cmp	r0, #0
 800a8be:	d0e3      	beq.n	800a888 <pbuf_alloc+0x28>
  p->next = NULL;
 800a8c0:	2100      	movs	r1, #0
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800a8c2:	1943      	adds	r3, r0, r5
  p->type_internal = (u8_t)type;
 800a8c4:	4834      	ldr	r0, [pc, #208]	@ (800a998 <pbuf_alloc+0x138>)
  p->tot_len = tot_len;
 800a8c6:	460a      	mov	r2, r1
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800a8c8:	3313      	adds	r3, #19
  p->type_internal = (u8_t)type;
 800a8ca:	60e0      	str	r0, [r4, #12]
}
 800a8cc:	4620      	mov	r0, r4
  p->tot_len = tot_len;
 800a8ce:	f368 020f 	bfi	r2, r8, #0, #16
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800a8d2:	f023 0303 	bic.w	r3, r3, #3
  p->tot_len = tot_len;
 800a8d6:	f368 421f 	bfi	r2, r8, #16, #16
  p->payload = payload;
 800a8da:	e9c4 1300 	strd	r1, r3, [r4]
  p->tot_len = tot_len;
 800a8de:	60a2      	str	r2, [r4, #8]
}
 800a8e0:	b003      	add	sp, #12
 800a8e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      p = pbuf_alloc_reference(NULL, length, type);
 800a8e6:	2000      	movs	r0, #0
}
 800a8e8:	b003      	add	sp, #12
 800a8ea:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
      p = pbuf_alloc_reference(NULL, length, type);
 800a8ee:	f7ff be6d 	b.w	800a5cc <pbuf_alloc_reference>
  switch (type) {
 800a8f2:	2100      	movs	r1, #0
 800a8f4:	4681      	mov	r9, r0
  p->type_internal = (u8_t)type;
 800a8f6:	4d29      	ldr	r5, [pc, #164]	@ (800a99c <pbuf_alloc+0x13c>)
  switch (type) {
 800a8f8:	460c      	mov	r4, r1
  p->next = NULL;
 800a8fa:	460e      	mov	r6, r1
 800a8fc:	e009      	b.n	800a912 <pbuf_alloc+0xb2>
          last->next = q;
 800a8fe:	6038      	str	r0, [r7, #0]
        rem_len = (u16_t)(rem_len - qlen);
 800a900:	eba8 0303 	sub.w	r3, r8, r3
        offset = 0;
 800a904:	f04f 0900 	mov.w	r9, #0
        rem_len = (u16_t)(rem_len - qlen);
 800a908:	fa1f f883 	uxth.w	r8, r3
      } while (rem_len > 0);
 800a90c:	f1b8 0f00 	cmp.w	r8, #0
 800a910:	d0ba      	beq.n	800a888 <pbuf_alloc+0x28>
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800a912:	200c      	movs	r0, #12
 800a914:	460f      	mov	r7, r1
 800a916:	f7ff fc1d 	bl	800a154 <memp_malloc>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a91a:	f109 0203 	add.w	r2, r9, #3
        if (q == NULL) {
 800a91e:	4601      	mov	r1, r0
 800a920:	b1b0      	cbz	r0, 800a950 <pbuf_alloc+0xf0>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a922:	f022 0303 	bic.w	r3, r2, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800a926:	eb00 0209 	add.w	r2, r0, r9
  p->tot_len = tot_len;
 800a92a:	f8a0 8008 	strh.w	r8, [r0, #8]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a92e:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800a932:	3213      	adds	r2, #19
  p->next = NULL;
 800a934:	6006      	str	r6, [r0, #0]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a936:	b29b      	uxth	r3, r3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800a938:	f022 0203 	bic.w	r2, r2, #3
  p->type_internal = (u8_t)type;
 800a93c:	60c5      	str	r5, [r0, #12]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a93e:	4543      	cmp	r3, r8
  p->payload = payload;
 800a940:	6042      	str	r2, [r0, #4]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a942:	bf28      	it	cs
 800a944:	4643      	movcs	r3, r8
  p->len = len;
 800a946:	8143      	strh	r3, [r0, #10]
        if (p == NULL) {
 800a948:	2c00      	cmp	r4, #0
 800a94a:	d1d8      	bne.n	800a8fe <pbuf_alloc+0x9e>
 800a94c:	4604      	mov	r4, r0
 800a94e:	e7d7      	b.n	800a900 <pbuf_alloc+0xa0>
  queued = pbuf_free_ooseq_pending;
 800a950:	4e13      	ldr	r6, [pc, #76]	@ (800a9a0 <pbuf_alloc+0x140>)
 800a952:	9001      	str	r0, [sp, #4]
  SYS_ARCH_PROTECT(old_level);
 800a954:	f006 fb84 	bl	8011060 <sys_arch_protect>
  queued = pbuf_free_ooseq_pending;
 800a958:	7835      	ldrb	r5, [r6, #0]
  pbuf_free_ooseq_pending = 1;
 800a95a:	2301      	movs	r3, #1
  queued = pbuf_free_ooseq_pending;
 800a95c:	b2ed      	uxtb	r5, r5
  pbuf_free_ooseq_pending = 1;
 800a95e:	7033      	strb	r3, [r6, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800a960:	f006 fb8a 	bl	8011078 <sys_arch_unprotect>
  if (!queued) {
 800a964:	9901      	ldr	r1, [sp, #4]
 800a966:	b12d      	cbz	r5, 800a974 <pbuf_alloc+0x114>
          if (p) {
 800a968:	2c00      	cmp	r4, #0
 800a96a:	d08c      	beq.n	800a886 <pbuf_alloc+0x26>
            pbuf_free(p);
 800a96c:	4620      	mov	r0, r4
 800a96e:	f7ff ff07 	bl	800a780 <pbuf_free>
 800a972:	e788      	b.n	800a886 <pbuf_alloc+0x26>
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800a974:	480b      	ldr	r0, [pc, #44]	@ (800a9a4 <pbuf_alloc+0x144>)
 800a976:	f7fe ffc9 	bl	800990c <tcpip_try_callback>
 800a97a:	2800      	cmp	r0, #0
 800a97c:	d0f4      	beq.n	800a968 <pbuf_alloc+0x108>
 800a97e:	f006 fb6f 	bl	8011060 <sys_arch_protect>
 800a982:	9901      	ldr	r1, [sp, #4]
 800a984:	7031      	strb	r1, [r6, #0]
 800a986:	f006 fb77 	bl	8011078 <sys_arch_unprotect>
 800a98a:	e7ed      	b.n	800a968 <pbuf_alloc+0x108>
 800a98c:	08013418 	.word	0x08013418
 800a990:	080134cc 	.word	0x080134cc
 800a994:	0801241c 	.word	0x0801241c
 800a998:	00010080 	.word	0x00010080
 800a99c:	00010082 	.word	0x00010082
 800a9a0:	24009cf4 	.word	0x24009cf4
 800a9a4:	0800a599 	.word	0x0800a599

0800a9a8 <pbuf_realloc>:
{
 800a9a8:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800a9aa:	4604      	mov	r4, r0
{
 800a9ac:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800a9ae:	2800      	cmp	r0, #0
 800a9b0:	d03b      	beq.n	800aa2a <pbuf_realloc+0x82>
  if (new_len >= p->tot_len) {
 800a9b2:	8922      	ldrh	r2, [r4, #8]
 800a9b4:	42aa      	cmp	r2, r5
 800a9b6:	d91f      	bls.n	800a9f8 <pbuf_realloc+0x50>
  while (rem_len > q->len) {
 800a9b8:	8963      	ldrh	r3, [r4, #10]
 800a9ba:	429d      	cmp	r5, r3
 800a9bc:	d90d      	bls.n	800a9da <pbuf_realloc+0x32>
 800a9be:	1aa9      	subs	r1, r5, r2
 800a9c0:	b289      	uxth	r1, r1
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800a9c2:	440a      	add	r2, r1
    rem_len = (u16_t)(rem_len - q->len);
 800a9c4:	1aeb      	subs	r3, r5, r3
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800a9c6:	8122      	strh	r2, [r4, #8]
    rem_len = (u16_t)(rem_len - q->len);
 800a9c8:	b29d      	uxth	r5, r3
    q = q->next;
 800a9ca:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800a9cc:	2c00      	cmp	r4, #0
 800a9ce:	d034      	beq.n	800aa3a <pbuf_realloc+0x92>
  while (rem_len > q->len) {
 800a9d0:	8963      	ldrh	r3, [r4, #10]
 800a9d2:	42ab      	cmp	r3, r5
 800a9d4:	d201      	bcs.n	800a9da <pbuf_realloc+0x32>
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800a9d6:	8922      	ldrh	r2, [r4, #8]
 800a9d8:	e7f3      	b.n	800a9c2 <pbuf_realloc+0x1a>
 800a9da:	2600      	movs	r6, #0
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800a9dc:	7b22      	ldrb	r2, [r4, #12]
 800a9de:	f365 060f 	bfi	r6, r5, #0, #16
 800a9e2:	0712      	lsls	r2, r2, #28
 800a9e4:	f365 461f 	bfi	r6, r5, #16, #16
 800a9e8:	d007      	beq.n	800a9fa <pbuf_realloc+0x52>
  if (q->next != NULL) {
 800a9ea:	6820      	ldr	r0, [r4, #0]
  q->tot_len = q->len;
 800a9ec:	60a6      	str	r6, [r4, #8]
  if (q->next != NULL) {
 800a9ee:	b108      	cbz	r0, 800a9f4 <pbuf_realloc+0x4c>
    pbuf_free(q->next);
 800a9f0:	f7ff fec6 	bl	800a780 <pbuf_free>
  q->next = NULL;
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	6023      	str	r3, [r4, #0]
}
 800a9f8:	bd70      	pop	{r4, r5, r6, pc}
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800a9fa:	42ab      	cmp	r3, r5
 800a9fc:	d0f5      	beq.n	800a9ea <pbuf_realloc+0x42>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800a9fe:	7b63      	ldrb	r3, [r4, #13]
 800aa00:	079b      	lsls	r3, r3, #30
 800aa02:	d4f2      	bmi.n	800a9ea <pbuf_realloc+0x42>
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800aa04:	6863      	ldr	r3, [r4, #4]
 800aa06:	4620      	mov	r0, r4
 800aa08:	1b1b      	subs	r3, r3, r4
 800aa0a:	18e9      	adds	r1, r5, r3
 800aa0c:	b289      	uxth	r1, r1
 800aa0e:	f7ff f9ad 	bl	8009d6c <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800aa12:	4604      	mov	r4, r0
 800aa14:	2800      	cmp	r0, #0
 800aa16:	d1e8      	bne.n	800a9ea <pbuf_realloc+0x42>
 800aa18:	4b0c      	ldr	r3, [pc, #48]	@ (800aa4c <pbuf_realloc+0xa4>)
 800aa1a:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800aa1e:	490c      	ldr	r1, [pc, #48]	@ (800aa50 <pbuf_realloc+0xa8>)
 800aa20:	480c      	ldr	r0, [pc, #48]	@ (800aa54 <pbuf_realloc+0xac>)
 800aa22:	f006 fd39 	bl	8011498 <iprintf>
  q->len = rem_len;
 800aa26:	8164      	strh	r4, [r4, #10]
 800aa28:	deff      	udf	#255	@ 0xff
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800aa2a:	4b08      	ldr	r3, [pc, #32]	@ (800aa4c <pbuf_realloc+0xa4>)
 800aa2c:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800aa30:	4909      	ldr	r1, [pc, #36]	@ (800aa58 <pbuf_realloc+0xb0>)
 800aa32:	4808      	ldr	r0, [pc, #32]	@ (800aa54 <pbuf_realloc+0xac>)
 800aa34:	f006 fd30 	bl	8011498 <iprintf>
 800aa38:	e7bb      	b.n	800a9b2 <pbuf_realloc+0xa>
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800aa3a:	4b04      	ldr	r3, [pc, #16]	@ (800aa4c <pbuf_realloc+0xa4>)
 800aa3c:	f240 12af 	movw	r2, #431	@ 0x1af
 800aa40:	4906      	ldr	r1, [pc, #24]	@ (800aa5c <pbuf_realloc+0xb4>)
 800aa42:	4804      	ldr	r0, [pc, #16]	@ (800aa54 <pbuf_realloc+0xac>)
 800aa44:	f006 fd28 	bl	8011498 <iprintf>
  while (rem_len > q->len) {
 800aa48:	8963      	ldrh	r3, [r4, #10]
 800aa4a:	deff      	udf	#255	@ 0xff
 800aa4c:	08013418 	.word	0x08013418
 800aa50:	08013518 	.word	0x08013518
 800aa54:	0801241c 	.word	0x0801241c
 800aa58:	080134e8 	.word	0x080134e8
 800aa5c:	08013500 	.word	0x08013500

0800aa60 <pbuf_free_header>:
{
 800aa60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa62:	4604      	mov	r4, r0
  while (free_left && p) {
 800aa64:	b1b9      	cbz	r1, 800aa96 <pbuf_free_header+0x36>
 800aa66:	b1b0      	cbz	r0, 800aa96 <pbuf_free_header+0x36>
 800aa68:	460d      	mov	r5, r1
      f->next = 0;
 800aa6a:	2700      	movs	r7, #0
    if (free_left >= p->len) {
 800aa6c:	8963      	ldrh	r3, [r4, #10]
      pbuf_free(f);
 800aa6e:	4620      	mov	r0, r4
    if (free_left >= p->len) {
 800aa70:	42ab      	cmp	r3, r5
      free_left = (u16_t)(free_left - p->len);
 800aa72:	eba5 0203 	sub.w	r2, r5, r3
    if (free_left >= p->len) {
 800aa76:	d80b      	bhi.n	800aa90 <pbuf_free_header+0x30>
      p = p->next;
 800aa78:	6826      	ldr	r6, [r4, #0]
      free_left = (u16_t)(free_left - p->len);
 800aa7a:	b295      	uxth	r5, r2
      f->next = 0;
 800aa7c:	6027      	str	r7, [r4, #0]
      p = p->next;
 800aa7e:	4634      	mov	r4, r6
      pbuf_free(f);
 800aa80:	f7ff fe7e 	bl	800a780 <pbuf_free>
  while (free_left && p) {
 800aa84:	b10d      	cbz	r5, 800aa8a <pbuf_free_header+0x2a>
 800aa86:	2e00      	cmp	r6, #0
 800aa88:	d1f0      	bne.n	800aa6c <pbuf_free_header+0xc>
      p = p->next;
 800aa8a:	4634      	mov	r4, r6
}
 800aa8c:	4620      	mov	r0, r4
 800aa8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      pbuf_remove_header(p, free_left);
 800aa90:	4629      	mov	r1, r5
 800aa92:	f7ff fe13 	bl	800a6bc <pbuf_remove_header>
}
 800aa96:	4620      	mov	r0, r4
 800aa98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa9a:	bf00      	nop

0800aa9c <pbuf_clen>:
pbuf_clen(const struct pbuf *p)
{
  u16_t len;

  len = 0;
  while (p != NULL) {
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	b130      	cbz	r0, 800aaae <pbuf_clen+0x12>
  len = 0;
 800aaa0:	2000      	movs	r0, #0
    ++len;
 800aaa2:	3001      	adds	r0, #1
    p = p->next;
 800aaa4:	681b      	ldr	r3, [r3, #0]
    ++len;
 800aaa6:	b280      	uxth	r0, r0
  while (p != NULL) {
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d1fa      	bne.n	800aaa2 <pbuf_clen+0x6>
 800aaac:	4770      	bx	lr
  }
  return len;
}
 800aaae:	4770      	bx	lr

0800aab0 <pbuf_ref>:
 */
void
pbuf_ref(struct pbuf *p)
{
  /* pbuf given? */
  if (p != NULL) {
 800aab0:	b158      	cbz	r0, 800aaca <pbuf_ref+0x1a>
{
 800aab2:	b510      	push	{r4, lr}
 800aab4:	4604      	mov	r4, r0
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800aab6:	f006 fad3 	bl	8011060 <sys_arch_protect>
 800aaba:	7ba3      	ldrb	r3, [r4, #14]
 800aabc:	3301      	adds	r3, #1
 800aabe:	73a3      	strb	r3, [r4, #14]
 800aac0:	f006 fada 	bl	8011078 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800aac4:	7ba3      	ldrb	r3, [r4, #14]
 800aac6:	b10b      	cbz	r3, 800aacc <pbuf_ref+0x1c>
  }
}
 800aac8:	bd10      	pop	{r4, pc}
 800aaca:	4770      	bx	lr
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800aacc:	4b04      	ldr	r3, [pc, #16]	@ (800aae0 <pbuf_ref+0x30>)
 800aace:	f240 3242 	movw	r2, #834	@ 0x342
 800aad2:	4904      	ldr	r1, [pc, #16]	@ (800aae4 <pbuf_ref+0x34>)
 800aad4:	4804      	ldr	r0, [pc, #16]	@ (800aae8 <pbuf_ref+0x38>)
}
 800aad6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800aada:	f006 bcdd 	b.w	8011498 <iprintf>
 800aade:	bf00      	nop
 800aae0:	08013418 	.word	0x08013418
 800aae4:	08013534 	.word	0x08013534
 800aae8:	0801241c 	.word	0x0801241c

0800aaec <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800aaec:	b570      	push	{r4, r5, r6, lr}
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800aaee:	2800      	cmp	r0, #0
 800aaf0:	d02d      	beq.n	800ab4e <pbuf_cat+0x62>
 800aaf2:	460d      	mov	r5, r1
 800aaf4:	2900      	cmp	r1, #0
 800aaf6:	d02a      	beq.n	800ab4e <pbuf_cat+0x62>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800aaf8:	6803      	ldr	r3, [r0, #0]
 800aafa:	4604      	mov	r4, r0
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800aafc:	8902      	ldrh	r2, [r0, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800aafe:	b18b      	cbz	r3, 800ab24 <pbuf_cat+0x38>
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ab00:	8922      	ldrh	r2, [r4, #8]
 800ab02:	8928      	ldrh	r0, [r5, #8]
 800ab04:	4402      	add	r2, r0
 800ab06:	8122      	strh	r2, [r4, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800ab08:	461c      	mov	r4, r3
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d1f7      	bne.n	800ab00 <pbuf_cat+0x14>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800ab10:	8922      	ldrh	r2, [r4, #8]
 800ab12:	8963      	ldrh	r3, [r4, #10]
 800ab14:	429a      	cmp	r2, r3
 800ab16:	d108      	bne.n	800ab2a <pbuf_cat+0x3e>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ab18:	8922      	ldrh	r2, [r4, #8]
 800ab1a:	892b      	ldrh	r3, [r5, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800ab1c:	6025      	str	r5, [r4, #0]
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ab1e:	441a      	add	r2, r3
 800ab20:	8122      	strh	r2, [r4, #8]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800ab22:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800ab24:	8943      	ldrh	r3, [r0, #10]
 800ab26:	4293      	cmp	r3, r2
 800ab28:	d0f7      	beq.n	800ab1a <pbuf_cat+0x2e>
 800ab2a:	4b0d      	ldr	r3, [pc, #52]	@ (800ab60 <pbuf_cat+0x74>)
 800ab2c:	f240 3262 	movw	r2, #866	@ 0x362
 800ab30:	490c      	ldr	r1, [pc, #48]	@ (800ab64 <pbuf_cat+0x78>)
 800ab32:	480d      	ldr	r0, [pc, #52]	@ (800ab68 <pbuf_cat+0x7c>)
 800ab34:	f006 fcb0 	bl	8011498 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800ab38:	6823      	ldr	r3, [r4, #0]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d0ec      	beq.n	800ab18 <pbuf_cat+0x2c>
 800ab3e:	4b08      	ldr	r3, [pc, #32]	@ (800ab60 <pbuf_cat+0x74>)
 800ab40:	f240 3263 	movw	r2, #867	@ 0x363
 800ab44:	4909      	ldr	r1, [pc, #36]	@ (800ab6c <pbuf_cat+0x80>)
 800ab46:	4808      	ldr	r0, [pc, #32]	@ (800ab68 <pbuf_cat+0x7c>)
 800ab48:	f006 fca6 	bl	8011498 <iprintf>
 800ab4c:	e7e4      	b.n	800ab18 <pbuf_cat+0x2c>
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800ab4e:	4b04      	ldr	r3, [pc, #16]	@ (800ab60 <pbuf_cat+0x74>)
 800ab50:	f240 3259 	movw	r2, #857	@ 0x359
 800ab54:	4906      	ldr	r1, [pc, #24]	@ (800ab70 <pbuf_cat+0x84>)
 800ab56:	4804      	ldr	r0, [pc, #16]	@ (800ab68 <pbuf_cat+0x7c>)
}
 800ab58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800ab5c:	f006 bc9c 	b.w	8011498 <iprintf>
 800ab60:	08013418 	.word	0x08013418
 800ab64:	08013580 	.word	0x08013580
 800ab68:	0801241c 	.word	0x0801241c
 800ab6c:	080135b0 	.word	0x080135b0
 800ab70:	08013548 	.word	0x08013548

0800ab74 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800ab74:	b510      	push	{r4, lr}
 800ab76:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 800ab78:	f7ff ffb8 	bl	800aaec <pbuf_cat>
  if (p != NULL) {
 800ab7c:	b144      	cbz	r4, 800ab90 <pbuf_chain+0x1c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800ab7e:	f006 fa6f 	bl	8011060 <sys_arch_protect>
 800ab82:	7ba3      	ldrb	r3, [r4, #14]
 800ab84:	3301      	adds	r3, #1
 800ab86:	73a3      	strb	r3, [r4, #14]
 800ab88:	f006 fa76 	bl	8011078 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800ab8c:	7ba3      	ldrb	r3, [r4, #14]
 800ab8e:	b103      	cbz	r3, 800ab92 <pbuf_chain+0x1e>
  /* t is now referenced by h */
  pbuf_ref(t);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800ab90:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800ab92:	4b04      	ldr	r3, [pc, #16]	@ (800aba4 <pbuf_chain+0x30>)
 800ab94:	f240 3242 	movw	r2, #834	@ 0x342
 800ab98:	4903      	ldr	r1, [pc, #12]	@ (800aba8 <pbuf_chain+0x34>)
 800ab9a:	4804      	ldr	r0, [pc, #16]	@ (800abac <pbuf_chain+0x38>)
}
 800ab9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800aba0:	f006 bc7a 	b.w	8011498 <iprintf>
 800aba4:	08013418 	.word	0x08013418
 800aba8:	08013534 	.word	0x08013534
 800abac:	0801241c 	.word	0x0801241c

0800abb0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800abb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800abb4:	2800      	cmp	r0, #0
 800abb6:	f000 80ad 	beq.w	800ad14 <pbuf_copy+0x164>
 800abba:	fab1 f581 	clz	r5, r1
 800abbe:	460e      	mov	r6, r1
 800abc0:	096d      	lsrs	r5, r5, #5
 800abc2:	2900      	cmp	r1, #0
 800abc4:	f000 80a6 	beq.w	800ad14 <pbuf_copy+0x164>
 800abc8:	8902      	ldrh	r2, [r0, #8]
 800abca:	4604      	mov	r4, r0
 800abcc:	890b      	ldrh	r3, [r1, #8]
 800abce:	429a      	cmp	r2, r3
 800abd0:	f0c0 80a0 	bcc.w	800ad14 <pbuf_copy+0x164>
 800abd4:	8942      	ldrh	r2, [r0, #10]
  size_t offset_to = 0, offset_from = 0, len;
 800abd6:	462f      	mov	r7, r5
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800abd8:	f8df 914c 	ldr.w	r9, [pc, #332]	@ 800ad28 <pbuf_copy+0x178>
 800abdc:	f8df a15c 	ldr.w	sl, [pc, #348]	@ 800ad3c <pbuf_copy+0x18c>
 800abe0:	f8df 814c 	ldr.w	r8, [pc, #332]	@ 800ad30 <pbuf_copy+0x180>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800abe4:	8973      	ldrh	r3, [r6, #10]
 800abe6:	eba2 0b07 	sub.w	fp, r2, r7
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800abea:	6860      	ldr	r0, [r4, #4]
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800abec:	1b5b      	subs	r3, r3, r5
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800abee:	6871      	ldr	r1, [r6, #4]
 800abf0:	4438      	add	r0, r7
 800abf2:	459b      	cmp	fp, r3
 800abf4:	4429      	add	r1, r5
 800abf6:	bf28      	it	cs
 800abf8:	469b      	movcs	fp, r3
 800abfa:	465a      	mov	r2, fp
    offset_to += len;
 800abfc:	445f      	add	r7, fp
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800abfe:	f006 fe7e 	bl	80118fe <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800ac02:	8963      	ldrh	r3, [r4, #10]
    offset_from += len;
 800ac04:	445d      	add	r5, fp
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800ac06:	42bb      	cmp	r3, r7
 800ac08:	d328      	bcc.n	800ac5c <pbuf_copy+0xac>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800ac0a:	8973      	ldrh	r3, [r6, #10]
 800ac0c:	42ab      	cmp	r3, r5
 800ac0e:	d31c      	bcc.n	800ac4a <pbuf_copy+0x9a>
    if (offset_from >= p_from->len) {
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
 800ac10:	8962      	ldrh	r2, [r4, #10]
    if (offset_from >= p_from->len) {
 800ac12:	42ab      	cmp	r3, r5
    if (offset_to == p_to->len) {
 800ac14:	4611      	mov	r1, r2
    if (offset_from >= p_from->len) {
 800ac16:	d90c      	bls.n	800ac32 <pbuf_copy+0x82>
    if (offset_to == p_to->len) {
 800ac18:	4297      	cmp	r7, r2
 800ac1a:	d027      	beq.n	800ac6c <pbuf_copy+0xbc>
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800ac1c:	8931      	ldrh	r1, [r6, #8]
 800ac1e:	4299      	cmp	r1, r3
 800ac20:	d053      	beq.n	800acca <pbuf_copy+0x11a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800ac22:	8923      	ldrh	r3, [r4, #8]
 800ac24:	4293      	cmp	r3, r2
 800ac26:	d1dd      	bne.n	800abe4 <pbuf_copy+0x34>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ac28:	6823      	ldr	r3, [r4, #0]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d137      	bne.n	800ac9e <pbuf_copy+0xee>
 800ac2e:	8962      	ldrh	r2, [r4, #10]
 800ac30:	e7d8      	b.n	800abe4 <pbuf_copy+0x34>
    if (offset_to == p_to->len) {
 800ac32:	4297      	cmp	r7, r2
      p_from = p_from->next;
 800ac34:	6836      	ldr	r6, [r6, #0]
    if (offset_to == p_to->len) {
 800ac36:	d025      	beq.n	800ac84 <pbuf_copy+0xd4>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800ac38:	2e00      	cmp	r6, #0
 800ac3a:	d138      	bne.n	800acae <pbuf_copy+0xfe>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800ac3c:	8923      	ldrh	r3, [r4, #8]
 800ac3e:	428b      	cmp	r3, r1
 800ac40:	d02a      	beq.n	800ac98 <pbuf_copy+0xe8>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800ac42:	2400      	movs	r4, #0
}
 800ac44:	4620      	mov	r0, r4
 800ac46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800ac4a:	464b      	mov	r3, r9
 800ac4c:	f240 32da 	movw	r2, #986	@ 0x3da
 800ac50:	4934      	ldr	r1, [pc, #208]	@ (800ad24 <pbuf_copy+0x174>)
 800ac52:	4640      	mov	r0, r8
 800ac54:	f006 fc20 	bl	8011498 <iprintf>
    if (offset_from >= p_from->len) {
 800ac58:	8973      	ldrh	r3, [r6, #10]
 800ac5a:	e7d9      	b.n	800ac10 <pbuf_copy+0x60>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800ac5c:	464b      	mov	r3, r9
 800ac5e:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800ac62:	4651      	mov	r1, sl
 800ac64:	4640      	mov	r0, r8
 800ac66:	f006 fc17 	bl	8011498 <iprintf>
 800ac6a:	e7ce      	b.n	800ac0a <pbuf_copy+0x5a>
      p_to = p_to->next;
 800ac6c:	6824      	ldr	r4, [r4, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800ac6e:	2c00      	cmp	r4, #0
 800ac70:	d044      	beq.n	800acfc <pbuf_copy+0x14c>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800ac72:	8932      	ldrh	r2, [r6, #8]
 800ac74:	429a      	cmp	r2, r3
 800ac76:	d136      	bne.n	800ace6 <pbuf_copy+0x136>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ac78:	6833      	ldr	r3, [r6, #0]
 800ac7a:	bb43      	cbnz	r3, 800acce <pbuf_copy+0x11e>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800ac7c:	2c00      	cmp	r4, #0
 800ac7e:	d132      	bne.n	800ace6 <pbuf_copy+0x136>
 800ac80:	4627      	mov	r7, r4
 800ac82:	e7d4      	b.n	800ac2e <pbuf_copy+0x7e>
      p_to = p_to->next;
 800ac84:	6824      	ldr	r4, [r4, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800ac86:	b9c4      	cbnz	r4, 800acba <pbuf_copy+0x10a>
 800ac88:	2e00      	cmp	r6, #0
 800ac8a:	d137      	bne.n	800acfc <pbuf_copy+0x14c>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800ac8c:	2c00      	cmp	r4, #0
 800ac8e:	d0d9      	beq.n	800ac44 <pbuf_copy+0x94>
 800ac90:	8961      	ldrh	r1, [r4, #10]
 800ac92:	8923      	ldrh	r3, [r4, #8]
 800ac94:	428b      	cmp	r3, r1
 800ac96:	d1d4      	bne.n	800ac42 <pbuf_copy+0x92>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ac98:	6824      	ldr	r4, [r4, #0]
 800ac9a:	2c00      	cmp	r4, #0
 800ac9c:	d0d2      	beq.n	800ac44 <pbuf_copy+0x94>
 800ac9e:	4b22      	ldr	r3, [pc, #136]	@ (800ad28 <pbuf_copy+0x178>)
 800aca0:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800aca4:	4921      	ldr	r1, [pc, #132]	@ (800ad2c <pbuf_copy+0x17c>)
 800aca6:	4822      	ldr	r0, [pc, #136]	@ (800ad30 <pbuf_copy+0x180>)
 800aca8:	f006 fbf6 	bl	8011498 <iprintf>
 800acac:	e016      	b.n	800acdc <pbuf_copy+0x12c>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800acae:	8971      	ldrh	r1, [r6, #10]
 800acb0:	8933      	ldrh	r3, [r6, #8]
 800acb2:	4299      	cmp	r1, r3
 800acb4:	d01e      	beq.n	800acf4 <pbuf_copy+0x144>
      offset_from = 0;
 800acb6:	2500      	movs	r5, #0
 800acb8:	e7b3      	b.n	800ac22 <pbuf_copy+0x72>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800acba:	2e00      	cmp	r6, #0
 800acbc:	d0e6      	beq.n	800ac8c <pbuf_copy+0xdc>
 800acbe:	8932      	ldrh	r2, [r6, #8]
      offset_from = 0;
 800acc0:	2500      	movs	r5, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800acc2:	8973      	ldrh	r3, [r6, #10]
 800acc4:	429a      	cmp	r2, r3
 800acc6:	d1d9      	bne.n	800ac7c <pbuf_copy+0xcc>
 800acc8:	e7d6      	b.n	800ac78 <pbuf_copy+0xc8>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800acca:	6833      	ldr	r3, [r6, #0]
 800accc:	b163      	cbz	r3, 800ace8 <pbuf_copy+0x138>
 800acce:	4b16      	ldr	r3, [pc, #88]	@ (800ad28 <pbuf_copy+0x178>)
 800acd0:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800acd4:	4915      	ldr	r1, [pc, #84]	@ (800ad2c <pbuf_copy+0x17c>)
 800acd6:	4816      	ldr	r0, [pc, #88]	@ (800ad30 <pbuf_copy+0x180>)
 800acd8:	f006 fbde 	bl	8011498 <iprintf>
 800acdc:	f06f 0405 	mvn.w	r4, #5
}
 800ace0:	4620      	mov	r0, r4
 800ace2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ace6:	2700      	movs	r7, #0
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800ace8:	8923      	ldrh	r3, [r4, #8]
 800acea:	8962      	ldrh	r2, [r4, #10]
 800acec:	4293      	cmp	r3, r2
 800acee:	f47f af79 	bne.w	800abe4 <pbuf_copy+0x34>
 800acf2:	e799      	b.n	800ac28 <pbuf_copy+0x78>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800acf4:	6835      	ldr	r5, [r6, #0]
 800acf6:	2d00      	cmp	r5, #0
 800acf8:	d093      	beq.n	800ac22 <pbuf_copy+0x72>
 800acfa:	e7e8      	b.n	800acce <pbuf_copy+0x11e>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800acfc:	4b0a      	ldr	r3, [pc, #40]	@ (800ad28 <pbuf_copy+0x178>)
 800acfe:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800ad02:	490c      	ldr	r1, [pc, #48]	@ (800ad34 <pbuf_copy+0x184>)
 800ad04:	480a      	ldr	r0, [pc, #40]	@ (800ad30 <pbuf_copy+0x180>)
 800ad06:	f006 fbc7 	bl	8011498 <iprintf>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800ad0a:	f06f 040f 	mvn.w	r4, #15
}
 800ad0e:	4620      	mov	r0, r4
 800ad10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800ad14:	4b04      	ldr	r3, [pc, #16]	@ (800ad28 <pbuf_copy+0x178>)
 800ad16:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800ad1a:	4907      	ldr	r1, [pc, #28]	@ (800ad38 <pbuf_copy+0x188>)
 800ad1c:	4804      	ldr	r0, [pc, #16]	@ (800ad30 <pbuf_copy+0x180>)
 800ad1e:	f006 fbbb 	bl	8011498 <iprintf>
 800ad22:	e7f2      	b.n	800ad0a <pbuf_copy+0x15a>
 800ad24:	08013608 	.word	0x08013608
 800ad28:	08013418 	.word	0x08013418
 800ad2c:	08013634 	.word	0x08013634
 800ad30:	0801241c 	.word	0x0801241c
 800ad34:	08013624 	.word	0x08013624
 800ad38:	080135c0 	.word	0x080135c0
 800ad3c:	080135f0 	.word	0x080135f0

0800ad40 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800ad40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const struct pbuf *p;
  u16_t left = 0;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800ad44:	b378      	cbz	r0, 800ada6 <pbuf_copy_partial+0x66>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800ad46:	460f      	mov	r7, r1
 800ad48:	2900      	cmp	r1, #0
 800ad4a:	d035      	beq.n	800adb8 <pbuf_copy_partial+0x78>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ad4c:	4690      	mov	r8, r2
 800ad4e:	b38a      	cbz	r2, 800adb4 <pbuf_copy_partial+0x74>
 800ad50:	4605      	mov	r5, r0
 800ad52:	4619      	mov	r1, r3
  u16_t left = 0;
 800ad54:	2600      	movs	r6, #0
 800ad56:	e005      	b.n	800ad64 <pbuf_copy_partial+0x24>
    if ((offset != 0) && (offset >= p->len)) {
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800ad58:	b299      	uxth	r1, r3
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ad5a:	682d      	ldr	r5, [r5, #0]
 800ad5c:	f1b8 0f00 	cmp.w	r8, #0
 800ad60:	d01e      	beq.n	800ada0 <pbuf_copy_partial+0x60>
 800ad62:	b1ed      	cbz	r5, 800ada0 <pbuf_copy_partial+0x60>
      buf_copy_len = (u16_t)(p->len - offset);
      if (buf_copy_len > len) {
        buf_copy_len = len;
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800ad64:	19b8      	adds	r0, r7, r6
    if ((offset != 0) && (offset >= p->len)) {
 800ad66:	f8b5 c00a 	ldrh.w	ip, [r5, #10]
 800ad6a:	b119      	cbz	r1, 800ad74 <pbuf_copy_partial+0x34>
 800ad6c:	4561      	cmp	r1, ip
      offset = (u16_t)(offset - p->len);
 800ad6e:	eba1 030c 	sub.w	r3, r1, ip
    if ((offset != 0) && (offset >= p->len)) {
 800ad72:	d2f1      	bcs.n	800ad58 <pbuf_copy_partial+0x18>
      buf_copy_len = (u16_t)(p->len - offset);
 800ad74:	ebac 0401 	sub.w	r4, ip, r1
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800ad78:	686a      	ldr	r2, [r5, #4]
 800ad7a:	b2a4      	uxth	r4, r4
 800ad7c:	4411      	add	r1, r2
 800ad7e:	4544      	cmp	r4, r8
 800ad80:	bf28      	it	cs
 800ad82:	4644      	movcs	r4, r8
 800ad84:	4622      	mov	r2, r4
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800ad86:	4426      	add	r6, r4
      left = (u16_t)(left + buf_copy_len);
      len = (u16_t)(len - buf_copy_len);
 800ad88:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800ad8c:	f006 fdb7 	bl	80118fe <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800ad90:	b2b6      	uxth	r6, r6
      offset = 0;
 800ad92:	2100      	movs	r1, #0
      len = (u16_t)(len - buf_copy_len);
 800ad94:	fa1f f884 	uxth.w	r8, r4
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ad98:	682d      	ldr	r5, [r5, #0]
 800ad9a:	f1b8 0f00 	cmp.w	r8, #0
 800ad9e:	d1e0      	bne.n	800ad62 <pbuf_copy_partial+0x22>
    }
  }
  return copied_total;
}
 800ada0:	4630      	mov	r0, r6
 800ada2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800ada6:	4b08      	ldr	r3, [pc, #32]	@ (800adc8 <pbuf_copy_partial+0x88>)
 800ada8:	f240 420a 	movw	r2, #1034	@ 0x40a
 800adac:	4907      	ldr	r1, [pc, #28]	@ (800adcc <pbuf_copy_partial+0x8c>)
 800adae:	4808      	ldr	r0, [pc, #32]	@ (800add0 <pbuf_copy_partial+0x90>)
 800adb0:	f006 fb72 	bl	8011498 <iprintf>
 800adb4:	2600      	movs	r6, #0
 800adb6:	e7f3      	b.n	800ada0 <pbuf_copy_partial+0x60>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800adb8:	4b03      	ldr	r3, [pc, #12]	@ (800adc8 <pbuf_copy_partial+0x88>)
 800adba:	f240 420b 	movw	r2, #1035	@ 0x40b
 800adbe:	4905      	ldr	r1, [pc, #20]	@ (800add4 <pbuf_copy_partial+0x94>)
 800adc0:	4803      	ldr	r0, [pc, #12]	@ (800add0 <pbuf_copy_partial+0x90>)
 800adc2:	f006 fb69 	bl	8011498 <iprintf>
 800adc6:	e7f5      	b.n	800adb4 <pbuf_copy_partial+0x74>
 800adc8:	08013418 	.word	0x08013418
 800adcc:	08013660 	.word	0x08013660
 800add0:	0801241c 	.word	0x0801241c
 800add4:	08013680 	.word	0x08013680

0800add8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800add8:	b538      	push	{r3, r4, r5, lr}
 800adda:	4615      	mov	r5, r2
 800addc:	460a      	mov	r2, r1
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800adde:	8929      	ldrh	r1, [r5, #8]
 800ade0:	f7ff fd3e 	bl	800a860 <pbuf_alloc>
  if (q == NULL) {
 800ade4:	4604      	mov	r4, r0
 800ade6:	b118      	cbz	r0, 800adf0 <pbuf_clone+0x18>
    return NULL;
  }
  err = pbuf_copy(q, p);
 800ade8:	4629      	mov	r1, r5
 800adea:	f7ff fee1 	bl	800abb0 <pbuf_copy>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800adee:	b908      	cbnz	r0, 800adf4 <pbuf_clone+0x1c>
  return q;
}
 800adf0:	4620      	mov	r0, r4
 800adf2:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800adf4:	4b04      	ldr	r3, [pc, #16]	@ (800ae08 <pbuf_clone+0x30>)
 800adf6:	f240 5224 	movw	r2, #1316	@ 0x524
 800adfa:	4904      	ldr	r1, [pc, #16]	@ (800ae0c <pbuf_clone+0x34>)
 800adfc:	4804      	ldr	r0, [pc, #16]	@ (800ae10 <pbuf_clone+0x38>)
 800adfe:	f006 fb4b 	bl	8011498 <iprintf>
}
 800ae02:	4620      	mov	r0, r4
 800ae04:	bd38      	pop	{r3, r4, r5, pc}
 800ae06:	bf00      	nop
 800ae08:	08013418 	.word	0x08013418
 800ae0c:	080136a4 	.word	0x080136a4
 800ae10:	0801241c 	.word	0x0801241c

0800ae14 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800ae14:	b470      	push	{r4, r5, r6}
 800ae16:	4e12      	ldr	r6, [pc, #72]	@ (800ae60 <tcp_new_port+0x4c>)
 800ae18:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800ae1c:	4d11      	ldr	r5, [pc, #68]	@ (800ae64 <tcp_new_port+0x50>)
  u16_t n = 0;
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800ae1e:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 800ae22:	8831      	ldrh	r1, [r6, #0]
  tcp_port++;
 800ae24:	3101      	adds	r1, #1
 800ae26:	4c10      	ldr	r4, [pc, #64]	@ (800ae68 <tcp_new_port+0x54>)
 800ae28:	b289      	uxth	r1, r1
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800ae2a:	4561      	cmp	r1, ip
 800ae2c:	bf08      	it	eq
 800ae2e:	f44f 4140 	moveq.w	r1, #49152	@ 0xc000
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800ae32:	6823      	ldr	r3, [r4, #0]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	b913      	cbnz	r3, 800ae3e <tcp_new_port+0x2a>
 800ae38:	e00b      	b.n	800ae52 <tcp_new_port+0x3e>
 800ae3a:	68db      	ldr	r3, [r3, #12]
 800ae3c:	b14b      	cbz	r3, 800ae52 <tcp_new_port+0x3e>
      if (pcb->local_port == tcp_port) {
 800ae3e:	8ada      	ldrh	r2, [r3, #22]
 800ae40:	428a      	cmp	r2, r1
 800ae42:	d1fa      	bne.n	800ae3a <tcp_new_port+0x26>
        n++;
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800ae44:	3801      	subs	r0, #1
 800ae46:	b280      	uxth	r0, r0
 800ae48:	2800      	cmp	r0, #0
 800ae4a:	d1eb      	bne.n	800ae24 <tcp_new_port+0x10>
 800ae4c:	8031      	strh	r1, [r6, #0]
        goto again;
      }
    }
  }
  return tcp_port;
}
 800ae4e:	bc70      	pop	{r4, r5, r6}
 800ae50:	4770      	bx	lr
 800ae52:	3404      	adds	r4, #4
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800ae54:	42ac      	cmp	r4, r5
 800ae56:	d1ec      	bne.n	800ae32 <tcp_new_port+0x1e>
 800ae58:	4608      	mov	r0, r1
 800ae5a:	8031      	strh	r1, [r6, #0]
}
 800ae5c:	bc70      	pop	{r4, r5, r6}
 800ae5e:	4770      	bx	lr
 800ae60:	2400002c 	.word	0x2400002c
 800ae64:	08013d34 	.word	0x08013d34
 800ae68:	08013d24 	.word	0x08013d24

0800ae6c <tcp_close_shutdown_fin>:
{
 800ae6c:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ae6e:	4604      	mov	r4, r0
 800ae70:	b1f8      	cbz	r0, 800aeb2 <tcp_close_shutdown_fin+0x46>
  switch (pcb->state) {
 800ae72:	7d23      	ldrb	r3, [r4, #20]
 800ae74:	2b04      	cmp	r3, #4
 800ae76:	d005      	beq.n	800ae84 <tcp_close_shutdown_fin+0x18>
 800ae78:	2b07      	cmp	r3, #7
 800ae7a:	d00d      	beq.n	800ae98 <tcp_close_shutdown_fin+0x2c>
 800ae7c:	2b03      	cmp	r3, #3
 800ae7e:	d001      	beq.n	800ae84 <tcp_close_shutdown_fin+0x18>
      return ERR_OK;
 800ae80:	2000      	movs	r0, #0
}
 800ae82:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 800ae84:	4620      	mov	r0, r4
 800ae86:	f003 fbf5 	bl	800e674 <tcp_send_fin>
      if (err == ERR_OK) {
 800ae8a:	b948      	cbnz	r0, 800aea0 <tcp_close_shutdown_fin+0x34>
  if (err == ERR_OK) {
 800ae8c:	2305      	movs	r3, #5
    tcp_output(pcb);
 800ae8e:	4620      	mov	r0, r4
        pcb->state = LAST_ACK;
 800ae90:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 800ae92:	f003 fd5d 	bl	800e950 <tcp_output>
 800ae96:	e7f3      	b.n	800ae80 <tcp_close_shutdown_fin+0x14>
      err = tcp_send_fin(pcb);
 800ae98:	4620      	mov	r0, r4
 800ae9a:	f003 fbeb 	bl	800e674 <tcp_send_fin>
      if (err == ERR_OK) {
 800ae9e:	b130      	cbz	r0, 800aeae <tcp_close_shutdown_fin+0x42>
  } else if (err == ERR_MEM) {
 800aea0:	1c43      	adds	r3, r0, #1
 800aea2:	d1ee      	bne.n	800ae82 <tcp_close_shutdown_fin+0x16>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800aea4:	8b63      	ldrh	r3, [r4, #26]
 800aea6:	f043 0308 	orr.w	r3, r3, #8
 800aeaa:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 800aeac:	e7e8      	b.n	800ae80 <tcp_close_shutdown_fin+0x14>
 800aeae:	2309      	movs	r3, #9
 800aeb0:	e7ed      	b.n	800ae8e <tcp_close_shutdown_fin+0x22>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800aeb2:	4b04      	ldr	r3, [pc, #16]	@ (800aec4 <tcp_close_shutdown_fin+0x58>)
 800aeb4:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800aeb8:	4903      	ldr	r1, [pc, #12]	@ (800aec8 <tcp_close_shutdown_fin+0x5c>)
 800aeba:	4804      	ldr	r0, [pc, #16]	@ (800aecc <tcp_close_shutdown_fin+0x60>)
 800aebc:	f006 faec 	bl	8011498 <iprintf>
 800aec0:	e7d7      	b.n	800ae72 <tcp_close_shutdown_fin+0x6>
 800aec2:	bf00      	nop
 800aec4:	080136b8 	.word	0x080136b8
 800aec8:	080136e8 	.word	0x080136e8
 800aecc:	0801241c 	.word	0x0801241c

0800aed0 <tcp_init>:
{
 800aed0:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800aed2:	f006 f9cf 	bl	8011274 <rand>
 800aed6:	4b02      	ldr	r3, [pc, #8]	@ (800aee0 <tcp_init+0x10>)
 800aed8:	4a02      	ldr	r2, [pc, #8]	@ (800aee4 <tcp_init+0x14>)
 800aeda:	4303      	orrs	r3, r0
 800aedc:	8013      	strh	r3, [r2, #0]
}
 800aede:	bd08      	pop	{r3, pc}
 800aee0:	ffffc000 	.word	0xffffc000
 800aee4:	2400002c 	.word	0x2400002c

0800aee8 <tcp_free>:
{
 800aee8:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800aeea:	7d03      	ldrb	r3, [r0, #20]
{
 800aeec:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800aeee:	2b01      	cmp	r3, #1
 800aef0:	d005      	beq.n	800aefe <tcp_free+0x16>
  memp_free(MEMP_TCP_PCB, pcb);
 800aef2:	4621      	mov	r1, r4
 800aef4:	2001      	movs	r0, #1
}
 800aef6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 800aefa:	f7ff b971 	b.w	800a1e0 <memp_free>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800aefe:	4906      	ldr	r1, [pc, #24]	@ (800af18 <tcp_free+0x30>)
 800af00:	22d4      	movs	r2, #212	@ 0xd4
 800af02:	4b06      	ldr	r3, [pc, #24]	@ (800af1c <tcp_free+0x34>)
 800af04:	4806      	ldr	r0, [pc, #24]	@ (800af20 <tcp_free+0x38>)
 800af06:	f006 fac7 	bl	8011498 <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 800af0a:	4621      	mov	r1, r4
 800af0c:	2001      	movs	r0, #1
}
 800af0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 800af12:	f7ff b965 	b.w	800a1e0 <memp_free>
 800af16:	bf00      	nop
 800af18:	080136f4 	.word	0x080136f4
 800af1c:	080136b8 	.word	0x080136b8
 800af20:	0801241c 	.word	0x0801241c

0800af24 <tcp_bind>:
    ipaddr = IP4_ADDR_ANY;
 800af24:	2900      	cmp	r1, #0
{
 800af26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 800af28:	4b25      	ldr	r3, [pc, #148]	@ (800afc0 <tcp_bind+0x9c>)
  if (ipaddr == NULL) {
 800af2a:	460e      	mov	r6, r1
    ipaddr = IP4_ADDR_ANY;
 800af2c:	bf14      	ite	ne
 800af2e:	460e      	movne	r6, r1
 800af30:	461e      	moveq	r6, r3
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800af32:	2800      	cmp	r0, #0
 800af34:	d03a      	beq.n	800afac <tcp_bind+0x88>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800af36:	7d03      	ldrb	r3, [r0, #20]
 800af38:	4607      	mov	r7, r0
 800af3a:	bb6b      	cbnz	r3, 800af98 <tcp_bind+0x74>
  if (port == 0) {
 800af3c:	b322      	cbz	r2, 800af88 <tcp_bind+0x64>
 800af3e:	4921      	ldr	r1, [pc, #132]	@ (800afc4 <tcp_bind+0xa0>)
 800af40:	f101 0010 	add.w	r0, r1, #16
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800af44:	680b      	ldr	r3, [r1, #0]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	b913      	cbnz	r3, 800af50 <tcp_bind+0x2c>
 800af4a:	e00e      	b.n	800af6a <tcp_bind+0x46>
 800af4c:	68db      	ldr	r3, [r3, #12]
 800af4e:	b163      	cbz	r3, 800af6a <tcp_bind+0x46>
        if (cpcb->local_port == port) {
 800af50:	f8b3 c016 	ldrh.w	ip, [r3, #22]
 800af54:	4594      	cmp	ip, r2
 800af56:	d1f9      	bne.n	800af4c <tcp_bind+0x28>
                (ip_addr_isany(&cpcb->local_ip) ||
 800af58:	681c      	ldr	r4, [r3, #0]
 800af5a:	b11c      	cbz	r4, 800af64 <tcp_bind+0x40>
                 ip_addr_isany(ipaddr) ||
 800af5c:	6835      	ldr	r5, [r6, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800af5e:	b10d      	cbz	r5, 800af64 <tcp_bind+0x40>
 800af60:	42ac      	cmp	r4, r5
 800af62:	d1f3      	bne.n	800af4c <tcp_bind+0x28>
              return ERR_USE;
 800af64:	f06f 0007 	mvn.w	r0, #7
}
 800af68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af6a:	3104      	adds	r1, #4
    for (i = 0; i < max_pcb_list; i++) {
 800af6c:	4281      	cmp	r1, r0
 800af6e:	d1e9      	bne.n	800af44 <tcp_bind+0x20>
  if (!ip_addr_isany(ipaddr)
 800af70:	6833      	ldr	r3, [r6, #0]
 800af72:	b103      	cbz	r3, 800af76 <tcp_bind+0x52>
    ip_addr_set(&pcb->local_ip, ipaddr);
 800af74:	603b      	str	r3, [r7, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800af76:	4b14      	ldr	r3, [pc, #80]	@ (800afc8 <tcp_bind+0xa4>)
  pcb->local_port = port;
 800af78:	82fa      	strh	r2, [r7, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800af7a:	681a      	ldr	r2, [r3, #0]
 800af7c:	601f      	str	r7, [r3, #0]
 800af7e:	60fa      	str	r2, [r7, #12]
 800af80:	f004 f800 	bl	800ef84 <tcp_timer_needed>
  return ERR_OK;
 800af84:	2000      	movs	r0, #0
}
 800af86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    port = tcp_new_port();
 800af88:	f7ff ff44 	bl	800ae14 <tcp_new_port>
    if (port == 0) {
 800af8c:	4602      	mov	r2, r0
 800af8e:	2800      	cmp	r0, #0
 800af90:	d1ee      	bne.n	800af70 <tcp_bind+0x4c>
      return ERR_BUF;
 800af92:	f06f 0001 	mvn.w	r0, #1
}
 800af96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800af98:	4b0c      	ldr	r3, [pc, #48]	@ (800afcc <tcp_bind+0xa8>)
 800af9a:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800af9e:	490c      	ldr	r1, [pc, #48]	@ (800afd0 <tcp_bind+0xac>)
 800afa0:	480c      	ldr	r0, [pc, #48]	@ (800afd4 <tcp_bind+0xb0>)
 800afa2:	f006 fa79 	bl	8011498 <iprintf>
 800afa6:	f06f 0005 	mvn.w	r0, #5
}
 800afaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800afac:	4b07      	ldr	r3, [pc, #28]	@ (800afcc <tcp_bind+0xa8>)
 800afae:	f240 22a9 	movw	r2, #681	@ 0x2a9
 800afb2:	4909      	ldr	r1, [pc, #36]	@ (800afd8 <tcp_bind+0xb4>)
 800afb4:	4807      	ldr	r0, [pc, #28]	@ (800afd4 <tcp_bind+0xb0>)
 800afb6:	f006 fa6f 	bl	8011498 <iprintf>
 800afba:	f06f 000f 	mvn.w	r0, #15
}
 800afbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afc0:	08014e14 	.word	0x08014e14
 800afc4:	08013d24 	.word	0x08013d24
 800afc8:	24009d04 	.word	0x24009d04
 800afcc:	080136b8 	.word	0x080136b8
 800afd0:	08013720 	.word	0x08013720
 800afd4:	0801241c 	.word	0x0801241c
 800afd8:	08013708 	.word	0x08013708

0800afdc <tcp_listen_with_backlog_and_err>:
{
 800afdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800afde:	4604      	mov	r4, r0
{
 800afe0:	4617      	mov	r7, r2
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800afe2:	2800      	cmp	r0, #0
 800afe4:	d05d      	beq.n	800b0a2 <tcp_listen_with_backlog_and_err+0xc6>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800afe6:	7d05      	ldrb	r5, [r0, #20]
 800afe8:	2d00      	cmp	r5, #0
 800afea:	d147      	bne.n	800b07c <tcp_listen_with_backlog_and_err+0xa0>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800afec:	2002      	movs	r0, #2
 800afee:	f7ff f8b1 	bl	800a154 <memp_malloc>
  if (lpcb == NULL) {
 800aff2:	4606      	mov	r6, r0
 800aff4:	2800      	cmp	r0, #0
 800aff6:	d051      	beq.n	800b09c <tcp_listen_with_backlog_and_err+0xc0>
  lpcb->callback_arg = pcb->callback_arg;
 800aff8:	6923      	ldr	r3, [r4, #16]
  lpcb->state = LISTEN;
 800affa:	2201      	movs	r2, #1
  lpcb->callback_arg = pcb->callback_arg;
 800affc:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 800affe:	8ae3      	ldrh	r3, [r4, #22]
  lpcb->state = LISTEN;
 800b000:	7502      	strb	r2, [r0, #20]
  lpcb->local_port = pcb->local_port;
 800b002:	82c3      	strh	r3, [r0, #22]
  lpcb->prio = pcb->prio;
 800b004:	7d62      	ldrb	r2, [r4, #21]
 800b006:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 800b008:	7a62      	ldrb	r2, [r4, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800b00a:	7205      	strb	r5, [r0, #8]
  lpcb->so_options = pcb->so_options;
 800b00c:	7242      	strb	r2, [r0, #9]
  lpcb->ttl = pcb->ttl;
 800b00e:	7ae2      	ldrb	r2, [r4, #11]
 800b010:	72c2      	strb	r2, [r0, #11]
  lpcb->tos = pcb->tos;
 800b012:	7aa2      	ldrb	r2, [r4, #10]
 800b014:	7282      	strb	r2, [r0, #10]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800b016:	6822      	ldr	r2, [r4, #0]
 800b018:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 800b01a:	b99b      	cbnz	r3, 800b044 <tcp_listen_with_backlog_and_err+0x68>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b01c:	7d23      	ldrb	r3, [r4, #20]
 800b01e:	2b01      	cmp	r3, #1
 800b020:	d020      	beq.n	800b064 <tcp_listen_with_backlog_and_err+0x88>
  memp_free(MEMP_TCP_PCB, pcb);
 800b022:	4621      	mov	r1, r4
 800b024:	2001      	movs	r0, #1
 800b026:	f7ff f8db 	bl	800a1e0 <memp_free>
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800b02a:	4b23      	ldr	r3, [pc, #140]	@ (800b0b8 <tcp_listen_with_backlog_and_err+0xdc>)
  lpcb->accept = tcp_accept_null;
 800b02c:	4923      	ldr	r1, [pc, #140]	@ (800b0bc <tcp_listen_with_backlog_and_err+0xe0>)
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800b02e:	681a      	ldr	r2, [r3, #0]
  lpcb->accept = tcp_accept_null;
 800b030:	61b1      	str	r1, [r6, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800b032:	60f2      	str	r2, [r6, #12]
 800b034:	601e      	str	r6, [r3, #0]
 800b036:	f003 ffa5 	bl	800ef84 <tcp_timer_needed>
  res = ERR_OK;
 800b03a:	2300      	movs	r3, #0
  if (err != NULL) {
 800b03c:	b107      	cbz	r7, 800b040 <tcp_listen_with_backlog_and_err+0x64>
    *err = res;
 800b03e:	703b      	strb	r3, [r7, #0]
}
 800b040:	4630      	mov	r0, r6
 800b042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800b044:	4a1e      	ldr	r2, [pc, #120]	@ (800b0c0 <tcp_listen_with_backlog_and_err+0xe4>)
 800b046:	6813      	ldr	r3, [r2, #0]
 800b048:	42a3      	cmp	r3, r4
 800b04a:	d012      	beq.n	800b072 <tcp_listen_with_backlog_and_err+0x96>
 800b04c:	b12b      	cbz	r3, 800b05a <tcp_listen_with_backlog_and_err+0x7e>
 800b04e:	68d9      	ldr	r1, [r3, #12]
 800b050:	42a1      	cmp	r1, r4
 800b052:	d01e      	beq.n	800b092 <tcp_listen_with_backlog_and_err+0xb6>
 800b054:	460b      	mov	r3, r1
 800b056:	2b00      	cmp	r3, #0
 800b058:	d1f9      	bne.n	800b04e <tcp_listen_with_backlog_and_err+0x72>
 800b05a:	2300      	movs	r3, #0
 800b05c:	60e3      	str	r3, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b05e:	7d23      	ldrb	r3, [r4, #20]
 800b060:	2b01      	cmp	r3, #1
 800b062:	d1de      	bne.n	800b022 <tcp_listen_with_backlog_and_err+0x46>
 800b064:	4b17      	ldr	r3, [pc, #92]	@ (800b0c4 <tcp_listen_with_backlog_and_err+0xe8>)
 800b066:	22d4      	movs	r2, #212	@ 0xd4
 800b068:	4917      	ldr	r1, [pc, #92]	@ (800b0c8 <tcp_listen_with_backlog_and_err+0xec>)
 800b06a:	4818      	ldr	r0, [pc, #96]	@ (800b0cc <tcp_listen_with_backlog_and_err+0xf0>)
 800b06c:	f006 fa14 	bl	8011498 <iprintf>
 800b070:	e7d7      	b.n	800b022 <tcp_listen_with_backlog_and_err+0x46>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800b072:	68e3      	ldr	r3, [r4, #12]
 800b074:	6013      	str	r3, [r2, #0]
 800b076:	2300      	movs	r3, #0
 800b078:	60e3      	str	r3, [r4, #12]
 800b07a:	e7f0      	b.n	800b05e <tcp_listen_with_backlog_and_err+0x82>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800b07c:	4b11      	ldr	r3, [pc, #68]	@ (800b0c4 <tcp_listen_with_backlog_and_err+0xe8>)
 800b07e:	f240 325a 	movw	r2, #858	@ 0x35a
 800b082:	4913      	ldr	r1, [pc, #76]	@ (800b0d0 <tcp_listen_with_backlog_and_err+0xf4>)
  struct tcp_pcb_listen *lpcb = NULL;
 800b084:	2600      	movs	r6, #0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800b086:	4811      	ldr	r0, [pc, #68]	@ (800b0cc <tcp_listen_with_backlog_and_err+0xf0>)
 800b088:	f006 fa06 	bl	8011498 <iprintf>
 800b08c:	f06f 030e 	mvn.w	r3, #14
 800b090:	e7d4      	b.n	800b03c <tcp_listen_with_backlog_and_err+0x60>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800b092:	68e2      	ldr	r2, [r4, #12]
 800b094:	60da      	str	r2, [r3, #12]
 800b096:	2300      	movs	r3, #0
 800b098:	60e3      	str	r3, [r4, #12]
 800b09a:	e7e0      	b.n	800b05e <tcp_listen_with_backlog_and_err+0x82>
    res = ERR_MEM;
 800b09c:	f04f 33ff 	mov.w	r3, #4294967295
 800b0a0:	e7cc      	b.n	800b03c <tcp_listen_with_backlog_and_err+0x60>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800b0a2:	4b08      	ldr	r3, [pc, #32]	@ (800b0c4 <tcp_listen_with_backlog_and_err+0xe8>)
 800b0a4:	f240 3259 	movw	r2, #857	@ 0x359
 800b0a8:	490a      	ldr	r1, [pc, #40]	@ (800b0d4 <tcp_listen_with_backlog_and_err+0xf8>)
  struct tcp_pcb_listen *lpcb = NULL;
 800b0aa:	4606      	mov	r6, r0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800b0ac:	4807      	ldr	r0, [pc, #28]	@ (800b0cc <tcp_listen_with_backlog_and_err+0xf0>)
 800b0ae:	f006 f9f3 	bl	8011498 <iprintf>
 800b0b2:	f06f 030f 	mvn.w	r3, #15
 800b0b6:	e7c1      	b.n	800b03c <tcp_listen_with_backlog_and_err+0x60>
 800b0b8:	24009d00 	.word	0x24009d00
 800b0bc:	0800bbc5 	.word	0x0800bbc5
 800b0c0:	24009d04 	.word	0x24009d04
 800b0c4:	080136b8 	.word	0x080136b8
 800b0c8:	080136f4 	.word	0x080136f4
 800b0cc:	0801241c 	.word	0x0801241c
 800b0d0:	08013778 	.word	0x08013778
 800b0d4:	08013748 	.word	0x08013748

0800b0d8 <tcp_update_rcv_ann_wnd>:
{
 800b0d8:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800b0da:	4604      	mov	r4, r0
 800b0dc:	b1c0      	cbz	r0, 800b110 <tcp_update_rcv_ann_wnd+0x38>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800b0de:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800b0e0:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b0e2:	f8b4 c032 	ldrh.w	ip, [r4, #50]	@ 0x32
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800b0e6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800b0e8:	1a58      	subs	r0, r3, r1
 800b0ea:	f5bc 6f86 	cmp.w	ip, #1072	@ 0x430
 800b0ee:	4410      	add	r0, r2
 800b0f0:	bf94      	ite	ls
 800b0f2:	eba0 050c 	subls.w	r5, r0, ip
 800b0f6:	f5a0 6586 	subhi.w	r5, r0, #1072	@ 0x430
 800b0fa:	2d00      	cmp	r5, #0
 800b0fc:	db01      	blt.n	800b102 <tcp_update_rcv_ann_wnd+0x2a>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800b0fe:	8563      	strh	r3, [r4, #42]	@ 0x2a
}
 800b100:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800b102:	1a53      	subs	r3, r2, r1
 800b104:	2b00      	cmp	r3, #0
 800b106:	dd0b      	ble.n	800b120 <tcp_update_rcv_ann_wnd+0x48>
 800b108:	2300      	movs	r3, #0
    return 0;
 800b10a:	4618      	mov	r0, r3
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800b10c:	8563      	strh	r3, [r4, #42]	@ 0x2a
}
 800b10e:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800b110:	4b0b      	ldr	r3, [pc, #44]	@ (800b140 <tcp_update_rcv_ann_wnd+0x68>)
 800b112:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800b116:	490b      	ldr	r1, [pc, #44]	@ (800b144 <tcp_update_rcv_ann_wnd+0x6c>)
 800b118:	480b      	ldr	r0, [pc, #44]	@ (800b148 <tcp_update_rcv_ann_wnd+0x70>)
 800b11a:	f006 f9bd 	bl	8011498 <iprintf>
 800b11e:	e7de      	b.n	800b0de <tcp_update_rcv_ann_wnd+0x6>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800b120:	1a8d      	subs	r5, r1, r2
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800b122:	f5b5 3f80 	cmp.w	r5, #65536	@ 0x10000
 800b126:	d203      	bcs.n	800b130 <tcp_update_rcv_ann_wnd+0x58>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800b128:	b2ab      	uxth	r3, r5
    return 0;
 800b12a:	2000      	movs	r0, #0
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800b12c:	8563      	strh	r3, [r4, #42]	@ 0x2a
}
 800b12e:	bd38      	pop	{r3, r4, r5, pc}
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800b130:	4b03      	ldr	r3, [pc, #12]	@ (800b140 <tcp_update_rcv_ann_wnd+0x68>)
 800b132:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800b136:	4905      	ldr	r1, [pc, #20]	@ (800b14c <tcp_update_rcv_ann_wnd+0x74>)
 800b138:	4803      	ldr	r0, [pc, #12]	@ (800b148 <tcp_update_rcv_ann_wnd+0x70>)
 800b13a:	f006 f9ad 	bl	8011498 <iprintf>
 800b13e:	e7f3      	b.n	800b128 <tcp_update_rcv_ann_wnd+0x50>
 800b140:	080136b8 	.word	0x080136b8
 800b144:	080137b0 	.word	0x080137b0
 800b148:	0801241c 	.word	0x0801241c
 800b14c:	080137d4 	.word	0x080137d4

0800b150 <tcp_recved>:
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800b150:	b340      	cbz	r0, 800b1a4 <tcp_recved+0x54>
{
 800b152:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800b154:	7d03      	ldrb	r3, [r0, #20]
 800b156:	4605      	mov	r5, r0
 800b158:	460c      	mov	r4, r1
 800b15a:	2b01      	cmp	r3, #1
 800b15c:	d01a      	beq.n	800b194 <tcp_recved+0x44>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800b15e:	8d2b      	ldrh	r3, [r5, #40]	@ 0x28
 800b160:	1919      	adds	r1, r3, r4
 800b162:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800b164:	428b      	cmp	r3, r1
 800b166:	d802      	bhi.n	800b16e <tcp_recved+0x1e>
 800b168:	f5b1 6f06 	cmp.w	r1, #2144	@ 0x860
 800b16c:	d901      	bls.n	800b172 <tcp_recved+0x22>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800b16e:	f44f 6106 	mov.w	r1, #2144	@ 0x860
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800b172:	4628      	mov	r0, r5
 800b174:	8529      	strh	r1, [r5, #40]	@ 0x28
 800b176:	f7ff ffaf 	bl	800b0d8 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800b17a:	f5b0 7f06 	cmp.w	r0, #536	@ 0x218
 800b17e:	d200      	bcs.n	800b182 <tcp_recved+0x32>
}
 800b180:	bd70      	pop	{r4, r5, r6, pc}
    tcp_ack_now(pcb);
 800b182:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 800b184:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 800b186:	f043 0302 	orr.w	r3, r3, #2
 800b18a:	836b      	strh	r3, [r5, #26]
}
 800b18c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tcp_output(pcb);
 800b190:	f003 bbde 	b.w	800e950 <tcp_output>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800b194:	4b07      	ldr	r3, [pc, #28]	@ (800b1b4 <tcp_recved+0x64>)
 800b196:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800b19a:	4907      	ldr	r1, [pc, #28]	@ (800b1b8 <tcp_recved+0x68>)
 800b19c:	4807      	ldr	r0, [pc, #28]	@ (800b1bc <tcp_recved+0x6c>)
 800b19e:	f006 f97b 	bl	8011498 <iprintf>
 800b1a2:	e7dc      	b.n	800b15e <tcp_recved+0xe>
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800b1a4:	4b03      	ldr	r3, [pc, #12]	@ (800b1b4 <tcp_recved+0x64>)
 800b1a6:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800b1aa:	4905      	ldr	r1, [pc, #20]	@ (800b1c0 <tcp_recved+0x70>)
 800b1ac:	4803      	ldr	r0, [pc, #12]	@ (800b1bc <tcp_recved+0x6c>)
 800b1ae:	f006 b973 	b.w	8011498 <iprintf>
 800b1b2:	bf00      	nop
 800b1b4:	080136b8 	.word	0x080136b8
 800b1b8:	08013808 	.word	0x08013808
 800b1bc:	0801241c 	.word	0x0801241c
 800b1c0:	080137f0 	.word	0x080137f0

0800b1c4 <tcp_segs_free>:
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
  while (seg != NULL) {
 800b1c4:	b170      	cbz	r0, 800b1e4 <tcp_segs_free+0x20>
{
 800b1c6:	b538      	push	{r3, r4, r5, lr}
 800b1c8:	4604      	mov	r4, r0
void
tcp_seg_free(struct tcp_seg *seg)
{
  if (seg != NULL) {
    if (seg->p != NULL) {
      pbuf_free(seg->p);
 800b1ca:	4625      	mov	r5, r4
    struct tcp_seg *next = seg->next;
 800b1cc:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800b1ce:	6868      	ldr	r0, [r5, #4]
 800b1d0:	b108      	cbz	r0, 800b1d6 <tcp_segs_free+0x12>
      pbuf_free(seg->p);
 800b1d2:	f7ff fad5 	bl	800a780 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800b1d6:	4629      	mov	r1, r5
 800b1d8:	2003      	movs	r0, #3
 800b1da:	f7ff f801 	bl	800a1e0 <memp_free>
  while (seg != NULL) {
 800b1de:	2c00      	cmp	r4, #0
 800b1e0:	d1f3      	bne.n	800b1ca <tcp_segs_free+0x6>
}
 800b1e2:	bd38      	pop	{r3, r4, r5, pc}
 800b1e4:	4770      	bx	lr
 800b1e6:	bf00      	nop

0800b1e8 <tcp_seg_free>:
  if (seg != NULL) {
 800b1e8:	b158      	cbz	r0, 800b202 <tcp_seg_free+0x1a>
{
 800b1ea:	b510      	push	{r4, lr}
 800b1ec:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 800b1ee:	6840      	ldr	r0, [r0, #4]
 800b1f0:	b108      	cbz	r0, 800b1f6 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 800b1f2:	f7ff fac5 	bl	800a780 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800b1f6:	4621      	mov	r1, r4
 800b1f8:	2003      	movs	r0, #3
  }
}
 800b1fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 800b1fe:	f7fe bfef 	b.w	800a1e0 <memp_free>
 800b202:	4770      	bx	lr

0800b204 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800b204:	b538      	push	{r3, r4, r5, lr}
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800b206:	4605      	mov	r5, r0
 800b208:	b188      	cbz	r0, 800b22e <tcp_seg_copy+0x2a>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800b20a:	2003      	movs	r0, #3
 800b20c:	f7fe ffa2 	bl	800a154 <memp_malloc>
  if (cseg == NULL) {
 800b210:	4604      	mov	r4, r0
 800b212:	b150      	cbz	r0, 800b22a <tcp_seg_copy+0x26>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800b214:	6868      	ldr	r0, [r5, #4]
 800b216:	6829      	ldr	r1, [r5, #0]
 800b218:	68aa      	ldr	r2, [r5, #8]
 800b21a:	68eb      	ldr	r3, [r5, #12]
 800b21c:	6060      	str	r0, [r4, #4]
 800b21e:	6021      	str	r1, [r4, #0]
  pbuf_ref(cseg->p);
 800b220:	6860      	ldr	r0, [r4, #4]
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800b222:	60a2      	str	r2, [r4, #8]
 800b224:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
 800b226:	f7ff fc43 	bl	800aab0 <pbuf_ref>
  return cseg;
}
 800b22a:	4620      	mov	r0, r4
 800b22c:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800b22e:	4b04      	ldr	r3, [pc, #16]	@ (800b240 <tcp_seg_copy+0x3c>)
 800b230:	f240 6282 	movw	r2, #1666	@ 0x682
 800b234:	4903      	ldr	r1, [pc, #12]	@ (800b244 <tcp_seg_copy+0x40>)
 800b236:	4804      	ldr	r0, [pc, #16]	@ (800b248 <tcp_seg_copy+0x44>)
 800b238:	f006 f92e 	bl	8011498 <iprintf>
 800b23c:	e7e5      	b.n	800b20a <tcp_seg_copy+0x6>
 800b23e:	bf00      	nop
 800b240:	080136b8 	.word	0x080136b8
 800b244:	08013830 	.word	0x08013830
 800b248:	0801241c 	.word	0x0801241c

0800b24c <tcp_arg>:
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800b24c:	b100      	cbz	r0, 800b250 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 800b24e:	6101      	str	r1, [r0, #16]
  }
}
 800b250:	4770      	bx	lr
 800b252:	bf00      	nop

0800b254 <tcp_recv>:
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800b254:	b140      	cbz	r0, 800b268 <tcp_recv+0x14>
{
 800b256:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800b258:	7d03      	ldrb	r3, [r0, #20]
 800b25a:	4604      	mov	r4, r0
 800b25c:	460d      	mov	r5, r1
 800b25e:	2b01      	cmp	r3, #1
 800b260:	d003      	beq.n	800b26a <tcp_recv+0x16>
    pcb->recv = recv;
 800b262:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
  }
}
 800b266:	bd38      	pop	{r3, r4, r5, pc}
 800b268:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800b26a:	4b05      	ldr	r3, [pc, #20]	@ (800b280 <tcp_recv+0x2c>)
 800b26c:	f240 72df 	movw	r2, #2015	@ 0x7df
 800b270:	4904      	ldr	r1, [pc, #16]	@ (800b284 <tcp_recv+0x30>)
 800b272:	4805      	ldr	r0, [pc, #20]	@ (800b288 <tcp_recv+0x34>)
 800b274:	f006 f910 	bl	8011498 <iprintf>
    pcb->recv = recv;
 800b278:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
}
 800b27c:	bd38      	pop	{r3, r4, r5, pc}
 800b27e:	bf00      	nop
 800b280:	080136b8 	.word	0x080136b8
 800b284:	0801384c 	.word	0x0801384c
 800b288:	0801241c 	.word	0x0801241c

0800b28c <tcp_sent>:
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800b28c:	b140      	cbz	r0, 800b2a0 <tcp_sent+0x14>
{
 800b28e:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800b290:	7d03      	ldrb	r3, [r0, #20]
 800b292:	4604      	mov	r4, r0
 800b294:	460d      	mov	r5, r1
 800b296:	2b01      	cmp	r3, #1
 800b298:	d003      	beq.n	800b2a2 <tcp_sent+0x16>
    pcb->sent = sent;
 800b29a:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
  }
}
 800b29e:	bd38      	pop	{r3, r4, r5, pc}
 800b2a0:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800b2a2:	4b05      	ldr	r3, [pc, #20]	@ (800b2b8 <tcp_sent+0x2c>)
 800b2a4:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 800b2a8:	4904      	ldr	r1, [pc, #16]	@ (800b2bc <tcp_sent+0x30>)
 800b2aa:	4805      	ldr	r0, [pc, #20]	@ (800b2c0 <tcp_sent+0x34>)
 800b2ac:	f006 f8f4 	bl	8011498 <iprintf>
    pcb->sent = sent;
 800b2b0:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
}
 800b2b4:	bd38      	pop	{r3, r4, r5, pc}
 800b2b6:	bf00      	nop
 800b2b8:	080136b8 	.word	0x080136b8
 800b2bc:	08013874 	.word	0x08013874
 800b2c0:	0801241c 	.word	0x0801241c

0800b2c4 <tcp_err>:
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800b2c4:	b140      	cbz	r0, 800b2d8 <tcp_err+0x14>
{
 800b2c6:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800b2c8:	7d03      	ldrb	r3, [r0, #20]
 800b2ca:	4604      	mov	r4, r0
 800b2cc:	460d      	mov	r5, r1
 800b2ce:	2b01      	cmp	r3, #1
 800b2d0:	d003      	beq.n	800b2da <tcp_err+0x16>
    pcb->errf = err;
 800b2d2:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
  }
}
 800b2d6:	bd38      	pop	{r3, r4, r5, pc}
 800b2d8:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800b2da:	4b05      	ldr	r3, [pc, #20]	@ (800b2f0 <tcp_err+0x2c>)
 800b2dc:	f640 020d 	movw	r2, #2061	@ 0x80d
 800b2e0:	4904      	ldr	r1, [pc, #16]	@ (800b2f4 <tcp_err+0x30>)
 800b2e2:	4805      	ldr	r0, [pc, #20]	@ (800b2f8 <tcp_err+0x34>)
 800b2e4:	f006 f8d8 	bl	8011498 <iprintf>
    pcb->errf = err;
 800b2e8:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
}
 800b2ec:	bd38      	pop	{r3, r4, r5, pc}
 800b2ee:	bf00      	nop
 800b2f0:	080136b8 	.word	0x080136b8
 800b2f4:	0801389c 	.word	0x0801389c
 800b2f8:	0801241c 	.word	0x0801241c

0800b2fc <tcp_accept>:
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800b2fc:	b118      	cbz	r0, 800b306 <tcp_accept+0xa>
 800b2fe:	7d03      	ldrb	r3, [r0, #20]
 800b300:	2b01      	cmp	r3, #1
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
    lpcb->accept = accept;
 800b302:	bf08      	it	eq
 800b304:	6181      	streq	r1, [r0, #24]
  }
}
 800b306:	4770      	bx	lr

0800b308 <tcp_poll>:
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800b308:	b1a8      	cbz	r0, 800b336 <tcp_poll+0x2e>
{
 800b30a:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800b30c:	7d03      	ldrb	r3, [r0, #20]
 800b30e:	460e      	mov	r6, r1
 800b310:	4604      	mov	r4, r0
 800b312:	4615      	mov	r5, r2
 800b314:	2b01      	cmp	r3, #1
 800b316:	d003      	beq.n	800b320 <tcp_poll+0x18>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800b318:	f8c4 608c 	str.w	r6, [r4, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800b31c:	7765      	strb	r5, [r4, #29]
}
 800b31e:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800b320:	4b08      	ldr	r3, [pc, #32]	@ (800b344 <tcp_poll+0x3c>)
 800b322:	f640 023e 	movw	r2, #2110	@ 0x83e
 800b326:	4908      	ldr	r1, [pc, #32]	@ (800b348 <tcp_poll+0x40>)
 800b328:	4808      	ldr	r0, [pc, #32]	@ (800b34c <tcp_poll+0x44>)
 800b32a:	f006 f8b5 	bl	8011498 <iprintf>
  pcb->poll = poll;
 800b32e:	f8c4 608c 	str.w	r6, [r4, #140]	@ 0x8c
  pcb->pollinterval = interval;
 800b332:	7765      	strb	r5, [r4, #29]
}
 800b334:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800b336:	4b03      	ldr	r3, [pc, #12]	@ (800b344 <tcp_poll+0x3c>)
 800b338:	f640 023d 	movw	r2, #2109	@ 0x83d
 800b33c:	4904      	ldr	r1, [pc, #16]	@ (800b350 <tcp_poll+0x48>)
 800b33e:	4803      	ldr	r0, [pc, #12]	@ (800b34c <tcp_poll+0x44>)
 800b340:	f006 b8aa 	b.w	8011498 <iprintf>
 800b344:	080136b8 	.word	0x080136b8
 800b348:	080138dc 	.word	0x080138dc
 800b34c:	0801241c 	.word	0x0801241c
 800b350:	080138c4 	.word	0x080138c4

0800b354 <tcp_pcb_purge>:
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800b354:	2800      	cmp	r0, #0
 800b356:	d041      	beq.n	800b3dc <tcp_pcb_purge+0x88>
{
 800b358:	b570      	push	{r4, r5, r6, lr}

  if (pcb->state != CLOSED &&
 800b35a:	7d03      	ldrb	r3, [r0, #20]
 800b35c:	4605      	mov	r5, r0
      pcb->state != TIME_WAIT &&
 800b35e:	2b0a      	cmp	r3, #10
 800b360:	d001      	beq.n	800b366 <tcp_pcb_purge+0x12>
 800b362:	2b01      	cmp	r3, #1
 800b364:	d800      	bhi.n	800b368 <tcp_pcb_purge+0x14>
    pcb->unacked = pcb->unsent = NULL;
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
#endif /* TCP_OVERSIZE */
  }
}
 800b366:	bd70      	pop	{r4, r5, r6, pc}
    if (pcb->refused_data != NULL) {
 800b368:	6f80      	ldr	r0, [r0, #120]	@ 0x78
 800b36a:	b118      	cbz	r0, 800b374 <tcp_pcb_purge+0x20>
      pbuf_free(pcb->refused_data);
 800b36c:	f7ff fa08 	bl	800a780 <pbuf_free>
      pcb->refused_data = NULL;
 800b370:	2300      	movs	r3, #0
 800b372:	67ab      	str	r3, [r5, #120]	@ 0x78
    if (pcb->ooseq != NULL) {
 800b374:	6f6c      	ldr	r4, [r5, #116]	@ 0x74
 800b376:	b164      	cbz	r4, 800b392 <tcp_pcb_purge+0x3e>
      pbuf_free(seg->p);
 800b378:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 800b37a:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800b37c:	6870      	ldr	r0, [r6, #4]
 800b37e:	b108      	cbz	r0, 800b384 <tcp_pcb_purge+0x30>
      pbuf_free(seg->p);
 800b380:	f7ff f9fe 	bl	800a780 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800b384:	4631      	mov	r1, r6
 800b386:	2003      	movs	r0, #3
 800b388:	f7fe ff2a 	bl	800a1e0 <memp_free>
  while (seg != NULL) {
 800b38c:	2c00      	cmp	r4, #0
 800b38e:	d1f3      	bne.n	800b378 <tcp_pcb_purge+0x24>
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
  if (pcb->ooseq) {
    tcp_segs_free(pcb->ooseq);
    pcb->ooseq = NULL;
 800b390:	676c      	str	r4, [r5, #116]	@ 0x74
    pcb->rtime = -1;
 800b392:	f64f 73ff 	movw	r3, #65535	@ 0xffff
    tcp_segs_free(pcb->unsent);
 800b396:	6eec      	ldr	r4, [r5, #108]	@ 0x6c
    pcb->rtime = -1;
 800b398:	862b      	strh	r3, [r5, #48]	@ 0x30
  while (seg != NULL) {
 800b39a:	b15c      	cbz	r4, 800b3b4 <tcp_pcb_purge+0x60>
      pbuf_free(seg->p);
 800b39c:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 800b39e:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800b3a0:	6870      	ldr	r0, [r6, #4]
 800b3a2:	b108      	cbz	r0, 800b3a8 <tcp_pcb_purge+0x54>
      pbuf_free(seg->p);
 800b3a4:	f7ff f9ec 	bl	800a780 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800b3a8:	4631      	mov	r1, r6
 800b3aa:	2003      	movs	r0, #3
 800b3ac:	f7fe ff18 	bl	800a1e0 <memp_free>
  while (seg != NULL) {
 800b3b0:	2c00      	cmp	r4, #0
 800b3b2:	d1f3      	bne.n	800b39c <tcp_pcb_purge+0x48>
    tcp_segs_free(pcb->unacked);
 800b3b4:	6f2c      	ldr	r4, [r5, #112]	@ 0x70
  while (seg != NULL) {
 800b3b6:	b15c      	cbz	r4, 800b3d0 <tcp_pcb_purge+0x7c>
      pbuf_free(seg->p);
 800b3b8:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 800b3ba:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800b3bc:	6870      	ldr	r0, [r6, #4]
 800b3be:	b108      	cbz	r0, 800b3c4 <tcp_pcb_purge+0x70>
      pbuf_free(seg->p);
 800b3c0:	f7ff f9de 	bl	800a780 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800b3c4:	4631      	mov	r1, r6
 800b3c6:	2003      	movs	r0, #3
 800b3c8:	f7fe ff0a 	bl	800a1e0 <memp_free>
  while (seg != NULL) {
 800b3cc:	2c00      	cmp	r4, #0
 800b3ce:	d1f3      	bne.n	800b3b8 <tcp_pcb_purge+0x64>
    pcb->unacked = pcb->unsent = NULL;
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	e9c5 331b 	strd	r3, r3, [r5, #108]	@ 0x6c
    pcb->unsent_oversize = 0;
 800b3d6:	f8a5 3068 	strh.w	r3, [r5, #104]	@ 0x68
}
 800b3da:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800b3dc:	4b03      	ldr	r3, [pc, #12]	@ (800b3ec <tcp_pcb_purge+0x98>)
 800b3de:	f640 0251 	movw	r2, #2129	@ 0x851
 800b3e2:	4903      	ldr	r1, [pc, #12]	@ (800b3f0 <tcp_pcb_purge+0x9c>)
 800b3e4:	4803      	ldr	r0, [pc, #12]	@ (800b3f4 <tcp_pcb_purge+0xa0>)
 800b3e6:	f006 b857 	b.w	8011498 <iprintf>
 800b3ea:	bf00      	nop
 800b3ec:	080136b8 	.word	0x080136b8
 800b3f0:	080138fc 	.word	0x080138fc
 800b3f4:	0801241c 	.word	0x0801241c

0800b3f8 <tcp_slowtmr>:
{
 800b3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 800b3fc:	4da7      	ldr	r5, [pc, #668]	@ (800b69c <tcp_slowtmr+0x2a4>)
{
 800b3fe:	b087      	sub	sp, #28
  ++tcp_timer_ctr;
 800b400:	4ea7      	ldr	r6, [pc, #668]	@ (800b6a0 <tcp_slowtmr+0x2a8>)
  ++tcp_ticks;
 800b402:	682b      	ldr	r3, [r5, #0]
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800b404:	f8df b2c4 	ldr.w	fp, [pc, #708]	@ 800b6cc <tcp_slowtmr+0x2d4>
  ++tcp_ticks;
 800b408:	3301      	adds	r3, #1
 800b40a:	602b      	str	r3, [r5, #0]
  ++tcp_timer_ctr;
 800b40c:	7833      	ldrb	r3, [r6, #0]
 800b40e:	3301      	adds	r3, #1
 800b410:	7033      	strb	r3, [r6, #0]
  pcb = tcp_active_pcbs;
 800b412:	4ba4      	ldr	r3, [pc, #656]	@ (800b6a4 <tcp_slowtmr+0x2ac>)
 800b414:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 800b416:	2c00      	cmp	r4, #0
 800b418:	d05f      	beq.n	800b4da <tcp_slowtmr+0xe2>
  prev = NULL;
 800b41a:	2700      	movs	r7, #0
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800b41c:	46b9      	mov	r9, r7
 800b41e:	7d23      	ldrb	r3, [r4, #20]
 800b420:	2b00      	cmp	r3, #0
 800b422:	f000 80e4 	beq.w	800b5ee <tcp_slowtmr+0x1f6>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800b426:	2b01      	cmp	r3, #1
 800b428:	f000 80ec 	beq.w	800b604 <tcp_slowtmr+0x20c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800b42c:	2b0a      	cmp	r3, #10
 800b42e:	f000 80f4 	beq.w	800b61a <tcp_slowtmr+0x222>
    if (pcb->last_timer == tcp_timer_ctr) {
 800b432:	7833      	ldrb	r3, [r6, #0]
 800b434:	7fa2      	ldrb	r2, [r4, #30]
 800b436:	429a      	cmp	r2, r3
 800b438:	f000 80fb 	beq.w	800b632 <tcp_slowtmr+0x23a>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800b43c:	7d22      	ldrb	r2, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 800b43e:	77a3      	strb	r3, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800b440:	2a02      	cmp	r2, #2
 800b442:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 800b446:	f000 809e 	beq.w	800b586 <tcp_slowtmr+0x18e>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800b44a:	2b0b      	cmp	r3, #11
 800b44c:	f240 80a2 	bls.w	800b594 <tcp_slowtmr+0x19c>
      ++pcb_remove;
 800b450:	f04f 0801 	mov.w	r8, #1
    if (pcb->state == FIN_WAIT_2) {
 800b454:	2a06      	cmp	r2, #6
 800b456:	f000 80bb 	beq.w	800b5d0 <tcp_slowtmr+0x1d8>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b45a:	7a63      	ldrb	r3, [r4, #9]
 800b45c:	071b      	lsls	r3, r3, #28
 800b45e:	f140 8096 	bpl.w	800b58e <tcp_slowtmr+0x196>
 800b462:	2a04      	cmp	r2, #4
 800b464:	d002      	beq.n	800b46c <tcp_slowtmr+0x74>
 800b466:	2a07      	cmp	r2, #7
 800b468:	f040 8091 	bne.w	800b58e <tcp_slowtmr+0x196>
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800b46c:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 800b470:	4b8d      	ldr	r3, [pc, #564]	@ (800b6a8 <tcp_slowtmr+0x2b0>)
 800b472:	498e      	ldr	r1, [pc, #568]	@ (800b6ac <tcp_slowtmr+0x2b4>)
 800b474:	4403      	add	r3, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b476:	682a      	ldr	r2, [r5, #0]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800b478:	fba1 1303 	umull	r1, r3, r1, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b47c:	6a21      	ldr	r1, [r4, #32]
 800b47e:	1a52      	subs	r2, r2, r1
 800b480:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 800b484:	f240 8189 	bls.w	800b79a <tcp_slowtmr+0x3a2>
        ++pcb_remove;
 800b488:	f108 0801 	add.w	r8, r8, #1
        ++pcb_reset;
 800b48c:	f04f 0a01 	mov.w	sl, #1
        ++pcb_remove;
 800b490:	fa5f f888 	uxtb.w	r8, r8
    if (pcb->ooseq != NULL &&
 800b494:	6f67      	ldr	r7, [r4, #116]	@ 0x74
 800b496:	b157      	cbz	r7, 800b4ae <tcp_slowtmr+0xb6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800b498:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 800b49c:	682a      	ldr	r2, [r5, #0]
 800b49e:	6a21      	ldr	r1, [r4, #32]
 800b4a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800b4a4:	1a52      	subs	r2, r2, r1
    if (pcb->ooseq != NULL &&
 800b4a6:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 800b4aa:	f080 80e7 	bcs.w	800b67c <tcp_slowtmr+0x284>
    if (pcb->state == SYN_RCVD) {
 800b4ae:	7d23      	ldrb	r3, [r4, #20]
 800b4b0:	2b03      	cmp	r3, #3
 800b4b2:	f000 80c4 	beq.w	800b63e <tcp_slowtmr+0x246>
    if (pcb->state == LAST_ACK) {
 800b4b6:	2b09      	cmp	r3, #9
 800b4b8:	d030      	beq.n	800b51c <tcp_slowtmr+0x124>
    if (pcb_remove) {
 800b4ba:	f1b8 0f00 	cmp.w	r8, #0
 800b4be:	d132      	bne.n	800b526 <tcp_slowtmr+0x12e>
      ++prev->polltmr;
 800b4c0:	7f23      	ldrb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800b4c2:	7f62      	ldrb	r2, [r4, #29]
      ++prev->polltmr;
 800b4c4:	3301      	adds	r3, #1
      pcb = pcb->next;
 800b4c6:	68e7      	ldr	r7, [r4, #12]
      ++prev->polltmr;
 800b4c8:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 800b4ca:	429a      	cmp	r2, r3
      ++prev->polltmr;
 800b4cc:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800b4ce:	f240 80bd 	bls.w	800b64c <tcp_slowtmr+0x254>
    pcb_reset = 0;
 800b4d2:	46a1      	mov	r9, r4
      pcb = pcb->next;
 800b4d4:	463c      	mov	r4, r7
  while (pcb != NULL) {
 800b4d6:	2c00      	cmp	r4, #0
 800b4d8:	d1a1      	bne.n	800b41e <tcp_slowtmr+0x26>
  pcb = tcp_tw_pcbs;
 800b4da:	4f75      	ldr	r7, [pc, #468]	@ (800b6b0 <tcp_slowtmr+0x2b8>)
 800b4dc:	683c      	ldr	r4, [r7, #0]
  while (pcb != NULL) {
 800b4de:	b1d4      	cbz	r4, 800b516 <tcp_slowtmr+0x11e>
  prev = NULL;
 800b4e0:	2600      	movs	r6, #0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b4e2:	f8df a1e8 	ldr.w	sl, [pc, #488]	@ 800b6cc <tcp_slowtmr+0x2d4>
 800b4e6:	f8df 91e8 	ldr.w	r9, [pc, #488]	@ 800b6d0 <tcp_slowtmr+0x2d8>
 800b4ea:	f8df 81d0 	ldr.w	r8, [pc, #464]	@ 800b6bc <tcp_slowtmr+0x2c4>
 800b4ee:	7d23      	ldrb	r3, [r4, #20]
 800b4f0:	2b0a      	cmp	r3, #10
 800b4f2:	d006      	beq.n	800b502 <tcp_slowtmr+0x10a>
 800b4f4:	4653      	mov	r3, sl
 800b4f6:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800b4fa:	4649      	mov	r1, r9
 800b4fc:	4640      	mov	r0, r8
 800b4fe:	f005 ffcb 	bl	8011498 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b502:	682b      	ldr	r3, [r5, #0]
 800b504:	6a22      	ldr	r2, [r4, #32]
 800b506:	1a9b      	subs	r3, r3, r2
 800b508:	2bf0      	cmp	r3, #240	@ 0xf0
 800b50a:	f200 812b 	bhi.w	800b764 <tcp_slowtmr+0x36c>
      pcb = pcb->next;
 800b50e:	4626      	mov	r6, r4
 800b510:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 800b512:	2c00      	cmp	r4, #0
 800b514:	d1eb      	bne.n	800b4ee <tcp_slowtmr+0xf6>
}
 800b516:	b007      	add	sp, #28
 800b518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b51c:	682b      	ldr	r3, [r5, #0]
 800b51e:	6a22      	ldr	r2, [r4, #32]
 800b520:	1a9b      	subs	r3, r3, r2
 800b522:	2bf0      	cmp	r3, #240	@ 0xf0
 800b524:	d9c9      	bls.n	800b4ba <tcp_slowtmr+0xc2>
      tcp_pcb_purge(pcb);
 800b526:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 800b528:	f8d4 7090 	ldr.w	r7, [r4, #144]	@ 0x90
      tcp_pcb_purge(pcb);
 800b52c:	f7ff ff12 	bl	800b354 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800b530:	4b5c      	ldr	r3, [pc, #368]	@ (800b6a4 <tcp_slowtmr+0x2ac>)
 800b532:	681b      	ldr	r3, [r3, #0]
      if (prev != NULL) {
 800b534:	f1b9 0f00 	cmp.w	r9, #0
 800b538:	f000 8176 	beq.w	800b828 <tcp_slowtmr+0x430>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800b53c:	42a3      	cmp	r3, r4
 800b53e:	f000 819d 	beq.w	800b87c <tcp_slowtmr+0x484>
        prev->next = pcb->next;
 800b542:	68e3      	ldr	r3, [r4, #12]
 800b544:	f8c9 300c 	str.w	r3, [r9, #12]
      if (pcb_reset) {
 800b548:	f1ba 0f00 	cmp.w	sl, #0
 800b54c:	f040 813f 	bne.w	800b7ce <tcp_slowtmr+0x3d6>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b550:	7d23      	ldrb	r3, [r4, #20]
 800b552:	2b01      	cmp	r3, #1
      pcb = pcb->next;
 800b554:	e9d4 a803 	ldrd	sl, r8, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b558:	f000 814b 	beq.w	800b7f2 <tcp_slowtmr+0x3fa>
  memp_free(MEMP_TCP_PCB, pcb);
 800b55c:	4621      	mov	r1, r4
 800b55e:	2001      	movs	r0, #1
 800b560:	f7fe fe3e 	bl	800a1e0 <memp_free>
      tcp_active_pcbs_changed = 0;
 800b564:	4c53      	ldr	r4, [pc, #332]	@ (800b6b4 <tcp_slowtmr+0x2bc>)
 800b566:	2300      	movs	r3, #0
 800b568:	7023      	strb	r3, [r4, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800b56a:	b13f      	cbz	r7, 800b57c <tcp_slowtmr+0x184>
 800b56c:	f06f 010c 	mvn.w	r1, #12
 800b570:	4640      	mov	r0, r8
 800b572:	47b8      	blx	r7
      if (tcp_active_pcbs_changed) {
 800b574:	7823      	ldrb	r3, [r4, #0]
 800b576:	2b00      	cmp	r3, #0
 800b578:	f47f af4b 	bne.w	800b412 <tcp_slowtmr+0x1a>
      pcb = pcb->next;
 800b57c:	4654      	mov	r4, sl
  while (pcb != NULL) {
 800b57e:	2c00      	cmp	r4, #0
 800b580:	f47f af4d 	bne.w	800b41e <tcp_slowtmr+0x26>
 800b584:	e7a9      	b.n	800b4da <tcp_slowtmr+0xe2>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800b586:	2b05      	cmp	r3, #5
 800b588:	d904      	bls.n	800b594 <tcp_slowtmr+0x19c>
      ++pcb_remove;
 800b58a:	f04f 0801 	mov.w	r8, #1
    pcb_reset = 0;
 800b58e:	f04f 0a00 	mov.w	sl, #0
 800b592:	e77f      	b.n	800b494 <tcp_slowtmr+0x9c>
      if (pcb->persist_backoff > 0) {
 800b594:	f894 8099 	ldrb.w	r8, [r4, #153]	@ 0x99
 800b598:	f1b8 0f00 	cmp.w	r8, #0
 800b59c:	f000 809a 	beq.w	800b6d4 <tcp_slowtmr+0x2dc>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800b5a0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800b5a2:	b133      	cbz	r3, 800b5b2 <tcp_slowtmr+0x1ba>
 800b5a4:	465b      	mov	r3, fp
 800b5a6:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800b5aa:	4943      	ldr	r1, [pc, #268]	@ (800b6b8 <tcp_slowtmr+0x2c0>)
 800b5ac:	4843      	ldr	r0, [pc, #268]	@ (800b6bc <tcp_slowtmr+0x2c4>)
 800b5ae:	f005 ff73 	bl	8011498 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800b5b2:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	f000 8182 	beq.w	800b8be <tcp_slowtmr+0x4c6>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800b5ba:	f894 309a 	ldrb.w	r3, [r4, #154]	@ 0x9a
 800b5be:	2b0b      	cmp	r3, #11
 800b5c0:	f240 811e 	bls.w	800b800 <tcp_slowtmr+0x408>
    if (pcb->state == FIN_WAIT_2) {
 800b5c4:	7d22      	ldrb	r2, [r4, #20]
      ++pcb_remove;
 800b5c6:	f04f 0801 	mov.w	r8, #1
    if (pcb->state == FIN_WAIT_2) {
 800b5ca:	2a06      	cmp	r2, #6
 800b5cc:	f47f af45 	bne.w	800b45a <tcp_slowtmr+0x62>
      if (pcb->flags & TF_RXCLOSED) {
 800b5d0:	8b63      	ldrh	r3, [r4, #26]
 800b5d2:	06da      	lsls	r2, r3, #27
 800b5d4:	d5db      	bpl.n	800b58e <tcp_slowtmr+0x196>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b5d6:	682b      	ldr	r3, [r5, #0]
 800b5d8:	6a22      	ldr	r2, [r4, #32]
 800b5da:	1a9b      	subs	r3, r3, r2
 800b5dc:	2b28      	cmp	r3, #40	@ 0x28
 800b5de:	d9d6      	bls.n	800b58e <tcp_slowtmr+0x196>
          ++pcb_remove;
 800b5e0:	f108 0801 	add.w	r8, r8, #1
    pcb_reset = 0;
 800b5e4:	f04f 0a00 	mov.w	sl, #0
          ++pcb_remove;
 800b5e8:	fa5f f888 	uxtb.w	r8, r8
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b5ec:	e752      	b.n	800b494 <tcp_slowtmr+0x9c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800b5ee:	465b      	mov	r3, fp
 800b5f0:	f240 42be 	movw	r2, #1214	@ 0x4be
 800b5f4:	4932      	ldr	r1, [pc, #200]	@ (800b6c0 <tcp_slowtmr+0x2c8>)
 800b5f6:	4831      	ldr	r0, [pc, #196]	@ (800b6bc <tcp_slowtmr+0x2c4>)
 800b5f8:	f005 ff4e 	bl	8011498 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800b5fc:	7d23      	ldrb	r3, [r4, #20]
 800b5fe:	2b01      	cmp	r3, #1
 800b600:	f47f af14 	bne.w	800b42c <tcp_slowtmr+0x34>
 800b604:	465b      	mov	r3, fp
 800b606:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800b60a:	492e      	ldr	r1, [pc, #184]	@ (800b6c4 <tcp_slowtmr+0x2cc>)
 800b60c:	482b      	ldr	r0, [pc, #172]	@ (800b6bc <tcp_slowtmr+0x2c4>)
 800b60e:	f005 ff43 	bl	8011498 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800b612:	7d23      	ldrb	r3, [r4, #20]
 800b614:	2b0a      	cmp	r3, #10
 800b616:	f47f af0c 	bne.w	800b432 <tcp_slowtmr+0x3a>
 800b61a:	465b      	mov	r3, fp
 800b61c:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800b620:	4929      	ldr	r1, [pc, #164]	@ (800b6c8 <tcp_slowtmr+0x2d0>)
 800b622:	4826      	ldr	r0, [pc, #152]	@ (800b6bc <tcp_slowtmr+0x2c4>)
 800b624:	f005 ff38 	bl	8011498 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800b628:	7833      	ldrb	r3, [r6, #0]
 800b62a:	7fa2      	ldrb	r2, [r4, #30]
 800b62c:	429a      	cmp	r2, r3
 800b62e:	f47f af05 	bne.w	800b43c <tcp_slowtmr+0x44>
      continue;
 800b632:	46a1      	mov	r9, r4
      pcb = pcb->next;
 800b634:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 800b636:	2c00      	cmp	r4, #0
 800b638:	f47f aef1 	bne.w	800b41e <tcp_slowtmr+0x26>
 800b63c:	e74d      	b.n	800b4da <tcp_slowtmr+0xe2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b63e:	682b      	ldr	r3, [r5, #0]
 800b640:	6a22      	ldr	r2, [r4, #32]
 800b642:	1a9b      	subs	r3, r3, r2
 800b644:	2b28      	cmp	r3, #40	@ 0x28
 800b646:	f63f af6e 	bhi.w	800b526 <tcp_slowtmr+0x12e>
 800b64a:	e736      	b.n	800b4ba <tcp_slowtmr+0xc2>
        tcp_active_pcbs_changed = 0;
 800b64c:	f8df 9064 	ldr.w	r9, [pc, #100]	@ 800b6b4 <tcp_slowtmr+0x2bc>
        TCP_EVENT_POLL(prev, err);
 800b650:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
        prev->polltmr = 0;
 800b654:	f884 801c 	strb.w	r8, [r4, #28]
        tcp_active_pcbs_changed = 0;
 800b658:	f889 8000 	strb.w	r8, [r9]
        TCP_EVENT_POLL(prev, err);
 800b65c:	b153      	cbz	r3, 800b674 <tcp_slowtmr+0x27c>
 800b65e:	4621      	mov	r1, r4
 800b660:	6920      	ldr	r0, [r4, #16]
 800b662:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 800b664:	f899 3000 	ldrb.w	r3, [r9]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	f47f aed2 	bne.w	800b412 <tcp_slowtmr+0x1a>
        if (err == ERR_OK) {
 800b66e:	2800      	cmp	r0, #0
 800b670:	f47f af2f 	bne.w	800b4d2 <tcp_slowtmr+0xda>
          tcp_output(prev);
 800b674:	4620      	mov	r0, r4
 800b676:	f003 f96b 	bl	800e950 <tcp_output>
 800b67a:	e72a      	b.n	800b4d2 <tcp_slowtmr+0xda>
 800b67c:	9405      	str	r4, [sp, #20]
      pbuf_free(seg->p);
 800b67e:	463c      	mov	r4, r7
    struct tcp_seg *next = seg->next;
 800b680:	683f      	ldr	r7, [r7, #0]
    if (seg->p != NULL) {
 800b682:	6860      	ldr	r0, [r4, #4]
 800b684:	b108      	cbz	r0, 800b68a <tcp_slowtmr+0x292>
      pbuf_free(seg->p);
 800b686:	f7ff f87b 	bl	800a780 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800b68a:	4621      	mov	r1, r4
 800b68c:	2003      	movs	r0, #3
 800b68e:	f7fe fda7 	bl	800a1e0 <memp_free>
  while (seg != NULL) {
 800b692:	2f00      	cmp	r7, #0
 800b694:	d1f3      	bne.n	800b67e <tcp_slowtmr+0x286>
    pcb->ooseq = NULL;
 800b696:	9c05      	ldr	r4, [sp, #20]
 800b698:	6767      	str	r7, [r4, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800b69a:	e708      	b.n	800b4ae <tcp_slowtmr+0xb6>
 800b69c:	24009d08 	.word	0x24009d08
 800b6a0:	24009cf5 	.word	0x24009cf5
 800b6a4:	24009cfc 	.word	0x24009cfc
 800b6a8:	000a4cb8 	.word	0x000a4cb8
 800b6ac:	10624dd3 	.word	0x10624dd3
 800b6b0:	24009cf8 	.word	0x24009cf8
 800b6b4:	24009cf7 	.word	0x24009cf7
 800b6b8:	080139a0 	.word	0x080139a0
 800b6bc:	0801241c 	.word	0x0801241c
 800b6c0:	08013918 	.word	0x08013918
 800b6c4:	08013944 	.word	0x08013944
 800b6c8:	08013970 	.word	0x08013970
 800b6cc:	080136b8 	.word	0x080136b8
 800b6d0:	08013a64 	.word	0x08013a64
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800b6d4:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	@ 0x30
 800b6d8:	f647 70fe 	movw	r0, #32766	@ 0x7ffe
 800b6dc:	b299      	uxth	r1, r3
 800b6de:	4281      	cmp	r1, r0
 800b6e0:	d802      	bhi.n	800b6e8 <tcp_slowtmr+0x2f0>
          ++pcb->rtime;
 800b6e2:	3101      	adds	r1, #1
 800b6e4:	b20b      	sxth	r3, r1
 800b6e6:	8623      	strh	r3, [r4, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800b6e8:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	@ 0x40
 800b6ec:	4299      	cmp	r1, r3
 800b6ee:	f73f aeb1 	bgt.w	800b454 <tcp_slowtmr+0x5c>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800b6f2:	4620      	mov	r0, r4
 800b6f4:	f002 fff0 	bl	800e6d8 <tcp_rexmit_rto_prepare>
 800b6f8:	2800      	cmp	r0, #0
 800b6fa:	f040 80e8 	bne.w	800b8ce <tcp_slowtmr+0x4d6>
 800b6fe:	7d23      	ldrb	r3, [r4, #20]
            if (pcb->state != SYN_SENT) {
 800b700:	2b02      	cmp	r3, #2
 800b702:	d014      	beq.n	800b72e <tcp_slowtmr+0x336>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800b704:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800b708:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	@ 0x3c
 800b70c:	2a0c      	cmp	r2, #12
 800b70e:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	@ 0x3e
 800b712:	bf28      	it	cs
 800b714:	220c      	movcs	r2, #12
 800b716:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 800b71a:	497a      	ldr	r1, [pc, #488]	@ (800b904 <tcp_slowtmr+0x50c>)
 800b71c:	5c8a      	ldrb	r2, [r1, r2]
 800b71e:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800b720:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800b724:	4293      	cmp	r3, r2
 800b726:	bfa8      	it	ge
 800b728:	4613      	movge	r3, r2
 800b72a:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800b72e:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
            tcp_rexmit_rto_commit(pcb);
 800b730:	4620      	mov	r0, r4
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800b732:	f8b4 1048 	ldrh.w	r1, [r4, #72]	@ 0x48
            pcb->cwnd = pcb->mss;
 800b736:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800b73a:	005b      	lsls	r3, r3, #1
 800b73c:	b29a      	uxth	r2, r3
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800b73e:	f8b4 3060 	ldrh.w	r3, [r4, #96]	@ 0x60
            pcb->ssthresh = eff_wnd >> 1;
 800b742:	428b      	cmp	r3, r1
 800b744:	bf28      	it	cs
 800b746:	460b      	movcs	r3, r1
 800b748:	085b      	lsrs	r3, r3, #1
 800b74a:	4293      	cmp	r3, r2
 800b74c:	bf38      	it	cc
 800b74e:	4613      	movcc	r3, r2
 800b750:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
            pcb->rtime = 0;
 800b754:	2300      	movs	r3, #0
 800b756:	8623      	strh	r3, [r4, #48]	@ 0x30
            pcb->bytes_acked = 0;
 800b758:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800b75c:	f003 faca 	bl	800ecf4 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800b760:	7d22      	ldrb	r2, [r4, #20]
 800b762:	e677      	b.n	800b454 <tcp_slowtmr+0x5c>
      tcp_pcb_purge(pcb);
 800b764:	4620      	mov	r0, r4
 800b766:	f7ff fdf5 	bl	800b354 <tcp_pcb_purge>
      if (prev != NULL) {
 800b76a:	2e00      	cmp	r6, #0
 800b76c:	f000 808e 	beq.w	800b88c <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	42a3      	cmp	r3, r4
 800b774:	f000 80b6 	beq.w	800b8e4 <tcp_slowtmr+0x4ec>
        prev->next = pcb->next;
 800b778:	f8d4 b00c 	ldr.w	fp, [r4, #12]
 800b77c:	f8c6 b00c 	str.w	fp, [r6, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b780:	7d23      	ldrb	r3, [r4, #20]
 800b782:	2b01      	cmp	r3, #1
 800b784:	f000 8094 	beq.w	800b8b0 <tcp_slowtmr+0x4b8>
  memp_free(MEMP_TCP_PCB, pcb);
 800b788:	4621      	mov	r1, r4
      pcb = pcb->next;
 800b78a:	465c      	mov	r4, fp
  memp_free(MEMP_TCP_PCB, pcb);
 800b78c:	2001      	movs	r0, #1
 800b78e:	f7fe fd27 	bl	800a1e0 <memp_free>
  while (pcb != NULL) {
 800b792:	2c00      	cmp	r4, #0
 800b794:	f47f aeab 	bne.w	800b4ee <tcp_slowtmr+0xf6>
 800b798:	e6bd      	b.n	800b516 <tcp_slowtmr+0x11e>
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800b79a:	f894 309b 	ldrb.w	r3, [r4, #155]	@ 0x9b
 800b79e:	495a      	ldr	r1, [pc, #360]	@ (800b908 <tcp_slowtmr+0x510>)
 800b7a0:	fb01 0003 	mla	r0, r1, r3, r0
                 / TCP_SLOW_INTERVAL) {
 800b7a4:	4b59      	ldr	r3, [pc, #356]	@ (800b90c <tcp_slowtmr+0x514>)
 800b7a6:	fba3 3000 	umull	r3, r0, r3, r0
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b7aa:	ebb2 1f50 	cmp.w	r2, r0, lsr #5
 800b7ae:	f67f aeee 	bls.w	800b58e <tcp_slowtmr+0x196>
        err = tcp_keepalive(pcb);
 800b7b2:	4620      	mov	r0, r4
 800b7b4:	f003 faea 	bl	800ed8c <tcp_keepalive>
        if (err == ERR_OK) {
 800b7b8:	2800      	cmp	r0, #0
 800b7ba:	f47f aee8 	bne.w	800b58e <tcp_slowtmr+0x196>
          pcb->keep_cnt_sent++;
 800b7be:	f894 309b 	ldrb.w	r3, [r4, #155]	@ 0x9b
    pcb_reset = 0;
 800b7c2:	f04f 0a00 	mov.w	sl, #0
          pcb->keep_cnt_sent++;
 800b7c6:	3301      	adds	r3, #1
 800b7c8:	f884 309b 	strb.w	r3, [r4, #155]	@ 0x9b
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b7cc:	e662      	b.n	800b494 <tcp_slowtmr+0x9c>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b7ce:	8b23      	ldrh	r3, [r4, #24]
 800b7d0:	4620      	mov	r0, r4
 800b7d2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800b7d4:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800b7d6:	9302      	str	r3, [sp, #8]
 800b7d8:	8ae3      	ldrh	r3, [r4, #22]
 800b7da:	9301      	str	r3, [sp, #4]
 800b7dc:	1d23      	adds	r3, r4, #4
 800b7de:	9300      	str	r3, [sp, #0]
 800b7e0:	4623      	mov	r3, r4
 800b7e2:	f003 f83b 	bl	800e85c <tcp_rst>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b7e6:	7d23      	ldrb	r3, [r4, #20]
 800b7e8:	2b01      	cmp	r3, #1
      pcb = pcb->next;
 800b7ea:	e9d4 a803 	ldrd	sl, r8, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b7ee:	f47f aeb5 	bne.w	800b55c <tcp_slowtmr+0x164>
 800b7f2:	465b      	mov	r3, fp
 800b7f4:	22d4      	movs	r2, #212	@ 0xd4
 800b7f6:	4946      	ldr	r1, [pc, #280]	@ (800b910 <tcp_slowtmr+0x518>)
 800b7f8:	4846      	ldr	r0, [pc, #280]	@ (800b914 <tcp_slowtmr+0x51c>)
 800b7fa:	f005 fe4d 	bl	8011498 <iprintf>
 800b7fe:	e6ad      	b.n	800b55c <tcp_slowtmr+0x164>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800b800:	f894 3099 	ldrb.w	r3, [r4, #153]	@ 0x99
 800b804:	4a44      	ldr	r2, [pc, #272]	@ (800b918 <tcp_slowtmr+0x520>)
 800b806:	441a      	add	r2, r3
          if (pcb->persist_cnt < backoff_cnt) {
 800b808:	f894 3098 	ldrb.w	r3, [r4, #152]	@ 0x98
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800b80c:	f812 2c01 	ldrb.w	r2, [r2, #-1]
          if (pcb->persist_cnt < backoff_cnt) {
 800b810:	4293      	cmp	r3, r2
 800b812:	d216      	bcs.n	800b842 <tcp_slowtmr+0x44a>
            pcb->persist_cnt++;
 800b814:	3301      	adds	r3, #1
 800b816:	b2db      	uxtb	r3, r3
          if (pcb->persist_cnt >= backoff_cnt) {
 800b818:	4293      	cmp	r3, r2
            pcb->persist_cnt++;
 800b81a:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800b81e:	d210      	bcs.n	800b842 <tcp_slowtmr+0x44a>
    if (pcb->state == FIN_WAIT_2) {
 800b820:	7d22      	ldrb	r2, [r4, #20]
    pcb_remove = 0;
 800b822:	f04f 0800 	mov.w	r8, #0
 800b826:	e615      	b.n	800b454 <tcp_slowtmr+0x5c>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800b828:	42a3      	cmp	r3, r4
 800b82a:	d006      	beq.n	800b83a <tcp_slowtmr+0x442>
 800b82c:	465b      	mov	r3, fp
 800b82e:	f240 5271 	movw	r2, #1393	@ 0x571
 800b832:	493a      	ldr	r1, [pc, #232]	@ (800b91c <tcp_slowtmr+0x524>)
 800b834:	4837      	ldr	r0, [pc, #220]	@ (800b914 <tcp_slowtmr+0x51c>)
 800b836:	f005 fe2f 	bl	8011498 <iprintf>
        tcp_active_pcbs = pcb->next;
 800b83a:	68e3      	ldr	r3, [r4, #12]
 800b83c:	4a38      	ldr	r2, [pc, #224]	@ (800b920 <tcp_slowtmr+0x528>)
 800b83e:	6013      	str	r3, [r2, #0]
 800b840:	e682      	b.n	800b548 <tcp_slowtmr+0x150>
            if (pcb->snd_wnd == 0) {
 800b842:	f8b4 7060 	ldrh.w	r7, [r4, #96]	@ 0x60
 800b846:	b937      	cbnz	r7, 800b856 <tcp_slowtmr+0x45e>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800b848:	4620      	mov	r0, r4
 800b84a:	f003 fac5 	bl	800edd8 <tcp_zero_window_probe>
 800b84e:	b140      	cbz	r0, 800b862 <tcp_slowtmr+0x46a>
    pcb_remove = 0;
 800b850:	46b8      	mov	r8, r7
    if (pcb->state == FIN_WAIT_2) {
 800b852:	7d22      	ldrb	r2, [r4, #20]
 800b854:	e5fe      	b.n	800b454 <tcp_slowtmr+0x5c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800b856:	4639      	mov	r1, r7
 800b858:	4620      	mov	r0, r4
 800b85a:	f002 fd91 	bl	800e380 <tcp_split_unsent_seg>
 800b85e:	2800      	cmp	r0, #0
 800b860:	d048      	beq.n	800b8f4 <tcp_slowtmr+0x4fc>
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800b862:	f894 3099 	ldrb.w	r3, [r4, #153]	@ 0x99
              pcb->persist_cnt = 0;
 800b866:	f04f 0800 	mov.w	r8, #0
    if (pcb->state == FIN_WAIT_2) {
 800b86a:	7d22      	ldrb	r2, [r4, #20]
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800b86c:	2b06      	cmp	r3, #6
              pcb->persist_cnt = 0;
 800b86e:	f884 8098 	strb.w	r8, [r4, #152]	@ 0x98
                pcb->persist_backoff++;
 800b872:	bf9c      	itt	ls
 800b874:	3301      	addls	r3, #1
 800b876:	f884 3099 	strbls.w	r3, [r4, #153]	@ 0x99
 800b87a:	e5eb      	b.n	800b454 <tcp_slowtmr+0x5c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800b87c:	4b29      	ldr	r3, [pc, #164]	@ (800b924 <tcp_slowtmr+0x52c>)
 800b87e:	f240 526d 	movw	r2, #1389	@ 0x56d
 800b882:	4929      	ldr	r1, [pc, #164]	@ (800b928 <tcp_slowtmr+0x530>)
 800b884:	4823      	ldr	r0, [pc, #140]	@ (800b914 <tcp_slowtmr+0x51c>)
 800b886:	f005 fe07 	bl	8011498 <iprintf>
 800b88a:	e65a      	b.n	800b542 <tcp_slowtmr+0x14a>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	42a3      	cmp	r3, r4
 800b890:	d006      	beq.n	800b8a0 <tcp_slowtmr+0x4a8>
 800b892:	4b24      	ldr	r3, [pc, #144]	@ (800b924 <tcp_slowtmr+0x52c>)
 800b894:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800b898:	4924      	ldr	r1, [pc, #144]	@ (800b92c <tcp_slowtmr+0x534>)
 800b89a:	481e      	ldr	r0, [pc, #120]	@ (800b914 <tcp_slowtmr+0x51c>)
 800b89c:	f005 fdfc 	bl	8011498 <iprintf>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b8a0:	7d23      	ldrb	r3, [r4, #20]
        tcp_tw_pcbs = pcb->next;
 800b8a2:	f8d4 b00c 	ldr.w	fp, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b8a6:	2b01      	cmp	r3, #1
        tcp_tw_pcbs = pcb->next;
 800b8a8:	f8c7 b000 	str.w	fp, [r7]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b8ac:	f47f af6c 	bne.w	800b788 <tcp_slowtmr+0x390>
 800b8b0:	4b1c      	ldr	r3, [pc, #112]	@ (800b924 <tcp_slowtmr+0x52c>)
 800b8b2:	22d4      	movs	r2, #212	@ 0xd4
 800b8b4:	4916      	ldr	r1, [pc, #88]	@ (800b910 <tcp_slowtmr+0x518>)
 800b8b6:	4817      	ldr	r0, [pc, #92]	@ (800b914 <tcp_slowtmr+0x51c>)
 800b8b8:	f005 fdee 	bl	8011498 <iprintf>
 800b8bc:	e764      	b.n	800b788 <tcp_slowtmr+0x390>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800b8be:	4b19      	ldr	r3, [pc, #100]	@ (800b924 <tcp_slowtmr+0x52c>)
 800b8c0:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800b8c4:	491a      	ldr	r1, [pc, #104]	@ (800b930 <tcp_slowtmr+0x538>)
 800b8c6:	4813      	ldr	r0, [pc, #76]	@ (800b914 <tcp_slowtmr+0x51c>)
 800b8c8:	f005 fde6 	bl	8011498 <iprintf>
 800b8cc:	e675      	b.n	800b5ba <tcp_slowtmr+0x1c2>
            if (pcb->state != SYN_SENT) {
 800b8ce:	7d22      	ldrb	r2, [r4, #20]
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800b8d0:	6f21      	ldr	r1, [r4, #112]	@ 0x70
            if (pcb->state != SYN_SENT) {
 800b8d2:	4613      	mov	r3, r2
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800b8d4:	2900      	cmp	r1, #0
 800b8d6:	f47f adbd 	bne.w	800b454 <tcp_slowtmr+0x5c>
 800b8da:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 800b8dc:	2900      	cmp	r1, #0
 800b8de:	f47f af0f 	bne.w	800b700 <tcp_slowtmr+0x308>
 800b8e2:	e5b7      	b.n	800b454 <tcp_slowtmr+0x5c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800b8e4:	4b0f      	ldr	r3, [pc, #60]	@ (800b924 <tcp_slowtmr+0x52c>)
 800b8e6:	f240 52af 	movw	r2, #1455	@ 0x5af
 800b8ea:	4912      	ldr	r1, [pc, #72]	@ (800b934 <tcp_slowtmr+0x53c>)
 800b8ec:	4809      	ldr	r0, [pc, #36]	@ (800b914 <tcp_slowtmr+0x51c>)
 800b8ee:	f005 fdd3 	bl	8011498 <iprintf>
 800b8f2:	e741      	b.n	800b778 <tcp_slowtmr+0x380>
                if (tcp_output(pcb) == ERR_OK) {
 800b8f4:	4620      	mov	r0, r4
 800b8f6:	f003 f82b 	bl	800e950 <tcp_output>
 800b8fa:	2800      	cmp	r0, #0
 800b8fc:	d1b1      	bne.n	800b862 <tcp_slowtmr+0x46a>
    pcb_remove = 0;
 800b8fe:	4680      	mov	r8, r0
    if (pcb->state == FIN_WAIT_2) {
 800b900:	7d22      	ldrb	r2, [r4, #20]
 800b902:	e5a7      	b.n	800b454 <tcp_slowtmr+0x5c>
 800b904:	08013d3c 	.word	0x08013d3c
 800b908:	000124f8 	.word	0x000124f8
 800b90c:	10624dd3 	.word	0x10624dd3
 800b910:	080136f4 	.word	0x080136f4
 800b914:	0801241c 	.word	0x0801241c
 800b918:	08013d34 	.word	0x08013d34
 800b91c:	08013a38 	.word	0x08013a38
 800b920:	24009cfc 	.word	0x24009cfc
 800b924:	080136b8 	.word	0x080136b8
 800b928:	08013a0c 	.word	0x08013a0c
 800b92c:	08013abc 	.word	0x08013abc
 800b930:	080139d4 	.word	0x080139d4
 800b934:	08013a94 	.word	0x08013a94

0800b938 <tcp_pcb_remove>:
{
 800b938:	b538      	push	{r3, r4, r5, lr}
 800b93a:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800b93c:	460c      	mov	r4, r1
 800b93e:	2900      	cmp	r1, #0
 800b940:	d04a      	beq.n	800b9d8 <tcp_pcb_remove+0xa0>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800b942:	2d00      	cmp	r5, #0
 800b944:	d051      	beq.n	800b9ea <tcp_pcb_remove+0xb2>
  TCP_RMV(pcblist, pcb);
 800b946:	682b      	ldr	r3, [r5, #0]
 800b948:	42a3      	cmp	r3, r4
 800b94a:	d032      	beq.n	800b9b2 <tcp_pcb_remove+0x7a>
 800b94c:	b12b      	cbz	r3, 800b95a <tcp_pcb_remove+0x22>
 800b94e:	68da      	ldr	r2, [r3, #12]
 800b950:	42a2      	cmp	r2, r4
 800b952:	d03e      	beq.n	800b9d2 <tcp_pcb_remove+0x9a>
 800b954:	4613      	mov	r3, r2
 800b956:	2b00      	cmp	r3, #0
 800b958:	d1f9      	bne.n	800b94e <tcp_pcb_remove+0x16>
 800b95a:	2300      	movs	r3, #0
  tcp_pcb_purge(pcb);
 800b95c:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 800b95e:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 800b960:	f7ff fcf8 	bl	800b354 <tcp_pcb_purge>
  if ((pcb->state != TIME_WAIT) &&
 800b964:	7d23      	ldrb	r3, [r4, #20]
 800b966:	2b0a      	cmp	r3, #10
 800b968:	d02d      	beq.n	800b9c6 <tcp_pcb_remove+0x8e>
 800b96a:	2b01      	cmp	r3, #1
 800b96c:	d01d      	beq.n	800b9aa <tcp_pcb_remove+0x72>
      (pcb->flags & TF_ACK_DELAY)) {
 800b96e:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 800b970:	07da      	lsls	r2, r3, #31
 800b972:	d421      	bmi.n	800b9b8 <tcp_pcb_remove+0x80>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800b974:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800b976:	b133      	cbz	r3, 800b986 <tcp_pcb_remove+0x4e>
 800b978:	4b20      	ldr	r3, [pc, #128]	@ (800b9fc <tcp_pcb_remove+0xc4>)
 800b97a:	f640 0293 	movw	r2, #2195	@ 0x893
 800b97e:	4920      	ldr	r1, [pc, #128]	@ (800ba00 <tcp_pcb_remove+0xc8>)
 800b980:	4820      	ldr	r0, [pc, #128]	@ (800ba04 <tcp_pcb_remove+0xcc>)
 800b982:	f005 fd89 	bl	8011498 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800b986:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800b988:	b133      	cbz	r3, 800b998 <tcp_pcb_remove+0x60>
 800b98a:	4b1c      	ldr	r3, [pc, #112]	@ (800b9fc <tcp_pcb_remove+0xc4>)
 800b98c:	f640 0294 	movw	r2, #2196	@ 0x894
 800b990:	491d      	ldr	r1, [pc, #116]	@ (800ba08 <tcp_pcb_remove+0xd0>)
 800b992:	481c      	ldr	r0, [pc, #112]	@ (800ba04 <tcp_pcb_remove+0xcc>)
 800b994:	f005 fd80 	bl	8011498 <iprintf>
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800b998:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800b99a:	b133      	cbz	r3, 800b9aa <tcp_pcb_remove+0x72>
 800b99c:	4b17      	ldr	r3, [pc, #92]	@ (800b9fc <tcp_pcb_remove+0xc4>)
 800b99e:	f640 0296 	movw	r2, #2198	@ 0x896
 800b9a2:	491a      	ldr	r1, [pc, #104]	@ (800ba0c <tcp_pcb_remove+0xd4>)
 800b9a4:	4817      	ldr	r0, [pc, #92]	@ (800ba04 <tcp_pcb_remove+0xcc>)
 800b9a6:	f005 fd77 	bl	8011498 <iprintf>
  pcb->state = CLOSED;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	7523      	strb	r3, [r4, #20]
  pcb->local_port = 0;
 800b9ae:	82e3      	strh	r3, [r4, #22]
}
 800b9b0:	bd38      	pop	{r3, r4, r5, pc}
  TCP_RMV(pcblist, pcb);
 800b9b2:	68e3      	ldr	r3, [r4, #12]
 800b9b4:	602b      	str	r3, [r5, #0]
 800b9b6:	e7d0      	b.n	800b95a <tcp_pcb_remove+0x22>
    tcp_ack_now(pcb);
 800b9b8:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 800b9bc:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 800b9be:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 800b9c0:	f002 ffc6 	bl	800e950 <tcp_output>
  if (pcb->state != LISTEN) {
 800b9c4:	7d23      	ldrb	r3, [r4, #20]
 800b9c6:	2b01      	cmp	r3, #1
 800b9c8:	d0ef      	beq.n	800b9aa <tcp_pcb_remove+0x72>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800b9ca:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d1d3      	bne.n	800b978 <tcp_pcb_remove+0x40>
 800b9d0:	e7d9      	b.n	800b986 <tcp_pcb_remove+0x4e>
  TCP_RMV(pcblist, pcb);
 800b9d2:	68e2      	ldr	r2, [r4, #12]
 800b9d4:	60da      	str	r2, [r3, #12]
 800b9d6:	e7c0      	b.n	800b95a <tcp_pcb_remove+0x22>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800b9d8:	4b08      	ldr	r3, [pc, #32]	@ (800b9fc <tcp_pcb_remove+0xc4>)
 800b9da:	f640 0283 	movw	r2, #2179	@ 0x883
 800b9de:	490c      	ldr	r1, [pc, #48]	@ (800ba10 <tcp_pcb_remove+0xd8>)
 800b9e0:	4808      	ldr	r0, [pc, #32]	@ (800ba04 <tcp_pcb_remove+0xcc>)
 800b9e2:	f005 fd59 	bl	8011498 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800b9e6:	2d00      	cmp	r5, #0
 800b9e8:	d1ad      	bne.n	800b946 <tcp_pcb_remove+0xe>
 800b9ea:	4b04      	ldr	r3, [pc, #16]	@ (800b9fc <tcp_pcb_remove+0xc4>)
 800b9ec:	f640 0284 	movw	r2, #2180	@ 0x884
 800b9f0:	4908      	ldr	r1, [pc, #32]	@ (800ba14 <tcp_pcb_remove+0xdc>)
 800b9f2:	4804      	ldr	r0, [pc, #16]	@ (800ba04 <tcp_pcb_remove+0xcc>)
 800b9f4:	f005 fd50 	bl	8011498 <iprintf>
 800b9f8:	e7a5      	b.n	800b946 <tcp_pcb_remove+0xe>
 800b9fa:	bf00      	nop
 800b9fc:	080136b8 	.word	0x080136b8
 800ba00:	08013b20 	.word	0x08013b20
 800ba04:	0801241c 	.word	0x0801241c
 800ba08:	08013b38 	.word	0x08013b38
 800ba0c:	08013b54 	.word	0x08013b54
 800ba10:	08013ae4 	.word	0x08013ae4
 800ba14:	08013b00 	.word	0x08013b00

0800ba18 <tcp_abandon>:
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800ba18:	2800      	cmp	r0, #0
 800ba1a:	f000 80ae 	beq.w	800bb7a <tcp_abandon+0x162>
{
 800ba1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800ba22:	7d03      	ldrb	r3, [r0, #20]
{
 800ba24:	b087      	sub	sp, #28
 800ba26:	4605      	mov	r5, r0
 800ba28:	460e      	mov	r6, r1
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800ba2a:	2b01      	cmp	r3, #1
 800ba2c:	f000 808c 	beq.w	800bb48 <tcp_abandon+0x130>
  if (pcb->state == TIME_WAIT) {
 800ba30:	2b0a      	cmp	r3, #10
 800ba32:	f000 8094 	beq.w	800bb5e <tcp_abandon+0x146>
    seqno = pcb->snd_nxt;
 800ba36:	6d2a      	ldr	r2, [r5, #80]	@ 0x50
    ackno = pcb->rcv_nxt;
 800ba38:	f8d5 b024 	ldr.w	fp, [r5, #36]	@ 0x24
    errf = pcb->errf;
 800ba3c:	f8d5 7090 	ldr.w	r7, [r5, #144]	@ 0x90
    errf_arg = pcb->callback_arg;
 800ba40:	f8d5 9010 	ldr.w	r9, [r5, #16]
      if (pcb->local_port != 0) {
 800ba44:	f8b5 8016 	ldrh.w	r8, [r5, #22]
    seqno = pcb->snd_nxt;
 800ba48:	9205      	str	r2, [sp, #20]
    if (pcb->state == CLOSED) {
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d144      	bne.n	800bad8 <tcp_abandon+0xc0>
      if (pcb->local_port != 0) {
 800ba4e:	f1b8 0f00 	cmp.w	r8, #0
 800ba52:	d149      	bne.n	800bae8 <tcp_abandon+0xd0>
    u16_t local_port = 0;
 800ba54:	f04f 0800 	mov.w	r8, #0
    int send_rst = 0;
 800ba58:	4646      	mov	r6, r8
    if (pcb->unacked != NULL) {
 800ba5a:	6f2c      	ldr	r4, [r5, #112]	@ 0x70
 800ba5c:	b164      	cbz	r4, 800ba78 <tcp_abandon+0x60>
      pbuf_free(seg->p);
 800ba5e:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 800ba60:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800ba62:	f8da 0004 	ldr.w	r0, [sl, #4]
 800ba66:	b108      	cbz	r0, 800ba6c <tcp_abandon+0x54>
      pbuf_free(seg->p);
 800ba68:	f7fe fe8a 	bl	800a780 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800ba6c:	4651      	mov	r1, sl
 800ba6e:	2003      	movs	r0, #3
 800ba70:	f7fe fbb6 	bl	800a1e0 <memp_free>
  while (seg != NULL) {
 800ba74:	2c00      	cmp	r4, #0
 800ba76:	d1f2      	bne.n	800ba5e <tcp_abandon+0x46>
    if (pcb->unsent != NULL) {
 800ba78:	6eec      	ldr	r4, [r5, #108]	@ 0x6c
 800ba7a:	b164      	cbz	r4, 800ba96 <tcp_abandon+0x7e>
      pbuf_free(seg->p);
 800ba7c:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 800ba7e:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800ba80:	f8da 0004 	ldr.w	r0, [sl, #4]
 800ba84:	b108      	cbz	r0, 800ba8a <tcp_abandon+0x72>
      pbuf_free(seg->p);
 800ba86:	f7fe fe7b 	bl	800a780 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800ba8a:	4651      	mov	r1, sl
 800ba8c:	2003      	movs	r0, #3
 800ba8e:	f7fe fba7 	bl	800a1e0 <memp_free>
  while (seg != NULL) {
 800ba92:	2c00      	cmp	r4, #0
 800ba94:	d1f2      	bne.n	800ba7c <tcp_abandon+0x64>
    if (pcb->ooseq != NULL) {
 800ba96:	6f6c      	ldr	r4, [r5, #116]	@ 0x74
 800ba98:	b164      	cbz	r4, 800bab4 <tcp_abandon+0x9c>
      pbuf_free(seg->p);
 800ba9a:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 800ba9c:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800ba9e:	f8da 0004 	ldr.w	r0, [sl, #4]
 800baa2:	b108      	cbz	r0, 800baa8 <tcp_abandon+0x90>
      pbuf_free(seg->p);
 800baa4:	f7fe fe6c 	bl	800a780 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800baa8:	4651      	mov	r1, sl
 800baaa:	2003      	movs	r0, #3
 800baac:	f7fe fb98 	bl	800a1e0 <memp_free>
  while (seg != NULL) {
 800bab0:	2c00      	cmp	r4, #0
 800bab2:	d1f2      	bne.n	800ba9a <tcp_abandon+0x82>
    if (send_rst) {
 800bab4:	bb3e      	cbnz	r6, 800bb06 <tcp_abandon+0xee>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800bab6:	7d2b      	ldrb	r3, [r5, #20]
 800bab8:	2b01      	cmp	r3, #1
 800baba:	d033      	beq.n	800bb24 <tcp_abandon+0x10c>
  memp_free(MEMP_TCP_PCB, pcb);
 800babc:	4629      	mov	r1, r5
 800babe:	2001      	movs	r0, #1
 800bac0:	f7fe fb8e 	bl	800a1e0 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800bac4:	2f00      	cmp	r7, #0
 800bac6:	d039      	beq.n	800bb3c <tcp_abandon+0x124>
 800bac8:	f06f 010c 	mvn.w	r1, #12
 800bacc:	4648      	mov	r0, r9
 800bace:	463b      	mov	r3, r7
}
 800bad0:	b007      	add	sp, #28
 800bad2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800bad6:	4718      	bx	r3
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800bad8:	4629      	mov	r1, r5
 800bada:	482f      	ldr	r0, [pc, #188]	@ (800bb98 <tcp_abandon+0x180>)
 800badc:	f7ff ff2c 	bl	800b938 <tcp_pcb_remove>
 800bae0:	4b2e      	ldr	r3, [pc, #184]	@ (800bb9c <tcp_abandon+0x184>)
 800bae2:	2201      	movs	r2, #1
 800bae4:	701a      	strb	r2, [r3, #0]
 800bae6:	e7b8      	b.n	800ba5a <tcp_abandon+0x42>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800bae8:	4a2d      	ldr	r2, [pc, #180]	@ (800bba0 <tcp_abandon+0x188>)
 800baea:	6813      	ldr	r3, [r2, #0]
 800baec:	42ab      	cmp	r3, r5
 800baee:	d028      	beq.n	800bb42 <tcp_abandon+0x12a>
 800baf0:	b133      	cbz	r3, 800bb00 <tcp_abandon+0xe8>
 800baf2:	68da      	ldr	r2, [r3, #12]
 800baf4:	42aa      	cmp	r2, r5
 800baf6:	d001      	beq.n	800bafc <tcp_abandon+0xe4>
 800baf8:	4613      	mov	r3, r2
 800bafa:	e7f9      	b.n	800baf0 <tcp_abandon+0xd8>
 800bafc:	68ea      	ldr	r2, [r5, #12]
 800bafe:	60da      	str	r2, [r3, #12]
 800bb00:	2300      	movs	r3, #0
 800bb02:	60eb      	str	r3, [r5, #12]
 800bb04:	e7a6      	b.n	800ba54 <tcp_abandon+0x3c>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800bb06:	f8cd 8004 	str.w	r8, [sp, #4]
 800bb0a:	465a      	mov	r2, fp
 800bb0c:	8b2b      	ldrh	r3, [r5, #24]
 800bb0e:	4628      	mov	r0, r5
 800bb10:	9905      	ldr	r1, [sp, #20]
 800bb12:	9302      	str	r3, [sp, #8]
 800bb14:	1d2b      	adds	r3, r5, #4
 800bb16:	9300      	str	r3, [sp, #0]
 800bb18:	462b      	mov	r3, r5
 800bb1a:	f002 fe9f 	bl	800e85c <tcp_rst>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800bb1e:	7d2b      	ldrb	r3, [r5, #20]
 800bb20:	2b01      	cmp	r3, #1
 800bb22:	d1cb      	bne.n	800babc <tcp_abandon+0xa4>
 800bb24:	491f      	ldr	r1, [pc, #124]	@ (800bba4 <tcp_abandon+0x18c>)
 800bb26:	22d4      	movs	r2, #212	@ 0xd4
 800bb28:	4b1f      	ldr	r3, [pc, #124]	@ (800bba8 <tcp_abandon+0x190>)
 800bb2a:	4820      	ldr	r0, [pc, #128]	@ (800bbac <tcp_abandon+0x194>)
 800bb2c:	f005 fcb4 	bl	8011498 <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 800bb30:	4629      	mov	r1, r5
 800bb32:	2001      	movs	r0, #1
 800bb34:	f7fe fb54 	bl	800a1e0 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800bb38:	2f00      	cmp	r7, #0
 800bb3a:	d1c5      	bne.n	800bac8 <tcp_abandon+0xb0>
}
 800bb3c:	b007      	add	sp, #28
 800bb3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800bb42:	68eb      	ldr	r3, [r5, #12]
 800bb44:	6013      	str	r3, [r2, #0]
 800bb46:	e7db      	b.n	800bb00 <tcp_abandon+0xe8>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800bb48:	4b17      	ldr	r3, [pc, #92]	@ (800bba8 <tcp_abandon+0x190>)
 800bb4a:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800bb4e:	4918      	ldr	r1, [pc, #96]	@ (800bbb0 <tcp_abandon+0x198>)
 800bb50:	4816      	ldr	r0, [pc, #88]	@ (800bbac <tcp_abandon+0x194>)
 800bb52:	f005 fca1 	bl	8011498 <iprintf>
  if (pcb->state == TIME_WAIT) {
 800bb56:	7d2b      	ldrb	r3, [r5, #20]
 800bb58:	2b0a      	cmp	r3, #10
 800bb5a:	f47f af6c 	bne.w	800ba36 <tcp_abandon+0x1e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800bb5e:	4629      	mov	r1, r5
 800bb60:	4814      	ldr	r0, [pc, #80]	@ (800bbb4 <tcp_abandon+0x19c>)
 800bb62:	f7ff fee9 	bl	800b938 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800bb66:	7d2b      	ldrb	r3, [r5, #20]
 800bb68:	2b01      	cmp	r3, #1
 800bb6a:	d00d      	beq.n	800bb88 <tcp_abandon+0x170>
  memp_free(MEMP_TCP_PCB, pcb);
 800bb6c:	4629      	mov	r1, r5
 800bb6e:	2001      	movs	r0, #1
}
 800bb70:	b007      	add	sp, #28
 800bb72:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 800bb76:	f7fe bb33 	b.w	800a1e0 <memp_free>
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800bb7a:	4b0b      	ldr	r3, [pc, #44]	@ (800bba8 <tcp_abandon+0x190>)
 800bb7c:	f240 223d 	movw	r2, #573	@ 0x23d
 800bb80:	490d      	ldr	r1, [pc, #52]	@ (800bbb8 <tcp_abandon+0x1a0>)
 800bb82:	480a      	ldr	r0, [pc, #40]	@ (800bbac <tcp_abandon+0x194>)
 800bb84:	f005 bc88 	b.w	8011498 <iprintf>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800bb88:	4b07      	ldr	r3, [pc, #28]	@ (800bba8 <tcp_abandon+0x190>)
 800bb8a:	22d4      	movs	r2, #212	@ 0xd4
 800bb8c:	4905      	ldr	r1, [pc, #20]	@ (800bba4 <tcp_abandon+0x18c>)
 800bb8e:	4807      	ldr	r0, [pc, #28]	@ (800bbac <tcp_abandon+0x194>)
 800bb90:	f005 fc82 	bl	8011498 <iprintf>
 800bb94:	e7ea      	b.n	800bb6c <tcp_abandon+0x154>
 800bb96:	bf00      	nop
 800bb98:	24009cfc 	.word	0x24009cfc
 800bb9c:	24009cf7 	.word	0x24009cf7
 800bba0:	24009d04 	.word	0x24009d04
 800bba4:	080136f4 	.word	0x080136f4
 800bba8:	080136b8 	.word	0x080136b8
 800bbac:	0801241c 	.word	0x0801241c
 800bbb0:	08013b88 	.word	0x08013b88
 800bbb4:	24009cf8 	.word	0x24009cf8
 800bbb8:	08013b6c 	.word	0x08013b6c

0800bbbc <tcp_abort>:
  tcp_abandon(pcb, 1);
 800bbbc:	2101      	movs	r1, #1
 800bbbe:	f7ff bf2b 	b.w	800ba18 <tcp_abandon>
 800bbc2:	bf00      	nop

0800bbc4 <tcp_accept_null>:
{
 800bbc4:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800bbc6:	460c      	mov	r4, r1
 800bbc8:	b131      	cbz	r1, 800bbd8 <tcp_accept_null+0x14>
  tcp_abandon(pcb, 1);
 800bbca:	4620      	mov	r0, r4
 800bbcc:	2101      	movs	r1, #1
 800bbce:	f7ff ff23 	bl	800ba18 <tcp_abandon>
}
 800bbd2:	f06f 000c 	mvn.w	r0, #12
 800bbd6:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800bbd8:	4b06      	ldr	r3, [pc, #24]	@ (800bbf4 <tcp_accept_null+0x30>)
 800bbda:	f240 320f 	movw	r2, #783	@ 0x30f
 800bbde:	4906      	ldr	r1, [pc, #24]	@ (800bbf8 <tcp_accept_null+0x34>)
 800bbe0:	4806      	ldr	r0, [pc, #24]	@ (800bbfc <tcp_accept_null+0x38>)
 800bbe2:	f005 fc59 	bl	8011498 <iprintf>
  tcp_abandon(pcb, 1);
 800bbe6:	4620      	mov	r0, r4
 800bbe8:	2101      	movs	r1, #1
 800bbea:	f7ff ff15 	bl	800ba18 <tcp_abandon>
}
 800bbee:	f06f 000c 	mvn.w	r0, #12
 800bbf2:	bd10      	pop	{r4, pc}
 800bbf4:	080136b8 	.word	0x080136b8
 800bbf8:	08013bbc 	.word	0x08013bbc
 800bbfc:	0801241c 	.word	0x0801241c

0800bc00 <tcp_netif_ip_addr_changed_pcblist>:
{
 800bc00:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800bc02:	4605      	mov	r5, r0
{
 800bc04:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800bc06:	b160      	cbz	r0, 800bc22 <tcp_netif_ip_addr_changed_pcblist+0x22>
  while (pcb != NULL) {
 800bc08:	b154      	cbz	r4, 800bc20 <tcp_netif_ip_addr_changed_pcblist+0x20>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800bc0a:	6822      	ldr	r2, [r4, #0]
 800bc0c:	4620      	mov	r0, r4
 800bc0e:	682b      	ldr	r3, [r5, #0]
      struct tcp_pcb *next = pcb->next;
 800bc10:	68e4      	ldr	r4, [r4, #12]
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800bc12:	429a      	cmp	r2, r3
 800bc14:	d1f8      	bne.n	800bc08 <tcp_netif_ip_addr_changed_pcblist+0x8>
  tcp_abandon(pcb, 1);
 800bc16:	2101      	movs	r1, #1
 800bc18:	f7ff fefe 	bl	800ba18 <tcp_abandon>
  while (pcb != NULL) {
 800bc1c:	2c00      	cmp	r4, #0
 800bc1e:	d1f4      	bne.n	800bc0a <tcp_netif_ip_addr_changed_pcblist+0xa>
}
 800bc20:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800bc22:	4b04      	ldr	r3, [pc, #16]	@ (800bc34 <tcp_netif_ip_addr_changed_pcblist+0x34>)
 800bc24:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800bc28:	4903      	ldr	r1, [pc, #12]	@ (800bc38 <tcp_netif_ip_addr_changed_pcblist+0x38>)
 800bc2a:	4804      	ldr	r0, [pc, #16]	@ (800bc3c <tcp_netif_ip_addr_changed_pcblist+0x3c>)
 800bc2c:	f005 fc34 	bl	8011498 <iprintf>
 800bc30:	e7ea      	b.n	800bc08 <tcp_netif_ip_addr_changed_pcblist+0x8>
 800bc32:	bf00      	nop
 800bc34:	080136b8 	.word	0x080136b8
 800bc38:	08013bdc 	.word	0x08013bdc
 800bc3c:	0801241c 	.word	0x0801241c

0800bc40 <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bc40:	4b10      	ldr	r3, [pc, #64]	@ (800bc84 <tcp_kill_state+0x44>)
 800bc42:	6819      	ldr	r1, [r3, #0]
 800bc44:	b1e9      	cbz	r1, 800bc82 <tcp_kill_state+0x42>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bc46:	4b10      	ldr	r3, [pc, #64]	@ (800bc88 <tcp_kill_state+0x48>)
  inactivity = 0;
 800bc48:	f04f 0c00 	mov.w	ip, #0
 800bc4c:	4602      	mov	r2, r0
  inactive = NULL;
 800bc4e:	4660      	mov	r0, ip
{
 800bc50:	b410      	push	{r4}
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bc52:	681c      	ldr	r4, [r3, #0]
 800bc54:	e001      	b.n	800bc5a <tcp_kill_state+0x1a>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bc56:	68c9      	ldr	r1, [r1, #12]
 800bc58:	b159      	cbz	r1, 800bc72 <tcp_kill_state+0x32>
    if (pcb->state == state) {
 800bc5a:	7d0b      	ldrb	r3, [r1, #20]
 800bc5c:	4293      	cmp	r3, r2
 800bc5e:	d1fa      	bne.n	800bc56 <tcp_kill_state+0x16>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bc60:	6a0b      	ldr	r3, [r1, #32]
 800bc62:	1ae3      	subs	r3, r4, r3
 800bc64:	459c      	cmp	ip, r3
 800bc66:	d8f6      	bhi.n	800bc56 <tcp_kill_state+0x16>
 800bc68:	4608      	mov	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bc6a:	68c9      	ldr	r1, [r1, #12]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bc6c:	469c      	mov	ip, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bc6e:	2900      	cmp	r1, #0
 800bc70:	d1f3      	bne.n	800bc5a <tcp_kill_state+0x1a>
  if (inactive != NULL) {
 800bc72:	b118      	cbz	r0, 800bc7c <tcp_kill_state+0x3c>
}
 800bc74:	f85d 4b04 	ldr.w	r4, [sp], #4
    tcp_abandon(inactive, 0);
 800bc78:	f7ff bece 	b.w	800ba18 <tcp_abandon>
}
 800bc7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc80:	4770      	bx	lr
 800bc82:	4770      	bx	lr
 800bc84:	24009cfc 	.word	0x24009cfc
 800bc88:	24009d08 	.word	0x24009d08

0800bc8c <tcp_alloc>:
{
 800bc8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc8e:	4606      	mov	r6, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bc90:	2001      	movs	r0, #1
 800bc92:	f7fe fa5f 	bl	800a154 <memp_malloc>
  if (pcb == NULL) {
 800bc96:	4604      	mov	r4, r0
 800bc98:	b318      	cbz	r0, 800bce2 <tcp_alloc+0x56>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800bc9a:	229c      	movs	r2, #156	@ 0x9c
 800bc9c:	2100      	movs	r1, #0
 800bc9e:	4620      	mov	r0, r4
 800bca0:	f005 fd52 	bl	8011748 <memset>
    pcb->tmr = tcp_ticks;
 800bca4:	4b42      	ldr	r3, [pc, #264]	@ (800bdb0 <tcp_alloc+0x124>)
    pcb->last_timer = tcp_timer_ctr;
 800bca6:	4943      	ldr	r1, [pc, #268]	@ (800bdb4 <tcp_alloc+0x128>)
    pcb->snd_buf = TCP_SND_BUF;
 800bca8:	f44f 6086 	mov.w	r0, #1072	@ 0x430
    pcb->tmr = tcp_ticks;
 800bcac:	681a      	ldr	r2, [r3, #0]
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800bcae:	4b42      	ldr	r3, [pc, #264]	@ (800bdb8 <tcp_alloc+0x12c>)
    pcb->last_timer = tcp_timer_ctr;
 800bcb0:	7809      	ldrb	r1, [r1, #0]
    pcb->tmr = tcp_ticks;
 800bcb2:	6222      	str	r2, [r4, #32]
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800bcb4:	62a3      	str	r3, [r4, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800bcb6:	23ff      	movs	r3, #255	@ 0xff
    pcb->cwnd = 1;
 800bcb8:	4a40      	ldr	r2, [pc, #256]	@ (800bdbc <tcp_alloc+0x130>)
    pcb->snd_buf = TCP_SND_BUF;
 800bcba:	f8a4 0064 	strh.w	r0, [r4, #100]	@ 0x64
    pcb->last_timer = tcp_timer_ctr;
 800bcbe:	77a1      	strb	r1, [r4, #30]
    pcb->recv = tcp_recv_null;
 800bcc0:	483f      	ldr	r0, [pc, #252]	@ (800bdc0 <tcp_alloc+0x134>)
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800bcc2:	4940      	ldr	r1, [pc, #256]	@ (800bdc4 <tcp_alloc+0x138>)
    pcb->cwnd = 1;
 800bcc4:	64a2      	str	r2, [r4, #72]	@ 0x48
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800bcc6:	f04f 1206 	mov.w	r2, #393222	@ 0x60006
    pcb->ttl = TCP_TTL;
 800bcca:	72e3      	strb	r3, [r4, #11]
    pcb->rtime = -1;
 800bccc:	4b3e      	ldr	r3, [pc, #248]	@ (800bdc8 <tcp_alloc+0x13c>)
    pcb->prio = prio;
 800bcce:	7566      	strb	r6, [r4, #21]
    pcb->recv = tcp_recv_null;
 800bcd0:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800bcd4:	f8c4 1094 	str.w	r1, [r4, #148]	@ 0x94
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800bcd8:	f8c4 203e 	str.w	r2, [r4, #62]	@ 0x3e
    pcb->rtime = -1;
 800bcdc:	6323      	str	r3, [r4, #48]	@ 0x30
}
 800bcde:	4620      	mov	r0, r4
 800bce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800bce2:	4f3a      	ldr	r7, [pc, #232]	@ (800bdcc <tcp_alloc+0x140>)
 800bce4:	683d      	ldr	r5, [r7, #0]
  while (pcb != NULL) {
 800bce6:	b15d      	cbz	r5, 800bd00 <tcp_alloc+0x74>
    struct tcp_pcb *next = pcb->next;
 800bce8:	4628      	mov	r0, r5
 800bcea:	68ed      	ldr	r5, [r5, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 800bcec:	8b43      	ldrh	r3, [r0, #26]
 800bcee:	071a      	lsls	r2, r3, #28
 800bcf0:	d5f9      	bpl.n	800bce6 <tcp_alloc+0x5a>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800bcf2:	f023 0308 	bic.w	r3, r3, #8
 800bcf6:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 800bcf8:	f7ff f8b8 	bl	800ae6c <tcp_close_shutdown_fin>
  while (pcb != NULL) {
 800bcfc:	2d00      	cmp	r5, #0
 800bcfe:	d1f3      	bne.n	800bce8 <tcp_alloc+0x5c>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bd00:	4b33      	ldr	r3, [pc, #204]	@ (800bdd0 <tcp_alloc+0x144>)
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	b183      	cbz	r3, 800bd28 <tcp_alloc+0x9c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bd06:	4a2a      	ldr	r2, [pc, #168]	@ (800bdb0 <tcp_alloc+0x124>)
  inactivity = 0;
 800bd08:	2100      	movs	r1, #0
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bd0a:	6810      	ldr	r0, [r2, #0]
 800bd0c:	6a1a      	ldr	r2, [r3, #32]
 800bd0e:	1a82      	subs	r2, r0, r2
 800bd10:	428a      	cmp	r2, r1
 800bd12:	d301      	bcc.n	800bd18 <tcp_alloc+0x8c>
 800bd14:	461c      	mov	r4, r3
 800bd16:	4611      	mov	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bd18:	68db      	ldr	r3, [r3, #12]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d1f6      	bne.n	800bd0c <tcp_alloc+0x80>
  if (inactive != NULL) {
 800bd1e:	b11c      	cbz	r4, 800bd28 <tcp_alloc+0x9c>
  tcp_abandon(pcb, 1);
 800bd20:	2101      	movs	r1, #1
 800bd22:	4620      	mov	r0, r4
 800bd24:	f7ff fe78 	bl	800ba18 <tcp_abandon>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bd28:	2001      	movs	r0, #1
 800bd2a:	f7fe fa13 	bl	800a154 <memp_malloc>
    if (pcb == NULL) {
 800bd2e:	4604      	mov	r4, r0
 800bd30:	2800      	cmp	r0, #0
 800bd32:	d1b2      	bne.n	800bc9a <tcp_alloc+0xe>
      tcp_kill_state(LAST_ACK);
 800bd34:	2009      	movs	r0, #9
 800bd36:	f7ff ff83 	bl	800bc40 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bd3a:	2001      	movs	r0, #1
 800bd3c:	f7fe fa0a 	bl	800a154 <memp_malloc>
      if (pcb == NULL) {
 800bd40:	4604      	mov	r4, r0
 800bd42:	2800      	cmp	r0, #0
 800bd44:	d1a9      	bne.n	800bc9a <tcp_alloc+0xe>
        tcp_kill_state(CLOSING);
 800bd46:	2008      	movs	r0, #8
 800bd48:	f7ff ff7a 	bl	800bc40 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bd4c:	2001      	movs	r0, #1
 800bd4e:	f7fe fa01 	bl	800a154 <memp_malloc>
        if (pcb == NULL) {
 800bd52:	4604      	mov	r4, r0
 800bd54:	2800      	cmp	r0, #0
 800bd56:	d1a0      	bne.n	800bc9a <tcp_alloc+0xe>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800bd58:	0633      	lsls	r3, r6, #24
 800bd5a:	d426      	bmi.n	800bdaa <tcp_alloc+0x11e>
  if (mprio == 0) {
 800bd5c:	b1ee      	cbz	r6, 800bd9a <tcp_alloc+0x10e>
 800bd5e:	4633      	mov	r3, r6
  mprio--;
 800bd60:	1e5a      	subs	r2, r3, #1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bd62:	683b      	ldr	r3, [r7, #0]
  mprio--;
 800bd64:	b2d2      	uxtb	r2, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bd66:	b1c3      	cbz	r3, 800bd9a <tcp_alloc+0x10e>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800bd68:	4911      	ldr	r1, [pc, #68]	@ (800bdb0 <tcp_alloc+0x124>)
  inactivity = 0;
 800bd6a:	2500      	movs	r5, #0
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800bd6c:	680f      	ldr	r7, [r1, #0]
 800bd6e:	e005      	b.n	800bd7c <tcp_alloc+0xf0>
 800bd70:	6a18      	ldr	r0, [r3, #32]
      inactivity = tcp_ticks - pcb->tmr;
 800bd72:	1a3d      	subs	r5, r7, r0
    if ((pcb->prio < mprio) ||
 800bd74:	460a      	mov	r2, r1
      inactivity = tcp_ticks - pcb->tmr;
 800bd76:	461c      	mov	r4, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bd78:	68db      	ldr	r3, [r3, #12]
 800bd7a:	b14b      	cbz	r3, 800bd90 <tcp_alloc+0x104>
    if ((pcb->prio < mprio) ||
 800bd7c:	7d59      	ldrb	r1, [r3, #21]
 800bd7e:	428a      	cmp	r2, r1
 800bd80:	d8f6      	bhi.n	800bd70 <tcp_alloc+0xe4>
 800bd82:	d1f9      	bne.n	800bd78 <tcp_alloc+0xec>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800bd84:	6a18      	ldr	r0, [r3, #32]
 800bd86:	eba7 0c00 	sub.w	ip, r7, r0
 800bd8a:	45ac      	cmp	ip, r5
 800bd8c:	d3f4      	bcc.n	800bd78 <tcp_alloc+0xec>
 800bd8e:	e7f0      	b.n	800bd72 <tcp_alloc+0xe6>
  if (inactive != NULL) {
 800bd90:	b11c      	cbz	r4, 800bd9a <tcp_alloc+0x10e>
  tcp_abandon(pcb, 1);
 800bd92:	2101      	movs	r1, #1
 800bd94:	4620      	mov	r0, r4
 800bd96:	f7ff fe3f 	bl	800ba18 <tcp_abandon>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bd9a:	2001      	movs	r0, #1
 800bd9c:	f7fe f9da 	bl	800a154 <memp_malloc>
  if (pcb != NULL) {
 800bda0:	4604      	mov	r4, r0
 800bda2:	2800      	cmp	r0, #0
 800bda4:	f47f af79 	bne.w	800bc9a <tcp_alloc+0xe>
 800bda8:	e799      	b.n	800bcde <tcp_alloc+0x52>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800bdaa:	237f      	movs	r3, #127	@ 0x7f
 800bdac:	e7d8      	b.n	800bd60 <tcp_alloc+0xd4>
 800bdae:	bf00      	nop
 800bdb0:	24009d08 	.word	0x24009d08
 800bdb4:	24009cf5 	.word	0x24009cf5
 800bdb8:	08600860 	.word	0x08600860
 800bdbc:	04300001 	.word	0x04300001
 800bdc0:	0800c029 	.word	0x0800c029
 800bdc4:	006ddd00 	.word	0x006ddd00
 800bdc8:	0218ffff 	.word	0x0218ffff
 800bdcc:	24009cfc 	.word	0x24009cfc
 800bdd0:	24009cf8 	.word	0x24009cf8

0800bdd4 <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800bdd4:	2040      	movs	r0, #64	@ 0x40
 800bdd6:	f7ff bf59 	b.w	800bc8c <tcp_alloc>
 800bdda:	bf00      	nop

0800bddc <tcp_close_shutdown>:
{
 800bddc:	b530      	push	{r4, r5, lr}
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800bdde:	4604      	mov	r4, r0
{
 800bde0:	b085      	sub	sp, #20
 800bde2:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800bde4:	2800      	cmp	r0, #0
 800bde6:	f000 8089 	beq.w	800befc <tcp_close_shutdown+0x120>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800bdea:	7d23      	ldrb	r3, [r4, #20]
 800bdec:	b11d      	cbz	r5, 800bdf6 <tcp_close_shutdown+0x1a>
 800bdee:	2b04      	cmp	r3, #4
 800bdf0:	d01e      	beq.n	800be30 <tcp_close_shutdown+0x54>
 800bdf2:	2b07      	cmp	r3, #7
 800bdf4:	d01c      	beq.n	800be30 <tcp_close_shutdown+0x54>
  switch (pcb->state) {
 800bdf6:	2b01      	cmp	r3, #1
 800bdf8:	d03a      	beq.n	800be70 <tcp_close_shutdown+0x94>
 800bdfa:	2b02      	cmp	r3, #2
 800bdfc:	d007      	beq.n	800be0e <tcp_close_shutdown+0x32>
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d055      	beq.n	800beae <tcp_close_shutdown+0xd2>
      return tcp_close_shutdown_fin(pcb);
 800be02:	4620      	mov	r0, r4
}
 800be04:	b005      	add	sp, #20
 800be06:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return tcp_close_shutdown_fin(pcb);
 800be0a:	f7ff b82f 	b.w	800ae6c <tcp_close_shutdown_fin>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800be0e:	4621      	mov	r1, r4
 800be10:	484d      	ldr	r0, [pc, #308]	@ (800bf48 <tcp_close_shutdown+0x16c>)
 800be12:	f7ff fd91 	bl	800b938 <tcp_pcb_remove>
 800be16:	2101      	movs	r1, #1
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800be18:	7d23      	ldrb	r3, [r4, #20]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800be1a:	4a4c      	ldr	r2, [pc, #304]	@ (800bf4c <tcp_close_shutdown+0x170>)
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800be1c:	428b      	cmp	r3, r1
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800be1e:	7011      	strb	r1, [r2, #0]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800be20:	d065      	beq.n	800beee <tcp_close_shutdown+0x112>
  memp_free(MEMP_TCP_PCB, pcb);
 800be22:	4621      	mov	r1, r4
 800be24:	2001      	movs	r0, #1
 800be26:	f7fe f9db 	bl	800a1e0 <memp_free>
}
 800be2a:	2000      	movs	r0, #0
 800be2c:	b005      	add	sp, #20
 800be2e:	bd30      	pop	{r4, r5, pc}
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800be30:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 800be32:	2a00      	cmp	r2, #0
 800be34:	d048      	beq.n	800bec8 <tcp_close_shutdown+0xec>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800be36:	8b63      	ldrh	r3, [r4, #26]
 800be38:	06db      	lsls	r3, r3, #27
 800be3a:	d56f      	bpl.n	800bf1c <tcp_close_shutdown+0x140>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800be3c:	8b21      	ldrh	r1, [r4, #24]
 800be3e:	1d20      	adds	r0, r4, #4
 800be40:	8ae2      	ldrh	r2, [r4, #22]
 800be42:	4623      	mov	r3, r4
 800be44:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800be48:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800be4a:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800be4c:	9000      	str	r0, [sp, #0]
 800be4e:	4620      	mov	r0, r4
 800be50:	f002 fd04 	bl	800e85c <tcp_rst>
      tcp_pcb_purge(pcb);
 800be54:	4620      	mov	r0, r4
 800be56:	f7ff fa7d 	bl	800b354 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800be5a:	4a3b      	ldr	r2, [pc, #236]	@ (800bf48 <tcp_close_shutdown+0x16c>)
 800be5c:	6813      	ldr	r3, [r2, #0]
 800be5e:	42a3      	cmp	r3, r4
 800be60:	d037      	beq.n	800bed2 <tcp_close_shutdown+0xf6>
 800be62:	2b00      	cmp	r3, #0
 800be64:	d037      	beq.n	800bed6 <tcp_close_shutdown+0xfa>
 800be66:	68da      	ldr	r2, [r3, #12]
 800be68:	42a2      	cmp	r2, r4
 800be6a:	d054      	beq.n	800bf16 <tcp_close_shutdown+0x13a>
 800be6c:	4613      	mov	r3, r2
 800be6e:	e7f8      	b.n	800be62 <tcp_close_shutdown+0x86>
 800be70:	4937      	ldr	r1, [pc, #220]	@ (800bf50 <tcp_close_shutdown+0x174>)
      pcb->listener = NULL;
 800be72:	2000      	movs	r0, #0
 800be74:	f101 050c 	add.w	r5, r1, #12
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800be78:	f851 3f04 	ldr.w	r3, [r1, #4]!
 800be7c:	681b      	ldr	r3, [r3, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800be7e:	b133      	cbz	r3, 800be8e <tcp_close_shutdown+0xb2>
    if (pcb->listener == lpcb) {
 800be80:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800be82:	4294      	cmp	r4, r2
      pcb->listener = NULL;
 800be84:	bf08      	it	eq
 800be86:	67d8      	streq	r0, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800be88:	68db      	ldr	r3, [r3, #12]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d1f8      	bne.n	800be80 <tcp_close_shutdown+0xa4>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800be8e:	428d      	cmp	r5, r1
 800be90:	d1f2      	bne.n	800be78 <tcp_close_shutdown+0x9c>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800be92:	4621      	mov	r1, r4
 800be94:	482f      	ldr	r0, [pc, #188]	@ (800bf54 <tcp_close_shutdown+0x178>)
 800be96:	f7ff fd4f 	bl	800b938 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800be9a:	7d23      	ldrb	r3, [r4, #20]
 800be9c:	2b01      	cmp	r3, #1
 800be9e:	d048      	beq.n	800bf32 <tcp_close_shutdown+0x156>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800bea0:	4621      	mov	r1, r4
 800bea2:	2002      	movs	r0, #2
 800bea4:	f7fe f99c 	bl	800a1e0 <memp_free>
}
 800bea8:	2000      	movs	r0, #0
 800beaa:	b005      	add	sp, #20
 800beac:	bd30      	pop	{r4, r5, pc}
      if (pcb->local_port != 0) {
 800beae:	8ae3      	ldrh	r3, [r4, #22]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d0b6      	beq.n	800be22 <tcp_close_shutdown+0x46>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800beb4:	4a28      	ldr	r2, [pc, #160]	@ (800bf58 <tcp_close_shutdown+0x17c>)
 800beb6:	6813      	ldr	r3, [r2, #0]
 800beb8:	42a3      	cmp	r3, r4
 800beba:	d041      	beq.n	800bf40 <tcp_close_shutdown+0x164>
 800bebc:	b343      	cbz	r3, 800bf10 <tcp_close_shutdown+0x134>
 800bebe:	68da      	ldr	r2, [r3, #12]
 800bec0:	42a2      	cmp	r2, r4
 800bec2:	d023      	beq.n	800bf0c <tcp_close_shutdown+0x130>
 800bec4:	4613      	mov	r3, r2
 800bec6:	e7f9      	b.n	800bebc <tcp_close_shutdown+0xe0>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800bec8:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 800beca:	f5b2 6f06 	cmp.w	r2, #2144	@ 0x860
 800bece:	d096      	beq.n	800bdfe <tcp_close_shutdown+0x22>
 800bed0:	e7b1      	b.n	800be36 <tcp_close_shutdown+0x5a>
      TCP_RMV_ACTIVE(pcb);
 800bed2:	68e3      	ldr	r3, [r4, #12]
 800bed4:	6013      	str	r3, [r2, #0]
      if (tcp_input_pcb == pcb) {
 800bed6:	4b21      	ldr	r3, [pc, #132]	@ (800bf5c <tcp_close_shutdown+0x180>)
      TCP_RMV_ACTIVE(pcb);
 800bed8:	2000      	movs	r0, #0
 800beda:	4a1c      	ldr	r2, [pc, #112]	@ (800bf4c <tcp_close_shutdown+0x170>)
 800bedc:	2101      	movs	r1, #1
      if (tcp_input_pcb == pcb) {
 800bede:	681b      	ldr	r3, [r3, #0]
      TCP_RMV_ACTIVE(pcb);
 800bee0:	60e0      	str	r0, [r4, #12]
      if (tcp_input_pcb == pcb) {
 800bee2:	42a3      	cmp	r3, r4
      TCP_RMV_ACTIVE(pcb);
 800bee4:	7011      	strb	r1, [r2, #0]
      if (tcp_input_pcb == pcb) {
 800bee6:	d021      	beq.n	800bf2c <tcp_close_shutdown+0x150>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800bee8:	7d23      	ldrb	r3, [r4, #20]
 800beea:	2b01      	cmp	r3, #1
 800beec:	d199      	bne.n	800be22 <tcp_close_shutdown+0x46>
 800beee:	4b1c      	ldr	r3, [pc, #112]	@ (800bf60 <tcp_close_shutdown+0x184>)
 800bef0:	22d4      	movs	r2, #212	@ 0xd4
 800bef2:	491c      	ldr	r1, [pc, #112]	@ (800bf64 <tcp_close_shutdown+0x188>)
 800bef4:	481c      	ldr	r0, [pc, #112]	@ (800bf68 <tcp_close_shutdown+0x18c>)
 800bef6:	f005 facf 	bl	8011498 <iprintf>
 800befa:	e792      	b.n	800be22 <tcp_close_shutdown+0x46>
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800befc:	4b18      	ldr	r3, [pc, #96]	@ (800bf60 <tcp_close_shutdown+0x184>)
 800befe:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800bf02:	491a      	ldr	r1, [pc, #104]	@ (800bf6c <tcp_close_shutdown+0x190>)
 800bf04:	4818      	ldr	r0, [pc, #96]	@ (800bf68 <tcp_close_shutdown+0x18c>)
 800bf06:	f005 fac7 	bl	8011498 <iprintf>
 800bf0a:	e76e      	b.n	800bdea <tcp_close_shutdown+0xe>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800bf0c:	68e2      	ldr	r2, [r4, #12]
 800bf0e:	60da      	str	r2, [r3, #12]
 800bf10:	2300      	movs	r3, #0
 800bf12:	60e3      	str	r3, [r4, #12]
      tcp_free(pcb);
 800bf14:	e785      	b.n	800be22 <tcp_close_shutdown+0x46>
      TCP_RMV_ACTIVE(pcb);
 800bf16:	68e2      	ldr	r2, [r4, #12]
 800bf18:	60da      	str	r2, [r3, #12]
 800bf1a:	e7dc      	b.n	800bed6 <tcp_close_shutdown+0xfa>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800bf1c:	4b10      	ldr	r3, [pc, #64]	@ (800bf60 <tcp_close_shutdown+0x184>)
 800bf1e:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800bf22:	4913      	ldr	r1, [pc, #76]	@ (800bf70 <tcp_close_shutdown+0x194>)
 800bf24:	4810      	ldr	r0, [pc, #64]	@ (800bf68 <tcp_close_shutdown+0x18c>)
 800bf26:	f005 fab7 	bl	8011498 <iprintf>
 800bf2a:	e787      	b.n	800be3c <tcp_close_shutdown+0x60>
        tcp_trigger_input_pcb_close();
 800bf2c:	f001 fd9e 	bl	800da6c <tcp_trigger_input_pcb_close>
 800bf30:	e77b      	b.n	800be2a <tcp_close_shutdown+0x4e>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800bf32:	4b0b      	ldr	r3, [pc, #44]	@ (800bf60 <tcp_close_shutdown+0x184>)
 800bf34:	22df      	movs	r2, #223	@ 0xdf
 800bf36:	490f      	ldr	r1, [pc, #60]	@ (800bf74 <tcp_close_shutdown+0x198>)
 800bf38:	480b      	ldr	r0, [pc, #44]	@ (800bf68 <tcp_close_shutdown+0x18c>)
 800bf3a:	f005 faad 	bl	8011498 <iprintf>
 800bf3e:	e7af      	b.n	800bea0 <tcp_close_shutdown+0xc4>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800bf40:	68e3      	ldr	r3, [r4, #12]
 800bf42:	6013      	str	r3, [r2, #0]
 800bf44:	e7e4      	b.n	800bf10 <tcp_close_shutdown+0x134>
 800bf46:	bf00      	nop
 800bf48:	24009cfc 	.word	0x24009cfc
 800bf4c:	24009cf7 	.word	0x24009cf7
 800bf50:	08013d24 	.word	0x08013d24
 800bf54:	24009d00 	.word	0x24009d00
 800bf58:	24009d04 	.word	0x24009d04
 800bf5c:	24009d0c 	.word	0x24009d0c
 800bf60:	080136b8 	.word	0x080136b8
 800bf64:	080136f4 	.word	0x080136f4
 800bf68:	0801241c 	.word	0x0801241c
 800bf6c:	08013c10 	.word	0x08013c10
 800bf70:	08013c30 	.word	0x08013c30
 800bf74:	08013c4c 	.word	0x08013c4c

0800bf78 <tcp_close>:
{
 800bf78:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800bf7a:	b158      	cbz	r0, 800bf94 <tcp_close+0x1c>
  if (pcb->state != LISTEN) {
 800bf7c:	7d03      	ldrb	r3, [r0, #20]
 800bf7e:	2b01      	cmp	r3, #1
 800bf80:	d003      	beq.n	800bf8a <tcp_close+0x12>
    tcp_set_flags(pcb, TF_RXCLOSED);
 800bf82:	8b43      	ldrh	r3, [r0, #26]
 800bf84:	f043 0310 	orr.w	r3, r3, #16
 800bf88:	8343      	strh	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 800bf8a:	2101      	movs	r1, #1
}
 800bf8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return tcp_close_shutdown(pcb, 1);
 800bf90:	f7ff bf24 	b.w	800bddc <tcp_close_shutdown>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800bf94:	4b04      	ldr	r3, [pc, #16]	@ (800bfa8 <tcp_close+0x30>)
 800bf96:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800bf9a:	4904      	ldr	r1, [pc, #16]	@ (800bfac <tcp_close+0x34>)
 800bf9c:	4804      	ldr	r0, [pc, #16]	@ (800bfb0 <tcp_close+0x38>)
 800bf9e:	f005 fa7b 	bl	8011498 <iprintf>
}
 800bfa2:	f06f 000f 	mvn.w	r0, #15
 800bfa6:	bd08      	pop	{r3, pc}
 800bfa8:	080136b8 	.word	0x080136b8
 800bfac:	08013c68 	.word	0x08013c68
 800bfb0:	0801241c 	.word	0x0801241c

0800bfb4 <tcp_shutdown>:
{
 800bfb4:	b538      	push	{r3, r4, r5, lr}
  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800bfb6:	b338      	cbz	r0, 800c008 <tcp_shutdown+0x54>
  if (pcb->state == LISTEN) {
 800bfb8:	7d03      	ldrb	r3, [r0, #20]
 800bfba:	4604      	mov	r4, r0
 800bfbc:	2b01      	cmp	r3, #1
 800bfbe:	d013      	beq.n	800bfe8 <tcp_shutdown+0x34>
  if (shut_rx) {
 800bfc0:	4615      	mov	r5, r2
 800bfc2:	b159      	cbz	r1, 800bfdc <tcp_shutdown+0x28>
    tcp_set_flags(pcb, TF_RXCLOSED);
 800bfc4:	8b43      	ldrh	r3, [r0, #26]
 800bfc6:	f043 0310 	orr.w	r3, r3, #16
 800bfca:	8343      	strh	r3, [r0, #26]
    if (shut_tx) {
 800bfcc:	b9ba      	cbnz	r2, 800bffe <tcp_shutdown+0x4a>
    if (pcb->refused_data != NULL) {
 800bfce:	6f80      	ldr	r0, [r0, #120]	@ 0x78
 800bfd0:	b110      	cbz	r0, 800bfd8 <tcp_shutdown+0x24>
      pbuf_free(pcb->refused_data);
 800bfd2:	f7fe fbd5 	bl	800a780 <pbuf_free>
      pcb->refused_data = NULL;
 800bfd6:	67a5      	str	r5, [r4, #120]	@ 0x78
  return ERR_OK;
 800bfd8:	2000      	movs	r0, #0
}
 800bfda:	bd38      	pop	{r3, r4, r5, pc}
  if (shut_tx) {
 800bfdc:	2a00      	cmp	r2, #0
 800bfde:	d0fb      	beq.n	800bfd8 <tcp_shutdown+0x24>
    switch (pcb->state) {
 800bfe0:	2b04      	cmp	r3, #4
 800bfe2:	d804      	bhi.n	800bfee <tcp_shutdown+0x3a>
 800bfe4:	2b02      	cmp	r3, #2
 800bfe6:	d804      	bhi.n	800bff2 <tcp_shutdown+0x3e>
 800bfe8:	f06f 000a 	mvn.w	r0, #10
}
 800bfec:	bd38      	pop	{r3, r4, r5, pc}
    switch (pcb->state) {
 800bfee:	2b07      	cmp	r3, #7
 800bff0:	d1fa      	bne.n	800bfe8 <tcp_shutdown+0x34>
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800bff2:	4620      	mov	r0, r4
 800bff4:	2100      	movs	r1, #0
}
 800bff6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800bffa:	f7ff beef 	b.w	800bddc <tcp_close_shutdown>
      return tcp_close_shutdown(pcb, 1);
 800bffe:	2101      	movs	r1, #1
}
 800c000:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      return tcp_close_shutdown(pcb, 1);
 800c004:	f7ff beea 	b.w	800bddc <tcp_close_shutdown>
  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800c008:	4b04      	ldr	r3, [pc, #16]	@ (800c01c <tcp_shutdown+0x68>)
 800c00a:	f240 2207 	movw	r2, #519	@ 0x207
 800c00e:	4904      	ldr	r1, [pc, #16]	@ (800c020 <tcp_shutdown+0x6c>)
 800c010:	4804      	ldr	r0, [pc, #16]	@ (800c024 <tcp_shutdown+0x70>)
 800c012:	f005 fa41 	bl	8011498 <iprintf>
 800c016:	f06f 000f 	mvn.w	r0, #15
}
 800c01a:	bd38      	pop	{r3, r4, r5, pc}
 800c01c:	080136b8 	.word	0x080136b8
 800c020:	08013c80 	.word	0x08013c80
 800c024:	0801241c 	.word	0x0801241c

0800c028 <tcp_recv_null>:
{
 800c028:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800c02a:	b1c1      	cbz	r1, 800c05e <tcp_recv_null+0x36>
  if (p != NULL) {
 800c02c:	4614      	mov	r4, r2
 800c02e:	4608      	mov	r0, r1
 800c030:	b13a      	cbz	r2, 800c042 <tcp_recv_null+0x1a>
    tcp_recved(pcb, p->tot_len);
 800c032:	8911      	ldrh	r1, [r2, #8]
 800c034:	f7ff f88c 	bl	800b150 <tcp_recved>
    pbuf_free(p);
 800c038:	4620      	mov	r0, r4
 800c03a:	f7fe fba1 	bl	800a780 <pbuf_free>
  return ERR_OK;
 800c03e:	2000      	movs	r0, #0
}
 800c040:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 800c042:	2b00      	cmp	r3, #0
 800c044:	d1fb      	bne.n	800c03e <tcp_recv_null+0x16>
  if (pcb->state != LISTEN) {
 800c046:	7d0b      	ldrb	r3, [r1, #20]
 800c048:	2b01      	cmp	r3, #1
 800c04a:	d003      	beq.n	800c054 <tcp_recv_null+0x2c>
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c04c:	8b4b      	ldrh	r3, [r1, #26]
 800c04e:	f043 0310 	orr.w	r3, r3, #16
 800c052:	834b      	strh	r3, [r1, #26]
  return tcp_close_shutdown(pcb, 1);
 800c054:	2101      	movs	r1, #1
}
 800c056:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return tcp_close_shutdown(pcb, 1);
 800c05a:	f7ff bebf 	b.w	800bddc <tcp_close_shutdown>
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800c05e:	4b05      	ldr	r3, [pc, #20]	@ (800c074 <tcp_recv_null+0x4c>)
 800c060:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800c064:	4904      	ldr	r1, [pc, #16]	@ (800c078 <tcp_recv_null+0x50>)
 800c066:	4805      	ldr	r0, [pc, #20]	@ (800c07c <tcp_recv_null+0x54>)
 800c068:	f005 fa16 	bl	8011498 <iprintf>
 800c06c:	f06f 000f 	mvn.w	r0, #15
}
 800c070:	bd10      	pop	{r4, pc}
 800c072:	bf00      	nop
 800c074:	080136b8 	.word	0x080136b8
 800c078:	08013c9c 	.word	0x08013c9c
 800c07c:	0801241c 	.word	0x0801241c

0800c080 <tcp_process_refused_data>:
{
 800c080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800c082:	b378      	cbz	r0, 800c0e4 <tcp_process_refused_data+0x64>
    u8_t refused_flags = pcb->refused_data->flags;
 800c084:	6f85      	ldr	r5, [r0, #120]	@ 0x78
    pcb->refused_data = NULL;
 800c086:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800c088:	f8d0 6084 	ldr.w	r6, [r0, #132]	@ 0x84
 800c08c:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 800c08e:	7b6f      	ldrb	r7, [r5, #13]
    pcb->refused_data = NULL;
 800c090:	6783      	str	r3, [r0, #120]	@ 0x78
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800c092:	b156      	cbz	r6, 800c0aa <tcp_process_refused_data+0x2a>
 800c094:	4601      	mov	r1, r0
 800c096:	462a      	mov	r2, r5
 800c098:	6900      	ldr	r0, [r0, #16]
 800c09a:	47b0      	blx	r6
    if (err == ERR_OK) {
 800c09c:	b158      	cbz	r0, 800c0b6 <tcp_process_refused_data+0x36>
    } else if (err == ERR_ABRT) {
 800c09e:	300d      	adds	r0, #13
 800c0a0:	d01d      	beq.n	800c0de <tcp_process_refused_data+0x5e>
      return ERR_INPROGRESS;
 800c0a2:	f06f 0004 	mvn.w	r0, #4
      pcb->refused_data = refused_data;
 800c0a6:	67a5      	str	r5, [r4, #120]	@ 0x78
}
 800c0a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tcp_recved(pcb, p->tot_len);
 800c0aa:	8929      	ldrh	r1, [r5, #8]
 800c0ac:	f7ff f850 	bl	800b150 <tcp_recved>
    pbuf_free(p);
 800c0b0:	4628      	mov	r0, r5
 800c0b2:	f7fe fb65 	bl	800a780 <pbuf_free>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800c0b6:	06bb      	lsls	r3, r7, #26
 800c0b8:	d50f      	bpl.n	800c0da <tcp_process_refused_data+0x5a>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c0ba:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800c0bc:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800c0c0:	d001      	beq.n	800c0c6 <tcp_process_refused_data+0x46>
          pcb->rcv_wnd++;
 800c0c2:	3301      	adds	r3, #1
 800c0c4:	8523      	strh	r3, [r4, #40]	@ 0x28
        TCP_EVENT_CLOSED(pcb, err);
 800c0c6:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
 800c0ca:	b135      	cbz	r5, 800c0da <tcp_process_refused_data+0x5a>
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	4621      	mov	r1, r4
 800c0d0:	6920      	ldr	r0, [r4, #16]
 800c0d2:	461a      	mov	r2, r3
 800c0d4:	47a8      	blx	r5
        if (err == ERR_ABRT) {
 800c0d6:	300d      	adds	r0, #13
 800c0d8:	d001      	beq.n	800c0de <tcp_process_refused_data+0x5e>
  return ERR_OK;
 800c0da:	2000      	movs	r0, #0
}
 800c0dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          return ERR_ABRT;
 800c0de:	f06f 000c 	mvn.w	r0, #12
}
 800c0e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800c0e4:	4b04      	ldr	r3, [pc, #16]	@ (800c0f8 <tcp_process_refused_data+0x78>)
 800c0e6:	f240 6209 	movw	r2, #1545	@ 0x609
 800c0ea:	4904      	ldr	r1, [pc, #16]	@ (800c0fc <tcp_process_refused_data+0x7c>)
 800c0ec:	4804      	ldr	r0, [pc, #16]	@ (800c100 <tcp_process_refused_data+0x80>)
 800c0ee:	f005 f9d3 	bl	8011498 <iprintf>
 800c0f2:	f06f 000f 	mvn.w	r0, #15
}
 800c0f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0f8:	080136b8 	.word	0x080136b8
 800c0fc:	08013cb8 	.word	0x08013cb8
 800c100:	0801241c 	.word	0x0801241c

0800c104 <tcp_fasttmr>:
{
 800c104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ++tcp_timer_ctr;
 800c108:	4d1c      	ldr	r5, [pc, #112]	@ (800c17c <tcp_fasttmr+0x78>)
        tcp_active_pcbs_changed = 0;
 800c10a:	2700      	movs	r7, #0
 800c10c:	f8df 8074 	ldr.w	r8, [pc, #116]	@ 800c184 <tcp_fasttmr+0x80>
  ++tcp_timer_ctr;
 800c110:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 800c112:	4e1b      	ldr	r6, [pc, #108]	@ (800c180 <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 800c114:	3301      	adds	r3, #1
 800c116:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 800c118:	f8d8 4000 	ldr.w	r4, [r8]
  while (pcb != NULL) {
 800c11c:	b1b4      	cbz	r4, 800c14c <tcp_fasttmr+0x48>
    if (pcb->last_timer != tcp_timer_ctr) {
 800c11e:	7fa3      	ldrb	r3, [r4, #30]
 800c120:	782a      	ldrb	r2, [r5, #0]
 800c122:	4293      	cmp	r3, r2
 800c124:	d014      	beq.n	800c150 <tcp_fasttmr+0x4c>
      if (pcb->flags & TF_ACK_DELAY) {
 800c126:	8b63      	ldrh	r3, [r4, #26]
      pcb->last_timer = tcp_timer_ctr;
 800c128:	77a2      	strb	r2, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 800c12a:	07d9      	lsls	r1, r3, #31
 800c12c:	d419      	bmi.n	800c162 <tcp_fasttmr+0x5e>
      if (pcb->flags & TF_CLOSEPEND) {
 800c12e:	071a      	lsls	r2, r3, #28
 800c130:	d410      	bmi.n	800c154 <tcp_fasttmr+0x50>
      if (pcb->refused_data != NULL) {
 800c132:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
        tcp_process_refused_data(pcb);
 800c134:	4620      	mov	r0, r4
      next = pcb->next;
 800c136:	68e4      	ldr	r4, [r4, #12]
      if (pcb->refused_data != NULL) {
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d0ef      	beq.n	800c11c <tcp_fasttmr+0x18>
        tcp_active_pcbs_changed = 0;
 800c13c:	7037      	strb	r7, [r6, #0]
        tcp_process_refused_data(pcb);
 800c13e:	f7ff ff9f 	bl	800c080 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800c142:	7833      	ldrb	r3, [r6, #0]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d1e7      	bne.n	800c118 <tcp_fasttmr+0x14>
  while (pcb != NULL) {
 800c148:	2c00      	cmp	r4, #0
 800c14a:	d1e8      	bne.n	800c11e <tcp_fasttmr+0x1a>
}
 800c14c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pcb = pcb->next;
 800c150:	68e4      	ldr	r4, [r4, #12]
 800c152:	e7e3      	b.n	800c11c <tcp_fasttmr+0x18>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c154:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
 800c158:	4620      	mov	r0, r4
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c15a:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 800c15c:	f7fe fe86 	bl	800ae6c <tcp_close_shutdown_fin>
 800c160:	e7e7      	b.n	800c132 <tcp_fasttmr+0x2e>
        tcp_ack_now(pcb);
 800c162:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 800c166:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 800c168:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 800c16a:	f002 fbf1 	bl	800e950 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c16e:	8b63      	ldrh	r3, [r4, #26]
 800c170:	f023 0303 	bic.w	r3, r3, #3
 800c174:	b29b      	uxth	r3, r3
 800c176:	8363      	strh	r3, [r4, #26]
 800c178:	e7d9      	b.n	800c12e <tcp_fasttmr+0x2a>
 800c17a:	bf00      	nop
 800c17c:	24009cf5 	.word	0x24009cf5
 800c180:	24009cf7 	.word	0x24009cf7
 800c184:	24009cfc 	.word	0x24009cfc

0800c188 <tcp_tmr>:
{
 800c188:	b508      	push	{r3, lr}
  tcp_fasttmr();
 800c18a:	f7ff ffbb 	bl	800c104 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 800c18e:	4a06      	ldr	r2, [pc, #24]	@ (800c1a8 <tcp_tmr+0x20>)
 800c190:	7813      	ldrb	r3, [r2, #0]
 800c192:	3301      	adds	r3, #1
 800c194:	b2db      	uxtb	r3, r3
 800c196:	7013      	strb	r3, [r2, #0]
 800c198:	07db      	lsls	r3, r3, #31
 800c19a:	d400      	bmi.n	800c19e <tcp_tmr+0x16>
}
 800c19c:	bd08      	pop	{r3, pc}
 800c19e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 800c1a2:	f7ff b929 	b.w	800b3f8 <tcp_slowtmr>
 800c1a6:	bf00      	nop
 800c1a8:	24009cf6 	.word	0x24009cf6

0800c1ac <tcp_next_iss>:
{
 800c1ac:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800c1ae:	b130      	cbz	r0, 800c1be <tcp_next_iss+0x12>
  iss += tcp_ticks;       /* XXX */
 800c1b0:	4b07      	ldr	r3, [pc, #28]	@ (800c1d0 <tcp_next_iss+0x24>)
 800c1b2:	4a08      	ldr	r2, [pc, #32]	@ (800c1d4 <tcp_next_iss+0x28>)
 800c1b4:	6818      	ldr	r0, [r3, #0]
 800c1b6:	6812      	ldr	r2, [r2, #0]
 800c1b8:	4410      	add	r0, r2
 800c1ba:	6018      	str	r0, [r3, #0]
}
 800c1bc:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800c1be:	4b06      	ldr	r3, [pc, #24]	@ (800c1d8 <tcp_next_iss+0x2c>)
 800c1c0:	f640 02af 	movw	r2, #2223	@ 0x8af
 800c1c4:	4905      	ldr	r1, [pc, #20]	@ (800c1dc <tcp_next_iss+0x30>)
 800c1c6:	4806      	ldr	r0, [pc, #24]	@ (800c1e0 <tcp_next_iss+0x34>)
 800c1c8:	f005 f966 	bl	8011498 <iprintf>
 800c1cc:	e7f0      	b.n	800c1b0 <tcp_next_iss+0x4>
 800c1ce:	bf00      	nop
 800c1d0:	24000028 	.word	0x24000028
 800c1d4:	24009d08 	.word	0x24009d08
 800c1d8:	080136b8 	.word	0x080136b8
 800c1dc:	08013ce0 	.word	0x08013ce0
 800c1e0:	0801241c 	.word	0x0801241c

0800c1e4 <tcp_eff_send_mss_netif>:
{
 800c1e4:	b538      	push	{r3, r4, r5, lr}
 800c1e6:	4605      	mov	r5, r0
 800c1e8:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800c1ea:	b162      	cbz	r2, 800c206 <tcp_eff_send_mss_netif+0x22>
    if (outif == NULL) {
 800c1ec:	b14c      	cbz	r4, 800c202 <tcp_eff_send_mss_netif+0x1e>
    mtu = outif->mtu;
 800c1ee:	8ca3      	ldrh	r3, [r4, #36]	@ 0x24
  if (mtu != 0) {
 800c1f0:	b13b      	cbz	r3, 800c202 <tcp_eff_send_mss_netif+0x1e>
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800c1f2:	2b28      	cmp	r3, #40	@ 0x28
 800c1f4:	bf38      	it	cc
 800c1f6:	2328      	movcc	r3, #40	@ 0x28
 800c1f8:	3b28      	subs	r3, #40	@ 0x28
    sendmss = LWIP_MIN(sendmss, mss_s);
 800c1fa:	b29b      	uxth	r3, r3
 800c1fc:	429d      	cmp	r5, r3
 800c1fe:	bf28      	it	cs
 800c200:	461d      	movcs	r5, r3
}
 800c202:	4628      	mov	r0, r5
 800c204:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800c206:	4b04      	ldr	r3, [pc, #16]	@ (800c218 <tcp_eff_send_mss_netif+0x34>)
 800c208:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800c20c:	4903      	ldr	r1, [pc, #12]	@ (800c21c <tcp_eff_send_mss_netif+0x38>)
 800c20e:	4804      	ldr	r0, [pc, #16]	@ (800c220 <tcp_eff_send_mss_netif+0x3c>)
 800c210:	f005 f942 	bl	8011498 <iprintf>
 800c214:	e7ea      	b.n	800c1ec <tcp_eff_send_mss_netif+0x8>
 800c216:	bf00      	nop
 800c218:	080136b8 	.word	0x080136b8
 800c21c:	08013cfc 	.word	0x08013cfc
 800c220:	0801241c 	.word	0x0801241c

0800c224 <tcp_netif_ip_addr_changed>:
  if (!ip_addr_isany(old_addr)) {
 800c224:	b308      	cbz	r0, 800c26a <tcp_netif_ip_addr_changed+0x46>
{
 800c226:	b538      	push	{r3, r4, r5, lr}
  if (!ip_addr_isany(old_addr)) {
 800c228:	6803      	ldr	r3, [r0, #0]
 800c22a:	4604      	mov	r4, r0
 800c22c:	b903      	cbnz	r3, 800c230 <tcp_netif_ip_addr_changed+0xc>
}
 800c22e:	bd38      	pop	{r3, r4, r5, pc}
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800c230:	4b0e      	ldr	r3, [pc, #56]	@ (800c26c <tcp_netif_ip_addr_changed+0x48>)
 800c232:	460d      	mov	r5, r1
 800c234:	6819      	ldr	r1, [r3, #0]
 800c236:	f7ff fce3 	bl	800bc00 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800c23a:	4b0d      	ldr	r3, [pc, #52]	@ (800c270 <tcp_netif_ip_addr_changed+0x4c>)
 800c23c:	4620      	mov	r0, r4
 800c23e:	6819      	ldr	r1, [r3, #0]
 800c240:	f7ff fcde 	bl	800bc00 <tcp_netif_ip_addr_changed_pcblist>
    if (!ip_addr_isany(new_addr)) {
 800c244:	2d00      	cmp	r5, #0
 800c246:	d0f2      	beq.n	800c22e <tcp_netif_ip_addr_changed+0xa>
 800c248:	682b      	ldr	r3, [r5, #0]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d0ef      	beq.n	800c22e <tcp_netif_ip_addr_changed+0xa>
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c24e:	4b09      	ldr	r3, [pc, #36]	@ (800c274 <tcp_netif_ip_addr_changed+0x50>)
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d0eb      	beq.n	800c22e <tcp_netif_ip_addr_changed+0xa>
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800c256:	6819      	ldr	r1, [r3, #0]
 800c258:	6822      	ldr	r2, [r4, #0]
 800c25a:	4291      	cmp	r1, r2
 800c25c:	d101      	bne.n	800c262 <tcp_netif_ip_addr_changed+0x3e>
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800c25e:	682a      	ldr	r2, [r5, #0]
 800c260:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c262:	68db      	ldr	r3, [r3, #12]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d1f6      	bne.n	800c256 <tcp_netif_ip_addr_changed+0x32>
}
 800c268:	bd38      	pop	{r3, r4, r5, pc}
 800c26a:	4770      	bx	lr
 800c26c:	24009cfc 	.word	0x24009cfc
 800c270:	24009d04 	.word	0x24009d04
 800c274:	24009d00 	.word	0x24009d00

0800c278 <tcp_free_ooseq>:
{
 800c278:	b570      	push	{r4, r5, r6, lr}
  if (pcb->ooseq) {
 800c27a:	6f44      	ldr	r4, [r0, #116]	@ 0x74
 800c27c:	b16c      	cbz	r4, 800c29a <tcp_free_ooseq+0x22>
 800c27e:	4606      	mov	r6, r0
      pbuf_free(seg->p);
 800c280:	4625      	mov	r5, r4
    struct tcp_seg *next = seg->next;
 800c282:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800c284:	6868      	ldr	r0, [r5, #4]
 800c286:	b108      	cbz	r0, 800c28c <tcp_free_ooseq+0x14>
      pbuf_free(seg->p);
 800c288:	f7fe fa7a 	bl	800a780 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800c28c:	4629      	mov	r1, r5
 800c28e:	2003      	movs	r0, #3
 800c290:	f7fd ffa6 	bl	800a1e0 <memp_free>
  while (seg != NULL) {
 800c294:	2c00      	cmp	r4, #0
 800c296:	d1f3      	bne.n	800c280 <tcp_free_ooseq+0x8>
    pcb->ooseq = NULL;
 800c298:	6774      	str	r4, [r6, #116]	@ 0x74
}
 800c29a:	bd70      	pop	{r4, r5, r6, pc}

0800c29c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800c29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800c29e:	4605      	mov	r5, r0
{
 800c2a0:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800c2a2:	2800      	cmp	r0, #0
 800c2a4:	d035      	beq.n	800c312 <tcp_oos_insert_segment+0x76>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c2a6:	68eb      	ldr	r3, [r5, #12]
 800c2a8:	8998      	ldrh	r0, [r3, #12]
 800c2aa:	f7fd fbb3 	bl	8009a14 <lwip_htons>
 800c2ae:	07c2      	lsls	r2, r0, #31
 800c2b0:	d429      	bmi.n	800c306 <tcp_oos_insert_segment+0x6a>
 800c2b2:	4e1c      	ldr	r6, [pc, #112]	@ (800c324 <tcp_oos_insert_segment+0x88>)
 800c2b4:	e005      	b.n	800c2c2 <tcp_oos_insert_segment+0x26>
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
      }
      old_seg = next;
      next = next->next;
 800c2b6:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 800c2b8:	4620      	mov	r0, r4
 800c2ba:	f7fe ff95 	bl	800b1e8 <tcp_seg_free>
      next = next->next;
 800c2be:	463c      	mov	r4, r7
    while (next &&
 800c2c0:	b327      	cbz	r7, 800c30c <tcp_oos_insert_segment+0x70>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800c2c2:	68e1      	ldr	r1, [r4, #12]
 800c2c4:	892b      	ldrh	r3, [r5, #8]
 800c2c6:	6837      	ldr	r7, [r6, #0]
 800c2c8:	6848      	ldr	r0, [r1, #4]
 800c2ca:	443b      	add	r3, r7
 800c2cc:	8922      	ldrh	r2, [r4, #8]
 800c2ce:	1a1b      	subs	r3, r3, r0
 800c2d0:	1a9a      	subs	r2, r3, r2
    while (next &&
 800c2d2:	2a00      	cmp	r2, #0
 800c2d4:	db0d      	blt.n	800c2f2 <tcp_oos_insert_segment+0x56>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c2d6:	8988      	ldrh	r0, [r1, #12]
 800c2d8:	f7fd fb9c 	bl	8009a14 <lwip_htons>
 800c2dc:	07c3      	lsls	r3, r0, #31
 800c2de:	d5ea      	bpl.n	800c2b6 <tcp_oos_insert_segment+0x1a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800c2e0:	68eb      	ldr	r3, [r5, #12]
 800c2e2:	2001      	movs	r0, #1
 800c2e4:	899f      	ldrh	r7, [r3, #12]
 800c2e6:	f7fd fb95 	bl	8009a14 <lwip_htons>
 800c2ea:	68eb      	ldr	r3, [r5, #12]
 800c2ec:	4307      	orrs	r7, r0
 800c2ee:	819f      	strh	r7, [r3, #12]
 800c2f0:	e7e1      	b.n	800c2b6 <tcp_oos_insert_segment+0x1a>
    }
    if (next &&
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	dd05      	ble.n	800c302 <tcp_oos_insert_segment+0x66>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800c2f6:	1bc1      	subs	r1, r0, r7
      pbuf_realloc(cseg->p, cseg->len);
 800c2f8:	6868      	ldr	r0, [r5, #4]
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800c2fa:	b289      	uxth	r1, r1
 800c2fc:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800c2fe:	f7fe fb53 	bl	800a9a8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800c302:	602c      	str	r4, [r5, #0]
}
 800c304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tcp_segs_free(next);
 800c306:	4620      	mov	r0, r4
 800c308:	f7fe ff5c 	bl	800b1c4 <tcp_segs_free>
    next = NULL;
 800c30c:	2400      	movs	r4, #0
  cseg->next = next;
 800c30e:	602c      	str	r4, [r5, #0]
}
 800c310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800c312:	4b05      	ldr	r3, [pc, #20]	@ (800c328 <tcp_oos_insert_segment+0x8c>)
 800c314:	f240 421f 	movw	r2, #1055	@ 0x41f
 800c318:	4904      	ldr	r1, [pc, #16]	@ (800c32c <tcp_oos_insert_segment+0x90>)
 800c31a:	4805      	ldr	r0, [pc, #20]	@ (800c330 <tcp_oos_insert_segment+0x94>)
 800c31c:	f005 f8bc 	bl	8011498 <iprintf>
 800c320:	e7c1      	b.n	800c2a6 <tcp_oos_insert_segment+0xa>
 800c322:	bf00      	nop
 800c324:	24009d20 	.word	0x24009d20
 800c328:	08013d4c 	.word	0x08013d4c
 800c32c:	08013d80 	.word	0x08013d80
 800c330:	0801241c 	.word	0x0801241c

0800c334 <tcp_input_delayed_close>:
  if (recv_flags & TF_CLOSED) {
 800c334:	4b0d      	ldr	r3, [pc, #52]	@ (800c36c <tcp_input_delayed_close+0x38>)
{
 800c336:	b510      	push	{r4, lr}
  if (recv_flags & TF_CLOSED) {
 800c338:	781b      	ldrb	r3, [r3, #0]
{
 800c33a:	4604      	mov	r4, r0
  if (recv_flags & TF_CLOSED) {
 800c33c:	f013 0010 	ands.w	r0, r3, #16
 800c340:	d100      	bne.n	800c344 <tcp_input_delayed_close+0x10>
}
 800c342:	bd10      	pop	{r4, pc}
    if (!(pcb->flags & TF_RXCLOSED)) {
 800c344:	8b63      	ldrh	r3, [r4, #26]
 800c346:	06db      	lsls	r3, r3, #27
 800c348:	d406      	bmi.n	800c358 <tcp_input_delayed_close+0x24>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800c34a:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800c34e:	b11b      	cbz	r3, 800c358 <tcp_input_delayed_close+0x24>
 800c350:	f06f 010e 	mvn.w	r1, #14
 800c354:	6920      	ldr	r0, [r4, #16]
 800c356:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c358:	4621      	mov	r1, r4
 800c35a:	4805      	ldr	r0, [pc, #20]	@ (800c370 <tcp_input_delayed_close+0x3c>)
 800c35c:	f7ff faec 	bl	800b938 <tcp_pcb_remove>
    tcp_free(pcb);
 800c360:	4620      	mov	r0, r4
 800c362:	f7fe fdc1 	bl	800aee8 <tcp_free>
 800c366:	2001      	movs	r0, #1
}
 800c368:	bd10      	pop	{r4, pc}
 800c36a:	bf00      	nop
 800c36c:	24009d14 	.word	0x24009d14
 800c370:	24009cfc 	.word	0x24009cfc

0800c374 <tcp_free_acked_segments.constprop.0>:
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800c374:	2900      	cmp	r1, #0
 800c376:	d054      	beq.n	800c422 <tcp_free_acked_segments.constprop.0+0xae>
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 800c378:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c37c:	4682      	mov	sl, r0
 800c37e:	460d      	mov	r5, r1
 800c380:	4690      	mov	r8, r2
 800c382:	4e29      	ldr	r6, [pc, #164]	@ (800c428 <tcp_free_acked_segments.constprop.0+0xb4>)
    seg_list = seg_list->next;

    clen = pbuf_clen(next->p);
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800c384:	f8df 90ac 	ldr.w	r9, [pc, #172]	@ 800c434 <tcp_free_acked_segments.constprop.0+0xc0>
 800c388:	4f28      	ldr	r7, [pc, #160]	@ (800c42c <tcp_free_acked_segments.constprop.0+0xb8>)
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800c38a:	68eb      	ldr	r3, [r5, #12]
 800c38c:	6858      	ldr	r0, [r3, #4]
 800c38e:	f7fd fb45 	bl	8009a1c <lwip_htonl>
 800c392:	68eb      	ldr	r3, [r5, #12]
 800c394:	4604      	mov	r4, r0
 800c396:	f8b5 b008 	ldrh.w	fp, [r5, #8]
 800c39a:	8998      	ldrh	r0, [r3, #12]
 800c39c:	f7fd fb3a 	bl	8009a14 <lwip_htons>
 800c3a0:	6833      	ldr	r3, [r6, #0]
 800c3a2:	f010 0003 	ands.w	r0, r0, #3
 800c3a6:	eba4 0403 	sub.w	r4, r4, r3
 800c3aa:	bf18      	it	ne
 800c3ac:	2001      	movne	r0, #1
 800c3ae:	445c      	add	r4, fp
 800c3b0:	4404      	add	r4, r0
  while (seg_list != NULL &&
 800c3b2:	2c00      	cmp	r4, #0
 800c3b4:	dc32      	bgt.n	800c41c <tcp_free_acked_segments.constprop.0+0xa8>
    seg_list = seg_list->next;
 800c3b6:	e9d5 b000 	ldrd	fp, r0, [r5]
    clen = pbuf_clen(next->p);
 800c3ba:	f7fe fb6f 	bl	800aa9c <pbuf_clen>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800c3be:	f8ba 3066 	ldrh.w	r3, [sl, #102]	@ 0x66
    clen = pbuf_clen(next->p);
 800c3c2:	4604      	mov	r4, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800c3c4:	4298      	cmp	r0, r3
 800c3c6:	d81f      	bhi.n	800c408 <tcp_free_acked_segments.constprop.0+0x94>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800c3c8:	4919      	ldr	r1, [pc, #100]	@ (800c430 <tcp_free_acked_segments.constprop.0+0xbc>)
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800c3ca:	1b1b      	subs	r3, r3, r4
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800c3cc:	892a      	ldrh	r2, [r5, #8]
    tcp_seg_free(next);
 800c3ce:	4628      	mov	r0, r5
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800c3d0:	880c      	ldrh	r4, [r1, #0]
 800c3d2:	465d      	mov	r5, fp
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800c3d4:	f8aa 3066 	strh.w	r3, [sl, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800c3d8:	1913      	adds	r3, r2, r4
 800c3da:	800b      	strh	r3, [r1, #0]
    tcp_seg_free(next);
 800c3dc:	f7fe ff04 	bl	800b1e8 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800c3e0:	f8ba 3066 	ldrh.w	r3, [sl, #102]	@ 0x66
 800c3e4:	b113      	cbz	r3, 800c3ec <tcp_free_acked_segments.constprop.0+0x78>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800c3e6:	ea58 030b 	orrs.w	r3, r8, fp
 800c3ea:	d003      	beq.n	800c3f4 <tcp_free_acked_segments.constprop.0+0x80>
  while (seg_list != NULL &&
 800c3ec:	f1bb 0f00 	cmp.w	fp, #0
 800c3f0:	d1cb      	bne.n	800c38a <tcp_free_acked_segments.constprop.0+0x16>
 800c3f2:	e006      	b.n	800c402 <tcp_free_acked_segments.constprop.0+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800c3f4:	4b0f      	ldr	r3, [pc, #60]	@ (800c434 <tcp_free_acked_segments.constprop.0+0xc0>)
 800c3f6:	f240 4261 	movw	r2, #1121	@ 0x461
 800c3fa:	490f      	ldr	r1, [pc, #60]	@ (800c438 <tcp_free_acked_segments.constprop.0+0xc4>)
 800c3fc:	480b      	ldr	r0, [pc, #44]	@ (800c42c <tcp_free_acked_segments.constprop.0+0xb8>)
 800c3fe:	f005 f84b 	bl	8011498 <iprintf>
  while (seg_list != NULL &&
 800c402:	2000      	movs	r0, #0
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
}
 800c404:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800c408:	464b      	mov	r3, r9
 800c40a:	f240 4257 	movw	r2, #1111	@ 0x457
 800c40e:	490b      	ldr	r1, [pc, #44]	@ (800c43c <tcp_free_acked_segments.constprop.0+0xc8>)
 800c410:	4638      	mov	r0, r7
 800c412:	f005 f841 	bl	8011498 <iprintf>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800c416:	f8ba 3066 	ldrh.w	r3, [sl, #102]	@ 0x66
 800c41a:	e7d5      	b.n	800c3c8 <tcp_free_acked_segments.constprop.0+0x54>
 800c41c:	4628      	mov	r0, r5
}
 800c41e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c422:	2000      	movs	r0, #0
 800c424:	4770      	bx	lr
 800c426:	bf00      	nop
 800c428:	24009d1c 	.word	0x24009d1c
 800c42c:	0801241c 	.word	0x0801241c
 800c430:	24009d18 	.word	0x24009d18
 800c434:	08013d4c 	.word	0x08013d4c
 800c438:	08013dd0 	.word	0x08013dd0
 800c43c:	08013da8 	.word	0x08013da8

0800c440 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800c440:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800c444:	7d03      	ldrb	r3, [r0, #20]
{
 800c446:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800c448:	2b03      	cmp	r3, #3
 800c44a:	f240 8124 	bls.w	800c696 <tcp_receive+0x256>

  if (flags & TCP_ACK) {
 800c44e:	4bb6      	ldr	r3, [pc, #728]	@ (800c728 <tcp_receive+0x2e8>)
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c450:	4eb6      	ldr	r6, [pc, #728]	@ (800c72c <tcp_receive+0x2ec>)
  if (flags & TCP_ACK) {
 800c452:	781a      	ldrb	r2, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c454:	6833      	ldr	r3, [r6, #0]
  if (flags & TCP_ACK) {
 800c456:	06d0      	lsls	r0, r2, #27
 800c458:	f100 80a3 	bmi.w	800c5a2 <tcp_receive+0x162>
 800c45c:	4fb4      	ldr	r7, [pc, #720]	@ (800c730 <tcp_receive+0x2f0>)

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800c45e:	8839      	ldrh	r1, [r7, #0]
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c460:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800c462:	6833      	ldr	r3, [r6, #0]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800c464:	2900      	cmp	r1, #0
 800c466:	f000 808c 	beq.w	800c582 <tcp_receive+0x142>
 800c46a:	7d20      	ldrb	r0, [r4, #20]
 800c46c:	2806      	cmp	r0, #6
 800c46e:	f200 8088 	bhi.w	800c582 <tcp_receive+0x142>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c472:	eba2 0803 	sub.w	r8, r2, r3
 800c476:	f1b8 0f01 	cmp.w	r8, #1
 800c47a:	d406      	bmi.n	800c48a <tcp_receive+0x4a>
 800c47c:	f1c3 0001 	rsb	r0, r3, #1
 800c480:	1a41      	subs	r1, r0, r1
 800c482:	4411      	add	r1, r2
 800c484:	2900      	cmp	r1, #0
 800c486:	f340 81d8 	ble.w	800c83a <tcp_receive+0x3fa>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800c48a:	1a99      	subs	r1, r3, r2
 800c48c:	2900      	cmp	r1, #0
 800c48e:	f2c0 81cf 	blt.w	800c830 <tcp_receive+0x3f0>
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c492:	f103 0e01 	add.w	lr, r3, #1
 800c496:	8d20      	ldrh	r0, [r4, #40]	@ 0x28
 800c498:	ebae 0102 	sub.w	r1, lr, r2
 800c49c:	1a09      	subs	r1, r1, r0
 800c49e:	2900      	cmp	r1, #0
 800c4a0:	dc43      	bgt.n	800c52a <tcp_receive+0xea>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800c4a2:	429a      	cmp	r2, r3
 800c4a4:	f000 8454 	beq.w	800cd50 <tcp_receive+0x910>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800c4a8:	6f65      	ldr	r5, [r4, #116]	@ 0x74
 800c4aa:	2d00      	cmp	r5, #0
 800c4ac:	f000 8375 	beq.w	800cb9a <tcp_receive+0x75a>
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
          for (next = pcb->ooseq; next != NULL; next = next->next) {
            if (seqno == next->tcphdr->seqno) {
 800c4b0:	68e8      	ldr	r0, [r5, #12]
 800c4b2:	6842      	ldr	r2, [r0, #4]
 800c4b4:	429a      	cmp	r2, r3
 800c4b6:	f000 8350 	beq.w	800cb5a <tcp_receive+0x71a>
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800c4ba:	1a99      	subs	r1, r3, r2
 800c4bc:	2900      	cmp	r1, #0
 800c4be:	f2c0 83b9 	blt.w	800cc34 <tcp_receive+0x7f4>
                  break;
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800c4c2:	f103 3cff 	add.w	ip, r3, #4294967295
              prev = next;

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800c4c6:	46a8      	mov	r8, r5
 800c4c8:	682d      	ldr	r5, [r5, #0]
 800c4ca:	2d00      	cmp	r5, #0
 800c4cc:	f000 814d 	beq.w	800c76a <tcp_receive+0x32a>
            if (seqno == next->tcphdr->seqno) {
 800c4d0:	68e8      	ldr	r0, [r5, #12]
 800c4d2:	6842      	ldr	r2, [r0, #4]
 800c4d4:	429a      	cmp	r2, r3
 800c4d6:	f000 8342 	beq.w	800cb5e <tcp_receive+0x71e>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800c4da:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800c4de:	6849      	ldr	r1, [r1, #4]
 800c4e0:	ebac 0101 	sub.w	r1, ip, r1
 800c4e4:	2900      	cmp	r1, #0
 800c4e6:	dbee      	blt.n	800c4c6 <tcp_receive+0x86>
 800c4e8:	ebae 0102 	sub.w	r1, lr, r2
 800c4ec:	2900      	cmp	r1, #0
 800c4ee:	dcea      	bgt.n	800c4c6 <tcp_receive+0x86>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c4f0:	4890      	ldr	r0, [pc, #576]	@ (800c734 <tcp_receive+0x2f4>)
 800c4f2:	f7fe fe87 	bl	800b204 <tcp_seg_copy>
                  if (cseg != NULL) {
 800c4f6:	4607      	mov	r7, r0
 800c4f8:	b1b8      	cbz	r0, 800c52a <tcp_receive+0xea>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800c4fa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c4fe:	6832      	ldr	r2, [r6, #0]
 800c500:	6859      	ldr	r1, [r3, #4]
 800c502:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800c506:	440b      	add	r3, r1
 800c508:	1a9b      	subs	r3, r3, r2
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	dd07      	ble.n	800c51e <tcp_receive+0xde>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800c50e:	1a52      	subs	r2, r2, r1
                      pbuf_realloc(prev->p, prev->len);
 800c510:	f8d8 0004 	ldr.w	r0, [r8, #4]
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800c514:	b291      	uxth	r1, r2
 800c516:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 800c51a:	f7fe fa45 	bl	800a9a8 <pbuf_realloc>
                    tcp_oos_insert_segment(cseg, next);
 800c51e:	4629      	mov	r1, r5
 800c520:	4638      	mov	r0, r7
                    prev->next = cseg;
 800c522:	f8c8 7000 	str.w	r7, [r8]
                    tcp_oos_insert_segment(cseg, next);
 800c526:	f7ff feb9 	bl	800c29c <tcp_oos_insert_segment>
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800c52a:	4620      	mov	r0, r4
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      tcp_ack_now(pcb);
    }
  }
}
 800c52c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        tcp_send_empty_ack(pcb);
 800c530:	f002 b9dc 	b.w	800e8ec <tcp_send_empty_ack>
      if (tcplen == 0) {
 800c534:	4f7e      	ldr	r7, [pc, #504]	@ (800c730 <tcp_receive+0x2f0>)
 800c536:	8839      	ldrh	r1, [r7, #0]
 800c538:	2900      	cmp	r1, #0
 800c53a:	f040 810b 	bne.w	800c754 <tcp_receive+0x314>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800c53e:	44e6      	add	lr, ip
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800c540:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 800c542:	f8b4 c060 	ldrh.w	ip, [r4, #96]	@ 0x60
 800c546:	4461      	add	r1, ip
 800c548:	4571      	cmp	r1, lr
 800c54a:	f040 8103 	bne.w	800c754 <tcp_receive+0x314>
          if (pcb->rtime >= 0) {
 800c54e:	8e21      	ldrh	r1, [r4, #48]	@ 0x30
            if (pcb->lastack == ackno) {
 800c550:	0409      	lsls	r1, r1, #16
 800c552:	f100 80ff 	bmi.w	800c754 <tcp_receive+0x314>
 800c556:	4290      	cmp	r0, r2
 800c558:	f040 80fc 	bne.w	800c754 <tcp_receive+0x314>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800c55c:	f894 1043 	ldrb.w	r1, [r4, #67]	@ 0x43
 800c560:	29ff      	cmp	r1, #255	@ 0xff
 800c562:	f000 8372 	beq.w	800cc4a <tcp_receive+0x80a>
                ++pcb->dupacks;
 800c566:	3101      	adds	r1, #1
 800c568:	b2c9      	uxtb	r1, r1
              if (pcb->dupacks > 3) {
 800c56a:	2903      	cmp	r1, #3
                ++pcb->dupacks;
 800c56c:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
              if (pcb->dupacks > 3) {
 800c570:	f200 836b 	bhi.w	800cc4a <tcp_receive+0x80a>
              if (pcb->dupacks >= 3) {
 800c574:	f000 8374 	beq.w	800cc60 <tcp_receive+0x820>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800c578:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c57a:	2900      	cmp	r1, #0
 800c57c:	f040 80ae 	bne.w	800c6dc <tcp_receive+0x29c>
 800c580:	6a62      	ldr	r2, [r4, #36]	@ 0x24
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800c582:	1a99      	subs	r1, r3, r2
 800c584:	2900      	cmp	r1, #0
 800c586:	db06      	blt.n	800c596 <tcp_receive+0x156>
 800c588:	f1c2 0201 	rsb	r2, r2, #1
 800c58c:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 800c58e:	1a52      	subs	r2, r2, r1
 800c590:	441a      	add	r2, r3
 800c592:	2a00      	cmp	r2, #0
 800c594:	dd03      	ble.n	800c59e <tcp_receive+0x15e>
      tcp_ack_now(pcb);
 800c596:	8b63      	ldrh	r3, [r4, #26]
 800c598:	f043 0302 	orr.w	r3, r3, #2
 800c59c:	8363      	strh	r3, [r4, #26]
}
 800c59e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c5a2:	e9d4 1c15 	ldrd	r1, ip, [r4, #84]	@ 0x54
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c5a6:	4d64      	ldr	r5, [pc, #400]	@ (800c738 <tcp_receive+0x2f8>)
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c5a8:	1ac8      	subs	r0, r1, r3
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800c5aa:	f8b4 e060 	ldrh.w	lr, [r4, #96]	@ 0x60
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c5ae:	682a      	ldr	r2, [r5, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c5b0:	2800      	cmp	r0, #0
 800c5b2:	db7c      	blt.n	800c6ae <tcp_receive+0x26e>
 800c5b4:	4299      	cmp	r1, r3
 800c5b6:	d076      	beq.n	800c6a6 <tcp_receive+0x266>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c5b8:	4594      	cmp	ip, r2
 800c5ba:	f000 80cf 	beq.w	800c75c <tcp_receive+0x31c>
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800c5be:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800c5c0:	1a11      	subs	r1, r2, r0
 800c5c2:	2900      	cmp	r1, #0
 800c5c4:	ddb6      	ble.n	800c534 <tcp_receive+0xf4>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c5c6:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800c5c8:	1ad3      	subs	r3, r2, r3
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	dc7d      	bgt.n	800c6ca <tcp_receive+0x28a>
      if (pcb->flags & TF_INFR) {
 800c5ce:	8b63      	ldrh	r3, [r4, #26]
 800c5d0:	0758      	lsls	r0, r3, #29
 800c5d2:	d509      	bpl.n	800c5e8 <tcp_receive+0x1a8>
        tcp_clear_flags(pcb, TF_INFR);
 800c5d4:	f023 0304 	bic.w	r3, r3, #4
 800c5d8:	8363      	strh	r3, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 800c5da:	f8b4 304a 	ldrh.w	r3, [r4, #74]	@ 0x4a
 800c5de:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c5e8:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	@ 0x3c
 800c5ec:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      pcb->lastack = ackno;
 800c5ee:	6462      	str	r2, [r4, #68]	@ 0x44
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c5f0:	eb03 03e0 	add.w	r3, r3, r0, asr #3
      if (pcb->state >= ESTABLISHED) {
 800c5f4:	7d22      	ldrb	r2, [r4, #20]
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c5f6:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
      if (pcb->state >= ESTABLISHED) {
 800c5fa:	2a03      	cmp	r2, #3
      pcb->nrtx = 0;
 800c5fc:	f04f 0300 	mov.w	r3, #0
 800c600:	f8a4 3042 	strh.w	r3, [r4, #66]	@ 0x42
      if (pcb->state >= ESTABLISHED) {
 800c604:	d913      	bls.n	800c62e <tcp_receive+0x1ee>
        if (pcb->cwnd < pcb->ssthresh) {
 800c606:	f8b4 3048 	ldrh.w	r3, [r4, #72]	@ 0x48
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800c60a:	b289      	uxth	r1, r1
        if (pcb->cwnd < pcb->ssthresh) {
 800c60c:	f8b4 204a 	ldrh.w	r2, [r4, #74]	@ 0x4a
 800c610:	429a      	cmp	r2, r3
 800c612:	f200 81af 	bhi.w	800c974 <tcp_receive+0x534>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800c616:	f8b4 206a 	ldrh.w	r2, [r4, #106]	@ 0x6a
 800c61a:	4411      	add	r1, r2
 800c61c:	b289      	uxth	r1, r1
 800c61e:	428a      	cmp	r2, r1
 800c620:	f200 828b 	bhi.w	800cb3a <tcp_receive+0x6fa>
          if (pcb->bytes_acked >= pcb->cwnd) {
 800c624:	428b      	cmp	r3, r1
 800c626:	f240 828a 	bls.w	800cb3e <tcp_receive+0x6fe>
 800c62a:	f8a4 106a 	strh.w	r1, [r4, #106]	@ 0x6a
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800c62e:	4620      	mov	r0, r4
 800c630:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	@ 0x6c
 800c634:	f7ff fe9e 	bl	800c374 <tcp_free_acked_segments.constprop.0>
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800c638:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800c63a:	4602      	mov	r2, r0
 800c63c:	6720      	str	r0, [r4, #112]	@ 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800c63e:	4620      	mov	r0, r4
 800c640:	f7ff fe98 	bl	800c374 <tcp_free_acked_segments.constprop.0>
      if (pcb->unacked == NULL) {
 800c644:	6f22      	ldr	r2, [r4, #112]	@ 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800c646:	66e0      	str	r0, [r4, #108]	@ 0x6c
      if (pcb->unacked == NULL) {
 800c648:	fab2 f382 	clz	r3, r2
 800c64c:	095b      	lsrs	r3, r3, #5
 800c64e:	425b      	negs	r3, r3
 800c650:	8623      	strh	r3, [r4, #48]	@ 0x30
      pcb->polltmr = 0;
 800c652:	2300      	movs	r3, #0
 800c654:	7723      	strb	r3, [r4, #28]
      if (pcb->unsent == NULL) {
 800c656:	2800      	cmp	r0, #0
 800c658:	f000 8189 	beq.w	800c96e <tcp_receive+0x52e>
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800c65c:	4b37      	ldr	r3, [pc, #220]	@ (800c73c <tcp_receive+0x2fc>)
 800c65e:	8819      	ldrh	r1, [r3, #0]
 800c660:	f8b4 3064 	ldrh.w	r3, [r4, #100]	@ 0x64
 800c664:	440b      	add	r3, r1
 800c666:	f8a4 3064 	strh.w	r3, [r4, #100]	@ 0x64
      if (pcb->flags & TF_RTO) {
 800c66a:	8b63      	ldrh	r3, [r4, #26]
 800c66c:	0519      	lsls	r1, r3, #20
 800c66e:	f140 80dd 	bpl.w	800c82c <tcp_receive+0x3ec>
        if (pcb->unacked == NULL) {
 800c672:	2a00      	cmp	r2, #0
 800c674:	f000 8195 	beq.w	800c9a2 <tcp_receive+0x562>
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800c678:	68d3      	ldr	r3, [r2, #12]
 800c67a:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 800c67c:	6858      	ldr	r0, [r3, #4]
 800c67e:	f7fd f9cd 	bl	8009a1c <lwip_htonl>
 800c682:	1a3f      	subs	r7, r7, r0
 800c684:	2f00      	cmp	r7, #0
 800c686:	f300 80d1 	bgt.w	800c82c <tcp_receive+0x3ec>
          tcp_clear_flags(pcb, TF_RTO);
 800c68a:	8b63      	ldrh	r3, [r4, #26]
 800c68c:	4f28      	ldr	r7, [pc, #160]	@ (800c730 <tcp_receive+0x2f0>)
 800c68e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c692:	8363      	strh	r3, [r4, #26]
 800c694:	e01d      	b.n	800c6d2 <tcp_receive+0x292>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800c696:	4b2a      	ldr	r3, [pc, #168]	@ (800c740 <tcp_receive+0x300>)
 800c698:	f240 427c 	movw	r2, #1148	@ 0x47c
 800c69c:	4929      	ldr	r1, [pc, #164]	@ (800c744 <tcp_receive+0x304>)
 800c69e:	482a      	ldr	r0, [pc, #168]	@ (800c748 <tcp_receive+0x308>)
 800c6a0:	f004 fefa 	bl	8011498 <iprintf>
 800c6a4:	e6d3      	b.n	800c44e <tcp_receive+0xe>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c6a6:	ebac 0102 	sub.w	r1, ip, r2
 800c6aa:	2900      	cmp	r1, #0
 800c6ac:	da84      	bge.n	800c5b8 <tcp_receive+0x178>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c6ae:	4927      	ldr	r1, [pc, #156]	@ (800c74c <tcp_receive+0x30c>)
 800c6b0:	6809      	ldr	r1, [r1, #0]
 800c6b2:	89c9      	ldrh	r1, [r1, #14]
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800c6b4:	f8b4 0062 	ldrh.w	r0, [r4, #98]	@ 0x62
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800c6b8:	f8a4 1060 	strh.w	r1, [r4, #96]	@ 0x60
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800c6bc:	4288      	cmp	r0, r1
      pcb->snd_wl2 = ackno;
 800c6be:	e9c4 3215 	strd	r3, r2, [r4, #84]	@ 0x54
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c6c2:	bf38      	it	cc
 800c6c4:	f8a4 1062 	strhcc.w	r1, [r4, #98]	@ 0x62
      pcb->snd_wl1 = seqno;
 800c6c8:	e779      	b.n	800c5be <tcp_receive+0x17e>
      tcp_send_empty_ack(pcb);
 800c6ca:	4620      	mov	r0, r4
 800c6cc:	4f18      	ldr	r7, [pc, #96]	@ (800c730 <tcp_receive+0x2f0>)
 800c6ce:	f002 f90d 	bl	800e8ec <tcp_send_empty_ack>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800c6d2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c6d4:	2900      	cmp	r1, #0
 800c6d6:	f43f aec2 	beq.w	800c45e <tcp_receive+0x1e>
 800c6da:	682a      	ldr	r2, [r5, #0]
 800c6dc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800c6de:	1a9b      	subs	r3, r3, r2
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	f6bf aebc 	bge.w	800c45e <tcp_receive+0x1e>
      m = (s16_t)(m - (pcb->sa >> 3));
 800c6e6:	f9b4 203c 	ldrsh.w	r2, [r4, #60]	@ 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800c6ea:	b289      	uxth	r1, r1
 800c6ec:	4b18      	ldr	r3, [pc, #96]	@ (800c750 <tcp_receive+0x310>)
      m = (s16_t)(m - (pcb->sa >> 3));
 800c6ee:	f3c2 00cf 	ubfx	r0, r2, #3, #16
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800c6f2:	881d      	ldrh	r5, [r3, #0]
      m = (s16_t)(m - (pcb->sa >> 3));
 800c6f4:	1a2b      	subs	r3, r5, r0
 800c6f6:	1a5b      	subs	r3, r3, r1
 800c6f8:	b29b      	uxth	r3, r3
      pcb->sa = (s16_t)(pcb->sa + m);
 800c6fa:	441a      	add	r2, r3
      if (m < 0) {
 800c6fc:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
      pcb->sa = (s16_t)(pcb->sa + m);
 800c700:	b212      	sxth	r2, r2
 800c702:	87a2      	strh	r2, [r4, #60]	@ 0x3c
      if (m < 0) {
 800c704:	d002      	beq.n	800c70c <tcp_receive+0x2cc>
        m = (s16_t) - m;
 800c706:	1b40      	subs	r0, r0, r5
 800c708:	4401      	add	r1, r0
 800c70a:	b28b      	uxth	r3, r1
      m = (s16_t)(m - (pcb->sv >> 2));
 800c70c:	f9b4 103e 	ldrsh.w	r1, [r4, #62]	@ 0x3e
      pcb->sv = (s16_t)(pcb->sv + m);
 800c710:	eba1 01a1 	sub.w	r1, r1, r1, asr #2
 800c714:	440b      	add	r3, r1
 800c716:	b29b      	uxth	r3, r3
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c718:	eb03 02e2 	add.w	r2, r3, r2, asr #3
      pcb->sv = (s16_t)(pcb->sv + m);
 800c71c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      pcb->rttest = 0;
 800c71e:	2300      	movs	r3, #0
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c720:	f8a4 2040 	strh.w	r2, [r4, #64]	@ 0x40
      pcb->rttest = 0;
 800c724:	6363      	str	r3, [r4, #52]	@ 0x34
 800c726:	e69a      	b.n	800c45e <tcp_receive+0x1e>
 800c728:	24009d15 	.word	0x24009d15
 800c72c:	24009d20 	.word	0x24009d20
 800c730:	24009d16 	.word	0x24009d16
 800c734:	24009d34 	.word	0x24009d34
 800c738:	24009d1c 	.word	0x24009d1c
 800c73c:	24009d18 	.word	0x24009d18
 800c740:	08013d4c 	.word	0x08013d4c
 800c744:	08013df0 	.word	0x08013df0
 800c748:	0801241c 	.word	0x0801241c
 800c74c:	24009d30 	.word	0x24009d30
 800c750:	24009d08 	.word	0x24009d08
        pcb->dupacks = 0;
 800c754:	2300      	movs	r3, #0
 800c756:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c75a:	e7ba      	b.n	800c6d2 <tcp_receive+0x292>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c75c:	49a2      	ldr	r1, [pc, #648]	@ (800c9e8 <tcp_receive+0x5a8>)
 800c75e:	6809      	ldr	r1, [r1, #0]
 800c760:	89c9      	ldrh	r1, [r1, #14]
 800c762:	458e      	cmp	lr, r1
 800c764:	f4bf af2b 	bcs.w	800c5be <tcp_receive+0x17e>
 800c768:	e7a4      	b.n	800c6b4 <tcp_receive+0x274>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800c76a:	1a9a      	subs	r2, r3, r2
              if (next->next == NULL &&
 800c76c:	2a00      	cmp	r2, #0
 800c76e:	f77f aedc 	ble.w	800c52a <tcp_receive+0xea>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c772:	8980      	ldrh	r0, [r0, #12]
 800c774:	f7fd f94e 	bl	8009a14 <lwip_htons>
 800c778:	07c1      	lsls	r1, r0, #31
 800c77a:	f53f aed6 	bmi.w	800c52a <tcp_receive+0xea>
                next->next = tcp_seg_copy(&inseg);
 800c77e:	489b      	ldr	r0, [pc, #620]	@ (800c9ec <tcp_receive+0x5ac>)
 800c780:	f7fe fd40 	bl	800b204 <tcp_seg_copy>
 800c784:	f8c8 0000 	str.w	r0, [r8]
                if (next->next != NULL) {
 800c788:	2800      	cmp	r0, #0
 800c78a:	f43f aece 	beq.w	800c52a <tcp_receive+0xea>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800c78e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c792:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 800c796:	6859      	ldr	r1, [r3, #4]
 800c798:	6833      	ldr	r3, [r6, #0]
 800c79a:	440a      	add	r2, r1
 800c79c:	1ad2      	subs	r2, r2, r3
 800c79e:	2a00      	cmp	r2, #0
 800c7a0:	dd07      	ble.n	800c7b2 <tcp_receive+0x372>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800c7a2:	1a5b      	subs	r3, r3, r1
                    pbuf_realloc(next->p, next->len);
 800c7a4:	f8d8 0004 	ldr.w	r0, [r8, #4]
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800c7a8:	b299      	uxth	r1, r3
 800c7aa:	f8a8 1008 	strh.w	r1, [r8, #8]
                    pbuf_realloc(next->p, next->len);
 800c7ae:	f7fe f8fb 	bl	800a9a8 <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800c7b2:	6832      	ldr	r2, [r6, #0]
 800c7b4:	883b      	ldrh	r3, [r7, #0]
 800c7b6:	4413      	add	r3, r2
 800c7b8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800c7ba:	1a9b      	subs	r3, r3, r2
 800c7bc:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 800c7be:	1a9b      	subs	r3, r3, r2
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	f77f aeb2 	ble.w	800c52a <tcp_receive+0xea>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800c7c6:	f8d8 3000 	ldr.w	r3, [r8]
 800c7ca:	68db      	ldr	r3, [r3, #12]
 800c7cc:	8998      	ldrh	r0, [r3, #12]
 800c7ce:	f7fd f921 	bl	8009a14 <lwip_htons>
 800c7d2:	07c2      	lsls	r2, r0, #31
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800c7d4:	f8d8 3000 	ldr.w	r3, [r8]
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800c7d8:	f100 82a8 	bmi.w	800cd2c <tcp_receive+0x8ec>
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800c7dc:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 800c7de:	6832      	ldr	r2, [r6, #0]
                    pbuf_realloc(next->next->p, next->next->len);
 800c7e0:	6858      	ldr	r0, [r3, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800c7e2:	1a89      	subs	r1, r1, r2
 800c7e4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800c7e6:	4411      	add	r1, r2
 800c7e8:	b289      	uxth	r1, r1
 800c7ea:	8119      	strh	r1, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800c7ec:	f7fe f8dc 	bl	800a9a8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800c7f0:	f8d8 3000 	ldr.w	r3, [r8]
 800c7f4:	891d      	ldrh	r5, [r3, #8]
 800c7f6:	68db      	ldr	r3, [r3, #12]
 800c7f8:	8998      	ldrh	r0, [r3, #12]
 800c7fa:	f7fd f90b 	bl	8009a14 <lwip_htons>
 800c7fe:	f010 0303 	ands.w	r3, r0, #3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c802:	6831      	ldr	r1, [r6, #0]
                    tcplen = TCP_TCPLEN(next->next);
 800c804:	bf18      	it	ne
 800c806:	2301      	movne	r3, #1
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c808:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
                    tcplen = TCP_TCPLEN(next->next);
 800c80a:	442b      	add	r3, r5
 800c80c:	b29b      	uxth	r3, r3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c80e:	4419      	add	r1, r3
                    tcplen = TCP_TCPLEN(next->next);
 800c810:	803b      	strh	r3, [r7, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c812:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c814:	4413      	add	r3, r2
 800c816:	4299      	cmp	r1, r3
 800c818:	f43f ae87 	beq.w	800c52a <tcp_receive+0xea>
 800c81c:	4b74      	ldr	r3, [pc, #464]	@ (800c9f0 <tcp_receive+0x5b0>)
 800c81e:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800c822:	4974      	ldr	r1, [pc, #464]	@ (800c9f4 <tcp_receive+0x5b4>)
 800c824:	4874      	ldr	r0, [pc, #464]	@ (800c9f8 <tcp_receive+0x5b8>)
 800c826:	f004 fe37 	bl	8011498 <iprintf>
 800c82a:	e67e      	b.n	800c52a <tcp_receive+0xea>
 800c82c:	4f73      	ldr	r7, [pc, #460]	@ (800c9fc <tcp_receive+0x5bc>)
 800c82e:	e750      	b.n	800c6d2 <tcp_receive+0x292>
        tcp_ack_now(pcb);
 800c830:	8b63      	ldrh	r3, [r4, #26]
 800c832:	f043 0302 	orr.w	r3, r3, #2
 800c836:	8363      	strh	r3, [r4, #26]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c838:	e677      	b.n	800c52a <tcp_receive+0xea>
      struct pbuf *p = inseg.p;
 800c83a:	f8df 91b0 	ldr.w	r9, [pc, #432]	@ 800c9ec <tcp_receive+0x5ac>
 800c83e:	f8d9 5004 	ldr.w	r5, [r9, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800c842:	2d00      	cmp	r5, #0
 800c844:	f000 8171 	beq.w	800cb2a <tcp_receive+0x6ea>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800c848:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800c84c:	4598      	cmp	r8, r3
 800c84e:	f200 80c3 	bhi.w	800c9d8 <tcp_receive+0x598>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800c852:	f8d9 3004 	ldr.w	r3, [r9, #4]
      off = (u16_t)off32;
 800c856:	fa1f f888 	uxth.w	r8, r8
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800c85a:	891a      	ldrh	r2, [r3, #8]
 800c85c:	4542      	cmp	r2, r8
 800c85e:	f0c0 80b0 	bcc.w	800c9c2 <tcp_receive+0x582>
      inseg.len -= off;
 800c862:	f8b9 3008 	ldrh.w	r3, [r9, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800c866:	eba2 0208 	sub.w	r2, r2, r8
      inseg.len -= off;
 800c86a:	eba3 0308 	sub.w	r3, r3, r8
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800c86e:	b292      	uxth	r2, r2
      inseg.len -= off;
 800c870:	f8a9 3008 	strh.w	r3, [r9, #8]
      while (p->len < off) {
 800c874:	896b      	ldrh	r3, [r5, #10]
 800c876:	4598      	cmp	r8, r3
 800c878:	d90a      	bls.n	800c890 <tcp_receive+0x450>
        p->len = 0;
 800c87a:	2100      	movs	r1, #0
        off -= p->len;
 800c87c:	eba8 0303 	sub.w	r3, r8, r3
        p->len = 0;
 800c880:	8169      	strh	r1, [r5, #10]
        p->tot_len = new_tot_len;
 800c882:	812a      	strh	r2, [r5, #8]
        p = p->next;
 800c884:	682d      	ldr	r5, [r5, #0]
        off -= p->len;
 800c886:	fa1f f883 	uxth.w	r8, r3
      while (p->len < off) {
 800c88a:	896b      	ldrh	r3, [r5, #10]
 800c88c:	4543      	cmp	r3, r8
 800c88e:	d3f5      	bcc.n	800c87c <tcp_receive+0x43c>
      pbuf_remove_header(p, off);
 800c890:	4641      	mov	r1, r8
 800c892:	4628      	mov	r0, r5
 800c894:	f7fd ff12 	bl	800a6bc <pbuf_remove_header>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c898:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800c89a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c89c:	f1c3 0301 	rsb	r3, r3, #1
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800c8a0:	f8d9 100c 	ldr.w	r1, [r9, #12]
 800c8a4:	6032      	str	r2, [r6, #0]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c8a6:	2b00      	cmp	r3, #0
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800c8a8:	604a      	str	r2, [r1, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c8aa:	f73f ae3e 	bgt.w	800c52a <tcp_receive+0xea>
        tcplen = TCP_TCPLEN(&inseg);
 800c8ae:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800c8b2:	f8b9 5008 	ldrh.w	r5, [r9, #8]
 800c8b6:	8998      	ldrh	r0, [r3, #12]
 800c8b8:	f7fd f8ac 	bl	8009a14 <lwip_htons>
 800c8bc:	f010 0303 	ands.w	r3, r0, #3
        if (tcplen > pcb->rcv_wnd) {
 800c8c0:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
        tcplen = TCP_TCPLEN(&inseg);
 800c8c2:	bf18      	it	ne
 800c8c4:	2301      	movne	r3, #1
 800c8c6:	442b      	add	r3, r5
 800c8c8:	b29b      	uxth	r3, r3
        if (tcplen > pcb->rcv_wnd) {
 800c8ca:	429a      	cmp	r2, r3
        tcplen = TCP_TCPLEN(&inseg);
 800c8cc:	803b      	strh	r3, [r7, #0]
        if (tcplen > pcb->rcv_wnd) {
 800c8ce:	f0c0 816d 	bcc.w	800cbac <tcp_receive+0x76c>
        if (pcb->ooseq != NULL) {
 800c8d2:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	f000 809e 	beq.w	800ca16 <tcp_receive+0x5d6>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c8da:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800c8de:	8998      	ldrh	r0, [r3, #12]
 800c8e0:	f7fd f898 	bl	8009a14 <lwip_htons>
 800c8e4:	07c2      	lsls	r2, r0, #31
 800c8e6:	f100 8093 	bmi.w	800ca10 <tcp_receive+0x5d0>
            struct tcp_seg *next = pcb->ooseq;
 800c8ea:	6f65      	ldr	r5, [r4, #116]	@ 0x74
        pcb->rcv_nxt = seqno + tcplen;
 800c8ec:	883a      	ldrh	r2, [r7, #0]
 800c8ee:	6831      	ldr	r1, [r6, #0]
            while (next &&
 800c8f0:	b955      	cbnz	r5, 800c908 <tcp_receive+0x4c8>
 800c8f2:	e1f3      	b.n	800ccdc <tcp_receive+0x89c>
              next = next->next;
 800c8f4:	f8d5 8000 	ldr.w	r8, [r5]
              tcp_seg_free(tmp);
 800c8f8:	4628      	mov	r0, r5
 800c8fa:	f7fe fc75 	bl	800b1e8 <tcp_seg_free>
              next = next->next;
 800c8fe:	4645      	mov	r5, r8
            while (next &&
 800c900:	f1b8 0f00 	cmp.w	r8, #0
 800c904:	f000 81e8 	beq.w	800ccd8 <tcp_receive+0x898>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800c908:	68e8      	ldr	r0, [r5, #12]
 800c90a:	883a      	ldrh	r2, [r7, #0]
 800c90c:	f8d6 e000 	ldr.w	lr, [r6]
 800c910:	892b      	ldrh	r3, [r5, #8]
 800c912:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800c916:	eb02 010e 	add.w	r1, r2, lr
 800c91a:	4463      	add	r3, ip
 800c91c:	1acb      	subs	r3, r1, r3
            while (next &&
 800c91e:	2b00      	cmp	r3, #0
 800c920:	f2c0 81a2 	blt.w	800cc68 <tcp_receive+0x828>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c924:	8980      	ldrh	r0, [r0, #12]
 800c926:	f7fd f875 	bl	8009a14 <lwip_htons>
 800c92a:	07c3      	lsls	r3, r0, #31
 800c92c:	d5e2      	bpl.n	800c8f4 <tcp_receive+0x4b4>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800c92e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800c932:	8998      	ldrh	r0, [r3, #12]
 800c934:	f7fd f86e 	bl	8009a14 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c938:	0780      	lsls	r0, r0, #30
 800c93a:	d4db      	bmi.n	800c8f4 <tcp_receive+0x4b4>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800c93c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800c940:	2001      	movs	r0, #1
 800c942:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 800c946:	f7fd f865 	bl	8009a14 <lwip_htons>
 800c94a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800c94e:	ea48 0000 	orr.w	r0, r8, r0
                tcplen = TCP_TCPLEN(&inseg);
 800c952:	f8b9 8008 	ldrh.w	r8, [r9, #8]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800c956:	8198      	strh	r0, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800c958:	b280      	uxth	r0, r0
 800c95a:	f7fd f85b 	bl	8009a14 <lwip_htons>
 800c95e:	f010 0303 	ands.w	r3, r0, #3
 800c962:	bf18      	it	ne
 800c964:	2301      	movne	r3, #1
 800c966:	4498      	add	r8, r3
 800c968:	f8a7 8000 	strh.w	r8, [r7]
 800c96c:	e7c2      	b.n	800c8f4 <tcp_receive+0x4b4>
        pcb->unsent_oversize = 0;
 800c96e:	f8a4 0068 	strh.w	r0, [r4, #104]	@ 0x68
 800c972:	e673      	b.n	800c65c <tcp_receive+0x21c>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800c974:	8b62      	ldrh	r2, [r4, #26]
 800c976:	f412 6f00 	tst.w	r2, #2048	@ 0x800
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800c97a:	8e62      	ldrh	r2, [r4, #50]	@ 0x32
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800c97c:	bf0c      	ite	eq
 800c97e:	2002      	moveq	r0, #2
 800c980:	2001      	movne	r0, #1
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800c982:	fb12 f200 	smulbb	r2, r2, r0
 800c986:	b292      	uxth	r2, r2
          TCP_WND_INC(pcb->cwnd, increase);
 800c988:	428a      	cmp	r2, r1
 800c98a:	bf94      	ite	ls
 800c98c:	1898      	addls	r0, r3, r2
 800c98e:	1858      	addhi	r0, r3, r1
 800c990:	b282      	uxth	r2, r0
 800c992:	4293      	cmp	r3, r2
 800c994:	f240 80dc 	bls.w	800cb50 <tcp_receive+0x710>
 800c998:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c99c:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 800c9a0:	e645      	b.n	800c62e <tcp_receive+0x1ee>
          if ((pcb->unsent == NULL) ||
 800c9a2:	b148      	cbz	r0, 800c9b8 <tcp_receive+0x578>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800c9a4:	68c3      	ldr	r3, [r0, #12]
 800c9a6:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 800c9a8:	6858      	ldr	r0, [r3, #4]
 800c9aa:	f7fd f837 	bl	8009a1c <lwip_htonl>
 800c9ae:	1a3f      	subs	r7, r7, r0
          if ((pcb->unsent == NULL) ||
 800c9b0:	2f00      	cmp	r7, #0
 800c9b2:	f73f af3b 	bgt.w	800c82c <tcp_receive+0x3ec>
            tcp_clear_flags(pcb, TF_RTO);
 800c9b6:	8b63      	ldrh	r3, [r4, #26]
 800c9b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c9bc:	4f0f      	ldr	r7, [pc, #60]	@ (800c9fc <tcp_receive+0x5bc>)
 800c9be:	8363      	strh	r3, [r4, #26]
 800c9c0:	e687      	b.n	800c6d2 <tcp_receive+0x292>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800c9c2:	4b0b      	ldr	r3, [pc, #44]	@ (800c9f0 <tcp_receive+0x5b0>)
 800c9c4:	f240 5297 	movw	r2, #1431	@ 0x597
 800c9c8:	490d      	ldr	r1, [pc, #52]	@ (800ca00 <tcp_receive+0x5c0>)
 800c9ca:	480b      	ldr	r0, [pc, #44]	@ (800c9f8 <tcp_receive+0x5b8>)
 800c9cc:	f004 fd64 	bl	8011498 <iprintf>
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800c9d0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c9d4:	891a      	ldrh	r2, [r3, #8]
 800c9d6:	e744      	b.n	800c862 <tcp_receive+0x422>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800c9d8:	4b05      	ldr	r3, [pc, #20]	@ (800c9f0 <tcp_receive+0x5b0>)
 800c9da:	f240 5295 	movw	r2, #1429	@ 0x595
 800c9de:	4909      	ldr	r1, [pc, #36]	@ (800ca04 <tcp_receive+0x5c4>)
 800c9e0:	4805      	ldr	r0, [pc, #20]	@ (800c9f8 <tcp_receive+0x5b8>)
 800c9e2:	f004 fd59 	bl	8011498 <iprintf>
 800c9e6:	e734      	b.n	800c852 <tcp_receive+0x412>
 800c9e8:	24009d30 	.word	0x24009d30
 800c9ec:	24009d34 	.word	0x24009d34
 800c9f0:	08013d4c 	.word	0x08013d4c
 800c9f4:	08013e3c 	.word	0x08013e3c
 800c9f8:	0801241c 	.word	0x0801241c
 800c9fc:	24009d16 	.word	0x24009d16
 800ca00:	08013e2c 	.word	0x08013e2c
 800ca04:	08013e1c 	.word	0x08013e1c
              pcb->ooseq = pcb->ooseq->next;
 800ca08:	6803      	ldr	r3, [r0, #0]
 800ca0a:	6763      	str	r3, [r4, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800ca0c:	f7fe fbec 	bl	800b1e8 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800ca10:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800ca12:	2800      	cmp	r0, #0
 800ca14:	d1f8      	bne.n	800ca08 <tcp_receive+0x5c8>
        pcb->rcv_nxt = seqno + tcplen;
 800ca16:	883a      	ldrh	r2, [r7, #0]
 800ca18:	6831      	ldr	r1, [r6, #0]
 800ca1a:	4411      	add	r1, r2
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800ca1c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
        pcb->rcv_nxt = seqno + tcplen;
 800ca1e:	6261      	str	r1, [r4, #36]	@ 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800ca20:	4293      	cmp	r3, r2
 800ca22:	f0c0 80fd 	bcc.w	800cc20 <tcp_receive+0x7e0>
        pcb->rcv_wnd -= tcplen;
 800ca26:	1a9b      	subs	r3, r3, r2
        tcp_update_rcv_ann_wnd(pcb);
 800ca28:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 800ca2a:	8523      	strh	r3, [r4, #40]	@ 0x28
        tcp_update_rcv_ann_wnd(pcb);
 800ca2c:	f7fe fb54 	bl	800b0d8 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 800ca30:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800ca34:	891a      	ldrh	r2, [r3, #8]
 800ca36:	b122      	cbz	r2, 800ca42 <tcp_receive+0x602>
          recv_data = inseg.p;
 800ca38:	4ab2      	ldr	r2, [pc, #712]	@ (800cd04 <tcp_receive+0x8c4>)
 800ca3a:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	f8c9 3004 	str.w	r3, [r9, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ca42:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800ca46:	8998      	ldrh	r0, [r3, #12]
 800ca48:	f7fc ffe4 	bl	8009a14 <lwip_htons>
 800ca4c:	07c2      	lsls	r2, r0, #31
 800ca4e:	d504      	bpl.n	800ca5a <tcp_receive+0x61a>
          recv_flags |= TF_GOT_FIN;
 800ca50:	4aad      	ldr	r2, [pc, #692]	@ (800cd08 <tcp_receive+0x8c8>)
 800ca52:	7813      	ldrb	r3, [r2, #0]
 800ca54:	f043 0320 	orr.w	r3, r3, #32
 800ca58:	7013      	strb	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 800ca5a:	6f65      	ldr	r5, [r4, #116]	@ 0x74
 800ca5c:	2d00      	cmp	r5, #0
 800ca5e:	f000 8093 	beq.w	800cb88 <tcp_receive+0x748>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800ca62:	f8df 92ac 	ldr.w	r9, [pc, #684]	@ 800cd10 <tcp_receive+0x8d0>
 800ca66:	f8df 82c0 	ldr.w	r8, [pc, #704]	@ 800cd28 <tcp_receive+0x8e8>
 800ca6a:	4fa8      	ldr	r7, [pc, #672]	@ (800cd0c <tcp_receive+0x8cc>)
 800ca6c:	e033      	b.n	800cad6 <tcp_receive+0x696>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800ca6e:	68eb      	ldr	r3, [r5, #12]
 800ca70:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800ca74:	8998      	ldrh	r0, [r3, #12]
 800ca76:	f7fc ffcd 	bl	8009a14 <lwip_htons>
 800ca7a:	f010 0003 	ands.w	r0, r0, #3
 800ca7e:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800ca80:	bf18      	it	ne
 800ca82:	2001      	movne	r0, #1
 800ca84:	4450      	add	r0, sl
 800ca86:	1a1b      	subs	r3, r3, r0
          tcp_update_rcv_ann_wnd(pcb);
 800ca88:	4620      	mov	r0, r4
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800ca8a:	8523      	strh	r3, [r4, #40]	@ 0x28
          tcp_update_rcv_ann_wnd(pcb);
 800ca8c:	f7fe fb24 	bl	800b0d8 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 800ca90:	6869      	ldr	r1, [r5, #4]
 800ca92:	890b      	ldrh	r3, [r1, #8]
 800ca94:	b13b      	cbz	r3, 800caa6 <tcp_receive+0x666>
            if (recv_data) {
 800ca96:	4b9b      	ldr	r3, [pc, #620]	@ (800cd04 <tcp_receive+0x8c4>)
 800ca98:	6818      	ldr	r0, [r3, #0]
 800ca9a:	2800      	cmp	r0, #0
 800ca9c:	d05b      	beq.n	800cb56 <tcp_receive+0x716>
              pbuf_cat(recv_data, cseg->p);
 800ca9e:	f7fe f825 	bl	800aaec <pbuf_cat>
            cseg->p = NULL;
 800caa2:	2300      	movs	r3, #0
 800caa4:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800caa6:	68eb      	ldr	r3, [r5, #12]
 800caa8:	8998      	ldrh	r0, [r3, #12]
 800caaa:	f7fc ffb3 	bl	8009a14 <lwip_htons>
 800caae:	07c3      	lsls	r3, r0, #31
 800cab0:	d509      	bpl.n	800cac6 <tcp_receive+0x686>
            recv_flags |= TF_GOT_FIN;
 800cab2:	4a95      	ldr	r2, [pc, #596]	@ (800cd08 <tcp_receive+0x8c8>)
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800cab4:	7d21      	ldrb	r1, [r4, #20]
            recv_flags |= TF_GOT_FIN;
 800cab6:	7813      	ldrb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800cab8:	2904      	cmp	r1, #4
            recv_flags |= TF_GOT_FIN;
 800caba:	f043 0320 	orr.w	r3, r3, #32
 800cabe:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800cac0:	d101      	bne.n	800cac6 <tcp_receive+0x686>
              pcb->state = CLOSE_WAIT;
 800cac2:	2307      	movs	r3, #7
 800cac4:	7523      	strb	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 800cac6:	682b      	ldr	r3, [r5, #0]
          tcp_seg_free(cseg);
 800cac8:	4628      	mov	r0, r5
          pcb->ooseq = cseg->next;
 800caca:	6763      	str	r3, [r4, #116]	@ 0x74
          tcp_seg_free(cseg);
 800cacc:	f7fe fb8c 	bl	800b1e8 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800cad0:	6f65      	ldr	r5, [r4, #116]	@ 0x74
 800cad2:	2d00      	cmp	r5, #0
 800cad4:	d058      	beq.n	800cb88 <tcp_receive+0x748>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800cad6:	68ea      	ldr	r2, [r5, #12]
        while (pcb->ooseq != NULL &&
 800cad8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800cada:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 800cadc:	428b      	cmp	r3, r1
 800cade:	d153      	bne.n	800cb88 <tcp_receive+0x748>
          seqno = pcb->ooseq->tcphdr->seqno;
 800cae0:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800cae2:	8990      	ldrh	r0, [r2, #12]
 800cae4:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800cae8:	f7fc ff94 	bl	8009a14 <lwip_htons>
 800caec:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800caee:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800caf2:	f8b5 b008 	ldrh.w	fp, [r5, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800caf6:	bf18      	it	ne
 800caf8:	2001      	movne	r0, #1
 800cafa:	449a      	add	sl, r3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800cafc:	68eb      	ldr	r3, [r5, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800cafe:	4450      	add	r0, sl
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800cb00:	f8b4 a028 	ldrh.w	sl, [r4, #40]	@ 0x28
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800cb04:	6260      	str	r0, [r4, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800cb06:	8998      	ldrh	r0, [r3, #12]
 800cb08:	f7fc ff84 	bl	8009a14 <lwip_htons>
 800cb0c:	f010 0003 	ands.w	r0, r0, #3
 800cb10:	bf18      	it	ne
 800cb12:	2001      	movne	r0, #1
 800cb14:	4458      	add	r0, fp
 800cb16:	4582      	cmp	sl, r0
 800cb18:	d2a9      	bcs.n	800ca6e <tcp_receive+0x62e>
 800cb1a:	464b      	mov	r3, r9
 800cb1c:	f240 622b 	movw	r2, #1579	@ 0x62b
 800cb20:	4641      	mov	r1, r8
 800cb22:	4638      	mov	r0, r7
 800cb24:	f004 fcb8 	bl	8011498 <iprintf>
 800cb28:	e7a1      	b.n	800ca6e <tcp_receive+0x62e>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800cb2a:	4b79      	ldr	r3, [pc, #484]	@ (800cd10 <tcp_receive+0x8d0>)
 800cb2c:	f240 5294 	movw	r2, #1428	@ 0x594
 800cb30:	4978      	ldr	r1, [pc, #480]	@ (800cd14 <tcp_receive+0x8d4>)
 800cb32:	4876      	ldr	r0, [pc, #472]	@ (800cd0c <tcp_receive+0x8cc>)
 800cb34:	f004 fcb0 	bl	8011498 <iprintf>
 800cb38:	e686      	b.n	800c848 <tcp_receive+0x408>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800cb3a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800cb3e:	8e62      	ldrh	r2, [r4, #50]	@ 0x32
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800cb40:	1ac9      	subs	r1, r1, r3
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800cb42:	441a      	add	r2, r3
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800cb44:	f8a4 106a 	strh.w	r1, [r4, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800cb48:	b292      	uxth	r2, r2
 800cb4a:	4293      	cmp	r3, r2
 800cb4c:	f63f af24 	bhi.w	800c998 <tcp_receive+0x558>
 800cb50:	f8a4 2048 	strh.w	r2, [r4, #72]	@ 0x48
 800cb54:	e56b      	b.n	800c62e <tcp_receive+0x1ee>
              recv_data = cseg->p;
 800cb56:	6019      	str	r1, [r3, #0]
 800cb58:	e7a3      	b.n	800caa2 <tcp_receive+0x662>
          struct tcp_seg *next, *prev = NULL;
 800cb5a:	f04f 0800 	mov.w	r8, #0
              if (inseg.len > next->len) {
 800cb5e:	486e      	ldr	r0, [pc, #440]	@ (800cd18 <tcp_receive+0x8d8>)
 800cb60:	892b      	ldrh	r3, [r5, #8]
 800cb62:	8902      	ldrh	r2, [r0, #8]
 800cb64:	429a      	cmp	r2, r3
 800cb66:	f67f ace0 	bls.w	800c52a <tcp_receive+0xea>
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800cb6a:	f7fe fb4b 	bl	800b204 <tcp_seg_copy>
                if (cseg != NULL) {
 800cb6e:	2800      	cmp	r0, #0
 800cb70:	f43f acdb 	beq.w	800c52a <tcp_receive+0xea>
                  if (prev != NULL) {
 800cb74:	f1b8 0f00 	cmp.w	r8, #0
 800cb78:	f000 80c2 	beq.w	800cd00 <tcp_receive+0x8c0>
                    prev->next = cseg;
 800cb7c:	f8c8 0000 	str.w	r0, [r8]
                  tcp_oos_insert_segment(cseg, next);
 800cb80:	4629      	mov	r1, r5
 800cb82:	f7ff fb8b 	bl	800c29c <tcp_oos_insert_segment>
 800cb86:	e4d0      	b.n	800c52a <tcp_receive+0xea>
        tcp_ack(pcb);
 800cb88:	8b63      	ldrh	r3, [r4, #26]
 800cb8a:	07d8      	lsls	r0, r3, #31
 800cb8c:	d50a      	bpl.n	800cba4 <tcp_receive+0x764>
 800cb8e:	f023 0301 	bic.w	r3, r3, #1
 800cb92:	f043 0302 	orr.w	r3, r3, #2
 800cb96:	8363      	strh	r3, [r4, #26]
 800cb98:	e501      	b.n	800c59e <tcp_receive+0x15e>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800cb9a:	485f      	ldr	r0, [pc, #380]	@ (800cd18 <tcp_receive+0x8d8>)
 800cb9c:	f7fe fb32 	bl	800b204 <tcp_seg_copy>
 800cba0:	6760      	str	r0, [r4, #116]	@ 0x74
 800cba2:	e4c2      	b.n	800c52a <tcp_receive+0xea>
        tcp_ack(pcb);
 800cba4:	f043 0301 	orr.w	r3, r3, #1
 800cba8:	8363      	strh	r3, [r4, #26]
 800cbaa:	e4f8      	b.n	800c59e <tcp_receive+0x15e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800cbac:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800cbb0:	8998      	ldrh	r0, [r3, #12]
 800cbb2:	f7fc ff2f 	bl	8009a14 <lwip_htons>
 800cbb6:	07c5      	lsls	r5, r0, #31
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800cbb8:	f8d9 300c 	ldr.w	r3, [r9, #12]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800cbbc:	f100 8090 	bmi.w	800cce0 <tcp_receive+0x8a0>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800cbc0:	8998      	ldrh	r0, [r3, #12]
          inseg.len = (u16_t)pcb->rcv_wnd;
 800cbc2:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800cbc4:	f8a9 3008 	strh.w	r3, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800cbc8:	f7fc ff24 	bl	8009a14 <lwip_htons>
 800cbcc:	0780      	lsls	r0, r0, #30
            inseg.len -= 1;
 800cbce:	f8b9 1008 	ldrh.w	r1, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800cbd2:	d503      	bpl.n	800cbdc <tcp_receive+0x79c>
            inseg.len -= 1;
 800cbd4:	3901      	subs	r1, #1
 800cbd6:	b289      	uxth	r1, r1
 800cbd8:	f8a9 1008 	strh.w	r1, [r9, #8]
          pbuf_realloc(inseg.p, inseg.len);
 800cbdc:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800cbe0:	f7fd fee2 	bl	800a9a8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800cbe4:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800cbe8:	f8b9 5008 	ldrh.w	r5, [r9, #8]
 800cbec:	8998      	ldrh	r0, [r3, #12]
 800cbee:	f7fc ff11 	bl	8009a14 <lwip_htons>
 800cbf2:	f010 0303 	ands.w	r3, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800cbf6:	6832      	ldr	r2, [r6, #0]
          tcplen = TCP_TCPLEN(&inseg);
 800cbf8:	bf18      	it	ne
 800cbfa:	2301      	movne	r3, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800cbfc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          tcplen = TCP_TCPLEN(&inseg);
 800cbfe:	442b      	add	r3, r5
 800cc00:	b29b      	uxth	r3, r3
 800cc02:	803b      	strh	r3, [r7, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800cc04:	4413      	add	r3, r2
 800cc06:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 800cc08:	440a      	add	r2, r1
 800cc0a:	4293      	cmp	r3, r2
 800cc0c:	f43f ae61 	beq.w	800c8d2 <tcp_receive+0x492>
 800cc10:	4b3f      	ldr	r3, [pc, #252]	@ (800cd10 <tcp_receive+0x8d0>)
 800cc12:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800cc16:	4941      	ldr	r1, [pc, #260]	@ (800cd1c <tcp_receive+0x8dc>)
 800cc18:	483c      	ldr	r0, [pc, #240]	@ (800cd0c <tcp_receive+0x8cc>)
 800cc1a:	f004 fc3d 	bl	8011498 <iprintf>
 800cc1e:	e658      	b.n	800c8d2 <tcp_receive+0x492>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800cc20:	4b3b      	ldr	r3, [pc, #236]	@ (800cd10 <tcp_receive+0x8d0>)
 800cc22:	f240 6207 	movw	r2, #1543	@ 0x607
 800cc26:	493e      	ldr	r1, [pc, #248]	@ (800cd20 <tcp_receive+0x8e0>)
 800cc28:	4838      	ldr	r0, [pc, #224]	@ (800cd0c <tcp_receive+0x8cc>)
 800cc2a:	f004 fc35 	bl	8011498 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800cc2e:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800cc30:	883a      	ldrh	r2, [r7, #0]
 800cc32:	e6f8      	b.n	800ca26 <tcp_receive+0x5e6>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800cc34:	4838      	ldr	r0, [pc, #224]	@ (800cd18 <tcp_receive+0x8d8>)
 800cc36:	f7fe fae5 	bl	800b204 <tcp_seg_copy>
                  if (cseg != NULL) {
 800cc3a:	2800      	cmp	r0, #0
 800cc3c:	f43f ac75 	beq.w	800c52a <tcp_receive+0xea>
                    tcp_oos_insert_segment(cseg, next);
 800cc40:	4629      	mov	r1, r5
                    pcb->ooseq = cseg;
 800cc42:	6760      	str	r0, [r4, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800cc44:	f7ff fb2a 	bl	800c29c <tcp_oos_insert_segment>
 800cc48:	e46f      	b.n	800c52a <tcp_receive+0xea>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800cc4a:	f8b4 2048 	ldrh.w	r2, [r4, #72]	@ 0x48
 800cc4e:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800cc50:	4413      	add	r3, r2
 800cc52:	b29b      	uxth	r3, r3
 800cc54:	429a      	cmp	r2, r3
 800cc56:	d901      	bls.n	800cc5c <tcp_receive+0x81c>
 800cc58:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cc5c:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
                tcp_rexmit_fast(pcb);
 800cc60:	4620      	mov	r0, r4
 800cc62:	f001 fdc1 	bl	800e7e8 <tcp_rexmit_fast>
      if (!found_dupack) {
 800cc66:	e534      	b.n	800c6d2 <tcp_receive+0x292>
                TCP_SEQ_GT(seqno + tcplen,
 800cc68:	eba1 030c 	sub.w	r3, r1, ip
            if (next &&
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	dc01      	bgt.n	800cc74 <tcp_receive+0x834>
            pcb->ooseq = next;
 800cc70:	6765      	str	r5, [r4, #116]	@ 0x74
 800cc72:	e6d3      	b.n	800ca1c <tcp_receive+0x5dc>
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800cc74:	ebac 0c0e 	sub.w	ip, ip, lr
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800cc78:	f8d9 300c 	ldr.w	r3, [r9, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800cc7c:	f8a9 c008 	strh.w	ip, [r9, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800cc80:	8998      	ldrh	r0, [r3, #12]
 800cc82:	f7fc fec7 	bl	8009a14 <lwip_htons>
 800cc86:	0781      	lsls	r1, r0, #30
 800cc88:	d504      	bpl.n	800cc94 <tcp_receive+0x854>
                inseg.len -= 1;
 800cc8a:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 800cc8e:	3b01      	subs	r3, #1
 800cc90:	f8a9 3008 	strh.w	r3, [r9, #8]
              pbuf_realloc(inseg.p, inseg.len);
 800cc94:	f8b9 1008 	ldrh.w	r1, [r9, #8]
 800cc98:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800cc9c:	f7fd fe84 	bl	800a9a8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800cca0:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800cca4:	f8b9 8008 	ldrh.w	r8, [r9, #8]
 800cca8:	8998      	ldrh	r0, [r3, #12]
 800ccaa:	f7fc feb3 	bl	8009a14 <lwip_htons>
 800ccae:	f010 0303 	ands.w	r3, r0, #3
 800ccb2:	bf18      	it	ne
 800ccb4:	2301      	movne	r3, #1
 800ccb6:	eb08 0203 	add.w	r2, r8, r3
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800ccba:	68eb      	ldr	r3, [r5, #12]
              tcplen = TCP_TCPLEN(&inseg);
 800ccbc:	b292      	uxth	r2, r2
 800ccbe:	803a      	strh	r2, [r7, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800ccc0:	6859      	ldr	r1, [r3, #4]
 800ccc2:	6833      	ldr	r3, [r6, #0]
 800ccc4:	4413      	add	r3, r2
 800ccc6:	428b      	cmp	r3, r1
 800ccc8:	d0d2      	beq.n	800cc70 <tcp_receive+0x830>
 800ccca:	4b11      	ldr	r3, [pc, #68]	@ (800cd10 <tcp_receive+0x8d0>)
 800cccc:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800ccd0:	4914      	ldr	r1, [pc, #80]	@ (800cd24 <tcp_receive+0x8e4>)
 800ccd2:	480e      	ldr	r0, [pc, #56]	@ (800cd0c <tcp_receive+0x8cc>)
 800ccd4:	f004 fbe0 	bl	8011498 <iprintf>
        pcb->rcv_nxt = seqno + tcplen;
 800ccd8:	883a      	ldrh	r2, [r7, #0]
 800ccda:	6831      	ldr	r1, [r6, #0]
 800ccdc:	4411      	add	r1, r2
 800ccde:	e7c7      	b.n	800cc70 <tcp_receive+0x830>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800cce0:	899d      	ldrh	r5, [r3, #12]
 800cce2:	4628      	mov	r0, r5
 800cce4:	f425 557c 	bic.w	r5, r5, #16128	@ 0x3f00
 800cce8:	f7fc fe94 	bl	8009a14 <lwip_htons>
 800ccec:	f000 003e 	and.w	r0, r0, #62	@ 0x3e
 800ccf0:	f7fc fe90 	bl	8009a14 <lwip_htons>
 800ccf4:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800ccf8:	4328      	orrs	r0, r5
 800ccfa:	8198      	strh	r0, [r3, #12]
 800ccfc:	b280      	uxth	r0, r0
 800ccfe:	e760      	b.n	800cbc2 <tcp_receive+0x782>
                    pcb->ooseq = cseg;
 800cd00:	6760      	str	r0, [r4, #116]	@ 0x74
 800cd02:	e73d      	b.n	800cb80 <tcp_receive+0x740>
 800cd04:	24009d10 	.word	0x24009d10
 800cd08:	24009d14 	.word	0x24009d14
 800cd0c:	0801241c 	.word	0x0801241c
 800cd10:	08013d4c 	.word	0x08013d4c
 800cd14:	08013e0c 	.word	0x08013e0c
 800cd18:	24009d34 	.word	0x24009d34
 800cd1c:	08013e3c 	.word	0x08013e3c
 800cd20:	08013eb0 	.word	0x08013eb0
 800cd24:	08013e74 	.word	0x08013e74
 800cd28:	08013ed0 	.word	0x08013ed0
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800cd2c:	68db      	ldr	r3, [r3, #12]
 800cd2e:	899d      	ldrh	r5, [r3, #12]
 800cd30:	4628      	mov	r0, r5
 800cd32:	f425 557c 	bic.w	r5, r5, #16128	@ 0x3f00
 800cd36:	f7fc fe6d 	bl	8009a14 <lwip_htons>
 800cd3a:	f000 003e 	and.w	r0, r0, #62	@ 0x3e
 800cd3e:	f7fc fe69 	bl	8009a14 <lwip_htons>
 800cd42:	f8d8 3000 	ldr.w	r3, [r8]
 800cd46:	ea40 0205 	orr.w	r2, r0, r5
 800cd4a:	68d9      	ldr	r1, [r3, #12]
 800cd4c:	818a      	strh	r2, [r1, #12]
 800cd4e:	e545      	b.n	800c7dc <tcp_receive+0x39c>
 800cd50:	f8df 9004 	ldr.w	r9, [pc, #4]	@ 800cd58 <tcp_receive+0x918>
 800cd54:	e5ab      	b.n	800c8ae <tcp_receive+0x46e>
 800cd56:	bf00      	nop
 800cd58:	24009d34 	.word	0x24009d34

0800cd5c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800cd5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800cd60:	4604      	mov	r4, r0
 800cd62:	2800      	cmp	r0, #0
 800cd64:	f000 8088 	beq.w	800ce78 <tcp_parseopt+0x11c>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800cd68:	4b51      	ldr	r3, [pc, #324]	@ (800ceb0 <tcp_parseopt+0x154>)
 800cd6a:	881d      	ldrh	r5, [r3, #0]
 800cd6c:	2d00      	cmp	r5, #0
 800cd6e:	d036      	beq.n	800cdde <tcp_parseopt+0x82>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800cd70:	4a50      	ldr	r2, [pc, #320]	@ (800ceb4 <tcp_parseopt+0x158>)
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800cd72:	2300      	movs	r3, #0
 800cd74:	4e50      	ldr	r6, [pc, #320]	@ (800ceb8 <tcp_parseopt+0x15c>)
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800cd76:	6810      	ldr	r0, [r2, #0]
 800cd78:	4619      	mov	r1, r3
 800cd7a:	4a50      	ldr	r2, [pc, #320]	@ (800cebc <tcp_parseopt+0x160>)
    return opts[optidx];
 800cd7c:	4f50      	ldr	r7, [pc, #320]	@ (800cec0 <tcp_parseopt+0x164>)
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800cd7e:	f8b2 c000 	ldrh.w	ip, [r2]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800cd82:	8033      	strh	r3, [r6, #0]
tcp_parseopt(struct tcp_pcb *pcb)
 800cd84:	468e      	mov	lr, r1
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800cd86:	428d      	cmp	r5, r1
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800cd88:	fa1f f88e 	uxth.w	r8, lr
  u16_t optidx = tcp_optidx++;
 800cd8c:	f101 0201 	add.w	r2, r1, #1
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800cd90:	f240 8084 	bls.w	800ce9c <tcp_parseopt+0x140>
  u16_t optidx = tcp_optidx++;
 800cd94:	b292      	uxth	r2, r2
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800cd96:	b1c0      	cbz	r0, 800cdca <tcp_parseopt+0x6e>
 800cd98:	45c4      	cmp	ip, r8
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800cd9a:	eba2 030c 	sub.w	r3, r2, ip
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800cd9e:	d814      	bhi.n	800cdca <tcp_parseopt+0x6e>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800cda0:	3b01      	subs	r3, #1
    return tcphdr_opt2[idx];
 800cda2:	b2db      	uxtb	r3, r3
 800cda4:	5cc3      	ldrb	r3, [r0, r3]
      u8_t opt = tcp_get_next_optbyte();
      switch (opt) {
 800cda6:	2b01      	cmp	r3, #1
 800cda8:	d014      	beq.n	800cdd4 <tcp_parseopt+0x78>
 800cdaa:	2b02      	cmp	r3, #2
 800cdac:	d019      	beq.n	800cde2 <tcp_parseopt+0x86>
 800cdae:	b1ab      	cbz	r3, 800cddc <tcp_parseopt+0x80>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800cdb0:	b108      	cbz	r0, 800cdb6 <tcp_parseopt+0x5a>
 800cdb2:	4562      	cmp	r2, ip
 800cdb4:	d24b      	bcs.n	800ce4e <tcp_parseopt+0xf2>
    return opts[optidx];
 800cdb6:	4b42      	ldr	r3, [pc, #264]	@ (800cec0 <tcp_parseopt+0x164>)
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	4413      	add	r3, r2
 800cdbc:	7d1b      	ldrb	r3, [r3, #20]
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
          if (data < 2) {
 800cdbe:	2b01      	cmp	r3, #1
 800cdc0:	d972      	bls.n	800cea8 <tcp_parseopt+0x14c>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800cdc2:	440b      	add	r3, r1
 800cdc4:	b299      	uxth	r1, r3
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800cdc6:	2301      	movs	r3, #1
 800cdc8:	e7dc      	b.n	800cd84 <tcp_parseopt+0x28>
    return opts[optidx];
 800cdca:	683b      	ldr	r3, [r7, #0]
 800cdcc:	4473      	add	r3, lr
 800cdce:	7d1b      	ldrb	r3, [r3, #20]
      switch (opt) {
 800cdd0:	2b01      	cmp	r3, #1
 800cdd2:	d1ea      	bne.n	800cdaa <tcp_parseopt+0x4e>
 800cdd4:	f10e 0e01 	add.w	lr, lr, #1
  u16_t optidx = tcp_optidx++;
 800cdd8:	4611      	mov	r1, r2
 800cdda:	e7d4      	b.n	800cd86 <tcp_parseopt+0x2a>
 800cddc:	8032      	strh	r2, [r6, #0]
      }
    }
  }
}
 800cdde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  u16_t optidx = tcp_optidx++;
 800cde2:	1c8b      	adds	r3, r1, #2
 800cde4:	b29b      	uxth	r3, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800cde6:	b108      	cbz	r0, 800cdec <tcp_parseopt+0x90>
 800cde8:	4562      	cmp	r2, ip
 800cdea:	d22b      	bcs.n	800ce44 <tcp_parseopt+0xe8>
    return opts[optidx];
 800cdec:	f8df e0d0 	ldr.w	lr, [pc, #208]	@ 800cec0 <tcp_parseopt+0x164>
 800cdf0:	f8de e000 	ldr.w	lr, [lr]
 800cdf4:	4472      	add	r2, lr
 800cdf6:	7d12      	ldrb	r2, [r2, #20]
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800cdf8:	2a04      	cmp	r2, #4
 800cdfa:	d153      	bne.n	800cea4 <tcp_parseopt+0x148>
 800cdfc:	1c5a      	adds	r2, r3, #1
 800cdfe:	42aa      	cmp	r2, r5
 800ce00:	da50      	bge.n	800cea4 <tcp_parseopt+0x148>
  u16_t optidx = tcp_optidx++;
 800ce02:	1cca      	adds	r2, r1, #3
 800ce04:	3104      	adds	r1, #4
 800ce06:	b292      	uxth	r2, r2
 800ce08:	b289      	uxth	r1, r1
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ce0a:	2800      	cmp	r0, #0
 800ce0c:	d03c      	beq.n	800ce88 <tcp_parseopt+0x12c>
 800ce0e:	459c      	cmp	ip, r3
 800ce10:	d822      	bhi.n	800ce58 <tcp_parseopt+0xfc>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800ce12:	eba3 030c 	sub.w	r3, r3, ip
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ce16:	4594      	cmp	ip, r2
    return tcphdr_opt2[idx];
 800ce18:	b2db      	uxtb	r3, r3
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800ce1a:	f810 e003 	ldrb.w	lr, [r0, r3]
 800ce1e:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ce22:	d924      	bls.n	800ce6e <tcp_parseopt+0x112>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800ce24:	4b26      	ldr	r3, [pc, #152]	@ (800cec0 <tcp_parseopt+0x164>)
 800ce26:	f8d3 8000 	ldr.w	r8, [r3]
    return opts[optidx];
 800ce2a:	4490      	add	r8, r2
 800ce2c:	f898 3014 	ldrb.w	r3, [r8, #20]
          mss |= tcp_get_next_optbyte();
 800ce30:	ea43 030e 	orr.w	r3, r3, lr
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800ce34:	1e5a      	subs	r2, r3, #1
 800ce36:	f5b2 7f06 	cmp.w	r2, #536	@ 0x218
 800ce3a:	bf28      	it	cs
 800ce3c:	f44f 7306 	movcs.w	r3, #536	@ 0x218
 800ce40:	8663      	strh	r3, [r4, #50]	@ 0x32
          break;
 800ce42:	e7c0      	b.n	800cdc6 <tcp_parseopt+0x6a>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800ce44:	eba2 020c 	sub.w	r2, r2, ip
    return tcphdr_opt2[idx];
 800ce48:	b2d2      	uxtb	r2, r2
 800ce4a:	5c82      	ldrb	r2, [r0, r2]
 800ce4c:	e7d4      	b.n	800cdf8 <tcp_parseopt+0x9c>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800ce4e:	eba2 020c 	sub.w	r2, r2, ip
    return tcphdr_opt2[idx];
 800ce52:	b2d2      	uxtb	r2, r2
 800ce54:	5c83      	ldrb	r3, [r0, r2]
 800ce56:	e7b2      	b.n	800cdbe <tcp_parseopt+0x62>
    return opts[optidx];
 800ce58:	f8df e064 	ldr.w	lr, [pc, #100]	@ 800cec0 <tcp_parseopt+0x164>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ce5c:	4594      	cmp	ip, r2
    return opts[optidx];
 800ce5e:	f8de e000 	ldr.w	lr, [lr]
 800ce62:	4473      	add	r3, lr
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800ce64:	f893 e014 	ldrb.w	lr, [r3, #20]
 800ce68:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ce6c:	d8da      	bhi.n	800ce24 <tcp_parseopt+0xc8>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800ce6e:	eba2 020c 	sub.w	r2, r2, ip
    return tcphdr_opt2[idx];
 800ce72:	b2d2      	uxtb	r2, r2
 800ce74:	5c83      	ldrb	r3, [r0, r2]
 800ce76:	e7db      	b.n	800ce30 <tcp_parseopt+0xd4>
  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800ce78:	4b12      	ldr	r3, [pc, #72]	@ (800cec4 <tcp_parseopt+0x168>)
 800ce7a:	f240 727d 	movw	r2, #1917	@ 0x77d
 800ce7e:	4912      	ldr	r1, [pc, #72]	@ (800cec8 <tcp_parseopt+0x16c>)
 800ce80:	4812      	ldr	r0, [pc, #72]	@ (800cecc <tcp_parseopt+0x170>)
 800ce82:	f004 fb09 	bl	8011498 <iprintf>
 800ce86:	e76f      	b.n	800cd68 <tcp_parseopt+0xc>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800ce88:	f8df e034 	ldr.w	lr, [pc, #52]	@ 800cec0 <tcp_parseopt+0x164>
 800ce8c:	f8de 8000 	ldr.w	r8, [lr]
    return opts[optidx];
 800ce90:	4443      	add	r3, r8
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800ce92:	f893 e014 	ldrb.w	lr, [r3, #20]
 800ce96:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ce9a:	e7c6      	b.n	800ce2a <tcp_parseopt+0xce>
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d09e      	beq.n	800cdde <tcp_parseopt+0x82>
 800cea0:	8031      	strh	r1, [r6, #0]
 800cea2:	e79c      	b.n	800cdde <tcp_parseopt+0x82>
 800cea4:	8033      	strh	r3, [r6, #0]
 800cea6:	e79a      	b.n	800cdde <tcp_parseopt+0x82>
  u16_t optidx = tcp_optidx++;
 800cea8:	3102      	adds	r1, #2
 800ceaa:	8031      	strh	r1, [r6, #0]
 800ceac:	e797      	b.n	800cdde <tcp_parseopt+0x82>
 800ceae:	bf00      	nop
 800ceb0:	24009d2e 	.word	0x24009d2e
 800ceb4:	24009d28 	.word	0x24009d28
 800ceb8:	24009d24 	.word	0x24009d24
 800cebc:	24009d2c 	.word	0x24009d2c
 800cec0:	24009d30 	.word	0x24009d30
 800cec4:	08013d4c 	.word	0x08013d4c
 800cec8:	08013ef8 	.word	0x08013ef8
 800cecc:	0801241c 	.word	0x0801241c

0800ced0 <tcp_input>:
{
 800ced0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800ced4:	4604      	mov	r4, r0
{
 800ced6:	b087      	sub	sp, #28
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800ced8:	2800      	cmp	r0, #0
 800ceda:	f000 80d5 	beq.w	800d088 <tcp_input+0x1b8>
  if (p->len < TCP_HLEN) {
 800cede:	8963      	ldrh	r3, [r4, #10]
  tcphdr = (struct tcp_hdr *)p->payload;
 800cee0:	4e6d      	ldr	r6, [pc, #436]	@ (800d098 <tcp_input+0x1c8>)
 800cee2:	6862      	ldr	r2, [r4, #4]
  if (p->len < TCP_HLEN) {
 800cee4:	2b13      	cmp	r3, #19
  tcphdr = (struct tcp_hdr *)p->payload;
 800cee6:	6032      	str	r2, [r6, #0]
  if (p->len < TCP_HLEN) {
 800cee8:	d805      	bhi.n	800cef6 <tcp_input+0x26>
  pbuf_free(p);
 800ceea:	4620      	mov	r0, r4
}
 800ceec:	b007      	add	sp, #28
 800ceee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800cef2:	f7fd bc45 	b.w	800a780 <pbuf_free>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800cef6:	4f69      	ldr	r7, [pc, #420]	@ (800d09c <tcp_input+0x1cc>)
 800cef8:	6839      	ldr	r1, [r7, #0]
 800cefa:	6978      	ldr	r0, [r7, #20]
 800cefc:	f003 fac4 	bl	8010488 <ip4_addr_isbroadcast_u32>
 800cf00:	4605      	mov	r5, r0
 800cf02:	2800      	cmp	r0, #0
 800cf04:	d1f1      	bne.n	800ceea <tcp_input+0x1a>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800cf06:	697b      	ldr	r3, [r7, #20]
 800cf08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800cf0c:	2be0      	cmp	r3, #224	@ 0xe0
 800cf0e:	d0ec      	beq.n	800ceea <tcp_input+0x1a>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800cf10:	6833      	ldr	r3, [r6, #0]
 800cf12:	8998      	ldrh	r0, [r3, #12]
 800cf14:	f7fc fd7e 	bl	8009a14 <lwip_htons>
 800cf18:	0a81      	lsrs	r1, r0, #10
 800cf1a:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800cf1e:	2913      	cmp	r1, #19
 800cf20:	d9e3      	bls.n	800ceea <tcp_input+0x1a>
 800cf22:	8923      	ldrh	r3, [r4, #8]
 800cf24:	428b      	cmp	r3, r1
 800cf26:	d3e0      	bcc.n	800ceea <tcp_input+0x1a>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800cf28:	f1a1 0314 	sub.w	r3, r1, #20
  if (p->len >= hdrlen_bytes) {
 800cf2c:	8962      	ldrh	r2, [r4, #10]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800cf2e:	f8df 91a0 	ldr.w	r9, [pc, #416]	@ 800d0d0 <tcp_input+0x200>
 800cf32:	b29b      	uxth	r3, r3
  tcphdr_opt2 = NULL;
 800cf34:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d0d4 <tcp_input+0x204>
  if (p->len >= hdrlen_bytes) {
 800cf38:	428a      	cmp	r2, r1
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800cf3a:	f8a9 3000 	strh.w	r3, [r9]
  tcphdr_opt2 = NULL;
 800cf3e:	f8c8 5000 	str.w	r5, [r8]
  if (p->len >= hdrlen_bytes) {
 800cf42:	f080 819d 	bcs.w	800d280 <tcp_input+0x3b0>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800cf46:	6823      	ldr	r3, [r4, #0]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	f000 8379 	beq.w	800d640 <tcp_input+0x770>
    pbuf_remove_header(p, TCP_HLEN);
 800cf4e:	2114      	movs	r1, #20
 800cf50:	4620      	mov	r0, r4
 800cf52:	f7fd fbb3 	bl	800a6bc <pbuf_remove_header>
    tcphdr_opt1len = p->len;
 800cf56:	8965      	ldrh	r5, [r4, #10]
 800cf58:	4b51      	ldr	r3, [pc, #324]	@ (800d0a0 <tcp_input+0x1d0>)
    pbuf_remove_header(p, tcphdr_opt1len);
 800cf5a:	4620      	mov	r0, r4
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800cf5c:	f8b9 a000 	ldrh.w	sl, [r9]
    pbuf_remove_header(p, tcphdr_opt1len);
 800cf60:	4629      	mov	r1, r5
    tcphdr_opt1len = p->len;
 800cf62:	801d      	strh	r5, [r3, #0]
    pbuf_remove_header(p, tcphdr_opt1len);
 800cf64:	f7fd fbaa 	bl	800a6bc <pbuf_remove_header>
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800cf68:	ebaa 0905 	sub.w	r9, sl, r5
    if (opt2len > p->next->len) {
 800cf6c:	6820      	ldr	r0, [r4, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800cf6e:	fa1f f989 	uxth.w	r9, r9
    if (opt2len > p->next->len) {
 800cf72:	8943      	ldrh	r3, [r0, #10]
 800cf74:	454b      	cmp	r3, r9
 800cf76:	d3b8      	bcc.n	800ceea <tcp_input+0x1a>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800cf78:	6843      	ldr	r3, [r0, #4]
    pbuf_remove_header(p->next, opt2len);
 800cf7a:	4649      	mov	r1, r9
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800cf7c:	f8c8 3000 	str.w	r3, [r8]
    pbuf_remove_header(p->next, opt2len);
 800cf80:	f7fd fb9c 	bl	800a6bc <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800cf84:	8923      	ldrh	r3, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800cf86:	8962      	ldrh	r2, [r4, #10]
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800cf88:	442b      	add	r3, r5
 800cf8a:	eba3 030a 	sub.w	r3, r3, sl
 800cf8e:	b29b      	uxth	r3, r3
 800cf90:	8123      	strh	r3, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800cf92:	2a00      	cmp	r2, #0
 800cf94:	f040 835b 	bne.w	800d64e <tcp_input+0x77e>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800cf98:	6822      	ldr	r2, [r4, #0]
 800cf9a:	8912      	ldrh	r2, [r2, #8]
 800cf9c:	429a      	cmp	r2, r3
 800cf9e:	d005      	beq.n	800cfac <tcp_input+0xdc>
 800cfa0:	4b40      	ldr	r3, [pc, #256]	@ (800d0a4 <tcp_input+0x1d4>)
 800cfa2:	22e0      	movs	r2, #224	@ 0xe0
 800cfa4:	4940      	ldr	r1, [pc, #256]	@ (800d0a8 <tcp_input+0x1d8>)
 800cfa6:	4841      	ldr	r0, [pc, #260]	@ (800d0ac <tcp_input+0x1dc>)
 800cfa8:	f004 fa76 	bl	8011498 <iprintf>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800cfac:	6835      	ldr	r5, [r6, #0]
 800cfae:	8828      	ldrh	r0, [r5, #0]
 800cfb0:	f7fc fd30 	bl	8009a14 <lwip_htons>
 800cfb4:	8028      	strh	r0, [r5, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800cfb6:	6835      	ldr	r5, [r6, #0]
 800cfb8:	8868      	ldrh	r0, [r5, #2]
 800cfba:	f7fc fd2b 	bl	8009a14 <lwip_htons>
 800cfbe:	8068      	strh	r0, [r5, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800cfc0:	6835      	ldr	r5, [r6, #0]
 800cfc2:	6868      	ldr	r0, [r5, #4]
 800cfc4:	f7fc fd2a 	bl	8009a1c <lwip_htonl>
 800cfc8:	4b39      	ldr	r3, [pc, #228]	@ (800d0b0 <tcp_input+0x1e0>)
 800cfca:	6068      	str	r0, [r5, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800cfcc:	6835      	ldr	r5, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800cfce:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800cfd0:	68a8      	ldr	r0, [r5, #8]
 800cfd2:	f7fc fd23 	bl	8009a1c <lwip_htonl>
 800cfd6:	4b37      	ldr	r3, [pc, #220]	@ (800d0b4 <tcp_input+0x1e4>)
 800cfd8:	60a8      	str	r0, [r5, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800cfda:	6835      	ldr	r5, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800cfdc:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800cfde:	89e8      	ldrh	r0, [r5, #14]
 800cfe0:	f7fc fd18 	bl	8009a14 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 800cfe4:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800cfe6:	81e8      	strh	r0, [r5, #14]
  flags = TCPH_FLAGS(tcphdr);
 800cfe8:	8998      	ldrh	r0, [r3, #12]
 800cfea:	f7fc fd13 	bl	8009a14 <lwip_htons>
 800cfee:	4932      	ldr	r1, [pc, #200]	@ (800d0b8 <tcp_input+0x1e8>)
 800cff0:	f000 033f 	and.w	r3, r0, #63	@ 0x3f
  tcplen = p->tot_len;
 800cff4:	8922      	ldrh	r2, [r4, #8]
  flags = TCPH_FLAGS(tcphdr);
 800cff6:	700b      	strb	r3, [r1, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800cff8:	0781      	lsls	r1, r0, #30
 800cffa:	f040 8147 	bne.w	800d28c <tcp_input+0x3bc>
  tcplen = p->tot_len;
 800cffe:	4b2f      	ldr	r3, [pc, #188]	@ (800d0bc <tcp_input+0x1ec>)
 800d000:	9305      	str	r3, [sp, #20]
 800d002:	801a      	strh	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d004:	4b2e      	ldr	r3, [pc, #184]	@ (800d0c0 <tcp_input+0x1f0>)
 800d006:	681d      	ldr	r5, [r3, #0]
 800d008:	2d00      	cmp	r5, #0
 800d00a:	f000 80e8 	beq.w	800d1de <tcp_input+0x30e>
  prev = NULL;
 800d00e:	f04f 0800 	mov.w	r8, #0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800d012:	f8df a090 	ldr.w	sl, [pc, #144]	@ 800d0a4 <tcp_input+0x1d4>
 800d016:	f8df b0c0 	ldr.w	fp, [pc, #192]	@ 800d0d8 <tcp_input+0x208>
 800d01a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800d0ac <tcp_input+0x1dc>
 800d01e:	e017      	b.n	800d050 <tcp_input+0x180>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800d020:	2b0a      	cmp	r3, #10
 800d022:	d021      	beq.n	800d068 <tcp_input+0x198>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800d024:	2b01      	cmp	r3, #1
 800d026:	d028      	beq.n	800d07a <tcp_input+0x1aa>
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d028:	7a2a      	ldrb	r2, [r5, #8]
 800d02a:	b132      	cbz	r2, 800d03a <tcp_input+0x16a>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d032:	3301      	adds	r3, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d034:	b2db      	uxtb	r3, r3
 800d036:	429a      	cmp	r2, r3
 800d038:	d104      	bne.n	800d044 <tcp_input+0x174>
    if (pcb->remote_port == tcphdr->src &&
 800d03a:	6833      	ldr	r3, [r6, #0]
 800d03c:	8b29      	ldrh	r1, [r5, #24]
 800d03e:	881a      	ldrh	r2, [r3, #0]
 800d040:	4291      	cmp	r1, r2
 800d042:	d04b      	beq.n	800d0dc <tcp_input+0x20c>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d044:	68eb      	ldr	r3, [r5, #12]
 800d046:	46a8      	mov	r8, r5
 800d048:	2b00      	cmp	r3, #0
 800d04a:	f000 80c8 	beq.w	800d1de <tcp_input+0x30e>
 800d04e:	461d      	mov	r5, r3
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800d050:	7d2b      	ldrb	r3, [r5, #20]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d1e4      	bne.n	800d020 <tcp_input+0x150>
 800d056:	4653      	mov	r3, sl
 800d058:	22fb      	movs	r2, #251	@ 0xfb
 800d05a:	4659      	mov	r1, fp
 800d05c:	4648      	mov	r0, r9
 800d05e:	f004 fa1b 	bl	8011498 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800d062:	7d2b      	ldrb	r3, [r5, #20]
 800d064:	2b0a      	cmp	r3, #10
 800d066:	d1dd      	bne.n	800d024 <tcp_input+0x154>
 800d068:	4653      	mov	r3, sl
 800d06a:	22fc      	movs	r2, #252	@ 0xfc
 800d06c:	4915      	ldr	r1, [pc, #84]	@ (800d0c4 <tcp_input+0x1f4>)
 800d06e:	4648      	mov	r0, r9
 800d070:	f004 fa12 	bl	8011498 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800d074:	7d2b      	ldrb	r3, [r5, #20]
 800d076:	2b01      	cmp	r3, #1
 800d078:	d1d6      	bne.n	800d028 <tcp_input+0x158>
 800d07a:	4653      	mov	r3, sl
 800d07c:	22fd      	movs	r2, #253	@ 0xfd
 800d07e:	4912      	ldr	r1, [pc, #72]	@ (800d0c8 <tcp_input+0x1f8>)
 800d080:	4648      	mov	r0, r9
 800d082:	f004 fa09 	bl	8011498 <iprintf>
 800d086:	e7cf      	b.n	800d028 <tcp_input+0x158>
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800d088:	4b06      	ldr	r3, [pc, #24]	@ (800d0a4 <tcp_input+0x1d4>)
 800d08a:	2283      	movs	r2, #131	@ 0x83
 800d08c:	490f      	ldr	r1, [pc, #60]	@ (800d0cc <tcp_input+0x1fc>)
 800d08e:	4807      	ldr	r0, [pc, #28]	@ (800d0ac <tcp_input+0x1dc>)
 800d090:	f004 fa02 	bl	8011498 <iprintf>
 800d094:	e723      	b.n	800cede <tcp_input+0xe>
 800d096:	bf00      	nop
 800d098:	24009d30 	.word	0x24009d30
 800d09c:	24006bf8 	.word	0x24006bf8
 800d0a0:	24009d2c 	.word	0x24009d2c
 800d0a4:	08013d4c 	.word	0x08013d4c
 800d0a8:	08013f48 	.word	0x08013f48
 800d0ac:	0801241c 	.word	0x0801241c
 800d0b0:	24009d20 	.word	0x24009d20
 800d0b4:	24009d1c 	.word	0x24009d1c
 800d0b8:	24009d15 	.word	0x24009d15
 800d0bc:	24009d16 	.word	0x24009d16
 800d0c0:	24009cfc 	.word	0x24009cfc
 800d0c4:	08013f90 	.word	0x08013f90
 800d0c8:	08013fbc 	.word	0x08013fbc
 800d0cc:	08013f14 	.word	0x08013f14
 800d0d0:	24009d2e 	.word	0x24009d2e
 800d0d4:	24009d28 	.word	0x24009d28
 800d0d8:	08013f68 	.word	0x08013f68
    if (pcb->remote_port == tcphdr->src &&
 800d0dc:	885b      	ldrh	r3, [r3, #2]
 800d0de:	8aea      	ldrh	r2, [r5, #22]
 800d0e0:	429a      	cmp	r2, r3
 800d0e2:	d1af      	bne.n	800d044 <tcp_input+0x174>
        pcb->local_port == tcphdr->dest &&
 800d0e4:	686a      	ldr	r2, [r5, #4]
 800d0e6:	693b      	ldr	r3, [r7, #16]
 800d0e8:	429a      	cmp	r2, r3
 800d0ea:	d1ab      	bne.n	800d044 <tcp_input+0x174>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d0ec:	682a      	ldr	r2, [r5, #0]
 800d0ee:	697b      	ldr	r3, [r7, #20]
 800d0f0:	429a      	cmp	r2, r3
 800d0f2:	d1a7      	bne.n	800d044 <tcp_input+0x174>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800d0f4:	68eb      	ldr	r3, [r5, #12]
 800d0f6:	42ab      	cmp	r3, r5
 800d0f8:	f000 843d 	beq.w	800d976 <tcp_input+0xaa6>
      if (prev != NULL) {
 800d0fc:	f1b8 0f00 	cmp.w	r8, #0
 800d100:	d009      	beq.n	800d116 <tcp_input+0x246>
        pcb->next = tcp_active_pcbs;
 800d102:	4a6f      	ldr	r2, [pc, #444]	@ (800d2c0 <tcp_input+0x3f0>)
        prev->next = pcb->next;
 800d104:	f8c8 300c 	str.w	r3, [r8, #12]
        pcb->next = tcp_active_pcbs;
 800d108:	6813      	ldr	r3, [r2, #0]
        tcp_active_pcbs = pcb;
 800d10a:	6015      	str	r5, [r2, #0]
        pcb->next = tcp_active_pcbs;
 800d10c:	60eb      	str	r3, [r5, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800d10e:	68eb      	ldr	r3, [r5, #12]
 800d110:	42ab      	cmp	r3, r5
 800d112:	f000 843e 	beq.w	800d992 <tcp_input+0xac2>
    inseg.next = NULL;
 800d116:	2300      	movs	r3, #0
 800d118:	4f6a      	ldr	r7, [pc, #424]	@ (800d2c4 <tcp_input+0x3f4>)
    recv_data = NULL;
 800d11a:	f8df 81c4 	ldr.w	r8, [pc, #452]	@ 800d2e0 <tcp_input+0x410>
    recv_flags = 0;
 800d11e:	f8df 91c4 	ldr.w	r9, [pc, #452]	@ 800d2e4 <tcp_input+0x414>
    recv_acked = 0;
 800d122:	f8df a1c4 	ldr.w	sl, [pc, #452]	@ 800d2e8 <tcp_input+0x418>
    inseg.next = NULL;
 800d126:	603b      	str	r3, [r7, #0]
    recv_data = NULL;
 800d128:	f8c8 3000 	str.w	r3, [r8]
    recv_flags = 0;
 800d12c:	f889 3000 	strb.w	r3, [r9]
    recv_acked = 0;
 800d130:	f8aa 3000 	strh.w	r3, [sl]
    if (flags & TCP_PSH) {
 800d134:	4b64      	ldr	r3, [pc, #400]	@ (800d2c8 <tcp_input+0x3f8>)
    inseg.len = p->tot_len;
 800d136:	8922      	ldrh	r2, [r4, #8]
    if (flags & TCP_PSH) {
 800d138:	781b      	ldrb	r3, [r3, #0]
    inseg.len = p->tot_len;
 800d13a:	813a      	strh	r2, [r7, #8]
    if (flags & TCP_PSH) {
 800d13c:	0719      	lsls	r1, r3, #28
    inseg.tcphdr = tcphdr;
 800d13e:	6832      	ldr	r2, [r6, #0]
    inseg.p = p;
 800d140:	607c      	str	r4, [r7, #4]
    inseg.tcphdr = tcphdr;
 800d142:	60fa      	str	r2, [r7, #12]
    if (flags & TCP_PSH) {
 800d144:	d503      	bpl.n	800d14e <tcp_input+0x27e>
      p->flags |= PBUF_FLAG_PUSH;
 800d146:	7b62      	ldrb	r2, [r4, #13]
 800d148:	f042 0201 	orr.w	r2, r2, #1
 800d14c:	7362      	strb	r2, [r4, #13]
    if (pcb->refused_data != NULL) {
 800d14e:	6faa      	ldr	r2, [r5, #120]	@ 0x78
 800d150:	2a00      	cmp	r2, #0
 800d152:	f000 826c 	beq.w	800d62e <tcp_input+0x75e>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d156:	4628      	mov	r0, r5
 800d158:	f7fe ff92 	bl	800c080 <tcp_process_refused_data>
 800d15c:	300d      	adds	r0, #13
 800d15e:	f000 8269 	beq.w	800d634 <tcp_input+0x764>
 800d162:	6fab      	ldr	r3, [r5, #120]	@ 0x78
 800d164:	b123      	cbz	r3, 800d170 <tcp_input+0x2a0>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d166:	9b05      	ldr	r3, [sp, #20]
 800d168:	881b      	ldrh	r3, [r3, #0]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	f040 8262 	bne.w	800d634 <tcp_input+0x764>
  if (flags & TCP_RST) {
 800d170:	4b55      	ldr	r3, [pc, #340]	@ (800d2c8 <tcp_input+0x3f8>)
    tcp_input_pcb = pcb;
 800d172:	4c56      	ldr	r4, [pc, #344]	@ (800d2cc <tcp_input+0x3fc>)
  if (flags & TCP_RST) {
 800d174:	781b      	ldrb	r3, [r3, #0]
    tcp_input_pcb = pcb;
 800d176:	6025      	str	r5, [r4, #0]
  if (flags & TCP_RST) {
 800d178:	075a      	lsls	r2, r3, #29
 800d17a:	f140 814d 	bpl.w	800d418 <tcp_input+0x548>
    if (pcb->state == SYN_SENT) {
 800d17e:	7d29      	ldrb	r1, [r5, #20]
 800d180:	2902      	cmp	r1, #2
 800d182:	f000 82d7 	beq.w	800d734 <tcp_input+0x864>
      if (seqno == pcb->rcv_nxt) {
 800d186:	4b52      	ldr	r3, [pc, #328]	@ (800d2d0 <tcp_input+0x400>)
 800d188:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	429a      	cmp	r2, r3
 800d18e:	f000 8409 	beq.w	800d9a4 <tcp_input+0xad4>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d192:	1a9b      	subs	r3, r3, r2
 800d194:	d404      	bmi.n	800d1a0 <tcp_input+0x2d0>
 800d196:	8d2a      	ldrh	r2, [r5, #40]	@ 0x28
 800d198:	1a9b      	subs	r3, r3, r2
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	f340 833e 	ble.w	800d81c <tcp_input+0x94c>
      if (recv_flags & TF_RESET) {
 800d1a0:	f899 3000 	ldrb.w	r3, [r9]
 800d1a4:	071a      	lsls	r2, r3, #28
 800d1a6:	f140 825a 	bpl.w	800d65e <tcp_input+0x78e>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800d1aa:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 800d1ae:	b11b      	cbz	r3, 800d1b8 <tcp_input+0x2e8>
 800d1b0:	f06f 010d 	mvn.w	r1, #13
 800d1b4:	6928      	ldr	r0, [r5, #16]
 800d1b6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d1b8:	4841      	ldr	r0, [pc, #260]	@ (800d2c0 <tcp_input+0x3f0>)
 800d1ba:	4629      	mov	r1, r5
 800d1bc:	f7fe fbbc 	bl	800b938 <tcp_pcb_remove>
        tcp_free(pcb);
 800d1c0:	4628      	mov	r0, r5
 800d1c2:	f7fd fe91 	bl	800aee8 <tcp_free>
    tcp_input_pcb = NULL;
 800d1c6:	2500      	movs	r5, #0
    if (inseg.p != NULL) {
 800d1c8:	6878      	ldr	r0, [r7, #4]
    tcp_input_pcb = NULL;
 800d1ca:	6025      	str	r5, [r4, #0]
    recv_data = NULL;
 800d1cc:	f8c8 5000 	str.w	r5, [r8]
    if (inseg.p != NULL) {
 800d1d0:	b110      	cbz	r0, 800d1d8 <tcp_input+0x308>
      pbuf_free(inseg.p);
 800d1d2:	f7fd fad5 	bl	800a780 <pbuf_free>
      inseg.p = NULL;
 800d1d6:	607d      	str	r5, [r7, #4]
}
 800d1d8:	b007      	add	sp, #28
 800d1da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d1de:	4b3d      	ldr	r3, [pc, #244]	@ (800d2d4 <tcp_input+0x404>)
 800d1e0:	681d      	ldr	r5, [r3, #0]
 800d1e2:	2d00      	cmp	r5, #0
 800d1e4:	d05b      	beq.n	800d29e <tcp_input+0x3ce>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d1e6:	f8df 8104 	ldr.w	r8, [pc, #260]	@ 800d2ec <tcp_input+0x41c>
 800d1ea:	f8df a104 	ldr.w	sl, [pc, #260]	@ 800d2f0 <tcp_input+0x420>
 800d1ee:	f8df 9104 	ldr.w	r9, [pc, #260]	@ 800d2f4 <tcp_input+0x424>
 800d1f2:	e002      	b.n	800d1fa <tcp_input+0x32a>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d1f4:	68ed      	ldr	r5, [r5, #12]
 800d1f6:	2d00      	cmp	r5, #0
 800d1f8:	d051      	beq.n	800d29e <tcp_input+0x3ce>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d1fa:	7d2b      	ldrb	r3, [r5, #20]
 800d1fc:	2b0a      	cmp	r3, #10
 800d1fe:	4643      	mov	r3, r8
 800d200:	d005      	beq.n	800d20e <tcp_input+0x33e>
 800d202:	f240 121f 	movw	r2, #287	@ 0x11f
 800d206:	4651      	mov	r1, sl
 800d208:	4648      	mov	r0, r9
 800d20a:	f004 f945 	bl	8011498 <iprintf>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d20e:	7a2a      	ldrb	r2, [r5, #8]
 800d210:	b132      	cbz	r2, 800d220 <tcp_input+0x350>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d218:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d21a:	b2db      	uxtb	r3, r3
 800d21c:	429a      	cmp	r2, r3
 800d21e:	d1e9      	bne.n	800d1f4 <tcp_input+0x324>
      if (pcb->remote_port == tcphdr->src &&
 800d220:	6833      	ldr	r3, [r6, #0]
 800d222:	8b29      	ldrh	r1, [r5, #24]
 800d224:	881a      	ldrh	r2, [r3, #0]
 800d226:	4291      	cmp	r1, r2
 800d228:	d1e4      	bne.n	800d1f4 <tcp_input+0x324>
          pcb->local_port == tcphdr->dest &&
 800d22a:	885a      	ldrh	r2, [r3, #2]
      if (pcb->remote_port == tcphdr->src &&
 800d22c:	8aeb      	ldrh	r3, [r5, #22]
 800d22e:	4293      	cmp	r3, r2
 800d230:	d1e0      	bne.n	800d1f4 <tcp_input+0x324>
          pcb->local_port == tcphdr->dest &&
 800d232:	6868      	ldr	r0, [r5, #4]
 800d234:	693a      	ldr	r2, [r7, #16]
 800d236:	4290      	cmp	r0, r2
 800d238:	d1dc      	bne.n	800d1f4 <tcp_input+0x324>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d23a:	6828      	ldr	r0, [r5, #0]
 800d23c:	697a      	ldr	r2, [r7, #20]
 800d23e:	4290      	cmp	r0, r2
 800d240:	d1d8      	bne.n	800d1f4 <tcp_input+0x324>
  if (flags & TCP_RST) {
 800d242:	4a21      	ldr	r2, [pc, #132]	@ (800d2c8 <tcp_input+0x3f8>)
 800d244:	7810      	ldrb	r0, [r2, #0]
 800d246:	0742      	lsls	r2, r0, #29
 800d248:	f53f ae4f 	bmi.w	800ceea <tcp_input+0x1a>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d24c:	9a05      	ldr	r2, [sp, #20]
  if (flags & TCP_SYN) {
 800d24e:	0787      	lsls	r7, r0, #30
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d250:	8816      	ldrh	r6, [r2, #0]
  if (flags & TCP_SYN) {
 800d252:	f140 83b2 	bpl.w	800d9ba <tcp_input+0xaea>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800d256:	4a1e      	ldr	r2, [pc, #120]	@ (800d2d0 <tcp_input+0x400>)
 800d258:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 800d25a:	6812      	ldr	r2, [r2, #0]
 800d25c:	1a10      	subs	r0, r2, r0
 800d25e:	d404      	bmi.n	800d26a <tcp_input+0x39a>
 800d260:	8d2f      	ldrh	r7, [r5, #40]	@ 0x28
 800d262:	1bc0      	subs	r0, r0, r7
 800d264:	2800      	cmp	r0, #0
 800d266:	f340 83c7 	ble.w	800d9f8 <tcp_input+0xb28>
  if ((tcplen > 0)) {
 800d26a:	2e00      	cmp	r6, #0
 800d26c:	f43f ae3d 	beq.w	800ceea <tcp_input+0x1a>
    tcp_ack_now(pcb);
 800d270:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 800d272:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 800d274:	f043 0302 	orr.w	r3, r3, #2
 800d278:	836b      	strh	r3, [r5, #26]
    tcp_output(pcb);
 800d27a:	f001 fb69 	bl	800e950 <tcp_output>
        pbuf_free(p);
 800d27e:	e634      	b.n	800ceea <tcp_input+0x1a>
    tcphdr_opt1len = tcphdr_optlen;
 800d280:	4a15      	ldr	r2, [pc, #84]	@ (800d2d8 <tcp_input+0x408>)
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800d282:	4620      	mov	r0, r4
    tcphdr_opt1len = tcphdr_optlen;
 800d284:	8013      	strh	r3, [r2, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800d286:	f7fd fa19 	bl	800a6bc <pbuf_remove_header>
 800d28a:	e68f      	b.n	800cfac <tcp_input+0xdc>
    tcplen++;
 800d28c:	1c53      	adds	r3, r2, #1
 800d28e:	4913      	ldr	r1, [pc, #76]	@ (800d2dc <tcp_input+0x40c>)
 800d290:	b29b      	uxth	r3, r3
 800d292:	9105      	str	r1, [sp, #20]
    if (tcplen < p->tot_len) {
 800d294:	429a      	cmp	r2, r3
    tcplen++;
 800d296:	800b      	strh	r3, [r1, #0]
    if (tcplen < p->tot_len) {
 800d298:	f67f aeb4 	bls.w	800d004 <tcp_input+0x134>
 800d29c:	e625      	b.n	800ceea <tcp_input+0x1a>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d29e:	f8df 8058 	ldr.w	r8, [pc, #88]	@ 800d2f8 <tcp_input+0x428>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800d2a2:	f8d6 c000 	ldr.w	ip, [r6]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d2a6:	f8d8 2000 	ldr.w	r2, [r8]
 800d2aa:	2a00      	cmp	r2, #0
 800d2ac:	f000 8227 	beq.w	800d6fe <tcp_input+0x82e>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d2b0:	6878      	ldr	r0, [r7, #4]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d2b2:	4615      	mov	r5, r2
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800d2b4:	f8d7 e014 	ldr.w	lr, [r7, #20]
    prev = NULL;
 800d2b8:	2100      	movs	r1, #0
 800d2ba:	4692      	mov	sl, r2
 800d2bc:	e024      	b.n	800d308 <tcp_input+0x438>
 800d2be:	bf00      	nop
 800d2c0:	24009cfc 	.word	0x24009cfc
 800d2c4:	24009d34 	.word	0x24009d34
 800d2c8:	24009d15 	.word	0x24009d15
 800d2cc:	24009d0c 	.word	0x24009d0c
 800d2d0:	24009d20 	.word	0x24009d20
 800d2d4:	24009cf8 	.word	0x24009cf8
 800d2d8:	24009d2c 	.word	0x24009d2c
 800d2dc:	24009d16 	.word	0x24009d16
 800d2e0:	24009d10 	.word	0x24009d10
 800d2e4:	24009d14 	.word	0x24009d14
 800d2e8:	24009d18 	.word	0x24009d18
 800d2ec:	08013d4c 	.word	0x08013d4c
 800d2f0:	0801403c 	.word	0x0801403c
 800d2f4:	0801241c 	.word	0x0801241c
 800d2f8:	24009d00 	.word	0x24009d00
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d2fc:	68eb      	ldr	r3, [r5, #12]
 800d2fe:	4629      	mov	r1, r5
 800d300:	461d      	mov	r5, r3
 800d302:	2b00      	cmp	r3, #0
 800d304:	f000 81fb 	beq.w	800d6fe <tcp_input+0x82e>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d308:	7a2a      	ldrb	r2, [r5, #8]
 800d30a:	b12a      	cbz	r2, 800d318 <tcp_input+0x448>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d30c:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 800d310:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d312:	b2db      	uxtb	r3, r3
 800d314:	429a      	cmp	r2, r3
 800d316:	d1f1      	bne.n	800d2fc <tcp_input+0x42c>
      if (lpcb->local_port == tcphdr->dest) {
 800d318:	f8b5 9016 	ldrh.w	r9, [r5, #22]
 800d31c:	f8bc 3002 	ldrh.w	r3, [ip, #2]
 800d320:	4599      	cmp	r9, r3
 800d322:	d1eb      	bne.n	800d2fc <tcp_input+0x42c>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800d324:	682b      	ldr	r3, [r5, #0]
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800d326:	b10b      	cbz	r3, 800d32c <tcp_input+0x45c>
 800d328:	4573      	cmp	r3, lr
 800d32a:	d1e7      	bne.n	800d2fc <tcp_input+0x42c>
      if (prev != NULL) {
 800d32c:	4652      	mov	r2, sl
 800d32e:	b121      	cbz	r1, 800d33a <tcp_input+0x46a>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800d330:	68eb      	ldr	r3, [r5, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800d332:	f8c8 5000 	str.w	r5, [r8]
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800d336:	60cb      	str	r3, [r1, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800d338:	60ea      	str	r2, [r5, #12]
  if (flags & TCP_RST) {
 800d33a:	4ba8      	ldr	r3, [pc, #672]	@ (800d5dc <tcp_input+0x70c>)
 800d33c:	781b      	ldrb	r3, [r3, #0]
 800d33e:	075a      	lsls	r2, r3, #29
 800d340:	f53f add3 	bmi.w	800ceea <tcp_input+0x1a>
  if (flags & TCP_ACK) {
 800d344:	f013 0810 	ands.w	r8, r3, #16
 800d348:	f040 826d 	bne.w	800d826 <tcp_input+0x956>
  } else if (flags & TCP_SYN) {
 800d34c:	0798      	lsls	r0, r3, #30
 800d34e:	f57f adcc 	bpl.w	800ceea <tcp_input+0x1a>
    npcb = tcp_alloc(pcb->prio);
 800d352:	7d68      	ldrb	r0, [r5, #21]
 800d354:	f7fe fc9a 	bl	800bc8c <tcp_alloc>
    if (npcb == NULL) {
 800d358:	4681      	mov	r9, r0
 800d35a:	2800      	cmp	r0, #0
 800d35c:	f000 82ca 	beq.w	800d8f4 <tcp_input+0xa24>
    npcb->remote_port = tcphdr->src;
 800d360:	6831      	ldr	r1, [r6, #0]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800d362:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
    npcb->rcv_nxt = seqno + 1;
 800d366:	4f9e      	ldr	r7, [pc, #632]	@ (800d5e0 <tcp_input+0x710>)
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800d368:	e9c0 2300 	strd	r2, r3, [r0]
    npcb->rcv_nxt = seqno + 1;
 800d36c:	683b      	ldr	r3, [r7, #0]
    npcb->remote_port = tcphdr->src;
 800d36e:	780a      	ldrb	r2, [r1, #0]
    npcb->rcv_nxt = seqno + 1;
 800d370:	3301      	adds	r3, #1
    npcb->remote_port = tcphdr->src;
 800d372:	7849      	ldrb	r1, [r1, #1]
 800d374:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    npcb->local_port = pcb->local_port;
 800d378:	8ae9      	ldrh	r1, [r5, #22]
    npcb->rcv_nxt = seqno + 1;
 800d37a:	6243      	str	r3, [r0, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800d37c:	62c3      	str	r3, [r0, #44]	@ 0x2c
    npcb->state = SYN_RCVD;
 800d37e:	2303      	movs	r3, #3
    npcb->local_port = pcb->local_port;
 800d380:	82c1      	strh	r1, [r0, #22]
    npcb->remote_port = tcphdr->src;
 800d382:	8302      	strh	r2, [r0, #24]
    npcb->state = SYN_RCVD;
 800d384:	7503      	strb	r3, [r0, #20]
    iss = tcp_next_iss(npcb);
 800d386:	f7fe ff11 	bl	800c1ac <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800d38a:	683a      	ldr	r2, [r7, #0]
    npcb->callback_arg = pcb->callback_arg;
 800d38c:	692b      	ldr	r3, [r5, #16]
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800d38e:	3a01      	subs	r2, #1
    npcb->snd_nxt = iss;
 800d390:	f8c9 0050 	str.w	r0, [r9, #80]	@ 0x50
    npcb->lastack = iss;
 800d394:	f8c9 0044 	str.w	r0, [r9, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800d398:	f8c9 005c 	str.w	r0, [r9, #92]	@ 0x5c
    npcb->listener = pcb;
 800d39c:	f8c9 507c 	str.w	r5, [r9, #124]	@ 0x7c
    npcb->callback_arg = pcb->callback_arg;
 800d3a0:	f8c9 3010 	str.w	r3, [r9, #16]
    npcb->snd_wl2 = iss;
 800d3a4:	e9c9 2015 	strd	r2, r0, [r9, #84]	@ 0x54
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800d3a8:	7a6b      	ldrb	r3, [r5, #9]
    TCP_REG_ACTIVE(npcb);
 800d3aa:	4a8e      	ldr	r2, [pc, #568]	@ (800d5e4 <tcp_input+0x714>)
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800d3ac:	f003 030c 	and.w	r3, r3, #12
 800d3b0:	f889 3009 	strb.w	r3, [r9, #9]
    npcb->netif_idx = pcb->netif_idx;
 800d3b4:	7a2b      	ldrb	r3, [r5, #8]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800d3b6:	f109 0504 	add.w	r5, r9, #4
    npcb->netif_idx = pcb->netif_idx;
 800d3ba:	f889 3008 	strb.w	r3, [r9, #8]
    TCP_REG_ACTIVE(npcb);
 800d3be:	6813      	ldr	r3, [r2, #0]
 800d3c0:	f8c2 9000 	str.w	r9, [r2]
 800d3c4:	f8c9 300c 	str.w	r3, [r9, #12]
 800d3c8:	f001 fddc 	bl	800ef84 <tcp_timer_needed>
 800d3cc:	4b86      	ldr	r3, [pc, #536]	@ (800d5e8 <tcp_input+0x718>)
 800d3ce:	2201      	movs	r2, #1
    tcp_parseopt(npcb);
 800d3d0:	4648      	mov	r0, r9
    TCP_REG_ACTIVE(npcb);
 800d3d2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800d3d4:	f7ff fcc2 	bl	800cd5c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800d3d8:	6832      	ldr	r2, [r6, #0]
 800d3da:	4643      	mov	r3, r8
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800d3dc:	f8b9 6032 	ldrh.w	r6, [r9, #50]	@ 0x32
 800d3e0:	4628      	mov	r0, r5
    npcb->snd_wnd = tcphdr->wnd;
 800d3e2:	89d2      	ldrh	r2, [r2, #14]
 800d3e4:	f362 030f 	bfi	r3, r2, #0, #16
 800d3e8:	f362 431f 	bfi	r3, r2, #16, #16
 800d3ec:	f8c9 3060 	str.w	r3, [r9, #96]	@ 0x60
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800d3f0:	f002 fe9e 	bl	8010130 <ip4_route>
 800d3f4:	462a      	mov	r2, r5
 800d3f6:	4601      	mov	r1, r0
 800d3f8:	4630      	mov	r0, r6
 800d3fa:	f7fe fef3 	bl	800c1e4 <tcp_eff_send_mss_netif>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800d3fe:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800d400:	f8a9 0032 	strh.w	r0, [r9, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800d404:	4648      	mov	r0, r9
 800d406:	f001 f895 	bl	800e534 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 800d40a:	2800      	cmp	r0, #0
 800d40c:	f040 827d 	bne.w	800d90a <tcp_input+0xa3a>
    tcp_output(npcb);
 800d410:	4648      	mov	r0, r9
 800d412:	f001 fa9d 	bl	800e950 <tcp_output>
 800d416:	e568      	b.n	800ceea <tcp_input+0x1a>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800d418:	079b      	lsls	r3, r3, #30
        tcp_ack_now(pcb);
 800d41a:	8b6a      	ldrh	r2, [r5, #26]
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800d41c:	d504      	bpl.n	800d428 <tcp_input+0x558>
 800d41e:	7d2b      	ldrb	r3, [r5, #20]
 800d420:	3b02      	subs	r3, #2
 800d422:	2b01      	cmp	r3, #1
 800d424:	f200 819c 	bhi.w	800d760 <tcp_input+0x890>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800d428:	06d0      	lsls	r0, r2, #27
 800d42a:	d402      	bmi.n	800d432 <tcp_input+0x562>
    pcb->tmr = tcp_ticks;
 800d42c:	4b6f      	ldr	r3, [pc, #444]	@ (800d5ec <tcp_input+0x71c>)
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	622b      	str	r3, [r5, #32]
  pcb->persist_probe = 0;
 800d432:	2300      	movs	r3, #0
  tcp_parseopt(pcb);
 800d434:	4628      	mov	r0, r5
  pcb->persist_probe = 0;
 800d436:	f8a5 309a 	strh.w	r3, [r5, #154]	@ 0x9a
  tcp_parseopt(pcb);
 800d43a:	f7ff fc8f 	bl	800cd5c <tcp_parseopt>
  switch (pcb->state) {
 800d43e:	7d2b      	ldrb	r3, [r5, #20]
 800d440:	3b02      	subs	r3, #2
 800d442:	2b07      	cmp	r3, #7
 800d444:	f63f aeac 	bhi.w	800d1a0 <tcp_input+0x2d0>
 800d448:	e8df f003 	tbb	[pc, r3]
 800d44c:	8f041334 	.word	0x8f041334
 800d450:	5ba80474 	.word	0x5ba80474
      tcp_receive(pcb);
 800d454:	4628      	mov	r0, r5
 800d456:	f7fe fff3 	bl	800c440 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800d45a:	f899 3000 	ldrb.w	r3, [r9]
 800d45e:	0699      	lsls	r1, r3, #26
 800d460:	f57f ae9e 	bpl.w	800d1a0 <tcp_input+0x2d0>
        tcp_ack_now(pcb);
 800d464:	8b6b      	ldrh	r3, [r5, #26]
 800d466:	f043 0302 	orr.w	r3, r3, #2
 800d46a:	836b      	strh	r3, [r5, #26]
        pcb->state = CLOSE_WAIT;
 800d46c:	2307      	movs	r3, #7
 800d46e:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 800d470:	e696      	b.n	800d1a0 <tcp_input+0x2d0>
      if (flags & TCP_ACK) {
 800d472:	4b5a      	ldr	r3, [pc, #360]	@ (800d5dc <tcp_input+0x70c>)
 800d474:	781b      	ldrb	r3, [r3, #0]
 800d476:	06da      	lsls	r2, r3, #27
 800d478:	f140 820f 	bpl.w	800d89a <tcp_input+0x9ca>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d47c:	4b5c      	ldr	r3, [pc, #368]	@ (800d5f0 <tcp_input+0x720>)
 800d47e:	6819      	ldr	r1, [r3, #0]
 800d480:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800d482:	43db      	mvns	r3, r3
 800d484:	42cb      	cmn	r3, r1
 800d486:	d404      	bmi.n	800d492 <tcp_input+0x5c2>
 800d488:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800d48a:	1acb      	subs	r3, r1, r3
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	f340 8242 	ble.w	800d916 <tcp_input+0xa46>
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d492:	9a05      	ldr	r2, [sp, #20]
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d494:	6833      	ldr	r3, [r6, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d496:	8810      	ldrh	r0, [r2, #0]
 800d498:	4a51      	ldr	r2, [pc, #324]	@ (800d5e0 <tcp_input+0x710>)
 800d49a:	6812      	ldr	r2, [r2, #0]
 800d49c:	4402      	add	r2, r0
 800d49e:	8818      	ldrh	r0, [r3, #0]
 800d4a0:	9002      	str	r0, [sp, #8]
 800d4a2:	4628      	mov	r0, r5
 800d4a4:	885b      	ldrh	r3, [r3, #2]
 800d4a6:	9301      	str	r3, [sp, #4]
 800d4a8:	4b52      	ldr	r3, [pc, #328]	@ (800d5f4 <tcp_input+0x724>)
 800d4aa:	9300      	str	r3, [sp, #0]
 800d4ac:	3304      	adds	r3, #4
 800d4ae:	f001 f9d5 	bl	800e85c <tcp_rst>
    if (err != ERR_ABRT) {
 800d4b2:	e675      	b.n	800d1a0 <tcp_input+0x2d0>
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800d4b4:	4b49      	ldr	r3, [pc, #292]	@ (800d5dc <tcp_input+0x70c>)
 800d4b6:	781a      	ldrb	r2, [r3, #0]
 800d4b8:	f002 0312 	and.w	r3, r2, #18
 800d4bc:	2b12      	cmp	r3, #18
 800d4be:	f000 8153 	beq.w	800d768 <tcp_input+0x898>
      else if (flags & TCP_ACK) {
 800d4c2:	06d1      	lsls	r1, r2, #27
 800d4c4:	f57f ae6c 	bpl.w	800d1a0 <tcp_input+0x2d0>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d4c8:	9a05      	ldr	r2, [sp, #20]
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d4ca:	6833      	ldr	r3, [r6, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d4cc:	8811      	ldrh	r1, [r2, #0]
 800d4ce:	4a44      	ldr	r2, [pc, #272]	@ (800d5e0 <tcp_input+0x710>)
 800d4d0:	8818      	ldrh	r0, [r3, #0]
 800d4d2:	6812      	ldr	r2, [r2, #0]
 800d4d4:	440a      	add	r2, r1
 800d4d6:	4946      	ldr	r1, [pc, #280]	@ (800d5f0 <tcp_input+0x720>)
 800d4d8:	6809      	ldr	r1, [r1, #0]
 800d4da:	9002      	str	r0, [sp, #8]
 800d4dc:	4628      	mov	r0, r5
 800d4de:	885b      	ldrh	r3, [r3, #2]
 800d4e0:	9301      	str	r3, [sp, #4]
 800d4e2:	4b44      	ldr	r3, [pc, #272]	@ (800d5f4 <tcp_input+0x724>)
 800d4e4:	9300      	str	r3, [sp, #0]
 800d4e6:	3304      	adds	r3, #4
 800d4e8:	f001 f9b8 	bl	800e85c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800d4ec:	f895 3042 	ldrb.w	r3, [r5, #66]	@ 0x42
 800d4f0:	2b05      	cmp	r3, #5
 800d4f2:	f63f ae55 	bhi.w	800d1a0 <tcp_input+0x2d0>
          pcb->rtime = 0;
 800d4f6:	2300      	movs	r3, #0
          tcp_rexmit_rto(pcb);
 800d4f8:	4628      	mov	r0, r5
          pcb->rtime = 0;
 800d4fa:	862b      	strh	r3, [r5, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800d4fc:	f001 fc18 	bl	800ed30 <tcp_rexmit_rto>
    if (err != ERR_ABRT) {
 800d500:	e64e      	b.n	800d1a0 <tcp_input+0x2d0>
      tcp_receive(pcb);
 800d502:	4628      	mov	r0, r5
 800d504:	f7fe ff9c 	bl	800c440 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d508:	4b34      	ldr	r3, [pc, #208]	@ (800d5dc <tcp_input+0x70c>)
 800d50a:	781b      	ldrb	r3, [r3, #0]
 800d50c:	06d9      	lsls	r1, r3, #27
 800d50e:	f57f ae47 	bpl.w	800d1a0 <tcp_input+0x2d0>
 800d512:	4b37      	ldr	r3, [pc, #220]	@ (800d5f0 <tcp_input+0x720>)
 800d514:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 800d516:	681a      	ldr	r2, [r3, #0]
        recv_flags |= TF_CLOSED;
 800d518:	f899 3000 	ldrb.w	r3, [r9]
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d51c:	4291      	cmp	r1, r2
 800d51e:	f47f ae3f 	bne.w	800d1a0 <tcp_input+0x2d0>
 800d522:	6eea      	ldr	r2, [r5, #108]	@ 0x6c
 800d524:	2a00      	cmp	r2, #0
 800d526:	f47f ae3b 	bne.w	800d1a0 <tcp_input+0x2d0>
        recv_flags |= TF_CLOSED;
 800d52a:	f043 0310 	orr.w	r3, r3, #16
 800d52e:	f889 3000 	strb.w	r3, [r9]
    if (err != ERR_ABRT) {
 800d532:	e635      	b.n	800d1a0 <tcp_input+0x2d0>
      tcp_receive(pcb);
 800d534:	4628      	mov	r0, r5
 800d536:	f7fe ff83 	bl	800c440 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d53a:	f899 3000 	ldrb.w	r3, [r9]
 800d53e:	069e      	lsls	r6, r3, #26
 800d540:	f57f ae2e 	bpl.w	800d1a0 <tcp_input+0x2d0>
        tcp_ack_now(pcb);
 800d544:	8b6b      	ldrh	r3, [r5, #26]
        tcp_pcb_purge(pcb);
 800d546:	4628      	mov	r0, r5
        tcp_ack_now(pcb);
 800d548:	f043 0302 	orr.w	r3, r3, #2
 800d54c:	836b      	strh	r3, [r5, #26]
        tcp_pcb_purge(pcb);
 800d54e:	f7fd ff01 	bl	800b354 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d552:	4b24      	ldr	r3, [pc, #144]	@ (800d5e4 <tcp_input+0x714>)
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	42ab      	cmp	r3, r5
 800d558:	d05a      	beq.n	800d610 <tcp_input+0x740>
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d05b      	beq.n	800d616 <tcp_input+0x746>
 800d55e:	68da      	ldr	r2, [r3, #12]
 800d560:	42aa      	cmp	r2, r5
 800d562:	f000 8205 	beq.w	800d970 <tcp_input+0xaa0>
 800d566:	4613      	mov	r3, r2
 800d568:	e7f7      	b.n	800d55a <tcp_input+0x68a>
      tcp_receive(pcb);
 800d56a:	4628      	mov	r0, r5
 800d56c:	f7fe ff68 	bl	800c440 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d570:	f899 3000 	ldrb.w	r3, [r9]
 800d574:	f013 0f20 	tst.w	r3, #32
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d578:	4b18      	ldr	r3, [pc, #96]	@ (800d5dc <tcp_input+0x70c>)
      if (recv_flags & TF_GOT_FIN) {
 800d57a:	f000 817d 	beq.w	800d878 <tcp_input+0x9a8>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d57e:	781a      	ldrb	r2, [r3, #0]
          tcp_ack_now(pcb);
 800d580:	8b6b      	ldrh	r3, [r5, #26]
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d582:	06d2      	lsls	r2, r2, #27
          tcp_ack_now(pcb);
 800d584:	f043 0302 	orr.w	r3, r3, #2
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d588:	d504      	bpl.n	800d594 <tcp_input+0x6c4>
 800d58a:	4a19      	ldr	r2, [pc, #100]	@ (800d5f0 <tcp_input+0x720>)
 800d58c:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 800d58e:	6812      	ldr	r2, [r2, #0]
 800d590:	4291      	cmp	r1, r2
 800d592:	d031      	beq.n	800d5f8 <tcp_input+0x728>
          tcp_ack_now(pcb);
 800d594:	836b      	strh	r3, [r5, #26]
          pcb->state = CLOSING;
 800d596:	2308      	movs	r3, #8
 800d598:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 800d59a:	e601      	b.n	800d1a0 <tcp_input+0x2d0>
      tcp_receive(pcb);
 800d59c:	4628      	mov	r0, r5
 800d59e:	f7fe ff4f 	bl	800c440 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d5a2:	4b0e      	ldr	r3, [pc, #56]	@ (800d5dc <tcp_input+0x70c>)
 800d5a4:	781b      	ldrb	r3, [r3, #0]
 800d5a6:	06d8      	lsls	r0, r3, #27
 800d5a8:	f57f adfa 	bpl.w	800d1a0 <tcp_input+0x2d0>
 800d5ac:	4b10      	ldr	r3, [pc, #64]	@ (800d5f0 <tcp_input+0x720>)
 800d5ae:	6d2a      	ldr	r2, [r5, #80]	@ 0x50
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	429a      	cmp	r2, r3
 800d5b4:	f47f adf4 	bne.w	800d1a0 <tcp_input+0x2d0>
 800d5b8:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	f47f adf0 	bne.w	800d1a0 <tcp_input+0x2d0>
        tcp_pcb_purge(pcb);
 800d5c0:	4628      	mov	r0, r5
 800d5c2:	f7fd fec7 	bl	800b354 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d5c6:	4b07      	ldr	r3, [pc, #28]	@ (800d5e4 <tcp_input+0x714>)
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	42ab      	cmp	r3, r5
 800d5cc:	d020      	beq.n	800d610 <tcp_input+0x740>
 800d5ce:	b313      	cbz	r3, 800d616 <tcp_input+0x746>
 800d5d0:	68da      	ldr	r2, [r3, #12]
 800d5d2:	42aa      	cmp	r2, r5
 800d5d4:	f000 81cc 	beq.w	800d970 <tcp_input+0xaa0>
 800d5d8:	4613      	mov	r3, r2
 800d5da:	e7f8      	b.n	800d5ce <tcp_input+0x6fe>
 800d5dc:	24009d15 	.word	0x24009d15
 800d5e0:	24009d20 	.word	0x24009d20
 800d5e4:	24009cfc 	.word	0x24009cfc
 800d5e8:	24009cf7 	.word	0x24009cf7
 800d5ec:	24009d08 	.word	0x24009d08
 800d5f0:	24009d1c 	.word	0x24009d1c
 800d5f4:	24006c08 	.word	0x24006c08
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d5f8:	6eea      	ldr	r2, [r5, #108]	@ 0x6c
 800d5fa:	2a00      	cmp	r2, #0
 800d5fc:	d1ca      	bne.n	800d594 <tcp_input+0x6c4>
          tcp_ack_now(pcb);
 800d5fe:	836b      	strh	r3, [r5, #26]
          tcp_pcb_purge(pcb);
 800d600:	4628      	mov	r0, r5
 800d602:	f7fd fea7 	bl	800b354 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800d606:	4bac      	ldr	r3, [pc, #688]	@ (800d8b8 <tcp_input+0x9e8>)
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	42ab      	cmp	r3, r5
 800d60c:	f040 81e0 	bne.w	800d9d0 <tcp_input+0xb00>
        TCP_RMV_ACTIVE(pcb);
 800d610:	68eb      	ldr	r3, [r5, #12]
 800d612:	4aa9      	ldr	r2, [pc, #676]	@ (800d8b8 <tcp_input+0x9e8>)
 800d614:	6013      	str	r3, [r2, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d616:	4ba9      	ldr	r3, [pc, #676]	@ (800d8bc <tcp_input+0x9ec>)
        pcb->state = TIME_WAIT;
 800d618:	220a      	movs	r2, #10
 800d61a:	752a      	strb	r2, [r5, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d61c:	681a      	ldr	r2, [r3, #0]
 800d61e:	601d      	str	r5, [r3, #0]
 800d620:	60ea      	str	r2, [r5, #12]
        TCP_RMV_ACTIVE(pcb);
 800d622:	2201      	movs	r2, #1
 800d624:	4ba6      	ldr	r3, [pc, #664]	@ (800d8c0 <tcp_input+0x9f0>)
 800d626:	701a      	strb	r2, [r3, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d628:	f001 fcac 	bl	800ef84 <tcp_timer_needed>
    if (err != ERR_ABRT) {
 800d62c:	e5b8      	b.n	800d1a0 <tcp_input+0x2d0>
    tcp_input_pcb = pcb;
 800d62e:	4ca5      	ldr	r4, [pc, #660]	@ (800d8c4 <tcp_input+0x9f4>)
 800d630:	6025      	str	r5, [r4, #0]
  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800d632:	e5a1      	b.n	800d178 <tcp_input+0x2a8>
        if (pcb->rcv_ann_wnd == 0) {
 800d634:	8d6b      	ldrh	r3, [r5, #42]	@ 0x2a
 800d636:	2b00      	cmp	r3, #0
 800d638:	f000 808d 	beq.w	800d756 <tcp_input+0x886>
 800d63c:	4ca1      	ldr	r4, [pc, #644]	@ (800d8c4 <tcp_input+0x9f4>)
 800d63e:	e5c2      	b.n	800d1c6 <tcp_input+0x2f6>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800d640:	4ba1      	ldr	r3, [pc, #644]	@ (800d8c8 <tcp_input+0x9f8>)
 800d642:	22c2      	movs	r2, #194	@ 0xc2
 800d644:	49a1      	ldr	r1, [pc, #644]	@ (800d8cc <tcp_input+0x9fc>)
 800d646:	48a2      	ldr	r0, [pc, #648]	@ (800d8d0 <tcp_input+0xa00>)
 800d648:	f003 ff26 	bl	8011498 <iprintf>
 800d64c:	e47f      	b.n	800cf4e <tcp_input+0x7e>
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800d64e:	4b9e      	ldr	r3, [pc, #632]	@ (800d8c8 <tcp_input+0x9f8>)
 800d650:	22df      	movs	r2, #223	@ 0xdf
 800d652:	49a0      	ldr	r1, [pc, #640]	@ (800d8d4 <tcp_input+0xa04>)
 800d654:	489e      	ldr	r0, [pc, #632]	@ (800d8d0 <tcp_input+0xa00>)
 800d656:	f003 ff1f 	bl	8011498 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800d65a:	8923      	ldrh	r3, [r4, #8]
 800d65c:	e49c      	b.n	800cf98 <tcp_input+0xc8>
        if (recv_acked > 0) {
 800d65e:	f8ba 2000 	ldrh.w	r2, [sl]
 800d662:	b15a      	cbz	r2, 800d67c <tcp_input+0x7ac>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800d664:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
 800d668:	b12b      	cbz	r3, 800d676 <tcp_input+0x7a6>
 800d66a:	4629      	mov	r1, r5
 800d66c:	6928      	ldr	r0, [r5, #16]
 800d66e:	4798      	blx	r3
            if (err == ERR_ABRT) {
 800d670:	300d      	adds	r0, #13
 800d672:	f43f ada8 	beq.w	800d1c6 <tcp_input+0x2f6>
          recv_acked = 0;
 800d676:	2300      	movs	r3, #0
 800d678:	f8aa 3000 	strh.w	r3, [sl]
        if (tcp_input_delayed_close(pcb)) {
 800d67c:	4628      	mov	r0, r5
 800d67e:	f7fe fe59 	bl	800c334 <tcp_input_delayed_close>
 800d682:	2800      	cmp	r0, #0
 800d684:	f47f ad9f 	bne.w	800d1c6 <tcp_input+0x2f6>
        if (recv_data != NULL) {
 800d688:	f8d8 2000 	ldr.w	r2, [r8]
 800d68c:	b1fa      	cbz	r2, 800d6ce <tcp_input+0x7fe>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800d68e:	6fab      	ldr	r3, [r5, #120]	@ 0x78
 800d690:	b143      	cbz	r3, 800d6a4 <tcp_input+0x7d4>
 800d692:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800d696:	4b8c      	ldr	r3, [pc, #560]	@ (800d8c8 <tcp_input+0x9f8>)
 800d698:	498f      	ldr	r1, [pc, #572]	@ (800d8d8 <tcp_input+0xa08>)
 800d69a:	488d      	ldr	r0, [pc, #564]	@ (800d8d0 <tcp_input+0xa00>)
 800d69c:	f003 fefc 	bl	8011498 <iprintf>
            pbuf_free(recv_data);
 800d6a0:	f8d8 2000 	ldr.w	r2, [r8]
          if (pcb->flags & TF_RXCLOSED) {
 800d6a4:	8b6b      	ldrh	r3, [r5, #26]
 800d6a6:	f013 0310 	ands.w	r3, r3, #16
 800d6aa:	f040 80de 	bne.w	800d86a <tcp_input+0x99a>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800d6ae:	f8d5 6084 	ldr.w	r6, [r5, #132]	@ 0x84
 800d6b2:	2e00      	cmp	r6, #0
 800d6b4:	f000 8118 	beq.w	800d8e8 <tcp_input+0xa18>
 800d6b8:	4629      	mov	r1, r5
 800d6ba:	6928      	ldr	r0, [r5, #16]
 800d6bc:	47b0      	blx	r6
          if (err == ERR_ABRT) {
 800d6be:	f110 0f0d 	cmn.w	r0, #13
 800d6c2:	f43f ad80 	beq.w	800d1c6 <tcp_input+0x2f6>
          if (err != ERR_OK) {
 800d6c6:	b110      	cbz	r0, 800d6ce <tcp_input+0x7fe>
            pcb->refused_data = recv_data;
 800d6c8:	f8d8 3000 	ldr.w	r3, [r8]
 800d6cc:	67ab      	str	r3, [r5, #120]	@ 0x78
        if (recv_flags & TF_GOT_FIN) {
 800d6ce:	f899 3000 	ldrb.w	r3, [r9]
 800d6d2:	069b      	lsls	r3, r3, #26
 800d6d4:	d507      	bpl.n	800d6e6 <tcp_input+0x816>
          if (pcb->refused_data != NULL) {
 800d6d6:	6fab      	ldr	r3, [r5, #120]	@ 0x78
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	f000 80b2 	beq.w	800d842 <tcp_input+0x972>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800d6de:	7b5a      	ldrb	r2, [r3, #13]
 800d6e0:	f042 0220 	orr.w	r2, r2, #32
 800d6e4:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 800d6e6:	2300      	movs	r3, #0
        if (tcp_input_delayed_close(pcb)) {
 800d6e8:	4628      	mov	r0, r5
        tcp_input_pcb = NULL;
 800d6ea:	6023      	str	r3, [r4, #0]
        if (tcp_input_delayed_close(pcb)) {
 800d6ec:	f7fe fe22 	bl	800c334 <tcp_input_delayed_close>
 800d6f0:	2800      	cmp	r0, #0
 800d6f2:	f47f ad68 	bne.w	800d1c6 <tcp_input+0x2f6>
        tcp_output(pcb);
 800d6f6:	4628      	mov	r0, r5
 800d6f8:	f001 f92a 	bl	800e950 <tcp_output>
 800d6fc:	e563      	b.n	800d1c6 <tcp_input+0x2f6>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800d6fe:	f8bc 000c 	ldrh.w	r0, [ip, #12]
 800d702:	f7fc f987 	bl	8009a14 <lwip_htons>
 800d706:	f010 0004 	ands.w	r0, r0, #4
 800d70a:	f47f abee 	bne.w	800ceea <tcp_input+0x1a>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d70e:	9a05      	ldr	r2, [sp, #20]
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d710:	6833      	ldr	r3, [r6, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d712:	8811      	ldrh	r1, [r2, #0]
 800d714:	4a71      	ldr	r2, [pc, #452]	@ (800d8dc <tcp_input+0xa0c>)
 800d716:	881d      	ldrh	r5, [r3, #0]
 800d718:	6812      	ldr	r2, [r2, #0]
 800d71a:	440a      	add	r2, r1
 800d71c:	4970      	ldr	r1, [pc, #448]	@ (800d8e0 <tcp_input+0xa10>)
 800d71e:	6809      	ldr	r1, [r1, #0]
 800d720:	9502      	str	r5, [sp, #8]
 800d722:	885b      	ldrh	r3, [r3, #2]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d724:	9301      	str	r3, [sp, #4]
 800d726:	4b6f      	ldr	r3, [pc, #444]	@ (800d8e4 <tcp_input+0xa14>)
 800d728:	9300      	str	r3, [sp, #0]
 800d72a:	3304      	adds	r3, #4
 800d72c:	f001 f896 	bl	800e85c <tcp_rst>
 800d730:	f7ff bbdb 	b.w	800ceea <tcp_input+0x1a>
      if (ackno == pcb->snd_nxt) {
 800d734:	4b6a      	ldr	r3, [pc, #424]	@ (800d8e0 <tcp_input+0xa10>)
 800d736:	6d2a      	ldr	r2, [r5, #80]	@ 0x50
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	429a      	cmp	r2, r3
 800d73c:	f47f ad30 	bne.w	800d1a0 <tcp_input+0x2d0>
      recv_flags |= TF_RESET;
 800d740:	f899 3000 	ldrb.w	r3, [r9]
 800d744:	f043 0308 	orr.w	r3, r3, #8
 800d748:	f889 3000 	strb.w	r3, [r9]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800d74c:	8b6b      	ldrh	r3, [r5, #26]
 800d74e:	f023 0301 	bic.w	r3, r3, #1
 800d752:	836b      	strh	r3, [r5, #26]
    if (err != ERR_ABRT) {
 800d754:	e524      	b.n	800d1a0 <tcp_input+0x2d0>
          tcp_send_empty_ack(pcb);
 800d756:	4628      	mov	r0, r5
 800d758:	4c5a      	ldr	r4, [pc, #360]	@ (800d8c4 <tcp_input+0x9f4>)
 800d75a:	f001 f8c7 	bl	800e8ec <tcp_send_empty_ack>
 800d75e:	e532      	b.n	800d1c6 <tcp_input+0x2f6>
    tcp_ack_now(pcb);
 800d760:	f042 0202 	orr.w	r2, r2, #2
 800d764:	836a      	strh	r2, [r5, #26]
    if (err != ERR_ABRT) {
 800d766:	e51b      	b.n	800d1a0 <tcp_input+0x2d0>
          && (ackno == pcb->lastack + 1)) {
 800d768:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800d76a:	495d      	ldr	r1, [pc, #372]	@ (800d8e0 <tcp_input+0xa10>)
 800d76c:	3301      	adds	r3, #1
 800d76e:	6809      	ldr	r1, [r1, #0]
 800d770:	428b      	cmp	r3, r1
 800d772:	f47f aea6 	bne.w	800d4c2 <tcp_input+0x5f2>
        pcb->lastack = ackno;
 800d776:	646b      	str	r3, [r5, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800d778:	2200      	movs	r2, #0
        pcb->rcv_nxt = seqno + 1;
 800d77a:	4b58      	ldr	r3, [pc, #352]	@ (800d8dc <tcp_input+0xa0c>)
        pcb->snd_wnd = tcphdr->wnd;
 800d77c:	6830      	ldr	r0, [r6, #0]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d77e:	1d2e      	adds	r6, r5, #4
        pcb->rcv_nxt = seqno + 1;
 800d780:	681b      	ldr	r3, [r3, #0]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d782:	f8b5 b032 	ldrh.w	fp, [r5, #50]	@ 0x32
        pcb->rcv_nxt = seqno + 1;
 800d786:	1c59      	adds	r1, r3, #1
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800d788:	3b01      	subs	r3, #1
        pcb->rcv_nxt = seqno + 1;
 800d78a:	6269      	str	r1, [r5, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800d78c:	62e9      	str	r1, [r5, #44]	@ 0x2c
        pcb->snd_wnd = tcphdr->wnd;
 800d78e:	89c1      	ldrh	r1, [r0, #14]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d790:	4630      	mov	r0, r6
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800d792:	656b      	str	r3, [r5, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800d794:	2304      	movs	r3, #4
        pcb->snd_wnd = tcphdr->wnd;
 800d796:	f361 020f 	bfi	r2, r1, #0, #16
        pcb->state = ESTABLISHED;
 800d79a:	752b      	strb	r3, [r5, #20]
        pcb->snd_wnd = tcphdr->wnd;
 800d79c:	f361 421f 	bfi	r2, r1, #16, #16
 800d7a0:	662a      	str	r2, [r5, #96]	@ 0x60
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d7a2:	f002 fcc5 	bl	8010130 <ip4_route>
 800d7a6:	4632      	mov	r2, r6
 800d7a8:	4601      	mov	r1, r0
 800d7aa:	4658      	mov	r0, fp
 800d7ac:	f7fe fd1a 	bl	800c1e4 <tcp_eff_send_mss_netif>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d7b0:	f241 131c 	movw	r3, #4380	@ 0x111c
 800d7b4:	0041      	lsls	r1, r0, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d7b6:	4602      	mov	r2, r0
 800d7b8:	8668      	strh	r0, [r5, #50]	@ 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d7ba:	0080      	lsls	r0, r0, #2
 800d7bc:	4299      	cmp	r1, r3
 800d7be:	460e      	mov	r6, r1
 800d7c0:	bf38      	it	cc
 800d7c2:	461e      	movcc	r6, r3
 800d7c4:	ebb6 0f82 	cmp.w	r6, r2, lsl #2
 800d7c8:	f240 8130 	bls.w	800da2c <tcp_input+0xb5c>
 800d7cc:	b283      	uxth	r3, r0
 800d7ce:	f8a5 3048 	strh.w	r3, [r5, #72]	@ 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800d7d2:	f8b5 3066 	ldrh.w	r3, [r5, #102]	@ 0x66
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	f000 8120 	beq.w	800da1c <tcp_input+0xb4c>
        --pcb->snd_queuelen;
 800d7dc:	f8b5 3066 	ldrh.w	r3, [r5, #102]	@ 0x66
        rseg = pcb->unacked;
 800d7e0:	6f2e      	ldr	r6, [r5, #112]	@ 0x70
        --pcb->snd_queuelen;
 800d7e2:	3b01      	subs	r3, #1
 800d7e4:	f8a5 3066 	strh.w	r3, [r5, #102]	@ 0x66
        if (rseg == NULL) {
 800d7e8:	2e00      	cmp	r6, #0
 800d7ea:	f000 8112 	beq.w	800da12 <tcp_input+0xb42>
          pcb->unacked = rseg->next;
 800d7ee:	6833      	ldr	r3, [r6, #0]
 800d7f0:	672b      	str	r3, [r5, #112]	@ 0x70
        tcp_seg_free(rseg);
 800d7f2:	4630      	mov	r0, r6
 800d7f4:	f7fd fcf8 	bl	800b1e8 <tcp_seg_free>
        if (pcb->unacked == NULL) {
 800d7f8:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	f000 8106 	beq.w	800da0c <tcp_input+0xb3c>
          pcb->nrtx = 0;
 800d800:	2300      	movs	r3, #0
 800d802:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
 800d806:	862b      	strh	r3, [r5, #48]	@ 0x30
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800d808:	f8d5 3088 	ldr.w	r3, [r5, #136]	@ 0x88
 800d80c:	b133      	cbz	r3, 800d81c <tcp_input+0x94c>
 800d80e:	2200      	movs	r2, #0
 800d810:	4629      	mov	r1, r5
 800d812:	6928      	ldr	r0, [r5, #16]
 800d814:	4798      	blx	r3
        if (err == ERR_ABRT) {
 800d816:	300d      	adds	r0, #13
 800d818:	f43f acd5 	beq.w	800d1c6 <tcp_input+0x2f6>
        tcp_ack_now(pcb);
 800d81c:	8b6b      	ldrh	r3, [r5, #26]
 800d81e:	f043 0302 	orr.w	r3, r3, #2
 800d822:	836b      	strh	r3, [r5, #26]
    if (err != ERR_ABRT) {
 800d824:	e4bc      	b.n	800d1a0 <tcp_input+0x2d0>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d826:	9b05      	ldr	r3, [sp, #20]
 800d828:	4628      	mov	r0, r5
 800d82a:	881a      	ldrh	r2, [r3, #0]
 800d82c:	4b2b      	ldr	r3, [pc, #172]	@ (800d8dc <tcp_input+0xa0c>)
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	441a      	add	r2, r3
 800d832:	4b2b      	ldr	r3, [pc, #172]	@ (800d8e0 <tcp_input+0xa10>)
 800d834:	6819      	ldr	r1, [r3, #0]
 800d836:	f8bc 3000 	ldrh.w	r3, [ip]
 800d83a:	9302      	str	r3, [sp, #8]
 800d83c:	f8bc 3002 	ldrh.w	r3, [ip, #2]
 800d840:	e770      	b.n	800d724 <tcp_input+0x854>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d842:	8d2b      	ldrh	r3, [r5, #40]	@ 0x28
 800d844:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800d848:	d001      	beq.n	800d84e <tcp_input+0x97e>
              pcb->rcv_wnd++;
 800d84a:	3301      	adds	r3, #1
 800d84c:	852b      	strh	r3, [r5, #40]	@ 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800d84e:	f8d5 6084 	ldr.w	r6, [r5, #132]	@ 0x84
 800d852:	2e00      	cmp	r6, #0
 800d854:	f43f af47 	beq.w	800d6e6 <tcp_input+0x816>
 800d858:	2300      	movs	r3, #0
 800d85a:	4629      	mov	r1, r5
 800d85c:	6928      	ldr	r0, [r5, #16]
 800d85e:	461a      	mov	r2, r3
 800d860:	47b0      	blx	r6
            if (err == ERR_ABRT) {
 800d862:	300d      	adds	r0, #13
 800d864:	f47f af3f 	bne.w	800d6e6 <tcp_input+0x816>
 800d868:	e4ad      	b.n	800d1c6 <tcp_input+0x2f6>
            pbuf_free(recv_data);
 800d86a:	4610      	mov	r0, r2
 800d86c:	f7fc ff88 	bl	800a780 <pbuf_free>
            tcp_abort(pcb);
 800d870:	4628      	mov	r0, r5
 800d872:	f7fe f9a3 	bl	800bbbc <tcp_abort>
            goto aborted;
 800d876:	e4a6      	b.n	800d1c6 <tcp_input+0x2f6>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d878:	781b      	ldrb	r3, [r3, #0]
 800d87a:	06db      	lsls	r3, r3, #27
 800d87c:	f57f ac90 	bpl.w	800d1a0 <tcp_input+0x2d0>
 800d880:	4b17      	ldr	r3, [pc, #92]	@ (800d8e0 <tcp_input+0xa10>)
 800d882:	6d2a      	ldr	r2, [r5, #80]	@ 0x50
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	429a      	cmp	r2, r3
 800d888:	f47f ac8a 	bne.w	800d1a0 <tcp_input+0x2d0>
 800d88c:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 800d88e:	2b00      	cmp	r3, #0
 800d890:	f47f ac86 	bne.w	800d1a0 <tcp_input+0x2d0>
        pcb->state = FIN_WAIT_2;
 800d894:	2306      	movs	r3, #6
 800d896:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 800d898:	e482      	b.n	800d1a0 <tcp_input+0x2d0>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800d89a:	0798      	lsls	r0, r3, #30
 800d89c:	f57f ac80 	bpl.w	800d1a0 <tcp_input+0x2d0>
 800d8a0:	4b0e      	ldr	r3, [pc, #56]	@ (800d8dc <tcp_input+0xa0c>)
 800d8a2:	681a      	ldr	r2, [r3, #0]
 800d8a4:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800d8a6:	3b01      	subs	r3, #1
 800d8a8:	4293      	cmp	r3, r2
 800d8aa:	f47f ac79 	bne.w	800d1a0 <tcp_input+0x2d0>
        tcp_rexmit(pcb);
 800d8ae:	4628      	mov	r0, r5
 800d8b0:	f000 ff56 	bl	800e760 <tcp_rexmit>
    if (err != ERR_ABRT) {
 800d8b4:	e474      	b.n	800d1a0 <tcp_input+0x2d0>
 800d8b6:	bf00      	nop
 800d8b8:	24009cfc 	.word	0x24009cfc
 800d8bc:	24009cf8 	.word	0x24009cf8
 800d8c0:	24009cf7 	.word	0x24009cf7
 800d8c4:	24009d0c 	.word	0x24009d0c
 800d8c8:	08013d4c 	.word	0x08013d4c
 800d8cc:	08013f2c 	.word	0x08013f2c
 800d8d0:	0801241c 	.word	0x0801241c
 800d8d4:	08013f3c 	.word	0x08013f3c
 800d8d8:	080140d8 	.word	0x080140d8
 800d8dc:	24009d20 	.word	0x24009d20
 800d8e0:	24009d1c 	.word	0x24009d1c
 800d8e4:	24006c08 	.word	0x24006c08
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800d8e8:	4633      	mov	r3, r6
 800d8ea:	4630      	mov	r0, r6
 800d8ec:	4629      	mov	r1, r5
 800d8ee:	f7fe fb9b 	bl	800c028 <tcp_recv_null>
 800d8f2:	e6e4      	b.n	800d6be <tcp_input+0x7ee>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d8f4:	69ab      	ldr	r3, [r5, #24]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	f43f aaf7 	beq.w	800ceea <tcp_input+0x1a>
 800d8fc:	4601      	mov	r1, r0
 800d8fe:	f04f 32ff 	mov.w	r2, #4294967295
 800d902:	6928      	ldr	r0, [r5, #16]
 800d904:	4798      	blx	r3
 800d906:	f7ff baf0 	b.w	800ceea <tcp_input+0x1a>
      tcp_abandon(npcb, 0);
 800d90a:	4641      	mov	r1, r8
 800d90c:	4648      	mov	r0, r9
 800d90e:	f7fe f883 	bl	800ba18 <tcp_abandon>
      return;
 800d912:	f7ff baea 	b.w	800ceea <tcp_input+0x1a>
          pcb->state = ESTABLISHED;
 800d916:	2304      	movs	r3, #4
 800d918:	752b      	strb	r3, [r5, #20]
          if (pcb->listener == NULL) {
 800d91a:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d0a7      	beq.n	800d870 <tcp_input+0x9a0>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800d920:	699b      	ldr	r3, [r3, #24]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d05c      	beq.n	800d9e0 <tcp_input+0xb10>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800d926:	2200      	movs	r2, #0
 800d928:	4629      	mov	r1, r5
 800d92a:	6928      	ldr	r0, [r5, #16]
 800d92c:	4798      	blx	r3
          if (err != ERR_OK) {
 800d92e:	4603      	mov	r3, r0
 800d930:	2800      	cmp	r0, #0
 800d932:	d167      	bne.n	800da04 <tcp_input+0xb34>
          tcp_receive(pcb);
 800d934:	4628      	mov	r0, r5
 800d936:	f7fe fd83 	bl	800c440 <tcp_receive>
          if (recv_acked != 0) {
 800d93a:	f8ba 3000 	ldrh.w	r3, [sl]
 800d93e:	b113      	cbz	r3, 800d946 <tcp_input+0xa76>
            recv_acked--;
 800d940:	3b01      	subs	r3, #1
 800d942:	f8aa 3000 	strh.w	r3, [sl]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d946:	8e69      	ldrh	r1, [r5, #50]	@ 0x32
 800d948:	f241 131c 	movw	r3, #4380	@ 0x111c
 800d94c:	004a      	lsls	r2, r1, #1
 800d94e:	0088      	lsls	r0, r1, #2
 800d950:	429a      	cmp	r2, r3
 800d952:	4616      	mov	r6, r2
 800d954:	bf38      	it	cc
 800d956:	461e      	movcc	r6, r3
 800d958:	ebb6 0f81 	cmp.w	r6, r1, lsl #2
 800d95c:	d934      	bls.n	800d9c8 <tcp_input+0xaf8>
 800d95e:	b283      	uxth	r3, r0
 800d960:	f8a5 3048 	strh.w	r3, [r5, #72]	@ 0x48
          if (recv_flags & TF_GOT_FIN) {
 800d964:	f899 3000 	ldrb.w	r3, [r9]
 800d968:	069e      	lsls	r6, r3, #26
 800d96a:	f57f ac19 	bpl.w	800d1a0 <tcp_input+0x2d0>
 800d96e:	e579      	b.n	800d464 <tcp_input+0x594>
        TCP_RMV_ACTIVE(pcb);
 800d970:	68ea      	ldr	r2, [r5, #12]
 800d972:	60da      	str	r2, [r3, #12]
 800d974:	e64f      	b.n	800d616 <tcp_input+0x746>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800d976:	4b33      	ldr	r3, [pc, #204]	@ (800da44 <tcp_input+0xb74>)
 800d978:	f240 120d 	movw	r2, #269	@ 0x10d
 800d97c:	4932      	ldr	r1, [pc, #200]	@ (800da48 <tcp_input+0xb78>)
 800d97e:	4833      	ldr	r0, [pc, #204]	@ (800da4c <tcp_input+0xb7c>)
 800d980:	f003 fd8a 	bl	8011498 <iprintf>
      if (prev != NULL) {
 800d984:	f1b8 0f00 	cmp.w	r8, #0
 800d988:	f43f abc1 	beq.w	800d10e <tcp_input+0x23e>
 800d98c:	68eb      	ldr	r3, [r5, #12]
 800d98e:	f7ff bbb8 	b.w	800d102 <tcp_input+0x232>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800d992:	4b2c      	ldr	r3, [pc, #176]	@ (800da44 <tcp_input+0xb74>)
 800d994:	f240 1215 	movw	r2, #277	@ 0x115
 800d998:	492d      	ldr	r1, [pc, #180]	@ (800da50 <tcp_input+0xb80>)
 800d99a:	482c      	ldr	r0, [pc, #176]	@ (800da4c <tcp_input+0xb7c>)
 800d99c:	f003 fd7c 	bl	8011498 <iprintf>
  if (pcb == NULL) {
 800d9a0:	f7ff bbb9 	b.w	800d116 <tcp_input+0x246>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800d9a4:	2900      	cmp	r1, #0
 800d9a6:	f47f aecb 	bne.w	800d740 <tcp_input+0x870>
 800d9aa:	4b26      	ldr	r3, [pc, #152]	@ (800da44 <tcp_input+0xb74>)
 800d9ac:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800d9b0:	4928      	ldr	r1, [pc, #160]	@ (800da54 <tcp_input+0xb84>)
 800d9b2:	4826      	ldr	r0, [pc, #152]	@ (800da4c <tcp_input+0xb7c>)
 800d9b4:	f003 fd70 	bl	8011498 <iprintf>
 800d9b8:	e6c2      	b.n	800d740 <tcp_input+0x870>
  } else if (flags & TCP_FIN) {
 800d9ba:	07c1      	lsls	r1, r0, #31
 800d9bc:	f57f ac55 	bpl.w	800d26a <tcp_input+0x39a>
    pcb->tmr = tcp_ticks;
 800d9c0:	4b25      	ldr	r3, [pc, #148]	@ (800da58 <tcp_input+0xb88>)
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	622b      	str	r3, [r5, #32]
 800d9c6:	e450      	b.n	800d26a <tcp_input+0x39a>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d9c8:	429a      	cmp	r2, r3
 800d9ca:	bf88      	it	hi
 800d9cc:	b293      	uxthhi	r3, r2
 800d9ce:	e7c7      	b.n	800d960 <tcp_input+0xa90>
          TCP_RMV_ACTIVE(pcb);
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	f43f ae20 	beq.w	800d616 <tcp_input+0x746>
 800d9d6:	68da      	ldr	r2, [r3, #12]
 800d9d8:	42aa      	cmp	r2, r5
 800d9da:	d0c9      	beq.n	800d970 <tcp_input+0xaa0>
 800d9dc:	4613      	mov	r3, r2
 800d9de:	e7f7      	b.n	800d9d0 <tcp_input+0xb00>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800d9e0:	4b18      	ldr	r3, [pc, #96]	@ (800da44 <tcp_input+0xb74>)
 800d9e2:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800d9e6:	491d      	ldr	r1, [pc, #116]	@ (800da5c <tcp_input+0xb8c>)
 800d9e8:	4818      	ldr	r0, [pc, #96]	@ (800da4c <tcp_input+0xb7c>)
 800d9ea:	f003 fd55 	bl	8011498 <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800d9ee:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 800d9f0:	699b      	ldr	r3, [r3, #24]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d197      	bne.n	800d926 <tcp_input+0xa56>
 800d9f6:	e73b      	b.n	800d870 <tcp_input+0x9a0>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d9f8:	9102      	str	r1, [sp, #8]
 800d9fa:	4432      	add	r2, r6
 800d9fc:	4918      	ldr	r1, [pc, #96]	@ (800da60 <tcp_input+0xb90>)
 800d9fe:	4628      	mov	r0, r5
 800da00:	6809      	ldr	r1, [r1, #0]
 800da02:	e68f      	b.n	800d724 <tcp_input+0x854>
            if (err != ERR_ABRT) {
 800da04:	330d      	adds	r3, #13
 800da06:	f43f abde 	beq.w	800d1c6 <tcp_input+0x2f6>
 800da0a:	e731      	b.n	800d870 <tcp_input+0x9a0>
          pcb->rtime = -1;
 800da0c:	f04f 33ff 	mov.w	r3, #4294967295
 800da10:	e6f9      	b.n	800d806 <tcp_input+0x936>
          rseg = pcb->unsent;
 800da12:	6eee      	ldr	r6, [r5, #108]	@ 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800da14:	b176      	cbz	r6, 800da34 <tcp_input+0xb64>
          pcb->unsent = rseg->next;
 800da16:	6833      	ldr	r3, [r6, #0]
 800da18:	66eb      	str	r3, [r5, #108]	@ 0x6c
 800da1a:	e6ea      	b.n	800d7f2 <tcp_input+0x922>
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800da1c:	4b09      	ldr	r3, [pc, #36]	@ (800da44 <tcp_input+0xb74>)
 800da1e:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800da22:	4910      	ldr	r1, [pc, #64]	@ (800da64 <tcp_input+0xb94>)
 800da24:	4809      	ldr	r0, [pc, #36]	@ (800da4c <tcp_input+0xb7c>)
 800da26:	f003 fd37 	bl	8011498 <iprintf>
 800da2a:	e6d7      	b.n	800d7dc <tcp_input+0x90c>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800da2c:	4299      	cmp	r1, r3
 800da2e:	bf88      	it	hi
 800da30:	b28b      	uxthhi	r3, r1
 800da32:	e6cc      	b.n	800d7ce <tcp_input+0x8fe>
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800da34:	4b03      	ldr	r3, [pc, #12]	@ (800da44 <tcp_input+0xb74>)
 800da36:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800da3a:	490b      	ldr	r1, [pc, #44]	@ (800da68 <tcp_input+0xb98>)
 800da3c:	4803      	ldr	r0, [pc, #12]	@ (800da4c <tcp_input+0xb7c>)
 800da3e:	f003 fd2b 	bl	8011498 <iprintf>
 800da42:	e7e8      	b.n	800da16 <tcp_input+0xb46>
 800da44:	08013d4c 	.word	0x08013d4c
 800da48:	08013fe4 	.word	0x08013fe4
 800da4c:	0801241c 	.word	0x0801241c
 800da50:	08014010 	.word	0x08014010
 800da54:	0801406c 	.word	0x0801406c
 800da58:	24009d08 	.word	0x24009d08
 800da5c:	080140b8 	.word	0x080140b8
 800da60:	24009d1c 	.word	0x24009d1c
 800da64:	0801408c 	.word	0x0801408c
 800da68:	080140a4 	.word	0x080140a4

0800da6c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 800da6c:	4a02      	ldr	r2, [pc, #8]	@ (800da78 <tcp_trigger_input_pcb_close+0xc>)
 800da6e:	7813      	ldrb	r3, [r2, #0]
 800da70:	f043 0310 	orr.w	r3, r3, #16
 800da74:	7013      	strb	r3, [r2, #0]
}
 800da76:	4770      	bx	lr
 800da78:	24009d14 	.word	0x24009d14

0800da7c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800da7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da80:	2600      	movs	r6, #0
 800da82:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 800da84:	460c      	mov	r4, r1
 800da86:	4681      	mov	r9, r0
 800da88:	f361 060f 	bfi	r6, r1, #0, #16
 800da8c:	4615      	mov	r5, r2
 800da8e:	4698      	mov	r8, r3
 800da90:	f89d a02c 	ldrb.w	sl, [sp, #44]	@ 0x2c
 800da94:	f361 461f 	bfi	r6, r1, #16, #16
 800da98:	f89d b030 	ldrb.w	fp, [sp, #48]	@ 0x30
  struct pbuf *p;
  u16_t alloc = length;

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800da9c:	2f00      	cmp	r7, #0
 800da9e:	d033      	beq.n	800db08 <tcp_pbuf_prealloc+0x8c>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800daa0:	42ac      	cmp	r4, r5
 800daa2:	d20e      	bcs.n	800dac2 <tcp_pbuf_prealloc+0x46>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800daa4:	f01a 0f02 	tst.w	sl, #2
 800daa8:	d008      	beq.n	800dabc <tcp_pbuf_prealloc+0x40>
        (!(pcb->flags & TF_NODELAY) &&
         (!first_seg ||
          pcb->unsent != NULL ||
          pcb->unacked != NULL))) {
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800daaa:	f204 211b 	addw	r1, r4, #539	@ 0x21b
 800daae:	f021 0103 	bic.w	r1, r1, #3
 800dab2:	42a9      	cmp	r1, r5
 800dab4:	bf28      	it	cs
 800dab6:	4629      	movcs	r1, r5
 800dab8:	b289      	uxth	r1, r1
 800daba:	e003      	b.n	800dac4 <tcp_pbuf_prealloc+0x48>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800dabc:	8b7b      	ldrh	r3, [r7, #26]
 800dabe:	065b      	lsls	r3, r3, #25
 800dac0:	d518      	bpl.n	800daf4 <tcp_pbuf_prealloc+0x78>
 800dac2:	4621      	mov	r1, r4
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800dac4:	4648      	mov	r0, r9
 800dac6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800daca:	f7fc fec9 	bl	800a860 <pbuf_alloc>
  if (p == NULL) {
 800dace:	4605      	mov	r5, r0
 800dad0:	b168      	cbz	r0, 800daee <tcp_pbuf_prealloc+0x72>
    return NULL;
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800dad2:	6803      	ldr	r3, [r0, #0]
 800dad4:	b133      	cbz	r3, 800dae4 <tcp_pbuf_prealloc+0x68>
 800dad6:	4b10      	ldr	r3, [pc, #64]	@ (800db18 <tcp_pbuf_prealloc+0x9c>)
 800dad8:	f240 120b 	movw	r2, #267	@ 0x10b
 800dadc:	490f      	ldr	r1, [pc, #60]	@ (800db1c <tcp_pbuf_prealloc+0xa0>)
 800dade:	4810      	ldr	r0, [pc, #64]	@ (800db20 <tcp_pbuf_prealloc+0xa4>)
 800dae0:	f003 fcda 	bl	8011498 <iprintf>
  *oversize = p->len - length;
 800dae4:	896b      	ldrh	r3, [r5, #10]
 800dae6:	1b1b      	subs	r3, r3, r4
 800dae8:	f8a8 3000 	strh.w	r3, [r8]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800daec:	60ae      	str	r6, [r5, #8]
  return p;
}
 800daee:	4628      	mov	r0, r5
 800daf0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (!(pcb->flags & TF_NODELAY) &&
 800daf4:	f1bb 0f00 	cmp.w	fp, #0
 800daf8:	d0d7      	beq.n	800daaa <tcp_pbuf_prealloc+0x2e>
         (!first_seg ||
 800dafa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d1d4      	bne.n	800daaa <tcp_pbuf_prealloc+0x2e>
          pcb->unsent != NULL ||
 800db00:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800db02:	2b00      	cmp	r3, #0
 800db04:	d1d1      	bne.n	800daaa <tcp_pbuf_prealloc+0x2e>
 800db06:	e7dc      	b.n	800dac2 <tcp_pbuf_prealloc+0x46>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800db08:	4b03      	ldr	r3, [pc, #12]	@ (800db18 <tcp_pbuf_prealloc+0x9c>)
 800db0a:	22e9      	movs	r2, #233	@ 0xe9
 800db0c:	4905      	ldr	r1, [pc, #20]	@ (800db24 <tcp_pbuf_prealloc+0xa8>)
 800db0e:	4804      	ldr	r0, [pc, #16]	@ (800db20 <tcp_pbuf_prealloc+0xa4>)
 800db10:	f003 fcc2 	bl	8011498 <iprintf>
 800db14:	e7c4      	b.n	800daa0 <tcp_pbuf_prealloc+0x24>
 800db16:	bf00      	nop
 800db18:	080140f4 	.word	0x080140f4
 800db1c:	08014148 	.word	0x08014148
 800db20:	0801241c 	.word	0x0801241c
 800db24:	08014128 	.word	0x08014128

0800db28 <tcp_create_segment>:
{
 800db28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db2c:	460e      	mov	r6, r1
 800db2e:	f89d a020 	ldrb.w	sl, [sp, #32]
 800db32:	4690      	mov	r8, r2
 800db34:	4699      	mov	r9, r3
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800db36:	4607      	mov	r7, r0
 800db38:	2800      	cmp	r0, #0
 800db3a:	d047      	beq.n	800dbcc <tcp_create_segment+0xa4>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800db3c:	2e00      	cmp	r6, #0
 800db3e:	d04d      	beq.n	800dbdc <tcp_create_segment+0xb4>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800db40:	ea4f 058a 	mov.w	r5, sl, lsl #2
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800db44:	2003      	movs	r0, #3
 800db46:	f7fc fb05 	bl	800a154 <memp_malloc>
 800db4a:	4604      	mov	r4, r0
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800db4c:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800db50:	2800      	cmp	r0, #0
 800db52:	d051      	beq.n	800dbf8 <tcp_create_segment+0xd0>
  seg->flags = optflags;
 800db54:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 800db58:	2300      	movs	r3, #0
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800db5a:	8932      	ldrh	r2, [r6, #8]
  seg->p = p;
 800db5c:	6046      	str	r6, [r0, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800db5e:	42aa      	cmp	r2, r5
  seg->next = NULL;
 800db60:	6003      	str	r3, [r0, #0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800db62:	d32b      	bcc.n	800dbbc <tcp_create_segment+0x94>
  seg->len = p->tot_len - optlen;
 800db64:	1b52      	subs	r2, r2, r5
  if (pbuf_add_header(p, TCP_HLEN)) {
 800db66:	4630      	mov	r0, r6
 800db68:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 800db6a:	8122      	strh	r2, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 800db6c:	f7fc fd76 	bl	800a65c <pbuf_add_header>
 800db70:	4606      	mov	r6, r0
 800db72:	2800      	cmp	r0, #0
 800db74:	d139      	bne.n	800dbea <tcp_create_segment+0xc2>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800db76:	6863      	ldr	r3, [r4, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800db78:	02ad      	lsls	r5, r5, #10
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800db7a:	8af8      	ldrh	r0, [r7, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800db7c:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800db80:	f505 45a0 	add.w	r5, r5, #20480	@ 0x5000
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800db84:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800db88:	f7fb ff44 	bl	8009a14 <lwip_htons>
 800db8c:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800db90:	8b38      	ldrh	r0, [r7, #24]
 800db92:	68e7      	ldr	r7, [r4, #12]
 800db94:	f7fb ff3e 	bl	8009a14 <lwip_htons>
 800db98:	8078      	strh	r0, [r7, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800db9a:	4648      	mov	r0, r9
 800db9c:	68e7      	ldr	r7, [r4, #12]
 800db9e:	f7fb ff3d 	bl	8009a1c <lwip_htonl>
 800dba2:	6078      	str	r0, [r7, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800dba4:	ea48 0005 	orr.w	r0, r8, r5
 800dba8:	68e7      	ldr	r7, [r4, #12]
 800dbaa:	f7fb ff33 	bl	8009a14 <lwip_htons>
  seg->tcphdr->urgp = 0;
 800dbae:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800dbb0:	81b8      	strh	r0, [r7, #12]
}
 800dbb2:	4620      	mov	r0, r4
  seg->tcphdr->urgp = 0;
 800dbb4:	749e      	strb	r6, [r3, #18]
 800dbb6:	74de      	strb	r6, [r3, #19]
}
 800dbb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800dbbc:	22b0      	movs	r2, #176	@ 0xb0
 800dbbe:	4b10      	ldr	r3, [pc, #64]	@ (800dc00 <tcp_create_segment+0xd8>)
 800dbc0:	4910      	ldr	r1, [pc, #64]	@ (800dc04 <tcp_create_segment+0xdc>)
 800dbc2:	4811      	ldr	r0, [pc, #68]	@ (800dc08 <tcp_create_segment+0xe0>)
 800dbc4:	f003 fc68 	bl	8011498 <iprintf>
  seg->len = p->tot_len - optlen;
 800dbc8:	8932      	ldrh	r2, [r6, #8]
 800dbca:	e7cb      	b.n	800db64 <tcp_create_segment+0x3c>
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800dbcc:	4b0c      	ldr	r3, [pc, #48]	@ (800dc00 <tcp_create_segment+0xd8>)
 800dbce:	22a3      	movs	r2, #163	@ 0xa3
 800dbd0:	490e      	ldr	r1, [pc, #56]	@ (800dc0c <tcp_create_segment+0xe4>)
 800dbd2:	480d      	ldr	r0, [pc, #52]	@ (800dc08 <tcp_create_segment+0xe0>)
 800dbd4:	f003 fc60 	bl	8011498 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800dbd8:	2e00      	cmp	r6, #0
 800dbda:	d1b1      	bne.n	800db40 <tcp_create_segment+0x18>
 800dbdc:	4b08      	ldr	r3, [pc, #32]	@ (800dc00 <tcp_create_segment+0xd8>)
 800dbde:	22a4      	movs	r2, #164	@ 0xa4
 800dbe0:	490b      	ldr	r1, [pc, #44]	@ (800dc10 <tcp_create_segment+0xe8>)
 800dbe2:	4809      	ldr	r0, [pc, #36]	@ (800dc08 <tcp_create_segment+0xe0>)
 800dbe4:	f003 fc58 	bl	8011498 <iprintf>
 800dbe8:	e7aa      	b.n	800db40 <tcp_create_segment+0x18>
    tcp_seg_free(seg);
 800dbea:	4620      	mov	r0, r4
 800dbec:	f7fd fafc 	bl	800b1e8 <tcp_seg_free>
    return NULL;
 800dbf0:	2400      	movs	r4, #0
}
 800dbf2:	4620      	mov	r0, r4
 800dbf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    pbuf_free(p);
 800dbf8:	4630      	mov	r0, r6
 800dbfa:	f7fc fdc1 	bl	800a780 <pbuf_free>
    return NULL;
 800dbfe:	e7f7      	b.n	800dbf0 <tcp_create_segment+0xc8>
 800dc00:	080140f4 	.word	0x080140f4
 800dc04:	080141a0 	.word	0x080141a0
 800dc08:	0801241c 	.word	0x0801241c
 800dc0c:	0801415c 	.word	0x0801415c
 800dc10:	0801417c 	.word	0x0801417c

0800dc14 <tcp_output_alloc_header_common.constprop.0>:
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800dc14:	3114      	adds	r1, #20
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800dc16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800dc1a:	b289      	uxth	r1, r1
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800dc1c:	4606      	mov	r6, r0
 800dc1e:	4617      	mov	r7, r2
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800dc20:	2022      	movs	r0, #34	@ 0x22
 800dc22:	f44f 7220 	mov.w	r2, #640	@ 0x280
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800dc26:	461c      	mov	r4, r3
 800dc28:	f8bd a020 	ldrh.w	sl, [sp, #32]
 800dc2c:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800dc30:	f8bd 8028 	ldrh.w	r8, [sp, #40]	@ 0x28
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800dc34:	f7fc fe14 	bl	800a860 <pbuf_alloc>
  if (p != NULL) {
 800dc38:	4605      	mov	r5, r0
 800dc3a:	b300      	cbz	r0, 800dc7e <tcp_output_alloc_header_common.constprop.0+0x6a>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800dc3c:	8943      	ldrh	r3, [r0, #10]
 800dc3e:	2b13      	cmp	r3, #19
 800dc40:	d920      	bls.n	800dc84 <tcp_output_alloc_header_common.constprop.0+0x70>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
    tcphdr->src = lwip_htons(src_port);
 800dc42:	4620      	mov	r0, r4
    tcphdr = (struct tcp_hdr *)p->payload;
 800dc44:	686c      	ldr	r4, [r5, #4]
    tcphdr->src = lwip_htons(src_port);
 800dc46:	f7fb fee5 	bl	8009a14 <lwip_htons>
 800dc4a:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800dc4c:	4650      	mov	r0, sl
 800dc4e:	f7fb fee1 	bl	8009a14 <lwip_htons>
    tcphdr->seqno = seqno_be;
 800dc52:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(dst_port);
 800dc54:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(ackno);
 800dc56:	4630      	mov	r0, r6
 800dc58:	f7fb fee0 	bl	8009a1c <lwip_htonl>
 800dc5c:	4603      	mov	r3, r0
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800dc5e:	f449 40a0 	orr.w	r0, r9, #20480	@ 0x5000
    tcphdr->ackno = lwip_htonl(ackno);
 800dc62:	60a3      	str	r3, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800dc64:	f7fb fed6 	bl	8009a14 <lwip_htons>
 800dc68:	4603      	mov	r3, r0
    tcphdr->wnd = lwip_htons(wnd);
 800dc6a:	4640      	mov	r0, r8
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800dc6c:	81a3      	strh	r3, [r4, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800dc6e:	f7fb fed1 	bl	8009a14 <lwip_htons>
    tcphdr->chksum = 0;
 800dc72:	2300      	movs	r3, #0
    tcphdr->wnd = lwip_htons(wnd);
 800dc74:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
 800dc76:	7423      	strb	r3, [r4, #16]
 800dc78:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 800dc7a:	74a3      	strb	r3, [r4, #18]
 800dc7c:	74e3      	strb	r3, [r4, #19]
  }
  return p;
}
 800dc7e:	4628      	mov	r0, r5
 800dc80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800dc84:	4b03      	ldr	r3, [pc, #12]	@ (800dc94 <tcp_output_alloc_header_common.constprop.0+0x80>)
 800dc86:	f240 7223 	movw	r2, #1827	@ 0x723
 800dc8a:	4903      	ldr	r1, [pc, #12]	@ (800dc98 <tcp_output_alloc_header_common.constprop.0+0x84>)
 800dc8c:	4803      	ldr	r0, [pc, #12]	@ (800dc9c <tcp_output_alloc_header_common.constprop.0+0x88>)
 800dc8e:	f003 fc03 	bl	8011498 <iprintf>
 800dc92:	e7d6      	b.n	800dc42 <tcp_output_alloc_header_common.constprop.0+0x2e>
 800dc94:	080140f4 	.word	0x080140f4
 800dc98:	080141b8 	.word	0x080141b8
 800dc9c:	0801241c 	.word	0x0801241c

0800dca0 <tcp_output_alloc_header.constprop.0>:
 * @param datalen length of tcp data to reserve in pbuf
 * @param seqno_be seqno in network byte order (big-endian)
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800dca0:	b570      	push	{r4, r5, r6, lr}
 800dca2:	460d      	mov	r5, r1
 800dca4:	b084      	sub	sp, #16
                        u32_t seqno_be /* already in network byte order */)
{
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800dca6:	4604      	mov	r4, r0
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800dca8:	4616      	mov	r6, r2
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800dcaa:	b190      	cbz	r0, 800dcd2 <tcp_output_alloc_header.constprop.0+0x32>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800dcac:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800dcae:	2210      	movs	r2, #16
 800dcb0:	8b21      	ldrh	r1, [r4, #24]
 800dcb2:	9302      	str	r3, [sp, #8]
 800dcb4:	e9cd 1200 	strd	r1, r2, [sp]
 800dcb8:	4632      	mov	r2, r6
 800dcba:	4629      	mov	r1, r5
 800dcbc:	8ae3      	ldrh	r3, [r4, #22]
 800dcbe:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800dcc0:	f7ff ffa8 	bl	800dc14 <tcp_output_alloc_header_common.constprop.0>
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800dcc4:	b118      	cbz	r0, 800dcce <tcp_output_alloc_header.constprop.0+0x2e>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800dcc6:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800dcc8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800dcca:	4413      	add	r3, r2
 800dccc:	62e3      	str	r3, [r4, #44]	@ 0x2c
  }
  return p;
}
 800dcce:	b004      	add	sp, #16
 800dcd0:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800dcd2:	4b04      	ldr	r3, [pc, #16]	@ (800dce4 <tcp_output_alloc_header.constprop.0+0x44>)
 800dcd4:	f240 7242 	movw	r2, #1858	@ 0x742
 800dcd8:	4903      	ldr	r1, [pc, #12]	@ (800dce8 <tcp_output_alloc_header.constprop.0+0x48>)
 800dcda:	4804      	ldr	r0, [pc, #16]	@ (800dcec <tcp_output_alloc_header.constprop.0+0x4c>)
 800dcdc:	f003 fbdc 	bl	8011498 <iprintf>
 800dce0:	e7e4      	b.n	800dcac <tcp_output_alloc_header.constprop.0+0xc>
 800dce2:	bf00      	nop
 800dce4:	080140f4 	.word	0x080140f4
 800dce8:	080141e8 	.word	0x080141e8
 800dcec:	0801241c 	.word	0x0801241c

0800dcf0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800dcf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dcf2:	4604      	mov	r4, r0
 800dcf4:	b085      	sub	sp, #20
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800dcf6:	460d      	mov	r5, r1
{
 800dcf8:	4617      	mov	r7, r2
 800dcfa:	461e      	mov	r6, r3
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800dcfc:	b1f9      	cbz	r1, 800dd3e <tcp_output_control_segment+0x4e>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800dcfe:	b334      	cbz	r4, 800dd4e <tcp_output_control_segment+0x5e>
 800dd00:	7a20      	ldrb	r0, [r4, #8]
 800dd02:	b9a8      	cbnz	r0, 800dd30 <tcp_output_control_segment+0x40>
    return ip_route(src, dst);
 800dd04:	4630      	mov	r0, r6
 800dd06:	f002 fa13 	bl	8010130 <ip4_route>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 800dd0a:	b1a8      	cbz	r0, 800dd38 <tcp_output_control_segment+0x48>
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800dd0c:	7ae3      	ldrb	r3, [r4, #11]
      tos = pcb->tos;
 800dd0e:	7aa4      	ldrb	r4, [r4, #10]
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
      tos = 0;
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800dd10:	9400      	str	r4, [sp, #0]
 800dd12:	2406      	movs	r4, #6
 800dd14:	9002      	str	r0, [sp, #8]
 800dd16:	4632      	mov	r2, r6
 800dd18:	9401      	str	r4, [sp, #4]
 800dd1a:	4639      	mov	r1, r7
 800dd1c:	4628      	mov	r0, r5
 800dd1e:	f002 fba1 	bl	8010464 <ip4_output_if>
 800dd22:	4604      	mov	r4, r0
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800dd24:	4628      	mov	r0, r5
 800dd26:	f7fc fd2b 	bl	800a780 <pbuf_free>
  return err;
}
 800dd2a:	4620      	mov	r0, r4
 800dd2c:	b005      	add	sp, #20
 800dd2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return netif_get_by_index(pcb->netif_idx);
 800dd30:	f7fc fc20 	bl	800a574 <netif_get_by_index>
  if (netif == NULL) {
 800dd34:	2800      	cmp	r0, #0
 800dd36:	d1e9      	bne.n	800dd0c <tcp_output_control_segment+0x1c>
    err = ERR_RTE;
 800dd38:	f06f 0403 	mvn.w	r4, #3
 800dd3c:	e7f2      	b.n	800dd24 <tcp_output_control_segment+0x34>
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800dd3e:	4b07      	ldr	r3, [pc, #28]	@ (800dd5c <tcp_output_control_segment+0x6c>)
 800dd40:	f240 7287 	movw	r2, #1927	@ 0x787
 800dd44:	4906      	ldr	r1, [pc, #24]	@ (800dd60 <tcp_output_control_segment+0x70>)
 800dd46:	4807      	ldr	r0, [pc, #28]	@ (800dd64 <tcp_output_control_segment+0x74>)
 800dd48:	f003 fba6 	bl	8011498 <iprintf>
 800dd4c:	e7d7      	b.n	800dcfe <tcp_output_control_segment+0xe>
    return ip_route(src, dst);
 800dd4e:	4630      	mov	r0, r6
 800dd50:	f002 f9ee 	bl	8010130 <ip4_route>
  if (netif == NULL) {
 800dd54:	2800      	cmp	r0, #0
 800dd56:	d0ef      	beq.n	800dd38 <tcp_output_control_segment+0x48>
      ttl = TCP_TTL;
 800dd58:	23ff      	movs	r3, #255	@ 0xff
 800dd5a:	e7d9      	b.n	800dd10 <tcp_output_control_segment+0x20>
 800dd5c:	080140f4 	.word	0x080140f4
 800dd60:	08014210 	.word	0x08014210
 800dd64:	0801241c 	.word	0x0801241c

0800dd68 <tcp_write>:
{
 800dd68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t oversize = 0;
 800dd6c:	2400      	movs	r4, #0
{
 800dd6e:	b091      	sub	sp, #68	@ 0x44
 800dd70:	9107      	str	r1, [sp, #28]
 800dd72:	9309      	str	r3, [sp, #36]	@ 0x24
  u16_t oversize = 0;
 800dd74:	f8ad 403e 	strh.w	r4, [sp, #62]	@ 0x3e
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800dd78:	2800      	cmp	r0, #0
 800dd7a:	f000 82d8 	beq.w	800e32e <tcp_write+0x5c6>
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800dd7e:	f8b0 a062 	ldrh.w	sl, [r0, #98]	@ 0x62
 800dd82:	4691      	mov	r9, r2
 800dd84:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 800dd86:	4680      	mov	r8, r0
 800dd88:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
 800dd8c:	459a      	cmp	sl, r3
 800dd8e:	4652      	mov	r2, sl
 800dd90:	bf28      	it	cs
 800dd92:	461a      	movcs	r2, r3
  mss_local = mss_local ? mss_local : pcb->mss;
 800dd94:	2a00      	cmp	r2, #0
 800dd96:	bf08      	it	eq
 800dd98:	461a      	moveq	r2, r3
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800dd9a:	9b07      	ldr	r3, [sp, #28]
  mss_local = mss_local ? mss_local : pcb->mss;
 800dd9c:	9205      	str	r2, [sp, #20]
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	f000 82bb 	beq.w	800e31a <tcp_write+0x5b2>
  if ((pcb->state != ESTABLISHED) &&
 800dda4:	7d03      	ldrb	r3, [r0, #20]
      (pcb->state != CLOSE_WAIT) &&
 800dda6:	1e9a      	subs	r2, r3, #2
      (pcb->state != SYN_SENT) &&
 800dda8:	2a02      	cmp	r2, #2
 800ddaa:	d902      	bls.n	800ddb2 <tcp_write+0x4a>
 800ddac:	2b07      	cmp	r3, #7
 800ddae:	f040 824c 	bne.w	800e24a <tcp_write+0x4e2>
  } else if (len == 0) {
 800ddb2:	f1b9 0f00 	cmp.w	r9, #0
 800ddb6:	d05b      	beq.n	800de70 <tcp_write+0x108>
  if (len > pcb->snd_buf) {
 800ddb8:	f8b8 3064 	ldrh.w	r3, [r8, #100]	@ 0x64
 800ddbc:	454b      	cmp	r3, r9
 800ddbe:	f0c0 828f 	bcc.w	800e2e0 <tcp_write+0x578>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800ddc2:	f8b8 5066 	ldrh.w	r5, [r8, #102]	@ 0x66
 800ddc6:	2d08      	cmp	r5, #8
 800ddc8:	f200 828a 	bhi.w	800e2e0 <tcp_write+0x578>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800ddcc:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
  if (pcb->snd_queuelen != 0) {
 800ddd0:	2d00      	cmp	r5, #0
 800ddd2:	d043      	beq.n	800de5c <tcp_write+0xf4>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800ddd4:	f8d8 706c 	ldr.w	r7, [r8, #108]	@ 0x6c
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	f000 81da 	beq.w	800e192 <tcp_write+0x42a>
  if (pcb->unsent != NULL) {
 800ddde:	2f00      	cmp	r7, #0
 800dde0:	f000 81c5 	beq.w	800e16e <tcp_write+0x406>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800dde4:	463b      	mov	r3, r7
 800dde6:	683f      	ldr	r7, [r7, #0]
 800dde8:	2f00      	cmp	r7, #0
 800ddea:	d1fb      	bne.n	800dde4 <tcp_write+0x7c>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800ddec:	7a9c      	ldrb	r4, [r3, #10]
 800ddee:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ddf0:	00a4      	lsls	r4, r4, #2
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800ddf2:	891b      	ldrh	r3, [r3, #8]
 800ddf4:	9905      	ldr	r1, [sp, #20]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800ddf6:	f004 0404 	and.w	r4, r4, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800ddfa:	191a      	adds	r2, r3, r4
 800ddfc:	4291      	cmp	r1, r2
 800ddfe:	f2c0 81ea 	blt.w	800e1d6 <tcp_write+0x46e>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800de02:	9a05      	ldr	r2, [sp, #20]
 800de04:	eba2 0b04 	sub.w	fp, r2, r4
 800de08:	ebab 0b03 	sub.w	fp, fp, r3
    oversize = pcb->unsent_oversize;
 800de0c:	f8b8 3068 	ldrh.w	r3, [r8, #104]	@ 0x68
    space = mss_local - (last_unsent->len + unsent_optlen);
 800de10:	fa1f fb8b 	uxth.w	fp, fp
    oversize = pcb->unsent_oversize;
 800de14:	930a      	str	r3, [sp, #40]	@ 0x28
 800de16:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
    if (oversize > 0) {
 800de1a:	b383      	cbz	r3, 800de7e <tcp_write+0x116>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800de1c:	455b      	cmp	r3, fp
 800de1e:	f200 81ca 	bhi.w	800e1b6 <tcp_write+0x44e>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800de22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800de24:	454b      	cmp	r3, r9
 800de26:	461c      	mov	r4, r3
 800de28:	bf28      	it	cs
 800de2a:	464c      	movcs	r4, r9
 800de2c:	455c      	cmp	r4, fp
 800de2e:	bf28      	it	cs
 800de30:	465c      	movcs	r4, fp
      oversize -= oversize_used;
 800de32:	1b1b      	subs	r3, r3, r4
 800de34:	b29b      	uxth	r3, r3
 800de36:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800de3a:	b143      	cbz	r3, 800de4e <tcp_write+0xe6>
 800de3c:	45a1      	cmp	r9, r4
 800de3e:	d006      	beq.n	800de4e <tcp_write+0xe6>
 800de40:	4bad      	ldr	r3, [pc, #692]	@ (800e0f8 <tcp_write+0x390>)
 800de42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800de46:	49ad      	ldr	r1, [pc, #692]	@ (800e0fc <tcp_write+0x394>)
 800de48:	48ad      	ldr	r0, [pc, #692]	@ (800e100 <tcp_write+0x398>)
 800de4a:	f003 fb25 	bl	8011498 <iprintf>
      space -= oversize_used;
 800de4e:	ebab 0b04 	sub.w	fp, fp, r4
 800de52:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
      pos += oversize_used;
 800de54:	940a      	str	r4, [sp, #40]	@ 0x28
      space -= oversize_used;
 800de56:	fa1f fb8b 	uxth.w	fp, fp
 800de5a:	e011      	b.n	800de80 <tcp_write+0x118>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	f000 8181 	beq.w	800e164 <tcp_write+0x3fc>
 800de62:	4ba5      	ldr	r3, [pc, #660]	@ (800e0f8 <tcp_write+0x390>)
 800de64:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 800de68:	49a6      	ldr	r1, [pc, #664]	@ (800e104 <tcp_write+0x39c>)
 800de6a:	48a5      	ldr	r0, [pc, #660]	@ (800e100 <tcp_write+0x398>)
 800de6c:	f003 fb14 	bl	8011498 <iprintf>
  if (pcb->unsent != NULL) {
 800de70:	f8d8 706c 	ldr.w	r7, [r8, #108]	@ 0x6c
  queuelen = pcb->snd_queuelen;
 800de74:	f8b8 5066 	ldrh.w	r5, [r8, #102]	@ 0x66
  if (pcb->unsent != NULL) {
 800de78:	2f00      	cmp	r7, #0
 800de7a:	d1b3      	bne.n	800dde4 <tcp_write+0x7c>
 800de7c:	e177      	b.n	800e16e <tcp_write+0x406>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800de7e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800de80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800de82:	454b      	cmp	r3, r9
 800de84:	d23b      	bcs.n	800defe <tcp_write+0x196>
 800de86:	f1bb 0f00 	cmp.w	fp, #0
 800de8a:	d038      	beq.n	800defe <tcp_write+0x196>
 800de8c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800de8e:	8912      	ldrh	r2, [r2, #8]
 800de90:	920d      	str	r2, [sp, #52]	@ 0x34
 800de92:	2a00      	cmp	r2, #0
 800de94:	f000 8179 	beq.w	800e18a <tcp_write+0x422>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800de98:	eba9 0603 	sub.w	r6, r9, r3
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800de9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
      u16_t seglen = LWIP_MIN(space, len - pos);
 800de9e:	455e      	cmp	r6, fp
 800dea0:	bfa8      	it	ge
 800dea2:	465e      	movge	r6, fp
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800dea4:	07d9      	lsls	r1, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 800dea6:	b2b4      	uxth	r4, r6
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800dea8:	f100 81d2 	bmi.w	800e250 <tcp_write+0x4e8>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800deac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800deae:	685a      	ldr	r2, [r3, #4]
 800deb0:	4613      	mov	r3, r2
 800deb2:	6812      	ldr	r2, [r2, #0]
 800deb4:	2a00      	cmp	r2, #0
 800deb6:	d1fb      	bne.n	800deb0 <tcp_write+0x148>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800deb8:	920c      	str	r2, [sp, #48]	@ 0x30
 800deba:	7b1a      	ldrb	r2, [r3, #12]
 800debc:	2a3f      	cmp	r2, #63	@ 0x3f
 800debe:	d806      	bhi.n	800dece <tcp_write+0x166>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800dec0:	895a      	ldrh	r2, [r3, #10]
 800dec2:	685b      	ldr	r3, [r3, #4]
 800dec4:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800dec6:	9a07      	ldr	r2, [sp, #28]
 800dec8:	429a      	cmp	r2, r3
 800deca:	f000 81b9 	beq.w	800e240 <tcp_write+0x4d8>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800dece:	2201      	movs	r2, #1
 800ded0:	4621      	mov	r1, r4
 800ded2:	2000      	movs	r0, #0
 800ded4:	f7fc fcc4 	bl	800a860 <pbuf_alloc>
 800ded8:	900c      	str	r0, [sp, #48]	@ 0x30
 800deda:	2800      	cmp	r0, #0
 800dedc:	f000 8231 	beq.w	800e342 <tcp_write+0x5da>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800dee0:	9b07      	ldr	r3, [sp, #28]
 800dee2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dee4:	440b      	add	r3, r1
 800dee6:	6043      	str	r3, [r0, #4]
          queuelen += pbuf_clen(concat_p);
 800dee8:	f7fc fdd8 	bl	800aa9c <pbuf_clen>
 800deec:	1943      	adds	r3, r0, r5
 800deee:	b29d      	uxth	r5, r3
  u16_t extendlen = 0;
 800def0:	2300      	movs	r3, #0
 800def2:	930d      	str	r3, [sp, #52]	@ 0x34
      pos += seglen;
 800def4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800def6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800def8:	1919      	adds	r1, r3, r4
 800defa:	b28c      	uxth	r4, r1
 800defc:	e003      	b.n	800df06 <tcp_write+0x19e>
  struct pbuf *concat_p = NULL;
 800defe:	2300      	movs	r3, #0
 800df00:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800df02:	930c      	str	r3, [sp, #48]	@ 0x30
  u16_t extendlen = 0;
 800df04:	930d      	str	r3, [sp, #52]	@ 0x34
  while (pos < len) {
 800df06:	45a1      	cmp	r9, r4
 800df08:	f240 8083 	bls.w	800e012 <tcp_write+0x2aa>
 800df0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800df0e:	2700      	movs	r7, #0
 800df10:	f003 0301 	and.w	r3, r3, #1
 800df14:	46bb      	mov	fp, r7
 800df16:	9308      	str	r3, [sp, #32]
 800df18:	e03f      	b.n	800df9a <tcp_write+0x232>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800df1a:	f8bd 303e 	ldrh.w	r3, [sp, #62]	@ 0x3e
 800df1e:	2b00      	cmp	r3, #0
 800df20:	f040 80d2 	bne.w	800e0c8 <tcp_write+0x360>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800df24:	2201      	movs	r2, #1
 800df26:	4651      	mov	r1, sl
 800df28:	2036      	movs	r0, #54	@ 0x36
 800df2a:	f7fc fc99 	bl	800a860 <pbuf_alloc>
 800df2e:	2800      	cmp	r0, #0
 800df30:	f000 80f0 	beq.w	800e114 <tcp_write+0x3ac>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800df34:	9a07      	ldr	r2, [sp, #28]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800df36:	2100      	movs	r1, #0
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800df38:	9006      	str	r0, [sp, #24]
 800df3a:	4422      	add	r2, r4
 800df3c:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800df3e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800df42:	2036      	movs	r0, #54	@ 0x36
 800df44:	f7fc fc8c 	bl	800a860 <pbuf_alloc>
 800df48:	9b06      	ldr	r3, [sp, #24]
 800df4a:	4606      	mov	r6, r0
 800df4c:	2800      	cmp	r0, #0
 800df4e:	f000 814c 	beq.w	800e1ea <tcp_write+0x482>
      pbuf_cat(p/*header*/, p2/*data*/);
 800df52:	4619      	mov	r1, r3
 800df54:	f7fc fdca 	bl	800aaec <pbuf_cat>
    queuelen += pbuf_clen(p);
 800df58:	4630      	mov	r0, r6
 800df5a:	f7fc fd9f 	bl	800aa9c <pbuf_clen>
 800df5e:	4428      	add	r0, r5
 800df60:	b285      	uxth	r5, r0
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800df62:	2d09      	cmp	r5, #9
 800df64:	d849      	bhi.n	800dffa <tcp_write+0x292>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800df66:	f8d8 305c 	ldr.w	r3, [r8, #92]	@ 0x5c
 800df6a:	2200      	movs	r2, #0
 800df6c:	4631      	mov	r1, r6
 800df6e:	4640      	mov	r0, r8
 800df70:	4423      	add	r3, r4
 800df72:	9200      	str	r2, [sp, #0]
 800df74:	f7ff fdd8 	bl	800db28 <tcp_create_segment>
 800df78:	4606      	mov	r6, r0
 800df7a:	2800      	cmp	r0, #0
 800df7c:	f000 80ca 	beq.w	800e114 <tcp_write+0x3ac>
    if (queue == NULL) {
 800df80:	f1bb 0f00 	cmp.w	fp, #0
 800df84:	d03e      	beq.n	800e004 <tcp_write+0x29c>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800df86:	2f00      	cmp	r7, #0
 800df88:	f000 80a6 	beq.w	800e0d8 <tcp_write+0x370>
    pos += seglen;
 800df8c:	44a2      	add	sl, r4
      prev_seg->next = seg;
 800df8e:	603e      	str	r6, [r7, #0]
    pos += seglen;
 800df90:	fa1f f48a 	uxth.w	r4, sl
  while (pos < len) {
 800df94:	45a1      	cmp	r9, r4
 800df96:	d93b      	bls.n	800e010 <tcp_write+0x2a8>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800df98:	4637      	mov	r7, r6
    u16_t left = len - pos;
 800df9a:	eba9 0a04 	sub.w	sl, r9, r4
    u16_t seglen = LWIP_MIN(left, max_len);
 800df9e:	9b05      	ldr	r3, [sp, #20]
 800dfa0:	fa1f fa8a 	uxth.w	sl, sl
 800dfa4:	459a      	cmp	sl, r3
 800dfa6:	bf28      	it	cs
 800dfa8:	469a      	movcs	sl, r3
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800dfaa:	9b08      	ldr	r3, [sp, #32]
    u16_t seglen = LWIP_MIN(left, max_len);
 800dfac:	fa1f fa8a 	uxth.w	sl, sl
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d0b2      	beq.n	800df1a <tcp_write+0x1b2>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800dfb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dfb6:	4651      	mov	r1, sl
 800dfb8:	9a05      	ldr	r2, [sp, #20]
 800dfba:	2036      	movs	r0, #54	@ 0x36
 800dfbc:	e9cd 8300 	strd	r8, r3, [sp]
 800dfc0:	fabb f38b 	clz	r3, fp
 800dfc4:	095b      	lsrs	r3, r3, #5
 800dfc6:	9302      	str	r3, [sp, #8]
 800dfc8:	f10d 033e 	add.w	r3, sp, #62	@ 0x3e
 800dfcc:	f7ff fd56 	bl	800da7c <tcp_pbuf_prealloc>
 800dfd0:	4606      	mov	r6, r0
 800dfd2:	2800      	cmp	r0, #0
 800dfd4:	f000 809e 	beq.w	800e114 <tcp_write+0x3ac>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800dfd8:	8943      	ldrh	r3, [r0, #10]
 800dfda:	4553      	cmp	r3, sl
 800dfdc:	f0c0 8084 	bcc.w	800e0e8 <tcp_write+0x380>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800dfe0:	9b07      	ldr	r3, [sp, #28]
 800dfe2:	4652      	mov	r2, sl
 800dfe4:	6870      	ldr	r0, [r6, #4]
 800dfe6:	1919      	adds	r1, r3, r4
 800dfe8:	f003 fc89 	bl	80118fe <memcpy>
    queuelen += pbuf_clen(p);
 800dfec:	4630      	mov	r0, r6
 800dfee:	f7fc fd55 	bl	800aa9c <pbuf_clen>
 800dff2:	4428      	add	r0, r5
 800dff4:	b285      	uxth	r5, r0
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800dff6:	2d09      	cmp	r5, #9
 800dff8:	d9b5      	bls.n	800df66 <tcp_write+0x1fe>
      pbuf_free(p);
 800dffa:	4630      	mov	r0, r6
 800dffc:	465f      	mov	r7, fp
 800dffe:	f7fc fbbf 	bl	800a780 <pbuf_free>
      goto memerr;
 800e002:	e088      	b.n	800e116 <tcp_write+0x3ae>
    pos += seglen;
 800e004:	44a2      	add	sl, r4
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800e006:	4683      	mov	fp, r0
    pos += seglen;
 800e008:	fa1f f48a 	uxth.w	r4, sl
  while (pos < len) {
 800e00c:	45a1      	cmp	r9, r4
 800e00e:	d8c3      	bhi.n	800df98 <tcp_write+0x230>
 800e010:	465f      	mov	r7, fp
  if (oversize_used > 0) {
 800e012:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  pcb->unsent_oversize = oversize;
 800e014:	f8bd a03e 	ldrh.w	sl, [sp, #62]	@ 0x3e
  if (oversize_used > 0) {
 800e018:	2b00      	cmp	r3, #0
 800e01a:	f000 80eb 	beq.w	800e1f4 <tcp_write+0x48c>
    for (p = last_unsent->p; p; p = p->next) {
 800e01e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e020:	685c      	ldr	r4, [r3, #4]
 800e022:	b1d4      	cbz	r4, 800e05a <tcp_write+0x2f2>
      p->tot_len += oversize_used;
 800e024:	8923      	ldrh	r3, [r4, #8]
 800e026:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
      if (p->next == NULL) {
 800e02a:	6821      	ldr	r1, [r4, #0]
      p->tot_len += oversize_used;
 800e02c:	445b      	add	r3, fp
 800e02e:	8123      	strh	r3, [r4, #8]
      if (p->next == NULL) {
 800e030:	b131      	cbz	r1, 800e040 <tcp_write+0x2d8>
      pos += seglen;
 800e032:	460c      	mov	r4, r1
      p->tot_len += oversize_used;
 800e034:	8923      	ldrh	r3, [r4, #8]
      if (p->next == NULL) {
 800e036:	6821      	ldr	r1, [r4, #0]
      p->tot_len += oversize_used;
 800e038:	445b      	add	r3, fp
 800e03a:	8123      	strh	r3, [r4, #8]
      if (p->next == NULL) {
 800e03c:	2900      	cmp	r1, #0
 800e03e:	d1f8      	bne.n	800e032 <tcp_write+0x2ca>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800e040:	8963      	ldrh	r3, [r4, #10]
 800e042:	465a      	mov	r2, fp
 800e044:	6860      	ldr	r0, [r4, #4]
 800e046:	9907      	ldr	r1, [sp, #28]
 800e048:	4418      	add	r0, r3
 800e04a:	f003 fc58 	bl	80118fe <memcpy>
        p->len += oversize_used;
 800e04e:	8963      	ldrh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800e050:	6821      	ldr	r1, [r4, #0]
        p->len += oversize_used;
 800e052:	445b      	add	r3, fp
 800e054:	8163      	strh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800e056:	2900      	cmp	r1, #0
 800e058:	d1eb      	bne.n	800e032 <tcp_write+0x2ca>
    last_unsent->len += oversize_used;
 800e05a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e05c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e05e:	8913      	ldrh	r3, [r2, #8]
 800e060:	4419      	add	r1, r3
  if (concat_p != NULL) {
 800e062:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    last_unsent->len += oversize_used;
 800e064:	8111      	strh	r1, [r2, #8]
  pcb->unsent_oversize = oversize;
 800e066:	f8a8 a068 	strh.w	sl, [r8, #104]	@ 0x68
  if (concat_p != NULL) {
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	f000 8109 	beq.w	800e282 <tcp_write+0x51a>
    pbuf_cat(last_unsent->p, concat_p);
 800e070:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800e072:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e076:	6860      	ldr	r0, [r4, #4]
 800e078:	4651      	mov	r1, sl
 800e07a:	f7fc fd37 	bl	800aaec <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800e07e:	f8ba 2008 	ldrh.w	r2, [sl, #8]
 800e082:	8923      	ldrh	r3, [r4, #8]
 800e084:	4413      	add	r3, r2
 800e086:	8123      	strh	r3, [r4, #8]
    last_unsent->next = queue;
 800e088:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e08a:	601f      	str	r7, [r3, #0]
  pcb->snd_lbb += len;
 800e08c:	f8d8 305c 	ldr.w	r3, [r8, #92]	@ 0x5c
  pcb->snd_queuelen = queuelen;
 800e090:	f8a8 5066 	strh.w	r5, [r8, #102]	@ 0x66
  pcb->snd_lbb += len;
 800e094:	444b      	add	r3, r9
 800e096:	f8c8 305c 	str.w	r3, [r8, #92]	@ 0x5c
  pcb->snd_buf -= len;
 800e09a:	f8b8 3064 	ldrh.w	r3, [r8, #100]	@ 0x64
 800e09e:	eba3 0309 	sub.w	r3, r3, r9
 800e0a2:	f8a8 3064 	strh.w	r3, [r8, #100]	@ 0x64
  if (pcb->snd_queuelen != 0) {
 800e0a6:	b125      	cbz	r5, 800e0b2 <tcp_write+0x34a>
    LWIP_ASSERT("tcp_write: valid queue length",
 800e0a8:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	f000 80ba 	beq.w	800e226 <tcp_write+0x4be>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800e0b2:	b12e      	cbz	r6, 800e0c0 <tcp_write+0x358>
 800e0b4:	68f3      	ldr	r3, [r6, #12]
 800e0b6:	b11b      	cbz	r3, 800e0c0 <tcp_write+0x358>
 800e0b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e0ba:	0792      	lsls	r2, r2, #30
 800e0bc:	f140 80ab 	bpl.w	800e216 <tcp_write+0x4ae>
  return ERR_OK;
 800e0c0:	2000      	movs	r0, #0
}
 800e0c2:	b011      	add	sp, #68	@ 0x44
 800e0c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800e0c8:	4b0b      	ldr	r3, [pc, #44]	@ (800e0f8 <tcp_write+0x390>)
 800e0ca:	f240 2271 	movw	r2, #625	@ 0x271
 800e0ce:	490e      	ldr	r1, [pc, #56]	@ (800e108 <tcp_write+0x3a0>)
 800e0d0:	480b      	ldr	r0, [pc, #44]	@ (800e100 <tcp_write+0x398>)
 800e0d2:	f003 f9e1 	bl	8011498 <iprintf>
 800e0d6:	e725      	b.n	800df24 <tcp_write+0x1bc>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800e0d8:	4b07      	ldr	r3, [pc, #28]	@ (800e0f8 <tcp_write+0x390>)
 800e0da:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800e0de:	490b      	ldr	r1, [pc, #44]	@ (800e10c <tcp_write+0x3a4>)
 800e0e0:	4807      	ldr	r0, [pc, #28]	@ (800e100 <tcp_write+0x398>)
 800e0e2:	f003 f9d9 	bl	8011498 <iprintf>
 800e0e6:	e751      	b.n	800df8c <tcp_write+0x224>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800e0e8:	4b03      	ldr	r3, [pc, #12]	@ (800e0f8 <tcp_write+0x390>)
 800e0ea:	f240 2266 	movw	r2, #614	@ 0x266
 800e0ee:	4908      	ldr	r1, [pc, #32]	@ (800e110 <tcp_write+0x3a8>)
 800e0f0:	4803      	ldr	r0, [pc, #12]	@ (800e100 <tcp_write+0x398>)
 800e0f2:	f003 f9d1 	bl	8011498 <iprintf>
 800e0f6:	e773      	b.n	800dfe0 <tcp_write+0x278>
 800e0f8:	080140f4 	.word	0x080140f4
 800e0fc:	08014330 	.word	0x08014330
 800e100:	0801241c 	.word	0x0801241c
 800e104:	080142c4 	.word	0x080142c4
 800e108:	080143ec 	.word	0x080143ec
 800e10c:	080143fc 	.word	0x080143fc
 800e110:	080143ac 	.word	0x080143ac
 800e114:	465f      	mov	r7, fp
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e116:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 800e11a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e11e:	f8a8 301a 	strh.w	r3, [r8, #26]
  if (concat_p != NULL) {
 800e122:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e124:	b113      	cbz	r3, 800e12c <tcp_write+0x3c4>
    pbuf_free(concat_p);
 800e126:	4618      	mov	r0, r3
 800e128:	f7fc fb2a 	bl	800a780 <pbuf_free>
  if (queue != NULL) {
 800e12c:	b117      	cbz	r7, 800e134 <tcp_write+0x3cc>
    tcp_segs_free(queue);
 800e12e:	4638      	mov	r0, r7
 800e130:	f7fd f848 	bl	800b1c4 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 800e134:	f8b8 3066 	ldrh.w	r3, [r8, #102]	@ 0x66
 800e138:	b923      	cbnz	r3, 800e144 <tcp_write+0x3dc>
  return ERR_MEM;
 800e13a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800e13e:	b011      	add	sp, #68	@ 0x44
 800e140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800e144:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d1f6      	bne.n	800e13a <tcp_write+0x3d2>
 800e14c:	f8d8 306c 	ldr.w	r3, [r8, #108]	@ 0x6c
 800e150:	2b00      	cmp	r3, #0
 800e152:	d1f2      	bne.n	800e13a <tcp_write+0x3d2>
 800e154:	4b7e      	ldr	r3, [pc, #504]	@ (800e350 <tcp_write+0x5e8>)
 800e156:	f240 3227 	movw	r2, #807	@ 0x327
 800e15a:	497e      	ldr	r1, [pc, #504]	@ (800e354 <tcp_write+0x5ec>)
 800e15c:	487e      	ldr	r0, [pc, #504]	@ (800e358 <tcp_write+0x5f0>)
 800e15e:	f003 f99b 	bl	8011498 <iprintf>
 800e162:	e7ea      	b.n	800e13a <tcp_write+0x3d2>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800e164:	f8d8 306c 	ldr.w	r3, [r8, #108]	@ 0x6c
 800e168:	2b00      	cmp	r3, #0
 800e16a:	f47f ae7a 	bne.w	800de62 <tcp_write+0xfa>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800e16e:	f8b8 3068 	ldrh.w	r3, [r8, #104]	@ 0x68
 800e172:	bb43      	cbnz	r3, 800e1c6 <tcp_write+0x45e>
  while (pos < len) {
 800e174:	f1b9 0f00 	cmp.w	r9, #0
 800e178:	f000 80c8 	beq.w	800e30c <tcp_write+0x5a4>
 800e17c:	2300      	movs	r3, #0
 800e17e:	461c      	mov	r4, r3
 800e180:	930d      	str	r3, [sp, #52]	@ 0x34
 800e182:	930a      	str	r3, [sp, #40]	@ 0x28
 800e184:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
 800e188:	e6c0      	b.n	800df0c <tcp_write+0x1a4>
  struct pbuf *concat_p = NULL;
 800e18a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e18c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e18e:	930c      	str	r3, [sp, #48]	@ 0x30
 800e190:	e6bc      	b.n	800df0c <tcp_write+0x1a4>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800e192:	2f00      	cmp	r7, #0
 800e194:	f47f ae26 	bne.w	800dde4 <tcp_write+0x7c>
 800e198:	4b6d      	ldr	r3, [pc, #436]	@ (800e350 <tcp_write+0x5e8>)
 800e19a:	f240 1255 	movw	r2, #341	@ 0x155
 800e19e:	496f      	ldr	r1, [pc, #444]	@ (800e35c <tcp_write+0x5f4>)
 800e1a0:	486d      	ldr	r0, [pc, #436]	@ (800e358 <tcp_write+0x5f0>)
 800e1a2:	f003 f979 	bl	8011498 <iprintf>
  if (pcb->unsent != NULL) {
 800e1a6:	f8d8 706c 	ldr.w	r7, [r8, #108]	@ 0x6c
  queuelen = pcb->snd_queuelen;
 800e1aa:	f8b8 5066 	ldrh.w	r5, [r8, #102]	@ 0x66
  if (pcb->unsent != NULL) {
 800e1ae:	2f00      	cmp	r7, #0
 800e1b0:	f47f ae18 	bne.w	800dde4 <tcp_write+0x7c>
 800e1b4:	e7db      	b.n	800e16e <tcp_write+0x406>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800e1b6:	4b66      	ldr	r3, [pc, #408]	@ (800e350 <tcp_write+0x5e8>)
 800e1b8:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 800e1bc:	4968      	ldr	r1, [pc, #416]	@ (800e360 <tcp_write+0x5f8>)
 800e1be:	4866      	ldr	r0, [pc, #408]	@ (800e358 <tcp_write+0x5f0>)
 800e1c0:	f003 f96a 	bl	8011498 <iprintf>
 800e1c4:	e62d      	b.n	800de22 <tcp_write+0xba>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800e1c6:	4b62      	ldr	r3, [pc, #392]	@ (800e350 <tcp_write+0x5e8>)
 800e1c8:	f240 224a 	movw	r2, #586	@ 0x24a
 800e1cc:	4965      	ldr	r1, [pc, #404]	@ (800e364 <tcp_write+0x5fc>)
 800e1ce:	4862      	ldr	r0, [pc, #392]	@ (800e358 <tcp_write+0x5f0>)
 800e1d0:	f003 f962 	bl	8011498 <iprintf>
 800e1d4:	e7ce      	b.n	800e174 <tcp_write+0x40c>
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800e1d6:	4b5e      	ldr	r3, [pc, #376]	@ (800e350 <tcp_write+0x5e8>)
 800e1d8:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800e1dc:	4962      	ldr	r1, [pc, #392]	@ (800e368 <tcp_write+0x600>)
 800e1de:	485e      	ldr	r0, [pc, #376]	@ (800e358 <tcp_write+0x5f0>)
 800e1e0:	f003 f95a 	bl	8011498 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800e1e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e1e6:	891b      	ldrh	r3, [r3, #8]
 800e1e8:	e60b      	b.n	800de02 <tcp_write+0x9a>
        pbuf_free(p2);
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	465f      	mov	r7, fp
 800e1ee:	f7fc fac7 	bl	800a780 <pbuf_free>
        goto memerr;
 800e1f2:	e790      	b.n	800e116 <tcp_write+0x3ae>
  if (concat_p != NULL) {
 800e1f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  pcb->unsent_oversize = oversize;
 800e1f6:	f8a8 a068 	strh.w	sl, [r8, #104]	@ 0x68
  if (concat_p != NULL) {
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d061      	beq.n	800e2c2 <tcp_write+0x55a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800e1fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e200:	2b00      	cmp	r3, #0
 800e202:	f47f af35 	bne.w	800e070 <tcp_write+0x308>
 800e206:	4b52      	ldr	r3, [pc, #328]	@ (800e350 <tcp_write+0x5e8>)
 800e208:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 800e20c:	4957      	ldr	r1, [pc, #348]	@ (800e36c <tcp_write+0x604>)
 800e20e:	4852      	ldr	r0, [pc, #328]	@ (800e358 <tcp_write+0x5f0>)
 800e210:	f003 f942 	bl	8011498 <iprintf>
 800e214:	e72c      	b.n	800e070 <tcp_write+0x308>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800e216:	899c      	ldrh	r4, [r3, #12]
 800e218:	2008      	movs	r0, #8
 800e21a:	f7fb fbfb 	bl	8009a14 <lwip_htons>
 800e21e:	68f3      	ldr	r3, [r6, #12]
 800e220:	4304      	orrs	r4, r0
 800e222:	819c      	strh	r4, [r3, #12]
 800e224:	e74c      	b.n	800e0c0 <tcp_write+0x358>
    LWIP_ASSERT("tcp_write: valid queue length",
 800e226:	f8d8 306c 	ldr.w	r3, [r8, #108]	@ 0x6c
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	f47f af41 	bne.w	800e0b2 <tcp_write+0x34a>
 800e230:	4b47      	ldr	r3, [pc, #284]	@ (800e350 <tcp_write+0x5e8>)
 800e232:	f240 3212 	movw	r2, #786	@ 0x312
 800e236:	4947      	ldr	r1, [pc, #284]	@ (800e354 <tcp_write+0x5ec>)
 800e238:	4847      	ldr	r0, [pc, #284]	@ (800e358 <tcp_write+0x5f0>)
 800e23a:	f003 f92d 	bl	8011498 <iprintf>
 800e23e:	e738      	b.n	800e0b2 <tcp_write+0x34a>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800e240:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e242:	2b00      	cmp	r3, #0
 800e244:	d15a      	bne.n	800e2fc <tcp_write+0x594>
          extendlen = seglen;
 800e246:	940d      	str	r4, [sp, #52]	@ 0x34
 800e248:	e654      	b.n	800def4 <tcp_write+0x18c>
    return ERR_CONN;
 800e24a:	f06f 000a 	mvn.w	r0, #10
 800e24e:	e738      	b.n	800e0c2 <tcp_write+0x35a>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800e250:	e9cd 8300 	strd	r8, r3, [sp]
 800e254:	2301      	movs	r3, #1
 800e256:	465a      	mov	r2, fp
 800e258:	4621      	mov	r1, r4
 800e25a:	2000      	movs	r0, #0
 800e25c:	9302      	str	r3, [sp, #8]
 800e25e:	f10d 033e 	add.w	r3, sp, #62	@ 0x3e
 800e262:	f7ff fc0b 	bl	800da7c <tcp_pbuf_prealloc>
 800e266:	4603      	mov	r3, r0
 800e268:	900c      	str	r0, [sp, #48]	@ 0x30
 800e26a:	2800      	cmp	r0, #0
 800e26c:	d069      	beq.n	800e342 <tcp_write+0x5da>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800e26e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e270:	461e      	mov	r6, r3
 800e272:	9907      	ldr	r1, [sp, #28]
 800e274:	4622      	mov	r2, r4
 800e276:	4401      	add	r1, r0
 800e278:	6858      	ldr	r0, [r3, #4]
 800e27a:	f003 fb40 	bl	80118fe <memcpy>
        queuelen += pbuf_clen(concat_p);
 800e27e:	4630      	mov	r0, r6
 800e280:	e632      	b.n	800dee8 <tcp_write+0x180>
  } else if (extendlen > 0) {
 800e282:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e284:	2b00      	cmp	r3, #0
 800e286:	f43f aeff 	beq.w	800e088 <tcp_write+0x320>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800e28a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e28c:	6859      	ldr	r1, [r3, #4]
 800e28e:	b1e9      	cbz	r1, 800e2cc <tcp_write+0x564>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800e290:	680a      	ldr	r2, [r1, #0]
 800e292:	2a00      	cmp	r2, #0
 800e294:	d053      	beq.n	800e33e <tcp_write+0x5d6>
 800e296:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 800e298:	e000      	b.n	800e29c <tcp_write+0x534>
 800e29a:	4602      	mov	r2, r0
      p->tot_len += extendlen;
 800e29c:	890b      	ldrh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800e29e:	6810      	ldr	r0, [r2, #0]
      p->tot_len += extendlen;
 800e2a0:	4423      	add	r3, r4
 800e2a2:	810b      	strh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800e2a4:	4611      	mov	r1, r2
 800e2a6:	2800      	cmp	r0, #0
 800e2a8:	d1f7      	bne.n	800e29a <tcp_write+0x532>
    p->tot_len += extendlen;
 800e2aa:	8913      	ldrh	r3, [r2, #8]
 800e2ac:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800e2ae:	440b      	add	r3, r1
 800e2b0:	8113      	strh	r3, [r2, #8]
    p->len += extendlen;
 800e2b2:	8953      	ldrh	r3, [r2, #10]
 800e2b4:	440b      	add	r3, r1
 800e2b6:	8153      	strh	r3, [r2, #10]
    last_unsent->len += extendlen;
 800e2b8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e2ba:	8913      	ldrh	r3, [r2, #8]
 800e2bc:	440b      	add	r3, r1
 800e2be:	8113      	strh	r3, [r2, #8]
  if (last_unsent == NULL) {
 800e2c0:	e6e2      	b.n	800e088 <tcp_write+0x320>
  } else if (extendlen > 0) {
 800e2c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e2c4:	b19b      	cbz	r3, 800e2ee <tcp_write+0x586>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800e2c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d1de      	bne.n	800e28a <tcp_write+0x522>
 800e2cc:	4b20      	ldr	r3, [pc, #128]	@ (800e350 <tcp_write+0x5e8>)
 800e2ce:	f240 22e6 	movw	r2, #742	@ 0x2e6
 800e2d2:	4927      	ldr	r1, [pc, #156]	@ (800e370 <tcp_write+0x608>)
 800e2d4:	4820      	ldr	r0, [pc, #128]	@ (800e358 <tcp_write+0x5f0>)
 800e2d6:	f003 f8df 	bl	8011498 <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800e2da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e2dc:	6859      	ldr	r1, [r3, #4]
 800e2de:	e7d7      	b.n	800e290 <tcp_write+0x528>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e2e0:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 800e2e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e2e8:	f8a8 301a 	strh.w	r3, [r8, #26]
  if (err != ERR_OK) {
 800e2ec:	e725      	b.n	800e13a <tcp_write+0x3d2>
  if (last_unsent == NULL) {
 800e2ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	f47f aec9 	bne.w	800e088 <tcp_write+0x320>
    pcb->unsent = queue;
 800e2f6:	f8c8 706c 	str.w	r7, [r8, #108]	@ 0x6c
 800e2fa:	e6c7      	b.n	800e08c <tcp_write+0x324>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800e2fc:	4b14      	ldr	r3, [pc, #80]	@ (800e350 <tcp_write+0x5e8>)
 800e2fe:	f240 2231 	movw	r2, #561	@ 0x231
 800e302:	491c      	ldr	r1, [pc, #112]	@ (800e374 <tcp_write+0x60c>)
 800e304:	4814      	ldr	r0, [pc, #80]	@ (800e358 <tcp_write+0x5f0>)
 800e306:	f003 f8c7 	bl	8011498 <iprintf>
 800e30a:	e79c      	b.n	800e246 <tcp_write+0x4de>
  pcb->unsent_oversize = oversize;
 800e30c:	f8bd 303e 	ldrh.w	r3, [sp, #62]	@ 0x3e
 800e310:	464f      	mov	r7, r9
 800e312:	464e      	mov	r6, r9
 800e314:	f8a8 3068 	strh.w	r3, [r8, #104]	@ 0x68
  if (concat_p != NULL) {
 800e318:	e7ed      	b.n	800e2f6 <tcp_write+0x58e>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800e31a:	4b0d      	ldr	r3, [pc, #52]	@ (800e350 <tcp_write+0x5e8>)
 800e31c:	f240 12ad 	movw	r2, #429	@ 0x1ad
 800e320:	4915      	ldr	r1, [pc, #84]	@ (800e378 <tcp_write+0x610>)
 800e322:	480d      	ldr	r0, [pc, #52]	@ (800e358 <tcp_write+0x5f0>)
 800e324:	f003 f8b8 	bl	8011498 <iprintf>
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800e328:	f06f 000f 	mvn.w	r0, #15
 800e32c:	e6c9      	b.n	800e0c2 <tcp_write+0x35a>
 800e32e:	4b08      	ldr	r3, [pc, #32]	@ (800e350 <tcp_write+0x5e8>)
 800e330:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 800e334:	4911      	ldr	r1, [pc, #68]	@ (800e37c <tcp_write+0x614>)
 800e336:	4808      	ldr	r0, [pc, #32]	@ (800e358 <tcp_write+0x5f0>)
 800e338:	f003 f8ae 	bl	8011498 <iprintf>
 800e33c:	e7f4      	b.n	800e328 <tcp_write+0x5c0>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800e33e:	460a      	mov	r2, r1
 800e340:	e7b3      	b.n	800e2aa <tcp_write+0x542>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e342:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 800e346:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e34a:	f8a8 301a 	strh.w	r3, [r8, #26]
  if (queue != NULL) {
 800e34e:	e6f1      	b.n	800e134 <tcp_write+0x3cc>
 800e350:	080140f4 	.word	0x080140f4
 800e354:	08014480 	.word	0x08014480
 800e358:	0801241c 	.word	0x0801241c
 800e35c:	08014288 	.word	0x08014288
 800e360:	08014310 	.word	0x08014310
 800e364:	0801437c 	.word	0x0801437c
 800e368:	080142f8 	.word	0x080142f8
 800e36c:	08014410 	.word	0x08014410
 800e370:	08014448 	.word	0x08014448
 800e374:	08014350 	.word	0x08014350
 800e378:	08014254 	.word	0x08014254
 800e37c:	0801423c 	.word	0x0801423c

0800e380 <tcp_split_unsent_seg>:
{
 800e380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800e384:	4606      	mov	r6, r0
{
 800e386:	b083      	sub	sp, #12
 800e388:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800e38a:	2800      	cmp	r0, #0
 800e38c:	f000 80ad 	beq.w	800e4ea <tcp_split_unsent_seg+0x16a>
  useg = pcb->unsent;
 800e390:	6ef5      	ldr	r5, [r6, #108]	@ 0x6c
  if (useg == NULL) {
 800e392:	2d00      	cmp	r5, #0
 800e394:	f000 80b4 	beq.w	800e500 <tcp_split_unsent_seg+0x180>
  if (split == 0) {
 800e398:	2c00      	cmp	r4, #0
 800e39a:	f000 80b4 	beq.w	800e506 <tcp_split_unsent_seg+0x186>
  if (useg->len <= split) {
 800e39e:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 800e3a2:	45a0      	cmp	r8, r4
 800e3a4:	d97e      	bls.n	800e4a4 <tcp_split_unsent_seg+0x124>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800e3a6:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 800e3a8:	42a3      	cmp	r3, r4
 800e3aa:	f0c0 8084 	bcc.w	800e4b6 <tcp_split_unsent_seg+0x136>
  optflags = useg->flags;
 800e3ae:	f895 a00a 	ldrb.w	sl, [r5, #10]
  remainder = useg->len - split;
 800e3b2:	eba8 0904 	sub.w	r9, r8, r4
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800e3b6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e3ba:	2036      	movs	r0, #54	@ 0x36
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800e3bc:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
  remainder = useg->len - split;
 800e3c0:	fa1f f989 	uxth.w	r9, r9
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800e3c4:	f00b 0b04 	and.w	fp, fp, #4
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800e3c8:	eb0b 0109 	add.w	r1, fp, r9
 800e3cc:	b289      	uxth	r1, r1
 800e3ce:	f7fc fa47 	bl	800a860 <pbuf_alloc>
  if (p == NULL) {
 800e3d2:	4607      	mov	r7, r0
 800e3d4:	2800      	cmp	r0, #0
 800e3d6:	f000 8093 	beq.w	800e500 <tcp_split_unsent_seg+0x180>
  offset = useg->p->tot_len - useg->len + split;
 800e3da:	6868      	ldr	r0, [r5, #4]
 800e3dc:	892a      	ldrh	r2, [r5, #8]
 800e3de:	8903      	ldrh	r3, [r0, #8]
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800e3e0:	6879      	ldr	r1, [r7, #4]
  offset = useg->p->tot_len - useg->len + split;
 800e3e2:	1a9b      	subs	r3, r3, r2
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800e3e4:	464a      	mov	r2, r9
 800e3e6:	4459      	add	r1, fp
  offset = useg->p->tot_len - useg->len + split;
 800e3e8:	4423      	add	r3, r4
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800e3ea:	b29b      	uxth	r3, r3
 800e3ec:	f7fc fca8 	bl	800ad40 <pbuf_copy_partial>
 800e3f0:	4548      	cmp	r0, r9
 800e3f2:	f040 8082 	bne.w	800e4fa <tcp_split_unsent_seg+0x17a>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800e3f6:	68eb      	ldr	r3, [r5, #12]
 800e3f8:	8998      	ldrh	r0, [r3, #12]
 800e3fa:	f7fb fb0b 	bl	8009a14 <lwip_htons>
  if (split_flags & TCP_PSH) {
 800e3fe:	f010 0b08 	ands.w	fp, r0, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800e402:	fa5f f980 	uxtb.w	r9, r0
  if (split_flags & TCP_PSH) {
 800e406:	d151      	bne.n	800e4ac <tcp_split_unsent_seg+0x12c>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800e408:	f009 093f 	and.w	r9, r9, #63	@ 0x3f
  if (split_flags & TCP_FIN) {
 800e40c:	f019 0f01 	tst.w	r9, #1
 800e410:	d003      	beq.n	800e41a <tcp_split_unsent_seg+0x9a>
    split_flags &= ~TCP_FIN;
 800e412:	f009 09fe 	and.w	r9, r9, #254	@ 0xfe
    remainder_flags |= TCP_FIN;
 800e416:	f04b 0b01 	orr.w	fp, fp, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800e41a:	68eb      	ldr	r3, [r5, #12]
 800e41c:	6858      	ldr	r0, [r3, #4]
 800e41e:	f7fb fafd 	bl	8009a1c <lwip_htonl>
 800e422:	f8cd a000 	str.w	sl, [sp]
 800e426:	1823      	adds	r3, r4, r0
 800e428:	465a      	mov	r2, fp
 800e42a:	4639      	mov	r1, r7
 800e42c:	4630      	mov	r0, r6
 800e42e:	f7ff fb7b 	bl	800db28 <tcp_create_segment>
  if (seg == NULL) {
 800e432:	4682      	mov	sl, r0
 800e434:	2800      	cmp	r0, #0
 800e436:	d060      	beq.n	800e4fa <tcp_split_unsent_seg+0x17a>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800e438:	6868      	ldr	r0, [r5, #4]
 800e43a:	eba4 0408 	sub.w	r4, r4, r8
 800e43e:	f7fc fb2d 	bl	800aa9c <pbuf_clen>
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800e442:	686a      	ldr	r2, [r5, #4]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800e444:	f8b6 3066 	ldrh.w	r3, [r6, #102]	@ 0x66
 800e448:	b2a4      	uxth	r4, r4
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800e44a:	8911      	ldrh	r1, [r2, #8]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800e44c:	1a1b      	subs	r3, r3, r0
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800e44e:	4610      	mov	r0, r2
 800e450:	4421      	add	r1, r4
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800e452:	f8a6 3066 	strh.w	r3, [r6, #102]	@ 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800e456:	b289      	uxth	r1, r1
 800e458:	f7fc faa6 	bl	800a9a8 <pbuf_realloc>
  useg->len -= remainder;
 800e45c:	892b      	ldrh	r3, [r5, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800e45e:	4648      	mov	r0, r9
  useg->len -= remainder;
 800e460:	441c      	add	r4, r3
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800e462:	68eb      	ldr	r3, [r5, #12]
  useg->len -= remainder;
 800e464:	812c      	strh	r4, [r5, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800e466:	899c      	ldrh	r4, [r3, #12]
 800e468:	f7fb fad4 	bl	8009a14 <lwip_htons>
 800e46c:	68eb      	ldr	r3, [r5, #12]
 800e46e:	4304      	orrs	r4, r0
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800e470:	6868      	ldr	r0, [r5, #4]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800e472:	819c      	strh	r4, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800e474:	f7fc fb12 	bl	800aa9c <pbuf_clen>
 800e478:	f8b6 3066 	ldrh.w	r3, [r6, #102]	@ 0x66
 800e47c:	4403      	add	r3, r0
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e47e:	f8da 0004 	ldr.w	r0, [sl, #4]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800e482:	f8a6 3066 	strh.w	r3, [r6, #102]	@ 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e486:	f7fc fb09 	bl	800aa9c <pbuf_clen>
 800e48a:	f8b6 3066 	ldrh.w	r3, [r6, #102]	@ 0x66
 800e48e:	4418      	add	r0, r3
  seg->next = useg->next;
 800e490:	682b      	ldr	r3, [r5, #0]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e492:	f8a6 0066 	strh.w	r0, [r6, #102]	@ 0x66
  seg->next = useg->next;
 800e496:	f8ca 3000 	str.w	r3, [sl]
  useg->next = seg;
 800e49a:	f8c5 a000 	str.w	sl, [r5]
  if (seg->next == NULL) {
 800e49e:	f8da 3000 	ldr.w	r3, [sl]
 800e4a2:	b1fb      	cbz	r3, 800e4e4 <tcp_split_unsent_seg+0x164>
    return ERR_OK;
 800e4a4:	2000      	movs	r0, #0
}
 800e4a6:	b003      	add	sp, #12
 800e4a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    split_flags &= ~TCP_PSH;
 800e4ac:	f009 0937 	and.w	r9, r9, #55	@ 0x37
    remainder_flags |= TCP_PSH;
 800e4b0:	f04f 0b08 	mov.w	fp, #8
 800e4b4:	e7aa      	b.n	800e40c <tcp_split_unsent_seg+0x8c>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800e4b6:	4b19      	ldr	r3, [pc, #100]	@ (800e51c <tcp_split_unsent_seg+0x19c>)
 800e4b8:	f240 325b 	movw	r2, #859	@ 0x35b
 800e4bc:	4918      	ldr	r1, [pc, #96]	@ (800e520 <tcp_split_unsent_seg+0x1a0>)
 800e4be:	4819      	ldr	r0, [pc, #100]	@ (800e524 <tcp_split_unsent_seg+0x1a4>)
 800e4c0:	f002 ffea 	bl	8011498 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800e4c4:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 800e4c8:	f1b8 0f00 	cmp.w	r8, #0
 800e4cc:	f47f af6f 	bne.w	800e3ae <tcp_split_unsent_seg+0x2e>
 800e4d0:	4b12      	ldr	r3, [pc, #72]	@ (800e51c <tcp_split_unsent_seg+0x19c>)
 800e4d2:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800e4d6:	4914      	ldr	r1, [pc, #80]	@ (800e528 <tcp_split_unsent_seg+0x1a8>)
 800e4d8:	4812      	ldr	r0, [pc, #72]	@ (800e524 <tcp_split_unsent_seg+0x1a4>)
 800e4da:	f002 ffdd 	bl	8011498 <iprintf>
  remainder = useg->len - split;
 800e4de:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 800e4e2:	e764      	b.n	800e3ae <tcp_split_unsent_seg+0x2e>
    pcb->unsent_oversize = 0;
 800e4e4:	f8a6 3068 	strh.w	r3, [r6, #104]	@ 0x68
 800e4e8:	e7dc      	b.n	800e4a4 <tcp_split_unsent_seg+0x124>
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800e4ea:	4b0c      	ldr	r3, [pc, #48]	@ (800e51c <tcp_split_unsent_seg+0x19c>)
 800e4ec:	f240 324b 	movw	r2, #843	@ 0x34b
 800e4f0:	490e      	ldr	r1, [pc, #56]	@ (800e52c <tcp_split_unsent_seg+0x1ac>)
 800e4f2:	480c      	ldr	r0, [pc, #48]	@ (800e524 <tcp_split_unsent_seg+0x1a4>)
 800e4f4:	f002 ffd0 	bl	8011498 <iprintf>
 800e4f8:	e74a      	b.n	800e390 <tcp_split_unsent_seg+0x10>
    pbuf_free(p);
 800e4fa:	4638      	mov	r0, r7
 800e4fc:	f7fc f940 	bl	800a780 <pbuf_free>
    return ERR_MEM;
 800e500:	f04f 30ff 	mov.w	r0, #4294967295
 800e504:	e7cf      	b.n	800e4a6 <tcp_split_unsent_seg+0x126>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800e506:	4b05      	ldr	r3, [pc, #20]	@ (800e51c <tcp_split_unsent_seg+0x19c>)
 800e508:	f240 3253 	movw	r2, #851	@ 0x353
 800e50c:	4908      	ldr	r1, [pc, #32]	@ (800e530 <tcp_split_unsent_seg+0x1b0>)
 800e50e:	4805      	ldr	r0, [pc, #20]	@ (800e524 <tcp_split_unsent_seg+0x1a4>)
 800e510:	f002 ffc2 	bl	8011498 <iprintf>
    return ERR_VAL;
 800e514:	f06f 0005 	mvn.w	r0, #5
 800e518:	e7c5      	b.n	800e4a6 <tcp_split_unsent_seg+0x126>
 800e51a:	bf00      	nop
 800e51c:	080140f4 	.word	0x080140f4
 800e520:	080144e8 	.word	0x080144e8
 800e524:	0801241c 	.word	0x0801241c
 800e528:	080144f8 	.word	0x080144f8
 800e52c:	080144a0 	.word	0x080144a0
 800e530:	080144c4 	.word	0x080144c4

0800e534 <tcp_enqueue_flags>:
{
 800e534:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800e538:	f011 0703 	ands.w	r7, r1, #3
{
 800e53c:	b083      	sub	sp, #12
 800e53e:	460d      	mov	r5, r1
 800e540:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800e542:	d053      	beq.n	800e5ec <tcp_enqueue_flags+0xb8>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800e544:	2c00      	cmp	r4, #0
 800e546:	d05a      	beq.n	800e5fe <tcp_enqueue_flags+0xca>
  if (flags & TCP_SYN) {
 800e548:	f3c5 0840 	ubfx	r8, r5, #1, #1
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800e54c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e550:	2036      	movs	r0, #54	@ 0x36
 800e552:	ea4f 0988 	mov.w	r9, r8, lsl #2
 800e556:	4649      	mov	r1, r9
 800e558:	f7fc f982 	bl	800a860 <pbuf_alloc>
 800e55c:	4606      	mov	r6, r0
 800e55e:	2800      	cmp	r0, #0
 800e560:	d071      	beq.n	800e646 <tcp_enqueue_flags+0x112>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800e562:	8943      	ldrh	r3, [r0, #10]
 800e564:	454b      	cmp	r3, r9
 800e566:	d352      	bcc.n	800e60e <tcp_enqueue_flags+0xda>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800e568:	4631      	mov	r1, r6
 800e56a:	f8cd 8000 	str.w	r8, [sp]
 800e56e:	462a      	mov	r2, r5
 800e570:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800e572:	4620      	mov	r0, r4
 800e574:	f7ff fad8 	bl	800db28 <tcp_create_segment>
 800e578:	4606      	mov	r6, r0
 800e57a:	2800      	cmp	r0, #0
 800e57c:	d063      	beq.n	800e646 <tcp_enqueue_flags+0x112>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800e57e:	68c3      	ldr	r3, [r0, #12]
 800e580:	079a      	lsls	r2, r3, #30
 800e582:	d158      	bne.n	800e636 <tcp_enqueue_flags+0x102>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800e584:	8933      	ldrh	r3, [r6, #8]
 800e586:	2b00      	cmp	r3, #0
 800e588:	d149      	bne.n	800e61e <tcp_enqueue_flags+0xea>
  if (pcb->unsent == NULL) {
 800e58a:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d050      	beq.n	800e632 <tcp_enqueue_flags+0xfe>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800e590:	461a      	mov	r2, r3
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d1fb      	bne.n	800e590 <tcp_enqueue_flags+0x5c>
    useg->next = seg;
 800e598:	6016      	str	r6, [r2, #0]
  pcb->unsent_oversize = 0;
 800e59a:	2300      	movs	r3, #0
 800e59c:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800e5a0:	b117      	cbz	r7, 800e5a8 <tcp_enqueue_flags+0x74>
    pcb->snd_lbb++;
 800e5a2:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800e5a4:	3301      	adds	r3, #1
 800e5a6:	65e3      	str	r3, [r4, #92]	@ 0x5c
  if (flags & TCP_FIN) {
 800e5a8:	07eb      	lsls	r3, r5, #31
 800e5aa:	d503      	bpl.n	800e5b4 <tcp_enqueue_flags+0x80>
    tcp_set_flags(pcb, TF_FIN);
 800e5ac:	8b63      	ldrh	r3, [r4, #26]
 800e5ae:	f043 0320 	orr.w	r3, r3, #32
 800e5b2:	8363      	strh	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e5b4:	6870      	ldr	r0, [r6, #4]
 800e5b6:	f7fc fa71 	bl	800aa9c <pbuf_clen>
 800e5ba:	f8b4 3066 	ldrh.w	r3, [r4, #102]	@ 0x66
 800e5be:	4418      	add	r0, r3
 800e5c0:	b280      	uxth	r0, r0
 800e5c2:	f8a4 0066 	strh.w	r0, [r4, #102]	@ 0x66
  if (pcb->snd_queuelen != 0) {
 800e5c6:	b918      	cbnz	r0, 800e5d0 <tcp_enqueue_flags+0x9c>
  return ERR_OK;
 800e5c8:	2000      	movs	r0, #0
}
 800e5ca:	b003      	add	sp, #12
 800e5cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800e5d0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d1f8      	bne.n	800e5c8 <tcp_enqueue_flags+0x94>
 800e5d6:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d1f5      	bne.n	800e5c8 <tcp_enqueue_flags+0x94>
 800e5dc:	4b1d      	ldr	r3, [pc, #116]	@ (800e654 <tcp_enqueue_flags+0x120>)
 800e5de:	f240 4265 	movw	r2, #1125	@ 0x465
 800e5e2:	491d      	ldr	r1, [pc, #116]	@ (800e658 <tcp_enqueue_flags+0x124>)
 800e5e4:	481d      	ldr	r0, [pc, #116]	@ (800e65c <tcp_enqueue_flags+0x128>)
 800e5e6:	f002 ff57 	bl	8011498 <iprintf>
 800e5ea:	e7ed      	b.n	800e5c8 <tcp_enqueue_flags+0x94>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800e5ec:	4b19      	ldr	r3, [pc, #100]	@ (800e654 <tcp_enqueue_flags+0x120>)
 800e5ee:	f240 4211 	movw	r2, #1041	@ 0x411
 800e5f2:	491b      	ldr	r1, [pc, #108]	@ (800e660 <tcp_enqueue_flags+0x12c>)
 800e5f4:	4819      	ldr	r0, [pc, #100]	@ (800e65c <tcp_enqueue_flags+0x128>)
 800e5f6:	f002 ff4f 	bl	8011498 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800e5fa:	2c00      	cmp	r4, #0
 800e5fc:	d1a4      	bne.n	800e548 <tcp_enqueue_flags+0x14>
 800e5fe:	4b15      	ldr	r3, [pc, #84]	@ (800e654 <tcp_enqueue_flags+0x120>)
 800e600:	f240 4213 	movw	r2, #1043	@ 0x413
 800e604:	4917      	ldr	r1, [pc, #92]	@ (800e664 <tcp_enqueue_flags+0x130>)
 800e606:	4815      	ldr	r0, [pc, #84]	@ (800e65c <tcp_enqueue_flags+0x128>)
 800e608:	f002 ff46 	bl	8011498 <iprintf>
 800e60c:	e79c      	b.n	800e548 <tcp_enqueue_flags+0x14>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800e60e:	4b11      	ldr	r3, [pc, #68]	@ (800e654 <tcp_enqueue_flags+0x120>)
 800e610:	f240 4239 	movw	r2, #1081	@ 0x439
 800e614:	4914      	ldr	r1, [pc, #80]	@ (800e668 <tcp_enqueue_flags+0x134>)
 800e616:	4811      	ldr	r0, [pc, #68]	@ (800e65c <tcp_enqueue_flags+0x128>)
 800e618:	f002 ff3e 	bl	8011498 <iprintf>
 800e61c:	e7a4      	b.n	800e568 <tcp_enqueue_flags+0x34>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800e61e:	4b0d      	ldr	r3, [pc, #52]	@ (800e654 <tcp_enqueue_flags+0x120>)
 800e620:	f240 4243 	movw	r2, #1091	@ 0x443
 800e624:	4911      	ldr	r1, [pc, #68]	@ (800e66c <tcp_enqueue_flags+0x138>)
 800e626:	480d      	ldr	r0, [pc, #52]	@ (800e65c <tcp_enqueue_flags+0x128>)
 800e628:	f002 ff36 	bl	8011498 <iprintf>
  if (pcb->unsent == NULL) {
 800e62c:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d1ae      	bne.n	800e590 <tcp_enqueue_flags+0x5c>
    pcb->unsent = seg;
 800e632:	66e6      	str	r6, [r4, #108]	@ 0x6c
 800e634:	e7b1      	b.n	800e59a <tcp_enqueue_flags+0x66>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800e636:	4b07      	ldr	r3, [pc, #28]	@ (800e654 <tcp_enqueue_flags+0x120>)
 800e638:	f240 4242 	movw	r2, #1090	@ 0x442
 800e63c:	490c      	ldr	r1, [pc, #48]	@ (800e670 <tcp_enqueue_flags+0x13c>)
 800e63e:	4807      	ldr	r0, [pc, #28]	@ (800e65c <tcp_enqueue_flags+0x128>)
 800e640:	f002 ff2a 	bl	8011498 <iprintf>
 800e644:	e79e      	b.n	800e584 <tcp_enqueue_flags+0x50>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e646:	8b63      	ldrh	r3, [r4, #26]
    return ERR_MEM;
 800e648:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e64c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e650:	8363      	strh	r3, [r4, #26]
 800e652:	e7ba      	b.n	800e5ca <tcp_enqueue_flags+0x96>
 800e654:	080140f4 	.word	0x080140f4
 800e658:	08014600 	.word	0x08014600
 800e65c:	0801241c 	.word	0x0801241c
 800e660:	08014508 	.word	0x08014508
 800e664:	08014560 	.word	0x08014560
 800e668:	08014580 	.word	0x08014580
 800e66c:	080145d4 	.word	0x080145d4
 800e670:	080145bc 	.word	0x080145bc

0800e674 <tcp_send_fin>:
{
 800e674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800e676:	4606      	mov	r6, r0
 800e678:	b188      	cbz	r0, 800e69e <tcp_send_fin+0x2a>
  if (pcb->unsent != NULL) {
 800e67a:	6ef4      	ldr	r4, [r6, #108]	@ 0x6c
 800e67c:	b14c      	cbz	r4, 800e692 <tcp_send_fin+0x1e>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e67e:	4625      	mov	r5, r4
 800e680:	6824      	ldr	r4, [r4, #0]
 800e682:	2c00      	cmp	r4, #0
 800e684:	d1fb      	bne.n	800e67e <tcp_send_fin+0xa>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800e686:	68eb      	ldr	r3, [r5, #12]
 800e688:	8998      	ldrh	r0, [r3, #12]
 800e68a:	f7fb f9c3 	bl	8009a14 <lwip_htons>
 800e68e:	0743      	lsls	r3, r0, #29
 800e690:	d00d      	beq.n	800e6ae <tcp_send_fin+0x3a>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800e692:	4630      	mov	r0, r6
 800e694:	2101      	movs	r1, #1
}
 800e696:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800e69a:	f7ff bf4b 	b.w	800e534 <tcp_enqueue_flags>
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800e69e:	4b0b      	ldr	r3, [pc, #44]	@ (800e6cc <tcp_send_fin+0x58>)
 800e6a0:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800e6a4:	490a      	ldr	r1, [pc, #40]	@ (800e6d0 <tcp_send_fin+0x5c>)
 800e6a6:	480b      	ldr	r0, [pc, #44]	@ (800e6d4 <tcp_send_fin+0x60>)
 800e6a8:	f002 fef6 	bl	8011498 <iprintf>
 800e6ac:	e7e5      	b.n	800e67a <tcp_send_fin+0x6>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800e6ae:	68eb      	ldr	r3, [r5, #12]
 800e6b0:	2001      	movs	r0, #1
 800e6b2:	899f      	ldrh	r7, [r3, #12]
 800e6b4:	f7fb f9ae 	bl	8009a14 <lwip_htons>
      tcp_set_flags(pcb, TF_FIN);
 800e6b8:	8b73      	ldrh	r3, [r6, #26]
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800e6ba:	4307      	orrs	r7, r0
 800e6bc:	68ea      	ldr	r2, [r5, #12]
      tcp_set_flags(pcb, TF_FIN);
 800e6be:	f043 0320 	orr.w	r3, r3, #32
}
 800e6c2:	4620      	mov	r0, r4
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800e6c4:	8197      	strh	r7, [r2, #12]
      tcp_set_flags(pcb, TF_FIN);
 800e6c6:	8373      	strh	r3, [r6, #26]
}
 800e6c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e6ca:	bf00      	nop
 800e6cc:	080140f4 	.word	0x080140f4
 800e6d0:	08014628 	.word	0x08014628
 800e6d4:	0801241c 	.word	0x0801241c

0800e6d8 <tcp_rexmit_rto_prepare>:
{
 800e6d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800e6da:	4605      	mov	r5, r0
 800e6dc:	2800      	cmp	r0, #0
 800e6de:	d031      	beq.n	800e744 <tcp_rexmit_rto_prepare+0x6c>
  if (pcb->unacked == NULL) {
 800e6e0:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
 800e6e2:	b132      	cbz	r2, 800e6f2 <tcp_rexmit_rto_prepare+0x1a>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e6e4:	6813      	ldr	r3, [r2, #0]
 800e6e6:	4614      	mov	r4, r2
 800e6e8:	b153      	cbz	r3, 800e700 <tcp_rexmit_rto_prepare+0x28>
  if (seg->p->ref != 1) {
 800e6ea:	6863      	ldr	r3, [r4, #4]
 800e6ec:	7b9b      	ldrb	r3, [r3, #14]
 800e6ee:	2b01      	cmp	r3, #1
 800e6f0:	d002      	beq.n	800e6f8 <tcp_rexmit_rto_prepare+0x20>
    return ERR_VAL;
 800e6f2:	f06f 0005 	mvn.w	r0, #5
}
 800e6f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e6f8:	6824      	ldr	r4, [r4, #0]
 800e6fa:	6823      	ldr	r3, [r4, #0]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d1f4      	bne.n	800e6ea <tcp_rexmit_rto_prepare+0x12>
  if (seg->p->ref != 1) {
 800e700:	6863      	ldr	r3, [r4, #4]
 800e702:	7b9b      	ldrb	r3, [r3, #14]
 800e704:	2b01      	cmp	r3, #1
 800e706:	d1f4      	bne.n	800e6f2 <tcp_rexmit_rto_prepare+0x1a>
  tcp_set_flags(pcb, TF_RTO);
 800e708:	8b6b      	ldrh	r3, [r5, #26]
  pcb->unacked = NULL;
 800e70a:	2700      	movs	r7, #0
  seg->next = pcb->unsent;
 800e70c:	6ee9      	ldr	r1, [r5, #108]	@ 0x6c
  tcp_set_flags(pcb, TF_RTO);
 800e70e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
  seg->next = pcb->unsent;
 800e712:	6021      	str	r1, [r4, #0]
  tcp_set_flags(pcb, TF_RTO);
 800e714:	836b      	strh	r3, [r5, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e716:	68e3      	ldr	r3, [r4, #12]
  pcb->unacked = NULL;
 800e718:	e9c5 271b 	strd	r2, r7, [r5, #108]	@ 0x6c
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e71c:	6858      	ldr	r0, [r3, #4]
 800e71e:	f7fb f97d 	bl	8009a1c <lwip_htonl>
 800e722:	68e3      	ldr	r3, [r4, #12]
 800e724:	4606      	mov	r6, r0
 800e726:	8924      	ldrh	r4, [r4, #8]
 800e728:	8998      	ldrh	r0, [r3, #12]
 800e72a:	f7fb f973 	bl	8009a14 <lwip_htons>
 800e72e:	4603      	mov	r3, r0
 800e730:	4426      	add	r6, r4
  return ERR_OK;
 800e732:	4638      	mov	r0, r7
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e734:	f013 0303 	ands.w	r3, r3, #3
  pcb->rttest = 0;
 800e738:	636f      	str	r7, [r5, #52]	@ 0x34
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e73a:	bf18      	it	ne
 800e73c:	2301      	movne	r3, #1
 800e73e:	4433      	add	r3, r6
 800e740:	64eb      	str	r3, [r5, #76]	@ 0x4c
}
 800e742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800e744:	4b03      	ldr	r3, [pc, #12]	@ (800e754 <tcp_rexmit_rto_prepare+0x7c>)
 800e746:	f240 6263 	movw	r2, #1635	@ 0x663
 800e74a:	4903      	ldr	r1, [pc, #12]	@ (800e758 <tcp_rexmit_rto_prepare+0x80>)
 800e74c:	4803      	ldr	r0, [pc, #12]	@ (800e75c <tcp_rexmit_rto_prepare+0x84>)
 800e74e:	f002 fea3 	bl	8011498 <iprintf>
 800e752:	e7c5      	b.n	800e6e0 <tcp_rexmit_rto_prepare+0x8>
 800e754:	080140f4 	.word	0x080140f4
 800e758:	08014644 	.word	0x08014644
 800e75c:	0801241c 	.word	0x0801241c

0800e760 <tcp_rexmit>:
{
 800e760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800e762:	4607      	mov	r7, r0
 800e764:	2800      	cmp	r0, #0
 800e766:	d031      	beq.n	800e7cc <tcp_rexmit+0x6c>
  if (pcb->unacked == NULL) {
 800e768:	6f3e      	ldr	r6, [r7, #112]	@ 0x70
 800e76a:	b34e      	cbz	r6, 800e7c0 <tcp_rexmit+0x60>
  if (seg->p->ref != 1) {
 800e76c:	6873      	ldr	r3, [r6, #4]
 800e76e:	7b9b      	ldrb	r3, [r3, #14]
 800e770:	2b01      	cmp	r3, #1
 800e772:	d125      	bne.n	800e7c0 <tcp_rexmit+0x60>
  pcb->unacked = seg->next;
 800e774:	6832      	ldr	r2, [r6, #0]
  cur_seg = &(pcb->unsent);
 800e776:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
  while (*cur_seg &&
 800e77a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
  pcb->unacked = seg->next;
 800e77c:	673a      	str	r2, [r7, #112]	@ 0x70
  while (*cur_seg &&
 800e77e:	b91b      	cbnz	r3, 800e788 <tcp_rexmit+0x28>
 800e780:	e00f      	b.n	800e7a2 <tcp_rexmit+0x42>
    cur_seg = &((*cur_seg)->next );
 800e782:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
 800e784:	682b      	ldr	r3, [r5, #0]
 800e786:	b163      	cbz	r3, 800e7a2 <tcp_rexmit+0x42>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e788:	68db      	ldr	r3, [r3, #12]
 800e78a:	6858      	ldr	r0, [r3, #4]
 800e78c:	f7fb f946 	bl	8009a1c <lwip_htonl>
 800e790:	68f3      	ldr	r3, [r6, #12]
 800e792:	4604      	mov	r4, r0
 800e794:	6858      	ldr	r0, [r3, #4]
 800e796:	f7fb f941 	bl	8009a1c <lwip_htonl>
 800e79a:	1a24      	subs	r4, r4, r0
  while (*cur_seg &&
 800e79c:	2c00      	cmp	r4, #0
 800e79e:	dbf0      	blt.n	800e782 <tcp_rexmit+0x22>
    cur_seg = &((*cur_seg)->next );
 800e7a0:	682b      	ldr	r3, [r5, #0]
  seg->next = *cur_seg;
 800e7a2:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 800e7a4:	602e      	str	r6, [r5, #0]
  if (seg->next == NULL) {
 800e7a6:	6833      	ldr	r3, [r6, #0]
 800e7a8:	b16b      	cbz	r3, 800e7c6 <tcp_rexmit+0x66>
  if (pcb->nrtx < 0xFF) {
 800e7aa:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 800e7ae:	2bff      	cmp	r3, #255	@ 0xff
 800e7b0:	d002      	beq.n	800e7b8 <tcp_rexmit+0x58>
    ++pcb->nrtx;
 800e7b2:	3301      	adds	r3, #1
 800e7b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  pcb->rttest = 0;
 800e7b8:	2300      	movs	r3, #0
  return ERR_OK;
 800e7ba:	4618      	mov	r0, r3
  pcb->rttest = 0;
 800e7bc:	637b      	str	r3, [r7, #52]	@ 0x34
}
 800e7be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_VAL;
 800e7c0:	f06f 0005 	mvn.w	r0, #5
}
 800e7c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = 0;
 800e7c6:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 800e7ca:	e7ee      	b.n	800e7aa <tcp_rexmit+0x4a>
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800e7cc:	4b03      	ldr	r3, [pc, #12]	@ (800e7dc <tcp_rexmit+0x7c>)
 800e7ce:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800e7d2:	4903      	ldr	r1, [pc, #12]	@ (800e7e0 <tcp_rexmit+0x80>)
 800e7d4:	4803      	ldr	r0, [pc, #12]	@ (800e7e4 <tcp_rexmit+0x84>)
 800e7d6:	f002 fe5f 	bl	8011498 <iprintf>
 800e7da:	e7c5      	b.n	800e768 <tcp_rexmit+0x8>
 800e7dc:	080140f4 	.word	0x080140f4
 800e7e0:	08014668 	.word	0x08014668
 800e7e4:	0801241c 	.word	0x0801241c

0800e7e8 <tcp_rexmit_fast>:
{
 800e7e8:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800e7ea:	4604      	mov	r4, r0
 800e7ec:	b340      	cbz	r0, 800e840 <tcp_rexmit_fast+0x58>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800e7ee:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e7f0:	b113      	cbz	r3, 800e7f8 <tcp_rexmit_fast+0x10>
 800e7f2:	8b63      	ldrh	r3, [r4, #26]
 800e7f4:	075b      	lsls	r3, r3, #29
 800e7f6:	d500      	bpl.n	800e7fa <tcp_rexmit_fast+0x12>
}
 800e7f8:	bd10      	pop	{r4, pc}
    if (tcp_rexmit(pcb) == ERR_OK) {
 800e7fa:	4620      	mov	r0, r4
 800e7fc:	f7ff ffb0 	bl	800e760 <tcp_rexmit>
 800e800:	2800      	cmp	r0, #0
 800e802:	d1f9      	bne.n	800e7f8 <tcp_rexmit_fast+0x10>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e804:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 800e808:	f8b4 3048 	ldrh.w	r3, [r4, #72]	@ 0x48
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800e80c:	8e62      	ldrh	r2, [r4, #50]	@ 0x32
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e80e:	4299      	cmp	r1, r3
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800e810:	ea4f 0042 	mov.w	r0, r2, lsl #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e814:	bf28      	it	cs
 800e816:	4619      	movcs	r1, r3
 800e818:	084b      	lsrs	r3, r1, #1
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800e81a:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e81e:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800e822:	d902      	bls.n	800e82a <tcp_rexmit_fast+0x42>
        pcb->ssthresh = 2 * pcb->mss;
 800e824:	b283      	uxth	r3, r0
 800e826:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
      tcp_set_flags(pcb, TF_INFR);
 800e82a:	8b61      	ldrh	r1, [r4, #26]
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800e82c:	4402      	add	r2, r0
      tcp_set_flags(pcb, TF_INFR);
 800e82e:	f041 0104 	orr.w	r1, r1, #4
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800e832:	4413      	add	r3, r2
      pcb->rtime = 0;
 800e834:	2200      	movs	r2, #0
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800e836:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800e83a:	8361      	strh	r1, [r4, #26]
      pcb->rtime = 0;
 800e83c:	8622      	strh	r2, [r4, #48]	@ 0x30
}
 800e83e:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800e840:	4b03      	ldr	r3, [pc, #12]	@ (800e850 <tcp_rexmit_fast+0x68>)
 800e842:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800e846:	4903      	ldr	r1, [pc, #12]	@ (800e854 <tcp_rexmit_fast+0x6c>)
 800e848:	4803      	ldr	r0, [pc, #12]	@ (800e858 <tcp_rexmit_fast+0x70>)
 800e84a:	f002 fe25 	bl	8011498 <iprintf>
 800e84e:	e7ce      	b.n	800e7ee <tcp_rexmit_fast+0x6>
 800e850:	080140f4 	.word	0x080140f4
 800e854:	08014680 	.word	0x08014680
 800e858:	0801241c 	.word	0x0801241c

0800e85c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800e85c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e860:	b084      	sub	sp, #16
 800e862:	4607      	mov	r7, r0
 800e864:	460e      	mov	r6, r1
 800e866:	4615      	mov	r5, r2
 800e868:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800e86c:	461c      	mov	r4, r3
{
 800e86e:	f8bd 9034 	ldrh.w	r9, [sp, #52]	@ 0x34
 800e872:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800e876:	b1fb      	cbz	r3, 800e8b8 <tcp_rst+0x5c>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800e878:	f1b8 0f00 	cmp.w	r8, #0
 800e87c:	d026      	beq.n	800e8cc <tcp_rst+0x70>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800e87e:	4630      	mov	r0, r6
 800e880:	f7fb f8cc 	bl	8009a1c <lwip_htonl>
 800e884:	2114      	movs	r1, #20
 800e886:	4602      	mov	r2, r0
 800e888:	4628      	mov	r0, r5
 800e88a:	f246 0508 	movw	r5, #24584	@ 0x6008
 800e88e:	464b      	mov	r3, r9
 800e890:	f8cd a000 	str.w	sl, [sp]
 800e894:	e9cd 1501 	strd	r1, r5, [sp, #4]
 800e898:	2100      	movs	r1, #0
 800e89a:	f7ff f9bb 	bl	800dc14 <tcp_output_alloc_header_common.constprop.0>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800e89e:	4601      	mov	r1, r0
 800e8a0:	b138      	cbz	r0, 800e8b2 <tcp_rst+0x56>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800e8a2:	4643      	mov	r3, r8
 800e8a4:	4622      	mov	r2, r4
 800e8a6:	4638      	mov	r0, r7
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800e8a8:	b004      	add	sp, #16
 800e8aa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800e8ae:	f7ff ba1f 	b.w	800dcf0 <tcp_output_control_segment>
}
 800e8b2:	b004      	add	sp, #16
 800e8b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800e8b8:	4b08      	ldr	r3, [pc, #32]	@ (800e8dc <tcp_rst+0x80>)
 800e8ba:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800e8be:	4908      	ldr	r1, [pc, #32]	@ (800e8e0 <tcp_rst+0x84>)
 800e8c0:	4808      	ldr	r0, [pc, #32]	@ (800e8e4 <tcp_rst+0x88>)
 800e8c2:	f002 fde9 	bl	8011498 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800e8c6:	f1b8 0f00 	cmp.w	r8, #0
 800e8ca:	d1d8      	bne.n	800e87e <tcp_rst+0x22>
 800e8cc:	4b03      	ldr	r3, [pc, #12]	@ (800e8dc <tcp_rst+0x80>)
 800e8ce:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800e8d2:	4905      	ldr	r1, [pc, #20]	@ (800e8e8 <tcp_rst+0x8c>)
 800e8d4:	4803      	ldr	r0, [pc, #12]	@ (800e8e4 <tcp_rst+0x88>)
 800e8d6:	f002 fddf 	bl	8011498 <iprintf>
 800e8da:	e7d0      	b.n	800e87e <tcp_rst+0x22>
 800e8dc:	080140f4 	.word	0x080140f4
 800e8e0:	080146a0 	.word	0x080146a0
 800e8e4:	0801241c 	.word	0x0801241c
 800e8e8:	080146bc 	.word	0x080146bc

0800e8ec <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800e8ec:	b510      	push	{r4, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800e8ee:	4604      	mov	r4, r0
 800e8f0:	b1c8      	cbz	r0, 800e926 <tcp_send_empty_ack+0x3a>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800e8f2:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 800e8f4:	f7fb f892 	bl	8009a1c <lwip_htonl>
 800e8f8:	2100      	movs	r1, #0
 800e8fa:	4602      	mov	r2, r0
 800e8fc:	4620      	mov	r0, r4
 800e8fe:	f7ff f9cf 	bl	800dca0 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800e902:	4601      	mov	r1, r0
 800e904:	b1b8      	cbz	r0, 800e936 <tcp_send_empty_ack+0x4a>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e906:	1d23      	adds	r3, r4, #4
 800e908:	4622      	mov	r2, r4
 800e90a:	4620      	mov	r0, r4
 800e90c:	f7ff f9f0 	bl	800dcf0 <tcp_output_control_segment>
  if (err != ERR_OK) {
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e910:	8b63      	ldrh	r3, [r4, #26]
  if (err != ERR_OK) {
 800e912:	b920      	cbnz	r0, 800e91e <tcp_send_empty_ack+0x32>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e914:	f023 0303 	bic.w	r3, r3, #3
 800e918:	b29b      	uxth	r3, r3
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e91a:	8363      	strh	r3, [r4, #26]
  }

  return err;
}
 800e91c:	bd10      	pop	{r4, pc}
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e91e:	f043 0303 	orr.w	r3, r3, #3
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e922:	8363      	strh	r3, [r4, #26]
}
 800e924:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800e926:	4b07      	ldr	r3, [pc, #28]	@ (800e944 <tcp_send_empty_ack+0x58>)
 800e928:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800e92c:	4906      	ldr	r1, [pc, #24]	@ (800e948 <tcp_send_empty_ack+0x5c>)
 800e92e:	4807      	ldr	r0, [pc, #28]	@ (800e94c <tcp_send_empty_ack+0x60>)
 800e930:	f002 fdb2 	bl	8011498 <iprintf>
 800e934:	e7dd      	b.n	800e8f2 <tcp_send_empty_ack+0x6>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e936:	8b63      	ldrh	r3, [r4, #26]
    return ERR_BUF;
 800e938:	f06f 0001 	mvn.w	r0, #1
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e93c:	f043 0303 	orr.w	r3, r3, #3
    return ERR_BUF;
 800e940:	e7eb      	b.n	800e91a <tcp_send_empty_ack+0x2e>
 800e942:	bf00      	nop
 800e944:	080140f4 	.word	0x080140f4
 800e948:	080146d8 	.word	0x080146d8
 800e94c:	0801241c 	.word	0x0801241c

0800e950 <tcp_output>:
{
 800e950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800e954:	4604      	mov	r4, r0
{
 800e956:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800e958:	2800      	cmp	r0, #0
 800e95a:	f000 81a5 	beq.w	800eca8 <tcp_output+0x358>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800e95e:	7d23      	ldrb	r3, [r4, #20]
 800e960:	2b01      	cmp	r3, #1
 800e962:	f000 8155 	beq.w	800ec10 <tcp_output+0x2c0>
  if (tcp_input_pcb == pcb) {
 800e966:	4bb1      	ldr	r3, [pc, #708]	@ (800ec2c <tcp_output+0x2dc>)
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	42a3      	cmp	r3, r4
 800e96c:	d031      	beq.n	800e9d2 <tcp_output+0x82>
  seg = pcb->unsent;
 800e96e:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800e970:	f8b4 7048 	ldrh.w	r7, [r4, #72]	@ 0x48
 800e974:	f8b4 6060 	ldrh.w	r6, [r4, #96]	@ 0x60
  if (seg == NULL) {
 800e978:	b325      	cbz	r5, 800e9c4 <tcp_output+0x74>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800e97a:	7a20      	ldrb	r0, [r4, #8]
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800e97c:	f104 0804 	add.w	r8, r4, #4
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800e980:	2800      	cmp	r0, #0
 800e982:	f040 8199 	bne.w	800ecb8 <tcp_output+0x368>
    return ip_route(src, dst);
 800e986:	4640      	mov	r0, r8
 800e988:	f001 fbd2 	bl	8010130 <ip4_route>
 800e98c:	4683      	mov	fp, r0
  if (netif == NULL) {
 800e98e:	f1bb 0f00 	cmp.w	fp, #0
 800e992:	f000 81a5 	beq.w	800ece0 <tcp_output+0x390>
  if (ip_addr_isany(&pcb->local_ip)) {
 800e996:	6823      	ldr	r3, [r4, #0]
 800e998:	b913      	cbnz	r3, 800e9a0 <tcp_output+0x50>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800e99a:	f8db 3004 	ldr.w	r3, [fp, #4]
 800e99e:	6023      	str	r3, [r4, #0]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800e9a0:	68eb      	ldr	r3, [r5, #12]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800e9a2:	42b7      	cmp	r7, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800e9a4:	6858      	ldr	r0, [r3, #4]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800e9a6:	bf28      	it	cs
 800e9a8:	4637      	movcs	r7, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800e9aa:	f7fb f837 	bl	8009a1c <lwip_htonl>
 800e9ae:	892b      	ldrh	r3, [r5, #8]
 800e9b0:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800e9b2:	1a9b      	subs	r3, r3, r2
 800e9b4:	4403      	add	r3, r0
 800e9b6:	42bb      	cmp	r3, r7
 800e9b8:	d90f      	bls.n	800e9da <tcp_output+0x8a>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800e9ba:	f8b4 3060 	ldrh.w	r3, [r4, #96]	@ 0x60
 800e9be:	42bb      	cmp	r3, r7
 800e9c0:	f000 8142 	beq.w	800ec48 <tcp_output+0x2f8>
    if (pcb->flags & TF_ACK_NOW) {
 800e9c4:	8b62      	ldrh	r2, [r4, #26]
 800e9c6:	0790      	lsls	r0, r2, #30
 800e9c8:	f100 812a 	bmi.w	800ec20 <tcp_output+0x2d0>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800e9cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e9d0:	8362      	strh	r2, [r4, #26]
    return ERR_OK;
 800e9d2:	2000      	movs	r0, #0
}
 800e9d4:	b005      	add	sp, #20
 800e9d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  pcb->persist_backoff = 0;
 800e9da:	2300      	movs	r3, #0
 800e9dc:	f884 3099 	strb.w	r3, [r4, #153]	@ 0x99
  useg = pcb->unacked;
 800e9e0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
  if (useg != NULL) {
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	f000 8140 	beq.w	800ec68 <tcp_output+0x318>
    for (; useg->next != NULL; useg = useg->next);
 800e9e8:	4699      	mov	r9, r3
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d1fb      	bne.n	800e9e8 <tcp_output+0x98>
    LWIP_ASSERT("RST not expected here!",
 800e9f0:	465e      	mov	r6, fp
 800e9f2:	e0a6      	b.n	800eb42 <tcp_output+0x1f2>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e9f4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e9f6:	b15b      	cbz	r3, 800ea10 <tcp_output+0xc0>
 800e9f8:	8b62      	ldrh	r2, [r4, #26]
 800e9fa:	f012 0f44 	tst.w	r2, #68	@ 0x44
 800e9fe:	d107      	bne.n	800ea10 <tcp_output+0xc0>
 800ea00:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 800ea02:	2800      	cmp	r0, #0
 800ea04:	f000 80f2 	beq.w	800ebec <tcp_output+0x29c>
 800ea08:	6803      	ldr	r3, [r0, #0]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	f000 80e9 	beq.w	800ebe2 <tcp_output+0x292>
    if (pcb->state != SYN_SENT) {
 800ea10:	7d23      	ldrb	r3, [r4, #20]
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800ea12:	f8d5 a00c 	ldr.w	sl, [r5, #12]
    if (pcb->state != SYN_SENT) {
 800ea16:	2b02      	cmp	r3, #2
 800ea18:	d00a      	beq.n	800ea30 <tcp_output+0xe0>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800ea1a:	f8ba a00c 	ldrh.w	sl, [sl, #12]
 800ea1e:	2010      	movs	r0, #16
 800ea20:	f7fa fff8 	bl	8009a14 <lwip_htons>
 800ea24:	ea4a 0000 	orr.w	r0, sl, r0
 800ea28:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800ea2c:	f8aa 000c 	strh.w	r0, [sl, #12]
  if (seg->p->ref != 1) {
 800ea30:	686b      	ldr	r3, [r5, #4]
 800ea32:	7b9b      	ldrb	r3, [r3, #14]
 800ea34:	2b01      	cmp	r3, #1
 800ea36:	d153      	bne.n	800eae0 <tcp_output+0x190>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800ea38:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800ea3a:	f7fa ffef 	bl	8009a1c <lwip_htonl>
 800ea3e:	f8ca 0008 	str.w	r0, [sl, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800ea42:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
 800ea44:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800ea48:	f7fa ffe4 	bl	8009a14 <lwip_htons>
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ea4c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800ea4e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800ea50:	f8aa 000e 	strh.w	r0, [sl, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ea54:	4413      	add	r3, r2
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800ea56:	f8d5 a00c 	ldr.w	sl, [r5, #12]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ea5a:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800ea5c:	7aab      	ldrb	r3, [r5, #10]
 800ea5e:	07da      	lsls	r2, r3, #31
 800ea60:	f100 80ae 	bmi.w	800ebc0 <tcp_output+0x270>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800ea64:	f10a 0b14 	add.w	fp, sl, #20
  if (pcb->rtime < 0) {
 800ea68:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	@ 0x30
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	da01      	bge.n	800ea74 <tcp_output+0x124>
    pcb->rtime = 0;
 800ea70:	2300      	movs	r3, #0
 800ea72:	8623      	strh	r3, [r4, #48]	@ 0x30
  if (pcb->rttest == 0) {
 800ea74:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	f000 8097 	beq.w	800ebaa <tcp_output+0x25a>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800ea7c:	6868      	ldr	r0, [r5, #4]
  seg->tcphdr->chksum = 0;
 800ea7e:	2200      	movs	r2, #0
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800ea80:	6843      	ldr	r3, [r0, #4]
  seg->p->len -= len;
 800ea82:	8941      	ldrh	r1, [r0, #10]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800ea84:	ebaa 0303 	sub.w	r3, sl, r3
  seg->p->payload = seg->tcphdr;
 800ea88:	f8c0 a004 	str.w	sl, [r0, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800ea8c:	b29b      	uxth	r3, r3
  seg->p->len -= len;
 800ea8e:	1ac9      	subs	r1, r1, r3
 800ea90:	8141      	strh	r1, [r0, #10]
  seg->p->tot_len -= len;
 800ea92:	8901      	ldrh	r1, [r0, #8]
 800ea94:	1acb      	subs	r3, r1, r3
 800ea96:	8103      	strh	r3, [r0, #8]
  seg->tcphdr->chksum = 0;
 800ea98:	f88a 2010 	strb.w	r2, [sl, #16]
 800ea9c:	f88a 2011 	strb.w	r2, [sl, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800eaa0:	7aab      	ldrb	r3, [r5, #10]
 800eaa2:	f013 0f01 	tst.w	r3, #1
 800eaa6:	bf0c      	ite	eq
 800eaa8:	2314      	moveq	r3, #20
 800eaaa:	2318      	movne	r3, #24
 800eaac:	449a      	add	sl, r3
 800eaae:	45d3      	cmp	fp, sl
 800eab0:	d007      	beq.n	800eac2 <tcp_output+0x172>
 800eab2:	4b5f      	ldr	r3, [pc, #380]	@ (800ec30 <tcp_output+0x2e0>)
 800eab4:	f240 621c 	movw	r2, #1564	@ 0x61c
 800eab8:	495e      	ldr	r1, [pc, #376]	@ (800ec34 <tcp_output+0x2e4>)
 800eaba:	485f      	ldr	r0, [pc, #380]	@ (800ec38 <tcp_output+0x2e8>)
 800eabc:	f002 fcec 	bl	8011498 <iprintf>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800eac0:	6868      	ldr	r0, [r5, #4]
 800eac2:	9602      	str	r6, [sp, #8]
 800eac4:	4642      	mov	r2, r8
 800eac6:	7aa3      	ldrb	r3, [r4, #10]
 800eac8:	4621      	mov	r1, r4
 800eaca:	9300      	str	r3, [sp, #0]
 800eacc:	2306      	movs	r3, #6
 800eace:	9301      	str	r3, [sp, #4]
 800ead0:	7ae3      	ldrb	r3, [r4, #11]
 800ead2:	f001 fcc7 	bl	8010464 <ip4_output_if>
    if (err != ERR_OK) {
 800ead6:	2800      	cmp	r0, #0
 800ead8:	f040 80f8 	bne.w	800eccc <tcp_output+0x37c>
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800eadc:	f8d5 a00c 	ldr.w	sl, [r5, #12]
    pcb->unsent = seg->next;
 800eae0:	682b      	ldr	r3, [r5, #0]
 800eae2:	66e3      	str	r3, [r4, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800eae4:	7d23      	ldrb	r3, [r4, #20]
 800eae6:	2b02      	cmp	r3, #2
 800eae8:	d003      	beq.n	800eaf2 <tcp_output+0x1a2>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800eaea:	8b63      	ldrh	r3, [r4, #26]
 800eaec:	f023 0303 	bic.w	r3, r3, #3
 800eaf0:	8363      	strh	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800eaf2:	f8da 0004 	ldr.w	r0, [sl, #4]
 800eaf6:	f7fa ff91 	bl	8009a1c <lwip_htonl>
 800eafa:	68eb      	ldr	r3, [r5, #12]
 800eafc:	4682      	mov	sl, r0
 800eafe:	f8b5 b008 	ldrh.w	fp, [r5, #8]
 800eb02:	8998      	ldrh	r0, [r3, #12]
 800eb04:	f7fa ff86 	bl	8009a14 <lwip_htons>
 800eb08:	f010 0303 	ands.w	r3, r0, #3
 800eb0c:	44da      	add	sl, fp
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800eb0e:	6d22      	ldr	r2, [r4, #80]	@ 0x50
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800eb10:	bf18      	it	ne
 800eb12:	2301      	movne	r3, #1
 800eb14:	4453      	add	r3, sl
    if (TCP_TCPLEN(seg) > 0) {
 800eb16:	f8b5 a008 	ldrh.w	sl, [r5, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800eb1a:	1ad2      	subs	r2, r2, r3
 800eb1c:	2a00      	cmp	r2, #0
      pcb->snd_nxt = snd_nxt;
 800eb1e:	bfb8      	it	lt
 800eb20:	6523      	strlt	r3, [r4, #80]	@ 0x50
    if (TCP_TCPLEN(seg) > 0) {
 800eb22:	68eb      	ldr	r3, [r5, #12]
 800eb24:	8998      	ldrh	r0, [r3, #12]
 800eb26:	f7fa ff75 	bl	8009a14 <lwip_htons>
 800eb2a:	0783      	lsls	r3, r0, #30
 800eb2c:	d123      	bne.n	800eb76 <tcp_output+0x226>
 800eb2e:	f1ba 0f00 	cmp.w	sl, #0
 800eb32:	d120      	bne.n	800eb76 <tcp_output+0x226>
      tcp_seg_free(seg);
 800eb34:	4628      	mov	r0, r5
 800eb36:	f7fc fb57 	bl	800b1e8 <tcp_seg_free>
    seg = pcb->unsent;
 800eb3a:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
  while (seg != NULL &&
 800eb3c:	2d00      	cmp	r5, #0
 800eb3e:	f000 80ca 	beq.w	800ecd6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800eb42:	68eb      	ldr	r3, [r5, #12]
 800eb44:	6858      	ldr	r0, [r3, #4]
 800eb46:	f7fa ff69 	bl	8009a1c <lwip_htonl>
 800eb4a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800eb4c:	1ac0      	subs	r0, r0, r3
 800eb4e:	892b      	ldrh	r3, [r5, #8]
 800eb50:	4418      	add	r0, r3
  while (seg != NULL &&
 800eb52:	42b8      	cmp	r0, r7
 800eb54:	f200 80b4 	bhi.w	800ecc0 <tcp_output+0x370>
    LWIP_ASSERT("RST not expected here!",
 800eb58:	68eb      	ldr	r3, [r5, #12]
 800eb5a:	8998      	ldrh	r0, [r3, #12]
 800eb5c:	f7fa ff5a 	bl	8009a14 <lwip_htons>
 800eb60:	0741      	lsls	r1, r0, #29
 800eb62:	f57f af47 	bpl.w	800e9f4 <tcp_output+0xa4>
 800eb66:	4b32      	ldr	r3, [pc, #200]	@ (800ec30 <tcp_output+0x2e0>)
 800eb68:	f240 5236 	movw	r2, #1334	@ 0x536
 800eb6c:	4933      	ldr	r1, [pc, #204]	@ (800ec3c <tcp_output+0x2ec>)
 800eb6e:	4832      	ldr	r0, [pc, #200]	@ (800ec38 <tcp_output+0x2e8>)
 800eb70:	f002 fc92 	bl	8011498 <iprintf>
 800eb74:	e73e      	b.n	800e9f4 <tcp_output+0xa4>
      seg->next = NULL;
 800eb76:	2300      	movs	r3, #0
 800eb78:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 800eb7a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800eb7c:	b193      	cbz	r3, 800eba4 <tcp_output+0x254>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800eb7e:	68eb      	ldr	r3, [r5, #12]
 800eb80:	6858      	ldr	r0, [r3, #4]
 800eb82:	f7fa ff4b 	bl	8009a1c <lwip_htonl>
 800eb86:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800eb8a:	4682      	mov	sl, r0
 800eb8c:	6858      	ldr	r0, [r3, #4]
 800eb8e:	f7fa ff45 	bl	8009a1c <lwip_htonl>
 800eb92:	ebaa 0a00 	sub.w	sl, sl, r0
 800eb96:	f1ba 0f00 	cmp.w	sl, #0
 800eb9a:	db67      	blt.n	800ec6c <tcp_output+0x31c>
          useg->next = seg;
 800eb9c:	f8c9 5000 	str.w	r5, [r9]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800eba0:	46a9      	mov	r9, r5
 800eba2:	e7ca      	b.n	800eb3a <tcp_output+0x1ea>
 800eba4:	46a9      	mov	r9, r5
        pcb->unacked = seg;
 800eba6:	6725      	str	r5, [r4, #112]	@ 0x70
        useg = seg;
 800eba8:	e7c7      	b.n	800eb3a <tcp_output+0x1ea>
    pcb->rttest = tcp_ticks;
 800ebaa:	4b25      	ldr	r3, [pc, #148]	@ (800ec40 <tcp_output+0x2f0>)
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	6363      	str	r3, [r4, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800ebb0:	f8da 0004 	ldr.w	r0, [sl, #4]
 800ebb4:	f7fa ff32 	bl	8009a1c <lwip_htonl>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800ebb8:	f8d5 a00c 	ldr.w	sl, [r5, #12]
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800ebbc:	63a0      	str	r0, [r4, #56]	@ 0x38
 800ebbe:	e75d      	b.n	800ea7c <tcp_output+0x12c>
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800ebc0:	4642      	mov	r2, r8
 800ebc2:	4631      	mov	r1, r6
 800ebc4:	f44f 7006 	mov.w	r0, #536	@ 0x218
    opts += 1;
 800ebc8:	f10a 0b18 	add.w	fp, sl, #24
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800ebcc:	f7fd fb0a 	bl	800c1e4 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800ebd0:	f040 7001 	orr.w	r0, r0, #33816576	@ 0x2040000
 800ebd4:	f7fa ff22 	bl	8009a1c <lwip_htonl>
 800ebd8:	f8ca 0014 	str.w	r0, [sl, #20]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800ebdc:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800ebe0:	e742      	b.n	800ea68 <tcp_output+0x118>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ebe2:	8901      	ldrh	r1, [r0, #8]
 800ebe4:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800ebe6:	4299      	cmp	r1, r3
 800ebe8:	f4bf af12 	bcs.w	800ea10 <tcp_output+0xc0>
 800ebec:	f8b4 3064 	ldrh.w	r3, [r4, #100]	@ 0x64
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	f43f af0d 	beq.w	800ea10 <tcp_output+0xc0>
 800ebf6:	f8b4 3066 	ldrh.w	r3, [r4, #102]	@ 0x66
 800ebfa:	2b08      	cmp	r3, #8
 800ebfc:	f63f af08 	bhi.w	800ea10 <tcp_output+0xc0>
 800ec00:	f012 0fa0 	tst.w	r2, #160	@ 0xa0
 800ec04:	f47f af04 	bne.w	800ea10 <tcp_output+0xc0>
  if (pcb->unsent == NULL) {
 800ec08:	2800      	cmp	r0, #0
 800ec0a:	f47f aedf 	bne.w	800e9cc <tcp_output+0x7c>
 800ec0e:	e063      	b.n	800ecd8 <tcp_output+0x388>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800ec10:	4b07      	ldr	r3, [pc, #28]	@ (800ec30 <tcp_output+0x2e0>)
 800ec12:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800ec16:	490b      	ldr	r1, [pc, #44]	@ (800ec44 <tcp_output+0x2f4>)
 800ec18:	4807      	ldr	r0, [pc, #28]	@ (800ec38 <tcp_output+0x2e8>)
 800ec1a:	f002 fc3d 	bl	8011498 <iprintf>
 800ec1e:	e6a2      	b.n	800e966 <tcp_output+0x16>
      return tcp_send_empty_ack(pcb);
 800ec20:	4620      	mov	r0, r4
}
 800ec22:	b005      	add	sp, #20
 800ec24:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return tcp_send_empty_ack(pcb);
 800ec28:	f7ff be60 	b.w	800e8ec <tcp_send_empty_ack>
 800ec2c:	24009d0c 	.word	0x24009d0c
 800ec30:	080140f4 	.word	0x080140f4
 800ec34:	08014750 	.word	0x08014750
 800ec38:	0801241c 	.word	0x0801241c
 800ec3c:	08014738 	.word	0x08014738
 800ec40:	24009d08 	.word	0x24009d08
 800ec44:	08014710 	.word	0x08014710
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800ec48:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	f47f aeba 	bne.w	800e9c4 <tcp_output+0x74>
 800ec50:	f894 3099 	ldrb.w	r3, [r4, #153]	@ 0x99
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	f47f aeb5 	bne.w	800e9c4 <tcp_output+0x74>
      pcb->persist_cnt = 0;
 800ec5a:	f44f 7280 	mov.w	r2, #256	@ 0x100
      pcb->persist_probe = 0;
 800ec5e:	f884 309a 	strb.w	r3, [r4, #154]	@ 0x9a
      pcb->persist_cnt = 0;
 800ec62:	f8a4 2098 	strh.w	r2, [r4, #152]	@ 0x98
      pcb->persist_probe = 0;
 800ec66:	e6ad      	b.n	800e9c4 <tcp_output+0x74>
  useg = pcb->unacked;
 800ec68:	4699      	mov	r9, r3
 800ec6a:	e6c1      	b.n	800e9f0 <tcp_output+0xa0>
          while (*cur_seg &&
 800ec6c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800ec6e:	f104 0b70 	add.w	fp, r4, #112	@ 0x70
          while (*cur_seg &&
 800ec72:	b92b      	cbnz	r3, 800ec80 <tcp_output+0x330>
 800ec74:	e014      	b.n	800eca0 <tcp_output+0x350>
            cur_seg = &((*cur_seg)->next );
 800ec76:	f8db b000 	ldr.w	fp, [fp]
          while (*cur_seg &&
 800ec7a:	f8db 3000 	ldr.w	r3, [fp]
 800ec7e:	b17b      	cbz	r3, 800eca0 <tcp_output+0x350>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ec80:	68db      	ldr	r3, [r3, #12]
 800ec82:	6858      	ldr	r0, [r3, #4]
 800ec84:	f7fa feca 	bl	8009a1c <lwip_htonl>
 800ec88:	68eb      	ldr	r3, [r5, #12]
 800ec8a:	4682      	mov	sl, r0
 800ec8c:	6858      	ldr	r0, [r3, #4]
 800ec8e:	f7fa fec5 	bl	8009a1c <lwip_htonl>
 800ec92:	ebaa 0a00 	sub.w	sl, sl, r0
          while (*cur_seg &&
 800ec96:	f1ba 0f00 	cmp.w	sl, #0
 800ec9a:	dbec      	blt.n	800ec76 <tcp_output+0x326>
            cur_seg = &((*cur_seg)->next );
 800ec9c:	f8db 3000 	ldr.w	r3, [fp]
          seg->next = (*cur_seg);
 800eca0:	602b      	str	r3, [r5, #0]
          (*cur_seg) = seg;
 800eca2:	f8cb 5000 	str.w	r5, [fp]
 800eca6:	e748      	b.n	800eb3a <tcp_output+0x1ea>
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800eca8:	4b0f      	ldr	r3, [pc, #60]	@ (800ece8 <tcp_output+0x398>)
 800ecaa:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800ecae:	490f      	ldr	r1, [pc, #60]	@ (800ecec <tcp_output+0x39c>)
 800ecb0:	480f      	ldr	r0, [pc, #60]	@ (800ecf0 <tcp_output+0x3a0>)
 800ecb2:	f002 fbf1 	bl	8011498 <iprintf>
 800ecb6:	e652      	b.n	800e95e <tcp_output+0xe>
    return netif_get_by_index(pcb->netif_idx);
 800ecb8:	f7fb fc5c 	bl	800a574 <netif_get_by_index>
 800ecbc:	4683      	mov	fp, r0
 800ecbe:	e666      	b.n	800e98e <tcp_output+0x3e>
  if (pcb->unsent == NULL) {
 800ecc0:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 800ecc2:	8b62      	ldrh	r2, [r4, #26]
 800ecc4:	2800      	cmp	r0, #0
 800ecc6:	f47f ae81 	bne.w	800e9cc <tcp_output+0x7c>
 800ecca:	e005      	b.n	800ecd8 <tcp_output+0x388>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800eccc:	8b63      	ldrh	r3, [r4, #26]
 800ecce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ecd2:	8363      	strh	r3, [r4, #26]
      return err;
 800ecd4:	e67e      	b.n	800e9d4 <tcp_output+0x84>
 800ecd6:	8b62      	ldrh	r2, [r4, #26]
    pcb->unsent_oversize = 0;
 800ecd8:	2300      	movs	r3, #0
 800ecda:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
 800ecde:	e675      	b.n	800e9cc <tcp_output+0x7c>
    return ERR_RTE;
 800ece0:	f06f 0003 	mvn.w	r0, #3
 800ece4:	e676      	b.n	800e9d4 <tcp_output+0x84>
 800ece6:	bf00      	nop
 800ece8:	080140f4 	.word	0x080140f4
 800ecec:	080146f8 	.word	0x080146f8
 800ecf0:	0801241c 	.word	0x0801241c

0800ecf4 <tcp_rexmit_rto_commit>:
{
 800ecf4:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800ecf6:	4604      	mov	r4, r0
 800ecf8:	b158      	cbz	r0, 800ed12 <tcp_rexmit_rto_commit+0x1e>
  if (pcb->nrtx < 0xFF) {
 800ecfa:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 800ecfe:	2bff      	cmp	r3, #255	@ 0xff
 800ed00:	d002      	beq.n	800ed08 <tcp_rexmit_rto_commit+0x14>
    ++pcb->nrtx;
 800ed02:	3301      	adds	r3, #1
 800ed04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  tcp_output(pcb);
 800ed08:	4620      	mov	r0, r4
}
 800ed0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 800ed0e:	f7ff be1f 	b.w	800e950 <tcp_output>
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800ed12:	4b04      	ldr	r3, [pc, #16]	@ (800ed24 <tcp_rexmit_rto_commit+0x30>)
 800ed14:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800ed18:	4903      	ldr	r1, [pc, #12]	@ (800ed28 <tcp_rexmit_rto_commit+0x34>)
 800ed1a:	4804      	ldr	r0, [pc, #16]	@ (800ed2c <tcp_rexmit_rto_commit+0x38>)
 800ed1c:	f002 fbbc 	bl	8011498 <iprintf>
 800ed20:	e7eb      	b.n	800ecfa <tcp_rexmit_rto_commit+0x6>
 800ed22:	bf00      	nop
 800ed24:	080140f4 	.word	0x080140f4
 800ed28:	08014764 	.word	0x08014764
 800ed2c:	0801241c 	.word	0x0801241c

0800ed30 <tcp_rexmit_rto>:
{
 800ed30:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800ed32:	4604      	mov	r4, r0
 800ed34:	b118      	cbz	r0, 800ed3e <tcp_rexmit_rto+0xe>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800ed36:	f7ff fccf 	bl	800e6d8 <tcp_rexmit_rto_prepare>
 800ed3a:	b198      	cbz	r0, 800ed64 <tcp_rexmit_rto+0x34>
}
 800ed3c:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800ed3e:	4b0f      	ldr	r3, [pc, #60]	@ (800ed7c <tcp_rexmit_rto+0x4c>)
 800ed40:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800ed44:	490e      	ldr	r1, [pc, #56]	@ (800ed80 <tcp_rexmit_rto+0x50>)
 800ed46:	480f      	ldr	r0, [pc, #60]	@ (800ed84 <tcp_rexmit_rto+0x54>)
 800ed48:	f002 fba6 	bl	8011498 <iprintf>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800ed4c:	4620      	mov	r0, r4
 800ed4e:	f7ff fcc3 	bl	800e6d8 <tcp_rexmit_rto_prepare>
 800ed52:	2800      	cmp	r0, #0
 800ed54:	d1f2      	bne.n	800ed3c <tcp_rexmit_rto+0xc>
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800ed56:	4b09      	ldr	r3, [pc, #36]	@ (800ed7c <tcp_rexmit_rto+0x4c>)
 800ed58:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800ed5c:	490a      	ldr	r1, [pc, #40]	@ (800ed88 <tcp_rexmit_rto+0x58>)
 800ed5e:	4809      	ldr	r0, [pc, #36]	@ (800ed84 <tcp_rexmit_rto+0x54>)
 800ed60:	f002 fb9a 	bl	8011498 <iprintf>
  if (pcb->nrtx < 0xFF) {
 800ed64:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 800ed68:	2bff      	cmp	r3, #255	@ 0xff
 800ed6a:	d002      	beq.n	800ed72 <tcp_rexmit_rto+0x42>
    ++pcb->nrtx;
 800ed6c:	3301      	adds	r3, #1
 800ed6e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  tcp_output(pcb);
 800ed72:	4620      	mov	r0, r4
}
 800ed74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 800ed78:	f7ff bdea 	b.w	800e950 <tcp_output>
 800ed7c:	080140f4 	.word	0x080140f4
 800ed80:	08014788 	.word	0x08014788
 800ed84:	0801241c 	.word	0x0801241c
 800ed88:	08014764 	.word	0x08014764

0800ed8c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800ed8c:	b510      	push	{r4, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800ed8e:	4604      	mov	r4, r0
 800ed90:	b188      	cbz	r0, 800edb6 <tcp_keepalive+0x2a>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800ed92:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 800ed94:	3801      	subs	r0, #1
 800ed96:	f7fa fe41 	bl	8009a1c <lwip_htonl>
 800ed9a:	2100      	movs	r1, #0
 800ed9c:	4602      	mov	r2, r0
 800ed9e:	4620      	mov	r0, r4
 800eda0:	f7fe ff7e 	bl	800dca0 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800eda4:	4601      	mov	r1, r0
 800eda6:	b170      	cbz	r0, 800edc6 <tcp_keepalive+0x3a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800eda8:	1d23      	adds	r3, r4, #4
 800edaa:	4622      	mov	r2, r4
 800edac:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800edae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800edb2:	f7fe bf9d 	b.w	800dcf0 <tcp_output_control_segment>
  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800edb6:	4b05      	ldr	r3, [pc, #20]	@ (800edcc <tcp_keepalive+0x40>)
 800edb8:	f640 0224 	movw	r2, #2084	@ 0x824
 800edbc:	4904      	ldr	r1, [pc, #16]	@ (800edd0 <tcp_keepalive+0x44>)
 800edbe:	4805      	ldr	r0, [pc, #20]	@ (800edd4 <tcp_keepalive+0x48>)
 800edc0:	f002 fb6a 	bl	8011498 <iprintf>
 800edc4:	e7e5      	b.n	800ed92 <tcp_keepalive+0x6>
}
 800edc6:	f04f 30ff 	mov.w	r0, #4294967295
 800edca:	bd10      	pop	{r4, pc}
 800edcc:	080140f4 	.word	0x080140f4
 800edd0:	080147a4 	.word	0x080147a4
 800edd4:	0801241c 	.word	0x0801241c

0800edd8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800edd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800eddc:	4604      	mov	r4, r0
 800edde:	2800      	cmp	r0, #0
 800ede0:	d055      	beq.n	800ee8e <tcp_zero_window_probe+0xb6>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800ede2:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
  if (seg == NULL) {
 800ede4:	2d00      	cmp	r5, #0
 800ede6:	d04f      	beq.n	800ee88 <tcp_zero_window_probe+0xb0>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800ede8:	f894 309a 	ldrb.w	r3, [r4, #154]	@ 0x9a
 800edec:	2bff      	cmp	r3, #255	@ 0xff
 800edee:	d002      	beq.n	800edf6 <tcp_zero_window_probe+0x1e>
    ++pcb->persist_probe;
 800edf0:	3301      	adds	r3, #1
 800edf2:	f884 309a 	strb.w	r3, [r4, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800edf6:	68eb      	ldr	r3, [r5, #12]
 800edf8:	8998      	ldrh	r0, [r3, #12]
 800edfa:	f7fa fe0b 	bl	8009a14 <lwip_htons>
 800edfe:	07c3      	lsls	r3, r0, #31
 800ee00:	d427      	bmi.n	800ee52 <tcp_zero_window_probe+0x7a>
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800ee02:	68eb      	ldr	r3, [r5, #12]
 800ee04:	2101      	movs	r1, #1
 800ee06:	4620      	mov	r0, r4
 800ee08:	685a      	ldr	r2, [r3, #4]
 800ee0a:	f7fe ff49 	bl	800dca0 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800ee0e:	4606      	mov	r6, r0
 800ee10:	2800      	cmp	r0, #0
 800ee12:	d044      	beq.n	800ee9e <tcp_zero_window_probe+0xc6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800ee14:	f8d6 8004 	ldr.w	r8, [r6, #4]
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800ee18:	6868      	ldr	r0, [r5, #4]
 800ee1a:	f108 0114 	add.w	r1, r8, #20
 800ee1e:	892f      	ldrh	r7, [r5, #8]
 800ee20:	2201      	movs	r2, #1
 800ee22:	8903      	ldrh	r3, [r0, #8]
 800ee24:	1bdb      	subs	r3, r3, r7
 800ee26:	b29b      	uxth	r3, r3
 800ee28:	f7fb ff8a 	bl	800ad40 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800ee2c:	68eb      	ldr	r3, [r5, #12]
 800ee2e:	6858      	ldr	r0, [r3, #4]
 800ee30:	f7fa fdf4 	bl	8009a1c <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ee34:	6d23      	ldr	r3, [r4, #80]	@ 0x50
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800ee36:	3001      	adds	r0, #1
    pcb->snd_nxt = snd_nxt;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ee38:	4622      	mov	r2, r4
 800ee3a:	4631      	mov	r1, r6
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ee3c:	1a1b      	subs	r3, r3, r0
 800ee3e:	2b00      	cmp	r3, #0
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ee40:	f104 0304 	add.w	r3, r4, #4
    pcb->snd_nxt = snd_nxt;
 800ee44:	bfb8      	it	lt
 800ee46:	6520      	strlt	r0, [r4, #80]	@ 0x50
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ee48:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800ee4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ee4e:	f7fe bf4f 	b.w	800dcf0 <tcp_output_control_segment>
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800ee52:	892f      	ldrh	r7, [r5, #8]
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800ee54:	4620      	mov	r0, r4
 800ee56:	68eb      	ldr	r3, [r5, #12]
 800ee58:	1e39      	subs	r1, r7, #0
 800ee5a:	685a      	ldr	r2, [r3, #4]
 800ee5c:	bf18      	it	ne
 800ee5e:	2101      	movne	r1, #1
 800ee60:	f7fe ff1e 	bl	800dca0 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800ee64:	4606      	mov	r6, r0
 800ee66:	b1d0      	cbz	r0, 800ee9e <tcp_zero_window_probe+0xc6>
  tcphdr = (struct tcp_hdr *)p->payload;
 800ee68:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (is_fin) {
 800ee6c:	2f00      	cmp	r7, #0
 800ee6e:	d1d3      	bne.n	800ee18 <tcp_zero_window_probe+0x40>
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800ee70:	f8b8 700c 	ldrh.w	r7, [r8, #12]
 800ee74:	2011      	movs	r0, #17
 800ee76:	f7fa fdcd 	bl	8009a14 <lwip_htons>
 800ee7a:	f427 577c 	bic.w	r7, r7, #16128	@ 0x3f00
 800ee7e:	b2bf      	uxth	r7, r7
 800ee80:	4338      	orrs	r0, r7
 800ee82:	f8a8 000c 	strh.w	r0, [r8, #12]
 800ee86:	e7d1      	b.n	800ee2c <tcp_zero_window_probe+0x54>
    return ERR_OK;
 800ee88:	4628      	mov	r0, r5
}
 800ee8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800ee8e:	4b05      	ldr	r3, [pc, #20]	@ (800eea4 <tcp_zero_window_probe+0xcc>)
 800ee90:	f640 024f 	movw	r2, #2127	@ 0x84f
 800ee94:	4904      	ldr	r1, [pc, #16]	@ (800eea8 <tcp_zero_window_probe+0xd0>)
 800ee96:	4805      	ldr	r0, [pc, #20]	@ (800eeac <tcp_zero_window_probe+0xd4>)
 800ee98:	f002 fafe 	bl	8011498 <iprintf>
 800ee9c:	e7a1      	b.n	800ede2 <tcp_zero_window_probe+0xa>
    return ERR_MEM;
 800ee9e:	f04f 30ff 	mov.w	r0, #4294967295
 800eea2:	e7f2      	b.n	800ee8a <tcp_zero_window_probe+0xb2>
 800eea4:	080140f4 	.word	0x080140f4
 800eea8:	080147c0 	.word	0x080147c0
 800eeac:	0801241c 	.word	0x0801241c

0800eeb0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800eeb0:	b570      	push	{r4, r5, r6, lr}
 800eeb2:	4604      	mov	r4, r0
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800eeb4:	200a      	movs	r0, #10
{
 800eeb6:	460e      	mov	r6, r1
 800eeb8:	4615      	mov	r5, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800eeba:	f7fb f94b 	bl	800a154 <memp_malloc>
  if (timeout == NULL) {
 800eebe:	b190      	cbz	r0, 800eee6 <sys_timeout_abs+0x36>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }

  timeout->next = NULL;
 800eec0:	2300      	movs	r3, #0
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800eec2:	490d      	ldr	r1, [pc, #52]	@ (800eef8 <sys_timeout_abs+0x48>)
  timeout->h = handler;
 800eec4:	6086      	str	r6, [r0, #8]
  timeout->arg = arg;
 800eec6:	60c5      	str	r5, [r0, #12]
  timeout->time = abs_time;
 800eec8:	e9c0 3400 	strd	r3, r4, [r0]
  if (next_timeout == NULL) {
 800eecc:	680b      	ldr	r3, [r1, #0]
 800eece:	b91b      	cbnz	r3, 800eed8 <sys_timeout_abs+0x28>
 800eed0:	e007      	b.n	800eee2 <sys_timeout_abs+0x32>
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
    timeout->next = next_timeout;
    next_timeout = timeout;
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800eed2:	4619      	mov	r1, r3
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	b11b      	cbz	r3, 800eee0 <sys_timeout_abs+0x30>
 800eed8:	685a      	ldr	r2, [r3, #4]
 800eeda:	1aa2      	subs	r2, r4, r2
 800eedc:	2a00      	cmp	r2, #0
 800eede:	daf8      	bge.n	800eed2 <sys_timeout_abs+0x22>
        timeout->next = t->next;
 800eee0:	6003      	str	r3, [r0, #0]
        t->next = timeout;
 800eee2:	6008      	str	r0, [r1, #0]
        break;
      }
    }
  }
}
 800eee4:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800eee6:	4b05      	ldr	r3, [pc, #20]	@ (800eefc <sys_timeout_abs+0x4c>)
 800eee8:	22be      	movs	r2, #190	@ 0xbe
 800eeea:	4905      	ldr	r1, [pc, #20]	@ (800ef00 <sys_timeout_abs+0x50>)
 800eeec:	4805      	ldr	r0, [pc, #20]	@ (800ef04 <sys_timeout_abs+0x54>)
}
 800eeee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800eef2:	f002 bad1 	b.w	8011498 <iprintf>
 800eef6:	bf00      	nop
 800eef8:	24009d4c 	.word	0x24009d4c
 800eefc:	080147e4 	.word	0x080147e4
 800ef00:	08014818 	.word	0x08014818
 800ef04:	0801241c 	.word	0x0801241c

0800ef08 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800ef08:	b538      	push	{r3, r4, r5, lr}
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800ef0a:	6843      	ldr	r3, [r0, #4]
{
 800ef0c:	4604      	mov	r4, r0
  cyclic->handler();
 800ef0e:	4798      	blx	r3

  now = sys_now();
 800ef10:	f7f5 fd52 	bl	80049b8 <sys_now>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800ef14:	4b0a      	ldr	r3, [pc, #40]	@ (800ef40 <lwip_cyclic_timer+0x38>)
 800ef16:	6825      	ldr	r5, [r4, #0]
  now = sys_now();
 800ef18:	4684      	mov	ip, r0
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800ef1a:	681b      	ldr	r3, [r3, #0]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800ef1c:	4622      	mov	r2, r4
 800ef1e:	4909      	ldr	r1, [pc, #36]	@ (800ef44 <lwip_cyclic_timer+0x3c>)
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800ef20:	18e8      	adds	r0, r5, r3
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800ef22:	eba0 030c 	sub.w	r3, r0, ip
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	da05      	bge.n	800ef36 <lwip_cyclic_timer+0x2e>
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800ef2a:	eb05 000c 	add.w	r0, r5, ip
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800ef2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800ef32:	f7ff bfbd 	b.w	800eeb0 <sys_timeout_abs>
}
 800ef36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800ef3a:	f7ff bfb9 	b.w	800eeb0 <sys_timeout_abs>
 800ef3e:	bf00      	nop
 800ef40:	24009d48 	.word	0x24009d48
 800ef44:	0800ef09 	.word	0x0800ef09

0800ef48 <tcpip_tcp_timer>:
{
 800ef48:	b508      	push	{r3, lr}
  tcp_tmr();
 800ef4a:	f7fd f91d 	bl	800c188 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800ef4e:	4b09      	ldr	r3, [pc, #36]	@ (800ef74 <tcpip_tcp_timer+0x2c>)
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	b143      	cbz	r3, 800ef66 <tcpip_tcp_timer+0x1e>

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800ef54:	f7f5 fd30 	bl	80049b8 <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800ef58:	2200      	movs	r2, #0
 800ef5a:	4907      	ldr	r1, [pc, #28]	@ (800ef78 <tcpip_tcp_timer+0x30>)
 800ef5c:	30fa      	adds	r0, #250	@ 0xfa
}
 800ef5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800ef62:	f7ff bfa5 	b.w	800eeb0 <sys_timeout_abs>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800ef66:	4b05      	ldr	r3, [pc, #20]	@ (800ef7c <tcpip_tcp_timer+0x34>)
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d1f2      	bne.n	800ef54 <tcpip_tcp_timer+0xc>
    tcpip_tcp_timer_active = 0;
 800ef6e:	4a04      	ldr	r2, [pc, #16]	@ (800ef80 <tcpip_tcp_timer+0x38>)
 800ef70:	6013      	str	r3, [r2, #0]
}
 800ef72:	bd08      	pop	{r3, pc}
 800ef74:	24009cfc 	.word	0x24009cfc
 800ef78:	0800ef49 	.word	0x0800ef49
 800ef7c:	24009cf8 	.word	0x24009cf8
 800ef80:	24009d44 	.word	0x24009d44

0800ef84 <tcp_timer_needed>:
{
 800ef84:	b508      	push	{r3, lr}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800ef86:	4b0b      	ldr	r3, [pc, #44]	@ (800efb4 <tcp_timer_needed+0x30>)
 800ef88:	681a      	ldr	r2, [r3, #0]
 800ef8a:	b98a      	cbnz	r2, 800efb0 <tcp_timer_needed+0x2c>
 800ef8c:	4a0a      	ldr	r2, [pc, #40]	@ (800efb8 <tcp_timer_needed+0x34>)
 800ef8e:	6812      	ldr	r2, [r2, #0]
 800ef90:	b152      	cbz	r2, 800efa8 <tcp_timer_needed+0x24>
    tcpip_tcp_timer_active = 1;
 800ef92:	2201      	movs	r2, #1
 800ef94:	601a      	str	r2, [r3, #0]
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800ef96:	f7f5 fd0f 	bl	80049b8 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	4907      	ldr	r1, [pc, #28]	@ (800efbc <tcp_timer_needed+0x38>)
 800ef9e:	30fa      	adds	r0, #250	@ 0xfa
}
 800efa0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800efa4:	f7ff bf84 	b.w	800eeb0 <sys_timeout_abs>
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800efa8:	4a05      	ldr	r2, [pc, #20]	@ (800efc0 <tcp_timer_needed+0x3c>)
 800efaa:	6812      	ldr	r2, [r2, #0]
 800efac:	2a00      	cmp	r2, #0
 800efae:	d1f0      	bne.n	800ef92 <tcp_timer_needed+0xe>
}
 800efb0:	bd08      	pop	{r3, pc}
 800efb2:	bf00      	nop
 800efb4:	24009d44 	.word	0x24009d44
 800efb8:	24009cfc 	.word	0x24009cfc
 800efbc:	0800ef49 	.word	0x0800ef49
 800efc0:	24009cf8 	.word	0x24009cf8

0800efc4 <sys_timeouts_init>:
{
 800efc4:	b538      	push	{r3, r4, r5, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800efc6:	4d0a      	ldr	r5, [pc, #40]	@ (800eff0 <sys_timeouts_init+0x2c>)
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800efc8:	f7f5 fcf6 	bl	80049b8 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 800efcc:	4c09      	ldr	r4, [pc, #36]	@ (800eff4 <sys_timeouts_init+0x30>)
 800efce:	f500 707a 	add.w	r0, r0, #1000	@ 0x3e8
 800efd2:	462a      	mov	r2, r5
 800efd4:	4621      	mov	r1, r4
 800efd6:	f7ff ff6b 	bl	800eeb0 <sys_timeout_abs>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800efda:	f7f5 fced 	bl	80049b8 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 800efde:	f105 0208 	add.w	r2, r5, #8
 800efe2:	4621      	mov	r1, r4
 800efe4:	f500 707a 	add.w	r0, r0, #1000	@ 0x3e8
}
 800efe8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800efec:	f7ff bf60 	b.w	800eeb0 <sys_timeout_abs>
 800eff0:	08014860 	.word	0x08014860
 800eff4:	0800ef09 	.word	0x0800ef09

0800eff8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800eff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800effc:	f7f5 fcdc 	bl	80049b8 <sys_now>
 800f000:	4c0f      	ldr	r4, [pc, #60]	@ (800f040 <sys_check_timeouts+0x48>)

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
    handler = tmptimeout->h;
    arg = tmptimeout->arg;
    current_timeout_due_time = tmptimeout->time;
 800f002:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 800f044 <sys_check_timeouts+0x4c>
  now = sys_now();
 800f006:	4607      	mov	r7, r0
 800f008:	e00f      	b.n	800f02a <sys_check_timeouts+0x32>
    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800f00a:	685a      	ldr	r2, [r3, #4]
 800f00c:	eba7 0c02 	sub.w	ip, r7, r2
 800f010:	f1bc 0f00 	cmp.w	ip, #0
 800f014:	db0e      	blt.n	800f034 <sys_check_timeouts+0x3c>
    handler = tmptimeout->h;
 800f016:	689d      	ldr	r5, [r3, #8]
    next_timeout = tmptimeout->next;
 800f018:	681e      	ldr	r6, [r3, #0]
    arg = tmptimeout->arg;
 800f01a:	f8d3 900c 	ldr.w	r9, [r3, #12]
    current_timeout_due_time = tmptimeout->time;
 800f01e:	f8c8 2000 	str.w	r2, [r8]
    next_timeout = tmptimeout->next;
 800f022:	6026      	str	r6, [r4, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800f024:	f7fb f8dc 	bl	800a1e0 <memp_free>
    if (handler != NULL) {
 800f028:	b935      	cbnz	r5, 800f038 <sys_check_timeouts+0x40>
    tmptimeout = next_timeout;
 800f02a:	6823      	ldr	r3, [r4, #0]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800f02c:	200a      	movs	r0, #10
 800f02e:	4619      	mov	r1, r3
    if (tmptimeout == NULL) {
 800f030:	2b00      	cmp	r3, #0
 800f032:	d1ea      	bne.n	800f00a <sys_check_timeouts+0x12>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800f034:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      handler(arg);
 800f038:	4648      	mov	r0, r9
 800f03a:	47a8      	blx	r5
 800f03c:	e7f5      	b.n	800f02a <sys_check_timeouts+0x32>
 800f03e:	bf00      	nop
 800f040:	24009d4c 	.word	0x24009d4c
 800f044:	24009d48 	.word	0x24009d48

0800f048 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800f048:	b510      	push	{r4, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800f04a:	4c07      	ldr	r4, [pc, #28]	@ (800f068 <sys_timeouts_sleeptime+0x20>)
 800f04c:	6823      	ldr	r3, [r4, #0]
 800f04e:	b13b      	cbz	r3, 800f060 <sys_timeouts_sleeptime+0x18>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
 800f050:	f7f5 fcb2 	bl	80049b8 <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800f054:	6823      	ldr	r3, [r4, #0]
 800f056:	685b      	ldr	r3, [r3, #4]
    return 0;
 800f058:	1a18      	subs	r0, r3, r0
 800f05a:	bf48      	it	mi
 800f05c:	2000      	movmi	r0, #0
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
    return ret;
  }
}
 800f05e:	bd10      	pop	{r4, pc}
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800f060:	f04f 30ff 	mov.w	r0, #4294967295
}
 800f064:	bd10      	pop	{r4, pc}
 800f066:	bf00      	nop
 800f068:	24009d4c 	.word	0x24009d4c

0800f06c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800f06c:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800f06e:	f002 f901 	bl	8011274 <rand>
 800f072:	4b02      	ldr	r3, [pc, #8]	@ (800f07c <udp_init+0x10>)
 800f074:	4a02      	ldr	r2, [pc, #8]	@ (800f080 <udp_init+0x14>)
 800f076:	4303      	orrs	r3, r0
 800f078:	8013      	strh	r3, [r2, #0]
#endif /* LWIP_RAND */
}
 800f07a:	bd08      	pop	{r3, pc}
 800f07c:	ffffc000 	.word	0xffffc000
 800f080:	2400002e 	.word	0x2400002e

0800f084 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800f084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800f088:	4680      	mov	r8, r0
{
 800f08a:	b085      	sub	sp, #20
 800f08c:	460f      	mov	r7, r1
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800f08e:	2800      	cmp	r0, #0
 800f090:	f000 80c4 	beq.w	800f21c <udp_input+0x198>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800f094:	2f00      	cmp	r7, #0
 800f096:	f000 80ca 	beq.w	800f22e <udp_input+0x1aa>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800f09a:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800f09e:	2b07      	cmp	r3, #7
 800f0a0:	f240 808c 	bls.w	800f1bc <udp_input+0x138>
  }

  udphdr = (struct udp_hdr *)p->payload;

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800f0a4:	f8df 91d8 	ldr.w	r9, [pc, #472]	@ 800f280 <udp_input+0x1fc>
  udphdr = (struct udp_hdr *)p->payload;
 800f0a8:	f8d8 4004 	ldr.w	r4, [r8, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800f0ac:	f8d9 1000 	ldr.w	r1, [r9]
 800f0b0:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800f0b4:	f001 f9e8 	bl	8010488 <ip4_addr_isbroadcast_u32>
 800f0b8:	4682      	mov	sl, r0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800f0ba:	8820      	ldrh	r0, [r4, #0]
 800f0bc:	f7fa fcaa 	bl	8009a14 <lwip_htons>
 800f0c0:	4603      	mov	r3, r0
  dest = lwip_ntohs(udphdr->dest);
 800f0c2:	8860      	ldrh	r0, [r4, #2]
  src = lwip_ntohs(udphdr->src);
 800f0c4:	9303      	str	r3, [sp, #12]
  dest = lwip_ntohs(udphdr->dest);
 800f0c6:	f7fa fca5 	bl	8009a14 <lwip_htons>
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f0ca:	4b65      	ldr	r3, [pc, #404]	@ (800f260 <udp_input+0x1dc>)
  dest = lwip_ntohs(udphdr->dest);
 800f0cc:	4605      	mov	r5, r0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f0ce:	681c      	ldr	r4, [r3, #0]
 800f0d0:	2c00      	cmp	r4, #0
 800f0d2:	d07c      	beq.n	800f1ce <udp_input+0x14a>
  uncon_pcb = NULL;
 800f0d4:	f04f 0b00 	mov.w	fp, #0
  prev = NULL;
 800f0d8:	465e      	mov	r6, fp
 800f0da:	e004      	b.n	800f0e6 <udp_input+0x62>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f0dc:	68e3      	ldr	r3, [r4, #12]
 800f0de:	4626      	mov	r6, r4
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d071      	beq.n	800f1c8 <udp_input+0x144>
 800f0e4:	461c      	mov	r4, r3
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800f0e6:	8a63      	ldrh	r3, [r4, #18]
 800f0e8:	42ab      	cmp	r3, r5
 800f0ea:	d1f7      	bne.n	800f0dc <udp_input+0x58>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800f0ec:	2f00      	cmp	r7, #0
 800f0ee:	f000 808e 	beq.w	800f20e <udp_input+0x18a>
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f0f2:	7a22      	ldrb	r2, [r4, #8]
 800f0f4:	b13a      	cbz	r2, 800f106 <udp_input+0x82>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f0f6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800f0fa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f0fe:	3301      	adds	r3, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f100:	b2db      	uxtb	r3, r3
 800f102:	429a      	cmp	r2, r3
 800f104:	d1ea      	bne.n	800f0dc <udp_input+0x58>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f106:	6823      	ldr	r3, [r4, #0]
    if (broadcast != 0) {
 800f108:	f1ba 0f00 	cmp.w	sl, #0
 800f10c:	d038      	beq.n	800f180 <udp_input+0xfc>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f10e:	b13b      	cbz	r3, 800f120 <udp_input+0x9c>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f110:	f8d9 2014 	ldr.w	r2, [r9, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f114:	1c50      	adds	r0, r2, #1
 800f116:	d003      	beq.n	800f120 <udp_input+0x9c>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800f118:	405a      	eors	r2, r3
 800f11a:	68b9      	ldr	r1, [r7, #8]
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f11c:	420a      	tst	r2, r1
 800f11e:	d1dd      	bne.n	800f0dc <udp_input+0x58>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800f120:	7c22      	ldrb	r2, [r4, #16]
 800f122:	0752      	lsls	r2, r2, #29
 800f124:	d408      	bmi.n	800f138 <udp_input+0xb4>
        if (uncon_pcb == NULL) {
 800f126:	f1bb 0f00 	cmp.w	fp, #0
 800f12a:	f000 8091 	beq.w	800f250 <udp_input+0x1cc>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800f12e:	f8d9 2014 	ldr.w	r2, [r9, #20]
 800f132:	3201      	adds	r2, #1
 800f134:	f000 8082 	beq.w	800f23c <udp_input+0x1b8>
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800f138:	8aa3      	ldrh	r3, [r4, #20]
 800f13a:	9a03      	ldr	r2, [sp, #12]
 800f13c:	4293      	cmp	r3, r2
 800f13e:	d1cd      	bne.n	800f0dc <udp_input+0x58>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f140:	6863      	ldr	r3, [r4, #4]
      if ((pcb->remote_port == src) &&
 800f142:	b11b      	cbz	r3, 800f14c <udp_input+0xc8>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f144:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800f148:	4293      	cmp	r3, r2
 800f14a:	d1c7      	bne.n	800f0dc <udp_input+0x58>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
        /* the first fully matching PCB */
        if (prev != NULL) {
 800f14c:	b34e      	cbz	r6, 800f1a2 <udp_input+0x11e>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800f14e:	68e3      	ldr	r3, [r4, #12]
          pcb->next = udp_pcbs;
          udp_pcbs = pcb;
 800f150:	46a3      	mov	fp, r4
          pcb->next = udp_pcbs;
 800f152:	4a43      	ldr	r2, [pc, #268]	@ (800f260 <udp_input+0x1dc>)
          prev->next = pcb->next;
 800f154:	60f3      	str	r3, [r6, #12]
          pcb->next = udp_pcbs;
 800f156:	6813      	ldr	r3, [r2, #0]
          udp_pcbs = pcb;
 800f158:	6014      	str	r4, [r2, #0]
          pcb->next = udp_pcbs;
 800f15a:	60e3      	str	r3, [r4, #12]
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800f15c:	2108      	movs	r1, #8
 800f15e:	4640      	mov	r0, r8
 800f160:	f7fb faac 	bl	800a6bc <pbuf_remove_header>
 800f164:	bb18      	cbnz	r0, 800f1ae <udp_input+0x12a>
 800f166:	465c      	mov	r4, fp
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800f168:	69a5      	ldr	r5, [r4, #24]
 800f16a:	b33d      	cbz	r5, 800f1bc <udp_input+0x138>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800f16c:	9b03      	ldr	r3, [sp, #12]
 800f16e:	4642      	mov	r2, r8
 800f170:	69e0      	ldr	r0, [r4, #28]
 800f172:	4621      	mov	r1, r4
 800f174:	9300      	str	r3, [sp, #0]
 800f176:	4b3b      	ldr	r3, [pc, #236]	@ (800f264 <udp_input+0x1e0>)
 800f178:	47a8      	blx	r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800f17a:	b005      	add	sp, #20
 800f17c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f180:	b11b      	cbz	r3, 800f18a <udp_input+0x106>
 800f182:	f8d9 2014 	ldr.w	r2, [r9, #20]
 800f186:	4293      	cmp	r3, r2
 800f188:	d1a8      	bne.n	800f0dc <udp_input+0x58>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800f18a:	7c23      	ldrb	r3, [r4, #16]
 800f18c:	0759      	lsls	r1, r3, #29
 800f18e:	d4d3      	bmi.n	800f138 <udp_input+0xb4>
      if ((pcb->remote_port == src) &&
 800f190:	8aa3      	ldrh	r3, [r4, #20]
        if (uncon_pcb == NULL) {
 800f192:	f1bb 0f00 	cmp.w	fp, #0
 800f196:	bf08      	it	eq
 800f198:	46a3      	moveq	fp, r4
      if ((pcb->remote_port == src) &&
 800f19a:	9a03      	ldr	r2, [sp, #12]
 800f19c:	4293      	cmp	r3, r2
 800f19e:	d19d      	bne.n	800f0dc <udp_input+0x58>
 800f1a0:	e7ce      	b.n	800f140 <udp_input+0xbc>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800f1a2:	2108      	movs	r1, #8
 800f1a4:	4640      	mov	r0, r8
 800f1a6:	f7fb fa89 	bl	800a6bc <pbuf_remove_header>
 800f1aa:	2800      	cmp	r0, #0
 800f1ac:	d0dc      	beq.n	800f168 <udp_input+0xe4>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800f1ae:	4b2e      	ldr	r3, [pc, #184]	@ (800f268 <udp_input+0x1e4>)
 800f1b0:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800f1b4:	492d      	ldr	r1, [pc, #180]	@ (800f26c <udp_input+0x1e8>)
 800f1b6:	482e      	ldr	r0, [pc, #184]	@ (800f270 <udp_input+0x1ec>)
 800f1b8:	f002 f96e 	bl	8011498 <iprintf>
      pbuf_free(p);
 800f1bc:	4640      	mov	r0, r8
}
 800f1be:	b005      	add	sp, #20
 800f1c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 800f1c4:	f7fb badc 	b.w	800a780 <pbuf_free>
  if (pcb != NULL) {
 800f1c8:	f1bb 0f00 	cmp.w	fp, #0
 800f1cc:	d1c6      	bne.n	800f15c <udp_input+0xd8>
  if (for_us) {
 800f1ce:	687a      	ldr	r2, [r7, #4]
 800f1d0:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800f1d4:	429a      	cmp	r2, r3
 800f1d6:	d1f1      	bne.n	800f1bc <udp_input+0x138>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800f1d8:	2108      	movs	r1, #8
 800f1da:	4640      	mov	r0, r8
 800f1dc:	f7fb fa6e 	bl	800a6bc <pbuf_remove_header>
 800f1e0:	2800      	cmp	r0, #0
 800f1e2:	d1e4      	bne.n	800f1ae <udp_input+0x12a>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800f1e4:	f1ba 0f00 	cmp.w	sl, #0
 800f1e8:	d1e8      	bne.n	800f1bc <udp_input+0x138>
 800f1ea:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800f1ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f1f2:	2be0      	cmp	r3, #224	@ 0xe0
 800f1f4:	d0e2      	beq.n	800f1bc <udp_input+0x138>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800f1f6:	f8b9 100c 	ldrh.w	r1, [r9, #12]
 800f1fa:	4640      	mov	r0, r8
 800f1fc:	3108      	adds	r1, #8
 800f1fe:	b209      	sxth	r1, r1
 800f200:	f7fb fa8a 	bl	800a718 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800f204:	2103      	movs	r1, #3
 800f206:	4640      	mov	r0, r8
 800f208:	f000 ff8a 	bl	8010120 <icmp_dest_unreach>
 800f20c:	e7d6      	b.n	800f1bc <udp_input+0x138>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800f20e:	4b16      	ldr	r3, [pc, #88]	@ (800f268 <udp_input+0x1e4>)
 800f210:	2288      	movs	r2, #136	@ 0x88
 800f212:	4918      	ldr	r1, [pc, #96]	@ (800f274 <udp_input+0x1f0>)
 800f214:	4816      	ldr	r0, [pc, #88]	@ (800f270 <udp_input+0x1ec>)
 800f216:	f002 f93f 	bl	8011498 <iprintf>
 800f21a:	e76a      	b.n	800f0f2 <udp_input+0x6e>
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800f21c:	4b12      	ldr	r3, [pc, #72]	@ (800f268 <udp_input+0x1e4>)
 800f21e:	22cf      	movs	r2, #207	@ 0xcf
 800f220:	4915      	ldr	r1, [pc, #84]	@ (800f278 <udp_input+0x1f4>)
 800f222:	4813      	ldr	r0, [pc, #76]	@ (800f270 <udp_input+0x1ec>)
 800f224:	f002 f938 	bl	8011498 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800f228:	2f00      	cmp	r7, #0
 800f22a:	f47f af36 	bne.w	800f09a <udp_input+0x16>
 800f22e:	4b0e      	ldr	r3, [pc, #56]	@ (800f268 <udp_input+0x1e4>)
 800f230:	22d0      	movs	r2, #208	@ 0xd0
 800f232:	4912      	ldr	r1, [pc, #72]	@ (800f27c <udp_input+0x1f8>)
 800f234:	480e      	ldr	r0, [pc, #56]	@ (800f270 <udp_input+0x1ec>)
 800f236:	f002 f92f 	bl	8011498 <iprintf>
 800f23a:	e72e      	b.n	800f09a <udp_input+0x16>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800f23c:	687a      	ldr	r2, [r7, #4]
 800f23e:	f8db 1000 	ldr.w	r1, [fp]
 800f242:	4291      	cmp	r1, r2
 800f244:	f43f af78 	beq.w	800f138 <udp_input+0xb4>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800f248:	429a      	cmp	r2, r3
 800f24a:	bf08      	it	eq
 800f24c:	46a3      	moveq	fp, r4
 800f24e:	e773      	b.n	800f138 <udp_input+0xb4>
      if ((pcb->remote_port == src) &&
 800f250:	8aa3      	ldrh	r3, [r4, #20]
        if (uncon_pcb == NULL) {
 800f252:	46a3      	mov	fp, r4
      if ((pcb->remote_port == src) &&
 800f254:	9a03      	ldr	r2, [sp, #12]
 800f256:	4293      	cmp	r3, r2
 800f258:	f47f af40 	bne.w	800f0dc <udp_input+0x58>
 800f25c:	e770      	b.n	800f140 <udp_input+0xbc>
 800f25e:	bf00      	nop
 800f260:	24009d50 	.word	0x24009d50
 800f264:	24006c08 	.word	0x24006c08
 800f268:	08014870 	.word	0x08014870
 800f26c:	080148fc 	.word	0x080148fc
 800f270:	0801241c 	.word	0x0801241c
 800f274:	080148d4 	.word	0x080148d4
 800f278:	080148a0 	.word	0x080148a0
 800f27c:	080148b8 	.word	0x080148b8
 800f280:	24006bf8 	.word	0x24006bf8

0800f284 <udp_bind>:
  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 800f284:	2900      	cmp	r1, #0
{
 800f286:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 800f288:	4b35      	ldr	r3, [pc, #212]	@ (800f360 <udp_bind+0xdc>)
 800f28a:	bf08      	it	eq
 800f28c:	4619      	moveq	r1, r3
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800f28e:	2800      	cmp	r0, #0
 800f290:	d058      	beq.n	800f344 <udp_bind+0xc0>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f292:	4f34      	ldr	r7, [pc, #208]	@ (800f364 <udp_bind+0xe0>)
 800f294:	683e      	ldr	r6, [r7, #0]
 800f296:	b1ee      	cbz	r6, 800f2d4 <udp_bind+0x50>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800f298:	42b0      	cmp	r0, r6
 800f29a:	d039      	beq.n	800f310 <udp_bind+0x8c>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f29c:	4634      	mov	r4, r6
 800f29e:	e001      	b.n	800f2a4 <udp_bind+0x20>
    if (pcb == ipcb) {
 800f2a0:	42a0      	cmp	r0, r4
 800f2a2:	d035      	beq.n	800f310 <udp_bind+0x8c>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f2a4:	68e4      	ldr	r4, [r4, #12]
 800f2a6:	2c00      	cmp	r4, #0
 800f2a8:	d1fa      	bne.n	800f2a0 <udp_bind+0x1c>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800f2aa:	b1aa      	cbz	r2, 800f2d8 <udp_bind+0x54>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800f2ac:	680d      	ldr	r5, [r1, #0]
 800f2ae:	4633      	mov	r3, r6
 800f2b0:	e001      	b.n	800f2b6 <udp_bind+0x32>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f2b2:	68db      	ldr	r3, [r3, #12]
 800f2b4:	b303      	cbz	r3, 800f2f8 <udp_bind+0x74>
      if (pcb != ipcb) {
 800f2b6:	4298      	cmp	r0, r3
 800f2b8:	d0fb      	beq.n	800f2b2 <udp_bind+0x2e>
          if ((ipcb->local_port == port) &&
 800f2ba:	8a59      	ldrh	r1, [r3, #18]
 800f2bc:	4291      	cmp	r1, r2
 800f2be:	d1f8      	bne.n	800f2b2 <udp_bind+0x2e>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800f2c0:	6819      	ldr	r1, [r3, #0]
              ip_addr_isany(&ipcb->local_ip))) {
 800f2c2:	2900      	cmp	r1, #0
 800f2c4:	bf18      	it	ne
 800f2c6:	42a9      	cmpne	r1, r5
 800f2c8:	d001      	beq.n	800f2ce <udp_bind+0x4a>
 800f2ca:	2d00      	cmp	r5, #0
 800f2cc:	d1f1      	bne.n	800f2b2 <udp_bind+0x2e>
      return ERR_USE;
 800f2ce:	f06f 0007 	mvn.w	r0, #7
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
}
 800f2d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (port == 0) {
 800f2d4:	b9aa      	cbnz	r2, 800f302 <udp_bind+0x7e>
  rebind = 0;
 800f2d6:	4634      	mov	r4, r6
 800f2d8:	f8df e098 	ldr.w	lr, [pc, #152]	@ 800f374 <udp_bind+0xf0>
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800f2dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f2e0:	f44f 4580 	mov.w	r5, #16384	@ 0x4000
 800f2e4:	f8be 2000 	ldrh.w	r2, [lr]
 800f2e8:	429a      	cmp	r2, r3
 800f2ea:	d026      	beq.n	800f33a <udp_bind+0xb6>
 800f2ec:	3201      	adds	r2, #1
 800f2ee:	b292      	uxth	r2, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f2f0:	b9ce      	cbnz	r6, 800f326 <udp_bind+0xa2>
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800f2f2:	680d      	ldr	r5, [r1, #0]
 800f2f4:	f8ae 2000 	strh.w	r2, [lr]
 800f2f8:	6005      	str	r5, [r0, #0]
  pcb->local_port = port;
 800f2fa:	8242      	strh	r2, [r0, #18]
  if (rebind == 0) {
 800f2fc:	b124      	cbz	r4, 800f308 <udp_bind+0x84>
  return ERR_OK;
 800f2fe:	2000      	movs	r0, #0
}
 800f300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800f302:	680b      	ldr	r3, [r1, #0]
  pcb->local_port = port;
 800f304:	8242      	strh	r2, [r0, #18]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800f306:	6003      	str	r3, [r0, #0]
    pcb->next = udp_pcbs;
 800f308:	60c6      	str	r6, [r0, #12]
    udp_pcbs = pcb;
 800f30a:	6038      	str	r0, [r7, #0]
  return ERR_OK;
 800f30c:	2000      	movs	r0, #0
 800f30e:	e7f7      	b.n	800f300 <udp_bind+0x7c>
      rebind = 1;
 800f310:	2401      	movs	r4, #1
 800f312:	e7ca      	b.n	800f2aa <udp_bind+0x26>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800f314:	3d01      	subs	r5, #1
 800f316:	b2ad      	uxth	r5, r5
 800f318:	b1f5      	cbz	r5, 800f358 <udp_bind+0xd4>
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800f31a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f31e:	429a      	cmp	r2, r3
 800f320:	d1e4      	bne.n	800f2ec <udp_bind+0x68>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800f322:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f326:	4633      	mov	r3, r6
 800f328:	e002      	b.n	800f330 <udp_bind+0xac>
 800f32a:	68db      	ldr	r3, [r3, #12]
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d0e0      	beq.n	800f2f2 <udp_bind+0x6e>
    if (pcb->local_port == udp_port) {
 800f330:	f8b3 c012 	ldrh.w	ip, [r3, #18]
 800f334:	4594      	cmp	ip, r2
 800f336:	d1f8      	bne.n	800f32a <udp_bind+0xa6>
 800f338:	e7ec      	b.n	800f314 <udp_bind+0x90>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800f33a:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f33e:	2e00      	cmp	r6, #0
 800f340:	d1f1      	bne.n	800f326 <udp_bind+0xa2>
 800f342:	e7d6      	b.n	800f2f2 <udp_bind+0x6e>
  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800f344:	4b08      	ldr	r3, [pc, #32]	@ (800f368 <udp_bind+0xe4>)
 800f346:	f240 32b7 	movw	r2, #951	@ 0x3b7
 800f34a:	4908      	ldr	r1, [pc, #32]	@ (800f36c <udp_bind+0xe8>)
 800f34c:	4808      	ldr	r0, [pc, #32]	@ (800f370 <udp_bind+0xec>)
 800f34e:	f002 f8a3 	bl	8011498 <iprintf>
 800f352:	f06f 000f 	mvn.w	r0, #15
}
 800f356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f358:	f8ae 2000 	strh.w	r2, [lr]
    if (port == 0) {
 800f35c:	e7b7      	b.n	800f2ce <udp_bind+0x4a>
 800f35e:	bf00      	nop
 800f360:	08014e14 	.word	0x08014e14
 800f364:	24009d50 	.word	0x24009d50
 800f368:	08014870 	.word	0x08014870
 800f36c:	08014918 	.word	0x08014918
 800f370:	0801241c 	.word	0x0801241c
 800f374:	2400002e 	.word	0x2400002e

0800f378 <udp_sendto_if_src>:
{
 800f378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f37c:	b085      	sub	sp, #20
 800f37e:	e9dd ba0e 	ldrd	fp, sl, [sp, #56]	@ 0x38
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800f382:	2800      	cmp	r0, #0
 800f384:	f000 8082 	beq.w	800f48c <udp_sendto_if_src+0x114>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800f388:	460d      	mov	r5, r1
 800f38a:	2900      	cmp	r1, #0
 800f38c:	d076      	beq.n	800f47c <udp_sendto_if_src+0x104>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800f38e:	4690      	mov	r8, r2
 800f390:	2a00      	cmp	r2, #0
 800f392:	d06b      	beq.n	800f46c <udp_sendto_if_src+0xf4>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800f394:	f1ba 0f00 	cmp.w	sl, #0
 800f398:	d05e      	beq.n	800f458 <udp_sendto_if_src+0xe0>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800f39a:	f1bb 0f00 	cmp.w	fp, #0
 800f39e:	d07d      	beq.n	800f49c <udp_sendto_if_src+0x124>
  if (pcb->local_port == 0) {
 800f3a0:	8a42      	ldrh	r2, [r0, #18]
 800f3a2:	4699      	mov	r9, r3
 800f3a4:	4604      	mov	r4, r0
 800f3a6:	b39a      	cbz	r2, 800f410 <udp_sendto_if_src+0x98>
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800f3a8:	892a      	ldrh	r2, [r5, #8]
 800f3aa:	f64f 73f7 	movw	r3, #65527	@ 0xfff7
 800f3ae:	429a      	cmp	r2, r3
 800f3b0:	d84f      	bhi.n	800f452 <udp_sendto_if_src+0xda>
  if (pbuf_add_header(p, UDP_HLEN)) {
 800f3b2:	2108      	movs	r1, #8
 800f3b4:	4628      	mov	r0, r5
 800f3b6:	f7fb f951 	bl	800a65c <pbuf_add_header>
 800f3ba:	bb98      	cbnz	r0, 800f424 <udp_sendto_if_src+0xac>
 800f3bc:	462e      	mov	r6, r5
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800f3be:	8973      	ldrh	r3, [r6, #10]
 800f3c0:	2b07      	cmp	r3, #7
 800f3c2:	d93e      	bls.n	800f442 <udp_sendto_if_src+0xca>
  udphdr = (struct udp_hdr *)q->payload;
 800f3c4:	6877      	ldr	r7, [r6, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 800f3c6:	8a60      	ldrh	r0, [r4, #18]
 800f3c8:	f7fa fb24 	bl	8009a14 <lwip_htons>
 800f3cc:	8038      	strh	r0, [r7, #0]
  udphdr->dest = lwip_htons(dst_port);
 800f3ce:	4648      	mov	r0, r9
 800f3d0:	f7fa fb20 	bl	8009a14 <lwip_htons>
  udphdr->chksum = 0x0000;
 800f3d4:	2300      	movs	r3, #0
  udphdr->dest = lwip_htons(dst_port);
 800f3d6:	8078      	strh	r0, [r7, #2]
  udphdr->chksum = 0x0000;
 800f3d8:	71bb      	strb	r3, [r7, #6]
 800f3da:	71fb      	strb	r3, [r7, #7]
    udphdr->len = lwip_htons(q->tot_len);
 800f3dc:	8930      	ldrh	r0, [r6, #8]
 800f3de:	f7fa fb19 	bl	8009a14 <lwip_htons>
 800f3e2:	80b8      	strh	r0, [r7, #4]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800f3e4:	f8cd b008 	str.w	fp, [sp, #8]
 800f3e8:	2011      	movs	r0, #17
 800f3ea:	7aa3      	ldrb	r3, [r4, #10]
 800f3ec:	4642      	mov	r2, r8
 800f3ee:	4651      	mov	r1, sl
 800f3f0:	9300      	str	r3, [sp, #0]
 800f3f2:	7ae3      	ldrb	r3, [r4, #11]
 800f3f4:	9001      	str	r0, [sp, #4]
 800f3f6:	4630      	mov	r0, r6
 800f3f8:	f000 ffb2 	bl	8010360 <ip4_output_if_src>
  if (q != p) {
 800f3fc:	42ae      	cmp	r6, r5
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800f3fe:	4607      	mov	r7, r0
  if (q != p) {
 800f400:	d002      	beq.n	800f408 <udp_sendto_if_src+0x90>
    pbuf_free(q);
 800f402:	4630      	mov	r0, r6
 800f404:	f7fb f9bc 	bl	800a780 <pbuf_free>
}
 800f408:	4638      	mov	r0, r7
 800f40a:	b005      	add	sp, #20
 800f40c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800f410:	4601      	mov	r1, r0
 800f412:	f7ff ff37 	bl	800f284 <udp_bind>
    if (err != ERR_OK) {
 800f416:	4607      	mov	r7, r0
 800f418:	2800      	cmp	r0, #0
 800f41a:	d0c5      	beq.n	800f3a8 <udp_sendto_if_src+0x30>
}
 800f41c:	4638      	mov	r0, r7
 800f41e:	b005      	add	sp, #20
 800f420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800f424:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f428:	2108      	movs	r1, #8
 800f42a:	2022      	movs	r0, #34	@ 0x22
 800f42c:	f7fb fa18 	bl	800a860 <pbuf_alloc>
    if (q == NULL) {
 800f430:	4606      	mov	r6, r0
 800f432:	b170      	cbz	r0, 800f452 <udp_sendto_if_src+0xda>
    if (p->tot_len != 0) {
 800f434:	892b      	ldrh	r3, [r5, #8]
 800f436:	2b00      	cmp	r3, #0
 800f438:	d0c1      	beq.n	800f3be <udp_sendto_if_src+0x46>
      pbuf_chain(q, p);
 800f43a:	4629      	mov	r1, r5
 800f43c:	f7fb fb9a 	bl	800ab74 <pbuf_chain>
 800f440:	e7bd      	b.n	800f3be <udp_sendto_if_src+0x46>
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800f442:	4b1a      	ldr	r3, [pc, #104]	@ (800f4ac <udp_sendto_if_src+0x134>)
 800f444:	f240 320d 	movw	r2, #781	@ 0x30d
 800f448:	4919      	ldr	r1, [pc, #100]	@ (800f4b0 <udp_sendto_if_src+0x138>)
 800f44a:	481a      	ldr	r0, [pc, #104]	@ (800f4b4 <udp_sendto_if_src+0x13c>)
 800f44c:	f002 f824 	bl	8011498 <iprintf>
 800f450:	e7b8      	b.n	800f3c4 <udp_sendto_if_src+0x4c>
    return ERR_MEM;
 800f452:	f04f 37ff 	mov.w	r7, #4294967295
 800f456:	e7d7      	b.n	800f408 <udp_sendto_if_src+0x90>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800f458:	4b14      	ldr	r3, [pc, #80]	@ (800f4ac <udp_sendto_if_src+0x134>)
 800f45a:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 800f45e:	4916      	ldr	r1, [pc, #88]	@ (800f4b8 <udp_sendto_if_src+0x140>)
 800f460:	4814      	ldr	r0, [pc, #80]	@ (800f4b4 <udp_sendto_if_src+0x13c>)
 800f462:	f002 f819 	bl	8011498 <iprintf>
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800f466:	f06f 070f 	mvn.w	r7, #15
 800f46a:	e7cd      	b.n	800f408 <udp_sendto_if_src+0x90>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800f46c:	4b0f      	ldr	r3, [pc, #60]	@ (800f4ac <udp_sendto_if_src+0x134>)
 800f46e:	f240 22d3 	movw	r2, #723	@ 0x2d3
 800f472:	4912      	ldr	r1, [pc, #72]	@ (800f4bc <udp_sendto_if_src+0x144>)
 800f474:	480f      	ldr	r0, [pc, #60]	@ (800f4b4 <udp_sendto_if_src+0x13c>)
 800f476:	f002 f80f 	bl	8011498 <iprintf>
 800f47a:	e7f4      	b.n	800f466 <udp_sendto_if_src+0xee>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800f47c:	4b0b      	ldr	r3, [pc, #44]	@ (800f4ac <udp_sendto_if_src+0x134>)
 800f47e:	f240 22d2 	movw	r2, #722	@ 0x2d2
 800f482:	490f      	ldr	r1, [pc, #60]	@ (800f4c0 <udp_sendto_if_src+0x148>)
 800f484:	480b      	ldr	r0, [pc, #44]	@ (800f4b4 <udp_sendto_if_src+0x13c>)
 800f486:	f002 f807 	bl	8011498 <iprintf>
 800f48a:	e7ec      	b.n	800f466 <udp_sendto_if_src+0xee>
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800f48c:	4b07      	ldr	r3, [pc, #28]	@ (800f4ac <udp_sendto_if_src+0x134>)
 800f48e:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800f492:	490c      	ldr	r1, [pc, #48]	@ (800f4c4 <udp_sendto_if_src+0x14c>)
 800f494:	4807      	ldr	r0, [pc, #28]	@ (800f4b4 <udp_sendto_if_src+0x13c>)
 800f496:	f001 ffff 	bl	8011498 <iprintf>
 800f49a:	e7e4      	b.n	800f466 <udp_sendto_if_src+0xee>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800f49c:	4b03      	ldr	r3, [pc, #12]	@ (800f4ac <udp_sendto_if_src+0x134>)
 800f49e:	f240 22d5 	movw	r2, #725	@ 0x2d5
 800f4a2:	4909      	ldr	r1, [pc, #36]	@ (800f4c8 <udp_sendto_if_src+0x150>)
 800f4a4:	4803      	ldr	r0, [pc, #12]	@ (800f4b4 <udp_sendto_if_src+0x13c>)
 800f4a6:	f001 fff7 	bl	8011498 <iprintf>
 800f4aa:	e7dc      	b.n	800f466 <udp_sendto_if_src+0xee>
 800f4ac:	08014870 	.word	0x08014870
 800f4b0:	080149dc 	.word	0x080149dc
 800f4b4:	0801241c 	.word	0x0801241c
 800f4b8:	08014994 	.word	0x08014994
 800f4bc:	08014970 	.word	0x08014970
 800f4c0:	08014950 	.word	0x08014950
 800f4c4:	08014930 	.word	0x08014930
 800f4c8:	080149b8 	.word	0x080149b8

0800f4cc <udp_sendto_if>:
{
 800f4cc:	b570      	push	{r4, r5, r6, lr}
 800f4ce:	b082      	sub	sp, #8
 800f4d0:	9c06      	ldr	r4, [sp, #24]
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800f4d2:	b390      	cbz	r0, 800f53a <udp_sendto_if+0x6e>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800f4d4:	b349      	cbz	r1, 800f52a <udp_sendto_if+0x5e>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800f4d6:	b302      	cbz	r2, 800f51a <udp_sendto_if+0x4e>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800f4d8:	b1ac      	cbz	r4, 800f506 <udp_sendto_if+0x3a>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f4da:	6805      	ldr	r5, [r0, #0]
 800f4dc:	b935      	cbnz	r5, 800f4ec <udp_sendto_if+0x20>
      src_ip = netif_ip_addr4(netif);
 800f4de:	1d25      	adds	r5, r4, #4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800f4e0:	e9cd 4500 	strd	r4, r5, [sp]
 800f4e4:	f7ff ff48 	bl	800f378 <udp_sendto_if_src>
}
 800f4e8:	b002      	add	sp, #8
 800f4ea:	bd70      	pop	{r4, r5, r6, pc}
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800f4ec:	f005 0cf0 	and.w	ip, r5, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f4f0:	f1bc 0fe0 	cmp.w	ip, #224	@ 0xe0
 800f4f4:	d0f3      	beq.n	800f4de <udp_sendto_if+0x12>
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800f4f6:	6866      	ldr	r6, [r4, #4]
 800f4f8:	42b5      	cmp	r5, r6
 800f4fa:	d101      	bne.n	800f500 <udp_sendto_if+0x34>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f4fc:	4605      	mov	r5, r0
 800f4fe:	e7ef      	b.n	800f4e0 <udp_sendto_if+0x14>
        return ERR_RTE;
 800f500:	f06f 0003 	mvn.w	r0, #3
 800f504:	e7f0      	b.n	800f4e8 <udp_sendto_if+0x1c>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800f506:	4b11      	ldr	r3, [pc, #68]	@ (800f54c <udp_sendto_if+0x80>)
 800f508:	f240 2283 	movw	r2, #643	@ 0x283
 800f50c:	4910      	ldr	r1, [pc, #64]	@ (800f550 <udp_sendto_if+0x84>)
 800f50e:	4811      	ldr	r0, [pc, #68]	@ (800f554 <udp_sendto_if+0x88>)
 800f510:	f001 ffc2 	bl	8011498 <iprintf>
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800f514:	f06f 000f 	mvn.w	r0, #15
 800f518:	e7e6      	b.n	800f4e8 <udp_sendto_if+0x1c>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800f51a:	4b0c      	ldr	r3, [pc, #48]	@ (800f54c <udp_sendto_if+0x80>)
 800f51c:	f240 2282 	movw	r2, #642	@ 0x282
 800f520:	490d      	ldr	r1, [pc, #52]	@ (800f558 <udp_sendto_if+0x8c>)
 800f522:	480c      	ldr	r0, [pc, #48]	@ (800f554 <udp_sendto_if+0x88>)
 800f524:	f001 ffb8 	bl	8011498 <iprintf>
 800f528:	e7f4      	b.n	800f514 <udp_sendto_if+0x48>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800f52a:	4b08      	ldr	r3, [pc, #32]	@ (800f54c <udp_sendto_if+0x80>)
 800f52c:	f240 2281 	movw	r2, #641	@ 0x281
 800f530:	490a      	ldr	r1, [pc, #40]	@ (800f55c <udp_sendto_if+0x90>)
 800f532:	4808      	ldr	r0, [pc, #32]	@ (800f554 <udp_sendto_if+0x88>)
 800f534:	f001 ffb0 	bl	8011498 <iprintf>
 800f538:	e7ec      	b.n	800f514 <udp_sendto_if+0x48>
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800f53a:	4b04      	ldr	r3, [pc, #16]	@ (800f54c <udp_sendto_if+0x80>)
 800f53c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f540:	4907      	ldr	r1, [pc, #28]	@ (800f560 <udp_sendto_if+0x94>)
 800f542:	4804      	ldr	r0, [pc, #16]	@ (800f554 <udp_sendto_if+0x88>)
 800f544:	f001 ffa8 	bl	8011498 <iprintf>
 800f548:	e7e4      	b.n	800f514 <udp_sendto_if+0x48>
 800f54a:	bf00      	nop
 800f54c:	08014870 	.word	0x08014870
 800f550:	08014a64 	.word	0x08014a64
 800f554:	0801241c 	.word	0x0801241c
 800f558:	08014a44 	.word	0x08014a44
 800f55c:	08014a28 	.word	0x08014a28
 800f560:	08014a0c 	.word	0x08014a0c

0800f564 <udp_sendto>:
{
 800f564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f568:	b082      	sub	sp, #8
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800f56a:	b378      	cbz	r0, 800f5cc <udp_sendto+0x68>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800f56c:	460e      	mov	r6, r1
 800f56e:	b329      	cbz	r1, 800f5bc <udp_sendto+0x58>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800f570:	4615      	mov	r5, r2
 800f572:	b1ca      	cbz	r2, 800f5a8 <udp_sendto+0x44>
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800f574:	4604      	mov	r4, r0
 800f576:	7a00      	ldrb	r0, [r0, #8]
 800f578:	4698      	mov	r8, r3
 800f57a:	b168      	cbz	r0, 800f598 <udp_sendto+0x34>
    netif = netif_get_by_index(pcb->netif_idx);
 800f57c:	f7fa fffa 	bl	800a574 <netif_get_by_index>
 800f580:	4607      	mov	r7, r0
  if (netif == NULL) {
 800f582:	b177      	cbz	r7, 800f5a2 <udp_sendto+0x3e>
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800f584:	4643      	mov	r3, r8
 800f586:	462a      	mov	r2, r5
 800f588:	4631      	mov	r1, r6
 800f58a:	4620      	mov	r0, r4
 800f58c:	9700      	str	r7, [sp, #0]
 800f58e:	f7ff ff9d 	bl	800f4cc <udp_sendto_if>
}
 800f592:	b002      	add	sp, #8
 800f594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      netif = ip_route(&pcb->local_ip, dst_ip);
 800f598:	4610      	mov	r0, r2
 800f59a:	f000 fdc9 	bl	8010130 <ip4_route>
 800f59e:	4607      	mov	r7, r0
 800f5a0:	e7ef      	b.n	800f582 <udp_sendto+0x1e>
    return ERR_RTE;
 800f5a2:	f06f 0003 	mvn.w	r0, #3
 800f5a6:	e7f4      	b.n	800f592 <udp_sendto+0x2e>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800f5a8:	4b0c      	ldr	r3, [pc, #48]	@ (800f5dc <udp_sendto+0x78>)
 800f5aa:	f240 221a 	movw	r2, #538	@ 0x21a
 800f5ae:	490c      	ldr	r1, [pc, #48]	@ (800f5e0 <udp_sendto+0x7c>)
 800f5b0:	480c      	ldr	r0, [pc, #48]	@ (800f5e4 <udp_sendto+0x80>)
 800f5b2:	f001 ff71 	bl	8011498 <iprintf>
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800f5b6:	f06f 000f 	mvn.w	r0, #15
 800f5ba:	e7ea      	b.n	800f592 <udp_sendto+0x2e>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800f5bc:	4b07      	ldr	r3, [pc, #28]	@ (800f5dc <udp_sendto+0x78>)
 800f5be:	f240 2219 	movw	r2, #537	@ 0x219
 800f5c2:	4909      	ldr	r1, [pc, #36]	@ (800f5e8 <udp_sendto+0x84>)
 800f5c4:	4807      	ldr	r0, [pc, #28]	@ (800f5e4 <udp_sendto+0x80>)
 800f5c6:	f001 ff67 	bl	8011498 <iprintf>
 800f5ca:	e7f4      	b.n	800f5b6 <udp_sendto+0x52>
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800f5cc:	4b03      	ldr	r3, [pc, #12]	@ (800f5dc <udp_sendto+0x78>)
 800f5ce:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800f5d2:	4906      	ldr	r1, [pc, #24]	@ (800f5ec <udp_sendto+0x88>)
 800f5d4:	4803      	ldr	r0, [pc, #12]	@ (800f5e4 <udp_sendto+0x80>)
 800f5d6:	f001 ff5f 	bl	8011498 <iprintf>
 800f5da:	e7ec      	b.n	800f5b6 <udp_sendto+0x52>
 800f5dc:	08014870 	.word	0x08014870
 800f5e0:	08014ab8 	.word	0x08014ab8
 800f5e4:	0801241c 	.word	0x0801241c
 800f5e8:	08014a9c 	.word	0x08014a9c
 800f5ec:	08014a84 	.word	0x08014a84

0800f5f0 <udp_send>:
{
 800f5f0:	b510      	push	{r4, lr}
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800f5f2:	b188      	cbz	r0, 800f618 <udp_send+0x28>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800f5f4:	b131      	cbz	r1, 800f604 <udp_send+0x14>
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800f5f6:	4602      	mov	r2, r0
 800f5f8:	8a83      	ldrh	r3, [r0, #20]
 800f5fa:	3204      	adds	r2, #4
}
 800f5fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800f600:	f7ff bfb0 	b.w	800f564 <udp_sendto>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800f604:	4b08      	ldr	r3, [pc, #32]	@ (800f628 <udp_send+0x38>)
 800f606:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 800f60a:	4908      	ldr	r1, [pc, #32]	@ (800f62c <udp_send+0x3c>)
 800f60c:	4808      	ldr	r0, [pc, #32]	@ (800f630 <udp_send+0x40>)
 800f60e:	f001 ff43 	bl	8011498 <iprintf>
}
 800f612:	f06f 000f 	mvn.w	r0, #15
 800f616:	bd10      	pop	{r4, pc}
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800f618:	4b03      	ldr	r3, [pc, #12]	@ (800f628 <udp_send+0x38>)
 800f61a:	f240 12d5 	movw	r2, #469	@ 0x1d5
 800f61e:	4905      	ldr	r1, [pc, #20]	@ (800f634 <udp_send+0x44>)
 800f620:	4803      	ldr	r0, [pc, #12]	@ (800f630 <udp_send+0x40>)
 800f622:	f001 ff39 	bl	8011498 <iprintf>
 800f626:	e7f4      	b.n	800f612 <udp_send+0x22>
 800f628:	08014870 	.word	0x08014870
 800f62c:	08014aec 	.word	0x08014aec
 800f630:	0801241c 	.word	0x0801241c
 800f634:	08014ad4 	.word	0x08014ad4

0800f638 <udp_recv>:
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800f638:	b110      	cbz	r0, 800f640 <udp_recv+0x8>

  /* remember recv() callback and user data */
  pcb->recv = recv;
  pcb->recv_arg = recv_arg;
 800f63a:	e9c0 1206 	strd	r1, r2, [r0, #24]
}
 800f63e:	4770      	bx	lr
  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800f640:	4b03      	ldr	r3, [pc, #12]	@ (800f650 <udp_recv+0x18>)
 800f642:	f240 428a 	movw	r2, #1162	@ 0x48a
 800f646:	4903      	ldr	r1, [pc, #12]	@ (800f654 <udp_recv+0x1c>)
 800f648:	4803      	ldr	r0, [pc, #12]	@ (800f658 <udp_recv+0x20>)
 800f64a:	f001 bf25 	b.w	8011498 <iprintf>
 800f64e:	bf00      	nop
 800f650:	08014870 	.word	0x08014870
 800f654:	08014b04 	.word	0x08014b04
 800f658:	0801241c 	.word	0x0801241c

0800f65c <udp_remove>:
{
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800f65c:	4601      	mov	r1, r0
 800f65e:	b198      	cbz	r0, 800f688 <udp_remove+0x2c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800f660:	4a0d      	ldr	r2, [pc, #52]	@ (800f698 <udp_remove+0x3c>)
 800f662:	6813      	ldr	r3, [r2, #0]
 800f664:	4283      	cmp	r3, r0
 800f666:	d00a      	beq.n	800f67e <udp_remove+0x22>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800f668:	b133      	cbz	r3, 800f678 <udp_remove+0x1c>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800f66a:	461a      	mov	r2, r3
 800f66c:	68db      	ldr	r3, [r3, #12]
 800f66e:	b11b      	cbz	r3, 800f678 <udp_remove+0x1c>
 800f670:	428b      	cmp	r3, r1
 800f672:	d1fa      	bne.n	800f66a <udp_remove+0xe>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800f674:	68cb      	ldr	r3, [r1, #12]
 800f676:	60d3      	str	r3, [r2, #12]
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800f678:	2000      	movs	r0, #0
 800f67a:	f7fa bdb1 	b.w	800a1e0 <memp_free>
    udp_pcbs = udp_pcbs->next;
 800f67e:	68c3      	ldr	r3, [r0, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 800f680:	2000      	movs	r0, #0
    udp_pcbs = udp_pcbs->next;
 800f682:	6013      	str	r3, [r2, #0]
  memp_free(MEMP_UDP_PCB, pcb);
 800f684:	f7fa bdac 	b.w	800a1e0 <memp_free>
  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800f688:	4b04      	ldr	r3, [pc, #16]	@ (800f69c <udp_remove+0x40>)
 800f68a:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 800f68e:	4904      	ldr	r1, [pc, #16]	@ (800f6a0 <udp_remove+0x44>)
 800f690:	4804      	ldr	r0, [pc, #16]	@ (800f6a4 <udp_remove+0x48>)
 800f692:	f001 bf01 	b.w	8011498 <iprintf>
 800f696:	bf00      	nop
 800f698:	24009d50 	.word	0x24009d50
 800f69c:	08014870 	.word	0x08014870
 800f6a0:	08014b1c 	.word	0x08014b1c
 800f6a4:	0801241c 	.word	0x0801241c

0800f6a8 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 800f6a8:	b510      	push	{r4, lr}
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800f6aa:	2000      	movs	r0, #0
 800f6ac:	f7fa fd52 	bl	800a154 <memp_malloc>
  if (pcb != NULL) {
 800f6b0:	4604      	mov	r4, r0
 800f6b2:	b128      	cbz	r0, 800f6c0 <udp_new_ip_type+0x18>
    memset(pcb, 0, sizeof(struct udp_pcb));
 800f6b4:	2220      	movs	r2, #32
 800f6b6:	2100      	movs	r1, #0
 800f6b8:	f002 f846 	bl	8011748 <memset>
    pcb->ttl = UDP_TTL;
 800f6bc:	23ff      	movs	r3, #255	@ 0xff
 800f6be:	72e3      	strb	r3, [r4, #11]
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
}
 800f6c0:	4620      	mov	r0, r4
 800f6c2:	bd10      	pop	{r4, pc}

0800f6c4 <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800f6c4:	b110      	cbz	r0, 800f6cc <udp_netif_ip_addr_changed+0x8>
 800f6c6:	6802      	ldr	r2, [r0, #0]
 800f6c8:	b101      	cbz	r1, 800f6cc <udp_netif_ip_addr_changed+0x8>
 800f6ca:	b902      	cbnz	r2, 800f6ce <udp_netif_ip_addr_changed+0xa>
 800f6cc:	4770      	bx	lr
 800f6ce:	680b      	ldr	r3, [r1, #0]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d0fb      	beq.n	800f6cc <udp_netif_ip_addr_changed+0x8>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f6d4:	4b08      	ldr	r3, [pc, #32]	@ (800f6f8 <udp_netif_ip_addr_changed+0x34>)
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d0f7      	beq.n	800f6cc <udp_netif_ip_addr_changed+0x8>
{
 800f6dc:	b410      	push	{r4}
 800f6de:	e000      	b.n	800f6e2 <udp_netif_ip_addr_changed+0x1e>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800f6e0:	6802      	ldr	r2, [r0, #0]
 800f6e2:	681c      	ldr	r4, [r3, #0]
 800f6e4:	4294      	cmp	r4, r2
 800f6e6:	d101      	bne.n	800f6ec <udp_netif_ip_addr_changed+0x28>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800f6e8:	680a      	ldr	r2, [r1, #0]
 800f6ea:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f6ec:	68db      	ldr	r3, [r3, #12]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d1f6      	bne.n	800f6e0 <udp_netif_ip_addr_changed+0x1c>
      }
    }
  }
}
 800f6f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f6f6:	4770      	bx	lr
 800f6f8:	24009d50 	.word	0x24009d50

0800f6fc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800f6fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f700:	2300      	movs	r3, #0
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800f702:	f04f 0e0a 	mov.w	lr, #10
{
 800f706:	b085      	sub	sp, #20
 800f708:	4e50      	ldr	r6, [pc, #320]	@ (800f84c <etharp_find_entry+0x150>)
 800f70a:	4605      	mov	r5, r0
 800f70c:	4608      	mov	r0, r1
 800f70e:	4617      	mov	r7, r2
 800f710:	4631      	mov	r1, r6
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800f712:	4699      	mov	r9, r3
  s16_t empty = ARP_TABLE_SIZE;
 800f714:	4674      	mov	r4, lr
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800f716:	46f0      	mov	r8, lr
 800f718:	46f3      	mov	fp, lr
 800f71a:	9001      	str	r0, [sp, #4]
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800f71c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f720:	e004      	b.n	800f72c <etharp_find_entry+0x30>
 800f722:	4664      	mov	r4, ip
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f724:	3301      	adds	r3, #1
 800f726:	3118      	adds	r1, #24
 800f728:	2b0a      	cmp	r3, #10
 800f72a:	d019      	beq.n	800f760 <etharp_find_entry+0x64>
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800f72c:	2c0a      	cmp	r4, #10
 800f72e:	fa0f fc83 	sxth.w	ip, r3
    u8_t state = arp_table[i].state;
 800f732:	f891 a014 	ldrb.w	sl, [r1, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800f736:	d139      	bne.n	800f7ac <etharp_find_entry+0xb0>
 800f738:	f1ba 0f00 	cmp.w	sl, #0
 800f73c:	d0f1      	beq.n	800f722 <etharp_find_entry+0x26>
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800f73e:	b11d      	cbz	r5, 800f748 <etharp_find_entry+0x4c>
 800f740:	6828      	ldr	r0, [r5, #0]
 800f742:	684a      	ldr	r2, [r1, #4]
 800f744:	4290      	cmp	r0, r2
 800f746:	d03d      	beq.n	800f7c4 <etharp_find_entry+0xc8>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800f748:	f1ba 0f01 	cmp.w	sl, #1
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
          if (arp_table[i].ctime >= age_queue) {
 800f74c:	8a48      	ldrh	r0, [r1, #18]
      if (state == ETHARP_STATE_PENDING) {
 800f74e:	d031      	beq.n	800f7b4 <etharp_find_entry+0xb8>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800f750:	4548      	cmp	r0, r9
 800f752:	d3e7      	bcc.n	800f724 <etharp_find_entry+0x28>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f754:	3301      	adds	r3, #1
          if (arp_table[i].ctime >= age_stable) {
 800f756:	4681      	mov	r9, r0
 800f758:	46e0      	mov	r8, ip
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f75a:	3118      	adds	r1, #24
 800f75c:	2b0a      	cmp	r3, #10
 800f75e:	d1e5      	bne.n	800f72c <etharp_find_entry+0x30>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800f760:	9801      	ldr	r0, [sp, #4]
 800f762:	2801      	cmp	r0, #1
 800f764:	d16e      	bne.n	800f844 <etharp_find_entry+0x148>
 800f766:	2c0a      	cmp	r4, #10
 800f768:	d032      	beq.n	800f7d0 <etharp_find_entry+0xd4>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800f76a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800f76e:	46a1      	mov	r9, r4
 800f770:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800f774:	7d1b      	ldrb	r3, [r3, #20]
 800f776:	b133      	cbz	r3, 800f786 <etharp_find_entry+0x8a>
 800f778:	4b35      	ldr	r3, [pc, #212]	@ (800f850 <etharp_find_entry+0x154>)
 800f77a:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800f77e:	4935      	ldr	r1, [pc, #212]	@ (800f854 <etharp_find_entry+0x158>)
 800f780:	4835      	ldr	r0, [pc, #212]	@ (800f858 <etharp_find_entry+0x15c>)
 800f782:	f001 fe89 	bl	8011498 <iprintf>
    etharp_free_entry(i);
 800f786:	46a0      	mov	r8, r4
 800f788:	0064      	lsls	r4, r4, #1
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800f78a:	b12d      	cbz	r5, 800f798 <etharp_find_entry+0x9c>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800f78c:	eb04 0309 	add.w	r3, r4, r9
 800f790:	682a      	ldr	r2, [r5, #0]
 800f792:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800f796:	605a      	str	r2, [r3, #4]
  }
  arp_table[i].ctime = 0;
 800f798:	444c      	add	r4, r9
 800f79a:	2300      	movs	r3, #0
 800f79c:	eb06 06c4 	add.w	r6, r6, r4, lsl #3
 800f7a0:	8273      	strh	r3, [r6, #18]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800f7a2:	60b7      	str	r7, [r6, #8]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
}
 800f7a4:	4640      	mov	r0, r8
 800f7a6:	b005      	add	sp, #20
 800f7a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (state != ETHARP_STATE_EMPTY) {
 800f7ac:	f1ba 0f00 	cmp.w	sl, #0
 800f7b0:	d0b8      	beq.n	800f724 <etharp_find_entry+0x28>
 800f7b2:	e7c4      	b.n	800f73e <etharp_find_entry+0x42>
        if (arp_table[i].q != NULL) {
 800f7b4:	680a      	ldr	r2, [r1, #0]
 800f7b6:	b392      	cbz	r2, 800f81e <etharp_find_entry+0x122>
          if (arp_table[i].ctime >= age_queue) {
 800f7b8:	9a02      	ldr	r2, [sp, #8]
 800f7ba:	4290      	cmp	r0, r2
 800f7bc:	d3b2      	bcc.n	800f724 <etharp_find_entry+0x28>
 800f7be:	46e6      	mov	lr, ip
 800f7c0:	9002      	str	r0, [sp, #8]
 800f7c2:	e7af      	b.n	800f724 <etharp_find_entry+0x28>
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800f7c4:	b117      	cbz	r7, 800f7cc <etharp_find_entry+0xd0>
 800f7c6:	6888      	ldr	r0, [r1, #8]
 800f7c8:	42b8      	cmp	r0, r7
 800f7ca:	d1bd      	bne.n	800f748 <etharp_find_entry+0x4c>
 800f7cc:	46e0      	mov	r8, ip
 800f7ce:	e7e9      	b.n	800f7a4 <etharp_find_entry+0xa8>
    if (old_stable < ARP_TABLE_SIZE) {
 800f7d0:	f1b8 0f0a 	cmp.w	r8, #10
 800f7d4:	d02a      	beq.n	800f82c <etharp_find_entry+0x130>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800f7d6:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 800f7da:	46c1      	mov	r9, r8
 800f7dc:	ea4f 0448 	mov.w	r4, r8, lsl #1
 800f7e0:	f856 3033 	ldr.w	r3, [r6, r3, lsl #3]
 800f7e4:	b1a3      	cbz	r3, 800f810 <etharp_find_entry+0x114>
 800f7e6:	4b1a      	ldr	r3, [pc, #104]	@ (800f850 <etharp_find_entry+0x154>)
 800f7e8:	f240 126d 	movw	r2, #365	@ 0x16d
 800f7ec:	491b      	ldr	r1, [pc, #108]	@ (800f85c <etharp_find_entry+0x160>)
 800f7ee:	481a      	ldr	r0, [pc, #104]	@ (800f858 <etharp_find_entry+0x15c>)
 800f7f0:	f001 fe52 	bl	8011498 <iprintf>
  if (arp_table[i].q != NULL) {
 800f7f4:	eb09 0a49 	add.w	sl, r9, r9, lsl #1
 800f7f8:	ea4f 0449 	mov.w	r4, r9, lsl #1
 800f7fc:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800f800:	f856 000a 	ldr.w	r0, [r6, sl]
 800f804:	b120      	cbz	r0, 800f810 <etharp_find_entry+0x114>
    free_etharp_q(arp_table[i].q);
 800f806:	f7fa ffbb 	bl	800a780 <pbuf_free>
    arp_table[i].q = NULL;
 800f80a:	2300      	movs	r3, #0
 800f80c:	f846 300a 	str.w	r3, [r6, sl]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800f810:	eb04 0309 	add.w	r3, r4, r9
 800f814:	2200      	movs	r2, #0
 800f816:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800f81a:	751a      	strb	r2, [r3, #20]
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800f81c:	e7b5      	b.n	800f78a <etharp_find_entry+0x8e>
          if (arp_table[i].ctime >= age_pending) {
 800f81e:	9a03      	ldr	r2, [sp, #12]
 800f820:	4290      	cmp	r0, r2
 800f822:	f4ff af7f 	bcc.w	800f724 <etharp_find_entry+0x28>
 800f826:	46e3      	mov	fp, ip
 800f828:	9003      	str	r0, [sp, #12]
 800f82a:	e77b      	b.n	800f724 <etharp_find_entry+0x28>
    } else if (old_pending < ARP_TABLE_SIZE) {
 800f82c:	f1bb 0f0a 	cmp.w	fp, #10
 800f830:	d105      	bne.n	800f83e <etharp_find_entry+0x142>
    } else if (old_queue < ARP_TABLE_SIZE) {
 800f832:	f1be 0f0a 	cmp.w	lr, #10
 800f836:	d005      	beq.n	800f844 <etharp_find_entry+0x148>
    etharp_free_entry(i);
 800f838:	46f0      	mov	r8, lr
 800f83a:	46f1      	mov	r9, lr
 800f83c:	e7da      	b.n	800f7f4 <etharp_find_entry+0xf8>
 800f83e:	46d8      	mov	r8, fp
 800f840:	46d9      	mov	r9, fp
 800f842:	e7d7      	b.n	800f7f4 <etharp_find_entry+0xf8>
    return (s16_t)ERR_MEM;
 800f844:	f04f 38ff 	mov.w	r8, #4294967295
 800f848:	e7ac      	b.n	800f7a4 <etharp_find_entry+0xa8>
 800f84a:	bf00      	nop
 800f84c:	24009d58 	.word	0x24009d58
 800f850:	08014b34 	.word	0x08014b34
 800f854:	08014b84 	.word	0x08014b84
 800f858:	0801241c 	.word	0x0801241c
 800f85c:	08014b6c 	.word	0x08014b6c

0800f860 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800f860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f864:	b082      	sub	sp, #8
 800f866:	4688      	mov	r8, r1
 800f868:	4691      	mov	r9, r2
 800f86a:	461f      	mov	r7, r3
 800f86c:	f8dd a02c 	ldr.w	sl, [sp, #44]	@ 0x2c
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f870:	4606      	mov	r6, r0
{
 800f872:	f8bd 4034 	ldrh.w	r4, [sp, #52]	@ 0x34
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f876:	2800      	cmp	r0, #0
 800f878:	d04a      	beq.n	800f910 <etharp_raw+0xb0>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800f87a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f87e:	211c      	movs	r1, #28
 800f880:	200e      	movs	r0, #14
 800f882:	f7fa ffed 	bl	800a860 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800f886:	4605      	mov	r5, r0
 800f888:	2800      	cmp	r0, #0
 800f88a:	d049      	beq.n	800f920 <etharp_raw+0xc0>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800f88c:	8943      	ldrh	r3, [r0, #10]
 800f88e:	2b1b      	cmp	r3, #27
 800f890:	d936      	bls.n	800f900 <etharp_raw+0xa0>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800f892:	4620      	mov	r0, r4
  hdr = (struct etharp_hdr *)p->payload;
 800f894:	686c      	ldr	r4, [r5, #4]
  hdr->opcode = lwip_htons(opcode);
 800f896:	f7fa f8bd 	bl	8009a14 <lwip_htons>
 800f89a:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800f89c:	f896 302c 	ldrb.w	r3, [r6, #44]	@ 0x2c
 800f8a0:	2b06      	cmp	r3, #6
 800f8a2:	d006      	beq.n	800f8b2 <etharp_raw+0x52>
 800f8a4:	4b20      	ldr	r3, [pc, #128]	@ (800f928 <etharp_raw+0xc8>)
 800f8a6:	f240 4269 	movw	r2, #1129	@ 0x469
 800f8aa:	4920      	ldr	r1, [pc, #128]	@ (800f92c <etharp_raw+0xcc>)
 800f8ac:	4820      	ldr	r0, [pc, #128]	@ (800f930 <etharp_raw+0xd0>)
 800f8ae:	f001 fdf3 	bl	8011498 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800f8b2:	6839      	ldr	r1, [r7, #0]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800f8b4:	4630      	mov	r0, r6
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800f8b6:	4e1f      	ldr	r6, [pc, #124]	@ (800f934 <etharp_raw+0xd4>)
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800f8b8:	464b      	mov	r3, r9
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800f8ba:	60a1      	str	r1, [r4, #8]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800f8bc:	4642      	mov	r2, r8
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800f8be:	88b9      	ldrh	r1, [r7, #4]
 800f8c0:	81a1      	strh	r1, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800f8c2:	f8da 1000 	ldr.w	r1, [sl]
 800f8c6:	f8c4 1012 	str.w	r1, [r4, #18]
 800f8ca:	f8ba 1004 	ldrh.w	r1, [sl, #4]
 800f8ce:	82e1      	strh	r1, [r4, #22]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800f8d0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f8d2:	6809      	ldr	r1, [r1, #0]
 800f8d4:	f8c4 100e 	str.w	r1, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800f8d8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f8da:	6809      	ldr	r1, [r1, #0]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800f8dc:	6026      	str	r6, [r4, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800f8de:	61a1      	str	r1, [r4, #24]
  hdr->hwlen = ETH_HWADDR_LEN;
 800f8e0:	f240 4106 	movw	r1, #1030	@ 0x406
 800f8e4:	80a1      	strh	r1, [r4, #4]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800f8e6:	f640 0106 	movw	r1, #2054	@ 0x806
 800f8ea:	9100      	str	r1, [sp, #0]
 800f8ec:	4629      	mov	r1, r5
 800f8ee:	f001 fa8b 	bl	8010e08 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800f8f2:	4628      	mov	r0, r5
 800f8f4:	f7fa ff44 	bl	800a780 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 800f8f8:	2000      	movs	r0, #0
}
 800f8fa:	b002      	add	sp, #8
 800f8fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800f900:	4b09      	ldr	r3, [pc, #36]	@ (800f928 <etharp_raw+0xc8>)
 800f902:	f240 4262 	movw	r2, #1122	@ 0x462
 800f906:	490c      	ldr	r1, [pc, #48]	@ (800f938 <etharp_raw+0xd8>)
 800f908:	4809      	ldr	r0, [pc, #36]	@ (800f930 <etharp_raw+0xd0>)
 800f90a:	f001 fdc5 	bl	8011498 <iprintf>
 800f90e:	e7c0      	b.n	800f892 <etharp_raw+0x32>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f910:	4b05      	ldr	r3, [pc, #20]	@ (800f928 <etharp_raw+0xc8>)
 800f912:	f240 4257 	movw	r2, #1111	@ 0x457
 800f916:	4909      	ldr	r1, [pc, #36]	@ (800f93c <etharp_raw+0xdc>)
 800f918:	4805      	ldr	r0, [pc, #20]	@ (800f930 <etharp_raw+0xd0>)
 800f91a:	f001 fdbd 	bl	8011498 <iprintf>
 800f91e:	e7ac      	b.n	800f87a <etharp_raw+0x1a>
    return ERR_MEM;
 800f920:	f04f 30ff 	mov.w	r0, #4294967295
 800f924:	e7e9      	b.n	800f8fa <etharp_raw+0x9a>
 800f926:	bf00      	nop
 800f928:	08014b34 	.word	0x08014b34
 800f92c:	08014be4 	.word	0x08014be4
 800f930:	0801241c 	.word	0x0801241c
 800f934:	00080100 	.word	0x00080100
 800f938:	08014bb0 	.word	0x08014bb0
 800f93c:	0801240c 	.word	0x0801240c

0800f940 <etharp_output_to_arp_index>:
{
 800f940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800f944:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fa1c <etharp_output_to_arp_index+0xdc>
 800f948:	eb02 0642 	add.w	r6, r2, r2, lsl #1
{
 800f94c:	b084      	sub	sp, #16
 800f94e:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800f950:	eb08 06c6 	add.w	r6, r8, r6, lsl #3
{
 800f954:	4605      	mov	r5, r0
 800f956:	460f      	mov	r7, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800f958:	ea4f 0942 	mov.w	r9, r2, lsl #1
 800f95c:	7d33      	ldrb	r3, [r6, #20]
 800f95e:	2b01      	cmp	r3, #1
 800f960:	d936      	bls.n	800f9d0 <etharp_output_to_arp_index+0x90>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800f962:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 800f966:	2b02      	cmp	r3, #2
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f968:	f105 0a26 	add.w	sl, r5, #38	@ 0x26
 800f96c:	ea4f 00c0 	mov.w	r0, r0, lsl #3
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f970:	f100 060c 	add.w	r6, r0, #12
 800f974:	4446      	add	r6, r8
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800f976:	d00b      	beq.n	800f990 <etharp_output_to_arp_index+0x50>
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800f978:	f44f 6400 	mov.w	r4, #2048	@ 0x800
 800f97c:	4633      	mov	r3, r6
 800f97e:	4652      	mov	r2, sl
 800f980:	4639      	mov	r1, r7
 800f982:	4628      	mov	r0, r5
 800f984:	9400      	str	r4, [sp, #0]
 800f986:	f001 fa3f 	bl	8010e08 <ethernet_output>
}
 800f98a:	b004      	add	sp, #16
 800f98c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800f990:	44a1      	add	r9, r4
 800f992:	eb08 09c9 	add.w	r9, r8, r9, lsl #3
 800f996:	f8b9 3012 	ldrh.w	r3, [r9, #18]
 800f99a:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800f99e:	d820      	bhi.n	800f9e2 <etharp_output_to_arp_index+0xa2>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800f9a0:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800f9a4:	d3e8      	bcc.n	800f978 <etharp_output_to_arp_index+0x38>
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f9a6:	2301      	movs	r3, #1
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f9a8:	3004      	adds	r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f9aa:	4632      	mov	r2, r6
 800f9ac:	4651      	mov	r1, sl
 800f9ae:	9303      	str	r3, [sp, #12]
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f9b0:	4440      	add	r0, r8
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f9b2:	4b15      	ldr	r3, [pc, #84]	@ (800fa08 <etharp_output_to_arp_index+0xc8>)
 800f9b4:	9002      	str	r0, [sp, #8]
 800f9b6:	4628      	mov	r0, r5
 800f9b8:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800f9ba:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f9bc:	9300      	str	r3, [sp, #0]
 800f9be:	4653      	mov	r3, sl
 800f9c0:	f7ff ff4e 	bl	800f860 <etharp_raw>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f9c4:	2800      	cmp	r0, #0
 800f9c6:	d1d7      	bne.n	800f978 <etharp_output_to_arp_index+0x38>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f9c8:	2303      	movs	r3, #3
 800f9ca:	f889 3014 	strb.w	r3, [r9, #20]
 800f9ce:	e7d3      	b.n	800f978 <etharp_output_to_arp_index+0x38>
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800f9d0:	4b0e      	ldr	r3, [pc, #56]	@ (800fa0c <etharp_output_to_arp_index+0xcc>)
 800f9d2:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800f9d6:	490e      	ldr	r1, [pc, #56]	@ (800fa10 <etharp_output_to_arp_index+0xd0>)
 800f9d8:	480e      	ldr	r0, [pc, #56]	@ (800fa14 <etharp_output_to_arp_index+0xd4>)
 800f9da:	f001 fd5d 	bl	8011498 <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800f9de:	7d33      	ldrb	r3, [r6, #20]
 800f9e0:	e7bf      	b.n	800f962 <etharp_output_to_arp_index+0x22>
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f9e2:	2301      	movs	r3, #1
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800f9e4:	3004      	adds	r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f9e6:	4a0c      	ldr	r2, [pc, #48]	@ (800fa18 <etharp_output_to_arp_index+0xd8>)
 800f9e8:	4651      	mov	r1, sl
 800f9ea:	9303      	str	r3, [sp, #12]
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800f9ec:	4440      	add	r0, r8
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f9ee:	4b06      	ldr	r3, [pc, #24]	@ (800fa08 <etharp_output_to_arp_index+0xc8>)
 800f9f0:	9002      	str	r0, [sp, #8]
 800f9f2:	4628      	mov	r0, r5
 800f9f4:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800f9f6:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f9f8:	9300      	str	r3, [sp, #0]
 800f9fa:	4653      	mov	r3, sl
 800f9fc:	f7ff ff30 	bl	800f860 <etharp_raw>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800fa00:	2800      	cmp	r0, #0
 800fa02:	d1b9      	bne.n	800f978 <etharp_output_to_arp_index+0x38>
 800fa04:	e7e0      	b.n	800f9c8 <etharp_output_to_arp_index+0x88>
 800fa06:	bf00      	nop
 800fa08:	08015008 	.word	0x08015008
 800fa0c:	08014b34 	.word	0x08014b34
 800fa10:	08014c28 	.word	0x08014c28
 800fa14:	0801241c 	.word	0x0801241c
 800fa18:	08015010 	.word	0x08015010
 800fa1c:	24009d58 	.word	0x24009d58

0800fa20 <etharp_tmr>:
{
 800fa20:	b570      	push	{r4, r5, r6, lr}
 800fa22:	4c1d      	ldr	r4, [pc, #116]	@ (800fa98 <etharp_tmr+0x78>)
 800fa24:	b084      	sub	sp, #16
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800fa26:	2600      	movs	r6, #0
 800fa28:	f104 05f0 	add.w	r5, r4, #240	@ 0xf0
 800fa2c:	e00a      	b.n	800fa44 <etharp_tmr+0x24>
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800fa2e:	2a01      	cmp	r2, #1
 800fa30:	d01f      	beq.n	800fa72 <etharp_tmr+0x52>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800fa32:	2a03      	cmp	r2, #3
 800fa34:	d02d      	beq.n	800fa92 <etharp_tmr+0x72>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800fa36:	2a04      	cmp	r2, #4
 800fa38:	d101      	bne.n	800fa3e <etharp_tmr+0x1e>
        arp_table[i].state = ETHARP_STATE_STABLE;
 800fa3a:	2302      	movs	r3, #2
 800fa3c:	7423      	strb	r3, [r4, #16]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fa3e:	3418      	adds	r4, #24
 800fa40:	42ac      	cmp	r4, r5
 800fa42:	d014      	beq.n	800fa6e <etharp_tmr+0x4e>
    u8_t state = arp_table[i].state;
 800fa44:	7c22      	ldrb	r2, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 800fa46:	2a00      	cmp	r2, #0
 800fa48:	d0f9      	beq.n	800fa3e <etharp_tmr+0x1e>
      arp_table[i].ctime++;
 800fa4a:	89e3      	ldrh	r3, [r4, #14]
 800fa4c:	3301      	adds	r3, #1
 800fa4e:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800fa50:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
      arp_table[i].ctime++;
 800fa54:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800fa56:	d3ea      	bcc.n	800fa2e <etharp_tmr+0xe>
  if (arp_table[i].q != NULL) {
 800fa58:	f854 0c04 	ldr.w	r0, [r4, #-4]
 800fa5c:	b118      	cbz	r0, 800fa66 <etharp_tmr+0x46>
    free_etharp_q(arp_table[i].q);
 800fa5e:	f7fa fe8f 	bl	800a780 <pbuf_free>
    arp_table[i].q = NULL;
 800fa62:	f844 6c04 	str.w	r6, [r4, #-4]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800fa66:	7426      	strb	r6, [r4, #16]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fa68:	3418      	adds	r4, #24
 800fa6a:	42ac      	cmp	r4, r5
 800fa6c:	d1ea      	bne.n	800fa44 <etharp_tmr+0x24>
}
 800fa6e:	b004      	add	sp, #16
 800fa70:	bd70      	pop	{r4, r5, r6, pc}
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800fa72:	2b04      	cmp	r3, #4
 800fa74:	d8f0      	bhi.n	800fa58 <etharp_tmr+0x38>
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800fa76:	9203      	str	r2, [sp, #12]
 800fa78:	4a08      	ldr	r2, [pc, #32]	@ (800fa9c <etharp_tmr+0x7c>)
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800fa7a:	6860      	ldr	r0, [r4, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800fa7c:	9201      	str	r2, [sp, #4]
 800fa7e:	f100 0326 	add.w	r3, r0, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800fa82:	1d02      	adds	r2, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800fa84:	9402      	str	r4, [sp, #8]
 800fa86:	9200      	str	r2, [sp, #0]
 800fa88:	4619      	mov	r1, r3
 800fa8a:	4a05      	ldr	r2, [pc, #20]	@ (800faa0 <etharp_tmr+0x80>)
 800fa8c:	f7ff fee8 	bl	800f860 <etharp_raw>
 800fa90:	e7d5      	b.n	800fa3e <etharp_tmr+0x1e>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800fa92:	2304      	movs	r3, #4
 800fa94:	7423      	strb	r3, [r4, #16]
 800fa96:	e7d2      	b.n	800fa3e <etharp_tmr+0x1e>
 800fa98:	24009d5c 	.word	0x24009d5c
 800fa9c:	08015008 	.word	0x08015008
 800faa0:	08015010 	.word	0x08015010

0800faa4 <etharp_cleanup_netif>:
{
 800faa4:	b570      	push	{r4, r5, r6, lr}
 800faa6:	4c0b      	ldr	r4, [pc, #44]	@ (800fad4 <etharp_cleanup_netif+0x30>)
 800faa8:	4606      	mov	r6, r0
 800faaa:	f104 05f0 	add.w	r5, r4, #240	@ 0xf0
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800faae:	7d23      	ldrb	r3, [r4, #20]
 800fab0:	b113      	cbz	r3, 800fab8 <etharp_cleanup_netif+0x14>
 800fab2:	68a3      	ldr	r3, [r4, #8]
 800fab4:	42b3      	cmp	r3, r6
 800fab6:	d003      	beq.n	800fac0 <etharp_cleanup_netif+0x1c>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fab8:	3418      	adds	r4, #24
 800faba:	42ac      	cmp	r4, r5
 800fabc:	d1f7      	bne.n	800faae <etharp_cleanup_netif+0xa>
}
 800fabe:	bd70      	pop	{r4, r5, r6, pc}
  if (arp_table[i].q != NULL) {
 800fac0:	6820      	ldr	r0, [r4, #0]
 800fac2:	b118      	cbz	r0, 800facc <etharp_cleanup_netif+0x28>
    free_etharp_q(arp_table[i].q);
 800fac4:	f7fa fe5c 	bl	800a780 <pbuf_free>
    arp_table[i].q = NULL;
 800fac8:	2300      	movs	r3, #0
 800faca:	6023      	str	r3, [r4, #0]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800facc:	2300      	movs	r3, #0
 800face:	7523      	strb	r3, [r4, #20]
}
 800fad0:	e7f2      	b.n	800fab8 <etharp_cleanup_netif+0x14>
 800fad2:	bf00      	nop
 800fad4:	24009d58 	.word	0x24009d58

0800fad8 <etharp_input>:
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800fad8:	2900      	cmp	r1, #0
 800fada:	d07f      	beq.n	800fbdc <etharp_input+0x104>
{
 800fadc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hdr = (struct etharp_hdr *)p->payload;
 800fae0:	6846      	ldr	r6, [r0, #4]
{
 800fae2:	b087      	sub	sp, #28
 800fae4:	4604      	mov	r4, r0
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800fae6:	8833      	ldrh	r3, [r6, #0]
 800fae8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800faec:	d102      	bne.n	800faf4 <etharp_input+0x1c>
 800faee:	7933      	ldrb	r3, [r6, #4]
 800faf0:	2b06      	cmp	r3, #6
 800faf2:	d005      	beq.n	800fb00 <etharp_input+0x28>
  pbuf_free(p);
 800faf4:	4620      	mov	r0, r4
}
 800faf6:	b007      	add	sp, #28
 800faf8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800fafc:	f7fa be40 	b.w	800a780 <pbuf_free>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800fb00:	7973      	ldrb	r3, [r6, #5]
 800fb02:	2b04      	cmp	r3, #4
 800fb04:	d1f6      	bne.n	800faf4 <etharp_input+0x1c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800fb06:	8873      	ldrh	r3, [r6, #2]
 800fb08:	2b08      	cmp	r3, #8
 800fb0a:	d1f3      	bne.n	800faf4 <etharp_input+0x1c>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800fb0c:	f8d6 a00e 	ldr.w	sl, [r6, #14]
 800fb10:	460d      	mov	r5, r1
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800fb12:	684f      	ldr	r7, [r1, #4]
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800fb14:	f106 0808 	add.w	r8, r6, #8
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800fb18:	69b3      	ldr	r3, [r6, #24]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800fb1a:	f8cd a014 	str.w	sl, [sp, #20]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800fb1e:	2f00      	cmp	r7, #0
 800fb20:	d163      	bne.n	800fbea <etharp_input+0x112>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800fb22:	f04f 0b02 	mov.w	fp, #2
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800fb26:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 800fb2a:	2b06      	cmp	r3, #6
 800fb2c:	d162      	bne.n	800fbf4 <etharp_input+0x11c>
  if (ip4_addr_isany(ipaddr) ||
 800fb2e:	f1ba 0f00 	cmp.w	sl, #0
 800fb32:	d03d      	beq.n	800fbb0 <etharp_input+0xd8>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800fb34:	4629      	mov	r1, r5
 800fb36:	4650      	mov	r0, sl
 800fb38:	f000 fca6 	bl	8010488 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 800fb3c:	4681      	mov	r9, r0
 800fb3e:	bbb8      	cbnz	r0, 800fbb0 <etharp_input+0xd8>
      ip4_addr_ismulticast(ipaddr)) {
 800fb40:	f00a 0af0 	and.w	sl, sl, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800fb44:	f1ba 0fe0 	cmp.w	sl, #224	@ 0xe0
 800fb48:	d032      	beq.n	800fbb0 <etharp_input+0xd8>
  i = etharp_find_entry(ipaddr, flags, netif);
 800fb4a:	4659      	mov	r1, fp
 800fb4c:	462a      	mov	r2, r5
 800fb4e:	a805      	add	r0, sp, #20
 800fb50:	f7ff fdd4 	bl	800f6fc <etharp_find_entry>
  if (i < 0) {
 800fb54:	1e03      	subs	r3, r0, #0
 800fb56:	db2b      	blt.n	800fbb0 <etharp_input+0xd8>
    arp_table[i].state = ETHARP_STATE_STABLE;
 800fb58:	492b      	ldr	r1, [pc, #172]	@ (800fc08 <etharp_input+0x130>)
 800fb5a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800fb5e:	2002      	movs	r0, #2
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800fb60:	f04f 0e18 	mov.w	lr, #24
    arp_table[i].state = ETHARP_STATE_STABLE;
 800fb64:	eb01 0cc2 	add.w	ip, r1, r2, lsl #3
 800fb68:	00d2      	lsls	r2, r2, #3
 800fb6a:	f88c 0014 	strb.w	r0, [ip, #20]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800fb6e:	200c      	movs	r0, #12
  arp_table[i].netif = netif;
 800fb70:	f8cc 5008 	str.w	r5, [ip, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800fb74:	fb13 030e 	smlabb	r3, r3, lr, r0
 800fb78:	68b0      	ldr	r0, [r6, #8]
 800fb7a:	50c8      	str	r0, [r1, r3]
 800fb7c:	440b      	add	r3, r1
 800fb7e:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 800fb82:	8098      	strh	r0, [r3, #4]
  if (arp_table[i].q != NULL) {
 800fb84:	f851 a002 	ldr.w	sl, [r1, r2]
  arp_table[i].ctime = 0;
 800fb88:	f8ac 9012 	strh.w	r9, [ip, #18]
  if (arp_table[i].q != NULL) {
 800fb8c:	f1ba 0f00 	cmp.w	sl, #0
 800fb90:	d00e      	beq.n	800fbb0 <etharp_input+0xd8>
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800fb92:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    arp_table[i].q = NULL;
 800fb96:	f841 9002 	str.w	r9, [r1, r2]
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800fb9a:	4628      	mov	r0, r5
 800fb9c:	f105 0226 	add.w	r2, r5, #38	@ 0x26
 800fba0:	9300      	str	r3, [sp, #0]
 800fba2:	4651      	mov	r1, sl
 800fba4:	4643      	mov	r3, r8
 800fba6:	f001 f92f 	bl	8010e08 <ethernet_output>
    pbuf_free(p);
 800fbaa:	4650      	mov	r0, sl
 800fbac:	f7fa fde8 	bl	800a780 <pbuf_free>
  switch (hdr->opcode) {
 800fbb0:	88f3      	ldrh	r3, [r6, #6]
      if (for_us) {
 800fbb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fbb6:	d19d      	bne.n	800faf4 <etharp_input+0x1c>
 800fbb8:	2f00      	cmp	r7, #0
 800fbba:	d09b      	beq.n	800faf4 <etharp_input+0x1c>
        etharp_raw(netif,
 800fbbc:	2102      	movs	r1, #2
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800fbbe:	f105 0326 	add.w	r3, r5, #38	@ 0x26
        etharp_raw(netif,
 800fbc2:	4642      	mov	r2, r8
 800fbc4:	4628      	mov	r0, r5
 800fbc6:	9103      	str	r1, [sp, #12]
 800fbc8:	a905      	add	r1, sp, #20
 800fbca:	f8cd 8004 	str.w	r8, [sp, #4]
 800fbce:	9102      	str	r1, [sp, #8]
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800fbd0:	1d29      	adds	r1, r5, #4
        etharp_raw(netif,
 800fbd2:	9100      	str	r1, [sp, #0]
 800fbd4:	4619      	mov	r1, r3
 800fbd6:	f7ff fe43 	bl	800f860 <etharp_raw>
 800fbda:	e78b      	b.n	800faf4 <etharp_input+0x1c>
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800fbdc:	4b0b      	ldr	r3, [pc, #44]	@ (800fc0c <etharp_input+0x134>)
 800fbde:	f240 228a 	movw	r2, #650	@ 0x28a
 800fbe2:	490b      	ldr	r1, [pc, #44]	@ (800fc10 <etharp_input+0x138>)
 800fbe4:	480b      	ldr	r0, [pc, #44]	@ (800fc14 <etharp_input+0x13c>)
 800fbe6:	f001 bc57 	b.w	8011498 <iprintf>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800fbea:	429f      	cmp	r7, r3
 800fbec:	d10a      	bne.n	800fc04 <etharp_input+0x12c>
 800fbee:	2701      	movs	r7, #1
 800fbf0:	46bb      	mov	fp, r7
 800fbf2:	e798      	b.n	800fb26 <etharp_input+0x4e>
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800fbf4:	4b05      	ldr	r3, [pc, #20]	@ (800fc0c <etharp_input+0x134>)
 800fbf6:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800fbfa:	4907      	ldr	r1, [pc, #28]	@ (800fc18 <etharp_input+0x140>)
 800fbfc:	4805      	ldr	r0, [pc, #20]	@ (800fc14 <etharp_input+0x13c>)
 800fbfe:	f001 fc4b 	bl	8011498 <iprintf>
 800fc02:	e794      	b.n	800fb2e <etharp_input+0x56>
 800fc04:	2700      	movs	r7, #0
 800fc06:	e78c      	b.n	800fb22 <etharp_input+0x4a>
 800fc08:	24009d58 	.word	0x24009d58
 800fc0c:	08014b34 	.word	0x08014b34
 800fc10:	0801240c 	.word	0x0801240c
 800fc14:	0801241c 	.word	0x0801241c
 800fc18:	08014c78 	.word	0x08014c78

0800fc1c <etharp_query>:
{
 800fc1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc20:	460e      	mov	r6, r1
 800fc22:	b085      	sub	sp, #20
 800fc24:	4605      	mov	r5, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800fc26:	4601      	mov	r1, r0
 800fc28:	6830      	ldr	r0, [r6, #0]
{
 800fc2a:	4617      	mov	r7, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800fc2c:	f000 fc2c 	bl	8010488 <ip4_addr_isbroadcast_u32>
 800fc30:	2800      	cmp	r0, #0
 800fc32:	f040 80a2 	bne.w	800fd7a <etharp_query+0x15e>
      ip4_addr_ismulticast(ipaddr) ||
 800fc36:	6833      	ldr	r3, [r6, #0]
 800fc38:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
      ip4_addr_isany(ipaddr)) {
 800fc3c:	2ae0      	cmp	r2, #224	@ 0xe0
 800fc3e:	f000 809c 	beq.w	800fd7a <etharp_query+0x15e>
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	f000 8099 	beq.w	800fd7a <etharp_query+0x15e>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800fc48:	462a      	mov	r2, r5
 800fc4a:	2101      	movs	r1, #1
 800fc4c:	4630      	mov	r0, r6
 800fc4e:	f7ff fd55 	bl	800f6fc <etharp_find_entry>
  if (i_err < 0) {
 800fc52:	f1b0 0800 	subs.w	r8, r0, #0
 800fc56:	db63      	blt.n	800fd20 <etharp_query+0x104>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800fc58:	f1b8 0f7e 	cmp.w	r8, #126	@ 0x7e
 800fc5c:	dc58      	bgt.n	800fd10 <etharp_query+0xf4>
  i = (netif_addr_idx_t)i_err;
 800fc5e:	fa5f f888 	uxtb.w	r8, r8
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800fc62:	4c49      	ldr	r4, [pc, #292]	@ (800fd88 <etharp_query+0x16c>)
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800fc64:	f105 0b26 	add.w	fp, r5, #38	@ 0x26
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800fc68:	eb08 0948 	add.w	r9, r8, r8, lsl #1
 800fc6c:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 800fc70:	eb04 09c9 	add.w	r9, r4, r9, lsl #3
 800fc74:	f899 3014 	ldrb.w	r3, [r9, #20]
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d133      	bne.n	800fce4 <etharp_query+0xc8>
    arp_table[i].state = ETHARP_STATE_PENDING;
 800fc7c:	2301      	movs	r3, #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800fc7e:	9602      	str	r6, [sp, #8]
    arp_table[i].netif = netif;
 800fc80:	f8c9 5008 	str.w	r5, [r9, #8]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800fc84:	4659      	mov	r1, fp
 800fc86:	9303      	str	r3, [sp, #12]
 800fc88:	4628      	mov	r0, r5
    arp_table[i].state = ETHARP_STATE_PENDING;
 800fc8a:	f889 3014 	strb.w	r3, [r9, #20]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800fc8e:	4b3f      	ldr	r3, [pc, #252]	@ (800fd8c <etharp_query+0x170>)
 800fc90:	4a3f      	ldr	r2, [pc, #252]	@ (800fd90 <etharp_query+0x174>)
 800fc92:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800fc94:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800fc96:	9300      	str	r3, [sp, #0]
 800fc98:	465b      	mov	r3, fp
 800fc9a:	f7ff fde1 	bl	800f860 <etharp_raw>
    if (q == NULL) {
 800fc9e:	2f00      	cmp	r7, #0
 800fca0:	d033      	beq.n	800fd0a <etharp_query+0xee>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800fca2:	f899 3014 	ldrb.w	r3, [r9, #20]
 800fca6:	2b01      	cmp	r3, #1
 800fca8:	d820      	bhi.n	800fcec <etharp_query+0xd0>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800fcaa:	d12e      	bne.n	800fd0a <etharp_query+0xee>
{
 800fcac:	463d      	mov	r5, r7
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800fcae:	4e39      	ldr	r6, [pc, #228]	@ (800fd94 <etharp_query+0x178>)
 800fcb0:	f8df b0f0 	ldr.w	fp, [pc, #240]	@ 800fda4 <etharp_query+0x188>
 800fcb4:	f8df 90e8 	ldr.w	r9, [pc, #232]	@ 800fda0 <etharp_query+0x184>
 800fcb8:	e005      	b.n	800fcc6 <etharp_query+0xaa>
      if (PBUF_NEEDS_COPY(p)) {
 800fcba:	7b2b      	ldrb	r3, [r5, #12]
 800fcbc:	065b      	lsls	r3, r3, #25
 800fcbe:	d434      	bmi.n	800fd2a <etharp_query+0x10e>
      p = p->next;
 800fcc0:	682d      	ldr	r5, [r5, #0]
    while (p) {
 800fcc2:	2d00      	cmp	r5, #0
 800fcc4:	d047      	beq.n	800fd56 <etharp_query+0x13a>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800fcc6:	896a      	ldrh	r2, [r5, #10]
 800fcc8:	892b      	ldrh	r3, [r5, #8]
 800fcca:	429a      	cmp	r2, r3
 800fccc:	d1f5      	bne.n	800fcba <etharp_query+0x9e>
 800fcce:	682a      	ldr	r2, [r5, #0]
 800fcd0:	4633      	mov	r3, r6
 800fcd2:	2a00      	cmp	r2, #0
 800fcd4:	d0f1      	beq.n	800fcba <etharp_query+0x9e>
 800fcd6:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800fcda:	4659      	mov	r1, fp
 800fcdc:	4648      	mov	r0, r9
 800fcde:	f001 fbdb 	bl	8011498 <iprintf>
 800fce2:	e7ea      	b.n	800fcba <etharp_query+0x9e>
  if (is_new_entry || (q == NULL)) {
 800fce4:	2f00      	cmp	r7, #0
 800fce6:	d03a      	beq.n	800fd5e <etharp_query+0x142>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800fce8:	2b01      	cmp	r3, #1
 800fcea:	d0df      	beq.n	800fcac <etharp_query+0x90>
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800fcec:	2318      	movs	r3, #24
 800fcee:	465a      	mov	r2, fp
 800fcf0:	4639      	mov	r1, r7
 800fcf2:	4628      	mov	r0, r5
 800fcf4:	fb03 4308 	mla	r3, r3, r8, r4
 800fcf8:	f44f 6400 	mov.w	r4, #2048	@ 0x800
 800fcfc:	9400      	str	r4, [sp, #0]
 800fcfe:	330c      	adds	r3, #12
    ETHARP_SET_ADDRHINT(netif, i);
 800fd00:	4c25      	ldr	r4, [pc, #148]	@ (800fd98 <etharp_query+0x17c>)
 800fd02:	f884 8000 	strb.w	r8, [r4]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800fd06:	f001 f87f 	bl	8010e08 <ethernet_output>
}
 800fd0a:	b005      	add	sp, #20
 800fd0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800fd10:	4b20      	ldr	r3, [pc, #128]	@ (800fd94 <etharp_query+0x178>)
 800fd12:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800fd16:	4921      	ldr	r1, [pc, #132]	@ (800fd9c <etharp_query+0x180>)
 800fd18:	4821      	ldr	r0, [pc, #132]	@ (800fda0 <etharp_query+0x184>)
 800fd1a:	f001 fbbd 	bl	8011498 <iprintf>
 800fd1e:	e79e      	b.n	800fc5e <etharp_query+0x42>
    return (err_t)i_err;
 800fd20:	fa4f f088 	sxtb.w	r0, r8
}
 800fd24:	b005      	add	sp, #20
 800fd26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800fd2a:	463a      	mov	r2, r7
 800fd2c:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800fd30:	200e      	movs	r0, #14
 800fd32:	f7fb f851 	bl	800add8 <pbuf_clone>
 800fd36:	4607      	mov	r7, r0
    if (p != NULL) {
 800fd38:	b317      	cbz	r7, 800fd80 <etharp_query+0x164>
      if (arp_table[i].q != NULL) {
 800fd3a:	eb0a 0308 	add.w	r3, sl, r8
 800fd3e:	f854 0033 	ldr.w	r0, [r4, r3, lsl #3]
 800fd42:	b108      	cbz	r0, 800fd48 <etharp_query+0x12c>
        pbuf_free(arp_table[i].q);
 800fd44:	f7fa fd1c 	bl	800a780 <pbuf_free>
      arp_table[i].q = p;
 800fd48:	44d0      	add	r8, sl
      result = ERR_OK;
 800fd4a:	2000      	movs	r0, #0
      arp_table[i].q = p;
 800fd4c:	f844 7038 	str.w	r7, [r4, r8, lsl #3]
}
 800fd50:	b005      	add	sp, #20
 800fd52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pbuf_ref(p);
 800fd56:	4638      	mov	r0, r7
 800fd58:	f7fa feaa 	bl	800aab0 <pbuf_ref>
 800fd5c:	e7ec      	b.n	800fd38 <etharp_query+0x11c>
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800fd5e:	1d2a      	adds	r2, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800fd60:	2301      	movs	r3, #1
 800fd62:	4c0a      	ldr	r4, [pc, #40]	@ (800fd8c <etharp_query+0x170>)
 800fd64:	4659      	mov	r1, fp
 800fd66:	4628      	mov	r0, r5
 800fd68:	e9cd 6302 	strd	r6, r3, [sp, #8]
 800fd6c:	e9cd 2400 	strd	r2, r4, [sp]
 800fd70:	465b      	mov	r3, fp
 800fd72:	4a07      	ldr	r2, [pc, #28]	@ (800fd90 <etharp_query+0x174>)
 800fd74:	f7ff fd74 	bl	800f860 <etharp_raw>
    if (q == NULL) {
 800fd78:	e7c7      	b.n	800fd0a <etharp_query+0xee>
    return ERR_ARG;
 800fd7a:	f06f 000f 	mvn.w	r0, #15
 800fd7e:	e7c4      	b.n	800fd0a <etharp_query+0xee>
  err_t result = ERR_MEM;
 800fd80:	f04f 30ff 	mov.w	r0, #4294967295
 800fd84:	e7c1      	b.n	800fd0a <etharp_query+0xee>
 800fd86:	bf00      	nop
 800fd88:	24009d58 	.word	0x24009d58
 800fd8c:	08015008 	.word	0x08015008
 800fd90:	08015010 	.word	0x08015010
 800fd94:	08014b34 	.word	0x08014b34
 800fd98:	24009d54 	.word	0x24009d54
 800fd9c:	08014c9c 	.word	0x08014c9c
 800fda0:	0801241c 	.word	0x0801241c
 800fda4:	08014cac 	.word	0x08014cac

0800fda8 <etharp_output>:
{
 800fda8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fdaa:	460e      	mov	r6, r1
 800fdac:	b085      	sub	sp, #20
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800fdae:	4604      	mov	r4, r0
{
 800fdb0:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800fdb2:	2800      	cmp	r0, #0
 800fdb4:	f000 8081 	beq.w	800feba <etharp_output+0x112>
  LWIP_ASSERT("q != NULL", q != NULL);
 800fdb8:	2e00      	cmp	r6, #0
 800fdba:	d06d      	beq.n	800fe98 <etharp_output+0xf0>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800fdbc:	2d00      	cmp	r5, #0
 800fdbe:	d074      	beq.n	800feaa <etharp_output+0x102>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800fdc0:	4621      	mov	r1, r4
 800fdc2:	6828      	ldr	r0, [r5, #0]
 800fdc4:	f000 fb60 	bl	8010488 <ip4_addr_isbroadcast_u32>
 800fdc8:	2800      	cmp	r0, #0
 800fdca:	d163      	bne.n	800fe94 <etharp_output+0xec>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800fdcc:	682b      	ldr	r3, [r5, #0]
 800fdce:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800fdd2:	2ae0      	cmp	r2, #224	@ 0xe0
 800fdd4:	d039      	beq.n	800fe4a <etharp_output+0xa2>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800fdd6:	6862      	ldr	r2, [r4, #4]
 800fdd8:	68a1      	ldr	r1, [r4, #8]
 800fdda:	405a      	eors	r2, r3
 800fddc:	420a      	tst	r2, r1
 800fdde:	d009      	beq.n	800fdf4 <etharp_output+0x4c>
        !ip4_addr_islinklocal(ipaddr)) {
 800fde0:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800fde2:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800fde6:	4293      	cmp	r3, r2
 800fde8:	d004      	beq.n	800fdf4 <etharp_output+0x4c>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800fdea:	68e3      	ldr	r3, [r4, #12]
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d076      	beq.n	800fede <etharp_output+0x136>
            dst_addr = netif_ip4_gw(netif);
 800fdf0:	f104 050c 	add.w	r5, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800fdf4:	4f3b      	ldr	r7, [pc, #236]	@ (800fee4 <etharp_output+0x13c>)
 800fdf6:	4b3c      	ldr	r3, [pc, #240]	@ (800fee8 <etharp_output+0x140>)
 800fdf8:	783a      	ldrb	r2, [r7, #0]
 800fdfa:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800fdfe:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800fe02:	7d19      	ldrb	r1, [r3, #20]
 800fe04:	2901      	cmp	r1, #1
 800fe06:	d902      	bls.n	800fe0e <etharp_output+0x66>
 800fe08:	6899      	ldr	r1, [r3, #8]
 800fe0a:	42a1      	cmp	r1, r4
 800fe0c:	d060      	beq.n	800fed0 <etharp_output+0x128>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800fe0e:	4b36      	ldr	r3, [pc, #216]	@ (800fee8 <etharp_output+0x140>)
{
 800fe10:	f04f 0c00 	mov.w	ip, #0
 800fe14:	e005      	b.n	800fe22 <etharp_output+0x7a>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800fe16:	f10c 0c01 	add.w	ip, ip, #1
 800fe1a:	3318      	adds	r3, #24
 800fe1c:	f1bc 0f0a 	cmp.w	ip, #10
 800fe20:	d030      	beq.n	800fe84 <etharp_output+0xdc>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800fe22:	7d18      	ldrb	r0, [r3, #20]
 800fe24:	2801      	cmp	r0, #1
 800fe26:	d9f6      	bls.n	800fe16 <etharp_output+0x6e>
 800fe28:	689a      	ldr	r2, [r3, #8]
 800fe2a:	42a2      	cmp	r2, r4
 800fe2c:	d1f3      	bne.n	800fe16 <etharp_output+0x6e>
          (arp_table[i].netif == netif) &&
 800fe2e:	685a      	ldr	r2, [r3, #4]
 800fe30:	6829      	ldr	r1, [r5, #0]
 800fe32:	4291      	cmp	r1, r2
 800fe34:	d1ef      	bne.n	800fe16 <etharp_output+0x6e>
 800fe36:	fa5f f28c 	uxtb.w	r2, ip
        return etharp_output_to_arp_index(netif, q, i);
 800fe3a:	4631      	mov	r1, r6
 800fe3c:	4620      	mov	r0, r4
        ETHARP_SET_ADDRHINT(netif, i);
 800fe3e:	703a      	strb	r2, [r7, #0]
}
 800fe40:	b005      	add	sp, #20
 800fe42:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        return etharp_output_to_arp_index(netif, q, i);
 800fe46:	f7ff bd7b 	b.w	800f940 <etharp_output_to_arp_index>
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800fe4a:	786b      	ldrb	r3, [r5, #1]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800fe4c:	2201      	movs	r2, #1
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800fe4e:	215e      	movs	r1, #94	@ 0x5e
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800fe50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800fe54:	f8ad 2008 	strh.w	r2, [sp, #8]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800fe58:	78ea      	ldrb	r2, [r5, #3]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800fe5a:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800fe5e:	78ab      	ldrb	r3, [r5, #2]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800fe60:	f88d 100a 	strb.w	r1, [sp, #10]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800fe64:	f88d 300c 	strb.w	r3, [sp, #12]
    dest = &mcastaddr;
 800fe68:	ab02      	add	r3, sp, #8
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800fe6a:	f88d 200d 	strb.w	r2, [sp, #13]
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800fe6e:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 800fe72:	f104 0226 	add.w	r2, r4, #38	@ 0x26
 800fe76:	4631      	mov	r1, r6
 800fe78:	4620      	mov	r0, r4
 800fe7a:	9500      	str	r5, [sp, #0]
 800fe7c:	f000 ffc4 	bl	8010e08 <ethernet_output>
}
 800fe80:	b005      	add	sp, #20
 800fe82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return etharp_query(netif, dst_addr, q);
 800fe84:	4632      	mov	r2, r6
 800fe86:	4629      	mov	r1, r5
 800fe88:	4620      	mov	r0, r4
}
 800fe8a:	b005      	add	sp, #20
 800fe8c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    return etharp_query(netif, dst_addr, q);
 800fe90:	f7ff bec4 	b.w	800fc1c <etharp_query>
    dest = (const struct eth_addr *)&ethbroadcast;
 800fe94:	4b15      	ldr	r3, [pc, #84]	@ (800feec <etharp_output+0x144>)
 800fe96:	e7ea      	b.n	800fe6e <etharp_output+0xc6>
  LWIP_ASSERT("q != NULL", q != NULL);
 800fe98:	4b15      	ldr	r3, [pc, #84]	@ (800fef0 <etharp_output+0x148>)
 800fe9a:	f240 321f 	movw	r2, #799	@ 0x31f
 800fe9e:	4915      	ldr	r1, [pc, #84]	@ (800fef4 <etharp_output+0x14c>)
 800fea0:	4815      	ldr	r0, [pc, #84]	@ (800fef8 <etharp_output+0x150>)
 800fea2:	f001 faf9 	bl	8011498 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800fea6:	2d00      	cmp	r5, #0
 800fea8:	d18a      	bne.n	800fdc0 <etharp_output+0x18>
 800feaa:	4b11      	ldr	r3, [pc, #68]	@ (800fef0 <etharp_output+0x148>)
 800feac:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800feb0:	4912      	ldr	r1, [pc, #72]	@ (800fefc <etharp_output+0x154>)
 800feb2:	4811      	ldr	r0, [pc, #68]	@ (800fef8 <etharp_output+0x150>)
 800feb4:	f001 faf0 	bl	8011498 <iprintf>
 800feb8:	e782      	b.n	800fdc0 <etharp_output+0x18>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800feba:	4b0d      	ldr	r3, [pc, #52]	@ (800fef0 <etharp_output+0x148>)
 800febc:	f240 321e 	movw	r2, #798	@ 0x31e
 800fec0:	490f      	ldr	r1, [pc, #60]	@ (800ff00 <etharp_output+0x158>)
 800fec2:	480d      	ldr	r0, [pc, #52]	@ (800fef8 <etharp_output+0x150>)
 800fec4:	f001 fae8 	bl	8011498 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800fec8:	2e00      	cmp	r6, #0
 800feca:	f47f af77 	bne.w	800fdbc <etharp_output+0x14>
 800fece:	e7e3      	b.n	800fe98 <etharp_output+0xf0>
            (arp_table[etharp_cached_entry].netif == netif) &&
 800fed0:	685b      	ldr	r3, [r3, #4]
 800fed2:	6829      	ldr	r1, [r5, #0]
 800fed4:	4299      	cmp	r1, r3
 800fed6:	d19a      	bne.n	800fe0e <etharp_output+0x66>
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800fed8:	4631      	mov	r1, r6
 800feda:	4620      	mov	r0, r4
 800fedc:	e7b0      	b.n	800fe40 <etharp_output+0x98>
            return ERR_RTE;
 800fede:	f06f 0003 	mvn.w	r0, #3
 800fee2:	e7cd      	b.n	800fe80 <etharp_output+0xd8>
 800fee4:	24009d54 	.word	0x24009d54
 800fee8:	24009d58 	.word	0x24009d58
 800feec:	08015010 	.word	0x08015010
 800fef0:	08014b34 	.word	0x08014b34
 800fef4:	08014cc8 	.word	0x08014cc8
 800fef8:	0801241c 	.word	0x0801241c
 800fefc:	08014c58 	.word	0x08014c58
 800ff00:	0801240c 	.word	0x0801240c

0800ff04 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800ff04:	b510      	push	{r4, lr}
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ff06:	2301      	movs	r3, #1
{
 800ff08:	b084      	sub	sp, #16
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ff0a:	4c07      	ldr	r4, [pc, #28]	@ (800ff28 <etharp_request+0x24>)
 800ff0c:	4a07      	ldr	r2, [pc, #28]	@ (800ff2c <etharp_request+0x28>)
 800ff0e:	9401      	str	r4, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800ff10:	1d04      	adds	r4, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ff12:	e9cd 1302 	strd	r1, r3, [sp, #8]
 800ff16:	f100 0326 	add.w	r3, r0, #38	@ 0x26
 800ff1a:	9400      	str	r4, [sp, #0]
 800ff1c:	4619      	mov	r1, r3
 800ff1e:	f7ff fc9f 	bl	800f860 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 800ff22:	b004      	add	sp, #16
 800ff24:	bd10      	pop	{r4, pc}
 800ff26:	bf00      	nop
 800ff28:	08015008 	.word	0x08015008
 800ff2c:	08015010 	.word	0x08015010

0800ff30 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800ff30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff32:	460f      	mov	r7, r1
 800ff34:	b087      	sub	sp, #28
 800ff36:	4616      	mov	r6, r2
 800ff38:	4604      	mov	r4, r0

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800ff3a:	2124      	movs	r1, #36	@ 0x24
 800ff3c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800ff40:	2022      	movs	r0, #34	@ 0x22
 800ff42:	f7fa fc8d 	bl	800a860 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 800ff46:	b390      	cbz	r0, 800ffae <icmp_send_response+0x7e>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800ff48:	8943      	ldrh	r3, [r0, #10]
 800ff4a:	4605      	mov	r5, r0
 800ff4c:	2b23      	cmp	r3, #35	@ 0x23
 800ff4e:	d930      	bls.n	800ffb2 <icmp_send_response+0x82>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800ff50:	6863      	ldr	r3, [r4, #4]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800ff52:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
 800ff54:	7027      	strb	r7, [r4, #0]
  icmphdr->code = code;
  icmphdr->id = 0;
 800ff56:	2700      	movs	r7, #0
  icmphdr->code = code;
 800ff58:	7066      	strb	r6, [r4, #1]
  icmphdr->id = 0;
 800ff5a:	6067      	str	r7, [r4, #4]
  icmphdr->seqno = 0;

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800ff5c:	6818      	ldr	r0, [r3, #0]
 800ff5e:	6859      	ldr	r1, [r3, #4]
 800ff60:	689a      	ldr	r2, [r3, #8]
 800ff62:	68de      	ldr	r6, [r3, #12]
 800ff64:	60a0      	str	r0, [r4, #8]
 800ff66:	6166      	str	r6, [r4, #20]
 800ff68:	60e1      	str	r1, [r4, #12]
 800ff6a:	6122      	str	r2, [r4, #16]
 800ff6c:	6918      	ldr	r0, [r3, #16]
 800ff6e:	6959      	ldr	r1, [r3, #20]
 800ff70:	699a      	ldr	r2, [r3, #24]
 800ff72:	61a0      	str	r0, [r4, #24]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800ff74:	a805      	add	r0, sp, #20
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800ff76:	61e1      	str	r1, [r4, #28]
 800ff78:	6222      	str	r2, [r4, #32]
  ip4_addr_copy(iphdr_src, iphdr->src);
 800ff7a:	68db      	ldr	r3, [r3, #12]
 800ff7c:	9305      	str	r3, [sp, #20]
  netif = ip4_route(&iphdr_src);
 800ff7e:	f000 f8d7 	bl	8010130 <ip4_route>
#endif
  if (netif != NULL) {
 800ff82:	4606      	mov	r6, r0
 800ff84:	b180      	cbz	r0, 800ffa8 <icmp_send_response+0x78>
    /* calculate checksum */
    icmphdr->chksum = 0;
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800ff86:	8969      	ldrh	r1, [r5, #10]
 800ff88:	4620      	mov	r0, r4
    icmphdr->chksum = 0;
 800ff8a:	70a7      	strb	r7, [r4, #2]
 800ff8c:	70e7      	strb	r7, [r4, #3]
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800ff8e:	f7f9 fd81 	bl	8009a94 <inet_chksum>
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800ff92:	2301      	movs	r3, #1
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800ff94:	8060      	strh	r0, [r4, #2]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800ff96:	aa05      	add	r2, sp, #20
 800ff98:	4639      	mov	r1, r7
 800ff9a:	4628      	mov	r0, r5
 800ff9c:	9700      	str	r7, [sp, #0]
 800ff9e:	e9cd 3601 	strd	r3, r6, [sp, #4]
 800ffa2:	23ff      	movs	r3, #255	@ 0xff
 800ffa4:	f000 fa5e 	bl	8010464 <ip4_output_if>
  }
  pbuf_free(q);
 800ffa8:	4628      	mov	r0, r5
 800ffaa:	f7fa fbe9 	bl	800a780 <pbuf_free>
}
 800ffae:	b007      	add	sp, #28
 800ffb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800ffb2:	4b04      	ldr	r3, [pc, #16]	@ (800ffc4 <icmp_send_response+0x94>)
 800ffb4:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800ffb8:	4903      	ldr	r1, [pc, #12]	@ (800ffc8 <icmp_send_response+0x98>)
 800ffba:	4804      	ldr	r0, [pc, #16]	@ (800ffcc <icmp_send_response+0x9c>)
 800ffbc:	f001 fa6c 	bl	8011498 <iprintf>
 800ffc0:	e7c6      	b.n	800ff50 <icmp_send_response+0x20>
 800ffc2:	bf00      	nop
 800ffc4:	08014cd4 	.word	0x08014cd4
 800ffc8:	08014d0c 	.word	0x08014d0c
 800ffcc:	0801241c 	.word	0x0801241c

0800ffd0 <icmp_input>:
{
 800ffd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 800ffd4:	4f4c      	ldr	r7, [pc, #304]	@ (8010108 <icmp_input+0x138>)
{
 800ffd6:	b085      	sub	sp, #20
 800ffd8:	4605      	mov	r5, r0
  iphdr_in = ip4_current_header();
 800ffda:	f8d7 8008 	ldr.w	r8, [r7, #8]
  hlen = IPH_HL_BYTES(iphdr_in);
 800ffde:	f898 4000 	ldrb.w	r4, [r8]
 800ffe2:	f004 040f 	and.w	r4, r4, #15
 800ffe6:	00a4      	lsls	r4, r4, #2
  if (hlen < IP_HLEN) {
 800ffe8:	2c13      	cmp	r4, #19
 800ffea:	d913      	bls.n	8010014 <icmp_input+0x44>
  if (p->len < sizeof(u16_t) * 2) {
 800ffec:	8943      	ldrh	r3, [r0, #10]
 800ffee:	2b03      	cmp	r3, #3
 800fff0:	d910      	bls.n	8010014 <icmp_input+0x44>
  type = *((u8_t *)p->payload);
 800fff2:	6843      	ldr	r3, [r0, #4]
  switch (type) {
 800fff4:	781b      	ldrb	r3, [r3, #0]
 800fff6:	2b08      	cmp	r3, #8
 800fff8:	d10c      	bne.n	8010014 <icmp_input+0x44>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fffa:	6978      	ldr	r0, [r7, #20]
 800fffc:	f000 03f0 	and.w	r3, r0, #240	@ 0xf0
 8010000:	2be0      	cmp	r3, #224	@ 0xe0
 8010002:	d007      	beq.n	8010014 <icmp_input+0x44>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8010004:	460e      	mov	r6, r1
 8010006:	6839      	ldr	r1, [r7, #0]
 8010008:	f000 fa3e 	bl	8010488 <ip4_addr_isbroadcast_u32>
 801000c:	b910      	cbnz	r0, 8010014 <icmp_input+0x44>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801000e:	892b      	ldrh	r3, [r5, #8]
 8010010:	2b07      	cmp	r3, #7
 8010012:	d805      	bhi.n	8010020 <icmp_input+0x50>
  pbuf_free(p);
 8010014:	4628      	mov	r0, r5
}
 8010016:	b005      	add	sp, #20
 8010018:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 801001c:	f7fa bbb0 	b.w	800a780 <pbuf_free>
        if (inet_chksum_pbuf(p) != 0) {
 8010020:	4628      	mov	r0, r5
 8010022:	f7f9 fd3d 	bl	8009aa0 <inet_chksum_pbuf>
 8010026:	2800      	cmp	r0, #0
 8010028:	d1f4      	bne.n	8010014 <icmp_input+0x44>
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801002a:	f104 090e 	add.w	r9, r4, #14
 801002e:	4628      	mov	r0, r5
 8010030:	4649      	mov	r1, r9
 8010032:	f7fa fb13 	bl	800a65c <pbuf_add_header>
 8010036:	2800      	cmp	r0, #0
 8010038:	d04b      	beq.n	80100d2 <icmp_input+0x102>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801003a:	892b      	ldrh	r3, [r5, #8]
 801003c:	18e1      	adds	r1, r4, r3
 801003e:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
 8010040:	428b      	cmp	r3, r1
 8010042:	d8e7      	bhi.n	8010014 <icmp_input+0x44>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8010044:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010048:	200e      	movs	r0, #14
 801004a:	f7fa fc09 	bl	800a860 <pbuf_alloc>
        if (r == NULL) {
 801004e:	4681      	mov	r9, r0
 8010050:	2800      	cmp	r0, #0
 8010052:	d0df      	beq.n	8010014 <icmp_input+0x44>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8010054:	8942      	ldrh	r2, [r0, #10]
 8010056:	f104 0308 	add.w	r3, r4, #8
 801005a:	429a      	cmp	r2, r3
 801005c:	d346      	bcc.n	80100ec <icmp_input+0x11c>
        MEMCPY(r->payload, iphdr_in, hlen);
 801005e:	4641      	mov	r1, r8
 8010060:	4622      	mov	r2, r4
 8010062:	6840      	ldr	r0, [r0, #4]
 8010064:	f001 fc4b 	bl	80118fe <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 8010068:	4621      	mov	r1, r4
 801006a:	4648      	mov	r0, r9
 801006c:	f7fa fb26 	bl	800a6bc <pbuf_remove_header>
 8010070:	2800      	cmp	r0, #0
 8010072:	d13f      	bne.n	80100f4 <icmp_input+0x124>
        if (pbuf_copy(r, p) != ERR_OK) {
 8010074:	4629      	mov	r1, r5
 8010076:	4648      	mov	r0, r9
 8010078:	f7fa fd9a 	bl	800abb0 <pbuf_copy>
 801007c:	2800      	cmp	r0, #0
 801007e:	d135      	bne.n	80100ec <icmp_input+0x11c>
        pbuf_free(p);
 8010080:	4628      	mov	r0, r5
 8010082:	464d      	mov	r5, r9
 8010084:	f7fa fb7c 	bl	800a780 <pbuf_free>
      if (pbuf_add_header(p, hlen)) {
 8010088:	4621      	mov	r1, r4
 801008a:	4628      	mov	r0, r5
      iecho = (struct icmp_echo_hdr *)p->payload;
 801008c:	686c      	ldr	r4, [r5, #4]
      if (pbuf_add_header(p, hlen)) {
 801008e:	f7fa fae5 	bl	800a65c <pbuf_add_header>
 8010092:	2800      	cmp	r0, #0
 8010094:	d1be      	bne.n	8010014 <icmp_input+0x44>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8010096:	6869      	ldr	r1, [r5, #4]
        ip4_addr_copy(iphdr->src, *src);
 8010098:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801009c:	610a      	str	r2, [r1, #16]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 801009e:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
        ip4_addr_copy(iphdr->src, *src);
 80100a2:	60cb      	str	r3, [r1, #12]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 80100a4:	8863      	ldrh	r3, [r4, #2]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80100a6:	7020      	strb	r0, [r4, #0]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80100a8:	4628      	mov	r0, r5
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 80100aa:	4293      	cmp	r3, r2
        IPH_CHKSUM_SET(iphdr, 0);
 80100ac:	f04f 0200 	mov.w	r2, #0
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 80100b0:	bf8c      	ite	hi
 80100b2:	3309      	addhi	r3, #9
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 80100b4:	3308      	addls	r3, #8
 80100b6:	b29b      	uxth	r3, r3
 80100b8:	8063      	strh	r3, [r4, #2]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80100ba:	23ff      	movs	r3, #255	@ 0xff
        IPH_CHKSUM_SET(iphdr, 0);
 80100bc:	728a      	strb	r2, [r1, #10]
 80100be:	72ca      	strb	r2, [r1, #11]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80100c0:	720b      	strb	r3, [r1, #8]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80100c2:	2101      	movs	r1, #1
 80100c4:	9200      	str	r2, [sp, #0]
 80100c6:	e9cd 1601 	strd	r1, r6, [sp, #4]
 80100ca:	4910      	ldr	r1, [pc, #64]	@ (801010c <icmp_input+0x13c>)
 80100cc:	f000 f9ca 	bl	8010464 <ip4_output_if>
  pbuf_free(p);
 80100d0:	e7a0      	b.n	8010014 <icmp_input+0x44>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80100d2:	4649      	mov	r1, r9
 80100d4:	4628      	mov	r0, r5
 80100d6:	f7fa faf1 	bl	800a6bc <pbuf_remove_header>
 80100da:	2800      	cmp	r0, #0
 80100dc:	d0d4      	beq.n	8010088 <icmp_input+0xb8>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80100de:	4b0c      	ldr	r3, [pc, #48]	@ (8010110 <icmp_input+0x140>)
 80100e0:	22c7      	movs	r2, #199	@ 0xc7
 80100e2:	490c      	ldr	r1, [pc, #48]	@ (8010114 <icmp_input+0x144>)
 80100e4:	480c      	ldr	r0, [pc, #48]	@ (8010118 <icmp_input+0x148>)
 80100e6:	f001 f9d7 	bl	8011498 <iprintf>
          goto icmperr;
 80100ea:	e793      	b.n	8010014 <icmp_input+0x44>
          pbuf_free(r);
 80100ec:	4648      	mov	r0, r9
 80100ee:	f7fa fb47 	bl	800a780 <pbuf_free>
          goto icmperr;
 80100f2:	e78f      	b.n	8010014 <icmp_input+0x44>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80100f4:	4b06      	ldr	r3, [pc, #24]	@ (8010110 <icmp_input+0x140>)
 80100f6:	22b6      	movs	r2, #182	@ 0xb6
 80100f8:	4908      	ldr	r1, [pc, #32]	@ (801011c <icmp_input+0x14c>)
 80100fa:	4807      	ldr	r0, [pc, #28]	@ (8010118 <icmp_input+0x148>)
 80100fc:	f001 f9cc 	bl	8011498 <iprintf>
          pbuf_free(r);
 8010100:	4648      	mov	r0, r9
 8010102:	f7fa fb3d 	bl	800a780 <pbuf_free>
          goto icmperr;
 8010106:	e785      	b.n	8010014 <icmp_input+0x44>
 8010108:	24006bf8 	.word	0x24006bf8
 801010c:	24006c0c 	.word	0x24006c0c
 8010110:	08014cd4 	.word	0x08014cd4
 8010114:	08014d70 	.word	0x08014d70
 8010118:	0801241c 	.word	0x0801241c
 801011c:	08014d38 	.word	0x08014d38

08010120 <icmp_dest_unreach>:
{
 8010120:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 8010122:	2103      	movs	r1, #3
 8010124:	f7ff bf04 	b.w	800ff30 <icmp_send_response>

08010128 <icmp_time_exceeded>:
{
 8010128:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 801012a:	210b      	movs	r1, #11
 801012c:	f7ff bf00 	b.w	800ff30 <icmp_send_response>

08010130 <ip4_route>:

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8010130:	4b19      	ldr	r3, [pc, #100]	@ (8010198 <ip4_route+0x68>)
{
 8010132:	b430      	push	{r4, r5}
  NETIF_FOREACH(netif) {
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	b1ab      	cbz	r3, 8010164 <ip4_route+0x34>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010138:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 801013c:	07d4      	lsls	r4, r2, #31
 801013e:	d5f9      	bpl.n	8010134 <ip4_route+0x4>
 8010140:	0751      	lsls	r1, r2, #29
 8010142:	d5f7      	bpl.n	8010134 <ip4_route+0x4>
 8010144:	6859      	ldr	r1, [r3, #4]
 8010146:	2900      	cmp	r1, #0
 8010148:	d0f4      	beq.n	8010134 <ip4_route+0x4>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801014a:	6804      	ldr	r4, [r0, #0]
 801014c:	689d      	ldr	r5, [r3, #8]
 801014e:	4061      	eors	r1, r4
 8010150:	4229      	tst	r1, r5
 8010152:	d004      	beq.n	801015e <ip4_route+0x2e>
        /* return netif on which to forward IP packet */
        return netif;
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8010154:	0792      	lsls	r2, r2, #30
 8010156:	d4ed      	bmi.n	8010134 <ip4_route+0x4>
 8010158:	68da      	ldr	r2, [r3, #12]
 801015a:	4294      	cmp	r4, r2
 801015c:	d1ea      	bne.n	8010134 <ip4_route+0x4>
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
  }

  return netif_default;
}
 801015e:	4618      	mov	r0, r3
 8010160:	bc30      	pop	{r4, r5}
 8010162:	4770      	bx	lr
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010164:	4b0d      	ldr	r3, [pc, #52]	@ (801019c <ip4_route+0x6c>)
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	2b00      	cmp	r3, #0
 801016a:	d0f8      	beq.n	801015e <ip4_route+0x2e>
 801016c:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 8010170:	f002 0205 	and.w	r2, r2, #5
 8010174:	2a05      	cmp	r2, #5
 8010176:	d108      	bne.n	801018a <ip4_route+0x5a>
 8010178:	685a      	ldr	r2, [r3, #4]
 801017a:	b152      	cbz	r2, 8010192 <ip4_route+0x62>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801017c:	7802      	ldrb	r2, [r0, #0]
    return NULL;
 801017e:	2a7f      	cmp	r2, #127	@ 0x7f
 8010180:	bf08      	it	eq
 8010182:	2300      	moveq	r3, #0
}
 8010184:	bc30      	pop	{r4, r5}
 8010186:	4618      	mov	r0, r3
 8010188:	4770      	bx	lr
    return NULL;
 801018a:	2300      	movs	r3, #0
}
 801018c:	bc30      	pop	{r4, r5}
 801018e:	4618      	mov	r0, r3
 8010190:	4770      	bx	lr
    return NULL;
 8010192:	4613      	mov	r3, r2
 8010194:	e7e3      	b.n	801015e <ip4_route+0x2e>
 8010196:	bf00      	nop
 8010198:	24009cf0 	.word	0x24009cf0
 801019c:	24009cec 	.word	0x24009cec

080101a0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80101a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80101a4:	6847      	ldr	r7, [r0, #4]
{
 80101a6:	4604      	mov	r4, r0
  if (IPH_V(iphdr) != 4) {
 80101a8:	783b      	ldrb	r3, [r7, #0]
 80101aa:	091a      	lsrs	r2, r3, #4
 80101ac:	2a04      	cmp	r2, #4
 80101ae:	d16e      	bne.n	801028e <ip4_input+0xee>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80101b0:	f003 030f 	and.w	r3, r3, #15
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80101b4:	8878      	ldrh	r0, [r7, #2]
 80101b6:	460e      	mov	r6, r1
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80101b8:	009d      	lsls	r5, r3, #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80101ba:	f7f9 fc2b 	bl	8009a14 <lwip_htons>

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80101be:	8923      	ldrh	r3, [r4, #8]
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80101c0:	4680      	mov	r8, r0
  if (iphdr_len < p->tot_len) {
 80101c2:	4283      	cmp	r3, r0
 80101c4:	d869      	bhi.n	801029a <ip4_input+0xfa>
    pbuf_realloc(p, iphdr_len);
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80101c6:	8963      	ldrh	r3, [r4, #10]
 80101c8:	42ab      	cmp	r3, r5
 80101ca:	d360      	bcc.n	801028e <ip4_input+0xee>
 80101cc:	8923      	ldrh	r3, [r4, #8]
 80101ce:	4543      	cmp	r3, r8
 80101d0:	d35d      	bcc.n	801028e <ip4_input+0xee>
 80101d2:	2d13      	cmp	r5, #19
 80101d4:	d95b      	bls.n	801028e <ip4_input+0xee>
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80101d6:	693a      	ldr	r2, [r7, #16]
 80101d8:	68f8      	ldr	r0, [r7, #12]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80101da:	f002 01f0 	and.w	r1, r2, #240	@ 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80101de:	f8df 917c 	ldr.w	r9, [pc, #380]	@ 801035c <ip4_input+0x1bc>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80101e2:	f896 802d 	ldrb.w	r8, [r6, #45]	@ 0x2d
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80101e6:	29e0      	cmp	r1, #224	@ 0xe0
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80101e8:	f008 0301 	and.w	r3, r8, #1
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80101ec:	e9c9 0204 	strd	r0, r2, [r9, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80101f0:	d158      	bne.n	80102a4 <ip4_input+0x104>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	f040 8083 	bne.w	80102fe <ip4_input+0x15e>
      netif = inp;
    } else {
      netif = NULL;
 80101f8:	f04f 0800 	mov.w	r8, #0
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80101fc:	4631      	mov	r1, r6
 80101fe:	f000 f943 	bl	8010488 <ip4_addr_isbroadcast_u32>
 8010202:	2800      	cmp	r0, #0
 8010204:	d143      	bne.n	801028e <ip4_input+0xee>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8010206:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801020a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801020e:	2be0      	cmp	r3, #224	@ 0xe0
 8010210:	d03d      	beq.n	801028e <ip4_input+0xee>
      return ERR_OK;
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8010212:	f1b8 0f00 	cmp.w	r8, #0
 8010216:	d03a      	beq.n	801028e <ip4_input+0xee>
    }
    pbuf_free(p);
    return ERR_OK;
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8010218:	88fb      	ldrh	r3, [r7, #6]
 801021a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 801021e:	2b00      	cmp	r3, #0
 8010220:	d165      	bne.n	80102ee <ip4_input+0x14e>
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
  ip_data.current_input_netif = inp;
  ip_data.current_ip4_header = iphdr;
 8010222:	f8c9 7008 	str.w	r7, [r9, #8]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8010226:	4629      	mov	r1, r5
 8010228:	4620      	mov	r0, r4
  ip_data.current_input_netif = inp;
 801022a:	e9c9 8600 	strd	r8, r6, [r9]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801022e:	783b      	ldrb	r3, [r7, #0]
 8010230:	f003 030f 	and.w	r3, r3, #15
 8010234:	009b      	lsls	r3, r3, #2
 8010236:	f8a9 300c 	strh.w	r3, [r9, #12]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801023a:	f7fa fa3f 	bl	800a6bc <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801023e:	7a7b      	ldrb	r3, [r7, #9]
 8010240:	2b06      	cmp	r3, #6
 8010242:	d07a      	beq.n	801033a <ip4_input+0x19a>
 8010244:	2b11      	cmp	r3, #17
 8010246:	d073      	beq.n	8010330 <ip4_input+0x190>
 8010248:	2b01      	cmp	r3, #1
 801024a:	d06c      	beq.n	8010326 <ip4_input+0x186>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801024c:	4641      	mov	r1, r8
 801024e:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8010252:	f000 f919 	bl	8010488 <ip4_addr_isbroadcast_u32>
 8010256:	b968      	cbnz	r0, 8010274 <ip4_input+0xd4>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010258:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801025c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8010260:	2be0      	cmp	r3, #224	@ 0xe0
 8010262:	d007      	beq.n	8010274 <ip4_input+0xd4>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8010264:	4629      	mov	r1, r5
 8010266:	4620      	mov	r0, r4
 8010268:	f7fa fa56 	bl	800a718 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801026c:	2102      	movs	r1, #2
 801026e:	4620      	mov	r0, r4
 8010270:	f7ff ff56 	bl	8010120 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8010274:	4620      	mov	r0, r4
 8010276:	f7fa fa83 	bl	800a780 <pbuf_free>
        break;
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801027a:	2300      	movs	r3, #0
 801027c:	e9c9 3300 	strd	r3, r3, [r9]
  ip_data.current_input_netif = NULL;
  ip_data.current_ip4_header = NULL;
 8010280:	f8c9 3008 	str.w	r3, [r9, #8]
  ip_data.current_ip_header_tot_len = 0;
 8010284:	f8a9 300c 	strh.w	r3, [r9, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8010288:	e9c9 3304 	strd	r3, r3, [r9, #16]
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
 801028c:	e002      	b.n	8010294 <ip4_input+0xf4>
    pbuf_free(p);
 801028e:	4620      	mov	r0, r4
 8010290:	f7fa fa76 	bl	800a780 <pbuf_free>
}
 8010294:	2000      	movs	r0, #0
 8010296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    pbuf_realloc(p, iphdr_len);
 801029a:	4601      	mov	r1, r0
 801029c:	4620      	mov	r0, r4
 801029e:	f7fa fb83 	bl	800a9a8 <pbuf_realloc>
 80102a2:	e790      	b.n	80101c6 <ip4_input+0x26>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80102a4:	bb93      	cbnz	r3, 801030c <ip4_input+0x16c>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80102a6:	b2d2      	uxtb	r2, r2
 80102a8:	2a7f      	cmp	r2, #127	@ 0x7f
 80102aa:	d04b      	beq.n	8010344 <ip4_input+0x1a4>
        NETIF_FOREACH(netif) {
 80102ac:	4b2a      	ldr	r3, [pc, #168]	@ (8010358 <ip4_input+0x1b8>)
 80102ae:	f8d3 8000 	ldr.w	r8, [r3]
 80102b2:	f1b8 0f00 	cmp.w	r8, #0
 80102b6:	d108      	bne.n	80102ca <ip4_input+0x12a>
 80102b8:	e044      	b.n	8010344 <ip4_input+0x1a4>
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80102ba:	f000 f8e5 	bl	8010488 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80102be:	b998      	cbnz	r0, 80102e8 <ip4_input+0x148>
        NETIF_FOREACH(netif) {
 80102c0:	f8d8 8000 	ldr.w	r8, [r8]
 80102c4:	f1b8 0f00 	cmp.w	r8, #0
 80102c8:	d00e      	beq.n	80102e8 <ip4_input+0x148>
          if (netif == inp) {
 80102ca:	4546      	cmp	r6, r8
 80102cc:	d0f8      	beq.n	80102c0 <ip4_input+0x120>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80102ce:	f898 302d 	ldrb.w	r3, [r8, #45]	@ 0x2d
 80102d2:	07db      	lsls	r3, r3, #31
 80102d4:	d5f4      	bpl.n	80102c0 <ip4_input+0x120>
 80102d6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d0f0      	beq.n	80102c0 <ip4_input+0x120>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80102de:	f8d9 0014 	ldr.w	r0, [r9, #20]
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80102e2:	4641      	mov	r1, r8
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80102e4:	4283      	cmp	r3, r0
 80102e6:	d1e8      	bne.n	80102ba <ip4_input+0x11a>
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80102e8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80102ec:	e786      	b.n	80101fc <ip4_input+0x5c>
    p = ip4_reass(p);
 80102ee:	4620      	mov	r0, r4
 80102f0:	f000 f9f6 	bl	80106e0 <ip4_reass>
    if (p == NULL) {
 80102f4:	4604      	mov	r4, r0
 80102f6:	2800      	cmp	r0, #0
 80102f8:	d0cc      	beq.n	8010294 <ip4_input+0xf4>
    iphdr = (const struct ip_hdr *)p->payload;
 80102fa:	6847      	ldr	r7, [r0, #4]
 80102fc:	e791      	b.n	8010222 <ip4_input+0x82>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80102fe:	6873      	ldr	r3, [r6, #4]
 8010300:	2b00      	cmp	r3, #0
 8010302:	bf14      	ite	ne
 8010304:	46b0      	movne	r8, r6
 8010306:	f04f 0800 	moveq.w	r8, #0
 801030a:	e777      	b.n	80101fc <ip4_input+0x5c>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801030c:	6873      	ldr	r3, [r6, #4]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d0c9      	beq.n	80102a6 <ip4_input+0x106>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8010312:	429a      	cmp	r2, r3
 8010314:	d019      	beq.n	801034a <ip4_input+0x1aa>
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8010316:	4610      	mov	r0, r2
 8010318:	4631      	mov	r1, r6
 801031a:	f000 f8b5 	bl	8010488 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801031e:	b9b0      	cbnz	r0, 801034e <ip4_input+0x1ae>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8010320:	f8d9 2014 	ldr.w	r2, [r9, #20]
 8010324:	e7bf      	b.n	80102a6 <ip4_input+0x106>
        icmp_input(p, inp);
 8010326:	4631      	mov	r1, r6
 8010328:	4620      	mov	r0, r4
 801032a:	f7ff fe51 	bl	800ffd0 <icmp_input>
        break;
 801032e:	e7a4      	b.n	801027a <ip4_input+0xda>
        udp_input(p, inp);
 8010330:	4631      	mov	r1, r6
 8010332:	4620      	mov	r0, r4
 8010334:	f7fe fea6 	bl	800f084 <udp_input>
        break;
 8010338:	e79f      	b.n	801027a <ip4_input+0xda>
        tcp_input(p, inp);
 801033a:	4631      	mov	r1, r6
 801033c:	4620      	mov	r0, r4
 801033e:	f7fc fdc7 	bl	800ced0 <tcp_input>
        break;
 8010342:	e79a      	b.n	801027a <ip4_input+0xda>
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010344:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8010348:	e756      	b.n	80101f8 <ip4_input+0x58>
 801034a:	46b0      	mov	r8, r6
 801034c:	e756      	b.n	80101fc <ip4_input+0x5c>
 801034e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8010352:	46b0      	mov	r8, r6
 8010354:	e752      	b.n	80101fc <ip4_input+0x5c>
 8010356:	bf00      	nop
 8010358:	24009cf0 	.word	0x24009cf0
 801035c:	24006bf8 	.word	0x24006bf8

08010360 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8010360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010364:	4699      	mov	r9, r3
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8010366:	7b83      	ldrb	r3, [r0, #14]
{
 8010368:	b083      	sub	sp, #12
 801036a:	4604      	mov	r4, r0
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801036c:	2b01      	cmp	r3, #1
{
 801036e:	460f      	mov	r7, r1
 8010370:	4616      	mov	r6, r2
 8010372:	f89d a030 	ldrb.w	sl, [sp, #48]	@ 0x30
 8010376:	f89d b034 	ldrb.w	fp, [sp, #52]	@ 0x34
 801037a:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801037e:	d13d      	bne.n	80103fc <ip4_output_if_src+0x9c>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8010380:	2e00      	cmp	r6, #0
 8010382:	d044      	beq.n	801040e <ip4_output_if_src+0xae>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8010384:	2114      	movs	r1, #20
 8010386:	4620      	mov	r0, r4
 8010388:	f7fa f968 	bl	800a65c <pbuf_add_header>
 801038c:	2800      	cmp	r0, #0
 801038e:	d159      	bne.n	8010444 <ip4_output_if_src+0xe4>
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8010390:	8963      	ldrh	r3, [r4, #10]
    iphdr = (struct ip_hdr *)p->payload;
 8010392:	6865      	ldr	r5, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8010394:	2b13      	cmp	r3, #19
 8010396:	d942      	bls.n	801041e <ip4_output_if_src+0xbe>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8010398:	f885 9008 	strb.w	r9, [r5, #8]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801039c:	2245      	movs	r2, #69	@ 0x45
    IPH_PROTO_SET(iphdr, proto);
 801039e:	f885 b009 	strb.w	fp, [r5, #9]
    ip4_addr_copy(iphdr->dest, *dest);
 80103a2:	6833      	ldr	r3, [r6, #0]
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80103a4:	702a      	strb	r2, [r5, #0]
    IPH_TOS_SET(iphdr, tos);
 80103a6:	f885 a001 	strb.w	sl, [r5, #1]
    ip4_addr_copy(iphdr->dest, *dest);
 80103aa:	612b      	str	r3, [r5, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80103ac:	8920      	ldrh	r0, [r4, #8]
 80103ae:	f7f9 fb31 	bl	8009a14 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80103b2:	f8df 90ac 	ldr.w	r9, [pc, #172]	@ 8010460 <ip4_output_if_src+0x100>
    IPH_OFFSET_SET(iphdr, 0);
 80103b6:	2300      	movs	r3, #0
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80103b8:	8068      	strh	r0, [r5, #2]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80103ba:	f8b9 0000 	ldrh.w	r0, [r9]
    IPH_OFFSET_SET(iphdr, 0);
 80103be:	71ab      	strb	r3, [r5, #6]
 80103c0:	71eb      	strb	r3, [r5, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80103c2:	f7f9 fb27 	bl	8009a14 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80103c6:	f8b9 3000 	ldrh.w	r3, [r9]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80103ca:	80a8      	strh	r0, [r5, #4]
    ++ip_id;
 80103cc:	3301      	adds	r3, #1
 80103ce:	f8a9 3000 	strh.w	r3, [r9]

    if (src == NULL) {
 80103d2:	b367      	cbz	r7, 801042e <ip4_output_if_src+0xce>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80103d4:	683b      	ldr	r3, [r7, #0]
 80103d6:	60eb      	str	r3, [r5, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80103d8:	2300      	movs	r3, #0
 80103da:	72ab      	strb	r3, [r5, #10]
 80103dc:	72eb      	strb	r3, [r5, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80103de:	f8b8 3024 	ldrh.w	r3, [r8, #36]	@ 0x24
 80103e2:	b113      	cbz	r3, 80103ea <ip4_output_if_src+0x8a>
 80103e4:	8922      	ldrh	r2, [r4, #8]
 80103e6:	429a      	cmp	r2, r3
 80103e8:	d824      	bhi.n	8010434 <ip4_output_if_src+0xd4>
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80103ea:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80103ee:	4632      	mov	r2, r6
 80103f0:	4621      	mov	r1, r4
 80103f2:	4640      	mov	r0, r8
 80103f4:	4798      	blx	r3
}
 80103f6:	b003      	add	sp, #12
 80103f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80103fc:	4b13      	ldr	r3, [pc, #76]	@ (801044c <ip4_output_if_src+0xec>)
 80103fe:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8010402:	4913      	ldr	r1, [pc, #76]	@ (8010450 <ip4_output_if_src+0xf0>)
 8010404:	4813      	ldr	r0, [pc, #76]	@ (8010454 <ip4_output_if_src+0xf4>)
 8010406:	f001 f847 	bl	8011498 <iprintf>
  if (dest != LWIP_IP_HDRINCL) {
 801040a:	2e00      	cmp	r6, #0
 801040c:	d1ba      	bne.n	8010384 <ip4_output_if_src+0x24>
    if (p->len < IP_HLEN) {
 801040e:	8963      	ldrh	r3, [r4, #10]
 8010410:	2b13      	cmp	r3, #19
 8010412:	d917      	bls.n	8010444 <ip4_output_if_src+0xe4>
    ip4_addr_copy(dest_addr, iphdr->dest);
 8010414:	6863      	ldr	r3, [r4, #4]
    dest = &dest_addr;
 8010416:	ae01      	add	r6, sp, #4
    ip4_addr_copy(dest_addr, iphdr->dest);
 8010418:	691b      	ldr	r3, [r3, #16]
 801041a:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 801041c:	e7df      	b.n	80103de <ip4_output_if_src+0x7e>
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801041e:	4b0b      	ldr	r3, [pc, #44]	@ (801044c <ip4_output_if_src+0xec>)
 8010420:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8010424:	490c      	ldr	r1, [pc, #48]	@ (8010458 <ip4_output_if_src+0xf8>)
 8010426:	480b      	ldr	r0, [pc, #44]	@ (8010454 <ip4_output_if_src+0xf4>)
 8010428:	f001 f836 	bl	8011498 <iprintf>
 801042c:	e7b4      	b.n	8010398 <ip4_output_if_src+0x38>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801042e:	4b0b      	ldr	r3, [pc, #44]	@ (801045c <ip4_output_if_src+0xfc>)
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	e7d0      	b.n	80103d6 <ip4_output_if_src+0x76>
    return ip4_frag(p, netif, dest);
 8010434:	4632      	mov	r2, r6
 8010436:	4641      	mov	r1, r8
 8010438:	4620      	mov	r0, r4
 801043a:	f000 fb8d 	bl	8010b58 <ip4_frag>
}
 801043e:	b003      	add	sp, #12
 8010440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return ERR_BUF;
 8010444:	f06f 0001 	mvn.w	r0, #1
 8010448:	e7d5      	b.n	80103f6 <ip4_output_if_src+0x96>
 801044a:	bf00      	nop
 801044c:	08014da4 	.word	0x08014da4
 8010450:	08014dd8 	.word	0x08014dd8
 8010454:	0801241c 	.word	0x0801241c
 8010458:	08014de4 	.word	0x08014de4
 801045c:	08014e14 	.word	0x08014e14
 8010460:	24009e48 	.word	0x24009e48

08010464 <ip4_output_if>:
{
 8010464:	b4f0      	push	{r4, r5, r6, r7}
 8010466:	9c06      	ldr	r4, [sp, #24]
 8010468:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801046c:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8010470:	b11a      	cbz	r2, 801047a <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 8010472:	b109      	cbz	r1, 8010478 <ip4_output_if+0x14>
 8010474:	680f      	ldr	r7, [r1, #0]
 8010476:	b907      	cbnz	r7, 801047a <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 8010478:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801047a:	9504      	str	r5, [sp, #16]
 801047c:	e9cd 6405 	strd	r6, r4, [sp, #20]
}
 8010480:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8010482:	f7ff bf6d 	b.w	8010360 <ip4_output_if_src>
 8010486:	bf00      	nop

08010488 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8010488:	1e42      	subs	r2, r0, #1
{
 801048a:	4603      	mov	r3, r0
  if ((~addr == IPADDR_ANY) ||
 801048c:	3203      	adds	r2, #3
 801048e:	d815      	bhi.n	80104bc <ip4_addr_isbroadcast_u32+0x34>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8010490:	f891 002d 	ldrb.w	r0, [r1, #45]	@ 0x2d
 8010494:	f010 0002 	ands.w	r0, r0, #2
 8010498:	d00f      	beq.n	80104ba <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801049a:	684a      	ldr	r2, [r1, #4]
 801049c:	429a      	cmp	r2, r3
 801049e:	d00b      	beq.n	80104b8 <ip4_addr_isbroadcast_u32+0x30>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80104a0:	6889      	ldr	r1, [r1, #8]
 80104a2:	405a      	eors	r2, r3
 80104a4:	420a      	tst	r2, r1
 80104a6:	d107      	bne.n	80104b8 <ip4_addr_isbroadcast_u32+0x30>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80104a8:	43c8      	mvns	r0, r1
 80104aa:	ea23 0301 	bic.w	r3, r3, r1
 80104ae:	1a18      	subs	r0, r3, r0
 80104b0:	fab0 f080 	clz	r0, r0
 80104b4:	0940      	lsrs	r0, r0, #5
 80104b6:	4770      	bx	lr
    return 0;
 80104b8:	2000      	movs	r0, #0
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
  }
}
 80104ba:	4770      	bx	lr
    return 1;
 80104bc:	2001      	movs	r0, #1
 80104be:	4770      	bx	lr

080104c0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80104c0:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80104c2:	4604      	mov	r4, r0
 80104c4:	b148      	cbz	r0, 80104da <ipfrag_free_pbuf_custom+0x1a>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 80104c6:	6960      	ldr	r0, [r4, #20]
 80104c8:	b108      	cbz	r0, 80104ce <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 80104ca:	f7fa f959 	bl	800a780 <pbuf_free>
  memp_free(MEMP_FRAG_PBUF, p);
 80104ce:	4621      	mov	r1, r4
 80104d0:	2005      	movs	r0, #5
  }
  ip_frag_free_pbuf_custom_ref(pcr);
}
 80104d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 80104d6:	f7f9 be83 	b.w	800a1e0 <memp_free>
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80104da:	4b04      	ldr	r3, [pc, #16]	@ (80104ec <ipfrag_free_pbuf_custom+0x2c>)
 80104dc:	f240 22ce 	movw	r2, #718	@ 0x2ce
 80104e0:	4903      	ldr	r1, [pc, #12]	@ (80104f0 <ipfrag_free_pbuf_custom+0x30>)
 80104e2:	4804      	ldr	r0, [pc, #16]	@ (80104f4 <ipfrag_free_pbuf_custom+0x34>)
 80104e4:	f000 ffd8 	bl	8011498 <iprintf>
 80104e8:	e7ed      	b.n	80104c6 <ipfrag_free_pbuf_custom+0x6>
 80104ea:	bf00      	nop
 80104ec:	08014e18 	.word	0x08014e18
 80104f0:	08014e54 	.word	0x08014e54
 80104f4:	0801241c 	.word	0x0801241c

080104f8 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 80104f8:	4281      	cmp	r1, r0
{
 80104fa:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104fe:	4606      	mov	r6, r0
 8010500:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8010502:	d076      	beq.n	80105f2 <ip_reass_free_complete_datagram+0xfa>
  if (prev != NULL) {
 8010504:	b147      	cbz	r7, 8010518 <ip_reass_free_complete_datagram+0x20>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8010506:	683b      	ldr	r3, [r7, #0]
 8010508:	42b3      	cmp	r3, r6
 801050a:	d005      	beq.n	8010518 <ip_reass_free_complete_datagram+0x20>
 801050c:	4b40      	ldr	r3, [pc, #256]	@ (8010610 <ip_reass_free_complete_datagram+0x118>)
 801050e:	22ad      	movs	r2, #173	@ 0xad
 8010510:	4940      	ldr	r1, [pc, #256]	@ (8010614 <ip_reass_free_complete_datagram+0x11c>)
 8010512:	4841      	ldr	r0, [pc, #260]	@ (8010618 <ip_reass_free_complete_datagram+0x120>)
 8010514:	f000 ffc0 	bl	8011498 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8010518:	6874      	ldr	r4, [r6, #4]
 801051a:	6863      	ldr	r3, [r4, #4]
  if (iprh->start == 0) {
 801051c:	889a      	ldrh	r2, [r3, #4]
 801051e:	2a00      	cmp	r2, #0
 8010520:	d046      	beq.n	80105b0 <ip_reass_free_complete_datagram+0xb8>
  u16_t pbufs_freed = 0;
 8010522:	f04f 0b00 	mov.w	fp, #0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8010526:	f8df a0e8 	ldr.w	sl, [pc, #232]	@ 8010610 <ip_reass_free_complete_datagram+0x118>
 801052a:	f8df 9104 	ldr.w	r9, [pc, #260]	@ 8010630 <ip_reass_free_complete_datagram+0x138>
 801052e:	f8df 80e8 	ldr.w	r8, [pc, #232]	@ 8010618 <ip_reass_free_complete_datagram+0x120>
 8010532:	e003      	b.n	801053c <ip_reass_free_complete_datagram+0x44>
    pbuf_free(pcur);
 8010534:	4628      	mov	r0, r5
 8010536:	f7fa f923 	bl	800a780 <pbuf_free>
  while (p != NULL) {
 801053a:	b1b4      	cbz	r4, 801056a <ip_reass_free_complete_datagram+0x72>
    iprh = (struct ip_reass_helper *)p->payload;
 801053c:	6863      	ldr	r3, [r4, #4]
    clen = pbuf_clen(pcur);
 801053e:	4620      	mov	r0, r4
 8010540:	4625      	mov	r5, r4
    p = iprh->next_pbuf;
 8010542:	681c      	ldr	r4, [r3, #0]
    clen = pbuf_clen(pcur);
 8010544:	f7fa faaa 	bl	800aa9c <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8010548:	4458      	add	r0, fp
 801054a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801054e:	fa1f fb80 	uxth.w	fp, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8010552:	dbef      	blt.n	8010534 <ip_reass_free_complete_datagram+0x3c>
 8010554:	4653      	mov	r3, sl
 8010556:	22cc      	movs	r2, #204	@ 0xcc
 8010558:	4649      	mov	r1, r9
 801055a:	4640      	mov	r0, r8
 801055c:	f000 ff9c 	bl	8011498 <iprintf>
    pbuf_free(pcur);
 8010560:	4628      	mov	r0, r5
 8010562:	f7fa f90d 	bl	800a780 <pbuf_free>
  while (p != NULL) {
 8010566:	2c00      	cmp	r4, #0
 8010568:	d1e8      	bne.n	801053c <ip_reass_free_complete_datagram+0x44>
  if (reassdatagrams == ipr) {
 801056a:	4b2c      	ldr	r3, [pc, #176]	@ (801061c <ip_reass_free_complete_datagram+0x124>)
 801056c:	681a      	ldr	r2, [r3, #0]
 801056e:	4296      	cmp	r6, r2
 8010570:	d03c      	beq.n	80105ec <ip_reass_free_complete_datagram+0xf4>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8010572:	2f00      	cmp	r7, #0
 8010574:	d044      	beq.n	8010600 <ip_reass_free_complete_datagram+0x108>
    prev->next = ipr->next;
 8010576:	6833      	ldr	r3, [r6, #0]
 8010578:	603b      	str	r3, [r7, #0]
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801057a:	4c29      	ldr	r4, [pc, #164]	@ (8010620 <ip_reass_free_complete_datagram+0x128>)
  memp_free(MEMP_REASSDATA, ipr);
 801057c:	4631      	mov	r1, r6
 801057e:	2004      	movs	r0, #4
 8010580:	f7f9 fe2e 	bl	800a1e0 <memp_free>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8010584:	8823      	ldrh	r3, [r4, #0]
 8010586:	455b      	cmp	r3, fp
 8010588:	d305      	bcc.n	8010596 <ip_reass_free_complete_datagram+0x9e>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801058a:	eba3 030b 	sub.w	r3, r3, fp
}
 801058e:	4658      	mov	r0, fp
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8010590:	8023      	strh	r3, [r4, #0]
}
 8010592:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8010596:	4b1e      	ldr	r3, [pc, #120]	@ (8010610 <ip_reass_free_complete_datagram+0x118>)
 8010598:	22d2      	movs	r2, #210	@ 0xd2
 801059a:	4922      	ldr	r1, [pc, #136]	@ (8010624 <ip_reass_free_complete_datagram+0x12c>)
 801059c:	481e      	ldr	r0, [pc, #120]	@ (8010618 <ip_reass_free_complete_datagram+0x120>)
 801059e:	f000 ff7b 	bl	8011498 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80105a2:	8823      	ldrh	r3, [r4, #0]
}
 80105a4:	4658      	mov	r0, fp
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80105a6:	eba3 030b 	sub.w	r3, r3, fp
 80105aa:	8023      	strh	r3, [r4, #0]
}
 80105ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ipr->p = iprh->next_pbuf;
 80105b0:	681a      	ldr	r2, [r3, #0]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80105b2:	6930      	ldr	r0, [r6, #16]
 80105b4:	6971      	ldr	r1, [r6, #20]
    ipr->p = iprh->next_pbuf;
 80105b6:	6072      	str	r2, [r6, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80105b8:	68f5      	ldr	r5, [r6, #12]
 80105ba:	68b2      	ldr	r2, [r6, #8]
 80105bc:	6098      	str	r0, [r3, #8]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80105be:	4620      	mov	r0, r4
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80105c0:	60d9      	str	r1, [r3, #12]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80105c2:	2101      	movs	r1, #1
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80105c4:	601a      	str	r2, [r3, #0]
 80105c6:	605d      	str	r5, [r3, #4]
 80105c8:	69b2      	ldr	r2, [r6, #24]
 80105ca:	611a      	str	r2, [r3, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80105cc:	f7ff fdac 	bl	8010128 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80105d0:	4620      	mov	r0, r4
 80105d2:	f7fa fa63 	bl	800aa9c <pbuf_clen>
 80105d6:	4683      	mov	fp, r0
    pbuf_free(p);
 80105d8:	4620      	mov	r0, r4
 80105da:	f7fa f8d1 	bl	800a780 <pbuf_free>
  p = ipr->p;
 80105de:	6874      	ldr	r4, [r6, #4]
  while (p != NULL) {
 80105e0:	2c00      	cmp	r4, #0
 80105e2:	d1a0      	bne.n	8010526 <ip_reass_free_complete_datagram+0x2e>
  if (reassdatagrams == ipr) {
 80105e4:	4b0d      	ldr	r3, [pc, #52]	@ (801061c <ip_reass_free_complete_datagram+0x124>)
 80105e6:	681a      	ldr	r2, [r3, #0]
 80105e8:	4296      	cmp	r6, r2
 80105ea:	d1c2      	bne.n	8010572 <ip_reass_free_complete_datagram+0x7a>
    reassdatagrams = ipr->next;
 80105ec:	6832      	ldr	r2, [r6, #0]
 80105ee:	601a      	str	r2, [r3, #0]
 80105f0:	e7c3      	b.n	801057a <ip_reass_free_complete_datagram+0x82>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 80105f2:	4b07      	ldr	r3, [pc, #28]	@ (8010610 <ip_reass_free_complete_datagram+0x118>)
 80105f4:	22ab      	movs	r2, #171	@ 0xab
 80105f6:	490c      	ldr	r1, [pc, #48]	@ (8010628 <ip_reass_free_complete_datagram+0x130>)
 80105f8:	4807      	ldr	r0, [pc, #28]	@ (8010618 <ip_reass_free_complete_datagram+0x120>)
 80105fa:	f000 ff4d 	bl	8011498 <iprintf>
 80105fe:	e781      	b.n	8010504 <ip_reass_free_complete_datagram+0xc>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8010600:	4b03      	ldr	r3, [pc, #12]	@ (8010610 <ip_reass_free_complete_datagram+0x118>)
 8010602:	f240 1245 	movw	r2, #325	@ 0x145
 8010606:	4909      	ldr	r1, [pc, #36]	@ (801062c <ip_reass_free_complete_datagram+0x134>)
 8010608:	4803      	ldr	r0, [pc, #12]	@ (8010618 <ip_reass_free_complete_datagram+0x120>)
 801060a:	f000 ff45 	bl	8011498 <iprintf>
 801060e:	e7b2      	b.n	8010576 <ip_reass_free_complete_datagram+0x7e>
 8010610:	08014e18 	.word	0x08014e18
 8010614:	08014e6c 	.word	0x08014e6c
 8010618:	0801241c 	.word	0x0801241c
 801061c:	24009e4c 	.word	0x24009e4c
 8010620:	24009e4a 	.word	0x24009e4a
 8010624:	08014ebc 	.word	0x08014ebc
 8010628:	08014e60 	.word	0x08014e60
 801062c:	08014ea0 	.word	0x08014ea0
 8010630:	08014e80 	.word	0x08014e80

08010634 <ip_reass_remove_oldest_datagram>:
{
 8010634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  int pbufs_freed = 0, pbufs_freed_current;
 8010638:	2700      	movs	r7, #0
 801063a:	f8df 8070 	ldr.w	r8, [pc, #112]	@ 80106ac <ip_reass_remove_oldest_datagram+0x78>
{
 801063e:	4605      	mov	r5, r0
 8010640:	460e      	mov	r6, r1
    r = reassdatagrams;
 8010642:	f8d8 3000 	ldr.w	r3, [r8]
    while (r != NULL) {
 8010646:	b1f3      	cbz	r3, 8010686 <ip_reass_remove_oldest_datagram+0x52>
    other_datagrams = 0;
 8010648:	2400      	movs	r4, #0
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801064a:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    oldest_prev = NULL;
 801064e:	4621      	mov	r1, r4
    prev = NULL;
 8010650:	46a4      	mov	ip, r4
    oldest = NULL;
 8010652:	4620      	mov	r0, r4
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8010654:	695a      	ldr	r2, [r3, #20]
 8010656:	4572      	cmp	r2, lr
 8010658:	d018      	beq.n	801068c <ip_reass_remove_oldest_datagram+0x58>
        other_datagrams++;
 801065a:	3401      	adds	r4, #1
        if (oldest == NULL) {
 801065c:	b318      	cbz	r0, 80106a6 <ip_reass_remove_oldest_datagram+0x72>
        } else if (r->timer <= oldest->timer) {
 801065e:	7fc2      	ldrb	r2, [r0, #31]
 8010660:	f893 901f 	ldrb.w	r9, [r3, #31]
 8010664:	4591      	cmp	r9, r2
 8010666:	bf9c      	itt	ls
 8010668:	4661      	movls	r1, ip
 801066a:	4618      	movls	r0, r3
      if (r->next != NULL) {
 801066c:	681a      	ldr	r2, [r3, #0]
 801066e:	469c      	mov	ip, r3
 8010670:	4613      	mov	r3, r2
 8010672:	2a00      	cmp	r2, #0
 8010674:	d1ee      	bne.n	8010654 <ip_reass_remove_oldest_datagram+0x20>
    if (oldest != NULL) {
 8010676:	b110      	cbz	r0, 801067e <ip_reass_remove_oldest_datagram+0x4a>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8010678:	f7ff ff3e 	bl	80104f8 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 801067c:	4407      	add	r7, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801067e:	42b7      	cmp	r7, r6
 8010680:	da01      	bge.n	8010686 <ip_reass_remove_oldest_datagram+0x52>
 8010682:	2c01      	cmp	r4, #1
 8010684:	dcdd      	bgt.n	8010642 <ip_reass_remove_oldest_datagram+0xe>
}
 8010686:	4638      	mov	r0, r7
 8010688:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801068c:	699a      	ldr	r2, [r3, #24]
 801068e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8010692:	454a      	cmp	r2, r9
 8010694:	d1e1      	bne.n	801065a <ip_reass_remove_oldest_datagram+0x26>
 8010696:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 801069a:	88aa      	ldrh	r2, [r5, #4]
 801069c:	4591      	cmp	r9, r2
 801069e:	d0e5      	beq.n	801066c <ip_reass_remove_oldest_datagram+0x38>
        other_datagrams++;
 80106a0:	3401      	adds	r4, #1
        if (oldest == NULL) {
 80106a2:	2800      	cmp	r0, #0
 80106a4:	d1db      	bne.n	801065e <ip_reass_remove_oldest_datagram+0x2a>
 80106a6:	4661      	mov	r1, ip
 80106a8:	4618      	mov	r0, r3
 80106aa:	e7df      	b.n	801066c <ip_reass_remove_oldest_datagram+0x38>
 80106ac:	24009e4c 	.word	0x24009e4c

080106b0 <ip_reass_tmr>:
{
 80106b0:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 80106b2:	4b0a      	ldr	r3, [pc, #40]	@ (80106dc <ip_reass_tmr+0x2c>)
 80106b4:	681c      	ldr	r4, [r3, #0]
  while (r != NULL) {
 80106b6:	b14c      	cbz	r4, 80106cc <ip_reass_tmr+0x1c>
  struct ip_reassdata *r, *prev = NULL;
 80106b8:	2500      	movs	r5, #0
    if (r->timer > 0) {
 80106ba:	7fe3      	ldrb	r3, [r4, #31]
 80106bc:	4620      	mov	r0, r4
      r = r->next;
 80106be:	6824      	ldr	r4, [r4, #0]
      r->timer--;
 80106c0:	1e5a      	subs	r2, r3, #1
    if (r->timer > 0) {
 80106c2:	b123      	cbz	r3, 80106ce <ip_reass_tmr+0x1e>
 80106c4:	4605      	mov	r5, r0
      r->timer--;
 80106c6:	77c2      	strb	r2, [r0, #31]
  while (r != NULL) {
 80106c8:	2c00      	cmp	r4, #0
 80106ca:	d1f6      	bne.n	80106ba <ip_reass_tmr+0xa>
}
 80106cc:	bd38      	pop	{r3, r4, r5, pc}
      ip_reass_free_complete_datagram(tmp, prev);
 80106ce:	4629      	mov	r1, r5
 80106d0:	f7ff ff12 	bl	80104f8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80106d4:	2c00      	cmp	r4, #0
 80106d6:	d1f0      	bne.n	80106ba <ip_reass_tmr+0xa>
 80106d8:	e7f8      	b.n	80106cc <ip_reass_tmr+0x1c>
 80106da:	bf00      	nop
 80106dc:	24009e4c 	.word	0x24009e4c

080106e0 <ip4_reass>:
{
 80106e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr *)p->payload;
 80106e4:	f8d0 9004 	ldr.w	r9, [r0, #4]
{
 80106e8:	b085      	sub	sp, #20
 80106ea:	4605      	mov	r5, r0
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80106ec:	f899 3000 	ldrb.w	r3, [r9]
 80106f0:	f003 030f 	and.w	r3, r3, #15
 80106f4:	2b05      	cmp	r3, #5
 80106f6:	f040 8089 	bne.w	801080c <ip4_reass+0x12c>
  offset = IPH_OFFSET_BYTES(fraghdr);
 80106fa:	f8b9 0006 	ldrh.w	r0, [r9, #6]
 80106fe:	f7f9 f989 	bl	8009a14 <lwip_htons>
 8010702:	4606      	mov	r6, r0
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010704:	f8b9 0002 	ldrh.w	r0, [r9, #2]
 8010708:	f7f9 f984 	bl	8009a14 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 801070c:	f899 3000 	ldrb.w	r3, [r9]
 8010710:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 8010714:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 8010718:	ea4f 0283 	mov.w	r2, r3, lsl #2
 801071c:	d376      	bcc.n	801080c <ip4_reass+0x12c>
  len = (u16_t)(len - hlen);
 801071e:	1a83      	subs	r3, r0, r2
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8010720:	f8df 8310 	ldr.w	r8, [pc, #784]	@ 8010a34 <ip4_reass+0x354>
  clen = pbuf_clen(p);
 8010724:	4628      	mov	r0, r5
  len = (u16_t)(len - hlen);
 8010726:	b29b      	uxth	r3, r3
 8010728:	9301      	str	r3, [sp, #4]
  clen = pbuf_clen(p);
 801072a:	f7fa f9b7 	bl	800aa9c <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801072e:	f8b8 3000 	ldrh.w	r3, [r8]
  clen = pbuf_clen(p);
 8010732:	4607      	mov	r7, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8010734:	4403      	add	r3, r0
 8010736:	2b0a      	cmp	r3, #10
 8010738:	f300 80e7 	bgt.w	801090a <ip4_reass+0x22a>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801073c:	f8df a2f8 	ldr.w	sl, [pc, #760]	@ 8010a38 <ip4_reass+0x358>
 8010740:	f8da 4000 	ldr.w	r4, [sl]
 8010744:	2c00      	cmp	r4, #0
 8010746:	f000 80ee 	beq.w	8010926 <ip4_reass+0x246>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801074a:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801074e:	e003      	b.n	8010758 <ip4_reass+0x78>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8010750:	6824      	ldr	r4, [r4, #0]
 8010752:	2c00      	cmp	r4, #0
 8010754:	f000 80e7 	beq.w	8010926 <ip4_reass+0x246>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8010758:	6963      	ldr	r3, [r4, #20]
 801075a:	4293      	cmp	r3, r2
 801075c:	d1f8      	bne.n	8010750 <ip4_reass+0x70>
 801075e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010762:	69a1      	ldr	r1, [r4, #24]
 8010764:	4299      	cmp	r1, r3
 8010766:	d1f3      	bne.n	8010750 <ip4_reass+0x70>
 8010768:	89a1      	ldrh	r1, [r4, #12]
 801076a:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 801076e:	4299      	cmp	r1, r3
 8010770:	d1ee      	bne.n	8010750 <ip4_reass+0x70>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8010772:	f8b9 0006 	ldrh.w	r0, [r9, #6]
 8010776:	f7f9 f94d 	bl	8009a14 <lwip_htons>
 801077a:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801077e:	2800      	cmp	r0, #0
 8010780:	f000 80ab 	beq.w	80108da <ip4_reass+0x1fa>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8010784:	f8b9 3006 	ldrh.w	r3, [r9, #6]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8010788:	f3c6 060c 	ubfx	r6, r6, #0, #13
  if (is_last) {
 801078c:	f013 0320 	ands.w	r3, r3, #32
  offset = IPH_OFFSET_BYTES(fraghdr);
 8010790:	ea4f 06c6 	mov.w	r6, r6, lsl #3
  if (is_last) {
 8010794:	9302      	str	r3, [sp, #8]
 8010796:	d108      	bne.n	80107aa <ip4_reass+0xca>
    u16_t datagram_len = (u16_t)(offset + len);
 8010798:	9b01      	ldr	r3, [sp, #4]
 801079a:	18f3      	adds	r3, r6, r3
 801079c:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801079e:	429e      	cmp	r6, r3
 80107a0:	d812      	bhi.n	80107c8 <ip4_reass+0xe8>
 80107a2:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 80107a6:	4293      	cmp	r3, r2
 80107a8:	d80e      	bhi.n	80107c8 <ip4_reass+0xe8>
  fraghdr = (struct ip_hdr *)new_p->payload;
 80107aa:	f8d5 9004 	ldr.w	r9, [r5, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80107ae:	f8b9 0002 	ldrh.w	r0, [r9, #2]
 80107b2:	f7f9 f92f 	bl	8009a14 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 80107b6:	f899 3000 	ldrb.w	r3, [r9]
 80107ba:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 80107be:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 80107c2:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80107c6:	d229      	bcs.n	801081c <ip4_reass+0x13c>
  if (ipr->p == NULL) {
 80107c8:	6866      	ldr	r6, [r4, #4]
 80107ca:	b9fe      	cbnz	r6, 801080c <ip4_reass+0x12c>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80107cc:	f8da 3000 	ldr.w	r3, [sl]
 80107d0:	42a3      	cmp	r3, r4
 80107d2:	d014      	beq.n	80107fe <ip4_reass+0x11e>
 80107d4:	4b93      	ldr	r3, [pc, #588]	@ (8010a24 <ip4_reass+0x344>)
 80107d6:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80107da:	4993      	ldr	r1, [pc, #588]	@ (8010a28 <ip4_reass+0x348>)
 80107dc:	4893      	ldr	r0, [pc, #588]	@ (8010a2c <ip4_reass+0x34c>)
 80107de:	f000 fe5b 	bl	8011498 <iprintf>
  if (reassdatagrams == ipr) {
 80107e2:	f8da 3000 	ldr.w	r3, [sl]
 80107e6:	429c      	cmp	r4, r3
 80107e8:	d009      	beq.n	80107fe <ip4_reass+0x11e>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80107ea:	4b8e      	ldr	r3, [pc, #568]	@ (8010a24 <ip4_reass+0x344>)
 80107ec:	f240 1245 	movw	r2, #325	@ 0x145
 80107f0:	498f      	ldr	r1, [pc, #572]	@ (8010a30 <ip4_reass+0x350>)
 80107f2:	488e      	ldr	r0, [pc, #568]	@ (8010a2c <ip4_reass+0x34c>)
 80107f4:	f000 fe50 	bl	8011498 <iprintf>
    prev->next = ipr->next;
 80107f8:	6823      	ldr	r3, [r4, #0]
 80107fa:	6033      	str	r3, [r6, #0]
 80107fc:	deff      	udf	#255	@ 0xff
    reassdatagrams = ipr->next;
 80107fe:	6823      	ldr	r3, [r4, #0]
  memp_free(MEMP_REASSDATA, ipr);
 8010800:	4621      	mov	r1, r4
 8010802:	2004      	movs	r0, #4
    reassdatagrams = ipr->next;
 8010804:	f8ca 3000 	str.w	r3, [sl]
  memp_free(MEMP_REASSDATA, ipr);
 8010808:	f7f9 fcea 	bl	800a1e0 <memp_free>
  pbuf_free(p);
 801080c:	4628      	mov	r0, r5
 801080e:	f7f9 ffb7 	bl	800a780 <pbuf_free>
  return NULL;
 8010812:	2600      	movs	r6, #0
}
 8010814:	4630      	mov	r0, r6
 8010816:	b005      	add	sp, #20
 8010818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  len = (u16_t)(len - hlen);
 801081c:	1a83      	subs	r3, r0, r2
  offset = IPH_OFFSET_BYTES(fraghdr);
 801081e:	f8b9 0006 	ldrh.w	r0, [r9, #6]
  len = (u16_t)(len - hlen);
 8010822:	fa1f f983 	uxth.w	r9, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 8010826:	f7f9 f8f5 	bl	8009a14 <lwip_htons>
 801082a:	f3c0 020c 	ubfx	r2, r0, #0, #13
 801082e:	00d2      	lsls	r2, r2, #3
  iprh->end = (u16_t)(offset + len);
 8010830:	eb09 0302 	add.w	r3, r9, r2
  iprh = (struct ip_reass_helper *)new_p->payload;
 8010834:	f8d5 9004 	ldr.w	r9, [r5, #4]
  iprh->end = (u16_t)(offset + len);
 8010838:	f8a9 3006 	strh.w	r3, [r9, #6]
 801083c:	b29b      	uxth	r3, r3
  iprh->start = offset;
 801083e:	f8a9 2004 	strh.w	r2, [r9, #4]
  iprh->end = (u16_t)(offset + len);
 8010842:	4619      	mov	r1, r3
 8010844:	9303      	str	r3, [sp, #12]
  iprh->next_pbuf = NULL;
 8010846:	2300      	movs	r3, #0
  if (iprh->end < offset) {
 8010848:	428a      	cmp	r2, r1
  iprh->next_pbuf = NULL;
 801084a:	f889 3000 	strb.w	r3, [r9]
 801084e:	f889 3001 	strb.w	r3, [r9, #1]
 8010852:	f889 3002 	strb.w	r3, [r9, #2]
 8010856:	f889 3003 	strb.w	r3, [r9, #3]
  if (iprh->end < offset) {
 801085a:	d8b5      	bhi.n	80107c8 <ip4_reass+0xe8>
  for (q = ipr->p; q != NULL;) {
 801085c:	6861      	ldr	r1, [r4, #4]
 801085e:	2900      	cmp	r1, #0
 8010860:	f000 80d4 	beq.w	8010a0c <ip4_reass+0x32c>
  int valid = 1;
 8010864:	f04f 0b01 	mov.w	fp, #1
 8010868:	4694      	mov	ip, r2
 801086a:	e00e      	b.n	801088a <ip4_reass+0x1aa>
    } else if (iprh->start == iprh_tmp->start) {
 801086c:	d0ce      	beq.n	801080c <ip4_reass+0x12c>
    } else if (iprh->start < iprh_tmp->end) {
 801086e:	f8b3 e006 	ldrh.w	lr, [r3, #6]
 8010872:	45f4      	cmp	ip, lr
 8010874:	d3ca      	bcc.n	801080c <ip4_reass+0x12c>
      if (iprh_prev != NULL) {
 8010876:	b122      	cbz	r2, 8010882 <ip4_reass+0x1a2>
        if (iprh_prev->end != iprh_tmp->start) {
 8010878:	88d2      	ldrh	r2, [r2, #6]
          valid = 0;
 801087a:	4282      	cmp	r2, r0
 801087c:	bf18      	it	ne
 801087e:	f04f 0b00 	movne.w	fp, #0
    q = iprh_tmp->next_pbuf;
 8010882:	6819      	ldr	r1, [r3, #0]
  for (q = ipr->p; q != NULL;) {
 8010884:	2900      	cmp	r1, #0
 8010886:	f000 80a6 	beq.w	80109d6 <ip4_reass+0x2f6>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801088a:	461a      	mov	r2, r3
 801088c:	684b      	ldr	r3, [r1, #4]
    if (iprh->start < iprh_tmp->start) {
 801088e:	8898      	ldrh	r0, [r3, #4]
 8010890:	4584      	cmp	ip, r0
 8010892:	d2eb      	bcs.n	801086c <ip4_reass+0x18c>
      iprh->next_pbuf = q;
 8010894:	4613      	mov	r3, r2
 8010896:	f8c9 1000 	str.w	r1, [r9]
 801089a:	4662      	mov	r2, ip
 801089c:	469c      	mov	ip, r3
      if (iprh_prev != NULL) {
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d064      	beq.n	801096c <ip4_reass+0x28c>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80108a2:	88db      	ldrh	r3, [r3, #6]
 80108a4:	429a      	cmp	r2, r3
 80108a6:	d3b1      	bcc.n	801080c <ip4_reass+0x12c>
 80108a8:	9903      	ldr	r1, [sp, #12]
 80108aa:	4281      	cmp	r1, r0
 80108ac:	d8ae      	bhi.n	801080c <ip4_reass+0x12c>
        if (iprh_prev->end != iprh->start) {
 80108ae:	429a      	cmp	r2, r3
        iprh_prev->next_pbuf = new_p;
 80108b0:	f8cc 5000 	str.w	r5, [ip]
        if (iprh_prev->end != iprh->start) {
 80108b4:	d05f      	beq.n	8010976 <ip4_reass+0x296>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80108b6:	f8b8 2000 	ldrh.w	r2, [r8]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80108ba:	9902      	ldr	r1, [sp, #8]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80108bc:	443a      	add	r2, r7
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80108be:	7fa3      	ldrb	r3, [r4, #30]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80108c0:	b292      	uxth	r2, r2
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80108c2:	2900      	cmp	r1, #0
 80108c4:	f000 80ab 	beq.w	8010a1e <ip4_reass+0x33e>
 80108c8:	07d9      	lsls	r1, r3, #31
 80108ca:	f100 8122 	bmi.w	8010b12 <ip4_reass+0x432>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80108ce:	f8b8 3000 	ldrh.w	r3, [r8]
 80108d2:	443b      	add	r3, r7
 80108d4:	f8a8 3000 	strh.w	r3, [r8]
  if (is_last) {
 80108d8:	e79b      	b.n	8010812 <ip4_reass+0x132>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80108da:	89e0      	ldrh	r0, [r4, #14]
 80108dc:	f7f9 f89a 	bl	8009a14 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80108e0:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80108e4:	2800      	cmp	r0, #0
 80108e6:	f43f af4d 	beq.w	8010784 <ip4_reass+0xa4>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80108ea:	f8d9 3000 	ldr.w	r3, [r9]
 80108ee:	f8d9 0004 	ldr.w	r0, [r9, #4]
 80108f2:	f8d9 1008 	ldr.w	r1, [r9, #8]
 80108f6:	f8d9 200c 	ldr.w	r2, [r9, #12]
 80108fa:	60a3      	str	r3, [r4, #8]
 80108fc:	60e0      	str	r0, [r4, #12]
 80108fe:	6121      	str	r1, [r4, #16]
 8010900:	6162      	str	r2, [r4, #20]
 8010902:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010906:	61a3      	str	r3, [r4, #24]
 8010908:	e73c      	b.n	8010784 <ip4_reass+0xa4>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801090a:	4601      	mov	r1, r0
 801090c:	4648      	mov	r0, r9
 801090e:	f7ff fe91 	bl	8010634 <ip_reass_remove_oldest_datagram>
 8010912:	2800      	cmp	r0, #0
 8010914:	f43f af7a 	beq.w	801080c <ip4_reass+0x12c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8010918:	f8b8 3000 	ldrh.w	r3, [r8]
 801091c:	443b      	add	r3, r7
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801091e:	2b0a      	cmp	r3, #10
 8010920:	f77f af0c 	ble.w	801073c <ip4_reass+0x5c>
 8010924:	e772      	b.n	801080c <ip4_reass+0x12c>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010926:	2004      	movs	r0, #4
 8010928:	f7f9 fc14 	bl	800a154 <memp_malloc>
  if (ipr == NULL) {
 801092c:	4604      	mov	r4, r0
 801092e:	b178      	cbz	r0, 8010950 <ip4_reass+0x270>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8010930:	2300      	movs	r3, #0
 8010932:	61e3      	str	r3, [r4, #28]
 8010934:	60a3      	str	r3, [r4, #8]
 8010936:	60e3      	str	r3, [r4, #12]
 8010938:	6123      	str	r3, [r4, #16]
 801093a:	6163      	str	r3, [r4, #20]
 801093c:	61a3      	str	r3, [r4, #24]
 801093e:	6063      	str	r3, [r4, #4]
  ipr->next = reassdatagrams;
 8010940:	f8da 3000 	ldr.w	r3, [sl]
  reassdatagrams = ipr;
 8010944:	f8ca 4000 	str.w	r4, [sl]
  ipr->next = reassdatagrams;
 8010948:	6023      	str	r3, [r4, #0]
  ipr->timer = IP_REASS_MAXAGE;
 801094a:	230f      	movs	r3, #15
 801094c:	77e3      	strb	r3, [r4, #31]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801094e:	e7cc      	b.n	80108ea <ip4_reass+0x20a>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8010950:	4639      	mov	r1, r7
 8010952:	4648      	mov	r0, r9
 8010954:	f7ff fe6e 	bl	8010634 <ip_reass_remove_oldest_datagram>
 8010958:	4287      	cmp	r7, r0
 801095a:	f73f af57 	bgt.w	801080c <ip4_reass+0x12c>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801095e:	2004      	movs	r0, #4
 8010960:	f7f9 fbf8 	bl	800a154 <memp_malloc>
    if (ipr == NULL)
 8010964:	4604      	mov	r4, r0
 8010966:	2800      	cmp	r0, #0
 8010968:	d1e2      	bne.n	8010930 <ip4_reass+0x250>
 801096a:	e74f      	b.n	801080c <ip4_reass+0x12c>
        if (iprh->end > iprh_tmp->start) {
 801096c:	9b03      	ldr	r3, [sp, #12]
 801096e:	4283      	cmp	r3, r0
 8010970:	f63f af4c 	bhi.w	801080c <ip4_reass+0x12c>
        ipr->p = new_p;
 8010974:	6065      	str	r5, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8010976:	9b02      	ldr	r3, [sp, #8]
 8010978:	2b00      	cmp	r3, #0
 801097a:	d03b      	beq.n	80109f4 <ip4_reass+0x314>
 801097c:	7fa3      	ldrb	r3, [r4, #30]
 801097e:	07db      	lsls	r3, r3, #31
 8010980:	d5a5      	bpl.n	80108ce <ip4_reass+0x1ee>
    if (valid) {
 8010982:	f1bb 0f00 	cmp.w	fp, #0
 8010986:	d0a2      	beq.n	80108ce <ip4_reass+0x1ee>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8010988:	6862      	ldr	r2, [r4, #4]
 801098a:	2a00      	cmp	r2, #0
 801098c:	d09f      	beq.n	80108ce <ip4_reass+0x1ee>
 801098e:	6851      	ldr	r1, [r2, #4]
 8010990:	888b      	ldrh	r3, [r1, #4]
 8010992:	b97b      	cbnz	r3, 80109b4 <ip4_reass+0x2d4>
        q = iprh->next_pbuf;
 8010994:	f8d9 3000 	ldr.w	r3, [r9]
        while (q != NULL) {
 8010998:	2b00      	cmp	r3, #0
 801099a:	f000 80bd 	beq.w	8010b18 <ip4_reass+0x438>
 801099e:	464a      	mov	r2, r9
 80109a0:	e002      	b.n	80109a8 <ip4_reass+0x2c8>
          q = iprh->next_pbuf;
 80109a2:	6813      	ldr	r3, [r2, #0]
        while (q != NULL) {
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d049      	beq.n	8010a3c <ip4_reass+0x35c>
          iprh = (struct ip_reass_helper *)q->payload;
 80109a8:	4610      	mov	r0, r2
 80109aa:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 80109ac:	88c0      	ldrh	r0, [r0, #6]
 80109ae:	8893      	ldrh	r3, [r2, #4]
 80109b0:	4298      	cmp	r0, r3
 80109b2:	d0f6      	beq.n	80109a2 <ip4_reass+0x2c2>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80109b4:	f8b8 3000 	ldrh.w	r3, [r8]
 80109b8:	443b      	add	r3, r7
 80109ba:	f8a8 3000 	strh.w	r3, [r8]
  if (is_last) {
 80109be:	9b02      	ldr	r3, [sp, #8]
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	f47f af26 	bne.w	8010812 <ip4_reass+0x132>
 80109c6:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 80109c8:	9a01      	ldr	r2, [sp, #4]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80109ca:	f043 0301 	orr.w	r3, r3, #1
    u16_t datagram_len = (u16_t)(offset + len);
 80109ce:	4416      	add	r6, r2
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80109d0:	77a3      	strb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 80109d2:	83a6      	strh	r6, [r4, #28]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80109d4:	e71d      	b.n	8010812 <ip4_reass+0x132>
      if (iprh_prev->end != iprh->start) {
 80109d6:	45f4      	cmp	ip, lr
      iprh_prev->next_pbuf = new_p;
 80109d8:	601d      	str	r5, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80109da:	d0cc      	beq.n	8010976 <ip4_reass+0x296>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80109dc:	f8b8 2000 	ldrh.w	r2, [r8]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80109e0:	9902      	ldr	r1, [sp, #8]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80109e2:	443a      	add	r2, r7
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80109e4:	7fa3      	ldrb	r3, [r4, #30]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80109e6:	b292      	uxth	r2, r2
 80109e8:	f8a8 2000 	strh.w	r2, [r8]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80109ec:	2900      	cmp	r1, #0
 80109ee:	f47f af10 	bne.w	8010812 <ip4_reass+0x132>
 80109f2:	e7e9      	b.n	80109c8 <ip4_reass+0x2e8>
    if (valid) {
 80109f4:	f1bb 0f00 	cmp.w	fp, #0
 80109f8:	d002      	beq.n	8010a00 <ip4_reass+0x320>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80109fa:	6862      	ldr	r2, [r4, #4]
 80109fc:	2a00      	cmp	r2, #0
 80109fe:	d1c6      	bne.n	801098e <ip4_reass+0x2ae>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8010a00:	f8b8 3000 	ldrh.w	r3, [r8]
 8010a04:	443b      	add	r3, r7
 8010a06:	f8a8 3000 	strh.w	r3, [r8]
 8010a0a:	e7dc      	b.n	80109c6 <ip4_reass+0x2e6>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8010a0c:	9b02      	ldr	r3, [sp, #8]
      ipr->p = new_p;
 8010a0e:	6065      	str	r5, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8010a10:	b11b      	cbz	r3, 8010a1a <ip4_reass+0x33a>
 8010a12:	7fa3      	ldrb	r3, [r4, #30]
 8010a14:	07da      	lsls	r2, r3, #31
 8010a16:	f57f af5a 	bpl.w	80108ce <ip4_reass+0x1ee>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8010a1a:	6862      	ldr	r2, [r4, #4]
 8010a1c:	e7b7      	b.n	801098e <ip4_reass+0x2ae>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8010a1e:	f8a8 2000 	strh.w	r2, [r8]
  if (is_last) {
 8010a22:	e7d1      	b.n	80109c8 <ip4_reass+0x2e8>
 8010a24:	08014e18 	.word	0x08014e18
 8010a28:	08014f30 	.word	0x08014f30
 8010a2c:	0801241c 	.word	0x0801241c
 8010a30:	08014ea0 	.word	0x08014ea0
 8010a34:	24009e4a 	.word	0x24009e4a
 8010a38:	24009e4c 	.word	0x24009e4c
          LWIP_ASSERT("sanity check",
 8010a3c:	4291      	cmp	r1, r2
 8010a3e:	4691      	mov	r9, r2
 8010a40:	d06c      	beq.n	8010b1c <ip4_reass+0x43c>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8010a42:	f8d9 3000 	ldr.w	r3, [r9]
 8010a46:	b133      	cbz	r3, 8010a56 <ip4_reass+0x376>
 8010a48:	4b3d      	ldr	r3, [pc, #244]	@ (8010b40 <ip4_reass+0x460>)
 8010a4a:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8010a4e:	493d      	ldr	r1, [pc, #244]	@ (8010b44 <ip4_reass+0x464>)
 8010a50:	483d      	ldr	r0, [pc, #244]	@ (8010b48 <ip4_reass+0x468>)
 8010a52:	f000 fd21 	bl	8011498 <iprintf>
 8010a56:	6862      	ldr	r2, [r4, #4]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8010a58:	f8b8 3000 	ldrh.w	r3, [r8]
 8010a5c:	443b      	add	r3, r7
 8010a5e:	f8a8 3000 	strh.w	r3, [r8]
  if (is_last) {
 8010a62:	9b02      	ldr	r3, [sp, #8]
 8010a64:	b933      	cbnz	r3, 8010a74 <ip4_reass+0x394>
    u16_t datagram_len = (u16_t)(offset + len);
 8010a66:	9b01      	ldr	r3, [sp, #4]
 8010a68:	441e      	add	r6, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8010a6a:	7fa3      	ldrb	r3, [r4, #30]
 8010a6c:	f043 0301 	orr.w	r3, r3, #1
    ipr->datagram_len = datagram_len;
 8010a70:	83a6      	strh	r6, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8010a72:	77a3      	strb	r3, [r4, #30]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8010a74:	6856      	ldr	r6, [r2, #4]
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8010a76:	8ba0      	ldrh	r0, [r4, #28]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8010a78:	68a3      	ldr	r3, [r4, #8]
 8010a7a:	68e5      	ldr	r5, [r4, #12]
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8010a7c:	3014      	adds	r0, #20
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8010a7e:	6921      	ldr	r1, [r4, #16]
 8010a80:	6962      	ldr	r2, [r4, #20]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8010a82:	b280      	uxth	r0, r0
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8010a84:	6075      	str	r5, [r6, #4]
 8010a86:	60b1      	str	r1, [r6, #8]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8010a88:	6835      	ldr	r5, [r6, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8010a8a:	60f2      	str	r2, [r6, #12]
 8010a8c:	6033      	str	r3, [r6, #0]
 8010a8e:	69a3      	ldr	r3, [r4, #24]
 8010a90:	6133      	str	r3, [r6, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8010a92:	f7f8 ffbf 	bl	8009a14 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 8010a96:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8010a98:	8070      	strh	r0, [r6, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8010a9a:	71b3      	strb	r3, [r6, #6]
 8010a9c:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8010a9e:	72b3      	strb	r3, [r6, #10]
 8010aa0:	72f3      	strb	r3, [r6, #11]
    p = ipr->p;
 8010aa2:	6866      	ldr	r6, [r4, #4]
    while (r != NULL) {
 8010aa4:	b15d      	cbz	r5, 8010abe <ip4_reass+0x3de>
      iprh = (struct ip_reass_helper *)r->payload;
 8010aa6:	686f      	ldr	r7, [r5, #4]
      pbuf_remove_header(r, IP_HLEN);
 8010aa8:	4628      	mov	r0, r5
 8010aaa:	2114      	movs	r1, #20
 8010aac:	f7f9 fe06 	bl	800a6bc <pbuf_remove_header>
      pbuf_cat(p, r);
 8010ab0:	4629      	mov	r1, r5
 8010ab2:	4630      	mov	r0, r6
 8010ab4:	f7fa f81a 	bl	800aaec <pbuf_cat>
      r = iprh->next_pbuf;
 8010ab8:	683d      	ldr	r5, [r7, #0]
    while (r != NULL) {
 8010aba:	2d00      	cmp	r5, #0
 8010abc:	d1f3      	bne.n	8010aa6 <ip4_reass+0x3c6>
    if (ipr == reassdatagrams) {
 8010abe:	f8da 5000 	ldr.w	r5, [sl]
 8010ac2:	42a5      	cmp	r5, r4
 8010ac4:	d005      	beq.n	8010ad2 <ip4_reass+0x3f2>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010ac6:	b38d      	cbz	r5, 8010b2c <ip4_reass+0x44c>
        if (ipr_prev->next == ipr) {
 8010ac8:	682b      	ldr	r3, [r5, #0]
 8010aca:	42a3      	cmp	r3, r4
 8010acc:	d014      	beq.n	8010af8 <ip4_reass+0x418>
 8010ace:	461d      	mov	r5, r3
 8010ad0:	e7f9      	b.n	8010ac6 <ip4_reass+0x3e6>
    reassdatagrams = ipr->next;
 8010ad2:	6823      	ldr	r3, [r4, #0]
 8010ad4:	f8ca 3000 	str.w	r3, [sl]
  memp_free(MEMP_REASSDATA, ipr);
 8010ad8:	4621      	mov	r1, r4
 8010ada:	2004      	movs	r0, #4
 8010adc:	f7f9 fb80 	bl	800a1e0 <memp_free>
    clen = pbuf_clen(p);
 8010ae0:	4630      	mov	r0, r6
 8010ae2:	f7f9 ffdb 	bl	800aa9c <pbuf_clen>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8010ae6:	f8b8 3000 	ldrh.w	r3, [r8]
    clen = pbuf_clen(p);
 8010aea:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8010aec:	4283      	cmp	r3, r0
 8010aee:	d306      	bcc.n	8010afe <ip4_reass+0x41e>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8010af0:	1b1b      	subs	r3, r3, r4
 8010af2:	f8a8 3000 	strh.w	r3, [r8]
    return p;
 8010af6:	e68d      	b.n	8010814 <ip4_reass+0x134>
    prev->next = ipr->next;
 8010af8:	6823      	ldr	r3, [r4, #0]
 8010afa:	602b      	str	r3, [r5, #0]
 8010afc:	e7ec      	b.n	8010ad8 <ip4_reass+0x3f8>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8010afe:	4b10      	ldr	r3, [pc, #64]	@ (8010b40 <ip4_reass+0x460>)
 8010b00:	f240 229b 	movw	r2, #667	@ 0x29b
 8010b04:	4911      	ldr	r1, [pc, #68]	@ (8010b4c <ip4_reass+0x46c>)
 8010b06:	4810      	ldr	r0, [pc, #64]	@ (8010b48 <ip4_reass+0x468>)
 8010b08:	f000 fcc6 	bl	8011498 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8010b0c:	f8b8 3000 	ldrh.w	r3, [r8]
 8010b10:	e7ee      	b.n	8010af0 <ip4_reass+0x410>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8010b12:	f8a8 2000 	strh.w	r2, [r8]
  if (is_last) {
 8010b16:	e67c      	b.n	8010812 <ip4_reass+0x132>
          LWIP_ASSERT("sanity check",
 8010b18:	4589      	cmp	r9, r1
 8010b1a:	d19d      	bne.n	8010a58 <ip4_reass+0x378>
 8010b1c:	4b08      	ldr	r3, [pc, #32]	@ (8010b40 <ip4_reass+0x460>)
 8010b1e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8010b22:	490b      	ldr	r1, [pc, #44]	@ (8010b50 <ip4_reass+0x470>)
 8010b24:	4808      	ldr	r0, [pc, #32]	@ (8010b48 <ip4_reass+0x468>)
 8010b26:	f000 fcb7 	bl	8011498 <iprintf>
 8010b2a:	e78a      	b.n	8010a42 <ip4_reass+0x362>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8010b2c:	4b04      	ldr	r3, [pc, #16]	@ (8010b40 <ip4_reass+0x460>)
 8010b2e:	f240 1245 	movw	r2, #325	@ 0x145
 8010b32:	4908      	ldr	r1, [pc, #32]	@ (8010b54 <ip4_reass+0x474>)
 8010b34:	4804      	ldr	r0, [pc, #16]	@ (8010b48 <ip4_reass+0x468>)
 8010b36:	f000 fcaf 	bl	8011498 <iprintf>
    prev->next = ipr->next;
 8010b3a:	6823      	ldr	r3, [r4, #0]
 8010b3c:	602b      	str	r3, [r5, #0]
 8010b3e:	deff      	udf	#255	@ 0xff
 8010b40:	08014e18 	.word	0x08014e18
 8010b44:	08014ef0 	.word	0x08014ef0
 8010b48:	0801241c 	.word	0x0801241c
 8010b4c:	08014f14 	.word	0x08014f14
 8010b50:	08014ee0 	.word	0x08014ee0
 8010b54:	08014ea0 	.word	0x08014ea0

08010b58 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8010b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8010b5c:	8c8b      	ldrh	r3, [r1, #36]	@ 0x24
{
 8010b5e:	b08d      	sub	sp, #52	@ 0x34
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8010b60:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
 8010b64:	4681      	mov	r9, r0
 8010b66:	9107      	str	r1, [sp, #28]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8010b68:	f1b3 0114 	subs.w	r1, r3, #20
{
 8010b6c:	920a      	str	r2, [sp, #40]	@ 0x28
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8010b6e:	bf48      	it	mi
 8010b70:	f1a3 010d 	submi.w	r1, r3, #13
 8010b74:	f3c1 03cf 	ubfx	r3, r1, #3, #16
 8010b78:	9306      	str	r3, [sp, #24]
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8010b7a:	f89a 3000 	ldrb.w	r3, [sl]
 8010b7e:	f003 030f 	and.w	r3, r3, #15
 8010b82:	2b05      	cmp	r3, #5
 8010b84:	ea4f 0683 	mov.w	r6, r3, lsl #2
 8010b88:	f040 80dd 	bne.w	8010d46 <ip4_frag+0x1ee>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8010b8c:	8943      	ldrh	r3, [r0, #10]
 8010b8e:	2b13      	cmp	r3, #19
 8010b90:	f240 80d2 	bls.w	8010d38 <ip4_frag+0x1e0>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8010b94:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 8010b98:	f7f8 ff3c 	bl	8009a14 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;

  left = (u16_t)(p->tot_len - IP_HLEN);
 8010b9c:	f8b9 c008 	ldrh.w	ip, [r9, #8]
  ofo = tmp & IP_OFFMASK;
 8010ba0:	f3c0 030c 	ubfx	r3, r0, #0, #13
  left = (u16_t)(p->tot_len - IP_HLEN);
 8010ba4:	f1ac 0c14 	sub.w	ip, ip, #20
  ofo = tmp & IP_OFFMASK;
 8010ba8:	9305      	str	r3, [sp, #20]
  mf_set = tmp & IP_MF;
 8010baa:	f400 5300 	and.w	r3, r0, #8192	@ 0x2000
  left = (u16_t)(p->tot_len - IP_HLEN);
 8010bae:	fa1f fc8c 	uxth.w	ip, ip
 8010bb2:	930b      	str	r3, [sp, #44]	@ 0x2c

  while (left) {
 8010bb4:	f1bc 0f00 	cmp.w	ip, #0
 8010bb8:	f000 80a1 	beq.w	8010cfe <ip4_frag+0x1a6>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8010bbc:	9b06      	ldr	r3, [sp, #24]
  u16_t newpbuflen = 0;
 8010bbe:	2400      	movs	r4, #0

    left_to_copy = fragsize;
    while (left_to_copy) {
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8010bc0:	464d      	mov	r5, r9
 8010bc2:	f8cd c010 	str.w	ip, [sp, #16]
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8010bc6:	00db      	lsls	r3, r3, #3
 8010bc8:	b29b      	uxth	r3, r3
 8010bca:	9308      	str	r3, [sp, #32]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8010bcc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010bd0:	2114      	movs	r1, #20
 8010bd2:	200e      	movs	r0, #14
 8010bd4:	f7f9 fe44 	bl	800a860 <pbuf_alloc>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8010bd8:	9b08      	ldr	r3, [sp, #32]
 8010bda:	9a04      	ldr	r2, [sp, #16]
    if (rambuf == NULL) {
 8010bdc:	4680      	mov	r8, r0
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8010bde:	4293      	cmp	r3, r2
 8010be0:	bf28      	it	cs
 8010be2:	4613      	movcs	r3, r2
 8010be4:	4699      	mov	r9, r3
    if (rambuf == NULL) {
 8010be6:	2800      	cmp	r0, #0
 8010be8:	f000 8098 	beq.w	8010d1c <ip4_frag+0x1c4>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8010bec:	8943      	ldrh	r3, [r0, #10]
 8010bee:	2b13      	cmp	r3, #19
 8010bf0:	f240 8097 	bls.w	8010d22 <ip4_frag+0x1ca>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8010bf4:	f8da 2000 	ldr.w	r2, [sl]
 8010bf8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010bfc:	f8da 7004 	ldr.w	r7, [sl, #4]
 8010c00:	f8da 0008 	ldr.w	r0, [sl, #8]
 8010c04:	f8da 100c 	ldr.w	r1, [sl, #12]
 8010c08:	601a      	str	r2, [r3, #0]
 8010c0a:	605f      	str	r7, [r3, #4]
 8010c0c:	6098      	str	r0, [r3, #8]
 8010c0e:	60d9      	str	r1, [r3, #12]
 8010c10:	f8da 2010 	ldr.w	r2, [sl, #16]
 8010c14:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 8010c16:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010c1a:	9309      	str	r3, [sp, #36]	@ 0x24
    while (left_to_copy) {
 8010c1c:	f1b9 0f00 	cmp.w	r9, #0
 8010c20:	d03c      	beq.n	8010c9c <ip4_frag+0x144>
      u16_t plen = (u16_t)(p->len - poff);
 8010c22:	896b      	ldrh	r3, [r5, #10]
 8010c24:	1b9c      	subs	r4, r3, r6
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8010c26:	42b3      	cmp	r3, r6
      u16_t plen = (u16_t)(p->len - poff);
 8010c28:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8010c2a:	d206      	bcs.n	8010c3a <ip4_frag+0xe2>
 8010c2c:	4b47      	ldr	r3, [pc, #284]	@ (8010d4c <ip4_frag+0x1f4>)
 8010c2e:	f240 322d 	movw	r2, #813	@ 0x32d
 8010c32:	4947      	ldr	r1, [pc, #284]	@ (8010d50 <ip4_frag+0x1f8>)
 8010c34:	4847      	ldr	r0, [pc, #284]	@ (8010d54 <ip4_frag+0x1fc>)
 8010c36:	f000 fc2f 	bl	8011498 <iprintf>
  u16_t newpbuflen = 0;
 8010c3a:	f8cd 9008 	str.w	r9, [sp, #8]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8010c3e:	9b02      	ldr	r3, [sp, #8]
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8010c40:	2005      	movs	r0, #5
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8010c42:	429c      	cmp	r4, r3
 8010c44:	bf28      	it	cs
 8010c46:	461c      	movcs	r4, r3
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8010c48:	2c00      	cmp	r4, #0
 8010c4a:	d05c      	beq.n	8010d06 <ip4_frag+0x1ae>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8010c4c:	f7f9 fa82 	bl	800a154 <memp_malloc>
 8010c50:	4683      	mov	fp, r0
      if (pcr == NULL) {
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010c52:	2241      	movs	r2, #65	@ 0x41
 8010c54:	4621      	mov	r1, r4
 8010c56:	2000      	movs	r0, #0
      if (pcr == NULL) {
 8010c58:	f1bb 0f00 	cmp.w	fp, #0
 8010c5c:	d05b      	beq.n	8010d16 <ip4_frag+0x1be>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010c5e:	9401      	str	r4, [sp, #4]
 8010c60:	465b      	mov	r3, fp
 8010c62:	686f      	ldr	r7, [r5, #4]
 8010c64:	eb07 0c06 	add.w	ip, r7, r6
 8010c68:	f8cd c000 	str.w	ip, [sp]
 8010c6c:	f7f9 fcd6 	bl	800a61c <pbuf_alloced_custom>
 8010c70:	4601      	mov	r1, r0
      if (newpbuf == NULL) {
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 8010c72:	4628      	mov	r0, r5
      if (newpbuf == NULL) {
 8010c74:	2900      	cmp	r1, #0
 8010c76:	d04a      	beq.n	8010d0e <ip4_frag+0x1b6>
 8010c78:	9103      	str	r1, [sp, #12]
      pbuf_ref(p);
 8010c7a:	f7f9 ff19 	bl	800aab0 <pbuf_ref>
      pcr->original = p;
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8010c7e:	4b36      	ldr	r3, [pc, #216]	@ (8010d58 <ip4_frag+0x200>)

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8010c80:	4640      	mov	r0, r8
 8010c82:	9903      	ldr	r1, [sp, #12]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8010c84:	f8cb 3010 	str.w	r3, [fp, #16]
      pcr->original = p;
 8010c88:	f8cb 5014 	str.w	r5, [fp, #20]
      pbuf_cat(rambuf, newpbuf);
 8010c8c:	f7f9 ff2e 	bl	800aaec <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8010c90:	9b02      	ldr	r3, [sp, #8]
 8010c92:	1b1f      	subs	r7, r3, r4
 8010c94:	b2bb      	uxth	r3, r7
 8010c96:	9302      	str	r3, [sp, #8]
      if (left_to_copy) {
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d134      	bne.n	8010d06 <ip4_frag+0x1ae>
    }
    poff = (u16_t)(poff + newpbuflen);
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8010c9c:	9b07      	ldr	r3, [sp, #28]
    poff = (u16_t)(poff + newpbuflen);
 8010c9e:	4426      	add	r6, r4

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8010ca0:	9a05      	ldr	r2, [sp, #20]
    last = (left <= netif->mtu - IP_HLEN);
 8010ca2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
    poff = (u16_t)(poff + newpbuflen);
 8010ca4:	b2b6      	uxth	r6, r6
    tmp = (IP_OFFMASK & (ofo));
 8010ca6:	f3c2 000c 	ubfx	r0, r2, #0, #13
    if (!last || mf_set) {
 8010caa:	9a04      	ldr	r2, [sp, #16]
    last = (left <= netif->mtu - IP_HLEN);
 8010cac:	3b13      	subs	r3, #19
    if (!last || mf_set) {
 8010cae:	4293      	cmp	r3, r2
 8010cb0:	dd3f      	ble.n	8010d32 <ip4_frag+0x1da>
 8010cb2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d13c      	bne.n	8010d32 <ip4_frag+0x1da>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8010cb8:	f7f8 feac 	bl	8009a14 <lwip_htons>
 8010cbc:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8010cbe:	80f8      	strh	r0, [r7, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8010cc0:	f109 0014 	add.w	r0, r9, #20
 8010cc4:	b280      	uxth	r0, r0
 8010cc6:	f7f8 fea5 	bl	8009a14 <lwip_htons>
    IPH_CHKSUM_SET(iphdr, 0);
 8010cca:	2300      	movs	r3, #0
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8010ccc:	8078      	strh	r0, [r7, #2]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8010cce:	4641      	mov	r1, r8
 8010cd0:	9807      	ldr	r0, [sp, #28]
 8010cd2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
    IPH_CHKSUM_SET(iphdr, 0);
 8010cd4:	72bb      	strb	r3, [r7, #10]
 8010cd6:	72fb      	strb	r3, [r7, #11]
    netif->output(netif, rambuf, dest);
 8010cd8:	6943      	ldr	r3, [r0, #20]
 8010cda:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8010cdc:	4640      	mov	r0, r8
 8010cde:	f7f9 fd4f 	bl	800a780 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8010ce2:	9b04      	ldr	r3, [sp, #16]
 8010ce4:	eba3 0909 	sub.w	r9, r3, r9
    ofo = (u16_t)(ofo + nfb);
 8010ce8:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 8010cec:	4413      	add	r3, r2
    left = (u16_t)(left - fragsize);
 8010cee:	fa1f f289 	uxth.w	r2, r9
    ofo = (u16_t)(ofo + nfb);
 8010cf2:	b29b      	uxth	r3, r3
    left = (u16_t)(left - fragsize);
 8010cf4:	9204      	str	r2, [sp, #16]
    ofo = (u16_t)(ofo + nfb);
 8010cf6:	9305      	str	r3, [sp, #20]
  while (left) {
 8010cf8:	2a00      	cmp	r2, #0
 8010cfa:	f47f af67 	bne.w	8010bcc <ip4_frag+0x74>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8010cfe:	2000      	movs	r0, #0
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
}
 8010d00:	b00d      	add	sp, #52	@ 0x34
 8010d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        p = p->next;
 8010d06:	682d      	ldr	r5, [r5, #0]
      u16_t plen = (u16_t)(p->len - poff);
 8010d08:	2600      	movs	r6, #0
 8010d0a:	896c      	ldrh	r4, [r5, #10]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8010d0c:	e797      	b.n	8010c3e <ip4_frag+0xe6>
  memp_free(MEMP_FRAG_PBUF, p);
 8010d0e:	4659      	mov	r1, fp
 8010d10:	2005      	movs	r0, #5
 8010d12:	f7f9 fa65 	bl	800a1e0 <memp_free>
        pbuf_free(rambuf);
 8010d16:	4640      	mov	r0, r8
 8010d18:	f7f9 fd32 	bl	800a780 <pbuf_free>
  return ERR_MEM;
 8010d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8010d20:	e7ee      	b.n	8010d00 <ip4_frag+0x1a8>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8010d22:	4b0a      	ldr	r3, [pc, #40]	@ (8010d4c <ip4_frag+0x1f4>)
 8010d24:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8010d28:	490c      	ldr	r1, [pc, #48]	@ (8010d5c <ip4_frag+0x204>)
 8010d2a:	480a      	ldr	r0, [pc, #40]	@ (8010d54 <ip4_frag+0x1fc>)
 8010d2c:	f000 fbb4 	bl	8011498 <iprintf>
 8010d30:	e760      	b.n	8010bf4 <ip4_frag+0x9c>
      tmp = tmp | IP_MF;
 8010d32:	f440 5000 	orr.w	r0, r0, #8192	@ 0x2000
 8010d36:	e7bf      	b.n	8010cb8 <ip4_frag+0x160>
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8010d38:	4b04      	ldr	r3, [pc, #16]	@ (8010d4c <ip4_frag+0x1f4>)
 8010d3a:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8010d3e:	4908      	ldr	r1, [pc, #32]	@ (8010d60 <ip4_frag+0x208>)
 8010d40:	4804      	ldr	r0, [pc, #16]	@ (8010d54 <ip4_frag+0x1fc>)
 8010d42:	f000 fba9 	bl	8011498 <iprintf>
    return ERR_VAL;
 8010d46:	f06f 0005 	mvn.w	r0, #5
 8010d4a:	e7d9      	b.n	8010d00 <ip4_frag+0x1a8>
 8010d4c:	08014e18 	.word	0x08014e18
 8010d50:	08014f8c 	.word	0x08014f8c
 8010d54:	0801241c 	.word	0x0801241c
 8010d58:	080104c1 	.word	0x080104c1
 8010d5c:	08014f6c 	.word	0x08014f6c
 8010d60:	08014f50 	.word	0x08014f50

08010d64 <ethernet_input>:
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8010d64:	8943      	ldrh	r3, [r0, #10]
 8010d66:	2b0e      	cmp	r3, #14
{
 8010d68:	b570      	push	{r4, r5, r6, lr}
 8010d6a:	4604      	mov	r4, r0
  if (p->len <= SIZEOF_ETH_HDR) {
 8010d6c:	d91b      	bls.n	8010da6 <ethernet_input+0x42>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8010d6e:	7bc3      	ldrb	r3, [r0, #15]
 8010d70:	460d      	mov	r5, r1
 8010d72:	b91b      	cbnz	r3, 8010d7c <ethernet_input+0x18>
    p->if_idx = netif_get_index(netif);
 8010d74:	f891 3030 	ldrb.w	r3, [r1, #48]	@ 0x30
 8010d78:	3301      	adds	r3, #1
 8010d7a:	73c3      	strb	r3, [r0, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8010d7c:	6860      	ldr	r0, [r4, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8010d7e:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 8010d80:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 8010d82:	07d9      	lsls	r1, r3, #31
 8010d84:	d50a      	bpl.n	8010d9c <ethernet_input+0x38>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8010d86:	2b01      	cmp	r3, #1
 8010d88:	d030      	beq.n	8010dec <ethernet_input+0x88>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8010d8a:	2206      	movs	r2, #6
 8010d8c:	491d      	ldr	r1, [pc, #116]	@ (8010e04 <ethernet_input+0xa0>)
 8010d8e:	f000 fccb 	bl	8011728 <memcmp>
 8010d92:	b918      	cbnz	r0, 8010d9c <ethernet_input+0x38>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8010d94:	7b63      	ldrb	r3, [r4, #13]
 8010d96:	f043 0308 	orr.w	r3, r3, #8
 8010d9a:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 8010d9c:	2e08      	cmp	r6, #8
 8010d9e:	d016      	beq.n	8010dce <ethernet_input+0x6a>
 8010da0:	f5b6 6fc1 	cmp.w	r6, #1544	@ 0x608
 8010da4:	d004      	beq.n	8010db0 <ethernet_input+0x4c>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 8010da6:	4620      	mov	r0, r4
 8010da8:	f7f9 fcea 	bl	800a780 <pbuf_free>
  return ERR_OK;
}
 8010dac:	2000      	movs	r0, #0
 8010dae:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010db0:	f895 302d 	ldrb.w	r3, [r5, #45]	@ 0x2d
 8010db4:	071b      	lsls	r3, r3, #28
 8010db6:	d5f6      	bpl.n	8010da6 <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010db8:	210e      	movs	r1, #14
 8010dba:	4620      	mov	r0, r4
 8010dbc:	f7f9 fc7e 	bl	800a6bc <pbuf_remove_header>
 8010dc0:	2800      	cmp	r0, #0
 8010dc2:	d1f0      	bne.n	8010da6 <ethernet_input+0x42>
        etharp_input(p, netif);
 8010dc4:	4629      	mov	r1, r5
 8010dc6:	4620      	mov	r0, r4
 8010dc8:	f7fe fe86 	bl	800fad8 <etharp_input>
      break;
 8010dcc:	e7ee      	b.n	8010dac <ethernet_input+0x48>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010dce:	f895 302d 	ldrb.w	r3, [r5, #45]	@ 0x2d
 8010dd2:	071a      	lsls	r2, r3, #28
 8010dd4:	d5e7      	bpl.n	8010da6 <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010dd6:	210e      	movs	r1, #14
 8010dd8:	4620      	mov	r0, r4
 8010dda:	f7f9 fc6f 	bl	800a6bc <pbuf_remove_header>
 8010dde:	2800      	cmp	r0, #0
 8010de0:	d1e1      	bne.n	8010da6 <ethernet_input+0x42>
        ip4_input(p, netif);
 8010de2:	4629      	mov	r1, r5
 8010de4:	4620      	mov	r0, r4
 8010de6:	f7ff f9db 	bl	80101a0 <ip4_input>
      break;
 8010dea:	e7df      	b.n	8010dac <ethernet_input+0x48>
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8010dec:	7843      	ldrb	r3, [r0, #1]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d1d4      	bne.n	8010d9c <ethernet_input+0x38>
 8010df2:	7883      	ldrb	r3, [r0, #2]
 8010df4:	2b5e      	cmp	r3, #94	@ 0x5e
 8010df6:	d1d1      	bne.n	8010d9c <ethernet_input+0x38>
        p->flags |= PBUF_FLAG_LLMCAST;
 8010df8:	7b63      	ldrb	r3, [r4, #13]
 8010dfa:	f043 0310 	orr.w	r3, r3, #16
 8010dfe:	7363      	strb	r3, [r4, #13]
 8010e00:	e7cc      	b.n	8010d9c <ethernet_input+0x38>
 8010e02:	bf00      	nop
 8010e04:	08015010 	.word	0x08015010

08010e08 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8010e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e0c:	460c      	mov	r4, r1
 8010e0e:	4605      	mov	r5, r0
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8010e10:	f8bd 0018 	ldrh.w	r0, [sp, #24]
                u16_t eth_type) {
 8010e14:	4616      	mov	r6, r2
 8010e16:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 8010e18:	f7f8 fdfc 	bl	8009a14 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8010e1c:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 8010e1e:	4680      	mov	r8, r0
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8010e20:	4620      	mov	r0, r4
 8010e22:	f7f9 fc1b 	bl	800a65c <pbuf_add_header>
 8010e26:	b9e0      	cbnz	r0, 8010e62 <ethernet_output+0x5a>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8010e28:	6861      	ldr	r1, [r4, #4]
  ethhdr->type = eth_type_be;
 8010e2a:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8010e2e:	683b      	ldr	r3, [r7, #0]
 8010e30:	600b      	str	r3, [r1, #0]
 8010e32:	88bb      	ldrh	r3, [r7, #4]
 8010e34:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8010e36:	6833      	ldr	r3, [r6, #0]
 8010e38:	f8c1 3006 	str.w	r3, [r1, #6]
 8010e3c:	88b3      	ldrh	r3, [r6, #4]
 8010e3e:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8010e40:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8010e44:	2b06      	cmp	r3, #6
 8010e46:	d006      	beq.n	8010e56 <ethernet_output+0x4e>
 8010e48:	4b08      	ldr	r3, [pc, #32]	@ (8010e6c <ethernet_output+0x64>)
 8010e4a:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8010e4e:	4908      	ldr	r1, [pc, #32]	@ (8010e70 <ethernet_output+0x68>)
 8010e50:	4808      	ldr	r0, [pc, #32]	@ (8010e74 <ethernet_output+0x6c>)
 8010e52:	f000 fb21 	bl	8011498 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8010e56:	69ab      	ldr	r3, [r5, #24]
 8010e58:	4621      	mov	r1, r4
 8010e5a:	4628      	mov	r0, r5
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 8010e5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 8010e60:	4718      	bx	r3
}
 8010e62:	f06f 0001 	mvn.w	r0, #1
 8010e66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e6a:	bf00      	nop
 8010e6c:	08014f9c 	.word	0x08014f9c
 8010e70:	08014fd4 	.word	0x08014fd4
 8010e74:	0801241c 	.word	0x0801241c

08010e78 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8010e78:	b530      	push	{r4, r5, lr}
 8010e7a:	b085      	sub	sp, #20
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8010e7c:	2200      	movs	r2, #0
 8010e7e:	2300      	movs	r3, #0
 8010e80:	2504      	movs	r5, #4
{
 8010e82:	4604      	mov	r4, r0
  osMessageQDef(QUEUE, size, void *);
 8010e84:	9100      	str	r1, [sp, #0]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8010e86:	4668      	mov	r0, sp
 8010e88:	2100      	movs	r1, #0
  osMessageQDef(QUEUE, size, void *);
 8010e8a:	9501      	str	r5, [sp, #4]
 8010e8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8010e90:	f7f3 fffe 	bl	8004e90 <osMessageCreate>
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8010e94:	fab0 f380 	clz	r3, r0
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8010e98:	6020      	str	r0, [r4, #0]
  if(*mbox == NULL)
 8010e9a:	095b      	lsrs	r3, r3, #5
    return ERR_MEM;

  return ERR_OK;
}
 8010e9c:	4258      	negs	r0, r3
 8010e9e:	b005      	add	sp, #20
 8010ea0:	bd30      	pop	{r4, r5, pc}
 8010ea2:	bf00      	nop

08010ea4 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8010ea4:	b510      	push	{r4, lr}
 8010ea6:	4604      	mov	r4, r0
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8010ea8:	6800      	ldr	r0, [r0, #0]
 8010eaa:	f7f4 f86d 	bl	8004f88 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8010eae:	6820      	ldr	r0, [r4, #0]
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8010eb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  osMessageDelete(*mbox);
 8010eb4:	f7f4 b870 	b.w	8004f98 <osMessageDelete>

08010eb8 <sys_mbox_trypost>:
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8010eb8:	2200      	movs	r2, #0
 8010eba:	6800      	ldr	r0, [r0, #0]
{
 8010ebc:	b508      	push	{r3, lr}
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8010ebe:	f7f3 fff9 	bl	8004eb4 <osMessagePut>
 8010ec2:	3800      	subs	r0, #0
 8010ec4:	bf18      	it	ne
 8010ec6:	2001      	movne	r0, #1
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 8010ec8:	4240      	negs	r0, r0
 8010eca:	bd08      	pop	{r3, pc}

08010ecc <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8010ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010ece:	4614      	mov	r4, r2
 8010ed0:	b085      	sub	sp, #20
 8010ed2:	4605      	mov	r5, r0
 8010ed4:	460f      	mov	r7, r1
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8010ed6:	f7f3 feb7 	bl	8004c48 <osKernelSysTick>
 8010eda:	4606      	mov	r6, r0
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8010edc:	b15c      	cbz	r4, 8010ef6 <sys_arch_mbox_fetch+0x2a>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8010ede:	4622      	mov	r2, r4
 8010ee0:	6829      	ldr	r1, [r5, #0]
 8010ee2:	a801      	add	r0, sp, #4
 8010ee4:	f7f4 f810 	bl	8004f08 <osMessageGet>

    if(event.status == osEventMessage)
 8010ee8:	9b01      	ldr	r3, [sp, #4]
 8010eea:	2b10      	cmp	r3, #16
 8010eec:	d009      	beq.n	8010f02 <sys_arch_mbox_fetch+0x36>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8010eee:	f04f 30ff 	mov.w	r0, #4294967295
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8010ef2:	b005      	add	sp, #20
 8010ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    event = osMessageGet (*mbox, osWaitForever);
 8010ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8010efa:	6829      	ldr	r1, [r5, #0]
 8010efc:	a801      	add	r0, sp, #4
 8010efe:	f7f4 f803 	bl	8004f08 <osMessageGet>
    *msg = (void *)event.value.v;
 8010f02:	9b02      	ldr	r3, [sp, #8]
 8010f04:	603b      	str	r3, [r7, #0]
    return (osKernelSysTick() - starttime);
 8010f06:	f7f3 fe9f 	bl	8004c48 <osKernelSysTick>
 8010f0a:	1b80      	subs	r0, r0, r6
}
 8010f0c:	b005      	add	sp, #20
 8010f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010f10 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8010f10:	b510      	push	{r4, lr}
 8010f12:	4604      	mov	r4, r0
 8010f14:	b084      	sub	sp, #16
 8010f16:	460b      	mov	r3, r1
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8010f18:	2200      	movs	r2, #0
 8010f1a:	6821      	ldr	r1, [r4, #0]
 8010f1c:	a801      	add	r0, sp, #4
{
 8010f1e:	461c      	mov	r4, r3
  event = osMessageGet (*mbox, 0);
 8010f20:	f7f3 fff2 	bl	8004f08 <osMessageGet>

  if(event.status == osEventMessage)
 8010f24:	9b01      	ldr	r3, [sp, #4]
 8010f26:	2b10      	cmp	r3, #16
 8010f28:	d003      	beq.n	8010f32 <sys_arch_mbox_tryfetch+0x22>
#endif
    return ERR_OK;
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8010f2a:	f04f 30ff 	mov.w	r0, #4294967295
  }
}
 8010f2e:	b004      	add	sp, #16
 8010f30:	bd10      	pop	{r4, pc}
    *msg = (void *)event.value.v;
 8010f32:	9b02      	ldr	r3, [sp, #8]
    return ERR_OK;
 8010f34:	2000      	movs	r0, #0
    *msg = (void *)event.value.v;
 8010f36:	6023      	str	r3, [r4, #0]
}
 8010f38:	b004      	add	sp, #16
 8010f3a:	bd10      	pop	{r4, pc}

08010f3c <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
 8010f3c:	6800      	ldr	r0, [r0, #0]
 8010f3e:	3800      	subs	r0, #0
 8010f40:	bf18      	it	ne
 8010f42:	2001      	movne	r0, #1
 8010f44:	4770      	bx	lr
 8010f46:	bf00      	nop

08010f48 <sys_mbox_set_invalid>:
    return 0;
  else
    return 1;
}
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
 8010f48:	2300      	movs	r3, #0
 8010f4a:	6003      	str	r3, [r0, #0]
 8010f4c:	4770      	bx	lr
 8010f4e:	bf00      	nop

08010f50 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8010f50:	b530      	push	{r4, r5, lr}
 8010f52:	b083      	sub	sp, #12
 8010f54:	4605      	mov	r5, r0
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8010f56:	2300      	movs	r3, #0
{
 8010f58:	460c      	mov	r4, r1
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8010f5a:	4668      	mov	r0, sp
 8010f5c:	2101      	movs	r1, #1
  osSemaphoreDef(SEM);
 8010f5e:	e9cd 3300 	strd	r3, r3, [sp]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8010f62:	f7f3 ff0b 	bl	8004d7c <osSemaphoreCreate>
 8010f66:	6028      	str	r0, [r5, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8010f68:	b138      	cbz	r0, 8010f7a <sys_sem_new+0x2a>
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
  }

  if(count == 0)	// Means it can't be taken
 8010f6a:	b114      	cbz	r4, 8010f72 <sys_sem_new+0x22>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8010f6c:	2000      	movs	r0, #0
}
 8010f6e:	b003      	add	sp, #12
 8010f70:	bd30      	pop	{r4, r5, pc}
    osSemaphoreWait(*sem, 0);
 8010f72:	4621      	mov	r1, r4
 8010f74:	f7f3 ff2e 	bl	8004dd4 <osSemaphoreWait>
 8010f78:	e7f8      	b.n	8010f6c <sys_sem_new+0x1c>
    return ERR_MEM;
 8010f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8010f7e:	e7f6      	b.n	8010f6e <sys_sem_new+0x1e>

08010f80 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8010f80:	b570      	push	{r4, r5, r6, lr}
 8010f82:	460e      	mov	r6, r1
 8010f84:	4604      	mov	r4, r0
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8010f86:	f7f3 fe5f 	bl	8004c48 <osKernelSysTick>
 8010f8a:	4605      	mov	r5, r0
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8010f8c:	b956      	cbnz	r6, 8010fa4 <sys_arch_sem_wait+0x24>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8010f8e:	f04f 31ff 	mov.w	r1, #4294967295
 8010f92:	6820      	ldr	r0, [r4, #0]
 8010f94:	f7f3 ff1e 	bl	8004dd4 <osSemaphoreWait>
 8010f98:	2800      	cmp	r0, #0
 8010f9a:	d1f8      	bne.n	8010f8e <sys_arch_sem_wait+0xe>
    return (osKernelSysTick() - starttime);
 8010f9c:	f7f3 fe54 	bl	8004c48 <osKernelSysTick>
 8010fa0:	1b40      	subs	r0, r0, r5
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8010fa2:	bd70      	pop	{r4, r5, r6, pc}
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8010fa4:	4631      	mov	r1, r6
 8010fa6:	6820      	ldr	r0, [r4, #0]
 8010fa8:	f7f3 ff14 	bl	8004dd4 <osSemaphoreWait>
 8010fac:	2800      	cmp	r0, #0
 8010fae:	d0f5      	beq.n	8010f9c <sys_arch_sem_wait+0x1c>
      return SYS_ARCH_TIMEOUT;
 8010fb0:	f04f 30ff 	mov.w	r0, #4294967295
}
 8010fb4:	bd70      	pop	{r4, r5, r6, pc}
 8010fb6:	bf00      	nop

08010fb8 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
  osSemaphoreRelease(*sem);
 8010fb8:	6800      	ldr	r0, [r0, #0]
 8010fba:	f7f3 bf37 	b.w	8004e2c <osSemaphoreRelease>
 8010fbe:	bf00      	nop

08010fc0 <sys_sem_free>:
{
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8010fc0:	6800      	ldr	r0, [r0, #0]
 8010fc2:	f7f3 bf59 	b.w	8004e78 <osSemaphoreDelete>
 8010fc6:	bf00      	nop

08010fc8 <sys_sem_valid>:
}
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
  if (*sem == SYS_SEM_NULL)
 8010fc8:	6800      	ldr	r0, [r0, #0]
    return 0;
  else
    return 1;
}
 8010fca:	3800      	subs	r0, #0
 8010fcc:	bf18      	it	ne
 8010fce:	2001      	movne	r0, #1
 8010fd0:	4770      	bx	lr
 8010fd2:	bf00      	nop

08010fd4 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
  *sem = SYS_SEM_NULL;
 8010fd4:	2300      	movs	r3, #0
 8010fd6:	6003      	str	r3, [r0, #0]
}
 8010fd8:	4770      	bx	lr
 8010fda:	bf00      	nop

08010fdc <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8010fdc:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8010fde:	4803      	ldr	r0, [pc, #12]	@ (8010fec <sys_init+0x10>)
 8010fe0:	f7f3 fe72 	bl	8004cc8 <osMutexCreate>
 8010fe4:	4b02      	ldr	r3, [pc, #8]	@ (8010ff0 <sys_init+0x14>)
 8010fe6:	6018      	str	r0, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8010fe8:	bd08      	pop	{r3, pc}
 8010fea:	bf00      	nop
 8010fec:	08015018 	.word	0x08015018
 8010ff0:	24009e50 	.word	0x24009e50

08010ff4 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8010ff4:	b510      	push	{r4, lr}
 8010ff6:	b082      	sub	sp, #8

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8010ff8:	2300      	movs	r3, #0
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8010ffa:	4604      	mov	r4, r0
  *mutex = osMutexCreate(osMutex(MUTEX));
 8010ffc:	4668      	mov	r0, sp
  osMutexDef(MUTEX);
 8010ffe:	e9cd 3300 	strd	r3, r3, [sp]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8011002:	f7f3 fe61 	bl	8004cc8 <osMutexCreate>
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8011006:	fab0 f380 	clz	r3, r0
  *mutex = osMutexCreate(osMutex(MUTEX));
 801100a:	6020      	str	r0, [r4, #0]
  if(*mutex == NULL)
 801100c:	095b      	lsrs	r3, r3, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 801100e:	4258      	negs	r0, r3
 8011010:	b002      	add	sp, #8
 8011012:	bd10      	pop	{r4, pc}

08011014 <sys_mutex_lock>:
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8011014:	f04f 31ff 	mov.w	r1, #4294967295
 8011018:	6800      	ldr	r0, [r0, #0]
 801101a:	f7f3 be5d 	b.w	8004cd8 <osMutexWait>
 801101e:	bf00      	nop

08011020 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 8011020:	6800      	ldr	r0, [r0, #0]
 8011022:	f7f3 be85 	b.w	8004d30 <osMutexRelease>
 8011026:	bf00      	nop

08011028 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8011028:	b500      	push	{lr}
 801102a:	b089      	sub	sp, #36	@ 0x24
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801102c:	f04f 0c00 	mov.w	ip, #0
 8011030:	9001      	str	r0, [sp, #4]
{
 8011032:	980a      	ldr	r0, [sp, #40]	@ 0x28
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8011034:	9102      	str	r1, [sp, #8]
  return osThreadCreate(&os_thread_def, arg);
 8011036:	4611      	mov	r1, r2
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8011038:	f8ad 000c 	strh.w	r0, [sp, #12]
  return osThreadCreate(&os_thread_def, arg);
 801103c:	a801      	add	r0, sp, #4
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801103e:	f8cd c012 	str.w	ip, [sp, #18]
 8011042:	f8cd c016 	str.w	ip, [sp, #22]
 8011046:	f8cd c00e 	str.w	ip, [sp, #14]
 801104a:	f8cd c01a 	str.w	ip, [sp, #26]
 801104e:	f8ad c01e 	strh.w	ip, [sp, #30]
 8011052:	9305      	str	r3, [sp, #20]
  return osThreadCreate(&os_thread_def, arg);
 8011054:	f7f3 fe00 	bl	8004c58 <osThreadCreate>
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8011058:	b009      	add	sp, #36	@ 0x24
 801105a:	f85d fb04 	ldr.w	pc, [sp], #4
 801105e:	bf00      	nop

08011060 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8011060:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8011062:	4b04      	ldr	r3, [pc, #16]	@ (8011074 <sys_arch_protect+0x14>)
 8011064:	f04f 31ff 	mov.w	r1, #4294967295
 8011068:	6818      	ldr	r0, [r3, #0]
 801106a:	f7f3 fe35 	bl	8004cd8 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
}
 801106e:	2001      	movs	r0, #1
 8011070:	bd08      	pop	{r3, pc}
 8011072:	bf00      	nop
 8011074:	24009e50 	.word	0x24009e50

08011078 <sys_arch_unprotect>:
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8011078:	4b01      	ldr	r3, [pc, #4]	@ (8011080 <sys_arch_unprotect+0x8>)
 801107a:	6818      	ldr	r0, [r3, #0]
 801107c:	f7f3 be58 	b.w	8004d30 <osMutexRelease>
 8011080:	24009e50 	.word	0x24009e50

08011084 <__assert_func>:
 8011084:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011086:	4614      	mov	r4, r2
 8011088:	461a      	mov	r2, r3
 801108a:	4b09      	ldr	r3, [pc, #36]	@ (80110b0 <__assert_func+0x2c>)
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	4605      	mov	r5, r0
 8011090:	68d8      	ldr	r0, [r3, #12]
 8011092:	b954      	cbnz	r4, 80110aa <__assert_func+0x26>
 8011094:	4b07      	ldr	r3, [pc, #28]	@ (80110b4 <__assert_func+0x30>)
 8011096:	461c      	mov	r4, r3
 8011098:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801109c:	9100      	str	r1, [sp, #0]
 801109e:	462b      	mov	r3, r5
 80110a0:	4905      	ldr	r1, [pc, #20]	@ (80110b8 <__assert_func+0x34>)
 80110a2:	f000 f9c9 	bl	8011438 <fiprintf>
 80110a6:	f000 fc38 	bl	801191a <abort>
 80110aa:	4b04      	ldr	r3, [pc, #16]	@ (80110bc <__assert_func+0x38>)
 80110ac:	e7f4      	b.n	8011098 <__assert_func+0x14>
 80110ae:	bf00      	nop
 80110b0:	2400003c 	.word	0x2400003c
 80110b4:	0801505b 	.word	0x0801505b
 80110b8:	0801502d 	.word	0x0801502d
 80110bc:	08015020 	.word	0x08015020

080110c0 <calloc>:
 80110c0:	4b02      	ldr	r3, [pc, #8]	@ (80110cc <calloc+0xc>)
 80110c2:	460a      	mov	r2, r1
 80110c4:	4601      	mov	r1, r0
 80110c6:	6818      	ldr	r0, [r3, #0]
 80110c8:	f000 b802 	b.w	80110d0 <_calloc_r>
 80110cc:	2400003c 	.word	0x2400003c

080110d0 <_calloc_r>:
 80110d0:	b570      	push	{r4, r5, r6, lr}
 80110d2:	fba1 5402 	umull	r5, r4, r1, r2
 80110d6:	b93c      	cbnz	r4, 80110e8 <_calloc_r+0x18>
 80110d8:	4629      	mov	r1, r5
 80110da:	f000 f83f 	bl	801115c <_malloc_r>
 80110de:	4606      	mov	r6, r0
 80110e0:	b928      	cbnz	r0, 80110ee <_calloc_r+0x1e>
 80110e2:	2600      	movs	r6, #0
 80110e4:	4630      	mov	r0, r6
 80110e6:	bd70      	pop	{r4, r5, r6, pc}
 80110e8:	220c      	movs	r2, #12
 80110ea:	6002      	str	r2, [r0, #0]
 80110ec:	e7f9      	b.n	80110e2 <_calloc_r+0x12>
 80110ee:	462a      	mov	r2, r5
 80110f0:	4621      	mov	r1, r4
 80110f2:	f000 fb29 	bl	8011748 <memset>
 80110f6:	e7f5      	b.n	80110e4 <_calloc_r+0x14>

080110f8 <malloc>:
 80110f8:	4b02      	ldr	r3, [pc, #8]	@ (8011104 <malloc+0xc>)
 80110fa:	4601      	mov	r1, r0
 80110fc:	6818      	ldr	r0, [r3, #0]
 80110fe:	f000 b82d 	b.w	801115c <_malloc_r>
 8011102:	bf00      	nop
 8011104:	2400003c 	.word	0x2400003c

08011108 <free>:
 8011108:	4b02      	ldr	r3, [pc, #8]	@ (8011114 <free+0xc>)
 801110a:	4601      	mov	r1, r0
 801110c:	6818      	ldr	r0, [r3, #0]
 801110e:	f000 bc0b 	b.w	8011928 <_free_r>
 8011112:	bf00      	nop
 8011114:	2400003c 	.word	0x2400003c

08011118 <sbrk_aligned>:
 8011118:	b570      	push	{r4, r5, r6, lr}
 801111a:	4e0f      	ldr	r6, [pc, #60]	@ (8011158 <sbrk_aligned+0x40>)
 801111c:	460c      	mov	r4, r1
 801111e:	6831      	ldr	r1, [r6, #0]
 8011120:	4605      	mov	r5, r0
 8011122:	b911      	cbnz	r1, 801112a <sbrk_aligned+0x12>
 8011124:	f000 fba2 	bl	801186c <_sbrk_r>
 8011128:	6030      	str	r0, [r6, #0]
 801112a:	4621      	mov	r1, r4
 801112c:	4628      	mov	r0, r5
 801112e:	f000 fb9d 	bl	801186c <_sbrk_r>
 8011132:	1c43      	adds	r3, r0, #1
 8011134:	d103      	bne.n	801113e <sbrk_aligned+0x26>
 8011136:	f04f 34ff 	mov.w	r4, #4294967295
 801113a:	4620      	mov	r0, r4
 801113c:	bd70      	pop	{r4, r5, r6, pc}
 801113e:	1cc4      	adds	r4, r0, #3
 8011140:	f024 0403 	bic.w	r4, r4, #3
 8011144:	42a0      	cmp	r0, r4
 8011146:	d0f8      	beq.n	801113a <sbrk_aligned+0x22>
 8011148:	1a21      	subs	r1, r4, r0
 801114a:	4628      	mov	r0, r5
 801114c:	f000 fb8e 	bl	801186c <_sbrk_r>
 8011150:	3001      	adds	r0, #1
 8011152:	d1f2      	bne.n	801113a <sbrk_aligned+0x22>
 8011154:	e7ef      	b.n	8011136 <sbrk_aligned+0x1e>
 8011156:	bf00      	nop
 8011158:	24009e54 	.word	0x24009e54

0801115c <_malloc_r>:
 801115c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011160:	1ccd      	adds	r5, r1, #3
 8011162:	f025 0503 	bic.w	r5, r5, #3
 8011166:	3508      	adds	r5, #8
 8011168:	2d0c      	cmp	r5, #12
 801116a:	bf38      	it	cc
 801116c:	250c      	movcc	r5, #12
 801116e:	2d00      	cmp	r5, #0
 8011170:	4606      	mov	r6, r0
 8011172:	db01      	blt.n	8011178 <_malloc_r+0x1c>
 8011174:	42a9      	cmp	r1, r5
 8011176:	d904      	bls.n	8011182 <_malloc_r+0x26>
 8011178:	230c      	movs	r3, #12
 801117a:	6033      	str	r3, [r6, #0]
 801117c:	2000      	movs	r0, #0
 801117e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011182:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011258 <_malloc_r+0xfc>
 8011186:	f000 f869 	bl	801125c <__malloc_lock>
 801118a:	f8d8 3000 	ldr.w	r3, [r8]
 801118e:	461c      	mov	r4, r3
 8011190:	bb44      	cbnz	r4, 80111e4 <_malloc_r+0x88>
 8011192:	4629      	mov	r1, r5
 8011194:	4630      	mov	r0, r6
 8011196:	f7ff ffbf 	bl	8011118 <sbrk_aligned>
 801119a:	1c43      	adds	r3, r0, #1
 801119c:	4604      	mov	r4, r0
 801119e:	d158      	bne.n	8011252 <_malloc_r+0xf6>
 80111a0:	f8d8 4000 	ldr.w	r4, [r8]
 80111a4:	4627      	mov	r7, r4
 80111a6:	2f00      	cmp	r7, #0
 80111a8:	d143      	bne.n	8011232 <_malloc_r+0xd6>
 80111aa:	2c00      	cmp	r4, #0
 80111ac:	d04b      	beq.n	8011246 <_malloc_r+0xea>
 80111ae:	6823      	ldr	r3, [r4, #0]
 80111b0:	4639      	mov	r1, r7
 80111b2:	4630      	mov	r0, r6
 80111b4:	eb04 0903 	add.w	r9, r4, r3
 80111b8:	f000 fb58 	bl	801186c <_sbrk_r>
 80111bc:	4581      	cmp	r9, r0
 80111be:	d142      	bne.n	8011246 <_malloc_r+0xea>
 80111c0:	6821      	ldr	r1, [r4, #0]
 80111c2:	1a6d      	subs	r5, r5, r1
 80111c4:	4629      	mov	r1, r5
 80111c6:	4630      	mov	r0, r6
 80111c8:	f7ff ffa6 	bl	8011118 <sbrk_aligned>
 80111cc:	3001      	adds	r0, #1
 80111ce:	d03a      	beq.n	8011246 <_malloc_r+0xea>
 80111d0:	6823      	ldr	r3, [r4, #0]
 80111d2:	442b      	add	r3, r5
 80111d4:	6023      	str	r3, [r4, #0]
 80111d6:	f8d8 3000 	ldr.w	r3, [r8]
 80111da:	685a      	ldr	r2, [r3, #4]
 80111dc:	bb62      	cbnz	r2, 8011238 <_malloc_r+0xdc>
 80111de:	f8c8 7000 	str.w	r7, [r8]
 80111e2:	e00f      	b.n	8011204 <_malloc_r+0xa8>
 80111e4:	6822      	ldr	r2, [r4, #0]
 80111e6:	1b52      	subs	r2, r2, r5
 80111e8:	d420      	bmi.n	801122c <_malloc_r+0xd0>
 80111ea:	2a0b      	cmp	r2, #11
 80111ec:	d917      	bls.n	801121e <_malloc_r+0xc2>
 80111ee:	1961      	adds	r1, r4, r5
 80111f0:	42a3      	cmp	r3, r4
 80111f2:	6025      	str	r5, [r4, #0]
 80111f4:	bf18      	it	ne
 80111f6:	6059      	strne	r1, [r3, #4]
 80111f8:	6863      	ldr	r3, [r4, #4]
 80111fa:	bf08      	it	eq
 80111fc:	f8c8 1000 	streq.w	r1, [r8]
 8011200:	5162      	str	r2, [r4, r5]
 8011202:	604b      	str	r3, [r1, #4]
 8011204:	4630      	mov	r0, r6
 8011206:	f000 f82f 	bl	8011268 <__malloc_unlock>
 801120a:	f104 000b 	add.w	r0, r4, #11
 801120e:	1d23      	adds	r3, r4, #4
 8011210:	f020 0007 	bic.w	r0, r0, #7
 8011214:	1ac2      	subs	r2, r0, r3
 8011216:	bf1c      	itt	ne
 8011218:	1a1b      	subne	r3, r3, r0
 801121a:	50a3      	strne	r3, [r4, r2]
 801121c:	e7af      	b.n	801117e <_malloc_r+0x22>
 801121e:	6862      	ldr	r2, [r4, #4]
 8011220:	42a3      	cmp	r3, r4
 8011222:	bf0c      	ite	eq
 8011224:	f8c8 2000 	streq.w	r2, [r8]
 8011228:	605a      	strne	r2, [r3, #4]
 801122a:	e7eb      	b.n	8011204 <_malloc_r+0xa8>
 801122c:	4623      	mov	r3, r4
 801122e:	6864      	ldr	r4, [r4, #4]
 8011230:	e7ae      	b.n	8011190 <_malloc_r+0x34>
 8011232:	463c      	mov	r4, r7
 8011234:	687f      	ldr	r7, [r7, #4]
 8011236:	e7b6      	b.n	80111a6 <_malloc_r+0x4a>
 8011238:	461a      	mov	r2, r3
 801123a:	685b      	ldr	r3, [r3, #4]
 801123c:	42a3      	cmp	r3, r4
 801123e:	d1fb      	bne.n	8011238 <_malloc_r+0xdc>
 8011240:	2300      	movs	r3, #0
 8011242:	6053      	str	r3, [r2, #4]
 8011244:	e7de      	b.n	8011204 <_malloc_r+0xa8>
 8011246:	230c      	movs	r3, #12
 8011248:	6033      	str	r3, [r6, #0]
 801124a:	4630      	mov	r0, r6
 801124c:	f000 f80c 	bl	8011268 <__malloc_unlock>
 8011250:	e794      	b.n	801117c <_malloc_r+0x20>
 8011252:	6005      	str	r5, [r0, #0]
 8011254:	e7d6      	b.n	8011204 <_malloc_r+0xa8>
 8011256:	bf00      	nop
 8011258:	24009e58 	.word	0x24009e58

0801125c <__malloc_lock>:
 801125c:	4801      	ldr	r0, [pc, #4]	@ (8011264 <__malloc_lock+0x8>)
 801125e:	f000 bb4c 	b.w	80118fa <__retarget_lock_acquire_recursive>
 8011262:	bf00      	nop
 8011264:	24009f9c 	.word	0x24009f9c

08011268 <__malloc_unlock>:
 8011268:	4801      	ldr	r0, [pc, #4]	@ (8011270 <__malloc_unlock+0x8>)
 801126a:	f000 bb47 	b.w	80118fc <__retarget_lock_release_recursive>
 801126e:	bf00      	nop
 8011270:	24009f9c 	.word	0x24009f9c

08011274 <rand>:
 8011274:	4b16      	ldr	r3, [pc, #88]	@ (80112d0 <rand+0x5c>)
 8011276:	b510      	push	{r4, lr}
 8011278:	681c      	ldr	r4, [r3, #0]
 801127a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801127c:	b9b3      	cbnz	r3, 80112ac <rand+0x38>
 801127e:	2018      	movs	r0, #24
 8011280:	f7ff ff3a 	bl	80110f8 <malloc>
 8011284:	4602      	mov	r2, r0
 8011286:	6320      	str	r0, [r4, #48]	@ 0x30
 8011288:	b920      	cbnz	r0, 8011294 <rand+0x20>
 801128a:	4b12      	ldr	r3, [pc, #72]	@ (80112d4 <rand+0x60>)
 801128c:	4812      	ldr	r0, [pc, #72]	@ (80112d8 <rand+0x64>)
 801128e:	2152      	movs	r1, #82	@ 0x52
 8011290:	f7ff fef8 	bl	8011084 <__assert_func>
 8011294:	4911      	ldr	r1, [pc, #68]	@ (80112dc <rand+0x68>)
 8011296:	4b12      	ldr	r3, [pc, #72]	@ (80112e0 <rand+0x6c>)
 8011298:	e9c0 1300 	strd	r1, r3, [r0]
 801129c:	4b11      	ldr	r3, [pc, #68]	@ (80112e4 <rand+0x70>)
 801129e:	6083      	str	r3, [r0, #8]
 80112a0:	230b      	movs	r3, #11
 80112a2:	8183      	strh	r3, [r0, #12]
 80112a4:	2100      	movs	r1, #0
 80112a6:	2001      	movs	r0, #1
 80112a8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80112ac:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80112ae:	480e      	ldr	r0, [pc, #56]	@ (80112e8 <rand+0x74>)
 80112b0:	690b      	ldr	r3, [r1, #16]
 80112b2:	694c      	ldr	r4, [r1, #20]
 80112b4:	4a0d      	ldr	r2, [pc, #52]	@ (80112ec <rand+0x78>)
 80112b6:	4358      	muls	r0, r3
 80112b8:	fb02 0004 	mla	r0, r2, r4, r0
 80112bc:	fba3 3202 	umull	r3, r2, r3, r2
 80112c0:	3301      	adds	r3, #1
 80112c2:	eb40 0002 	adc.w	r0, r0, r2
 80112c6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80112ca:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80112ce:	bd10      	pop	{r4, pc}
 80112d0:	2400003c 	.word	0x2400003c
 80112d4:	0801505c 	.word	0x0801505c
 80112d8:	08015073 	.word	0x08015073
 80112dc:	abcd330e 	.word	0xabcd330e
 80112e0:	e66d1234 	.word	0xe66d1234
 80112e4:	0005deec 	.word	0x0005deec
 80112e8:	5851f42d 	.word	0x5851f42d
 80112ec:	4c957f2d 	.word	0x4c957f2d

080112f0 <std>:
 80112f0:	2300      	movs	r3, #0
 80112f2:	b510      	push	{r4, lr}
 80112f4:	4604      	mov	r4, r0
 80112f6:	e9c0 3300 	strd	r3, r3, [r0]
 80112fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80112fe:	6083      	str	r3, [r0, #8]
 8011300:	8181      	strh	r1, [r0, #12]
 8011302:	6643      	str	r3, [r0, #100]	@ 0x64
 8011304:	81c2      	strh	r2, [r0, #14]
 8011306:	6183      	str	r3, [r0, #24]
 8011308:	4619      	mov	r1, r3
 801130a:	2208      	movs	r2, #8
 801130c:	305c      	adds	r0, #92	@ 0x5c
 801130e:	f000 fa1b 	bl	8011748 <memset>
 8011312:	4b0d      	ldr	r3, [pc, #52]	@ (8011348 <std+0x58>)
 8011314:	6263      	str	r3, [r4, #36]	@ 0x24
 8011316:	4b0d      	ldr	r3, [pc, #52]	@ (801134c <std+0x5c>)
 8011318:	62a3      	str	r3, [r4, #40]	@ 0x28
 801131a:	4b0d      	ldr	r3, [pc, #52]	@ (8011350 <std+0x60>)
 801131c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801131e:	4b0d      	ldr	r3, [pc, #52]	@ (8011354 <std+0x64>)
 8011320:	6323      	str	r3, [r4, #48]	@ 0x30
 8011322:	4b0d      	ldr	r3, [pc, #52]	@ (8011358 <std+0x68>)
 8011324:	6224      	str	r4, [r4, #32]
 8011326:	429c      	cmp	r4, r3
 8011328:	d006      	beq.n	8011338 <std+0x48>
 801132a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801132e:	4294      	cmp	r4, r2
 8011330:	d002      	beq.n	8011338 <std+0x48>
 8011332:	33d0      	adds	r3, #208	@ 0xd0
 8011334:	429c      	cmp	r4, r3
 8011336:	d105      	bne.n	8011344 <std+0x54>
 8011338:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801133c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011340:	f000 bada 	b.w	80118f8 <__retarget_lock_init_recursive>
 8011344:	bd10      	pop	{r4, pc}
 8011346:	bf00      	nop
 8011348:	08011579 	.word	0x08011579
 801134c:	0801159b 	.word	0x0801159b
 8011350:	080115d3 	.word	0x080115d3
 8011354:	080115f7 	.word	0x080115f7
 8011358:	24009e5c 	.word	0x24009e5c

0801135c <stdio_exit_handler>:
 801135c:	4a02      	ldr	r2, [pc, #8]	@ (8011368 <stdio_exit_handler+0xc>)
 801135e:	4903      	ldr	r1, [pc, #12]	@ (801136c <stdio_exit_handler+0x10>)
 8011360:	4803      	ldr	r0, [pc, #12]	@ (8011370 <stdio_exit_handler+0x14>)
 8011362:	f000 b87b 	b.w	801145c <_fwalk_sglue>
 8011366:	bf00      	nop
 8011368:	24000030 	.word	0x24000030
 801136c:	08012065 	.word	0x08012065
 8011370:	24000040 	.word	0x24000040

08011374 <cleanup_stdio>:
 8011374:	6841      	ldr	r1, [r0, #4]
 8011376:	4b0c      	ldr	r3, [pc, #48]	@ (80113a8 <cleanup_stdio+0x34>)
 8011378:	4299      	cmp	r1, r3
 801137a:	b510      	push	{r4, lr}
 801137c:	4604      	mov	r4, r0
 801137e:	d001      	beq.n	8011384 <cleanup_stdio+0x10>
 8011380:	f000 fe70 	bl	8012064 <_fflush_r>
 8011384:	68a1      	ldr	r1, [r4, #8]
 8011386:	4b09      	ldr	r3, [pc, #36]	@ (80113ac <cleanup_stdio+0x38>)
 8011388:	4299      	cmp	r1, r3
 801138a:	d002      	beq.n	8011392 <cleanup_stdio+0x1e>
 801138c:	4620      	mov	r0, r4
 801138e:	f000 fe69 	bl	8012064 <_fflush_r>
 8011392:	68e1      	ldr	r1, [r4, #12]
 8011394:	4b06      	ldr	r3, [pc, #24]	@ (80113b0 <cleanup_stdio+0x3c>)
 8011396:	4299      	cmp	r1, r3
 8011398:	d004      	beq.n	80113a4 <cleanup_stdio+0x30>
 801139a:	4620      	mov	r0, r4
 801139c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80113a0:	f000 be60 	b.w	8012064 <_fflush_r>
 80113a4:	bd10      	pop	{r4, pc}
 80113a6:	bf00      	nop
 80113a8:	24009e5c 	.word	0x24009e5c
 80113ac:	24009ec4 	.word	0x24009ec4
 80113b0:	24009f2c 	.word	0x24009f2c

080113b4 <global_stdio_init.part.0>:
 80113b4:	b510      	push	{r4, lr}
 80113b6:	4b0b      	ldr	r3, [pc, #44]	@ (80113e4 <global_stdio_init.part.0+0x30>)
 80113b8:	4c0b      	ldr	r4, [pc, #44]	@ (80113e8 <global_stdio_init.part.0+0x34>)
 80113ba:	4a0c      	ldr	r2, [pc, #48]	@ (80113ec <global_stdio_init.part.0+0x38>)
 80113bc:	601a      	str	r2, [r3, #0]
 80113be:	4620      	mov	r0, r4
 80113c0:	2200      	movs	r2, #0
 80113c2:	2104      	movs	r1, #4
 80113c4:	f7ff ff94 	bl	80112f0 <std>
 80113c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80113cc:	2201      	movs	r2, #1
 80113ce:	2109      	movs	r1, #9
 80113d0:	f7ff ff8e 	bl	80112f0 <std>
 80113d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80113d8:	2202      	movs	r2, #2
 80113da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80113de:	2112      	movs	r1, #18
 80113e0:	f7ff bf86 	b.w	80112f0 <std>
 80113e4:	24009f94 	.word	0x24009f94
 80113e8:	24009e5c 	.word	0x24009e5c
 80113ec:	0801135d 	.word	0x0801135d

080113f0 <__sfp_lock_acquire>:
 80113f0:	4801      	ldr	r0, [pc, #4]	@ (80113f8 <__sfp_lock_acquire+0x8>)
 80113f2:	f000 ba82 	b.w	80118fa <__retarget_lock_acquire_recursive>
 80113f6:	bf00      	nop
 80113f8:	24009f9d 	.word	0x24009f9d

080113fc <__sfp_lock_release>:
 80113fc:	4801      	ldr	r0, [pc, #4]	@ (8011404 <__sfp_lock_release+0x8>)
 80113fe:	f000 ba7d 	b.w	80118fc <__retarget_lock_release_recursive>
 8011402:	bf00      	nop
 8011404:	24009f9d 	.word	0x24009f9d

08011408 <__sinit>:
 8011408:	b510      	push	{r4, lr}
 801140a:	4604      	mov	r4, r0
 801140c:	f7ff fff0 	bl	80113f0 <__sfp_lock_acquire>
 8011410:	6a23      	ldr	r3, [r4, #32]
 8011412:	b11b      	cbz	r3, 801141c <__sinit+0x14>
 8011414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011418:	f7ff bff0 	b.w	80113fc <__sfp_lock_release>
 801141c:	4b04      	ldr	r3, [pc, #16]	@ (8011430 <__sinit+0x28>)
 801141e:	6223      	str	r3, [r4, #32]
 8011420:	4b04      	ldr	r3, [pc, #16]	@ (8011434 <__sinit+0x2c>)
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	2b00      	cmp	r3, #0
 8011426:	d1f5      	bne.n	8011414 <__sinit+0xc>
 8011428:	f7ff ffc4 	bl	80113b4 <global_stdio_init.part.0>
 801142c:	e7f2      	b.n	8011414 <__sinit+0xc>
 801142e:	bf00      	nop
 8011430:	08011375 	.word	0x08011375
 8011434:	24009f94 	.word	0x24009f94

08011438 <fiprintf>:
 8011438:	b40e      	push	{r1, r2, r3}
 801143a:	b503      	push	{r0, r1, lr}
 801143c:	4601      	mov	r1, r0
 801143e:	ab03      	add	r3, sp, #12
 8011440:	4805      	ldr	r0, [pc, #20]	@ (8011458 <fiprintf+0x20>)
 8011442:	f853 2b04 	ldr.w	r2, [r3], #4
 8011446:	6800      	ldr	r0, [r0, #0]
 8011448:	9301      	str	r3, [sp, #4]
 801144a:	f000 fae1 	bl	8011a10 <_vfiprintf_r>
 801144e:	b002      	add	sp, #8
 8011450:	f85d eb04 	ldr.w	lr, [sp], #4
 8011454:	b003      	add	sp, #12
 8011456:	4770      	bx	lr
 8011458:	2400003c 	.word	0x2400003c

0801145c <_fwalk_sglue>:
 801145c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011460:	4607      	mov	r7, r0
 8011462:	4688      	mov	r8, r1
 8011464:	4614      	mov	r4, r2
 8011466:	2600      	movs	r6, #0
 8011468:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801146c:	f1b9 0901 	subs.w	r9, r9, #1
 8011470:	d505      	bpl.n	801147e <_fwalk_sglue+0x22>
 8011472:	6824      	ldr	r4, [r4, #0]
 8011474:	2c00      	cmp	r4, #0
 8011476:	d1f7      	bne.n	8011468 <_fwalk_sglue+0xc>
 8011478:	4630      	mov	r0, r6
 801147a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801147e:	89ab      	ldrh	r3, [r5, #12]
 8011480:	2b01      	cmp	r3, #1
 8011482:	d907      	bls.n	8011494 <_fwalk_sglue+0x38>
 8011484:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011488:	3301      	adds	r3, #1
 801148a:	d003      	beq.n	8011494 <_fwalk_sglue+0x38>
 801148c:	4629      	mov	r1, r5
 801148e:	4638      	mov	r0, r7
 8011490:	47c0      	blx	r8
 8011492:	4306      	orrs	r6, r0
 8011494:	3568      	adds	r5, #104	@ 0x68
 8011496:	e7e9      	b.n	801146c <_fwalk_sglue+0x10>

08011498 <iprintf>:
 8011498:	b40f      	push	{r0, r1, r2, r3}
 801149a:	b507      	push	{r0, r1, r2, lr}
 801149c:	4906      	ldr	r1, [pc, #24]	@ (80114b8 <iprintf+0x20>)
 801149e:	ab04      	add	r3, sp, #16
 80114a0:	6808      	ldr	r0, [r1, #0]
 80114a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80114a6:	6881      	ldr	r1, [r0, #8]
 80114a8:	9301      	str	r3, [sp, #4]
 80114aa:	f000 fab1 	bl	8011a10 <_vfiprintf_r>
 80114ae:	b003      	add	sp, #12
 80114b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80114b4:	b004      	add	sp, #16
 80114b6:	4770      	bx	lr
 80114b8:	2400003c 	.word	0x2400003c

080114bc <_puts_r>:
 80114bc:	6a03      	ldr	r3, [r0, #32]
 80114be:	b570      	push	{r4, r5, r6, lr}
 80114c0:	6884      	ldr	r4, [r0, #8]
 80114c2:	4605      	mov	r5, r0
 80114c4:	460e      	mov	r6, r1
 80114c6:	b90b      	cbnz	r3, 80114cc <_puts_r+0x10>
 80114c8:	f7ff ff9e 	bl	8011408 <__sinit>
 80114cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80114ce:	07db      	lsls	r3, r3, #31
 80114d0:	d405      	bmi.n	80114de <_puts_r+0x22>
 80114d2:	89a3      	ldrh	r3, [r4, #12]
 80114d4:	0598      	lsls	r0, r3, #22
 80114d6:	d402      	bmi.n	80114de <_puts_r+0x22>
 80114d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80114da:	f000 fa0e 	bl	80118fa <__retarget_lock_acquire_recursive>
 80114de:	89a3      	ldrh	r3, [r4, #12]
 80114e0:	0719      	lsls	r1, r3, #28
 80114e2:	d502      	bpl.n	80114ea <_puts_r+0x2e>
 80114e4:	6923      	ldr	r3, [r4, #16]
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d135      	bne.n	8011556 <_puts_r+0x9a>
 80114ea:	4621      	mov	r1, r4
 80114ec:	4628      	mov	r0, r5
 80114ee:	f000 f8c5 	bl	801167c <__swsetup_r>
 80114f2:	b380      	cbz	r0, 8011556 <_puts_r+0x9a>
 80114f4:	f04f 35ff 	mov.w	r5, #4294967295
 80114f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80114fa:	07da      	lsls	r2, r3, #31
 80114fc:	d405      	bmi.n	801150a <_puts_r+0x4e>
 80114fe:	89a3      	ldrh	r3, [r4, #12]
 8011500:	059b      	lsls	r3, r3, #22
 8011502:	d402      	bmi.n	801150a <_puts_r+0x4e>
 8011504:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011506:	f000 f9f9 	bl	80118fc <__retarget_lock_release_recursive>
 801150a:	4628      	mov	r0, r5
 801150c:	bd70      	pop	{r4, r5, r6, pc}
 801150e:	2b00      	cmp	r3, #0
 8011510:	da04      	bge.n	801151c <_puts_r+0x60>
 8011512:	69a2      	ldr	r2, [r4, #24]
 8011514:	429a      	cmp	r2, r3
 8011516:	dc17      	bgt.n	8011548 <_puts_r+0x8c>
 8011518:	290a      	cmp	r1, #10
 801151a:	d015      	beq.n	8011548 <_puts_r+0x8c>
 801151c:	6823      	ldr	r3, [r4, #0]
 801151e:	1c5a      	adds	r2, r3, #1
 8011520:	6022      	str	r2, [r4, #0]
 8011522:	7019      	strb	r1, [r3, #0]
 8011524:	68a3      	ldr	r3, [r4, #8]
 8011526:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801152a:	3b01      	subs	r3, #1
 801152c:	60a3      	str	r3, [r4, #8]
 801152e:	2900      	cmp	r1, #0
 8011530:	d1ed      	bne.n	801150e <_puts_r+0x52>
 8011532:	2b00      	cmp	r3, #0
 8011534:	da11      	bge.n	801155a <_puts_r+0x9e>
 8011536:	4622      	mov	r2, r4
 8011538:	210a      	movs	r1, #10
 801153a:	4628      	mov	r0, r5
 801153c:	f000 f85f 	bl	80115fe <__swbuf_r>
 8011540:	3001      	adds	r0, #1
 8011542:	d0d7      	beq.n	80114f4 <_puts_r+0x38>
 8011544:	250a      	movs	r5, #10
 8011546:	e7d7      	b.n	80114f8 <_puts_r+0x3c>
 8011548:	4622      	mov	r2, r4
 801154a:	4628      	mov	r0, r5
 801154c:	f000 f857 	bl	80115fe <__swbuf_r>
 8011550:	3001      	adds	r0, #1
 8011552:	d1e7      	bne.n	8011524 <_puts_r+0x68>
 8011554:	e7ce      	b.n	80114f4 <_puts_r+0x38>
 8011556:	3e01      	subs	r6, #1
 8011558:	e7e4      	b.n	8011524 <_puts_r+0x68>
 801155a:	6823      	ldr	r3, [r4, #0]
 801155c:	1c5a      	adds	r2, r3, #1
 801155e:	6022      	str	r2, [r4, #0]
 8011560:	220a      	movs	r2, #10
 8011562:	701a      	strb	r2, [r3, #0]
 8011564:	e7ee      	b.n	8011544 <_puts_r+0x88>
	...

08011568 <puts>:
 8011568:	4b02      	ldr	r3, [pc, #8]	@ (8011574 <puts+0xc>)
 801156a:	4601      	mov	r1, r0
 801156c:	6818      	ldr	r0, [r3, #0]
 801156e:	f7ff bfa5 	b.w	80114bc <_puts_r>
 8011572:	bf00      	nop
 8011574:	2400003c 	.word	0x2400003c

08011578 <__sread>:
 8011578:	b510      	push	{r4, lr}
 801157a:	460c      	mov	r4, r1
 801157c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011580:	f000 f962 	bl	8011848 <_read_r>
 8011584:	2800      	cmp	r0, #0
 8011586:	bfab      	itete	ge
 8011588:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801158a:	89a3      	ldrhlt	r3, [r4, #12]
 801158c:	181b      	addge	r3, r3, r0
 801158e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011592:	bfac      	ite	ge
 8011594:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011596:	81a3      	strhlt	r3, [r4, #12]
 8011598:	bd10      	pop	{r4, pc}

0801159a <__swrite>:
 801159a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801159e:	461f      	mov	r7, r3
 80115a0:	898b      	ldrh	r3, [r1, #12]
 80115a2:	05db      	lsls	r3, r3, #23
 80115a4:	4605      	mov	r5, r0
 80115a6:	460c      	mov	r4, r1
 80115a8:	4616      	mov	r6, r2
 80115aa:	d505      	bpl.n	80115b8 <__swrite+0x1e>
 80115ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115b0:	2302      	movs	r3, #2
 80115b2:	2200      	movs	r2, #0
 80115b4:	f000 f936 	bl	8011824 <_lseek_r>
 80115b8:	89a3      	ldrh	r3, [r4, #12]
 80115ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80115be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80115c2:	81a3      	strh	r3, [r4, #12]
 80115c4:	4632      	mov	r2, r6
 80115c6:	463b      	mov	r3, r7
 80115c8:	4628      	mov	r0, r5
 80115ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80115ce:	f000 b95d 	b.w	801188c <_write_r>

080115d2 <__sseek>:
 80115d2:	b510      	push	{r4, lr}
 80115d4:	460c      	mov	r4, r1
 80115d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115da:	f000 f923 	bl	8011824 <_lseek_r>
 80115de:	1c43      	adds	r3, r0, #1
 80115e0:	89a3      	ldrh	r3, [r4, #12]
 80115e2:	bf15      	itete	ne
 80115e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80115e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80115ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80115ee:	81a3      	strheq	r3, [r4, #12]
 80115f0:	bf18      	it	ne
 80115f2:	81a3      	strhne	r3, [r4, #12]
 80115f4:	bd10      	pop	{r4, pc}

080115f6 <__sclose>:
 80115f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115fa:	f000 b8ad 	b.w	8011758 <_close_r>

080115fe <__swbuf_r>:
 80115fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011600:	460e      	mov	r6, r1
 8011602:	4614      	mov	r4, r2
 8011604:	4605      	mov	r5, r0
 8011606:	b118      	cbz	r0, 8011610 <__swbuf_r+0x12>
 8011608:	6a03      	ldr	r3, [r0, #32]
 801160a:	b90b      	cbnz	r3, 8011610 <__swbuf_r+0x12>
 801160c:	f7ff fefc 	bl	8011408 <__sinit>
 8011610:	69a3      	ldr	r3, [r4, #24]
 8011612:	60a3      	str	r3, [r4, #8]
 8011614:	89a3      	ldrh	r3, [r4, #12]
 8011616:	071a      	lsls	r2, r3, #28
 8011618:	d501      	bpl.n	801161e <__swbuf_r+0x20>
 801161a:	6923      	ldr	r3, [r4, #16]
 801161c:	b943      	cbnz	r3, 8011630 <__swbuf_r+0x32>
 801161e:	4621      	mov	r1, r4
 8011620:	4628      	mov	r0, r5
 8011622:	f000 f82b 	bl	801167c <__swsetup_r>
 8011626:	b118      	cbz	r0, 8011630 <__swbuf_r+0x32>
 8011628:	f04f 37ff 	mov.w	r7, #4294967295
 801162c:	4638      	mov	r0, r7
 801162e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011630:	6823      	ldr	r3, [r4, #0]
 8011632:	6922      	ldr	r2, [r4, #16]
 8011634:	1a98      	subs	r0, r3, r2
 8011636:	6963      	ldr	r3, [r4, #20]
 8011638:	b2f6      	uxtb	r6, r6
 801163a:	4283      	cmp	r3, r0
 801163c:	4637      	mov	r7, r6
 801163e:	dc05      	bgt.n	801164c <__swbuf_r+0x4e>
 8011640:	4621      	mov	r1, r4
 8011642:	4628      	mov	r0, r5
 8011644:	f000 fd0e 	bl	8012064 <_fflush_r>
 8011648:	2800      	cmp	r0, #0
 801164a:	d1ed      	bne.n	8011628 <__swbuf_r+0x2a>
 801164c:	68a3      	ldr	r3, [r4, #8]
 801164e:	3b01      	subs	r3, #1
 8011650:	60a3      	str	r3, [r4, #8]
 8011652:	6823      	ldr	r3, [r4, #0]
 8011654:	1c5a      	adds	r2, r3, #1
 8011656:	6022      	str	r2, [r4, #0]
 8011658:	701e      	strb	r6, [r3, #0]
 801165a:	6962      	ldr	r2, [r4, #20]
 801165c:	1c43      	adds	r3, r0, #1
 801165e:	429a      	cmp	r2, r3
 8011660:	d004      	beq.n	801166c <__swbuf_r+0x6e>
 8011662:	89a3      	ldrh	r3, [r4, #12]
 8011664:	07db      	lsls	r3, r3, #31
 8011666:	d5e1      	bpl.n	801162c <__swbuf_r+0x2e>
 8011668:	2e0a      	cmp	r6, #10
 801166a:	d1df      	bne.n	801162c <__swbuf_r+0x2e>
 801166c:	4621      	mov	r1, r4
 801166e:	4628      	mov	r0, r5
 8011670:	f000 fcf8 	bl	8012064 <_fflush_r>
 8011674:	2800      	cmp	r0, #0
 8011676:	d0d9      	beq.n	801162c <__swbuf_r+0x2e>
 8011678:	e7d6      	b.n	8011628 <__swbuf_r+0x2a>
	...

0801167c <__swsetup_r>:
 801167c:	b538      	push	{r3, r4, r5, lr}
 801167e:	4b29      	ldr	r3, [pc, #164]	@ (8011724 <__swsetup_r+0xa8>)
 8011680:	4605      	mov	r5, r0
 8011682:	6818      	ldr	r0, [r3, #0]
 8011684:	460c      	mov	r4, r1
 8011686:	b118      	cbz	r0, 8011690 <__swsetup_r+0x14>
 8011688:	6a03      	ldr	r3, [r0, #32]
 801168a:	b90b      	cbnz	r3, 8011690 <__swsetup_r+0x14>
 801168c:	f7ff febc 	bl	8011408 <__sinit>
 8011690:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011694:	0719      	lsls	r1, r3, #28
 8011696:	d422      	bmi.n	80116de <__swsetup_r+0x62>
 8011698:	06da      	lsls	r2, r3, #27
 801169a:	d407      	bmi.n	80116ac <__swsetup_r+0x30>
 801169c:	2209      	movs	r2, #9
 801169e:	602a      	str	r2, [r5, #0]
 80116a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80116a4:	81a3      	strh	r3, [r4, #12]
 80116a6:	f04f 30ff 	mov.w	r0, #4294967295
 80116aa:	e033      	b.n	8011714 <__swsetup_r+0x98>
 80116ac:	0758      	lsls	r0, r3, #29
 80116ae:	d512      	bpl.n	80116d6 <__swsetup_r+0x5a>
 80116b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80116b2:	b141      	cbz	r1, 80116c6 <__swsetup_r+0x4a>
 80116b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80116b8:	4299      	cmp	r1, r3
 80116ba:	d002      	beq.n	80116c2 <__swsetup_r+0x46>
 80116bc:	4628      	mov	r0, r5
 80116be:	f000 f933 	bl	8011928 <_free_r>
 80116c2:	2300      	movs	r3, #0
 80116c4:	6363      	str	r3, [r4, #52]	@ 0x34
 80116c6:	89a3      	ldrh	r3, [r4, #12]
 80116c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80116cc:	81a3      	strh	r3, [r4, #12]
 80116ce:	2300      	movs	r3, #0
 80116d0:	6063      	str	r3, [r4, #4]
 80116d2:	6923      	ldr	r3, [r4, #16]
 80116d4:	6023      	str	r3, [r4, #0]
 80116d6:	89a3      	ldrh	r3, [r4, #12]
 80116d8:	f043 0308 	orr.w	r3, r3, #8
 80116dc:	81a3      	strh	r3, [r4, #12]
 80116de:	6923      	ldr	r3, [r4, #16]
 80116e0:	b94b      	cbnz	r3, 80116f6 <__swsetup_r+0x7a>
 80116e2:	89a3      	ldrh	r3, [r4, #12]
 80116e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80116e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80116ec:	d003      	beq.n	80116f6 <__swsetup_r+0x7a>
 80116ee:	4621      	mov	r1, r4
 80116f0:	4628      	mov	r0, r5
 80116f2:	f000 fd05 	bl	8012100 <__smakebuf_r>
 80116f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80116fa:	f013 0201 	ands.w	r2, r3, #1
 80116fe:	d00a      	beq.n	8011716 <__swsetup_r+0x9a>
 8011700:	2200      	movs	r2, #0
 8011702:	60a2      	str	r2, [r4, #8]
 8011704:	6962      	ldr	r2, [r4, #20]
 8011706:	4252      	negs	r2, r2
 8011708:	61a2      	str	r2, [r4, #24]
 801170a:	6922      	ldr	r2, [r4, #16]
 801170c:	b942      	cbnz	r2, 8011720 <__swsetup_r+0xa4>
 801170e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011712:	d1c5      	bne.n	80116a0 <__swsetup_r+0x24>
 8011714:	bd38      	pop	{r3, r4, r5, pc}
 8011716:	0799      	lsls	r1, r3, #30
 8011718:	bf58      	it	pl
 801171a:	6962      	ldrpl	r2, [r4, #20]
 801171c:	60a2      	str	r2, [r4, #8]
 801171e:	e7f4      	b.n	801170a <__swsetup_r+0x8e>
 8011720:	2000      	movs	r0, #0
 8011722:	e7f7      	b.n	8011714 <__swsetup_r+0x98>
 8011724:	2400003c 	.word	0x2400003c

08011728 <memcmp>:
 8011728:	b510      	push	{r4, lr}
 801172a:	3901      	subs	r1, #1
 801172c:	4402      	add	r2, r0
 801172e:	4290      	cmp	r0, r2
 8011730:	d101      	bne.n	8011736 <memcmp+0xe>
 8011732:	2000      	movs	r0, #0
 8011734:	e005      	b.n	8011742 <memcmp+0x1a>
 8011736:	7803      	ldrb	r3, [r0, #0]
 8011738:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801173c:	42a3      	cmp	r3, r4
 801173e:	d001      	beq.n	8011744 <memcmp+0x1c>
 8011740:	1b18      	subs	r0, r3, r4
 8011742:	bd10      	pop	{r4, pc}
 8011744:	3001      	adds	r0, #1
 8011746:	e7f2      	b.n	801172e <memcmp+0x6>

08011748 <memset>:
 8011748:	4402      	add	r2, r0
 801174a:	4603      	mov	r3, r0
 801174c:	4293      	cmp	r3, r2
 801174e:	d100      	bne.n	8011752 <memset+0xa>
 8011750:	4770      	bx	lr
 8011752:	f803 1b01 	strb.w	r1, [r3], #1
 8011756:	e7f9      	b.n	801174c <memset+0x4>

08011758 <_close_r>:
 8011758:	b538      	push	{r3, r4, r5, lr}
 801175a:	4d06      	ldr	r5, [pc, #24]	@ (8011774 <_close_r+0x1c>)
 801175c:	2300      	movs	r3, #0
 801175e:	4604      	mov	r4, r0
 8011760:	4608      	mov	r0, r1
 8011762:	602b      	str	r3, [r5, #0]
 8011764:	f7ef f94e 	bl	8000a04 <_close>
 8011768:	1c43      	adds	r3, r0, #1
 801176a:	d102      	bne.n	8011772 <_close_r+0x1a>
 801176c:	682b      	ldr	r3, [r5, #0]
 801176e:	b103      	cbz	r3, 8011772 <_close_r+0x1a>
 8011770:	6023      	str	r3, [r4, #0]
 8011772:	bd38      	pop	{r3, r4, r5, pc}
 8011774:	24009f98 	.word	0x24009f98

08011778 <_reclaim_reent>:
 8011778:	4b29      	ldr	r3, [pc, #164]	@ (8011820 <_reclaim_reent+0xa8>)
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	4283      	cmp	r3, r0
 801177e:	b570      	push	{r4, r5, r6, lr}
 8011780:	4604      	mov	r4, r0
 8011782:	d04b      	beq.n	801181c <_reclaim_reent+0xa4>
 8011784:	69c3      	ldr	r3, [r0, #28]
 8011786:	b1ab      	cbz	r3, 80117b4 <_reclaim_reent+0x3c>
 8011788:	68db      	ldr	r3, [r3, #12]
 801178a:	b16b      	cbz	r3, 80117a8 <_reclaim_reent+0x30>
 801178c:	2500      	movs	r5, #0
 801178e:	69e3      	ldr	r3, [r4, #28]
 8011790:	68db      	ldr	r3, [r3, #12]
 8011792:	5959      	ldr	r1, [r3, r5]
 8011794:	2900      	cmp	r1, #0
 8011796:	d13b      	bne.n	8011810 <_reclaim_reent+0x98>
 8011798:	3504      	adds	r5, #4
 801179a:	2d80      	cmp	r5, #128	@ 0x80
 801179c:	d1f7      	bne.n	801178e <_reclaim_reent+0x16>
 801179e:	69e3      	ldr	r3, [r4, #28]
 80117a0:	4620      	mov	r0, r4
 80117a2:	68d9      	ldr	r1, [r3, #12]
 80117a4:	f000 f8c0 	bl	8011928 <_free_r>
 80117a8:	69e3      	ldr	r3, [r4, #28]
 80117aa:	6819      	ldr	r1, [r3, #0]
 80117ac:	b111      	cbz	r1, 80117b4 <_reclaim_reent+0x3c>
 80117ae:	4620      	mov	r0, r4
 80117b0:	f000 f8ba 	bl	8011928 <_free_r>
 80117b4:	6961      	ldr	r1, [r4, #20]
 80117b6:	b111      	cbz	r1, 80117be <_reclaim_reent+0x46>
 80117b8:	4620      	mov	r0, r4
 80117ba:	f000 f8b5 	bl	8011928 <_free_r>
 80117be:	69e1      	ldr	r1, [r4, #28]
 80117c0:	b111      	cbz	r1, 80117c8 <_reclaim_reent+0x50>
 80117c2:	4620      	mov	r0, r4
 80117c4:	f000 f8b0 	bl	8011928 <_free_r>
 80117c8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80117ca:	b111      	cbz	r1, 80117d2 <_reclaim_reent+0x5a>
 80117cc:	4620      	mov	r0, r4
 80117ce:	f000 f8ab 	bl	8011928 <_free_r>
 80117d2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80117d4:	b111      	cbz	r1, 80117dc <_reclaim_reent+0x64>
 80117d6:	4620      	mov	r0, r4
 80117d8:	f000 f8a6 	bl	8011928 <_free_r>
 80117dc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80117de:	b111      	cbz	r1, 80117e6 <_reclaim_reent+0x6e>
 80117e0:	4620      	mov	r0, r4
 80117e2:	f000 f8a1 	bl	8011928 <_free_r>
 80117e6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80117e8:	b111      	cbz	r1, 80117f0 <_reclaim_reent+0x78>
 80117ea:	4620      	mov	r0, r4
 80117ec:	f000 f89c 	bl	8011928 <_free_r>
 80117f0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80117f2:	b111      	cbz	r1, 80117fa <_reclaim_reent+0x82>
 80117f4:	4620      	mov	r0, r4
 80117f6:	f000 f897 	bl	8011928 <_free_r>
 80117fa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80117fc:	b111      	cbz	r1, 8011804 <_reclaim_reent+0x8c>
 80117fe:	4620      	mov	r0, r4
 8011800:	f000 f892 	bl	8011928 <_free_r>
 8011804:	6a23      	ldr	r3, [r4, #32]
 8011806:	b14b      	cbz	r3, 801181c <_reclaim_reent+0xa4>
 8011808:	4620      	mov	r0, r4
 801180a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801180e:	4718      	bx	r3
 8011810:	680e      	ldr	r6, [r1, #0]
 8011812:	4620      	mov	r0, r4
 8011814:	f000 f888 	bl	8011928 <_free_r>
 8011818:	4631      	mov	r1, r6
 801181a:	e7bb      	b.n	8011794 <_reclaim_reent+0x1c>
 801181c:	bd70      	pop	{r4, r5, r6, pc}
 801181e:	bf00      	nop
 8011820:	2400003c 	.word	0x2400003c

08011824 <_lseek_r>:
 8011824:	b538      	push	{r3, r4, r5, lr}
 8011826:	4d07      	ldr	r5, [pc, #28]	@ (8011844 <_lseek_r+0x20>)
 8011828:	4604      	mov	r4, r0
 801182a:	4608      	mov	r0, r1
 801182c:	4611      	mov	r1, r2
 801182e:	2200      	movs	r2, #0
 8011830:	602a      	str	r2, [r5, #0]
 8011832:	461a      	mov	r2, r3
 8011834:	f7ef f8f2 	bl	8000a1c <_lseek>
 8011838:	1c43      	adds	r3, r0, #1
 801183a:	d102      	bne.n	8011842 <_lseek_r+0x1e>
 801183c:	682b      	ldr	r3, [r5, #0]
 801183e:	b103      	cbz	r3, 8011842 <_lseek_r+0x1e>
 8011840:	6023      	str	r3, [r4, #0]
 8011842:	bd38      	pop	{r3, r4, r5, pc}
 8011844:	24009f98 	.word	0x24009f98

08011848 <_read_r>:
 8011848:	b538      	push	{r3, r4, r5, lr}
 801184a:	4d07      	ldr	r5, [pc, #28]	@ (8011868 <_read_r+0x20>)
 801184c:	4604      	mov	r4, r0
 801184e:	4608      	mov	r0, r1
 8011850:	4611      	mov	r1, r2
 8011852:	2200      	movs	r2, #0
 8011854:	602a      	str	r2, [r5, #0]
 8011856:	461a      	mov	r2, r3
 8011858:	f7ef f8b8 	bl	80009cc <_read>
 801185c:	1c43      	adds	r3, r0, #1
 801185e:	d102      	bne.n	8011866 <_read_r+0x1e>
 8011860:	682b      	ldr	r3, [r5, #0]
 8011862:	b103      	cbz	r3, 8011866 <_read_r+0x1e>
 8011864:	6023      	str	r3, [r4, #0]
 8011866:	bd38      	pop	{r3, r4, r5, pc}
 8011868:	24009f98 	.word	0x24009f98

0801186c <_sbrk_r>:
 801186c:	b538      	push	{r3, r4, r5, lr}
 801186e:	4d06      	ldr	r5, [pc, #24]	@ (8011888 <_sbrk_r+0x1c>)
 8011870:	2300      	movs	r3, #0
 8011872:	4604      	mov	r4, r0
 8011874:	4608      	mov	r0, r1
 8011876:	602b      	str	r3, [r5, #0]
 8011878:	f7ef f8d2 	bl	8000a20 <_sbrk>
 801187c:	1c43      	adds	r3, r0, #1
 801187e:	d102      	bne.n	8011886 <_sbrk_r+0x1a>
 8011880:	682b      	ldr	r3, [r5, #0]
 8011882:	b103      	cbz	r3, 8011886 <_sbrk_r+0x1a>
 8011884:	6023      	str	r3, [r4, #0]
 8011886:	bd38      	pop	{r3, r4, r5, pc}
 8011888:	24009f98 	.word	0x24009f98

0801188c <_write_r>:
 801188c:	b538      	push	{r3, r4, r5, lr}
 801188e:	4d07      	ldr	r5, [pc, #28]	@ (80118ac <_write_r+0x20>)
 8011890:	4604      	mov	r4, r0
 8011892:	4608      	mov	r0, r1
 8011894:	4611      	mov	r1, r2
 8011896:	2200      	movs	r2, #0
 8011898:	602a      	str	r2, [r5, #0]
 801189a:	461a      	mov	r2, r3
 801189c:	f7ef f8a4 	bl	80009e8 <_write>
 80118a0:	1c43      	adds	r3, r0, #1
 80118a2:	d102      	bne.n	80118aa <_write_r+0x1e>
 80118a4:	682b      	ldr	r3, [r5, #0]
 80118a6:	b103      	cbz	r3, 80118aa <_write_r+0x1e>
 80118a8:	6023      	str	r3, [r4, #0]
 80118aa:	bd38      	pop	{r3, r4, r5, pc}
 80118ac:	24009f98 	.word	0x24009f98

080118b0 <__libc_init_array>:
 80118b0:	b570      	push	{r4, r5, r6, lr}
 80118b2:	4d0d      	ldr	r5, [pc, #52]	@ (80118e8 <__libc_init_array+0x38>)
 80118b4:	4c0d      	ldr	r4, [pc, #52]	@ (80118ec <__libc_init_array+0x3c>)
 80118b6:	1b64      	subs	r4, r4, r5
 80118b8:	10a4      	asrs	r4, r4, #2
 80118ba:	2600      	movs	r6, #0
 80118bc:	42a6      	cmp	r6, r4
 80118be:	d109      	bne.n	80118d4 <__libc_init_array+0x24>
 80118c0:	4d0b      	ldr	r5, [pc, #44]	@ (80118f0 <__libc_init_array+0x40>)
 80118c2:	4c0c      	ldr	r4, [pc, #48]	@ (80118f4 <__libc_init_array+0x44>)
 80118c4:	f000 fcbe 	bl	8012244 <_init>
 80118c8:	1b64      	subs	r4, r4, r5
 80118ca:	10a4      	asrs	r4, r4, #2
 80118cc:	2600      	movs	r6, #0
 80118ce:	42a6      	cmp	r6, r4
 80118d0:	d105      	bne.n	80118de <__libc_init_array+0x2e>
 80118d2:	bd70      	pop	{r4, r5, r6, pc}
 80118d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80118d8:	4798      	blx	r3
 80118da:	3601      	adds	r6, #1
 80118dc:	e7ee      	b.n	80118bc <__libc_init_array+0xc>
 80118de:	f855 3b04 	ldr.w	r3, [r5], #4
 80118e2:	4798      	blx	r3
 80118e4:	3601      	adds	r6, #1
 80118e6:	e7f2      	b.n	80118ce <__libc_init_array+0x1e>
 80118e8:	08015108 	.word	0x08015108
 80118ec:	08015108 	.word	0x08015108
 80118f0:	08015108 	.word	0x08015108
 80118f4:	0801510c 	.word	0x0801510c

080118f8 <__retarget_lock_init_recursive>:
 80118f8:	4770      	bx	lr

080118fa <__retarget_lock_acquire_recursive>:
 80118fa:	4770      	bx	lr

080118fc <__retarget_lock_release_recursive>:
 80118fc:	4770      	bx	lr

080118fe <memcpy>:
 80118fe:	440a      	add	r2, r1
 8011900:	4291      	cmp	r1, r2
 8011902:	f100 33ff 	add.w	r3, r0, #4294967295
 8011906:	d100      	bne.n	801190a <memcpy+0xc>
 8011908:	4770      	bx	lr
 801190a:	b510      	push	{r4, lr}
 801190c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011910:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011914:	4291      	cmp	r1, r2
 8011916:	d1f9      	bne.n	801190c <memcpy+0xe>
 8011918:	bd10      	pop	{r4, pc}

0801191a <abort>:
 801191a:	b508      	push	{r3, lr}
 801191c:	2006      	movs	r0, #6
 801191e:	f000 fc53 	bl	80121c8 <raise>
 8011922:	2001      	movs	r0, #1
 8011924:	f7ef f84c 	bl	80009c0 <_exit>

08011928 <_free_r>:
 8011928:	b538      	push	{r3, r4, r5, lr}
 801192a:	4605      	mov	r5, r0
 801192c:	2900      	cmp	r1, #0
 801192e:	d041      	beq.n	80119b4 <_free_r+0x8c>
 8011930:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011934:	1f0c      	subs	r4, r1, #4
 8011936:	2b00      	cmp	r3, #0
 8011938:	bfb8      	it	lt
 801193a:	18e4      	addlt	r4, r4, r3
 801193c:	f7ff fc8e 	bl	801125c <__malloc_lock>
 8011940:	4a1d      	ldr	r2, [pc, #116]	@ (80119b8 <_free_r+0x90>)
 8011942:	6813      	ldr	r3, [r2, #0]
 8011944:	b933      	cbnz	r3, 8011954 <_free_r+0x2c>
 8011946:	6063      	str	r3, [r4, #4]
 8011948:	6014      	str	r4, [r2, #0]
 801194a:	4628      	mov	r0, r5
 801194c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011950:	f7ff bc8a 	b.w	8011268 <__malloc_unlock>
 8011954:	42a3      	cmp	r3, r4
 8011956:	d908      	bls.n	801196a <_free_r+0x42>
 8011958:	6820      	ldr	r0, [r4, #0]
 801195a:	1821      	adds	r1, r4, r0
 801195c:	428b      	cmp	r3, r1
 801195e:	bf01      	itttt	eq
 8011960:	6819      	ldreq	r1, [r3, #0]
 8011962:	685b      	ldreq	r3, [r3, #4]
 8011964:	1809      	addeq	r1, r1, r0
 8011966:	6021      	streq	r1, [r4, #0]
 8011968:	e7ed      	b.n	8011946 <_free_r+0x1e>
 801196a:	461a      	mov	r2, r3
 801196c:	685b      	ldr	r3, [r3, #4]
 801196e:	b10b      	cbz	r3, 8011974 <_free_r+0x4c>
 8011970:	42a3      	cmp	r3, r4
 8011972:	d9fa      	bls.n	801196a <_free_r+0x42>
 8011974:	6811      	ldr	r1, [r2, #0]
 8011976:	1850      	adds	r0, r2, r1
 8011978:	42a0      	cmp	r0, r4
 801197a:	d10b      	bne.n	8011994 <_free_r+0x6c>
 801197c:	6820      	ldr	r0, [r4, #0]
 801197e:	4401      	add	r1, r0
 8011980:	1850      	adds	r0, r2, r1
 8011982:	4283      	cmp	r3, r0
 8011984:	6011      	str	r1, [r2, #0]
 8011986:	d1e0      	bne.n	801194a <_free_r+0x22>
 8011988:	6818      	ldr	r0, [r3, #0]
 801198a:	685b      	ldr	r3, [r3, #4]
 801198c:	6053      	str	r3, [r2, #4]
 801198e:	4408      	add	r0, r1
 8011990:	6010      	str	r0, [r2, #0]
 8011992:	e7da      	b.n	801194a <_free_r+0x22>
 8011994:	d902      	bls.n	801199c <_free_r+0x74>
 8011996:	230c      	movs	r3, #12
 8011998:	602b      	str	r3, [r5, #0]
 801199a:	e7d6      	b.n	801194a <_free_r+0x22>
 801199c:	6820      	ldr	r0, [r4, #0]
 801199e:	1821      	adds	r1, r4, r0
 80119a0:	428b      	cmp	r3, r1
 80119a2:	bf04      	itt	eq
 80119a4:	6819      	ldreq	r1, [r3, #0]
 80119a6:	685b      	ldreq	r3, [r3, #4]
 80119a8:	6063      	str	r3, [r4, #4]
 80119aa:	bf04      	itt	eq
 80119ac:	1809      	addeq	r1, r1, r0
 80119ae:	6021      	streq	r1, [r4, #0]
 80119b0:	6054      	str	r4, [r2, #4]
 80119b2:	e7ca      	b.n	801194a <_free_r+0x22>
 80119b4:	bd38      	pop	{r3, r4, r5, pc}
 80119b6:	bf00      	nop
 80119b8:	24009e58 	.word	0x24009e58

080119bc <__sfputc_r>:
 80119bc:	6893      	ldr	r3, [r2, #8]
 80119be:	3b01      	subs	r3, #1
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	b410      	push	{r4}
 80119c4:	6093      	str	r3, [r2, #8]
 80119c6:	da08      	bge.n	80119da <__sfputc_r+0x1e>
 80119c8:	6994      	ldr	r4, [r2, #24]
 80119ca:	42a3      	cmp	r3, r4
 80119cc:	db01      	blt.n	80119d2 <__sfputc_r+0x16>
 80119ce:	290a      	cmp	r1, #10
 80119d0:	d103      	bne.n	80119da <__sfputc_r+0x1e>
 80119d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80119d6:	f7ff be12 	b.w	80115fe <__swbuf_r>
 80119da:	6813      	ldr	r3, [r2, #0]
 80119dc:	1c58      	adds	r0, r3, #1
 80119de:	6010      	str	r0, [r2, #0]
 80119e0:	7019      	strb	r1, [r3, #0]
 80119e2:	4608      	mov	r0, r1
 80119e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80119e8:	4770      	bx	lr

080119ea <__sfputs_r>:
 80119ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119ec:	4606      	mov	r6, r0
 80119ee:	460f      	mov	r7, r1
 80119f0:	4614      	mov	r4, r2
 80119f2:	18d5      	adds	r5, r2, r3
 80119f4:	42ac      	cmp	r4, r5
 80119f6:	d101      	bne.n	80119fc <__sfputs_r+0x12>
 80119f8:	2000      	movs	r0, #0
 80119fa:	e007      	b.n	8011a0c <__sfputs_r+0x22>
 80119fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a00:	463a      	mov	r2, r7
 8011a02:	4630      	mov	r0, r6
 8011a04:	f7ff ffda 	bl	80119bc <__sfputc_r>
 8011a08:	1c43      	adds	r3, r0, #1
 8011a0a:	d1f3      	bne.n	80119f4 <__sfputs_r+0xa>
 8011a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011a10 <_vfiprintf_r>:
 8011a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a14:	460d      	mov	r5, r1
 8011a16:	b09d      	sub	sp, #116	@ 0x74
 8011a18:	4614      	mov	r4, r2
 8011a1a:	4698      	mov	r8, r3
 8011a1c:	4606      	mov	r6, r0
 8011a1e:	b118      	cbz	r0, 8011a28 <_vfiprintf_r+0x18>
 8011a20:	6a03      	ldr	r3, [r0, #32]
 8011a22:	b90b      	cbnz	r3, 8011a28 <_vfiprintf_r+0x18>
 8011a24:	f7ff fcf0 	bl	8011408 <__sinit>
 8011a28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011a2a:	07d9      	lsls	r1, r3, #31
 8011a2c:	d405      	bmi.n	8011a3a <_vfiprintf_r+0x2a>
 8011a2e:	89ab      	ldrh	r3, [r5, #12]
 8011a30:	059a      	lsls	r2, r3, #22
 8011a32:	d402      	bmi.n	8011a3a <_vfiprintf_r+0x2a>
 8011a34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011a36:	f7ff ff60 	bl	80118fa <__retarget_lock_acquire_recursive>
 8011a3a:	89ab      	ldrh	r3, [r5, #12]
 8011a3c:	071b      	lsls	r3, r3, #28
 8011a3e:	d501      	bpl.n	8011a44 <_vfiprintf_r+0x34>
 8011a40:	692b      	ldr	r3, [r5, #16]
 8011a42:	b99b      	cbnz	r3, 8011a6c <_vfiprintf_r+0x5c>
 8011a44:	4629      	mov	r1, r5
 8011a46:	4630      	mov	r0, r6
 8011a48:	f7ff fe18 	bl	801167c <__swsetup_r>
 8011a4c:	b170      	cbz	r0, 8011a6c <_vfiprintf_r+0x5c>
 8011a4e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011a50:	07dc      	lsls	r4, r3, #31
 8011a52:	d504      	bpl.n	8011a5e <_vfiprintf_r+0x4e>
 8011a54:	f04f 30ff 	mov.w	r0, #4294967295
 8011a58:	b01d      	add	sp, #116	@ 0x74
 8011a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a5e:	89ab      	ldrh	r3, [r5, #12]
 8011a60:	0598      	lsls	r0, r3, #22
 8011a62:	d4f7      	bmi.n	8011a54 <_vfiprintf_r+0x44>
 8011a64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011a66:	f7ff ff49 	bl	80118fc <__retarget_lock_release_recursive>
 8011a6a:	e7f3      	b.n	8011a54 <_vfiprintf_r+0x44>
 8011a6c:	2300      	movs	r3, #0
 8011a6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011a70:	2320      	movs	r3, #32
 8011a72:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011a76:	f8cd 800c 	str.w	r8, [sp, #12]
 8011a7a:	2330      	movs	r3, #48	@ 0x30
 8011a7c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011c2c <_vfiprintf_r+0x21c>
 8011a80:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011a84:	f04f 0901 	mov.w	r9, #1
 8011a88:	4623      	mov	r3, r4
 8011a8a:	469a      	mov	sl, r3
 8011a8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011a90:	b10a      	cbz	r2, 8011a96 <_vfiprintf_r+0x86>
 8011a92:	2a25      	cmp	r2, #37	@ 0x25
 8011a94:	d1f9      	bne.n	8011a8a <_vfiprintf_r+0x7a>
 8011a96:	ebba 0b04 	subs.w	fp, sl, r4
 8011a9a:	d00b      	beq.n	8011ab4 <_vfiprintf_r+0xa4>
 8011a9c:	465b      	mov	r3, fp
 8011a9e:	4622      	mov	r2, r4
 8011aa0:	4629      	mov	r1, r5
 8011aa2:	4630      	mov	r0, r6
 8011aa4:	f7ff ffa1 	bl	80119ea <__sfputs_r>
 8011aa8:	3001      	adds	r0, #1
 8011aaa:	f000 80a7 	beq.w	8011bfc <_vfiprintf_r+0x1ec>
 8011aae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011ab0:	445a      	add	r2, fp
 8011ab2:	9209      	str	r2, [sp, #36]	@ 0x24
 8011ab4:	f89a 3000 	ldrb.w	r3, [sl]
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	f000 809f 	beq.w	8011bfc <_vfiprintf_r+0x1ec>
 8011abe:	2300      	movs	r3, #0
 8011ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8011ac4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011ac8:	f10a 0a01 	add.w	sl, sl, #1
 8011acc:	9304      	str	r3, [sp, #16]
 8011ace:	9307      	str	r3, [sp, #28]
 8011ad0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011ad4:	931a      	str	r3, [sp, #104]	@ 0x68
 8011ad6:	4654      	mov	r4, sl
 8011ad8:	2205      	movs	r2, #5
 8011ada:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ade:	4853      	ldr	r0, [pc, #332]	@ (8011c2c <_vfiprintf_r+0x21c>)
 8011ae0:	f7ee fc16 	bl	8000310 <memchr>
 8011ae4:	9a04      	ldr	r2, [sp, #16]
 8011ae6:	b9d8      	cbnz	r0, 8011b20 <_vfiprintf_r+0x110>
 8011ae8:	06d1      	lsls	r1, r2, #27
 8011aea:	bf44      	itt	mi
 8011aec:	2320      	movmi	r3, #32
 8011aee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011af2:	0713      	lsls	r3, r2, #28
 8011af4:	bf44      	itt	mi
 8011af6:	232b      	movmi	r3, #43	@ 0x2b
 8011af8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011afc:	f89a 3000 	ldrb.w	r3, [sl]
 8011b00:	2b2a      	cmp	r3, #42	@ 0x2a
 8011b02:	d015      	beq.n	8011b30 <_vfiprintf_r+0x120>
 8011b04:	9a07      	ldr	r2, [sp, #28]
 8011b06:	4654      	mov	r4, sl
 8011b08:	2000      	movs	r0, #0
 8011b0a:	f04f 0c0a 	mov.w	ip, #10
 8011b0e:	4621      	mov	r1, r4
 8011b10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011b14:	3b30      	subs	r3, #48	@ 0x30
 8011b16:	2b09      	cmp	r3, #9
 8011b18:	d94b      	bls.n	8011bb2 <_vfiprintf_r+0x1a2>
 8011b1a:	b1b0      	cbz	r0, 8011b4a <_vfiprintf_r+0x13a>
 8011b1c:	9207      	str	r2, [sp, #28]
 8011b1e:	e014      	b.n	8011b4a <_vfiprintf_r+0x13a>
 8011b20:	eba0 0308 	sub.w	r3, r0, r8
 8011b24:	fa09 f303 	lsl.w	r3, r9, r3
 8011b28:	4313      	orrs	r3, r2
 8011b2a:	9304      	str	r3, [sp, #16]
 8011b2c:	46a2      	mov	sl, r4
 8011b2e:	e7d2      	b.n	8011ad6 <_vfiprintf_r+0xc6>
 8011b30:	9b03      	ldr	r3, [sp, #12]
 8011b32:	1d19      	adds	r1, r3, #4
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	9103      	str	r1, [sp, #12]
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	bfbb      	ittet	lt
 8011b3c:	425b      	neglt	r3, r3
 8011b3e:	f042 0202 	orrlt.w	r2, r2, #2
 8011b42:	9307      	strge	r3, [sp, #28]
 8011b44:	9307      	strlt	r3, [sp, #28]
 8011b46:	bfb8      	it	lt
 8011b48:	9204      	strlt	r2, [sp, #16]
 8011b4a:	7823      	ldrb	r3, [r4, #0]
 8011b4c:	2b2e      	cmp	r3, #46	@ 0x2e
 8011b4e:	d10a      	bne.n	8011b66 <_vfiprintf_r+0x156>
 8011b50:	7863      	ldrb	r3, [r4, #1]
 8011b52:	2b2a      	cmp	r3, #42	@ 0x2a
 8011b54:	d132      	bne.n	8011bbc <_vfiprintf_r+0x1ac>
 8011b56:	9b03      	ldr	r3, [sp, #12]
 8011b58:	1d1a      	adds	r2, r3, #4
 8011b5a:	681b      	ldr	r3, [r3, #0]
 8011b5c:	9203      	str	r2, [sp, #12]
 8011b5e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011b62:	3402      	adds	r4, #2
 8011b64:	9305      	str	r3, [sp, #20]
 8011b66:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011c3c <_vfiprintf_r+0x22c>
 8011b6a:	7821      	ldrb	r1, [r4, #0]
 8011b6c:	2203      	movs	r2, #3
 8011b6e:	4650      	mov	r0, sl
 8011b70:	f7ee fbce 	bl	8000310 <memchr>
 8011b74:	b138      	cbz	r0, 8011b86 <_vfiprintf_r+0x176>
 8011b76:	9b04      	ldr	r3, [sp, #16]
 8011b78:	eba0 000a 	sub.w	r0, r0, sl
 8011b7c:	2240      	movs	r2, #64	@ 0x40
 8011b7e:	4082      	lsls	r2, r0
 8011b80:	4313      	orrs	r3, r2
 8011b82:	3401      	adds	r4, #1
 8011b84:	9304      	str	r3, [sp, #16]
 8011b86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b8a:	4829      	ldr	r0, [pc, #164]	@ (8011c30 <_vfiprintf_r+0x220>)
 8011b8c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011b90:	2206      	movs	r2, #6
 8011b92:	f7ee fbbd 	bl	8000310 <memchr>
 8011b96:	2800      	cmp	r0, #0
 8011b98:	d03f      	beq.n	8011c1a <_vfiprintf_r+0x20a>
 8011b9a:	4b26      	ldr	r3, [pc, #152]	@ (8011c34 <_vfiprintf_r+0x224>)
 8011b9c:	bb1b      	cbnz	r3, 8011be6 <_vfiprintf_r+0x1d6>
 8011b9e:	9b03      	ldr	r3, [sp, #12]
 8011ba0:	3307      	adds	r3, #7
 8011ba2:	f023 0307 	bic.w	r3, r3, #7
 8011ba6:	3308      	adds	r3, #8
 8011ba8:	9303      	str	r3, [sp, #12]
 8011baa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011bac:	443b      	add	r3, r7
 8011bae:	9309      	str	r3, [sp, #36]	@ 0x24
 8011bb0:	e76a      	b.n	8011a88 <_vfiprintf_r+0x78>
 8011bb2:	fb0c 3202 	mla	r2, ip, r2, r3
 8011bb6:	460c      	mov	r4, r1
 8011bb8:	2001      	movs	r0, #1
 8011bba:	e7a8      	b.n	8011b0e <_vfiprintf_r+0xfe>
 8011bbc:	2300      	movs	r3, #0
 8011bbe:	3401      	adds	r4, #1
 8011bc0:	9305      	str	r3, [sp, #20]
 8011bc2:	4619      	mov	r1, r3
 8011bc4:	f04f 0c0a 	mov.w	ip, #10
 8011bc8:	4620      	mov	r0, r4
 8011bca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011bce:	3a30      	subs	r2, #48	@ 0x30
 8011bd0:	2a09      	cmp	r2, #9
 8011bd2:	d903      	bls.n	8011bdc <_vfiprintf_r+0x1cc>
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d0c6      	beq.n	8011b66 <_vfiprintf_r+0x156>
 8011bd8:	9105      	str	r1, [sp, #20]
 8011bda:	e7c4      	b.n	8011b66 <_vfiprintf_r+0x156>
 8011bdc:	fb0c 2101 	mla	r1, ip, r1, r2
 8011be0:	4604      	mov	r4, r0
 8011be2:	2301      	movs	r3, #1
 8011be4:	e7f0      	b.n	8011bc8 <_vfiprintf_r+0x1b8>
 8011be6:	ab03      	add	r3, sp, #12
 8011be8:	9300      	str	r3, [sp, #0]
 8011bea:	462a      	mov	r2, r5
 8011bec:	4b12      	ldr	r3, [pc, #72]	@ (8011c38 <_vfiprintf_r+0x228>)
 8011bee:	a904      	add	r1, sp, #16
 8011bf0:	4630      	mov	r0, r6
 8011bf2:	f3af 8000 	nop.w
 8011bf6:	4607      	mov	r7, r0
 8011bf8:	1c78      	adds	r0, r7, #1
 8011bfa:	d1d6      	bne.n	8011baa <_vfiprintf_r+0x19a>
 8011bfc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011bfe:	07d9      	lsls	r1, r3, #31
 8011c00:	d405      	bmi.n	8011c0e <_vfiprintf_r+0x1fe>
 8011c02:	89ab      	ldrh	r3, [r5, #12]
 8011c04:	059a      	lsls	r2, r3, #22
 8011c06:	d402      	bmi.n	8011c0e <_vfiprintf_r+0x1fe>
 8011c08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011c0a:	f7ff fe77 	bl	80118fc <__retarget_lock_release_recursive>
 8011c0e:	89ab      	ldrh	r3, [r5, #12]
 8011c10:	065b      	lsls	r3, r3, #25
 8011c12:	f53f af1f 	bmi.w	8011a54 <_vfiprintf_r+0x44>
 8011c16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011c18:	e71e      	b.n	8011a58 <_vfiprintf_r+0x48>
 8011c1a:	ab03      	add	r3, sp, #12
 8011c1c:	9300      	str	r3, [sp, #0]
 8011c1e:	462a      	mov	r2, r5
 8011c20:	4b05      	ldr	r3, [pc, #20]	@ (8011c38 <_vfiprintf_r+0x228>)
 8011c22:	a904      	add	r1, sp, #16
 8011c24:	4630      	mov	r0, r6
 8011c26:	f000 f879 	bl	8011d1c <_printf_i>
 8011c2a:	e7e4      	b.n	8011bf6 <_vfiprintf_r+0x1e6>
 8011c2c:	080150cb 	.word	0x080150cb
 8011c30:	080150d5 	.word	0x080150d5
 8011c34:	00000000 	.word	0x00000000
 8011c38:	080119eb 	.word	0x080119eb
 8011c3c:	080150d1 	.word	0x080150d1

08011c40 <_printf_common>:
 8011c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c44:	4616      	mov	r6, r2
 8011c46:	4698      	mov	r8, r3
 8011c48:	688a      	ldr	r2, [r1, #8]
 8011c4a:	690b      	ldr	r3, [r1, #16]
 8011c4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011c50:	4293      	cmp	r3, r2
 8011c52:	bfb8      	it	lt
 8011c54:	4613      	movlt	r3, r2
 8011c56:	6033      	str	r3, [r6, #0]
 8011c58:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011c5c:	4607      	mov	r7, r0
 8011c5e:	460c      	mov	r4, r1
 8011c60:	b10a      	cbz	r2, 8011c66 <_printf_common+0x26>
 8011c62:	3301      	adds	r3, #1
 8011c64:	6033      	str	r3, [r6, #0]
 8011c66:	6823      	ldr	r3, [r4, #0]
 8011c68:	0699      	lsls	r1, r3, #26
 8011c6a:	bf42      	ittt	mi
 8011c6c:	6833      	ldrmi	r3, [r6, #0]
 8011c6e:	3302      	addmi	r3, #2
 8011c70:	6033      	strmi	r3, [r6, #0]
 8011c72:	6825      	ldr	r5, [r4, #0]
 8011c74:	f015 0506 	ands.w	r5, r5, #6
 8011c78:	d106      	bne.n	8011c88 <_printf_common+0x48>
 8011c7a:	f104 0a19 	add.w	sl, r4, #25
 8011c7e:	68e3      	ldr	r3, [r4, #12]
 8011c80:	6832      	ldr	r2, [r6, #0]
 8011c82:	1a9b      	subs	r3, r3, r2
 8011c84:	42ab      	cmp	r3, r5
 8011c86:	dc26      	bgt.n	8011cd6 <_printf_common+0x96>
 8011c88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011c8c:	6822      	ldr	r2, [r4, #0]
 8011c8e:	3b00      	subs	r3, #0
 8011c90:	bf18      	it	ne
 8011c92:	2301      	movne	r3, #1
 8011c94:	0692      	lsls	r2, r2, #26
 8011c96:	d42b      	bmi.n	8011cf0 <_printf_common+0xb0>
 8011c98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011c9c:	4641      	mov	r1, r8
 8011c9e:	4638      	mov	r0, r7
 8011ca0:	47c8      	blx	r9
 8011ca2:	3001      	adds	r0, #1
 8011ca4:	d01e      	beq.n	8011ce4 <_printf_common+0xa4>
 8011ca6:	6823      	ldr	r3, [r4, #0]
 8011ca8:	6922      	ldr	r2, [r4, #16]
 8011caa:	f003 0306 	and.w	r3, r3, #6
 8011cae:	2b04      	cmp	r3, #4
 8011cb0:	bf02      	ittt	eq
 8011cb2:	68e5      	ldreq	r5, [r4, #12]
 8011cb4:	6833      	ldreq	r3, [r6, #0]
 8011cb6:	1aed      	subeq	r5, r5, r3
 8011cb8:	68a3      	ldr	r3, [r4, #8]
 8011cba:	bf0c      	ite	eq
 8011cbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011cc0:	2500      	movne	r5, #0
 8011cc2:	4293      	cmp	r3, r2
 8011cc4:	bfc4      	itt	gt
 8011cc6:	1a9b      	subgt	r3, r3, r2
 8011cc8:	18ed      	addgt	r5, r5, r3
 8011cca:	2600      	movs	r6, #0
 8011ccc:	341a      	adds	r4, #26
 8011cce:	42b5      	cmp	r5, r6
 8011cd0:	d11a      	bne.n	8011d08 <_printf_common+0xc8>
 8011cd2:	2000      	movs	r0, #0
 8011cd4:	e008      	b.n	8011ce8 <_printf_common+0xa8>
 8011cd6:	2301      	movs	r3, #1
 8011cd8:	4652      	mov	r2, sl
 8011cda:	4641      	mov	r1, r8
 8011cdc:	4638      	mov	r0, r7
 8011cde:	47c8      	blx	r9
 8011ce0:	3001      	adds	r0, #1
 8011ce2:	d103      	bne.n	8011cec <_printf_common+0xac>
 8011ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8011ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011cec:	3501      	adds	r5, #1
 8011cee:	e7c6      	b.n	8011c7e <_printf_common+0x3e>
 8011cf0:	18e1      	adds	r1, r4, r3
 8011cf2:	1c5a      	adds	r2, r3, #1
 8011cf4:	2030      	movs	r0, #48	@ 0x30
 8011cf6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011cfa:	4422      	add	r2, r4
 8011cfc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011d00:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011d04:	3302      	adds	r3, #2
 8011d06:	e7c7      	b.n	8011c98 <_printf_common+0x58>
 8011d08:	2301      	movs	r3, #1
 8011d0a:	4622      	mov	r2, r4
 8011d0c:	4641      	mov	r1, r8
 8011d0e:	4638      	mov	r0, r7
 8011d10:	47c8      	blx	r9
 8011d12:	3001      	adds	r0, #1
 8011d14:	d0e6      	beq.n	8011ce4 <_printf_common+0xa4>
 8011d16:	3601      	adds	r6, #1
 8011d18:	e7d9      	b.n	8011cce <_printf_common+0x8e>
	...

08011d1c <_printf_i>:
 8011d1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011d20:	7e0f      	ldrb	r7, [r1, #24]
 8011d22:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011d24:	2f78      	cmp	r7, #120	@ 0x78
 8011d26:	4691      	mov	r9, r2
 8011d28:	4680      	mov	r8, r0
 8011d2a:	460c      	mov	r4, r1
 8011d2c:	469a      	mov	sl, r3
 8011d2e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011d32:	d807      	bhi.n	8011d44 <_printf_i+0x28>
 8011d34:	2f62      	cmp	r7, #98	@ 0x62
 8011d36:	d80a      	bhi.n	8011d4e <_printf_i+0x32>
 8011d38:	2f00      	cmp	r7, #0
 8011d3a:	f000 80d2 	beq.w	8011ee2 <_printf_i+0x1c6>
 8011d3e:	2f58      	cmp	r7, #88	@ 0x58
 8011d40:	f000 80b9 	beq.w	8011eb6 <_printf_i+0x19a>
 8011d44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011d48:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011d4c:	e03a      	b.n	8011dc4 <_printf_i+0xa8>
 8011d4e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011d52:	2b15      	cmp	r3, #21
 8011d54:	d8f6      	bhi.n	8011d44 <_printf_i+0x28>
 8011d56:	a101      	add	r1, pc, #4	@ (adr r1, 8011d5c <_printf_i+0x40>)
 8011d58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011d5c:	08011db5 	.word	0x08011db5
 8011d60:	08011dc9 	.word	0x08011dc9
 8011d64:	08011d45 	.word	0x08011d45
 8011d68:	08011d45 	.word	0x08011d45
 8011d6c:	08011d45 	.word	0x08011d45
 8011d70:	08011d45 	.word	0x08011d45
 8011d74:	08011dc9 	.word	0x08011dc9
 8011d78:	08011d45 	.word	0x08011d45
 8011d7c:	08011d45 	.word	0x08011d45
 8011d80:	08011d45 	.word	0x08011d45
 8011d84:	08011d45 	.word	0x08011d45
 8011d88:	08011ec9 	.word	0x08011ec9
 8011d8c:	08011df3 	.word	0x08011df3
 8011d90:	08011e83 	.word	0x08011e83
 8011d94:	08011d45 	.word	0x08011d45
 8011d98:	08011d45 	.word	0x08011d45
 8011d9c:	08011eeb 	.word	0x08011eeb
 8011da0:	08011d45 	.word	0x08011d45
 8011da4:	08011df3 	.word	0x08011df3
 8011da8:	08011d45 	.word	0x08011d45
 8011dac:	08011d45 	.word	0x08011d45
 8011db0:	08011e8b 	.word	0x08011e8b
 8011db4:	6833      	ldr	r3, [r6, #0]
 8011db6:	1d1a      	adds	r2, r3, #4
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	6032      	str	r2, [r6, #0]
 8011dbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011dc0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011dc4:	2301      	movs	r3, #1
 8011dc6:	e09d      	b.n	8011f04 <_printf_i+0x1e8>
 8011dc8:	6833      	ldr	r3, [r6, #0]
 8011dca:	6820      	ldr	r0, [r4, #0]
 8011dcc:	1d19      	adds	r1, r3, #4
 8011dce:	6031      	str	r1, [r6, #0]
 8011dd0:	0606      	lsls	r6, r0, #24
 8011dd2:	d501      	bpl.n	8011dd8 <_printf_i+0xbc>
 8011dd4:	681d      	ldr	r5, [r3, #0]
 8011dd6:	e003      	b.n	8011de0 <_printf_i+0xc4>
 8011dd8:	0645      	lsls	r5, r0, #25
 8011dda:	d5fb      	bpl.n	8011dd4 <_printf_i+0xb8>
 8011ddc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011de0:	2d00      	cmp	r5, #0
 8011de2:	da03      	bge.n	8011dec <_printf_i+0xd0>
 8011de4:	232d      	movs	r3, #45	@ 0x2d
 8011de6:	426d      	negs	r5, r5
 8011de8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011dec:	4859      	ldr	r0, [pc, #356]	@ (8011f54 <_printf_i+0x238>)
 8011dee:	230a      	movs	r3, #10
 8011df0:	e011      	b.n	8011e16 <_printf_i+0xfa>
 8011df2:	6821      	ldr	r1, [r4, #0]
 8011df4:	6833      	ldr	r3, [r6, #0]
 8011df6:	0608      	lsls	r0, r1, #24
 8011df8:	f853 5b04 	ldr.w	r5, [r3], #4
 8011dfc:	d402      	bmi.n	8011e04 <_printf_i+0xe8>
 8011dfe:	0649      	lsls	r1, r1, #25
 8011e00:	bf48      	it	mi
 8011e02:	b2ad      	uxthmi	r5, r5
 8011e04:	2f6f      	cmp	r7, #111	@ 0x6f
 8011e06:	4853      	ldr	r0, [pc, #332]	@ (8011f54 <_printf_i+0x238>)
 8011e08:	6033      	str	r3, [r6, #0]
 8011e0a:	bf14      	ite	ne
 8011e0c:	230a      	movne	r3, #10
 8011e0e:	2308      	moveq	r3, #8
 8011e10:	2100      	movs	r1, #0
 8011e12:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011e16:	6866      	ldr	r6, [r4, #4]
 8011e18:	60a6      	str	r6, [r4, #8]
 8011e1a:	2e00      	cmp	r6, #0
 8011e1c:	bfa2      	ittt	ge
 8011e1e:	6821      	ldrge	r1, [r4, #0]
 8011e20:	f021 0104 	bicge.w	r1, r1, #4
 8011e24:	6021      	strge	r1, [r4, #0]
 8011e26:	b90d      	cbnz	r5, 8011e2c <_printf_i+0x110>
 8011e28:	2e00      	cmp	r6, #0
 8011e2a:	d04b      	beq.n	8011ec4 <_printf_i+0x1a8>
 8011e2c:	4616      	mov	r6, r2
 8011e2e:	fbb5 f1f3 	udiv	r1, r5, r3
 8011e32:	fb03 5711 	mls	r7, r3, r1, r5
 8011e36:	5dc7      	ldrb	r7, [r0, r7]
 8011e38:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011e3c:	462f      	mov	r7, r5
 8011e3e:	42bb      	cmp	r3, r7
 8011e40:	460d      	mov	r5, r1
 8011e42:	d9f4      	bls.n	8011e2e <_printf_i+0x112>
 8011e44:	2b08      	cmp	r3, #8
 8011e46:	d10b      	bne.n	8011e60 <_printf_i+0x144>
 8011e48:	6823      	ldr	r3, [r4, #0]
 8011e4a:	07df      	lsls	r7, r3, #31
 8011e4c:	d508      	bpl.n	8011e60 <_printf_i+0x144>
 8011e4e:	6923      	ldr	r3, [r4, #16]
 8011e50:	6861      	ldr	r1, [r4, #4]
 8011e52:	4299      	cmp	r1, r3
 8011e54:	bfde      	ittt	le
 8011e56:	2330      	movle	r3, #48	@ 0x30
 8011e58:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011e5c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011e60:	1b92      	subs	r2, r2, r6
 8011e62:	6122      	str	r2, [r4, #16]
 8011e64:	f8cd a000 	str.w	sl, [sp]
 8011e68:	464b      	mov	r3, r9
 8011e6a:	aa03      	add	r2, sp, #12
 8011e6c:	4621      	mov	r1, r4
 8011e6e:	4640      	mov	r0, r8
 8011e70:	f7ff fee6 	bl	8011c40 <_printf_common>
 8011e74:	3001      	adds	r0, #1
 8011e76:	d14a      	bne.n	8011f0e <_printf_i+0x1f2>
 8011e78:	f04f 30ff 	mov.w	r0, #4294967295
 8011e7c:	b004      	add	sp, #16
 8011e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e82:	6823      	ldr	r3, [r4, #0]
 8011e84:	f043 0320 	orr.w	r3, r3, #32
 8011e88:	6023      	str	r3, [r4, #0]
 8011e8a:	4833      	ldr	r0, [pc, #204]	@ (8011f58 <_printf_i+0x23c>)
 8011e8c:	2778      	movs	r7, #120	@ 0x78
 8011e8e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011e92:	6823      	ldr	r3, [r4, #0]
 8011e94:	6831      	ldr	r1, [r6, #0]
 8011e96:	061f      	lsls	r7, r3, #24
 8011e98:	f851 5b04 	ldr.w	r5, [r1], #4
 8011e9c:	d402      	bmi.n	8011ea4 <_printf_i+0x188>
 8011e9e:	065f      	lsls	r7, r3, #25
 8011ea0:	bf48      	it	mi
 8011ea2:	b2ad      	uxthmi	r5, r5
 8011ea4:	6031      	str	r1, [r6, #0]
 8011ea6:	07d9      	lsls	r1, r3, #31
 8011ea8:	bf44      	itt	mi
 8011eaa:	f043 0320 	orrmi.w	r3, r3, #32
 8011eae:	6023      	strmi	r3, [r4, #0]
 8011eb0:	b11d      	cbz	r5, 8011eba <_printf_i+0x19e>
 8011eb2:	2310      	movs	r3, #16
 8011eb4:	e7ac      	b.n	8011e10 <_printf_i+0xf4>
 8011eb6:	4827      	ldr	r0, [pc, #156]	@ (8011f54 <_printf_i+0x238>)
 8011eb8:	e7e9      	b.n	8011e8e <_printf_i+0x172>
 8011eba:	6823      	ldr	r3, [r4, #0]
 8011ebc:	f023 0320 	bic.w	r3, r3, #32
 8011ec0:	6023      	str	r3, [r4, #0]
 8011ec2:	e7f6      	b.n	8011eb2 <_printf_i+0x196>
 8011ec4:	4616      	mov	r6, r2
 8011ec6:	e7bd      	b.n	8011e44 <_printf_i+0x128>
 8011ec8:	6833      	ldr	r3, [r6, #0]
 8011eca:	6825      	ldr	r5, [r4, #0]
 8011ecc:	6961      	ldr	r1, [r4, #20]
 8011ece:	1d18      	adds	r0, r3, #4
 8011ed0:	6030      	str	r0, [r6, #0]
 8011ed2:	062e      	lsls	r6, r5, #24
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	d501      	bpl.n	8011edc <_printf_i+0x1c0>
 8011ed8:	6019      	str	r1, [r3, #0]
 8011eda:	e002      	b.n	8011ee2 <_printf_i+0x1c6>
 8011edc:	0668      	lsls	r0, r5, #25
 8011ede:	d5fb      	bpl.n	8011ed8 <_printf_i+0x1bc>
 8011ee0:	8019      	strh	r1, [r3, #0]
 8011ee2:	2300      	movs	r3, #0
 8011ee4:	6123      	str	r3, [r4, #16]
 8011ee6:	4616      	mov	r6, r2
 8011ee8:	e7bc      	b.n	8011e64 <_printf_i+0x148>
 8011eea:	6833      	ldr	r3, [r6, #0]
 8011eec:	1d1a      	adds	r2, r3, #4
 8011eee:	6032      	str	r2, [r6, #0]
 8011ef0:	681e      	ldr	r6, [r3, #0]
 8011ef2:	6862      	ldr	r2, [r4, #4]
 8011ef4:	2100      	movs	r1, #0
 8011ef6:	4630      	mov	r0, r6
 8011ef8:	f7ee fa0a 	bl	8000310 <memchr>
 8011efc:	b108      	cbz	r0, 8011f02 <_printf_i+0x1e6>
 8011efe:	1b80      	subs	r0, r0, r6
 8011f00:	6060      	str	r0, [r4, #4]
 8011f02:	6863      	ldr	r3, [r4, #4]
 8011f04:	6123      	str	r3, [r4, #16]
 8011f06:	2300      	movs	r3, #0
 8011f08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011f0c:	e7aa      	b.n	8011e64 <_printf_i+0x148>
 8011f0e:	6923      	ldr	r3, [r4, #16]
 8011f10:	4632      	mov	r2, r6
 8011f12:	4649      	mov	r1, r9
 8011f14:	4640      	mov	r0, r8
 8011f16:	47d0      	blx	sl
 8011f18:	3001      	adds	r0, #1
 8011f1a:	d0ad      	beq.n	8011e78 <_printf_i+0x15c>
 8011f1c:	6823      	ldr	r3, [r4, #0]
 8011f1e:	079b      	lsls	r3, r3, #30
 8011f20:	d413      	bmi.n	8011f4a <_printf_i+0x22e>
 8011f22:	68e0      	ldr	r0, [r4, #12]
 8011f24:	9b03      	ldr	r3, [sp, #12]
 8011f26:	4298      	cmp	r0, r3
 8011f28:	bfb8      	it	lt
 8011f2a:	4618      	movlt	r0, r3
 8011f2c:	e7a6      	b.n	8011e7c <_printf_i+0x160>
 8011f2e:	2301      	movs	r3, #1
 8011f30:	4632      	mov	r2, r6
 8011f32:	4649      	mov	r1, r9
 8011f34:	4640      	mov	r0, r8
 8011f36:	47d0      	blx	sl
 8011f38:	3001      	adds	r0, #1
 8011f3a:	d09d      	beq.n	8011e78 <_printf_i+0x15c>
 8011f3c:	3501      	adds	r5, #1
 8011f3e:	68e3      	ldr	r3, [r4, #12]
 8011f40:	9903      	ldr	r1, [sp, #12]
 8011f42:	1a5b      	subs	r3, r3, r1
 8011f44:	42ab      	cmp	r3, r5
 8011f46:	dcf2      	bgt.n	8011f2e <_printf_i+0x212>
 8011f48:	e7eb      	b.n	8011f22 <_printf_i+0x206>
 8011f4a:	2500      	movs	r5, #0
 8011f4c:	f104 0619 	add.w	r6, r4, #25
 8011f50:	e7f5      	b.n	8011f3e <_printf_i+0x222>
 8011f52:	bf00      	nop
 8011f54:	080150dc 	.word	0x080150dc
 8011f58:	080150ed 	.word	0x080150ed

08011f5c <__sflush_r>:
 8011f5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f64:	0716      	lsls	r6, r2, #28
 8011f66:	4605      	mov	r5, r0
 8011f68:	460c      	mov	r4, r1
 8011f6a:	d454      	bmi.n	8012016 <__sflush_r+0xba>
 8011f6c:	684b      	ldr	r3, [r1, #4]
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	dc02      	bgt.n	8011f78 <__sflush_r+0x1c>
 8011f72:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	dd48      	ble.n	801200a <__sflush_r+0xae>
 8011f78:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011f7a:	2e00      	cmp	r6, #0
 8011f7c:	d045      	beq.n	801200a <__sflush_r+0xae>
 8011f7e:	2300      	movs	r3, #0
 8011f80:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011f84:	682f      	ldr	r7, [r5, #0]
 8011f86:	6a21      	ldr	r1, [r4, #32]
 8011f88:	602b      	str	r3, [r5, #0]
 8011f8a:	d030      	beq.n	8011fee <__sflush_r+0x92>
 8011f8c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011f8e:	89a3      	ldrh	r3, [r4, #12]
 8011f90:	0759      	lsls	r1, r3, #29
 8011f92:	d505      	bpl.n	8011fa0 <__sflush_r+0x44>
 8011f94:	6863      	ldr	r3, [r4, #4]
 8011f96:	1ad2      	subs	r2, r2, r3
 8011f98:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011f9a:	b10b      	cbz	r3, 8011fa0 <__sflush_r+0x44>
 8011f9c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011f9e:	1ad2      	subs	r2, r2, r3
 8011fa0:	2300      	movs	r3, #0
 8011fa2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011fa4:	6a21      	ldr	r1, [r4, #32]
 8011fa6:	4628      	mov	r0, r5
 8011fa8:	47b0      	blx	r6
 8011faa:	1c43      	adds	r3, r0, #1
 8011fac:	89a3      	ldrh	r3, [r4, #12]
 8011fae:	d106      	bne.n	8011fbe <__sflush_r+0x62>
 8011fb0:	6829      	ldr	r1, [r5, #0]
 8011fb2:	291d      	cmp	r1, #29
 8011fb4:	d82b      	bhi.n	801200e <__sflush_r+0xb2>
 8011fb6:	4a2a      	ldr	r2, [pc, #168]	@ (8012060 <__sflush_r+0x104>)
 8011fb8:	410a      	asrs	r2, r1
 8011fba:	07d6      	lsls	r6, r2, #31
 8011fbc:	d427      	bmi.n	801200e <__sflush_r+0xb2>
 8011fbe:	2200      	movs	r2, #0
 8011fc0:	6062      	str	r2, [r4, #4]
 8011fc2:	04d9      	lsls	r1, r3, #19
 8011fc4:	6922      	ldr	r2, [r4, #16]
 8011fc6:	6022      	str	r2, [r4, #0]
 8011fc8:	d504      	bpl.n	8011fd4 <__sflush_r+0x78>
 8011fca:	1c42      	adds	r2, r0, #1
 8011fcc:	d101      	bne.n	8011fd2 <__sflush_r+0x76>
 8011fce:	682b      	ldr	r3, [r5, #0]
 8011fd0:	b903      	cbnz	r3, 8011fd4 <__sflush_r+0x78>
 8011fd2:	6560      	str	r0, [r4, #84]	@ 0x54
 8011fd4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011fd6:	602f      	str	r7, [r5, #0]
 8011fd8:	b1b9      	cbz	r1, 801200a <__sflush_r+0xae>
 8011fda:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011fde:	4299      	cmp	r1, r3
 8011fe0:	d002      	beq.n	8011fe8 <__sflush_r+0x8c>
 8011fe2:	4628      	mov	r0, r5
 8011fe4:	f7ff fca0 	bl	8011928 <_free_r>
 8011fe8:	2300      	movs	r3, #0
 8011fea:	6363      	str	r3, [r4, #52]	@ 0x34
 8011fec:	e00d      	b.n	801200a <__sflush_r+0xae>
 8011fee:	2301      	movs	r3, #1
 8011ff0:	4628      	mov	r0, r5
 8011ff2:	47b0      	blx	r6
 8011ff4:	4602      	mov	r2, r0
 8011ff6:	1c50      	adds	r0, r2, #1
 8011ff8:	d1c9      	bne.n	8011f8e <__sflush_r+0x32>
 8011ffa:	682b      	ldr	r3, [r5, #0]
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d0c6      	beq.n	8011f8e <__sflush_r+0x32>
 8012000:	2b1d      	cmp	r3, #29
 8012002:	d001      	beq.n	8012008 <__sflush_r+0xac>
 8012004:	2b16      	cmp	r3, #22
 8012006:	d11e      	bne.n	8012046 <__sflush_r+0xea>
 8012008:	602f      	str	r7, [r5, #0]
 801200a:	2000      	movs	r0, #0
 801200c:	e022      	b.n	8012054 <__sflush_r+0xf8>
 801200e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012012:	b21b      	sxth	r3, r3
 8012014:	e01b      	b.n	801204e <__sflush_r+0xf2>
 8012016:	690f      	ldr	r7, [r1, #16]
 8012018:	2f00      	cmp	r7, #0
 801201a:	d0f6      	beq.n	801200a <__sflush_r+0xae>
 801201c:	0793      	lsls	r3, r2, #30
 801201e:	680e      	ldr	r6, [r1, #0]
 8012020:	bf08      	it	eq
 8012022:	694b      	ldreq	r3, [r1, #20]
 8012024:	600f      	str	r7, [r1, #0]
 8012026:	bf18      	it	ne
 8012028:	2300      	movne	r3, #0
 801202a:	eba6 0807 	sub.w	r8, r6, r7
 801202e:	608b      	str	r3, [r1, #8]
 8012030:	f1b8 0f00 	cmp.w	r8, #0
 8012034:	dde9      	ble.n	801200a <__sflush_r+0xae>
 8012036:	6a21      	ldr	r1, [r4, #32]
 8012038:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801203a:	4643      	mov	r3, r8
 801203c:	463a      	mov	r2, r7
 801203e:	4628      	mov	r0, r5
 8012040:	47b0      	blx	r6
 8012042:	2800      	cmp	r0, #0
 8012044:	dc08      	bgt.n	8012058 <__sflush_r+0xfc>
 8012046:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801204a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801204e:	81a3      	strh	r3, [r4, #12]
 8012050:	f04f 30ff 	mov.w	r0, #4294967295
 8012054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012058:	4407      	add	r7, r0
 801205a:	eba8 0800 	sub.w	r8, r8, r0
 801205e:	e7e7      	b.n	8012030 <__sflush_r+0xd4>
 8012060:	dfbffffe 	.word	0xdfbffffe

08012064 <_fflush_r>:
 8012064:	b538      	push	{r3, r4, r5, lr}
 8012066:	690b      	ldr	r3, [r1, #16]
 8012068:	4605      	mov	r5, r0
 801206a:	460c      	mov	r4, r1
 801206c:	b913      	cbnz	r3, 8012074 <_fflush_r+0x10>
 801206e:	2500      	movs	r5, #0
 8012070:	4628      	mov	r0, r5
 8012072:	bd38      	pop	{r3, r4, r5, pc}
 8012074:	b118      	cbz	r0, 801207e <_fflush_r+0x1a>
 8012076:	6a03      	ldr	r3, [r0, #32]
 8012078:	b90b      	cbnz	r3, 801207e <_fflush_r+0x1a>
 801207a:	f7ff f9c5 	bl	8011408 <__sinit>
 801207e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012082:	2b00      	cmp	r3, #0
 8012084:	d0f3      	beq.n	801206e <_fflush_r+0xa>
 8012086:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012088:	07d0      	lsls	r0, r2, #31
 801208a:	d404      	bmi.n	8012096 <_fflush_r+0x32>
 801208c:	0599      	lsls	r1, r3, #22
 801208e:	d402      	bmi.n	8012096 <_fflush_r+0x32>
 8012090:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012092:	f7ff fc32 	bl	80118fa <__retarget_lock_acquire_recursive>
 8012096:	4628      	mov	r0, r5
 8012098:	4621      	mov	r1, r4
 801209a:	f7ff ff5f 	bl	8011f5c <__sflush_r>
 801209e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80120a0:	07da      	lsls	r2, r3, #31
 80120a2:	4605      	mov	r5, r0
 80120a4:	d4e4      	bmi.n	8012070 <_fflush_r+0xc>
 80120a6:	89a3      	ldrh	r3, [r4, #12]
 80120a8:	059b      	lsls	r3, r3, #22
 80120aa:	d4e1      	bmi.n	8012070 <_fflush_r+0xc>
 80120ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80120ae:	f7ff fc25 	bl	80118fc <__retarget_lock_release_recursive>
 80120b2:	e7dd      	b.n	8012070 <_fflush_r+0xc>

080120b4 <__swhatbuf_r>:
 80120b4:	b570      	push	{r4, r5, r6, lr}
 80120b6:	460c      	mov	r4, r1
 80120b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120bc:	2900      	cmp	r1, #0
 80120be:	b096      	sub	sp, #88	@ 0x58
 80120c0:	4615      	mov	r5, r2
 80120c2:	461e      	mov	r6, r3
 80120c4:	da0d      	bge.n	80120e2 <__swhatbuf_r+0x2e>
 80120c6:	89a3      	ldrh	r3, [r4, #12]
 80120c8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80120cc:	f04f 0100 	mov.w	r1, #0
 80120d0:	bf14      	ite	ne
 80120d2:	2340      	movne	r3, #64	@ 0x40
 80120d4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80120d8:	2000      	movs	r0, #0
 80120da:	6031      	str	r1, [r6, #0]
 80120dc:	602b      	str	r3, [r5, #0]
 80120de:	b016      	add	sp, #88	@ 0x58
 80120e0:	bd70      	pop	{r4, r5, r6, pc}
 80120e2:	466a      	mov	r2, sp
 80120e4:	f000 f878 	bl	80121d8 <_fstat_r>
 80120e8:	2800      	cmp	r0, #0
 80120ea:	dbec      	blt.n	80120c6 <__swhatbuf_r+0x12>
 80120ec:	9901      	ldr	r1, [sp, #4]
 80120ee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80120f2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80120f6:	4259      	negs	r1, r3
 80120f8:	4159      	adcs	r1, r3
 80120fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80120fe:	e7eb      	b.n	80120d8 <__swhatbuf_r+0x24>

08012100 <__smakebuf_r>:
 8012100:	898b      	ldrh	r3, [r1, #12]
 8012102:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012104:	079d      	lsls	r5, r3, #30
 8012106:	4606      	mov	r6, r0
 8012108:	460c      	mov	r4, r1
 801210a:	d507      	bpl.n	801211c <__smakebuf_r+0x1c>
 801210c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012110:	6023      	str	r3, [r4, #0]
 8012112:	6123      	str	r3, [r4, #16]
 8012114:	2301      	movs	r3, #1
 8012116:	6163      	str	r3, [r4, #20]
 8012118:	b003      	add	sp, #12
 801211a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801211c:	ab01      	add	r3, sp, #4
 801211e:	466a      	mov	r2, sp
 8012120:	f7ff ffc8 	bl	80120b4 <__swhatbuf_r>
 8012124:	9f00      	ldr	r7, [sp, #0]
 8012126:	4605      	mov	r5, r0
 8012128:	4639      	mov	r1, r7
 801212a:	4630      	mov	r0, r6
 801212c:	f7ff f816 	bl	801115c <_malloc_r>
 8012130:	b948      	cbnz	r0, 8012146 <__smakebuf_r+0x46>
 8012132:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012136:	059a      	lsls	r2, r3, #22
 8012138:	d4ee      	bmi.n	8012118 <__smakebuf_r+0x18>
 801213a:	f023 0303 	bic.w	r3, r3, #3
 801213e:	f043 0302 	orr.w	r3, r3, #2
 8012142:	81a3      	strh	r3, [r4, #12]
 8012144:	e7e2      	b.n	801210c <__smakebuf_r+0xc>
 8012146:	89a3      	ldrh	r3, [r4, #12]
 8012148:	6020      	str	r0, [r4, #0]
 801214a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801214e:	81a3      	strh	r3, [r4, #12]
 8012150:	9b01      	ldr	r3, [sp, #4]
 8012152:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012156:	b15b      	cbz	r3, 8012170 <__smakebuf_r+0x70>
 8012158:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801215c:	4630      	mov	r0, r6
 801215e:	f000 f84d 	bl	80121fc <_isatty_r>
 8012162:	b128      	cbz	r0, 8012170 <__smakebuf_r+0x70>
 8012164:	89a3      	ldrh	r3, [r4, #12]
 8012166:	f023 0303 	bic.w	r3, r3, #3
 801216a:	f043 0301 	orr.w	r3, r3, #1
 801216e:	81a3      	strh	r3, [r4, #12]
 8012170:	89a3      	ldrh	r3, [r4, #12]
 8012172:	431d      	orrs	r5, r3
 8012174:	81a5      	strh	r5, [r4, #12]
 8012176:	e7cf      	b.n	8012118 <__smakebuf_r+0x18>

08012178 <_raise_r>:
 8012178:	291f      	cmp	r1, #31
 801217a:	b538      	push	{r3, r4, r5, lr}
 801217c:	4605      	mov	r5, r0
 801217e:	460c      	mov	r4, r1
 8012180:	d904      	bls.n	801218c <_raise_r+0x14>
 8012182:	2316      	movs	r3, #22
 8012184:	6003      	str	r3, [r0, #0]
 8012186:	f04f 30ff 	mov.w	r0, #4294967295
 801218a:	bd38      	pop	{r3, r4, r5, pc}
 801218c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801218e:	b112      	cbz	r2, 8012196 <_raise_r+0x1e>
 8012190:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012194:	b94b      	cbnz	r3, 80121aa <_raise_r+0x32>
 8012196:	4628      	mov	r0, r5
 8012198:	f000 f852 	bl	8012240 <_getpid_r>
 801219c:	4622      	mov	r2, r4
 801219e:	4601      	mov	r1, r0
 80121a0:	4628      	mov	r0, r5
 80121a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80121a6:	f000 b839 	b.w	801221c <_kill_r>
 80121aa:	2b01      	cmp	r3, #1
 80121ac:	d00a      	beq.n	80121c4 <_raise_r+0x4c>
 80121ae:	1c59      	adds	r1, r3, #1
 80121b0:	d103      	bne.n	80121ba <_raise_r+0x42>
 80121b2:	2316      	movs	r3, #22
 80121b4:	6003      	str	r3, [r0, #0]
 80121b6:	2001      	movs	r0, #1
 80121b8:	e7e7      	b.n	801218a <_raise_r+0x12>
 80121ba:	2100      	movs	r1, #0
 80121bc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80121c0:	4620      	mov	r0, r4
 80121c2:	4798      	blx	r3
 80121c4:	2000      	movs	r0, #0
 80121c6:	e7e0      	b.n	801218a <_raise_r+0x12>

080121c8 <raise>:
 80121c8:	4b02      	ldr	r3, [pc, #8]	@ (80121d4 <raise+0xc>)
 80121ca:	4601      	mov	r1, r0
 80121cc:	6818      	ldr	r0, [r3, #0]
 80121ce:	f7ff bfd3 	b.w	8012178 <_raise_r>
 80121d2:	bf00      	nop
 80121d4:	2400003c 	.word	0x2400003c

080121d8 <_fstat_r>:
 80121d8:	b538      	push	{r3, r4, r5, lr}
 80121da:	4d07      	ldr	r5, [pc, #28]	@ (80121f8 <_fstat_r+0x20>)
 80121dc:	2300      	movs	r3, #0
 80121de:	4604      	mov	r4, r0
 80121e0:	4608      	mov	r0, r1
 80121e2:	4611      	mov	r1, r2
 80121e4:	602b      	str	r3, [r5, #0]
 80121e6:	f7ee fc11 	bl	8000a0c <_fstat>
 80121ea:	1c43      	adds	r3, r0, #1
 80121ec:	d102      	bne.n	80121f4 <_fstat_r+0x1c>
 80121ee:	682b      	ldr	r3, [r5, #0]
 80121f0:	b103      	cbz	r3, 80121f4 <_fstat_r+0x1c>
 80121f2:	6023      	str	r3, [r4, #0]
 80121f4:	bd38      	pop	{r3, r4, r5, pc}
 80121f6:	bf00      	nop
 80121f8:	24009f98 	.word	0x24009f98

080121fc <_isatty_r>:
 80121fc:	b538      	push	{r3, r4, r5, lr}
 80121fe:	4d06      	ldr	r5, [pc, #24]	@ (8012218 <_isatty_r+0x1c>)
 8012200:	2300      	movs	r3, #0
 8012202:	4604      	mov	r4, r0
 8012204:	4608      	mov	r0, r1
 8012206:	602b      	str	r3, [r5, #0]
 8012208:	f7ee fc06 	bl	8000a18 <_isatty>
 801220c:	1c43      	adds	r3, r0, #1
 801220e:	d102      	bne.n	8012216 <_isatty_r+0x1a>
 8012210:	682b      	ldr	r3, [r5, #0]
 8012212:	b103      	cbz	r3, 8012216 <_isatty_r+0x1a>
 8012214:	6023      	str	r3, [r4, #0]
 8012216:	bd38      	pop	{r3, r4, r5, pc}
 8012218:	24009f98 	.word	0x24009f98

0801221c <_kill_r>:
 801221c:	b538      	push	{r3, r4, r5, lr}
 801221e:	4d07      	ldr	r5, [pc, #28]	@ (801223c <_kill_r+0x20>)
 8012220:	2300      	movs	r3, #0
 8012222:	4604      	mov	r4, r0
 8012224:	4608      	mov	r0, r1
 8012226:	4611      	mov	r1, r2
 8012228:	602b      	str	r3, [r5, #0]
 801222a:	f7ee fbc1 	bl	80009b0 <_kill>
 801222e:	1c43      	adds	r3, r0, #1
 8012230:	d102      	bne.n	8012238 <_kill_r+0x1c>
 8012232:	682b      	ldr	r3, [r5, #0]
 8012234:	b103      	cbz	r3, 8012238 <_kill_r+0x1c>
 8012236:	6023      	str	r3, [r4, #0]
 8012238:	bd38      	pop	{r3, r4, r5, pc}
 801223a:	bf00      	nop
 801223c:	24009f98 	.word	0x24009f98

08012240 <_getpid_r>:
 8012240:	f7ee bbb4 	b.w	80009ac <_getpid>

08012244 <_init>:
 8012244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012246:	bf00      	nop
 8012248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801224a:	bc08      	pop	{r3}
 801224c:	469e      	mov	lr, r3
 801224e:	4770      	bx	lr

08012250 <_fini>:
 8012250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012252:	bf00      	nop
 8012254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012256:	bc08      	pop	{r3}
 8012258:	469e      	mov	lr, r3
 801225a:	4770      	bx	lr
