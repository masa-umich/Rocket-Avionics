
STM32_Nucleo_H723ZG_ETH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012100  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fb4  080123d0  080123d0  000223d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08015384  08015384  00025384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08015388  08015388  00025388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000008c  24000000  0801538c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000e8b4  2400008c  08015418  0003008c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2400e940  08015418  0003e940  2**0
                  ALLOC
  8 .lwip_sec     00000160  30000000  30000000  00040000  2**2
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0003008c  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000300ba  2**0
                  CONTENTS, READONLY
 11 .debug_info   0005579d  00000000  00000000  000300fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000b76f  00000000  00000000  0008589a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002400  00000000  00000000  00091010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00003dc9  00000000  00000000  00093410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000459fc  00000000  00000000  000971d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00058a7d  00000000  00000000  000dcbd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001734ef  00000000  00000000  00135652  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000082dc  00000000  00000000  002a8b44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 000228a0  00000000  00000000  002b0e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000070  00000000  00000000  002d36c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400008c 	.word	0x2400008c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080123b8 	.word	0x080123b8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000090 	.word	0x24000090
 800030c:	080123b8 	.word	0x080123b8

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80003b0:	4b04      	ldr	r3, [pc, #16]	; (80003c4 <vApplicationGetIdleTaskMemory+0x14>)
{
 80003b2:	b410      	push	{r4}
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80003b4:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80003b6:	2380      	movs	r3, #128	; 0x80
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80003b8:	4c03      	ldr	r4, [pc, #12]	; (80003c8 <vApplicationGetIdleTaskMemory+0x18>)
 80003ba:	600c      	str	r4, [r1, #0]
  /* place for user code */
}
 80003bc:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80003c0:	6013      	str	r3, [r2, #0]
}
 80003c2:	4770      	bx	lr
 80003c4:	240002a8 	.word	0x240002a8
 80003c8:	240000a8 	.word	0x240000a8

080003cc <StartTCPTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTCPTask */
void StartTCPTask(void const * argument)
{
 80003cc:	b508      	push	{r3, lr}
  /* init code for LWIP */
  MX_LWIP_Init();
 80003ce:	f003 fd11 	bl	8003df4 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */

  server_init();
 80003d2:	f010 fc69 	bl	8010ca8 <server_init>
	for (;;) {
		osDelay(1);
 80003d6:	2001      	movs	r0, #1
 80003d8:	f004 f8c8 	bl	800456c <osDelay>
	for (;;) {
 80003dc:	e7fb      	b.n	80003d6 <StartTCPTask+0xa>
 80003de:	bf00      	nop

080003e0 <StartHeartbeatTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartHeartbeatTask */
void StartHeartbeatTask(void const * argument)
{
 80003e0:	b538      	push	{r3, r4, r5, lr}
 80003e2:	4c0c      	ldr	r4, [pc, #48]	; (8000414 <StartHeartbeatTask+0x34>)
  // Infinite loop

  for(;;)
  {
	  // Heartbeat LED0
	  HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 80003e4:	4d0c      	ldr	r5, [pc, #48]	; (8000418 <StartHeartbeatTask+0x38>)
 80003e6:	2102      	movs	r1, #2
 80003e8:	4628      	mov	r0, r5
 80003ea:	f001 fe69 	bl	80020c0 <HAL_GPIO_TogglePin>

	  char* msg = malloc(12);
 80003ee:	200c      	movs	r0, #12
 80003f0:	f010 ff38 	bl	8011264 <malloc>
 80003f4:	4603      	mov	r3, r0
	  memcpy(msg, "heartbeat\r\n", 12);
 80003f6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80003fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	  server_sendMsg(ALL_CONNECTIONS,  msg, 12);
 80003fe:	220c      	movs	r2, #12
 8000400:	4619      	mov	r1, r3
 8000402:	f04f 30ff 	mov.w	r0, #4294967295
 8000406:	f010 fdd1 	bl	8010fac <server_sendMsg>

	  osDelay(500);
 800040a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800040e:	f004 f8ad 	bl	800456c <osDelay>
  for(;;)
 8000412:	e7e8      	b.n	80003e6 <StartHeartbeatTask+0x6>
 8000414:	0801245c 	.word	0x0801245c
 8000418:	58021000 	.word	0x58021000

0800041c <StartRXMessages>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRXMessages */
void StartRXMessages(void const * argument)
{
 800041c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800041e:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
  /* USER CODE BEGIN StartRXMessages */

	char ret_buf[MAX_MSG_LEN];
	char buf[MAX_MSG_LEN];

	u16_t ret_len = 0;
 8000422:	2300      	movs	r3, #0

  // Infinite loop
  for(;;)
  {
	struct message msg = {-1, buf, MAX_MSG_LEN};
 8000424:	f04f 35ff 	mov.w	r5, #4294967295
 8000428:	f44f 7496 	mov.w	r4, #300	; 0x12c
 800042c:	ae51      	add	r6, sp, #324	; 0x144
	u16_t ret_len = 0;
 800042e:	f8ad 300a 	strh.w	r3, [sp, #10]
	server_retrieveMsg(&msg);
 8000432:	a803      	add	r0, sp, #12
	struct message msg = {-1, buf, MAX_MSG_LEN};
 8000434:	9405      	str	r4, [sp, #20]
 8000436:	e9cd 5603 	strd	r5, r6, [sp, #12]
	server_retrieveMsg(&msg);
 800043a:	f010 fdf7 	bl	801102c <server_retrieveMsg>
	parse_t rc = devparse(msg.buf, msg.len, ret_buf, &ret_len, msg.connfd);
 800043e:	9f03      	ldr	r7, [sp, #12]
 8000440:	aa06      	add	r2, sp, #24
 8000442:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8000446:	f10d 030a 	add.w	r3, sp, #10
 800044a:	9804      	ldr	r0, [sp, #16]
 800044c:	9700      	str	r7, [sp, #0]
 800044e:	f010 fbbb 	bl	8010bc8 <devparse>

	if (ret_len > 0) {
 8000452:	f8bd 200a 	ldrh.w	r2, [sp, #10]
		server_sendMsg(msg.connfd, ret_buf, ret_len);
 8000456:	a906      	add	r1, sp, #24
	if (ret_len > 0) {
 8000458:	b112      	cbz	r2, 8000460 <StartRXMessages+0x44>
		server_sendMsg(msg.connfd, ret_buf, ret_len);
 800045a:	9803      	ldr	r0, [sp, #12]
 800045c:	f010 fda6 	bl	8010fac <server_sendMsg>
	}

	osDelay(1);
 8000460:	2001      	movs	r0, #1
 8000462:	f004 f883 	bl	800456c <osDelay>
  {
 8000466:	e7e4      	b.n	8000432 <StartRXMessages+0x16>

08000468 <SystemClock_Config>:
{
 8000468:	b530      	push	{r4, r5, lr}
 800046a:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800046c:	224c      	movs	r2, #76	; 0x4c
 800046e:	2100      	movs	r1, #0
 8000470:	a809      	add	r0, sp, #36	; 0x24
 8000472:	f011 fa1b 	bl	80118ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000476:	2220      	movs	r2, #32
 8000478:	2100      	movs	r1, #0
 800047a:	a801      	add	r0, sp, #4
 800047c:	f011 fa16 	bl	80118ac <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000480:	2002      	movs	r0, #2
 8000482:	f001 fe37 	bl	80020f4 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000486:	4a20      	ldr	r2, [pc, #128]	; (8000508 <SystemClock_Config+0xa0>)
 8000488:	2300      	movs	r3, #0
 800048a:	9300      	str	r3, [sp, #0]
 800048c:	6993      	ldr	r3, [r2, #24]
 800048e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000492:	6193      	str	r3, [r2, #24]
 8000494:	6993      	ldr	r3, [r2, #24]
 8000496:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800049a:	9300      	str	r3, [sp, #0]
 800049c:	9b00      	ldr	r3, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800049e:	6993      	ldr	r3, [r2, #24]
 80004a0:	0499      	lsls	r1, r3, #18
 80004a2:	d5fc      	bpl.n	800049e <SystemClock_Config+0x36>
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80004a4:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004a6:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004a8:	2102      	movs	r1, #2
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80004aa:	2508      	movs	r5, #8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80004ac:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80004ae:	200a      	movs	r0, #10
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80004b0:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80004b2:	2440      	movs	r4, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLP = 1;
 80004b4:	9216      	str	r2, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80004b6:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80004b8:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80004ba:	9217      	str	r2, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLN = 125;
 80004bc:	2210      	movs	r2, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80004be:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004c0:	a809      	add	r0, sp, #36	; 0x24
  RCC_OscInitStruct.PLL.PLLR = 2;
 80004c2:	9118      	str	r1, [sp, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80004c4:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004c6:	e9cd 1312 	strd	r1, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80004ca:	e9cd 5319 	strd	r5, r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLN = 125;
 80004ce:	237d      	movs	r3, #125	; 0x7d
 80004d0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004d4:	f001 feb6 	bl	8002244 <HAL_RCC_OscConfig>
 80004d8:	4603      	mov	r3, r0
 80004da:	b108      	cbz	r0, 80004e0 <SystemClock_Config+0x78>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004dc:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004de:	e7fe      	b.n	80004de <SystemClock_Config+0x76>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004e0:	223f      	movs	r2, #63	; 0x3f
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004e2:	2103      	movs	r1, #3
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80004e4:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80004e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80004ea:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ec:	9201      	str	r2, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004ee:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80004f0:	9408      	str	r4, [sp, #32]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80004f2:	e9cd 5404 	strd	r5, r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80004f6:	e9cd 4306 	strd	r4, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80004fa:	f002 f971 	bl	80027e0 <HAL_RCC_ClockConfig>
 80004fe:	b108      	cbz	r0, 8000504 <SystemClock_Config+0x9c>
 8000500:	b672      	cpsid	i
  while (1)
 8000502:	e7fe      	b.n	8000502 <SystemClock_Config+0x9a>
}
 8000504:	b01d      	add	sp, #116	; 0x74
 8000506:	bd30      	pop	{r4, r5, pc}
 8000508:	58024800 	.word	0x58024800

0800050c <main>:
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800050c:	4ab2      	ldr	r2, [pc, #712]	; (80007d8 <main+0x2cc>)
 800050e:	6953      	ldr	r3, [r2, #20]
 8000510:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b09c      	sub	sp, #112	; 0x70
 8000518:	d111      	bne.n	800053e <main+0x32>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800051a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800051e:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000522:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000526:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800052a:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800052e:	6953      	ldr	r3, [r2, #20]
 8000530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000534:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000536:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800053a:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800053e:	48a6      	ldr	r0, [pc, #664]	; (80007d8 <main+0x2cc>)
 8000540:	6943      	ldr	r3, [r0, #20]
 8000542:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8000546:	d124      	bne.n	8000592 <main+0x86>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000548:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800054c:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000550:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000554:	f643 75e0 	movw	r5, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000558:	f3c3 344e 	ubfx	r4, r3, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800055c:	f3c3 0cc9 	ubfx	ip, r3, #3, #10
 8000560:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000562:	ea04 0105 	and.w	r1, r4, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000566:	4663      	mov	r3, ip
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000568:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800056c:	3b01      	subs	r3, #1
 800056e:	1c5e      	adds	r6, r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000570:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 8000574:	d1f8      	bne.n	8000568 <main+0x5c>
    } while(sets-- != 0U);
 8000576:	3c20      	subs	r4, #32
 8000578:	f114 0f20 	cmn.w	r4, #32
 800057c:	d1f1      	bne.n	8000562 <main+0x56>
 800057e:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000582:	6943      	ldr	r3, [r0, #20]
 8000584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000588:	6143      	str	r3, [r0, #20]
 800058a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800058e:	f3bf 8f6f 	isb	sy
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000592:	2400      	movs	r4, #0
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000594:	2501      	movs	r5, #1
  HAL_Init();
 8000596:	f000 fba7 	bl	8000ce8 <HAL_Init>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 800059a:	2602      	movs	r6, #2
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 800059c:	f44f 6780 	mov.w	r7, #1024	; 0x400
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80005a0:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
 80005a4:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  HAL_MPU_Disable();
 80005a8:	f000 fc48 	bl	8000e3c <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80005ac:	f248 721f 	movw	r2, #34591	; 0x871f
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80005b0:	f240 1301 	movw	r3, #257	; 0x101
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80005b4:	a815      	add	r0, sp, #84	; 0x54
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80005b6:	f8ad 5054 	strh.w	r5, [sp, #84]	; 0x54
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80005ba:	9318      	str	r3, [sp, #96]	; 0x60
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80005bc:	e9cd 4216 	strd	r4, r2, [sp, #88]	; 0x58
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80005c0:	f000 fc5a 	bl	8000e78 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x30000000;
 80005c4:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 80005c8:	4b84      	ldr	r3, [pc, #528]	; (80007dc <main+0x2d0>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80005ca:	a815      	add	r0, sp, #84	; 0x54
  MPU_InitStruct.BaseAddress = 0x30000000;
 80005cc:	9216      	str	r2, [sp, #88]	; 0x58
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80005ce:	f88d 5055 	strb.w	r5, [sp, #85]	; 0x55
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 80005d2:	9317      	str	r3, [sp, #92]	; 0x5c
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80005d4:	f88d 4061 	strb.w	r4, [sp, #97]	; 0x61
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80005d8:	f000 fc4e 	bl	8000e78 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 80005dc:	2308      	movs	r3, #8
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80005de:	a815      	add	r0, sp, #84	; 0x54
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80005e0:	f88d 5061 	strb.w	r5, [sp, #97]	; 0x61
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 80005e4:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80005e8:	f88d 5063 	strb.w	r5, [sp, #99]	; 0x63
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80005ec:	f88d 405e 	strb.w	r4, [sp, #94]	; 0x5e
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80005f0:	f88d 6055 	strb.w	r6, [sp, #85]	; 0x55
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80005f4:	f000 fc40 	bl	8000e78 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80005f8:	2004      	movs	r0, #4
 80005fa:	f000 fc2d 	bl	8000e58 <HAL_MPU_Enable>
  SystemClock_Config();
 80005fe:	f7ff ff33 	bl	8000468 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000602:	4b77      	ldr	r3, [pc, #476]	; (80007e0 <main+0x2d4>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000604:	9419      	str	r4, [sp, #100]	; 0x64
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000606:	f244 0101 	movw	r1, #16385	; 0x4001
 800060a:	4876      	ldr	r0, [pc, #472]	; (80007e4 <main+0x2d8>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060c:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
 8000610:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000614:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000618:	f042 0204 	orr.w	r2, r2, #4
 800061c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000620:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000624:	f002 0204 	and.w	r2, r2, #4
 8000628:	9200      	str	r2, [sp, #0]
 800062a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800062c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000630:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000634:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000638:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800063c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000640:	9201      	str	r2, [sp, #4]
 8000642:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000644:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000648:	432a      	orrs	r2, r5
 800064a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800064e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000652:	402a      	ands	r2, r5
 8000654:	9202      	str	r2, [sp, #8]
 8000656:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000658:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800065c:	4332      	orrs	r2, r6
 800065e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000662:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000666:	4032      	ands	r2, r6
 8000668:	9203      	str	r2, [sp, #12]
 800066a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800066c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000670:	f042 0208 	orr.w	r2, r2, #8
 8000674:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000678:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800067c:	f002 0208 	and.w	r2, r2, #8
 8000680:	9204      	str	r2, [sp, #16]
 8000682:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000684:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000688:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800068c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000690:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000694:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000698:	9205      	str	r2, [sp, #20]
 800069a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800069c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80006a0:	f042 0210 	orr.w	r2, r2, #16
 80006a4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 80006a8:	4622      	mov	r2, r4
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ae:	f003 0310 	and.w	r3, r3, #16
 80006b2:	9306      	str	r3, [sp, #24]
 80006b4:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 80006b6:	f001 fcff 	bl	80020b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80006ba:	4622      	mov	r2, r4
 80006bc:	484a      	ldr	r0, [pc, #296]	; (80007e8 <main+0x2dc>)
 80006be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006c2:	f001 fcf9 	bl	80020b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 80006c6:	4622      	mov	r2, r4
 80006c8:	4631      	mov	r1, r6
 80006ca:	4848      	ldr	r0, [pc, #288]	; (80007ec <main+0x2e0>)
 80006cc:	f001 fcf4 	bl	80020b8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 80006d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006d4:	a915      	add	r1, sp, #84	; 0x54
 80006d6:	4846      	ldr	r0, [pc, #280]	; (80007f0 <main+0x2e4>)
  GPIO_InitStruct.Pin = B1_Pin;
 80006d8:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006de:	f001 fbc3 	bl	8001e68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 80006e2:	f244 0301 	movw	r3, #16385	; 0x4001
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e6:	a915      	add	r1, sp, #84	; 0x54
 80006e8:	483e      	ldr	r0, [pc, #248]	; (80007e4 <main+0x2d8>)
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 80006ea:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ec:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	e9cd 5416 	strd	r5, r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f2:	f001 fbb9 	bl	8001e68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 80006f6:	f44f 7340 	mov.w	r3, #768	; 0x300
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006fa:	a915      	add	r1, sp, #84	; 0x54
 80006fc:	483a      	ldr	r0, [pc, #232]	; (80007e8 <main+0x2dc>)
  GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 80006fe:	9315      	str	r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000700:	2307      	movs	r3, #7
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	e9cd 6416 	strd	r6, r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000706:	e9cd 4318 	strd	r4, r3, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800070a:	f001 fbad 	bl	8001e68 <HAL_GPIO_Init>
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800070e:	a915      	add	r1, sp, #84	; 0x54
 8000710:	4835      	ldr	r0, [pc, #212]	; (80007e8 <main+0x2dc>)
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000712:	9715      	str	r7, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000714:	9418      	str	r4, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	e9cd 5416 	strd	r5, r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800071a:	f001 fba5 	bl	8001e68 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800071e:	2280      	movs	r2, #128	; 0x80
 8000720:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000724:	a915      	add	r1, sp, #84	; 0x54
 8000726:	4833      	ldr	r0, [pc, #204]	; (80007f4 <main+0x2e8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800072a:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800072e:	f001 fb9b 	bl	8001e68 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000732:	230a      	movs	r3, #10
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000734:	a915      	add	r1, sp, #84	; 0x54
 8000736:	4830      	ldr	r0, [pc, #192]	; (80007f8 <main+0x2ec>)
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000738:	9715      	str	r7, [sp, #84]	; 0x54
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800073a:	e9cd 4318 	strd	r4, r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073e:	e9cd 6416 	strd	r6, r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000742:	f001 fb91 	bl	8001e68 <HAL_GPIO_Init>
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8000746:	a915      	add	r1, sp, #84	; 0x54
 8000748:	4828      	ldr	r0, [pc, #160]	; (80007ec <main+0x2e0>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074a:	e9cd 6515 	strd	r6, r5, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074e:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8000752:	f001 fb89 	bl	8001e68 <HAL_GPIO_Init>
  hrtc.Instance = RTC;
 8000756:	4829      	ldr	r0, [pc, #164]	; (80007fc <main+0x2f0>)
  hrtc.Init.AsynchPrediv = 127;
 8000758:	237f      	movs	r3, #127	; 0x7f
  hrtc.Instance = RTC;
 800075a:	4a29      	ldr	r2, [pc, #164]	; (8000800 <main+0x2f4>)
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800075c:	6144      	str	r4, [r0, #20]
  hrtc.Init.AsynchPrediv = 127;
 800075e:	6083      	str	r3, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 8000760:	23ff      	movs	r3, #255	; 0xff
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000762:	e9c0 2400 	strd	r2, r4, [r0]
  hrtc.Init.SynchPrediv = 255;
 8000766:	e9c0 3403 	strd	r3, r4, [r0, #12]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800076a:	e9c0 4406 	strd	r4, r4, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800076e:	f003 f8ef 	bl	8003950 <HAL_RTC_Init>
 8000772:	4605      	mov	r5, r0
 8000774:	b108      	cbz	r0, 800077a <main+0x26e>
  __ASM volatile ("cpsid i" : : : "memory");
 8000776:	b672      	cpsid	i
  while (1)
 8000778:	e7fe      	b.n	8000778 <main+0x26c>
  osThreadDef(tcpTask, StartTCPTask, osPriorityAboveNormal, 0, 512);
 800077a:	4c22      	ldr	r4, [pc, #136]	; (8000804 <main+0x2f8>)
 800077c:	ae07      	add	r6, sp, #28
 800077e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000780:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000782:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000786:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  tcpTaskHandle = osThreadCreate(osThread(tcpTask), NULL);
 800078a:	4629      	mov	r1, r5
 800078c:	a807      	add	r0, sp, #28
 800078e:	f003 febb 	bl	8004508 <osThreadCreate>
 8000792:	4b1d      	ldr	r3, [pc, #116]	; (8000808 <main+0x2fc>)
  osThreadDef(HeartbeatTask, StartHeartbeatTask, osPriorityBelowNormal, 0, 256);
 8000794:	f104 0c0c 	add.w	ip, r4, #12
 8000798:	ae0e      	add	r6, sp, #56	; 0x38
  tcpTaskHandle = osThreadCreate(osThread(tcpTask), NULL);
 800079a:	6018      	str	r0, [r3, #0]
  osThreadDef(rxMessages, StartRXMessages, osPriorityIdle, 0, 256);
 800079c:	3428      	adds	r4, #40	; 0x28
  osThreadDef(HeartbeatTask, StartHeartbeatTask, osPriorityBelowNormal, 0, 256);
 800079e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80007a2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80007a4:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80007a8:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  HeartbeatTaskHandle = osThreadCreate(osThread(HeartbeatTask), NULL);
 80007ac:	4629      	mov	r1, r5
 80007ae:	a80e      	add	r0, sp, #56	; 0x38
 80007b0:	f003 feaa 	bl	8004508 <osThreadCreate>
 80007b4:	4b15      	ldr	r3, [pc, #84]	; (800080c <main+0x300>)
  osThreadDef(rxMessages, StartRXMessages, osPriorityIdle, 0, 256);
 80007b6:	ae15      	add	r6, sp, #84	; 0x54
  HeartbeatTaskHandle = osThreadCreate(osThread(HeartbeatTask), NULL);
 80007b8:	6018      	str	r0, [r3, #0]
  osThreadDef(rxMessages, StartRXMessages, osPriorityIdle, 0, 256);
 80007ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007bc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80007be:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80007c2:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  rxMessagesHandle = osThreadCreate(osThread(rxMessages), NULL);
 80007c6:	4629      	mov	r1, r5
 80007c8:	a815      	add	r0, sp, #84	; 0x54
 80007ca:	f003 fe9d 	bl	8004508 <osThreadCreate>
 80007ce:	4b10      	ldr	r3, [pc, #64]	; (8000810 <main+0x304>)
 80007d0:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80007d2:	f003 fe8b 	bl	80044ec <osKernelStart>
  while (1)
 80007d6:	e7fe      	b.n	80007d6 <main+0x2ca>
 80007d8:	e000ed00 	.word	0xe000ed00
 80007dc:	0301000e 	.word	0x0301000e
 80007e0:	58024400 	.word	0x58024400
 80007e4:	58020400 	.word	0x58020400
 80007e8:	58020c00 	.word	0x58020c00
 80007ec:	58021000 	.word	0x58021000
 80007f0:	58020800 	.word	0x58020800
 80007f4:	58021800 	.word	0x58021800
 80007f8:	58020000 	.word	0x58020000
 80007fc:	2400034c 	.word	0x2400034c
 8000800:	58004000 	.word	0x58004000
 8000804:	080123d0 	.word	0x080123d0
 8000808:	24000374 	.word	0x24000374
 800080c:	24000348 	.word	0x24000348
 8000810:	24000370 	.word	0x24000370

08000814 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM6) {
 8000814:	4b03      	ldr	r3, [pc, #12]	; (8000824 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000816:	6802      	ldr	r2, [r0, #0]
 8000818:	429a      	cmp	r2, r3
 800081a:	d000      	beq.n	800081e <HAL_TIM_PeriodElapsedCallback+0xa>
}
 800081c:	4770      	bx	lr
    HAL_IncTick();
 800081e:	f000 ba93 	b.w	8000d48 <HAL_IncTick>
 8000822:	bf00      	nop
 8000824:	40001000 	.word	0x40001000

08000828 <Error_Handler>:
 8000828:	b672      	cpsid	i
  while (1)
 800082a:	e7fe      	b.n	800082a <Error_Handler+0x2>

0800082c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082c:	4b0b      	ldr	r3, [pc, #44]	; (800085c <HAL_MspInit+0x30>)

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	210f      	movs	r1, #15
 8000832:	f06f 0001 	mvn.w	r0, #1
{
 8000836:	b410      	push	{r4}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000838:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
{
 800083c:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083e:	f044 0402 	orr.w	r4, r4, #2
 8000842:	f8c3 40f4 	str.w	r4, [r3, #244]	; 0xf4
 8000846:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800084a:	f003 0302 	and.w	r3, r3, #2
 800084e:	9301      	str	r3, [sp, #4]
 8000850:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000852:	b003      	add	sp, #12
 8000854:	f85d 4b04 	ldr.w	r4, [sp], #4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000858:	f000 baa4 	b.w	8000da4 <HAL_NVIC_SetPriority>
 800085c:	58024400 	.word	0x58024400

08000860 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000860:	b510      	push	{r4, lr}
 8000862:	b0ae      	sub	sp, #184	; 0xb8
 8000864:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000866:	22b8      	movs	r2, #184	; 0xb8
 8000868:	2100      	movs	r1, #0
 800086a:	4668      	mov	r0, sp
 800086c:	f011 f81e 	bl	80118ac <memset>
  if(hrtc->Instance==RTC)
 8000870:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <HAL_RTC_MspInit+0x50>)
 8000872:	6822      	ldr	r2, [r4, #0]
 8000874:	429a      	cmp	r2, r3
 8000876:	d001      	beq.n	800087c <HAL_RTC_MspInit+0x1c>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000878:	b02e      	add	sp, #184	; 0xb8
 800087a:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800087c:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 80008a8 <HAL_RTC_MspInit+0x48>
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000880:	f44f 7300 	mov.w	r3, #512	; 0x200
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000884:	4668      	mov	r0, sp
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000886:	ed8d 7b00 	vstr	d7, [sp]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800088a:	932c      	str	r3, [sp, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800088c:	f002 fa42 	bl	8002d14 <HAL_RCCEx_PeriphCLKConfig>
 8000890:	b930      	cbnz	r0, 80008a0 <HAL_RTC_MspInit+0x40>
    __HAL_RCC_RTC_ENABLE();
 8000892:	4a08      	ldr	r2, [pc, #32]	; (80008b4 <HAL_RTC_MspInit+0x54>)
 8000894:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8000896:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800089a:	6713      	str	r3, [r2, #112]	; 0x70
}
 800089c:	b02e      	add	sp, #184	; 0xb8
 800089e:	bd10      	pop	{r4, pc}
      Error_Handler();
 80008a0:	f7ff ffc2 	bl	8000828 <Error_Handler>
 80008a4:	e7f5      	b.n	8000892 <HAL_RTC_MspInit+0x32>
 80008a6:	bf00      	nop
 80008a8:	00400000 	.word	0x00400000
 80008ac:	00000000 	.word	0x00000000
 80008b0:	58004000 	.word	0x58004000
 80008b4:	58024400 	.word	0x58024400

080008b8 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008b8:	280f      	cmp	r0, #15
 80008ba:	d901      	bls.n	80008c0 <HAL_InitTick+0x8>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 80008bc:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 80008be:	4770      	bx	lr
{
 80008c0:	b530      	push	{r4, r5, lr}
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80008c2:	4601      	mov	r1, r0
{
 80008c4:	b08b      	sub	sp, #44	; 0x2c
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80008c6:	2200      	movs	r2, #0
 80008c8:	4604      	mov	r4, r0
 80008ca:	2036      	movs	r0, #54	; 0x36
 80008cc:	f000 fa6a 	bl	8000da4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80008d0:	2036      	movs	r0, #54	; 0x36
 80008d2:	f000 faa5 	bl	8000e20 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_TIM6_CLK_ENABLE();
 80008d6:	4b1a      	ldr	r3, [pc, #104]	; (8000940 <HAL_InitTick+0x88>)
    uwTickPrio = TickPriority;
 80008d8:	4a1a      	ldr	r2, [pc, #104]	; (8000944 <HAL_InitTick+0x8c>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008da:	4669      	mov	r1, sp
 80008dc:	a802      	add	r0, sp, #8
    uwTickPrio = TickPriority;
 80008de:	6014      	str	r4, [r2, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 80008e0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80008e4:	f042 0210 	orr.w	r2, r2, #16
 80008e8:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80008ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80008f0:	f003 0310 	and.w	r3, r3, #16
 80008f4:	9301      	str	r3, [sp, #4]
 80008f6:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008f8:	f002 f8ec 	bl	8002ad4 <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80008fc:	9b07      	ldr	r3, [sp, #28]
 80008fe:	b9bb      	cbnz	r3, 8000930 <HAL_InitTick+0x78>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000900:	f002 f8d6 	bl	8002ab0 <HAL_RCC_GetPCLK1Freq>
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000904:	4b10      	ldr	r3, [pc, #64]	; (8000948 <HAL_InitTick+0x90>)
  htim6.Init.ClockDivision = 0;
 8000906:	2200      	movs	r2, #0
  htim6.Instance = TIM6;
 8000908:	4c10      	ldr	r4, [pc, #64]	; (800094c <HAL_InitTick+0x94>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800090a:	fba3 1300 	umull	r1, r3, r3, r0
  htim6.Instance = TIM6;
 800090e:	4d10      	ldr	r5, [pc, #64]	; (8000950 <HAL_InitTick+0x98>)
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000910:	f240 31e7 	movw	r1, #999	; 0x3e7
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000914:	4620      	mov	r0, r4
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000916:	0c9b      	lsrs	r3, r3, #18
  htim6.Instance = TIM6;
 8000918:	6025      	str	r5, [r4, #0]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800091a:	60a2      	str	r2, [r4, #8]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800091c:	3b01      	subs	r3, #1
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800091e:	e9c4 1203 	strd	r1, r2, [r4, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000922:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000924:	f003 fa2c 	bl	8003d80 <HAL_TIM_Base_Init>
 8000928:	b130      	cbz	r0, 8000938 <HAL_InitTick+0x80>
    return HAL_ERROR;
 800092a:	2001      	movs	r0, #1
}
 800092c:	b00b      	add	sp, #44	; 0x2c
 800092e:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000930:	f002 f8be 	bl	8002ab0 <HAL_RCC_GetPCLK1Freq>
 8000934:	0040      	lsls	r0, r0, #1
 8000936:	e7e5      	b.n	8000904 <HAL_InitTick+0x4c>
    return HAL_TIM_Base_Start_IT(&htim6);
 8000938:	4620      	mov	r0, r4
 800093a:	f003 f863 	bl	8003a04 <HAL_TIM_Base_Start_IT>
 800093e:	e7f5      	b.n	800092c <HAL_InitTick+0x74>
 8000940:	58024400 	.word	0x58024400
 8000944:	2400000c 	.word	0x2400000c
 8000948:	431bde83 	.word	0x431bde83
 800094c:	24000378 	.word	0x24000378
 8000950:	40001000 	.word	0x40001000

08000954 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <NMI_Handler>
 8000956:	bf00      	nop

08000958 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000958:	e7fe      	b.n	8000958 <HardFault_Handler>
 800095a:	bf00      	nop

0800095c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800095c:	e7fe      	b.n	800095c <MemManage_Handler>
 800095e:	bf00      	nop

08000960 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000960:	e7fe      	b.n	8000960 <BusFault_Handler>
 8000962:	bf00      	nop

08000964 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000964:	e7fe      	b.n	8000964 <UsageFault_Handler>
 8000966:	bf00      	nop

08000968 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop

0800096c <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800096c:	4801      	ldr	r0, [pc, #4]	; (8000974 <TIM6_DAC_IRQHandler+0x8>)
 800096e:	f003 b8b9 	b.w	8003ae4 <HAL_TIM_IRQHandler>
 8000972:	bf00      	nop
 8000974:	24000378 	.word	0x24000378

08000978 <ETH_IRQHandler>:
void ETH_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000978:	4801      	ldr	r0, [pc, #4]	; (8000980 <ETH_IRQHandler+0x8>)
 800097a:	f000 bf27 	b.w	80017cc <HAL_ETH_IRQHandler>
 800097e:	bf00      	nop
 8000980:	2400047c 	.word	0x2400047c

08000984 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8000984:	2001      	movs	r0, #1
 8000986:	4770      	bx	lr

08000988 <_kill>:

int _kill(int pid, int sig)
{
	errno = EINVAL;
 8000988:	4b02      	ldr	r3, [pc, #8]	; (8000994 <_kill+0xc>)
 800098a:	2216      	movs	r2, #22
	return -1;
}
 800098c:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 8000990:	601a      	str	r2, [r3, #0]
}
 8000992:	4770      	bx	lr
 8000994:	2400e928 	.word	0x2400e928

08000998 <_exit>:
	errno = EINVAL;
 8000998:	4b01      	ldr	r3, [pc, #4]	; (80009a0 <_exit+0x8>)
 800099a:	2216      	movs	r2, #22
 800099c:	601a      	str	r2, [r3, #0]

void _exit (int status)
{
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 800099e:	e7fe      	b.n	800099e <_exit+0x6>
 80009a0:	2400e928 	.word	0x2400e928

080009a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009a4:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009a6:	1e16      	subs	r6, r2, #0
 80009a8:	dd07      	ble.n	80009ba <_read+0x16>
 80009aa:	460c      	mov	r4, r1
 80009ac:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 80009ae:	f3af 8000 	nop.w
 80009b2:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009b6:	42a5      	cmp	r5, r4
 80009b8:	d1f9      	bne.n	80009ae <_read+0xa>
	}

return len;
}
 80009ba:	4630      	mov	r0, r6
 80009bc:	bd70      	pop	{r4, r5, r6, pc}
 80009be:	bf00      	nop

080009c0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009c0:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009c2:	1e16      	subs	r6, r2, #0
 80009c4:	dd07      	ble.n	80009d6 <_write+0x16>
 80009c6:	460c      	mov	r4, r1
 80009c8:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 80009ca:	f814 0b01 	ldrb.w	r0, [r4], #1
 80009ce:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009d2:	42a5      	cmp	r5, r4
 80009d4:	d1f9      	bne.n	80009ca <_write+0xa>
	}
	return len;
}
 80009d6:	4630      	mov	r0, r6
 80009d8:	bd70      	pop	{r4, r5, r6, pc}
 80009da:	bf00      	nop

080009dc <_close>:

int _close(int file)
{
	return -1;
}
 80009dc:	f04f 30ff 	mov.w	r0, #4294967295
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop

080009e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80009e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80009e8:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80009ea:	604b      	str	r3, [r1, #4]
}
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80009f0:	2001      	movs	r0, #1
 80009f2:	4770      	bx	lr

080009f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80009f4:	2000      	movs	r0, #0
 80009f6:	4770      	bx	lr

080009f8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009f8:	490d      	ldr	r1, [pc, #52]	; (8000a30 <_sbrk+0x38>)
{
 80009fa:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009fc:	4a0d      	ldr	r2, [pc, #52]	; (8000a34 <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 80009fe:	6808      	ldr	r0, [r1, #0]
{
 8000a00:	b410      	push	{r4}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a02:	4c0d      	ldr	r4, [pc, #52]	; (8000a38 <_sbrk+0x40>)
 8000a04:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8000a06:	b170      	cbz	r0, 8000a26 <_sbrk+0x2e>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a08:	4403      	add	r3, r0
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d803      	bhi.n	8000a16 <_sbrk+0x1e>

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8000a0e:	f85d 4b04 	ldr.w	r4, [sp], #4
  __sbrk_heap_end += incr;
 8000a12:	600b      	str	r3, [r1, #0]
}
 8000a14:	4770      	bx	lr
    errno = ENOMEM;
 8000a16:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <_sbrk+0x44>)
 8000a18:	220c      	movs	r2, #12
    return (void *)-1;
 8000a1a:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000a1e:	f85d 4b04 	ldr.w	r4, [sp], #4
    errno = ENOMEM;
 8000a22:	601a      	str	r2, [r3, #0]
}
 8000a24:	4770      	bx	lr
    __sbrk_heap_end = &_end;
 8000a26:	4c06      	ldr	r4, [pc, #24]	; (8000a40 <_sbrk+0x48>)
 8000a28:	4620      	mov	r0, r4
 8000a2a:	600c      	str	r4, [r1, #0]
 8000a2c:	e7ec      	b.n	8000a08 <_sbrk+0x10>
 8000a2e:	bf00      	nop
 8000a30:	240003c4 	.word	0x240003c4
 8000a34:	24050000 	.word	0x24050000
 8000a38:	00000400 	.word	0x00000400
 8000a3c:	2400e928 	.word	0x2400e928
 8000a40:	2400e940 	.word	0x2400e940

08000a44 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a44:	4922      	ldr	r1, [pc, #136]	; (8000ad0 <SystemInit+0x8c>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a46:	4a23      	ldr	r2, [pc, #140]	; (8000ad4 <SystemInit+0x90>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a48:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000a4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 8000a50:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a56:	6813      	ldr	r3, [r2, #0]
 8000a58:	f003 030f 	and.w	r3, r3, #15
 8000a5c:	2b06      	cmp	r3, #6
 8000a5e:	d805      	bhi.n	8000a6c <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a60:	6813      	ldr	r3, [r2, #0]
 8000a62:	f023 030f 	bic.w	r3, r3, #15
 8000a66:	f043 0307 	orr.w	r3, r3, #7
 8000a6a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000a6c:	4b1a      	ldr	r3, [pc, #104]	; (8000ad8 <SystemInit+0x94>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a6e:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000a70:	4a1a      	ldr	r2, [pc, #104]	; (8000adc <SystemInit+0x98>)
  RCC->CR |= RCC_CR_HSION;
 8000a72:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a74:	4817      	ldr	r0, [pc, #92]	; (8000ad4 <SystemInit+0x90>)
  RCC->CR |= RCC_CR_HSION;
 8000a76:	f041 0101 	orr.w	r1, r1, #1
 8000a7a:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000a7c:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8000a7e:	6819      	ldr	r1, [r3, #0]
 8000a80:	400a      	ands	r2, r1
 8000a82:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a84:	6803      	ldr	r3, [r0, #0]
 8000a86:	071b      	lsls	r3, r3, #28
 8000a88:	d505      	bpl.n	8000a96 <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a8a:	6803      	ldr	r3, [r0, #0]
 8000a8c:	f023 030f 	bic.w	r3, r3, #15
 8000a90:	f043 0307 	orr.w	r3, r3, #7
 8000a94:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000a96:	4b10      	ldr	r3, [pc, #64]	; (8000ad8 <SystemInit+0x94>)
 8000a98:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000a9a:	4911      	ldr	r1, [pc, #68]	; (8000ae0 <SystemInit+0x9c>)
  RCC->PLLCKSELR = 0x02020200;
 8000a9c:	4c11      	ldr	r4, [pc, #68]	; (8000ae4 <SystemInit+0xa0>)
  RCC->PLLCFGR = 0x01FF0000;
 8000a9e:	4812      	ldr	r0, [pc, #72]	; (8000ae8 <SystemInit+0xa4>)
  RCC->D1CFGR = 0x00000000;
 8000aa0:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8000aa2:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8000aa4:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8000aa6:	629c      	str	r4, [r3, #40]	; 0x28
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000aa8:	f243 04d2 	movw	r4, #12498	; 0x30d2
  RCC->PLLCFGR = 0x01FF0000;
 8000aac:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8000aae:	6319      	str	r1, [r3, #48]	; 0x30
  RCC->PLL1FRACR = 0x00000000;
 8000ab0:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x01010280;
 8000ab2:	6399      	str	r1, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
 8000ab4:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x01010280;
 8000ab6:	6419      	str	r1, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
 8000ab8:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= 0xFFFBFFFFU;
 8000aba:	6819      	ldr	r1, [r3, #0]
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000abc:	480b      	ldr	r0, [pc, #44]	; (8000aec <SystemInit+0xa8>)
  RCC->CR &= 0xFFFBFFFFU;
 8000abe:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8000ac2:	6019      	str	r1, [r3, #0]
  RCC->CIER = 0x00000000;
 8000ac4:	661a      	str	r2, [r3, #96]	; 0x60
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000ac6:	6004      	str	r4, [r0, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000ac8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	e000ed00 	.word	0xe000ed00
 8000ad4:	52002000 	.word	0x52002000
 8000ad8:	58024400 	.word	0x58024400
 8000adc:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ae0:	01010280 	.word	0x01010280
 8000ae4:	02020200 	.word	0x02020200
 8000ae8:	01ff0000 	.word	0x01ff0000
 8000aec:	52004000 	.word	0x52004000

08000af0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000af0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b28 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000af4:	f7ff ffa6 	bl	8000a44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000af8:	480c      	ldr	r0, [pc, #48]	; (8000b2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000afa:	490d      	ldr	r1, [pc, #52]	; (8000b30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000afc:	4a0d      	ldr	r2, [pc, #52]	; (8000b34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000afe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b00:	e002      	b.n	8000b08 <LoopCopyDataInit>

08000b02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b06:	3304      	adds	r3, #4

08000b08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b0c:	d3f9      	bcc.n	8000b02 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b0e:	4a0a      	ldr	r2, [pc, #40]	; (8000b38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b10:	4c0a      	ldr	r4, [pc, #40]	; (8000b3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b14:	e001      	b.n	8000b1a <LoopFillZerobss>

08000b16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b18:	3204      	adds	r2, #4

08000b1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b1c:	d3fb      	bcc.n	8000b16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b1e:	f010 ff79 	bl	8011a14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b22:	f7ff fcf3 	bl	800050c <main>
  bx  lr
 8000b26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b28:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000b2c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000b30:	2400008c 	.word	0x2400008c
  ldr r2, =_sidata
 8000b34:	0801538c 	.word	0x0801538c
  ldr r2, =_sbss
 8000b38:	2400008c 	.word	0x2400008c
  ldr r4, =_ebss
 8000b3c:	2400e940 	.word	0x2400e940

08000b40 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b40:	e7fe      	b.n	8000b40 <ADC3_IRQHandler>
	...

08000b44 <LAN8742_RegisterBusIO>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000b44:	b188      	cbz	r0, 8000b6a <LAN8742_RegisterBusIO+0x26>
 8000b46:	68ca      	ldr	r2, [r1, #12]
 8000b48:	b17a      	cbz	r2, 8000b6a <LAN8742_RegisterBusIO+0x26>
{
 8000b4a:	b430      	push	{r4, r5}
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000b4c:	688c      	ldr	r4, [r1, #8]
 8000b4e:	b17c      	cbz	r4, 8000b70 <LAN8742_RegisterBusIO+0x2c>
 8000b50:	690d      	ldr	r5, [r1, #16]
 8000b52:	b16d      	cbz	r5, 8000b70 <LAN8742_RegisterBusIO+0x2c>
 8000b54:	4603      	mov	r3, r0
  {
    return LAN8742_STATUS_ERROR;
  }
  
  pObj->IO.Init = ioctx->Init;
 8000b56:	6808      	ldr	r0, [r1, #0]
  pObj->IO.DeInit = ioctx->DeInit;
 8000b58:	6849      	ldr	r1, [r1, #4]
  pObj->IO.Init = ioctx->Init;
 8000b5a:	6098      	str	r0, [r3, #8]
  pObj->IO.ReadReg = ioctx->ReadReg;
  pObj->IO.WriteReg = ioctx->WriteReg;
  pObj->IO.GetTick = ioctx->GetTick;
  
  return LAN8742_STATUS_OK;
 8000b5c:	2000      	movs	r0, #0
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000b5e:	615a      	str	r2, [r3, #20]
  pObj->IO.GetTick = ioctx->GetTick;
 8000b60:	619d      	str	r5, [r3, #24]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000b62:	e9c3 1403 	strd	r1, r4, [r3, #12]
}
 8000b66:	bc30      	pop	{r4, r5}
 8000b68:	4770      	bx	lr
    return LAN8742_STATUS_ERROR;
 8000b6a:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000b6e:	4770      	bx	lr
    return LAN8742_STATUS_ERROR;
 8000b70:	f04f 30ff 	mov.w	r0, #4294967295
 8000b74:	e7f7      	b.n	8000b66 <LAN8742_RegisterBusIO+0x22>
 8000b76:	bf00      	nop

08000b78 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000b78:	b570      	push	{r4, r5, r6, lr}
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000b7a:	2300      	movs	r3, #0
 {
 8000b7c:	b082      	sub	sp, #8
   int32_t status = LAN8742_STATUS_OK;
   
   if(pObj->Is_Initialized == 0)
 8000b7e:	6844      	ldr	r4, [r0, #4]
 {
 8000b80:	4605      	mov	r5, r0
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000b82:	9301      	str	r3, [sp, #4]
   if(pObj->Is_Initialized == 0)
 8000b84:	2c00      	cmp	r4, #0
 8000b86:	d146      	bne.n	8000c16 <LAN8742_Init+0x9e>
   {
     if(pObj->IO.Init != 0)
 8000b88:	6883      	ldr	r3, [r0, #8]
 8000b8a:	b103      	cbz	r3, 8000b8e <LAN8742_Init+0x16>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000b8c:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000b8e:	2320      	movs	r3, #32
   int32_t status = LAN8742_STATUS_OK;
 8000b90:	2600      	movs	r6, #0
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000b92:	602b      	str	r3, [r5, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000b94:	e007      	b.n	8000ba6 <LAN8742_Init+0x2e>
         /* Can't read from this device address 
            continue with next address */
         continue;
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000b96:	9b01      	ldr	r3, [sp, #4]
 8000b98:	f003 031f 	and.w	r3, r3, #31
 8000b9c:	42a3      	cmp	r3, r4
 8000b9e:	d016      	beq.n	8000bce <LAN8742_Init+0x56>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000ba0:	3401      	adds	r4, #1
 8000ba2:	2c20      	cmp	r4, #32
 8000ba4:	d00b      	beq.n	8000bbe <LAN8742_Init+0x46>
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000ba6:	4620      	mov	r0, r4
 8000ba8:	696b      	ldr	r3, [r5, #20]
 8000baa:	aa01      	add	r2, sp, #4
 8000bac:	2112      	movs	r1, #18
 8000bae:	4798      	blx	r3
 8000bb0:	2800      	cmp	r0, #0
 8000bb2:	daf0      	bge.n	8000b96 <LAN8742_Init+0x1e>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000bb4:	3401      	adds	r4, #1
         status = LAN8742_STATUS_READ_ERROR;
 8000bb6:	f06f 0604 	mvn.w	r6, #4
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000bba:	2c20      	cmp	r4, #32
 8000bbc:	d1f3      	bne.n	8000ba6 <LAN8742_Init+0x2e>
         status = LAN8742_STATUS_OK;
         break;
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000bbe:	682c      	ldr	r4, [r5, #0]
 8000bc0:	2c1f      	cmp	r4, #31
 8000bc2:	d937      	bls.n	8000c34 <LAN8742_Init+0xbc>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000bc4:	f06f 0602 	mvn.w	r6, #2
     }
     pObj->Is_Initialized = 1;
   }
   
   return status;
 }
 8000bc8:	4630      	mov	r0, r6
 8000bca:	b002      	add	sp, #8
 8000bcc:	bd70      	pop	{r4, r5, r6, pc}
         pObj->DevAddr = addr;
 8000bce:	602c      	str	r4, [r5, #0]
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000bd0:	692b      	ldr	r3, [r5, #16]
 8000bd2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000bd6:	4620      	mov	r0, r4
 8000bd8:	2100      	movs	r1, #0
 8000bda:	4798      	blx	r3
 8000bdc:	2800      	cmp	r0, #0
 8000bde:	db2c      	blt.n	8000c3a <LAN8742_Init+0xc2>
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000be0:	696b      	ldr	r3, [r5, #20]
 8000be2:	aa01      	add	r2, sp, #4
 8000be4:	2100      	movs	r1, #0
 8000be6:	6828      	ldr	r0, [r5, #0]
 8000be8:	4798      	blx	r3
 8000bea:	2800      	cmp	r0, #0
 8000bec:	db2b      	blt.n	8000c46 <LAN8742_Init+0xce>
           tickstart = pObj->IO.GetTick();
 8000bee:	69ab      	ldr	r3, [r5, #24]
 8000bf0:	4798      	blx	r3
 8000bf2:	4604      	mov	r4, r0
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000bf4:	e00c      	b.n	8000c10 <LAN8742_Init+0x98>
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000bf6:	69ab      	ldr	r3, [r5, #24]
 8000bf8:	4798      	blx	r3
 8000bfa:	1b00      	subs	r0, r0, r4
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000bfc:	aa01      	add	r2, sp, #4
 8000bfe:	2100      	movs	r1, #0
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000c00:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000c04:	d81c      	bhi.n	8000c40 <LAN8742_Init+0xc8>
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000c06:	696b      	ldr	r3, [r5, #20]
 8000c08:	6828      	ldr	r0, [r5, #0]
 8000c0a:	4798      	blx	r3
 8000c0c:	2800      	cmp	r0, #0
 8000c0e:	db1a      	blt.n	8000c46 <LAN8742_Init+0xce>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000c10:	9b01      	ldr	r3, [sp, #4]
 8000c12:	041b      	lsls	r3, r3, #16
 8000c14:	d4ef      	bmi.n	8000bf6 <LAN8742_Init+0x7e>
     tickstart =  pObj->IO.GetTick();
 8000c16:	69ab      	ldr	r3, [r5, #24]
 8000c18:	4798      	blx	r3
 8000c1a:	4604      	mov	r4, r0
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8000c1c:	69ab      	ldr	r3, [r5, #24]
 8000c1e:	4798      	blx	r3
 8000c20:	1b03      	subs	r3, r0, r4
 8000c22:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000c26:	d9f9      	bls.n	8000c1c <LAN8742_Init+0xa4>
     pObj->Is_Initialized = 1;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	2600      	movs	r6, #0
 8000c2c:	606b      	str	r3, [r5, #4]
 }
 8000c2e:	4630      	mov	r0, r6
 8000c30:	b002      	add	sp, #8
 8000c32:	bd70      	pop	{r4, r5, r6, pc}
     if(status == LAN8742_STATUS_OK)
 8000c34:	2e00      	cmp	r6, #0
 8000c36:	d1fa      	bne.n	8000c2e <LAN8742_Init+0xb6>
 8000c38:	e7ca      	b.n	8000bd0 <LAN8742_Init+0x58>
         status = LAN8742_STATUS_WRITE_ERROR;
 8000c3a:	f06f 0603 	mvn.w	r6, #3
 8000c3e:	e7f6      	b.n	8000c2e <LAN8742_Init+0xb6>
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000c40:	f06f 0601 	mvn.w	r6, #1
   return status;
 8000c44:	e7f3      	b.n	8000c2e <LAN8742_Init+0xb6>
           status = LAN8742_STATUS_READ_ERROR;
 8000c46:	f06f 0604 	mvn.w	r6, #4
 8000c4a:	e7f0      	b.n	8000c2e <LAN8742_Init+0xb6>

08000c4c <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000c4c:	b530      	push	{r4, r5, lr}
  uint32_t readval = 0;
 8000c4e:	2500      	movs	r5, #0
{
 8000c50:	b083      	sub	sp, #12
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000c52:	6943      	ldr	r3, [r0, #20]
{
 8000c54:	4604      	mov	r4, r0
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000c56:	aa01      	add	r2, sp, #4
 8000c58:	2101      	movs	r1, #1
 8000c5a:	6800      	ldr	r0, [r0, #0]
  uint32_t readval = 0;
 8000c5c:	9501      	str	r5, [sp, #4]
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000c5e:	4798      	blx	r3
 8000c60:	42a8      	cmp	r0, r5
 8000c62:	db3d      	blt.n	8000ce0 <LAN8742_GetLinkState+0x94>
  {
    return LAN8742_STATUS_READ_ERROR;
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000c64:	6963      	ldr	r3, [r4, #20]
 8000c66:	aa01      	add	r2, sp, #4
 8000c68:	2101      	movs	r1, #1
 8000c6a:	6820      	ldr	r0, [r4, #0]
 8000c6c:	4798      	blx	r3
 8000c6e:	2800      	cmp	r0, #0
 8000c70:	db36      	blt.n	8000ce0 <LAN8742_GetLinkState+0x94>
  {
    return LAN8742_STATUS_READ_ERROR;
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000c72:	9b01      	ldr	r3, [sp, #4]
 8000c74:	075b      	lsls	r3, r3, #29
 8000c76:	d52a      	bpl.n	8000cce <LAN8742_GetLinkState+0x82>
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000c78:	6963      	ldr	r3, [r4, #20]
 8000c7a:	aa01      	add	r2, sp, #4
 8000c7c:	4629      	mov	r1, r5
 8000c7e:	6820      	ldr	r0, [r4, #0]
 8000c80:	4798      	blx	r3
 8000c82:	2800      	cmp	r0, #0
 8000c84:	db2c      	blt.n	8000ce0 <LAN8742_GetLinkState+0x94>
  {
    return LAN8742_STATUS_READ_ERROR;
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000c86:	9b01      	ldr	r3, [sp, #4]
 8000c88:	04dd      	lsls	r5, r3, #19
 8000c8a:	d514      	bpl.n	8000cb6 <LAN8742_GetLinkState+0x6a>
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000c8c:	6963      	ldr	r3, [r4, #20]
 8000c8e:	aa01      	add	r2, sp, #4
 8000c90:	211f      	movs	r1, #31
 8000c92:	6820      	ldr	r0, [r4, #0]
 8000c94:	4798      	blx	r3
 8000c96:	2800      	cmp	r0, #0
 8000c98:	db22      	blt.n	8000ce0 <LAN8742_GetLinkState+0x94>
    {
      return LAN8742_STATUS_READ_ERROR;
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000c9a:	9b01      	ldr	r3, [sp, #4]
 8000c9c:	04da      	lsls	r2, r3, #19
 8000c9e:	d51d      	bpl.n	8000cdc <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000ca0:	f003 031c 	and.w	r3, r3, #28
 8000ca4:	2b18      	cmp	r3, #24
 8000ca6:	d017      	beq.n	8000cd8 <LAN8742_GetLinkState+0x8c>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000ca8:	2b08      	cmp	r3, #8
 8000caa:	d013      	beq.n	8000cd4 <LAN8742_GetLinkState+0x88>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000cac:	2b14      	cmp	r3, #20
 8000cae:	d10b      	bne.n	8000cc8 <LAN8742_GetLinkState+0x7c>
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000cb0:	2004      	movs	r0, #4
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
    }				
  }
}
 8000cb2:	b003      	add	sp, #12
 8000cb4:	bd30      	pop	{r4, r5, pc}
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8000cb6:	f403 5204 	and.w	r2, r3, #8448	; 0x2100
 8000cba:	f5b2 5f04 	cmp.w	r2, #8448	; 0x2100
 8000cbe:	d00b      	beq.n	8000cd8 <LAN8742_GetLinkState+0x8c>
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000cc0:	0498      	lsls	r0, r3, #18
 8000cc2:	d407      	bmi.n	8000cd4 <LAN8742_GetLinkState+0x88>
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000cc4:	05d9      	lsls	r1, r3, #23
 8000cc6:	d4f3      	bmi.n	8000cb0 <LAN8742_GetLinkState+0x64>
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000cc8:	2005      	movs	r0, #5
}
 8000cca:	b003      	add	sp, #12
 8000ccc:	bd30      	pop	{r4, r5, pc}
    return LAN8742_STATUS_LINK_DOWN;    
 8000cce:	2001      	movs	r0, #1
}
 8000cd0:	b003      	add	sp, #12
 8000cd2:	bd30      	pop	{r4, r5, pc}
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000cd4:	2003      	movs	r0, #3
 8000cd6:	e7f8      	b.n	8000cca <LAN8742_GetLinkState+0x7e>
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000cd8:	2002      	movs	r0, #2
 8000cda:	e7f6      	b.n	8000cca <LAN8742_GetLinkState+0x7e>
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000cdc:	2006      	movs	r0, #6
 8000cde:	e7f4      	b.n	8000cca <LAN8742_GetLinkState+0x7e>
    return LAN8742_STATUS_READ_ERROR;
 8000ce0:	f06f 0004 	mvn.w	r0, #4
 8000ce4:	e7f1      	b.n	8000cca <LAN8742_GetLinkState+0x7e>
 8000ce6:	bf00      	nop

08000ce8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce8:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cea:	2003      	movs	r0, #3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000cec:	4c12      	ldr	r4, [pc, #72]	; (8000d38 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cee:	f000 f847 	bl	8000d80 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000cf2:	f001 fd53 	bl	800279c <HAL_RCC_GetSysClockFreq>
 8000cf6:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <HAL_Init+0x54>)
 8000cf8:	4911      	ldr	r1, [pc, #68]	; (8000d40 <HAL_Init+0x58>)
 8000cfa:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000cfc:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000cfe:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000d02:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000d06:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000d08:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000d0a:	f002 021f 	and.w	r2, r2, #31
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000d0e:	490d      	ldr	r1, [pc, #52]	; (8000d44 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000d10:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000d14:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000d16:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 8000d1a:	6008      	str	r0, [r1, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d1c:	200f      	movs	r0, #15
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000d1e:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d20:	f7ff fdca 	bl	80008b8 <HAL_InitTick>
 8000d24:	b110      	cbz	r0, 8000d2c <HAL_Init+0x44>
  {
    return HAL_ERROR;
 8000d26:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
 8000d28:	4620      	mov	r0, r4
 8000d2a:	bd10      	pop	{r4, pc}
 8000d2c:	4604      	mov	r4, r0
  HAL_MspInit();
 8000d2e:	f7ff fd7d 	bl	800082c <HAL_MspInit>
}
 8000d32:	4620      	mov	r0, r4
 8000d34:	bd10      	pop	{r4, pc}
 8000d36:	bf00      	nop
 8000d38:	24000004 	.word	0x24000004
 8000d3c:	58024400 	.word	0x58024400
 8000d40:	0801248c 	.word	0x0801248c
 8000d44:	24000000 	.word	0x24000000

08000d48 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000d48:	4a03      	ldr	r2, [pc, #12]	; (8000d58 <HAL_IncTick+0x10>)
 8000d4a:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <HAL_IncTick+0x14>)
 8000d4c:	6811      	ldr	r1, [r2, #0]
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	440b      	add	r3, r1
 8000d52:	6013      	str	r3, [r2, #0]
}
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	240003c8 	.word	0x240003c8
 8000d5c:	24000008 	.word	0x24000008

08000d60 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000d60:	4b01      	ldr	r3, [pc, #4]	; (8000d68 <HAL_GetTick+0x8>)
 8000d62:	6818      	ldr	r0, [r3, #0]
}
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	240003c8 	.word	0x240003c8

08000d6c <HAL_SYSCFG_ETHInterfaceSelect>:
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8000d6c:	4a03      	ldr	r2, [pc, #12]	; (8000d7c <HAL_SYSCFG_ETHInterfaceSelect+0x10>)
 8000d6e:	6853      	ldr	r3, [r2, #4]
 8000d70:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8000d74:	4318      	orrs	r0, r3
 8000d76:	6050      	str	r0, [r2, #4]
}
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	58000400 	.word	0x58000400

08000d80 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d80:	4906      	ldr	r1, [pc, #24]	; (8000d9c <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d82:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d86:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8000d88:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d8a:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d8c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d90:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d94:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8000d96:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000d98:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000d9a:	4770      	bx	lr
 8000d9c:	e000ed00 	.word	0xe000ed00
 8000da0:	05fa0000 	.word	0x05fa0000

08000da4 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da4:	4b1b      	ldr	r3, [pc, #108]	; (8000e14 <HAL_NVIC_SetPriority+0x70>)
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dac:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dae:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000db2:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db6:	f1be 0f04 	cmp.w	lr, #4
 8000dba:	bf28      	it	cs
 8000dbc:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dc0:	f1bc 0f06 	cmp.w	ip, #6
 8000dc4:	d91a      	bls.n	8000dfc <HAL_NVIC_SetPriority+0x58>
 8000dc6:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc8:	f04f 3cff 	mov.w	ip, #4294967295
 8000dcc:	fa0c fc03 	lsl.w	ip, ip, r3
 8000dd0:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd4:	f04f 3cff 	mov.w	ip, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8000dd8:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dda:	fa0c fc0e 	lsl.w	ip, ip, lr
 8000dde:	ea21 010c 	bic.w	r1, r1, ip
 8000de2:	fa01 f103 	lsl.w	r1, r1, r3
 8000de6:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8000dea:	db0a      	blt.n	8000e02 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dec:	0109      	lsls	r1, r1, #4
 8000dee:	4b0a      	ldr	r3, [pc, #40]	; (8000e18 <HAL_NVIC_SetPriority+0x74>)
 8000df0:	b2c9      	uxtb	r1, r1
 8000df2:	4403      	add	r3, r0
 8000df4:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000df8:	f85d fb04 	ldr.w	pc, [sp], #4
 8000dfc:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dfe:	4613      	mov	r3, r2
 8000e00:	e7e8      	b.n	8000dd4 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e02:	f000 000f 	and.w	r0, r0, #15
 8000e06:	0109      	lsls	r1, r1, #4
 8000e08:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <HAL_NVIC_SetPriority+0x78>)
 8000e0a:	b2c9      	uxtb	r1, r1
 8000e0c:	4403      	add	r3, r0
 8000e0e:	7619      	strb	r1, [r3, #24]
 8000e10:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e14:	e000ed00 	.word	0xe000ed00
 8000e18:	e000e100 	.word	0xe000e100
 8000e1c:	e000ecfc 	.word	0xe000ecfc

08000e20 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000e20:	2800      	cmp	r0, #0
 8000e22:	db07      	blt.n	8000e34 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e24:	2301      	movs	r3, #1
 8000e26:	f000 011f 	and.w	r1, r0, #31
 8000e2a:	4a03      	ldr	r2, [pc, #12]	; (8000e38 <HAL_NVIC_EnableIRQ+0x18>)
 8000e2c:	0940      	lsrs	r0, r0, #5
 8000e2e:	408b      	lsls	r3, r1
 8000e30:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	e000e100 	.word	0xe000e100

08000e3c <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000e3c:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000e40:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000e42:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000e44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e46:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000e4a:	625a      	str	r2, [r3, #36]	; 0x24
  MPU->CTRL = 0;
 8000e4c:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000e58:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <HAL_MPU_Enable+0x1c>)
 8000e5a:	f040 0001 	orr.w	r0, r0, #1
 8000e5e:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000e62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e64:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000e68:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000e6a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000e6e:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000e72:	4770      	bx	lr
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000e78:	4a17      	ldr	r2, [pc, #92]	; (8000ed8 <HAL_MPU_ConfigRegion+0x60>)
 8000e7a:	7843      	ldrb	r3, [r0, #1]
 8000e7c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 8000e80:	7801      	ldrb	r1, [r0, #0]
 8000e82:	b321      	cbz	r1, 8000ece <HAL_MPU_ConfigRegion+0x56>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8000e84:	6843      	ldr	r3, [r0, #4]
{
 8000e86:	b500      	push	{lr}
    MPU->RBAR = MPU_Init->BaseAddress;
 8000e88:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000e8c:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e8e:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000e92:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000e94:	f890 e00f 	ldrb.w	lr, [r0, #15]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e98:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000e9c:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000ea0:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000ea2:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000ea4:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000ea8:	f890 c00d 	ldrb.w	ip, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000eac:	ea43 438c 	orr.w	r3, r3, ip, lsl #18
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000eb0:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000eb4:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8000eb8:	7a01      	ldrb	r1, [r0, #8]
 8000eba:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000ebe:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8000ec2:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000ec6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8000eca:	f85d fb04 	ldr.w	pc, [sp], #4
    MPU->RBAR = 0x00;
 8000ece:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 8000ed2:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
 8000ed6:	4770      	bx	lr
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8000edc:	b430      	push	{r4, r5}
               macconf->BackOffLimit |
               ((uint32_t)macconf->DeferralCheck << 4) |
               macconf->PreambleLength);

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8000ede:	688b      	ldr	r3, [r1, #8]
 8000ee0:	680d      	ldr	r5, [r1, #0]
 8000ee2:	694c      	ldr	r4, [r1, #20]
 8000ee4:	432b      	orrs	r3, r5
 8000ee6:	6802      	ldr	r2, [r0, #0]
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8000ee8:	f891 c011 	ldrb.w	ip, [r1, #17]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8000eec:	4323      	orrs	r3, r4
 8000eee:	698c      	ldr	r4, [r1, #24]
 8000ef0:	6810      	ldr	r0, [r2, #0]
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8000ef2:	fabc fc8c 	clz	ip, ip
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8000ef6:	4323      	orrs	r3, r4
 8000ef8:	6a4c      	ldr	r4, [r1, #36]	; 0x24
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8000efa:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
               macconf->GiantPacketSizeLimit);

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8000efe:	4d52      	ldr	r5, [pc, #328]	; (8001048 <ETH_SetMACConfig+0x16c>)
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8000f00:	4323      	orrs	r3, r4
 8000f02:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8000f04:	4323      	orrs	r3, r4
 8000f06:	4c51      	ldr	r4, [pc, #324]	; (800104c <ETH_SetMACConfig+0x170>)
 8000f08:	4020      	ands	r0, r4
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8000f0a:	790c      	ldrb	r4, [r1, #4]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8000f0c:	4303      	orrs	r3, r0
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8000f0e:	7b48      	ldrb	r0, [r1, #13]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8000f10:	ea43 63c4 	orr.w	r3, r3, r4, lsl #27
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8000f14:	7b0c      	ldrb	r4, [r1, #12]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8000f16:	ea43 53c4 	orr.w	r3, r3, r4, lsl #23
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8000f1a:	7b8c      	ldrb	r4, [r1, #14]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8000f1c:	ea43 5380 	orr.w	r3, r3, r0, lsl #22
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8000f20:	7bc8      	ldrb	r0, [r1, #15]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8000f22:	ea43 5344 	orr.w	r3, r3, r4, lsl #21
               ((uint32_t)macconf->JumboPacket << 16) |
 8000f26:	7c8c      	ldrb	r4, [r1, #18]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8000f28:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
               ((uint32_t)macconf->LoopbackMode << 12) |
 8000f2c:	7f08      	ldrb	r0, [r1, #28]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8000f2e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8000f32:	7f4c      	ldrb	r4, [r1, #29]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8000f34:	ea43 3300 	orr.w	r3, r3, r0, lsl #12
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8000f38:	7fc8      	ldrb	r0, [r1, #31]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8000f3a:	ea43 23c4 	orr.w	r3, r3, r4, lsl #11
               ((uint32_t)macconf->DeferralCheck << 4) |
 8000f3e:	f891 4028 	ldrb.w	r4, [r1, #40]	; 0x28
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8000f42:	ea43 2340 	orr.w	r3, r3, r0, lsl #9
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8000f46:	7c08      	ldrb	r0, [r1, #16]
 8000f48:	fab0 f080 	clz	r0, r0
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8000f4c:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8000f50:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8000f52:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8000f54:	ea43 43c0 	orr.w	r3, r3, r0, lsl #19
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8000f58:	7f88      	ldrb	r0, [r1, #30]
 8000f5a:	fab0 f080 	clz	r0, r0
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8000f5e:	ea43 434c 	orr.w	r3, r3, ip, lsl #17
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8000f62:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8000f64:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8000f68:	f891 0020 	ldrb.w	r0, [r1, #32]
 8000f6c:	fab0 f080 	clz	r0, r0
 8000f70:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8000f72:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8000f76:	6b48      	ldr	r0, [r1, #52]	; 0x34
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8000f78:	6013      	str	r3, [r2, #0]
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8000f7a:	6853      	ldr	r3, [r2, #4]
 8000f7c:	402b      	ands	r3, r5
               macconf->PauseLowThreshold |
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
               (macconf->PauseTime << 16));

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8000f7e:	f64f 750d 	movw	r5, #65293	; 0xff0d
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8000f82:	ea43 6344 	orr.w	r3, r3, r4, lsl #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8000f86:	f891 4038 	ldrb.w	r4, [r1, #56]	; 0x38
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8000f8a:	4303      	orrs	r3, r0
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8000f8c:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8000f90:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8000f94:	f891 4031 	ldrb.w	r4, [r1, #49]	; 0x31
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8000f98:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8000f9c:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
 8000fa0:	fab0 f080 	clz	r0, r0
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8000fa4:	ea43 4344 	orr.w	r3, r3, r4, lsl #17
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8000fa8:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8000faa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8000fae:	4828      	ldr	r0, [pc, #160]	; (8001050 <ETH_SetMACConfig+0x174>)
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8000fb0:	6053      	str	r3, [r2, #4]
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8000fb2:	68d3      	ldr	r3, [r2, #12]
               (macconf->PauseTime << 16));
 8000fb4:	6c8c      	ldr	r4, [r1, #72]	; 0x48
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8000fb6:	4018      	ands	r0, r3
 8000fb8:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8000fba:	4318      	orrs	r0, r3
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8000fbc:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8000fc0:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8000fc4:	60d0      	str	r0, [r2, #12]
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8000fc6:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8000fc8:	6d08      	ldr	r0, [r1, #80]	; 0x50
 8000fca:	402b      	ands	r3, r5
 8000fcc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8000fd0:	f891 4054 	ldrb.w	r4, [r1, #84]	; 0x54
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8000fd4:	4303      	orrs	r3, r0
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8000fd6:	f891 004c 	ldrb.w	r0, [r1, #76]	; 0x4c
 8000fda:	fab0 f080 	clz	r0, r0
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8000fde:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8000fe2:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8000fe4:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8000fe8:	e9d1 5416 	ldrd	r5, r4, [r1, #88]	; 0x58
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8000fec:	6713      	str	r3, [r2, #112]	; 0x70
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8000fee:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8000ff2:	f891 3056 	ldrb.w	r3, [r1, #86]	; 0x56
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8000ff6:	f020 0003 	bic.w	r0, r0, #3
 8000ffa:	4303      	orrs	r3, r0
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8000ffc:	f891 0055 	ldrb.w	r0, [r1, #85]	; 0x55
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001000:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 8001004:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001008:	f8d2 3d00 	ldr.w	r3, [r2, #3328]	; 0xd00
 800100c:	f023 0372 	bic.w	r3, r3, #114	; 0x72
 8001010:	432b      	orrs	r3, r5
 8001012:	f8c2 3d00 	str.w	r3, [r2, #3328]	; 0xd00
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001016:	f8d2 3d30 	ldr.w	r3, [r2, #3376]	; 0xd30
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800101a:	f891 0061 	ldrb.w	r0, [r1, #97]	; 0x61
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800101e:	f023 037b 	bic.w	r3, r3, #123	; 0x7b
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001022:	f891 c062 	ldrb.w	ip, [r1, #98]	; 0x62
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001026:	4323      	orrs	r3, r4
 8001028:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800102c:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
 8001030:	fab0 f180 	clz	r1, r0
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001034:	ea43 03cc 	orr.w	r3, r3, ip, lsl #3
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001038:	0949      	lsrs	r1, r1, #5
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800103a:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
}
 800103e:	bc30      	pop	{r4, r5}
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001040:	f8c2 3d30 	str.w	r3, [r2, #3376]	; 0xd30
}
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	c0f88000 	.word	0xc0f88000
 800104c:	00048083 	.word	0x00048083
 8001050:	fffffef0 	.word	0xfffffef0

08001054 <ETH_SetDMAConfig>:
static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001054:	6803      	ldr	r3, [r0, #0]
 8001056:	4a1e      	ldr	r2, [pc, #120]	; (80010d0 <ETH_SetDMAConfig+0x7c>)
 8001058:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800105c:	6808      	ldr	r0, [r1, #0]
{
 800105e:	b410      	push	{r4}
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001060:	681c      	ldr	r4, [r3, #0]
 8001062:	4022      	ands	r2, r4
 8001064:	4302      	orrs	r2, r0
 8001066:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
               dmaconf->BurstMode |
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001068:	7b0a      	ldrb	r2, [r1, #12]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800106a:	790c      	ldrb	r4, [r1, #4]
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800106c:	03d2      	lsls	r2, r2, #15

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800106e:	6858      	ldr	r0, [r3, #4]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001070:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
 8001074:	688c      	ldr	r4, [r1, #8]
 8001076:	4322      	orrs	r2, r4
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001078:	4c16      	ldr	r4, [pc, #88]	; (80010d4 <ETH_SetDMAConfig+0x80>)
 800107a:	4004      	ands	r4, r0

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800107c:	6a08      	ldr	r0, [r1, #32]
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800107e:	4322      	orrs	r2, r4
 8001080:	605a      	str	r2, [r3, #4]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001082:	7b4a      	ldrb	r2, [r1, #13]
               dmaconf->MaximumSegmentSize);

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001084:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001088:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800108c:	4812      	ldr	r0, [pc, #72]	; (80010d8 <ETH_SetDMAConfig+0x84>)
 800108e:	4020      	ands	r0, r4
 8001090:	4302      	orrs	r2, r0
 8001092:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001096:	7f4a      	ldrb	r2, [r1, #29]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001098:	7d0c      	ldrb	r4, [r1, #20]
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800109a:	0312      	lsls	r2, r2, #12

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800109c:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
  dmaregval = (dmaconf->TxDMABurstLength |
 80010a0:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 80010a4:	690c      	ldr	r4, [r1, #16]
 80010a6:	4322      	orrs	r2, r4
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80010a8:	4c0c      	ldr	r4, [pc, #48]	; (80010dc <ETH_SetDMAConfig+0x88>)
 80010aa:	4004      	ands	r4, r0

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80010ac:	6988      	ldr	r0, [r1, #24]
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80010ae:	4322      	orrs	r2, r4
 80010b0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
               dmaconf->RxDMABurstLength);

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80010b4:	f8d3 4108 	ldr.w	r4, [r3, #264]	; 0x108
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80010b8:	7f0a      	ldrb	r2, [r1, #28]
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80010ba:	4909      	ldr	r1, [pc, #36]	; (80010e0 <ETH_SetDMAConfig+0x8c>)
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80010bc:	ea40 72c2 	orr.w	r2, r0, r2, lsl #31
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80010c0:	4021      	ands	r1, r4
}
 80010c2:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80010c6:	430a      	orrs	r2, r1
 80010c8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	ffff87fd 	.word	0xffff87fd
 80010d4:	ffff2ffe 	.word	0xffff2ffe
 80010d8:	fffec000 	.word	0xfffec000
 80010dc:	ffc0efef 	.word	0xffc0efef
 80010e0:	7fc0ffff 	.word	0x7fc0ffff

080010e4 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80010e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80010e8:	6a84      	ldr	r4, [r0, #40]	; 0x28
{
 80010ea:	b083      	sub	sp, #12
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
  uint32_t idx;
  uint32_t descnbr = 0;
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80010ec:	688e      	ldr	r6, [r1, #8]
 80010ee:	eb00 0984 	add.w	r9, r0, r4, lsl #2
{
 80010f2:	9201      	str	r2, [sp, #4]
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80010f4:	f8d9 3018 	ldr.w	r3, [r9, #24]
  uint32_t           bd_count = 0;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80010f8:	68da      	ldr	r2, [r3, #12]
 80010fa:	2a00      	cmp	r2, #0
 80010fc:	f2c0 8124 	blt.w	8001348 <ETH_Prepare_Tx_Descriptors+0x264>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8001100:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
 8001104:	2a00      	cmp	r2, #0
 8001106:	f040 811f 	bne.w	8001348 <ETH_Prepare_Tx_Descriptors+0x264>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800110a:	f8d1 c000 	ldr.w	ip, [r1]
 800110e:	f01c 0704 	ands.w	r7, ip, #4
 8001112:	d02d      	beq.n	8001170 <ETH_Prepare_Tx_Descriptors+0x8c>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8001114:	68da      	ldr	r2, [r3, #12]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8001116:	f01c 0f08 	tst.w	ip, #8
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 800111a:	4dae      	ldr	r5, [pc, #696]	; (80013d4 <ETH_Prepare_Tx_Descriptors+0x2f0>)
 800111c:	ea05 0502 	and.w	r5, r5, r2
 8001120:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8001122:	ea45 0502 	orr.w	r5, r5, r2
 8001126:	60dd      	str	r5, [r3, #12]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8001128:	68da      	ldr	r2, [r3, #12]
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 800112a:	6805      	ldr	r5, [r0, #0]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 800112c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001130:	60da      	str	r2, [r3, #12]
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8001132:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8001134:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001138:	662a      	str	r2, [r5, #96]	; 0x60
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 800113a:	d019      	beq.n	8001170 <ETH_Prepare_Tx_Descriptors+0x8c>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 800113c:	689a      	ldr	r2, [r3, #8]
 800113e:	fa1f fe82 	uxth.w	lr, r2
 8001142:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8001144:	ea4e 4202 	orr.w	r2, lr, r2, lsl #16
 8001148:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 800114a:	68da      	ldr	r2, [r3, #12]
 800114c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001150:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8001152:	68da      	ldr	r2, [r3, #12]
 8001154:	f422 2e40 	bic.w	lr, r2, #786432	; 0xc0000
 8001158:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800115a:	ea4e 0202 	orr.w	r2, lr, r2
 800115e:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8001160:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8001162:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001166:	666a      	str	r2, [r5, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8001168:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800116a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800116e:	652a      	str	r2, [r5, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8001170:	f01c 0810 	ands.w	r8, ip, #16
 8001174:	d009      	beq.n	800118a <ETH_Prepare_Tx_Descriptors+0xa6>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8001176:	689a      	ldr	r2, [r3, #8]
 8001178:	4d97      	ldr	r5, [pc, #604]	; (80013d8 <ETH_Prepare_Tx_Descriptors+0x2f4>)
 800117a:	4015      	ands	r5, r2
 800117c:	698a      	ldr	r2, [r1, #24]
 800117e:	4315      	orrs	r5, r2
 8001180:	609d      	str	r5, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8001182:	68da      	ldr	r2, [r3, #12]
 8001184:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001188:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800118a:	f01c 0f14 	tst.w	ip, #20
 800118e:	f040 80df 	bne.w	8001350 <ETH_Prepare_Tx_Descriptors+0x26c>
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8001192:	4622      	mov	r2, r4
 8001194:	f04f 0e01 	mov.w	lr, #1
  /***************************************************************************/

  descnbr += 1U;

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8001198:	6835      	ldr	r5, [r6, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800119a:	f8df a23c 	ldr.w	sl, [pc, #572]	; 80013d8 <ETH_Prepare_Tx_Descriptors+0x2f4>
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800119e:	601d      	str	r5, [r3, #0]
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80011a0:	689d      	ldr	r5, [r3, #8]
 80011a2:	ea05 0a0a 	and.w	sl, r5, sl
 80011a6:	6875      	ldr	r5, [r6, #4]
 80011a8:	ea4a 0505 	orr.w	r5, sl, r5
 80011ac:	609d      	str	r5, [r3, #8]

  if (txbuffer->next != NULL)
 80011ae:	68b5      	ldr	r5, [r6, #8]
 80011b0:	2d00      	cmp	r5, #0
 80011b2:	f000 8133 	beq.w	800141c <ETH_Prepare_Tx_Descriptors+0x338>
  {
    txbuffer = txbuffer->next;
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80011b6:	682e      	ldr	r6, [r5, #0]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80011b8:	f8df a220 	ldr.w	sl, [pc, #544]	; 80013dc <ETH_Prepare_Tx_Descriptors+0x2f8>
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80011bc:	605e      	str	r6, [r3, #4]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80011be:	689e      	ldr	r6, [r3, #8]
 80011c0:	ea06 0a0a 	and.w	sl, r6, sl
 80011c4:	686e      	ldr	r6, [r5, #4]
 80011c6:	ea4a 4606 	orr.w	r6, sl, r6, lsl #16
 80011ca:	609e      	str	r6, [r3, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80011cc:	68de      	ldr	r6, [r3, #12]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80011ce:	f1b8 0f00 	cmp.w	r8, #0
 80011d2:	f000 80e0 	beq.w	8001396 <ETH_Prepare_Tx_Descriptors+0x2b2>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80011d6:	f426 0cf0 	bic.w	ip, r6, #7864320	; 0x780000
 80011da:	6a0e      	ldr	r6, [r1, #32]
 80011dc:	ea4c 46c6 	orr.w	r6, ip, r6, lsl #19
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80011e0:	f8df c1fc 	ldr.w	ip, [pc, #508]	; 80013e0 <ETH_Prepare_Tx_Descriptors+0x2fc>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80011e4:	60de      	str	r6, [r3, #12]
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80011e6:	68de      	ldr	r6, [r3, #12]
 80011e8:	ea06 0c0c 	and.w	ip, r6, ip
 80011ec:	69ce      	ldr	r6, [r1, #28]
 80011ee:	ea4c 0606 	orr.w	r6, ip, r6
 80011f2:	60de      	str	r6, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80011f4:	68de      	ldr	r6, [r3, #12]
 80011f6:	f446 2680 	orr.w	r6, r6, #262144	; 0x40000
 80011fa:	60de      	str	r6, [r3, #12]
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80011fc:	b12f      	cbz	r7, 800120a <ETH_Prepare_Tx_Descriptors+0x126>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 80011fe:	689f      	ldr	r7, [r3, #8]
 8001200:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 8001202:	f427 4740 	bic.w	r7, r7, #49152	; 0xc000
 8001206:	433e      	orrs	r6, r7
 8001208:	609e      	str	r6, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 800120a:	68de      	ldr	r6, [r3, #12]
 800120c:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8001210:	60de      	str	r6, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8001212:	68de      	ldr	r6, [r3, #12]
 8001214:	f026 4680 	bic.w	r6, r6, #1073741824	; 0x40000000
 8001218:	60de      	str	r6, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800121a:	f3bf 8f5f 	dmb	sy
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800121e:	68de      	ldr	r6, [r3, #12]
 8001220:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 8001224:	60de      	str	r6, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8001226:	680e      	ldr	r6, [r1, #0]
 8001228:	07b6      	lsls	r6, r6, #30
 800122a:	d505      	bpl.n	8001238 <ETH_Prepare_Tx_Descriptors+0x154>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 800122c:	68df      	ldr	r7, [r3, #12]
 800122e:	68ce      	ldr	r6, [r1, #12]
 8001230:	f027 7760 	bic.w	r7, r7, #58720256	; 0x3800000
 8001234:	433e      	orrs	r6, r7
 8001236:	60de      	str	r6, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8001238:	f8d5 8008 	ldr.w	r8, [r5, #8]
 800123c:	f1b8 0f00 	cmp.w	r8, #0
 8001240:	f000 80d2 	beq.w	80013e8 <ETH_Prepare_Tx_Descriptors+0x304>
 8001244:	f04f 0c00 	mov.w	ip, #0
    txbuffer = txbuffer->next;

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8001248:	4d63      	ldr	r5, [pc, #396]	; (80013d8 <ETH_Prepare_Tx_Descriptors+0x2f4>)
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800124a:	4e64      	ldr	r6, [pc, #400]	; (80013dc <ETH_Prepare_Tx_Descriptors+0x2f8>)
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800124c:	46a2      	mov	sl, r4
 800124e:	e01d      	b.n	800128c <ETH_Prepare_Tx_Descriptors+0x1a8>
 8001250:	f8df 818c 	ldr.w	r8, [pc, #396]	; 80013e0 <ETH_Prepare_Tx_Descriptors+0x2fc>
 8001254:	ea04 0808 	and.w	r8, r4, r8
 8001258:	69cc      	ldr	r4, [r1, #28]
 800125a:	ea48 0404 	orr.w	r4, r8, r4
 800125e:	60dc      	str	r4, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8001260:	68dc      	ldr	r4, [r3, #12]
 8001262:	f444 2480 	orr.w	r4, r4, #262144	; 0x40000
 8001266:	60dc      	str	r4, [r3, #12]
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
      }
    }

    bd_count += 1U;
 8001268:	f10c 0c01 	add.w	ip, ip, #1
 800126c:	f3bf 8f5f 	dmb	sy

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8001270:	68dc      	ldr	r4, [r3, #12]
  while (txbuffer->next != NULL)
 8001272:	f8d7 8008 	ldr.w	r8, [r7, #8]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8001276:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 800127a:	60dc      	str	r4, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 800127c:	68dc      	ldr	r4, [r3, #12]
 800127e:	f024 4480 	bic.w	r4, r4, #1073741824	; 0x40000000
 8001282:	60dc      	str	r4, [r3, #12]
  while (txbuffer->next != NULL)
 8001284:	f1b8 0f00 	cmp.w	r8, #0
 8001288:	f000 80af 	beq.w	80013ea <ETH_Prepare_Tx_Descriptors+0x306>
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800128c:	68dc      	ldr	r4, [r3, #12]
 800128e:	eb0e 0b0c 	add.w	fp, lr, ip
 8001292:	f024 5480 	bic.w	r4, r4, #268435456	; 0x10000000
 8001296:	60dc      	str	r4, [r3, #12]
    INCR_TX_DESC_INDEX(descidx, 1U);
 8001298:	1c53      	adds	r3, r2, #1
 800129a:	2b03      	cmp	r3, #3
 800129c:	bf94      	ite	ls
 800129e:	461a      	movls	r2, r3
 80012a0:	3a03      	subhi	r2, #3
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80012a2:	eb00 0782 	add.w	r7, r0, r2, lsl #2
 80012a6:	69bb      	ldr	r3, [r7, #24]
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80012a8:	68dc      	ldr	r4, [r3, #12]
 80012aa:	f024 5400 	bic.w	r4, r4, #536870912	; 0x20000000
 80012ae:	60dc      	str	r4, [r3, #12]
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 80012b0:	68dc      	ldr	r4, [r3, #12]
 80012b2:	2c00      	cmp	r4, #0
 80012b4:	db30      	blt.n	8001318 <ETH_Prepare_Tx_Descriptors+0x234>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80012b6:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 80012b8:	bb74      	cbnz	r4, 8001318 <ETH_Prepare_Tx_Descriptors+0x234>
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80012ba:	f8d8 4000 	ldr.w	r4, [r8]
 80012be:	601c      	str	r4, [r3, #0]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80012c0:	689f      	ldr	r7, [r3, #8]
 80012c2:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80012c6:	402f      	ands	r7, r5
 80012c8:	433c      	orrs	r4, r7
    if (txbuffer->next != NULL)
 80012ca:	f8d8 7008 	ldr.w	r7, [r8, #8]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80012ce:	609c      	str	r4, [r3, #8]
    if (txbuffer->next != NULL)
 80012d0:	2f00      	cmp	r7, #0
 80012d2:	d05a      	beq.n	800138a <ETH_Prepare_Tx_Descriptors+0x2a6>
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80012d4:	683c      	ldr	r4, [r7, #0]
 80012d6:	605c      	str	r4, [r3, #4]
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80012d8:	689c      	ldr	r4, [r3, #8]
 80012da:	ea04 0806 	and.w	r8, r4, r6
 80012de:	687c      	ldr	r4, [r7, #4]
 80012e0:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 80012e4:	609c      	str	r4, [r3, #8]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80012e6:	f8d1 8000 	ldr.w	r8, [r1]
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80012ea:	68dc      	ldr	r4, [r3, #12]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80012ec:	f018 0f10 	tst.w	r8, #16
 80012f0:	d1ae      	bne.n	8001250 <ETH_Prepare_Tx_Descriptors+0x16c>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80012f2:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 80013e4 <ETH_Prepare_Tx_Descriptors+0x300>
      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80012f6:	f018 0f01 	tst.w	r8, #1
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80012fa:	ea04 0b0b 	and.w	fp, r4, fp
 80012fe:	684c      	ldr	r4, [r1, #4]
 8001300:	ea4b 0404 	orr.w	r4, fp, r4
 8001304:	60dc      	str	r4, [r3, #12]
      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8001306:	d0af      	beq.n	8001268 <ETH_Prepare_Tx_Descriptors+0x184>
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8001308:	68dc      	ldr	r4, [r3, #12]
 800130a:	f424 3840 	bic.w	r8, r4, #196608	; 0x30000
 800130e:	694c      	ldr	r4, [r1, #20]
 8001310:	ea48 0404 	orr.w	r4, r8, r4
 8001314:	60dc      	str	r4, [r3, #12]
 8001316:	e7a7      	b.n	8001268 <ETH_Prepare_Tx_Descriptors+0x184>
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001318:	4654      	mov	r4, sl
 800131a:	f8d9 2018 	ldr.w	r2, [r9, #24]
      for (idx = 0; idx < descnbr; idx ++)
 800131e:	f1bb 0f00 	cmp.w	fp, #0
 8001322:	d011      	beq.n	8001348 <ETH_Prepare_Tx_Descriptors+0x264>
 8001324:	2100      	movs	r1, #0
 8001326:	f3bf 8f5f 	dmb	sy
        INCR_TX_DESC_INDEX(descidx, 1U);
 800132a:	1c65      	adds	r5, r4, #1
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800132c:	68d3      	ldr	r3, [r2, #12]
        INCR_TX_DESC_INDEX(descidx, 1U);
 800132e:	3c03      	subs	r4, #3
      for (idx = 0; idx < descnbr; idx ++)
 8001330:	3101      	adds	r1, #1
        INCR_TX_DESC_INDEX(descidx, 1U);
 8001332:	2d03      	cmp	r5, #3
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8001334:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001338:	bf98      	it	ls
 800133a:	462c      	movls	r4, r5
 800133c:	60d3      	str	r3, [r2, #12]
      for (idx = 0; idx < descnbr; idx ++)
 800133e:	4559      	cmp	r1, fp
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001340:	eb00 0384 	add.w	r3, r0, r4, lsl #2
 8001344:	699a      	ldr	r2, [r3, #24]
      for (idx = 0; idx < descnbr; idx ++)
 8001346:	d1ee      	bne.n	8001326 <ETH_Prepare_Tx_Descriptors+0x242>
    return HAL_ETH_ERROR_BUSY;
 8001348:	2002      	movs	r0, #2
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
}
 800134a:	b003      	add	sp, #12
 800134c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8001350:	68da      	ldr	r2, [r3, #12]
 8001352:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001356:	60da      	str	r2, [r3, #12]
 8001358:	f3bf 8f5f 	dmb	sy
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800135c:	68da      	ldr	r2, [r3, #12]
 800135e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001362:	60da      	str	r2, [r3, #12]
    INCR_TX_DESC_INDEX(descidx, 1U);
 8001364:	1c62      	adds	r2, r4, #1
 8001366:	2a03      	cmp	r2, #3
 8001368:	bf88      	it	hi
 800136a:	1ee2      	subhi	r2, r4, #3
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800136c:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8001370:	699b      	ldr	r3, [r3, #24]
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8001372:	68dd      	ldr	r5, [r3, #12]
 8001374:	2d00      	cmp	r5, #0
 8001376:	db5f      	blt.n	8001438 <ETH_Prepare_Tx_Descriptors+0x354>
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8001378:	f8d1 c000 	ldr.w	ip, [r1]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800137c:	f04f 0e02 	mov.w	lr, #2
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8001380:	f00c 0810 	and.w	r8, ip, #16
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8001384:	f00c 0704 	and.w	r7, ip, #4
 8001388:	e706      	b.n	8001198 <ETH_Prepare_Tx_Descriptors+0xb4>
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 800138a:	605f      	str	r7, [r3, #4]
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800138c:	4647      	mov	r7, r8
 800138e:	689c      	ldr	r4, [r3, #8]
 8001390:	4034      	ands	r4, r6
 8001392:	609c      	str	r4, [r3, #8]
 8001394:	e7a7      	b.n	80012e6 <ETH_Prepare_Tx_Descriptors+0x202>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8001396:	f8df 804c 	ldr.w	r8, [pc, #76]	; 80013e4 <ETH_Prepare_Tx_Descriptors+0x300>
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800139a:	f01c 0f01 	tst.w	ip, #1
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800139e:	ea06 0808 	and.w	r8, r6, r8
 80013a2:	684e      	ldr	r6, [r1, #4]
 80013a4:	ea48 0606 	orr.w	r6, r8, r6
 80013a8:	60de      	str	r6, [r3, #12]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80013aa:	d006      	beq.n	80013ba <ETH_Prepare_Tx_Descriptors+0x2d6>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80013ac:	68de      	ldr	r6, [r3, #12]
 80013ae:	f426 3840 	bic.w	r8, r6, #196608	; 0x30000
 80013b2:	694e      	ldr	r6, [r1, #20]
 80013b4:	ea48 0606 	orr.w	r6, r8, r6
 80013b8:	60de      	str	r6, [r3, #12]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 80013ba:	f01c 0f20 	tst.w	ip, #32
 80013be:	f43f af1d 	beq.w	80011fc <ETH_Prepare_Tx_Descriptors+0x118>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 80013c2:	68de      	ldr	r6, [r3, #12]
 80013c4:	f026 6c40 	bic.w	ip, r6, #201326592	; 0xc000000
 80013c8:	690e      	ldr	r6, [r1, #16]
 80013ca:	ea4c 0606 	orr.w	r6, ip, r6
 80013ce:	60de      	str	r6, [r3, #12]
 80013d0:	e714      	b.n	80011fc <ETH_Prepare_Tx_Descriptors+0x118>
 80013d2:	bf00      	nop
 80013d4:	ffff0000 	.word	0xffff0000
 80013d8:	ffffc000 	.word	0xffffc000
 80013dc:	c000ffff 	.word	0xc000ffff
 80013e0:	fffc0000 	.word	0xfffc0000
 80013e4:	ffff8000 	.word	0xffff8000
  while (txbuffer->next != NULL)
 80013e8:	46c4      	mov	ip, r8
  if (ItMode != ((uint32_t)RESET))
 80013ea:	9901      	ldr	r1, [sp, #4]
 80013ec:	b1f9      	cbz	r1, 800142e <ETH_Prepare_Tx_Descriptors+0x34a>
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80013ee:	6899      	ldr	r1, [r3, #8]
 80013f0:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80013f4:	6099      	str	r1, [r3, #8]
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80013f6:	68d9      	ldr	r1, [r3, #12]
 80013f8:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80013fc:	60d9      	str	r1, [r3, #12]
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80013fe:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8001402:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001404:	62d9      	str	r1, [r3, #44]	; 0x2c
  dmatxdesclist->CurTxDesc = descidx;
 8001406:	6282      	str	r2, [r0, #40]	; 0x28
  __ASM volatile ("cpsid i" : : : "memory");
 8001408:	b672      	cpsid	i
  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800140a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800140c:	3301      	adds	r3, #1
 800140e:	4463      	add	r3, ip
 8001410:	6403      	str	r3, [r0, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001412:	b662      	cpsie	i
  return HAL_ETH_ERROR_NONE;
 8001414:	2000      	movs	r0, #0
}
 8001416:	b003      	add	sp, #12
 8001418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800141c:	605d      	str	r5, [r3, #4]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800141e:	4635      	mov	r5, r6
 8001420:	f8d3 a008 	ldr.w	sl, [r3, #8]
 8001424:	4e09      	ldr	r6, [pc, #36]	; (800144c <ETH_Prepare_Tx_Descriptors+0x368>)
 8001426:	ea0a 0606 	and.w	r6, sl, r6
 800142a:	609e      	str	r6, [r3, #8]
 800142c:	e6ce      	b.n	80011cc <ETH_Prepare_Tx_Descriptors+0xe8>
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800142e:	6899      	ldr	r1, [r3, #8]
 8001430:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8001434:	6099      	str	r1, [r3, #8]
 8001436:	e7de      	b.n	80013f6 <ETH_Prepare_Tx_Descriptors+0x312>
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8001438:	f8d9 2018 	ldr.w	r2, [r9, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800143c:	f3bf 8f5f 	dmb	sy
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8001440:	68d3      	ldr	r3, [r2, #12]
      return HAL_ETH_ERROR_BUSY;
 8001442:	2002      	movs	r0, #2
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8001444:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001448:	60d3      	str	r3, [r2, #12]
      return HAL_ETH_ERROR_BUSY;
 800144a:	e77e      	b.n	800134a <ETH_Prepare_Tx_Descriptors+0x266>
 800144c:	c000ffff 	.word	0xc000ffff

08001450 <ETH_UpdateDescriptor>:
{
 8001450:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint8_t *buff = NULL;
 8001454:	2300      	movs	r3, #0
{
 8001456:	b083      	sub	sp, #12
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001458:	e9d0 461a 	ldrd	r4, r6, [r0, #104]	; 0x68
  uint8_t *buff = NULL;
 800145c:	9301      	str	r3, [sp, #4]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800145e:	f104 0312 	add.w	r3, r4, #18
 8001462:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001466:	b37e      	cbz	r6, 80014c8 <ETH_UpdateDescriptor+0x78>
 8001468:	4607      	mov	r7, r0
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 800146a:	f04f 4901 	mov.w	r9, #2164260864	; 0x81000000
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 800146e:	f04f 4841 	mov.w	r8, #3238002688	; 0xc1000000
 8001472:	e00c      	b.n	800148e <ETH_UpdateDescriptor+0x3e>
 8001474:	f8c5 800c 	str.w	r8, [r5, #12]
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001478:	1c63      	adds	r3, r4, #1
 800147a:	3c03      	subs	r4, #3
 800147c:	2b03      	cmp	r3, #3
 800147e:	bf98      	it	ls
 8001480:	461c      	movls	r4, r3
  while ((desccount > 0U) && (allocStatus != 0U))
 8001482:	3e01      	subs	r6, #1
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001484:	f104 0312 	add.w	r3, r4, #18
 8001488:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
  while ((desccount > 0U) && (allocStatus != 0U))
 800148c:	d011      	beq.n	80014b2 <ETH_UpdateDescriptor+0x62>
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800148e:	692b      	ldr	r3, [r5, #16]
 8001490:	b13b      	cbz	r3, 80014a2 <ETH_UpdateDescriptor+0x52>
 8001492:	f3bf 8f5f 	dmb	sy
      if (heth->RxDescList.ItMode != 0U)
 8001496:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1eb      	bne.n	8001474 <ETH_UpdateDescriptor+0x24>
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 800149c:	f8c5 900c 	str.w	r9, [r5, #12]
 80014a0:	e7ea      	b.n	8001478 <ETH_UpdateDescriptor+0x28>
      HAL_ETH_RxAllocateCallback(&buff);
 80014a2:	a801      	add	r0, sp, #4
 80014a4:	f002 ffcc 	bl	8004440 <HAL_ETH_RxAllocateCallback>
      if (buff == NULL)
 80014a8:	9b01      	ldr	r3, [sp, #4]
 80014aa:	b113      	cbz	r3, 80014b2 <ETH_UpdateDescriptor+0x62>
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80014ac:	612b      	str	r3, [r5, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 80014ae:	602b      	str	r3, [r5, #0]
 80014b0:	e7ef      	b.n	8001492 <ETH_UpdateDescriptor+0x42>
  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80014b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014b4:	42b3      	cmp	r3, r6
 80014b6:	d007      	beq.n	80014c8 <ETH_UpdateDescriptor+0x78>
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	2200      	movs	r2, #0
 80014bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014c0:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    heth->RxDescList.RxBuildDescCnt = desccount;
 80014c4:	e9c7 461a 	strd	r4, r6, [r7, #104]	; 0x68
}
 80014c8:	b003      	add	sp, #12
 80014ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80014ce:	bf00      	nop

080014d0 <HAL_ETH_Start_IT>:
{
 80014d0:	b538      	push	{r3, r4, r5, lr}
  if (heth->gState == HAL_ETH_STATE_READY)
 80014d2:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80014d6:	2b10      	cmp	r3, #16
 80014d8:	d001      	beq.n	80014de <HAL_ETH_Start_IT+0xe>
    return HAL_ERROR;
 80014da:	2001      	movs	r0, #1
}
 80014dc:	bd38      	pop	{r3, r4, r5, pc}
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80014de:	6803      	ldr	r3, [r0, #0]
    heth->gState = HAL_ETH_STATE_BUSY;
 80014e0:	2523      	movs	r5, #35	; 0x23
    heth->RxDescList.ItMode = 1U;
 80014e2:	2201      	movs	r2, #1
 80014e4:	4604      	mov	r4, r0
    heth->gState = HAL_ETH_STATE_BUSY;
 80014e6:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
    heth->RxDescList.ItMode = 1U;
 80014ea:	6582      	str	r2, [r0, #88]	; 0x58
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80014ec:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 80014f0:	4a1d      	ldr	r2, [pc, #116]	; (8001568 <HAL_ETH_Start_IT+0x98>)
 80014f2:	430a      	orrs	r2, r1
 80014f4:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80014f8:	4a1c      	ldr	r2, [pc, #112]	; (800156c <HAL_ETH_Start_IT+0x9c>)
 80014fa:	f8d3 1710 	ldr.w	r1, [r3, #1808]	; 0x710
 80014fe:	430a      	orrs	r2, r1
 8001500:	f8c3 2710 	str.w	r2, [r3, #1808]	; 0x710
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001504:	2304      	movs	r3, #4
 8001506:	66c3      	str	r3, [r0, #108]	; 0x6c
    ETH_UpdateDescriptor(heth);
 8001508:	f7ff ffa2 	bl	8001450 <ETH_UpdateDescriptor>
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800150c:	6822      	ldr	r2, [r4, #0]
    return HAL_OK;
 800150e:	2000      	movs	r0, #0
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001510:	6811      	ldr	r1, [r2, #0]
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001512:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001516:	f041 0102 	orr.w	r1, r1, #2
 800151a:	6011      	str	r1, [r2, #0]
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800151c:	6811      	ldr	r1, [r2, #0]
 800151e:	f041 0101 	orr.w	r1, r1, #1
 8001522:	6011      	str	r1, [r2, #0]
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001524:	f8d2 1d00 	ldr.w	r1, [r2, #3328]	; 0xd00
 8001528:	f041 0101 	orr.w	r1, r1, #1
 800152c:	f8c2 1d00 	str.w	r1, [r2, #3328]	; 0xd00
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001530:	f24d 02c1 	movw	r2, #53441	; 0xd0c1
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001534:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
 8001538:	f041 0101 	orr.w	r1, r1, #1
 800153c:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001540:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 8001544:	f041 0101 	orr.w	r1, r1, #1
 8001548:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 800154c:	f8d3 1160 	ldr.w	r1, [r3, #352]	; 0x160
 8001550:	f441 7181 	orr.w	r1, r1, #258	; 0x102
 8001554:	f8c3 1160 	str.w	r1, [r3, #352]	; 0x160
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001558:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 800155c:	430a      	orrs	r2, r1
 800155e:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    heth->gState = HAL_ETH_STATE_STARTED;
 8001562:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}
 8001566:	bd38      	pop	{r3, r4, r5, pc}
 8001568:	0c020060 	.word	0x0c020060
 800156c:	0c20c000 	.word	0x0c20c000

08001570 <HAL_ETH_Stop_IT>:
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001570:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8001574:	2a23      	cmp	r2, #35	; 0x23
 8001576:	d001      	beq.n	800157c <HAL_ETH_Stop_IT+0xc>
    return HAL_ERROR;
 8001578:	2001      	movs	r0, #1
}
 800157a:	4770      	bx	lr
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 800157c:	4601      	mov	r1, r0
 800157e:	4603      	mov	r3, r0
{
 8001580:	b430      	push	{r4, r5}
    heth->gState = HAL_ETH_STATE_BUSY;
 8001582:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001586:	f103 0c54 	add.w	ip, r3, #84	; 0x54
 800158a:	f851 2b44 	ldr.w	r2, [r1], #68
 800158e:	4c19      	ldr	r4, [pc, #100]	; (80015f4 <HAL_ETH_Stop_IT+0x84>)
 8001590:	f502 5080 	add.w	r0, r2, #4096	; 0x1000
 8001594:	f8d0 5134 	ldr.w	r5, [r0, #308]	; 0x134
 8001598:	402c      	ands	r4, r5
 800159a:	f8c0 4134 	str.w	r4, [r0, #308]	; 0x134
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800159e:	f8d0 4104 	ldr.w	r4, [r0, #260]	; 0x104
 80015a2:	f024 0401 	bic.w	r4, r4, #1
 80015a6:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80015aa:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
 80015ae:	f024 0401 	bic.w	r4, r4, #1
 80015b2:	f8c0 4108 	str.w	r4, [r0, #264]	; 0x108
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80015b6:	6810      	ldr	r0, [r2, #0]
 80015b8:	f020 0001 	bic.w	r0, r0, #1
 80015bc:	6010      	str	r0, [r2, #0]
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80015be:	f8d2 0d00 	ldr.w	r0, [r2, #3328]	; 0xd00
 80015c2:	f040 0001 	orr.w	r0, r0, #1
 80015c6:	f8c2 0d00 	str.w	r0, [r2, #3328]	; 0xd00
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80015ca:	6810      	ldr	r0, [r2, #0]
 80015cc:	f020 0002 	bic.w	r0, r0, #2
 80015d0:	6010      	str	r0, [r2, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80015d2:	f851 0f04 	ldr.w	r0, [r1, #4]!
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80015d6:	68c2      	ldr	r2, [r0, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80015d8:	4561      	cmp	r1, ip
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80015da:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80015de:	60c2      	str	r2, [r0, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80015e0:	d1f7      	bne.n	80015d2 <HAL_ETH_Stop_IT+0x62>
    heth->RxDescList.ItMode = 0U;
 80015e2:	2200      	movs	r2, #0
    heth->gState = HAL_ETH_STATE_READY;
 80015e4:	2110      	movs	r1, #16
    return HAL_OK;
 80015e6:	4610      	mov	r0, r2
    heth->RxDescList.ItMode = 0U;
 80015e8:	659a      	str	r2, [r3, #88]	; 0x58
    heth->gState = HAL_ETH_STATE_READY;
 80015ea:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
}
 80015ee:	bc30      	pop	{r4, r5}
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	ffff2f3e 	.word	0xffff2f3e

080015f8 <HAL_ETH_Transmit_IT>:
{
 80015f8:	b510      	push	{r4, lr}
 80015fa:	4604      	mov	r4, r0
  if (pTxConfig == NULL)
 80015fc:	b329      	cbz	r1, 800164a <HAL_ETH_Transmit_IT+0x52>
  if (heth->gState == HAL_ETH_STATE_STARTED)
 80015fe:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8001602:	2a23      	cmp	r2, #35	; 0x23
 8001604:	d001      	beq.n	800160a <HAL_ETH_Transmit_IT+0x12>
    return HAL_ERROR;
 8001606:	2001      	movs	r0, #1
}
 8001608:	bd10      	pop	{r4, pc}
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 800160a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 800160c:	2201      	movs	r2, #1
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 800160e:	63c3      	str	r3, [r0, #60]	; 0x3c
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001610:	f7ff fd68 	bl	80010e4 <ETH_Prepare_Tx_Descriptors>
 8001614:	b138      	cbz	r0, 8001626 <HAL_ETH_Transmit_IT+0x2e>
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001616:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
      return HAL_ERROR;
 800161a:	2001      	movs	r0, #1
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800161c:	f043 0302 	orr.w	r3, r3, #2
 8001620:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 8001624:	bd10      	pop	{r4, pc}
  __ASM volatile ("dsb 0xF":::"memory");
 8001626:	f3bf 8f4f 	dsb	sy
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800162a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    return HAL_OK;
 800162c:	2000      	movs	r0, #0
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800162e:	1c53      	adds	r3, r2, #1
 8001630:	2b03      	cmp	r3, #3
 8001632:	bf88      	it	hi
 8001634:	1ed3      	subhi	r3, r2, #3
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001636:	6822      	ldr	r2, [r4, #0]
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001638:	62a3      	str	r3, [r4, #40]	; 0x28
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 800163a:	3306      	adds	r3, #6
 800163c:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8001640:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 8001644:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
}
 8001648:	bd10      	pop	{r4, pc}
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800164a:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
    return HAL_ERROR;
 800164e:	2001      	movs	r0, #1
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001650:	4303      	orrs	r3, r0
 8001652:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 8001656:	bd10      	pop	{r4, pc}

08001658 <HAL_ETH_ReadData>:
{
 8001658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800165c:	b085      	sub	sp, #20
 800165e:	4604      	mov	r4, r0
  if (pAppBuff == NULL)
 8001660:	9103      	str	r1, [sp, #12]
 8001662:	2900      	cmp	r1, #0
 8001664:	d06d      	beq.n	8001742 <HAL_ETH_ReadData+0xea>
  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001666:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800166a:	2b23      	cmp	r3, #35	; 0x23
 800166c:	d15e      	bne.n	800172c <HAL_ETH_ReadData+0xd4>
  descidx = heth->RxDescList.RxDescIdx;
 800166e:	f8d0 805c 	ldr.w	r8, [r0, #92]	; 0x5c
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001672:	f108 0312 	add.w	r3, r8, #18
 8001676:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800167a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800167c:	68ea      	ldr	r2, [r5, #12]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800167e:	f1c3 0b04 	rsb	fp, r3, #4
         && (rxdataready == 0U))
 8001682:	2a00      	cmp	r2, #0
 8001684:	db6a      	blt.n	800175c <HAL_ETH_ReadData+0x104>
 8001686:	f1bb 0f00 	cmp.w	fp, #0
 800168a:	d069      	beq.n	8001760 <HAL_ETH_ReadData+0x108>
  uint32_t desccnt = 0U;
 800168c:	f04f 0900 	mov.w	r9, #0
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001690:	f100 0180 	add.w	r1, r0, #128	; 0x80
 8001694:	307c      	adds	r0, #124	; 0x7c
      dmarxdesc->BackupAddr0 = 0;
 8001696:	46ca      	mov	sl, r9
 8001698:	e003      	b.n	80016a2 <HAL_ETH_ReadData+0x4a>
         && (rxdataready == 0U))
 800169a:	45cb      	cmp	fp, r9
 800169c:	d93f      	bls.n	800171e <HAL_ETH_ReadData+0xc6>
 800169e:	2e00      	cmp	r6, #0
 80016a0:	d13d      	bne.n	800171e <HAL_ETH_ReadData+0xc6>
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 80016a2:	68eb      	ldr	r3, [r5, #12]
 80016a4:	005e      	lsls	r6, r3, #1
 80016a6:	d503      	bpl.n	80016b0 <HAL_ETH_ReadData+0x58>
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 80016a8:	686b      	ldr	r3, [r5, #4]
 80016aa:	67a3      	str	r3, [r4, #120]	; 0x78
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 80016ac:	682b      	ldr	r3, [r5, #0]
 80016ae:	6763      	str	r3, [r4, #116]	; 0x74
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80016b0:	68eb      	ldr	r3, [r5, #12]
 80016b2:	009a      	lsls	r2, r3, #2
 80016b4:	d401      	bmi.n	80016ba <HAL_ETH_ReadData+0x62>
 80016b6:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 80016b8:	b30e      	cbz	r6, 80016fe <HAL_ETH_ReadData+0xa6>
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 80016ba:	68eb      	ldr	r3, [r5, #12]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 80016bc:	68ee      	ldr	r6, [r5, #12]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 80016be:	009b      	lsls	r3, r3, #2
      bufflength = heth->Init.RxBuffLen;
 80016c0:	6967      	ldr	r7, [r4, #20]
        heth->RxDescList.RxDataLength = 0;
 80016c2:	bf48      	it	mi
 80016c4:	e9c4 aa18 	strdmi	sl, sl, [r4, #96]	; 0x60
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 80016c8:	f016 5680 	ands.w	r6, r6, #268435456	; 0x10000000
 80016cc:	d007      	beq.n	80016de <HAL_ETH_ReadData+0x86>
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 80016ce:	68ef      	ldr	r7, [r5, #12]
        rxdataready = 1;
 80016d0:	2601      	movs	r6, #1
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 80016d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80016d4:	f3c7 070e 	ubfx	r7, r7, #0, #15
 80016d8:	1aff      	subs	r7, r7, r3
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 80016da:	68eb      	ldr	r3, [r5, #12]
 80016dc:	6723      	str	r3, [r4, #112]	; 0x70
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80016de:	b2bb      	uxth	r3, r7
 80016e0:	692a      	ldr	r2, [r5, #16]
 80016e2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80016e6:	f002 fecf 	bl	8004488 <HAL_ETH_RxLinkCallback>
      heth->RxDescList.RxDescCnt++;
 80016ea:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80016ec:	3301      	adds	r3, #1
 80016ee:	6623      	str	r3, [r4, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80016f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80016f2:	e9dd 0101 	ldrd	r0, r1, [sp, #4]
 80016f6:	443b      	add	r3, r7
 80016f8:	6663      	str	r3, [r4, #100]	; 0x64
      dmarxdesc->BackupAddr0 = 0;
 80016fa:	f8c5 a010 	str.w	sl, [r5, #16]
    INCR_RX_DESC_INDEX(descidx, 1U);
 80016fe:	f108 0301 	add.w	r3, r8, #1
    desccnt++;
 8001702:	f109 0901 	add.w	r9, r9, #1
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001706:	2b03      	cmp	r3, #3
 8001708:	bf8c      	ite	hi
 800170a:	f1a8 0803 	subhi.w	r8, r8, #3
 800170e:	4698      	movls	r8, r3
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001710:	f108 0312 	add.w	r3, r8, #18
 8001714:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001718:	68eb      	ldr	r3, [r5, #12]
         && (rxdataready == 0U))
 800171a:	2b00      	cmp	r3, #0
 800171c:	dabd      	bge.n	800169a <HAL_ETH_ReadData+0x42>
  heth->RxDescList.RxBuildDescCnt += desccnt;
 800171e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001720:	444b      	add	r3, r9
 8001722:	66e3      	str	r3, [r4, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001724:	b9b3      	cbnz	r3, 8001754 <HAL_ETH_ReadData+0xfc>
  heth->RxDescList.RxDescIdx = descidx;
 8001726:	f8c4 805c 	str.w	r8, [r4, #92]	; 0x5c
  if (rxdataready == 1U)
 800172a:	b91e      	cbnz	r6, 8001734 <HAL_ETH_ReadData+0xdc>
    return HAL_ERROR;
 800172c:	2001      	movs	r0, #1
}
 800172e:	b005      	add	sp, #20
 8001730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    *pAppBuff = heth->RxDescList.pRxStart;
 8001734:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
    heth->RxDescList.pRxStart = NULL;
 8001736:	2300      	movs	r3, #0
    *pAppBuff = heth->RxDescList.pRxStart;
 8001738:	9903      	ldr	r1, [sp, #12]
    return HAL_OK;
 800173a:	4618      	mov	r0, r3
    *pAppBuff = heth->RxDescList.pRxStart;
 800173c:	600a      	str	r2, [r1, #0]
    heth->RxDescList.pRxStart = NULL;
 800173e:	67e3      	str	r3, [r4, #124]	; 0x7c
    return HAL_OK;
 8001740:	e7f5      	b.n	800172e <HAL_ETH_ReadData+0xd6>
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001742:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
    return HAL_ERROR;
 8001746:	2001      	movs	r0, #1
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001748:	4303      	orrs	r3, r0
 800174a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 800174e:	b005      	add	sp, #20
 8001750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ETH_UpdateDescriptor(heth);
 8001754:	4620      	mov	r0, r4
 8001756:	f7ff fe7b 	bl	8001450 <ETH_UpdateDescriptor>
 800175a:	e7e4      	b.n	8001726 <HAL_ETH_ReadData+0xce>
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800175c:	2b00      	cmp	r3, #0
 800175e:	d0e5      	beq.n	800172c <HAL_ETH_ReadData+0xd4>
    ETH_UpdateDescriptor(heth);
 8001760:	f7ff fe76 	bl	8001450 <ETH_UpdateDescriptor>
  heth->RxDescList.RxDescIdx = descidx;
 8001764:	f8c4 805c 	str.w	r8, [r4, #92]	; 0x5c
  if (rxdataready == 1U)
 8001768:	e7e0      	b.n	800172c <HAL_ETH_ReadData+0xd4>
 800176a:	bf00      	nop

0800176c <HAL_ETH_ReleaseTxPacket>:
{
 800176c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001770:	e9d0 5410 	ldrd	r5, r4, [r0, #64]	; 0x40
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001774:	b17d      	cbz	r5, 8001796 <HAL_ETH_ReleaseTxPacket+0x2a>
 8001776:	4606      	mov	r6, r0
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001778:	2700      	movs	r7, #0
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 800177a:	eb06 0884 	add.w	r8, r6, r4, lsl #2
    numOfBuf--;
 800177e:	3d01      	subs	r5, #1
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8001780:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001784:	f8d8 002c 	ldr.w	r0, [r8, #44]	; 0x2c
 8001788:	b140      	cbz	r0, 800179c <HAL_ETH_ReleaseTxPacket+0x30>
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 800178a:	68f3      	ldr	r3, [r6, #12]
 800178c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	2b00      	cmp	r3, #0
 8001794:	da08      	bge.n	80017a8 <HAL_ETH_ReleaseTxPacket+0x3c>
}
 8001796:	2000      	movs	r0, #0
 8001798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 800179c:	3401      	adds	r4, #1
 800179e:	f004 0403 	and.w	r4, r4, #3
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80017a2:	2d00      	cmp	r5, #0
 80017a4:	d1e9      	bne.n	800177a <HAL_ETH_ReleaseTxPacket+0xe>
 80017a6:	e7f6      	b.n	8001796 <HAL_ETH_ReleaseTxPacket+0x2a>
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80017a8:	3401      	adds	r4, #1
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 80017aa:	f002 fe9d 	bl	80044e8 <HAL_ETH_TxFreeCallback>
        dmatxdesclist->PacketAddress[idx] = NULL;
 80017ae:	f8c8 702c 	str.w	r7, [r8, #44]	; 0x2c
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80017b2:	f004 0403 	and.w	r4, r4, #3
        dmatxdesclist->BuffersInUse = numOfBuf;
 80017b6:	6435      	str	r5, [r6, #64]	; 0x40
        dmatxdesclist->releaseIndex = idx;
 80017b8:	6474      	str	r4, [r6, #68]	; 0x44
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80017ba:	2d00      	cmp	r5, #0
 80017bc:	d1dd      	bne.n	800177a <HAL_ETH_ReleaseTxPacket+0xe>
 80017be:	e7ea      	b.n	8001796 <HAL_ETH_ReleaseTxPacket+0x2a>

080017c0 <HAL_ETH_PMTCallback>:
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop

080017c4 <HAL_ETH_EEECallback>:
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop

080017c8 <HAL_ETH_WakeUpCallback>:
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop

080017cc <HAL_ETH_IRQHandler>:
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 80017cc:	6803      	ldr	r3, [r0, #0]
 80017ce:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80017d2:	f8d2 1160 	ldr.w	r1, [r2, #352]	; 0x160
 80017d6:	0649      	lsls	r1, r1, #25
{
 80017d8:	b510      	push	{r4, lr}
 80017da:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 80017dc:	d504      	bpl.n	80017e8 <HAL_ETH_IRQHandler+0x1c>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 80017de:	f8d2 1134 	ldr.w	r1, [r2, #308]	; 0x134
 80017e2:	0649      	lsls	r1, r1, #25
 80017e4:	f100 808a 	bmi.w	80018fc <HAL_ETH_IRQHandler+0x130>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 80017e8:	f8d2 1160 	ldr.w	r1, [r2, #352]	; 0x160
 80017ec:	07c8      	lsls	r0, r1, #31
 80017ee:	d503      	bpl.n	80017f8 <HAL_ETH_IRQHandler+0x2c>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 80017f0:	f8d2 1134 	ldr.w	r1, [r2, #308]	; 0x134
 80017f4:	07c9      	lsls	r1, r1, #31
 80017f6:	d476      	bmi.n	80018e6 <HAL_ETH_IRQHandler+0x11a>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 80017f8:	f8d2 1160 	ldr.w	r1, [r2, #352]	; 0x160
 80017fc:	0448      	lsls	r0, r1, #17
 80017fe:	d503      	bpl.n	8001808 <HAL_ETH_IRQHandler+0x3c>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8001800:	f8d2 1134 	ldr.w	r1, [r2, #308]	; 0x134
 8001804:	0449      	lsls	r1, r1, #17
 8001806:	d41b      	bmi.n	8001840 <HAL_ETH_IRQHandler+0x74>
  macirqenable = heth->Instance->MACIER;
 8001808:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 800180c:	f412 4fc0 	tst.w	r2, #24576	; 0x6000
 8001810:	d133      	bne.n	800187a <HAL_ETH_IRQHandler+0xae>
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001812:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001816:	06d0      	lsls	r0, r2, #27
 8001818:	d447      	bmi.n	80018aa <HAL_ETH_IRQHandler+0xde>
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 800181a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800181e:	0691      	lsls	r1, r2, #26
 8001820:	d454      	bmi.n	80018cc <HAL_ETH_IRQHandler+0x100>
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001826:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800182a:	0252      	lsls	r2, r2, #9
 800182c:	d400      	bmi.n	8001830 <HAL_ETH_IRQHandler+0x64>
}
 800182e:	bd10      	pop	{r4, pc}
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001830:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    HAL_ETH_WakeUpCallback(heth);
 8001834:	4620      	mov	r0, r4
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001836:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    HAL_ETH_WakeUpCallback(heth);
 800183a:	f7ff ffc5 	bl	80017c8 <HAL_ETH_WakeUpCallback>
}
 800183e:	bd10      	pop	{r4, pc}
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001840:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8001844:	f043 0308 	orr.w	r3, r3, #8
 8001848:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 800184c:	f8d2 3160 	ldr.w	r3, [r2, #352]	; 0x160
 8001850:	f413 5f80 	tst.w	r3, #4096	; 0x1000
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8001854:	f8d2 3160 	ldr.w	r3, [r2, #352]	; 0x160
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8001858:	d15a      	bne.n	8001910 <HAL_ETH_IRQHandler+0x144>
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 800185a:	f44f 41cd 	mov.w	r1, #26240	; 0x6680
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 800185e:	400b      	ands	r3, r1
 8001860:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001864:	f8c2 1160 	str.w	r1, [r2, #352]	; 0x160
      HAL_ETH_ErrorCallback(heth);
 8001868:	4620      	mov	r0, r4
 800186a:	f002 fbf1 	bl	8004050 <HAL_ETH_ErrorCallback>
  macirqenable = heth->Instance->MACIER;
 800186e:	6823      	ldr	r3, [r4, #0]
 8001870:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8001874:	f412 4fc0 	tst.w	r2, #24576	; 0x6000
 8001878:	d0cb      	beq.n	8001812 <HAL_ETH_IRQHandler+0x46>
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 800187a:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
    heth->gState = HAL_ETH_STATE_ERROR;
 800187e:	21e0      	movs	r1, #224	; 0xe0
    HAL_ETH_ErrorCallback(heth);
 8001880:	4620      	mov	r0, r4
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8001882:	f042 0210 	orr.w	r2, r2, #16
 8001886:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 800188a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800188e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    heth->gState = HAL_ETH_STATE_ERROR;
 8001892:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
    HAL_ETH_ErrorCallback(heth);
 8001896:	f002 fbdb 	bl	8004050 <HAL_ETH_ErrorCallback>
    heth->MACErrorCode = (uint32_t)(0x0U);
 800189a:	2200      	movs	r2, #0
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 800189c:	6823      	ldr	r3, [r4, #0]
    heth->MACErrorCode = (uint32_t)(0x0U);
 800189e:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80018a2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80018a6:	06d0      	lsls	r0, r2, #27
 80018a8:	d5b7      	bpl.n	800181a <HAL_ETH_IRQHandler+0x4e>
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 80018aa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    HAL_ETH_PMTCallback(heth);
 80018ae:	4620      	mov	r0, r4
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 80018b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80018b4:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    HAL_ETH_PMTCallback(heth);
 80018b8:	f7ff ff82 	bl	80017c0 <HAL_ETH_PMTCallback>
    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80018bc:	2200      	movs	r2, #0
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 80018be:	6823      	ldr	r3, [r4, #0]
    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80018c0:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 80018c4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80018c8:	0691      	lsls	r1, r2, #26
 80018ca:	d5aa      	bpl.n	8001822 <HAL_ETH_IRQHandler+0x56>
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 80018cc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    HAL_ETH_EEECallback(heth);
 80018d0:	4620      	mov	r0, r4
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 80018d2:	f003 030f 	and.w	r3, r3, #15
 80018d6:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    HAL_ETH_EEECallback(heth);
 80018da:	f7ff ff73 	bl	80017c4 <HAL_ETH_EEECallback>
    heth->MACLPIEvent = (uint32_t)(0x0U);
 80018de:	2300      	movs	r3, #0
 80018e0:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 80018e4:	e79d      	b.n	8001822 <HAL_ETH_IRQHandler+0x56>
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 80018e6:	f248 0301 	movw	r3, #32769	; 0x8001
      HAL_ETH_TxCpltCallback(heth);
 80018ea:	4620      	mov	r0, r4
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 80018ec:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
      HAL_ETH_TxCpltCallback(heth);
 80018f0:	f002 fba8 	bl	8004044 <HAL_ETH_TxCpltCallback>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 80018f4:	6823      	ldr	r3, [r4, #0]
 80018f6:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80018fa:	e77d      	b.n	80017f8 <HAL_ETH_IRQHandler+0x2c>
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 80018fc:	f248 0340 	movw	r3, #32832	; 0x8040
 8001900:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
      HAL_ETH_RxCpltCallback(heth);
 8001904:	f002 fb98 	bl	8004038 <HAL_ETH_RxCpltCallback>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8001908:	6823      	ldr	r3, [r4, #0]
 800190a:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800190e:	e76b      	b.n	80017e8 <HAL_ETH_IRQHandler+0x1c>
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8001910:	f241 1002 	movw	r0, #4354	; 0x1102
        heth->gState = HAL_ETH_STATE_ERROR;
 8001914:	21e0      	movs	r1, #224	; 0xe0
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8001916:	4003      	ands	r3, r0
 8001918:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 800191c:	f8d2 3134 	ldr.w	r3, [r2, #308]	; 0x134
 8001920:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001924:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
        heth->gState = HAL_ETH_STATE_ERROR;
 8001928:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
 800192c:	e79c      	b.n	8001868 <HAL_ETH_IRQHandler+0x9c>
 800192e:	bf00      	nop

08001930 <HAL_ETH_ReadPHYRegister>:
{
 8001930:	b570      	push	{r4, r5, r6, lr}
 8001932:	4604      	mov	r4, r0
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001934:	6800      	ldr	r0, [r0, #0]
{
 8001936:	461d      	mov	r5, r3
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001938:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 800193c:	07db      	lsls	r3, r3, #31
 800193e:	d501      	bpl.n	8001944 <HAL_ETH_ReadPHYRegister+0x14>
    return HAL_ERROR;
 8001940:	2001      	movs	r0, #1
}
 8001942:	bd70      	pop	{r4, r5, r6, pc}
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001944:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001948:	f023 7378 	bic.w	r3, r3, #65011712	; 0x3e00000
 800194c:	ea43 5141 	orr.w	r1, r3, r1, lsl #21
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001950:	f421 13f8 	bic.w	r3, r1, #2031616	; 0x1f0000
 8001954:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001958:	f042 020d 	orr.w	r2, r2, #13
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 800195c:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
  tickstart = HAL_GetTick();
 8001960:	f7ff f9fe 	bl	8000d60 <HAL_GetTick>
 8001964:	4606      	mov	r6, r0
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001966:	e005      	b.n	8001974 <HAL_ETH_ReadPHYRegister+0x44>
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8001968:	f7ff f9fa 	bl	8000d60 <HAL_GetTick>
 800196c:	1b82      	subs	r2, r0, r6
 800196e:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8001972:	d8e5      	bhi.n	8001940 <HAL_ETH_ReadPHYRegister+0x10>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001974:	6821      	ldr	r1, [r4, #0]
 8001976:	f8d1 2200 	ldr.w	r2, [r1, #512]	; 0x200
 800197a:	f012 0201 	ands.w	r2, r2, #1
 800197e:	d1f3      	bne.n	8001968 <HAL_ETH_ReadPHYRegister+0x38>
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8001980:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
  return HAL_OK;
 8001984:	4610      	mov	r0, r2
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8001986:	b29b      	uxth	r3, r3
 8001988:	602b      	str	r3, [r5, #0]
}
 800198a:	bd70      	pop	{r4, r5, r6, pc}

0800198c <HAL_ETH_WritePHYRegister>:
{
 800198c:	b538      	push	{r3, r4, r5, lr}
 800198e:	4604      	mov	r4, r0
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001990:	6800      	ldr	r0, [r0, #0]
 8001992:	f8d0 5200 	ldr.w	r5, [r0, #512]	; 0x200
 8001996:	07ed      	lsls	r5, r5, #31
 8001998:	d501      	bpl.n	800199e <HAL_ETH_WritePHYRegister+0x12>
    return HAL_ERROR;
 800199a:	2001      	movs	r0, #1
}
 800199c:	bd38      	pop	{r3, r4, r5, pc}
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800199e:	f8d0 0200 	ldr.w	r0, [r0, #512]	; 0x200
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	f020 7078 	bic.w	r0, r0, #65011712	; 0x3e00000
 80019a8:	ea40 5141 	orr.w	r1, r0, r1, lsl #21
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 80019ac:	480f      	ldr	r0, [pc, #60]	; (80019ec <HAL_ETH_WritePHYRegister+0x60>)
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80019ae:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 80019b2:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80019b6:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 80019ba:	f022 030c 	bic.w	r3, r2, #12
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80019be:	f043 0305 	orr.w	r3, r3, #5
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 80019c2:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
  tickstart = HAL_GetTick();
 80019c6:	f7ff f9cb 	bl	8000d60 <HAL_GetTick>
 80019ca:	4605      	mov	r5, r0
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80019cc:	e005      	b.n	80019da <HAL_ETH_WritePHYRegister+0x4e>
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 80019ce:	f7ff f9c7 	bl	8000d60 <HAL_GetTick>
 80019d2:	1b43      	subs	r3, r0, r5
 80019d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019d8:	d8df      	bhi.n	800199a <HAL_ETH_WritePHYRegister+0xe>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80019da:	6823      	ldr	r3, [r4, #0]
 80019dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80019e0:	f013 0301 	ands.w	r3, r3, #1
 80019e4:	d1f3      	bne.n	80019ce <HAL_ETH_WritePHYRegister+0x42>
  return HAL_OK;
 80019e6:	4618      	mov	r0, r3
}
 80019e8:	bd38      	pop	{r3, r4, r5, pc}
 80019ea:	bf00      	nop
 80019ec:	40028000 	.word	0x40028000

080019f0 <HAL_ETH_GetMACConfig>:
  if (macconf == NULL)
 80019f0:	2900      	cmp	r1, #0
 80019f2:	f000 80c4 	beq.w	8001b7e <HAL_ETH_GetMACConfig+0x18e>
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80019f6:	6803      	ldr	r3, [r0, #0]
  return HAL_OK;
 80019f8:	2000      	movs	r0, #0
{
 80019fa:	b410      	push	{r4}
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80019fc:	681c      	ldr	r4, [r3, #0]
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80019fe:	681a      	ldr	r2, [r3, #0]
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8001a00:	f004 040c 	and.w	r4, r4, #12
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001a04:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001a08:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001a0c:	681a      	ldr	r2, [r3, #0]
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8001a0e:	62cc      	str	r4, [r1, #44]	; 0x2c
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001a10:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8001a14:	624a      	str	r2, [r1, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	f482 7280 	eor.w	r2, r2, #256	; 0x100
 8001a1c:	f3c2 2200 	ubfx	r2, r2, #8, #1
 8001a20:	f881 2020 	strb.w	r2, [r1, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8001a24:	681a      	ldr	r2, [r3, #0]
                                        ? ENABLE : DISABLE;
 8001a26:	f3c2 2240 	ubfx	r2, r2, #9, #1
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8001a2a:	77ca      	strb	r2, [r1, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	f482 6280 	eor.w	r2, r2, #1024	; 0x400
 8001a32:	f3c2 2280 	ubfx	r2, r2, #10, #1
 8001a36:	778a      	strb	r2, [r1, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8001a38:	681a      	ldr	r2, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8001a3a:	f3c2 22c0 	ubfx	r2, r2, #11, #1
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8001a3e:	774a      	strb	r2, [r1, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8001a46:	770a      	strb	r2, [r1, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001a48:	681c      	ldr	r4, [r3, #0]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001a4a:	681a      	ldr	r2, [r3, #0]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001a4c:	f404 5400 	and.w	r4, r4, #8192	; 0x2000
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001a50:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001a54:	e9c1 2405 	strd	r2, r4, [r1, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	f3c2 4200 	ubfx	r2, r2, #16, #1
 8001a5e:	748a      	strb	r2, [r1, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	f482 3200 	eor.w	r2, r2, #131072	; 0x20000
 8001a66:	f3c2 4240 	ubfx	r2, r2, #17, #1
 8001a6a:	744a      	strb	r2, [r1, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8001a72:	f3c2 42c0 	ubfx	r2, r2, #19, #1
 8001a76:	740a      	strb	r2, [r1, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	f3c2 5200 	ubfx	r2, r2, #20, #1
 8001a7e:	73ca      	strb	r2, [r1, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	f3c2 5240 	ubfx	r2, r2, #21, #1
 8001a86:	738a      	strb	r2, [r1, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	f3c2 5280 	ubfx	r2, r2, #22, #1
 8001a8e:	734a      	strb	r2, [r1, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8001a90:	681a      	ldr	r2, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8001a92:	f3c2 52c0 	ubfx	r2, r2, #23, #1
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8001a96:	730a      	strb	r2, [r1, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8001a98:	681c      	ldr	r4, [r3, #0]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8001a9a:	681a      	ldr	r2, [r3, #0]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8001a9c:	f004 64e0 	and.w	r4, r4, #117440512	; 0x7000000
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8001aa0:	f3c2 62c0 	ubfx	r2, r2, #27, #1
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8001aa4:	608c      	str	r4, [r1, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8001aa6:	710a      	strb	r2, [r1, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8001aa8:	681c      	ldr	r4, [r3, #0]
  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8001aaa:	685a      	ldr	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8001aac:	f004 44e0 	and.w	r4, r4, #1879048192	; 0x70000000
  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8001ab0:	f3c2 020d 	ubfx	r2, r2, #0, #14
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8001ab4:	600c      	str	r4, [r1, #0]
  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8001ab6:	634a      	str	r2, [r1, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8001ab8:	685a      	ldr	r2, [r3, #4]
 8001aba:	f482 3280 	eor.w	r2, r2, #65536	; 0x10000
 8001abe:	f3c2 4200 	ubfx	r2, r2, #16, #1
 8001ac2:	f881 2032 	strb.w	r2, [r1, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8001ac6:	685a      	ldr	r2, [r3, #4]
 8001ac8:	f3c2 4240 	ubfx	r2, r2, #17, #1
 8001acc:	f881 2031 	strb.w	r2, [r1, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8001ad0:	685a      	ldr	r2, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8001ad2:	f3c2 4280 	ubfx	r2, r2, #18, #1
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8001ad6:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8001ada:	685a      	ldr	r2, [r3, #4]
                                    ? ENABLE : DISABLE;
 8001adc:	f3c2 6200 	ubfx	r2, r2, #24, #1
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8001ae0:	f881 2038 	strb.w	r2, [r1, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8001ae4:	685c      	ldr	r4, [r3, #4]
  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8001ae6:	68da      	ldr	r2, [r3, #12]
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8001ae8:	f3c4 6444 	ubfx	r4, r4, #25, #5
  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8001aec:	f3c2 2200 	ubfx	r2, r2, #8, #1
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8001af0:	63cc      	str	r4, [r1, #60]	; 0x3c
  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8001af2:	f881 2040 	strb.w	r2, [r1, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8001af6:	68dc      	ldr	r4, [r3, #12]
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001af8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8001afa:	f004 040f 	and.w	r4, r4, #15
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001afe:	f3c2 0240 	ubfx	r2, r2, #1, #1
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8001b02:	644c      	str	r4, [r1, #68]	; 0x44
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001b04:	f881 2054 	strb.w	r2, [r1, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8001b08:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001b0a:	f082 0280 	eor.w	r2, r2, #128	; 0x80
 8001b0e:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8001b12:	f881 204c 	strb.w	r2, [r1, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8001b16:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8001b18:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8001b1a:	f004 0470 	and.w	r4, r4, #112	; 0x70
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8001b1e:	0c12      	lsrs	r2, r2, #16
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8001b20:	650c      	str	r4, [r1, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8001b22:	648a      	str	r2, [r1, #72]	; 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8001b24:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001b28:	f002 0201 	and.w	r2, r2, #1
 8001b2c:	f881 2056 	strb.w	r2, [r1, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8001b30:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
                                      ? ENABLE : DISABLE;
 8001b34:	f3c2 0240 	ubfx	r2, r2, #1, #1
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8001b38:	f881 2055 	strb.w	r2, [r1, #85]	; 0x55
  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8001b3c:	f8d3 4d00 	ldr.w	r4, [r3, #3328]	; 0xd00
  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8001b40:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	; 0xd30
  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8001b44:	f004 0472 	and.w	r4, r4, #114	; 0x72
  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8001b48:	f002 0223 	and.w	r2, r2, #35	; 0x23
 8001b4c:	e9c1 4216 	strd	r4, r2, [r1, #88]	; 0x58
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8001b50:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	; 0xd30
}
 8001b54:	f85d 4b04 	ldr.w	r4, [sp], #4
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8001b58:	f3c2 02c0 	ubfx	r2, r2, #3, #1
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8001b5c:	f881 2062 	strb.w	r2, [r1, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8001b60:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	; 0xd30
 8001b64:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001b68:	f881 2061 	strb.w	r2, [r1, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8001b6c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8001b70:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 8001b74:	f3c3 1380 	ubfx	r3, r3, #6, #1
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8001b78:	f881 3060 	strb.w	r3, [r1, #96]	; 0x60
}
 8001b7c:	4770      	bx	lr
    return HAL_ERROR;
 8001b7e:	2001      	movs	r0, #1
}
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop

08001b84 <HAL_ETH_SetMACConfig>:
  if (macconf == NULL)
 8001b84:	b131      	cbz	r1, 8001b94 <HAL_ETH_SetMACConfig+0x10>
{
 8001b86:	b508      	push	{r3, lr}
  if (heth->gState == HAL_ETH_STATE_READY)
 8001b88:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8001b8c:	2b10      	cmp	r3, #16
 8001b8e:	d003      	beq.n	8001b98 <HAL_ETH_SetMACConfig+0x14>
    return HAL_ERROR;
 8001b90:	2001      	movs	r0, #1
}
 8001b92:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 8001b94:	2001      	movs	r0, #1
}
 8001b96:	4770      	bx	lr
    ETH_SetMACConfig(heth, macconf);
 8001b98:	f7ff f9a0 	bl	8000edc <ETH_SetMACConfig>
    return HAL_OK;
 8001b9c:	2000      	movs	r0, #0
}
 8001b9e:	bd08      	pop	{r3, pc}

08001ba0 <HAL_ETH_SetMDIOClockRange>:
{
 8001ba0:	b538      	push	{r3, r4, r5, lr}
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001ba2:	6803      	ldr	r3, [r0, #0]
{
 8001ba4:	4605      	mov	r5, r0
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001ba6:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
  hclk = HAL_RCC_GetHCLKFreq();
 8001baa:	f000 ff41 	bl	8002a30 <HAL_RCC_GetHCLKFreq>
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001bae:	4b15      	ldr	r3, [pc, #84]	; (8001c04 <HAL_ETH_SetMDIOClockRange+0x64>)
 8001bb0:	4a15      	ldr	r2, [pc, #84]	; (8001c08 <HAL_ETH_SetMDIOClockRange+0x68>)
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001bb2:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001bb6:	4403      	add	r3, r0
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d205      	bcs.n	8001bc8 <HAL_ETH_SetMDIOClockRange+0x28>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001bbc:	f444 7400 	orr.w	r4, r4, #512	; 0x200
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001bc0:	682b      	ldr	r3, [r5, #0]
 8001bc2:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
}
 8001bc6:	bd38      	pop	{r3, r4, r5, pc}
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001bc8:	4b10      	ldr	r3, [pc, #64]	; (8001c0c <HAL_ETH_SetMDIOClockRange+0x6c>)
 8001bca:	4a11      	ldr	r2, [pc, #68]	; (8001c10 <HAL_ETH_SetMDIOClockRange+0x70>)
 8001bcc:	4403      	add	r3, r0
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d805      	bhi.n	8001bde <HAL_ETH_SetMDIOClockRange+0x3e>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001bd2:	f444 7440 	orr.w	r4, r4, #768	; 0x300
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001bd6:	682b      	ldr	r3, [r5, #0]
 8001bd8:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
}
 8001bdc:	bd38      	pop	{r3, r4, r5, pc}
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001bde:	4b0d      	ldr	r3, [pc, #52]	; (8001c14 <HAL_ETH_SetMDIOClockRange+0x74>)
 8001be0:	4a0d      	ldr	r2, [pc, #52]	; (8001c18 <HAL_ETH_SetMDIOClockRange+0x78>)
 8001be2:	4403      	add	r3, r0
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d3eb      	bcc.n	8001bc0 <HAL_ETH_SetMDIOClockRange+0x20>
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001be8:	4b0c      	ldr	r3, [pc, #48]	; (8001c1c <HAL_ETH_SetMDIOClockRange+0x7c>)
 8001bea:	4a0d      	ldr	r2, [pc, #52]	; (8001c20 <HAL_ETH_SetMDIOClockRange+0x80>)
 8001bec:	4403      	add	r3, r0
 8001bee:	4293      	cmp	r3, r2
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001bf0:	682b      	ldr	r3, [r5, #0]
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001bf2:	bf94      	ite	ls
 8001bf4:	f444 7480 	orrls.w	r4, r4, #256	; 0x100
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001bf8:	f444 6480 	orrhi.w	r4, r4, #1024	; 0x400
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001bfc:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
}
 8001c00:	bd38      	pop	{r3, r4, r5, pc}
 8001c02:	bf00      	nop
 8001c04:	feced300 	.word	0xfeced300
 8001c08:	00e4e1c0 	.word	0x00e4e1c0
 8001c0c:	fde9f140 	.word	0xfde9f140
 8001c10:	017d783f 	.word	0x017d783f
 8001c14:	fc6c7900 	.word	0xfc6c7900
 8001c18:	02625a00 	.word	0x02625a00
 8001c1c:	fa0a1f00 	.word	0xfa0a1f00
 8001c20:	02faf07f 	.word	0x02faf07f

08001c24 <HAL_ETH_Init>:
  if (heth == NULL)
 8001c24:	2800      	cmp	r0, #0
 8001c26:	f000 810e 	beq.w	8001e46 <HAL_ETH_Init+0x222>
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001c2a:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 8001c2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c30:	4605      	mov	r5, r0
 8001c32:	b0a5      	sub	sp, #148	; 0x94
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	f000 80b2 	beq.w	8001d9e <HAL_ETH_Init+0x17a>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c3a:	4b84      	ldr	r3, [pc, #528]	; (8001e4c <HAL_ETH_Init+0x228>)
 8001c3c:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8001c40:	f042 0202 	orr.w	r2, r2, #2
 8001c44:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8001c48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001c4c:	7a28      	ldrb	r0, [r5, #8]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	9301      	str	r3, [sp, #4]
 8001c54:	9b01      	ldr	r3, [sp, #4]
  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001c56:	2800      	cmp	r0, #0
 8001c58:	f040 8095 	bne.w	8001d86 <HAL_ETH_Init+0x162>
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001c5c:	f7ff f886 	bl	8000d6c <HAL_SYSCFG_ETHInterfaceSelect>
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001c60:	682b      	ldr	r3, [r5, #0]
  (void)SYSCFG->PMCR;
 8001c62:	4a7b      	ldr	r2, [pc, #492]	; (8001e50 <HAL_ETH_Init+0x22c>)
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001c64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  (void)SYSCFG->PMCR;
 8001c68:	6852      	ldr	r2, [r2, #4]
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	f042 0201 	orr.w	r2, r2, #1
 8001c70:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8001c72:	f7ff f875 	bl	8000d60 <HAL_GetTick>
 8001c76:	4606      	mov	r6, r0
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001c78:	e006      	b.n	8001c88 <HAL_ETH_Init+0x64>
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001c7a:	f7ff f871 	bl	8000d60 <HAL_GetTick>
 8001c7e:	1b83      	subs	r3, r0, r6
 8001c80:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001c84:	f200 8082 	bhi.w	8001d8c <HAL_ETH_Init+0x168>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001c88:	682b      	ldr	r3, [r5, #0]
 8001c8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c8e:	681c      	ldr	r4, [r3, #0]
 8001c90:	f014 0401 	ands.w	r4, r4, #1
 8001c94:	d1f1      	bne.n	8001c7a <HAL_ETH_Init+0x56>
  HAL_ETH_SetMDIOClockRange(heth);
 8001c96:	4628      	mov	r0, r5
  macDefaultConf.ChecksumOffload = ENABLE;
 8001c98:	2601      	movs	r6, #1
  HAL_ETH_SetMDIOClockRange(heth);
 8001c9a:	f7ff ff81 	bl	8001ba0 <HAL_ETH_SetMDIOClockRange>
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001c9e:	f000 fec7 	bl	8002a30 <HAL_RCC_GetHCLKFreq>
 8001ca2:	4b6c      	ldr	r3, [pc, #432]	; (8001e54 <HAL_ETH_Init+0x230>)
 8001ca4:	682f      	ldr	r7, [r5, #0]
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001ca6:	f04f 0e02 	mov.w	lr, #2
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001caa:	fba3 2300 	umull	r2, r3, r3, r0
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001cae:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001cb2:	a90b      	add	r1, sp, #44	; 0x2c
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001cb4:	9414      	str	r4, [sp, #80]	; 0x50
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001cb6:	0c9b      	lsrs	r3, r3, #18
  macDefaultConf.DeferralCheck = DISABLE;
 8001cb8:	f88d 4054 	strb.w	r4, [sp, #84]	; 0x54
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001cbc:	f88d 4064 	strb.w	r4, [sp, #100]	; 0x64
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001cc0:	3b01      	subs	r3, #1
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001cc2:	941a      	str	r4, [sp, #104]	; 0x68
  macDefaultConf.PauseTime = 0x0;
 8001cc4:	941d      	str	r4, [sp, #116]	; 0x74
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001cc6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001cca:	f44f 63c3 	mov.w	r3, #1560	; 0x618
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001cce:	f88d 406c 	strb.w	r4, [sp, #108]	; 0x6c
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001cd2:	9318      	str	r3, [sp, #96]	; 0x60
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001cd4:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
  macDefaultConf.ChecksumOffload = ENABLE;
 8001cd8:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001cdc:	930b      	str	r3, [sp, #44]	; 0x2c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001cde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  macDefaultConf.RetryTransmission = ENABLE;
 8001ce2:	f88d 604c 	strb.w	r6, [sp, #76]	; 0x4c
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001ce6:	f8ad 608c 	strh.w	r6, [sp, #140]	; 0x8c
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001cea:	f88d 408e 	strb.w	r4, [sp, #142]	; 0x8e
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001cee:	941f      	str	r4, [sp, #124]	; 0x7c
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001cf0:	f8ad 4080 	strh.w	r4, [sp, #128]	; 0x80
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001cf4:	f88d 4082 	strb.w	r4, [sp, #130]	; 0x82
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001cf8:	9416      	str	r4, [sp, #88]	; 0x58
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001cfa:	f8ad 405c 	strh.w	r4, [sp, #92]	; 0x5c
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001cfe:	f88d 605e 	strb.w	r6, [sp, #94]	; 0x5e
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001d02:	940d      	str	r4, [sp, #52]	; 0x34
  macDefaultConf.JumboPacket = DISABLE;
 8001d04:	f88d 403e 	strb.w	r4, [sp, #62]	; 0x3e
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001d08:	941c      	str	r4, [sp, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001d0a:	f88d 6078 	strb.w	r6, [sp, #120]	; 0x78
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001d0e:	e9cd 0310 	strd	r0, r3, [sp, #64]	; 0x40
  macDefaultConf.LoopbackMode = DISABLE;
 8001d12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001d16:	4628      	mov	r0, r5
  macDefaultConf.LoopbackMode = DISABLE;
 8001d18:	9312      	str	r3, [sp, #72]	; 0x48
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001d1a:	2320      	movs	r3, #32
 8001d1c:	e9cd e321 	strd	lr, r3, [sp, #132]	; 0x84
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001d20:	4b4d      	ldr	r3, [pc, #308]	; (8001e58 <HAL_ETH_Init+0x234>)
 8001d22:	930e      	str	r3, [sp, #56]	; 0x38
  macDefaultConf.Watchdog = ENABLE;
 8001d24:	f240 1301 	movw	r3, #257	; 0x101
 8001d28:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001d2c:	f7ff f8d6 	bl	8000edc <ETH_SetMACConfig>
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001d30:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001d34:	a902      	add	r1, sp, #8
 8001d36:	4628      	mov	r0, r5
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001d38:	f88d 600c 	strb.w	r6, [sp, #12]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001d3c:	9306      	str	r3, [sp, #24]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001d3e:	9308      	str	r3, [sp, #32]
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001d40:	f44f 7306 	mov.w	r3, #536	; 0x218
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001d44:	9402      	str	r4, [sp, #8]
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001d46:	930a      	str	r3, [sp, #40]	; 0x28
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001d48:	9604      	str	r6, [sp, #16]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001d4a:	f8ad 4014 	strh.w	r4, [sp, #20]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001d4e:	f88d 401c 	strb.w	r4, [sp, #28]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001d52:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001d56:	f7ff f97d 	bl	8001054 <ETH_SetDMAConfig>
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001d5a:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8001d5e:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
 8001d62:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8001d66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001d6a:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001d6e:	696b      	ldr	r3, [r5, #20]
 8001d70:	f013 0203 	ands.w	r2, r3, #3
 8001d74:	d019      	beq.n	8001daa <HAL_ETH_Init+0x186>
    heth->gState = HAL_ETH_STATE_ERROR;
 8001d76:	23e0      	movs	r3, #224	; 0xe0
    return HAL_ERROR;
 8001d78:	4630      	mov	r0, r6
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001d7a:	f8c5 6088 	str.w	r6, [r5, #136]	; 0x88
    heth->gState = HAL_ETH_STATE_ERROR;
 8001d7e:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
}
 8001d82:	b025      	add	sp, #148	; 0x94
 8001d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001d86:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001d8a:	e767      	b.n	8001c5c <HAL_ETH_Init+0x38>
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001d8c:	2204      	movs	r2, #4
      heth->gState = HAL_ETH_STATE_ERROR;
 8001d8e:	23e0      	movs	r3, #224	; 0xe0
      return HAL_ERROR;
 8001d90:	2001      	movs	r0, #1
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001d92:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
      heth->gState = HAL_ETH_STATE_ERROR;
 8001d96:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
}
 8001d9a:	b025      	add	sp, #148	; 0x94
 8001d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    heth->gState = HAL_ETH_STATE_BUSY;
 8001d9e:	2323      	movs	r3, #35	; 0x23
 8001da0:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    HAL_ETH_MspInit(heth);
 8001da4:	f002 fa4c 	bl	8004240 <HAL_ETH_MspInit>
 8001da8:	e747      	b.n	8001c3a <HAL_ETH_Init+0x16>
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001daa:	f8d1 4108 	ldr.w	r4, [r1, #264]	; 0x108
 8001dae:	482b      	ldr	r0, [pc, #172]	; (8001e5c <HAL_ETH_Init+0x238>)
 8001db0:	68ee      	ldr	r6, [r5, #12]
 8001db2:	4020      	ands	r0, r4
 8001db4:	f106 0460 	add.w	r4, r6, #96	; 0x60
 8001db8:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
    dmatxdesc = heth->Init.TxDesc + i;
 8001dbc:	4633      	mov	r3, r6
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001dbe:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001dc2:	f105 0014 	add.w	r0, r5, #20
    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001dc6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001dc8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001dca:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001dcc:	60da      	str	r2, [r3, #12]
    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001dce:	f840 3f04 	str.w	r3, [r0, #4]!
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001dd2:	3318      	adds	r3, #24
 8001dd4:	42a3      	cmp	r3, r4
 8001dd6:	d1f6      	bne.n	8001dc6 <HAL_ETH_Init+0x1a2>
    dmarxdesc =  heth->Init.RxDesc + i;
 8001dd8:	692c      	ldr	r4, [r5, #16]
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001dda:	2303      	movs	r3, #3
  heth->TxDescList.CurTxDesc = 0;
 8001ddc:	62aa      	str	r2, [r5, #40]	; 0x28
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001dde:	f105 0044 	add.w	r0, r5, #68	; 0x44
 8001de2:	f8c1 312c 	str.w	r3, [r1, #300]	; 0x12c
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001de6:	2200      	movs	r2, #0
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001de8:	f8c1 6114 	str.w	r6, [r1, #276]	; 0x114
    dmarxdesc =  heth->Init.RxDesc + i;
 8001dec:	4623      	mov	r3, r4
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001dee:	f8c1 6120 	str.w	r6, [r1, #288]	; 0x120
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001df2:	f105 0654 	add.w	r6, r5, #84	; 0x54
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001df6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001df8:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001dfa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001dfc:	615a      	str	r2, [r3, #20]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001dfe:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001e00:	60da      	str	r2, [r3, #12]
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001e02:	f840 3f04 	str.w	r3, [r0, #4]!
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001e06:	42b0      	cmp	r0, r6
 8001e08:	f103 0318 	add.w	r3, r3, #24
 8001e0c:	d1f3      	bne.n	8001df6 <HAL_ETH_Init+0x1d2>
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001e0e:	2003      	movs	r0, #3
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001e10:	686b      	ldr	r3, [r5, #4]
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001e12:	65aa      	str	r2, [r5, #88]	; 0x58
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001e14:	e9c5 2217 	strd	r2, r2, [r5, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001e18:	e9c5 221a 	strd	r2, r2, [r5, #104]	; 0x68
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001e1c:	f8c1 0130 	str.w	r0, [r1, #304]	; 0x130
  return HAL_OK;
 8001e20:	2000      	movs	r0, #0
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001e22:	f8c1 411c 	str.w	r4, [r1, #284]	; 0x11c
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001e26:	3448      	adds	r4, #72	; 0x48
 8001e28:	f8c1 4128 	str.w	r4, [r1, #296]	; 0x128
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001e2c:	8899      	ldrh	r1, [r3, #4]
 8001e2e:	f8c7 1300 	str.w	r1, [r7, #768]	; 0x300
  heth->gState = HAL_ETH_STATE_READY;
 8001e32:	2110      	movs	r1, #16
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001e34:	681b      	ldr	r3, [r3, #0]
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001e36:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001e3a:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001e3e:	f8c5 1084 	str.w	r1, [r5, #132]	; 0x84
}
 8001e42:	b025      	add	sp, #148	; 0x94
 8001e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8001e46:	2001      	movs	r0, #1
}
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	58024400 	.word	0x58024400
 8001e50:	58000400 	.word	0x58000400
 8001e54:	431bde83 	.word	0x431bde83
 8001e58:	01010000 	.word	0x01010000
 8001e5c:	ffff8001 	.word	0xffff8001

08001e60 <HAL_ETH_GetDMAError>:
  return heth->DMAErrorCode;
 8001e60:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
}
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop

08001e68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e6c:	680c      	ldr	r4, [r1, #0]
{
 8001e6e:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e70:	2c00      	cmp	r4, #0
 8001e72:	f000 80a3 	beq.w	8001fbc <HAL_GPIO_Init+0x154>
 8001e76:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e7a:	4f86      	ldr	r7, [pc, #536]	; (8002094 <HAL_GPIO_Init+0x22c>)
  uint32_t position = 0x00U;
 8001e7c:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e7e:	2201      	movs	r2, #1
 8001e80:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 8001e82:	ea12 0e04 	ands.w	lr, r2, r4
 8001e86:	f000 8092 	beq.w	8001fae <HAL_GPIO_Init+0x146>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e8a:	684d      	ldr	r5, [r1, #4]
 8001e8c:	f005 0903 	and.w	r9, r5, #3
 8001e90:	f109 36ff 	add.w	r6, r9, #4294967295
 8001e94:	2e01      	cmp	r6, #1
 8001e96:	f240 8094 	bls.w	8001fc2 <HAL_GPIO_Init+0x15a>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e9a:	f1b9 0f03 	cmp.w	r9, #3
 8001e9e:	f040 80ce 	bne.w	800203e <HAL_GPIO_Init+0x1d6>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ea2:	fa09 f20c 	lsl.w	r2, r9, ip
 8001ea6:	ea6f 0802 	mvn.w	r8, r2
      temp = GPIOx->MODER;
 8001eaa:	6806      	ldr	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001eac:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001eb0:	ea06 0608 	and.w	r6, r6, r8
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001eb4:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->MODER = temp;
 8001eb8:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001eba:	d078      	beq.n	8001fae <HAL_GPIO_Init+0x146>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ebc:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001ec0:	f023 0803 	bic.w	r8, r3, #3

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ec4:	f003 0903 	and.w	r9, r3, #3
 8001ec8:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eca:	f042 0202 	orr.w	r2, r2, #2
 8001ece:	f108 48b0 	add.w	r8, r8, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ed2:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ed6:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8001eda:	f508 6880 	add.w	r8, r8, #1024	; 0x400
 8001ede:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ee2:	fa06 f609 	lsl.w	r6, r6, r9
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ee6:	f002 0202 	and.w	r2, r2, #2
 8001eea:	9201      	str	r2, [sp, #4]
 8001eec:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001eee:	f8d8 2008 	ldr.w	r2, [r8, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ef2:	ea22 0206 	bic.w	r2, r2, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ef6:	4e68      	ldr	r6, [pc, #416]	; (8002098 <HAL_GPIO_Init+0x230>)
 8001ef8:	42b0      	cmp	r0, r6
 8001efa:	d024      	beq.n	8001f46 <HAL_GPIO_Init+0xde>
 8001efc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001f00:	42b0      	cmp	r0, r6
 8001f02:	f000 80a8 	beq.w	8002056 <HAL_GPIO_Init+0x1ee>
 8001f06:	4e65      	ldr	r6, [pc, #404]	; (800209c <HAL_GPIO_Init+0x234>)
 8001f08:	42b0      	cmp	r0, r6
 8001f0a:	f000 80a9 	beq.w	8002060 <HAL_GPIO_Init+0x1f8>
 8001f0e:	4e64      	ldr	r6, [pc, #400]	; (80020a0 <HAL_GPIO_Init+0x238>)
 8001f10:	42b0      	cmp	r0, r6
 8001f12:	f000 809b 	beq.w	800204c <HAL_GPIO_Init+0x1e4>
 8001f16:	4e63      	ldr	r6, [pc, #396]	; (80020a4 <HAL_GPIO_Init+0x23c>)
 8001f18:	42b0      	cmp	r0, r6
 8001f1a:	f000 80ab 	beq.w	8002074 <HAL_GPIO_Init+0x20c>
 8001f1e:	4e62      	ldr	r6, [pc, #392]	; (80020a8 <HAL_GPIO_Init+0x240>)
 8001f20:	42b0      	cmp	r0, r6
 8001f22:	f000 80ac 	beq.w	800207e <HAL_GPIO_Init+0x216>
 8001f26:	4e61      	ldr	r6, [pc, #388]	; (80020ac <HAL_GPIO_Init+0x244>)
 8001f28:	42b0      	cmp	r0, r6
 8001f2a:	f000 809e 	beq.w	800206a <HAL_GPIO_Init+0x202>
 8001f2e:	4e60      	ldr	r6, [pc, #384]	; (80020b0 <HAL_GPIO_Init+0x248>)
 8001f30:	42b0      	cmp	r0, r6
 8001f32:	f000 80a9 	beq.w	8002088 <HAL_GPIO_Init+0x220>
 8001f36:	4e5f      	ldr	r6, [pc, #380]	; (80020b4 <HAL_GPIO_Init+0x24c>)
 8001f38:	42b0      	cmp	r0, r6
 8001f3a:	bf0c      	ite	eq
 8001f3c:	2609      	moveq	r6, #9
 8001f3e:	260a      	movne	r6, #10
 8001f40:	fa06 f609 	lsl.w	r6, r6, r9
 8001f44:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f46:	f8c8 2008 	str.w	r2, [r8, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f4e:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8001f52:	ea6f 060e 	mvn.w	r6, lr
        temp = EXTI->RTSR1;
 8001f56:	6812      	ldr	r2, [r2, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8001f58:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8001f5c:	bf0c      	ite	eq
 8001f5e:	4032      	andeq	r2, r6
          temp |= iocurrent;
 8001f60:	ea4e 0202 	orrne.w	r2, lr, r2

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f64:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
        EXTI->RTSR1 = temp;
 8001f68:	f8c8 2000 	str.w	r2, [r8]
        temp = EXTI->FTSR1;
 8001f6c:	f8d8 2004 	ldr.w	r2, [r8, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8001f70:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8001f74:	bf0c      	ite	eq
 8001f76:	4032      	andeq	r2, r6
          temp |= iocurrent;
 8001f78:	ea4e 0202 	orrne.w	r2, lr, r2

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f7c:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        EXTI->FTSR1 = temp;
 8001f80:	f8c8 2004 	str.w	r2, [r8, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8001f84:	f8d8 2084 	ldr.w	r2, [r8, #132]	; 0x84
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001f88:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8001f8c:	bf0c      	ite	eq
 8001f8e:	4032      	andeq	r2, r6
          temp |= iocurrent;
 8001f90:	ea4e 0202 	orrne.w	r2, lr, r2

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f94:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001f96:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
 8001f9a:	f8c8 2084 	str.w	r2, [r8, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8001f9e:	f8d8 2080 	ldr.w	r2, [r8, #128]	; 0x80
        temp &= ~(iocurrent);
 8001fa2:	bf54      	ite	pl
 8001fa4:	4032      	andpl	r2, r6
          temp |= iocurrent;
 8001fa6:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8001faa:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
      }
    }

    position++;
 8001fae:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001fb0:	f10c 0c02 	add.w	ip, ip, #2
 8001fb4:	fa34 f203 	lsrs.w	r2, r4, r3
 8001fb8:	f47f af61 	bne.w	8001e7e <HAL_GPIO_Init+0x16>
  }
}
 8001fbc:	b003      	add	sp, #12
 8001fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001fc2:	f04f 0803 	mov.w	r8, #3
        temp = GPIOx->OSPEEDR;
 8001fc6:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001fc8:	fa08 f80c 	lsl.w	r8, r8, ip
 8001fcc:	ea26 0a08 	bic.w	sl, r6, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fd0:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001fd2:	ea6f 0808 	mvn.w	r8, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fd6:	fa06 f60c 	lsl.w	r6, r6, ip
 8001fda:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 8001fde:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fe0:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp = GPIOx->OTYPER;
 8001fe4:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fe8:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fea:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fee:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 8001ff0:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8001ff2:	68c2      	ldr	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ff4:	f1b9 0f02 	cmp.w	r9, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ff8:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ffa:	ea02 0208 	and.w	r2, r2, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ffe:	fa06 f60c 	lsl.w	r6, r6, ip
 8002002:	ea46 0602 	orr.w	r6, r6, r2
      GPIOx->PUPDR = temp;
 8002006:	fa09 f20c 	lsl.w	r2, r9, ip
 800200a:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800200c:	f47f af4d 	bne.w	8001eaa <HAL_GPIO_Init+0x42>
        temp = GPIOx->AFR[position >> 3U];
 8002010:	ea4f 09d3 	mov.w	r9, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002014:	f003 0b07 	and.w	fp, r3, #7
 8002018:	260f      	movs	r6, #15
 800201a:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 800201e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8002022:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002026:	fa06 f60b 	lsl.w	r6, r6, fp
 800202a:	ea2a 0a06 	bic.w	sl, sl, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800202e:	690e      	ldr	r6, [r1, #16]
 8002030:	fa06 f60b 	lsl.w	r6, r6, fp
 8002034:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3U] = temp;
 8002038:	f8c9 6020 	str.w	r6, [r9, #32]
 800203c:	e735      	b.n	8001eaa <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800203e:	f04f 0803 	mov.w	r8, #3
 8002042:	fa08 f80c 	lsl.w	r8, r8, ip
 8002046:	ea6f 0808 	mvn.w	r8, r8
 800204a:	e7d2      	b.n	8001ff2 <HAL_GPIO_Init+0x18a>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800204c:	2603      	movs	r6, #3
 800204e:	fa06 f609 	lsl.w	r6, r6, r9
 8002052:	4332      	orrs	r2, r6
 8002054:	e777      	b.n	8001f46 <HAL_GPIO_Init+0xde>
 8002056:	2601      	movs	r6, #1
 8002058:	fa06 f609 	lsl.w	r6, r6, r9
 800205c:	4332      	orrs	r2, r6
 800205e:	e772      	b.n	8001f46 <HAL_GPIO_Init+0xde>
 8002060:	2602      	movs	r6, #2
 8002062:	fa06 f609 	lsl.w	r6, r6, r9
 8002066:	4332      	orrs	r2, r6
 8002068:	e76d      	b.n	8001f46 <HAL_GPIO_Init+0xde>
 800206a:	2606      	movs	r6, #6
 800206c:	fa06 f609 	lsl.w	r6, r6, r9
 8002070:	4332      	orrs	r2, r6
 8002072:	e768      	b.n	8001f46 <HAL_GPIO_Init+0xde>
 8002074:	2604      	movs	r6, #4
 8002076:	fa06 f609 	lsl.w	r6, r6, r9
 800207a:	4332      	orrs	r2, r6
 800207c:	e763      	b.n	8001f46 <HAL_GPIO_Init+0xde>
 800207e:	2605      	movs	r6, #5
 8002080:	fa06 f609 	lsl.w	r6, r6, r9
 8002084:	4332      	orrs	r2, r6
 8002086:	e75e      	b.n	8001f46 <HAL_GPIO_Init+0xde>
 8002088:	2607      	movs	r6, #7
 800208a:	fa06 f609 	lsl.w	r6, r6, r9
 800208e:	4332      	orrs	r2, r6
 8002090:	e759      	b.n	8001f46 <HAL_GPIO_Init+0xde>
 8002092:	bf00      	nop
 8002094:	58024400 	.word	0x58024400
 8002098:	58020000 	.word	0x58020000
 800209c:	58020800 	.word	0x58020800
 80020a0:	58020c00 	.word	0x58020c00
 80020a4:	58021000 	.word	0x58021000
 80020a8:	58021400 	.word	0x58021400
 80020ac:	58021800 	.word	0x58021800
 80020b0:	58021c00 	.word	0x58021c00
 80020b4:	58022400 	.word	0x58022400

080020b8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020b8:	b902      	cbnz	r2, 80020bc <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80020ba:	0409      	lsls	r1, r1, #16
 80020bc:	6181      	str	r1, [r0, #24]
  }
}
 80020be:	4770      	bx	lr

080020c0 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020c0:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020c2:	ea01 0203 	and.w	r2, r1, r3
 80020c6:	ea21 0103 	bic.w	r1, r1, r3
 80020ca:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80020ce:	6181      	str	r1, [r0, #24]
}
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop

080020d4 <HAL_PWR_EnableBkUpAccess>:
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 80020d4:	4a02      	ldr	r2, [pc, #8]	; (80020e0 <HAL_PWR_EnableBkUpAccess+0xc>)
 80020d6:	6813      	ldr	r3, [r2, #0]
 80020d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020dc:	6013      	str	r3, [r2, #0]
}
 80020de:	4770      	bx	lr
 80020e0:	58024800 	.word	0x58024800

080020e4 <HAL_PWR_DisableBkUpAccess>:
  * @retval None.
  */
void HAL_PWR_DisableBkUpAccess (void)
{
  /* Disable access to RTC and backup registers */
  CLEAR_BIT (PWR->CR1, PWR_CR1_DBP);
 80020e4:	4a02      	ldr	r2, [pc, #8]	; (80020f0 <HAL_PWR_DisableBkUpAccess+0xc>)
 80020e6:	6813      	ldr	r3, [r2, #0]
 80020e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020ec:	6013      	str	r3, [r2, #0]
}
 80020ee:	4770      	bx	lr
 80020f0:	58024800 	.word	0x58024800

080020f4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80020f4:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80020f6:	4c10      	ldr	r4, [pc, #64]	; (8002138 <HAL_PWREx_ConfigSupply+0x44>)
 80020f8:	68e3      	ldr	r3, [r4, #12]
 80020fa:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80020fe:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002100:	d105      	bne.n	800210e <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002102:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002106:	1a18      	subs	r0, r3, r0
 8002108:	bf18      	it	ne
 800210a:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800210c:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800210e:	f023 0307 	bic.w	r3, r3, #7
 8002112:	4303      	orrs	r3, r0
 8002114:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 8002116:	f7fe fe23 	bl	8000d60 <HAL_GetTick>
 800211a:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800211c:	e005      	b.n	800212a <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800211e:	f7fe fe1f 	bl	8000d60 <HAL_GetTick>
 8002122:	1b40      	subs	r0, r0, r5
 8002124:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002128:	d804      	bhi.n	8002134 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800212a:	6863      	ldr	r3, [r4, #4]
 800212c:	049b      	lsls	r3, r3, #18
 800212e:	d5f6      	bpl.n	800211e <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
 8002130:	2000      	movs	r0, #0
}
 8002132:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8002134:	2001      	movs	r0, #1
}
 8002136:	bd38      	pop	{r3, r4, r5, pc}
 8002138:	58024800 	.word	0x58024800

0800213c <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800213c:	4b3b      	ldr	r3, [pc, #236]	; (800222c <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 800213e:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002140:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002142:	6a9c      	ldr	r4, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002144:	6add      	ldr	r5, [r3, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 8002146:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800214a:	6b59      	ldr	r1, [r3, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800214c:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8002150:	d038      	beq.n	80021c4 <HAL_RCC_GetSysClockFreq.part.0+0x88>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002152:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002156:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800215a:	f002 0203 	and.w	r2, r2, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800215e:	fb05 f101 	mul.w	r1, r5, r1
 8002162:	2a01      	cmp	r2, #1
 8002164:	ee07 1a90 	vmov	s15, r1
 8002168:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      {
        switch (pllsource)
 800216c:	d002      	beq.n	8002174 <HAL_RCC_GetSysClockFreq.part.0+0x38>
 800216e:	2a02      	cmp	r2, #2
 8002170:	d04e      	beq.n	8002210 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 8002172:	b34a      	cbz	r2, 80021c8 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002174:	ee07 0a90 	vmov	s15, r0
 8002178:	ed9f 5a2d 	vldr	s10, [pc, #180]	; 8002230 <HAL_RCC_GetSysClockFreq.part.0+0xf4>
 800217c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8002186:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8002234 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 800218a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800218e:	ee07 3a90 	vmov	s15, r3
 8002192:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002196:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800219a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800219e:	ee77 7a86 	vadd.f32	s15, s15, s12
 80021a2:	ee66 6aa7 	vmul.f32	s13, s13, s15
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80021a6:	4b21      	ldr	r3, [pc, #132]	; (800222c <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80021ae:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80021b0:	ee07 3a90 	vmov	s15, r3
 80021b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021c0:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 80021c4:	bc30      	pop	{r4, r5}
 80021c6:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	0692      	lsls	r2, r2, #26
 80021cc:	d527      	bpl.n	800221e <HAL_RCC_GetSysClockFreq.part.0+0xe2>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80021ce:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80021d0:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80021d4:	4a18      	ldr	r2, [pc, #96]	; (8002238 <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80021d6:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80021da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80021dc:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80021e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021e4:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8002234 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 80021e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80021ec:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80021ee:	ee06 3a90 	vmov	s13, r3
 80021f2:	ee06 2a10 	vmov	s12, r2
 80021f6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80021fa:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80021fe:	eee7 6a05 	vfma.f32	s13, s14, s10
 8002202:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8002206:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800220a:	ee66 6a87 	vmul.f32	s13, s13, s14
 800220e:	e7ca      	b.n	80021a6 <HAL_RCC_GetSysClockFreq.part.0+0x6a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002210:	ee07 0a90 	vmov	s15, r0
 8002214:	ed9f 5a09 	vldr	s10, [pc, #36]	; 800223c <HAL_RCC_GetSysClockFreq.part.0+0x100>
 8002218:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800221c:	e7b0      	b.n	8002180 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800221e:	ee07 0a90 	vmov	s15, r0
 8002222:	ed9f 5a07 	vldr	s10, [pc, #28]	; 8002240 <HAL_RCC_GetSysClockFreq.part.0+0x104>
 8002226:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800222a:	e7a9      	b.n	8002180 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 800222c:	58024400 	.word	0x58024400
 8002230:	4a742400 	.word	0x4a742400
 8002234:	39000000 	.word	0x39000000
 8002238:	03d09000 	.word	0x03d09000
 800223c:	4af42400 	.word	0x4af42400
 8002240:	4c742400 	.word	0x4c742400

08002244 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8002244:	2800      	cmp	r0, #0
 8002246:	f000 81bd 	beq.w	80025c4 <HAL_RCC_OscConfig+0x380>
{
 800224a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800224c:	6803      	ldr	r3, [r0, #0]
 800224e:	4604      	mov	r4, r0
 8002250:	07d9      	lsls	r1, r3, #31
 8002252:	d52e      	bpl.n	80022b2 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002254:	4993      	ldr	r1, [pc, #588]	; (80024a4 <HAL_RCC_OscConfig+0x260>)
 8002256:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002258:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800225a:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800225e:	2a10      	cmp	r2, #16
 8002260:	f000 80f0 	beq.w	8002444 <HAL_RCC_OscConfig+0x200>
 8002264:	2a18      	cmp	r2, #24
 8002266:	f000 80e8 	beq.w	800243a <HAL_RCC_OscConfig+0x1f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800226a:	6863      	ldr	r3, [r4, #4]
 800226c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002270:	f000 8108 	beq.w	8002484 <HAL_RCC_OscConfig+0x240>
 8002274:	2b00      	cmp	r3, #0
 8002276:	f000 8146 	beq.w	8002506 <HAL_RCC_OscConfig+0x2c2>
 800227a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800227e:	4b89      	ldr	r3, [pc, #548]	; (80024a4 <HAL_RCC_OscConfig+0x260>)
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	f000 8254 	beq.w	800272e <HAL_RCC_OscConfig+0x4ea>
 8002286:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002292:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002294:	f7fe fd64 	bl	8000d60 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002298:	4e82      	ldr	r6, [pc, #520]	; (80024a4 <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 800229a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800229c:	e005      	b.n	80022aa <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800229e:	f7fe fd5f 	bl	8000d60 <HAL_GetTick>
 80022a2:	1b40      	subs	r0, r0, r5
 80022a4:	2864      	cmp	r0, #100	; 0x64
 80022a6:	f200 812c 	bhi.w	8002502 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022aa:	6833      	ldr	r3, [r6, #0]
 80022ac:	039b      	lsls	r3, r3, #14
 80022ae:	d5f6      	bpl.n	800229e <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022b0:	6823      	ldr	r3, [r4, #0]
 80022b2:	079d      	lsls	r5, r3, #30
 80022b4:	d47e      	bmi.n	80023b4 <HAL_RCC_OscConfig+0x170>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80022b6:	06d9      	lsls	r1, r3, #27
 80022b8:	d528      	bpl.n	800230c <HAL_RCC_OscConfig+0xc8>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022ba:	497a      	ldr	r1, [pc, #488]	; (80024a4 <HAL_RCC_OscConfig+0x260>)
 80022bc:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80022be:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022c0:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80022c4:	2a08      	cmp	r2, #8
 80022c6:	f000 80cd 	beq.w	8002464 <HAL_RCC_OscConfig+0x220>
 80022ca:	2a18      	cmp	r2, #24
 80022cc:	f000 80c5 	beq.w	800245a <HAL_RCC_OscConfig+0x216>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80022d0:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 80022d2:	4d74      	ldr	r5, [pc, #464]	; (80024a4 <HAL_RCC_OscConfig+0x260>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	f000 814e 	beq.w	8002576 <HAL_RCC_OscConfig+0x332>
        __HAL_RCC_CSI_ENABLE();
 80022da:	682b      	ldr	r3, [r5, #0]
 80022dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022e0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80022e2:	f7fe fd3d 	bl	8000d60 <HAL_GetTick>
 80022e6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80022e8:	e005      	b.n	80022f6 <HAL_RCC_OscConfig+0xb2>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80022ea:	f7fe fd39 	bl	8000d60 <HAL_GetTick>
 80022ee:	1b80      	subs	r0, r0, r6
 80022f0:	2802      	cmp	r0, #2
 80022f2:	f200 8106 	bhi.w	8002502 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80022f6:	682b      	ldr	r3, [r5, #0]
 80022f8:	05db      	lsls	r3, r3, #23
 80022fa:	d5f6      	bpl.n	80022ea <HAL_RCC_OscConfig+0xa6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80022fc:	68eb      	ldr	r3, [r5, #12]
 80022fe:	6a22      	ldr	r2, [r4, #32]
 8002300:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8002304:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002308:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800230a:	6823      	ldr	r3, [r4, #0]
 800230c:	071d      	lsls	r5, r3, #28
 800230e:	d516      	bpl.n	800233e <HAL_RCC_OscConfig+0xfa>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002310:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8002312:	4d64      	ldr	r5, [pc, #400]	; (80024a4 <HAL_RCC_OscConfig+0x260>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002314:	2b00      	cmp	r3, #0
 8002316:	f000 810c 	beq.w	8002532 <HAL_RCC_OscConfig+0x2ee>
      __HAL_RCC_LSI_ENABLE();
 800231a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800231c:	f043 0301 	orr.w	r3, r3, #1
 8002320:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8002322:	f7fe fd1d 	bl	8000d60 <HAL_GetTick>
 8002326:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002328:	e005      	b.n	8002336 <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800232a:	f7fe fd19 	bl	8000d60 <HAL_GetTick>
 800232e:	1b80      	subs	r0, r0, r6
 8002330:	2802      	cmp	r0, #2
 8002332:	f200 80e6 	bhi.w	8002502 <HAL_RCC_OscConfig+0x2be>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002336:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002338:	0798      	lsls	r0, r3, #30
 800233a:	d5f6      	bpl.n	800232a <HAL_RCC_OscConfig+0xe6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800233c:	6823      	ldr	r3, [r4, #0]
 800233e:	069a      	lsls	r2, r3, #26
 8002340:	d516      	bpl.n	8002370 <HAL_RCC_OscConfig+0x12c>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002342:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 8002344:	4d57      	ldr	r5, [pc, #348]	; (80024a4 <HAL_RCC_OscConfig+0x260>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002346:	2b00      	cmp	r3, #0
 8002348:	f000 8104 	beq.w	8002554 <HAL_RCC_OscConfig+0x310>
      __HAL_RCC_HSI48_ENABLE();
 800234c:	682b      	ldr	r3, [r5, #0]
 800234e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002352:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002354:	f7fe fd04 	bl	8000d60 <HAL_GetTick>
 8002358:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800235a:	e005      	b.n	8002368 <HAL_RCC_OscConfig+0x124>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800235c:	f7fe fd00 	bl	8000d60 <HAL_GetTick>
 8002360:	1b80      	subs	r0, r0, r6
 8002362:	2802      	cmp	r0, #2
 8002364:	f200 80cd 	bhi.w	8002502 <HAL_RCC_OscConfig+0x2be>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002368:	682b      	ldr	r3, [r5, #0]
 800236a:	049f      	lsls	r7, r3, #18
 800236c:	d5f6      	bpl.n	800235c <HAL_RCC_OscConfig+0x118>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800236e:	6823      	ldr	r3, [r4, #0]
 8002370:	0759      	lsls	r1, r3, #29
 8002372:	f100 808d 	bmi.w	8002490 <HAL_RCC_OscConfig+0x24c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002376:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002378:	b1d0      	cbz	r0, 80023b0 <HAL_RCC_OscConfig+0x16c>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800237a:	4d4a      	ldr	r5, [pc, #296]	; (80024a4 <HAL_RCC_OscConfig+0x260>)
 800237c:	692b      	ldr	r3, [r5, #16]
 800237e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002382:	2b18      	cmp	r3, #24
 8002384:	f000 8185 	beq.w	8002692 <HAL_RCC_OscConfig+0x44e>
        __HAL_RCC_PLL_DISABLE();
 8002388:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800238a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800238c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002390:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002392:	f000 8119 	beq.w	80025c8 <HAL_RCC_OscConfig+0x384>
        tickstart = HAL_GetTick();
 8002396:	f7fe fce3 	bl	8000d60 <HAL_GetTick>
 800239a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800239c:	e005      	b.n	80023aa <HAL_RCC_OscConfig+0x166>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800239e:	f7fe fcdf 	bl	8000d60 <HAL_GetTick>
 80023a2:	1b00      	subs	r0, r0, r4
 80023a4:	2802      	cmp	r0, #2
 80023a6:	f200 80ac 	bhi.w	8002502 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80023aa:	682b      	ldr	r3, [r5, #0]
 80023ac:	019b      	lsls	r3, r3, #6
 80023ae:	d4f6      	bmi.n	800239e <HAL_RCC_OscConfig+0x15a>
  return HAL_OK;
 80023b0:	2000      	movs	r0, #0
}
 80023b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023b4:	4a3b      	ldr	r2, [pc, #236]	; (80024a4 <HAL_RCC_OscConfig+0x260>)
 80023b6:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023b8:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80023ba:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 80023be:	d122      	bne.n	8002406 <HAL_RCC_OscConfig+0x1c2>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023c0:	4b38      	ldr	r3, [pc, #224]	; (80024a4 <HAL_RCC_OscConfig+0x260>)
 80023c2:	68e2      	ldr	r2, [r4, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	0759      	lsls	r1, r3, #29
 80023c8:	d501      	bpl.n	80023ce <HAL_RCC_OscConfig+0x18a>
 80023ca:	2a00      	cmp	r2, #0
 80023cc:	d043      	beq.n	8002456 <HAL_RCC_OscConfig+0x212>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80023ce:	4d35      	ldr	r5, [pc, #212]	; (80024a4 <HAL_RCC_OscConfig+0x260>)
 80023d0:	682b      	ldr	r3, [r5, #0]
 80023d2:	f023 0319 	bic.w	r3, r3, #25
 80023d6:	4313      	orrs	r3, r2
 80023d8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80023da:	f7fe fcc1 	bl	8000d60 <HAL_GetTick>
 80023de:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023e0:	e005      	b.n	80023ee <HAL_RCC_OscConfig+0x1aa>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023e2:	f7fe fcbd 	bl	8000d60 <HAL_GetTick>
 80023e6:	1b80      	subs	r0, r0, r6
 80023e8:	2802      	cmp	r0, #2
 80023ea:	f200 808a 	bhi.w	8002502 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023ee:	682b      	ldr	r3, [r5, #0]
 80023f0:	075b      	lsls	r3, r3, #29
 80023f2:	d5f6      	bpl.n	80023e2 <HAL_RCC_OscConfig+0x19e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f4:	686b      	ldr	r3, [r5, #4]
 80023f6:	6922      	ldr	r2, [r4, #16]
 80023f8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80023fc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002400:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002402:	6823      	ldr	r3, [r4, #0]
 8002404:	e757      	b.n	80022b6 <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002406:	2b18      	cmp	r3, #24
 8002408:	f000 80d8 	beq.w	80025bc <HAL_RCC_OscConfig+0x378>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800240c:	4d25      	ldr	r5, [pc, #148]	; (80024a4 <HAL_RCC_OscConfig+0x260>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800240e:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002410:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002412:	2a00      	cmp	r2, #0
 8002414:	f000 80c1 	beq.w	800259a <HAL_RCC_OscConfig+0x356>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002418:	f023 0319 	bic.w	r3, r3, #25
 800241c:	4313      	orrs	r3, r2
 800241e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002420:	f7fe fc9e 	bl	8000d60 <HAL_GetTick>
 8002424:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002426:	e004      	b.n	8002432 <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002428:	f7fe fc9a 	bl	8000d60 <HAL_GetTick>
 800242c:	1b80      	subs	r0, r0, r6
 800242e:	2802      	cmp	r0, #2
 8002430:	d867      	bhi.n	8002502 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002432:	682b      	ldr	r3, [r5, #0]
 8002434:	075f      	lsls	r7, r3, #29
 8002436:	d5f7      	bpl.n	8002428 <HAL_RCC_OscConfig+0x1e4>
 8002438:	e7dc      	b.n	80023f4 <HAL_RCC_OscConfig+0x1b0>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800243a:	f001 0103 	and.w	r1, r1, #3
 800243e:	2902      	cmp	r1, #2
 8002440:	f47f af13 	bne.w	800226a <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002444:	4a17      	ldr	r2, [pc, #92]	; (80024a4 <HAL_RCC_OscConfig+0x260>)
 8002446:	6812      	ldr	r2, [r2, #0]
 8002448:	0392      	lsls	r2, r2, #14
 800244a:	f57f af32 	bpl.w	80022b2 <HAL_RCC_OscConfig+0x6e>
 800244e:	6862      	ldr	r2, [r4, #4]
 8002450:	2a00      	cmp	r2, #0
 8002452:	f47f af2e 	bne.w	80022b2 <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
 8002456:	2001      	movs	r0, #1
}
 8002458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800245a:	f001 0103 	and.w	r1, r1, #3
 800245e:	2901      	cmp	r1, #1
 8002460:	f47f af36 	bne.w	80022d0 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002464:	4a0f      	ldr	r2, [pc, #60]	; (80024a4 <HAL_RCC_OscConfig+0x260>)
 8002466:	6812      	ldr	r2, [r2, #0]
 8002468:	05d2      	lsls	r2, r2, #23
 800246a:	d502      	bpl.n	8002472 <HAL_RCC_OscConfig+0x22e>
 800246c:	69e2      	ldr	r2, [r4, #28]
 800246e:	2a80      	cmp	r2, #128	; 0x80
 8002470:	d1f1      	bne.n	8002456 <HAL_RCC_OscConfig+0x212>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002472:	490c      	ldr	r1, [pc, #48]	; (80024a4 <HAL_RCC_OscConfig+0x260>)
 8002474:	6a20      	ldr	r0, [r4, #32]
 8002476:	68ca      	ldr	r2, [r1, #12]
 8002478:	f022 527c 	bic.w	r2, r2, #1056964608	; 0x3f000000
 800247c:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002480:	60ca      	str	r2, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002482:	e743      	b.n	800230c <HAL_RCC_OscConfig+0xc8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002484:	4a07      	ldr	r2, [pc, #28]	; (80024a4 <HAL_RCC_OscConfig+0x260>)
 8002486:	6813      	ldr	r3, [r2, #0]
 8002488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800248c:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800248e:	e701      	b.n	8002294 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 8002490:	4d05      	ldr	r5, [pc, #20]	; (80024a8 <HAL_RCC_OscConfig+0x264>)
 8002492:	682b      	ldr	r3, [r5, #0]
 8002494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002498:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800249a:	f7fe fc61 	bl	8000d60 <HAL_GetTick>
 800249e:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024a0:	e009      	b.n	80024b6 <HAL_RCC_OscConfig+0x272>
 80024a2:	bf00      	nop
 80024a4:	58024400 	.word	0x58024400
 80024a8:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024ac:	f7fe fc58 	bl	8000d60 <HAL_GetTick>
 80024b0:	1b80      	subs	r0, r0, r6
 80024b2:	2864      	cmp	r0, #100	; 0x64
 80024b4:	d825      	bhi.n	8002502 <HAL_RCC_OscConfig+0x2be>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024b6:	682b      	ldr	r3, [r5, #0]
 80024b8:	05da      	lsls	r2, r3, #23
 80024ba:	d5f7      	bpl.n	80024ac <HAL_RCC_OscConfig+0x268>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024bc:	68a3      	ldr	r3, [r4, #8]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	f000 815c 	beq.w	800277c <HAL_RCC_OscConfig+0x538>
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f000 813a 	beq.w	800273e <HAL_RCC_OscConfig+0x4fa>
 80024ca:	2b05      	cmp	r3, #5
 80024cc:	4ba8      	ldr	r3, [pc, #672]	; (8002770 <HAL_RCC_OscConfig+0x52c>)
 80024ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80024d0:	f000 815a 	beq.w	8002788 <HAL_RCC_OscConfig+0x544>
 80024d4:	f022 0201 	bic.w	r2, r2, #1
 80024d8:	671a      	str	r2, [r3, #112]	; 0x70
 80024da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80024dc:	f022 0204 	bic.w	r2, r2, #4
 80024e0:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 80024e2:	f7fe fc3d 	bl	8000d60 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80024e6:	4ea2      	ldr	r6, [pc, #648]	; (8002770 <HAL_RCC_OscConfig+0x52c>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024e8:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80024ec:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80024ee:	e004      	b.n	80024fa <HAL_RCC_OscConfig+0x2b6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024f0:	f7fe fc36 	bl	8000d60 <HAL_GetTick>
 80024f4:	1b40      	subs	r0, r0, r5
 80024f6:	42b8      	cmp	r0, r7
 80024f8:	d803      	bhi.n	8002502 <HAL_RCC_OscConfig+0x2be>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80024fa:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80024fc:	079b      	lsls	r3, r3, #30
 80024fe:	d5f7      	bpl.n	80024f0 <HAL_RCC_OscConfig+0x2ac>
 8002500:	e739      	b.n	8002376 <HAL_RCC_OscConfig+0x132>
            return HAL_TIMEOUT;
 8002502:	2003      	movs	r0, #3
}
 8002504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002506:	4d9a      	ldr	r5, [pc, #616]	; (8002770 <HAL_RCC_OscConfig+0x52c>)
 8002508:	682b      	ldr	r3, [r5, #0]
 800250a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800250e:	602b      	str	r3, [r5, #0]
 8002510:	682b      	ldr	r3, [r5, #0]
 8002512:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002516:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002518:	f7fe fc22 	bl	8000d60 <HAL_GetTick>
 800251c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800251e:	e004      	b.n	800252a <HAL_RCC_OscConfig+0x2e6>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002520:	f7fe fc1e 	bl	8000d60 <HAL_GetTick>
 8002524:	1b80      	subs	r0, r0, r6
 8002526:	2864      	cmp	r0, #100	; 0x64
 8002528:	d8eb      	bhi.n	8002502 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800252a:	682b      	ldr	r3, [r5, #0]
 800252c:	039f      	lsls	r7, r3, #14
 800252e:	d4f7      	bmi.n	8002520 <HAL_RCC_OscConfig+0x2dc>
 8002530:	e6be      	b.n	80022b0 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 8002532:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002534:	f023 0301 	bic.w	r3, r3, #1
 8002538:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800253a:	f7fe fc11 	bl	8000d60 <HAL_GetTick>
 800253e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002540:	e004      	b.n	800254c <HAL_RCC_OscConfig+0x308>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002542:	f7fe fc0d 	bl	8000d60 <HAL_GetTick>
 8002546:	1b80      	subs	r0, r0, r6
 8002548:	2802      	cmp	r0, #2
 800254a:	d8da      	bhi.n	8002502 <HAL_RCC_OscConfig+0x2be>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800254c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800254e:	0799      	lsls	r1, r3, #30
 8002550:	d4f7      	bmi.n	8002542 <HAL_RCC_OscConfig+0x2fe>
 8002552:	e6f3      	b.n	800233c <HAL_RCC_OscConfig+0xf8>
      __HAL_RCC_HSI48_DISABLE();
 8002554:	682b      	ldr	r3, [r5, #0]
 8002556:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800255a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800255c:	f7fe fc00 	bl	8000d60 <HAL_GetTick>
 8002560:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002562:	e004      	b.n	800256e <HAL_RCC_OscConfig+0x32a>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002564:	f7fe fbfc 	bl	8000d60 <HAL_GetTick>
 8002568:	1b80      	subs	r0, r0, r6
 800256a:	2802      	cmp	r0, #2
 800256c:	d8c9      	bhi.n	8002502 <HAL_RCC_OscConfig+0x2be>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800256e:	682b      	ldr	r3, [r5, #0]
 8002570:	0498      	lsls	r0, r3, #18
 8002572:	d4f7      	bmi.n	8002564 <HAL_RCC_OscConfig+0x320>
 8002574:	e6fb      	b.n	800236e <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_CSI_DISABLE();
 8002576:	682b      	ldr	r3, [r5, #0]
 8002578:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800257c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800257e:	f7fe fbef 	bl	8000d60 <HAL_GetTick>
 8002582:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002584:	e004      	b.n	8002590 <HAL_RCC_OscConfig+0x34c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002586:	f7fe fbeb 	bl	8000d60 <HAL_GetTick>
 800258a:	1b80      	subs	r0, r0, r6
 800258c:	2802      	cmp	r0, #2
 800258e:	d8b8      	bhi.n	8002502 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002590:	682b      	ldr	r3, [r5, #0]
 8002592:	05df      	lsls	r7, r3, #23
 8002594:	d4f7      	bmi.n	8002586 <HAL_RCC_OscConfig+0x342>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002596:	6823      	ldr	r3, [r4, #0]
 8002598:	e6b8      	b.n	800230c <HAL_RCC_OscConfig+0xc8>
        __HAL_RCC_HSI_DISABLE();
 800259a:	f023 0301 	bic.w	r3, r3, #1
 800259e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80025a0:	f7fe fbde 	bl	8000d60 <HAL_GetTick>
 80025a4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80025a6:	e004      	b.n	80025b2 <HAL_RCC_OscConfig+0x36e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025a8:	f7fe fbda 	bl	8000d60 <HAL_GetTick>
 80025ac:	1b80      	subs	r0, r0, r6
 80025ae:	2802      	cmp	r0, #2
 80025b0:	d8a7      	bhi.n	8002502 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80025b2:	682b      	ldr	r3, [r5, #0]
 80025b4:	0758      	lsls	r0, r3, #29
 80025b6:	d4f7      	bmi.n	80025a8 <HAL_RCC_OscConfig+0x364>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80025b8:	6823      	ldr	r3, [r4, #0]
 80025ba:	e67c      	b.n	80022b6 <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80025bc:	0790      	lsls	r0, r2, #30
 80025be:	f47f af25 	bne.w	800240c <HAL_RCC_OscConfig+0x1c8>
 80025c2:	e6fd      	b.n	80023c0 <HAL_RCC_OscConfig+0x17c>
    return HAL_ERROR;
 80025c4:	2001      	movs	r0, #1
}
 80025c6:	4770      	bx	lr
        tickstart = HAL_GetTick();
 80025c8:	f7fe fbca 	bl	8000d60 <HAL_GetTick>
 80025cc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80025ce:	e004      	b.n	80025da <HAL_RCC_OscConfig+0x396>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025d0:	f7fe fbc6 	bl	8000d60 <HAL_GetTick>
 80025d4:	1b80      	subs	r0, r0, r6
 80025d6:	2802      	cmp	r0, #2
 80025d8:	d893      	bhi.n	8002502 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80025da:	682b      	ldr	r3, [r5, #0]
 80025dc:	0199      	lsls	r1, r3, #6
 80025de:	d4f7      	bmi.n	80025d0 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025e0:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80025e2:	4b64      	ldr	r3, [pc, #400]	; (8002774 <HAL_RCC_OscConfig+0x530>)
 80025e4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80025e6:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80025e8:	4963      	ldr	r1, [pc, #396]	; (8002778 <HAL_RCC_OscConfig+0x534>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80025ea:	4e61      	ldr	r6, [pc, #388]	; (8002770 <HAL_RCC_OscConfig+0x52c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025ec:	4313      	orrs	r3, r2
 80025ee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80025f0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80025f4:	62ab      	str	r3, [r5, #40]	; 0x28
 80025f6:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 80025fa:	3b01      	subs	r3, #1
 80025fc:	3a01      	subs	r2, #1
 80025fe:	025b      	lsls	r3, r3, #9
 8002600:	0412      	lsls	r2, r2, #16
 8002602:	b29b      	uxth	r3, r3
 8002604:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8002608:	4313      	orrs	r3, r2
 800260a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800260c:	3a01      	subs	r2, #1
 800260e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002612:	4313      	orrs	r3, r2
 8002614:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002616:	3a01      	subs	r2, #1
 8002618:	0612      	lsls	r2, r2, #24
 800261a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800261e:	4313      	orrs	r3, r2
 8002620:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8002622:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002624:	f023 0301 	bic.w	r3, r3, #1
 8002628:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800262a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800262c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800262e:	4011      	ands	r1, r2
 8002630:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8002634:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002636:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002638:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800263a:	f023 030c 	bic.w	r3, r3, #12
 800263e:	4313      	orrs	r3, r2
 8002640:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002642:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002644:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002646:	f023 0302 	bic.w	r3, r3, #2
 800264a:	4313      	orrs	r3, r2
 800264c:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800264e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002650:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002654:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002656:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800265c:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800265e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002660:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002664:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8002666:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002668:	f043 0301 	orr.w	r3, r3, #1
 800266c:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800266e:	682b      	ldr	r3, [r5, #0]
 8002670:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002674:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002676:	f7fe fb73 	bl	8000d60 <HAL_GetTick>
 800267a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800267c:	e005      	b.n	800268a <HAL_RCC_OscConfig+0x446>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800267e:	f7fe fb6f 	bl	8000d60 <HAL_GetTick>
 8002682:	1b00      	subs	r0, r0, r4
 8002684:	2802      	cmp	r0, #2
 8002686:	f63f af3c 	bhi.w	8002502 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800268a:	6833      	ldr	r3, [r6, #0]
 800268c:	019a      	lsls	r2, r3, #6
 800268e:	d5f6      	bpl.n	800267e <HAL_RCC_OscConfig+0x43a>
 8002690:	e68e      	b.n	80023b0 <HAL_RCC_OscConfig+0x16c>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002692:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002694:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002696:	6b2e      	ldr	r6, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002698:	f43f ae8b 	beq.w	80023b2 <HAL_RCC_OscConfig+0x16e>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800269c:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026a0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80026a2:	428b      	cmp	r3, r1
 80026a4:	f47f aed7 	bne.w	8002456 <HAL_RCC_OscConfig+0x212>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80026a8:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80026ae:	429a      	cmp	r2, r3
 80026b0:	f47f aed1 	bne.w	8002456 <HAL_RCC_OscConfig+0x212>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80026b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80026b6:	f3c6 0208 	ubfx	r2, r6, #0, #9
 80026ba:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80026bc:	429a      	cmp	r2, r3
 80026be:	f47f aeca 	bne.w	8002456 <HAL_RCC_OscConfig+0x212>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80026c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80026c4:	f3c6 2246 	ubfx	r2, r6, #9, #7
 80026c8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80026ca:	429a      	cmp	r2, r3
 80026cc:	f47f aec3 	bne.w	8002456 <HAL_RCC_OscConfig+0x212>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80026d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80026d2:	f3c6 4206 	ubfx	r2, r6, #16, #7
 80026d6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80026d8:	429a      	cmp	r2, r3
 80026da:	f47f aebc 	bne.w	8002456 <HAL_RCC_OscConfig+0x212>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80026de:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80026e0:	f3c6 6606 	ubfx	r6, r6, #24, #7
 80026e4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80026e6:	429e      	cmp	r6, r3
 80026e8:	f47f aeb5 	bne.w	8002456 <HAL_RCC_OscConfig+0x212>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80026ec:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80026ee:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80026f0:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80026f4:	429a      	cmp	r2, r3
 80026f6:	f43f ae5b 	beq.w	80023b0 <HAL_RCC_OscConfig+0x16c>
          __HAL_RCC_PLLFRACN_DISABLE();
 80026fa:	4a1d      	ldr	r2, [pc, #116]	; (8002770 <HAL_RCC_OscConfig+0x52c>)
 80026fc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80026fe:	f023 0301 	bic.w	r3, r3, #1
 8002702:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
 8002704:	f7fe fb2c 	bl	8000d60 <HAL_GetTick>
 8002708:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800270a:	f7fe fb29 	bl	8000d60 <HAL_GetTick>
 800270e:	42a8      	cmp	r0, r5
 8002710:	d0fb      	beq.n	800270a <HAL_RCC_OscConfig+0x4c6>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002712:	4a17      	ldr	r2, [pc, #92]	; (8002770 <HAL_RCC_OscConfig+0x52c>)
  return HAL_OK;
 8002714:	2000      	movs	r0, #0
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002716:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002718:	4b17      	ldr	r3, [pc, #92]	; (8002778 <HAL_RCC_OscConfig+0x534>)
 800271a:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800271c:	4023      	ands	r3, r4
 800271e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002722:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8002724:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002726:	f043 0301 	orr.w	r3, r3, #1
 800272a:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800272c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800272e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	e5aa      	b.n	8002294 <HAL_RCC_OscConfig+0x50>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800273e:	4d0c      	ldr	r5, [pc, #48]	; (8002770 <HAL_RCC_OscConfig+0x52c>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002740:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002744:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002746:	f023 0301 	bic.w	r3, r3, #1
 800274a:	672b      	str	r3, [r5, #112]	; 0x70
 800274c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800274e:	f023 0304 	bic.w	r3, r3, #4
 8002752:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002754:	f7fe fb04 	bl	8000d60 <HAL_GetTick>
 8002758:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800275a:	e005      	b.n	8002768 <HAL_RCC_OscConfig+0x524>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800275c:	f7fe fb00 	bl	8000d60 <HAL_GetTick>
 8002760:	1b80      	subs	r0, r0, r6
 8002762:	42b8      	cmp	r0, r7
 8002764:	f63f aecd 	bhi.w	8002502 <HAL_RCC_OscConfig+0x2be>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002768:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800276a:	0798      	lsls	r0, r3, #30
 800276c:	d4f6      	bmi.n	800275c <HAL_RCC_OscConfig+0x518>
 800276e:	e602      	b.n	8002376 <HAL_RCC_OscConfig+0x132>
 8002770:	58024400 	.word	0x58024400
 8002774:	fffffc0c 	.word	0xfffffc0c
 8002778:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800277c:	4a06      	ldr	r2, [pc, #24]	; (8002798 <HAL_RCC_OscConfig+0x554>)
 800277e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002780:	f043 0301 	orr.w	r3, r3, #1
 8002784:	6713      	str	r3, [r2, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002786:	e6ac      	b.n	80024e2 <HAL_RCC_OscConfig+0x29e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002788:	f042 0204 	orr.w	r2, r2, #4
 800278c:	671a      	str	r2, [r3, #112]	; 0x70
 800278e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002790:	f042 0201 	orr.w	r2, r2, #1
 8002794:	671a      	str	r2, [r3, #112]	; 0x70
 8002796:	e6a4      	b.n	80024e2 <HAL_RCC_OscConfig+0x29e>
 8002798:	58024400 	.word	0x58024400

0800279c <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800279c:	4a0c      	ldr	r2, [pc, #48]	; (80027d0 <HAL_RCC_GetSysClockFreq+0x34>)
 800279e:	6913      	ldr	r3, [r2, #16]
 80027a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027a4:	2b10      	cmp	r3, #16
 80027a6:	d004      	beq.n	80027b2 <HAL_RCC_GetSysClockFreq+0x16>
 80027a8:	2b18      	cmp	r3, #24
 80027aa:	d00d      	beq.n	80027c8 <HAL_RCC_GetSysClockFreq+0x2c>
 80027ac:	b11b      	cbz	r3, 80027b6 <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
 80027ae:	4809      	ldr	r0, [pc, #36]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x38>)
 80027b0:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027b2:	4809      	ldr	r0, [pc, #36]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80027b4:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80027b6:	6813      	ldr	r3, [r2, #0]
 80027b8:	069b      	lsls	r3, r3, #26
 80027ba:	d507      	bpl.n	80027cc <HAL_RCC_GetSysClockFreq+0x30>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80027bc:	6813      	ldr	r3, [r2, #0]
 80027be:	4807      	ldr	r0, [pc, #28]	; (80027dc <HAL_RCC_GetSysClockFreq+0x40>)
 80027c0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80027c4:	40d8      	lsrs	r0, r3
 80027c6:	4770      	bx	lr
 80027c8:	f7ff bcb8 	b.w	800213c <HAL_RCC_GetSysClockFreq.part.0>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80027cc:	4803      	ldr	r0, [pc, #12]	; (80027dc <HAL_RCC_GetSysClockFreq+0x40>)
}
 80027ce:	4770      	bx	lr
 80027d0:	58024400 	.word	0x58024400
 80027d4:	003d0900 	.word	0x003d0900
 80027d8:	007a1200 	.word	0x007a1200
 80027dc:	03d09000 	.word	0x03d09000

080027e0 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80027e0:	2800      	cmp	r0, #0
 80027e2:	f000 810c 	beq.w	80029fe <HAL_RCC_ClockConfig+0x21e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027e6:	4a8c      	ldr	r2, [pc, #560]	; (8002a18 <HAL_RCC_ClockConfig+0x238>)
 80027e8:	6813      	ldr	r3, [r2, #0]
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	428b      	cmp	r3, r1
{
 80027f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027f4:	4604      	mov	r4, r0
 80027f6:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027f8:	d20c      	bcs.n	8002814 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027fa:	6813      	ldr	r3, [r2, #0]
 80027fc:	f023 030f 	bic.w	r3, r3, #15
 8002800:	430b      	orrs	r3, r1
 8002802:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002804:	6813      	ldr	r3, [r2, #0]
 8002806:	f003 030f 	and.w	r3, r3, #15
 800280a:	428b      	cmp	r3, r1
 800280c:	d002      	beq.n	8002814 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800280e:	2001      	movs	r0, #1
}
 8002810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002814:	6823      	ldr	r3, [r4, #0]
 8002816:	075f      	lsls	r7, r3, #29
 8002818:	d50b      	bpl.n	8002832 <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800281a:	4980      	ldr	r1, [pc, #512]	; (8002a1c <HAL_RCC_ClockConfig+0x23c>)
 800281c:	6920      	ldr	r0, [r4, #16]
 800281e:	698a      	ldr	r2, [r1, #24]
 8002820:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8002824:	4290      	cmp	r0, r2
 8002826:	d904      	bls.n	8002832 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002828:	698a      	ldr	r2, [r1, #24]
 800282a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800282e:	4302      	orrs	r2, r0
 8002830:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002832:	071e      	lsls	r6, r3, #28
 8002834:	d50b      	bpl.n	800284e <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002836:	4979      	ldr	r1, [pc, #484]	; (8002a1c <HAL_RCC_ClockConfig+0x23c>)
 8002838:	6960      	ldr	r0, [r4, #20]
 800283a:	69ca      	ldr	r2, [r1, #28]
 800283c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8002840:	4290      	cmp	r0, r2
 8002842:	d904      	bls.n	800284e <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002844:	69ca      	ldr	r2, [r1, #28]
 8002846:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800284a:	4302      	orrs	r2, r0
 800284c:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800284e:	06d8      	lsls	r0, r3, #27
 8002850:	d50b      	bpl.n	800286a <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002852:	4972      	ldr	r1, [pc, #456]	; (8002a1c <HAL_RCC_ClockConfig+0x23c>)
 8002854:	69a0      	ldr	r0, [r4, #24]
 8002856:	69ca      	ldr	r2, [r1, #28]
 8002858:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800285c:	4290      	cmp	r0, r2
 800285e:	d904      	bls.n	800286a <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002860:	69ca      	ldr	r2, [r1, #28]
 8002862:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002866:	4302      	orrs	r2, r0
 8002868:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800286a:	0699      	lsls	r1, r3, #26
 800286c:	d50b      	bpl.n	8002886 <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800286e:	496b      	ldr	r1, [pc, #428]	; (8002a1c <HAL_RCC_ClockConfig+0x23c>)
 8002870:	69e0      	ldr	r0, [r4, #28]
 8002872:	6a0a      	ldr	r2, [r1, #32]
 8002874:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8002878:	4290      	cmp	r0, r2
 800287a:	d904      	bls.n	8002886 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800287c:	6a0a      	ldr	r2, [r1, #32]
 800287e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002882:	4302      	orrs	r2, r0
 8002884:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002886:	079a      	lsls	r2, r3, #30
 8002888:	f140 80ab 	bpl.w	80029e2 <HAL_RCC_ClockConfig+0x202>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800288c:	4863      	ldr	r0, [pc, #396]	; (8002a1c <HAL_RCC_ClockConfig+0x23c>)
 800288e:	68e1      	ldr	r1, [r4, #12]
 8002890:	6982      	ldr	r2, [r0, #24]
 8002892:	f002 020f 	and.w	r2, r2, #15
 8002896:	4291      	cmp	r1, r2
 8002898:	d904      	bls.n	80028a4 <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800289a:	6982      	ldr	r2, [r0, #24]
 800289c:	f022 020f 	bic.w	r2, r2, #15
 80028a0:	430a      	orrs	r2, r1
 80028a2:	6182      	str	r2, [r0, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028a4:	07d8      	lsls	r0, r3, #31
 80028a6:	d530      	bpl.n	800290a <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80028a8:	4a5c      	ldr	r2, [pc, #368]	; (8002a1c <HAL_RCC_ClockConfig+0x23c>)
 80028aa:	68a1      	ldr	r1, [r4, #8]
 80028ac:	6993      	ldr	r3, [r2, #24]
 80028ae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80028b2:	430b      	orrs	r3, r1
 80028b4:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028b6:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028b8:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ba:	2902      	cmp	r1, #2
 80028bc:	f000 80a1 	beq.w	8002a02 <HAL_RCC_ClockConfig+0x222>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028c0:	2903      	cmp	r1, #3
 80028c2:	f000 8098 	beq.w	80029f6 <HAL_RCC_ClockConfig+0x216>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80028c6:	2901      	cmp	r1, #1
 80028c8:	f000 80a1 	beq.w	8002a0e <HAL_RCC_ClockConfig+0x22e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028cc:	0758      	lsls	r0, r3, #29
 80028ce:	d59e      	bpl.n	800280e <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028d0:	4e52      	ldr	r6, [pc, #328]	; (8002a1c <HAL_RCC_ClockConfig+0x23c>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028d2:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028d6:	6933      	ldr	r3, [r6, #16]
 80028d8:	f023 0307 	bic.w	r3, r3, #7
 80028dc:	430b      	orrs	r3, r1
 80028de:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 80028e0:	f7fe fa3e 	bl	8000d60 <HAL_GetTick>
 80028e4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028e6:	e005      	b.n	80028f4 <HAL_RCC_ClockConfig+0x114>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028e8:	f7fe fa3a 	bl	8000d60 <HAL_GetTick>
 80028ec:	1bc0      	subs	r0, r0, r7
 80028ee:	4540      	cmp	r0, r8
 80028f0:	f200 808b 	bhi.w	8002a0a <HAL_RCC_ClockConfig+0x22a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f4:	6933      	ldr	r3, [r6, #16]
 80028f6:	6862      	ldr	r2, [r4, #4]
 80028f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028fc:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8002900:	d1f2      	bne.n	80028e8 <HAL_RCC_ClockConfig+0x108>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002902:	6823      	ldr	r3, [r4, #0]
 8002904:	0799      	lsls	r1, r3, #30
 8002906:	d506      	bpl.n	8002916 <HAL_RCC_ClockConfig+0x136>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002908:	68e1      	ldr	r1, [r4, #12]
 800290a:	4844      	ldr	r0, [pc, #272]	; (8002a1c <HAL_RCC_ClockConfig+0x23c>)
 800290c:	6982      	ldr	r2, [r0, #24]
 800290e:	f002 020f 	and.w	r2, r2, #15
 8002912:	428a      	cmp	r2, r1
 8002914:	d869      	bhi.n	80029ea <HAL_RCC_ClockConfig+0x20a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002916:	4940      	ldr	r1, [pc, #256]	; (8002a18 <HAL_RCC_ClockConfig+0x238>)
 8002918:	680a      	ldr	r2, [r1, #0]
 800291a:	f002 020f 	and.w	r2, r2, #15
 800291e:	42aa      	cmp	r2, r5
 8002920:	d90a      	bls.n	8002938 <HAL_RCC_ClockConfig+0x158>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002922:	680a      	ldr	r2, [r1, #0]
 8002924:	f022 020f 	bic.w	r2, r2, #15
 8002928:	432a      	orrs	r2, r5
 800292a:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800292c:	680a      	ldr	r2, [r1, #0]
 800292e:	f002 020f 	and.w	r2, r2, #15
 8002932:	42aa      	cmp	r2, r5
 8002934:	f47f af6b 	bne.w	800280e <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002938:	075a      	lsls	r2, r3, #29
 800293a:	d50b      	bpl.n	8002954 <HAL_RCC_ClockConfig+0x174>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800293c:	4937      	ldr	r1, [pc, #220]	; (8002a1c <HAL_RCC_ClockConfig+0x23c>)
 800293e:	6920      	ldr	r0, [r4, #16]
 8002940:	698a      	ldr	r2, [r1, #24]
 8002942:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8002946:	4290      	cmp	r0, r2
 8002948:	d204      	bcs.n	8002954 <HAL_RCC_ClockConfig+0x174>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800294a:	698a      	ldr	r2, [r1, #24]
 800294c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002950:	4302      	orrs	r2, r0
 8002952:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002954:	071f      	lsls	r7, r3, #28
 8002956:	d50b      	bpl.n	8002970 <HAL_RCC_ClockConfig+0x190>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002958:	4930      	ldr	r1, [pc, #192]	; (8002a1c <HAL_RCC_ClockConfig+0x23c>)
 800295a:	6960      	ldr	r0, [r4, #20]
 800295c:	69ca      	ldr	r2, [r1, #28]
 800295e:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8002962:	4290      	cmp	r0, r2
 8002964:	d204      	bcs.n	8002970 <HAL_RCC_ClockConfig+0x190>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002966:	69ca      	ldr	r2, [r1, #28]
 8002968:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800296c:	4302      	orrs	r2, r0
 800296e:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002970:	06de      	lsls	r6, r3, #27
 8002972:	d50b      	bpl.n	800298c <HAL_RCC_ClockConfig+0x1ac>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002974:	4929      	ldr	r1, [pc, #164]	; (8002a1c <HAL_RCC_ClockConfig+0x23c>)
 8002976:	69a0      	ldr	r0, [r4, #24]
 8002978:	69ca      	ldr	r2, [r1, #28]
 800297a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800297e:	4290      	cmp	r0, r2
 8002980:	d204      	bcs.n	800298c <HAL_RCC_ClockConfig+0x1ac>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002982:	69ca      	ldr	r2, [r1, #28]
 8002984:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002988:	4302      	orrs	r2, r0
 800298a:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800298c:	069d      	lsls	r5, r3, #26
 800298e:	d50b      	bpl.n	80029a8 <HAL_RCC_ClockConfig+0x1c8>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002990:	4a22      	ldr	r2, [pc, #136]	; (8002a1c <HAL_RCC_ClockConfig+0x23c>)
 8002992:	69e1      	ldr	r1, [r4, #28]
 8002994:	6a13      	ldr	r3, [r2, #32]
 8002996:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800299a:	4299      	cmp	r1, r3
 800299c:	d204      	bcs.n	80029a8 <HAL_RCC_ClockConfig+0x1c8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800299e:	6a13      	ldr	r3, [r2, #32]
 80029a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029a4:	430b      	orrs	r3, r1
 80029a6:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80029a8:	f7ff fef8 	bl	800279c <HAL_RCC_GetSysClockFreq>
 80029ac:	4a1b      	ldr	r2, [pc, #108]	; (8002a1c <HAL_RCC_ClockConfig+0x23c>)
 80029ae:	4603      	mov	r3, r0
 80029b0:	481b      	ldr	r0, [pc, #108]	; (8002a20 <HAL_RCC_ClockConfig+0x240>)
 80029b2:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80029b4:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80029b6:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 80029ba:	4d1a      	ldr	r5, [pc, #104]	; (8002a24 <HAL_RCC_ClockConfig+0x244>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80029bc:	f002 020f 	and.w	r2, r2, #15
 80029c0:	4c19      	ldr	r4, [pc, #100]	; (8002a28 <HAL_RCC_ClockConfig+0x248>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80029c2:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80029c4:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80029c6:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 80029ca:	4818      	ldr	r0, [pc, #96]	; (8002a2c <HAL_RCC_ClockConfig+0x24c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80029cc:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80029d0:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 80029d2:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 80029d4:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80029d6:	40d3      	lsrs	r3, r2
 80029d8:	6023      	str	r3, [r4, #0]
}
 80029da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 80029de:	f7fd bf6b 	b.w	80008b8 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029e2:	07da      	lsls	r2, r3, #31
 80029e4:	f53f af60 	bmi.w	80028a8 <HAL_RCC_ClockConfig+0xc8>
 80029e8:	e795      	b.n	8002916 <HAL_RCC_ClockConfig+0x136>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029ea:	6982      	ldr	r2, [r0, #24]
 80029ec:	f022 020f 	bic.w	r2, r2, #15
 80029f0:	430a      	orrs	r2, r1
 80029f2:	6182      	str	r2, [r0, #24]
 80029f4:	e78f      	b.n	8002916 <HAL_RCC_ClockConfig+0x136>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029f6:	019f      	lsls	r7, r3, #6
 80029f8:	f53f af6a 	bmi.w	80028d0 <HAL_RCC_ClockConfig+0xf0>
 80029fc:	e707      	b.n	800280e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80029fe:	2001      	movs	r0, #1
}
 8002a00:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a02:	039b      	lsls	r3, r3, #14
 8002a04:	f53f af64 	bmi.w	80028d0 <HAL_RCC_ClockConfig+0xf0>
 8002a08:	e701      	b.n	800280e <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8002a0a:	2003      	movs	r0, #3
 8002a0c:	e700      	b.n	8002810 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a0e:	05de      	lsls	r6, r3, #23
 8002a10:	f53f af5e 	bmi.w	80028d0 <HAL_RCC_ClockConfig+0xf0>
 8002a14:	e6fb      	b.n	800280e <HAL_RCC_ClockConfig+0x2e>
 8002a16:	bf00      	nop
 8002a18:	52002000 	.word	0x52002000
 8002a1c:	58024400 	.word	0x58024400
 8002a20:	0801248c 	.word	0x0801248c
 8002a24:	24000000 	.word	0x24000000
 8002a28:	24000004 	.word	0x24000004
 8002a2c:	2400000c 	.word	0x2400000c

08002a30 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a30:	4a18      	ldr	r2, [pc, #96]	; (8002a94 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a32:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a34:	6913      	ldr	r3, [r2, #16]
 8002a36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a3a:	2b10      	cmp	r3, #16
 8002a3c:	d01a      	beq.n	8002a74 <HAL_RCC_GetHCLKFreq+0x44>
 8002a3e:	2b18      	cmp	r3, #24
 8002a40:	d023      	beq.n	8002a8a <HAL_RCC_GetHCLKFreq+0x5a>
 8002a42:	b1cb      	cbz	r3, 8002a78 <HAL_RCC_GetHCLKFreq+0x48>
      sysclockfreq = CSI_VALUE;
 8002a44:	4814      	ldr	r0, [pc, #80]	; (8002a98 <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002a46:	4b13      	ldr	r3, [pc, #76]	; (8002a94 <HAL_RCC_GetHCLKFreq+0x64>)
 8002a48:	4914      	ldr	r1, [pc, #80]	; (8002a9c <HAL_RCC_GetHCLKFreq+0x6c>)
 8002a4a:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a4c:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002a4e:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a52:	4c13      	ldr	r4, [pc, #76]	; (8002aa0 <HAL_RCC_GetHCLKFreq+0x70>)
 8002a54:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a58:	4d12      	ldr	r5, [pc, #72]	; (8002aa4 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002a5a:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a5c:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002a5e:	f002 021f 	and.w	r2, r2, #31
 8002a62:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a66:	f003 001f 	and.w	r0, r3, #31
 8002a6a:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
 8002a6e:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a70:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8002a72:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a74:	480c      	ldr	r0, [pc, #48]	; (8002aa8 <HAL_RCC_GetHCLKFreq+0x78>)
 8002a76:	e7e6      	b.n	8002a46 <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a78:	6813      	ldr	r3, [r2, #0]
 8002a7a:	069b      	lsls	r3, r3, #26
 8002a7c:	d508      	bpl.n	8002a90 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002a7e:	6813      	ldr	r3, [r2, #0]
 8002a80:	480a      	ldr	r0, [pc, #40]	; (8002aac <HAL_RCC_GetHCLKFreq+0x7c>)
 8002a82:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8002a86:	40d8      	lsrs	r0, r3
 8002a88:	e7dd      	b.n	8002a46 <HAL_RCC_GetHCLKFreq+0x16>
 8002a8a:	f7ff fb57 	bl	800213c <HAL_RCC_GetSysClockFreq.part.0>
 8002a8e:	e7da      	b.n	8002a46 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002a90:	4806      	ldr	r0, [pc, #24]	; (8002aac <HAL_RCC_GetHCLKFreq+0x7c>)
 8002a92:	e7d8      	b.n	8002a46 <HAL_RCC_GetHCLKFreq+0x16>
 8002a94:	58024400 	.word	0x58024400
 8002a98:	003d0900 	.word	0x003d0900
 8002a9c:	0801248c 	.word	0x0801248c
 8002aa0:	24000004 	.word	0x24000004
 8002aa4:	24000000 	.word	0x24000000
 8002aa8:	007a1200 	.word	0x007a1200
 8002aac:	03d09000 	.word	0x03d09000

08002ab0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ab0:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002ab2:	f7ff ffbd 	bl	8002a30 <HAL_RCC_GetHCLKFreq>
 8002ab6:	4b05      	ldr	r3, [pc, #20]	; (8002acc <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002ab8:	4a05      	ldr	r2, [pc, #20]	; (8002ad0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002aba:	69db      	ldr	r3, [r3, #28]
 8002abc:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002ac0:	5cd3      	ldrb	r3, [r2, r3]
 8002ac2:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002ac6:	40d8      	lsrs	r0, r3
 8002ac8:	bd08      	pop	{r3, pc}
 8002aca:	bf00      	nop
 8002acc:	58024400 	.word	0x58024400
 8002ad0:	0801248c 	.word	0x0801248c

08002ad4 <HAL_RCC_GetClockConfig>:
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ad4:	4b13      	ldr	r3, [pc, #76]	; (8002b24 <HAL_RCC_GetClockConfig+0x50>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8002ad6:	223f      	movs	r2, #63	; 0x3f
 8002ad8:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ada:	691a      	ldr	r2, [r3, #16]
 8002adc:	f002 0207 	and.w	r2, r2, #7
 8002ae0:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8002ae2:	699a      	ldr	r2, [r3, #24]
 8002ae4:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8002ae8:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8002aea:	699a      	ldr	r2, [r3, #24]
 8002aec:	f002 020f 	and.w	r2, r2, #15
 8002af0:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8002af2:	699a      	ldr	r2, [r3, #24]
 8002af4:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8002af8:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8002afa:	69da      	ldr	r2, [r3, #28]
 8002afc:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8002b00:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8002b02:	69da      	ldr	r2, [r3, #28]
 8002b04:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002b08:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8002b0a:	6a1b      	ldr	r3, [r3, #32]
{
 8002b0c:	b410      	push	{r4}
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8002b0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002b12:	4c05      	ldr	r4, [pc, #20]	; (8002b28 <HAL_RCC_GetClockConfig+0x54>)
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8002b14:	61c3      	str	r3, [r0, #28]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002b16:	6823      	ldr	r3, [r4, #0]
}
 8002b18:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002b1c:	f003 030f 	and.w	r3, r3, #15
 8002b20:	600b      	str	r3, [r1, #0]
}
 8002b22:	4770      	bx	lr
 8002b24:	58024400 	.word	0x58024400
 8002b28:	52002000 	.word	0x52002000

08002b2c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8002b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8002b2e:	4c3a      	ldr	r4, [pc, #232]	; (8002c18 <RCCEx_PLL2_Config+0xec>)
 8002b30:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002b32:	f003 0303 	and.w	r3, r3, #3
 8002b36:	2b03      	cmp	r3, #3
 8002b38:	d067      	beq.n	8002c0a <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8002b3a:	6823      	ldr	r3, [r4, #0]
 8002b3c:	4606      	mov	r6, r0
 8002b3e:	460f      	mov	r7, r1
 8002b40:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b44:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b46:	f7fe f90b 	bl	8000d60 <HAL_GetTick>
 8002b4a:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002b4c:	e004      	b.n	8002b58 <RCCEx_PLL2_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002b4e:	f7fe f907 	bl	8000d60 <HAL_GetTick>
 8002b52:	1b43      	subs	r3, r0, r5
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d856      	bhi.n	8002c06 <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002b58:	6823      	ldr	r3, [r4, #0]
 8002b5a:	011a      	lsls	r2, r3, #4
 8002b5c:	d4f7      	bmi.n	8002b4e <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8002b5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002b60:	6832      	ldr	r2, [r6, #0]
 8002b62:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002b66:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8002b6a:	62a3      	str	r3, [r4, #40]	; 0x28
 8002b6c:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8002b70:	3b01      	subs	r3, #1
 8002b72:	3a01      	subs	r2, #1
 8002b74:	025b      	lsls	r3, r3, #9
 8002b76:	0412      	lsls	r2, r2, #16
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	6872      	ldr	r2, [r6, #4]
 8002b82:	3a01      	subs	r2, #1
 8002b84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	6932      	ldr	r2, [r6, #16]
 8002b8c:	3a01      	subs	r2, #1
 8002b8e:	0612      	lsls	r2, r2, #24
 8002b90:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8002b94:	4313      	orrs	r3, r2
 8002b96:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8002b98:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002b9a:	6972      	ldr	r2, [r6, #20]
 8002b9c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8002ba4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002ba6:	69b3      	ldr	r3, [r6, #24]
 8002ba8:	f022 0220 	bic.w	r2, r2, #32
 8002bac:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8002bae:	4b1b      	ldr	r3, [pc, #108]	; (8002c1c <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8002bb0:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8002bb2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002bb4:	f022 0210 	bic.w	r2, r2, #16
 8002bb8:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8002bba:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002bbc:	69f2      	ldr	r2, [r6, #28]
 8002bbe:	400b      	ands	r3, r1
 8002bc0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002bc4:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8002bc6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002bc8:	f043 0310 	orr.w	r3, r3, #16
 8002bcc:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8002bce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8002bd0:	b1ef      	cbz	r7, 8002c0e <RCCEx_PLL2_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8002bd2:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8002bd4:	bf0c      	ite	eq
 8002bd6:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8002bda:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8002bde:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8002be0:	4c0d      	ldr	r4, [pc, #52]	; (8002c18 <RCCEx_PLL2_Config+0xec>)
 8002be2:	6823      	ldr	r3, [r4, #0]
 8002be4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002be8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bea:	f7fe f8b9 	bl	8000d60 <HAL_GetTick>
 8002bee:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8002bf0:	e004      	b.n	8002bfc <RCCEx_PLL2_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002bf2:	f7fe f8b5 	bl	8000d60 <HAL_GetTick>
 8002bf6:	1b40      	subs	r0, r0, r5
 8002bf8:	2802      	cmp	r0, #2
 8002bfa:	d804      	bhi.n	8002c06 <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8002bfc:	6823      	ldr	r3, [r4, #0]
 8002bfe:	011b      	lsls	r3, r3, #4
 8002c00:	d5f7      	bpl.n	8002bf2 <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
 8002c02:	2000      	movs	r0, #0
}
 8002c04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8002c06:	2003      	movs	r0, #3
}
 8002c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8002c0a:	2001      	movs	r0, #1
}
 8002c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8002c0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002c12:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002c14:	e7e4      	b.n	8002be0 <RCCEx_PLL2_Config+0xb4>
 8002c16:	bf00      	nop
 8002c18:	58024400 	.word	0x58024400
 8002c1c:	ffff0007 	.word	0xffff0007

08002c20 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8002c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8002c22:	4c3a      	ldr	r4, [pc, #232]	; (8002d0c <RCCEx_PLL3_Config+0xec>)
 8002c24:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002c26:	f003 0303 	and.w	r3, r3, #3
 8002c2a:	2b03      	cmp	r3, #3
 8002c2c:	d067      	beq.n	8002cfe <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8002c2e:	6823      	ldr	r3, [r4, #0]
 8002c30:	4606      	mov	r6, r0
 8002c32:	460f      	mov	r7, r1
 8002c34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c38:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c3a:	f7fe f891 	bl	8000d60 <HAL_GetTick>
 8002c3e:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8002c40:	e004      	b.n	8002c4c <RCCEx_PLL3_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8002c42:	f7fe f88d 	bl	8000d60 <HAL_GetTick>
 8002c46:	1b43      	subs	r3, r0, r5
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d856      	bhi.n	8002cfa <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8002c4c:	6823      	ldr	r3, [r4, #0]
 8002c4e:	009a      	lsls	r2, r3, #2
 8002c50:	d4f7      	bmi.n	8002c42 <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8002c52:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002c54:	6832      	ldr	r2, [r6, #0]
 8002c56:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8002c5a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8002c5e:	62a3      	str	r3, [r4, #40]	; 0x28
 8002c60:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8002c64:	3b01      	subs	r3, #1
 8002c66:	3a01      	subs	r2, #1
 8002c68:	025b      	lsls	r3, r3, #9
 8002c6a:	0412      	lsls	r2, r2, #16
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8002c72:	4313      	orrs	r3, r2
 8002c74:	6872      	ldr	r2, [r6, #4]
 8002c76:	3a01      	subs	r2, #1
 8002c78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	6932      	ldr	r2, [r6, #16]
 8002c80:	3a01      	subs	r2, #1
 8002c82:	0612      	lsls	r2, r2, #24
 8002c84:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8002c8c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002c8e:	6972      	ldr	r2, [r6, #20]
 8002c90:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002c94:	4313      	orrs	r3, r2
 8002c96:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8002c98:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002c9a:	69b3      	ldr	r3, [r6, #24]
 8002c9c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ca0:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8002ca2:	4b1b      	ldr	r3, [pc, #108]	; (8002d10 <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8002ca4:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8002ca6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002ca8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cac:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8002cae:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002cb0:	69f2      	ldr	r2, [r6, #28]
 8002cb2:	400b      	ands	r3, r1
 8002cb4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002cb8:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8002cba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cc0:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8002cc2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8002cc4:	b1ef      	cbz	r7, 8002d02 <RCCEx_PLL3_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8002cc6:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8002cc8:	bf0c      	ite	eq
 8002cca:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8002cce:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8002cd2:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8002cd4:	4c0d      	ldr	r4, [pc, #52]	; (8002d0c <RCCEx_PLL3_Config+0xec>)
 8002cd6:	6823      	ldr	r3, [r4, #0]
 8002cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cdc:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cde:	f7fe f83f 	bl	8000d60 <HAL_GetTick>
 8002ce2:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8002ce4:	e004      	b.n	8002cf0 <RCCEx_PLL3_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8002ce6:	f7fe f83b 	bl	8000d60 <HAL_GetTick>
 8002cea:	1b40      	subs	r0, r0, r5
 8002cec:	2802      	cmp	r0, #2
 8002cee:	d804      	bhi.n	8002cfa <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8002cf0:	6823      	ldr	r3, [r4, #0]
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	d5f7      	bpl.n	8002ce6 <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
 8002cf6:	2000      	movs	r0, #0
}
 8002cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8002cfa:	2003      	movs	r0, #3
}
 8002cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8002cfe:	2001      	movs	r0, #1
}
 8002d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8002d02:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d06:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002d08:	e7e4      	b.n	8002cd4 <RCCEx_PLL3_Config+0xb4>
 8002d0a:	bf00      	nop
 8002d0c:	58024400 	.word	0x58024400
 8002d10:	ffff0007 	.word	0xffff0007

08002d14 <HAL_RCCEx_PeriphCLKConfig>:
{
 8002d14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d18:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 8002d1c:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d1e:	0118      	lsls	r0, r3, #4
 8002d20:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
 8002d24:	d51e      	bpl.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x50>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8002d26:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8002d28:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8002d2c:	f000 84f6 	beq.w	800371c <HAL_RCCEx_PeriphCLKConfig+0xa08>
 8002d30:	d825      	bhi.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002d32:	2900      	cmp	r1, #0
 8002d34:	f000 8422 	beq.w	800357c <HAL_RCCEx_PeriphCLKConfig+0x868>
 8002d38:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8002d3c:	d122      	bne.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x70>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002d3e:	2102      	movs	r1, #2
 8002d40:	f104 0008 	add.w	r0, r4, #8
 8002d44:	f7ff fef2 	bl	8002b2c <RCCEx_PLL2_Config>
 8002d48:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 8002d4a:	2e00      	cmp	r6, #0
 8002d4c:	f040 8527 	bne.w	800379e <HAL_RCCEx_PeriphCLKConfig+0xa8a>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002d50:	6e61      	ldr	r1, [r4, #100]	; 0x64
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002d52:	e9d4 3200 	ldrd	r3, r2, [r4]
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002d56:	4d9e      	ldr	r5, [pc, #632]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002d58:	2600      	movs	r6, #0
 8002d5a:	6d28      	ldr	r0, [r5, #80]	; 0x50
 8002d5c:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
 8002d60:	4301      	orrs	r1, r0
 8002d62:	6529      	str	r1, [r5, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002d64:	05d9      	lsls	r1, r3, #23
 8002d66:	d511      	bpl.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x78>
    switch (PeriphClkInit->Sai1ClockSelection)
 8002d68:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002d6a:	2904      	cmp	r1, #4
 8002d6c:	f200 857a 	bhi.w	8003864 <HAL_RCCEx_PeriphCLKConfig+0xb50>
 8002d70:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002d74:	04e504de 	.word	0x04e504de
 8002d78:	02f604ee 	.word	0x02f604ee
 8002d7c:	02f6      	.short	0x02f6
    switch (PeriphClkInit->SpdifrxClockSelection)
 8002d7e:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 8002d82:	d0e8      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x42>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002d84:	05d9      	lsls	r1, r3, #23
    switch (PeriphClkInit->SpdifrxClockSelection)
 8002d86:	f04f 0601 	mov.w	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002d8a:	d4ed      	bmi.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x54>
    switch (PeriphClkInit->Sai1ClockSelection)
 8002d8c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002d8e:	055f      	lsls	r7, r3, #21
 8002d90:	d521      	bpl.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    switch (PeriphClkInit->Sai4AClockSelection)
 8002d92:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8002d96:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8002d9a:	f000 84f6 	beq.w	800378a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8002d9e:	f200 80d6 	bhi.w	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x23a>
 8002da2:	2900      	cmp	r1, #0
 8002da4:	f000 83fd 	beq.w	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x88e>
 8002da8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8002dac:	f040 80d9 	bne.w	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x24e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002db0:	2100      	movs	r1, #0
 8002db2:	f104 0008 	add.w	r0, r4, #8
 8002db6:	f7ff feb9 	bl	8002b2c <RCCEx_PLL2_Config>
 8002dba:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002dbc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8002dc0:	2d00      	cmp	r5, #0
 8002dc2:	f040 83c3 	bne.w	800354c <HAL_RCCEx_PeriphCLKConfig+0x838>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002dc6:	4f82      	ldr	r7, [pc, #520]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002dc8:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 8002dcc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002dce:	f421 0160 	bic.w	r1, r1, #14680064	; 0xe00000
 8002dd2:	4301      	orrs	r1, r0
 8002dd4:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002dd6:	0518      	lsls	r0, r3, #20
 8002dd8:	d521      	bpl.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x10a>
    switch (PeriphClkInit->Sai4BClockSelection)
 8002dda:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8002dde:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8002de2:	f000 84be 	beq.w	8003762 <HAL_RCCEx_PeriphCLKConfig+0xa4e>
 8002de6:	f200 80bf 	bhi.w	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8002dea:	2900      	cmp	r1, #0
 8002dec:	f000 83cd 	beq.w	800358a <HAL_RCCEx_PeriphCLKConfig+0x876>
 8002df0:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8002df4:	f040 80c2 	bne.w	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002df8:	2100      	movs	r1, #0
 8002dfa:	f104 0008 	add.w	r0, r4, #8
 8002dfe:	f7ff fe95 	bl	8002b2c <RCCEx_PLL2_Config>
 8002e02:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002e04:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8002e08:	2d00      	cmp	r5, #0
 8002e0a:	f040 83a3 	bne.w	8003554 <HAL_RCCEx_PeriphCLKConfig+0x840>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002e0e:	4f70      	ldr	r7, [pc, #448]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002e10:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 8002e14:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002e16:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 8002e1a:	4301      	orrs	r1, r0
 8002e1c:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002e1e:	0199      	lsls	r1, r3, #6
 8002e20:	d518      	bpl.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x140>
    switch (PeriphClkInit->OspiClockSelection)
 8002e22:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8002e24:	2920      	cmp	r1, #32
 8002e26:	f000 8447 	beq.w	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 8002e2a:	f200 80aa 	bhi.w	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002e2e:	b139      	cbz	r1, 8002e40 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8002e30:	2910      	cmp	r1, #16
 8002e32:	f040 80a9 	bne.w	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x274>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e36:	4866      	ldr	r0, [pc, #408]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002e38:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002e3a:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8002e3e:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 8002e40:	2d00      	cmp	r5, #0
 8002e42:	f040 83b6 	bne.w	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002e46:	4f62      	ldr	r7, [pc, #392]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002e48:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002e4a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002e4c:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 8002e50:	4301      	orrs	r1, r0
 8002e52:	64f9      	str	r1, [r7, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002e54:	04df      	lsls	r7, r3, #19
 8002e56:	d51f      	bpl.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x184>
    switch (PeriphClkInit->Spi123ClockSelection)
 8002e58:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002e5a:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8002e5e:	f000 848a 	beq.w	8003776 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8002e62:	f200 8094 	bhi.w	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8002e66:	2900      	cmp	r1, #0
 8002e68:	f000 8395 	beq.w	8003596 <HAL_RCCEx_PeriphCLKConfig+0x882>
 8002e6c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8002e70:	f040 8095 	bne.w	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x28a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e74:	2100      	movs	r1, #0
 8002e76:	f104 0008 	add.w	r0, r4, #8
 8002e7a:	f7ff fe57 	bl	8002b2c <RCCEx_PLL2_Config>
 8002e7e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002e80:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8002e84:	2d00      	cmp	r5, #0
 8002e86:	f040 8363 	bne.w	8003550 <HAL_RCCEx_PeriphCLKConfig+0x83c>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002e8a:	4f51      	ldr	r7, [pc, #324]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002e8c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002e8e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002e90:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8002e94:	4301      	orrs	r1, r0
 8002e96:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002e98:	0498      	lsls	r0, r3, #18
 8002e9a:	d51c      	bpl.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    switch (PeriphClkInit->Spi45ClockSelection)
 8002e9c:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8002e9e:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8002ea2:	f000 83f3 	beq.w	800368c <HAL_RCCEx_PeriphCLKConfig+0x978>
 8002ea6:	d87d      	bhi.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x290>
 8002ea8:	b159      	cbz	r1, 8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8002eaa:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8002eae:	f040 8081 	bne.w	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002eb2:	2101      	movs	r1, #1
 8002eb4:	f104 0008 	add.w	r0, r4, #8
 8002eb8:	f7ff fe38 	bl	8002b2c <RCCEx_PLL2_Config>
 8002ebc:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002ebe:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8002ec2:	2d00      	cmp	r5, #0
 8002ec4:	f040 8385 	bne.w	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x8be>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002ec8:	4f41      	ldr	r7, [pc, #260]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002eca:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002ecc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002ece:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 8002ed2:	4301      	orrs	r1, r0
 8002ed4:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002ed6:	0459      	lsls	r1, r3, #17
 8002ed8:	d51d      	bpl.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x202>
    switch (PeriphClkInit->Spi6ClockSelection)
 8002eda:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8002ede:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8002ee2:	f000 83de 	beq.w	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x98e>
 8002ee6:	d868      	bhi.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002ee8:	b151      	cbz	r1, 8002f00 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8002eea:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8002eee:	d16c      	bne.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002ef0:	2101      	movs	r1, #1
 8002ef2:	f104 0008 	add.w	r0, r4, #8
 8002ef6:	f7ff fe19 	bl	8002b2c <RCCEx_PLL2_Config>
 8002efa:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002efc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8002f00:	2d00      	cmp	r5, #0
 8002f02:	f040 8364 	bne.w	80035ce <HAL_RCCEx_PeriphCLKConfig+0x8ba>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002f06:	4f32      	ldr	r7, [pc, #200]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002f08:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8002f0c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002f0e:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
 8002f12:	4301      	orrs	r1, r0
 8002f14:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002f16:	041f      	lsls	r7, r3, #16
 8002f18:	d50d      	bpl.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x222>
    switch (PeriphClkInit->FdcanClockSelection)
 8002f1a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8002f1c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8002f20:	f000 8386 	beq.w	8003630 <HAL_RCCEx_PeriphCLKConfig+0x91c>
 8002f24:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8002f28:	f000 823c 	beq.w	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x690>
 8002f2c:	2900      	cmp	r1, #0
 8002f2e:	f000 8241 	beq.w	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
 8002f32:	2601      	movs	r6, #1
 8002f34:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002f36:	01d8      	lsls	r0, r3, #7
 8002f38:	d55b      	bpl.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    switch (PeriphClkInit->FmcClockSelection)
 8002f3a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002f3c:	2903      	cmp	r1, #3
 8002f3e:	f200 8494 	bhi.w	800386a <HAL_RCCEx_PeriphCLKConfig+0xb56>
 8002f42:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002f46:	004c      	.short	0x004c
 8002f48:	037d0047 	.word	0x037d0047
 8002f4c:	004c      	.short	0x004c
    switch (PeriphClkInit->Sai4AClockSelection)
 8002f4e:	f421 1000 	bic.w	r0, r1, #2097152	; 0x200000
 8002f52:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8002f56:	f43f af33 	beq.w	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8002f5a:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
 8002f5e:	f43f af2f 	beq.w	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8002f62:	2601      	movs	r6, #1
 8002f64:	4635      	mov	r5, r6
 8002f66:	e736      	b.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    switch (PeriphClkInit->Sai4BClockSelection)
 8002f68:	f021 7080 	bic.w	r0, r1, #16777216	; 0x1000000
 8002f6c:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8002f70:	f43f af4a 	beq.w	8002e08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002f74:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8002f78:	f43f af46 	beq.w	8002e08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002f7c:	2601      	movs	r6, #1
 8002f7e:	4635      	mov	r5, r6
 8002f80:	e74d      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x10a>
    switch (PeriphClkInit->OspiClockSelection)
 8002f82:	2930      	cmp	r1, #48	; 0x30
 8002f84:	f43f af5c 	beq.w	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8002f88:	2601      	movs	r6, #1
 8002f8a:	4635      	mov	r5, r6
 8002f8c:	e762      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x140>
    switch (PeriphClkInit->Spi123ClockSelection)
 8002f8e:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 8002f92:	f43f af77 	beq.w	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x170>
 8002f96:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8002f9a:	f43f af73 	beq.w	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x170>
 8002f9e:	2601      	movs	r6, #1
 8002fa0:	4635      	mov	r5, r6
 8002fa2:	e779      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x184>
    switch (PeriphClkInit->Spi45ClockSelection)
 8002fa4:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
 8002fa8:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 8002fac:	d089      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8002fae:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 8002fb2:	d086      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8002fb4:	2601      	movs	r6, #1
 8002fb6:	4635      	mov	r5, r6
 8002fb8:	e78d      	b.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    switch (PeriphClkInit->Spi6ClockSelection)
 8002fba:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 8002fbe:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002fc2:	d09d      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8002fc4:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 8002fc8:	d09a      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8002fca:	2601      	movs	r6, #1
 8002fcc:	4635      	mov	r5, r6
 8002fce:	e7a2      	b.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8002fd0:	58024400 	.word	0x58024400
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fd4:	4839      	ldr	r0, [pc, #228]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8002fd6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002fd8:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8002fdc:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 8002fde:	2d00      	cmp	r5, #0
 8002fe0:	f040 82f9 	bne.w	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002fe4:	4f35      	ldr	r7, [pc, #212]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8002fe6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002fe8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002fea:	f021 0103 	bic.w	r1, r1, #3
 8002fee:	4301      	orrs	r1, r0
 8002ff0:	64f9      	str	r1, [r7, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ff2:	0259      	lsls	r1, r3, #9
 8002ff4:	f100 8210 	bmi.w	8003418 <HAL_RCCEx_PeriphCLKConfig+0x704>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002ff8:	07d9      	lsls	r1, r3, #31
 8002ffa:	d52f      	bpl.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x348>
    switch (PeriphClkInit->Usart16ClockSelection)
 8002ffc:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8002ffe:	2928      	cmp	r1, #40	; 0x28
 8003000:	d82a      	bhi.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003002:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003006:	01fe      	.short	0x01fe
 8003008:	00290029 	.word	0x00290029
 800300c:	00290029 	.word	0x00290029
 8003010:	00290029 	.word	0x00290029
 8003014:	01f60029 	.word	0x01f60029
 8003018:	00290029 	.word	0x00290029
 800301c:	00290029 	.word	0x00290029
 8003020:	00290029 	.word	0x00290029
 8003024:	03e80029 	.word	0x03e80029
 8003028:	00290029 	.word	0x00290029
 800302c:	00290029 	.word	0x00290029
 8003030:	00290029 	.word	0x00290029
 8003034:	01fe0029 	.word	0x01fe0029
 8003038:	00290029 	.word	0x00290029
 800303c:	00290029 	.word	0x00290029
 8003040:	00290029 	.word	0x00290029
 8003044:	01fe0029 	.word	0x01fe0029
 8003048:	00290029 	.word	0x00290029
 800304c:	00290029 	.word	0x00290029
 8003050:	00290029 	.word	0x00290029
 8003054:	01fe0029 	.word	0x01fe0029
 8003058:	2601      	movs	r6, #1
 800305a:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800305c:	079f      	lsls	r7, r3, #30
 800305e:	d51d      	bpl.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x388>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003060:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8003062:	2905      	cmp	r1, #5
 8003064:	f200 83fb 	bhi.w	800385e <HAL_RCCEx_PeriphCLKConfig+0xb4a>
 8003068:	e8df f011 	tbh	[pc, r1, lsl #1]
 800306c:	0006000e 	.word	0x0006000e
 8003070:	000e03a9 	.word	0x000e03a9
 8003074:	000e000e 	.word	0x000e000e
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003078:	2101      	movs	r1, #1
 800307a:	f104 0008 	add.w	r0, r4, #8
 800307e:	f7ff fd55 	bl	8002b2c <RCCEx_PLL2_Config>
 8003082:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003084:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003088:	2d00      	cmp	r5, #0
 800308a:	f040 829c 	bne.w	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x8b2>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800308e:	4f0b      	ldr	r7, [pc, #44]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8003090:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8003092:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003094:	f021 0107 	bic.w	r1, r1, #7
 8003098:	4301      	orrs	r1, r0
 800309a:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800309c:	0758      	lsls	r0, r3, #29
 800309e:	d522      	bpl.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80030a0:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 80030a4:	2905      	cmp	r1, #5
 80030a6:	f200 83d7 	bhi.w	8003858 <HAL_RCCEx_PeriphCLKConfig+0xb44>
 80030aa:	e8df f011 	tbh	[pc, r1, lsl #1]
 80030ae:	0011      	.short	0x0011
 80030b0:	037c0009 	.word	0x037c0009
 80030b4:	00110011 	.word	0x00110011
 80030b8:	0011      	.short	0x0011
 80030ba:	bf00      	nop
 80030bc:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80030c0:	2101      	movs	r1, #1
 80030c2:	f104 0008 	add.w	r0, r4, #8
 80030c6:	f7ff fd31 	bl	8002b2c <RCCEx_PLL2_Config>
 80030ca:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80030cc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80030d0:	2d00      	cmp	r5, #0
 80030d2:	f040 8276 	bne.w	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x8ae>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030d6:	4fa8      	ldr	r7, [pc, #672]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x664>)
 80030d8:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 80030dc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80030de:	f021 0107 	bic.w	r1, r1, #7
 80030e2:	4301      	orrs	r1, r0
 80030e4:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80030e6:	0699      	lsls	r1, r3, #26
 80030e8:	d51f      	bpl.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x416>
    switch (PeriphClkInit->Lptim1ClockSelection)
 80030ea:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80030ee:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80030f2:	f000 82ee 	beq.w	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80030f6:	f200 8100 	bhi.w	80032fa <HAL_RCCEx_PeriphCLKConfig+0x5e6>
 80030fa:	b159      	cbz	r1, 8003114 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80030fc:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8003100:	f040 8105 	bne.w	800330e <HAL_RCCEx_PeriphCLKConfig+0x5fa>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003104:	2100      	movs	r1, #0
 8003106:	f104 0008 	add.w	r0, r4, #8
 800310a:	f7ff fd0f 	bl	8002b2c <RCCEx_PLL2_Config>
 800310e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003110:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003114:	2d00      	cmp	r5, #0
 8003116:	f040 8250 	bne.w	80035ba <HAL_RCCEx_PeriphCLKConfig+0x8a6>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800311a:	4f97      	ldr	r7, [pc, #604]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x664>)
 800311c:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8003120:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003122:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
 8003126:	4301      	orrs	r1, r0
 8003128:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800312a:	065f      	lsls	r7, r3, #25
 800312c:	d51f      	bpl.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800312e:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8003132:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8003136:	f000 829e 	beq.w	8003676 <HAL_RCCEx_PeriphCLKConfig+0x962>
 800313a:	f200 80eb 	bhi.w	8003314 <HAL_RCCEx_PeriphCLKConfig+0x600>
 800313e:	b159      	cbz	r1, 8003158 <HAL_RCCEx_PeriphCLKConfig+0x444>
 8003140:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003144:	f040 80f0 	bne.w	8003328 <HAL_RCCEx_PeriphCLKConfig+0x614>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003148:	2100      	movs	r1, #0
 800314a:	f104 0008 	add.w	r0, r4, #8
 800314e:	f7ff fced 	bl	8002b2c <RCCEx_PLL2_Config>
 8003152:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003154:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003158:	2d00      	cmp	r5, #0
 800315a:	f040 8236 	bne.w	80035ca <HAL_RCCEx_PeriphCLKConfig+0x8b6>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800315e:	4f86      	ldr	r7, [pc, #536]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x664>)
 8003160:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 8003164:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003166:	f421 51e0 	bic.w	r1, r1, #7168	; 0x1c00
 800316a:	4301      	orrs	r1, r0
 800316c:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800316e:	0618      	lsls	r0, r3, #24
 8003170:	d51f      	bpl.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x49e>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003172:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8003176:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800317a:	f000 8271 	beq.w	8003660 <HAL_RCCEx_PeriphCLKConfig+0x94c>
 800317e:	f200 80d6 	bhi.w	800332e <HAL_RCCEx_PeriphCLKConfig+0x61a>
 8003182:	b159      	cbz	r1, 800319c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8003184:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8003188:	f040 80db 	bne.w	8003342 <HAL_RCCEx_PeriphCLKConfig+0x62e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800318c:	2100      	movs	r1, #0
 800318e:	f104 0008 	add.w	r0, r4, #8
 8003192:	f7ff fccb 	bl	8002b2c <RCCEx_PLL2_Config>
 8003196:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8003198:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800319c:	2d00      	cmp	r5, #0
 800319e:	f040 820a 	bne.w	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80031a2:	4f75      	ldr	r7, [pc, #468]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x664>)
 80031a4:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 80031a8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80031aa:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 80031ae:	4301      	orrs	r1, r0
 80031b0:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80031b2:	0719      	lsls	r1, r3, #28
 80031b4:	d50b      	bpl.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x4ba>
    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80031b6:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80031ba:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80031be:	f000 82a1 	beq.w	8003704 <HAL_RCCEx_PeriphCLKConfig+0x9f0>
    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80031c2:	4f6d      	ldr	r7, [pc, #436]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x664>)
 80031c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80031c6:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80031ca:	4301      	orrs	r1, r0
 80031cc:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80031ce:	06df      	lsls	r7, r3, #27
 80031d0:	d50b      	bpl.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x4d6>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80031d2:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 80031d6:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80031da:	f000 8286 	beq.w	80036ea <HAL_RCCEx_PeriphCLKConfig+0x9d6>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80031de:	4f66      	ldr	r7, [pc, #408]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x664>)
 80031e0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80031e2:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 80031e6:	4301      	orrs	r1, r0
 80031e8:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031ea:	0318      	lsls	r0, r3, #12
 80031ec:	d50e      	bpl.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    switch (PeriphClkInit->AdcClockSelection)
 80031ee:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80031f2:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80031f6:	f000 80c1 	beq.w	800337c <HAL_RCCEx_PeriphCLKConfig+0x668>
 80031fa:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80031fe:	f000 80c5 	beq.w	800338c <HAL_RCCEx_PeriphCLKConfig+0x678>
 8003202:	2900      	cmp	r1, #0
 8003204:	f000 8200 	beq.w	8003608 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8003208:	2601      	movs	r6, #1
 800320a:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800320c:	0359      	lsls	r1, r3, #13
 800320e:	d50f      	bpl.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    switch (PeriphClkInit->UsbClockSelection)
 8003210:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8003214:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8003218:	f000 80d7 	beq.w	80033ca <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 800321c:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 8003220:	f000 80db 	beq.w	80033da <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 8003224:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8003228:	f000 81f8 	beq.w	800361c <HAL_RCCEx_PeriphCLKConfig+0x908>
 800322c:	2601      	movs	r6, #1
 800322e:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003230:	03df      	lsls	r7, r3, #15
 8003232:	d509      	bpl.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x534>
    switch (PeriphClkInit->SdmmcClockSelection)
 8003234:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003236:	2900      	cmp	r1, #0
 8003238:	f000 81dd 	beq.w	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800323c:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8003240:	f000 818a 	beq.w	8003558 <HAL_RCCEx_PeriphCLKConfig+0x844>
 8003244:	2601      	movs	r6, #1
 8003246:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003248:	0098      	lsls	r0, r3, #2
 800324a:	f100 8165 	bmi.w	8003518 <HAL_RCCEx_PeriphCLKConfig+0x804>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800324e:	0399      	lsls	r1, r3, #14
 8003250:	d50b      	bpl.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x556>
    switch (PeriphClkInit->RngClockSelection)
 8003252:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8003254:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8003258:	f000 81c5 	beq.w	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x8d2>
 800325c:	d974      	bls.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x634>
 800325e:	f421 7080 	bic.w	r0, r1, #256	; 0x100
 8003262:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003266:	d071      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x638>
 8003268:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800326a:	02df      	lsls	r7, r3, #11
 800326c:	d506      	bpl.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x568>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800326e:	4842      	ldr	r0, [pc, #264]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x664>)
 8003270:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8003272:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8003274:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003278:	4329      	orrs	r1, r5
 800327a:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800327c:	029d      	lsls	r5, r3, #10
 800327e:	d506      	bpl.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x57a>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003280:	483d      	ldr	r0, [pc, #244]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x664>)
 8003282:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 8003284:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8003286:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 800328a:	4329      	orrs	r1, r5
 800328c:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800328e:	0058      	lsls	r0, r3, #1
 8003290:	d509      	bpl.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003292:	4939      	ldr	r1, [pc, #228]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x664>)
 8003294:	6908      	ldr	r0, [r1, #16]
 8003296:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 800329a:	6108      	str	r0, [r1, #16]
 800329c:	6908      	ldr	r0, [r1, #16]
 800329e:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 80032a2:	4328      	orrs	r0, r5
 80032a4:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	da06      	bge.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80032aa:	4833      	ldr	r0, [pc, #204]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x664>)
 80032ac:	6d65      	ldr	r5, [r4, #84]	; 0x54
 80032ae:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80032b0:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 80032b4:	4329      	orrs	r1, r5
 80032b6:	64c1      	str	r1, [r0, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80032b8:	0219      	lsls	r1, r3, #8
 80032ba:	d507      	bpl.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80032bc:	492e      	ldr	r1, [pc, #184]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x664>)
 80032be:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80032c2:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 80032c4:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80032c8:	4303      	orrs	r3, r0
 80032ca:	654b      	str	r3, [r1, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80032cc:	07d3      	lsls	r3, r2, #31
 80032ce:	f100 80fe 	bmi.w	80034ce <HAL_RCCEx_PeriphCLKConfig+0x7ba>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80032d2:	0797      	lsls	r7, r2, #30
 80032d4:	f100 8108 	bmi.w	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80032d8:	0755      	lsls	r5, r2, #29
 80032da:	f100 8112 	bmi.w	8003502 <HAL_RCCEx_PeriphCLKConfig+0x7ee>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80032de:	0710      	lsls	r0, r2, #28
 80032e0:	f100 80ea 	bmi.w	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x7a4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80032e4:	06d1      	lsls	r1, r2, #27
 80032e6:	f100 80d9 	bmi.w	800349c <HAL_RCCEx_PeriphCLKConfig+0x788>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80032ea:	0692      	lsls	r2, r2, #26
 80032ec:	f100 8120 	bmi.w	8003530 <HAL_RCCEx_PeriphCLKConfig+0x81c>
    return HAL_OK;
 80032f0:	1e30      	subs	r0, r6, #0
 80032f2:	bf18      	it	ne
 80032f4:	2001      	movne	r0, #1
}
 80032f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
 80032fa:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 80032fe:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003302:	f43f af07 	beq.w	8003114 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003306:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 800330a:	f43f af03 	beq.w	8003114 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800330e:	2601      	movs	r6, #1
 8003310:	4635      	mov	r5, r6
 8003312:	e70a      	b.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x416>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003314:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
 8003318:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800331c:	f43f af1c 	beq.w	8003158 <HAL_RCCEx_PeriphCLKConfig+0x444>
 8003320:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
 8003324:	f43f af18 	beq.w	8003158 <HAL_RCCEx_PeriphCLKConfig+0x444>
 8003328:	2601      	movs	r6, #1
 800332a:	4635      	mov	r5, r6
 800332c:	e71f      	b.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800332e:	f421 5000 	bic.w	r0, r1, #8192	; 0x2000
 8003332:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003336:	f43f af31 	beq.w	800319c <HAL_RCCEx_PeriphCLKConfig+0x488>
 800333a:	f5b1 4fc0 	cmp.w	r1, #24576	; 0x6000
 800333e:	f43f af2d 	beq.w	800319c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8003342:	2601      	movs	r6, #1
 8003344:	4635      	mov	r5, r6
 8003346:	e734      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x49e>
    switch (PeriphClkInit->RngClockSelection)
 8003348:	2900      	cmp	r1, #0
 800334a:	d18d      	bne.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x554>
    if (ret == HAL_OK)
 800334c:	2d00      	cmp	r5, #0
 800334e:	f040 8148 	bne.w	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x8ce>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003352:	4d09      	ldr	r5, [pc, #36]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x664>)
 8003354:	6d68      	ldr	r0, [r5, #84]	; 0x54
 8003356:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 800335a:	4301      	orrs	r1, r0
 800335c:	6569      	str	r1, [r5, #84]	; 0x54
 800335e:	e784      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x556>
    switch (PeriphClkInit->Sai1ClockSelection)
 8003360:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 8003362:	2d00      	cmp	r5, #0
 8003364:	f040 80f0 	bne.w	8003548 <HAL_RCCEx_PeriphCLKConfig+0x834>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003368:	4f03      	ldr	r7, [pc, #12]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x664>)
 800336a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800336c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800336e:	f021 0107 	bic.w	r1, r1, #7
 8003372:	4301      	orrs	r1, r0
 8003374:	6539      	str	r1, [r7, #80]	; 0x50
 8003376:	e50a      	b.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003378:	58024400 	.word	0x58024400
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800337c:	2102      	movs	r1, #2
 800337e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8003382:	f7ff fc4d 	bl	8002c20 <RCCEx_PLL3_Config>
 8003386:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003388:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800338c:	2d00      	cmp	r5, #0
 800338e:	f040 810e 	bne.w	80035ae <HAL_RCCEx_PeriphCLKConfig+0x89a>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003392:	4fb1      	ldr	r7, [pc, #708]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 8003394:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 8003398:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800339a:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 800339e:	4301      	orrs	r1, r0
 80033a0:	65b9      	str	r1, [r7, #88]	; 0x58
 80033a2:	e733      	b.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80033a4:	2101      	movs	r1, #1
 80033a6:	f104 0008 	add.w	r0, r4, #8
 80033aa:	f7ff fbbf 	bl	8002b2c <RCCEx_PLL2_Config>
 80033ae:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80033b0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80033b4:	2d00      	cmp	r5, #0
 80033b6:	f040 8112 	bne.w	80035de <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80033ba:	4fa7      	ldr	r7, [pc, #668]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 80033bc:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80033be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80033c0:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 80033c4:	4301      	orrs	r1, r0
 80033c6:	6539      	str	r1, [r7, #80]	; 0x50
 80033c8:	e5b5      	b.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x222>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80033ca:	2101      	movs	r1, #1
 80033cc:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80033d0:	f7ff fc26 	bl	8002c20 <RCCEx_PLL3_Config>
 80033d4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80033d6:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80033da:	2d00      	cmp	r5, #0
 80033dc:	f040 80fd 	bne.w	80035da <HAL_RCCEx_PeriphCLKConfig+0x8c6>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033e0:	4f9d      	ldr	r7, [pc, #628]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 80033e2:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 80033e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80033e8:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 80033ec:	4301      	orrs	r1, r0
 80033ee:	6579      	str	r1, [r7, #84]	; 0x54
 80033f0:	e71e      	b.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x51c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80033f2:	2101      	movs	r1, #1
 80033f4:	f104 0008 	add.w	r0, r4, #8
 80033f8:	f7ff fb98 	bl	8002b2c <RCCEx_PLL2_Config>
 80033fc:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80033fe:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003402:	2d00      	cmp	r5, #0
 8003404:	f040 80db 	bne.w	80035be <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003408:	4f93      	ldr	r7, [pc, #588]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 800340a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800340c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800340e:	f021 0138 	bic.w	r1, r1, #56	; 0x38
 8003412:	4301      	orrs	r1, r0
 8003414:	6579      	str	r1, [r7, #84]	; 0x54
 8003416:	e621      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x348>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003418:	4f90      	ldr	r7, [pc, #576]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x948>)
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003420:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8003422:	f7fd fc9d 	bl	8000d60 <HAL_GetTick>
 8003426:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003428:	e006      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x724>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800342a:	f7fd fc99 	bl	8000d60 <HAL_GetTick>
 800342e:	eba0 0008 	sub.w	r0, r0, r8
 8003432:	2864      	cmp	r0, #100	; 0x64
 8003434:	f200 81db 	bhi.w	80037ee <HAL_RCCEx_PeriphCLKConfig+0xada>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	05db      	lsls	r3, r3, #23
 800343c:	d5f5      	bpl.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x716>
    if (ret == HAL_OK)
 800343e:	2d00      	cmp	r5, #0
 8003440:	f040 8205 	bne.w	800384e <HAL_RCCEx_PeriphCLKConfig+0xb3a>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003444:	4a84      	ldr	r2, [pc, #528]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 8003446:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800344a:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800344c:	4059      	eors	r1, r3
 800344e:	f411 7f40 	tst.w	r1, #768	; 0x300
 8003452:	d00b      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x758>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003454:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8003456:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003458:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800345c:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8003460:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003462:	6f10      	ldr	r0, [r2, #112]	; 0x70
 8003464:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8003468:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 800346a:	6711      	str	r1, [r2, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800346c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003470:	f000 81cf 	beq.w	8003812 <HAL_RCCEx_PeriphCLKConfig+0xafe>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003474:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003478:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800347c:	f000 81dd 	beq.w	800383a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003480:	4975      	ldr	r1, [pc, #468]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 8003482:	690a      	ldr	r2, [r1, #16]
 8003484:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8003488:	610a      	str	r2, [r1, #16]
 800348a:	4873      	ldr	r0, [pc, #460]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 800348c:	f3c3 010b 	ubfx	r1, r3, #0, #12
 8003490:	6f07      	ldr	r7, [r0, #112]	; 0x70
 8003492:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003494:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003498:	6701      	str	r1, [r0, #112]	; 0x70
 800349a:	e5ad      	b.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800349c:	f104 0528 	add.w	r5, r4, #40	; 0x28
 80034a0:	2101      	movs	r1, #1
 80034a2:	4628      	mov	r0, r5
 80034a4:	f7ff fbbc 	bl	8002c20 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 80034a8:	2800      	cmp	r0, #0
 80034aa:	f000 80bf 	beq.w	800362c <HAL_RCCEx_PeriphCLKConfig+0x918>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80034ae:	6863      	ldr	r3, [r4, #4]
 80034b0:	069b      	lsls	r3, r3, #26
 80034b2:	d546      	bpl.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 80034b4:	4606      	mov	r6, r0
 80034b6:	e03d      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x820>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034b8:	2100      	movs	r1, #0
 80034ba:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80034be:	f7ff fbaf 	bl	8002c20 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80034c2:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80034c4:	2800      	cmp	r0, #0
 80034c6:	f43f af0d 	beq.w	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80034ca:	4606      	mov	r6, r0
 80034cc:	e70a      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034ce:	2100      	movs	r1, #0
 80034d0:	f104 0008 	add.w	r0, r4, #8
 80034d4:	f7ff fb2a 	bl	8002b2c <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80034d8:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80034da:	2800      	cmp	r0, #0
 80034dc:	f43f aef9 	beq.w	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80034e0:	0797      	lsls	r7, r2, #30
 80034e2:	4606      	mov	r6, r0
 80034e4:	f57f aef8 	bpl.w	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80034e8:	2101      	movs	r1, #1
 80034ea:	f104 0008 	add.w	r0, r4, #8
 80034ee:	f7ff fb1d 	bl	8002b2c <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80034f2:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80034f4:	2800      	cmp	r0, #0
 80034f6:	f43f aeef 	beq.w	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80034fa:	0755      	lsls	r5, r2, #29
 80034fc:	4606      	mov	r6, r0
 80034fe:	f57f aeee 	bpl.w	80032de <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003502:	2102      	movs	r1, #2
 8003504:	f104 0008 	add.w	r0, r4, #8
 8003508:	f7ff fb10 	bl	8002b2c <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800350c:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800350e:	2800      	cmp	r0, #0
 8003510:	f43f aee5 	beq.w	80032de <HAL_RCCEx_PeriphCLKConfig+0x5ca>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003514:	4606      	mov	r6, r0
 8003516:	e6e2      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003518:	2102      	movs	r1, #2
 800351a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800351e:	f7ff fb7f 	bl	8002c20 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003522:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003526:	2800      	cmp	r0, #0
 8003528:	f43f ae91 	beq.w	800324e <HAL_RCCEx_PeriphCLKConfig+0x53a>
      status = HAL_ERROR;
 800352c:	2601      	movs	r6, #1
 800352e:	e68e      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x53a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003530:	f104 0528 	add.w	r5, r4, #40	; 0x28
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003534:	2102      	movs	r1, #2
 8003536:	4628      	mov	r0, r5
 8003538:	f7ff fb72 	bl	8002c20 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800353c:	2800      	cmp	r0, #0
 800353e:	f43f aed7 	beq.w	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
  return HAL_ERROR;
 8003542:	2001      	movs	r0, #1
}
 8003544:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003548:	462e      	mov	r6, r5
 800354a:	e420      	b.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800354c:	462e      	mov	r6, r5
 800354e:	e442      	b.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
 8003550:	462e      	mov	r6, r5
 8003552:	e4a1      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x184>
 8003554:	462e      	mov	r6, r5
 8003556:	e462      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x10a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003558:	2102      	movs	r1, #2
 800355a:	f104 0008 	add.w	r0, r4, #8
 800355e:	f7ff fae5 	bl	8002b2c <RCCEx_PLL2_Config>
 8003562:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003564:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003568:	2d00      	cmp	r5, #0
 800356a:	d14b      	bne.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800356c:	4f3a      	ldr	r7, [pc, #232]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 800356e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8003570:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003572:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8003576:	4301      	orrs	r1, r0
 8003578:	64f9      	str	r1, [r7, #76]	; 0x4c
 800357a:	e665      	b.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x534>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800357c:	4d36      	ldr	r5, [pc, #216]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 800357e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8003580:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8003584:	62e8      	str	r0, [r5, #44]	; 0x2c
    if (ret == HAL_OK)
 8003586:	f7ff bbe6 	b.w	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x42>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800358a:	4833      	ldr	r0, [pc, #204]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 800358c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800358e:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8003592:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 8003594:	e438      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003596:	4830      	ldr	r0, [pc, #192]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 8003598:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800359a:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800359e:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 80035a0:	e470      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x170>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035a2:	482d      	ldr	r0, [pc, #180]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 80035a4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80035a6:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80035aa:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 80035ac:	e408      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0xac>
 80035ae:	462e      	mov	r6, r5
 80035b0:	e62c      	b.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 80035b2:	462e      	mov	r6, r5
 80035b4:	e44e      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x140>
 80035b6:	462e      	mov	r6, r5
 80035b8:	e5fb      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x49e>
 80035ba:	462e      	mov	r6, r5
 80035bc:	e5b5      	b.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x416>
 80035be:	462e      	mov	r6, r5
 80035c0:	e54c      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x348>
 80035c2:	462e      	mov	r6, r5
 80035c4:	e58f      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 80035c6:	462e      	mov	r6, r5
 80035c8:	e568      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x388>
 80035ca:	462e      	mov	r6, r5
 80035cc:	e5cf      	b.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x45a>
 80035ce:	462e      	mov	r6, r5
 80035d0:	e4a1      	b.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80035d2:	462e      	mov	r6, r5
 80035d4:	e47f      	b.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80035d6:	462e      	mov	r6, r5
 80035d8:	e50b      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80035da:	462e      	mov	r6, r5
 80035dc:	e628      	b.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x51c>
 80035de:	462e      	mov	r6, r5
 80035e0:	e4a9      	b.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x222>
 80035e2:	462e      	mov	r6, r5
 80035e4:	e641      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x556>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035e6:	4f1c      	ldr	r7, [pc, #112]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 80035e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80035ea:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 80035ee:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (ret == HAL_OK)
 80035f0:	2d00      	cmp	r5, #0
 80035f2:	d1f6      	bne.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x8ce>
 80035f4:	e6ad      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x63e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035f6:	4818      	ldr	r0, [pc, #96]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 80035f8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80035fa:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80035fe:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 8003600:	2d00      	cmp	r5, #0
 8003602:	d0b3      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x858>
 8003604:	462e      	mov	r6, r5
 8003606:	e61f      	b.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x534>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003608:	f104 0008 	add.w	r0, r4, #8
 800360c:	f7ff fa8e 	bl	8002b2c <RCCEx_PLL2_Config>
 8003610:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003612:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003616:	2d00      	cmp	r5, #0
 8003618:	d1c9      	bne.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x89a>
 800361a:	e6ba      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800361c:	480e      	ldr	r0, [pc, #56]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 800361e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8003620:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8003624:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 8003626:	2d00      	cmp	r5, #0
 8003628:	d1d7      	bne.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x8c6>
 800362a:	e6d9      	b.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800362c:	6862      	ldr	r2, [r4, #4]
 800362e:	e65c      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003630:	4809      	ldr	r0, [pc, #36]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x944>)
 8003632:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8003634:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8003638:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 800363a:	2d00      	cmp	r5, #0
 800363c:	d1cf      	bne.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x8ca>
 800363e:	e6bc      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x6a6>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003640:	2102      	movs	r1, #2
 8003642:	f104 0008 	add.w	r0, r4, #8
 8003646:	f7ff fa71 	bl	8002b2c <RCCEx_PLL2_Config>
 800364a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800364c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003650:	2d00      	cmp	r5, #0
 8003652:	d1c0      	bne.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
 8003654:	e4c6      	b.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003656:	bf00      	nop
 8003658:	58024400 	.word	0x58024400
 800365c:	58024800 	.word	0x58024800
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003660:	2102      	movs	r1, #2
 8003662:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8003666:	f7ff fadb 	bl	8002c20 <RCCEx_PLL3_Config>
 800366a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800366c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003670:	2d00      	cmp	r5, #0
 8003672:	d1a0      	bne.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8003674:	e595      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x48e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003676:	2102      	movs	r1, #2
 8003678:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800367c:	f7ff fad0 	bl	8002c20 <RCCEx_PLL3_Config>
 8003680:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003682:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003686:	2d00      	cmp	r5, #0
 8003688:	d19f      	bne.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x8b6>
 800368a:	e568      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x44a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800368c:	2101      	movs	r1, #1
 800368e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8003692:	f7ff fac5 	bl	8002c20 <RCCEx_PLL3_Config>
 8003696:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003698:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800369c:	2d00      	cmp	r5, #0
 800369e:	d198      	bne.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x8be>
 80036a0:	e412      	b.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80036a2:	2101      	movs	r1, #1
 80036a4:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80036a8:	f7ff faba 	bl	8002c20 <RCCEx_PLL3_Config>
 80036ac:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80036ae:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80036b2:	2d00      	cmp	r5, #0
 80036b4:	d18b      	bne.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x8ba>
 80036b6:	e426      	b.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80036b8:	2102      	movs	r1, #2
 80036ba:	f104 0008 	add.w	r0, r4, #8
 80036be:	f7ff fa35 	bl	8002b2c <RCCEx_PLL2_Config>
 80036c2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80036c4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80036c8:	2d00      	cmp	r5, #0
 80036ca:	f47f af72 	bne.w	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
 80036ce:	f7ff bbba 	b.w	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x132>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80036d2:	2102      	movs	r1, #2
 80036d4:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80036d8:	f7ff faa2 	bl	8002c20 <RCCEx_PLL3_Config>
 80036dc:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80036de:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80036e2:	2d00      	cmp	r5, #0
 80036e4:	f47f af69 	bne.w	80035ba <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 80036e8:	e517      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x406>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80036ea:	2102      	movs	r1, #2
 80036ec:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80036f0:	f7ff fa96 	bl	8002c20 <RCCEx_PLL3_Config>
 80036f4:	2800      	cmp	r0, #0
 80036f6:	f040 8086 	bne.w	8003806 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80036fa:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036fe:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003702:	e56c      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003704:	2102      	movs	r1, #2
 8003706:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800370a:	f7ff fa89 	bl	8002c20 <RCCEx_PLL3_Config>
 800370e:	2800      	cmp	r0, #0
 8003710:	d173      	bne.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0xae6>
    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8003712:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003716:	e9d4 3200 	ldrd	r3, r2, [r4]
 800371a:	e552      	b.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800371c:	2102      	movs	r1, #2
 800371e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8003722:	f7ff fa7d 	bl	8002c20 <RCCEx_PLL3_Config>
 8003726:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 8003728:	2e00      	cmp	r6, #0
 800372a:	f43f ab11 	beq.w	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800372e:	e036      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0xa8a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003730:	4850      	ldr	r0, [pc, #320]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0xb60>)
        break;
 8003732:	4635      	mov	r5, r6
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003734:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8003736:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800373a:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 800373c:	e611      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x64e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800373e:	2100      	movs	r1, #0
 8003740:	f104 0008 	add.w	r0, r4, #8
 8003744:	f7ff f9f2 	bl	8002b2c <RCCEx_PLL2_Config>
 8003748:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800374a:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800374e:	e608      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x64e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003750:	2100      	movs	r1, #0
 8003752:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8003756:	f7ff fa63 	bl	8002c20 <RCCEx_PLL3_Config>
 800375a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800375c:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8003760:	e5ff      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x64e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003762:	2100      	movs	r1, #0
 8003764:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8003768:	f7ff fa5a 	bl	8002c20 <RCCEx_PLL3_Config>
 800376c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800376e:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8003772:	f7ff bb49 	b.w	8002e08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003776:	2100      	movs	r1, #0
 8003778:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800377c:	f7ff fa50 	bl	8002c20 <RCCEx_PLL3_Config>
 8003780:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003782:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8003786:	f7ff bb7d 	b.w	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x170>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800378a:	2100      	movs	r1, #0
 800378c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8003790:	f7ff fa46 	bl	8002c20 <RCCEx_PLL3_Config>
 8003794:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003796:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800379a:	f7ff bb11 	b.w	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0xac>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800379e:	e9d4 3200 	ldrd	r3, r2, [r4]
 80037a2:	f7ff badf 	b.w	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x50>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80037a6:	2101      	movs	r1, #1
 80037a8:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80037ac:	f7ff fa38 	bl	8002c20 <RCCEx_PLL3_Config>
 80037b0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80037b2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80037b6:	2d00      	cmp	r5, #0
 80037b8:	f47f af03 	bne.w	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x8ae>
 80037bc:	e48b      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80037be:	2101      	movs	r1, #1
 80037c0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80037c4:	f7ff fa2c 	bl	8002c20 <RCCEx_PLL3_Config>
 80037c8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037ca:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80037ce:	2d00      	cmp	r5, #0
 80037d0:	f47f aef9 	bne.w	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x8b2>
 80037d4:	e45b      	b.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x37a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80037d6:	2101      	movs	r1, #1
 80037d8:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80037dc:	f7ff fa20 	bl	8002c20 <RCCEx_PLL3_Config>
 80037e0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80037e2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80037e6:	2d00      	cmp	r5, #0
 80037e8:	f47f aee9 	bne.w	80035be <HAL_RCCEx_PeriphCLKConfig+0x8aa>
 80037ec:	e60c      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
        status = ret;
 80037ee:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80037f0:	e9d4 3200 	ldrd	r3, r2, [r4]
 80037f4:	4635      	mov	r5, r6
 80037f6:	f7ff bbff 	b.w	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80037fa:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
        status = HAL_ERROR;
 80037fe:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003800:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003804:	e4dd      	b.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003806:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
        status = HAL_ERROR;
 800380a:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800380c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003810:	e4e5      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x4ca>
        tickstart = HAL_GetTick();
 8003812:	f7fd faa5 	bl	8000d60 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003816:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8003874 <HAL_RCCEx_PeriphCLKConfig+0xb60>
        tickstart = HAL_GetTick();
 800381a:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800381c:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003820:	e004      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0xb18>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003822:	f7fd fa9d 	bl	8000d60 <HAL_GetTick>
 8003826:	1bc0      	subs	r0, r0, r7
 8003828:	4548      	cmp	r0, r9
 800382a:	d8e0      	bhi.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0xada>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800382c:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8003830:	0798      	lsls	r0, r3, #30
 8003832:	d5f6      	bpl.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003834:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8003838:	e61c      	b.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x760>
 800383a:	480e      	ldr	r0, [pc, #56]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0xb60>)
 800383c:	4a0e      	ldr	r2, [pc, #56]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0xb64>)
 800383e:	6901      	ldr	r1, [r0, #16]
 8003840:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8003844:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 8003848:	430a      	orrs	r2, r1
 800384a:	6102      	str	r2, [r0, #16]
 800384c:	e61d      	b.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x776>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800384e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003852:	462e      	mov	r6, r5
 8003854:	f7ff bbd0 	b.w	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003858:	2601      	movs	r6, #1
 800385a:	4635      	mov	r5, r6
 800385c:	e443      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800385e:	2601      	movs	r6, #1
 8003860:	4635      	mov	r5, r6
 8003862:	e41b      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x388>
    switch (PeriphClkInit->Sai1ClockSelection)
 8003864:	2601      	movs	r6, #1
 8003866:	f7ff ba91 	b.w	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x78>
    switch (PeriphClkInit->FmcClockSelection)
 800386a:	2601      	movs	r6, #1
 800386c:	4635      	mov	r5, r6
 800386e:	f7ff bbc0 	b.w	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8003872:	bf00      	nop
 8003874:	58024400 	.word	0x58024400
 8003878:	00ffffcf 	.word	0x00ffffcf

0800387c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800387c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800387e:	6803      	ldr	r3, [r0, #0]
 8003880:	68dc      	ldr	r4, [r3, #12]
 8003882:	f014 0440 	ands.w	r4, r4, #64	; 0x40
 8003886:	d002      	beq.n	800388e <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 8003888:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 800388a:	4620      	mov	r0, r4
 800388c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800388e:	f04f 32ff 	mov.w	r2, #4294967295
 8003892:	4605      	mov	r5, r0
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003894:	2703      	movs	r7, #3
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003896:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8003898:	f7fd fa62 	bl	8000d60 <HAL_GetTick>
 800389c:	4606      	mov	r6, r0
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800389e:	682b      	ldr	r3, [r5, #0]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	065b      	lsls	r3, r3, #25
 80038a4:	d4f1      	bmi.n	800388a <RTC_EnterInitMode+0xe>
 80038a6:	2c03      	cmp	r4, #3
 80038a8:	d0ef      	beq.n	800388a <RTC_EnterInitMode+0xe>
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80038aa:	f7fd fa59 	bl	8000d60 <HAL_GetTick>
 80038ae:	1b83      	subs	r3, r0, r6
 80038b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038b4:	d9f3      	bls.n	800389e <RTC_EnterInitMode+0x22>
        status = HAL_TIMEOUT;
 80038b6:	2403      	movs	r4, #3
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80038b8:	f885 7021 	strb.w	r7, [r5, #33]	; 0x21
 80038bc:	e7ef      	b.n	800389e <RTC_EnterInitMode+0x22>
 80038be:	bf00      	nop

080038c0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80038c0:	b538      	push	{r3, r4, r5, lr}

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 80038c2:	4b21      	ldr	r3, [pc, #132]	; (8003948 <RTC_ExitInitMode+0x88>)
{
 80038c4:	4604      	mov	r4, r0
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 80038c6:	68da      	ldr	r2, [r3, #12]
 80038c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038cc:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	0691      	lsls	r1, r2, #26
 80038d2:	d412      	bmi.n	80038fa <RTC_ExitInitMode+0x3a>
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80038d4:	6803      	ldr	r3, [r0, #0]
 80038d6:	4a1d      	ldr	r2, [pc, #116]	; (800394c <RTC_ExitInitMode+0x8c>)
 80038d8:	60da      	str	r2, [r3, #12]
  tickstart = HAL_GetTick();
 80038da:	f7fd fa41 	bl	8000d60 <HAL_GetTick>
 80038de:	4605      	mov	r5, r0
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80038e0:	e005      	b.n	80038ee <RTC_ExitInitMode+0x2e>
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80038e2:	f7fd fa3d 	bl	8000d60 <HAL_GetTick>
 80038e6:	1b43      	subs	r3, r0, r5
 80038e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038ec:	d826      	bhi.n	800393c <RTC_ExitInitMode+0x7c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80038ee:	6823      	ldr	r3, [r4, #0]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	069a      	lsls	r2, r3, #26
 80038f4:	d5f5      	bpl.n	80038e2 <RTC_ExitInitMode+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 80038f6:	2000      	movs	r0, #0
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
  }

  return status;
}
 80038f8:	bd38      	pop	{r3, r4, r5, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80038fa:	689a      	ldr	r2, [r3, #8]
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80038fc:	6801      	ldr	r1, [r0, #0]
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80038fe:	f022 0220 	bic.w	r2, r2, #32
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003902:	4812      	ldr	r0, [pc, #72]	; (800394c <RTC_ExitInitMode+0x8c>)
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003904:	609a      	str	r2, [r3, #8]
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003906:	60c8      	str	r0, [r1, #12]
  tickstart = HAL_GetTick();
 8003908:	f7fd fa2a 	bl	8000d60 <HAL_GetTick>
 800390c:	4605      	mov	r5, r0
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800390e:	e005      	b.n	800391c <RTC_ExitInitMode+0x5c>
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003910:	f7fd fa26 	bl	8000d60 <HAL_GetTick>
 8003914:	1b43      	subs	r3, r0, r5
 8003916:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800391a:	d80a      	bhi.n	8003932 <RTC_ExitInitMode+0x72>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800391c:	6823      	ldr	r3, [r4, #0]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	069b      	lsls	r3, r3, #26
 8003922:	d5f5      	bpl.n	8003910 <RTC_ExitInitMode+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8003924:	2000      	movs	r0, #0
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003926:	4a08      	ldr	r2, [pc, #32]	; (8003948 <RTC_ExitInitMode+0x88>)
 8003928:	6893      	ldr	r3, [r2, #8]
 800392a:	f043 0320 	orr.w	r3, r3, #32
 800392e:	6093      	str	r3, [r2, #8]
}
 8003930:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003932:	2303      	movs	r3, #3
      status = HAL_TIMEOUT;
 8003934:	4618      	mov	r0, r3
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003936:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
      status = HAL_TIMEOUT;
 800393a:	e7f4      	b.n	8003926 <RTC_ExitInitMode+0x66>
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800393c:	2303      	movs	r3, #3
      status = HAL_TIMEOUT;
 800393e:	4618      	mov	r0, r3
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003940:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 8003944:	bd38      	pop	{r3, r4, r5, pc}
 8003946:	bf00      	nop
 8003948:	58004000 	.word	0x58004000
 800394c:	0003ff5f 	.word	0x0003ff5f

08003950 <HAL_RTC_Init>:
  if(hrtc != NULL)
 8003950:	b318      	cbz	r0, 800399a <HAL_RTC_Init+0x4a>
{
 8003952:	b538      	push	{r3, r4, r5, lr}
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8003954:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8003958:	4604      	mov	r4, r0
 800395a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800395e:	b1bb      	cbz	r3, 8003990 <HAL_RTC_Init+0x40>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003960:	2202      	movs	r2, #2
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003962:	6823      	ldr	r3, [r4, #0]
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003964:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003968:	68da      	ldr	r2, [r3, #12]
 800396a:	06d2      	lsls	r2, r2, #27
 800396c:	d504      	bpl.n	8003978 <HAL_RTC_Init+0x28>
      hrtc->State = HAL_RTC_STATE_READY;
 800396e:	2301      	movs	r3, #1
 8003970:	2000      	movs	r0, #0
 8003972:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 8003976:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003978:	21ca      	movs	r1, #202	; 0xca
 800397a:	2253      	movs	r2, #83	; 0x53
      status = RTC_EnterInitMode(hrtc);
 800397c:	4620      	mov	r0, r4
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800397e:	6259      	str	r1, [r3, #36]	; 0x24
 8003980:	625a      	str	r2, [r3, #36]	; 0x24
      status = RTC_EnterInitMode(hrtc);
 8003982:	f7ff ff7b 	bl	800387c <RTC_EnterInitMode>
      if (status == HAL_OK)
 8003986:	b150      	cbz	r0, 800399e <HAL_RTC_Init+0x4e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003988:	6823      	ldr	r3, [r4, #0]
 800398a:	22ff      	movs	r2, #255	; 0xff
 800398c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800398e:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Lock = HAL_UNLOCKED;
 8003990:	f880 2020 	strb.w	r2, [r0, #32]
      HAL_RTC_MspInit(hrtc);
 8003994:	f7fc ff64 	bl	8000860 <HAL_RTC_MspInit>
 8003998:	e7e2      	b.n	8003960 <HAL_RTC_Init+0x10>
  HAL_StatusTypeDef status = HAL_ERROR;
 800399a:	2001      	movs	r0, #1
}
 800399c:	4770      	bx	lr
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800399e:	e9d4 2300 	ldrd	r2, r3, [r4]
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80039a2:	4913      	ldr	r1, [pc, #76]	; (80039f0 <HAL_RTC_Init+0xa0>)
 80039a4:	6890      	ldr	r0, [r2, #8]
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80039a6:	6925      	ldr	r5, [r4, #16]
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80039a8:	4001      	ands	r1, r0
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80039aa:	432b      	orrs	r3, r5
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80039ac:	6091      	str	r1, [r2, #8]
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80039ae:	69a1      	ldr	r1, [r4, #24]
 80039b0:	6890      	ldr	r0, [r2, #8]
 80039b2:	430b      	orrs	r3, r1
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 80039b4:	68a1      	ldr	r1, [r4, #8]
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80039b6:	4303      	orrs	r3, r0
        status = RTC_ExitInitMode(hrtc);
 80039b8:	4620      	mov	r0, r4
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80039ba:	6093      	str	r3, [r2, #8]
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 80039bc:	68e3      	ldr	r3, [r4, #12]
 80039be:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80039c2:	6113      	str	r3, [r2, #16]
        status = RTC_ExitInitMode(hrtc);
 80039c4:	f7ff ff7c 	bl	80038c0 <RTC_ExitInitMode>
      if(status == HAL_OK)
 80039c8:	2800      	cmp	r0, #0
 80039ca:	d1dd      	bne.n	8003988 <HAL_RTC_Init+0x38>
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80039cc:	6823      	ldr	r3, [r4, #0]
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039ce:	20ff      	movs	r0, #255	; 0xff
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80039d0:	69e2      	ldr	r2, [r4, #28]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80039d2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80039d4:	6965      	ldr	r5, [r4, #20]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80039d6:	f021 0103 	bic.w	r1, r1, #3
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80039da:	432a      	orrs	r2, r5
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80039dc:	64d9      	str	r1, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80039de:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80039e0:	430a      	orrs	r2, r1
 80039e2:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039e4:	6258      	str	r0, [r3, #36]	; 0x24
      hrtc->State = HAL_RTC_STATE_READY;
 80039e6:	2301      	movs	r3, #1
 80039e8:	2000      	movs	r0, #0
 80039ea:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 80039ee:	e7c2      	b.n	8003976 <HAL_RTC_Init+0x26>
 80039f0:	ff8fffbf 	.word	0xff8fffbf

080039f4 <HAL_RTCEx_BKUPWrite>:

  /* Point on address of first backup register */
#if defined(TAMP)
  tmp = (uint32_t) & (((TAMP_TypeDef *)((uint32_t)hrtc->Instance + TAMP_OFFSET))->BKP0R);
#else
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80039f4:	6803      	ldr	r3, [r0, #0]
 80039f6:	3350      	adds	r3, #80	; 0x50
#endif /* TAMP */

  tmp += (BackupRegister * 4U);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80039f8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop

08003a00 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop

08003a04 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a04:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d14d      	bne.n	8003aa8 <HAL_TIM_Base_Start_IT+0xa4>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a0c:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003a0e:	2102      	movs	r1, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a10:	4b2a      	ldr	r3, [pc, #168]	; (8003abc <HAL_TIM_Base_Start_IT+0xb8>)
 8003a12:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003a16:	bf18      	it	ne
 8003a18:	429a      	cmpne	r2, r3
{
 8003a1a:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a1c:	bf0c      	ite	eq
 8003a1e:	2301      	moveq	r3, #1
 8003a20:	2300      	movne	r3, #0
 8003a22:	4d27      	ldr	r5, [pc, #156]	; (8003ac0 <HAL_TIM_Base_Start_IT+0xbc>)
 8003a24:	4c27      	ldr	r4, [pc, #156]	; (8003ac4 <HAL_TIM_Base_Start_IT+0xc0>)
 8003a26:	42aa      	cmp	r2, r5
 8003a28:	bf08      	it	eq
 8003a2a:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8003a2e:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a32:	4825      	ldr	r0, [pc, #148]	; (8003ac8 <HAL_TIM_Base_Start_IT+0xc4>)
 8003a34:	42a2      	cmp	r2, r4
 8003a36:	bf08      	it	eq
 8003a38:	f043 0301 	orreq.w	r3, r3, #1
 8003a3c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a40:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a42:	42a2      	cmp	r2, r4
 8003a44:	bf08      	it	eq
 8003a46:	f043 0301 	orreq.w	r3, r3, #1
 8003a4a:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a4e:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a52:	4282      	cmp	r2, r0
 8003a54:	bf08      	it	eq
 8003a56:	f043 0301 	orreq.w	r3, r3, #1
 8003a5a:	f500 5070 	add.w	r0, r0, #15360	; 0x3c00
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a5e:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a60:	42a2      	cmp	r2, r4
 8003a62:	bf08      	it	eq
 8003a64:	f043 0301 	orreq.w	r3, r3, #1
 8003a68:	4918      	ldr	r1, [pc, #96]	; (8003acc <HAL_TIM_Base_Start_IT+0xc8>)
 8003a6a:	4282      	cmp	r2, r0
 8003a6c:	bf08      	it	eq
 8003a6e:	f043 0301 	orreq.w	r3, r3, #1
 8003a72:	428a      	cmp	r2, r1
 8003a74:	bf08      	it	eq
 8003a76:	f043 0301 	orreq.w	r3, r3, #1
 8003a7a:	b933      	cbnz	r3, 8003a8a <HAL_TIM_Base_Start_IT+0x86>
 8003a7c:	f5a0 40b8 	sub.w	r0, r0, #23552	; 0x5c00
 8003a80:	1a10      	subs	r0, r2, r0
 8003a82:	fab0 f080 	clz	r0, r0
 8003a86:	0940      	lsrs	r0, r0, #5
 8003a88:	b198      	cbz	r0, 8003ab2 <HAL_TIM_Base_Start_IT+0xae>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a8a:	6891      	ldr	r1, [r2, #8]
 8003a8c:	4b10      	ldr	r3, [pc, #64]	; (8003ad0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003a8e:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a90:	2b06      	cmp	r3, #6
 8003a92:	d00b      	beq.n	8003aac <HAL_TIM_Base_Start_IT+0xa8>
 8003a94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a98:	d008      	beq.n	8003aac <HAL_TIM_Base_Start_IT+0xa8>
    {
      __HAL_TIM_ENABLE(htim);
 8003a9a:	6813      	ldr	r3, [r2, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8003a9c:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 8003a9e:	f043 0301 	orr.w	r3, r3, #1
 8003aa2:	6013      	str	r3, [r2, #0]
}
 8003aa4:	bc30      	pop	{r4, r5}
 8003aa6:	4770      	bx	lr
    return HAL_ERROR;
 8003aa8:	2001      	movs	r0, #1
}
 8003aaa:	4770      	bx	lr
  return HAL_OK;
 8003aac:	2000      	movs	r0, #0
}
 8003aae:	bc30      	pop	{r4, r5}
 8003ab0:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 8003ab2:	6813      	ldr	r3, [r2, #0]
 8003ab4:	f043 0301 	orr.w	r3, r3, #1
 8003ab8:	6013      	str	r3, [r2, #0]
 8003aba:	e7f3      	b.n	8003aa4 <HAL_TIM_Base_Start_IT+0xa0>
 8003abc:	40010000 	.word	0x40010000
 8003ac0:	40000400 	.word	0x40000400
 8003ac4:	40000800 	.word	0x40000800
 8003ac8:	40010400 	.word	0x40010400
 8003acc:	4000e000 	.word	0x4000e000
 8003ad0:	00010007 	.word	0x00010007

08003ad4 <HAL_TIM_OC_DelayElapsedCallback>:
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop

08003ad8 <HAL_TIM_IC_CaptureCallback>:
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop

08003adc <HAL_TIM_PWM_PulseFinishedCallback>:
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop

08003ae0 <HAL_TIM_TriggerCallback>:
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop

08003ae4 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ae4:	6803      	ldr	r3, [r0, #0]
 8003ae6:	691a      	ldr	r2, [r3, #16]
 8003ae8:	0791      	lsls	r1, r2, #30
{
 8003aea:	b510      	push	{r4, lr}
 8003aec:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003aee:	d502      	bpl.n	8003af6 <HAL_TIM_IRQHandler+0x12>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003af0:	68da      	ldr	r2, [r3, #12]
 8003af2:	0792      	lsls	r2, r2, #30
 8003af4:	d468      	bmi.n	8003bc8 <HAL_TIM_IRQHandler+0xe4>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003af6:	691a      	ldr	r2, [r3, #16]
 8003af8:	0752      	lsls	r2, r2, #29
 8003afa:	d502      	bpl.n	8003b02 <HAL_TIM_IRQHandler+0x1e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003afc:	68da      	ldr	r2, [r3, #12]
 8003afe:	0750      	lsls	r0, r2, #29
 8003b00:	d44f      	bmi.n	8003ba2 <HAL_TIM_IRQHandler+0xbe>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b02:	691a      	ldr	r2, [r3, #16]
 8003b04:	0711      	lsls	r1, r2, #28
 8003b06:	d502      	bpl.n	8003b0e <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b08:	68da      	ldr	r2, [r3, #12]
 8003b0a:	0712      	lsls	r2, r2, #28
 8003b0c:	d437      	bmi.n	8003b7e <HAL_TIM_IRQHandler+0x9a>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b0e:	691a      	ldr	r2, [r3, #16]
 8003b10:	06d0      	lsls	r0, r2, #27
 8003b12:	d502      	bpl.n	8003b1a <HAL_TIM_IRQHandler+0x36>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b14:	68da      	ldr	r2, [r3, #12]
 8003b16:	06d1      	lsls	r1, r2, #27
 8003b18:	d41e      	bmi.n	8003b58 <HAL_TIM_IRQHandler+0x74>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b1a:	691a      	ldr	r2, [r3, #16]
 8003b1c:	07d2      	lsls	r2, r2, #31
 8003b1e:	d502      	bpl.n	8003b26 <HAL_TIM_IRQHandler+0x42>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b20:	68da      	ldr	r2, [r3, #12]
 8003b22:	07d0      	lsls	r0, r2, #31
 8003b24:	d469      	bmi.n	8003bfa <HAL_TIM_IRQHandler+0x116>
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b26:	691a      	ldr	r2, [r3, #16]
 8003b28:	0611      	lsls	r1, r2, #24
 8003b2a:	d502      	bpl.n	8003b32 <HAL_TIM_IRQHandler+0x4e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b2c:	68da      	ldr	r2, [r3, #12]
 8003b2e:	0612      	lsls	r2, r2, #24
 8003b30:	d46b      	bmi.n	8003c0a <HAL_TIM_IRQHandler+0x126>
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003b32:	691a      	ldr	r2, [r3, #16]
 8003b34:	05d0      	lsls	r0, r2, #23
 8003b36:	d502      	bpl.n	8003b3e <HAL_TIM_IRQHandler+0x5a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b38:	68da      	ldr	r2, [r3, #12]
 8003b3a:	0611      	lsls	r1, r2, #24
 8003b3c:	d46d      	bmi.n	8003c1a <HAL_TIM_IRQHandler+0x136>
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b3e:	691a      	ldr	r2, [r3, #16]
 8003b40:	0652      	lsls	r2, r2, #25
 8003b42:	d502      	bpl.n	8003b4a <HAL_TIM_IRQHandler+0x66>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b44:	68da      	ldr	r2, [r3, #12]
 8003b46:	0650      	lsls	r0, r2, #25
 8003b48:	d46f      	bmi.n	8003c2a <HAL_TIM_IRQHandler+0x146>
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b4a:	691a      	ldr	r2, [r3, #16]
 8003b4c:	0691      	lsls	r1, r2, #26
 8003b4e:	d502      	bpl.n	8003b56 <HAL_TIM_IRQHandler+0x72>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b50:	68da      	ldr	r2, [r3, #12]
 8003b52:	0692      	lsls	r2, r2, #26
 8003b54:	d449      	bmi.n	8003bea <HAL_TIM_IRQHandler+0x106>
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b56:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b58:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b5c:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8003b5e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b60:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b62:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b64:	69db      	ldr	r3, [r3, #28]
 8003b66:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003b6a:	d16f      	bne.n	8003c4c <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b6c:	f7ff ffb2 	bl	8003ad4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b70:	4620      	mov	r0, r4
 8003b72:	f7ff ffb3 	bl	8003adc <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b76:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b78:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b7a:	7722      	strb	r2, [r4, #28]
 8003b7c:	e7cd      	b.n	8003b1a <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b7e:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b82:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8003b84:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b86:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b88:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b8a:	69db      	ldr	r3, [r3, #28]
 8003b8c:	079b      	lsls	r3, r3, #30
 8003b8e:	d15a      	bne.n	8003c46 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b90:	f7ff ffa0 	bl	8003ad4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b94:	4620      	mov	r0, r4
 8003b96:	f7ff ffa1 	bl	8003adc <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b9a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b9c:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b9e:	7722      	strb	r2, [r4, #28]
 8003ba0:	e7b5      	b.n	8003b0e <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ba2:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ba6:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8003ba8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003baa:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bac:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003bb4:	d144      	bne.n	8003c40 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bb6:	f7ff ff8d 	bl	8003ad4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bba:	4620      	mov	r0, r4
 8003bbc:	f7ff ff8e 	bl	8003adc <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bc0:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003bc2:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bc4:	7722      	strb	r2, [r4, #28]
 8003bc6:	e79c      	b.n	8003b02 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003bc8:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bcc:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003bce:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bd0:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	0799      	lsls	r1, r3, #30
 8003bd6:	d130      	bne.n	8003c3a <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bd8:	f7ff ff7c 	bl	8003ad4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bdc:	4620      	mov	r0, r4
 8003bde:	f7ff ff7d 	bl	8003adc <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003be2:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003be4:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003be6:	7722      	strb	r2, [r4, #28]
 8003be8:	e785      	b.n	8003af6 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003bea:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8003bee:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003bf0:	611a      	str	r2, [r3, #16]
}
 8003bf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8003bf6:	f000 b8f5 	b.w	8003de4 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bfa:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bfe:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c00:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c02:	f7fc fe07 	bl	8000814 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c06:	6823      	ldr	r3, [r4, #0]
 8003c08:	e78d      	b.n	8003b26 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c0a:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8003c0e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c10:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003c12:	f000 f8e9 	bl	8003de8 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003c16:	6823      	ldr	r3, [r4, #0]
 8003c18:	e78b      	b.n	8003b32 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003c1a:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 8003c1e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003c20:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8003c22:	f000 f8e3 	bl	8003dec <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c26:	6823      	ldr	r3, [r4, #0]
 8003c28:	e789      	b.n	8003b3e <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c2a:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8003c2e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c30:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003c32:	f7ff ff55 	bl	8003ae0 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c36:	6823      	ldr	r3, [r4, #0]
 8003c38:	e787      	b.n	8003b4a <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 8003c3a:	f7ff ff4d 	bl	8003ad8 <HAL_TIM_IC_CaptureCallback>
 8003c3e:	e7d0      	b.n	8003be2 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8003c40:	f7ff ff4a 	bl	8003ad8 <HAL_TIM_IC_CaptureCallback>
 8003c44:	e7bc      	b.n	8003bc0 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8003c46:	f7ff ff47 	bl	8003ad8 <HAL_TIM_IC_CaptureCallback>
 8003c4a:	e7a6      	b.n	8003b9a <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 8003c4c:	f7ff ff44 	bl	8003ad8 <HAL_TIM_IC_CaptureCallback>
 8003c50:	e791      	b.n	8003b76 <HAL_TIM_IRQHandler+0x92>
 8003c52:	bf00      	nop

08003c54 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c54:	4a43      	ldr	r2, [pc, #268]	; (8003d64 <TIM_Base_SetConfig+0x110>)
 8003c56:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  tmpcr1 = TIMx->CR1;
 8003c5a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c5c:	eba0 0202 	sub.w	r2, r0, r2
 8003c60:	fab2 f282 	clz	r2, r2
{
 8003c64:	b430      	push	{r4, r5}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c66:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8003c6a:	d02b      	beq.n	8003cc4 <TIM_Base_SetConfig+0x70>
 8003c6c:	bb52      	cbnz	r2, 8003cc4 <TIM_Base_SetConfig+0x70>
 8003c6e:	4c3e      	ldr	r4, [pc, #248]	; (8003d68 <TIM_Base_SetConfig+0x114>)
 8003c70:	42a0      	cmp	r0, r4
 8003c72:	d04f      	beq.n	8003d14 <TIM_Base_SetConfig+0xc0>
 8003c74:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003c78:	42a0      	cmp	r0, r4
 8003c7a:	d04b      	beq.n	8003d14 <TIM_Base_SetConfig+0xc0>
 8003c7c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003c80:	42a0      	cmp	r0, r4
 8003c82:	d051      	beq.n	8003d28 <TIM_Base_SetConfig+0xd4>
 8003c84:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 8003c88:	42a0      	cmp	r0, r4
 8003c8a:	d04d      	beq.n	8003d28 <TIM_Base_SetConfig+0xd4>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c8c:	4a37      	ldr	r2, [pc, #220]	; (8003d6c <TIM_Base_SetConfig+0x118>)
 8003c8e:	4290      	cmp	r0, r2
 8003c90:	d05a      	beq.n	8003d48 <TIM_Base_SetConfig+0xf4>
 8003c92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003c96:	4290      	cmp	r0, r2
 8003c98:	d056      	beq.n	8003d48 <TIM_Base_SetConfig+0xf4>
 8003c9a:	4c35      	ldr	r4, [pc, #212]	; (8003d70 <TIM_Base_SetConfig+0x11c>)
 8003c9c:	f5a2 42c8 	sub.w	r2, r2, #25600	; 0x6400
 8003ca0:	4290      	cmp	r0, r2
 8003ca2:	bf18      	it	ne
 8003ca4:	42a0      	cmpne	r0, r4
 8003ca6:	d04f      	beq.n	8003d48 <TIM_Base_SetConfig+0xf4>
 8003ca8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003cac:	4290      	cmp	r0, r2
 8003cae:	d04b      	beq.n	8003d48 <TIM_Base_SetConfig+0xf4>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cb0:	694d      	ldr	r5, [r1, #20]
 8003cb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cb6:	688c      	ldr	r4, [r1, #8]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cb8:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cba:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003cbc:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cbe:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003cc0:	6282      	str	r2, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cc2:	e023      	b.n	8003d0c <TIM_Base_SetConfig+0xb8>
    tmpcr1 |= Structure->CounterMode;
 8003cc4:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003cca:	4323      	orrs	r3, r4
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ccc:	4c29      	ldr	r4, [pc, #164]	; (8003d74 <TIM_Base_SetConfig+0x120>)
 8003cce:	1b04      	subs	r4, r0, r4
 8003cd0:	fab4 f484 	clz	r4, r4
 8003cd4:	0964      	lsrs	r4, r4, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cd6:	68cd      	ldr	r5, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cdc:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cde:	694d      	ldr	r5, [r1, #20]
 8003ce0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ce4:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003ce6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ce8:	688b      	ldr	r3, [r1, #8]
 8003cea:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003cec:	680b      	ldr	r3, [r1, #0]
 8003cee:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cf0:	b952      	cbnz	r2, 8003d08 <TIM_Base_SetConfig+0xb4>
 8003cf2:	b94c      	cbnz	r4, 8003d08 <TIM_Base_SetConfig+0xb4>
 8003cf4:	4a1d      	ldr	r2, [pc, #116]	; (8003d6c <TIM_Base_SetConfig+0x118>)
 8003cf6:	4b20      	ldr	r3, [pc, #128]	; (8003d78 <TIM_Base_SetConfig+0x124>)
 8003cf8:	4298      	cmp	r0, r3
 8003cfa:	bf18      	it	ne
 8003cfc:	4290      	cmpne	r0, r2
 8003cfe:	d003      	beq.n	8003d08 <TIM_Base_SetConfig+0xb4>
 8003d00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d04:	4298      	cmp	r0, r3
 8003d06:	d101      	bne.n	8003d0c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d08:	690b      	ldr	r3, [r1, #16]
 8003d0a:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d0c:	2301      	movs	r3, #1
}
 8003d0e:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 8003d10:	6143      	str	r3, [r0, #20]
}
 8003d12:	4770      	bx	lr
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d14:	4c17      	ldr	r4, [pc, #92]	; (8003d74 <TIM_Base_SetConfig+0x120>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003d1a:	684d      	ldr	r5, [r1, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d1c:	1b04      	subs	r4, r0, r4
    tmpcr1 |= Structure->CounterMode;
 8003d1e:	432b      	orrs	r3, r5
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d20:	fab4 f484 	clz	r4, r4
 8003d24:	0964      	lsrs	r4, r4, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d26:	e7d6      	b.n	8003cd6 <TIM_Base_SetConfig+0x82>
    tmpcr1 |= Structure->CounterMode;
 8003d28:	684d      	ldr	r5, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d2e:	4c11      	ldr	r4, [pc, #68]	; (8003d74 <TIM_Base_SetConfig+0x120>)
    tmpcr1 |= Structure->CounterMode;
 8003d30:	432b      	orrs	r3, r5
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d32:	4d12      	ldr	r5, [pc, #72]	; (8003d7c <TIM_Base_SetConfig+0x128>)
 8003d34:	1b04      	subs	r4, r0, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d36:	42a8      	cmp	r0, r5
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d38:	fab4 f484 	clz	r4, r4
 8003d3c:	ea4f 1454 	mov.w	r4, r4, lsr #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d40:	d0c9      	beq.n	8003cd6 <TIM_Base_SetConfig+0x82>
 8003d42:	2c00      	cmp	r4, #0
 8003d44:	d1c7      	bne.n	8003cd6 <TIM_Base_SetConfig+0x82>
 8003d46:	e7a1      	b.n	8003c8c <TIM_Base_SetConfig+0x38>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d48:	68cc      	ldr	r4, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d4e:	694a      	ldr	r2, [r1, #20]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d50:	4323      	orrs	r3, r4
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d52:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d58:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 8003d5a:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 8003d5c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d5e:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003d60:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d62:	e7c7      	b.n	8003cf4 <TIM_Base_SetConfig+0xa0>
 8003d64:	40010000 	.word	0x40010000
 8003d68:	40000400 	.word	0x40000400
 8003d6c:	40014000 	.word	0x40014000
 8003d70:	40014800 	.word	0x40014800
 8003d74:	40010400 	.word	0x40010400
 8003d78:	40014400 	.word	0x40014400
 8003d7c:	40000c00 	.word	0x40000c00

08003d80 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8003d80:	b370      	cbz	r0, 8003de0 <HAL_TIM_Base_Init+0x60>
{
 8003d82:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8003d84:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003d88:	4604      	mov	r4, r0
 8003d8a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003d8e:	b313      	cbz	r3, 8003dd6 <HAL_TIM_Base_Init+0x56>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d90:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8003d92:	2302      	movs	r3, #2
 8003d94:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d98:	f851 0b04 	ldr.w	r0, [r1], #4
 8003d9c:	f7ff ff5a 	bl	8003c54 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003da0:	2301      	movs	r3, #1
  return HAL_OK;
 8003da2:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003da4:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003da8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003dac:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003db0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003db4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003db8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003dbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dc0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003dc4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003dc8:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8003dcc:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8003dd0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8003dd4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003dd6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003dda:	f7ff fe11 	bl	8003a00 <HAL_TIM_Base_MspInit>
 8003dde:	e7d7      	b.n	8003d90 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8003de0:	2001      	movs	r0, #1
}
 8003de2:	4770      	bx	lr

08003de4 <HAL_TIMEx_CommutCallback>:
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop

08003de8 <HAL_TIMEx_BreakCallback>:
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop

08003dec <HAL_TIMEx_Break2Callback>:
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop

08003df0 <ethernet_link_status_updated>:
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop

08003df4 <MX_LWIP_Init>:
{
 8003df4:	b5f0      	push	{r4, r5, r6, r7, lr}
  IP_ADDRESS[0] = 192;
 8003df6:	4b21      	ldr	r3, [pc, #132]	; (8003e7c <MX_LWIP_Init+0x88>)
  GATEWAY_ADDRESS[0] = 0;
 8003df8:	2400      	movs	r4, #0
  IP_ADDRESS[0] = 192;
 8003dfa:	4f21      	ldr	r7, [pc, #132]	; (8003e80 <MX_LWIP_Init+0x8c>)
{
 8003dfc:	b08d      	sub	sp, #52	; 0x34
  NETMASK_ADDRESS[0] = 255;
 8003dfe:	4e21      	ldr	r6, [pc, #132]	; (8003e84 <MX_LWIP_Init+0x90>)
  tcpip_init( NULL, NULL );
 8003e00:	4621      	mov	r1, r4
  GATEWAY_ADDRESS[0] = 0;
 8003e02:	4d21      	ldr	r5, [pc, #132]	; (8003e88 <MX_LWIP_Init+0x94>)
  tcpip_init( NULL, NULL );
 8003e04:	4620      	mov	r0, r4
  IP_ADDRESS[0] = 192;
 8003e06:	603b      	str	r3, [r7, #0]
  NETMASK_ADDRESS[0] = 255;
 8003e08:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
  GATEWAY_ADDRESS[0] = 0;
 8003e0c:	602c      	str	r4, [r5, #0]
  NETMASK_ADDRESS[0] = 255;
 8003e0e:	6033      	str	r3, [r6, #0]
  tcpip_init( NULL, NULL );
 8003e10:	f005 fa7c 	bl	800930c <tcpip_init>
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003e14:	491d      	ldr	r1, [pc, #116]	; (8003e8c <MX_LWIP_Init+0x98>)
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003e16:	4a1e      	ldr	r2, [pc, #120]	; (8003e90 <MX_LWIP_Init+0x9c>)
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003e18:	683b      	ldr	r3, [r7, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003e1a:	6830      	ldr	r0, [r6, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8003e1c:	9400      	str	r4, [sp, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003e1e:	6010      	str	r0, [r2, #0]
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003e20:	600b      	str	r3, [r1, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003e22:	6828      	ldr	r0, [r5, #0]
 8003e24:	4b1b      	ldr	r3, [pc, #108]	; (8003e94 <MX_LWIP_Init+0xa0>)
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8003e26:	4c1c      	ldr	r4, [pc, #112]	; (8003e98 <MX_LWIP_Init+0xa4>)
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003e28:	6018      	str	r0, [r3, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8003e2a:	481c      	ldr	r0, [pc, #112]	; (8003e9c <MX_LWIP_Init+0xa8>)
 8003e2c:	9002      	str	r0, [sp, #8]
 8003e2e:	481c      	ldr	r0, [pc, #112]	; (8003ea0 <MX_LWIP_Init+0xac>)
 8003e30:	9001      	str	r0, [sp, #4]
 8003e32:	4620      	mov	r0, r4
 8003e34:	f005 ff58 	bl	8009ce8 <netif_add>
  netif_set_default(&gnetif);
 8003e38:	4620      	mov	r0, r4
 8003e3a:	f006 f801 	bl	8009e40 <netif_set_default>
  if (netif_is_link_up(&gnetif))
 8003e3e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
    netif_set_up(&gnetif);
 8003e42:	4620      	mov	r0, r4
  if (netif_is_link_up(&gnetif))
 8003e44:	075b      	lsls	r3, r3, #29
 8003e46:	d515      	bpl.n	8003e74 <MX_LWIP_Init+0x80>
    netif_set_up(&gnetif);
 8003e48:	f006 f800 	bl	8009e4c <netif_set_up>
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8003e4c:	4c15      	ldr	r4, [pc, #84]	; (8003ea4 <MX_LWIP_Init+0xb0>)
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8003e4e:	4916      	ldr	r1, [pc, #88]	; (8003ea8 <MX_LWIP_Init+0xb4>)
 8003e50:	4811      	ldr	r0, [pc, #68]	; (8003e98 <MX_LWIP_Init+0xa4>)
 8003e52:	f006 f86f 	bl	8009f34 <netif_set_link_callback>
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8003e56:	f10d 0c14 	add.w	ip, sp, #20
 8003e5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e5c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003e60:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003e64:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8003e68:	490b      	ldr	r1, [pc, #44]	; (8003e98 <MX_LWIP_Init+0xa4>)
 8003e6a:	a805      	add	r0, sp, #20
 8003e6c:	f000 fb4c 	bl	8004508 <osThreadCreate>
}
 8003e70:	b00d      	add	sp, #52	; 0x34
 8003e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    netif_set_down(&gnetif);
 8003e74:	f006 f804 	bl	8009e80 <netif_set_down>
 8003e78:	e7e8      	b.n	8003e4c <MX_LWIP_Init+0x58>
 8003e7a:	bf00      	nop
 8003e7c:	0a32a8c0 	.word	0x0a32a8c0
 8003e80:	240003d0 	.word	0x240003d0
 8003e84:	240003d4 	.word	0x240003d4
 8003e88:	240003cc 	.word	0x240003cc
 8003e8c:	24000410 	.word	0x24000410
 8003e90:	24000414 	.word	0x24000414
 8003e94:	2400040c 	.word	0x2400040c
 8003e98:	240003d8 	.word	0x240003d8
 8003e9c:	0800926d 	.word	0x0800926d
 8003ea0:	0800406d 	.word	0x0800406d
 8003ea4:	08012424 	.word	0x08012424
 8003ea8:	08003df1 	.word	0x08003df1

08003eac <ETH_PHY_IO_DeInit>:
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
  return 0;
}
 8003eac:	2000      	movs	r0, #0
 8003eae:	4770      	bx	lr

08003eb0 <low_level_output>:
{
 8003eb0:	b570      	push	{r4, r5, r6, lr}
 8003eb2:	b08c      	sub	sp, #48	; 0x30
 8003eb4:	460c      	mov	r4, r1
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8003eb6:	2230      	movs	r2, #48	; 0x30
 8003eb8:	2100      	movs	r1, #0
 8003eba:	4668      	mov	r0, sp
 8003ebc:	f00d fcf6 	bl	80118ac <memset>
  for(q = p; q != NULL; q = q->next)
 8003ec0:	b1fc      	cbz	r4, 8003f02 <low_level_output+0x52>
    Txbuffer[i].len = q->len;
 8003ec2:	8962      	ldrh	r2, [r4, #10]
 8003ec4:	466b      	mov	r3, sp
    Txbuffer[i].buffer = q->payload;
 8003ec6:	6861      	ldr	r1, [r4, #4]
  uint32_t i = 0U;
 8003ec8:	f04f 0c00 	mov.w	ip, #0
    if(i >= ETH_TX_DESC_CNT)
 8003ecc:	330c      	adds	r3, #12
    Txbuffer[i].len = q->len;
 8003ece:	e9cd 1200 	strd	r1, r2, [sp]
 8003ed2:	4622      	mov	r2, r4
    if(q->next == NULL)
 8003ed4:	6812      	ldr	r2, [r2, #0]
 8003ed6:	b16a      	cbz	r2, 8003ef4 <low_level_output+0x44>
    i++;
 8003ed8:	f10c 0c01 	add.w	ip, ip, #1
    if(i >= ETH_TX_DESC_CNT)
 8003edc:	f1bc 0f04 	cmp.w	ip, #4
 8003ee0:	d02b      	beq.n	8003f3a <low_level_output+0x8a>
    Txbuffer[i].buffer = q->payload;
 8003ee2:	6850      	ldr	r0, [r2, #4]
    Txbuffer[i].len = q->len;
 8003ee4:	8951      	ldrh	r1, [r2, #10]
    if(q->next == NULL)
 8003ee6:	6812      	ldr	r2, [r2, #0]
    Txbuffer[i].len = q->len;
 8003ee8:	6059      	str	r1, [r3, #4]
    Txbuffer[i].buffer = q->payload;
 8003eea:	e943 3001 	strd	r3, r0, [r3, #-4]
    if(i >= ETH_TX_DESC_CNT)
 8003eee:	330c      	adds	r3, #12
    if(q->next == NULL)
 8003ef0:	2a00      	cmp	r2, #0
 8003ef2:	d1f1      	bne.n	8003ed8 <low_level_output+0x28>
      Txbuffer[i].next = NULL;
 8003ef4:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8003ef8:	ab0c      	add	r3, sp, #48	; 0x30
 8003efa:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8003efe:	f84c 2c28 	str.w	r2, [ip, #-40]
  TxConfig.Length = p->tot_len;
 8003f02:	4e10      	ldr	r6, [pc, #64]	; (8003f44 <low_level_output+0x94>)
  pbuf_ref(p);
 8003f04:	4620      	mov	r0, r4
  TxConfig.Length = p->tot_len;
 8003f06:	8923      	ldrh	r3, [r4, #8]
  TxConfig.TxBuffer = Txbuffer;
 8003f08:	f8c6 d008 	str.w	sp, [r6, #8]
  TxConfig.Length = p->tot_len;
 8003f0c:	6073      	str	r3, [r6, #4]
  TxConfig.pData = p;
 8003f0e:	6374      	str	r4, [r6, #52]	; 0x34
  pbuf_ref(p);
 8003f10:	f006 fb5e 	bl	800a5d0 <pbuf_ref>
  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8003f14:	4631      	mov	r1, r6
 8003f16:	480c      	ldr	r0, [pc, #48]	; (8003f48 <low_level_output+0x98>)
 8003f18:	4d0c      	ldr	r5, [pc, #48]	; (8003f4c <low_level_output+0x9c>)
 8003f1a:	f7fd fb6d 	bl	80015f8 <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8003f1e:	f04f 31ff 	mov.w	r1, #4294967295
 8003f22:	6828      	ldr	r0, [r5, #0]
 8003f24:	f000 fbb2 	bl	800468c <osSemaphoreWait>
 8003f28:	4604      	mov	r4, r0
 8003f2a:	2800      	cmp	r0, #0
 8003f2c:	d1f7      	bne.n	8003f1e <low_level_output+0x6e>
  HAL_ETH_ReleaseTxPacket(&heth);
 8003f2e:	4806      	ldr	r0, [pc, #24]	; (8003f48 <low_level_output+0x98>)
 8003f30:	f7fd fc1c 	bl	800176c <HAL_ETH_ReleaseTxPacket>
  return errval;
 8003f34:	4620      	mov	r0, r4
}
 8003f36:	b00c      	add	sp, #48	; 0x30
 8003f38:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_IF;
 8003f3a:	f06f 000b 	mvn.w	r0, #11
}
 8003f3e:	b00c      	add	sp, #48	; 0x30
 8003f40:	bd70      	pop	{r4, r5, r6, pc}
 8003f42:	bf00      	nop
 8003f44:	24000440 	.word	0x24000440
 8003f48:	2400047c 	.word	0x2400047c
 8003f4c:	24000478 	.word	0x24000478

08003f50 <ETH_PHY_IO_GetTick>:
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
  return HAL_GetTick();
 8003f50:	f7fc bf06 	b.w	8000d60 <HAL_GetTick>

08003f54 <ETH_PHY_IO_Init>:
  HAL_ETH_SetMDIOClockRange(&heth);
 8003f54:	4802      	ldr	r0, [pc, #8]	; (8003f60 <ETH_PHY_IO_Init+0xc>)
{
 8003f56:	b508      	push	{r3, lr}
  HAL_ETH_SetMDIOClockRange(&heth);
 8003f58:	f7fd fe22 	bl	8001ba0 <HAL_ETH_SetMDIOClockRange>
}
 8003f5c:	2000      	movs	r0, #0
 8003f5e:	bd08      	pop	{r3, pc}
 8003f60:	2400047c 	.word	0x2400047c

08003f64 <ETH_PHY_IO_ReadReg>:
{
 8003f64:	4684      	mov	ip, r0
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8003f66:	4806      	ldr	r0, [pc, #24]	; (8003f80 <ETH_PHY_IO_ReadReg+0x1c>)
{
 8003f68:	b508      	push	{r3, lr}
 8003f6a:	4613      	mov	r3, r2
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8003f6c:	460a      	mov	r2, r1
 8003f6e:	4661      	mov	r1, ip
 8003f70:	f7fd fcde 	bl	8001930 <HAL_ETH_ReadPHYRegister>
 8003f74:	3800      	subs	r0, #0
 8003f76:	bf18      	it	ne
 8003f78:	2001      	movne	r0, #1
}
 8003f7a:	4240      	negs	r0, r0
 8003f7c:	bd08      	pop	{r3, pc}
 8003f7e:	bf00      	nop
 8003f80:	2400047c 	.word	0x2400047c

08003f84 <ETH_PHY_IO_WriteReg>:
{
 8003f84:	4684      	mov	ip, r0
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8003f86:	4806      	ldr	r0, [pc, #24]	; (8003fa0 <ETH_PHY_IO_WriteReg+0x1c>)
{
 8003f88:	b508      	push	{r3, lr}
 8003f8a:	4613      	mov	r3, r2
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8003f8c:	460a      	mov	r2, r1
 8003f8e:	4661      	mov	r1, ip
 8003f90:	f7fd fcfc 	bl	800198c <HAL_ETH_WritePHYRegister>
 8003f94:	3800      	subs	r0, #0
 8003f96:	bf18      	it	ne
 8003f98:	2001      	movne	r0, #1
}
 8003f9a:	4240      	negs	r0, r0
 8003f9c:	bd08      	pop	{r3, pc}
 8003f9e:	bf00      	nop
 8003fa0:	2400047c 	.word	0x2400047c

08003fa4 <pbuf_free_custom>:
{
 8003fa4:	4601      	mov	r1, r0
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8003fa6:	4808      	ldr	r0, [pc, #32]	; (8003fc8 <pbuf_free_custom+0x24>)
{
 8003fa8:	b508      	push	{r3, lr}
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8003faa:	f005 fdbf 	bl	8009b2c <memp_free_pool>
  if (RxAllocStatus == RX_ALLOC_ERROR)
 8003fae:	4b07      	ldr	r3, [pc, #28]	; (8003fcc <pbuf_free_custom+0x28>)
 8003fb0:	781a      	ldrb	r2, [r3, #0]
 8003fb2:	2a01      	cmp	r2, #1
 8003fb4:	d000      	beq.n	8003fb8 <pbuf_free_custom+0x14>
}
 8003fb6:	bd08      	pop	{r3, pc}
    osSemaphoreRelease(RxPktSemaphore);
 8003fb8:	4905      	ldr	r1, [pc, #20]	; (8003fd0 <pbuf_free_custom+0x2c>)
    RxAllocStatus = RX_ALLOC_OK;
 8003fba:	2200      	movs	r2, #0
    osSemaphoreRelease(RxPktSemaphore);
 8003fbc:	6808      	ldr	r0, [r1, #0]
    RxAllocStatus = RX_ALLOC_OK;
 8003fbe:	701a      	strb	r2, [r3, #0]
}
 8003fc0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    osSemaphoreRelease(RxPktSemaphore);
 8003fc4:	f000 bb8e 	b.w	80046e4 <osSemaphoreRelease>
 8003fc8:	08012538 	.word	0x08012538
 8003fcc:	24000438 	.word	0x24000438
 8003fd0:	2400043c 	.word	0x2400043c

08003fd4 <ethernetif_input>:
{
 8003fd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003fd8:	4c14      	ldr	r4, [pc, #80]	; (800402c <ethernetif_input+0x58>)
 8003fda:	b083      	sub	sp, #12
 8003fdc:	f8df 8050 	ldr.w	r8, [pc, #80]	; 8004030 <ethernetif_input+0x5c>
 8003fe0:	4606      	mov	r6, r0
  struct pbuf *p = NULL;
 8003fe2:	2700      	movs	r7, #0
    HAL_ETH_ReadData(&heth, (void **)&p);
 8003fe4:	f8df 904c 	ldr.w	r9, [pc, #76]	; 8004034 <ethernetif_input+0x60>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8003fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8003fec:	6820      	ldr	r0, [r4, #0]
 8003fee:	f000 fb4d 	bl	800468c <osSemaphoreWait>
 8003ff2:	2800      	cmp	r0, #0
 8003ff4:	d1f8      	bne.n	8003fe8 <ethernetif_input+0x14>
  if(RxAllocStatus == RX_ALLOC_OK)
 8003ff6:	f898 3000 	ldrb.w	r3, [r8]
  struct pbuf *p = NULL;
 8003ffa:	9701      	str	r7, [sp, #4]
  if(RxAllocStatus == RX_ALLOC_OK)
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1f3      	bne.n	8003fe8 <ethernetif_input+0x14>
    HAL_ETH_ReadData(&heth, (void **)&p);
 8004000:	a901      	add	r1, sp, #4
 8004002:	4648      	mov	r0, r9
 8004004:	f7fd fb28 	bl	8001658 <HAL_ETH_ReadData>
  return p;
 8004008:	9d01      	ldr	r5, [sp, #4]
          if (netif->input( p, netif) != ERR_OK )
 800400a:	4631      	mov	r1, r6
 800400c:	4628      	mov	r0, r5
        if (p != NULL)
 800400e:	2d00      	cmp	r5, #0
 8004010:	d0ea      	beq.n	8003fe8 <ethernetif_input+0x14>
          if (netif->input( p, netif) != ERR_OK )
 8004012:	6933      	ldr	r3, [r6, #16]
 8004014:	4798      	blx	r3
 8004016:	2800      	cmp	r0, #0
 8004018:	d0ed      	beq.n	8003ff6 <ethernetif_input+0x22>
            pbuf_free(p);
 800401a:	4628      	mov	r0, r5
 800401c:	f006 f93e 	bl	800a29c <pbuf_free>
  if(RxAllocStatus == RX_ALLOC_OK)
 8004020:	f898 3000 	ldrb.w	r3, [r8]
  struct pbuf *p = NULL;
 8004024:	9701      	str	r7, [sp, #4]
  if(RxAllocStatus == RX_ALLOC_OK)
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1de      	bne.n	8003fe8 <ethernetif_input+0x14>
 800402a:	e7e9      	b.n	8004000 <ethernetif_input+0x2c>
 800402c:	2400043c 	.word	0x2400043c
 8004030:	24000438 	.word	0x24000438
 8004034:	2400047c 	.word	0x2400047c

08004038 <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(RxPktSemaphore);
 8004038:	4b01      	ldr	r3, [pc, #4]	; (8004040 <HAL_ETH_RxCpltCallback+0x8>)
 800403a:	6818      	ldr	r0, [r3, #0]
 800403c:	f000 bb52 	b.w	80046e4 <osSemaphoreRelease>
 8004040:	2400043c 	.word	0x2400043c

08004044 <HAL_ETH_TxCpltCallback>:
  osSemaphoreRelease(TxPktSemaphore);
 8004044:	4b01      	ldr	r3, [pc, #4]	; (800404c <HAL_ETH_TxCpltCallback+0x8>)
 8004046:	6818      	ldr	r0, [r3, #0]
 8004048:	f000 bb4c 	b.w	80046e4 <osSemaphoreRelease>
 800404c:	24000478 	.word	0x24000478

08004050 <HAL_ETH_ErrorCallback>:
{
 8004050:	b508      	push	{r3, lr}
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 8004052:	f7fd ff05 	bl	8001e60 <HAL_ETH_GetDMAError>
 8004056:	0603      	lsls	r3, r0, #24
 8004058:	d400      	bmi.n	800405c <HAL_ETH_ErrorCallback+0xc>
}
 800405a:	bd08      	pop	{r3, pc}
     osSemaphoreRelease(RxPktSemaphore);
 800405c:	4b02      	ldr	r3, [pc, #8]	; (8004068 <HAL_ETH_ErrorCallback+0x18>)
 800405e:	6818      	ldr	r0, [r3, #0]
}
 8004060:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     osSemaphoreRelease(RxPktSemaphore);
 8004064:	f000 bb3e 	b.w	80046e4 <osSemaphoreRelease>
 8004068:	2400043c 	.word	0x2400043c

0800406c <ethernetif_init>:
{
 800406c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004070:	4604      	mov	r4, r0
{
 8004072:	b0a2      	sub	sp, #136	; 0x88
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004074:	2800      	cmp	r0, #0
 8004076:	f000 80b3 	beq.w	80041e0 <ethernetif_init+0x174>
  netif->linkoutput = low_level_output;
 800407a:	4b5d      	ldr	r3, [pc, #372]	; (80041f0 <ethernetif_init+0x184>)
  netif->name[0] = IFNAME0;
 800407c:	f247 4173 	movw	r1, #29811	; 0x7473
  netif->output = etharp_output;
 8004080:	4a5c      	ldr	r2, [pc, #368]	; (80041f4 <ethernetif_init+0x188>)
  ETH_MACConfigTypeDef MACConf = {0};
 8004082:	a809      	add	r0, sp, #36	; 0x24
  netif->name[0] = IFNAME0;
 8004084:	85e1      	strh	r1, [r4, #46]	; 0x2e
  ETH_MACConfigTypeDef MACConf = {0};
 8004086:	2100      	movs	r1, #0
  netif->output = etharp_output;
 8004088:	6162      	str	r2, [r4, #20]
  ETH_MACConfigTypeDef MACConf = {0};
 800408a:	2264      	movs	r2, #100	; 0x64
  netif->linkoutput = low_level_output;
 800408c:	61a3      	str	r3, [r4, #24]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800408e:	2701      	movs	r7, #1
  ETH_MACConfigTypeDef MACConf = {0};
 8004090:	f00d fc0c 	bl	80118ac <memset>
  heth.Instance = ETH;
 8004094:	4d58      	ldr	r5, [pc, #352]	; (80041f8 <ethernetif_init+0x18c>)
 8004096:	4b59      	ldr	r3, [pc, #356]	; (80041fc <ethernetif_init+0x190>)
  MACAddr[4] = 0x00;
 8004098:	2100      	movs	r1, #0
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800409a:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8004238 <ethernetif_init+0x1cc>
  hal_eth_init_status = HAL_ETH_Init(&heth);
 800409e:	4628      	mov	r0, r5
  heth.Instance = ETH;
 80040a0:	602b      	str	r3, [r5, #0]
  MACAddr[0] = 0x00;
 80040a2:	4b57      	ldr	r3, [pc, #348]	; (8004200 <ethernetif_init+0x194>)
  MACAddr[4] = 0x00;
 80040a4:	f8ad 1004 	strh.w	r1, [sp, #4]
  MACAddr[0] = 0x00;
 80040a8:	9300      	str	r3, [sp, #0]
  heth.Init.TxDesc = DMATxDscrTab;
 80040aa:	4b56      	ldr	r3, [pc, #344]	; (8004204 <ethernetif_init+0x198>)
  heth.Init.MACAddr = &MACAddr[0];
 80040ac:	f8c5 d004 	str.w	sp, [r5, #4]
  heth.Init.TxDesc = DMATxDscrTab;
 80040b0:	60eb      	str	r3, [r5, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80040b2:	4b55      	ldr	r3, [pc, #340]	; (8004208 <ethernetif_init+0x19c>)
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80040b4:	722f      	strb	r7, [r5, #8]
  heth.Init.RxDesc = DMARxDscrTab;
 80040b6:	612b      	str	r3, [r5, #16]
  heth.Init.RxBuffLen = 1536;
 80040b8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80040bc:	616b      	str	r3, [r5, #20]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 80040be:	f7fd fdb1 	bl	8001c24 <HAL_ETH_Init>
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80040c2:	2234      	movs	r2, #52	; 0x34
 80040c4:	2100      	movs	r1, #0
  hal_eth_init_status = HAL_ETH_Init(&heth);
 80040c6:	4606      	mov	r6, r0
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80040c8:	f108 0004 	add.w	r0, r8, #4
 80040cc:	f00d fbee 	bl	80118ac <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80040d0:	2321      	movs	r3, #33	; 0x21
  LWIP_MEMPOOL_INIT(RX_POOL);
 80040d2:	484e      	ldr	r0, [pc, #312]	; (800420c <ethernetif_init+0x1a0>)
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80040d4:	f8c8 3000 	str.w	r3, [r8]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80040d8:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80040dc:	f8c8 3014 	str.w	r3, [r8, #20]
  LWIP_MEMPOOL_INIT(RX_POOL);
 80040e0:	f005 fcac 	bl	8009a3c <memp_init_pool>
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80040e4:	686b      	ldr	r3, [r5, #4]
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80040e6:	2206      	movs	r2, #6
  RxPktSemaphore = xSemaphoreCreateBinary();
 80040e8:	2100      	movs	r1, #0
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80040ea:	4d49      	ldr	r5, [pc, #292]	; (8004210 <ethernetif_init+0x1a4>)
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80040ec:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80040f0:	781a      	ldrb	r2, [r3, #0]
 80040f2:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80040f6:	785a      	ldrb	r2, [r3, #1]
 80040f8:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80040fc:	789a      	ldrb	r2, [r3, #2]
 80040fe:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004102:	78da      	ldrb	r2, [r3, #3]
 8004104:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004108:	7918      	ldrb	r0, [r3, #4]
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800410a:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800410e:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
  RxPktSemaphore = xSemaphoreCreateBinary();
 8004112:	4638      	mov	r0, r7
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004114:	795b      	ldrb	r3, [r3, #5]
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004116:	f042 020a 	orr.w	r2, r2, #10
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800411a:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  netif->mtu = ETH_MAX_PAYLOAD;
 800411e:	f240 53dc 	movw	r3, #1500	; 0x5dc
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004122:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
  RxPktSemaphore = xSemaphoreCreateBinary();
 8004126:	2203      	movs	r2, #3
  netif->mtu = ETH_MAX_PAYLOAD;
 8004128:	84a3      	strh	r3, [r4, #36]	; 0x24
  RxPktSemaphore = xSemaphoreCreateBinary();
 800412a:	f000 fd0b 	bl	8004b44 <xQueueGenericCreate>
 800412e:	4b39      	ldr	r3, [pc, #228]	; (8004214 <ethernetif_init+0x1a8>)
 8004130:	4602      	mov	r2, r0
  TxPktSemaphore = xSemaphoreCreateBinary();
 8004132:	2100      	movs	r1, #0
 8004134:	4638      	mov	r0, r7
  RxPktSemaphore = xSemaphoreCreateBinary();
 8004136:	601a      	str	r2, [r3, #0]
  TxPktSemaphore = xSemaphoreCreateBinary();
 8004138:	2203      	movs	r2, #3
 800413a:	f000 fd03 	bl	8004b44 <xQueueGenericCreate>
 800413e:	4b36      	ldr	r3, [pc, #216]	; (8004218 <ethernetif_init+0x1ac>)
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8004140:	f10d 0c08 	add.w	ip, sp, #8
  TxPktSemaphore = xSemaphoreCreateBinary();
 8004144:	6018      	str	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8004146:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004148:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800414c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004150:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8004154:	4621      	mov	r1, r4
 8004156:	a802      	add	r0, sp, #8
 8004158:	f000 f9d6 	bl	8004508 <osThreadCreate>
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800415c:	492f      	ldr	r1, [pc, #188]	; (800421c <ethernetif_init+0x1b0>)
 800415e:	4830      	ldr	r0, [pc, #192]	; (8004220 <ethernetif_init+0x1b4>)
 8004160:	f7fc fcf0 	bl	8000b44 <LAN8742_RegisterBusIO>
  LAN8742_Init(&LAN8742);
 8004164:	482e      	ldr	r0, [pc, #184]	; (8004220 <ethernetif_init+0x1b4>)
 8004166:	f7fc fd07 	bl	8000b78 <LAN8742_Init>
  if (hal_eth_init_status == HAL_OK)
 800416a:	bb26      	cbnz	r6, 80041b6 <ethernetif_init+0x14a>
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800416c:	482c      	ldr	r0, [pc, #176]	; (8004220 <ethernetif_init+0x1b4>)
 800416e:	f7fc fd6d 	bl	8000c4c <LAN8742_GetLinkState>
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8004172:	42b8      	cmp	r0, r7
 8004174:	dd2a      	ble.n	80041cc <ethernetif_init+0x160>
      switch (PHYLinkState)
 8004176:	3803      	subs	r0, #3
 8004178:	2802      	cmp	r0, #2
 800417a:	d822      	bhi.n	80041c2 <ethernetif_init+0x156>
 800417c:	4a29      	ldr	r2, [pc, #164]	; (8004224 <ethernetif_init+0x1b8>)
 800417e:	4b2a      	ldr	r3, [pc, #168]	; (8004228 <ethernetif_init+0x1bc>)
 8004180:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8004184:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004188:	a909      	add	r1, sp, #36	; 0x24
 800418a:	481b      	ldr	r0, [pc, #108]	; (80041f8 <ethernetif_init+0x18c>)
 800418c:	f7fd fc30 	bl	80019f0 <HAL_ETH_GetMACConfig>
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004190:	a909      	add	r1, sp, #36	; 0x24
 8004192:	4819      	ldr	r0, [pc, #100]	; (80041f8 <ethernetif_init+0x18c>)
    MACConf.Speed = speed;
 8004194:	e9cd 560e 	strd	r5, r6, [sp, #56]	; 0x38
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004198:	f7fd fcf4 	bl	8001b84 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800419c:	4816      	ldr	r0, [pc, #88]	; (80041f8 <ethernetif_init+0x18c>)
 800419e:	f7fd f997 	bl	80014d0 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 80041a2:	4620      	mov	r0, r4
 80041a4:	f005 fe52 	bl	8009e4c <netif_set_up>
    netif_set_link_up(netif);
 80041a8:	4620      	mov	r0, r4
 80041aa:	f005 fe85 	bl	8009eb8 <netif_set_link_up>
}
 80041ae:	2000      	movs	r0, #0
 80041b0:	b022      	add	sp, #136	; 0x88
 80041b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    Error_Handler();
 80041b6:	f7fc fb37 	bl	8000828 <Error_Handler>
}
 80041ba:	2000      	movs	r0, #0
 80041bc:	b022      	add	sp, #136	; 0x88
 80041be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      switch (PHYLinkState)
 80041c2:	f44f 4580 	mov.w	r5, #16384	; 0x4000
 80041c6:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 80041ca:	e7dd      	b.n	8004188 <ethernetif_init+0x11c>
      netif_set_link_down(netif);
 80041cc:	4620      	mov	r0, r4
 80041ce:	f005 fe97 	bl	8009f00 <netif_set_link_down>
      netif_set_down(netif);
 80041d2:	4620      	mov	r0, r4
 80041d4:	f005 fe54 	bl	8009e80 <netif_set_down>
}
 80041d8:	2000      	movs	r0, #0
 80041da:	b022      	add	sp, #136	; 0x88
 80041dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80041e0:	4b12      	ldr	r3, [pc, #72]	; (800422c <ethernetif_init+0x1c0>)
 80041e2:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 80041e6:	4912      	ldr	r1, [pc, #72]	; (8004230 <ethernetif_init+0x1c4>)
 80041e8:	4812      	ldr	r0, [pc, #72]	; (8004234 <ethernetif_init+0x1c8>)
 80041ea:	f00d fa09 	bl	8011600 <iprintf>
 80041ee:	e744      	b.n	800407a <ethernetif_init+0xe>
 80041f0:	08003eb1 	.word	0x08003eb1
 80041f4:	0800f8c5 	.word	0x0800f8c5
 80041f8:	2400047c 	.word	0x2400047c
 80041fc:	40028000 	.word	0x40028000
 8004200:	00e18000 	.word	0x00e18000
 8004204:	30000100 	.word	0x30000100
 8004208:	30000000 	.word	0x30000000
 800420c:	08012538 	.word	0x08012538
 8004210:	08012440 	.word	0x08012440
 8004214:	2400043c 	.word	0x2400043c
 8004218:	24000478 	.word	0x24000478
 800421c:	24000010 	.word	0x24000010
 8004220:	24000418 	.word	0x24000418
 8004224:	08012500 	.word	0x08012500
 8004228:	0801250c 	.word	0x0801250c
 800422c:	080124a4 	.word	0x080124a4
 8004230:	080124c0 	.word	0x080124c0
 8004234:	080124d0 	.word	0x080124d0
 8004238:	24000440 	.word	0x24000440

0800423c <sys_now>:
  return HAL_GetTick();
 800423c:	f7fc bd90 	b.w	8000d60 <HAL_GetTick>

08004240 <HAL_ETH_MspInit>:
  if(ethHandle->Instance==ETH)
 8004240:	4b4b      	ldr	r3, [pc, #300]	; (8004370 <HAL_ETH_MspInit+0x130>)
 8004242:	6802      	ldr	r2, [r0, #0]
{
 8004244:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(ethHandle->Instance==ETH)
 8004246:	429a      	cmp	r2, r3
{
 8004248:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800424a:	f04f 0400 	mov.w	r4, #0
 800424e:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8004252:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8004256:	940b      	str	r4, [sp, #44]	; 0x2c
  if(ethHandle->Instance==ETH)
 8004258:	d001      	beq.n	800425e <HAL_ETH_MspInit+0x1e>
}
 800425a:	b00d      	add	sp, #52	; 0x34
 800425c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800425e:	4b45      	ldr	r3, [pc, #276]	; (8004374 <HAL_ETH_MspInit+0x134>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004260:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004262:	2132      	movs	r1, #50	; 0x32
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004264:	2603      	movs	r6, #3
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8004266:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800426a:	250b      	movs	r5, #11
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800426c:	4842      	ldr	r0, [pc, #264]	; (8004378 <HAL_ETH_MspInit+0x138>)
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800426e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004272:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8004276:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800427a:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800427e:	9200      	str	r2, [sp, #0]
 8004280:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8004282:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8004286:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800428a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 800428e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8004292:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8004296:	9201      	str	r2, [sp, #4]
 8004298:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800429a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800429e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80042a2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80042a6:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80042aa:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80042ae:	9202      	str	r2, [sp, #8]
 80042b0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80042b2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80042b6:	f042 0204 	orr.w	r2, r2, #4
 80042ba:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80042be:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80042c2:	f002 0204 	and.w	r2, r2, #4
 80042c6:	9203      	str	r2, [sp, #12]
 80042c8:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042ca:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80042ce:	f042 0201 	orr.w	r2, r2, #1
 80042d2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80042d6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80042da:	f002 0201 	and.w	r2, r2, #1
 80042de:	9204      	str	r2, [sp, #16]
 80042e0:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042e2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80042e6:	433a      	orrs	r2, r7
 80042e8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80042ec:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80042f0:	403a      	ands	r2, r7
 80042f2:	9205      	str	r2, [sp, #20]
 80042f4:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80042f6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80042fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042fe:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004302:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004306:	960a      	str	r6, [sp, #40]	; 0x28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004308:	f003 0340 	and.w	r3, r3, #64	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800430c:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800430e:	e9cd 1707 	strd	r1, r7, [sp, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004312:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004314:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004316:	9b06      	ldr	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004318:	f7fd fda6 	bl	8001e68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800431c:	2386      	movs	r3, #134	; 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800431e:	a907      	add	r1, sp, #28
 8004320:	4816      	ldr	r0, [pc, #88]	; (800437c <HAL_ETH_MspInit+0x13c>)
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004322:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004324:	e9cd 7408 	strd	r7, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004328:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800432c:	f7fd fd9c 	bl	8001e68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004330:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004334:	a907      	add	r1, sp, #28
 8004336:	4812      	ldr	r0, [pc, #72]	; (8004380 <HAL_ETH_MspInit+0x140>)
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004338:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800433a:	e9cd 7408 	strd	r7, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800433e:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004342:	f7fd fd91 	bl	8001e68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8004346:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800434a:	a907      	add	r1, sp, #28
 800434c:	480d      	ldr	r0, [pc, #52]	; (8004384 <HAL_ETH_MspInit+0x144>)
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800434e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004350:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004352:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004354:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004358:	f7fd fd86 	bl	8001e68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800435c:	4622      	mov	r2, r4
 800435e:	2105      	movs	r1, #5
 8004360:	203d      	movs	r0, #61	; 0x3d
 8004362:	f7fc fd1f 	bl	8000da4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8004366:	203d      	movs	r0, #61	; 0x3d
 8004368:	f7fc fd5a 	bl	8000e20 <HAL_NVIC_EnableIRQ>
}
 800436c:	b00d      	add	sp, #52	; 0x34
 800436e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004370:	40028000 	.word	0x40028000
 8004374:	58024400 	.word	0x58024400
 8004378:	58020800 	.word	0x58020800
 800437c:	58020000 	.word	0x58020000
 8004380:	58020400 	.word	0x58020400
 8004384:	58021800 	.word	0x58021800

08004388 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8004388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800438c:	b09b      	sub	sp, #108	; 0x6c
  ETH_MACConfigTypeDef MACConf = {0};
  int32_t PHYLinkState = 0;
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800438e:	2700      	movs	r7, #0
{
 8004390:	4604      	mov	r4, r0
  ETH_MACConfigTypeDef MACConf = {0};
 8004392:	2264      	movs	r2, #100	; 0x64
 8004394:	2100      	movs	r1, #0
 8004396:	a801      	add	r0, sp, #4
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8004398:	46b9      	mov	r9, r7
 800439a:	46b8      	mov	r8, r7
 800439c:	f8df b098 	ldr.w	fp, [pc, #152]	; 8004438 <ethernet_link_thread+0xb0>
  ETH_MACConfigTypeDef MACConf = {0};
 80043a0:	f00d fa84 	bl	80118ac <memset>

  struct netif *netif = (struct netif *) argument;
 80043a4:	f8df a094 	ldr.w	sl, [pc, #148]	; 800443c <ethernet_link_thread+0xb4>

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80043a8:	4d21      	ldr	r5, [pc, #132]	; (8004430 <ethernet_link_thread+0xa8>)
    }

    if(linkchanged)
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80043aa:	4e22      	ldr	r6, [pc, #136]	; (8004434 <ethernet_link_thread+0xac>)
 80043ac:	e022      	b.n	80043f4 <ethernet_link_thread+0x6c>
  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80043ae:	2801      	cmp	r0, #1
 80043b0:	dd34      	ble.n	800441c <ethernet_link_thread+0x94>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80043b2:	075b      	lsls	r3, r3, #29
 80043b4:	d41b      	bmi.n	80043ee <ethernet_link_thread+0x66>
    switch (PHYLinkState)
 80043b6:	3802      	subs	r0, #2
 80043b8:	2803      	cmp	r0, #3
 80043ba:	d82b      	bhi.n	8004414 <ethernet_link_thread+0x8c>
 80043bc:	f85b 9020 	ldr.w	r9, [fp, r0, lsl #2]
 80043c0:	f85a 7020 	ldr.w	r7, [sl, r0, lsl #2]
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80043c4:	a901      	add	r1, sp, #4
 80043c6:	4630      	mov	r0, r6
 80043c8:	f7fd fb12 	bl	80019f0 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
      MACConf.Speed = speed;
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80043cc:	a901      	add	r1, sp, #4
 80043ce:	4630      	mov	r0, r6
      HAL_ETH_Start_IT(&heth);
      netif_set_up(netif);
      netif_set_link_up(netif);
 80043d0:	f04f 0801 	mov.w	r8, #1
      MACConf.Speed = speed;
 80043d4:	e9cd 9706 	strd	r9, r7, [sp, #24]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80043d8:	f7fd fbd4 	bl	8001b84 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 80043dc:	4630      	mov	r0, r6
 80043de:	f7fd f877 	bl	80014d0 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 80043e2:	4620      	mov	r0, r4
 80043e4:	f005 fd32 	bl	8009e4c <netif_set_up>
      netif_set_link_up(netif);
 80043e8:	4620      	mov	r0, r4
 80043ea:	f005 fd65 	bl	8009eb8 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 80043ee:	2064      	movs	r0, #100	; 0x64
 80043f0:	f000 f8bc 	bl	800456c <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80043f4:	4628      	mov	r0, r5
 80043f6:	f7fc fc29 	bl	8000c4c <LAN8742_GetLinkState>
  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80043fa:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80043fe:	0759      	lsls	r1, r3, #29
 8004400:	ea4f 0293 	mov.w	r2, r3, lsr #2
 8004404:	d4d3      	bmi.n	80043ae <ethernet_link_thread+0x26>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8004406:	07d2      	lsls	r2, r2, #31
 8004408:	d4f1      	bmi.n	80043ee <ethernet_link_thread+0x66>
 800440a:	2801      	cmp	r0, #1
 800440c:	ddef      	ble.n	80043ee <ethernet_link_thread+0x66>
    switch (PHYLinkState)
 800440e:	3802      	subs	r0, #2
 8004410:	2803      	cmp	r0, #3
 8004412:	d9d3      	bls.n	80043bc <ethernet_link_thread+0x34>
    if(linkchanged)
 8004414:	f1b8 0f00 	cmp.w	r8, #0
 8004418:	d0e9      	beq.n	80043ee <ethernet_link_thread+0x66>
 800441a:	e7d3      	b.n	80043c4 <ethernet_link_thread+0x3c>
    HAL_ETH_Stop_IT(&heth);
 800441c:	4630      	mov	r0, r6
 800441e:	f7fd f8a7 	bl	8001570 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8004422:	4620      	mov	r0, r4
 8004424:	f005 fd2c 	bl	8009e80 <netif_set_down>
    netif_set_link_down(netif);
 8004428:	4620      	mov	r0, r4
 800442a:	f005 fd69 	bl	8009f00 <netif_set_link_down>
 800442e:	e7de      	b.n	80043ee <ethernet_link_thread+0x66>
 8004430:	24000418 	.word	0x24000418
 8004434:	2400047c 	.word	0x2400047c
 8004438:	08012518 	.word	0x08012518
 800443c:	08012528 	.word	0x08012528

08004440 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8004440:	b530      	push	{r4, r5, lr}
 8004442:	4604      	mov	r4, r0
 8004444:	b083      	sub	sp, #12
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8004446:	480d      	ldr	r0, [pc, #52]	; (800447c <HAL_ETH_RxAllocateCallback+0x3c>)
 8004448:	f005 fb40 	bl	8009acc <memp_malloc_pool>
  if (p)
 800444c:	4603      	mov	r3, r0
 800444e:	b178      	cbz	r0, 8004470 <HAL_ETH_RxAllocateCallback+0x30>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8004450:	f100 0520 	add.w	r5, r0, #32
    p->custom_free_function = pbuf_free_custom;
 8004454:	4a0a      	ldr	r2, [pc, #40]	; (8004480 <HAL_ETH_RxAllocateCallback+0x40>)
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8004456:	2100      	movs	r1, #0
 8004458:	f44f 60c0 	mov.w	r0, #1536	; 0x600
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800445c:	6025      	str	r5, [r4, #0]
    p->custom_free_function = pbuf_free_custom;
 800445e:	611a      	str	r2, [r3, #16]
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8004460:	2241      	movs	r2, #65	; 0x41
 8004462:	9001      	str	r0, [sp, #4]
 8004464:	4608      	mov	r0, r1
 8004466:	9500      	str	r5, [sp, #0]
 8004468:	f005 fe5c 	bl	800a124 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800446c:	b003      	add	sp, #12
 800446e:	bd30      	pop	{r4, r5, pc}
    RxAllocStatus = RX_ALLOC_ERROR;
 8004470:	4a04      	ldr	r2, [pc, #16]	; (8004484 <HAL_ETH_RxAllocateCallback+0x44>)
 8004472:	2101      	movs	r1, #1
    *buff = NULL;
 8004474:	6020      	str	r0, [r4, #0]
    RxAllocStatus = RX_ALLOC_ERROR;
 8004476:	7011      	strb	r1, [r2, #0]
}
 8004478:	b003      	add	sp, #12
 800447a:	bd30      	pop	{r4, r5, pc}
 800447c:	08012538 	.word	0x08012538
 8004480:	08003fa5 	.word	0x08003fa5
 8004484:	24000438 	.word	0x24000438

08004488 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8004488:	b430      	push	{r4, r5}
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
  struct pbuf *p = NULL;

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
  p->next = NULL;
 800448a:	2500      	movs	r5, #0
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800448c:	f1a2 0420 	sub.w	r4, r2, #32
  p->tot_len = 0;
  p->len = Length;
 8004490:	f822 3c16 	strh.w	r3, [r2, #-22]
  p->next = NULL;
 8004494:	f842 5c20 	str.w	r5, [r2, #-32]
  p->tot_len = 0;
 8004498:	f822 5c18 	strh.w	r5, [r2, #-24]

  /* Chain the buffer. */
  if (!*ppStart)
 800449c:	6805      	ldr	r5, [r0, #0]
 800449e:	b1f5      	cbz	r5, 80044de <HAL_ETH_RxLinkCallback+0x56>
    *ppStart = p;
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80044a0:	680d      	ldr	r5, [r1, #0]
 80044a2:	602c      	str	r4, [r5, #0]
  }
  *ppEnd  = p;
 80044a4:	600c      	str	r4, [r1, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80044a6:	6801      	ldr	r1, [r0, #0]
 80044a8:	b129      	cbz	r1, 80044b6 <HAL_ETH_RxLinkCallback+0x2e>
  {
    p->tot_len += Length;
 80044aa:	8908      	ldrh	r0, [r1, #8]
 80044ac:	4418      	add	r0, r3
 80044ae:	8108      	strh	r0, [r1, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80044b0:	6809      	ldr	r1, [r1, #0]
 80044b2:	2900      	cmp	r1, #0
 80044b4:	d1f9      	bne.n	80044aa <HAL_ETH_RxLinkCallback+0x22>
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 80044b6:	b183      	cbz	r3, 80044da <HAL_ETH_RxLinkCallback+0x52>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80044b8:	f002 011f 	and.w	r1, r2, #31
 80044bc:	4419      	add	r1, r3
 80044be:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80044c2:	4808      	ldr	r0, [pc, #32]	; (80044e4 <HAL_ETH_RxLinkCallback+0x5c>)
 80044c4:	4411      	add	r1, r2
 80044c6:	f8c0 225c 	str.w	r2, [r0, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80044ca:	3220      	adds	r2, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 80044cc:	1a8b      	subs	r3, r1, r2
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	dcf9      	bgt.n	80044c6 <HAL_ETH_RxLinkCallback+0x3e>
 80044d2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80044d6:	f3bf 8f6f 	isb	sy

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);

/* USER CODE END HAL ETH RxLinkCallback */
}
 80044da:	bc30      	pop	{r4, r5}
 80044dc:	4770      	bx	lr
    *ppStart = p;
 80044de:	6004      	str	r4, [r0, #0]
 80044e0:	e7e0      	b.n	80044a4 <HAL_ETH_RxLinkCallback+0x1c>
 80044e2:	bf00      	nop
 80044e4:	e000ed00 	.word	0xe000ed00

080044e8 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 80044e8:	f005 bed8 	b.w	800a29c <pbuf_free>

080044ec <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80044ec:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80044ee:	f001 f999 	bl	8005824 <vTaskStartScheduler>
  
  return osOK;
}
 80044f2:	2000      	movs	r0, #0
 80044f4:	bd08      	pop	{r3, pc}
 80044f6:	bf00      	nop

080044f8 <osKernelSysTick>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044f8:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 80044fc:	b10b      	cbz	r3, 8004502 <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
 80044fe:	f001 b9e1 	b.w	80058c4 <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
 8004502:	f001 b9d9 	b.w	80058b8 <xTaskGetTickCount>
 8004506:	bf00      	nop

08004508 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004508:	b570      	push	{r4, r5, r6, lr}
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800450a:	6944      	ldr	r4, [r0, #20]
{
 800450c:	b086      	sub	sp, #24
 800450e:	4684      	mov	ip, r0
 8004510:	460b      	mov	r3, r1
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004512:	b1ac      	cbz	r4, 8004540 <osThreadCreate+0x38>
 8004514:	6986      	ldr	r6, [r0, #24]
 8004516:	b19e      	cbz	r6, 8004540 <osThreadCreate+0x38>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004518:	f9bc e008 	ldrsh.w	lr, [ip, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800451c:	f8dc 1000 	ldr.w	r1, [ip]
  if (priority != osPriorityError) {
 8004520:	f1be 0f84 	cmp.w	lr, #132	; 0x84
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004524:	f8dc 2010 	ldr.w	r2, [ip, #16]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004528:	6840      	ldr	r0, [r0, #4]
    fpriority += (priority - osPriorityIdle);
 800452a:	bf14      	ite	ne
 800452c:	f10e 0503 	addne.w	r5, lr, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004530:	2500      	moveq	r5, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004532:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8004536:	9500      	str	r5, [sp, #0]
 8004538:	f001 f908 	bl	800574c <xTaskCreateStatic>
    return NULL;
  }     
#endif
  
  return handle;
}
 800453c:	b006      	add	sp, #24
 800453e:	bd70      	pop	{r4, r5, r6, pc}
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004540:	f9bc 4008 	ldrsh.w	r4, [ip, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004544:	f8bc 2010 	ldrh.w	r2, [ip, #16]
  if (priority != osPriorityError) {
 8004548:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 800454a:	bf14      	ite	ne
 800454c:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800454e:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004550:	e9dc 1000 	ldrd	r1, r0, [ip]
 8004554:	9400      	str	r4, [sp, #0]
 8004556:	ac05      	add	r4, sp, #20
 8004558:	9401      	str	r4, [sp, #4]
 800455a:	f001 f931 	bl	80057c0 <xTaskCreate>
 800455e:	2801      	cmp	r0, #1
  return handle;
 8004560:	bf0c      	ite	eq
 8004562:	9805      	ldreq	r0, [sp, #20]
      return NULL;
 8004564:	2000      	movne	r0, #0
}
 8004566:	b006      	add	sp, #24
 8004568:	bd70      	pop	{r4, r5, r6, pc}
 800456a:	bf00      	nop

0800456c <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800456c:	2801      	cmp	r0, #1
{
 800456e:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004570:	bf38      	it	cc
 8004572:	2001      	movcc	r0, #1
 8004574:	f001 fb06 	bl	8005b84 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004578:	2000      	movs	r0, #0
 800457a:	bd08      	pop	{r3, pc}

0800457c <osMutexCreate>:
{
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800457c:	6841      	ldr	r1, [r0, #4]
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800457e:	2001      	movs	r0, #1
  if (mutex_def->controlblock != NULL) {
 8004580:	b109      	cbz	r1, 8004586 <osMutexCreate+0xa>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8004582:	f000 bc0b 	b.w	8004d9c <xQueueCreateMutexStatic>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8004586:	f000 bc3b 	b.w	8004e00 <xQueueCreateMutex>
 800458a:	bf00      	nop

0800458c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800458c:	b510      	push	{r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800458e:	2400      	movs	r4, #0
{
 8004590:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;  
 8004592:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 8004594:	b310      	cbz	r0, 80045dc <osMutexWait+0x50>
 8004596:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800459a:	b933      	cbnz	r3, 80045aa <osMutexWait+0x1e>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800459c:	f000 fdce 	bl	800513c <xQueueSemaphoreTake>
 80045a0:	2801      	cmp	r0, #1
 80045a2:	d118      	bne.n	80045d6 <osMutexWait+0x4a>
    return osErrorOS;
  }
  
  return osOK;
 80045a4:	2000      	movs	r0, #0
}
 80045a6:	b002      	add	sp, #8
 80045a8:	bd10      	pop	{r4, pc}
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80045aa:	aa01      	add	r2, sp, #4
 80045ac:	4621      	mov	r1, r4
 80045ae:	f000 fea1 	bl	80052f4 <xQueueReceiveFromISR>
 80045b2:	2801      	cmp	r0, #1
 80045b4:	d10f      	bne.n	80045d6 <osMutexWait+0x4a>
	portEND_SWITCHING_ISR(taskWoken);
 80045b6:	9b01      	ldr	r3, [sp, #4]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d0f3      	beq.n	80045a4 <osMutexWait+0x18>
 80045bc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80045c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045c4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80045c8:	f3bf 8f4f 	dsb	sy
 80045cc:	f3bf 8f6f 	isb	sy
  return osOK;
 80045d0:	4620      	mov	r0, r4
}
 80045d2:	b002      	add	sp, #8
 80045d4:	bd10      	pop	{r4, pc}
    return osErrorOS;
 80045d6:	20ff      	movs	r0, #255	; 0xff
}
 80045d8:	b002      	add	sp, #8
 80045da:	bd10      	pop	{r4, pc}
    return osErrorParameter;
 80045dc:	2080      	movs	r0, #128	; 0x80
}
 80045de:	b002      	add	sp, #8
 80045e0:	bd10      	pop	{r4, pc}
 80045e2:	bf00      	nop

080045e4 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80045e4:	b510      	push	{r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 80045e6:	2400      	movs	r4, #0
{
 80045e8:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;
 80045ea:	9401      	str	r4, [sp, #4]
 80045ec:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 80045f0:	b19b      	cbz	r3, 800461a <osMutexRelease+0x36>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80045f2:	a901      	add	r1, sp, #4
 80045f4:	f000 fc88 	bl	8004f08 <xQueueGiveFromISR>
 80045f8:	2801      	cmp	r0, #1
 80045fa:	d114      	bne.n	8004626 <osMutexRelease+0x42>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 80045fc:	9b01      	ldr	r3, [sp, #4]
 80045fe:	b1ab      	cbz	r3, 800462c <osMutexRelease+0x48>
 8004600:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004604:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004608:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800460c:	f3bf 8f4f 	dsb	sy
 8004610:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8004614:	4620      	mov	r0, r4
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 8004616:	b002      	add	sp, #8
 8004618:	bd10      	pop	{r4, pc}
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800461a:	461a      	mov	r2, r3
 800461c:	4619      	mov	r1, r3
 800461e:	f000 faf9 	bl	8004c14 <xQueueGenericSend>
 8004622:	2801      	cmp	r0, #1
 8004624:	d002      	beq.n	800462c <osMutexRelease+0x48>
    result = osErrorOS;
 8004626:	20ff      	movs	r0, #255	; 0xff
}
 8004628:	b002      	add	sp, #8
 800462a:	bd10      	pop	{r4, pc}
  osStatus result = osOK;
 800462c:	2000      	movs	r0, #0
}
 800462e:	b002      	add	sp, #8
 8004630:	bd10      	pop	{r4, pc}
 8004632:	bf00      	nop

08004634 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8004634:	b530      	push	{r4, r5, lr}
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8004636:	6844      	ldr	r4, [r0, #4]
{ 
 8004638:	b083      	sub	sp, #12
 800463a:	4608      	mov	r0, r1
  if (semaphore_def->controlblock != NULL){
 800463c:	b194      	cbz	r4, 8004664 <osSemaphoreCreate+0x30>
    if (count == 1) {
 800463e:	2901      	cmp	r1, #1
 8004640:	d005      	beq.n	800464e <osSemaphoreCreate+0x1a>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 8004642:	4622      	mov	r2, r4
#else
    return NULL;
#endif
  }
#endif
}
 8004644:	b003      	add	sp, #12
 8004646:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 800464a:	f000 baa1 	b.w	8004b90 <xQueueCreateCountingSemaphoreStatic>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800464e:	2200      	movs	r2, #0
 8004650:	2503      	movs	r5, #3
 8004652:	4623      	mov	r3, r4
 8004654:	9500      	str	r5, [sp, #0]
 8004656:	4611      	mov	r1, r2
 8004658:	f000 fa26 	bl	8004aa8 <xQueueGenericCreateStatic>
 800465c:	4605      	mov	r5, r0
}
 800465e:	4628      	mov	r0, r5
 8004660:	b003      	add	sp, #12
 8004662:	bd30      	pop	{r4, r5, pc}
    if (count == 1) {
 8004664:	2901      	cmp	r1, #1
 8004666:	d004      	beq.n	8004672 <osSemaphoreCreate+0x3e>
}
 8004668:	b003      	add	sp, #12
 800466a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return xSemaphoreCreateCounting(count, count);
 800466e:	f000 bab3 	b.w	8004bd8 <xQueueCreateCountingSemaphore>
      vSemaphoreCreateBinary(sema);
 8004672:	2203      	movs	r2, #3
 8004674:	4621      	mov	r1, r4
 8004676:	f000 fa65 	bl	8004b44 <xQueueGenericCreate>
 800467a:	4605      	mov	r5, r0
 800467c:	2800      	cmp	r0, #0
 800467e:	d0ee      	beq.n	800465e <osSemaphoreCreate+0x2a>
 8004680:	4623      	mov	r3, r4
 8004682:	4622      	mov	r2, r4
 8004684:	4621      	mov	r1, r4
 8004686:	f000 fac5 	bl	8004c14 <xQueueGenericSend>
 800468a:	e7e8      	b.n	800465e <osSemaphoreCreate+0x2a>

0800468c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800468c:	b510      	push	{r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800468e:	2400      	movs	r4, #0
{
 8004690:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;  
 8004692:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 8004694:	b310      	cbz	r0, 80046dc <osSemaphoreWait+0x50>
 8004696:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800469a:	b933      	cbnz	r3, 80046aa <osSemaphoreWait+0x1e>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800469c:	f000 fd4e 	bl	800513c <xQueueSemaphoreTake>
 80046a0:	2801      	cmp	r0, #1
 80046a2:	d118      	bne.n	80046d6 <osSemaphoreWait+0x4a>
    return osErrorOS;
  }
  
  return osOK;
 80046a4:	2000      	movs	r0, #0
}
 80046a6:	b002      	add	sp, #8
 80046a8:	bd10      	pop	{r4, pc}
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80046aa:	aa01      	add	r2, sp, #4
 80046ac:	4621      	mov	r1, r4
 80046ae:	f000 fe21 	bl	80052f4 <xQueueReceiveFromISR>
 80046b2:	2801      	cmp	r0, #1
 80046b4:	d10f      	bne.n	80046d6 <osSemaphoreWait+0x4a>
	portEND_SWITCHING_ISR(taskWoken);
 80046b6:	9b01      	ldr	r3, [sp, #4]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d0f3      	beq.n	80046a4 <osSemaphoreWait+0x18>
 80046bc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80046c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046c4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80046c8:	f3bf 8f4f 	dsb	sy
 80046cc:	f3bf 8f6f 	isb	sy
  return osOK;
 80046d0:	4620      	mov	r0, r4
}
 80046d2:	b002      	add	sp, #8
 80046d4:	bd10      	pop	{r4, pc}
    return osErrorOS;
 80046d6:	20ff      	movs	r0, #255	; 0xff
}
 80046d8:	b002      	add	sp, #8
 80046da:	bd10      	pop	{r4, pc}
    return osErrorParameter;
 80046dc:	2080      	movs	r0, #128	; 0x80
}
 80046de:	b002      	add	sp, #8
 80046e0:	bd10      	pop	{r4, pc}
 80046e2:	bf00      	nop

080046e4 <osSemaphoreRelease>:
 80046e4:	b510      	push	{r4, lr}
 80046e6:	2400      	movs	r4, #0
 80046e8:	b082      	sub	sp, #8
 80046ea:	9401      	str	r4, [sp, #4]
 80046ec:	f3ef 8305 	mrs	r3, IPSR
 80046f0:	b19b      	cbz	r3, 800471a <osSemaphoreRelease+0x36>
 80046f2:	a901      	add	r1, sp, #4
 80046f4:	f000 fc08 	bl	8004f08 <xQueueGiveFromISR>
 80046f8:	2801      	cmp	r0, #1
 80046fa:	d114      	bne.n	8004726 <osSemaphoreRelease+0x42>
 80046fc:	9b01      	ldr	r3, [sp, #4]
 80046fe:	b1ab      	cbz	r3, 800472c <osSemaphoreRelease+0x48>
 8004700:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004704:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004708:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800470c:	f3bf 8f4f 	dsb	sy
 8004710:	f3bf 8f6f 	isb	sy
 8004714:	4620      	mov	r0, r4
 8004716:	b002      	add	sp, #8
 8004718:	bd10      	pop	{r4, pc}
 800471a:	461a      	mov	r2, r3
 800471c:	4619      	mov	r1, r3
 800471e:	f000 fa79 	bl	8004c14 <xQueueGenericSend>
 8004722:	2801      	cmp	r0, #1
 8004724:	d002      	beq.n	800472c <osSemaphoreRelease+0x48>
 8004726:	20ff      	movs	r0, #255	; 0xff
 8004728:	b002      	add	sp, #8
 800472a:	bd10      	pop	{r4, pc}
 800472c:	2000      	movs	r0, #0
 800472e:	b002      	add	sp, #8
 8004730:	bd10      	pop	{r4, pc}
 8004732:	bf00      	nop

08004734 <osSemaphoreDelete>:
 8004734:	b510      	push	{r4, lr}
 8004736:	f3ef 8405 	mrs	r4, IPSR
 800473a:	b91c      	cbnz	r4, 8004744 <osSemaphoreDelete+0x10>
 800473c:	f000 fe5c 	bl	80053f8 <vQueueDelete>
 8004740:	4620      	mov	r0, r4
 8004742:	bd10      	pop	{r4, pc}
 8004744:	2482      	movs	r4, #130	; 0x82
 8004746:	4620      	mov	r0, r4
 8004748:	bd10      	pop	{r4, pc}
 800474a:	bf00      	nop

0800474c <osMessageCreate>:
{
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800474c:	6882      	ldr	r2, [r0, #8]
 800474e:	b15a      	cbz	r2, 8004768 <osMessageCreate+0x1c>
 8004750:	68c3      	ldr	r3, [r0, #12]
 8004752:	b14b      	cbz	r3, 8004768 <osMessageCreate+0x1c>
{
 8004754:	b510      	push	{r4, lr}
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004756:	2400      	movs	r4, #0
{
 8004758:	b082      	sub	sp, #8
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800475a:	e9d0 0100 	ldrd	r0, r1, [r0]
 800475e:	9400      	str	r4, [sp, #0]
 8004760:	f000 f9a2 	bl	8004aa8 <xQueueGenericCreateStatic>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004764:	b002      	add	sp, #8
 8004766:	bd10      	pop	{r4, pc}
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004768:	2200      	movs	r2, #0
 800476a:	e9d0 0100 	ldrd	r0, r1, [r0]
 800476e:	f000 b9e9 	b.w	8004b44 <xQueueGenericCreate>
 8004772:	bf00      	nop

08004774 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8004774:	b510      	push	{r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 8004776:	2400      	movs	r4, #0
{
 8004778:	b084      	sub	sp, #16
 800477a:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800477c:	9403      	str	r4, [sp, #12]
 800477e:	f3ef 8305 	mrs	r3, IPSR
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
  }
  
  if (inHandlerMode()) {
 8004782:	b15b      	cbz	r3, 800479c <osMessagePut+0x28>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8004784:	4623      	mov	r3, r4
 8004786:	aa03      	add	r2, sp, #12
 8004788:	a901      	add	r1, sp, #4
 800478a:	f000 fb53 	bl	8004e34 <xQueueGenericSendFromISR>
 800478e:	2801      	cmp	r0, #1
 8004790:	d10c      	bne.n	80047ac <osMessagePut+0x38>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004792:	9b03      	ldr	r3, [sp, #12]
 8004794:	b96b      	cbnz	r3, 80047b2 <osMessagePut+0x3e>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 8004796:	2000      	movs	r0, #0
}
 8004798:	b004      	add	sp, #16
 800479a:	bd10      	pop	{r4, pc}
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800479c:	2a01      	cmp	r2, #1
 800479e:	a901      	add	r1, sp, #4
 80047a0:	bf38      	it	cc
 80047a2:	2201      	movcc	r2, #1
 80047a4:	f000 fa36 	bl	8004c14 <xQueueGenericSend>
 80047a8:	2801      	cmp	r0, #1
 80047aa:	d0f4      	beq.n	8004796 <osMessagePut+0x22>
      return osErrorOS;
 80047ac:	20ff      	movs	r0, #255	; 0xff
}
 80047ae:	b004      	add	sp, #16
 80047b0:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 80047b2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80047b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047ba:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80047be:	f3bf 8f4f 	dsb	sy
 80047c2:	f3bf 8f6f 	isb	sy
  return osOK;
 80047c6:	4620      	mov	r0, r4
}
 80047c8:	b004      	add	sp, #16
 80047ca:	bd10      	pop	{r4, pc}

080047cc <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80047cc:	b570      	push	{r4, r5, r6, lr}
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 80047ce:	2600      	movs	r6, #0
{
 80047d0:	b084      	sub	sp, #16
 80047d2:	4604      	mov	r4, r0
  event.def.message_id = queue_id;
 80047d4:	e9cd 6102 	strd	r6, r1, [sp, #8]
  
  if (queue_id == NULL) {
 80047d8:	b391      	cbz	r1, 8004840 <osMessageGet+0x74>
    event.status = osErrorParameter;
    return event;
  }
  
  taskWoken = pdFALSE;
 80047da:	460b      	mov	r3, r1
 80047dc:	9600      	str	r6, [sp, #0]
 80047de:	f3ef 8105 	mrs	r1, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 80047e2:	b999      	cbnz	r1, 800480c <osMessageGet+0x40>
      event.status = osOK;
    }
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80047e4:	a902      	add	r1, sp, #8
 80047e6:	4618      	mov	r0, r3
 80047e8:	4615      	mov	r5, r2
 80047ea:	f000 fbe5 	bl	8004fb8 <xQueueReceive>
 80047ee:	2801      	cmp	r0, #1
 80047f0:	d029      	beq.n	8004846 <osMessageGet+0x7a>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80047f2:	1e2a      	subs	r2, r5, #0
 80047f4:	bf18      	it	ne
 80047f6:	2201      	movne	r2, #1
 80047f8:	0192      	lsls	r2, r2, #6
 80047fa:	9201      	str	r2, [sp, #4]
    return event;
 80047fc:	ab04      	add	r3, sp, #16
 80047fe:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8004802:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
  }
  
  return event;
}
 8004806:	4620      	mov	r0, r4
 8004808:	b004      	add	sp, #16
 800480a:	bd70      	pop	{r4, r5, r6, pc}
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800480c:	4618      	mov	r0, r3
 800480e:	466a      	mov	r2, sp
 8004810:	a902      	add	r1, sp, #8
 8004812:	f000 fd6f 	bl	80052f4 <xQueueReceiveFromISR>
 8004816:	f1a0 0001 	sub.w	r0, r0, #1
    portEND_SWITCHING_ISR(taskWoken);
 800481a:	9b00      	ldr	r3, [sp, #0]
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800481c:	fab0 f080 	clz	r0, r0
 8004820:	0940      	lsrs	r0, r0, #5
 8004822:	0100      	lsls	r0, r0, #4
 8004824:	9001      	str	r0, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 8004826:	2b00      	cmp	r3, #0
 8004828:	d0e8      	beq.n	80047fc <osMessageGet+0x30>
 800482a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800482e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004832:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004836:	f3bf 8f4f 	dsb	sy
 800483a:	f3bf 8f6f 	isb	sy
 800483e:	e7dd      	b.n	80047fc <osMessageGet+0x30>
    event.status = osErrorParameter;
 8004840:	2380      	movs	r3, #128	; 0x80
 8004842:	9301      	str	r3, [sp, #4]
    return event;
 8004844:	e7da      	b.n	80047fc <osMessageGet+0x30>
      event.status = osEventMessage;
 8004846:	2310      	movs	r3, #16
 8004848:	9301      	str	r3, [sp, #4]
 800484a:	e7d7      	b.n	80047fc <osMessageGet+0x30>

0800484c <osMessageWaiting>:
 800484c:	f3ef 8305 	mrs	r3, IPSR
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
  if (inHandlerMode()) {
 8004850:	b10b      	cbz	r3, 8004856 <osMessageWaiting+0xa>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8004852:	f000 bdc5 	b.w	80053e0 <uxQueueMessagesWaitingFromISR>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8004856:	f000 bdad 	b.w	80053b4 <uxQueueMessagesWaiting>
 800485a:	bf00      	nop

0800485c <osMessageDelete>:
 800485c:	b510      	push	{r4, lr}
 800485e:	f3ef 8405 	mrs	r4, IPSR
 8004862:	b91c      	cbnz	r4, 800486c <osMessageDelete+0x10>
 8004864:	f000 fdc8 	bl	80053f8 <vQueueDelete>
 8004868:	4620      	mov	r0, r4
 800486a:	bd10      	pop	{r4, pc}
 800486c:	2482      	movs	r4, #130	; 0x82
 800486e:	4620      	mov	r0, r4
 8004870:	bd10      	pop	{r4, pc}
 8004872:	bf00      	nop

08004874 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004874:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004878:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800487c:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800487e:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004880:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004882:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004884:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop

0800488c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800488c:	2300      	movs	r3, #0
 800488e:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop

08004894 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8004894:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8004896:	6802      	ldr	r2, [r0, #0]
{
 8004898:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800489a:	689c      	ldr	r4, [r3, #8]
	( pxList->uxNumberOfItems )++;
 800489c:	3201      	adds	r2, #1
	pxNewListItem->pxNext = pxIndex;
 800489e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80048a0:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80048a2:	689c      	ldr	r4, [r3, #8]
 80048a4:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80048a6:	6099      	str	r1, [r3, #8]
}
 80048a8:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 80048ac:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80048ae:	6002      	str	r2, [r0, #0]
}
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop

080048b4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80048b4:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80048b6:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80048b8:	1c6b      	adds	r3, r5, #1
 80048ba:	d010      	beq.n	80048de <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80048bc:	f100 0308 	add.w	r3, r0, #8
 80048c0:	461c      	mov	r4, r3
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	42aa      	cmp	r2, r5
 80048c8:	d9fa      	bls.n	80048c0 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80048ca:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 80048cc:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 80048ce:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80048d0:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80048d2:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80048d4:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 80048d6:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80048d8:	6002      	str	r2, [r0, #0]
}
 80048da:	bc30      	pop	{r4, r5}
 80048dc:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 80048de:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 80048e0:	6863      	ldr	r3, [r4, #4]
 80048e2:	e7f2      	b.n	80048ca <vListInsert+0x16>

080048e4 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80048e4:	6903      	ldr	r3, [r0, #16]
{
 80048e6:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80048e8:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80048ea:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
	if( pxList->pxIndex == pxItemToRemove )
 80048ee:	4284      	cmp	r4, r0

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
 80048f0:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80048f4:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80048f6:	6051      	str	r1, [r2, #4]
	pxItemToRemove->pxContainer = NULL;
 80048f8:	f04f 0100 	mov.w	r1, #0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80048fc:	bf08      	it	eq
 80048fe:	605a      	streq	r2, [r3, #4]
	( pxList->uxNumberOfItems )--;
 8004900:	681a      	ldr	r2, [r3, #0]
	pxItemToRemove->pxContainer = NULL;
 8004902:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8004904:	3a01      	subs	r2, #1
 8004906:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 8004908:	6818      	ldr	r0, [r3, #0]
}
 800490a:	4770      	bx	lr

0800490c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800490c:	b570      	push	{r4, r5, r6, lr}
 800490e:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004910:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8004912:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004914:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004916:	b92a      	cbnz	r2, 8004924 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004918:	6805      	ldr	r5, [r0, #0]
 800491a:	b365      	cbz	r5, 8004976 <prvCopyDataToQueue+0x6a>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800491c:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 800491e:	4610      	mov	r0, r2
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004920:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 8004922:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8004924:	b97d      	cbnz	r5, 8004946 <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004926:	6840      	ldr	r0, [r0, #4]
 8004928:	f00d f89b 	bl	8011a62 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800492c:	6863      	ldr	r3, [r4, #4]
 800492e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004930:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004932:	68a2      	ldr	r2, [r4, #8]
 8004934:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004936:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004938:	d319      	bcc.n	800496e <prvCopyDataToQueue+0x62>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800493a:	6822      	ldr	r2, [r4, #0]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800493c:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 800493e:	4628      	mov	r0, r5
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004940:	6062      	str	r2, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004942:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8004944:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004946:	68c0      	ldr	r0, [r0, #12]
 8004948:	f00d f88b 	bl	8011a62 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800494c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800494e:	68e3      	ldr	r3, [r4, #12]
 8004950:	4251      	negs	r1, r2
 8004952:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004954:	6822      	ldr	r2, [r4, #0]
 8004956:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004958:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800495a:	d202      	bcs.n	8004962 <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800495c:	68a3      	ldr	r3, [r4, #8]
 800495e:	440b      	add	r3, r1
 8004960:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8004962:	2d02      	cmp	r5, #2
 8004964:	d00d      	beq.n	8004982 <prvCopyDataToQueue+0x76>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004966:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8004968:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800496a:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800496c:	bd70      	pop	{r4, r5, r6, pc}
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800496e:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8004970:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004972:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8004974:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004976:	6880      	ldr	r0, [r0, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004978:	3601      	adds	r6, #1
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800497a:	f001 fa91 	bl	8005ea0 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800497e:	60a5      	str	r5, [r4, #8]
 8004980:	e7ce      	b.n	8004920 <prvCopyDataToQueue+0x14>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004982:	2e01      	cmp	r6, #1
BaseType_t xReturn = pdFALSE;
 8004984:	f04f 0000 	mov.w	r0, #0
 8004988:	bf38      	it	cc
 800498a:	2601      	movcc	r6, #1
 800498c:	e7c8      	b.n	8004920 <prvCopyDataToQueue+0x14>
 800498e:	bf00      	nop

08004990 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004990:	b570      	push	{r4, r5, r6, lr}
 8004992:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004994:	f001 fbb6 	bl	8006104 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004998:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 800499c:	b25c      	sxtb	r4, r3

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800499e:	2c00      	cmp	r4, #0
 80049a0:	dd14      	ble.n	80049cc <prvUnlockQueue+0x3c>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049a2:	f105 0624 	add.w	r6, r5, #36	; 0x24
 80049a6:	e003      	b.n	80049b0 <prvUnlockQueue+0x20>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80049a8:	1e63      	subs	r3, r4, #1
 80049aa:	b2da      	uxtb	r2, r3
 80049ac:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80049ae:	b16a      	cbz	r2, 80049cc <prvUnlockQueue+0x3c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049b0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049b2:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049b4:	b153      	cbz	r3, 80049cc <prvUnlockQueue+0x3c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049b6:	f001 f96f 	bl	8005c98 <xTaskRemoveFromEventList>
 80049ba:	2800      	cmp	r0, #0
 80049bc:	d0f4      	beq.n	80049a8 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 80049be:	f001 fa09 	bl	8005dd4 <vTaskMissedYield>
			--cTxLock;
 80049c2:	1e63      	subs	r3, r4, #1
 80049c4:	b2da      	uxtb	r2, r3
 80049c6:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80049c8:	2a00      	cmp	r2, #0
 80049ca:	d1f1      	bne.n	80049b0 <prvUnlockQueue+0x20>
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80049cc:	23ff      	movs	r3, #255	; 0xff
 80049ce:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80049d2:	f001 fbb9 	bl	8006148 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80049d6:	f001 fb95 	bl	8006104 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80049da:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 80049de:	b25c      	sxtb	r4, r3

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80049e0:	2c00      	cmp	r4, #0
 80049e2:	dd14      	ble.n	8004a0e <prvUnlockQueue+0x7e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049e4:	f105 0610 	add.w	r6, r5, #16
 80049e8:	e003      	b.n	80049f2 <prvUnlockQueue+0x62>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80049ea:	1e63      	subs	r3, r4, #1
 80049ec:	b2da      	uxtb	r2, r3
 80049ee:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80049f0:	b16a      	cbz	r2, 8004a0e <prvUnlockQueue+0x7e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049f2:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049f4:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049f6:	b153      	cbz	r3, 8004a0e <prvUnlockQueue+0x7e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049f8:	f001 f94e 	bl	8005c98 <xTaskRemoveFromEventList>
 80049fc:	2800      	cmp	r0, #0
 80049fe:	d0f4      	beq.n	80049ea <prvUnlockQueue+0x5a>
					vTaskMissedYield();
 8004a00:	f001 f9e8 	bl	8005dd4 <vTaskMissedYield>
				--cRxLock;
 8004a04:	1e63      	subs	r3, r4, #1
 8004a06:	b2da      	uxtb	r2, r3
 8004a08:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a0a:	2a00      	cmp	r2, #0
 8004a0c:	d1f1      	bne.n	80049f2 <prvUnlockQueue+0x62>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004a0e:	23ff      	movs	r3, #255	; 0xff
 8004a10:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8004a14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8004a18:	f001 bb96 	b.w	8006148 <vPortExitCritical>

08004a1c <xQueueGenericReset>:
{
 8004a1c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8004a1e:	b1e0      	cbz	r0, 8004a5a <xQueueGenericReset+0x3e>
 8004a20:	4604      	mov	r4, r0
 8004a22:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8004a24:	f001 fb6e 	bl	8006104 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a28:	6822      	ldr	r2, [r4, #0]
 8004a2a:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a2e:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a30:	fb01 f303 	mul.w	r3, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a34:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a36:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a38:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a3a:	60a3      	str	r3, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004a3c:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8004a3e:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a40:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004a42:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8004a44:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004a48:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8004a4c:	b975      	cbnz	r5, 8004a6c <xQueueGenericReset+0x50>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a4e:	6923      	ldr	r3, [r4, #16]
 8004a50:	b9c3      	cbnz	r3, 8004a84 <xQueueGenericReset+0x68>
	taskEXIT_CRITICAL();
 8004a52:	f001 fb79 	bl	8006148 <vPortExitCritical>
}
 8004a56:	2001      	movs	r0, #1
 8004a58:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5e:	f383 8811 	msr	BASEPRI, r3
 8004a62:	f3bf 8f6f 	isb	sy
 8004a66:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8004a6a:	e7fe      	b.n	8004a6a <xQueueGenericReset+0x4e>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004a6c:	f104 0010 	add.w	r0, r4, #16
 8004a70:	f7ff ff00 	bl	8004874 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004a74:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004a78:	f7ff fefc 	bl	8004874 <vListInitialise>
	taskEXIT_CRITICAL();
 8004a7c:	f001 fb64 	bl	8006148 <vPortExitCritical>
}
 8004a80:	2001      	movs	r0, #1
 8004a82:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a84:	f104 0010 	add.w	r0, r4, #16
 8004a88:	f001 f906 	bl	8005c98 <xTaskRemoveFromEventList>
 8004a8c:	2800      	cmp	r0, #0
 8004a8e:	d0e0      	beq.n	8004a52 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8004a90:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004a94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a98:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004a9c:	f3bf 8f4f 	dsb	sy
 8004aa0:	f3bf 8f6f 	isb	sy
 8004aa4:	e7d5      	b.n	8004a52 <xQueueGenericReset+0x36>
 8004aa6:	bf00      	nop

08004aa8 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004aa8:	b940      	cbnz	r0, 8004abc <xQueueGenericCreateStatic+0x14>
 8004aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aae:	f383 8811 	msr	BASEPRI, r3
 8004ab2:	f3bf 8f6f 	isb	sy
 8004ab6:	f3bf 8f4f 	dsb	sy
 8004aba:	e7fe      	b.n	8004aba <xQueueGenericCreateStatic+0x12>
		configASSERT( pxStaticQueue != NULL );
 8004abc:	b16b      	cbz	r3, 8004ada <xQueueGenericCreateStatic+0x32>
	{
 8004abe:	b510      	push	{r4, lr}
 8004ac0:	460c      	mov	r4, r1
 8004ac2:	b084      	sub	sp, #16
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004ac4:	b30a      	cbz	r2, 8004b0a <xQueueGenericCreateStatic+0x62>
 8004ac6:	b989      	cbnz	r1, 8004aec <xQueueGenericCreateStatic+0x44>
 8004ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004acc:	f383 8811 	msr	BASEPRI, r3
 8004ad0:	f3bf 8f6f 	isb	sy
 8004ad4:	f3bf 8f4f 	dsb	sy
 8004ad8:	e7fe      	b.n	8004ad8 <xQueueGenericCreateStatic+0x30>
 8004ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ade:	f383 8811 	msr	BASEPRI, r3
 8004ae2:	f3bf 8f6f 	isb	sy
 8004ae6:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8004aea:	e7fe      	b.n	8004aea <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004aec:	b16a      	cbz	r2, 8004b0a <xQueueGenericCreateStatic+0x62>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004aee:	2148      	movs	r1, #72	; 0x48
 8004af0:	9103      	str	r1, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004af2:	9903      	ldr	r1, [sp, #12]
 8004af4:	2948      	cmp	r1, #72	; 0x48
 8004af6:	d013      	beq.n	8004b20 <xQueueGenericCreateStatic+0x78>
 8004af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afc:	f383 8811 	msr	BASEPRI, r3
 8004b00:	f3bf 8f6f 	isb	sy
 8004b04:	f3bf 8f4f 	dsb	sy
 8004b08:	e7fe      	b.n	8004b08 <xQueueGenericCreateStatic+0x60>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004b0a:	2c00      	cmp	r4, #0
 8004b0c:	d0ef      	beq.n	8004aee <xQueueGenericCreateStatic+0x46>
 8004b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b12:	f383 8811 	msr	BASEPRI, r3
 8004b16:	f3bf 8f6f 	isb	sy
 8004b1a:	f3bf 8f4f 	dsb	sy
 8004b1e:	e7fe      	b.n	8004b1e <xQueueGenericCreateStatic+0x76>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8004b20:	2c00      	cmp	r4, #0
 8004b22:	bf08      	it	eq
 8004b24:	461a      	moveq	r2, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004b26:	2101      	movs	r1, #1
	pxNewQueue->uxLength = uxQueueLength;
 8004b28:	63d8      	str	r0, [r3, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b2a:	4618      	mov	r0, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004b2c:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
 8004b30:	601a      	str	r2, [r3, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8004b32:	641c      	str	r4, [r3, #64]	; 0x40
 8004b34:	9301      	str	r3, [sp, #4]
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004b36:	9a03      	ldr	r2, [sp, #12]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b38:	f7ff ff70 	bl	8004a1c <xQueueGenericReset>
	}
 8004b3c:	9b01      	ldr	r3, [sp, #4]
 8004b3e:	4618      	mov	r0, r3
 8004b40:	b004      	add	sp, #16
 8004b42:	bd10      	pop	{r4, pc}

08004b44 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b44:	b940      	cbnz	r0, 8004b58 <xQueueGenericCreate+0x14>
 8004b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4a:	f383 8811 	msr	BASEPRI, r3
 8004b4e:	f3bf 8f6f 	isb	sy
 8004b52:	f3bf 8f4f 	dsb	sy
 8004b56:	e7fe      	b.n	8004b56 <xQueueGenericCreate+0x12>
	{
 8004b58:	b570      	push	{r4, r5, r6, lr}
 8004b5a:	4604      	mov	r4, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b5c:	fb01 f000 	mul.w	r0, r1, r0
 8004b60:	460d      	mov	r5, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004b62:	3048      	adds	r0, #72	; 0x48
 8004b64:	f001 fc4a 	bl	80063fc <pvPortMalloc>
		if( pxNewQueue != NULL )
 8004b68:	4606      	mov	r6, r0
 8004b6a:	b160      	cbz	r0, 8004b86 <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8004b72:	b155      	cbz	r5, 8004b8a <xQueueGenericCreate+0x46>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b74:	f100 0348 	add.w	r3, r0, #72	; 0x48
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b78:	2101      	movs	r1, #1
 8004b7a:	4630      	mov	r0, r6
 8004b7c:	6033      	str	r3, [r6, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8004b7e:	63f4      	str	r4, [r6, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004b80:	6435      	str	r5, [r6, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b82:	f7ff ff4b 	bl	8004a1c <xQueueGenericReset>
	}
 8004b86:	4630      	mov	r0, r6
 8004b88:	bd70      	pop	{r4, r5, r6, pc}
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	e7f4      	b.n	8004b78 <xQueueGenericCreate+0x34>
 8004b8e:	bf00      	nop

08004b90 <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 8004b90:	b940      	cbnz	r0, 8004ba4 <xQueueCreateCountingSemaphoreStatic+0x14>
 8004b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b96:	f383 8811 	msr	BASEPRI, r3
 8004b9a:	f3bf 8f6f 	isb	sy
 8004b9e:	f3bf 8f4f 	dsb	sy
 8004ba2:	e7fe      	b.n	8004ba2 <xQueueCreateCountingSemaphoreStatic+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004ba4:	4288      	cmp	r0, r1
	{
 8004ba6:	b510      	push	{r4, lr}
 8004ba8:	460c      	mov	r4, r1
 8004baa:	b082      	sub	sp, #8
		configASSERT( uxInitialCount <= uxMaxCount );
 8004bac:	d208      	bcs.n	8004bc0 <xQueueCreateCountingSemaphoreStatic+0x30>
 8004bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb2:	f383 8811 	msr	BASEPRI, r3
 8004bb6:	f3bf 8f6f 	isb	sy
 8004bba:	f3bf 8f4f 	dsb	sy
 8004bbe:	e7fe      	b.n	8004bbe <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004bc0:	2102      	movs	r1, #2
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	9100      	str	r1, [sp, #0]
 8004bc8:	4611      	mov	r1, r2
 8004bca:	f7ff ff6d 	bl	8004aa8 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 8004bce:	b100      	cbz	r0, 8004bd2 <xQueueCreateCountingSemaphoreStatic+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004bd0:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8004bd2:	b002      	add	sp, #8
 8004bd4:	bd10      	pop	{r4, pc}
 8004bd6:	bf00      	nop

08004bd8 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 8004bd8:	b940      	cbnz	r0, 8004bec <xQueueCreateCountingSemaphore+0x14>
 8004bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bde:	f383 8811 	msr	BASEPRI, r3
 8004be2:	f3bf 8f6f 	isb	sy
 8004be6:	f3bf 8f4f 	dsb	sy
 8004bea:	e7fe      	b.n	8004bea <xQueueCreateCountingSemaphore+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004bec:	4288      	cmp	r0, r1
	{
 8004bee:	b510      	push	{r4, lr}
 8004bf0:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 8004bf2:	d208      	bcs.n	8004c06 <xQueueCreateCountingSemaphore+0x2e>
 8004bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf8:	f383 8811 	msr	BASEPRI, r3
 8004bfc:	f3bf 8f6f 	isb	sy
 8004c00:	f3bf 8f4f 	dsb	sy
 8004c04:	e7fe      	b.n	8004c04 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004c06:	2202      	movs	r2, #2
 8004c08:	2100      	movs	r1, #0
 8004c0a:	f7ff ff9b 	bl	8004b44 <xQueueGenericCreate>
		if( xHandle != NULL )
 8004c0e:	b100      	cbz	r0, 8004c12 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004c10:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8004c12:	bd10      	pop	{r4, pc}

08004c14 <xQueueGenericSend>:
{
 8004c14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004c18:	b085      	sub	sp, #20
 8004c1a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8004c1c:	2800      	cmp	r0, #0
 8004c1e:	d07e      	beq.n	8004d1e <xQueueGenericSend+0x10a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c20:	460f      	mov	r7, r1
 8004c22:	4604      	mov	r4, r0
 8004c24:	461e      	mov	r6, r3
 8004c26:	2900      	cmp	r1, #0
 8004c28:	d069      	beq.n	8004cfe <xQueueGenericSend+0xea>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c2a:	2e02      	cmp	r6, #2
 8004c2c:	d10b      	bne.n	8004c46 <xQueueGenericSend+0x32>
 8004c2e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d008      	beq.n	8004c46 <xQueueGenericSend+0x32>
 8004c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c38:	f383 8811 	msr	BASEPRI, r3
 8004c3c:	f3bf 8f6f 	isb	sy
 8004c40:	f3bf 8f4f 	dsb	sy
 8004c44:	e7fe      	b.n	8004c44 <xQueueGenericSend+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c46:	f001 f8cb 	bl	8005de0 <xTaskGetSchedulerState>
 8004c4a:	2800      	cmp	r0, #0
 8004c4c:	d070      	beq.n	8004d30 <xQueueGenericSend+0x11c>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c4e:	f1a6 0802 	sub.w	r8, r6, #2
 8004c52:	2500      	movs	r5, #0
 8004c54:	fab8 f888 	clz	r8, r8
		prvLockQueue( pxQueue );
 8004c58:	46a9      	mov	r9, r5
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c5a:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8004c5e:	e007      	b.n	8004c70 <xQueueGenericSend+0x5c>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8004c60:	f001 fa72 	bl	8006148 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8004c64:	4620      	mov	r0, r4
 8004c66:	f7ff fe93 	bl	8004990 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c6a:	f000 ff7b 	bl	8005b64 <xTaskResumeAll>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c6e:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 8004c70:	f001 fa48 	bl	8006104 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c74:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004c76:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004c78:	4290      	cmp	r0, r2
 8004c7a:	d365      	bcc.n	8004d48 <xQueueGenericSend+0x134>
 8004c7c:	f1b8 0f00 	cmp.w	r8, #0
 8004c80:	d162      	bne.n	8004d48 <xQueueGenericSend+0x134>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c82:	9b01      	ldr	r3, [sp, #4]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d077      	beq.n	8004d78 <xQueueGenericSend+0x164>
				else if( xEntryTimeSet == pdFALSE )
 8004c88:	2d00      	cmp	r5, #0
 8004c8a:	d044      	beq.n	8004d16 <xQueueGenericSend+0x102>
		taskEXIT_CRITICAL();
 8004c8c:	f001 fa5c 	bl	8006148 <vPortExitCritical>
		vTaskSuspendAll();
 8004c90:	f000 fe0a 	bl	80058a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c94:	f001 fa36 	bl	8006104 <vPortEnterCritical>
 8004c98:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004c9c:	2bff      	cmp	r3, #255	; 0xff
 8004c9e:	d101      	bne.n	8004ca4 <xQueueGenericSend+0x90>
 8004ca0:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 8004ca4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004ca8:	2bff      	cmp	r3, #255	; 0xff
 8004caa:	d101      	bne.n	8004cb0 <xQueueGenericSend+0x9c>
 8004cac:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 8004cb0:	f001 fa4a 	bl	8006148 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004cb4:	a901      	add	r1, sp, #4
 8004cb6:	a802      	add	r0, sp, #8
 8004cb8:	f001 f844 	bl	8005d44 <xTaskCheckForTimeOut>
 8004cbc:	2800      	cmp	r0, #0
 8004cbe:	d15f      	bne.n	8004d80 <xQueueGenericSend+0x16c>
	taskENTER_CRITICAL();
 8004cc0:	f001 fa20 	bl	8006104 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004cc4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004cc6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d1c9      	bne.n	8004c60 <xQueueGenericSend+0x4c>
	taskEXIT_CRITICAL();
 8004ccc:	f001 fa3c 	bl	8006148 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004cd0:	9901      	ldr	r1, [sp, #4]
 8004cd2:	f104 0010 	add.w	r0, r4, #16
 8004cd6:	f000 ffc5 	bl	8005c64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004cda:	4620      	mov	r0, r4
 8004cdc:	f7ff fe58 	bl	8004990 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004ce0:	f000 ff40 	bl	8005b64 <xTaskResumeAll>
 8004ce4:	2800      	cmp	r0, #0
 8004ce6:	d1c2      	bne.n	8004c6e <xQueueGenericSend+0x5a>
					portYIELD_WITHIN_API();
 8004ce8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004cec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cf0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004cf4:	f3bf 8f4f 	dsb	sy
 8004cf8:	f3bf 8f6f 	isb	sy
 8004cfc:	e7b7      	b.n	8004c6e <xQueueGenericSend+0x5a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cfe:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d092      	beq.n	8004c2a <xQueueGenericSend+0x16>
 8004d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d08:	f383 8811 	msr	BASEPRI, r3
 8004d0c:	f3bf 8f6f 	isb	sy
 8004d10:	f3bf 8f4f 	dsb	sy
 8004d14:	e7fe      	b.n	8004d14 <xQueueGenericSend+0x100>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d16:	a802      	add	r0, sp, #8
 8004d18:	f001 f808 	bl	8005d2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d1c:	e7b6      	b.n	8004c8c <xQueueGenericSend+0x78>
 8004d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d22:	f383 8811 	msr	BASEPRI, r3
 8004d26:	f3bf 8f6f 	isb	sy
 8004d2a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8004d2e:	e7fe      	b.n	8004d2e <xQueueGenericSend+0x11a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d30:	9b01      	ldr	r3, [sp, #4]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d08b      	beq.n	8004c4e <xQueueGenericSend+0x3a>
 8004d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d3a:	f383 8811 	msr	BASEPRI, r3
 8004d3e:	f3bf 8f6f 	isb	sy
 8004d42:	f3bf 8f4f 	dsb	sy
 8004d46:	e7fe      	b.n	8004d46 <xQueueGenericSend+0x132>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d48:	4632      	mov	r2, r6
 8004d4a:	4639      	mov	r1, r7
 8004d4c:	4620      	mov	r0, r4
 8004d4e:	f7ff fddd 	bl	800490c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d54:	b9db      	cbnz	r3, 8004d8e <xQueueGenericSend+0x17a>
					else if( xYieldRequired != pdFALSE )
 8004d56:	b148      	cbz	r0, 8004d6c <xQueueGenericSend+0x158>
						queueYIELD_IF_USING_PREEMPTION();
 8004d58:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004d5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d60:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004d64:	f3bf 8f4f 	dsb	sy
 8004d68:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8004d6c:	f001 f9ec 	bl	8006148 <vPortExitCritical>
				return pdPASS;
 8004d70:	2001      	movs	r0, #1
}
 8004d72:	b005      	add	sp, #20
 8004d74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					taskEXIT_CRITICAL();
 8004d78:	f001 f9e6 	bl	8006148 <vPortExitCritical>
					return errQUEUE_FULL;
 8004d7c:	4640      	mov	r0, r8
 8004d7e:	e7f8      	b.n	8004d72 <xQueueGenericSend+0x15e>
			prvUnlockQueue( pxQueue );
 8004d80:	4620      	mov	r0, r4
 8004d82:	f7ff fe05 	bl	8004990 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d86:	f000 feed 	bl	8005b64 <xTaskResumeAll>
			return errQUEUE_FULL;
 8004d8a:	2000      	movs	r0, #0
 8004d8c:	e7f1      	b.n	8004d72 <xQueueGenericSend+0x15e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d8e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004d92:	f000 ff81 	bl	8005c98 <xTaskRemoveFromEventList>
 8004d96:	2800      	cmp	r0, #0
 8004d98:	d0e8      	beq.n	8004d6c <xQueueGenericSend+0x158>
 8004d9a:	e7dd      	b.n	8004d58 <xQueueGenericSend+0x144>

08004d9c <xQueueCreateMutexStatic>:
		configASSERT( pxStaticQueue != NULL );
 8004d9c:	b179      	cbz	r1, 8004dbe <xQueueCreateMutexStatic+0x22>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004d9e:	2348      	movs	r3, #72	; 0x48
	{
 8004da0:	b530      	push	{r4, r5, lr}
 8004da2:	b083      	sub	sp, #12
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004da4:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004da6:	9b01      	ldr	r3, [sp, #4]
 8004da8:	2b48      	cmp	r3, #72	; 0x48
 8004daa:	d011      	beq.n	8004dd0 <xQueueCreateMutexStatic+0x34>
 8004dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db0:	f383 8811 	msr	BASEPRI, r3
 8004db4:	f3bf 8f6f 	isb	sy
 8004db8:	f3bf 8f4f 	dsb	sy
 8004dbc:	e7fe      	b.n	8004dbc <xQueueCreateMutexStatic+0x20>
 8004dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc2:	f383 8811 	msr	BASEPRI, r3
 8004dc6:	f3bf 8f6f 	isb	sy
 8004dca:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8004dce:	e7fe      	b.n	8004dce <xQueueCreateMutexStatic+0x32>
 8004dd0:	460c      	mov	r4, r1
	pxNewQueue->uxItemSize = uxItemSize;
 8004dd2:	2500      	movs	r5, #0
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004dd4:	2101      	movs	r1, #1
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004dd6:	9a01      	ldr	r2, [sp, #4]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004dd8:	4620      	mov	r0, r4
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004dda:	6024      	str	r4, [r4, #0]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004ddc:	f884 1046 	strb.w	r1, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 8004de0:	e9c4 150f 	strd	r1, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004de4:	f7ff fe1a 	bl	8004a1c <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004de8:	462b      	mov	r3, r5
 8004dea:	462a      	mov	r2, r5
 8004dec:	4629      	mov	r1, r5
 8004dee:	4620      	mov	r0, r4
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004df0:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004df2:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004df4:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004df6:	f7ff ff0d 	bl	8004c14 <xQueueGenericSend>
	}
 8004dfa:	4620      	mov	r0, r4
 8004dfc:	b003      	add	sp, #12
 8004dfe:	bd30      	pop	{r4, r5, pc}

08004e00 <xQueueCreateMutex>:
	{
 8004e00:	b538      	push	{r3, r4, r5, lr}
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004e02:	2048      	movs	r0, #72	; 0x48
 8004e04:	f001 fafa 	bl	80063fc <pvPortMalloc>
		if( pxNewQueue != NULL )
 8004e08:	4604      	mov	r4, r0
 8004e0a:	b188      	cbz	r0, 8004e30 <xQueueCreateMutex+0x30>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004e0c:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 8004e0e:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004e10:	6020      	str	r0, [r4, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004e12:	f880 5046 	strb.w	r5, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 8004e16:	e9c0 150f 	strd	r1, r5, [r0, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004e1a:	f7ff fdff 	bl	8004a1c <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004e1e:	462b      	mov	r3, r5
 8004e20:	462a      	mov	r2, r5
 8004e22:	4629      	mov	r1, r5
 8004e24:	4620      	mov	r0, r4
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004e26:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004e28:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004e2a:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004e2c:	f7ff fef2 	bl	8004c14 <xQueueGenericSend>
	}
 8004e30:	4620      	mov	r0, r4
 8004e32:	bd38      	pop	{r3, r4, r5, pc}

08004e34 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
 8004e34:	2800      	cmp	r0, #0
 8004e36:	d04e      	beq.n	8004ed6 <xQueueGenericSendFromISR+0xa2>
{
 8004e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e3c:	460e      	mov	r6, r1
 8004e3e:	4604      	mov	r4, r0
 8004e40:	4617      	mov	r7, r2
 8004e42:	461d      	mov	r5, r3
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e44:	b339      	cbz	r1, 8004e96 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e46:	2d02      	cmp	r5, #2
 8004e48:	d10b      	bne.n	8004e62 <xQueueGenericSendFromISR+0x2e>
 8004e4a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d008      	beq.n	8004e62 <xQueueGenericSendFromISR+0x2e>
 8004e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e54:	f383 8811 	msr	BASEPRI, r3
 8004e58:	f3bf 8f6f 	isb	sy
 8004e5c:	f3bf 8f4f 	dsb	sy
 8004e60:	e7fe      	b.n	8004e60 <xQueueGenericSendFromISR+0x2c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004e62:	f001 fa6b 	bl	800633c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004e66:	f3ef 8811 	mrs	r8, BASEPRI
 8004e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e6e:	f383 8811 	msr	BASEPRI, r3
 8004e72:	f3bf 8f6f 	isb	sy
 8004e76:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e7a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004e7c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d315      	bcc.n	8004eae <xQueueGenericSendFromISR+0x7a>
 8004e82:	f1a5 0002 	sub.w	r0, r5, #2
 8004e86:	fab0 f080 	clz	r0, r0
 8004e8a:	0940      	lsrs	r0, r0, #5
 8004e8c:	b978      	cbnz	r0, 8004eae <xQueueGenericSendFromISR+0x7a>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004e8e:	f388 8811 	msr	BASEPRI, r8
}
 8004e92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e96:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d0d4      	beq.n	8004e46 <xQueueGenericSendFromISR+0x12>
	__asm volatile
 8004e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea0:	f383 8811 	msr	BASEPRI, r3
 8004ea4:	f3bf 8f6f 	isb	sy
 8004ea8:	f3bf 8f4f 	dsb	sy
 8004eac:	e7fe      	b.n	8004eac <xQueueGenericSendFromISR+0x78>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004eae:	462a      	mov	r2, r5
			const int8_t cTxLock = pxQueue->cTxLock;
 8004eb0:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004eb4:	4631      	mov	r1, r6
 8004eb6:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8004eb8:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004eba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ebc:	f7ff fd26 	bl	800490c <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8004ec0:	1c6b      	adds	r3, r5, #1
 8004ec2:	d011      	beq.n	8004ee8 <xQueueGenericSendFromISR+0xb4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004ec4:	1c6b      	adds	r3, r5, #1
			xReturn = pdPASS;
 8004ec6:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004ec8:	b25b      	sxtb	r3, r3
 8004eca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	__asm volatile
 8004ece:	f388 8811 	msr	BASEPRI, r8
}
 8004ed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
 8004ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eda:	f383 8811 	msr	BASEPRI, r3
 8004ede:	f3bf 8f6f 	isb	sy
 8004ee2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8004ee6:	e7fe      	b.n	8004ee6 <xQueueGenericSendFromISR+0xb2>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ee8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004eea:	b90b      	cbnz	r3, 8004ef0 <xQueueGenericSendFromISR+0xbc>
			xReturn = pdPASS;
 8004eec:	2001      	movs	r0, #1
 8004eee:	e7ce      	b.n	8004e8e <xQueueGenericSendFromISR+0x5a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ef0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004ef4:	f000 fed0 	bl	8005c98 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 8004ef8:	2800      	cmp	r0, #0
 8004efa:	d0f7      	beq.n	8004eec <xQueueGenericSendFromISR+0xb8>
 8004efc:	2f00      	cmp	r7, #0
 8004efe:	d0f5      	beq.n	8004eec <xQueueGenericSendFromISR+0xb8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004f00:	2301      	movs	r3, #1
			xReturn = pdPASS;
 8004f02:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004f04:	603b      	str	r3, [r7, #0]
 8004f06:	e7c2      	b.n	8004e8e <xQueueGenericSendFromISR+0x5a>

08004f08 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8004f08:	b360      	cbz	r0, 8004f64 <xQueueGiveFromISR+0x5c>
	configASSERT( pxQueue->uxItemSize == 0 );
 8004f0a:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
 8004f0c:	b570      	push	{r4, r5, r6, lr}
 8004f0e:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8004f10:	b143      	cbz	r3, 8004f24 <xQueueGiveFromISR+0x1c>
 8004f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f16:	f383 8811 	msr	BASEPRI, r3
 8004f1a:	f3bf 8f6f 	isb	sy
 8004f1e:	f3bf 8f4f 	dsb	sy
 8004f22:	e7fe      	b.n	8004f22 <xQueueGiveFromISR+0x1a>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004f24:	6803      	ldr	r3, [r0, #0]
 8004f26:	460d      	mov	r5, r1
 8004f28:	b32b      	cbz	r3, 8004f76 <xQueueGiveFromISR+0x6e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004f2a:	f001 fa07 	bl	800633c <vPortValidateInterruptPriority>
	__asm volatile
 8004f2e:	f3ef 8611 	mrs	r6, BASEPRI
 8004f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f36:	f383 8811 	msr	BASEPRI, r3
 8004f3a:	f3bf 8f6f 	isb	sy
 8004f3e:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004f44:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d921      	bls.n	8004f8e <xQueueGiveFromISR+0x86>
			const int8_t cTxLock = pxQueue->cTxLock;
 8004f4a:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004f4e:	3301      	adds	r3, #1
			if( cTxLock == queueUNLOCKED )
 8004f50:	2aff      	cmp	r2, #255	; 0xff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004f52:	63a3      	str	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8004f54:	b253      	sxtb	r3, r2
			if( cTxLock == queueUNLOCKED )
 8004f56:	d01e      	beq.n	8004f96 <xQueueGiveFromISR+0x8e>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004f58:	3301      	adds	r3, #1
			xReturn = pdPASS;
 8004f5a:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004f5c:	b25b      	sxtb	r3, r3
 8004f5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f62:	e015      	b.n	8004f90 <xQueueGiveFromISR+0x88>
	__asm volatile
 8004f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f68:	f383 8811 	msr	BASEPRI, r3
 8004f6c:	f3bf 8f6f 	isb	sy
 8004f70:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8004f74:	e7fe      	b.n	8004f74 <xQueueGiveFromISR+0x6c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004f76:	6883      	ldr	r3, [r0, #8]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d0d6      	beq.n	8004f2a <xQueueGiveFromISR+0x22>
 8004f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f80:	f383 8811 	msr	BASEPRI, r3
 8004f84:	f3bf 8f6f 	isb	sy
 8004f88:	f3bf 8f4f 	dsb	sy
 8004f8c:	e7fe      	b.n	8004f8c <xQueueGiveFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8004f8e:	2000      	movs	r0, #0
	__asm volatile
 8004f90:	f386 8811 	msr	BASEPRI, r6
}
 8004f94:	bd70      	pop	{r4, r5, r6, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f98:	b90b      	cbnz	r3, 8004f9e <xQueueGiveFromISR+0x96>
			xReturn = pdPASS;
 8004f9a:	2001      	movs	r0, #1
 8004f9c:	e7f8      	b.n	8004f90 <xQueueGiveFromISR+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f9e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004fa2:	f000 fe79 	bl	8005c98 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 8004fa6:	2d00      	cmp	r5, #0
 8004fa8:	d0f7      	beq.n	8004f9a <xQueueGiveFromISR+0x92>
 8004faa:	2800      	cmp	r0, #0
 8004fac:	d0f5      	beq.n	8004f9a <xQueueGiveFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004fae:	2301      	movs	r3, #1
			xReturn = pdPASS;
 8004fb0:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004fb2:	602b      	str	r3, [r5, #0]
 8004fb4:	e7ec      	b.n	8004f90 <xQueueGiveFromISR+0x88>
 8004fb6:	bf00      	nop

08004fb8 <xQueueReceive>:
{
 8004fb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004fbc:	b085      	sub	sp, #20
 8004fbe:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8004fc0:	2800      	cmp	r0, #0
 8004fc2:	f000 80a0 	beq.w	8005106 <xQueueReceive+0x14e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004fc6:	460d      	mov	r5, r1
 8004fc8:	4604      	mov	r4, r0
 8004fca:	2900      	cmp	r1, #0
 8004fcc:	d047      	beq.n	800505e <xQueueReceive+0xa6>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004fce:	f000 ff07 	bl	8005de0 <xTaskGetSchedulerState>
 8004fd2:	2800      	cmp	r0, #0
 8004fd4:	d04f      	beq.n	8005076 <xQueueReceive+0xbe>
		taskENTER_CRITICAL();
 8004fd6:	f001 f895 	bl	8006104 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004fda:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004fdc:	2e00      	cmp	r6, #0
 8004fde:	d17d      	bne.n	80050dc <xQueueReceive+0x124>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004fe0:	9b01      	ldr	r3, [sp, #4]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d035      	beq.n	8005052 <xQueueReceive+0x9a>
		prvLockQueue( pxQueue );
 8004fe6:	4637      	mov	r7, r6
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004fe8:	f104 0824 	add.w	r8, r4, #36	; 0x24
					portYIELD_WITHIN_API();
 8004fec:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ff0:	a802      	add	r0, sp, #8
 8004ff2:	f000 fe9b 	bl	8005d2c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8004ff6:	f001 f8a7 	bl	8006148 <vPortExitCritical>
		vTaskSuspendAll();
 8004ffa:	f000 fc55 	bl	80058a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ffe:	f001 f881 	bl	8006104 <vPortEnterCritical>
 8005002:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005006:	2bff      	cmp	r3, #255	; 0xff
 8005008:	d101      	bne.n	800500e <xQueueReceive+0x56>
 800500a:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 800500e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005012:	2bff      	cmp	r3, #255	; 0xff
 8005014:	d101      	bne.n	800501a <xQueueReceive+0x62>
 8005016:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800501a:	f001 f895 	bl	8006148 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800501e:	a901      	add	r1, sp, #4
 8005020:	a802      	add	r0, sp, #8
 8005022:	f000 fe8f 	bl	8005d44 <xTaskCheckForTimeOut>
 8005026:	2800      	cmp	r0, #0
 8005028:	d131      	bne.n	800508e <xQueueReceive+0xd6>
	taskENTER_CRITICAL();
 800502a:	f001 f86b 	bl	8006104 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800502e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005030:	2b00      	cmp	r3, #0
 8005032:	d039      	beq.n	80050a8 <xQueueReceive+0xf0>
	taskEXIT_CRITICAL();
 8005034:	f001 f888 	bl	8006148 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8005038:	4620      	mov	r0, r4
 800503a:	f7ff fca9 	bl	8004990 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800503e:	f000 fd91 	bl	8005b64 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8005042:	f001 f85f 	bl	8006104 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005046:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005048:	2e00      	cmp	r6, #0
 800504a:	d147      	bne.n	80050dc <xQueueReceive+0x124>
				if( xTicksToWait == ( TickType_t ) 0 )
 800504c:	9b01      	ldr	r3, [sp, #4]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1d1      	bne.n	8004ff6 <xQueueReceive+0x3e>
					taskEXIT_CRITICAL();
 8005052:	f001 f879 	bl	8006148 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8005056:	2000      	movs	r0, #0
}
 8005058:	b005      	add	sp, #20
 800505a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800505e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005060:	2b00      	cmp	r3, #0
 8005062:	d0b4      	beq.n	8004fce <xQueueReceive+0x16>
	__asm volatile
 8005064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005068:	f383 8811 	msr	BASEPRI, r3
 800506c:	f3bf 8f6f 	isb	sy
 8005070:	f3bf 8f4f 	dsb	sy
 8005074:	e7fe      	b.n	8005074 <xQueueReceive+0xbc>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005076:	9b01      	ldr	r3, [sp, #4]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d0ac      	beq.n	8004fd6 <xQueueReceive+0x1e>
 800507c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005080:	f383 8811 	msr	BASEPRI, r3
 8005084:	f3bf 8f6f 	isb	sy
 8005088:	f3bf 8f4f 	dsb	sy
 800508c:	e7fe      	b.n	800508c <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
 800508e:	4620      	mov	r0, r4
 8005090:	f7ff fc7e 	bl	8004990 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005094:	f000 fd66 	bl	8005b64 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8005098:	f001 f834 	bl	8006104 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800509c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d0d7      	beq.n	8005052 <xQueueReceive+0x9a>
	taskEXIT_CRITICAL();
 80050a2:	f001 f851 	bl	8006148 <vPortExitCritical>
 80050a6:	e7cc      	b.n	8005042 <xQueueReceive+0x8a>
 80050a8:	f001 f84e 	bl	8006148 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80050ac:	9901      	ldr	r1, [sp, #4]
 80050ae:	4640      	mov	r0, r8
 80050b0:	f000 fdd8 	bl	8005c64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80050b4:	4620      	mov	r0, r4
 80050b6:	f7ff fc6b 	bl	8004990 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80050ba:	f000 fd53 	bl	8005b64 <xTaskResumeAll>
 80050be:	2800      	cmp	r0, #0
 80050c0:	d1bf      	bne.n	8005042 <xQueueReceive+0x8a>
					portYIELD_WITHIN_API();
 80050c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80050c6:	f8c9 3d04 	str.w	r3, [r9, #3332]	; 0xd04
 80050ca:	f3bf 8f4f 	dsb	sy
 80050ce:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 80050d2:	f001 f817 	bl	8006104 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050d6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80050d8:	2e00      	cmp	r6, #0
 80050da:	d0b7      	beq.n	800504c <xQueueReceive+0x94>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80050dc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80050de:	b152      	cbz	r2, 80050f6 <xQueueReceive+0x13e>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80050e0:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80050e2:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80050e4:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80050e6:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80050e8:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80050ea:	d301      	bcc.n	80050f0 <xQueueReceive+0x138>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80050ec:	6821      	ldr	r1, [r4, #0]
 80050ee:	60e1      	str	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80050f0:	4628      	mov	r0, r5
 80050f2:	f00c fcb6 	bl	8011a62 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80050f6:	3e01      	subs	r6, #1
 80050f8:	63a6      	str	r6, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050fa:	6923      	ldr	r3, [r4, #16]
 80050fc:	b963      	cbnz	r3, 8005118 <xQueueReceive+0x160>
				taskEXIT_CRITICAL();
 80050fe:	f001 f823 	bl	8006148 <vPortExitCritical>
				return pdPASS;
 8005102:	2001      	movs	r0, #1
 8005104:	e7a8      	b.n	8005058 <xQueueReceive+0xa0>
 8005106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510a:	f383 8811 	msr	BASEPRI, r3
 800510e:	f3bf 8f6f 	isb	sy
 8005112:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8005116:	e7fe      	b.n	8005116 <xQueueReceive+0x15e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005118:	f104 0010 	add.w	r0, r4, #16
 800511c:	f000 fdbc 	bl	8005c98 <xTaskRemoveFromEventList>
 8005120:	2800      	cmp	r0, #0
 8005122:	d0ec      	beq.n	80050fe <xQueueReceive+0x146>
						queueYIELD_IF_USING_PREEMPTION();
 8005124:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005128:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800512c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005130:	f3bf 8f4f 	dsb	sy
 8005134:	f3bf 8f6f 	isb	sy
 8005138:	e7e1      	b.n	80050fe <xQueueReceive+0x146>
 800513a:	bf00      	nop

0800513c <xQueueSemaphoreTake>:
{
 800513c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800513e:	b085      	sub	sp, #20
 8005140:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8005142:	2800      	cmp	r0, #0
 8005144:	d055      	beq.n	80051f2 <xQueueSemaphoreTake+0xb6>
	configASSERT( pxQueue->uxItemSize == 0 );
 8005146:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8005148:	4604      	mov	r4, r0
 800514a:	b146      	cbz	r6, 800515e <xQueueSemaphoreTake+0x22>
 800514c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005150:	f383 8811 	msr	BASEPRI, r3
 8005154:	f3bf 8f6f 	isb	sy
 8005158:	f3bf 8f4f 	dsb	sy
 800515c:	e7fe      	b.n	800515c <xQueueSemaphoreTake+0x20>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800515e:	f000 fe3f 	bl	8005de0 <xTaskGetSchedulerState>
 8005162:	4605      	mov	r5, r0
 8005164:	2800      	cmp	r0, #0
 8005166:	d04d      	beq.n	8005204 <xQueueSemaphoreTake+0xc8>
 8005168:	4635      	mov	r5, r6
		taskENTER_CRITICAL();
 800516a:	f000 ffcb 	bl	8006104 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800516e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		prvLockQueue( pxQueue );
 8005170:	2700      	movs	r7, #0
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005172:	bb8b      	cbnz	r3, 80051d8 <xQueueSemaphoreTake+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005174:	9b01      	ldr	r3, [sp, #4]
 8005176:	2b00      	cmp	r3, #0
 8005178:	f000 809b 	beq.w	80052b2 <xQueueSemaphoreTake+0x176>
				else if( xEntryTimeSet == pdFALSE )
 800517c:	2d00      	cmp	r5, #0
 800517e:	d059      	beq.n	8005234 <xQueueSemaphoreTake+0xf8>
		taskEXIT_CRITICAL();
 8005180:	f000 ffe2 	bl	8006148 <vPortExitCritical>
		vTaskSuspendAll();
 8005184:	f000 fb90 	bl	80058a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005188:	f000 ffbc 	bl	8006104 <vPortEnterCritical>
 800518c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005190:	2bff      	cmp	r3, #255	; 0xff
 8005192:	d101      	bne.n	8005198 <xQueueSemaphoreTake+0x5c>
 8005194:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8005198:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800519c:	2bff      	cmp	r3, #255	; 0xff
 800519e:	d101      	bne.n	80051a4 <xQueueSemaphoreTake+0x68>
 80051a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80051a4:	f000 ffd0 	bl	8006148 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80051a8:	a901      	add	r1, sp, #4
 80051aa:	a802      	add	r0, sp, #8
 80051ac:	f000 fdca 	bl	8005d44 <xTaskCheckForTimeOut>
 80051b0:	2800      	cmp	r0, #0
 80051b2:	d133      	bne.n	800521c <xQueueSemaphoreTake+0xe0>
	taskENTER_CRITICAL();
 80051b4:	f000 ffa6 	bl	8006104 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80051b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d03e      	beq.n	800523c <xQueueSemaphoreTake+0x100>
	taskEXIT_CRITICAL();
 80051be:	f000 ffc3 	bl	8006148 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 80051c2:	4620      	mov	r0, r4
 80051c4:	f7ff fbe4 	bl	8004990 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80051c8:	f000 fccc 	bl	8005b64 <xTaskResumeAll>
		taskENTER_CRITICAL();
 80051cc:	f000 ff9a 	bl	8006104 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80051d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80051d2:	2501      	movs	r5, #1
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d0cd      	beq.n	8005174 <xQueueSemaphoreTake+0x38>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80051d8:	3b01      	subs	r3, #1
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80051da:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80051dc:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80051de:	2a00      	cmp	r2, #0
 80051e0:	f000 8083 	beq.w	80052ea <xQueueSemaphoreTake+0x1ae>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051e4:	6923      	ldr	r3, [r4, #16]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d16e      	bne.n	80052c8 <xQueueSemaphoreTake+0x18c>
				return pdPASS;
 80051ea:	2601      	movs	r6, #1
				taskEXIT_CRITICAL();
 80051ec:	f000 ffac 	bl	8006148 <vPortExitCritical>
				return pdPASS;
 80051f0:	e042      	b.n	8005278 <xQueueSemaphoreTake+0x13c>
 80051f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f6:	f383 8811 	msr	BASEPRI, r3
 80051fa:	f3bf 8f6f 	isb	sy
 80051fe:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8005202:	e7fe      	b.n	8005202 <xQueueSemaphoreTake+0xc6>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005204:	9b01      	ldr	r3, [sp, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d039      	beq.n	800527e <xQueueSemaphoreTake+0x142>
 800520a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800520e:	f383 8811 	msr	BASEPRI, r3
 8005212:	f3bf 8f6f 	isb	sy
 8005216:	f3bf 8f4f 	dsb	sy
 800521a:	e7fe      	b.n	800521a <xQueueSemaphoreTake+0xde>
			prvUnlockQueue( pxQueue );
 800521c:	4620      	mov	r0, r4
 800521e:	f7ff fbb7 	bl	8004990 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005222:	f000 fc9f 	bl	8005b64 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8005226:	f000 ff6d 	bl	8006104 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800522a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800522c:	b30b      	cbz	r3, 8005272 <xQueueSemaphoreTake+0x136>
	taskEXIT_CRITICAL();
 800522e:	f000 ff8b 	bl	8006148 <vPortExitCritical>
	return xReturn;
 8005232:	e7cb      	b.n	80051cc <xQueueSemaphoreTake+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005234:	a802      	add	r0, sp, #8
 8005236:	f000 fd79 	bl	8005d2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800523a:	e7a1      	b.n	8005180 <xQueueSemaphoreTake+0x44>
	taskEXIT_CRITICAL();
 800523c:	f000 ff84 	bl	8006148 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005240:	6823      	ldr	r3, [r4, #0]
 8005242:	b36b      	cbz	r3, 80052a0 <xQueueSemaphoreTake+0x164>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005244:	9901      	ldr	r1, [sp, #4]
 8005246:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800524a:	f000 fd0b 	bl	8005c64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800524e:	4620      	mov	r0, r4
 8005250:	f7ff fb9e 	bl	8004990 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005254:	f000 fc86 	bl	8005b64 <xTaskResumeAll>
 8005258:	2800      	cmp	r0, #0
 800525a:	d1b7      	bne.n	80051cc <xQueueSemaphoreTake+0x90>
					portYIELD_WITHIN_API();
 800525c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005260:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005264:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005268:	f3bf 8f4f 	dsb	sy
 800526c:	f3bf 8f6f 	isb	sy
 8005270:	e7ac      	b.n	80051cc <xQueueSemaphoreTake+0x90>
	taskEXIT_CRITICAL();
 8005272:	f000 ff69 	bl	8006148 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 8005276:	b926      	cbnz	r6, 8005282 <xQueueSemaphoreTake+0x146>
}
 8005278:	4630      	mov	r0, r6
 800527a:	b005      	add	sp, #20
 800527c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800527e:	4606      	mov	r6, r0
 8005280:	e773      	b.n	800516a <xQueueSemaphoreTake+0x2e>
						taskENTER_CRITICAL();
 8005282:	f000 ff3f 	bl	8006104 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005286:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005288:	b119      	cbz	r1, 8005292 <xQueueSemaphoreTake+0x156>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800528a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800528c:	6819      	ldr	r1, [r3, #0]
 800528e:	f1c1 0110 	rsb	r1, r1, #16
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005292:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 8005294:	2600      	movs	r6, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005296:	f000 fe5f 	bl	8005f58 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800529a:	f000 ff55 	bl	8006148 <vPortExitCritical>
 800529e:	e7eb      	b.n	8005278 <xQueueSemaphoreTake+0x13c>
						taskENTER_CRITICAL();
 80052a0:	f000 ff30 	bl	8006104 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80052a4:	68a0      	ldr	r0, [r4, #8]
 80052a6:	f000 fdab 	bl	8005e00 <xTaskPriorityInherit>
 80052aa:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 80052ac:	f000 ff4c 	bl	8006148 <vPortExitCritical>
 80052b0:	e7c8      	b.n	8005244 <xQueueSemaphoreTake+0x108>
						configASSERT( xInheritanceOccurred == pdFALSE );
 80052b2:	2e00      	cmp	r6, #0
 80052b4:	d0f1      	beq.n	800529a <xQueueSemaphoreTake+0x15e>
 80052b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ba:	f383 8811 	msr	BASEPRI, r3
 80052be:	f3bf 8f6f 	isb	sy
 80052c2:	f3bf 8f4f 	dsb	sy
 80052c6:	e7fe      	b.n	80052c6 <xQueueSemaphoreTake+0x18a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052c8:	f104 0010 	add.w	r0, r4, #16
 80052cc:	f000 fce4 	bl	8005c98 <xTaskRemoveFromEventList>
 80052d0:	2800      	cmp	r0, #0
 80052d2:	d08a      	beq.n	80051ea <xQueueSemaphoreTake+0xae>
						queueYIELD_IF_USING_PREEMPTION();
 80052d4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80052d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052dc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80052e0:	f3bf 8f4f 	dsb	sy
 80052e4:	f3bf 8f6f 	isb	sy
 80052e8:	e77f      	b.n	80051ea <xQueueSemaphoreTake+0xae>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80052ea:	f000 fe93 	bl	8006014 <pvTaskIncrementMutexHeldCount>
 80052ee:	60a0      	str	r0, [r4, #8]
 80052f0:	e778      	b.n	80051e4 <xQueueSemaphoreTake+0xa8>
 80052f2:	bf00      	nop

080052f4 <xQueueReceiveFromISR>:
{
 80052f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80052f8:	b310      	cbz	r0, 8005340 <xQueueReceiveFromISR+0x4c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052fa:	460e      	mov	r6, r1
 80052fc:	4604      	mov	r4, r0
 80052fe:	4617      	mov	r7, r2
 8005300:	b191      	cbz	r1, 8005328 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005302:	f001 f81b 	bl	800633c <vPortValidateInterruptPriority>
	__asm volatile
 8005306:	f3ef 8911 	mrs	r9, BASEPRI
 800530a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800530e:	f383 8811 	msr	BASEPRI, r3
 8005312:	f3bf 8f6f 	isb	sy
 8005316:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800531a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800531c:	b9cd      	cbnz	r5, 8005352 <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 800531e:	4628      	mov	r0, r5
	__asm volatile
 8005320:	f389 8811 	msr	BASEPRI, r9
}
 8005324:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005328:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800532a:	2b00      	cmp	r3, #0
 800532c:	d0e9      	beq.n	8005302 <xQueueReceiveFromISR+0xe>
	__asm volatile
 800532e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005332:	f383 8811 	msr	BASEPRI, r3
 8005336:	f3bf 8f6f 	isb	sy
 800533a:	f3bf 8f4f 	dsb	sy
 800533e:	e7fe      	b.n	800533e <xQueueReceiveFromISR+0x4a>
 8005340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005344:	f383 8811 	msr	BASEPRI, r3
 8005348:	f3bf 8f6f 	isb	sy
 800534c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8005350:	e7fe      	b.n	8005350 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 8005352:	f894 8044 	ldrb.w	r8, [r4, #68]	; 0x44
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005356:	6c22      	ldr	r2, [r4, #64]	; 0x40
			const int8_t cRxLock = pxQueue->cRxLock;
 8005358:	fa4f f888 	sxtb.w	r8, r8
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800535c:	b142      	cbz	r2, 8005370 <xQueueReceiveFromISR+0x7c>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800535e:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005360:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005362:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005364:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005366:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005368:	d215      	bcs.n	8005396 <xQueueReceiveFromISR+0xa2>
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800536a:	4630      	mov	r0, r6
 800536c:	f00c fb79 	bl	8011a62 <memcpy>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005370:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 8005372:	f1b8 3fff 	cmp.w	r8, #4294967295
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005376:	63a5      	str	r5, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8005378:	d009      	beq.n	800538e <xQueueReceiveFromISR+0x9a>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800537a:	f108 0301 	add.w	r3, r8, #1
			xReturn = pdPASS;
 800537e:	2001      	movs	r0, #1
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005380:	b25b      	sxtb	r3, r3
 8005382:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	__asm volatile
 8005386:	f389 8811 	msr	BASEPRI, r9
}
 800538a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800538e:	6923      	ldr	r3, [r4, #16]
 8005390:	b923      	cbnz	r3, 800539c <xQueueReceiveFromISR+0xa8>
			xReturn = pdPASS;
 8005392:	2001      	movs	r0, #1
 8005394:	e7c4      	b.n	8005320 <xQueueReceiveFromISR+0x2c>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005396:	6821      	ldr	r1, [r4, #0]
 8005398:	60e1      	str	r1, [r4, #12]
 800539a:	e7e6      	b.n	800536a <xQueueReceiveFromISR+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800539c:	f104 0010 	add.w	r0, r4, #16
 80053a0:	f000 fc7a 	bl	8005c98 <xTaskRemoveFromEventList>
						if( pxHigherPriorityTaskWoken != NULL )
 80053a4:	2f00      	cmp	r7, #0
 80053a6:	d0f4      	beq.n	8005392 <xQueueReceiveFromISR+0x9e>
 80053a8:	2800      	cmp	r0, #0
 80053aa:	d0f2      	beq.n	8005392 <xQueueReceiveFromISR+0x9e>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80053ac:	2301      	movs	r3, #1
			xReturn = pdPASS;
 80053ae:	4618      	mov	r0, r3
							*pxHigherPriorityTaskWoken = pdTRUE;
 80053b0:	603b      	str	r3, [r7, #0]
 80053b2:	e7b5      	b.n	8005320 <xQueueReceiveFromISR+0x2c>

080053b4 <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
 80053b4:	b158      	cbz	r0, 80053ce <uxQueueMessagesWaiting+0x1a>
{
 80053b6:	b510      	push	{r4, lr}
 80053b8:	4604      	mov	r4, r0
 80053ba:	b082      	sub	sp, #8
	taskENTER_CRITICAL();
 80053bc:	f000 fea2 	bl	8006104 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80053c0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80053c2:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 80053c4:	f000 fec0 	bl	8006148 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80053c8:	9801      	ldr	r0, [sp, #4]
 80053ca:	b002      	add	sp, #8
 80053cc:	bd10      	pop	{r4, pc}
	__asm volatile
 80053ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d2:	f383 8811 	msr	BASEPRI, r3
 80053d6:	f3bf 8f6f 	isb	sy
 80053da:	f3bf 8f4f 	dsb	sy
	configASSERT( xQueue );
 80053de:	e7fe      	b.n	80053de <uxQueueMessagesWaiting+0x2a>

080053e0 <uxQueueMessagesWaitingFromISR>:
	configASSERT( pxQueue );
 80053e0:	b108      	cbz	r0, 80053e6 <uxQueueMessagesWaitingFromISR+0x6>
	uxReturn = pxQueue->uxMessagesWaiting;
 80053e2:	6b80      	ldr	r0, [r0, #56]	; 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80053e4:	4770      	bx	lr
 80053e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ea:	f383 8811 	msr	BASEPRI, r3
 80053ee:	f3bf 8f6f 	isb	sy
 80053f2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80053f6:	e7fe      	b.n	80053f6 <uxQueueMessagesWaitingFromISR+0x16>

080053f8 <vQueueDelete>:
	configASSERT( pxQueue );
 80053f8:	b180      	cbz	r0, 800541c <vQueueDelete+0x24>
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80053fa:	2300      	movs	r3, #0
{
 80053fc:	b410      	push	{r4}
 80053fe:	4c12      	ldr	r4, [pc, #72]	; (8005448 <vQueueDelete+0x50>)
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005400:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 8005404:	6851      	ldr	r1, [r2, #4]
 8005406:	4288      	cmp	r0, r1
 8005408:	d015      	beq.n	8005436 <vQueueDelete+0x3e>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800540a:	3301      	adds	r3, #1
 800540c:	2b08      	cmp	r3, #8
 800540e:	d1f7      	bne.n	8005400 <vQueueDelete+0x8>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005410:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
 8005414:	b15b      	cbz	r3, 800542e <vQueueDelete+0x36>
}
 8005416:	f85d 4b04 	ldr.w	r4, [sp], #4
 800541a:	4770      	bx	lr
 800541c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005420:	f383 8811 	msr	BASEPRI, r3
 8005424:	f3bf 8f6f 	isb	sy
 8005428:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800542c:	e7fe      	b.n	800542c <vQueueDelete+0x34>
}
 800542e:	f85d 4b04 	ldr.w	r4, [sp], #4
			vPortFree( pxQueue );
 8005432:	f001 b879 	b.w	8006528 <vPortFree>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005436:	2100      	movs	r1, #0
 8005438:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800543c:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005440:	6051      	str	r1, [r2, #4]
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005442:	2b00      	cmp	r3, #0
 8005444:	d1e7      	bne.n	8005416 <vQueueDelete+0x1e>
 8005446:	e7f2      	b.n	800542e <vQueueDelete+0x36>
 8005448:	24004eb4 	.word	0x24004eb4

0800544c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800544c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005450:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005452:	f000 fe57 	bl	8006104 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005456:	4a35      	ldr	r2, [pc, #212]	; (800552c <prvAddNewTaskToReadyList+0xe0>)
		if( pxCurrentTCB == NULL )
 8005458:	4d35      	ldr	r5, [pc, #212]	; (8005530 <prvAddNewTaskToReadyList+0xe4>)
		uxCurrentNumberOfTasks++;
 800545a:	6813      	ldr	r3, [r2, #0]
 800545c:	3301      	adds	r3, #1
 800545e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005460:	682b      	ldr	r3, [r5, #0]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d034      	beq.n	80054d0 <prvAddNewTaskToReadyList+0x84>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005466:	4e33      	ldr	r6, [pc, #204]	; (8005534 <prvAddNewTaskToReadyList+0xe8>)
 8005468:	6833      	ldr	r3, [r6, #0]
 800546a:	b343      	cbz	r3, 80054be <prvAddNewTaskToReadyList+0x72>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800546c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800546e:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8005558 <prvAddNewTaskToReadyList+0x10c>
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005472:	2201      	movs	r2, #1
		uxTaskNumber++;
 8005474:	4f30      	ldr	r7, [pc, #192]	; (8005538 <prvAddNewTaskToReadyList+0xec>)
		prvAddTaskToReadyList( pxNewTCB );
 8005476:	4931      	ldr	r1, [pc, #196]	; (800553c <prvAddNewTaskToReadyList+0xf0>)
 8005478:	409a      	lsls	r2, r3
 800547a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800547e:	eb08 0083 	add.w	r0, r8, r3, lsl #2
		uxTaskNumber++;
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	3301      	adds	r3, #1
 8005486:	603b      	str	r3, [r7, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8005488:	680b      	ldr	r3, [r1, #0]
 800548a:	431a      	orrs	r2, r3
 800548c:	600a      	str	r2, [r1, #0]
 800548e:	1d21      	adds	r1, r4, #4
 8005490:	f7ff fa00 	bl	8004894 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005494:	f000 fe58 	bl	8006148 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005498:	6833      	ldr	r3, [r6, #0]
 800549a:	b173      	cbz	r3, 80054ba <prvAddNewTaskToReadyList+0x6e>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800549c:	682a      	ldr	r2, [r5, #0]
 800549e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80054a0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d209      	bcs.n	80054ba <prvAddNewTaskToReadyList+0x6e>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80054a6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80054aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054ae:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80054b2:	f3bf 8f4f 	dsb	sy
 80054b6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80054be:	682a      	ldr	r2, [r5, #0]
 80054c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80054c2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80054c4:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8005558 <prvAddNewTaskToReadyList+0x10c>
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d8d2      	bhi.n	8005472 <prvAddNewTaskToReadyList+0x26>
					pxCurrentTCB = pxNewTCB;
 80054cc:	602c      	str	r4, [r5, #0]
 80054ce:	e7d0      	b.n	8005472 <prvAddNewTaskToReadyList+0x26>
			pxCurrentTCB = pxNewTCB;
 80054d0:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80054d2:	6813      	ldr	r3, [r2, #0]
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d004      	beq.n	80054e2 <prvAddNewTaskToReadyList+0x96>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80054d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80054da:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8005558 <prvAddNewTaskToReadyList+0x10c>
 80054de:	4e15      	ldr	r6, [pc, #84]	; (8005534 <prvAddNewTaskToReadyList+0xe8>)
 80054e0:	e7c7      	b.n	8005472 <prvAddNewTaskToReadyList+0x26>
 80054e2:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8005558 <prvAddNewTaskToReadyList+0x10c>
 80054e6:	4646      	mov	r6, r8
 80054e8:	f508 77a0 	add.w	r7, r8, #320	; 0x140
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80054ec:	4630      	mov	r0, r6
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80054ee:	3614      	adds	r6, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80054f0:	f7ff f9c0 	bl	8004874 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80054f4:	42b7      	cmp	r7, r6
 80054f6:	d1f9      	bne.n	80054ec <prvAddNewTaskToReadyList+0xa0>
	}

	vListInitialise( &xDelayedTaskList1 );
 80054f8:	f8df 9060 	ldr.w	r9, [pc, #96]	; 800555c <prvAddNewTaskToReadyList+0x110>
	vListInitialise( &xDelayedTaskList2 );
 80054fc:	4f10      	ldr	r7, [pc, #64]	; (8005540 <prvAddNewTaskToReadyList+0xf4>)
	vListInitialise( &xDelayedTaskList1 );
 80054fe:	4648      	mov	r0, r9
 8005500:	4e0c      	ldr	r6, [pc, #48]	; (8005534 <prvAddNewTaskToReadyList+0xe8>)
 8005502:	f7ff f9b7 	bl	8004874 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005506:	4638      	mov	r0, r7
 8005508:	f7ff f9b4 	bl	8004874 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800550c:	480d      	ldr	r0, [pc, #52]	; (8005544 <prvAddNewTaskToReadyList+0xf8>)
 800550e:	f7ff f9b1 	bl	8004874 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005512:	480d      	ldr	r0, [pc, #52]	; (8005548 <prvAddNewTaskToReadyList+0xfc>)
 8005514:	f7ff f9ae 	bl	8004874 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005518:	480c      	ldr	r0, [pc, #48]	; (800554c <prvAddNewTaskToReadyList+0x100>)
 800551a:	f7ff f9ab 	bl	8004874 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800551e:	4b0c      	ldr	r3, [pc, #48]	; (8005550 <prvAddNewTaskToReadyList+0x104>)
 8005520:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005524:	4b0b      	ldr	r3, [pc, #44]	; (8005554 <prvAddNewTaskToReadyList+0x108>)
 8005526:	601f      	str	r7, [r3, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8005528:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
}
 800552a:	e7a2      	b.n	8005472 <prvAddNewTaskToReadyList+0x26>
 800552c:	24005040 	.word	0x24005040
 8005530:	24004ef4 	.word	0x24004ef4
 8005534:	2400509c 	.word	0x2400509c
 8005538:	2400504c 	.word	0x2400504c
 800553c:	24005050 	.word	0x24005050
 8005540:	24005068 	.word	0x24005068
 8005544:	24005088 	.word	0x24005088
 8005548:	240050b4 	.word	0x240050b4
 800554c:	240050a0 	.word	0x240050a0
 8005550:	24004ef8 	.word	0x24004ef8
 8005554:	24004efc 	.word	0x24004efc
 8005558:	24004f00 	.word	0x24004f00
 800555c:	24005054 	.word	0x24005054

08005560 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005562:	4b1b      	ldr	r3, [pc, #108]	; (80055d0 <prvAddCurrentTaskToDelayedList+0x70>)
{
 8005564:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005566:	4e1b      	ldr	r6, [pc, #108]	; (80055d4 <prvAddCurrentTaskToDelayedList+0x74>)
{
 8005568:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 800556a:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800556c:	6833      	ldr	r3, [r6, #0]
 800556e:	1d18      	adds	r0, r3, #4
 8005570:	f7ff f9b8 	bl	80048e4 <uxListRemove>
 8005574:	b940      	cbnz	r0, 8005588 <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005576:	6833      	ldr	r3, [r6, #0]
 8005578:	2201      	movs	r2, #1
 800557a:	4917      	ldr	r1, [pc, #92]	; (80055d8 <prvAddCurrentTaskToDelayedList+0x78>)
 800557c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800557e:	409a      	lsls	r2, r3
 8005580:	680b      	ldr	r3, [r1, #0]
 8005582:	ea23 0302 	bic.w	r3, r3, r2
 8005586:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005588:	1c62      	adds	r2, r4, #1
 800558a:	d101      	bne.n	8005590 <prvAddCurrentTaskToDelayedList+0x30>
 800558c:	07fb      	lsls	r3, r7, #31
 800558e:	d417      	bmi.n	80055c0 <prvAddCurrentTaskToDelayedList+0x60>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005590:	192d      	adds	r5, r5, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005592:	6833      	ldr	r3, [r6, #0]
 8005594:	605d      	str	r5, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8005596:	d307      	bcc.n	80055a8 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005598:	4b10      	ldr	r3, [pc, #64]	; (80055dc <prvAddCurrentTaskToDelayedList+0x7c>)
 800559a:	6818      	ldr	r0, [r3, #0]
 800559c:	6831      	ldr	r1, [r6, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800559e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055a2:	3104      	adds	r1, #4
 80055a4:	f7ff b986 	b.w	80048b4 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055a8:	4b0d      	ldr	r3, [pc, #52]	; (80055e0 <prvAddCurrentTaskToDelayedList+0x80>)
 80055aa:	6818      	ldr	r0, [r3, #0]
 80055ac:	6831      	ldr	r1, [r6, #0]
 80055ae:	3104      	adds	r1, #4
 80055b0:	f7ff f980 	bl	80048b4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80055b4:	4b0b      	ldr	r3, [pc, #44]	; (80055e4 <prvAddCurrentTaskToDelayedList+0x84>)
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	42aa      	cmp	r2, r5
 80055ba:	d900      	bls.n	80055be <prvAddCurrentTaskToDelayedList+0x5e>
					xNextTaskUnblockTime = xTimeToWake;
 80055bc:	601d      	str	r5, [r3, #0]
}
 80055be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055c0:	6831      	ldr	r1, [r6, #0]
 80055c2:	4809      	ldr	r0, [pc, #36]	; (80055e8 <prvAddCurrentTaskToDelayedList+0x88>)
 80055c4:	3104      	adds	r1, #4
}
 80055c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055ca:	f7ff b963 	b.w	8004894 <vListInsertEnd>
 80055ce:	bf00      	nop
 80055d0:	240050c8 	.word	0x240050c8
 80055d4:	24004ef4 	.word	0x24004ef4
 80055d8:	24005050 	.word	0x24005050
 80055dc:	24004efc 	.word	0x24004efc
 80055e0:	24004ef8 	.word	0x24004ef8
 80055e4:	2400507c 	.word	0x2400507c
 80055e8:	240050a0 	.word	0x240050a0

080055ec <prvDeleteTCB>:
	{
 80055ec:	b510      	push	{r4, lr}
 80055ee:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80055f0:	304c      	adds	r0, #76	; 0x4c
 80055f2:	f00c f973 	bl	80118dc <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80055f6:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
 80055fa:	b163      	cbz	r3, 8005616 <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d013      	beq.n	8005628 <prvDeleteTCB+0x3c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005600:	2b02      	cmp	r3, #2
 8005602:	d010      	beq.n	8005626 <prvDeleteTCB+0x3a>
 8005604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005608:	f383 8811 	msr	BASEPRI, r3
 800560c:	f3bf 8f6f 	isb	sy
 8005610:	f3bf 8f4f 	dsb	sy
 8005614:	e7fe      	b.n	8005614 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 8005616:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005618:	f000 ff86 	bl	8006528 <vPortFree>
				vPortFree( pxTCB );
 800561c:	4620      	mov	r0, r4
	}
 800561e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8005622:	f000 bf81 	b.w	8006528 <vPortFree>
	}
 8005626:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8005628:	4620      	mov	r0, r4
	}
 800562a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800562e:	f000 bf7b 	b.w	8006528 <vPortFree>
 8005632:	bf00      	nop

08005634 <prvIdleTask>:
{
 8005634:	4c15      	ldr	r4, [pc, #84]	; (800568c <prvIdleTask+0x58>)
				taskYIELD();
 8005636:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
 800563a:	4e15      	ldr	r6, [pc, #84]	; (8005690 <prvIdleTask+0x5c>)
 800563c:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
 8005640:	4d14      	ldr	r5, [pc, #80]	; (8005694 <prvIdleTask+0x60>)
 8005642:	f8df a054 	ldr.w	sl, [pc, #84]	; 8005698 <prvIdleTask+0x64>
{
 8005646:	b580      	push	{r7, lr}
 8005648:	e011      	b.n	800566e <prvIdleTask+0x3a>
			taskENTER_CRITICAL();
 800564a:	f000 fd5b 	bl	8006104 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800564e:	68f3      	ldr	r3, [r6, #12]
 8005650:	68df      	ldr	r7, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005652:	1d38      	adds	r0, r7, #4
 8005654:	f7ff f946 	bl	80048e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005658:	682b      	ldr	r3, [r5, #0]
 800565a:	3b01      	subs	r3, #1
 800565c:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800565e:	6823      	ldr	r3, [r4, #0]
 8005660:	3b01      	subs	r3, #1
 8005662:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8005664:	f000 fd70 	bl	8006148 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8005668:	4638      	mov	r0, r7
 800566a:	f7ff ffbf 	bl	80055ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800566e:	6823      	ldr	r3, [r4, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d1ea      	bne.n	800564a <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005674:	f8da 3000 	ldr.w	r3, [sl]
 8005678:	2b01      	cmp	r3, #1
 800567a:	d9f8      	bls.n	800566e <prvIdleTask+0x3a>
				taskYIELD();
 800567c:	f8c9 8d04 	str.w	r8, [r9, #3332]	; 0xd04
 8005680:	f3bf 8f4f 	dsb	sy
 8005684:	f3bf 8f6f 	isb	sy
 8005688:	e7f1      	b.n	800566e <prvIdleTask+0x3a>
 800568a:	bf00      	nop
 800568c:	24005044 	.word	0x24005044
 8005690:	240050b4 	.word	0x240050b4
 8005694:	24005040 	.word	0x24005040
 8005698:	24004f00 	.word	0x24004f00

0800569c <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800569c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056a0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80056a2:	4699      	mov	r9, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80056a4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80056a8:	4607      	mov	r7, r0
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80056aa:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80056ac:	4413      	add	r3, r2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80056ae:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80056b2:	eb06 0683 	add.w	r6, r6, r3, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80056b6:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 80056ba:	2900      	cmp	r1, #0
 80056bc:	d041      	beq.n	8005742 <prvInitialiseNewTask.constprop.0+0xa6>
 80056be:	f101 3cff 	add.w	ip, r1, #4294967295
 80056c2:	f104 0e33 	add.w	lr, r4, #51	; 0x33
 80056c6:	310f      	adds	r1, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80056c8:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
 80056cc:	f80e 5f01 	strb.w	r5, [lr, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 80056d0:	b10d      	cbz	r5, 80056d6 <prvInitialiseNewTask.constprop.0+0x3a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80056d2:	458c      	cmp	ip, r1
 80056d4:	d1f8      	bne.n	80056c8 <prvInitialiseNewTask.constprop.0+0x2c>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80056d6:	2300      	movs	r3, #0
 80056d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80056dc:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 80056de:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80056e2:	1d20      	adds	r0, r4, #4
 80056e4:	2d0f      	cmp	r5, #15
		pxNewTCB->uxMutexesHeld = 0;
 80056e6:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
 80056ea:	bf28      	it	cs
 80056ec:	250f      	movcs	r5, #15
	pxNewTCB->uxPriority = uxPriority;
 80056ee:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80056f0:	6465      	str	r5, [r4, #68]	; 0x44
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056f2:	f1c5 0510 	rsb	r5, r5, #16
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80056f6:	f7ff f8c9 	bl	800488c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80056fa:	f104 0018 	add.w	r0, r4, #24
 80056fe:	f7ff f8c5 	bl	800488c <vListInitialiseItem>
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005702:	224c      	movs	r2, #76	; 0x4c
 8005704:	4651      	mov	r1, sl
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005706:	61a5      	str	r5, [r4, #24]
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005708:	18a0      	adds	r0, r4, r2
		pxNewTCB->ulNotifiedValue = 0;
 800570a:	f8c4 a098 	str.w	sl, [r4, #152]	; 0x98
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800570e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005710:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005712:	f884 a09c 	strb.w	sl, [r4, #156]	; 0x9c
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005716:	f00c f8c9 	bl	80118ac <memset>
 800571a:	4b0b      	ldr	r3, [pc, #44]	; (8005748 <prvInitialiseNewTask.constprop.0+0xac>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800571c:	464a      	mov	r2, r9
 800571e:	4639      	mov	r1, r7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005720:	f103 0568 	add.w	r5, r3, #104	; 0x68
 8005724:	6523      	str	r3, [r4, #80]	; 0x50
 8005726:	33d0      	adds	r3, #208	; 0xd0
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005728:	4630      	mov	r0, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800572a:	6565      	str	r5, [r4, #84]	; 0x54
 800572c:	65a3      	str	r3, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800572e:	f000 fcbb 	bl	80060a8 <pxPortInitialiseStack>
 8005732:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8005734:	f1b8 0f00 	cmp.w	r8, #0
 8005738:	d001      	beq.n	800573e <prvInitialiseNewTask.constprop.0+0xa2>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800573a:	f8c8 4000 	str.w	r4, [r8]
}
 800573e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005742:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 8005746:	e7c9      	b.n	80056dc <prvInitialiseNewTask.constprop.0+0x40>
 8005748:	2400e7ec 	.word	0x2400e7ec

0800574c <xTaskCreateStatic>:
	{
 800574c:	b530      	push	{r4, r5, lr}
 800574e:	b087      	sub	sp, #28
 8005750:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8005752:	b1c4      	cbz	r4, 8005786 <xTaskCreateStatic+0x3a>
		configASSERT( pxTaskBuffer != NULL );
 8005754:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005756:	b16d      	cbz	r5, 8005774 <xTaskCreateStatic+0x28>
			volatile size_t xSize = sizeof( StaticTask_t );
 8005758:	25a0      	movs	r5, #160	; 0xa0
 800575a:	9505      	str	r5, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800575c:	9d05      	ldr	r5, [sp, #20]
 800575e:	2da0      	cmp	r5, #160	; 0xa0
 8005760:	d01a      	beq.n	8005798 <xTaskCreateStatic+0x4c>
 8005762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005766:	f383 8811 	msr	BASEPRI, r3
 800576a:	f3bf 8f6f 	isb	sy
 800576e:	f3bf 8f4f 	dsb	sy
 8005772:	e7fe      	b.n	8005772 <xTaskCreateStatic+0x26>
 8005774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005778:	f383 8811 	msr	BASEPRI, r3
 800577c:	f3bf 8f6f 	isb	sy
 8005780:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8005784:	e7fe      	b.n	8005784 <xTaskCreateStatic+0x38>
 8005786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578a:	f383 8811 	msr	BASEPRI, r3
 800578e:	f3bf 8f6f 	isb	sy
 8005792:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8005796:	e7fe      	b.n	8005796 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005798:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800579a:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800579c:	2402      	movs	r4, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800579e:	9502      	str	r5, [sp, #8]
 80057a0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80057a2:	9500      	str	r5, [sp, #0]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80057a4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80057a6:	f885 409d 	strb.w	r4, [r5, #157]	; 0x9d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80057aa:	ac04      	add	r4, sp, #16
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80057ac:	9d05      	ldr	r5, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80057ae:	9401      	str	r4, [sp, #4]
 80057b0:	f7ff ff74 	bl	800569c <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80057b4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80057b6:	f7ff fe49 	bl	800544c <prvAddNewTaskToReadyList>
	}
 80057ba:	9804      	ldr	r0, [sp, #16]
 80057bc:	b007      	add	sp, #28
 80057be:	bd30      	pop	{r4, r5, pc}

080057c0 <xTaskCreate>:
	{
 80057c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80057c4:	4607      	mov	r7, r0
 80057c6:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80057c8:	0090      	lsls	r0, r2, #2
	{
 80057ca:	4615      	mov	r5, r2
 80057cc:	4688      	mov	r8, r1
 80057ce:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80057d0:	f000 fe14 	bl	80063fc <pvPortMalloc>
			if( pxStack != NULL )
 80057d4:	b1d8      	cbz	r0, 800580e <xTaskCreate+0x4e>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80057d6:	4604      	mov	r4, r0
 80057d8:	20a0      	movs	r0, #160	; 0xa0
 80057da:	f000 fe0f 	bl	80063fc <pvPortMalloc>
				if( pxNewTCB != NULL )
 80057de:	4606      	mov	r6, r0
 80057e0:	b1d0      	cbz	r0, 8005818 <xTaskCreate+0x58>
					pxNewTCB->pxStack = pxStack;
 80057e2:	6304      	str	r4, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80057e4:	2400      	movs	r4, #0
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80057e6:	464b      	mov	r3, r9
 80057e8:	462a      	mov	r2, r5
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80057ea:	f886 409d 	strb.w	r4, [r6, #157]	; 0x9d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80057ee:	4641      	mov	r1, r8
 80057f0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80057f2:	4638      	mov	r0, r7
 80057f4:	9602      	str	r6, [sp, #8]
 80057f6:	9401      	str	r4, [sp, #4]
 80057f8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80057fa:	9400      	str	r4, [sp, #0]
 80057fc:	f7ff ff4e 	bl	800569c <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005800:	4630      	mov	r0, r6
 8005802:	f7ff fe23 	bl	800544c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005806:	2001      	movs	r0, #1
	}
 8005808:	b005      	add	sp, #20
 800580a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800580e:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8005812:	b005      	add	sp, #20
 8005814:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8005818:	4620      	mov	r0, r4
 800581a:	f000 fe85 	bl	8006528 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800581e:	f04f 30ff 	mov.w	r0, #4294967295
 8005822:	e7f1      	b.n	8005808 <xTaskCreate+0x48>

08005824 <vTaskStartScheduler>:
{
 8005824:	b510      	push	{r4, lr}
 8005826:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005828:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800582a:	aa07      	add	r2, sp, #28
 800582c:	a906      	add	r1, sp, #24
 800582e:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005830:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005834:	f7fa fdbc 	bl	80003b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005838:	4623      	mov	r3, r4
 800583a:	9a07      	ldr	r2, [sp, #28]
 800583c:	9400      	str	r4, [sp, #0]
 800583e:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 8005842:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8005846:	4911      	ldr	r1, [pc, #68]	; (800588c <vTaskStartScheduler+0x68>)
 8005848:	4811      	ldr	r0, [pc, #68]	; (8005890 <vTaskStartScheduler+0x6c>)
 800584a:	f7ff ff7f 	bl	800574c <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800584e:	b1d0      	cbz	r0, 8005886 <vTaskStartScheduler+0x62>
 8005850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005854:	f383 8811 	msr	BASEPRI, r3
 8005858:	f3bf 8f6f 	isb	sy
 800585c:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005860:	4b0c      	ldr	r3, [pc, #48]	; (8005894 <vTaskStartScheduler+0x70>)
		xNextTaskUnblockTime = portMAX_DELAY;
 8005862:	f04f 31ff 	mov.w	r1, #4294967295
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005866:	480c      	ldr	r0, [pc, #48]	; (8005898 <vTaskStartScheduler+0x74>)
 8005868:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 800586a:	4a0c      	ldr	r2, [pc, #48]	; (800589c <vTaskStartScheduler+0x78>)
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800586c:	334c      	adds	r3, #76	; 0x4c
		xNextTaskUnblockTime = portMAX_DELAY;
 800586e:	6011      	str	r1, [r2, #0]
		xSchedulerRunning = pdTRUE;
 8005870:	2101      	movs	r1, #1
 8005872:	4a0b      	ldr	r2, [pc, #44]	; (80058a0 <vTaskStartScheduler+0x7c>)
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005874:	6003      	str	r3, [r0, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005876:	4b0b      	ldr	r3, [pc, #44]	; (80058a4 <vTaskStartScheduler+0x80>)
		xSchedulerRunning = pdTRUE;
 8005878:	6011      	str	r1, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800587a:	601c      	str	r4, [r3, #0]
}
 800587c:	b008      	add	sp, #32
 800587e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8005882:	f000 bcd1 	b.w	8006228 <xPortStartScheduler>
}
 8005886:	b008      	add	sp, #32
 8005888:	bd10      	pop	{r4, pc}
 800588a:	bf00      	nop
 800588c:	08012544 	.word	0x08012544
 8005890:	08005635 	.word	0x08005635
 8005894:	24004ef4 	.word	0x24004ef4
 8005898:	24000088 	.word	0x24000088
 800589c:	2400507c 	.word	0x2400507c
 80058a0:	2400509c 	.word	0x2400509c
 80058a4:	240050c8 	.word	0x240050c8

080058a8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80058a8:	4a02      	ldr	r2, [pc, #8]	; (80058b4 <vTaskSuspendAll+0xc>)
 80058aa:	6813      	ldr	r3, [r2, #0]
 80058ac:	3301      	adds	r3, #1
 80058ae:	6013      	str	r3, [r2, #0]
}
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	24005048 	.word	0x24005048

080058b8 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80058b8:	4b01      	ldr	r3, [pc, #4]	; (80058c0 <xTaskGetTickCount+0x8>)
 80058ba:	6818      	ldr	r0, [r3, #0]
}
 80058bc:	4770      	bx	lr
 80058be:	bf00      	nop
 80058c0:	240050c8 	.word	0x240050c8

080058c4 <xTaskGetTickCountFromISR>:
{
 80058c4:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80058c6:	f000 fd39 	bl	800633c <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 80058ca:	4b01      	ldr	r3, [pc, #4]	; (80058d0 <xTaskGetTickCountFromISR+0xc>)
 80058cc:	6818      	ldr	r0, [r3, #0]
}
 80058ce:	bd08      	pop	{r3, pc}
 80058d0:	240050c8 	.word	0x240050c8

080058d4 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058d4:	4b53      	ldr	r3, [pc, #332]	; (8005a24 <xTaskIncrementTick+0x150>)
 80058d6:	681b      	ldr	r3, [r3, #0]
{
 80058d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058dc:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d14c      	bne.n	800597c <xTaskIncrementTick+0xa8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80058e2:	4b51      	ldr	r3, [pc, #324]	; (8005a28 <xTaskIncrementTick+0x154>)
 80058e4:	681d      	ldr	r5, [r3, #0]
 80058e6:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 80058e8:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80058ea:	2d00      	cmp	r5, #0
 80058ec:	d04f      	beq.n	800598e <xTaskIncrementTick+0xba>
 80058ee:	4b4f      	ldr	r3, [pc, #316]	; (8005a2c <xTaskIncrementTick+0x158>)
 80058f0:	9301      	str	r3, [sp, #4]
		if( xConstTickCount >= xNextTaskUnblockTime )
 80058f2:	9b01      	ldr	r3, [sp, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	429d      	cmp	r5, r3
 80058f8:	d356      	bcc.n	80059a8 <xTaskIncrementTick+0xd4>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058fa:	4e4d      	ldr	r6, [pc, #308]	; (8005a30 <xTaskIncrementTick+0x15c>)
 80058fc:	6833      	ldr	r3, [r6, #0]
 80058fe:	681c      	ldr	r4, [r3, #0]
 8005900:	2c00      	cmp	r4, #0
 8005902:	d07d      	beq.n	8005a00 <xTaskIncrementTick+0x12c>
BaseType_t xSwitchRequired = pdFALSE;
 8005904:	2400      	movs	r4, #0
 8005906:	f8df 8140 	ldr.w	r8, [pc, #320]	; 8005a48 <xTaskIncrementTick+0x174>
 800590a:	f8df 9140 	ldr.w	r9, [pc, #320]	; 8005a4c <xTaskIncrementTick+0x178>
					prvAddTaskToReadyList( pxTCB );
 800590e:	f04f 0a01 	mov.w	sl, #1
 8005912:	4f48      	ldr	r7, [pc, #288]	; (8005a34 <xTaskIncrementTick+0x160>)
 8005914:	e024      	b.n	8005960 <xTaskIncrementTick+0x8c>
 8005916:	9100      	str	r1, [sp, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005918:	f7fe ffe4 	bl	80048e4 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800591c:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005920:	f10b 0018 	add.w	r0, fp, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005924:	9900      	ldr	r1, [sp, #0]
 8005926:	b112      	cbz	r2, 800592e <xTaskIncrementTick+0x5a>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005928:	f7fe ffdc 	bl	80048e4 <uxListRemove>
 800592c:	9900      	ldr	r1, [sp, #0]
					prvAddTaskToReadyList( pxTCB );
 800592e:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	fa0a f200 	lsl.w	r2, sl, r0
 8005938:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800593c:	431a      	orrs	r2, r3
 800593e:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8005942:	603a      	str	r2, [r7, #0]
 8005944:	f7fe ffa6 	bl	8004894 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005948:	f8d9 3000 	ldr.w	r3, [r9]
 800594c:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 8005950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8005952:	429a      	cmp	r2, r3
 8005954:	bf28      	it	cs
 8005956:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005958:	6833      	ldr	r3, [r6, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d053      	beq.n	8005a08 <xTaskIncrementTick+0x134>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005960:	6833      	ldr	r3, [r6, #0]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005968:	f8db 2004 	ldr.w	r2, [fp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800596c:	f10b 0104 	add.w	r1, fp, #4
					if( xConstTickCount < xItemValue )
 8005970:	4295      	cmp	r5, r2
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005972:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
 8005974:	d2cf      	bcs.n	8005916 <xTaskIncrementTick+0x42>
						xNextTaskUnblockTime = xItemValue;
 8005976:	9b01      	ldr	r3, [sp, #4]
 8005978:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800597a:	e01a      	b.n	80059b2 <xTaskIncrementTick+0xde>
		++xPendedTicks;
 800597c:	4a2e      	ldr	r2, [pc, #184]	; (8005a38 <xTaskIncrementTick+0x164>)
BaseType_t xSwitchRequired = pdFALSE;
 800597e:	2400      	movs	r4, #0
		++xPendedTicks;
 8005980:	6813      	ldr	r3, [r2, #0]
}
 8005982:	4620      	mov	r0, r4
		++xPendedTicks;
 8005984:	3301      	adds	r3, #1
 8005986:	6013      	str	r3, [r2, #0]
}
 8005988:	b003      	add	sp, #12
 800598a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 800598e:	4b28      	ldr	r3, [pc, #160]	; (8005a30 <xTaskIncrementTick+0x15c>)
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	6812      	ldr	r2, [r2, #0]
 8005994:	b30a      	cbz	r2, 80059da <xTaskIncrementTick+0x106>
 8005996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800599a:	f383 8811 	msr	BASEPRI, r3
 800599e:	f3bf 8f6f 	isb	sy
 80059a2:	f3bf 8f4f 	dsb	sy
 80059a6:	e7fe      	b.n	80059a6 <xTaskIncrementTick+0xd2>
BaseType_t xSwitchRequired = pdFALSE;
 80059a8:	2400      	movs	r4, #0
 80059aa:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8005a48 <xTaskIncrementTick+0x174>
 80059ae:	f8df 909c 	ldr.w	r9, [pc, #156]	; 8005a4c <xTaskIncrementTick+0x178>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80059b2:	f8d9 3000 	ldr.w	r3, [r9]
			if( xYieldPending != pdFALSE )
 80059b6:	4921      	ldr	r1, [pc, #132]	; (8005a3c <xTaskIncrementTick+0x168>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80059b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	f858 2003 	ldr.w	r2, [r8, r3]
			if( xYieldPending != pdFALSE )
 80059c4:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
 80059c6:	2a02      	cmp	r2, #2
 80059c8:	bf28      	it	cs
 80059ca:	2401      	movcs	r4, #1
				xSwitchRequired = pdTRUE;
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	bf18      	it	ne
 80059d0:	2401      	movne	r4, #1
}
 80059d2:	4620      	mov	r0, r4
 80059d4:	b003      	add	sp, #12
 80059d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 80059da:	4a19      	ldr	r2, [pc, #100]	; (8005a40 <xTaskIncrementTick+0x16c>)
 80059dc:	6818      	ldr	r0, [r3, #0]
 80059de:	6811      	ldr	r1, [r2, #0]
 80059e0:	6019      	str	r1, [r3, #0]
 80059e2:	4918      	ldr	r1, [pc, #96]	; (8005a44 <xTaskIncrementTick+0x170>)
 80059e4:	6010      	str	r0, [r2, #0]
 80059e6:	680a      	ldr	r2, [r1, #0]
 80059e8:	3201      	adds	r2, #1
 80059ea:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	6812      	ldr	r2, [r2, #0]
 80059f0:	b97a      	cbnz	r2, 8005a12 <xTaskIncrementTick+0x13e>
		xNextTaskUnblockTime = portMAX_DELAY;
 80059f2:	4b0e      	ldr	r3, [pc, #56]	; (8005a2c <xTaskIncrementTick+0x158>)
 80059f4:	461a      	mov	r2, r3
 80059f6:	9301      	str	r3, [sp, #4]
 80059f8:	f04f 33ff 	mov.w	r3, #4294967295
 80059fc:	6013      	str	r3, [r2, #0]
 80059fe:	e778      	b.n	80058f2 <xTaskIncrementTick+0x1e>
 8005a00:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8005a48 <xTaskIncrementTick+0x174>
 8005a04:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8005a4c <xTaskIncrementTick+0x178>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a08:	f04f 33ff 	mov.w	r3, #4294967295
 8005a0c:	9a01      	ldr	r2, [sp, #4]
 8005a0e:	6013      	str	r3, [r2, #0]
					break;
 8005a10:	e7cf      	b.n	80059b2 <xTaskIncrementTick+0xde>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a12:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005a14:	4a05      	ldr	r2, [pc, #20]	; (8005a2c <xTaskIncrementTick+0x158>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a16:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005a18:	9201      	str	r2, [sp, #4]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	6013      	str	r3, [r2, #0]
}
 8005a20:	e767      	b.n	80058f2 <xTaskIncrementTick+0x1e>
 8005a22:	bf00      	nop
 8005a24:	24005048 	.word	0x24005048
 8005a28:	240050c8 	.word	0x240050c8
 8005a2c:	2400507c 	.word	0x2400507c
 8005a30:	24004ef8 	.word	0x24004ef8
 8005a34:	24005050 	.word	0x24005050
 8005a38:	24005084 	.word	0x24005084
 8005a3c:	240050cc 	.word	0x240050cc
 8005a40:	24004efc 	.word	0x24004efc
 8005a44:	24005080 	.word	0x24005080
 8005a48:	24004f00 	.word	0x24004f00
 8005a4c:	24004ef4 	.word	0x24004ef4

08005a50 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 8005a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a54:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 8005a56:	f000 fb55 	bl	8006104 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8005a5a:	4b38      	ldr	r3, [pc, #224]	; (8005b3c <xTaskResumeAll.part.0+0xec>)
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	3a01      	subs	r2, #1
 8005a60:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d159      	bne.n	8005b1c <xTaskResumeAll.part.0+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005a68:	4b35      	ldr	r3, [pc, #212]	; (8005b40 <xTaskResumeAll.part.0+0xf0>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d055      	beq.n	8005b1c <xTaskResumeAll.part.0+0xcc>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a70:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005b58 <xTaskResumeAll.part.0+0x108>
 8005a74:	f8da 3000 	ldr.w	r3, [sl]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d05c      	beq.n	8005b36 <xTaskResumeAll.part.0+0xe6>
 8005a7c:	4d31      	ldr	r5, [pc, #196]	; (8005b44 <xTaskResumeAll.part.0+0xf4>)
					prvAddTaskToReadyList( pxTCB );
 8005a7e:	2601      	movs	r6, #1
 8005a80:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8005b5c <xTaskResumeAll.part.0+0x10c>
 8005a84:	4f30      	ldr	r7, [pc, #192]	; (8005b48 <xTaskResumeAll.part.0+0xf8>)
 8005a86:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8005b60 <xTaskResumeAll.part.0+0x110>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a8a:	f8da 300c 	ldr.w	r3, [sl, #12]
 8005a8e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a90:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a94:	f104 0018 	add.w	r0, r4, #24
 8005a98:	f7fe ff24 	bl	80048e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a9c:	4658      	mov	r0, fp
 8005a9e:	f7fe ff21 	bl	80048e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005aa2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005aa4:	682a      	ldr	r2, [r5, #0]
 8005aa6:	4659      	mov	r1, fp
 8005aa8:	fa06 f300 	lsl.w	r3, r6, r0
 8005aac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8005ab6:	602b      	str	r3, [r5, #0]
 8005ab8:	f7fe feec 	bl	8004894 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d301      	bcc.n	8005aca <xTaskResumeAll.part.0+0x7a>
						xYieldPending = pdTRUE;
 8005ac6:	f8c9 6000 	str.w	r6, [r9]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005aca:	f8da 3000 	ldr.w	r3, [sl]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d1db      	bne.n	8005a8a <xTaskResumeAll.part.0+0x3a>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ad2:	4b1e      	ldr	r3, [pc, #120]	; (8005b4c <xTaskResumeAll.part.0+0xfc>)
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	6812      	ldr	r2, [r2, #0]
 8005ad8:	b342      	cbz	r2, 8005b2c <xTaskResumeAll.part.0+0xdc>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ada:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005adc:	4b1c      	ldr	r3, [pc, #112]	; (8005b50 <xTaskResumeAll.part.0+0x100>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ade:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005ae0:	68d2      	ldr	r2, [r2, #12]
 8005ae2:	6852      	ldr	r2, [r2, #4]
 8005ae4:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005ae6:	4e1b      	ldr	r6, [pc, #108]	; (8005b54 <xTaskResumeAll.part.0+0x104>)
 8005ae8:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8005aea:	b144      	cbz	r4, 8005afe <xTaskResumeAll.part.0+0xae>
								xYieldPending = pdTRUE;
 8005aec:	2501      	movs	r5, #1
							if( xTaskIncrementTick() != pdFALSE )
 8005aee:	f7ff fef1 	bl	80058d4 <xTaskIncrementTick>
 8005af2:	b108      	cbz	r0, 8005af8 <xTaskResumeAll.part.0+0xa8>
								xYieldPending = pdTRUE;
 8005af4:	f8c9 5000 	str.w	r5, [r9]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005af8:	3c01      	subs	r4, #1
 8005afa:	d1f8      	bne.n	8005aee <xTaskResumeAll.part.0+0x9e>
						xPendedTicks = 0;
 8005afc:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 8005afe:	f8d9 3000 	ldr.w	r3, [r9]
 8005b02:	b15b      	cbz	r3, 8005b1c <xTaskResumeAll.part.0+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
 8005b04:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005b08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b0c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005b10:	f3bf 8f4f 	dsb	sy
 8005b14:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8005b18:	2001      	movs	r0, #1
 8005b1a:	e000      	b.n	8005b1e <xTaskResumeAll.part.0+0xce>
BaseType_t xAlreadyYielded = pdFALSE;
 8005b1c:	2000      	movs	r0, #0
 8005b1e:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8005b20:	f000 fb12 	bl	8006148 <vPortExitCritical>
}
 8005b24:	9801      	ldr	r0, [sp, #4]
 8005b26:	b003      	add	sp, #12
 8005b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xNextTaskUnblockTime = portMAX_DELAY;
 8005b2c:	4b08      	ldr	r3, [pc, #32]	; (8005b50 <xTaskResumeAll.part.0+0x100>)
 8005b2e:	f04f 32ff 	mov.w	r2, #4294967295
 8005b32:	601a      	str	r2, [r3, #0]
 8005b34:	e7d7      	b.n	8005ae6 <xTaskResumeAll.part.0+0x96>
 8005b36:	f8df 9028 	ldr.w	r9, [pc, #40]	; 8005b60 <xTaskResumeAll.part.0+0x110>
 8005b3a:	e7d4      	b.n	8005ae6 <xTaskResumeAll.part.0+0x96>
 8005b3c:	24005048 	.word	0x24005048
 8005b40:	24005040 	.word	0x24005040
 8005b44:	24005050 	.word	0x24005050
 8005b48:	24004ef4 	.word	0x24004ef4
 8005b4c:	24004ef8 	.word	0x24004ef8
 8005b50:	2400507c 	.word	0x2400507c
 8005b54:	24005084 	.word	0x24005084
 8005b58:	24005088 	.word	0x24005088
 8005b5c:	24004f00 	.word	0x24004f00
 8005b60:	240050cc 	.word	0x240050cc

08005b64 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8005b64:	4b06      	ldr	r3, [pc, #24]	; (8005b80 <xTaskResumeAll+0x1c>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	b943      	cbnz	r3, 8005b7c <xTaskResumeAll+0x18>
 8005b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b6e:	f383 8811 	msr	BASEPRI, r3
 8005b72:	f3bf 8f6f 	isb	sy
 8005b76:	f3bf 8f4f 	dsb	sy
 8005b7a:	e7fe      	b.n	8005b7a <xTaskResumeAll+0x16>
 8005b7c:	f7ff bf68 	b.w	8005a50 <xTaskResumeAll.part.0>
 8005b80:	24005048 	.word	0x24005048

08005b84 <vTaskDelay>:
	{
 8005b84:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005b86:	b950      	cbnz	r0, 8005b9e <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8005b88:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005b8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b90:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005b94:	f3bf 8f4f 	dsb	sy
 8005b98:	f3bf 8f6f 	isb	sy
	}
 8005b9c:	bd10      	pop	{r4, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8005b9e:	4c10      	ldr	r4, [pc, #64]	; (8005be0 <vTaskDelay+0x5c>)
 8005ba0:	6821      	ldr	r1, [r4, #0]
 8005ba2:	b141      	cbz	r1, 8005bb6 <vTaskDelay+0x32>
 8005ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba8:	f383 8811 	msr	BASEPRI, r3
 8005bac:	f3bf 8f6f 	isb	sy
 8005bb0:	f3bf 8f4f 	dsb	sy
 8005bb4:	e7fe      	b.n	8005bb4 <vTaskDelay+0x30>
	++uxSchedulerSuspended;
 8005bb6:	6823      	ldr	r3, [r4, #0]
 8005bb8:	3301      	adds	r3, #1
 8005bba:	6023      	str	r3, [r4, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005bbc:	f7ff fcd0 	bl	8005560 <prvAddCurrentTaskToDelayedList>
	configASSERT( uxSchedulerSuspended );
 8005bc0:	6823      	ldr	r3, [r4, #0]
 8005bc2:	b943      	cbnz	r3, 8005bd6 <vTaskDelay+0x52>
 8005bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc8:	f383 8811 	msr	BASEPRI, r3
 8005bcc:	f3bf 8f6f 	isb	sy
 8005bd0:	f3bf 8f4f 	dsb	sy
 8005bd4:	e7fe      	b.n	8005bd4 <vTaskDelay+0x50>
 8005bd6:	f7ff ff3b 	bl	8005a50 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 8005bda:	2800      	cmp	r0, #0
 8005bdc:	d0d4      	beq.n	8005b88 <vTaskDelay+0x4>
	}
 8005bde:	bd10      	pop	{r4, pc}
 8005be0:	24005048 	.word	0x24005048

08005be4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005be4:	4b19      	ldr	r3, [pc, #100]	; (8005c4c <vTaskSwitchContext+0x68>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	b11b      	cbz	r3, 8005bf2 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8005bea:	4b19      	ldr	r3, [pc, #100]	; (8005c50 <vTaskSwitchContext+0x6c>)
 8005bec:	2201      	movs	r2, #1
 8005bee:	601a      	str	r2, [r3, #0]
 8005bf0:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8005bf2:	4917      	ldr	r1, [pc, #92]	; (8005c50 <vTaskSwitchContext+0x6c>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bf4:	4a17      	ldr	r2, [pc, #92]	; (8005c54 <vTaskSwitchContext+0x70>)
		xYieldPending = pdFALSE;
 8005bf6:	600b      	str	r3, [r1, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bf8:	6813      	ldr	r3, [r2, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005bfa:	fab3 f383 	clz	r3, r3
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	4a15      	ldr	r2, [pc, #84]	; (8005c58 <vTaskSwitchContext+0x74>)
 8005c02:	f1c3 031f 	rsb	r3, r3, #31
 8005c06:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005c0a:	0099      	lsls	r1, r3, #2
 8005c0c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005c10:	5850      	ldr	r0, [r2, r1]
 8005c12:	b940      	cbnz	r0, 8005c26 <vTaskSwitchContext+0x42>
	__asm volatile
 8005c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c18:	f383 8811 	msr	BASEPRI, r3
 8005c1c:	f3bf 8f6f 	isb	sy
 8005c20:	f3bf 8f4f 	dsb	sy
 8005c24:	e7fe      	b.n	8005c24 <vTaskSwitchContext+0x40>
 8005c26:	6858      	ldr	r0, [r3, #4]
 8005c28:	3108      	adds	r1, #8
 8005c2a:	6840      	ldr	r0, [r0, #4]
 8005c2c:	440a      	add	r2, r1
 8005c2e:	4290      	cmp	r0, r2
 8005c30:	6058      	str	r0, [r3, #4]
 8005c32:	d007      	beq.n	8005c44 <vTaskSwitchContext+0x60>
 8005c34:	4b09      	ldr	r3, [pc, #36]	; (8005c5c <vTaskSwitchContext+0x78>)
 8005c36:	68c1      	ldr	r1, [r0, #12]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005c38:	4a09      	ldr	r2, [pc, #36]	; (8005c60 <vTaskSwitchContext+0x7c>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c3a:	6019      	str	r1, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	334c      	adds	r3, #76	; 0x4c
 8005c40:	6013      	str	r3, [r2, #0]
}
 8005c42:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c44:	6840      	ldr	r0, [r0, #4]
 8005c46:	6058      	str	r0, [r3, #4]
 8005c48:	e7f4      	b.n	8005c34 <vTaskSwitchContext+0x50>
 8005c4a:	bf00      	nop
 8005c4c:	24005048 	.word	0x24005048
 8005c50:	240050cc 	.word	0x240050cc
 8005c54:	24005050 	.word	0x24005050
 8005c58:	24004f00 	.word	0x24004f00
 8005c5c:	24004ef4 	.word	0x24004ef4
 8005c60:	24000088 	.word	0x24000088

08005c64 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8005c64:	b160      	cbz	r0, 8005c80 <vTaskPlaceOnEventList+0x1c>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c66:	4b0b      	ldr	r3, [pc, #44]	; (8005c94 <vTaskPlaceOnEventList+0x30>)
{
 8005c68:	b510      	push	{r4, lr}
 8005c6a:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c6c:	6819      	ldr	r1, [r3, #0]
 8005c6e:	3118      	adds	r1, #24
 8005c70:	f7fe fe20 	bl	80048b4 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005c74:	4620      	mov	r0, r4
 8005c76:	2101      	movs	r1, #1
}
 8005c78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005c7c:	f7ff bc70 	b.w	8005560 <prvAddCurrentTaskToDelayedList>
 8005c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c84:	f383 8811 	msr	BASEPRI, r3
 8005c88:	f3bf 8f6f 	isb	sy
 8005c8c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8005c90:	e7fe      	b.n	8005c90 <vTaskPlaceOnEventList+0x2c>
 8005c92:	bf00      	nop
 8005c94:	24004ef4 	.word	0x24004ef4

08005c98 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c98:	68c3      	ldr	r3, [r0, #12]
{
 8005c9a:	b530      	push	{r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c9c:	68dc      	ldr	r4, [r3, #12]
{
 8005c9e:	b083      	sub	sp, #12
	configASSERT( pxUnblockedTCB );
 8005ca0:	b364      	cbz	r4, 8005cfc <xTaskRemoveFromEventList+0x64>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005ca2:	f104 0518 	add.w	r5, r4, #24
 8005ca6:	4628      	mov	r0, r5
 8005ca8:	f7fe fe1c 	bl	80048e4 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cac:	4b19      	ldr	r3, [pc, #100]	; (8005d14 <xTaskRemoveFromEventList+0x7c>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	b17b      	cbz	r3, 8005cd2 <xTaskRemoveFromEventList+0x3a>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005cb2:	4629      	mov	r1, r5
 8005cb4:	4818      	ldr	r0, [pc, #96]	; (8005d18 <xTaskRemoveFromEventList+0x80>)
 8005cb6:	f7fe fded 	bl	8004894 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005cba:	4b18      	ldr	r3, [pc, #96]	; (8005d1c <xTaskRemoveFromEventList+0x84>)
 8005cbc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d923      	bls.n	8005d0e <xTaskRemoveFromEventList+0x76>
		xYieldPending = pdTRUE;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	4a15      	ldr	r2, [pc, #84]	; (8005d20 <xTaskRemoveFromEventList+0x88>)
		xReturn = pdTRUE;
 8005cca:	4618      	mov	r0, r3
		xYieldPending = pdTRUE;
 8005ccc:	6013      	str	r3, [r2, #0]
}
 8005cce:	b003      	add	sp, #12
 8005cd0:	bd30      	pop	{r4, r5, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005cd2:	1d21      	adds	r1, r4, #4
 8005cd4:	4608      	mov	r0, r1
 8005cd6:	9101      	str	r1, [sp, #4]
 8005cd8:	f7fe fe04 	bl	80048e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005cdc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005cde:	4a11      	ldr	r2, [pc, #68]	; (8005d24 <xTaskRemoveFromEventList+0x8c>)
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	9901      	ldr	r1, [sp, #4]
 8005ce4:	6815      	ldr	r5, [r2, #0]
 8005ce6:	4083      	lsls	r3, r0
 8005ce8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005cec:	432b      	orrs	r3, r5
 8005cee:	6013      	str	r3, [r2, #0]
 8005cf0:	4b0d      	ldr	r3, [pc, #52]	; (8005d28 <xTaskRemoveFromEventList+0x90>)
 8005cf2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005cf6:	f7fe fdcd 	bl	8004894 <vListInsertEnd>
 8005cfa:	e7de      	b.n	8005cba <xTaskRemoveFromEventList+0x22>
 8005cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d00:	f383 8811 	msr	BASEPRI, r3
 8005d04:	f3bf 8f6f 	isb	sy
 8005d08:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8005d0c:	e7fe      	b.n	8005d0c <xTaskRemoveFromEventList+0x74>
		xReturn = pdFALSE;
 8005d0e:	2000      	movs	r0, #0
}
 8005d10:	b003      	add	sp, #12
 8005d12:	bd30      	pop	{r4, r5, pc}
 8005d14:	24005048 	.word	0x24005048
 8005d18:	24005088 	.word	0x24005088
 8005d1c:	24004ef4 	.word	0x24004ef4
 8005d20:	240050cc 	.word	0x240050cc
 8005d24:	24005050 	.word	0x24005050
 8005d28:	24004f00 	.word	0x24004f00

08005d2c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005d2c:	4a03      	ldr	r2, [pc, #12]	; (8005d3c <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005d2e:	4b04      	ldr	r3, [pc, #16]	; (8005d40 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005d30:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	e9c0 2300 	strd	r2, r3, [r0]
}
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	24005080 	.word	0x24005080
 8005d40:	240050c8 	.word	0x240050c8

08005d44 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 8005d44:	b328      	cbz	r0, 8005d92 <xTaskCheckForTimeOut+0x4e>
{
 8005d46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d48:	460d      	mov	r5, r1
 8005d4a:	b083      	sub	sp, #12
	configASSERT( pxTicksToWait );
 8005d4c:	b1c1      	cbz	r1, 8005d80 <xTaskCheckForTimeOut+0x3c>
 8005d4e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8005d50:	f000 f9d8 	bl	8006104 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 8005d54:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 8005d56:	4a1d      	ldr	r2, [pc, #116]	; (8005dcc <xTaskCheckForTimeOut+0x88>)
			if( *pxTicksToWait == portMAX_DELAY )
 8005d58:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 8005d5a:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8005d5c:	d030      	beq.n	8005dc0 <xTaskCheckForTimeOut+0x7c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005d5e:	f8df c070 	ldr.w	ip, [pc, #112]	; 8005dd0 <xTaskCheckForTimeOut+0x8c>
 8005d62:	6826      	ldr	r6, [r4, #0]
 8005d64:	f8dc 7000 	ldr.w	r7, [ip]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005d68:	6860      	ldr	r0, [r4, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005d6a:	42be      	cmp	r6, r7
 8005d6c:	d01a      	beq.n	8005da4 <xTaskCheckForTimeOut+0x60>
 8005d6e:	4288      	cmp	r0, r1
 8005d70:	d818      	bhi.n	8005da4 <xTaskCheckForTimeOut+0x60>
			xReturn = pdTRUE;
 8005d72:	2001      	movs	r0, #1
 8005d74:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8005d76:	f000 f9e7 	bl	8006148 <vPortExitCritical>
}
 8005d7a:	9801      	ldr	r0, [sp, #4]
 8005d7c:	b003      	add	sp, #12
 8005d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d84:	f383 8811 	msr	BASEPRI, r3
 8005d88:	f3bf 8f6f 	isb	sy
 8005d8c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8005d90:	e7fe      	b.n	8005d90 <xTaskCheckForTimeOut+0x4c>
 8005d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d96:	f383 8811 	msr	BASEPRI, r3
 8005d9a:	f3bf 8f6f 	isb	sy
 8005d9e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8005da2:	e7fe      	b.n	8005da2 <xTaskCheckForTimeOut+0x5e>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005da4:	eba1 0e00 	sub.w	lr, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005da8:	4573      	cmp	r3, lr
 8005daa:	d90b      	bls.n	8005dc4 <xTaskCheckForTimeOut+0x80>
			*pxTicksToWait -= xElapsedTime;
 8005dac:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005dae:	f8dc 1000 	ldr.w	r1, [ip]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005db2:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
 8005db4:	4403      	add	r3, r0
			xReturn = pdFALSE;
 8005db6:	2000      	movs	r0, #0
			*pxTicksToWait -= xElapsedTime;
 8005db8:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005dba:	e9c4 1200 	strd	r1, r2, [r4]
			xReturn = pdFALSE;
 8005dbe:	e7d9      	b.n	8005d74 <xTaskCheckForTimeOut+0x30>
				xReturn = pdFALSE;
 8005dc0:	2000      	movs	r0, #0
 8005dc2:	e7d7      	b.n	8005d74 <xTaskCheckForTimeOut+0x30>
			*pxTicksToWait = 0;
 8005dc4:	2300      	movs	r3, #0
			xReturn = pdTRUE;
 8005dc6:	2001      	movs	r0, #1
			*pxTicksToWait = 0;
 8005dc8:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 8005dca:	e7d3      	b.n	8005d74 <xTaskCheckForTimeOut+0x30>
 8005dcc:	240050c8 	.word	0x240050c8
 8005dd0:	24005080 	.word	0x24005080

08005dd4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8005dd4:	4b01      	ldr	r3, [pc, #4]	; (8005ddc <vTaskMissedYield+0x8>)
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	601a      	str	r2, [r3, #0]
}
 8005dda:	4770      	bx	lr
 8005ddc:	240050cc 	.word	0x240050cc

08005de0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8005de0:	4b05      	ldr	r3, [pc, #20]	; (8005df8 <xTaskGetSchedulerState+0x18>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	b133      	cbz	r3, 8005df4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005de6:	4b05      	ldr	r3, [pc, #20]	; (8005dfc <xTaskGetSchedulerState+0x1c>)
 8005de8:	6818      	ldr	r0, [r3, #0]
 8005dea:	fab0 f080 	clz	r0, r0
 8005dee:	0940      	lsrs	r0, r0, #5
 8005df0:	0040      	lsls	r0, r0, #1
 8005df2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005df4:	2001      	movs	r0, #1
	}
 8005df6:	4770      	bx	lr
 8005df8:	2400509c 	.word	0x2400509c
 8005dfc:	24005048 	.word	0x24005048

08005e00 <xTaskPriorityInherit>:
	{
 8005e00:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8005e02:	4604      	mov	r4, r0
	{
 8005e04:	b082      	sub	sp, #8
		if( pxMutexHolder != NULL )
 8005e06:	b1c8      	cbz	r0, 8005e3c <xTaskPriorityInherit+0x3c>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005e08:	4d22      	ldr	r5, [pc, #136]	; (8005e94 <xTaskPriorityInherit+0x94>)
 8005e0a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005e0c:	682a      	ldr	r2, [r5, #0]
 8005e0e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d215      	bcs.n	8005e40 <xTaskPriorityInherit+0x40>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005e14:	6982      	ldr	r2, [r0, #24]
 8005e16:	2a00      	cmp	r2, #0
 8005e18:	db04      	blt.n	8005e24 <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e1a:	682a      	ldr	r2, [r5, #0]
 8005e1c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005e1e:	f1c2 0210 	rsb	r2, r2, #16
 8005e22:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005e24:	4e1c      	ldr	r6, [pc, #112]	; (8005e98 <xTaskPriorityInherit+0x98>)
 8005e26:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005e2a:	6962      	ldr	r2, [r4, #20]
 8005e2c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d00e      	beq.n	8005e52 <xTaskPriorityInherit+0x52>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005e34:	682b      	ldr	r3, [r5, #0]
				xReturn = pdTRUE;
 8005e36:	2001      	movs	r0, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e3a:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 8005e3c:	b002      	add	sp, #8
 8005e3e:	bd70      	pop	{r4, r5, r6, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005e40:	682b      	ldr	r3, [r5, #0]
 8005e42:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8005e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e46:	4298      	cmp	r0, r3
 8005e48:	bf2c      	ite	cs
 8005e4a:	2000      	movcs	r0, #0
 8005e4c:	2001      	movcc	r0, #1
	}
 8005e4e:	b002      	add	sp, #8
 8005e50:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e52:	1d21      	adds	r1, r4, #4
 8005e54:	4608      	mov	r0, r1
 8005e56:	9101      	str	r1, [sp, #4]
 8005e58:	f7fe fd44 	bl	80048e4 <uxListRemove>
 8005e5c:	9901      	ldr	r1, [sp, #4]
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8005e5e:	4a0f      	ldr	r2, [pc, #60]	; (8005e9c <xTaskPriorityInherit+0x9c>)
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e60:	b930      	cbnz	r0, 8005e70 <xTaskPriorityInherit+0x70>
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8005e62:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005e64:	2001      	movs	r0, #1
 8005e66:	4098      	lsls	r0, r3
 8005e68:	6813      	ldr	r3, [r2, #0]
 8005e6a:	ea23 0300 	bic.w	r3, r3, r0
 8005e6e:	6013      	str	r3, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005e70:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005e72:	6815      	ldr	r5, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e76:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005e78:	2401      	movs	r4, #1
 8005e7a:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8005e7e:	fa04 f303 	lsl.w	r3, r4, r3
 8005e82:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8005e86:	432b      	orrs	r3, r5
 8005e88:	6013      	str	r3, [r2, #0]
 8005e8a:	f7fe fd03 	bl	8004894 <vListInsertEnd>
				xReturn = pdTRUE;
 8005e8e:	4620      	mov	r0, r4
 8005e90:	e7d4      	b.n	8005e3c <xTaskPriorityInherit+0x3c>
 8005e92:	bf00      	nop
 8005e94:	24004ef4 	.word	0x24004ef4
 8005e98:	24004f00 	.word	0x24004f00
 8005e9c:	24005050 	.word	0x24005050

08005ea0 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8005ea0:	b320      	cbz	r0, 8005eec <xTaskPriorityDisinherit+0x4c>
			configASSERT( pxTCB == pxCurrentTCB );
 8005ea2:	4b2a      	ldr	r3, [pc, #168]	; (8005f4c <xTaskPriorityDisinherit+0xac>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4283      	cmp	r3, r0
	{
 8005ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005eaa:	4604      	mov	r4, r0
 8005eac:	b083      	sub	sp, #12
			configASSERT( pxTCB == pxCurrentTCB );
 8005eae:	d008      	beq.n	8005ec2 <xTaskPriorityDisinherit+0x22>
 8005eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb4:	f383 8811 	msr	BASEPRI, r3
 8005eb8:	f3bf 8f6f 	isb	sy
 8005ebc:	f3bf 8f4f 	dsb	sy
 8005ec0:	e7fe      	b.n	8005ec0 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8005ec2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ec4:	b14b      	cbz	r3, 8005eda <xTaskPriorityDisinherit+0x3a>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005ec6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 8005ec8:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005eca:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8005ecc:	6483      	str	r3, [r0, #72]	; 0x48
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005ece:	4291      	cmp	r1, r2
 8005ed0:	d000      	beq.n	8005ed4 <xTaskPriorityDisinherit+0x34>
 8005ed2:	b16b      	cbz	r3, 8005ef0 <xTaskPriorityDisinherit+0x50>
	BaseType_t xReturn = pdFALSE;
 8005ed4:	2000      	movs	r0, #0
	}
 8005ed6:	b003      	add	sp, #12
 8005ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ede:	f383 8811 	msr	BASEPRI, r3
 8005ee2:	f3bf 8f6f 	isb	sy
 8005ee6:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 8005eea:	e7fe      	b.n	8005eea <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 8005eec:	2000      	movs	r0, #0
	}
 8005eee:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ef0:	1d01      	adds	r1, r0, #4
 8005ef2:	4608      	mov	r0, r1
 8005ef4:	9101      	str	r1, [sp, #4]
 8005ef6:	f7fe fcf5 	bl	80048e4 <uxListRemove>
 8005efa:	9901      	ldr	r1, [sp, #4]
 8005efc:	b1a0      	cbz	r0, 8005f28 <xTaskPriorityDisinherit+0x88>
 8005efe:	4814      	ldr	r0, [pc, #80]	; (8005f50 <xTaskPriorityDisinherit+0xb0>)
 8005f00:	4a14      	ldr	r2, [pc, #80]	; (8005f54 <xTaskPriorityDisinherit+0xb4>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005f02:	6c63      	ldr	r3, [r4, #68]	; 0x44
					prvAddTaskToReadyList( pxTCB );
 8005f04:	2501      	movs	r5, #1
 8005f06:	6816      	ldr	r6, [r2, #0]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f08:	f1c3 0710 	rsb	r7, r3, #16
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005f0c:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f0e:	61a7      	str	r7, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8005f10:	fa05 f403 	lsl.w	r4, r5, r3
 8005f14:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005f18:	4334      	orrs	r4, r6
 8005f1a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8005f1e:	6014      	str	r4, [r2, #0]
 8005f20:	f7fe fcb8 	bl	8004894 <vListInsertEnd>
					xReturn = pdTRUE;
 8005f24:	4628      	mov	r0, r5
		return xReturn;
 8005f26:	e7d6      	b.n	8005ed6 <xTaskPriorityDisinherit+0x36>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005f28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005f2a:	4809      	ldr	r0, [pc, #36]	; (8005f50 <xTaskPriorityDisinherit+0xb0>)
 8005f2c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8005f30:	0092      	lsls	r2, r2, #2
 8005f32:	5882      	ldr	r2, [r0, r2]
 8005f34:	b10a      	cbz	r2, 8005f3a <xTaskPriorityDisinherit+0x9a>
 8005f36:	4a07      	ldr	r2, [pc, #28]	; (8005f54 <xTaskPriorityDisinherit+0xb4>)
 8005f38:	e7e3      	b.n	8005f02 <xTaskPriorityDisinherit+0x62>
 8005f3a:	4a06      	ldr	r2, [pc, #24]	; (8005f54 <xTaskPriorityDisinherit+0xb4>)
 8005f3c:	2501      	movs	r5, #1
 8005f3e:	409d      	lsls	r5, r3
 8005f40:	6813      	ldr	r3, [r2, #0]
 8005f42:	ea23 0305 	bic.w	r3, r3, r5
 8005f46:	6013      	str	r3, [r2, #0]
 8005f48:	e7db      	b.n	8005f02 <xTaskPriorityDisinherit+0x62>
 8005f4a:	bf00      	nop
 8005f4c:	24004ef4 	.word	0x24004ef4
 8005f50:	24004f00 	.word	0x24004f00
 8005f54:	24005050 	.word	0x24005050

08005f58 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8005f58:	2800      	cmp	r0, #0
 8005f5a:	d042      	beq.n	8005fe2 <vTaskPriorityDisinheritAfterTimeout+0x8a>
			configASSERT( pxTCB->uxMutexesHeld );
 8005f5c:	6c83      	ldr	r3, [r0, #72]	; 0x48
	{
 8005f5e:	b530      	push	{r4, r5, lr}
 8005f60:	4604      	mov	r4, r0
 8005f62:	b083      	sub	sp, #12
			configASSERT( pxTCB->uxMutexesHeld );
 8005f64:	b153      	cbz	r3, 8005f7c <vTaskPriorityDisinheritAfterTimeout+0x24>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005f66:	6c40      	ldr	r0, [r0, #68]	; 0x44
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005f68:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005f6a:	4281      	cmp	r1, r0
 8005f6c:	bf38      	it	cc
 8005f6e:	4601      	movcc	r1, r0
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005f70:	428a      	cmp	r2, r1
 8005f72:	d001      	beq.n	8005f78 <vTaskPriorityDisinheritAfterTimeout+0x20>
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d00a      	beq.n	8005f8e <vTaskPriorityDisinheritAfterTimeout+0x36>
	}
 8005f78:	b003      	add	sp, #12
 8005f7a:	bd30      	pop	{r4, r5, pc}
 8005f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f80:	f383 8811 	msr	BASEPRI, r3
 8005f84:	f3bf 8f6f 	isb	sy
 8005f88:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 8005f8c:	e7fe      	b.n	8005f8c <vTaskPriorityDisinheritAfterTimeout+0x34>
					configASSERT( pxTCB != pxCurrentTCB );
 8005f8e:	4b1e      	ldr	r3, [pc, #120]	; (8006008 <vTaskPriorityDisinheritAfterTimeout+0xb0>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	42a3      	cmp	r3, r4
 8005f94:	d026      	beq.n	8005fe4 <vTaskPriorityDisinheritAfterTimeout+0x8c>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005f96:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
 8005f98:	62e1      	str	r1, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	db02      	blt.n	8005fa4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f9e:	f1c1 0110 	rsb	r1, r1, #16
 8005fa2:	61a1      	str	r1, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005fa4:	4d19      	ldr	r5, [pc, #100]	; (800600c <vTaskPriorityDisinheritAfterTimeout+0xb4>)
 8005fa6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005faa:	6961      	ldr	r1, [r4, #20]
 8005fac:	eb05 0382 	add.w	r3, r5, r2, lsl #2
 8005fb0:	4299      	cmp	r1, r3
 8005fb2:	d1e1      	bne.n	8005f78 <vTaskPriorityDisinheritAfterTimeout+0x20>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fb4:	1d21      	adds	r1, r4, #4
 8005fb6:	4608      	mov	r0, r1
 8005fb8:	9101      	str	r1, [sp, #4]
 8005fba:	f7fe fc93 	bl	80048e4 <uxListRemove>
 8005fbe:	9901      	ldr	r1, [sp, #4]
 8005fc0:	b1c8      	cbz	r0, 8005ff6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005fc2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	4a12      	ldr	r2, [pc, #72]	; (8006010 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 8005fc8:	4083      	lsls	r3, r0
						prvAddTaskToReadyList( pxTCB );
 8005fca:	6814      	ldr	r4, [r2, #0]
 8005fcc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005fd0:	4323      	orrs	r3, r4
 8005fd2:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8005fd6:	6013      	str	r3, [r2, #0]
	}
 8005fd8:	b003      	add	sp, #12
 8005fda:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 8005fde:	f7fe bc59 	b.w	8004894 <vListInsertEnd>
 8005fe2:	4770      	bx	lr
 8005fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe8:	f383 8811 	msr	BASEPRI, r3
 8005fec:	f3bf 8f6f 	isb	sy
 8005ff0:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 8005ff4:	e7fe      	b.n	8005ff4 <vTaskPriorityDisinheritAfterTimeout+0x9c>
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005ff6:	4a06      	ldr	r2, [pc, #24]	; (8006010 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005ffc:	6814      	ldr	r4, [r2, #0]
 8005ffe:	4083      	lsls	r3, r0
 8006000:	ea24 0403 	bic.w	r4, r4, r3
 8006004:	6014      	str	r4, [r2, #0]
 8006006:	e7e0      	b.n	8005fca <vTaskPriorityDisinheritAfterTimeout+0x72>
 8006008:	24004ef4 	.word	0x24004ef4
 800600c:	24004f00 	.word	0x24004f00
 8006010:	24005050 	.word	0x24005050

08006014 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8006014:	4b04      	ldr	r3, [pc, #16]	; (8006028 <pvTaskIncrementMutexHeldCount+0x14>)
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	b11a      	cbz	r2, 8006022 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800601a:	6819      	ldr	r1, [r3, #0]
 800601c:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 800601e:	3201      	adds	r2, #1
 8006020:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 8006022:	6818      	ldr	r0, [r3, #0]
	}
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	24004ef4 	.word	0x24004ef4

0800602c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800602c:	4808      	ldr	r0, [pc, #32]	; (8006050 <prvPortStartFirstTask+0x24>)
 800602e:	6800      	ldr	r0, [r0, #0]
 8006030:	6800      	ldr	r0, [r0, #0]
 8006032:	f380 8808 	msr	MSP, r0
 8006036:	f04f 0000 	mov.w	r0, #0
 800603a:	f380 8814 	msr	CONTROL, r0
 800603e:	b662      	cpsie	i
 8006040:	b661      	cpsie	f
 8006042:	f3bf 8f4f 	dsb	sy
 8006046:	f3bf 8f6f 	isb	sy
 800604a:	df00      	svc	0
 800604c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800604e:	0000      	.short	0x0000
 8006050:	e000ed08 	.word	0xe000ed08

08006054 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006054:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006064 <vPortEnableVFP+0x10>
 8006058:	6801      	ldr	r1, [r0, #0]
 800605a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800605e:	6001      	str	r1, [r0, #0]
 8006060:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006062:	0000      	.short	0x0000
 8006064:	e000ed88 	.word	0xe000ed88

08006068 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 8006068:	4b0e      	ldr	r3, [pc, #56]	; (80060a4 <prvTaskExitError+0x3c>)
{
 800606a:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800606c:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 800606e:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0;
 8006070:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8006072:	3301      	adds	r3, #1
 8006074:	d008      	beq.n	8006088 <prvTaskExitError+0x20>
 8006076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800607a:	f383 8811 	msr	BASEPRI, r3
 800607e:	f3bf 8f6f 	isb	sy
 8006082:	f3bf 8f4f 	dsb	sy
 8006086:	e7fe      	b.n	8006086 <prvTaskExitError+0x1e>
 8006088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800608c:	f383 8811 	msr	BASEPRI, r3
 8006090:	f3bf 8f6f 	isb	sy
 8006094:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8006098:	9b01      	ldr	r3, [sp, #4]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d0fc      	beq.n	8006098 <prvTaskExitError+0x30>
}
 800609e:	b002      	add	sp, #8
 80060a0:	4770      	bx	lr
 80060a2:	bf00      	nop
 80060a4:	24000024 	.word	0x24000024

080060a8 <pxPortInitialiseStack>:
{
 80060a8:	4603      	mov	r3, r0
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80060aa:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80060ae:	4809      	ldr	r0, [pc, #36]	; (80060d4 <pxPortInitialiseStack+0x2c>)
{
 80060b0:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80060b2:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80060b6:	f843 0c0c 	str.w	r0, [r3, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80060ba:	f843 2c20 	str.w	r2, [r3, #-32]
}
 80060be:	f1a3 0044 	sub.w	r0, r3, #68	; 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80060c2:	e943 1402 	strd	r1, r4, [r3, #-8]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80060c6:	f06f 0102 	mvn.w	r1, #2
}
 80060ca:	f85d 4b04 	ldr.w	r4, [sp], #4
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80060ce:	f843 1c24 	str.w	r1, [r3, #-36]
}
 80060d2:	4770      	bx	lr
 80060d4:	08006069 	.word	0x08006069
	...

080060e0 <SVC_Handler>:
	__asm volatile (
 80060e0:	4b07      	ldr	r3, [pc, #28]	; (8006100 <pxCurrentTCBConst2>)
 80060e2:	6819      	ldr	r1, [r3, #0]
 80060e4:	6808      	ldr	r0, [r1, #0]
 80060e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060ea:	f380 8809 	msr	PSP, r0
 80060ee:	f3bf 8f6f 	isb	sy
 80060f2:	f04f 0000 	mov.w	r0, #0
 80060f6:	f380 8811 	msr	BASEPRI, r0
 80060fa:	4770      	bx	lr
 80060fc:	f3af 8000 	nop.w

08006100 <pxCurrentTCBConst2>:
 8006100:	24004ef4 	.word	0x24004ef4

08006104 <vPortEnterCritical>:
 8006104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006108:	f383 8811 	msr	BASEPRI, r3
 800610c:	f3bf 8f6f 	isb	sy
 8006110:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8006114:	4a0b      	ldr	r2, [pc, #44]	; (8006144 <vPortEnterCritical+0x40>)
 8006116:	6813      	ldr	r3, [r2, #0]
 8006118:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800611a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800611c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800611e:	d000      	beq.n	8006122 <vPortEnterCritical+0x1e>
}
 8006120:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006122:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006126:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800612a:	b2db      	uxtb	r3, r3
 800612c:	2b00      	cmp	r3, #0
 800612e:	d0f7      	beq.n	8006120 <vPortEnterCritical+0x1c>
 8006130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006134:	f383 8811 	msr	BASEPRI, r3
 8006138:	f3bf 8f6f 	isb	sy
 800613c:	f3bf 8f4f 	dsb	sy
 8006140:	e7fe      	b.n	8006140 <vPortEnterCritical+0x3c>
 8006142:	bf00      	nop
 8006144:	24000024 	.word	0x24000024

08006148 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8006148:	4a08      	ldr	r2, [pc, #32]	; (800616c <vPortExitCritical+0x24>)
 800614a:	6813      	ldr	r3, [r2, #0]
 800614c:	b943      	cbnz	r3, 8006160 <vPortExitCritical+0x18>
 800614e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006152:	f383 8811 	msr	BASEPRI, r3
 8006156:	f3bf 8f6f 	isb	sy
 800615a:	f3bf 8f4f 	dsb	sy
 800615e:	e7fe      	b.n	800615e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8006160:	3b01      	subs	r3, #1
 8006162:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006164:	b90b      	cbnz	r3, 800616a <vPortExitCritical+0x22>
	__asm volatile
 8006166:	f383 8811 	msr	BASEPRI, r3
}
 800616a:	4770      	bx	lr
 800616c:	24000024 	.word	0x24000024

08006170 <PendSV_Handler>:
	__asm volatile
 8006170:	f3ef 8009 	mrs	r0, PSP
 8006174:	f3bf 8f6f 	isb	sy
 8006178:	4b15      	ldr	r3, [pc, #84]	; (80061d0 <pxCurrentTCBConst>)
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	f01e 0f10 	tst.w	lr, #16
 8006180:	bf08      	it	eq
 8006182:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006186:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800618a:	6010      	str	r0, [r2, #0]
 800618c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006190:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006194:	f380 8811 	msr	BASEPRI, r0
 8006198:	f3bf 8f4f 	dsb	sy
 800619c:	f3bf 8f6f 	isb	sy
 80061a0:	f7ff fd20 	bl	8005be4 <vTaskSwitchContext>
 80061a4:	f04f 0000 	mov.w	r0, #0
 80061a8:	f380 8811 	msr	BASEPRI, r0
 80061ac:	bc09      	pop	{r0, r3}
 80061ae:	6819      	ldr	r1, [r3, #0]
 80061b0:	6808      	ldr	r0, [r1, #0]
 80061b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061b6:	f01e 0f10 	tst.w	lr, #16
 80061ba:	bf08      	it	eq
 80061bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80061c0:	f380 8809 	msr	PSP, r0
 80061c4:	f3bf 8f6f 	isb	sy
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	f3af 8000 	nop.w

080061d0 <pxCurrentTCBConst>:
 80061d0:	24004ef4 	.word	0x24004ef4

080061d4 <SysTick_Handler>:
{
 80061d4:	b508      	push	{r3, lr}
	__asm volatile
 80061d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061da:	f383 8811 	msr	BASEPRI, r3
 80061de:	f3bf 8f6f 	isb	sy
 80061e2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80061e6:	f7ff fb75 	bl	80058d4 <xTaskIncrementTick>
 80061ea:	b128      	cbz	r0, 80061f8 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80061ec:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80061f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061f4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 80061f8:	2300      	movs	r3, #0
 80061fa:	f383 8811 	msr	BASEPRI, r3
}
 80061fe:	bd08      	pop	{r3, pc}

08006200 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006200:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8006204:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006206:	4806      	ldr	r0, [pc, #24]	; (8006220 <vPortSetupTimerInterrupt+0x20>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006208:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800620a:	4906      	ldr	r1, [pc, #24]	; (8006224 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800620c:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800620e:	6803      	ldr	r3, [r0, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006210:	2007      	movs	r0, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006212:	fba1 1303 	umull	r1, r3, r1, r3
 8006216:	099b      	lsrs	r3, r3, #6
 8006218:	3b01      	subs	r3, #1
 800621a:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800621c:	6110      	str	r0, [r2, #16]
}
 800621e:	4770      	bx	lr
 8006220:	24000000 	.word	0x24000000
 8006224:	10624dd3 	.word	0x10624dd3

08006228 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006228:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800622c:	4a3d      	ldr	r2, [pc, #244]	; (8006324 <xPortStartScheduler+0xfc>)
 800622e:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
 8006232:	4291      	cmp	r1, r2
 8006234:	d041      	beq.n	80062ba <xPortStartScheduler+0x92>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006236:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800623a:	4b3b      	ldr	r3, [pc, #236]	; (8006328 <xPortStartScheduler+0x100>)
 800623c:	429a      	cmp	r2, r3
 800623e:	d033      	beq.n	80062a8 <xPortStartScheduler+0x80>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006240:	4b3a      	ldr	r3, [pc, #232]	; (800632c <xPortStartScheduler+0x104>)
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006242:	20ff      	movs	r0, #255	; 0xff
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006244:	493a      	ldr	r1, [pc, #232]	; (8006330 <xPortStartScheduler+0x108>)
{
 8006246:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006248:	781a      	ldrb	r2, [r3, #0]
{
 800624a:	b083      	sub	sp, #12
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800624c:	4c39      	ldr	r4, [pc, #228]	; (8006334 <xPortStartScheduler+0x10c>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800624e:	b2d2      	uxtb	r2, r2
 8006250:	9201      	str	r2, [sp, #4]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006252:	2207      	movs	r2, #7
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006254:	7018      	strb	r0, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006256:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006258:	6022      	str	r2, [r4, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800625a:	b2db      	uxtb	r3, r3
 800625c:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006260:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006264:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006268:	f003 0350 	and.w	r3, r3, #80	; 0x50
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800626c:	0610      	lsls	r0, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800626e:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006270:	d511      	bpl.n	8006296 <xPortStartScheduler+0x6e>
 8006272:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006274:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006278:	4610      	mov	r0, r2
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800627a:	3a01      	subs	r2, #1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800627c:	005b      	lsls	r3, r3, #1
 800627e:	b2db      	uxtb	r3, r3
 8006280:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006284:	f89d 1003 	ldrb.w	r1, [sp, #3]
 8006288:	0609      	lsls	r1, r1, #24
 800628a:	d4f3      	bmi.n	8006274 <xPortStartScheduler+0x4c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800628c:	2803      	cmp	r0, #3
 800628e:	6020      	str	r0, [r4, #0]
 8006290:	f88d 3003 	strb.w	r3, [sp, #3]
 8006294:	d01a      	beq.n	80062cc <xPortStartScheduler+0xa4>
	__asm volatile
 8006296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800629a:	f383 8811 	msr	BASEPRI, r3
 800629e:	f3bf 8f6f 	isb	sy
 80062a2:	f3bf 8f4f 	dsb	sy
 80062a6:	e7fe      	b.n	80062a6 <xPortStartScheduler+0x7e>
 80062a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ac:	f383 8811 	msr	BASEPRI, r3
 80062b0:	f3bf 8f6f 	isb	sy
 80062b4:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80062b8:	e7fe      	b.n	80062b8 <xPortStartScheduler+0x90>
 80062ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062be:	f383 8811 	msr	BASEPRI, r3
 80062c2:	f3bf 8f6f 	isb	sy
 80062c6:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80062ca:	e7fe      	b.n	80062ca <xPortStartScheduler+0xa2>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80062cc:	9b01      	ldr	r3, [sp, #4]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80062ce:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80062d2:	4a16      	ldr	r2, [pc, #88]	; (800632c <xPortStartScheduler+0x104>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80062d4:	f44f 7140 	mov.w	r1, #768	; 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80062d8:	b2db      	uxtb	r3, r3
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80062da:	6021      	str	r1, [r4, #0]
	uxCriticalNesting = 0;
 80062dc:	2400      	movs	r4, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80062de:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80062e0:	f8d5 3d20 	ldr.w	r3, [r5, #3360]	; 0xd20
 80062e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80062e8:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80062ec:	f8d5 3d20 	ldr.w	r3, [r5, #3360]	; 0xd20
 80062f0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80062f4:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 80062f8:	f7ff ff82 	bl	8006200 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80062fc:	4b0e      	ldr	r3, [pc, #56]	; (8006338 <xPortStartScheduler+0x110>)
 80062fe:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8006300:	f7ff fea8 	bl	8006054 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006304:	f8d5 3f34 	ldr.w	r3, [r5, #3892]	; 0xf34
 8006308:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800630c:	f8c5 3f34 	str.w	r3, [r5, #3892]	; 0xf34
	prvPortStartFirstTask();
 8006310:	f7ff fe8c 	bl	800602c <prvPortStartFirstTask>
	vTaskSwitchContext();
 8006314:	f7ff fc66 	bl	8005be4 <vTaskSwitchContext>
}
 8006318:	4620      	mov	r0, r4
	prvTaskExitError();
 800631a:	f7ff fea5 	bl	8006068 <prvTaskExitError>
}
 800631e:	b003      	add	sp, #12
 8006320:	bd30      	pop	{r4, r5, pc}
 8006322:	bf00      	nop
 8006324:	410fc271 	.word	0x410fc271
 8006328:	410fc270 	.word	0x410fc270
 800632c:	e000e400 	.word	0xe000e400
 8006330:	240050d0 	.word	0x240050d0
 8006334:	240050d4 	.word	0x240050d4
 8006338:	24000024 	.word	0x24000024

0800633c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800633c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006340:	2b0f      	cmp	r3, #15
 8006342:	d90e      	bls.n	8006362 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006344:	4911      	ldr	r1, [pc, #68]	; (800638c <vPortValidateInterruptPriority+0x50>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006346:	4a12      	ldr	r2, [pc, #72]	; (8006390 <vPortValidateInterruptPriority+0x54>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006348:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800634a:	7812      	ldrb	r2, [r2, #0]
 800634c:	429a      	cmp	r2, r3
 800634e:	d908      	bls.n	8006362 <vPortValidateInterruptPriority+0x26>
 8006350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006354:	f383 8811 	msr	BASEPRI, r3
 8006358:	f3bf 8f6f 	isb	sy
 800635c:	f3bf 8f4f 	dsb	sy
 8006360:	e7fe      	b.n	8006360 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006362:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006366:	4a0b      	ldr	r2, [pc, #44]	; (8006394 <vPortValidateInterruptPriority+0x58>)
 8006368:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800636c:	6812      	ldr	r2, [r2, #0]
 800636e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006372:	4293      	cmp	r3, r2
 8006374:	d908      	bls.n	8006388 <vPortValidateInterruptPriority+0x4c>
 8006376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800637a:	f383 8811 	msr	BASEPRI, r3
 800637e:	f3bf 8f6f 	isb	sy
 8006382:	f3bf 8f4f 	dsb	sy
 8006386:	e7fe      	b.n	8006386 <vPortValidateInterruptPriority+0x4a>
	}
 8006388:	4770      	bx	lr
 800638a:	bf00      	nop
 800638c:	e000e3f0 	.word	0xe000e3f0
 8006390:	240050d0 	.word	0x240050d0
 8006394:	240050d4 	.word	0x240050d4

08006398 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006398:	4b16      	ldr	r3, [pc, #88]	; (80063f4 <prvInsertBlockIntoFreeList+0x5c>)
 800639a:	461a      	mov	r2, r3
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4283      	cmp	r3, r0
 80063a0:	d3fb      	bcc.n	800639a <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80063a2:	6851      	ldr	r1, [r2, #4]
 80063a4:	eb02 0c01 	add.w	ip, r2, r1
 80063a8:	4560      	cmp	r0, ip
 80063aa:	d01a      	beq.n	80063e2 <prvInsertBlockIntoFreeList+0x4a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80063ac:	6841      	ldr	r1, [r0, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80063ae:	eb00 0c01 	add.w	ip, r0, r1
 80063b2:	4563      	cmp	r3, ip
 80063b4:	d005      	beq.n	80063c2 <prvInsertBlockIntoFreeList+0x2a>

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80063b6:	4282      	cmp	r2, r0
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80063b8:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80063ba:	bf18      	it	ne
 80063bc:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 80063be:	4770      	bx	lr
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80063c0:	4610      	mov	r0, r2
{
 80063c2:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80063c4:	4c0c      	ldr	r4, [pc, #48]	; (80063f8 <prvInsertBlockIntoFreeList+0x60>)
 80063c6:	6824      	ldr	r4, [r4, #0]
 80063c8:	42a3      	cmp	r3, r4
 80063ca:	d003      	beq.n	80063d4 <prvInsertBlockIntoFreeList+0x3c>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80063cc:	e9d3 3400 	ldrd	r3, r4, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80063d0:	4421      	add	r1, r4
 80063d2:	6041      	str	r1, [r0, #4]
	if( pxIterator != pxBlockToInsert )
 80063d4:	4282      	cmp	r2, r0
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80063d6:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 80063d8:	d000      	beq.n	80063dc <prvInsertBlockIntoFreeList+0x44>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80063da:	6010      	str	r0, [r2, #0]
	}
}
 80063dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063e0:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80063e2:	6840      	ldr	r0, [r0, #4]
 80063e4:	4401      	add	r1, r0
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80063e6:	1850      	adds	r0, r2, r1
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80063e8:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80063ea:	4283      	cmp	r3, r0
 80063ec:	d0e8      	beq.n	80063c0 <prvInsertBlockIntoFreeList+0x28>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80063ee:	6013      	str	r3, [r2, #0]
	if( pxIterator != pxBlockToInsert )
 80063f0:	4770      	bx	lr
 80063f2:	bf00      	nop
 80063f4:	2400b4f0 	.word	0x2400b4f0
 80063f8:	240050d8 	.word	0x240050d8

080063fc <pvPortMalloc>:
{
 80063fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxEnd == NULL )
 8006400:	4e42      	ldr	r6, [pc, #264]	; (800650c <pvPortMalloc+0x110>)
{
 8006402:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8006404:	f7ff fa50 	bl	80058a8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8006408:	6833      	ldr	r3, [r6, #0]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d05a      	beq.n	80064c4 <pvPortMalloc+0xc8>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800640e:	4b40      	ldr	r3, [pc, #256]	; (8006510 <pvPortMalloc+0x114>)
 8006410:	681d      	ldr	r5, [r3, #0]
			if( xWantedSize > 0 )
 8006412:	422c      	tst	r4, r5
 8006414:	d12e      	bne.n	8006474 <pvPortMalloc+0x78>
 8006416:	b36c      	cbz	r4, 8006474 <pvPortMalloc+0x78>
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006418:	0760      	lsls	r0, r4, #29
				xWantedSize += xHeapStructSize;
 800641a:	f104 0108 	add.w	r1, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800641e:	d002      	beq.n	8006426 <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006420:	f021 0107 	bic.w	r1, r1, #7
 8006424:	3108      	adds	r1, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006426:	b329      	cbz	r1, 8006474 <pvPortMalloc+0x78>
 8006428:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 8006524 <pvPortMalloc+0x128>
 800642c:	f8d8 7000 	ldr.w	r7, [r8]
 8006430:	428f      	cmp	r7, r1
 8006432:	d31f      	bcc.n	8006474 <pvPortMalloc+0x78>
				pxBlock = xStart.pxNextFreeBlock;
 8006434:	4837      	ldr	r0, [pc, #220]	; (8006514 <pvPortMalloc+0x118>)
 8006436:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006438:	e003      	b.n	8006442 <pvPortMalloc+0x46>
 800643a:	6823      	ldr	r3, [r4, #0]
 800643c:	b123      	cbz	r3, 8006448 <pvPortMalloc+0x4c>
 800643e:	4620      	mov	r0, r4
 8006440:	461c      	mov	r4, r3
 8006442:	6862      	ldr	r2, [r4, #4]
 8006444:	428a      	cmp	r2, r1
 8006446:	d3f8      	bcc.n	800643a <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 8006448:	6833      	ldr	r3, [r6, #0]
 800644a:	42a3      	cmp	r3, r4
 800644c:	d012      	beq.n	8006474 <pvPortMalloc+0x78>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800644e:	6823      	ldr	r3, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006450:	6806      	ldr	r6, [r0, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006452:	6003      	str	r3, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006454:	1a53      	subs	r3, r2, r1
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006456:	3608      	adds	r6, #8
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006458:	2b10      	cmp	r3, #16
 800645a:	d916      	bls.n	800648a <pvPortMalloc+0x8e>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800645c:	1860      	adds	r0, r4, r1
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800645e:	0742      	lsls	r2, r0, #29
 8006460:	d00e      	beq.n	8006480 <pvPortMalloc+0x84>
 8006462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006466:	f383 8811 	msr	BASEPRI, r3
 800646a:	f3bf 8f6f 	isb	sy
 800646e:	f3bf 8f4f 	dsb	sy
 8006472:	e7fe      	b.n	8006472 <pvPortMalloc+0x76>
	( void ) xTaskResumeAll();
 8006474:	2600      	movs	r6, #0
 8006476:	f7ff fb75 	bl	8005b64 <xTaskResumeAll>
}
 800647a:	4630      	mov	r0, r6
 800647c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006480:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006482:	6061      	str	r1, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006484:	f7ff ff88 	bl	8006398 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006488:	6862      	ldr	r2, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800648a:	4b23      	ldr	r3, [pc, #140]	; (8006518 <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800648c:	1abf      	subs	r7, r7, r2
					xNumberOfSuccessfulAllocations++;
 800648e:	4923      	ldr	r1, [pc, #140]	; (800651c <pvPortMalloc+0x120>)
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006490:	4315      	orrs	r5, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006492:	6818      	ldr	r0, [r3, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8006494:	2200      	movs	r2, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006496:	f8c8 7000 	str.w	r7, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800649a:	4287      	cmp	r7, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800649c:	bf38      	it	cc
 800649e:	601f      	strcc	r7, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80064a0:	680b      	ldr	r3, [r1, #0]
 80064a2:	3301      	adds	r3, #1
					pxBlock->pxNextFreeBlock = NULL;
 80064a4:	e9c4 2500 	strd	r2, r5, [r4]
					xNumberOfSuccessfulAllocations++;
 80064a8:	600b      	str	r3, [r1, #0]
	( void ) xTaskResumeAll();
 80064aa:	f7ff fb5b 	bl	8005b64 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80064ae:	0773      	lsls	r3, r6, #29
 80064b0:	d0e3      	beq.n	800647a <pvPortMalloc+0x7e>
 80064b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b6:	f383 8811 	msr	BASEPRI, r3
 80064ba:	f3bf 8f6f 	isb	sy
 80064be:	f3bf 8f4f 	dsb	sy
 80064c2:	e7fe      	b.n	80064c2 <pvPortMalloc+0xc6>
	uxAddress = ( size_t ) ucHeap;
 80064c4:	4b16      	ldr	r3, [pc, #88]	; (8006520 <pvPortMalloc+0x124>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80064c6:	075d      	lsls	r5, r3, #29
 80064c8:	d119      	bne.n	80064fe <pvPortMalloc+0x102>
 80064ca:	f503 42c8 	add.w	r2, r3, #25600	; 0x6400
 80064ce:	4619      	mov	r1, r3
	uxAddress -= xHeapStructSize;
 80064d0:	3a08      	subs	r2, #8
	xStart.xBlockSize = ( size_t ) 0;
 80064d2:	2000      	movs	r0, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80064d4:	4d0f      	ldr	r5, [pc, #60]	; (8006514 <pvPortMalloc+0x118>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80064d6:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80064da:	f022 0207 	bic.w	r2, r2, #7
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80064de:	1ad3      	subs	r3, r2, r3
	pxEnd = ( void * ) uxAddress;
 80064e0:	6032      	str	r2, [r6, #0]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80064e2:	e9c5 1000 	strd	r1, r0, [r5]
	pxEnd->pxNextFreeBlock = NULL;
 80064e6:	e9c2 0000 	strd	r0, r0, [r2]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80064ea:	e9c1 2300 	strd	r2, r3, [r1]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064ee:	4a0a      	ldr	r2, [pc, #40]	; (8006518 <pvPortMalloc+0x11c>)
}
 80064f0:	463d      	mov	r5, r7
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064f4:	4a0b      	ldr	r2, [pc, #44]	; (8006524 <pvPortMalloc+0x128>)
 80064f6:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80064f8:	4b05      	ldr	r3, [pc, #20]	; (8006510 <pvPortMalloc+0x114>)
 80064fa:	601f      	str	r7, [r3, #0]
}
 80064fc:	e789      	b.n	8006412 <pvPortMalloc+0x16>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80064fe:	1dd9      	adds	r1, r3, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006500:	f503 42c8 	add.w	r2, r3, #25600	; 0x6400
	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006504:	f021 0107 	bic.w	r1, r1, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006508:	460b      	mov	r3, r1
 800650a:	e7e1      	b.n	80064d0 <pvPortMalloc+0xd4>
 800650c:	240050d8 	.word	0x240050d8
 8006510:	2400b4dc 	.word	0x2400b4dc
 8006514:	2400b4f0 	.word	0x2400b4f0
 8006518:	2400b4e4 	.word	0x2400b4e4
 800651c:	2400b4e8 	.word	0x2400b4e8
 8006520:	240050dc 	.word	0x240050dc
 8006524:	2400b4e0 	.word	0x2400b4e0

08006528 <vPortFree>:
	if( pv != NULL )
 8006528:	b1d0      	cbz	r0, 8006560 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800652a:	4a1c      	ldr	r2, [pc, #112]	; (800659c <vPortFree+0x74>)
 800652c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8006530:	6812      	ldr	r2, [r2, #0]
 8006532:	4213      	tst	r3, r2
 8006534:	d00b      	beq.n	800654e <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006536:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800653a:	b191      	cbz	r1, 8006562 <vPortFree+0x3a>
 800653c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006540:	f383 8811 	msr	BASEPRI, r3
 8006544:	f3bf 8f6f 	isb	sy
 8006548:	f3bf 8f4f 	dsb	sy
 800654c:	e7fe      	b.n	800654c <vPortFree+0x24>
 800654e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006552:	f383 8811 	msr	BASEPRI, r3
 8006556:	f3bf 8f6f 	isb	sy
 800655a:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800655e:	e7fe      	b.n	800655e <vPortFree+0x36>
 8006560:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006562:	ea23 0302 	bic.w	r3, r3, r2
{
 8006566:	b500      	push	{lr}
 8006568:	b083      	sub	sp, #12
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800656a:	f840 3c04 	str.w	r3, [r0, #-4]
 800656e:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
 8006570:	f7ff f99a 	bl	80058a8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006574:	4a0a      	ldr	r2, [pc, #40]	; (80065a0 <vPortFree+0x78>)
 8006576:	9801      	ldr	r0, [sp, #4]
 8006578:	6811      	ldr	r1, [r2, #0]
 800657a:	f850 3c04 	ldr.w	r3, [r0, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800657e:	3808      	subs	r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006580:	440b      	add	r3, r1
 8006582:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006584:	f7ff ff08 	bl	8006398 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006588:	4a06      	ldr	r2, [pc, #24]	; (80065a4 <vPortFree+0x7c>)
 800658a:	6813      	ldr	r3, [r2, #0]
 800658c:	3301      	adds	r3, #1
 800658e:	6013      	str	r3, [r2, #0]
}
 8006590:	b003      	add	sp, #12
 8006592:	f85d eb04 	ldr.w	lr, [sp], #4
				( void ) xTaskResumeAll();
 8006596:	f7ff bae5 	b.w	8005b64 <xTaskResumeAll>
 800659a:	bf00      	nop
 800659c:	2400b4dc 	.word	0x2400b4dc
 80065a0:	2400b4e0 	.word	0x2400b4e0
 80065a4:	2400b4ec 	.word	0x2400b4ec

080065a8 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 80065a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  void *buf = NULL;
 80065ac:	2300      	movs	r3, #0
{
 80065ae:	b082      	sub	sp, #8
  void *buf = NULL;
 80065b0:	9301      	str	r3, [sp, #4]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80065b2:	2900      	cmp	r1, #0
 80065b4:	d075      	beq.n	80066a2 <netconn_recv_data+0xfa>
  *new_buf = NULL;
 80065b6:	4604      	mov	r4, r0
 80065b8:	460d      	mov	r5, r1
 80065ba:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80065bc:	2800      	cmp	r0, #0
 80065be:	d066      	beq.n	800668e <netconn_recv_data+0xe6>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80065c0:	f100 0810 	add.w	r8, r0, #16
 80065c4:	4616      	mov	r6, r2
 80065c6:	4640      	mov	r0, r8
 80065c8:	f00a fa4c 	bl	8010a64 <sys_mbox_valid>
 80065cc:	4607      	mov	r7, r0
 80065ce:	b310      	cbz	r0, 8006616 <netconn_recv_data+0x6e>
    }
    return ERR_CONN;
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80065d0:	7f23      	ldrb	r3, [r4, #28]
 80065d2:	f006 0204 	and.w	r2, r6, #4
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 80065d6:	a901      	add	r1, sp, #4
 80065d8:	4640      	mov	r0, r8
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80065da:	f003 0303 	and.w	r3, r3, #3
 80065de:	4313      	orrs	r3, r2
 80065e0:	d025      	beq.n	800662e <netconn_recv_data+0x86>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 80065e2:	f00a fa29 	bl	8010a38 <sys_arch_mbox_tryfetch>
 80065e6:	3001      	adds	r0, #1
 80065e8:	d035      	beq.n	8006656 <netconn_recv_data+0xae>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80065ea:	7823      	ldrb	r3, [r4, #0]
 80065ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80065f0:	2b10      	cmp	r3, #16
 80065f2:	d023      	beq.n	800663c <netconn_recv_data+0x94>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80065f4:	9b01      	ldr	r3, [sp, #4]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d03d      	beq.n	8006676 <netconn_recv_data+0xce>
    len = netbuf_len((struct netbuf *)buf);
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	8912      	ldrh	r2, [r2, #8]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 80065fe:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006600:	b11e      	cbz	r6, 800660a <netconn_recv_data+0x62>
 8006602:	2101      	movs	r1, #1
 8006604:	4620      	mov	r0, r4
 8006606:	47b0      	blx	r6
 8006608:	9b01      	ldr	r3, [sp, #4]

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800660a:	2600      	movs	r6, #0
  *new_buf = buf;
 800660c:	602b      	str	r3, [r5, #0]
}
 800660e:	4630      	mov	r0, r6
 8006610:	b002      	add	sp, #8
 8006612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
    return ERR_OK;
  }
  SYS_ARCH_PROTECT(lev);
 8006616:	f00a fab1 	bl	8010b7c <sys_arch_protect>
  err = conn->pending_err;
 800661a:	f994 6008 	ldrsb.w	r6, [r4, #8]
  conn->pending_err = ERR_OK;
 800661e:	7227      	strb	r7, [r4, #8]
  SYS_ARCH_UNPROTECT(lev);
 8006620:	f00a fab8 	bl	8010b94 <sys_arch_unprotect>
    if (err != ERR_OK) {
 8006624:	2e00      	cmp	r6, #0
 8006626:	d1f2      	bne.n	800660e <netconn_recv_data+0x66>
    return ERR_CONN;
 8006628:	f06f 060a 	mvn.w	r6, #10
 800662c:	e7ef      	b.n	800660e <netconn_recv_data+0x66>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800662e:	f994 2008 	ldrsb.w	r2, [r4, #8]
 8006632:	2a00      	cmp	r2, #0
 8006634:	d1d5      	bne.n	80065e2 <netconn_recv_data+0x3a>
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8006636:	f00a f9dd 	bl	80109f4 <sys_arch_mbox_fetch>
 800663a:	e7d6      	b.n	80065ea <netconn_recv_data+0x42>
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800663c:	f10d 0103 	add.w	r1, sp, #3
 8006640:	9801      	ldr	r0, [sp, #4]
 8006642:	f001 f875 	bl	8007730 <lwip_netconn_is_err_msg>
 8006646:	b1f8      	cbz	r0, 8006688 <netconn_recv_data+0xe0>
      if (err == ERR_CLSD) {
 8006648:	f99d 6003 	ldrsb.w	r6, [sp, #3]
        return ERR_OK;
 800664c:	f116 0f0f 	cmn.w	r6, #15
 8006650:	bf08      	it	eq
 8006652:	2600      	moveq	r6, #0
 8006654:	e7db      	b.n	800660e <netconn_recv_data+0x66>
  SYS_ARCH_PROTECT(lev);
 8006656:	f00a fa91 	bl	8010b7c <sys_arch_protect>
  conn->pending_err = ERR_OK;
 800665a:	2300      	movs	r3, #0
  err = conn->pending_err;
 800665c:	f994 6008 	ldrsb.w	r6, [r4, #8]
  conn->pending_err = ERR_OK;
 8006660:	7223      	strb	r3, [r4, #8]
  SYS_ARCH_UNPROTECT(lev);
 8006662:	f00a fa97 	bl	8010b94 <sys_arch_unprotect>
      if (err != ERR_OK) {
 8006666:	2e00      	cmp	r6, #0
 8006668:	d1d1      	bne.n	800660e <netconn_recv_data+0x66>
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800666a:	7f23      	ldrb	r3, [r4, #28]
 800666c:	07db      	lsls	r3, r3, #31
 800666e:	d4db      	bmi.n	8006628 <netconn_recv_data+0x80>
      return ERR_WOULDBLOCK;
 8006670:	f06f 0606 	mvn.w	r6, #6
 8006674:	e7cb      	b.n	800660e <netconn_recv_data+0x66>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8006676:	4b10      	ldr	r3, [pc, #64]	; (80066b8 <netconn_recv_data+0x110>)
 8006678:	f240 2291 	movw	r2, #657	; 0x291
 800667c:	490f      	ldr	r1, [pc, #60]	; (80066bc <netconn_recv_data+0x114>)
 800667e:	4810      	ldr	r0, [pc, #64]	; (80066c0 <netconn_recv_data+0x118>)
 8006680:	f00a ffbe 	bl	8011600 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8006684:	9b01      	ldr	r3, [sp, #4]
 8006686:	e7b8      	b.n	80065fa <netconn_recv_data+0x52>
    len = ((struct pbuf *)buf)->tot_len;
 8006688:	9b01      	ldr	r3, [sp, #4]
 800668a:	891a      	ldrh	r2, [r3, #8]
 800668c:	e7b7      	b.n	80065fe <netconn_recv_data+0x56>
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800668e:	4b0a      	ldr	r3, [pc, #40]	; (80066b8 <netconn_recv_data+0x110>)
 8006690:	f240 224a 	movw	r2, #586	; 0x24a
 8006694:	490b      	ldr	r1, [pc, #44]	; (80066c4 <netconn_recv_data+0x11c>)
 8006696:	f06f 060f 	mvn.w	r6, #15
 800669a:	4809      	ldr	r0, [pc, #36]	; (80066c0 <netconn_recv_data+0x118>)
 800669c:	f00a ffb0 	bl	8011600 <iprintf>
 80066a0:	e7b5      	b.n	800660e <netconn_recv_data+0x66>
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80066a2:	4b05      	ldr	r3, [pc, #20]	; (80066b8 <netconn_recv_data+0x110>)
 80066a4:	f44f 7212 	mov.w	r2, #584	; 0x248
 80066a8:	4907      	ldr	r1, [pc, #28]	; (80066c8 <netconn_recv_data+0x120>)
 80066aa:	f06f 060f 	mvn.w	r6, #15
 80066ae:	4804      	ldr	r0, [pc, #16]	; (80066c0 <netconn_recv_data+0x118>)
 80066b0:	f00a ffa6 	bl	8011600 <iprintf>
 80066b4:	e7ab      	b.n	800660e <netconn_recv_data+0x66>
 80066b6:	bf00      	nop
 80066b8:	0801254c 	.word	0x0801254c
 80066bc:	080125bc 	.word	0x080125bc
 80066c0:	080124d0 	.word	0x080124d0
 80066c4:	080125a0 	.word	0x080125a0
 80066c8:	08012580 	.word	0x08012580

080066cc <netconn_recv_data_tcp>:
{
 80066cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066ce:	4604      	mov	r4, r0
 80066d0:	b091      	sub	sp, #68	; 0x44
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80066d2:	3010      	adds	r0, #16
{
 80066d4:	460e      	mov	r6, r1
 80066d6:	4617      	mov	r7, r2
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80066d8:	f00a f9c4 	bl	8010a64 <sys_mbox_valid>
 80066dc:	2800      	cmp	r0, #0
 80066de:	d053      	beq.n	8006788 <netconn_recv_data_tcp+0xbc>
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 80066e0:	f994 201c 	ldrsb.w	r2, [r4, #28]
 80066e4:	7f23      	ldrb	r3, [r4, #28]
 80066e6:	2a00      	cmp	r2, #0
 80066e8:	db1c      	blt.n	8006724 <netconn_recv_data_tcp+0x58>
  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 80066ea:	463a      	mov	r2, r7
 80066ec:	4631      	mov	r1, r6
 80066ee:	4620      	mov	r0, r4
 80066f0:	f7ff ff5a 	bl	80065a8 <netconn_recv_data>
  if (err != ERR_OK) {
 80066f4:	4605      	mov	r5, r0
 80066f6:	b990      	cbnz	r0, 800671e <netconn_recv_data_tcp+0x52>
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 80066f8:	073a      	lsls	r2, r7, #28
  buf = *new_buf;
 80066fa:	6836      	ldr	r6, [r6, #0]
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 80066fc:	d40e      	bmi.n	800671c <netconn_recv_data_tcp+0x50>
    u16_t len = buf ? buf->tot_len : 1;
 80066fe:	b39e      	cbz	r6, 8006768 <netconn_recv_data_tcp+0x9c>
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8006700:	8932      	ldrh	r2, [r6, #8]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8006702:	7823      	ldrb	r3, [r4, #0]
 8006704:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006708:	2b10      	cmp	r3, #16
 800670a:	d140      	bne.n	800678e <netconn_recv_data_tcp+0xc2>
  msg->msg.r.len = len;
 800670c:	9202      	str	r2, [sp, #8]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800670e:	4669      	mov	r1, sp
 8006710:	f104 020c 	add.w	r2, r4, #12
 8006714:	4823      	ldr	r0, [pc, #140]	; (80067a4 <netconn_recv_data_tcp+0xd8>)
  msg->conn = conn;
 8006716:	9400      	str	r4, [sp, #0]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006718:	f002 fde8 	bl	80092ec <tcpip_send_msg_wait_sem>
  if (buf == NULL) {
 800671c:	b1de      	cbz	r6, 8006756 <netconn_recv_data_tcp+0x8a>
}
 800671e:	4628      	mov	r0, r5
 8006720:	b011      	add	sp, #68	; 0x44
 8006722:	bdf0      	pop	{r4, r5, r6, r7, pc}
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8006724:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006728:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800672a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800672c:	b11b      	cbz	r3, 8006736 <netconn_recv_data_tcp+0x6a>
 800672e:	2200      	movs	r2, #0
 8006730:	2101      	movs	r1, #1
 8006732:	4620      	mov	r0, r4
 8006734:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8006736:	6866      	ldr	r6, [r4, #4]
 8006738:	b9c6      	cbnz	r6, 800676c <netconn_recv_data_tcp+0xa0>
  SYS_ARCH_PROTECT(lev);
 800673a:	f00a fa1f 	bl	8010b7c <sys_arch_protect>
  err = conn->pending_err;
 800673e:	f994 5008 	ldrsb.w	r5, [r4, #8]
  conn->pending_err = ERR_OK;
 8006742:	7226      	strb	r6, [r4, #8]
  SYS_ARCH_UNPROTECT(lev);
 8006744:	f00a fa26 	bl	8010b94 <sys_arch_unprotect>
        return ERR_RST;
 8006748:	2d00      	cmp	r5, #0
 800674a:	bf08      	it	eq
 800674c:	f06f 050d 	mvneq.w	r5, #13
}
 8006750:	4628      	mov	r0, r5
 8006752:	b011      	add	sp, #68	; 0x44
 8006754:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (apiflags & NETCONN_NOFIN) {
 8006756:	06fb      	lsls	r3, r7, #27
 8006758:	d5e7      	bpl.n	800672a <netconn_recv_data_tcp+0x5e>
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800675a:	7f23      	ldrb	r3, [r4, #28]
      return ERR_WOULDBLOCK;
 800675c:	f06f 0506 	mvn.w	r5, #6
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8006760:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006764:	7723      	strb	r3, [r4, #28]
      return ERR_WOULDBLOCK;
 8006766:	e7da      	b.n	800671e <netconn_recv_data_tcp+0x52>
 8006768:	2201      	movs	r2, #1
 800676a:	e7ca      	b.n	8006702 <netconn_recv_data_tcp+0x36>
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800676c:	f642 1301 	movw	r3, #10497	; 0x2901
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006770:	f104 020c 	add.w	r2, r4, #12
 8006774:	a908      	add	r1, sp, #32
 8006776:	480c      	ldr	r0, [pc, #48]	; (80067a8 <netconn_recv_data_tcp+0xdc>)
      return ERR_CLSD;
 8006778:	f06f 050e 	mvn.w	r5, #14
  API_MSG_VAR_REF(msg).conn = conn;
 800677c:	9408      	str	r4, [sp, #32]
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800677e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006782:	f002 fdb3 	bl	80092ec <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8006786:	e7ca      	b.n	800671e <netconn_recv_data_tcp+0x52>
    return ERR_CONN;
 8006788:	f06f 050a 	mvn.w	r5, #10
 800678c:	e7c7      	b.n	800671e <netconn_recv_data_tcp+0x52>
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800678e:	4b07      	ldr	r3, [pc, #28]	; (80067ac <netconn_recv_data_tcp+0xe0>)
 8006790:	f240 22a7 	movw	r2, #679	; 0x2a7
 8006794:	4906      	ldr	r1, [pc, #24]	; (80067b0 <netconn_recv_data_tcp+0xe4>)
 8006796:	4807      	ldr	r0, [pc, #28]	; (80067b4 <netconn_recv_data_tcp+0xe8>)
 8006798:	f00a ff32 	bl	8011600 <iprintf>
  if (buf == NULL) {
 800679c:	2e00      	cmp	r6, #0
 800679e:	d1be      	bne.n	800671e <netconn_recv_data_tcp+0x52>
 80067a0:	e7d9      	b.n	8006756 <netconn_recv_data_tcp+0x8a>
 80067a2:	bf00      	nop
 80067a4:	08007d4d 	.word	0x08007d4d
 80067a8:	08007ef1 	.word	0x08007ef1
 80067ac:	0801254c 	.word	0x0801254c
 80067b0:	080125c8 	.word	0x080125c8
 80067b4:	080124d0 	.word	0x080124d0

080067b8 <netconn_new_with_proto_and_callback>:
{
 80067b8:	b570      	push	{r4, r5, r6, lr}
 80067ba:	460d      	mov	r5, r1
 80067bc:	b088      	sub	sp, #32
  conn = netconn_alloc(t, callback);
 80067be:	4611      	mov	r1, r2
 80067c0:	f001 f818 	bl	80077f4 <netconn_alloc>
  if (conn != NULL) {
 80067c4:	4604      	mov	r4, r0
 80067c6:	b170      	cbz	r0, 80067e6 <netconn_new_with_proto_and_callback+0x2e>
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80067c8:	f100 060c 	add.w	r6, r0, #12
 80067cc:	4669      	mov	r1, sp
 80067ce:	4823      	ldr	r0, [pc, #140]	; (800685c <netconn_new_with_proto_and_callback+0xa4>)
 80067d0:	4632      	mov	r2, r6
    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 80067d2:	f88d 5008 	strb.w	r5, [sp, #8]
    API_MSG_VAR_REF(msg).conn = conn;
 80067d6:	9400      	str	r4, [sp, #0]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80067d8:	f002 fd88 	bl	80092ec <tcpip_send_msg_wait_sem>
    if (err != ERR_OK) {
 80067dc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80067e0:	4318      	orrs	r0, r3
 80067e2:	b240      	sxtb	r0, r0
 80067e4:	b910      	cbnz	r0, 80067ec <netconn_new_with_proto_and_callback+0x34>
}
 80067e6:	4620      	mov	r0, r4
 80067e8:	b008      	add	sp, #32
 80067ea:	bd70      	pop	{r4, r5, r6, pc}
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 80067ec:	6863      	ldr	r3, [r4, #4]
 80067ee:	b12b      	cbz	r3, 80067fc <netconn_new_with_proto_and_callback+0x44>
 80067f0:	4b1b      	ldr	r3, [pc, #108]	; (8006860 <netconn_new_with_proto_and_callback+0xa8>)
 80067f2:	22a3      	movs	r2, #163	; 0xa3
 80067f4:	491b      	ldr	r1, [pc, #108]	; (8006864 <netconn_new_with_proto_and_callback+0xac>)
 80067f6:	481c      	ldr	r0, [pc, #112]	; (8006868 <netconn_new_with_proto_and_callback+0xb0>)
 80067f8:	f00a ff02 	bl	8011600 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 80067fc:	f104 0510 	add.w	r5, r4, #16
 8006800:	4628      	mov	r0, r5
 8006802:	f00a f92f 	bl	8010a64 <sys_mbox_valid>
 8006806:	b310      	cbz	r0, 800684e <netconn_new_with_proto_and_callback+0x96>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8006808:	f104 0014 	add.w	r0, r4, #20
 800680c:	f00a f92a 	bl	8010a64 <sys_mbox_valid>
 8006810:	b9b0      	cbnz	r0, 8006840 <netconn_new_with_proto_and_callback+0x88>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8006812:	4630      	mov	r0, r6
 8006814:	f00a f96e 	bl	8010af4 <sys_sem_valid>
 8006818:	b158      	cbz	r0, 8006832 <netconn_new_with_proto_and_callback+0x7a>
      sys_sem_free(&conn->op_completed);
 800681a:	4630      	mov	r0, r6
 800681c:	f00a f966 	bl	8010aec <sys_sem_free>
      sys_mbox_free(&conn->recvmbox);
 8006820:	4628      	mov	r0, r5
 8006822:	f00a f8d3 	bl	80109cc <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8006826:	4621      	mov	r1, r4
 8006828:	2007      	movs	r0, #7
      return NULL;
 800682a:	2400      	movs	r4, #0
      memp_free(MEMP_NETCONN, conn);
 800682c:	f003 f9a8 	bl	8009b80 <memp_free>
      return NULL;
 8006830:	e7d9      	b.n	80067e6 <netconn_new_with_proto_and_callback+0x2e>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8006832:	4b0b      	ldr	r3, [pc, #44]	; (8006860 <netconn_new_with_proto_and_callback+0xa8>)
 8006834:	22a9      	movs	r2, #169	; 0xa9
 8006836:	490d      	ldr	r1, [pc, #52]	; (800686c <netconn_new_with_proto_and_callback+0xb4>)
 8006838:	480b      	ldr	r0, [pc, #44]	; (8006868 <netconn_new_with_proto_and_callback+0xb0>)
 800683a:	f00a fee1 	bl	8011600 <iprintf>
 800683e:	e7ec      	b.n	800681a <netconn_new_with_proto_and_callback+0x62>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8006840:	4b07      	ldr	r3, [pc, #28]	; (8006860 <netconn_new_with_proto_and_callback+0xa8>)
 8006842:	22a6      	movs	r2, #166	; 0xa6
 8006844:	490a      	ldr	r1, [pc, #40]	; (8006870 <netconn_new_with_proto_and_callback+0xb8>)
 8006846:	4808      	ldr	r0, [pc, #32]	; (8006868 <netconn_new_with_proto_and_callback+0xb0>)
 8006848:	f00a feda 	bl	8011600 <iprintf>
 800684c:	e7e1      	b.n	8006812 <netconn_new_with_proto_and_callback+0x5a>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800684e:	4b04      	ldr	r3, [pc, #16]	; (8006860 <netconn_new_with_proto_and_callback+0xa8>)
 8006850:	22a4      	movs	r2, #164	; 0xa4
 8006852:	4908      	ldr	r1, [pc, #32]	; (8006874 <netconn_new_with_proto_and_callback+0xbc>)
 8006854:	4804      	ldr	r0, [pc, #16]	; (8006868 <netconn_new_with_proto_and_callback+0xb0>)
 8006856:	f00a fed3 	bl	8011600 <iprintf>
 800685a:	e7d5      	b.n	8006808 <netconn_new_with_proto_and_callback+0x50>
 800685c:	0800778d 	.word	0x0800778d
 8006860:	0801254c 	.word	0x0801254c
 8006864:	080125ec 	.word	0x080125ec
 8006868:	080124d0 	.word	0x080124d0
 800686c:	0801264c 	.word	0x0801264c
 8006870:	08012628 	.word	0x08012628
 8006874:	08012610 	.word	0x08012610

08006878 <netconn_prepare_delete>:
  if (conn == NULL) {
 8006878:	4603      	mov	r3, r0
 800687a:	b1a8      	cbz	r0, 80068a8 <netconn_prepare_delete+0x30>
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800687c:	f04f 0c29 	mov.w	ip, #41	; 0x29
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006880:	f100 020c 	add.w	r2, r0, #12
 8006884:	4809      	ldr	r0, [pc, #36]	; (80068ac <netconn_prepare_delete+0x34>)
{
 8006886:	b500      	push	{lr}
 8006888:	b089      	sub	sp, #36	; 0x24
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800688a:	4669      	mov	r1, sp
  API_MSG_VAR_REF(msg).conn = conn;
 800688c:	9300      	str	r3, [sp, #0]
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800688e:	f88d c009 	strb.w	ip, [sp, #9]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006892:	f002 fd2b 	bl	80092ec <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8006896:	b110      	cbz	r0, 800689e <netconn_prepare_delete+0x26>
}
 8006898:	b009      	add	sp, #36	; 0x24
 800689a:	f85d fb04 	ldr.w	pc, [sp], #4
    return apimsg->err;
 800689e:	f99d 0004 	ldrsb.w	r0, [sp, #4]
}
 80068a2:	b009      	add	sp, #36	; 0x24
 80068a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80068a8:	4770      	bx	lr
 80068aa:	bf00      	nop
 80068ac:	08007aed 	.word	0x08007aed

080068b0 <netconn_delete>:
{
 80068b0:	b530      	push	{r4, r5, lr}
  if (conn == NULL) {
 80068b2:	4604      	mov	r4, r0
{
 80068b4:	b089      	sub	sp, #36	; 0x24
  if (conn == NULL) {
 80068b6:	b1c0      	cbz	r0, 80068ea <netconn_delete+0x3a>
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80068b8:	2329      	movs	r3, #41	; 0x29
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80068ba:	f100 020c 	add.w	r2, r0, #12
 80068be:	4669      	mov	r1, sp
 80068c0:	480c      	ldr	r0, [pc, #48]	; (80068f4 <netconn_delete+0x44>)
  API_MSG_VAR_REF(msg).conn = conn;
 80068c2:	9400      	str	r4, [sp, #0]
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80068c4:	f88d 3009 	strb.w	r3, [sp, #9]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80068c8:	f002 fd10 	bl	80092ec <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 80068cc:	4605      	mov	r5, r0
 80068ce:	b110      	cbz	r0, 80068d6 <netconn_delete+0x26>
}
 80068d0:	4628      	mov	r0, r5
 80068d2:	b009      	add	sp, #36	; 0x24
 80068d4:	bd30      	pop	{r4, r5, pc}
    return apimsg->err;
 80068d6:	f99d 5004 	ldrsb.w	r5, [sp, #4]
  if (err != ERR_OK) {
 80068da:	2d00      	cmp	r5, #0
 80068dc:	d1f8      	bne.n	80068d0 <netconn_delete+0x20>
    netconn_free(conn);
 80068de:	4620      	mov	r0, r4
 80068e0:	f000 ffce 	bl	8007880 <netconn_free>
}
 80068e4:	4628      	mov	r0, r5
 80068e6:	b009      	add	sp, #36	; 0x24
 80068e8:	bd30      	pop	{r4, r5, pc}
    return ERR_OK;
 80068ea:	4605      	mov	r5, r0
}
 80068ec:	4628      	mov	r0, r5
 80068ee:	b009      	add	sp, #36	; 0x24
 80068f0:	bd30      	pop	{r4, r5, pc}
 80068f2:	bf00      	nop
 80068f4:	08007aed 	.word	0x08007aed

080068f8 <netconn_getaddr>:
{
 80068f8:	b530      	push	{r4, r5, lr}
 80068fa:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 80068fc:	b338      	cbz	r0, 800694e <netconn_getaddr+0x56>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 80068fe:	460c      	mov	r4, r1
 8006900:	b1d9      	cbz	r1, 800693a <netconn_getaddr+0x42>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 8006902:	4615      	mov	r5, r2
 8006904:	b17a      	cbz	r2, 8006926 <netconn_getaddr+0x2e>
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006906:	f100 020c 	add.w	r2, r0, #12
  API_MSG_VAR_REF(msg).conn = conn;
 800690a:	9000      	str	r0, [sp, #0]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800690c:	4669      	mov	r1, sp
 800690e:	4815      	ldr	r0, [pc, #84]	; (8006964 <netconn_getaddr+0x6c>)
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 8006910:	f88d 3010 	strb.w	r3, [sp, #16]
  msg.msg.ad.port = port;
 8006914:	e9cd 4502 	strd	r4, r5, [sp, #8]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006918:	f002 fce8 	bl	80092ec <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 800691c:	b908      	cbnz	r0, 8006922 <netconn_getaddr+0x2a>
    return apimsg->err;
 800691e:	f99d 0004 	ldrsb.w	r0, [sp, #4]
}
 8006922:	b009      	add	sp, #36	; 0x24
 8006924:	bd30      	pop	{r4, r5, pc}
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 8006926:	4b10      	ldr	r3, [pc, #64]	; (8006968 <netconn_getaddr+0x70>)
 8006928:	f44f 728a 	mov.w	r2, #276	; 0x114
 800692c:	490f      	ldr	r1, [pc, #60]	; (800696c <netconn_getaddr+0x74>)
 800692e:	4810      	ldr	r0, [pc, #64]	; (8006970 <netconn_getaddr+0x78>)
 8006930:	f00a fe66 	bl	8011600 <iprintf>
 8006934:	f06f 000f 	mvn.w	r0, #15
 8006938:	e7f3      	b.n	8006922 <netconn_getaddr+0x2a>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 800693a:	4b0b      	ldr	r3, [pc, #44]	; (8006968 <netconn_getaddr+0x70>)
 800693c:	f240 1213 	movw	r2, #275	; 0x113
 8006940:	490c      	ldr	r1, [pc, #48]	; (8006974 <netconn_getaddr+0x7c>)
 8006942:	480b      	ldr	r0, [pc, #44]	; (8006970 <netconn_getaddr+0x78>)
 8006944:	f00a fe5c 	bl	8011600 <iprintf>
 8006948:	f06f 000f 	mvn.w	r0, #15
 800694c:	e7e9      	b.n	8006922 <netconn_getaddr+0x2a>
  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 800694e:	4b06      	ldr	r3, [pc, #24]	; (8006968 <netconn_getaddr+0x70>)
 8006950:	f44f 7289 	mov.w	r2, #274	; 0x112
 8006954:	4908      	ldr	r1, [pc, #32]	; (8006978 <netconn_getaddr+0x80>)
 8006956:	4806      	ldr	r0, [pc, #24]	; (8006970 <netconn_getaddr+0x78>)
 8006958:	f00a fe52 	bl	8011600 <iprintf>
 800695c:	f06f 000f 	mvn.w	r0, #15
 8006960:	e7df      	b.n	8006922 <netconn_getaddr+0x2a>
 8006962:	bf00      	nop
 8006964:	08007e5d 	.word	0x08007e5d
 8006968:	0801254c 	.word	0x0801254c
 800696c:	080126a8 	.word	0x080126a8
 8006970:	080124d0 	.word	0x080124d0
 8006974:	08012688 	.word	0x08012688
 8006978:	08012668 	.word	0x08012668

0800697c <netconn_bind>:
{
 800697c:	b500      	push	{lr}
 800697e:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8006980:	b1a0      	cbz	r0, 80069ac <netconn_bind+0x30>
  if (addr == NULL) {
 8006982:	460b      	mov	r3, r1
 8006984:	4694      	mov	ip, r2
 8006986:	b179      	cbz	r1, 80069a8 <netconn_bind+0x2c>
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006988:	f100 020c 	add.w	r2, r0, #12
  API_MSG_VAR_REF(msg).conn = conn;
 800698c:	9000      	str	r0, [sp, #0]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800698e:	4669      	mov	r1, sp
 8006990:	480b      	ldr	r0, [pc, #44]	; (80069c0 <netconn_bind+0x44>)
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8006992:	9302      	str	r3, [sp, #8]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8006994:	f8ad c00c 	strh.w	ip, [sp, #12]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006998:	f002 fca8 	bl	80092ec <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 800699c:	b908      	cbnz	r0, 80069a2 <netconn_bind+0x26>
    return apimsg->err;
 800699e:	f99d 0004 	ldrsb.w	r0, [sp, #4]
}
 80069a2:	b009      	add	sp, #36	; 0x24
 80069a4:	f85d fb04 	ldr.w	pc, [sp], #4
    addr = IP4_ADDR_ANY;
 80069a8:	4b06      	ldr	r3, [pc, #24]	; (80069c4 <netconn_bind+0x48>)
 80069aa:	e7ed      	b.n	8006988 <netconn_bind+0xc>
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80069ac:	4b06      	ldr	r3, [pc, #24]	; (80069c8 <netconn_bind+0x4c>)
 80069ae:	f44f 729c 	mov.w	r2, #312	; 0x138
 80069b2:	4906      	ldr	r1, [pc, #24]	; (80069cc <netconn_bind+0x50>)
 80069b4:	4806      	ldr	r0, [pc, #24]	; (80069d0 <netconn_bind+0x54>)
 80069b6:	f00a fe23 	bl	8011600 <iprintf>
 80069ba:	f06f 000f 	mvn.w	r0, #15
 80069be:	e7f0      	b.n	80069a2 <netconn_bind+0x26>
 80069c0:	08007c09 	.word	0x08007c09
 80069c4:	08014f0c 	.word	0x08014f0c
 80069c8:	0801254c 	.word	0x0801254c
 80069cc:	080126c8 	.word	0x080126c8
 80069d0:	080124d0 	.word	0x080124d0

080069d4 <netconn_listen_with_backlog>:
{
 80069d4:	b500      	push	{lr}
 80069d6:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 80069d8:	b168      	cbz	r0, 80069f6 <netconn_listen_with_backlog+0x22>
  API_MSG_VAR_REF(msg).conn = conn;
 80069da:	4603      	mov	r3, r0
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80069dc:	f100 020c 	add.w	r2, r0, #12
 80069e0:	4669      	mov	r1, sp
 80069e2:	480a      	ldr	r0, [pc, #40]	; (8006a0c <netconn_listen_with_backlog+0x38>)
  API_MSG_VAR_REF(msg).conn = conn;
 80069e4:	9300      	str	r3, [sp, #0]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80069e6:	f002 fc81 	bl	80092ec <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 80069ea:	b908      	cbnz	r0, 80069f0 <netconn_listen_with_backlog+0x1c>
    return apimsg->err;
 80069ec:	f99d 0004 	ldrsb.w	r0, [sp, #4]
}
 80069f0:	b009      	add	sp, #36	; 0x24
 80069f2:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 80069f6:	4b06      	ldr	r3, [pc, #24]	; (8006a10 <netconn_listen_with_backlog+0x3c>)
 80069f8:	f240 12bb 	movw	r2, #443	; 0x1bb
 80069fc:	4905      	ldr	r1, [pc, #20]	; (8006a14 <netconn_listen_with_backlog+0x40>)
 80069fe:	4806      	ldr	r0, [pc, #24]	; (8006a18 <netconn_listen_with_backlog+0x44>)
 8006a00:	f00a fdfe 	bl	8011600 <iprintf>
 8006a04:	f06f 000f 	mvn.w	r0, #15
 8006a08:	e7f2      	b.n	80069f0 <netconn_listen_with_backlog+0x1c>
 8006a0a:	bf00      	nop
 8006a0c:	08007c41 	.word	0x08007c41
 8006a10:	0801254c 	.word	0x0801254c
 8006a14:	080126e4 	.word	0x080126e4
 8006a18:	080124d0 	.word	0x080124d0

08006a1c <netconn_accept>:
{
 8006a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a1e:	b083      	sub	sp, #12
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8006a20:	2900      	cmp	r1, #0
 8006a22:	d04d      	beq.n	8006ac0 <netconn_accept+0xa4>
  *new_conn = NULL;
 8006a24:	2500      	movs	r5, #0
 8006a26:	4604      	mov	r4, r0
 8006a28:	460e      	mov	r6, r1
 8006a2a:	600d      	str	r5, [r1, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8006a2c:	2800      	cmp	r0, #0
 8006a2e:	d03d      	beq.n	8006aac <netconn_accept+0x90>
  SYS_ARCH_PROTECT(lev);
 8006a30:	f00a f8a4 	bl	8010b7c <sys_arch_protect>
  err = conn->pending_err;
 8006a34:	f994 7008 	ldrsb.w	r7, [r4, #8]
  conn->pending_err = ERR_OK;
 8006a38:	7225      	strb	r5, [r4, #8]
  SYS_ARCH_UNPROTECT(lev);
 8006a3a:	f00a f8ab 	bl	8010b94 <sys_arch_unprotect>
  err = netconn_err(conn);
 8006a3e:	f88d 7003 	strb.w	r7, [sp, #3]
  if (err != ERR_OK) {
 8006a42:	b117      	cbz	r7, 8006a4a <netconn_accept+0x2e>
}
 8006a44:	4638      	mov	r0, r7
 8006a46:	b003      	add	sp, #12
 8006a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8006a4a:	f104 0514 	add.w	r5, r4, #20
 8006a4e:	4628      	mov	r0, r5
 8006a50:	f00a f808 	bl	8010a64 <sys_mbox_valid>
 8006a54:	b338      	cbz	r0, 8006aa6 <netconn_accept+0x8a>
 8006a56:	7f23      	ldrb	r3, [r4, #28]
 8006a58:	07da      	lsls	r2, r3, #31
 8006a5a:	d424      	bmi.n	8006aa6 <netconn_accept+0x8a>
  if (netconn_is_nonblocking(conn)) {
 8006a5c:	079b      	lsls	r3, r3, #30
 8006a5e:	d517      	bpl.n	8006a90 <netconn_accept+0x74>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8006a60:	a901      	add	r1, sp, #4
 8006a62:	4628      	mov	r0, r5
 8006a64:	f009 ffe8 	bl	8010a38 <sys_arch_mbox_tryfetch>
 8006a68:	3001      	adds	r0, #1
 8006a6a:	d033      	beq.n	8006ad4 <netconn_accept+0xb8>
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8006a6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a6e:	b11b      	cbz	r3, 8006a78 <netconn_accept+0x5c>
 8006a70:	2200      	movs	r2, #0
 8006a72:	4620      	mov	r0, r4
 8006a74:	2101      	movs	r1, #1
 8006a76:	4798      	blx	r3
  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8006a78:	f10d 0103 	add.w	r1, sp, #3
 8006a7c:	9801      	ldr	r0, [sp, #4]
 8006a7e:	f000 fe57 	bl	8007730 <lwip_netconn_is_err_msg>
 8006a82:	b958      	cbnz	r0, 8006a9c <netconn_accept+0x80>
  if (accept_ptr == NULL) {
 8006a84:	9b01      	ldr	r3, [sp, #4]
 8006a86:	b173      	cbz	r3, 8006aa6 <netconn_accept+0x8a>
}
 8006a88:	4638      	mov	r0, r7
  *new_conn = newconn;
 8006a8a:	6033      	str	r3, [r6, #0]
}
 8006a8c:	b003      	add	sp, #12
 8006a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8006a90:	463a      	mov	r2, r7
 8006a92:	4628      	mov	r0, r5
 8006a94:	a901      	add	r1, sp, #4
 8006a96:	f009 ffad 	bl	80109f4 <sys_arch_mbox_fetch>
 8006a9a:	e7e7      	b.n	8006a6c <netconn_accept+0x50>
    return err;
 8006a9c:	f99d 7003 	ldrsb.w	r7, [sp, #3]
}
 8006aa0:	4638      	mov	r0, r7
 8006aa2:	b003      	add	sp, #12
 8006aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ERR_CLSD;
 8006aa6:	f06f 070e 	mvn.w	r7, #14
 8006aaa:	e7cb      	b.n	8006a44 <netconn_accept+0x28>
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8006aac:	4b0b      	ldr	r3, [pc, #44]	; (8006adc <netconn_accept+0xc0>)
 8006aae:	f240 12e3 	movw	r2, #483	; 0x1e3
 8006ab2:	490b      	ldr	r1, [pc, #44]	; (8006ae0 <netconn_accept+0xc4>)
 8006ab4:	f06f 070f 	mvn.w	r7, #15
 8006ab8:	480a      	ldr	r0, [pc, #40]	; (8006ae4 <netconn_accept+0xc8>)
 8006aba:	f00a fda1 	bl	8011600 <iprintf>
 8006abe:	e7c1      	b.n	8006a44 <netconn_accept+0x28>
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8006ac0:	4b06      	ldr	r3, [pc, #24]	; (8006adc <netconn_accept+0xc0>)
 8006ac2:	f240 12e1 	movw	r2, #481	; 0x1e1
 8006ac6:	4908      	ldr	r1, [pc, #32]	; (8006ae8 <netconn_accept+0xcc>)
 8006ac8:	f06f 070f 	mvn.w	r7, #15
 8006acc:	4805      	ldr	r0, [pc, #20]	; (8006ae4 <netconn_accept+0xc8>)
 8006ace:	f00a fd97 	bl	8011600 <iprintf>
 8006ad2:	e7b7      	b.n	8006a44 <netconn_accept+0x28>
      return ERR_WOULDBLOCK;
 8006ad4:	f06f 0706 	mvn.w	r7, #6
 8006ad8:	e7b4      	b.n	8006a44 <netconn_accept+0x28>
 8006ada:	bf00      	nop
 8006adc:	0801254c 	.word	0x0801254c
 8006ae0:	08012724 	.word	0x08012724
 8006ae4:	080124d0 	.word	0x080124d0
 8006ae8:	08012704 	.word	0x08012704

08006aec <netconn_tcp_recvd>:
{
 8006aec:	b510      	push	{r4, lr}
 8006aee:	b088      	sub	sp, #32
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8006af0:	b198      	cbz	r0, 8006b1a <netconn_tcp_recvd+0x2e>
 8006af2:	7802      	ldrb	r2, [r0, #0]
 8006af4:	4603      	mov	r3, r0
 8006af6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8006afa:	2a10      	cmp	r2, #16
 8006afc:	d10d      	bne.n	8006b1a <netconn_tcp_recvd+0x2e>
  err = netconn_tcp_recvd_msg(conn, len, &API_VAR_REF(msg));
 8006afe:	460c      	mov	r4, r1
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006b00:	f100 020c 	add.w	r2, r0, #12
 8006b04:	4669      	mov	r1, sp
 8006b06:	480a      	ldr	r0, [pc, #40]	; (8006b30 <netconn_tcp_recvd+0x44>)
  msg->conn = conn;
 8006b08:	9300      	str	r3, [sp, #0]
  msg->msg.r.len = len;
 8006b0a:	9402      	str	r4, [sp, #8]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006b0c:	f002 fbee 	bl	80092ec <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8006b10:	b908      	cbnz	r0, 8006b16 <netconn_tcp_recvd+0x2a>
    return apimsg->err;
 8006b12:	f99d 0004 	ldrsb.w	r0, [sp, #4]
}
 8006b16:	b008      	add	sp, #32
 8006b18:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8006b1a:	4b06      	ldr	r3, [pc, #24]	; (8006b34 <netconn_tcp_recvd+0x48>)
 8006b1c:	f240 22b5 	movw	r2, #693	; 0x2b5
 8006b20:	4905      	ldr	r1, [pc, #20]	; (8006b38 <netconn_tcp_recvd+0x4c>)
 8006b22:	4806      	ldr	r0, [pc, #24]	; (8006b3c <netconn_tcp_recvd+0x50>)
 8006b24:	f00a fd6c 	bl	8011600 <iprintf>
 8006b28:	f06f 000f 	mvn.w	r0, #15
 8006b2c:	e7f3      	b.n	8006b16 <netconn_tcp_recvd+0x2a>
 8006b2e:	bf00      	nop
 8006b30:	08007d4d 	.word	0x08007d4d
 8006b34:	0801254c 	.word	0x0801254c
 8006b38:	080125c8 	.word	0x080125c8
 8006b3c:	080124d0 	.word	0x080124d0

08006b40 <netconn_recv_tcp_pbuf_flags>:
{
 8006b40:	b508      	push	{r3, lr}
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8006b42:	b140      	cbz	r0, 8006b56 <netconn_recv_tcp_pbuf_flags+0x16>
 8006b44:	7803      	ldrb	r3, [r0, #0]
 8006b46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b4a:	2b10      	cmp	r3, #16
 8006b4c:	d103      	bne.n	8006b56 <netconn_recv_tcp_pbuf_flags+0x16>
}
 8006b4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return netconn_recv_data_tcp(conn, new_buf, apiflags);
 8006b52:	f7ff bdbb 	b.w	80066cc <netconn_recv_data_tcp>
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8006b56:	4b05      	ldr	r3, [pc, #20]	; (8006b6c <netconn_recv_tcp_pbuf_flags+0x2c>)
 8006b58:	f240 3225 	movw	r2, #805	; 0x325
 8006b5c:	4904      	ldr	r1, [pc, #16]	; (8006b70 <netconn_recv_tcp_pbuf_flags+0x30>)
 8006b5e:	4805      	ldr	r0, [pc, #20]	; (8006b74 <netconn_recv_tcp_pbuf_flags+0x34>)
 8006b60:	f00a fd4e 	bl	8011600 <iprintf>
}
 8006b64:	f06f 000f 	mvn.w	r0, #15
 8006b68:	bd08      	pop	{r3, pc}
 8006b6a:	bf00      	nop
 8006b6c:	0801254c 	.word	0x0801254c
 8006b70:	080125c8 	.word	0x080125c8
 8006b74:	080124d0 	.word	0x080124d0

08006b78 <netconn_recv_udp_raw_netbuf_flags>:
{
 8006b78:	b508      	push	{r3, lr}
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 8006b7a:	b140      	cbz	r0, 8006b8e <netconn_recv_udp_raw_netbuf_flags+0x16>
 8006b7c:	7803      	ldrb	r3, [r0, #0]
 8006b7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b82:	2b10      	cmp	r3, #16
 8006b84:	d003      	beq.n	8006b8e <netconn_recv_udp_raw_netbuf_flags+0x16>
}
 8006b86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return netconn_recv_data(conn, (void **)new_buf, apiflags);
 8006b8a:	f7ff bd0d 	b.w	80065a8 <netconn_recv_data>
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 8006b8e:	4b05      	ldr	r3, [pc, #20]	; (8006ba4 <netconn_recv_udp_raw_netbuf_flags+0x2c>)
 8006b90:	f44f 7253 	mov.w	r2, #844	; 0x34c
 8006b94:	4904      	ldr	r1, [pc, #16]	; (8006ba8 <netconn_recv_udp_raw_netbuf_flags+0x30>)
 8006b96:	4805      	ldr	r0, [pc, #20]	; (8006bac <netconn_recv_udp_raw_netbuf_flags+0x34>)
 8006b98:	f00a fd32 	bl	8011600 <iprintf>
}
 8006b9c:	f06f 000f 	mvn.w	r0, #15
 8006ba0:	bd08      	pop	{r3, pc}
 8006ba2:	bf00      	nop
 8006ba4:	0801254c 	.word	0x0801254c
 8006ba8:	08012744 	.word	0x08012744
 8006bac:	080124d0 	.word	0x080124d0

08006bb0 <netconn_send>:
{
 8006bb0:	b510      	push	{r4, lr}
 8006bb2:	b088      	sub	sp, #32
  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 8006bb4:	b170      	cbz	r0, 8006bd4 <netconn_send+0x24>
  API_MSG_VAR_REF(msg).conn = conn;
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	460c      	mov	r4, r1
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006bba:	f100 020c 	add.w	r2, r0, #12
 8006bbe:	4669      	mov	r1, sp
 8006bc0:	4809      	ldr	r0, [pc, #36]	; (8006be8 <netconn_send+0x38>)
  API_MSG_VAR_REF(msg).conn = conn;
 8006bc2:	9300      	str	r3, [sp, #0]
  API_MSG_VAR_REF(msg).msg.b = buf;
 8006bc4:	9402      	str	r4, [sp, #8]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006bc6:	f002 fb91 	bl	80092ec <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8006bca:	b908      	cbnz	r0, 8006bd0 <netconn_send+0x20>
    return apimsg->err;
 8006bcc:	f99d 0004 	ldrsb.w	r0, [sp, #4]
}
 8006bd0:	b008      	add	sp, #32
 8006bd2:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 8006bd4:	4b05      	ldr	r3, [pc, #20]	; (8006bec <netconn_send+0x3c>)
 8006bd6:	f240 32b2 	movw	r2, #946	; 0x3b2
 8006bda:	4905      	ldr	r1, [pc, #20]	; (8006bf0 <netconn_send+0x40>)
 8006bdc:	4805      	ldr	r0, [pc, #20]	; (8006bf4 <netconn_send+0x44>)
 8006bde:	f00a fd0f 	bl	8011600 <iprintf>
 8006be2:	f06f 000f 	mvn.w	r0, #15
 8006be6:	e7f3      	b.n	8006bd0 <netconn_send+0x20>
 8006be8:	08007d0d 	.word	0x08007d0d
 8006bec:	0801254c 	.word	0x0801254c
 8006bf0:	08012770 	.word	0x08012770
 8006bf4:	080124d0 	.word	0x080124d0

08006bf8 <netconn_write_vectors_partly>:
{
 8006bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bfa:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8006bfc:	2800      	cmp	r0, #0
 8006bfe:	d064      	beq.n	8006cca <netconn_write_vectors_partly+0xd2>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8006c00:	7805      	ldrb	r5, [r0, #0]
 8006c02:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8006c06:	2d10      	cmp	r5, #16
 8006c08:	d155      	bne.n	8006cb6 <netconn_write_vectors_partly+0xbe>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8006c0a:	7f05      	ldrb	r5, [r0, #28]
 8006c0c:	f003 0604 	and.w	r6, r3, #4
 8006c10:	f005 0502 	and.w	r5, r5, #2
 8006c14:	4335      	orrs	r5, r6
 8006c16:	d018      	beq.n	8006c4a <netconn_write_vectors_partly+0x52>
  if (dontblock && !bytes_written) {
 8006c18:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8006c1a:	b18c      	cbz	r4, 8006c40 <netconn_write_vectors_partly+0x48>
 8006c1c:	2701      	movs	r7, #1
  for (i = 0; i < vectorcnt; i++) {
 8006c1e:	2a00      	cmp	r2, #0
 8006c20:	d03d      	beq.n	8006c9e <netconn_write_vectors_partly+0xa6>
    size += vectors[i].len;
 8006c22:	460e      	mov	r6, r1
 8006c24:	f04f 0e00 	mov.w	lr, #0
 8006c28:	f856 5f04 	ldr.w	r5, [r6, #4]!
  for (i = 0; i < vectorcnt; i++) {
 8006c2c:	f10e 0e01 	add.w	lr, lr, #1
 8006c30:	4572      	cmp	r2, lr
 8006c32:	d00c      	beq.n	8006c4e <netconn_write_vectors_partly+0x56>
 8006c34:	f856 403e 	ldr.w	r4, [r6, lr, lsl #3]
 8006c38:	eb14 0c05 	adds.w	ip, r4, r5
    size += vectors[i].len;
 8006c3c:	4665      	mov	r5, ip
    if (size < vectors[i].len) {
 8006c3e:	d3f5      	bcc.n	8006c2c <netconn_write_vectors_partly+0x34>
    return ERR_VAL;
 8006c40:	f06f 0605 	mvn.w	r6, #5
}
 8006c44:	4630      	mov	r0, r6
 8006c46:	b009      	add	sp, #36	; 0x24
 8006c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8006c4a:	462f      	mov	r7, r5
 8006c4c:	e7e7      	b.n	8006c1e <netconn_write_vectors_partly+0x26>
  if (size == 0) {
 8006c4e:	2d00      	cmp	r5, #0
 8006c50:	d025      	beq.n	8006c9e <netconn_write_vectors_partly+0xa6>
  } else if (size > SSIZE_MAX) {
 8006c52:	da04      	bge.n	8006c5e <netconn_write_vectors_partly+0x66>
    if (!bytes_written) {
 8006c54:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8006c56:	2c00      	cmp	r4, #0
 8006c58:	d0f2      	beq.n	8006c40 <netconn_write_vectors_partly+0x48>
    size = (size_t)limited;
 8006c5a:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8006c5e:	f88d 301c 	strb.w	r3, [sp, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8006c62:	2300      	movs	r3, #0
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8006c64:	9102      	str	r1, [sp, #8]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006c66:	4669      	mov	r1, sp
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8006c68:	f8ad 200c 	strh.w	r2, [sp, #12]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006c6c:	f100 020c 	add.w	r2, r0, #12
  API_MSG_VAR_REF(msg).conn = conn;
 8006c70:	9000      	str	r0, [sp, #0]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006c72:	481b      	ldr	r0, [pc, #108]	; (8006ce0 <netconn_write_vectors_partly+0xe8>)
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8006c74:	9306      	str	r3, [sp, #24]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8006c76:	e9cd 3504 	strd	r3, r5, [sp, #16]
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006c7a:	f002 fb37 	bl	80092ec <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8006c7e:	4606      	mov	r6, r0
 8006c80:	2800      	cmp	r0, #0
 8006c82:	d1df      	bne.n	8006c44 <netconn_write_vectors_partly+0x4c>
    return apimsg->err;
 8006c84:	f99d 6004 	ldrsb.w	r6, [sp, #4]
  if (err == ERR_OK) {
 8006c88:	2e00      	cmp	r6, #0
 8006c8a:	d1db      	bne.n	8006c44 <netconn_write_vectors_partly+0x4c>
    if (bytes_written != NULL) {
 8006c8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c8e:	b113      	cbz	r3, 8006c96 <netconn_write_vectors_partly+0x9e>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8006c90:	9b06      	ldr	r3, [sp, #24]
 8006c92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c94:	6013      	str	r3, [r2, #0]
    if (!dontblock) {
 8006c96:	b917      	cbnz	r7, 8006c9e <netconn_write_vectors_partly+0xa6>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8006c98:	9b06      	ldr	r3, [sp, #24]
 8006c9a:	42ab      	cmp	r3, r5
 8006c9c:	d103      	bne.n	8006ca6 <netconn_write_vectors_partly+0xae>
    return ERR_OK;
 8006c9e:	2600      	movs	r6, #0
}
 8006ca0:	4630      	mov	r0, r6
 8006ca2:	b009      	add	sp, #36	; 0x24
 8006ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8006ca6:	4b0f      	ldr	r3, [pc, #60]	; (8006ce4 <netconn_write_vectors_partly+0xec>)
 8006ca8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8006cac:	490e      	ldr	r1, [pc, #56]	; (8006ce8 <netconn_write_vectors_partly+0xf0>)
 8006cae:	480f      	ldr	r0, [pc, #60]	; (8006cec <netconn_write_vectors_partly+0xf4>)
 8006cb0:	f00a fca6 	bl	8011600 <iprintf>
 8006cb4:	e7c6      	b.n	8006c44 <netconn_write_vectors_partly+0x4c>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8006cb6:	4b0b      	ldr	r3, [pc, #44]	; (8006ce4 <netconn_write_vectors_partly+0xec>)
 8006cb8:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8006cbc:	490c      	ldr	r1, [pc, #48]	; (8006cf0 <netconn_write_vectors_partly+0xf8>)
 8006cbe:	f06f 0605 	mvn.w	r6, #5
 8006cc2:	480a      	ldr	r0, [pc, #40]	; (8006cec <netconn_write_vectors_partly+0xf4>)
 8006cc4:	f00a fc9c 	bl	8011600 <iprintf>
 8006cc8:	e7bc      	b.n	8006c44 <netconn_write_vectors_partly+0x4c>
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8006cca:	4b06      	ldr	r3, [pc, #24]	; (8006ce4 <netconn_write_vectors_partly+0xec>)
 8006ccc:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8006cd0:	4908      	ldr	r1, [pc, #32]	; (8006cf4 <netconn_write_vectors_partly+0xfc>)
 8006cd2:	f06f 060f 	mvn.w	r6, #15
 8006cd6:	4805      	ldr	r0, [pc, #20]	; (8006cec <netconn_write_vectors_partly+0xf4>)
 8006cd8:	f00a fc92 	bl	8011600 <iprintf>
 8006cdc:	e7b2      	b.n	8006c44 <netconn_write_vectors_partly+0x4c>
 8006cde:	bf00      	nop
 8006ce0:	08007d89 	.word	0x08007d89
 8006ce4:	0801254c 	.word	0x0801254c
 8006ce8:	080127cc 	.word	0x080127cc
 8006cec:	080124d0 	.word	0x080124d0
 8006cf0:	080127a8 	.word	0x080127a8
 8006cf4:	0801278c 	.word	0x0801278c

08006cf8 <netconn_write_partly>:
{
 8006cf8:	b510      	push	{r4, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	4614      	mov	r4, r2
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8006cfe:	9a06      	ldr	r2, [sp, #24]
  vector.len = size;
 8006d00:	e9cd 1402 	strd	r1, r4, [sp, #8]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8006d04:	9200      	str	r2, [sp, #0]
 8006d06:	a902      	add	r1, sp, #8
 8006d08:	2201      	movs	r2, #1
 8006d0a:	f7ff ff75 	bl	8006bf8 <netconn_write_vectors_partly>
}
 8006d0e:	b004      	add	sp, #16
 8006d10:	bd10      	pop	{r4, pc}
 8006d12:	bf00      	nop

08006d14 <netconn_err>:
{
 8006d14:	b538      	push	{r3, r4, r5, lr}
  if (conn == NULL) {
 8006d16:	4604      	mov	r4, r0
 8006d18:	b148      	cbz	r0, 8006d2e <netconn_err+0x1a>
  SYS_ARCH_PROTECT(lev);
 8006d1a:	f009 ff2f 	bl	8010b7c <sys_arch_protect>
  conn->pending_err = ERR_OK;
 8006d1e:	2300      	movs	r3, #0
  err = conn->pending_err;
 8006d20:	f994 5008 	ldrsb.w	r5, [r4, #8]
  conn->pending_err = ERR_OK;
 8006d24:	7223      	strb	r3, [r4, #8]
  SYS_ARCH_UNPROTECT(lev);
 8006d26:	f009 ff35 	bl	8010b94 <sys_arch_unprotect>
  return err;
}
 8006d2a:	4628      	mov	r0, r5
 8006d2c:	bd38      	pop	{r3, r4, r5, pc}
    return ERR_OK;
 8006d2e:	4605      	mov	r5, r0
}
 8006d30:	4628      	mov	r0, r5
 8006d32:	bd38      	pop	{r3, r4, r5, pc}

08006d34 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8006d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d38:	4604      	mov	r4, r0
 8006d3a:	f8bd 8020 	ldrh.w	r8, [sp, #32]
 8006d3e:	4616      	mov	r6, r2
 8006d40:	461f      	mov	r7, r3
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8006d42:	460d      	mov	r5, r1
 8006d44:	b379      	cbz	r1, 8006da6 <recv_udp+0x72>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8006d46:	2c00      	cmp	r4, #0
 8006d48:	d035      	beq.n	8006db6 <recv_udp+0x82>
  if (conn == NULL) {
    pbuf_free(p);
    return;
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8006d4a:	6863      	ldr	r3, [r4, #4]
 8006d4c:	42ab      	cmp	r3, r5
 8006d4e:	d005      	beq.n	8006d5c <recv_udp+0x28>
 8006d50:	4b22      	ldr	r3, [pc, #136]	; (8006ddc <recv_udp+0xa8>)
 8006d52:	22ee      	movs	r2, #238	; 0xee
 8006d54:	4922      	ldr	r1, [pc, #136]	; (8006de0 <recv_udp+0xac>)
 8006d56:	4823      	ldr	r0, [pc, #140]	; (8006de4 <recv_udp+0xb0>)
 8006d58:	f00a fc52 	bl	8011600 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8006d5c:	f104 0910 	add.w	r9, r4, #16
 8006d60:	4648      	mov	r0, r9
 8006d62:	f009 fe7f 	bl	8010a64 <sys_mbox_valid>
 8006d66:	b1c8      	cbz	r0, 8006d9c <recv_udp+0x68>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
    return;
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8006d68:	2006      	movs	r0, #6
 8006d6a:	f002 fec3 	bl	8009af4 <memp_malloc>
  if (buf == NULL) {
 8006d6e:	4605      	mov	r5, r0
 8006d70:	b1a0      	cbz	r0, 8006d9c <recv_udp+0x68>
    pbuf_free(p);
    return;
  } else {
    buf->p = p;
    buf->ptr = p;
 8006d72:	e9c0 6600 	strd	r6, r6, [r0]
    ip_addr_set(&buf->addr, addr);
 8006d76:	b107      	cbz	r7, 8006d7a <recv_udp+0x46>
 8006d78:	683f      	ldr	r7, [r7, #0]
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8006d7a:	4629      	mov	r1, r5
 8006d7c:	4648      	mov	r0, r9
    ip_addr_set(&buf->addr, addr);
 8006d7e:	60af      	str	r7, [r5, #8]
    buf->port = port;
 8006d80:	f8a5 800c 	strh.w	r8, [r5, #12]
  len = p->tot_len;
 8006d84:	8936      	ldrh	r6, [r6, #8]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8006d86:	f009 fe2b 	bl	80109e0 <sys_mbox_trypost>
 8006d8a:	4601      	mov	r1, r0
 8006d8c:	b9f0      	cbnz	r0, 8006dcc <recv_udp+0x98>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8006d8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d90:	b30b      	cbz	r3, 8006dd6 <recv_udp+0xa2>
 8006d92:	4632      	mov	r2, r6
 8006d94:	4620      	mov	r0, r4
  }
}
 8006d96:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8006d9a:	4718      	bx	r3
    pbuf_free(p);
 8006d9c:	4630      	mov	r0, r6
}
 8006d9e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    pbuf_free(p);
 8006da2:	f003 ba7b 	b.w	800a29c <pbuf_free>
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8006da6:	4b0d      	ldr	r3, [pc, #52]	; (8006ddc <recv_udp+0xa8>)
 8006da8:	22e5      	movs	r2, #229	; 0xe5
 8006daa:	490f      	ldr	r1, [pc, #60]	; (8006de8 <recv_udp+0xb4>)
 8006dac:	480d      	ldr	r0, [pc, #52]	; (8006de4 <recv_udp+0xb0>)
 8006dae:	f00a fc27 	bl	8011600 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8006db2:	2c00      	cmp	r4, #0
 8006db4:	d1c9      	bne.n	8006d4a <recv_udp+0x16>
 8006db6:	4b09      	ldr	r3, [pc, #36]	; (8006ddc <recv_udp+0xa8>)
 8006db8:	22e6      	movs	r2, #230	; 0xe6
 8006dba:	490c      	ldr	r1, [pc, #48]	; (8006dec <recv_udp+0xb8>)
 8006dbc:	4809      	ldr	r0, [pc, #36]	; (8006de4 <recv_udp+0xb0>)
 8006dbe:	f00a fc1f 	bl	8011600 <iprintf>
    pbuf_free(p);
 8006dc2:	4630      	mov	r0, r6
}
 8006dc4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    pbuf_free(p);
 8006dc8:	f003 ba68 	b.w	800a29c <pbuf_free>
    netbuf_delete(buf);
 8006dcc:	4628      	mov	r0, r5
}
 8006dce:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    netbuf_delete(buf);
 8006dd2:	f001 b8fb 	b.w	8007fcc <netbuf_delete>
}
 8006dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dda:	bf00      	nop
 8006ddc:	080127f0 	.word	0x080127f0
 8006de0:	08012868 	.word	0x08012868
 8006de4:	080124d0 	.word	0x080124d0
 8006de8:	08012824 	.word	0x08012824
 8006dec:	08012848 	.word	0x08012848

08006df0 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8006df0:	b500      	push	{lr}
 8006df2:	4601      	mov	r1, r0
 8006df4:	b083      	sub	sp, #12
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8006df6:	6840      	ldr	r0, [r0, #4]
  tcp_arg(pcb, conn);
 8006df8:	9001      	str	r0, [sp, #4]
 8006dfa:	f003 ff1f 	bl	800ac3c <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8006dfe:	9801      	ldr	r0, [sp, #4]
 8006e00:	4909      	ldr	r1, [pc, #36]	; (8006e28 <setup_tcp+0x38>)
 8006e02:	f003 ff1f 	bl	800ac44 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8006e06:	9801      	ldr	r0, [sp, #4]
 8006e08:	4908      	ldr	r1, [pc, #32]	; (8006e2c <setup_tcp+0x3c>)
 8006e0a:	f003 ff37 	bl	800ac7c <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8006e0e:	9801      	ldr	r0, [sp, #4]
 8006e10:	4907      	ldr	r1, [pc, #28]	; (8006e30 <setup_tcp+0x40>)
 8006e12:	2202      	movs	r2, #2
 8006e14:	f003 ff70 	bl	800acf8 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8006e18:	4906      	ldr	r1, [pc, #24]	; (8006e34 <setup_tcp+0x44>)
 8006e1a:	9801      	ldr	r0, [sp, #4]
}
 8006e1c:	b003      	add	sp, #12
 8006e1e:	f85d eb04 	ldr.w	lr, [sp], #4
  tcp_err(pcb, err_tcp);
 8006e22:	f003 bf47 	b.w	800acb4 <tcp_err>
 8006e26:	bf00      	nop
 8006e28:	080074d9 	.word	0x080074d9
 8006e2c:	08007461 	.word	0x08007461
 8006e30:	080073e5 	.word	0x080073e5
 8006e34:	080075c9 	.word	0x080075c9

08006e38 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8006e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e3c:	b083      	sub	sp, #12
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8006e3e:	4680      	mov	r8, r0
{
 8006e40:	9101      	str	r1, [sp, #4]
  LWIP_ASSERT("conn != NULL", conn != NULL);
 8006e42:	2800      	cmp	r0, #0
 8006e44:	f000 811a 	beq.w	800707c <lwip_netconn_do_writemore+0x244>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8006e48:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d006      	beq.n	8006e5e <lwip_netconn_do_writemore+0x26>
 8006e50:	4ba4      	ldr	r3, [pc, #656]	; (80070e4 <lwip_netconn_do_writemore+0x2ac>)
 8006e52:	f240 6274 	movw	r2, #1652	; 0x674
 8006e56:	49a4      	ldr	r1, [pc, #656]	; (80070e8 <lwip_netconn_do_writemore+0x2b0>)
 8006e58:	48a4      	ldr	r0, [pc, #656]	; (80070ec <lwip_netconn_do_writemore+0x2b4>)
 8006e5a:	f00a fbd1 	bl	8011600 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8006e5e:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	f000 8112 	beq.w	800708c <lwip_netconn_do_writemore+0x254>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8006e68:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	f000 8119 	beq.w	80070a4 <lwip_netconn_do_writemore+0x26c>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8006e72:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8006e76:	e9d2 3105 	ldrd	r3, r1, [r2, #20]
 8006e7a:	4299      	cmp	r1, r3
 8006e7c:	f080 80ce 	bcs.w	800701c <lwip_netconn_do_writemore+0x1e4>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8006e80:	8993      	ldrh	r3, [r2, #12]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	f000 80c0 	beq.w	8007008 <lwip_netconn_do_writemore+0x1d0>

  apiflags = conn->current_msg->msg.w.apiflags;
 8006e88:	7f17      	ldrb	r7, [r2, #28]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8006e8a:	f898 301c 	ldrb.w	r3, [r8, #28]
 8006e8e:	f007 0104 	and.w	r1, r7, #4
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8006e92:	f8df b250 	ldr.w	fp, [pc, #592]	; 80070e4 <lwip_netconn_do_writemore+0x2ac>
 8006e96:	f003 0302 	and.w	r3, r3, #2
 8006e9a:	f8df a268 	ldr.w	sl, [pc, #616]	; 8007104 <lwip_netconn_do_writemore+0x2cc>
 8006e9e:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80070ec <lwip_netconn_do_writemore+0x2b4>
 8006ea2:	430b      	orrs	r3, r1
 8006ea4:	9300      	str	r3, [sp, #0]
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8006ea6:	6891      	ldr	r1, [r2, #8]
 8006ea8:	6913      	ldr	r3, [r2, #16]
 8006eaa:	e9d1 6c00 	ldrd	r6, ip, [r1]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8006eae:	ebac 0503 	sub.w	r5, ip, r3
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8006eb2:	441e      	add	r6, r3
      if (diff > 0xffffUL) { /* max_u16_t */
 8006eb4:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8006eb8:	d338      	bcc.n	8006f2c <lwip_netconn_do_writemore+0xf4>
        apiflags |= TCP_WRITE_FLAG_MORE;
 8006eba:	f047 0702 	orr.w	r7, r7, #2
        len = 0xffff;
 8006ebe:	f64f 74ff 	movw	r4, #65535	; 0xffff
      available = tcp_sndbuf(conn->pcb.tcp);
 8006ec2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006ec6:	f8b0 1064 	ldrh.w	r1, [r0, #100]	; 0x64
      if (available < len) {
 8006eca:	428c      	cmp	r4, r1
 8006ecc:	d906      	bls.n	8006edc <lwip_netconn_do_writemore+0xa4>
        if (dontblock) {
 8006ece:	9c00      	ldr	r4, [sp, #0]
 8006ed0:	2c00      	cmp	r4, #0
 8006ed2:	d058      	beq.n	8006f86 <lwip_netconn_do_writemore+0x14e>
          if (!len) {
 8006ed4:	2900      	cmp	r1, #0
 8006ed6:	f000 8085 	beq.w	8006fe4 <lwip_netconn_do_writemore+0x1ac>
 8006eda:	460c      	mov	r4, r1
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8006edc:	4423      	add	r3, r4
 8006ede:	459c      	cmp	ip, r3
 8006ee0:	d347      	bcc.n	8006f72 <lwip_netconn_do_writemore+0x13a>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8006ee2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006ee6:	429c      	cmp	r4, r3
 8006ee8:	d13e      	bne.n	8006f68 <lwip_netconn_do_writemore+0x130>
 8006eea:	429d      	cmp	r5, r3
 8006eec:	d93c      	bls.n	8006f68 <lwip_netconn_do_writemore+0x130>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
        write_more = 1;
        apiflags |= TCP_WRITE_FLAG_MORE;
 8006eee:	f047 0702 	orr.w	r7, r7, #2
        write_more = 1;
 8006ef2:	2501      	movs	r5, #1
      } else {
        write_more = 0;
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8006ef4:	463b      	mov	r3, r7
 8006ef6:	4622      	mov	r2, r4
 8006ef8:	4631      	mov	r1, r6
 8006efa:	f006 fc59 	bl	800d7b0 <tcp_write>
      if (err == ERR_OK) {
 8006efe:	b1b8      	cbz	r0, 8006f30 <lwip_netconn_do_writemore+0xf8>
          }
        }
      }
    } while (write_more && err == ERR_OK);
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8006f00:	1c43      	adds	r3, r0, #1
 8006f02:	4606      	mov	r6, r0
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d947      	bls.n	8006f9a <lwip_netconn_do_writemore+0x162>
        err = out_err;
        write_finished = 1;
      } else if (dontblock) {
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8006f0a:	f8d8 3020 	ldr.w	r3, [r8, #32]
    }
  }
  if (write_finished) {
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8006f0e:	6818      	ldr	r0, [r3, #0]
    conn->current_msg->err = err;
    conn->current_msg = NULL;
 8006f10:	2400      	movs	r4, #0
    conn->current_msg->err = err;
 8006f12:	711e      	strb	r6, [r3, #4]
    conn->state = NETCONN_NONE;
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8006f14:	9b01      	ldr	r3, [sp, #4]
    conn->current_msg = NULL;
 8006f16:	f8c8 4020 	str.w	r4, [r8, #32]
    conn->state = NETCONN_NONE;
 8006f1a:	f888 4001 	strb.w	r4, [r8, #1]
    if (delayed)
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	f040 8086 	bne.w	8007030 <lwip_netconn_do_writemore+0x1f8>
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
  }
#endif
  return ERR_OK;
 8006f24:	9801      	ldr	r0, [sp, #4]
}
 8006f26:	b003      	add	sp, #12
 8006f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        len = (u16_t)diff;
 8006f2c:	b2ac      	uxth	r4, r5
 8006f2e:	e7c8      	b.n	8006ec2 <lwip_netconn_do_writemore+0x8a>
        conn->current_msg->msg.w.offset += len;
 8006f30:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8006f34:	6993      	ldr	r3, [r2, #24]
 8006f36:	4423      	add	r3, r4
 8006f38:	6193      	str	r3, [r2, #24]
        conn->current_msg->msg.w.vector_off += len;
 8006f3a:	6913      	ldr	r3, [r2, #16]
 8006f3c:	441c      	add	r4, r3
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8006f3e:	6893      	ldr	r3, [r2, #8]
 8006f40:	6859      	ldr	r1, [r3, #4]
        conn->current_msg->msg.w.vector_off += len;
 8006f42:	6114      	str	r4, [r2, #16]
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8006f44:	428c      	cmp	r4, r1
 8006f46:	d003      	beq.n	8006f50 <lwip_netconn_do_writemore+0x118>
    } while (write_more && err == ERR_OK);
 8006f48:	2d00      	cmp	r5, #0
 8006f4a:	d1ac      	bne.n	8006ea6 <lwip_netconn_do_writemore+0x6e>
 8006f4c:	4606      	mov	r6, r0
 8006f4e:	e026      	b.n	8006f9e <lwip_netconn_do_writemore+0x166>
          conn->current_msg->msg.w.vector_cnt--;
 8006f50:	8991      	ldrh	r1, [r2, #12]
 8006f52:	3901      	subs	r1, #1
 8006f54:	b289      	uxth	r1, r1
 8006f56:	8191      	strh	r1, [r2, #12]
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8006f58:	2900      	cmp	r1, #0
 8006f5a:	d0f5      	beq.n	8006f48 <lwip_netconn_do_writemore+0x110>
            conn->current_msg->msg.w.vector++;
 8006f5c:	3308      	adds	r3, #8
            conn->current_msg->msg.w.vector_off = 0;
 8006f5e:	6110      	str	r0, [r2, #16]
            conn->current_msg->msg.w.vector++;
 8006f60:	6093      	str	r3, [r2, #8]
    } while (write_more && err == ERR_OK);
 8006f62:	2d00      	cmp	r5, #0
 8006f64:	d19f      	bne.n	8006ea6 <lwip_netconn_do_writemore+0x6e>
 8006f66:	e7f1      	b.n	8006f4c <lwip_netconn_do_writemore+0x114>
      if ((len == 0xffff && diff > 0xffffUL) ||
 8006f68:	b2ad      	uxth	r5, r5
 8006f6a:	42a5      	cmp	r5, r4
 8006f6c:	d00f      	beq.n	8006f8e <lwip_netconn_do_writemore+0x156>
        write_more = 0;
 8006f6e:	2500      	movs	r5, #0
 8006f70:	e7c0      	b.n	8006ef4 <lwip_netconn_do_writemore+0xbc>
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8006f72:	465b      	mov	r3, fp
 8006f74:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8006f78:	4651      	mov	r1, sl
 8006f7a:	4648      	mov	r0, r9
 8006f7c:	f00a fb40 	bl	8011600 <iprintf>
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8006f80:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006f84:	e7ad      	b.n	8006ee2 <lwip_netconn_do_writemore+0xaa>
          apiflags |= TCP_WRITE_FLAG_MORE;
 8006f86:	f047 0702 	orr.w	r7, r7, #2
 8006f8a:	460c      	mov	r4, r1
 8006f8c:	e7a6      	b.n	8006edc <lwip_netconn_do_writemore+0xa4>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8006f8e:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8006f92:	899b      	ldrh	r3, [r3, #12]
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d8aa      	bhi.n	8006eee <lwip_netconn_do_writemore+0xb6>
 8006f98:	e7e9      	b.n	8006f6e <lwip_netconn_do_writemore+0x136>
err_mem:
 8006f9a:	f04f 36ff 	mov.w	r6, #4294967295
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8006f9e:	9b00      	ldr	r3, [sp, #0]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d157      	bne.n	8007054 <lwip_netconn_do_writemore+0x21c>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8006fa4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006fa8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8006fac:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8006fb0:	d321      	bcc.n	8006ff6 <lwip_netconn_do_writemore+0x1be>
 8006fb2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8006fb6:	2b04      	cmp	r3, #4
 8006fb8:	d81d      	bhi.n	8006ff6 <lwip_netconn_do_writemore+0x1be>
    if (err == ERR_OK) {
 8006fba:	2e00      	cmp	r6, #0
 8006fbc:	d17a      	bne.n	80070b4 <lwip_netconn_do_writemore+0x27c>
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8006fbe:	f8d8 3020 	ldr.w	r3, [r8, #32]
      out_err = tcp_output(conn->pcb.tcp);
 8006fc2:	f8d8 0004 	ldr.w	r0, [r8, #4]
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8006fc6:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d002      	beq.n	8006fd4 <lwip_netconn_do_writemore+0x19c>
 8006fce:	9b00      	ldr	r3, [sp, #0]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d034      	beq.n	800703e <lwip_netconn_do_writemore+0x206>
      out_err = tcp_output(conn->pcb.tcp);
 8006fd4:	f007 fa06 	bl	800e3e4 <tcp_output>
      if (out_err == ERR_RTE) {
 8006fd8:	1d01      	adds	r1, r0, #4
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8006fda:	f8d8 3020 	ldr.w	r3, [r8, #32]
      if (out_err == ERR_RTE) {
 8006fde:	d196      	bne.n	8006f0e <lwip_netconn_do_writemore+0xd6>
        err = out_err;
 8006fe0:	4606      	mov	r6, r0
 8006fe2:	e794      	b.n	8006f0e <lwip_netconn_do_writemore+0xd6>
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8006fe4:	e9d2 2305 	ldrd	r2, r3, [r2, #20]
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	bf0c      	ite	eq
 8006fec:	f06f 0606 	mvneq.w	r6, #6
 8006ff0:	2600      	movne	r6, #0
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d334      	bcc.n	8007060 <lwip_netconn_do_writemore+0x228>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8006ff6:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d0dd      	beq.n	8006fba <lwip_netconn_do_writemore+0x182>
 8006ffe:	2200      	movs	r2, #0
 8007000:	2103      	movs	r1, #3
 8007002:	4640      	mov	r0, r8
 8007004:	4798      	blx	r3
 8007006:	e7d8      	b.n	8006fba <lwip_netconn_do_writemore+0x182>
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8007008:	f240 6279 	movw	r2, #1657	; 0x679
 800700c:	4b35      	ldr	r3, [pc, #212]	; (80070e4 <lwip_netconn_do_writemore+0x2ac>)
 800700e:	4938      	ldr	r1, [pc, #224]	; (80070f0 <lwip_netconn_do_writemore+0x2b8>)
 8007010:	4836      	ldr	r0, [pc, #216]	; (80070ec <lwip_netconn_do_writemore+0x2b4>)
 8007012:	f00a faf5 	bl	8011600 <iprintf>
  apiflags = conn->current_msg->msg.w.apiflags;
 8007016:	f8d8 2020 	ldr.w	r2, [r8, #32]
 800701a:	e735      	b.n	8006e88 <lwip_netconn_do_writemore+0x50>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800701c:	f240 6277 	movw	r2, #1655	; 0x677
 8007020:	4b30      	ldr	r3, [pc, #192]	; (80070e4 <lwip_netconn_do_writemore+0x2ac>)
 8007022:	4934      	ldr	r1, [pc, #208]	; (80070f4 <lwip_netconn_do_writemore+0x2bc>)
 8007024:	4831      	ldr	r0, [pc, #196]	; (80070ec <lwip_netconn_do_writemore+0x2b4>)
 8007026:	f00a faeb 	bl	8011600 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800702a:	f8d8 2020 	ldr.w	r2, [r8, #32]
 800702e:	e727      	b.n	8006e80 <lwip_netconn_do_writemore+0x48>
      sys_sem_signal(op_completed_sem);
 8007030:	300c      	adds	r0, #12
 8007032:	f009 fd57 	bl	8010ae4 <sys_sem_signal>
  return ERR_OK;
 8007036:	4620      	mov	r0, r4
}
 8007038:	b003      	add	sp, #12
 800703a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      out_err = tcp_output(conn->pcb.tcp);
 800703e:	f007 f9d1 	bl	800e3e4 <tcp_output>
 8007042:	4606      	mov	r6, r0
      if (out_err == ERR_RTE) {
 8007044:	1d30      	adds	r0, r6, #4
 8007046:	f43f af60 	beq.w	8006f0a <lwip_netconn_do_writemore+0xd2>
    return ERR_MEM;
 800704a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800704e:	b003      	add	sp, #12
 8007050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8007054:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8007058:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
 800705c:	429a      	cmp	r2, r3
 800705e:	d2a1      	bcs.n	8006fa4 <lwip_netconn_do_writemore+0x16c>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8007060:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8007064:	b11b      	cbz	r3, 800706e <lwip_netconn_do_writemore+0x236>
 8007066:	2200      	movs	r2, #0
 8007068:	2103      	movs	r1, #3
 800706a:	4640      	mov	r0, r8
 800706c:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800706e:	f898 301c 	ldrb.w	r3, [r8, #28]
 8007072:	f043 0310 	orr.w	r3, r3, #16
 8007076:	f888 301c 	strb.w	r3, [r8, #28]
 800707a:	e79e      	b.n	8006fba <lwip_netconn_do_writemore+0x182>
  LWIP_ASSERT("conn != NULL", conn != NULL);
 800707c:	4b19      	ldr	r3, [pc, #100]	; (80070e4 <lwip_netconn_do_writemore+0x2ac>)
 800707e:	f240 6273 	movw	r2, #1651	; 0x673
 8007082:	491d      	ldr	r1, [pc, #116]	; (80070f8 <lwip_netconn_do_writemore+0x2c0>)
 8007084:	4819      	ldr	r0, [pc, #100]	; (80070ec <lwip_netconn_do_writemore+0x2b4>)
 8007086:	f00a fabb 	bl	8011600 <iprintf>
 800708a:	e6dd      	b.n	8006e48 <lwip_netconn_do_writemore+0x10>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800708c:	4b15      	ldr	r3, [pc, #84]	; (80070e4 <lwip_netconn_do_writemore+0x2ac>)
 800708e:	f240 6275 	movw	r2, #1653	; 0x675
 8007092:	491a      	ldr	r1, [pc, #104]	; (80070fc <lwip_netconn_do_writemore+0x2c4>)
 8007094:	4815      	ldr	r0, [pc, #84]	; (80070ec <lwip_netconn_do_writemore+0x2b4>)
 8007096:	f00a fab3 	bl	8011600 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800709a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	f47f aee7 	bne.w	8006e72 <lwip_netconn_do_writemore+0x3a>
 80070a4:	4b0f      	ldr	r3, [pc, #60]	; (80070e4 <lwip_netconn_do_writemore+0x2ac>)
 80070a6:	f240 6276 	movw	r2, #1654	; 0x676
 80070aa:	4915      	ldr	r1, [pc, #84]	; (8007100 <lwip_netconn_do_writemore+0x2c8>)
 80070ac:	480f      	ldr	r0, [pc, #60]	; (80070ec <lwip_netconn_do_writemore+0x2b4>)
 80070ae:	f00a faa7 	bl	8011600 <iprintf>
 80070b2:	e6de      	b.n	8006e72 <lwip_netconn_do_writemore+0x3a>
    } else if (err == ERR_MEM) {
 80070b4:	1c72      	adds	r2, r6, #1
 80070b6:	f47f af28 	bne.w	8006f0a <lwip_netconn_do_writemore+0xd2>
      err_t out_err = tcp_output(conn->pcb.tcp);
 80070ba:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80070be:	f007 f991 	bl	800e3e4 <tcp_output>
      if (out_err == ERR_RTE) {
 80070c2:	1d03      	adds	r3, r0, #4
      err_t out_err = tcp_output(conn->pcb.tcp);
 80070c4:	4606      	mov	r6, r0
      if (out_err == ERR_RTE) {
 80070c6:	f43f af20 	beq.w	8006f0a <lwip_netconn_do_writemore+0xd2>
      } else if (dontblock) {
 80070ca:	9b00      	ldr	r3, [sp, #0]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d0bc      	beq.n	800704a <lwip_netconn_do_writemore+0x212>
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80070d0:	f8d8 3020 	ldr.w	r3, [r8, #32]
 80070d4:	699a      	ldr	r2, [r3, #24]
 80070d6:	2a00      	cmp	r2, #0
 80070d8:	bf0c      	ite	eq
 80070da:	f06f 0606 	mvneq.w	r6, #6
 80070de:	2600      	movne	r6, #0
 80070e0:	e715      	b.n	8006f0e <lwip_netconn_do_writemore+0xd6>
 80070e2:	bf00      	nop
 80070e4:	080127f0 	.word	0x080127f0
 80070e8:	08012898 	.word	0x08012898
 80070ec:	080124d0 	.word	0x080124d0
 80070f0:	0801292c 	.word	0x0801292c
 80070f4:	080128ec 	.word	0x080128ec
 80070f8:	08012888 	.word	0x08012888
 80070fc:	080128b8 	.word	0x080128b8
 8007100:	080128d4 	.word	0x080128d4
 8007104:	08012954 	.word	0x08012954

08007108 <lwip_netconn_do_close_internal>:
{
 8007108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("invalid conn", (conn != NULL));
 800710c:	4604      	mov	r4, r0
{
 800710e:	460d      	mov	r5, r1
  LWIP_ASSERT("invalid conn", (conn != NULL));
 8007110:	2800      	cmp	r0, #0
 8007112:	f000 80e5 	beq.w	80072e0 <lwip_netconn_do_close_internal+0x1d8>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8007116:	7823      	ldrb	r3, [r4, #0]
 8007118:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800711c:	2b10      	cmp	r3, #16
 800711e:	d006      	beq.n	800712e <lwip_netconn_do_close_internal+0x26>
 8007120:	4ba5      	ldr	r3, [pc, #660]	; (80073b8 <lwip_netconn_do_close_internal+0x2b0>)
 8007122:	f240 32a3 	movw	r2, #931	; 0x3a3
 8007126:	49a5      	ldr	r1, [pc, #660]	; (80073bc <lwip_netconn_do_close_internal+0x2b4>)
 8007128:	48a5      	ldr	r0, [pc, #660]	; (80073c0 <lwip_netconn_do_close_internal+0x2b8>)
 800712a:	f00a fa69 	bl	8011600 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800712e:	7863      	ldrb	r3, [r4, #1]
 8007130:	2b04      	cmp	r3, #4
 8007132:	d006      	beq.n	8007142 <lwip_netconn_do_close_internal+0x3a>
 8007134:	4ba0      	ldr	r3, [pc, #640]	; (80073b8 <lwip_netconn_do_close_internal+0x2b0>)
 8007136:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800713a:	49a2      	ldr	r1, [pc, #648]	; (80073c4 <lwip_netconn_do_close_internal+0x2bc>)
 800713c:	48a0      	ldr	r0, [pc, #640]	; (80073c0 <lwip_netconn_do_close_internal+0x2b8>)
 800713e:	f00a fa5f 	bl	8011600 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8007142:	6863      	ldr	r3, [r4, #4]
 8007144:	2b00      	cmp	r3, #0
 8007146:	f000 80d3 	beq.w	80072f0 <lwip_netconn_do_close_internal+0x1e8>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800714a:	6a23      	ldr	r3, [r4, #32]
 800714c:	2b00      	cmp	r3, #0
 800714e:	f000 80da 	beq.w	8007306 <lwip_netconn_do_close_internal+0x1fe>
  shut = conn->current_msg->msg.sd.shut;
 8007152:	7a1b      	ldrb	r3, [r3, #8]
  tpcb = conn->pcb.tcp;
 8007154:	6866      	ldr	r6, [r4, #4]
  if (shut == NETCONN_SHUT_RDWR) {
 8007156:	2b03      	cmp	r3, #3
  shut_rx = shut & NETCONN_SHUT_RD;
 8007158:	f003 0701 	and.w	r7, r3, #1
  shut_tx = shut & NETCONN_SHUT_WR;
 800715c:	f003 0802 	and.w	r8, r3, #2
  if (shut == NETCONN_SHUT_RDWR) {
 8007160:	d04f      	beq.n	8007202 <lwip_netconn_do_close_internal+0xfa>
  } else if (shut_rx &&
 8007162:	b12f      	cbz	r7, 8007170 <lwip_netconn_do_close_internal+0x68>
             ((tpcb->state == FIN_WAIT_1) ||
 8007164:	7d33      	ldrb	r3, [r6, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8007166:	1f5a      	subs	r2, r3, #5
  } else if (shut_rx &&
 8007168:	2a01      	cmp	r2, #1
 800716a:	d94a      	bls.n	8007202 <lwip_netconn_do_close_internal+0xfa>
 800716c:	2b08      	cmp	r3, #8
 800716e:	d048      	beq.n	8007202 <lwip_netconn_do_close_internal+0xfa>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8007170:	f1b8 0f00 	cmp.w	r8, #0
 8007174:	d120      	bne.n	80071b8 <lwip_netconn_do_close_internal+0xb0>
  if (tpcb->state == LISTEN) {
 8007176:	7d33      	ldrb	r3, [r6, #20]
 8007178:	2b01      	cmp	r3, #1
 800717a:	f000 809d 	beq.w	80072b8 <lwip_netconn_do_close_internal+0x1b0>
    if (shut_rx) {
 800717e:	2f00      	cmp	r7, #0
 8007180:	f040 8096 	bne.w	80072b0 <lwip_netconn_do_close_internal+0x1a8>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8007184:	4642      	mov	r2, r8
 8007186:	4639      	mov	r1, r7
 8007188:	4630      	mov	r0, r6
 800718a:	f004 fc19 	bl	800b9c0 <tcp_shutdown>
 800718e:	4603      	mov	r3, r0
  if (err == ERR_OK) {
 8007190:	2800      	cmp	r0, #0
 8007192:	f000 809e 	beq.w	80072d2 <lwip_netconn_do_close_internal+0x1ca>
    if (err == ERR_MEM) {
 8007196:	1c42      	adds	r2, r0, #1
 8007198:	d147      	bne.n	800722a <lwip_netconn_do_close_internal+0x122>
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800719a:	6a22      	ldr	r2, [r4, #32]
 800719c:	7a53      	ldrb	r3, [r2, #9]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	f040 80dd 	bne.w	800735e <lwip_netconn_do_close_internal+0x256>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80071a4:	6816      	ldr	r6, [r2, #0]
    conn->current_msg->err = err;
 80071a6:	7110      	strb	r0, [r2, #4]
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80071a8:	360c      	adds	r6, #12
    conn->current_msg = NULL;
 80071aa:	6223      	str	r3, [r4, #32]
    conn->state = NETCONN_NONE;
 80071ac:	7063      	strb	r3, [r4, #1]
    if (delayed)
 80071ae:	2d00      	cmp	r5, #0
 80071b0:	d144      	bne.n	800723c <lwip_netconn_do_close_internal+0x134>
    return ERR_OK;
 80071b2:	2000      	movs	r0, #0
}
 80071b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 80071b8:	8b71      	ldrh	r1, [r6, #26]
 80071ba:	f011 0910 	ands.w	r9, r1, #16
 80071be:	d06d      	beq.n	800729c <lwip_netconn_do_close_internal+0x194>
    tcp_arg(tpcb, NULL);
 80071c0:	2100      	movs	r1, #0
 80071c2:	4630      	mov	r0, r6
 80071c4:	f003 fd3a 	bl	800ac3c <tcp_arg>
  if (tpcb->state == LISTEN) {
 80071c8:	7d33      	ldrb	r3, [r6, #20]
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d021      	beq.n	8007212 <lwip_netconn_do_close_internal+0x10a>
    if (shut_rx) {
 80071ce:	2f00      	cmp	r7, #0
 80071d0:	f040 80e8 	bne.w	80073a4 <lwip_netconn_do_close_internal+0x29c>
      tcp_sent(tpcb, NULL);
 80071d4:	2100      	movs	r1, #0
 80071d6:	4630      	mov	r0, r6
 80071d8:	f003 fd50 	bl	800ac7c <tcp_sent>
      tcp_poll(tpcb, NULL, 0);
 80071dc:	2200      	movs	r2, #0
 80071de:	4630      	mov	r0, r6
 80071e0:	4611      	mov	r1, r2
 80071e2:	f003 fd89 	bl	800acf8 <tcp_poll>
      tcp_err(tpcb, NULL);
 80071e6:	2100      	movs	r1, #0
 80071e8:	4630      	mov	r0, r6
 80071ea:	f003 fd63 	bl	800acb4 <tcp_err>
      err = tcp_close(tpcb);
 80071ee:	4630      	mov	r0, r6
 80071f0:	f004 fbc8 	bl	800b984 <tcp_close>
 80071f4:	4603      	mov	r3, r0
  if (err == ERR_OK) {
 80071f6:	b9b0      	cbnz	r0, 8007226 <lwip_netconn_do_close_internal+0x11e>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80071f8:	6a23      	ldr	r3, [r4, #32]
 80071fa:	681e      	ldr	r6, [r3, #0]
    conn->current_msg->err = err;
 80071fc:	7118      	strb	r0, [r3, #4]
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80071fe:	360c      	adds	r6, #12
      if (shut_close) {
 8007200:	e02f      	b.n	8007262 <lwip_netconn_do_close_internal+0x15a>
    tcp_arg(tpcb, NULL);
 8007202:	2100      	movs	r1, #0
 8007204:	4630      	mov	r0, r6
 8007206:	f003 fd19 	bl	800ac3c <tcp_arg>
  if (tpcb->state == LISTEN) {
 800720a:	7d33      	ldrb	r3, [r6, #20]
 800720c:	2b01      	cmp	r3, #1
 800720e:	f040 8083 	bne.w	8007318 <lwip_netconn_do_close_internal+0x210>
    tcp_accept(tpcb, NULL);
 8007212:	2100      	movs	r1, #0
 8007214:	4630      	mov	r0, r6
 8007216:	f003 fd69 	bl	800acec <tcp_accept>
      err = tcp_close(tpcb);
 800721a:	4630      	mov	r0, r6
 800721c:	f004 fbb2 	bl	800b984 <tcp_close>
 8007220:	4603      	mov	r3, r0
  if (err == ERR_OK) {
 8007222:	2800      	cmp	r0, #0
 8007224:	d0e8      	beq.n	80071f8 <lwip_netconn_do_close_internal+0xf0>
    if (err == ERR_MEM) {
 8007226:	3001      	adds	r0, #1
 8007228:	d00c      	beq.n	8007244 <lwip_netconn_do_close_internal+0x13c>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800722a:	6a22      	ldr	r2, [r4, #32]
 800722c:	6816      	ldr	r6, [r2, #0]
    conn->current_msg->err = err;
 800722e:	7113      	strb	r3, [r2, #4]
    conn->current_msg = NULL;
 8007230:	2300      	movs	r3, #0
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8007232:	360c      	adds	r6, #12
    conn->current_msg = NULL;
 8007234:	6223      	str	r3, [r4, #32]
    conn->state = NETCONN_NONE;
 8007236:	7063      	strb	r3, [r4, #1]
    if (delayed)
 8007238:	2d00      	cmp	r5, #0
 800723a:	d0ba      	beq.n	80071b2 <lwip_netconn_do_close_internal+0xaa>
      sys_sem_signal(op_completed_sem);
 800723c:	4630      	mov	r0, r6
 800723e:	f009 fc51 	bl	8010ae4 <sys_sem_signal>
 8007242:	e7b6      	b.n	80071b2 <lwip_netconn_do_close_internal+0xaa>
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8007244:	6a23      	ldr	r3, [r4, #32]
 8007246:	f893 9009 	ldrb.w	r9, [r3, #9]
 800724a:	f1b9 0f00 	cmp.w	r9, #0
 800724e:	f040 8086 	bne.w	800735e <lwip_netconn_do_close_internal+0x256>
          tcp_abort(tpcb);
 8007252:	4630      	mov	r0, r6
 8007254:	f004 f9b2 	bl	800b5bc <tcp_abort>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8007258:	6a23      	ldr	r3, [r4, #32]
 800725a:	681e      	ldr	r6, [r3, #0]
    conn->current_msg->err = err;
 800725c:	f883 9004 	strb.w	r9, [r3, #4]
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8007260:	360c      	adds	r6, #12
    conn->current_msg = NULL;
 8007262:	2200      	movs	r2, #0
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8007264:	6a63      	ldr	r3, [r4, #36]	; 0x24
    conn->current_msg = NULL;
 8007266:	6222      	str	r2, [r4, #32]
    conn->state = NETCONN_NONE;
 8007268:	7062      	strb	r2, [r4, #1]
        conn->pcb.tcp = NULL;
 800726a:	6062      	str	r2, [r4, #4]
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800726c:	2b00      	cmp	r3, #0
 800726e:	d060      	beq.n	8007332 <lwip_netconn_do_close_internal+0x22a>
 8007270:	2104      	movs	r1, #4
 8007272:	4620      	mov	r0, r4
 8007274:	4798      	blx	r3
      if (shut_rx) {
 8007276:	b137      	cbz	r7, 8007286 <lwip_netconn_do_close_internal+0x17e>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8007278:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800727a:	2b00      	cmp	r3, #0
 800727c:	d097      	beq.n	80071ae <lwip_netconn_do_close_internal+0xa6>
 800727e:	2200      	movs	r2, #0
 8007280:	4620      	mov	r0, r4
 8007282:	4611      	mov	r1, r2
 8007284:	4798      	blx	r3
      if (shut_tx) {
 8007286:	f1b8 0f00 	cmp.w	r8, #0
 800728a:	d090      	beq.n	80071ae <lwip_netconn_do_close_internal+0xa6>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800728c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800728e:	2b00      	cmp	r3, #0
 8007290:	d08d      	beq.n	80071ae <lwip_netconn_do_close_internal+0xa6>
 8007292:	2200      	movs	r2, #0
 8007294:	4620      	mov	r0, r4
 8007296:	2102      	movs	r1, #2
 8007298:	4798      	blx	r3
 800729a:	e788      	b.n	80071ae <lwip_netconn_do_close_internal+0xa6>
  if (tpcb->state == LISTEN) {
 800729c:	7d33      	ldrb	r3, [r6, #20]
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d058      	beq.n	8007354 <lwip_netconn_do_close_internal+0x24c>
    if (shut_rx) {
 80072a2:	2f00      	cmp	r7, #0
 80072a4:	d149      	bne.n	800733a <lwip_netconn_do_close_internal+0x232>
      tcp_sent(tpcb, NULL);
 80072a6:	4639      	mov	r1, r7
 80072a8:	4630      	mov	r0, r6
 80072aa:	f003 fce7 	bl	800ac7c <tcp_sent>
    if (shut_close) {
 80072ae:	e769      	b.n	8007184 <lwip_netconn_do_close_internal+0x7c>
      tcp_recv(tpcb, NULL);
 80072b0:	4641      	mov	r1, r8
 80072b2:	4630      	mov	r0, r6
 80072b4:	f003 fcc6 	bl	800ac44 <tcp_recv>
      tcp_accept(tpcb, NULL);
 80072b8:	4641      	mov	r1, r8
 80072ba:	4630      	mov	r0, r6
 80072bc:	f003 fd16 	bl	800acec <tcp_accept>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 80072c0:	4642      	mov	r2, r8
 80072c2:	4639      	mov	r1, r7
 80072c4:	4630      	mov	r0, r6
 80072c6:	f004 fb7b 	bl	800b9c0 <tcp_shutdown>
 80072ca:	4603      	mov	r3, r0
  if (err == ERR_OK) {
 80072cc:	2800      	cmp	r0, #0
 80072ce:	f47f af62 	bne.w	8007196 <lwip_netconn_do_close_internal+0x8e>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80072d2:	6a23      	ldr	r3, [r4, #32]
 80072d4:	681e      	ldr	r6, [r3, #0]
    conn->current_msg->err = err;
 80072d6:	7118      	strb	r0, [r3, #4]
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80072d8:	360c      	adds	r6, #12
    conn->current_msg = NULL;
 80072da:	6220      	str	r0, [r4, #32]
    conn->state = NETCONN_NONE;
 80072dc:	7060      	strb	r0, [r4, #1]
 80072de:	e7ca      	b.n	8007276 <lwip_netconn_do_close_internal+0x16e>
  LWIP_ASSERT("invalid conn", (conn != NULL));
 80072e0:	4b35      	ldr	r3, [pc, #212]	; (80073b8 <lwip_netconn_do_close_internal+0x2b0>)
 80072e2:	f240 32a2 	movw	r2, #930	; 0x3a2
 80072e6:	4938      	ldr	r1, [pc, #224]	; (80073c8 <lwip_netconn_do_close_internal+0x2c0>)
 80072e8:	4835      	ldr	r0, [pc, #212]	; (80073c0 <lwip_netconn_do_close_internal+0x2b8>)
 80072ea:	f00a f989 	bl	8011600 <iprintf>
 80072ee:	e712      	b.n	8007116 <lwip_netconn_do_close_internal+0xe>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 80072f0:	4b31      	ldr	r3, [pc, #196]	; (80073b8 <lwip_netconn_do_close_internal+0x2b0>)
 80072f2:	f240 32a5 	movw	r2, #933	; 0x3a5
 80072f6:	4935      	ldr	r1, [pc, #212]	; (80073cc <lwip_netconn_do_close_internal+0x2c4>)
 80072f8:	4831      	ldr	r0, [pc, #196]	; (80073c0 <lwip_netconn_do_close_internal+0x2b8>)
 80072fa:	f00a f981 	bl	8011600 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80072fe:	6a23      	ldr	r3, [r4, #32]
 8007300:	2b00      	cmp	r3, #0
 8007302:	f47f af26 	bne.w	8007152 <lwip_netconn_do_close_internal+0x4a>
 8007306:	4b2c      	ldr	r3, [pc, #176]	; (80073b8 <lwip_netconn_do_close_internal+0x2b0>)
 8007308:	f240 32a6 	movw	r2, #934	; 0x3a6
 800730c:	4930      	ldr	r1, [pc, #192]	; (80073d0 <lwip_netconn_do_close_internal+0x2c8>)
 800730e:	482c      	ldr	r0, [pc, #176]	; (80073c0 <lwip_netconn_do_close_internal+0x2b8>)
 8007310:	f00a f976 	bl	8011600 <iprintf>
  shut = conn->current_msg->msg.sd.shut;
 8007314:	6a23      	ldr	r3, [r4, #32]
 8007316:	e71c      	b.n	8007152 <lwip_netconn_do_close_internal+0x4a>
      tcp_recv(tpcb, NULL);
 8007318:	2100      	movs	r1, #0
 800731a:	4630      	mov	r0, r6
 800731c:	f003 fc92 	bl	800ac44 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8007320:	2100      	movs	r1, #0
 8007322:	4630      	mov	r0, r6
 8007324:	f003 fce2 	bl	800acec <tcp_accept>
    if (shut_tx) {
 8007328:	f1b8 0f00 	cmp.w	r8, #0
 800732c:	f47f af52 	bne.w	80071d4 <lwip_netconn_do_close_internal+0xcc>
 8007330:	e754      	b.n	80071dc <lwip_netconn_do_close_internal+0xd4>
      if (shut_rx) {
 8007332:	2f00      	cmp	r7, #0
 8007334:	f47f af3b 	bne.w	80071ae <lwip_netconn_do_close_internal+0xa6>
 8007338:	e7a5      	b.n	8007286 <lwip_netconn_do_close_internal+0x17e>
      tcp_recv(tpcb, NULL);
 800733a:	4649      	mov	r1, r9
 800733c:	4630      	mov	r0, r6
 800733e:	f003 fc81 	bl	800ac44 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8007342:	4649      	mov	r1, r9
 8007344:	4630      	mov	r0, r6
 8007346:	f003 fcd1 	bl	800acec <tcp_accept>
      tcp_sent(tpcb, NULL);
 800734a:	4649      	mov	r1, r9
 800734c:	4630      	mov	r0, r6
 800734e:	f003 fc95 	bl	800ac7c <tcp_sent>
    if (shut_close) {
 8007352:	e717      	b.n	8007184 <lwip_netconn_do_close_internal+0x7c>
    tcp_accept(tpcb, NULL);
 8007354:	4649      	mov	r1, r9
 8007356:	4630      	mov	r0, r6
 8007358:	f003 fcc8 	bl	800acec <tcp_accept>
  if (shut_close) {
 800735c:	e712      	b.n	8007184 <lwip_netconn_do_close_internal+0x7c>
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800735e:	7d33      	ldrb	r3, [r6, #20]
 8007360:	2b01      	cmp	r3, #1
 8007362:	d012      	beq.n	800738a <lwip_netconn_do_close_internal+0x282>
    if (shut_tx) {
 8007364:	f1b8 0f00 	cmp.w	r8, #0
 8007368:	d117      	bne.n	800739a <lwip_netconn_do_close_internal+0x292>
    tcp_poll(tpcb, poll_tcp, 1);
 800736a:	2201      	movs	r2, #1
 800736c:	4919      	ldr	r1, [pc, #100]	; (80073d4 <lwip_netconn_do_close_internal+0x2cc>)
 800736e:	4630      	mov	r0, r6
 8007370:	f003 fcc2 	bl	800acf8 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8007374:	4918      	ldr	r1, [pc, #96]	; (80073d8 <lwip_netconn_do_close_internal+0x2d0>)
 8007376:	4630      	mov	r0, r6
 8007378:	f003 fc9c 	bl	800acb4 <tcp_err>
    tcp_arg(tpcb, conn);
 800737c:	4630      	mov	r0, r6
 800737e:	4621      	mov	r1, r4
 8007380:	f003 fc5c 	bl	800ac3c <tcp_arg>
  return err;
 8007384:	f04f 30ff 	mov.w	r0, #4294967295
 8007388:	e714      	b.n	80071b4 <lwip_netconn_do_close_internal+0xac>
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800738a:	4b0b      	ldr	r3, [pc, #44]	; (80073b8 <lwip_netconn_do_close_internal+0x2b0>)
 800738c:	f240 4241 	movw	r2, #1089	; 0x441
 8007390:	4912      	ldr	r1, [pc, #72]	; (80073dc <lwip_netconn_do_close_internal+0x2d4>)
 8007392:	480b      	ldr	r0, [pc, #44]	; (80073c0 <lwip_netconn_do_close_internal+0x2b8>)
 8007394:	f00a f934 	bl	8011600 <iprintf>
 8007398:	e7e4      	b.n	8007364 <lwip_netconn_do_close_internal+0x25c>
      tcp_sent(tpcb, sent_tcp);
 800739a:	4911      	ldr	r1, [pc, #68]	; (80073e0 <lwip_netconn_do_close_internal+0x2d8>)
 800739c:	4630      	mov	r0, r6
 800739e:	f003 fc6d 	bl	800ac7c <tcp_sent>
 80073a2:	e7e2      	b.n	800736a <lwip_netconn_do_close_internal+0x262>
      tcp_recv(tpcb, NULL);
 80073a4:	4630      	mov	r0, r6
 80073a6:	2100      	movs	r1, #0
 80073a8:	f003 fc4c 	bl	800ac44 <tcp_recv>
      tcp_accept(tpcb, NULL);
 80073ac:	2100      	movs	r1, #0
 80073ae:	4630      	mov	r0, r6
 80073b0:	f003 fc9c 	bl	800acec <tcp_accept>
    if (shut_tx) {
 80073b4:	e70e      	b.n	80071d4 <lwip_netconn_do_close_internal+0xcc>
 80073b6:	bf00      	nop
 80073b8:	080127f0 	.word	0x080127f0
 80073bc:	08012980 	.word	0x08012980
 80073c0:	080124d0 	.word	0x080124d0
 80073c4:	080129a0 	.word	0x080129a0
 80073c8:	080126f4 	.word	0x080126f4
 80073cc:	080129c4 	.word	0x080129c4
 80073d0:	080128b8 	.word	0x080128b8
 80073d4:	080073e5 	.word	0x080073e5
 80073d8:	080075c9 	.word	0x080075c9
 80073dc:	080129d8 	.word	0x080129d8
 80073e0:	08007461 	.word	0x08007461

080073e4 <poll_tcp>:
{
 80073e4:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80073e6:	4604      	mov	r4, r0
 80073e8:	b360      	cbz	r0, 8007444 <poll_tcp+0x60>
  if (conn->state == NETCONN_WRITE) {
 80073ea:	7861      	ldrb	r1, [r4, #1]
 80073ec:	2901      	cmp	r1, #1
 80073ee:	d025      	beq.n	800743c <poll_tcp+0x58>
  } else if (conn->state == NETCONN_CLOSE) {
 80073f0:	2904      	cmp	r1, #4
 80073f2:	d018      	beq.n	8007426 <poll_tcp+0x42>
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 80073f4:	7f23      	ldrb	r3, [r4, #28]
 80073f6:	06da      	lsls	r2, r3, #27
 80073f8:	d513      	bpl.n	8007422 <poll_tcp+0x3e>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80073fa:	6862      	ldr	r2, [r4, #4]
 80073fc:	b18a      	cbz	r2, 8007422 <poll_tcp+0x3e>
 80073fe:	f8b2 1064 	ldrh.w	r1, [r2, #100]	; 0x64
 8007402:	f5b1 6f86 	cmp.w	r1, #1072	; 0x430
 8007406:	d30c      	bcc.n	8007422 <poll_tcp+0x3e>
 8007408:	f8b2 2066 	ldrh.w	r2, [r2, #102]	; 0x66
 800740c:	2a04      	cmp	r2, #4
 800740e:	d808      	bhi.n	8007422 <poll_tcp+0x3e>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8007410:	f023 0310 	bic.w	r3, r3, #16
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8007414:	6a65      	ldr	r5, [r4, #36]	; 0x24
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8007416:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8007418:	b11d      	cbz	r5, 8007422 <poll_tcp+0x3e>
 800741a:	2200      	movs	r2, #0
 800741c:	2102      	movs	r1, #2
 800741e:	4620      	mov	r0, r4
 8007420:	47a8      	blx	r5
}
 8007422:	2000      	movs	r0, #0
 8007424:	bd38      	pop	{r3, r4, r5, pc}
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8007426:	6a23      	ldr	r3, [r4, #32]
 8007428:	b11b      	cbz	r3, 8007432 <poll_tcp+0x4e>
 800742a:	7a5a      	ldrb	r2, [r3, #9]
 800742c:	b10a      	cbz	r2, 8007432 <poll_tcp+0x4e>
      conn->current_msg->msg.sd.polls_left--;
 800742e:	3a01      	subs	r2, #1
 8007430:	725a      	strb	r2, [r3, #9]
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8007432:	2101      	movs	r1, #1
 8007434:	4620      	mov	r0, r4
 8007436:	f7ff fe67 	bl	8007108 <lwip_netconn_do_close_internal>
 800743a:	e7db      	b.n	80073f4 <poll_tcp+0x10>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800743c:	4620      	mov	r0, r4
 800743e:	f7ff fcfb 	bl	8006e38 <lwip_netconn_do_writemore>
 8007442:	e7d7      	b.n	80073f4 <poll_tcp+0x10>
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8007444:	4b03      	ldr	r3, [pc, #12]	; (8007454 <poll_tcp+0x70>)
 8007446:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800744a:	4903      	ldr	r1, [pc, #12]	; (8007458 <poll_tcp+0x74>)
 800744c:	4803      	ldr	r0, [pc, #12]	; (800745c <poll_tcp+0x78>)
 800744e:	f00a f8d7 	bl	8011600 <iprintf>
 8007452:	e7ca      	b.n	80073ea <poll_tcp+0x6>
 8007454:	080127f0 	.word	0x080127f0
 8007458:	08012888 	.word	0x08012888
 800745c:	080124d0 	.word	0x080124d0

08007460 <sent_tcp>:
{
 8007460:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8007462:	b320      	cbz	r0, 80074ae <sent_tcp+0x4e>
    if (conn->state == NETCONN_WRITE) {
 8007464:	7841      	ldrb	r1, [r0, #1]
 8007466:	4604      	mov	r4, r0
 8007468:	4615      	mov	r5, r2
 800746a:	2901      	cmp	r1, #1
 800746c:	d028      	beq.n	80074c0 <sent_tcp+0x60>
    } else if (conn->state == NETCONN_CLOSE) {
 800746e:	2904      	cmp	r1, #4
 8007470:	d016      	beq.n	80074a0 <sent_tcp+0x40>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8007472:	6863      	ldr	r3, [r4, #4]
 8007474:	b193      	cbz	r3, 800749c <sent_tcp+0x3c>
 8007476:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800747a:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800747e:	d30d      	bcc.n	800749c <sent_tcp+0x3c>
 8007480:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007484:	2b04      	cmp	r3, #4
 8007486:	d809      	bhi.n	800749c <sent_tcp+0x3c>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8007488:	7f23      	ldrb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800748a:	6a66      	ldr	r6, [r4, #36]	; 0x24
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800748c:	f023 0310 	bic.w	r3, r3, #16
 8007490:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8007492:	b11e      	cbz	r6, 800749c <sent_tcp+0x3c>
 8007494:	462a      	mov	r2, r5
 8007496:	2102      	movs	r1, #2
 8007498:	4620      	mov	r0, r4
 800749a:	47b0      	blx	r6
}
 800749c:	2000      	movs	r0, #0
 800749e:	bd70      	pop	{r4, r5, r6, pc}
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80074a0:	2101      	movs	r1, #1
 80074a2:	f7ff fe31 	bl	8007108 <lwip_netconn_do_close_internal>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80074a6:	6863      	ldr	r3, [r4, #4]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d1e4      	bne.n	8007476 <sent_tcp+0x16>
 80074ac:	e7f6      	b.n	800749c <sent_tcp+0x3c>
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80074ae:	4b07      	ldr	r3, [pc, #28]	; (80074cc <sent_tcp+0x6c>)
 80074b0:	f240 1293 	movw	r2, #403	; 0x193
 80074b4:	4906      	ldr	r1, [pc, #24]	; (80074d0 <sent_tcp+0x70>)
 80074b6:	4807      	ldr	r0, [pc, #28]	; (80074d4 <sent_tcp+0x74>)
 80074b8:	f00a f8a2 	bl	8011600 <iprintf>
}
 80074bc:	2000      	movs	r0, #0
 80074be:	bd70      	pop	{r4, r5, r6, pc}
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80074c0:	f7ff fcba 	bl	8006e38 <lwip_netconn_do_writemore>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80074c4:	6863      	ldr	r3, [r4, #4]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d1d5      	bne.n	8007476 <sent_tcp+0x16>
 80074ca:	e7e7      	b.n	800749c <sent_tcp+0x3c>
 80074cc:	080127f0 	.word	0x080127f0
 80074d0:	08012888 	.word	0x08012888
 80074d4:	080124d0 	.word	0x080124d0

080074d8 <recv_tcp>:
{
 80074d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074dc:	4605      	mov	r5, r0
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 80074de:	460f      	mov	r7, r1
{
 80074e0:	4616      	mov	r6, r2
 80074e2:	461c      	mov	r4, r3
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 80074e4:	2900      	cmp	r1, #0
 80074e6:	d038      	beq.n	800755a <recv_tcp+0x82>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 80074e8:	2d00      	cmp	r5, #0
 80074ea:	d03f      	beq.n	800756c <recv_tcp+0x94>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 80074ec:	2c00      	cmp	r4, #0
 80074ee:	d14f      	bne.n	8007590 <recv_tcp+0xb8>
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 80074f0:	686b      	ldr	r3, [r5, #4]
 80074f2:	42bb      	cmp	r3, r7
 80074f4:	d006      	beq.n	8007504 <recv_tcp+0x2c>
 80074f6:	4b2d      	ldr	r3, [pc, #180]	; (80075ac <recv_tcp+0xd4>)
 80074f8:	f240 1235 	movw	r2, #309	; 0x135
 80074fc:	492c      	ldr	r1, [pc, #176]	; (80075b0 <recv_tcp+0xd8>)
 80074fe:	482d      	ldr	r0, [pc, #180]	; (80075b4 <recv_tcp+0xdc>)
 8007500:	f00a f87e 	bl	8011600 <iprintf>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8007504:	f105 0810 	add.w	r8, r5, #16
 8007508:	4640      	mov	r0, r8
 800750a:	f009 faab 	bl	8010a64 <sys_mbox_valid>
 800750e:	4604      	mov	r4, r0
 8007510:	b188      	cbz	r0, 8007536 <recv_tcp+0x5e>
  if (p != NULL) {
 8007512:	b1ae      	cbz	r6, 8007540 <recv_tcp+0x68>
    len = p->tot_len;
 8007514:	8937      	ldrh	r7, [r6, #8]
  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8007516:	4631      	mov	r1, r6
 8007518:	4640      	mov	r0, r8
 800751a:	f009 fa61 	bl	80109e0 <sys_mbox_trypost>
 800751e:	4604      	mov	r4, r0
 8007520:	2800      	cmp	r0, #0
 8007522:	d13d      	bne.n	80075a0 <recv_tcp+0xc8>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8007524:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007526:	b13b      	cbz	r3, 8007538 <recv_tcp+0x60>
 8007528:	4601      	mov	r1, r0
 800752a:	463a      	mov	r2, r7
 800752c:	4628      	mov	r0, r5
 800752e:	4798      	blx	r3
}
 8007530:	4620      	mov	r0, r4
 8007532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (p != NULL) {
 8007536:	b936      	cbnz	r6, 8007546 <recv_tcp+0x6e>
    return ERR_OK;
 8007538:	2400      	movs	r4, #0
}
 800753a:	4620      	mov	r0, r4
 800753c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8007540:	4e1d      	ldr	r6, [pc, #116]	; (80075b8 <recv_tcp+0xe0>)
    len = 0;
 8007542:	2700      	movs	r7, #0
 8007544:	e7e7      	b.n	8007516 <recv_tcp+0x3e>
      tcp_recved(pcb, p->tot_len);
 8007546:	8931      	ldrh	r1, [r6, #8]
 8007548:	4638      	mov	r0, r7
 800754a:	f003 faf9 	bl	800ab40 <tcp_recved>
      pbuf_free(p);
 800754e:	4630      	mov	r0, r6
 8007550:	f002 fea4 	bl	800a29c <pbuf_free>
}
 8007554:	4620      	mov	r0, r4
 8007556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800755a:	4b14      	ldr	r3, [pc, #80]	; (80075ac <recv_tcp+0xd4>)
 800755c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007560:	4916      	ldr	r1, [pc, #88]	; (80075bc <recv_tcp+0xe4>)
 8007562:	4814      	ldr	r0, [pc, #80]	; (80075b4 <recv_tcp+0xdc>)
 8007564:	f00a f84c 	bl	8011600 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8007568:	2d00      	cmp	r5, #0
 800756a:	d1bf      	bne.n	80074ec <recv_tcp+0x14>
 800756c:	4b0f      	ldr	r3, [pc, #60]	; (80075ac <recv_tcp+0xd4>)
 800756e:	f240 122d 	movw	r2, #301	; 0x12d
 8007572:	4913      	ldr	r1, [pc, #76]	; (80075c0 <recv_tcp+0xe8>)
 8007574:	480f      	ldr	r0, [pc, #60]	; (80075b4 <recv_tcp+0xdc>)
 8007576:	f00a f843 	bl	8011600 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800757a:	b1a4      	cbz	r4, 80075a6 <recv_tcp+0xce>
 800757c:	4b0b      	ldr	r3, [pc, #44]	; (80075ac <recv_tcp+0xd4>)
 800757e:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8007582:	4910      	ldr	r1, [pc, #64]	; (80075c4 <recv_tcp+0xec>)
    return ERR_VAL;
 8007584:	f06f 0405 	mvn.w	r4, #5
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8007588:	480a      	ldr	r0, [pc, #40]	; (80075b4 <recv_tcp+0xdc>)
 800758a:	f00a f839 	bl	8011600 <iprintf>
  if (conn == NULL) {
 800758e:	e7cf      	b.n	8007530 <recv_tcp+0x58>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8007590:	4b06      	ldr	r3, [pc, #24]	; (80075ac <recv_tcp+0xd4>)
 8007592:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8007596:	490b      	ldr	r1, [pc, #44]	; (80075c4 <recv_tcp+0xec>)
 8007598:	4806      	ldr	r0, [pc, #24]	; (80075b4 <recv_tcp+0xdc>)
 800759a:	f00a f831 	bl	8011600 <iprintf>
  if (conn == NULL) {
 800759e:	e7a7      	b.n	80074f0 <recv_tcp+0x18>
    return ERR_MEM;
 80075a0:	f04f 34ff 	mov.w	r4, #4294967295
 80075a4:	e7c4      	b.n	8007530 <recv_tcp+0x58>
    return ERR_VAL;
 80075a6:	f06f 0405 	mvn.w	r4, #5
 80075aa:	e7c1      	b.n	8007530 <recv_tcp+0x58>
 80075ac:	080127f0 	.word	0x080127f0
 80075b0:	08012a40 	.word	0x08012a40
 80075b4:	080124d0 	.word	0x080124d0
 80075b8:	08012c35 	.word	0x08012c35
 80075bc:	080129fc 	.word	0x080129fc
 80075c0:	08012a20 	.word	0x08012a20
 80075c4:	08012a60 	.word	0x08012a60

080075c8 <err_tcp>:
{
 80075c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80075cc:	4604      	mov	r4, r0
{
 80075ce:	460d      	mov	r5, r1
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80075d0:	2800      	cmp	r0, #0
 80075d2:	d07a      	beq.n	80076ca <err_tcp+0x102>
  SYS_ARCH_PROTECT(lev);
 80075d4:	f009 fad2 	bl	8010b7c <sys_arch_protect>
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 80075d8:	7f23      	ldrb	r3, [r4, #28]
  conn->pcb.tcp = NULL;
 80075da:	2600      	movs	r6, #0
  old_state = conn->state;
 80075dc:	7867      	ldrb	r7, [r4, #1]
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 80075de:	f043 0301 	orr.w	r3, r3, #1
  conn->pending_err = err;
 80075e2:	7225      	strb	r5, [r4, #8]
  conn->pcb.tcp = NULL;
 80075e4:	6066      	str	r6, [r4, #4]
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 80075e6:	7723      	strb	r3, [r4, #28]
  conn->state = NETCONN_NONE;
 80075e8:	7066      	strb	r6, [r4, #1]
  SYS_ARCH_UNPROTECT(lev);
 80075ea:	f009 fad3 	bl	8010b94 <sys_arch_unprotect>
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80075ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075f0:	b17b      	cbz	r3, 8007612 <err_tcp+0x4a>
 80075f2:	4632      	mov	r2, r6
 80075f4:	2104      	movs	r1, #4
 80075f6:	4620      	mov	r0, r4
 80075f8:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80075fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075fc:	b14b      	cbz	r3, 8007612 <err_tcp+0x4a>
 80075fe:	4632      	mov	r2, r6
 8007600:	4631      	mov	r1, r6
 8007602:	4620      	mov	r0, r4
 8007604:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8007606:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007608:	b11b      	cbz	r3, 8007612 <err_tcp+0x4a>
 800760a:	4632      	mov	r2, r6
 800760c:	2102      	movs	r1, #2
 800760e:	4620      	mov	r0, r4
 8007610:	4798      	blx	r3
  switch (err) {
 8007612:	f105 030f 	add.w	r3, r5, #15
 8007616:	b2db      	uxtb	r3, r3
 8007618:	2b02      	cmp	r3, #2
 800761a:	d834      	bhi.n	8007686 <err_tcp+0xbe>
 800761c:	4a3c      	ldr	r2, [pc, #240]	; (8007710 <err_tcp+0x148>)
 800761e:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8007622:	f104 0610 	add.w	r6, r4, #16
 8007626:	4630      	mov	r0, r6
 8007628:	f009 fa1c 	bl	8010a64 <sys_mbox_valid>
 800762c:	2800      	cmp	r0, #0
 800762e:	d133      	bne.n	8007698 <err_tcp+0xd0>
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8007630:	f104 0614 	add.w	r6, r4, #20
 8007634:	4630      	mov	r0, r6
 8007636:	f009 fa15 	bl	8010a64 <sys_mbox_valid>
 800763a:	2800      	cmp	r0, #0
 800763c:	d137      	bne.n	80076ae <err_tcp+0xe6>
  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800763e:	1efb      	subs	r3, r7, #3
 8007640:	2b01      	cmp	r3, #1
 8007642:	d901      	bls.n	8007648 <err_tcp+0x80>
 8007644:	2f01      	cmp	r7, #1
 8007646:	d11a      	bne.n	800767e <err_tcp+0xb6>
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8007648:	7f23      	ldrb	r3, [r4, #28]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800764a:	f023 0204 	bic.w	r2, r3, #4
    if (!was_nonblocking_connect) {
 800764e:	075b      	lsls	r3, r3, #29
    SET_NONBLOCKING_CONNECT(conn, 0);
 8007650:	7722      	strb	r2, [r4, #28]
    if (!was_nonblocking_connect) {
 8007652:	d416      	bmi.n	8007682 <err_tcp+0xba>
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8007654:	6a23      	ldr	r3, [r4, #32]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d050      	beq.n	80076fc <err_tcp+0x134>
      if (old_state == NETCONN_CLOSE) {
 800765a:	2f04      	cmp	r7, #4
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800765c:	681e      	ldr	r6, [r3, #0]
      if (old_state == NETCONN_CLOSE) {
 800765e:	bf08      	it	eq
 8007660:	2500      	moveq	r5, #0
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8007662:	360c      	adds	r6, #12
        conn->current_msg->err = ERR_OK;
 8007664:	711d      	strb	r5, [r3, #4]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8007666:	4630      	mov	r0, r6
 8007668:	f009 fa44 	bl	8010af4 <sys_sem_valid>
 800766c:	2800      	cmp	r0, #0
 800766e:	d03d      	beq.n	80076ec <err_tcp+0x124>
      conn->current_msg = NULL;
 8007670:	2300      	movs	r3, #0
      sys_sem_signal(op_completed_sem);
 8007672:	4630      	mov	r0, r6
      conn->current_msg = NULL;
 8007674:	6223      	str	r3, [r4, #32]
}
 8007676:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      sys_sem_signal(op_completed_sem);
 800767a:	f009 ba33 	b.w	8010ae4 <sys_sem_signal>
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800767e:	6a23      	ldr	r3, [r4, #32]
 8007680:	b9d3      	cbnz	r3, 80076b8 <err_tcp+0xf0>
}
 8007682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8007686:	bb45      	cbnz	r5, 80076da <err_tcp+0x112>
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8007688:	f104 0610 	add.w	r6, r4, #16
      return NULL;
 800768c:	46a8      	mov	r8, r5
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800768e:	4630      	mov	r0, r6
 8007690:	f009 f9e8 	bl	8010a64 <sys_mbox_valid>
 8007694:	2800      	cmp	r0, #0
 8007696:	d0cb      	beq.n	8007630 <err_tcp+0x68>
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8007698:	4630      	mov	r0, r6
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800769a:	f104 0614 	add.w	r6, r4, #20
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800769e:	4641      	mov	r1, r8
 80076a0:	f009 f99e 	bl	80109e0 <sys_mbox_trypost>
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 80076a4:	4630      	mov	r0, r6
 80076a6:	f009 f9dd 	bl	8010a64 <sys_mbox_valid>
 80076aa:	2800      	cmp	r0, #0
 80076ac:	d0c7      	beq.n	800763e <err_tcp+0x76>
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 80076ae:	4641      	mov	r1, r8
 80076b0:	4630      	mov	r0, r6
 80076b2:	f009 f995 	bl	80109e0 <sys_mbox_trypost>
 80076b6:	e7c2      	b.n	800763e <err_tcp+0x76>
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 80076b8:	4b16      	ldr	r3, [pc, #88]	; (8007714 <err_tcp+0x14c>)
 80076ba:	f240 12f7 	movw	r2, #503	; 0x1f7
 80076be:	4916      	ldr	r1, [pc, #88]	; (8007718 <err_tcp+0x150>)
 80076c0:	4816      	ldr	r0, [pc, #88]	; (800771c <err_tcp+0x154>)
}
 80076c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 80076c6:	f009 bf9b 	b.w	8011600 <iprintf>
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80076ca:	4b12      	ldr	r3, [pc, #72]	; (8007714 <err_tcp+0x14c>)
 80076cc:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80076d0:	4913      	ldr	r1, [pc, #76]	; (8007720 <err_tcp+0x158>)
 80076d2:	4812      	ldr	r0, [pc, #72]	; (800771c <err_tcp+0x154>)
 80076d4:	f009 ff94 	bl	8011600 <iprintf>
 80076d8:	e77c      	b.n	80075d4 <err_tcp+0xc>
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 80076da:	4b0e      	ldr	r3, [pc, #56]	; (8007714 <err_tcp+0x14c>)
 80076dc:	227d      	movs	r2, #125	; 0x7d
 80076de:	4911      	ldr	r1, [pc, #68]	; (8007724 <err_tcp+0x15c>)
 80076e0:	f04f 0800 	mov.w	r8, #0
 80076e4:	480d      	ldr	r0, [pc, #52]	; (800771c <err_tcp+0x154>)
 80076e6:	f009 ff8b 	bl	8011600 <iprintf>
 80076ea:	e79a      	b.n	8007622 <err_tcp+0x5a>
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 80076ec:	4b09      	ldr	r3, [pc, #36]	; (8007714 <err_tcp+0x14c>)
 80076ee:	f240 12ef 	movw	r2, #495	; 0x1ef
 80076f2:	490d      	ldr	r1, [pc, #52]	; (8007728 <err_tcp+0x160>)
 80076f4:	4809      	ldr	r0, [pc, #36]	; (800771c <err_tcp+0x154>)
 80076f6:	f009 ff83 	bl	8011600 <iprintf>
 80076fa:	e7b9      	b.n	8007670 <err_tcp+0xa8>
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80076fc:	4b05      	ldr	r3, [pc, #20]	; (8007714 <err_tcp+0x14c>)
 80076fe:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8007702:	490a      	ldr	r1, [pc, #40]	; (800772c <err_tcp+0x164>)
 8007704:	4805      	ldr	r0, [pc, #20]	; (800771c <err_tcp+0x154>)
 8007706:	f009 ff7b 	bl	8011600 <iprintf>
        conn->current_msg->err = ERR_OK;
 800770a:	6a23      	ldr	r3, [r4, #32]
 800770c:	e7a5      	b.n	800765a <err_tcp+0x92>
 800770e:	bf00      	nop
 8007710:	08012c28 	.word	0x08012c28
 8007714:	080127f0 	.word	0x080127f0
 8007718:	08012aa4 	.word	0x08012aa4
 800771c:	080124d0 	.word	0x080124d0
 8007720:	08012888 	.word	0x08012888
 8007724:	08012a78 	.word	0x08012a78
 8007728:	08012a88 	.word	0x08012a88
 800772c:	080128b8 	.word	0x080128b8

08007730 <lwip_netconn_is_err_msg>:
{
 8007730:	b538      	push	{r3, r4, r5, lr}
 8007732:	4604      	mov	r4, r0
  LWIP_ASSERT("err != NULL", err != NULL);
 8007734:	460d      	mov	r5, r1
 8007736:	b171      	cbz	r1, 8007756 <lwip_netconn_is_err_msg+0x26>
  if (msg == &netconn_aborted) {
 8007738:	4b0e      	ldr	r3, [pc, #56]	; (8007774 <lwip_netconn_is_err_msg+0x44>)
 800773a:	429c      	cmp	r4, r3
 800773c:	d007      	beq.n	800774e <lwip_netconn_is_err_msg+0x1e>
  } else if (msg == &netconn_reset) {
 800773e:	4b0e      	ldr	r3, [pc, #56]	; (8007778 <lwip_netconn_is_err_msg+0x48>)
 8007740:	429c      	cmp	r4, r3
 8007742:	d00f      	beq.n	8007764 <lwip_netconn_is_err_msg+0x34>
  } else if (msg == &netconn_closed) {
 8007744:	4b0d      	ldr	r3, [pc, #52]	; (800777c <lwip_netconn_is_err_msg+0x4c>)
 8007746:	429c      	cmp	r4, r3
 8007748:	d010      	beq.n	800776c <lwip_netconn_is_err_msg+0x3c>
  return 0;
 800774a:	2000      	movs	r0, #0
}
 800774c:	bd38      	pop	{r3, r4, r5, pc}
    *err = ERR_ABRT;
 800774e:	23f3      	movs	r3, #243	; 0xf3
    return 1;
 8007750:	2001      	movs	r0, #1
    *err = ERR_ABRT;
 8007752:	702b      	strb	r3, [r5, #0]
}
 8007754:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("err != NULL", err != NULL);
 8007756:	4b0a      	ldr	r3, [pc, #40]	; (8007780 <lwip_netconn_is_err_msg+0x50>)
 8007758:	2285      	movs	r2, #133	; 0x85
 800775a:	490a      	ldr	r1, [pc, #40]	; (8007784 <lwip_netconn_is_err_msg+0x54>)
 800775c:	480a      	ldr	r0, [pc, #40]	; (8007788 <lwip_netconn_is_err_msg+0x58>)
 800775e:	f009 ff4f 	bl	8011600 <iprintf>
 8007762:	e7e9      	b.n	8007738 <lwip_netconn_is_err_msg+0x8>
    *err = ERR_RST;
 8007764:	23f2      	movs	r3, #242	; 0xf2
    return 1;
 8007766:	2001      	movs	r0, #1
    *err = ERR_RST;
 8007768:	702b      	strb	r3, [r5, #0]
}
 800776a:	bd38      	pop	{r3, r4, r5, pc}
    *err = ERR_CLSD;
 800776c:	23f1      	movs	r3, #241	; 0xf1
    return 1;
 800776e:	2001      	movs	r0, #1
    *err = ERR_CLSD;
 8007770:	702b      	strb	r3, [r5, #0]
}
 8007772:	bd38      	pop	{r3, r4, r5, pc}
 8007774:	08012c34 	.word	0x08012c34
 8007778:	08012c36 	.word	0x08012c36
 800777c:	08012c35 	.word	0x08012c35
 8007780:	080127f0 	.word	0x080127f0
 8007784:	08012ac0 	.word	0x08012ac0
 8007788:	080124d0 	.word	0x080124d0

0800778c <lwip_netconn_do_newconn>:
{
 800778c:	b538      	push	{r3, r4, r5, lr}
  msg->err = ERR_OK;
 800778e:	2300      	movs	r3, #0
  if (msg->conn->pcb.tcp == NULL) {
 8007790:	6805      	ldr	r5, [r0, #0]
{
 8007792:	4604      	mov	r4, r0
  msg->err = ERR_OK;
 8007794:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8007796:	6868      	ldr	r0, [r5, #4]
 8007798:	b100      	cbz	r0, 800779c <lwip_netconn_do_newconn+0x10>
}
 800779a:	bd38      	pop	{r3, r4, r5, pc}
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800779c:	782b      	ldrb	r3, [r5, #0]
 800779e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80077a2:	2b10      	cmp	r3, #16
 80077a4:	d016      	beq.n	80077d4 <lwip_netconn_do_newconn+0x48>
 80077a6:	2b20      	cmp	r3, #32
 80077a8:	d11f      	bne.n	80077ea <lwip_netconn_do_newconn+0x5e>
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 80077aa:	f007 fce3 	bl	800f174 <udp_new_ip_type>
      if (msg->conn->pcb.udp != NULL) {
 80077ae:	6822      	ldr	r2, [r4, #0]
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 80077b0:	6068      	str	r0, [r5, #4]
      if (msg->conn->pcb.udp != NULL) {
 80077b2:	6850      	ldr	r0, [r2, #4]
 80077b4:	b158      	cbz	r0, 80077ce <lwip_netconn_do_newconn+0x42>
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 80077b6:	7813      	ldrb	r3, [r2, #0]
 80077b8:	2b22      	cmp	r3, #34	; 0x22
 80077ba:	d101      	bne.n	80077c0 <lwip_netconn_do_newconn+0x34>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 80077bc:	2301      	movs	r3, #1
 80077be:	7403      	strb	r3, [r0, #16]
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 80077c0:	490b      	ldr	r1, [pc, #44]	; (80077f0 <lwip_netconn_do_newconn+0x64>)
 80077c2:	f007 fc9f 	bl	800f104 <udp_recv>
  if (msg->conn->pcb.ip == NULL) {
 80077c6:	6823      	ldr	r3, [r4, #0]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d1e5      	bne.n	800779a <lwip_netconn_do_newconn+0xe>
    msg->err = ERR_MEM;
 80077ce:	23ff      	movs	r3, #255	; 0xff
 80077d0:	7123      	strb	r3, [r4, #4]
}
 80077d2:	bd38      	pop	{r3, r4, r5, pc}
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 80077d4:	f004 f802 	bl	800b7dc <tcp_new_ip_type>
      if (msg->conn->pcb.tcp != NULL) {
 80077d8:	6823      	ldr	r3, [r4, #0]
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 80077da:	6068      	str	r0, [r5, #4]
      if (msg->conn->pcb.tcp != NULL) {
 80077dc:	685a      	ldr	r2, [r3, #4]
 80077de:	2a00      	cmp	r2, #0
 80077e0:	d0f5      	beq.n	80077ce <lwip_netconn_do_newconn+0x42>
        setup_tcp(msg->conn);
 80077e2:	4618      	mov	r0, r3
 80077e4:	f7ff fb04 	bl	8006df0 <setup_tcp>
 80077e8:	e7ed      	b.n	80077c6 <lwip_netconn_do_newconn+0x3a>
      msg->err = ERR_VAL;
 80077ea:	23fa      	movs	r3, #250	; 0xfa
 80077ec:	7123      	strb	r3, [r4, #4]
}
 80077ee:	bd38      	pop	{r3, r4, r5, pc}
 80077f0:	08006d35 	.word	0x08006d35

080077f4 <netconn_alloc>:
{
 80077f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077f6:	4605      	mov	r5, r0
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 80077f8:	2007      	movs	r0, #7
{
 80077fa:	460e      	mov	r6, r1
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 80077fc:	f002 f97a 	bl	8009af4 <memp_malloc>
  if (conn == NULL) {
 8007800:	4604      	mov	r4, r0
 8007802:	b310      	cbz	r0, 800784a <netconn_alloc+0x56>
  conn->pending_err = ERR_OK;
 8007804:	f005 03f0 	and.w	r3, r5, #240	; 0xf0
 8007808:	2200      	movs	r2, #0
  conn->type = t;
 800780a:	7005      	strb	r5, [r0, #0]
  switch (NETCONNTYPE_GROUP(t)) {
 800780c:	2b10      	cmp	r3, #16
  conn->pending_err = ERR_OK;
 800780e:	7202      	strb	r2, [r0, #8]
  conn->pcb.tcp = NULL;
 8007810:	6042      	str	r2, [r0, #4]
  switch (NETCONNTYPE_GROUP(t)) {
 8007812:	d001      	beq.n	8007818 <netconn_alloc+0x24>
 8007814:	2b20      	cmp	r3, #32
 8007816:	d11a      	bne.n	800784e <netconn_alloc+0x5a>
  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8007818:	f104 0710 	add.w	r7, r4, #16
 800781c:	2106      	movs	r1, #6
 800781e:	4638      	mov	r0, r7
 8007820:	f009 f8be 	bl	80109a0 <sys_mbox_new>
 8007824:	4601      	mov	r1, r0
 8007826:	b9c8      	cbnz	r0, 800785c <netconn_alloc+0x68>
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8007828:	f104 000c 	add.w	r0, r4, #12
 800782c:	f009 f924 	bl	8010a78 <sys_sem_new>
 8007830:	4605      	mov	r5, r0
 8007832:	b9d0      	cbnz	r0, 800786a <netconn_alloc+0x76>
  sys_mbox_set_invalid(&conn->acceptmbox);
 8007834:	f104 0014 	add.w	r0, r4, #20
 8007838:	f009 f91a 	bl	8010a70 <sys_mbox_set_invalid>
  conn->socket       = -1;
 800783c:	f04f 33ff 	mov.w	r3, #4294967295
  conn->state        = NETCONN_NONE;
 8007840:	7065      	strb	r5, [r4, #1]
  conn->callback     = callback;
 8007842:	6266      	str	r6, [r4, #36]	; 0x24
  conn->socket       = -1;
 8007844:	61a3      	str	r3, [r4, #24]
  conn->current_msg  = NULL;
 8007846:	6225      	str	r5, [r4, #32]
  conn->flags = init_flags;
 8007848:	7725      	strb	r5, [r4, #28]
}
 800784a:	4620      	mov	r0, r4
 800784c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800784e:	4b09      	ldr	r3, [pc, #36]	; (8007874 <netconn_alloc+0x80>)
 8007850:	f240 22e5 	movw	r2, #741	; 0x2e5
 8007854:	4908      	ldr	r1, [pc, #32]	; (8007878 <netconn_alloc+0x84>)
 8007856:	4809      	ldr	r0, [pc, #36]	; (800787c <netconn_alloc+0x88>)
 8007858:	f009 fed2 	bl	8011600 <iprintf>
  memp_free(MEMP_NETCONN, conn);
 800785c:	4621      	mov	r1, r4
  return NULL;
 800785e:	2400      	movs	r4, #0
  memp_free(MEMP_NETCONN, conn);
 8007860:	2007      	movs	r0, #7
 8007862:	f002 f98d 	bl	8009b80 <memp_free>
}
 8007866:	4620      	mov	r0, r4
 8007868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sys_mbox_free(&conn->recvmbox);
 800786a:	4638      	mov	r0, r7
 800786c:	f009 f8ae 	bl	80109cc <sys_mbox_free>
    goto free_and_return;
 8007870:	e7f4      	b.n	800785c <netconn_alloc+0x68>
 8007872:	bf00      	nop
 8007874:	080127f0 	.word	0x080127f0
 8007878:	08012acc 	.word	0x08012acc
 800787c:	080124d0 	.word	0x080124d0

08007880 <netconn_free>:
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8007880:	6843      	ldr	r3, [r0, #4]
{
 8007882:	b510      	push	{r4, lr}
 8007884:	4604      	mov	r4, r0
 8007886:	b082      	sub	sp, #8
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8007888:	b133      	cbz	r3, 8007898 <netconn_free+0x18>
 800788a:	4b1a      	ldr	r3, [pc, #104]	; (80078f4 <netconn_free+0x74>)
 800788c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8007890:	4919      	ldr	r1, [pc, #100]	; (80078f8 <netconn_free+0x78>)
 8007892:	481a      	ldr	r0, [pc, #104]	; (80078fc <netconn_free+0x7c>)
 8007894:	f009 feb4 	bl	8011600 <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8007898:	f104 0010 	add.w	r0, r4, #16
 800789c:	f009 f8e2 	bl	8010a64 <sys_mbox_valid>
 80078a0:	b998      	cbnz	r0, 80078ca <netconn_free+0x4a>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 80078a2:	f104 0014 	add.w	r0, r4, #20
 80078a6:	f009 f8dd 	bl	8010a64 <sys_mbox_valid>
 80078aa:	b9d8      	cbnz	r0, 80078e4 <netconn_free+0x64>
  sys_sem_free(&conn->op_completed);
 80078ac:	f104 000c 	add.w	r0, r4, #12
 80078b0:	9001      	str	r0, [sp, #4]
 80078b2:	f009 f91b 	bl	8010aec <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 80078b6:	9801      	ldr	r0, [sp, #4]
 80078b8:	f009 f922 	bl	8010b00 <sys_sem_set_invalid>
  memp_free(MEMP_NETCONN, conn);
 80078bc:	4621      	mov	r1, r4
 80078be:	2007      	movs	r0, #7
}
 80078c0:	b002      	add	sp, #8
 80078c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_NETCONN, conn);
 80078c6:	f002 b95b 	b.w	8009b80 <memp_free>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 80078ca:	4b0a      	ldr	r3, [pc, #40]	; (80078f4 <netconn_free+0x74>)
 80078cc:	f240 3223 	movw	r2, #803	; 0x323
 80078d0:	490b      	ldr	r1, [pc, #44]	; (8007900 <netconn_free+0x80>)
 80078d2:	480a      	ldr	r0, [pc, #40]	; (80078fc <netconn_free+0x7c>)
 80078d4:	f009 fe94 	bl	8011600 <iprintf>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 80078d8:	f104 0014 	add.w	r0, r4, #20
 80078dc:	f009 f8c2 	bl	8010a64 <sys_mbox_valid>
 80078e0:	2800      	cmp	r0, #0
 80078e2:	d0e3      	beq.n	80078ac <netconn_free+0x2c>
 80078e4:	4b03      	ldr	r3, [pc, #12]	; (80078f4 <netconn_free+0x74>)
 80078e6:	f240 3226 	movw	r2, #806	; 0x326
 80078ea:	4906      	ldr	r1, [pc, #24]	; (8007904 <netconn_free+0x84>)
 80078ec:	4803      	ldr	r0, [pc, #12]	; (80078fc <netconn_free+0x7c>)
 80078ee:	f009 fe87 	bl	8011600 <iprintf>
 80078f2:	e7db      	b.n	80078ac <netconn_free+0x2c>
 80078f4:	080127f0 	.word	0x080127f0
 80078f8:	08012af4 	.word	0x08012af4
 80078fc:	080124d0 	.word	0x080124d0
 8007900:	08012b24 	.word	0x08012b24
 8007904:	08012b60 	.word	0x08012b60

08007908 <netconn_drain>:
{
 8007908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (sys_mbox_valid(&conn->recvmbox)) {
 800790c:	f100 0510 	add.w	r5, r0, #16
{
 8007910:	b082      	sub	sp, #8
 8007912:	4604      	mov	r4, r0
  if (sys_mbox_valid(&conn->recvmbox)) {
 8007914:	4628      	mov	r0, r5
 8007916:	f009 f8a5 	bl	8010a64 <sys_mbox_valid>
 800791a:	b1f8      	cbz	r0, 800795c <netconn_drain+0x54>
 800791c:	ae01      	add	r6, sp, #4
  } else if (msg == &netconn_reset) {
 800791e:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 80079e8 <netconn_drain+0xe0>
  if (msg == &netconn_aborted) {
 8007922:	4f30      	ldr	r7, [pc, #192]	; (80079e4 <netconn_drain+0xdc>)
  } else if (msg == &netconn_closed) {
 8007924:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80079ec <netconn_drain+0xe4>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8007928:	4631      	mov	r1, r6
 800792a:	4628      	mov	r0, r5
 800792c:	f009 f884 	bl	8010a38 <sys_arch_mbox_tryfetch>
 8007930:	3001      	adds	r0, #1
 8007932:	d00d      	beq.n	8007950 <netconn_drain+0x48>
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8007934:	7823      	ldrb	r3, [r4, #0]
 8007936:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800793a:	2b10      	cmp	r3, #16
 800793c:	d046      	beq.n	80079cc <netconn_drain+0xc4>
          netbuf_delete((struct netbuf *)mem);
 800793e:	9801      	ldr	r0, [sp, #4]
 8007940:	f000 fb44 	bl	8007fcc <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8007944:	4631      	mov	r1, r6
 8007946:	4628      	mov	r0, r5
 8007948:	f009 f876 	bl	8010a38 <sys_arch_mbox_tryfetch>
 800794c:	3001      	adds	r0, #1
 800794e:	d1f1      	bne.n	8007934 <netconn_drain+0x2c>
    sys_mbox_free(&conn->recvmbox);
 8007950:	4628      	mov	r0, r5
 8007952:	f009 f83b 	bl	80109cc <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8007956:	4628      	mov	r0, r5
 8007958:	f009 f88a 	bl	8010a70 <sys_mbox_set_invalid>
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800795c:	3414      	adds	r4, #20
 800795e:	4620      	mov	r0, r4
 8007960:	f009 f880 	bl	8010a64 <sys_mbox_valid>
 8007964:	b378      	cbz	r0, 80079c6 <netconn_drain+0xbe>
 8007966:	ae01      	add	r6, sp, #4
  if (msg == &netconn_aborted) {
 8007968:	f8df 9078 	ldr.w	r9, [pc, #120]	; 80079e4 <netconn_drain+0xdc>
  } else if (msg == &netconn_reset) {
 800796c:	f8df 8078 	ldr.w	r8, [pc, #120]	; 80079e8 <netconn_drain+0xe0>
  } else if (msg == &netconn_closed) {
 8007970:	f8df a078 	ldr.w	sl, [pc, #120]	; 80079ec <netconn_drain+0xe4>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8007974:	4631      	mov	r1, r6
 8007976:	4620      	mov	r0, r4
 8007978:	f009 f85e 	bl	8010a38 <sys_arch_mbox_tryfetch>
 800797c:	3001      	adds	r0, #1
 800797e:	d01c      	beq.n	80079ba <netconn_drain+0xb2>
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8007980:	9d01      	ldr	r5, [sp, #4]
  } else if (msg == &netconn_closed) {
 8007982:	4545      	cmp	r5, r8
 8007984:	bf18      	it	ne
 8007986:	454d      	cmpne	r5, r9
          netconn_drain(newconn);
 8007988:	4628      	mov	r0, r5
  } else if (msg == &netconn_closed) {
 800798a:	d0f3      	beq.n	8007974 <netconn_drain+0x6c>
 800798c:	eba5 070a 	sub.w	r7, r5, sl
 8007990:	fab7 f787 	clz	r7, r7
 8007994:	097f      	lsrs	r7, r7, #5
 8007996:	2f00      	cmp	r7, #0
 8007998:	d1ec      	bne.n	8007974 <netconn_drain+0x6c>
          netconn_drain(newconn);
 800799a:	f7ff ffb5 	bl	8007908 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800799e:	6868      	ldr	r0, [r5, #4]
 80079a0:	b110      	cbz	r0, 80079a8 <netconn_drain+0xa0>
            tcp_abort(newconn->pcb.tcp);
 80079a2:	f003 fe0b 	bl	800b5bc <tcp_abort>
            newconn->pcb.tcp = NULL;
 80079a6:	606f      	str	r7, [r5, #4]
          netconn_free(newconn);
 80079a8:	4628      	mov	r0, r5
 80079aa:	f7ff ff69 	bl	8007880 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80079ae:	4631      	mov	r1, r6
 80079b0:	4620      	mov	r0, r4
 80079b2:	f009 f841 	bl	8010a38 <sys_arch_mbox_tryfetch>
 80079b6:	3001      	adds	r0, #1
 80079b8:	d1e2      	bne.n	8007980 <netconn_drain+0x78>
    sys_mbox_free(&conn->acceptmbox);
 80079ba:	4620      	mov	r0, r4
 80079bc:	f009 f806 	bl	80109cc <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 80079c0:	4620      	mov	r0, r4
 80079c2:	f009 f855 	bl	8010a70 <sys_mbox_set_invalid>
}
 80079c6:	b002      	add	sp, #8
 80079c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 80079cc:	9b01      	ldr	r3, [sp, #4]
  } else if (msg == &netconn_closed) {
 80079ce:	42bb      	cmp	r3, r7
 80079d0:	bf18      	it	ne
 80079d2:	4543      	cmpne	r3, r8
            pbuf_free((struct pbuf *)mem);
 80079d4:	4618      	mov	r0, r3
  } else if (msg == &netconn_closed) {
 80079d6:	d0a7      	beq.n	8007928 <netconn_drain+0x20>
 80079d8:	454b      	cmp	r3, r9
 80079da:	d0a5      	beq.n	8007928 <netconn_drain+0x20>
            pbuf_free((struct pbuf *)mem);
 80079dc:	f002 fc5e 	bl	800a29c <pbuf_free>
 80079e0:	e7a2      	b.n	8007928 <netconn_drain+0x20>
 80079e2:	bf00      	nop
 80079e4:	08012c34 	.word	0x08012c34
 80079e8:	08012c36 	.word	0x08012c36
 80079ec:	08012c35 	.word	0x08012c35

080079f0 <accept_function>:
{
 80079f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079f2:	b083      	sub	sp, #12
  if (conn == NULL) {
 80079f4:	2800      	cmp	r0, #0
 80079f6:	d036      	beq.n	8007a66 <accept_function+0x76>
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 80079f8:	f100 0714 	add.w	r7, r0, #20
 80079fc:	4604      	mov	r4, r0
 80079fe:	460d      	mov	r5, r1
 8007a00:	4616      	mov	r6, r2
 8007a02:	4638      	mov	r0, r7
 8007a04:	f009 f82e 	bl	8010a64 <sys_mbox_valid>
 8007a08:	b368      	cbz	r0, 8007a66 <accept_function+0x76>
  if (newpcb == NULL) {
 8007a0a:	b30d      	cbz	r5, 8007a50 <accept_function+0x60>
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8007a0c:	b9c6      	cbnz	r6, 8007a40 <accept_function+0x50>
  newconn = netconn_alloc(conn->type, conn->callback);
 8007a0e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007a10:	7820      	ldrb	r0, [r4, #0]
 8007a12:	f7ff feef 	bl	80077f4 <netconn_alloc>
  if (newconn == NULL) {
 8007a16:	4606      	mov	r6, r0
 8007a18:	2800      	cmp	r0, #0
 8007a1a:	d04d      	beq.n	8007ab8 <accept_function+0xc8>
  newconn->pcb.tcp = newpcb;
 8007a1c:	6045      	str	r5, [r0, #4]
  setup_tcp(newconn);
 8007a1e:	f7ff f9e7 	bl	8006df0 <setup_tcp>
  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8007a22:	4631      	mov	r1, r6
 8007a24:	4638      	mov	r0, r7
 8007a26:	f008 ffdb 	bl	80109e0 <sys_mbox_trypost>
 8007a2a:	4605      	mov	r5, r0
 8007a2c:	b9f0      	cbnz	r0, 8007a6c <accept_function+0x7c>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8007a2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a30:	b11b      	cbz	r3, 8007a3a <accept_function+0x4a>
 8007a32:	4602      	mov	r2, r0
 8007a34:	4601      	mov	r1, r0
 8007a36:	4620      	mov	r0, r4
 8007a38:	4798      	blx	r3
}
 8007a3a:	4628      	mov	r0, r5
 8007a3c:	b003      	add	sp, #12
 8007a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8007a40:	4b26      	ldr	r3, [pc, #152]	; (8007adc <accept_function+0xec>)
 8007a42:	f240 222a 	movw	r2, #554	; 0x22a
 8007a46:	4926      	ldr	r1, [pc, #152]	; (8007ae0 <accept_function+0xf0>)
 8007a48:	4826      	ldr	r0, [pc, #152]	; (8007ae4 <accept_function+0xf4>)
 8007a4a:	f009 fdd9 	bl	8011600 <iprintf>
 8007a4e:	e7de      	b.n	8007a0e <accept_function+0x1e>
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8007a50:	4925      	ldr	r1, [pc, #148]	; (8007ae8 <accept_function+0xf8>)
 8007a52:	4638      	mov	r0, r7
 8007a54:	f008 ffc4 	bl	80109e0 <sys_mbox_trypost>
 8007a58:	b928      	cbnz	r0, 8007a66 <accept_function+0x76>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8007a5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a5c:	b11b      	cbz	r3, 8007a66 <accept_function+0x76>
 8007a5e:	4602      	mov	r2, r0
 8007a60:	4601      	mov	r1, r0
 8007a62:	4620      	mov	r0, r4
 8007a64:	4798      	blx	r3
    return ERR_VAL;
 8007a66:	f06f 0505 	mvn.w	r5, #5
 8007a6a:	e7e6      	b.n	8007a3a <accept_function+0x4a>
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8007a6c:	6870      	ldr	r0, [r6, #4]
    tcp_arg(pcb, NULL);
 8007a6e:	2100      	movs	r1, #0
    sys_mbox_free(&newconn->recvmbox);
 8007a70:	f106 0410 	add.w	r4, r6, #16
    return ERR_MEM;
 8007a74:	f04f 35ff 	mov.w	r5, #4294967295
    tcp_arg(pcb, NULL);
 8007a78:	9001      	str	r0, [sp, #4]
 8007a7a:	f003 f8df 	bl	800ac3c <tcp_arg>
    tcp_recv(pcb, NULL);
 8007a7e:	9801      	ldr	r0, [sp, #4]
 8007a80:	2100      	movs	r1, #0
 8007a82:	f003 f8df 	bl	800ac44 <tcp_recv>
    tcp_sent(pcb, NULL);
 8007a86:	9801      	ldr	r0, [sp, #4]
 8007a88:	2100      	movs	r1, #0
 8007a8a:	f003 f8f7 	bl	800ac7c <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8007a8e:	2200      	movs	r2, #0
 8007a90:	9801      	ldr	r0, [sp, #4]
 8007a92:	4611      	mov	r1, r2
 8007a94:	f003 f930 	bl	800acf8 <tcp_poll>
    tcp_err(pcb, NULL);
 8007a98:	2100      	movs	r1, #0
 8007a9a:	9801      	ldr	r0, [sp, #4]
 8007a9c:	f003 f90a 	bl	800acb4 <tcp_err>
    newconn->pcb.tcp = NULL;
 8007aa0:	2300      	movs	r3, #0
    sys_mbox_free(&newconn->recvmbox);
 8007aa2:	4620      	mov	r0, r4
    newconn->pcb.tcp = NULL;
 8007aa4:	6073      	str	r3, [r6, #4]
    sys_mbox_free(&newconn->recvmbox);
 8007aa6:	f008 ff91 	bl	80109cc <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8007aaa:	4620      	mov	r0, r4
 8007aac:	f008 ffe0 	bl	8010a70 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8007ab0:	4630      	mov	r0, r6
 8007ab2:	f7ff fee5 	bl	8007880 <netconn_free>
    return ERR_MEM;
 8007ab6:	e7c0      	b.n	8007a3a <accept_function+0x4a>
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8007ab8:	490b      	ldr	r1, [pc, #44]	; (8007ae8 <accept_function+0xf8>)
 8007aba:	4638      	mov	r0, r7
 8007abc:	f008 ff90 	bl	80109e0 <sys_mbox_trypost>
 8007ac0:	b940      	cbnz	r0, 8007ad4 <accept_function+0xe4>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8007ac2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ac4:	b133      	cbz	r3, 8007ad4 <accept_function+0xe4>
 8007ac6:	4602      	mov	r2, r0
 8007ac8:	4601      	mov	r1, r0
 8007aca:	4620      	mov	r0, r4
    return ERR_MEM;
 8007acc:	f04f 35ff 	mov.w	r5, #4294967295
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8007ad0:	4798      	blx	r3
 8007ad2:	e7b2      	b.n	8007a3a <accept_function+0x4a>
    return ERR_MEM;
 8007ad4:	f04f 35ff 	mov.w	r5, #4294967295
 8007ad8:	e7af      	b.n	8007a3a <accept_function+0x4a>
 8007ada:	bf00      	nop
 8007adc:	080127f0 	.word	0x080127f0
 8007ae0:	08012b9c 	.word	0x08012b9c
 8007ae4:	080124d0 	.word	0x080124d0
 8007ae8:	08012c34 	.word	0x08012c34

08007aec <lwip_netconn_do_delconn>:
{
 8007aec:	b570      	push	{r4, r5, r6, lr}
 8007aee:	4604      	mov	r4, r0
  enum netconn_state state = msg->conn->state;
 8007af0:	6800      	ldr	r0, [r0, #0]
 8007af2:	7845      	ldrb	r5, [r0, #1]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8007af4:	b19d      	cbz	r5, 8007b1e <lwip_netconn_do_delconn+0x32>
 8007af6:	7803      	ldrb	r3, [r0, #0]
 8007af8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007afc:	2b10      	cmp	r3, #16
 8007afe:	d131      	bne.n	8007b64 <lwip_netconn_do_delconn+0x78>
       (state != NETCONN_LISTEN) &&
 8007b00:	1eab      	subs	r3, r5, #2
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d906      	bls.n	8007b14 <lwip_netconn_do_delconn+0x28>
    msg->err = ERR_INPROGRESS;
 8007b06:	23fb      	movs	r3, #251	; 0xfb
 8007b08:	7123      	strb	r3, [r4, #4]
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8007b0a:	300c      	adds	r0, #12
}
 8007b0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8007b10:	f008 bff0 	b.w	8010af4 <sys_sem_valid>
       (state != NETCONN_CONNECT)) ||
 8007b14:	2d03      	cmp	r5, #3
 8007b16:	d102      	bne.n	8007b1e <lwip_netconn_do_delconn+0x32>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8007b18:	7f03      	ldrb	r3, [r0, #28]
 8007b1a:	075b      	lsls	r3, r3, #29
 8007b1c:	d5f3      	bpl.n	8007b06 <lwip_netconn_do_delconn+0x1a>
    msg->err = ERR_OK;
 8007b1e:	2500      	movs	r5, #0
 8007b20:	7125      	strb	r5, [r4, #4]
    netconn_drain(msg->conn);
 8007b22:	f7ff fef1 	bl	8007908 <netconn_drain>
    if (msg->conn->pcb.tcp != NULL) {
 8007b26:	6820      	ldr	r0, [r4, #0]
 8007b28:	6842      	ldr	r2, [r0, #4]
 8007b2a:	b142      	cbz	r2, 8007b3e <lwip_netconn_do_delconn+0x52>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8007b2c:	7803      	ldrb	r3, [r0, #0]
 8007b2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b32:	2b10      	cmp	r3, #16
 8007b34:	d025      	beq.n	8007b82 <lwip_netconn_do_delconn+0x96>
 8007b36:	2b20      	cmp	r3, #32
 8007b38:	d01d      	beq.n	8007b76 <lwip_netconn_do_delconn+0x8a>
      msg->conn->pcb.tcp = NULL;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	6043      	str	r3, [r0, #4]
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8007b3e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d0e2      	beq.n	8007b0a <lwip_netconn_do_delconn+0x1e>
 8007b44:	2200      	movs	r2, #0
 8007b46:	4611      	mov	r1, r2
 8007b48:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8007b4a:	6820      	ldr	r0, [r4, #0]
 8007b4c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d0db      	beq.n	8007b0a <lwip_netconn_do_delconn+0x1e>
 8007b52:	2200      	movs	r2, #0
 8007b54:	2102      	movs	r1, #2
 8007b56:	4798      	blx	r3
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8007b58:	6820      	ldr	r0, [r4, #0]
}
 8007b5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8007b5e:	300c      	adds	r0, #12
 8007b60:	f008 bfc8 	b.w	8010af4 <sys_sem_valid>
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8007b64:	4b22      	ldr	r3, [pc, #136]	; (8007bf0 <lwip_netconn_do_delconn+0x104>)
 8007b66:	f240 425e 	movw	r2, #1118	; 0x45e
 8007b6a:	4922      	ldr	r1, [pc, #136]	; (8007bf4 <lwip_netconn_do_delconn+0x108>)
 8007b6c:	4822      	ldr	r0, [pc, #136]	; (8007bf8 <lwip_netconn_do_delconn+0x10c>)
 8007b6e:	f009 fd47 	bl	8011600 <iprintf>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8007b72:	6820      	ldr	r0, [r4, #0]
 8007b74:	e7c4      	b.n	8007b00 <lwip_netconn_do_delconn+0x14>
          udp_remove(msg->conn->pcb.udp);
 8007b76:	4610      	mov	r0, r2
          msg->conn->pcb.udp->recv_arg = NULL;
 8007b78:	61d5      	str	r5, [r2, #28]
          udp_remove(msg->conn->pcb.udp);
 8007b7a:	f007 fad5 	bl	800f128 <udp_remove>
      msg->conn->pcb.tcp = NULL;
 8007b7e:	6820      	ldr	r0, [r4, #0]
          break;
 8007b80:	e7db      	b.n	8007b3a <lwip_netconn_do_delconn+0x4e>
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8007b82:	6a03      	ldr	r3, [r0, #32]
 8007b84:	b13b      	cbz	r3, 8007b96 <lwip_netconn_do_delconn+0xaa>
 8007b86:	4b1a      	ldr	r3, [pc, #104]	; (8007bf0 <lwip_netconn_do_delconn+0x104>)
 8007b88:	f240 4294 	movw	r2, #1172	; 0x494
 8007b8c:	491b      	ldr	r1, [pc, #108]	; (8007bfc <lwip_netconn_do_delconn+0x110>)
 8007b8e:	481a      	ldr	r0, [pc, #104]	; (8007bf8 <lwip_netconn_do_delconn+0x10c>)
 8007b90:	f009 fd36 	bl	8011600 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8007b94:	6820      	ldr	r0, [r4, #0]
 8007b96:	2204      	movs	r2, #4
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8007b98:	2303      	movs	r3, #3
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8007b9a:	2100      	movs	r1, #0
          msg->conn->state = NETCONN_CLOSE;
 8007b9c:	7042      	strb	r2, [r0, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8007b9e:	7223      	strb	r3, [r4, #8]
          msg->conn->current_msg = msg;
 8007ba0:	6204      	str	r4, [r0, #32]
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8007ba2:	f7ff fab1 	bl	8007108 <lwip_netconn_do_close_internal>
 8007ba6:	b188      	cbz	r0, 8007bcc <lwip_netconn_do_delconn+0xe0>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8007ba8:	6823      	ldr	r3, [r4, #0]
 8007baa:	785b      	ldrb	r3, [r3, #1]
 8007bac:	2b04      	cmp	r3, #4
 8007bae:	d10e      	bne.n	8007bce <lwip_netconn_do_delconn+0xe2>
            UNLOCK_TCPIP_CORE();
 8007bb0:	4813      	ldr	r0, [pc, #76]	; (8007c00 <lwip_netconn_do_delconn+0x114>)
 8007bb2:	f008 ffcb 	bl	8010b4c <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8007bb6:	6820      	ldr	r0, [r4, #0]
 8007bb8:	2100      	movs	r1, #0
 8007bba:	300c      	adds	r0, #12
 8007bbc:	f008 ff76 	bl	8010aac <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8007bc0:	480f      	ldr	r0, [pc, #60]	; (8007c00 <lwip_netconn_do_delconn+0x114>)
 8007bc2:	f008 ffbd 	bl	8010b40 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8007bc6:	6823      	ldr	r3, [r4, #0]
 8007bc8:	785b      	ldrb	r3, [r3, #1]
 8007bca:	b943      	cbnz	r3, 8007bde <lwip_netconn_do_delconn+0xf2>
}
 8007bcc:	bd70      	pop	{r4, r5, r6, pc}
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8007bce:	4b08      	ldr	r3, [pc, #32]	; (8007bf0 <lwip_netconn_do_delconn+0x104>)
 8007bd0:	f240 429a 	movw	r2, #1178	; 0x49a
 8007bd4:	490b      	ldr	r1, [pc, #44]	; (8007c04 <lwip_netconn_do_delconn+0x118>)
 8007bd6:	4808      	ldr	r0, [pc, #32]	; (8007bf8 <lwip_netconn_do_delconn+0x10c>)
 8007bd8:	f009 fd12 	bl	8011600 <iprintf>
 8007bdc:	e7e8      	b.n	8007bb0 <lwip_netconn_do_delconn+0xc4>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8007bde:	4b04      	ldr	r3, [pc, #16]	; (8007bf0 <lwip_netconn_do_delconn+0x104>)
 8007be0:	f240 429e 	movw	r2, #1182	; 0x49e
 8007be4:	4907      	ldr	r1, [pc, #28]	; (8007c04 <lwip_netconn_do_delconn+0x118>)
 8007be6:	4804      	ldr	r0, [pc, #16]	; (8007bf8 <lwip_netconn_do_delconn+0x10c>)
}
 8007be8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8007bec:	f009 bd08 	b.w	8011600 <iprintf>
 8007bf0:	080127f0 	.word	0x080127f0
 8007bf4:	08012bc4 	.word	0x08012bc4
 8007bf8:	080124d0 	.word	0x080124d0
 8007bfc:	08012bd8 	.word	0x08012bd8
 8007c00:	2400b53c 	.word	0x2400b53c
 8007c04:	08012bf4 	.word	0x08012bf4

08007c08 <lwip_netconn_do_bind>:
  if (msg->conn->pcb.tcp != NULL) {
 8007c08:	6803      	ldr	r3, [r0, #0]
{
 8007c0a:	b510      	push	{r4, lr}
 8007c0c:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
 8007c0e:	6858      	ldr	r0, [r3, #4]
 8007c10:	b130      	cbz	r0, 8007c20 <lwip_netconn_do_bind+0x18>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c18:	2b10      	cmp	r3, #16
 8007c1a:	d00b      	beq.n	8007c34 <lwip_netconn_do_bind+0x2c>
 8007c1c:	2b20      	cmp	r3, #32
 8007c1e:	d003      	beq.n	8007c28 <lwip_netconn_do_bind+0x20>
 8007c20:	f06f 0005 	mvn.w	r0, #5
  msg->err = err;
 8007c24:	7120      	strb	r0, [r4, #4]
}
 8007c26:	bd10      	pop	{r4, pc}
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8007c28:	89a2      	ldrh	r2, [r4, #12]
 8007c2a:	68a1      	ldr	r1, [r4, #8]
 8007c2c:	f007 f878 	bl	800ed20 <udp_bind>
  msg->err = err;
 8007c30:	7120      	strb	r0, [r4, #4]
}
 8007c32:	bd10      	pop	{r4, pc}
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8007c34:	89a2      	ldrh	r2, [r4, #12]
 8007c36:	68a1      	ldr	r1, [r4, #8]
 8007c38:	f002 fe68 	bl	800a90c <tcp_bind>
  msg->err = err;
 8007c3c:	7120      	strb	r0, [r4, #4]
}
 8007c3e:	bd10      	pop	{r4, pc}

08007c40 <lwip_netconn_do_listen>:
  if (msg->conn->pcb.tcp != NULL) {
 8007c40:	6803      	ldr	r3, [r0, #0]
{
 8007c42:	b530      	push	{r4, r5, lr}
 8007c44:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
 8007c46:	6858      	ldr	r0, [r3, #4]
{
 8007c48:	b083      	sub	sp, #12
  if (msg->conn->pcb.tcp != NULL) {
 8007c4a:	b180      	cbz	r0, 8007c6e <lwip_netconn_do_listen+0x2e>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8007c4c:	781a      	ldrb	r2, [r3, #0]
 8007c4e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8007c52:	2a10      	cmp	r2, #16
 8007c54:	d004      	beq.n	8007c60 <lwip_netconn_do_listen+0x20>
 8007c56:	f06f 030f 	mvn.w	r3, #15
  msg->err = err;
 8007c5a:	7123      	strb	r3, [r4, #4]
}
 8007c5c:	b003      	add	sp, #12
 8007c5e:	bd30      	pop	{r4, r5, pc}
      if (msg->conn->state == NETCONN_NONE) {
 8007c60:	785b      	ldrb	r3, [r3, #1]
 8007c62:	b94b      	cbnz	r3, 8007c78 <lwip_netconn_do_listen+0x38>
        if (msg->conn->pcb.tcp->state != CLOSED) {
 8007c64:	7d03      	ldrb	r3, [r0, #20]
 8007c66:	b17b      	cbz	r3, 8007c88 <lwip_netconn_do_listen+0x48>
 8007c68:	f06f 0305 	mvn.w	r3, #5
 8007c6c:	e7f5      	b.n	8007c5a <lwip_netconn_do_listen+0x1a>
 8007c6e:	f06f 030a 	mvn.w	r3, #10
  msg->err = err;
 8007c72:	7123      	strb	r3, [r4, #4]
}
 8007c74:	b003      	add	sp, #12
 8007c76:	bd30      	pop	{r4, r5, pc}
      } else if (msg->conn->state == NETCONN_LISTEN) {
 8007c78:	2b02      	cmp	r3, #2
 8007c7a:	bf14      	ite	ne
 8007c7c:	f06f 030a 	mvnne.w	r3, #10
 8007c80:	2300      	moveq	r3, #0
  msg->err = err;
 8007c82:	7123      	strb	r3, [r4, #4]
}
 8007c84:	b003      	add	sp, #12
 8007c86:	bd30      	pop	{r4, r5, pc}
          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8007c88:	f10d 0207 	add.w	r2, sp, #7
 8007c8c:	21ff      	movs	r1, #255	; 0xff
 8007c8e:	f002 fe9d 	bl	800a9cc <tcp_listen_with_backlog_and_err>
          if (lpcb == NULL) {
 8007c92:	4605      	mov	r5, r0
 8007c94:	b1d8      	cbz	r0, 8007cce <lwip_netconn_do_listen+0x8e>
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8007c96:	6820      	ldr	r0, [r4, #0]
 8007c98:	3010      	adds	r0, #16
 8007c9a:	f008 fee3 	bl	8010a64 <sys_mbox_valid>
 8007c9e:	bb50      	cbnz	r0, 8007cf6 <lwip_netconn_do_listen+0xb6>
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8007ca0:	6820      	ldr	r0, [r4, #0]
            err = ERR_OK;
 8007ca2:	2300      	movs	r3, #0
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8007ca4:	3014      	adds	r0, #20
            err = ERR_OK;
 8007ca6:	f88d 3007 	strb.w	r3, [sp, #7]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8007caa:	f008 fedb 	bl	8010a64 <sys_mbox_valid>
 8007cae:	b1d0      	cbz	r0, 8007ce6 <lwip_netconn_do_listen+0xa6>
            if (err == ERR_OK) {
 8007cb0:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 8007cb4:	b970      	cbnz	r0, 8007cd4 <lwip_netconn_do_listen+0x94>
              msg->conn->state = NETCONN_LISTEN;
 8007cb6:	6821      	ldr	r1, [r4, #0]
 8007cb8:	2302      	movs	r3, #2
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8007cba:	4628      	mov	r0, r5
              msg->conn->state = NETCONN_LISTEN;
 8007cbc:	704b      	strb	r3, [r1, #1]
              msg->conn->pcb.tcp = lpcb;
 8007cbe:	604d      	str	r5, [r1, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8007cc0:	f002 ffbc 	bl	800ac3c <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 8007cc4:	6823      	ldr	r3, [r4, #0]
 8007cc6:	4910      	ldr	r1, [pc, #64]	; (8007d08 <lwip_netconn_do_listen+0xc8>)
 8007cc8:	6858      	ldr	r0, [r3, #4]
 8007cca:	f003 f80f 	bl	800acec <tcp_accept>
  msg->err = err;
 8007cce:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8007cd2:	e7c2      	b.n	8007c5a <lwip_netconn_do_listen+0x1a>
              tcp_close(lpcb);
 8007cd4:	4628      	mov	r0, r5
 8007cd6:	f003 fe55 	bl	800b984 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8007cda:	6822      	ldr	r2, [r4, #0]
 8007cdc:	2100      	movs	r1, #0
  msg->err = err;
 8007cde:	f99d 3007 	ldrsb.w	r3, [sp, #7]
              msg->conn->pcb.tcp = NULL;
 8007ce2:	6051      	str	r1, [r2, #4]
 8007ce4:	e7b9      	b.n	8007c5a <lwip_netconn_do_listen+0x1a>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8007ce6:	6820      	ldr	r0, [r4, #0]
 8007ce8:	2106      	movs	r1, #6
 8007cea:	3014      	adds	r0, #20
 8007cec:	f008 fe58 	bl	80109a0 <sys_mbox_new>
 8007cf0:	f88d 0007 	strb.w	r0, [sp, #7]
 8007cf4:	e7de      	b.n	8007cb4 <lwip_netconn_do_listen+0x74>
              sys_mbox_free(&msg->conn->recvmbox);
 8007cf6:	6820      	ldr	r0, [r4, #0]
 8007cf8:	3010      	adds	r0, #16
 8007cfa:	f008 fe67 	bl	80109cc <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 8007cfe:	6820      	ldr	r0, [r4, #0]
 8007d00:	3010      	adds	r0, #16
 8007d02:	f008 feb5 	bl	8010a70 <sys_mbox_set_invalid>
 8007d06:	e7cb      	b.n	8007ca0 <lwip_netconn_do_listen+0x60>
 8007d08:	080079f1 	.word	0x080079f1

08007d0c <lwip_netconn_do_send>:
{
 8007d0c:	b510      	push	{r4, lr}
 8007d0e:	4604      	mov	r4, r0
  err_t err = netconn_err(msg->conn);
 8007d10:	6800      	ldr	r0, [r0, #0]
 8007d12:	f7fe ffff 	bl	8006d14 <netconn_err>
  if (err == ERR_OK) {
 8007d16:	b948      	cbnz	r0, 8007d2c <lwip_netconn_do_send+0x20>
    if (msg->conn->pcb.tcp != NULL) {
 8007d18:	6823      	ldr	r3, [r4, #0]
 8007d1a:	6858      	ldr	r0, [r3, #4]
 8007d1c:	b120      	cbz	r0, 8007d28 <lwip_netconn_do_send+0x1c>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d24:	2b20      	cmp	r3, #32
 8007d26:	d003      	beq.n	8007d30 <lwip_netconn_do_send+0x24>
      err = ERR_CONN;
 8007d28:	f06f 000a 	mvn.w	r0, #10
  msg->err = err;
 8007d2c:	7120      	strb	r0, [r4, #4]
}
 8007d2e:	bd10      	pop	{r4, pc}
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 8007d30:	68a2      	ldr	r2, [r4, #8]
 8007d32:	6893      	ldr	r3, [r2, #8]
 8007d34:	b91b      	cbnz	r3, 8007d3e <lwip_netconn_do_send+0x32>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 8007d36:	6811      	ldr	r1, [r2, #0]
 8007d38:	f007 f9c0 	bl	800f0bc <udp_send>
 8007d3c:	e7f6      	b.n	8007d2c <lwip_netconn_do_send+0x20>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 8007d3e:	8993      	ldrh	r3, [r2, #12]
 8007d40:	f852 1b08 	ldr.w	r1, [r2], #8
 8007d44:	f007 f970 	bl	800f028 <udp_sendto>
 8007d48:	e7f0      	b.n	8007d2c <lwip_netconn_do_send+0x20>
 8007d4a:	bf00      	nop

08007d4c <lwip_netconn_do_recv>:
{
 8007d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  msg->err = ERR_OK;
 8007d4e:	2200      	movs	r2, #0
  if (msg->conn->pcb.tcp != NULL) {
 8007d50:	6803      	ldr	r3, [r0, #0]
{
 8007d52:	4606      	mov	r6, r0
  msg->err = ERR_OK;
 8007d54:	7102      	strb	r2, [r0, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8007d56:	6858      	ldr	r0, [r3, #4]
 8007d58:	b120      	cbz	r0, 8007d64 <lwip_netconn_do_recv+0x18>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d60:	2b10      	cmp	r3, #16
 8007d62:	d000      	beq.n	8007d66 <lwip_netconn_do_recv+0x1a>
}
 8007d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      size_t remaining = msg->msg.r.len;
 8007d66:	68b4      	ldr	r4, [r6, #8]
 8007d68:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8007d6c:	e001      	b.n	8007d72 <lwip_netconn_do_recv+0x26>
        tcp_recved(msg->conn->pcb.tcp, recved);
 8007d6e:	6833      	ldr	r3, [r6, #0]
 8007d70:	6858      	ldr	r0, [r3, #4]
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8007d72:	42bc      	cmp	r4, r7
 8007d74:	4625      	mov	r5, r4
 8007d76:	bf28      	it	cs
 8007d78:	463d      	movcs	r5, r7
        tcp_recved(msg->conn->pcb.tcp, recved);
 8007d7a:	b2a9      	uxth	r1, r5
 8007d7c:	f002 fee0 	bl	800ab40 <tcp_recved>
      } while (remaining != 0);
 8007d80:	1b64      	subs	r4, r4, r5
 8007d82:	d1f4      	bne.n	8007d6e <lwip_netconn_do_recv+0x22>
}
 8007d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d86:	bf00      	nop

08007d88 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8007d88:	b510      	push	{r4, lr}
 8007d8a:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg *)m;

  err_t err = netconn_err(msg->conn);
 8007d8c:	6800      	ldr	r0, [r0, #0]
 8007d8e:	f7fe ffc1 	bl	8006d14 <netconn_err>
  if (err == ERR_OK) {
 8007d92:	b938      	cbnz	r0, 8007da4 <lwip_netconn_do_write+0x1c>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8007d94:	6822      	ldr	r2, [r4, #0]
 8007d96:	7813      	ldrb	r3, [r2, #0]
 8007d98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d9c:	2b10      	cmp	r3, #16
 8007d9e:	d003      	beq.n	8007da8 <lwip_netconn_do_write+0x20>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8007da0:	f06f 0005 	mvn.w	r0, #5
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8007da4:	7120      	strb	r0, [r4, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8007da6:	bd10      	pop	{r4, pc}
      if (msg->conn->state != NETCONN_NONE) {
 8007da8:	7853      	ldrb	r3, [r2, #1]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d13a      	bne.n	8007e24 <lwip_netconn_do_write+0x9c>
      } else if (msg->conn->pcb.tcp != NULL) {
 8007dae:	6853      	ldr	r3, [r2, #4]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d03b      	beq.n	8007e2c <lwip_netconn_do_write+0xa4>
        msg->conn->state = NETCONN_WRITE;
 8007db4:	2101      	movs	r1, #1
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8007db6:	6a13      	ldr	r3, [r2, #32]
        msg->conn->state = NETCONN_WRITE;
 8007db8:	7051      	strb	r1, [r2, #1]
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8007dba:	b133      	cbz	r3, 8007dca <lwip_netconn_do_write+0x42>
 8007dbc:	4b21      	ldr	r3, [pc, #132]	; (8007e44 <lwip_netconn_do_write+0xbc>)
 8007dbe:	f240 7223 	movw	r2, #1827	; 0x723
 8007dc2:	4921      	ldr	r1, [pc, #132]	; (8007e48 <lwip_netconn_do_write+0xc0>)
 8007dc4:	4821      	ldr	r0, [pc, #132]	; (8007e4c <lwip_netconn_do_write+0xc4>)
 8007dc6:	f009 fc1b 	bl	8011600 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8007dca:	6963      	ldr	r3, [r4, #20]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d031      	beq.n	8007e34 <lwip_netconn_do_write+0xac>
        msg->conn->current_msg = msg;
 8007dd0:	6820      	ldr	r0, [r4, #0]
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8007dd2:	2100      	movs	r1, #0
        msg->conn->current_msg = msg;
 8007dd4:	6204      	str	r4, [r0, #32]
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8007dd6:	f7ff f82f 	bl	8006e38 <lwip_netconn_do_writemore>
 8007dda:	2800      	cmp	r0, #0
 8007ddc:	d0e3      	beq.n	8007da6 <lwip_netconn_do_write+0x1e>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8007dde:	6823      	ldr	r3, [r4, #0]
 8007de0:	785b      	ldrb	r3, [r3, #1]
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	d006      	beq.n	8007df4 <lwip_netconn_do_write+0x6c>
 8007de6:	4b17      	ldr	r3, [pc, #92]	; (8007e44 <lwip_netconn_do_write+0xbc>)
 8007de8:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8007dec:	4918      	ldr	r1, [pc, #96]	; (8007e50 <lwip_netconn_do_write+0xc8>)
 8007dee:	4817      	ldr	r0, [pc, #92]	; (8007e4c <lwip_netconn_do_write+0xc4>)
 8007df0:	f009 fc06 	bl	8011600 <iprintf>
          UNLOCK_TCPIP_CORE();
 8007df4:	4817      	ldr	r0, [pc, #92]	; (8007e54 <lwip_netconn_do_write+0xcc>)
 8007df6:	f008 fea9 	bl	8010b4c <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8007dfa:	6820      	ldr	r0, [r4, #0]
 8007dfc:	2100      	movs	r1, #0
 8007dfe:	300c      	adds	r0, #12
 8007e00:	f008 fe54 	bl	8010aac <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8007e04:	4813      	ldr	r0, [pc, #76]	; (8007e54 <lwip_netconn_do_write+0xcc>)
 8007e06:	f008 fe9b 	bl	8010b40 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8007e0a:	6823      	ldr	r3, [r4, #0]
 8007e0c:	785b      	ldrb	r3, [r3, #1]
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	d1c9      	bne.n	8007da6 <lwip_netconn_do_write+0x1e>
 8007e12:	4b0c      	ldr	r3, [pc, #48]	; (8007e44 <lwip_netconn_do_write+0xbc>)
 8007e14:	f240 722c 	movw	r2, #1836	; 0x72c
 8007e18:	490d      	ldr	r1, [pc, #52]	; (8007e50 <lwip_netconn_do_write+0xc8>)
 8007e1a:	480c      	ldr	r0, [pc, #48]	; (8007e4c <lwip_netconn_do_write+0xc4>)
}
 8007e1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8007e20:	f009 bbee 	b.w	8011600 <iprintf>
        err = ERR_INPROGRESS;
 8007e24:	f06f 0004 	mvn.w	r0, #4
  msg->err = err;
 8007e28:	7120      	strb	r0, [r4, #4]
  TCPIP_APIMSG_ACK(msg);
 8007e2a:	e7bc      	b.n	8007da6 <lwip_netconn_do_write+0x1e>
        err = ERR_CONN;
 8007e2c:	f06f 000a 	mvn.w	r0, #10
  msg->err = err;
 8007e30:	7120      	strb	r0, [r4, #4]
  TCPIP_APIMSG_ACK(msg);
 8007e32:	e7b8      	b.n	8007da6 <lwip_netconn_do_write+0x1e>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8007e34:	4b03      	ldr	r3, [pc, #12]	; (8007e44 <lwip_netconn_do_write+0xbc>)
 8007e36:	f240 7224 	movw	r2, #1828	; 0x724
 8007e3a:	4907      	ldr	r1, [pc, #28]	; (8007e58 <lwip_netconn_do_write+0xd0>)
 8007e3c:	4803      	ldr	r0, [pc, #12]	; (8007e4c <lwip_netconn_do_write+0xc4>)
 8007e3e:	f009 fbdf 	bl	8011600 <iprintf>
 8007e42:	e7c5      	b.n	8007dd0 <lwip_netconn_do_write+0x48>
 8007e44:	080127f0 	.word	0x080127f0
 8007e48:	08012bd8 	.word	0x08012bd8
 8007e4c:	080124d0 	.word	0x080124d0
 8007e50:	08012bf4 	.word	0x08012bf4
 8007e54:	2400b53c 	.word	0x2400b53c
 8007e58:	08012bfc 	.word	0x08012bfc

08007e5c <lwip_netconn_do_getaddr>:
void
lwip_netconn_do_getaddr(void *m)
{
  struct api_msg *msg = (struct api_msg *)m;

  if (msg->conn->pcb.ip != NULL) {
 8007e5c:	6802      	ldr	r2, [r0, #0]
 8007e5e:	6853      	ldr	r3, [r2, #4]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d031      	beq.n	8007ec8 <lwip_netconn_do_getaddr+0x6c>
    if (msg->msg.ad.local) {
 8007e64:	7c01      	ldrb	r1, [r0, #16]
{
 8007e66:	b430      	push	{r4, r5}
    if (msg->msg.ad.local) {
 8007e68:	b181      	cbz	r1, 8007e8c <lwip_netconn_do_getaddr+0x30>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 8007e6a:	6881      	ldr	r1, [r0, #8]
 8007e6c:	681c      	ldr	r4, [r3, #0]
 8007e6e:	600c      	str	r4, [r1, #0]
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 8007e70:	2100      	movs	r1, #0
 8007e72:	7101      	strb	r1, [r0, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8007e74:	7812      	ldrb	r2, [r2, #0]
 8007e76:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8007e7a:	2a10      	cmp	r2, #16
 8007e7c:	d02f      	beq.n	8007ede <lwip_netconn_do_getaddr+0x82>
 8007e7e:	2a20      	cmp	r2, #32
 8007e80:	d116      	bne.n	8007eb0 <lwip_netconn_do_getaddr+0x54>
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.ad.local) {
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 8007e82:	68c2      	ldr	r2, [r0, #12]
 8007e84:	8a5b      	ldrh	r3, [r3, #18]
 8007e86:	8013      	strh	r3, [r2, #0]
    }
  } else {
    msg->err = ERR_CONN;
  }
  TCPIP_APIMSG_ACK(msg);
}
 8007e88:	bc30      	pop	{r4, r5}
 8007e8a:	4770      	bx	lr
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 8007e8c:	685d      	ldr	r5, [r3, #4]
 8007e8e:	6884      	ldr	r4, [r0, #8]
 8007e90:	6025      	str	r5, [r4, #0]
    msg->err = ERR_OK;
 8007e92:	7101      	strb	r1, [r0, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8007e94:	7812      	ldrb	r2, [r2, #0]
 8007e96:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8007e9a:	2a10      	cmp	r2, #16
 8007e9c:	d017      	beq.n	8007ece <lwip_netconn_do_getaddr+0x72>
 8007e9e:	2a20      	cmp	r2, #32
 8007ea0:	d106      	bne.n	8007eb0 <lwip_netconn_do_getaddr+0x54>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 8007ea2:	7c1a      	ldrb	r2, [r3, #16]
 8007ea4:	0752      	lsls	r2, r2, #29
 8007ea6:	d50b      	bpl.n	8007ec0 <lwip_netconn_do_getaddr+0x64>
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 8007ea8:	68c2      	ldr	r2, [r0, #12]
 8007eaa:	8a9b      	ldrh	r3, [r3, #20]
 8007eac:	8013      	strh	r3, [r2, #0]
 8007eae:	e7eb      	b.n	8007e88 <lwip_netconn_do_getaddr+0x2c>
        LWIP_ASSERT("invalid netconn_type", 0);
 8007eb0:	4b0c      	ldr	r3, [pc, #48]	; (8007ee4 <lwip_netconn_do_getaddr+0x88>)
 8007eb2:	f240 727d 	movw	r2, #1917	; 0x77d
 8007eb6:	490c      	ldr	r1, [pc, #48]	; (8007ee8 <lwip_netconn_do_getaddr+0x8c>)
 8007eb8:	480c      	ldr	r0, [pc, #48]	; (8007eec <lwip_netconn_do_getaddr+0x90>)
}
 8007eba:	bc30      	pop	{r4, r5}
        LWIP_ASSERT("invalid netconn_type", 0);
 8007ebc:	f009 bba0 	b.w	8011600 <iprintf>
            msg->err = ERR_CONN;
 8007ec0:	23f5      	movs	r3, #245	; 0xf5
 8007ec2:	7103      	strb	r3, [r0, #4]
}
 8007ec4:	bc30      	pop	{r4, r5}
 8007ec6:	4770      	bx	lr
            msg->err = ERR_CONN;
 8007ec8:	23f5      	movs	r3, #245	; 0xf5
 8007eca:	7103      	strb	r3, [r0, #4]
 8007ecc:	4770      	bx	lr
        if ((msg->msg.ad.local == 0) &&
 8007ece:	7d1a      	ldrb	r2, [r3, #20]
 8007ed0:	2a01      	cmp	r2, #1
 8007ed2:	d9f5      	bls.n	8007ec0 <lwip_netconn_do_getaddr+0x64>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 8007ed4:	8b1a      	ldrh	r2, [r3, #24]
 8007ed6:	68c3      	ldr	r3, [r0, #12]
}
 8007ed8:	bc30      	pop	{r4, r5}
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 8007eda:	801a      	strh	r2, [r3, #0]
}
 8007edc:	4770      	bx	lr
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 8007ede:	8ada      	ldrh	r2, [r3, #22]
 8007ee0:	e7f9      	b.n	8007ed6 <lwip_netconn_do_getaddr+0x7a>
 8007ee2:	bf00      	nop
 8007ee4:	080127f0 	.word	0x080127f0
 8007ee8:	08012c10 	.word	0x08012c10
 8007eec:	080124d0 	.word	0x080124d0

08007ef0 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8007ef0:	b510      	push	{r4, lr}
 8007ef2:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg *)m;

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8007ef4:	6800      	ldr	r0, [r0, #0]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8007ef6:	6843      	ldr	r3, [r0, #4]
  enum netconn_state state = msg->conn->state;
 8007ef8:	7842      	ldrb	r2, [r0, #1]
  if ((msg->conn->pcb.tcp != NULL) &&
 8007efa:	b123      	cbz	r3, 8007f06 <lwip_netconn_do_close+0x16>
 8007efc:	7803      	ldrb	r3, [r0, #0]
 8007efe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f02:	2b10      	cmp	r3, #16
 8007f04:	d002      	beq.n	8007f0c <lwip_netconn_do_close+0x1c>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8007f06:	23f5      	movs	r3, #245	; 0xf5
 8007f08:	7123      	strb	r3, [r4, #4]
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
  }
  TCPIP_APIMSG_ACK(msg);
}
 8007f0a:	bd10      	pop	{r4, pc}
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8007f0c:	2a02      	cmp	r2, #2
 8007f0e:	7a23      	ldrb	r3, [r4, #8]
 8007f10:	d101      	bne.n	8007f16 <lwip_netconn_do_close+0x26>
 8007f12:	2b03      	cmp	r3, #3
 8007f14:	d1f7      	bne.n	8007f06 <lwip_netconn_do_close+0x16>
    if (state == NETCONN_CONNECT) {
 8007f16:	2a03      	cmp	r2, #3
 8007f18:	d0f5      	beq.n	8007f06 <lwip_netconn_do_close+0x16>
    } else if (state == NETCONN_WRITE) {
 8007f1a:	2a01      	cmp	r2, #1
 8007f1c:	d102      	bne.n	8007f24 <lwip_netconn_do_close+0x34>
      msg->err = ERR_INPROGRESS;
 8007f1e:	23fb      	movs	r3, #251	; 0xfb
 8007f20:	7123      	strb	r3, [r4, #4]
}
 8007f22:	bd10      	pop	{r4, pc}
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8007f24:	07db      	lsls	r3, r3, #31
 8007f26:	d434      	bmi.n	8007f92 <lwip_netconn_do_close+0xa2>
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8007f28:	6a03      	ldr	r3, [r0, #32]
 8007f2a:	b13b      	cbz	r3, 8007f3c <lwip_netconn_do_close+0x4c>
 8007f2c:	4b1b      	ldr	r3, [pc, #108]	; (8007f9c <lwip_netconn_do_close+0xac>)
 8007f2e:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8007f32:	491b      	ldr	r1, [pc, #108]	; (8007fa0 <lwip_netconn_do_close+0xb0>)
 8007f34:	481b      	ldr	r0, [pc, #108]	; (8007fa4 <lwip_netconn_do_close+0xb4>)
 8007f36:	f009 fb63 	bl	8011600 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8007f3a:	6820      	ldr	r0, [r4, #0]
 8007f3c:	2304      	movs	r3, #4
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8007f3e:	2100      	movs	r1, #0
      msg->conn->current_msg = msg;
 8007f40:	6204      	str	r4, [r0, #32]
      msg->conn->state = NETCONN_CLOSE;
 8007f42:	7043      	strb	r3, [r0, #1]
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8007f44:	f7ff f8e0 	bl	8007108 <lwip_netconn_do_close_internal>
 8007f48:	2800      	cmp	r0, #0
 8007f4a:	d0de      	beq.n	8007f0a <lwip_netconn_do_close+0x1a>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8007f4c:	6823      	ldr	r3, [r4, #0]
 8007f4e:	785b      	ldrb	r3, [r3, #1]
 8007f50:	2b04      	cmp	r3, #4
 8007f52:	d006      	beq.n	8007f62 <lwip_netconn_do_close+0x72>
 8007f54:	4b11      	ldr	r3, [pc, #68]	; (8007f9c <lwip_netconn_do_close+0xac>)
 8007f56:	f240 72c2 	movw	r2, #1986	; 0x7c2
 8007f5a:	4913      	ldr	r1, [pc, #76]	; (8007fa8 <lwip_netconn_do_close+0xb8>)
 8007f5c:	4811      	ldr	r0, [pc, #68]	; (8007fa4 <lwip_netconn_do_close+0xb4>)
 8007f5e:	f009 fb4f 	bl	8011600 <iprintf>
        UNLOCK_TCPIP_CORE();
 8007f62:	4812      	ldr	r0, [pc, #72]	; (8007fac <lwip_netconn_do_close+0xbc>)
 8007f64:	f008 fdf2 	bl	8010b4c <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8007f68:	6820      	ldr	r0, [r4, #0]
 8007f6a:	2100      	movs	r1, #0
 8007f6c:	300c      	adds	r0, #12
 8007f6e:	f008 fd9d 	bl	8010aac <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8007f72:	480e      	ldr	r0, [pc, #56]	; (8007fac <lwip_netconn_do_close+0xbc>)
 8007f74:	f008 fde4 	bl	8010b40 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8007f78:	6823      	ldr	r3, [r4, #0]
 8007f7a:	785b      	ldrb	r3, [r3, #1]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d0c4      	beq.n	8007f0a <lwip_netconn_do_close+0x1a>
 8007f80:	4b06      	ldr	r3, [pc, #24]	; (8007f9c <lwip_netconn_do_close+0xac>)
 8007f82:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8007f86:	4908      	ldr	r1, [pc, #32]	; (8007fa8 <lwip_netconn_do_close+0xb8>)
 8007f88:	4806      	ldr	r0, [pc, #24]	; (8007fa4 <lwip_netconn_do_close+0xb4>)
}
 8007f8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8007f8e:	f009 bb37 	b.w	8011600 <iprintf>
        netconn_drain(msg->conn);
 8007f92:	f7ff fcb9 	bl	8007908 <netconn_drain>
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8007f96:	6820      	ldr	r0, [r4, #0]
 8007f98:	e7c6      	b.n	8007f28 <lwip_netconn_do_close+0x38>
 8007f9a:	bf00      	nop
 8007f9c:	080127f0 	.word	0x080127f0
 8007fa0:	08012bd8 	.word	0x08012bd8
 8007fa4:	080124d0 	.word	0x080124d0
 8007fa8:	08012bf4 	.word	0x08012bf4
 8007fac:	2400b53c 	.word	0x2400b53c

08007fb0 <err_to_errno>:
};

int
err_to_errno(err_t err)
{
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 8007fb0:	f100 0310 	add.w	r3, r0, #16
 8007fb4:	b2db      	uxtb	r3, r3
 8007fb6:	2b10      	cmp	r3, #16
 8007fb8:	d804      	bhi.n	8007fc4 <err_to_errno+0x14>
    return EIO;
  }
  return err_to_errno_table[-err];
 8007fba:	4b03      	ldr	r3, [pc, #12]	; (8007fc8 <err_to_errno+0x18>)
 8007fbc:	4240      	negs	r0, r0
 8007fbe:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8007fc2:	4770      	bx	lr
    return EIO;
 8007fc4:	2005      	movs	r0, #5
}
 8007fc6:	4770      	bx	lr
 8007fc8:	08012c38 	.word	0x08012c38

08007fcc <netbuf_delete>:
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
  if (buf != NULL) {
 8007fcc:	b170      	cbz	r0, 8007fec <netbuf_delete+0x20>
{
 8007fce:	b510      	push	{r4, lr}
 8007fd0:	4604      	mov	r4, r0
    if (buf->p != NULL) {
 8007fd2:	6800      	ldr	r0, [r0, #0]
 8007fd4:	b120      	cbz	r0, 8007fe0 <netbuf_delete+0x14>
      pbuf_free(buf->p);
 8007fd6:	f002 f961 	bl	800a29c <pbuf_free>
      buf->p = buf->ptr = NULL;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	e9c4 3300 	strd	r3, r3, [r4]
    }
    memp_free(MEMP_NETBUF, buf);
 8007fe0:	4621      	mov	r1, r4
 8007fe2:	2006      	movs	r0, #6
  }
}
 8007fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_NETBUF, buf);
 8007fe8:	f001 bdca 	b.w	8009b80 <memp_free>
 8007fec:	4770      	bx	lr
 8007fee:	bf00      	nop

08007ff0 <netbuf_free>:
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 8007ff0:	b148      	cbz	r0, 8008006 <netbuf_free+0x16>
{
 8007ff2:	b510      	push	{r4, lr}
 8007ff4:	4604      	mov	r4, r0
  if (buf->p != NULL) {
 8007ff6:	6800      	ldr	r0, [r0, #0]
 8007ff8:	b108      	cbz	r0, 8007ffe <netbuf_free+0xe>
    pbuf_free(buf->p);
 8007ffa:	f002 f94f 	bl	800a29c <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 8007ffe:	2300      	movs	r3, #0
 8008000:	e9c4 3300 	strd	r3, r3, [r4]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 8008004:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 8008006:	4b03      	ldr	r3, [pc, #12]	; (8008014 <netbuf_free+0x24>)
 8008008:	2281      	movs	r2, #129	; 0x81
 800800a:	4903      	ldr	r1, [pc, #12]	; (8008018 <netbuf_free+0x28>)
 800800c:	4803      	ldr	r0, [pc, #12]	; (800801c <netbuf_free+0x2c>)
 800800e:	f009 baf7 	b.w	8011600 <iprintf>
 8008012:	bf00      	nop
 8008014:	08012c7c 	.word	0x08012c7c
 8008018:	08012cf0 	.word	0x08012cf0
 800801c:	080124d0 	.word	0x080124d0

08008020 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 8008020:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 8008022:	b1c0      	cbz	r0, 8008056 <netbuf_ref+0x36>
  if (buf->p != NULL) {
 8008024:	4604      	mov	r4, r0
 8008026:	6800      	ldr	r0, [r0, #0]
 8008028:	460e      	mov	r6, r1
 800802a:	4615      	mov	r5, r2
 800802c:	b108      	cbz	r0, 8008032 <netbuf_ref+0x12>
    pbuf_free(buf->p);
 800802e:	f002 f935 	bl	800a29c <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 8008032:	2241      	movs	r2, #65	; 0x41
 8008034:	2100      	movs	r1, #0
 8008036:	2036      	movs	r0, #54	; 0x36
 8008038:	f002 f9a0 	bl	800a37c <pbuf_alloc>
 800803c:	4603      	mov	r3, r0
 800803e:	6020      	str	r0, [r4, #0]
  if (buf->p == NULL) {
 8008040:	b128      	cbz	r0, 800804e <netbuf_ref+0x2e>
    buf->ptr = NULL;
    return ERR_MEM;
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 8008042:	605e      	str	r6, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
  buf->ptr = buf->p;
  return ERR_OK;
 8008044:	2000      	movs	r0, #0
  buf->p->len = buf->p->tot_len = size;
 8008046:	811d      	strh	r5, [r3, #8]
 8008048:	815d      	strh	r5, [r3, #10]
  buf->ptr = buf->p;
 800804a:	6063      	str	r3, [r4, #4]
}
 800804c:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 800804e:	f04f 30ff 	mov.w	r0, #4294967295
    buf->ptr = NULL;
 8008052:	6063      	str	r3, [r4, #4]
}
 8008054:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 8008056:	4b04      	ldr	r3, [pc, #16]	; (8008068 <netbuf_ref+0x48>)
 8008058:	2299      	movs	r2, #153	; 0x99
 800805a:	4904      	ldr	r1, [pc, #16]	; (800806c <netbuf_ref+0x4c>)
 800805c:	4804      	ldr	r0, [pc, #16]	; (8008070 <netbuf_ref+0x50>)
 800805e:	f009 facf 	bl	8011600 <iprintf>
 8008062:	f06f 000f 	mvn.w	r0, #15
}
 8008066:	bd70      	pop	{r4, r5, r6, pc}
 8008068:	08012c7c 	.word	0x08012c7c
 800806c:	08012d0c 	.word	0x08012d0c
 8008070:	080124d0 	.word	0x080124d0

08008074 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 8008074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 8008078:	2400      	movs	r4, #0
 800807a:	4f1a      	ldr	r7, [pc, #104]	; (80080e4 <alloc_socket+0x70>)
{
 800807c:	4681      	mov	r9, r0
 800807e:	4688      	mov	r8, r1
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
    if (!sockets[i].conn) {
 8008080:	0125      	lsls	r5, r4, #4
    SYS_ARCH_PROTECT(lev);
 8008082:	f008 fd7b 	bl	8010b7c <sys_arch_protect>
    if (!sockets[i].conn) {
 8008086:	597e      	ldr	r6, [r7, r5]
 8008088:	b14e      	cbz	r6, 800809e <alloc_socket+0x2a>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800808a:	3401      	adds	r4, #1
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
      sockets[i].errevent   = 0;
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
    }
    SYS_ARCH_UNPROTECT(lev);
 800808c:	f008 fd82 	bl	8010b94 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 8008090:	2c04      	cmp	r4, #4
 8008092:	d1f5      	bne.n	8008080 <alloc_socket+0xc>
  }
  return -1;
 8008094:	f04f 34ff 	mov.w	r4, #4294967295
}
 8008098:	4620      	mov	r0, r4
 800809a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      sockets[i].conn       = newconn;
 800809e:	f847 9005 	str.w	r9, [r7, r5]
      SYS_ARCH_UNPROTECT(lev);
 80080a2:	f008 fd77 	bl	8010b94 <sys_arch_unprotect>
      sockets[i].conn       = newconn;
 80080a6:	197b      	adds	r3, r7, r5
      sockets[i].lastdata.pbuf = NULL;
 80080a8:	605e      	str	r6, [r3, #4]
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 80080aa:	7b9b      	ldrb	r3, [r3, #14]
 80080ac:	b98b      	cbnz	r3, 80080d2 <alloc_socket+0x5e>
      sockets[i].rcvevent   = 0;
 80080ae:	442f      	add	r7, r5
 80080b0:	2200      	movs	r2, #0
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 80080b2:	f008 0101 	and.w	r1, r8, #1
}
 80080b6:	4620      	mov	r0, r4
      sockets[i].rcvevent   = 0;
 80080b8:	813a      	strh	r2, [r7, #8]
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 80080ba:	f899 3000 	ldrb.w	r3, [r9]
      sockets[i].errevent   = 0;
 80080be:	81ba      	strh	r2, [r7, #12]
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 80080c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80080c4:	2b10      	cmp	r3, #16
 80080c6:	bf18      	it	ne
 80080c8:	f041 0101 	orrne.w	r1, r1, #1
 80080cc:	8179      	strh	r1, [r7, #10]
}
 80080ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 80080d2:	4b05      	ldr	r3, [pc, #20]	; (80080e8 <alloc_socket+0x74>)
 80080d4:	f240 220e 	movw	r2, #526	; 0x20e
 80080d8:	4904      	ldr	r1, [pc, #16]	; (80080ec <alloc_socket+0x78>)
 80080da:	4805      	ldr	r0, [pc, #20]	; (80080f0 <alloc_socket+0x7c>)
 80080dc:	f009 fa90 	bl	8011600 <iprintf>
 80080e0:	e7e5      	b.n	80080ae <alloc_socket+0x3a>
 80080e2:	bf00      	nop
 80080e4:	2400b4fc 	.word	0x2400b4fc
 80080e8:	08012d24 	.word	0x08012d24
 80080ec:	08012d58 	.word	0x08012d58
 80080f0:	080124d0 	.word	0x080124d0

080080f4 <lwip_selscan>:
 * @return number of sockets that had events (read/write/exception) (>= 0)
 */
static int
lwip_selscan(int maxfdp1, fd_set *readset_in, fd_set *writeset_in, fd_set *exceptset_in,
             fd_set *readset_out, fd_set *writeset_out, fd_set *exceptset_out)
{
 80080f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FD_ZERO(&lwriteset);
  FD_ZERO(&lexceptset);

  /* Go through each socket in each list to count number of sockets which
     currently match */
  for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 80080f8:	f1b0 0800 	subs.w	r8, r0, #0
{
 80080fc:	b087      	sub	sp, #28
  for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 80080fe:	f340 80ac 	ble.w	800825a <lwip_selscan+0x166>
  FD_ZERO(&lexceptset);
 8008102:	2600      	movs	r6, #0
 8008104:	f8df b15c 	ldr.w	fp, [pc, #348]	; 8008264 <lwip_selscan+0x170>
  for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 8008108:	46c1      	mov	r9, r8
 800810a:	4614      	mov	r4, r2
 800810c:	46d8      	mov	r8, fp
 800810e:	461d      	mov	r5, r3
 8008110:	46b2      	mov	sl, r6
 8008112:	46b3      	mov	fp, r6
 8008114:	460f      	mov	r7, r1
 8008116:	9605      	str	r6, [sp, #20]
  FD_ZERO(&lreadset);
 8008118:	e9cd 6603 	strd	r6, r6, [sp, #12]
    /* if this FD is not in the set, continue */
    if (!(readset_in && FD_ISSET(i, readset_in)) &&
 800811c:	2f00      	cmp	r7, #0
 800811e:	d068      	beq.n	80081f2 <lwip_selscan+0xfe>
 8008120:	ea4f 106a 	mov.w	r0, sl, asr #5
 8008124:	f00a 061f 	and.w	r6, sl, #31
 8008128:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 800812c:	40f0      	lsrs	r0, r6
 800812e:	07c3      	lsls	r3, r0, #31
 8008130:	d55f      	bpl.n	80081f2 <lwip_selscan+0xfe>
        !(writeset_in && FD_ISSET(i, writeset_in)) &&
        !(exceptset_in && FD_ISSET(i, exceptset_in))) {
      continue;
    }
    /* First get the socket's status (protected)... */
    SYS_ARCH_PROTECT(lev);
 8008132:	f008 fd23 	bl	8010b7c <sys_arch_protect>
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8008136:	f1ba 0f03 	cmp.w	sl, #3
    SYS_ARCH_PROTECT(lev);
 800813a:	4684      	mov	ip, r0
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800813c:	f300 8084 	bgt.w	8008248 <lwip_selscan+0x154>
    sock = tryget_socket_unconn_locked(i);
    if (sock != NULL) {
      void *lastdata = sock->lastdata.pbuf;
 8008140:	f8d8 3004 	ldr.w	r3, [r8, #4]
      s16_t rcvevent = sock->rcvevent;
      u16_t sendevent = sock->sendevent;
      u16_t errevent = sock->errevent;
 8008144:	f8b8 600c 	ldrh.w	r6, [r8, #12]
      void *lastdata = sock->lastdata.pbuf;
 8008148:	9301      	str	r3, [sp, #4]
      s16_t rcvevent = sock->rcvevent;
 800814a:	f9b8 3008 	ldrsh.w	r3, [r8, #8]
 800814e:	9302      	str	r3, [sp, #8]
      u16_t sendevent = sock->sendevent;
 8008150:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8008154:	9300      	str	r3, [sp, #0]
      SYS_ARCH_UNPROTECT(lev);
 8008156:	f008 fd1d 	bl	8010b94 <sys_arch_unprotect>

      /* ... then examine it: */
      /* See if netconn of this socket is ready for read */
      if (readset_in && FD_ISSET(i, readset_in) && ((lastdata != NULL) || (rcvevent > 0))) {
 800815a:	6838      	ldr	r0, [r7, #0]
 800815c:	fa20 f00a 	lsr.w	r0, r0, sl
 8008160:	07c1      	lsls	r1, r0, #31
 8008162:	d505      	bpl.n	8008170 <lwip_selscan+0x7c>
 8008164:	9b01      	ldr	r3, [sp, #4]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d13a      	bne.n	80081e0 <lwip_selscan+0xec>
 800816a:	9b02      	ldr	r3, [sp, #8]
 800816c:	2b00      	cmp	r3, #0
 800816e:	dc37      	bgt.n	80081e0 <lwip_selscan+0xec>
        FD_SET(i, &lreadset);
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for reading\n", i));
        nready++;
      }
      /* See if netconn of this socket is ready for write */
      if (writeset_in && FD_ISSET(i, writeset_in) && (sendevent != 0)) {
 8008170:	b134      	cbz	r4, 8008180 <lwip_selscan+0x8c>
 8008172:	6820      	ldr	r0, [r4, #0]
 8008174:	fa20 f00a 	lsr.w	r0, r0, sl
 8008178:	07c2      	lsls	r2, r0, #31
 800817a:	d501      	bpl.n	8008180 <lwip_selscan+0x8c>
 800817c:	9b00      	ldr	r3, [sp, #0]
 800817e:	bb33      	cbnz	r3, 80081ce <lwip_selscan+0xda>
        FD_SET(i, &lwriteset);
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for writing\n", i));
        nready++;
      }
      /* See if netconn of this socket had an error */
      if (exceptset_in && FD_ISSET(i, exceptset_in) && (errevent != 0)) {
 8008180:	b16d      	cbz	r5, 800819e <lwip_selscan+0xaa>
 8008182:	6828      	ldr	r0, [r5, #0]
 8008184:	fa20 f00a 	lsr.w	r0, r0, sl
 8008188:	07c3      	lsls	r3, r0, #31
 800818a:	d508      	bpl.n	800819e <lwip_selscan+0xaa>
 800818c:	b13e      	cbz	r6, 800819e <lwip_selscan+0xaa>
        FD_SET(i, &lexceptset);
 800818e:	2301      	movs	r3, #1
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for exception\n", i));
        nready++;
 8008190:	f10b 0b01 	add.w	fp, fp, #1
        FD_SET(i, &lexceptset);
 8008194:	fa03 f00a 	lsl.w	r0, r3, sl
 8008198:	9b05      	ldr	r3, [sp, #20]
 800819a:	4303      	orrs	r3, r0
 800819c:	9305      	str	r3, [sp, #20]
  for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 800819e:	f10a 0a01 	add.w	sl, sl, #1
 80081a2:	f108 0810 	add.w	r8, r8, #16
 80081a6:	45d1      	cmp	r9, sl
 80081a8:	d1b8      	bne.n	800811c <lwip_selscan+0x28>
 80081aa:	9e05      	ldr	r6, [sp, #20]
 80081ac:	465f      	mov	r7, fp
      /* no a valid open socket */
      return -1;
    }
  }
  /* copy local sets to the ones provided as arguments */
  *readset_out = lreadset;
 80081ae:	2300      	movs	r3, #0
 80081b0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80081b2:	9904      	ldr	r1, [sp, #16]
  *writeset_out = lwriteset;
  *exceptset_out = lexceptset;

  LWIP_ASSERT("nready >= 0", nready >= 0);
  return nready;
}
 80081b4:	4638      	mov	r0, r7
  *readset_out = lreadset;
 80081b6:	e9c2 1300 	strd	r1, r3, [r2]
  *writeset_out = lwriteset;
 80081ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80081bc:	9903      	ldr	r1, [sp, #12]
 80081be:	e9c2 1300 	strd	r1, r3, [r2]
  *exceptset_out = lexceptset;
 80081c2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80081c4:	e9c2 6300 	strd	r6, r3, [r2]
}
 80081c8:	b007      	add	sp, #28
 80081ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        FD_SET(i, &lwriteset);
 80081ce:	2301      	movs	r3, #1
        nready++;
 80081d0:	f10b 0b01 	add.w	fp, fp, #1
        FD_SET(i, &lwriteset);
 80081d4:	fa03 f00a 	lsl.w	r0, r3, sl
 80081d8:	9b03      	ldr	r3, [sp, #12]
 80081da:	4303      	orrs	r3, r0
 80081dc:	9303      	str	r3, [sp, #12]
        nready++;
 80081de:	e7cf      	b.n	8008180 <lwip_selscan+0x8c>
        FD_SET(i, &lreadset);
 80081e0:	2301      	movs	r3, #1
        nready++;
 80081e2:	f10b 0b01 	add.w	fp, fp, #1
        FD_SET(i, &lreadset);
 80081e6:	fa03 f00a 	lsl.w	r0, r3, sl
 80081ea:	9b04      	ldr	r3, [sp, #16]
 80081ec:	4303      	orrs	r3, r0
 80081ee:	9304      	str	r3, [sp, #16]
        nready++;
 80081f0:	e7be      	b.n	8008170 <lwip_selscan+0x7c>
    if (!(readset_in && FD_ISSET(i, readset_in)) &&
 80081f2:	b144      	cbz	r4, 8008206 <lwip_selscan+0x112>
        !(writeset_in && FD_ISSET(i, writeset_in)) &&
 80081f4:	ea4f 106a 	mov.w	r0, sl, asr #5
 80081f8:	f00a 061f 	and.w	r6, sl, #31
 80081fc:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8008200:	40f0      	lsrs	r0, r6
 8008202:	07c6      	lsls	r6, r0, #31
 8008204:	d40a      	bmi.n	800821c <lwip_selscan+0x128>
 8008206:	2d00      	cmp	r5, #0
 8008208:	d0c9      	beq.n	800819e <lwip_selscan+0xaa>
        !(exceptset_in && FD_ISSET(i, exceptset_in))) {
 800820a:	ea4f 106a 	mov.w	r0, sl, asr #5
 800820e:	f00a 061f 	and.w	r6, sl, #31
 8008212:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8008216:	40f0      	lsrs	r0, r6
 8008218:	07c0      	lsls	r0, r0, #31
 800821a:	d5c0      	bpl.n	800819e <lwip_selscan+0xaa>
    SYS_ARCH_PROTECT(lev);
 800821c:	f008 fcae 	bl	8010b7c <sys_arch_protect>
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8008220:	f1ba 0f03 	cmp.w	sl, #3
    SYS_ARCH_PROTECT(lev);
 8008224:	4684      	mov	ip, r0
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8008226:	dc0f      	bgt.n	8008248 <lwip_selscan+0x154>
      void *lastdata = sock->lastdata.pbuf;
 8008228:	f8d8 3004 	ldr.w	r3, [r8, #4]
      u16_t errevent = sock->errevent;
 800822c:	f8b8 600c 	ldrh.w	r6, [r8, #12]
      void *lastdata = sock->lastdata.pbuf;
 8008230:	9301      	str	r3, [sp, #4]
      s16_t rcvevent = sock->rcvevent;
 8008232:	f9b8 3008 	ldrsh.w	r3, [r8, #8]
 8008236:	9302      	str	r3, [sp, #8]
      u16_t sendevent = sock->sendevent;
 8008238:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800823c:	9300      	str	r3, [sp, #0]
      SYS_ARCH_UNPROTECT(lev);
 800823e:	f008 fca9 	bl	8010b94 <sys_arch_unprotect>
      if (readset_in && FD_ISSET(i, readset_in) && ((lastdata != NULL) || (rcvevent > 0))) {
 8008242:	2f00      	cmp	r7, #0
 8008244:	d094      	beq.n	8008170 <lwip_selscan+0x7c>
 8008246:	e788      	b.n	800815a <lwip_selscan+0x66>
      return -1;
 8008248:	f04f 37ff 	mov.w	r7, #4294967295
      SYS_ARCH_UNPROTECT(lev);
 800824c:	4660      	mov	r0, ip
 800824e:	f008 fca1 	bl	8010b94 <sys_arch_unprotect>
}
 8008252:	4638      	mov	r0, r7
 8008254:	b007      	add	sp, #28
 8008256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  FD_ZERO(&lexceptset);
 800825a:	2600      	movs	r6, #0
  int i, nready = 0;
 800825c:	4637      	mov	r7, r6
  FD_ZERO(&lreadset);
 800825e:	e9cd 6603 	strd	r6, r6, [sp, #12]
 8008262:	e7a4      	b.n	80081ae <lwip_selscan+0xba>
 8008264:	2400b4fc 	.word	0x2400b4fc

08008268 <lwip_unlink_select_cb>:
{
 8008268:	b538      	push	{r3, r4, r5, lr}
 800826a:	4604      	mov	r4, r0
  LWIP_SOCKET_SELECT_PROTECT(lev);
 800826c:	4815      	ldr	r0, [pc, #84]	; (80082c4 <lwip_unlink_select_cb+0x5c>)
 800826e:	f008 fc67 	bl	8010b40 <sys_mutex_lock>
  if (select_cb->next != NULL) {
 8008272:	6823      	ldr	r3, [r4, #0]
 8008274:	b10b      	cbz	r3, 800827a <lwip_unlink_select_cb+0x12>
    select_cb->next->prev = select_cb->prev;
 8008276:	6862      	ldr	r2, [r4, #4]
 8008278:	605a      	str	r2, [r3, #4]
  if (select_cb_list == select_cb) {
 800827a:	4d13      	ldr	r5, [pc, #76]	; (80082c8 <lwip_unlink_select_cb+0x60>)
 800827c:	682a      	ldr	r2, [r5, #0]
 800827e:	42a2      	cmp	r2, r4
    LWIP_ASSERT("select_cb->prev == NULL", select_cb->prev == NULL);
 8008280:	6862      	ldr	r2, [r4, #4]
  if (select_cb_list == select_cb) {
 8008282:	d006      	beq.n	8008292 <lwip_unlink_select_cb+0x2a>
    LWIP_ASSERT("select_cb->prev != NULL", select_cb->prev != NULL);
 8008284:	b1a2      	cbz	r2, 80082b0 <lwip_unlink_select_cb+0x48>
    select_cb->prev->next = select_cb->next;
 8008286:	6013      	str	r3, [r2, #0]
  LWIP_SOCKET_SELECT_UNPROTECT(lev);
 8008288:	480e      	ldr	r0, [pc, #56]	; (80082c4 <lwip_unlink_select_cb+0x5c>)
}
 800828a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  LWIP_SOCKET_SELECT_UNPROTECT(lev);
 800828e:	f008 bc5d 	b.w	8010b4c <sys_mutex_unlock>
    LWIP_ASSERT("select_cb->prev == NULL", select_cb->prev == NULL);
 8008292:	b13a      	cbz	r2, 80082a4 <lwip_unlink_select_cb+0x3c>
 8008294:	4b0d      	ldr	r3, [pc, #52]	; (80082cc <lwip_unlink_select_cb+0x64>)
 8008296:	f240 720d 	movw	r2, #1805	; 0x70d
 800829a:	490d      	ldr	r1, [pc, #52]	; (80082d0 <lwip_unlink_select_cb+0x68>)
 800829c:	480d      	ldr	r0, [pc, #52]	; (80082d4 <lwip_unlink_select_cb+0x6c>)
 800829e:	f009 f9af 	bl	8011600 <iprintf>
    select_cb_list = select_cb->next;
 80082a2:	6823      	ldr	r3, [r4, #0]
 80082a4:	602b      	str	r3, [r5, #0]
  LWIP_SOCKET_SELECT_UNPROTECT(lev);
 80082a6:	4807      	ldr	r0, [pc, #28]	; (80082c4 <lwip_unlink_select_cb+0x5c>)
}
 80082a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  LWIP_SOCKET_SELECT_UNPROTECT(lev);
 80082ac:	f008 bc4e 	b.w	8010b4c <sys_mutex_unlock>
    LWIP_ASSERT("select_cb->prev != NULL", select_cb->prev != NULL);
 80082b0:	4b06      	ldr	r3, [pc, #24]	; (80082cc <lwip_unlink_select_cb+0x64>)
 80082b2:	f44f 62e2 	mov.w	r2, #1808	; 0x710
 80082b6:	4908      	ldr	r1, [pc, #32]	; (80082d8 <lwip_unlink_select_cb+0x70>)
 80082b8:	4806      	ldr	r0, [pc, #24]	; (80082d4 <lwip_unlink_select_cb+0x6c>)
 80082ba:	f009 f9a1 	bl	8011600 <iprintf>
    select_cb->prev->next = select_cb->next;
 80082be:	e9d4 3200 	ldrd	r3, r2, [r4]
 80082c2:	e7e0      	b.n	8008286 <lwip_unlink_select_cb+0x1e>
 80082c4:	2400b53c 	.word	0x2400b53c
 80082c8:	2400b4f8 	.word	0x2400b4f8
 80082cc:	08012d24 	.word	0x08012d24
 80082d0:	08012da0 	.word	0x08012da0
 80082d4:	080124d0 	.word	0x080124d0
 80082d8:	08012db8 	.word	0x08012db8

080082dc <lwip_recv_tcp>:
{
 80082dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082e0:	469a      	mov	sl, r3
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 80082e2:	6803      	ldr	r3, [r0, #0]
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 80082e4:	2a00      	cmp	r2, #0
{
 80082e6:	b083      	sub	sp, #12
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 80082e8:	781b      	ldrb	r3, [r3, #0]
{
 80082ea:	4681      	mov	r9, r0
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 80082ec:	bfac      	ite	ge
 80082ee:	4615      	movge	r5, r2
 80082f0:	f06f 4500 	mvnlt.w	r5, #2147483648	; 0x80000000
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 80082f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
{
 80082f8:	468b      	mov	fp, r1
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 80082fa:	2b10      	cmp	r3, #16
 80082fc:	d006      	beq.n	800830c <lwip_recv_tcp+0x30>
 80082fe:	4b46      	ldr	r3, [pc, #280]	; (8008418 <lwip_recv_tcp+0x13c>)
 8008300:	f240 329f 	movw	r2, #927	; 0x39f
 8008304:	4945      	ldr	r1, [pc, #276]	; (800841c <lwip_recv_tcp+0x140>)
 8008306:	4846      	ldr	r0, [pc, #280]	; (8008420 <lwip_recv_tcp+0x144>)
 8008308:	f009 f97a 	bl	8011600 <iprintf>
    apiflags |= NETCONN_DONTBLOCK;
 800830c:	f01a 0f08 	tst.w	sl, #8
    if (sock->lastdata.pbuf) {
 8008310:	f8d9 0004 	ldr.w	r0, [r9, #4]
  u8_t apiflags = NETCONN_NOAUTORCVD;
 8008314:	f04f 0800 	mov.w	r8, #0
    apiflags |= NETCONN_DONTBLOCK;
 8008318:	bf0c      	ite	eq
 800831a:	2208      	moveq	r2, #8
 800831c:	220c      	movne	r2, #12
    if (sock->lastdata.pbuf) {
 800831e:	b338      	cbz	r0, 8008370 <lwip_recv_tcp+0x94>
      p = sock->lastdata.pbuf;
 8008320:	9001      	str	r0, [sp, #4]
    if (recv_left > p->tot_len) {
 8008322:	8904      	ldrh	r4, [r0, #8]
 8008324:	42ac      	cmp	r4, r5
 8008326:	4626      	mov	r6, r4
 8008328:	db01      	blt.n	800832e <lwip_recv_tcp+0x52>
      copylen = (u16_t)recv_left;
 800832a:	b2ac      	uxth	r4, r5
 800832c:	462e      	mov	r6, r5
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 800832e:	2300      	movs	r3, #0
 8008330:	4622      	mov	r2, r4
 8008332:	eb0b 0108 	add.w	r1, fp, r8
    if (recvd + copylen < recvd) {
 8008336:	eb08 0706 	add.w	r7, r8, r6
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 800833a:	f002 f9dd 	bl	800a6f8 <pbuf_copy_partial>
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 800833e:	42b5      	cmp	r5, r6
 8008340:	db27      	blt.n	8008392 <lwip_recv_tcp+0xb6>
    if ((flags & MSG_PEEK) == 0) {
 8008342:	f01a 0f01 	tst.w	sl, #1
 8008346:	d11f      	bne.n	8008388 <lwip_recv_tcp+0xac>
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 8008348:	9801      	ldr	r0, [sp, #4]
 800834a:	8903      	ldrh	r3, [r0, #8]
 800834c:	42a3      	cmp	r3, r4
 800834e:	d333      	bcc.n	80083b8 <lwip_recv_tcp+0xdc>
      if (p->tot_len - copylen > 0) {
 8008350:	42b3      	cmp	r3, r6
 8008352:	dd2b      	ble.n	80083ac <lwip_recv_tcp+0xd0>
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 8008354:	4621      	mov	r1, r4
 8008356:	f002 f913 	bl	800a580 <pbuf_free_header>
 800835a:	f8c9 0004 	str.w	r0, [r9, #4]
    recv_left -= copylen;
 800835e:	1bad      	subs	r5, r5, r6
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 8008360:	221c      	movs	r2, #28
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 8008362:	2d00      	cmp	r5, #0
 8008364:	dd52      	ble.n	800840c <lwip_recv_tcp+0x130>
    if (sock->lastdata.pbuf) {
 8008366:	f8d9 0004 	ldr.w	r0, [r9, #4]
    if (recvd + copylen < recvd) {
 800836a:	46b8      	mov	r8, r7
    if (sock->lastdata.pbuf) {
 800836c:	2800      	cmp	r0, #0
 800836e:	d1d7      	bne.n	8008320 <lwip_recv_tcp+0x44>
      err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
 8008370:	a901      	add	r1, sp, #4
 8008372:	f8d9 0000 	ldr.w	r0, [r9]
 8008376:	f7fe fbe3 	bl	8006b40 <netconn_recv_tcp_pbuf_flags>
      if (err != ERR_OK) {
 800837a:	4604      	mov	r4, r0
 800837c:	bb78      	cbnz	r0, 80083de <lwip_recv_tcp+0x102>
      LWIP_ASSERT("p != NULL", p != NULL);
 800837e:	9801      	ldr	r0, [sp, #4]
 8008380:	b320      	cbz	r0, 80083cc <lwip_recv_tcp+0xf0>
      sock->lastdata.pbuf = p;
 8008382:	f8c9 0004 	str.w	r0, [r9, #4]
 8008386:	e7cc      	b.n	8008322 <lwip_recv_tcp+0x46>
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 8008388:	b15f      	cbz	r7, 80083a2 <lwip_recv_tcp+0xc6>
}
 800838a:	4638      	mov	r0, r7
 800838c:	b003      	add	sp, #12
 800838e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 8008392:	4b21      	ldr	r3, [pc, #132]	; (8008418 <lwip_recv_tcp+0x13c>)
 8008394:	f240 32dd 	movw	r2, #989	; 0x3dd
 8008398:	4922      	ldr	r1, [pc, #136]	; (8008424 <lwip_recv_tcp+0x148>)
 800839a:	4821      	ldr	r0, [pc, #132]	; (8008420 <lwip_recv_tcp+0x144>)
 800839c:	f009 f930 	bl	8011600 <iprintf>
 80083a0:	e7cf      	b.n	8008342 <lwip_recv_tcp+0x66>
 80083a2:	2700      	movs	r7, #0
}
 80083a4:	4638      	mov	r0, r7
 80083a6:	b003      	add	sp, #12
 80083a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        sock->lastdata.pbuf = NULL;
 80083ac:	2300      	movs	r3, #0
 80083ae:	f8c9 3004 	str.w	r3, [r9, #4]
        pbuf_free(p);
 80083b2:	f001 ff73 	bl	800a29c <pbuf_free>
 80083b6:	e7d2      	b.n	800835e <lwip_recv_tcp+0x82>
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 80083b8:	4b17      	ldr	r3, [pc, #92]	; (8008418 <lwip_recv_tcp+0x13c>)
 80083ba:	f240 32e3 	movw	r2, #995	; 0x3e3
 80083be:	491a      	ldr	r1, [pc, #104]	; (8008428 <lwip_recv_tcp+0x14c>)
 80083c0:	4817      	ldr	r0, [pc, #92]	; (8008420 <lwip_recv_tcp+0x144>)
 80083c2:	f009 f91d 	bl	8011600 <iprintf>
      if (p->tot_len - copylen > 0) {
 80083c6:	9801      	ldr	r0, [sp, #4]
 80083c8:	8903      	ldrh	r3, [r0, #8]
 80083ca:	e7c1      	b.n	8008350 <lwip_recv_tcp+0x74>
      LWIP_ASSERT("p != NULL", p != NULL);
 80083cc:	4b12      	ldr	r3, [pc, #72]	; (8008418 <lwip_recv_tcp+0x13c>)
 80083ce:	f240 32c5 	movw	r2, #965	; 0x3c5
 80083d2:	4916      	ldr	r1, [pc, #88]	; (800842c <lwip_recv_tcp+0x150>)
 80083d4:	4812      	ldr	r0, [pc, #72]	; (8008420 <lwip_recv_tcp+0x144>)
 80083d6:	f009 f913 	bl	8011600 <iprintf>
      sock->lastdata.pbuf = p;
 80083da:	9801      	ldr	r0, [sp, #4]
 80083dc:	e7d1      	b.n	8008382 <lwip_recv_tcp+0xa6>
        if (recvd > 0) {
 80083de:	f1b8 0f00 	cmp.w	r8, #0
 80083e2:	d009      	beq.n	80083f8 <lwip_recv_tcp+0x11c>
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 80083e4:	f01a 0f01 	tst.w	sl, #1
 80083e8:	d114      	bne.n	8008414 <lwip_recv_tcp+0x138>
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
 80083ea:	4641      	mov	r1, r8
 80083ec:	f8d9 0000 	ldr.w	r0, [r9]
 80083f0:	4647      	mov	r7, r8
 80083f2:	f7fe fb7b 	bl	8006aec <netconn_tcp_recvd>
 80083f6:	e7c8      	b.n	800838a <lwip_recv_tcp+0xae>
        sock_set_errno(sock, err_to_errno(err));
 80083f8:	f7ff fdda 	bl	8007fb0 <err_to_errno>
 80083fc:	b108      	cbz	r0, 8008402 <lwip_recv_tcp+0x126>
 80083fe:	4b0c      	ldr	r3, [pc, #48]	; (8008430 <lwip_recv_tcp+0x154>)
 8008400:	6018      	str	r0, [r3, #0]
        if (err == ERR_CLSD) {
 8008402:	340f      	adds	r4, #15
 8008404:	bf18      	it	ne
 8008406:	2401      	movne	r4, #1
 8008408:	4267      	negs	r7, r4
 800840a:	e7be      	b.n	800838a <lwip_recv_tcp+0xae>
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 800840c:	2f00      	cmp	r7, #0
 800840e:	d0c8      	beq.n	80083a2 <lwip_recv_tcp+0xc6>
 8008410:	46b8      	mov	r8, r7
 8008412:	e7ea      	b.n	80083ea <lwip_recv_tcp+0x10e>
 8008414:	4647      	mov	r7, r8
 8008416:	e7b8      	b.n	800838a <lwip_recv_tcp+0xae>
 8008418:	08012d24 	.word	0x08012d24
 800841c:	08012dd0 	.word	0x08012dd0
 8008420:	080124d0 	.word	0x080124d0
 8008424:	08012df4 	.word	0x08012df4
 8008428:	08012e1c 	.word	0x08012e1c
 800842c:	080128e0 	.word	0x080128e0
 8008430:	2400e928 	.word	0x2400e928

08008434 <lwip_sock_make_addr.constprop.0.isra.0>:
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
 8008434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008436:	4606      	mov	r6, r0
 8008438:	b085      	sub	sp, #20
 800843a:	460f      	mov	r7, r1
 800843c:	461c      	mov	r4, r3
  LWIP_ASSERT("from != NULL", from != NULL);
 800843e:	4615      	mov	r5, r2
 8008440:	b302      	cbz	r2, 8008484 <lwip_sock_make_addr.constprop.0.isra.0+0x50>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 8008442:	b344      	cbz	r4, 8008496 <lwip_sock_make_addr.constprop.0.isra.0+0x62>
  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 8008444:	f44f 7304 	mov.w	r3, #528	; 0x210
 8008448:	4638      	mov	r0, r7
 800844a:	f8ad 3000 	strh.w	r3, [sp]
 800844e:	f000 ffa3 	bl	8009398 <lwip_htons>
  if (*fromlen < saddr.sa.sa_len) {
 8008452:	6822      	ldr	r2, [r4, #0]
  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 8008454:	2300      	movs	r3, #0
 8008456:	6831      	ldr	r1, [r6, #0]
  } else if (*fromlen > saddr.sa.sa_len) {
 8008458:	2a10      	cmp	r2, #16
  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 800845a:	f8ad 0002 	strh.w	r0, [sp, #2]
 800845e:	9101      	str	r1, [sp, #4]
 8008460:	e9cd 3302 	strd	r3, r3, [sp, #8]
  } else if (*fromlen > saddr.sa.sa_len) {
 8008464:	d805      	bhi.n	8008472 <lwip_sock_make_addr.constprop.0.isra.0+0x3e>
  MEMCPY(from, &saddr, *fromlen);
 8008466:	4669      	mov	r1, sp
 8008468:	4628      	mov	r0, r5
 800846a:	f009 fafa 	bl	8011a62 <memcpy>
}
 800846e:	b005      	add	sp, #20
 8008470:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *fromlen = saddr.sa.sa_len;
 8008472:	2310      	movs	r3, #16
  MEMCPY(from, &saddr, *fromlen);
 8008474:	4669      	mov	r1, sp
 8008476:	4628      	mov	r0, r5
    *fromlen = saddr.sa.sa_len;
 8008478:	461a      	mov	r2, r3
 800847a:	6023      	str	r3, [r4, #0]
  MEMCPY(from, &saddr, *fromlen);
 800847c:	f009 faf1 	bl	8011a62 <memcpy>
}
 8008480:	b005      	add	sp, #20
 8008482:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("from != NULL", from != NULL);
 8008484:	4b08      	ldr	r3, [pc, #32]	; (80084a8 <lwip_sock_make_addr.constprop.0.isra.0+0x74>)
 8008486:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800848a:	4908      	ldr	r1, [pc, #32]	; (80084ac <lwip_sock_make_addr.constprop.0.isra.0+0x78>)
 800848c:	4808      	ldr	r0, [pc, #32]	; (80084b0 <lwip_sock_make_addr.constprop.0.isra.0+0x7c>)
 800848e:	f009 f8b7 	bl	8011600 <iprintf>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 8008492:	2c00      	cmp	r4, #0
 8008494:	d1d6      	bne.n	8008444 <lwip_sock_make_addr.constprop.0.isra.0+0x10>
 8008496:	4b04      	ldr	r3, [pc, #16]	; (80084a8 <lwip_sock_make_addr.constprop.0.isra.0+0x74>)
 8008498:	f240 4209 	movw	r2, #1033	; 0x409
 800849c:	4905      	ldr	r1, [pc, #20]	; (80084b4 <lwip_sock_make_addr.constprop.0.isra.0+0x80>)
 800849e:	4804      	ldr	r0, [pc, #16]	; (80084b0 <lwip_sock_make_addr.constprop.0.isra.0+0x7c>)
 80084a0:	f009 f8ae 	bl	8011600 <iprintf>
 80084a4:	e7ce      	b.n	8008444 <lwip_sock_make_addr.constprop.0.isra.0+0x10>
 80084a6:	bf00      	nop
 80084a8:	08012d24 	.word	0x08012d24
 80084ac:	08012e2c 	.word	0x08012e2c
 80084b0:	080124d0 	.word	0x080124d0
 80084b4:	08012e3c 	.word	0x08012e3c

080084b8 <lwip_recvfrom_udp_raw.constprop.0>:
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
 80084b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084bc:	4699      	mov	r9, r3
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 80084be:	6893      	ldr	r3, [r2, #8]
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
 80084c0:	b082      	sub	sp, #8
 80084c2:	4615      	mov	r5, r2
 80084c4:	4680      	mov	r8, r0
 80084c6:	460f      	mov	r7, r1
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d052      	beq.n	8008572 <lwip_recvfrom_udp_raw.constprop.0+0xba>
  buf = sock->lastdata.netbuf;
 80084cc:	6843      	ldr	r3, [r0, #4]
 80084ce:	9301      	str	r3, [sp, #4]
  if (buf == NULL) {
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d054      	beq.n	800857e <lwip_recvfrom_udp_raw.constprop.0+0xc6>
  buflen = buf->p->tot_len;
 80084d4:	6818      	ldr	r0, [r3, #0]
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 80084d6:	68eb      	ldr	r3, [r5, #12]
  buflen = buf->p->tot_len;
 80084d8:	8906      	ldrh	r6, [r0, #8]
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 80084da:	2b00      	cmp	r3, #0
 80084dc:	dd16      	ble.n	800850c <lwip_recvfrom_udp_raw.constprop.0+0x54>
 80084de:	b1ae      	cbz	r6, 800850c <lwip_recvfrom_udp_raw.constprop.0+0x54>
 80084e0:	2400      	movs	r4, #0
  copied = 0;
 80084e2:	4623      	mov	r3, r4
    if (msg->msg_iov[i].iov_len > len_left) {
 80084e4:	68a9      	ldr	r1, [r5, #8]
    u16_t len_left = (u16_t)(buflen - copied);
 80084e6:	eba6 0e03 	sub.w	lr, r6, r3
    if (msg->msg_iov[i].iov_len > len_left) {
 80084ea:	eb01 0ac4 	add.w	sl, r1, r4, lsl #3
    u16_t len_left = (u16_t)(buflen - copied);
 80084ee:	fa1f fe8e 	uxth.w	lr, lr
    if (msg->msg_iov[i].iov_len > len_left) {
 80084f2:	f8da c004 	ldr.w	ip, [sl, #4]
      copylen = (u16_t)msg->msg_iov[i].iov_len;
 80084f6:	fa1f f28c 	uxth.w	r2, ip
    if (msg->msg_iov[i].iov_len > len_left) {
 80084fa:	45f4      	cmp	ip, lr
    copied = (u16_t)(copied + copylen);
 80084fc:	eb02 0c03 	add.w	ip, r2, r3
    if (msg->msg_iov[i].iov_len > len_left) {
 8008500:	d916      	bls.n	8008530 <lwip_recvfrom_udp_raw.constprop.0+0x78>
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 8008502:	4672      	mov	r2, lr
 8008504:	f8da 1000 	ldr.w	r1, [sl]
 8008508:	f002 f8f6 	bl	800a6f8 <pbuf_copy_partial>
  if (msg->msg_name && msg->msg_namelen)
 800850c:	682a      	ldr	r2, [r5, #0]
 800850e:	b10a      	cbz	r2, 8008514 <lwip_recvfrom_udp_raw.constprop.0+0x5c>
 8008510:	686b      	ldr	r3, [r5, #4]
 8008512:	bb0b      	cbnz	r3, 8008558 <lwip_recvfrom_udp_raw.constprop.0+0xa0>
  msg->msg_flags = 0;
 8008514:	2300      	movs	r3, #0
  if (msg->msg_control) {
 8008516:	692a      	ldr	r2, [r5, #16]
  msg->msg_flags = 0;
 8008518:	61ab      	str	r3, [r5, #24]
  if (msg->msg_control) {
 800851a:	b102      	cbz	r2, 800851e <lwip_recvfrom_udp_raw.constprop.0+0x66>
      msg->msg_controllen = 0;
 800851c:	616b      	str	r3, [r5, #20]
  if ((flags & MSG_PEEK) == 0) {
 800851e:	f017 0701 	ands.w	r7, r7, #1
 8008522:	d020      	beq.n	8008566 <lwip_recvfrom_udp_raw.constprop.0+0xae>
  return ERR_OK;
 8008524:	2000      	movs	r0, #0
    *datagram_len = buflen;
 8008526:	f8a9 6000 	strh.w	r6, [r9]
}
 800852a:	b002      	add	sp, #8
 800852c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    copied = (u16_t)(copied + copylen);
 8008530:	fa1f fa8c 	uxth.w	sl, ip
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 8008534:	f851 1034 	ldr.w	r1, [r1, r4, lsl #3]
 8008538:	f002 f8de 	bl	800a6f8 <pbuf_copy_partial>
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800853c:	3401      	adds	r4, #1
 800853e:	4556      	cmp	r6, sl
 8008540:	68e9      	ldr	r1, [r5, #12]
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 8008542:	4653      	mov	r3, sl
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 8008544:	bf94      	ite	ls
 8008546:	2200      	movls	r2, #0
 8008548:	2201      	movhi	r2, #1
 800854a:	428c      	cmp	r4, r1
 800854c:	dade      	bge.n	800850c <lwip_recvfrom_udp_raw.constprop.0+0x54>
 800854e:	2a00      	cmp	r2, #0
 8008550:	d0dc      	beq.n	800850c <lwip_recvfrom_udp_raw.constprop.0+0x54>
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 8008552:	9a01      	ldr	r2, [sp, #4]
 8008554:	6810      	ldr	r0, [r2, #0]
 8008556:	e7c5      	b.n	80084e4 <lwip_recvfrom_udp_raw.constprop.0+0x2c>
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 8008558:	9801      	ldr	r0, [sp, #4]
 800855a:	1d2b      	adds	r3, r5, #4
 800855c:	8981      	ldrh	r1, [r0, #12]
 800855e:	3008      	adds	r0, #8
 8008560:	f7ff ff68 	bl	8008434 <lwip_sock_make_addr.constprop.0.isra.0>
 8008564:	e7d6      	b.n	8008514 <lwip_recvfrom_udp_raw.constprop.0+0x5c>
    netbuf_delete(buf);
 8008566:	9801      	ldr	r0, [sp, #4]
    sock->lastdata.netbuf = NULL;
 8008568:	f8c8 7004 	str.w	r7, [r8, #4]
    netbuf_delete(buf);
 800856c:	f7ff fd2e 	bl	8007fcc <netbuf_delete>
 8008570:	e7d8      	b.n	8008524 <lwip_recvfrom_udp_raw.constprop.0+0x6c>
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 8008572:	68d3      	ldr	r3, [r2, #12]
 8008574:	2b00      	cmp	r3, #0
 8008576:	dc1d      	bgt.n	80085b4 <lwip_recvfrom_udp_raw.constprop.0+0xfc>
  buf = sock->lastdata.netbuf;
 8008578:	6843      	ldr	r3, [r0, #4]
 800857a:	9301      	str	r3, [sp, #4]
  if (buf == NULL) {
 800857c:	b973      	cbnz	r3, 800859c <lwip_recvfrom_udp_raw.constprop.0+0xe4>
  if (flags & MSG_DONTWAIT) {
 800857e:	f3c7 02c0 	ubfx	r2, r7, #3, #1
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 8008582:	a901      	add	r1, sp, #4
 8008584:	f8d8 0000 	ldr.w	r0, [r8]
  if (flags & MSG_DONTWAIT) {
 8008588:	0092      	lsls	r2, r2, #2
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 800858a:	f7fe faf5 	bl	8006b78 <netconn_recv_udp_raw_netbuf_flags>
    if (err != ERR_OK) {
 800858e:	2800      	cmp	r0, #0
 8008590:	d1cb      	bne.n	800852a <lwip_recvfrom_udp_raw.constprop.0+0x72>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8008592:	9b01      	ldr	r3, [sp, #4]
 8008594:	b12b      	cbz	r3, 80085a2 <lwip_recvfrom_udp_raw.constprop.0+0xea>
    sock->lastdata.netbuf = buf;
 8008596:	f8c8 3004 	str.w	r3, [r8, #4]
 800859a:	e79b      	b.n	80084d4 <lwip_recvfrom_udp_raw.constprop.0+0x1c>
  buflen = buf->p->tot_len;
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	891e      	ldrh	r6, [r3, #8]
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 80085a0:	e7b4      	b.n	800850c <lwip_recvfrom_udp_raw.constprop.0+0x54>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80085a2:	4b09      	ldr	r3, [pc, #36]	; (80085c8 <lwip_recvfrom_udp_raw.constprop.0+0x110>)
 80085a4:	f240 425e 	movw	r2, #1118	; 0x45e
 80085a8:	4908      	ldr	r1, [pc, #32]	; (80085cc <lwip_recvfrom_udp_raw.constprop.0+0x114>)
 80085aa:	4809      	ldr	r0, [pc, #36]	; (80085d0 <lwip_recvfrom_udp_raw.constprop.0+0x118>)
 80085ac:	f009 f828 	bl	8011600 <iprintf>
    sock->lastdata.netbuf = buf;
 80085b0:	9b01      	ldr	r3, [sp, #4]
 80085b2:	e7f0      	b.n	8008596 <lwip_recvfrom_udp_raw.constprop.0+0xde>
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 80085b4:	4b04      	ldr	r3, [pc, #16]	; (80085c8 <lwip_recvfrom_udp_raw.constprop.0+0x110>)
 80085b6:	f240 4249 	movw	r2, #1097	; 0x449
 80085ba:	4906      	ldr	r1, [pc, #24]	; (80085d4 <lwip_recvfrom_udp_raw.constprop.0+0x11c>)
 80085bc:	4804      	ldr	r0, [pc, #16]	; (80085d0 <lwip_recvfrom_udp_raw.constprop.0+0x118>)
 80085be:	f009 f81f 	bl	8011600 <iprintf>
 80085c2:	f06f 000f 	mvn.w	r0, #15
 80085c6:	e7b0      	b.n	800852a <lwip_recvfrom_udp_raw.constprop.0+0x72>
 80085c8:	08012d24 	.word	0x08012d24
 80085cc:	080125bc 	.word	0x080125bc
 80085d0:	080124d0 	.word	0x080124d0
 80085d4:	08012e4c 	.word	0x08012e4c

080085d8 <event_callback>:
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 80085d8:	2800      	cmp	r0, #0
 80085da:	f000 80ba 	beq.w	8008752 <event_callback+0x17a>
{
 80085de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    s = conn->socket;
 80085e2:	6984      	ldr	r4, [r0, #24]
 80085e4:	4605      	mov	r5, r0
 80085e6:	460f      	mov	r7, r1
    if (s < 0) {
 80085e8:	2c00      	cmp	r4, #0
 80085ea:	db17      	blt.n	800861c <event_callback+0x44>
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 80085ec:	2c03      	cmp	r4, #3
 80085ee:	dc10      	bgt.n	8008612 <event_callback+0x3a>
    if (sock->conn) {
 80085f0:	4d61      	ldr	r5, [pc, #388]	; (8008778 <event_callback+0x1a0>)
 80085f2:	ea4f 1804 	mov.w	r8, r4, lsl #4
 80085f6:	f855 3008 	ldr.w	r3, [r5, r8]
 80085fa:	b153      	cbz	r3, 8008612 <event_callback+0x3a>
  } else {
    return;
  }

  check_waiters = 1;
  SYS_ARCH_PROTECT(lev);
 80085fc:	f008 fabe 	bl	8010b7c <sys_arch_protect>
 8008600:	4606      	mov	r6, r0
  /* Set event as required */
  switch (evt) {
 8008602:	2f04      	cmp	r7, #4
 8008604:	f200 80a9 	bhi.w	800875a <event_callback+0x182>
 8008608:	e8df f007 	tbb	[pc, r7]
 800860c:	4f57686d 	.word	0x4f57686d
 8008610:	11          	.byte	0x11
 8008611:	00          	.byte	0x00
    set_errno(EBADF);
 8008612:	4b5a      	ldr	r3, [pc, #360]	; (800877c <event_callback+0x1a4>)
 8008614:	2209      	movs	r2, #9
 8008616:	601a      	str	r2, [r3, #0]
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
  } else {
    SYS_ARCH_UNPROTECT(lev);
  }
  done_socket(sock);
}
 8008618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      SYS_ARCH_PROTECT(lev);
 800861c:	f008 faae 	bl	8010b7c <sys_arch_protect>
      if (conn->socket < 0) {
 8008620:	69ac      	ldr	r4, [r5, #24]
      SYS_ARCH_PROTECT(lev);
 8008622:	4603      	mov	r3, r0
      if (conn->socket < 0) {
 8008624:	2c00      	cmp	r4, #0
 8008626:	db71      	blt.n	800870c <event_callback+0x134>
      SYS_ARCH_UNPROTECT(lev);
 8008628:	f008 fab4 	bl	8010b94 <sys_arch_unprotect>
 800862c:	e7de      	b.n	80085ec <event_callback+0x14>
      sock->errevent = 1;
 800862e:	4445      	add	r5, r8
 8008630:	f04f 0901 	mov.w	r9, #1
  if (sock->select_waiting && check_waiters) {
 8008634:	7bab      	ldrb	r3, [r5, #14]
      sock->errevent = 1;
 8008636:	f8a5 900c 	strh.w	r9, [r5, #12]
  if (sock->select_waiting && check_waiters) {
 800863a:	2b00      	cmp	r3, #0
 800863c:	d038      	beq.n	80086b0 <event_callback+0xd8>
    has_recvevent = sock->rcvevent > 0;
 800863e:	f9b5 8008 	ldrsh.w	r8, [r5, #8]
    has_sendevent = sock->sendevent != 0;
 8008642:	896f      	ldrh	r7, [r5, #10]
    SYS_ARCH_UNPROTECT(lev);
 8008644:	4630      	mov	r0, r6
 8008646:	f008 faa5 	bl	8010b94 <sys_arch_unprotect>
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800864a:	4b4d      	ldr	r3, [pc, #308]	; (8008780 <event_callback+0x1a8>)
 800864c:	681d      	ldr	r5, [r3, #0]
 800864e:	2d00      	cmp	r5, #0
 8008650:	d0e2      	beq.n	8008618 <event_callback+0x40>
 8008652:	2601      	movs	r6, #1
 8008654:	fa06 fa04 	lsl.w	sl, r6, r4
    if (scb->sem_signalled == 0) {
 8008658:	69eb      	ldr	r3, [r5, #28]
 800865a:	bb13      	cbnz	r3, 80086a2 <event_callback+0xca>
      /* semaphore not signalled yet */
      int do_signal = 0;
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 800865c:	6969      	ldr	r1, [r5, #20]
 800865e:	2900      	cmp	r1, #0
 8008660:	d05c      	beq.n	800871c <event_callback+0x144>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 8008662:	69a8      	ldr	r0, [r5, #24]
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 8008664:	b1e8      	cbz	r0, 80086a2 <event_callback+0xca>
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 8008666:	f101 0c04 	add.w	ip, r1, #4
 800866a:	e002      	b.n	8008672 <event_callback+0x9a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800866c:	3301      	adds	r3, #1
 800866e:	4298      	cmp	r0, r3
 8008670:	d017      	beq.n	80086a2 <event_callback+0xca>
    if (pollfd->fd == fd) {
 8008672:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 8008676:	4294      	cmp	r4, r2
 8008678:	d1f8      	bne.n	800866c <event_callback+0x94>
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 800867a:	f1b8 0f00 	cmp.w	r8, #0
 800867e:	dd03      	ble.n	8008688 <event_callback+0xb0>
 8008680:	f83c 2033 	ldrh.w	r2, [ip, r3, lsl #3]
 8008684:	07d2      	lsls	r2, r2, #31
 8008686:	d407      	bmi.n	8008698 <event_callback+0xc0>
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 8008688:	b11f      	cbz	r7, 8008692 <event_callback+0xba>
 800868a:	f83c 2033 	ldrh.w	r2, [ip, r3, lsl #3]
 800868e:	0792      	lsls	r2, r2, #30
 8008690:	d402      	bmi.n	8008698 <event_callback+0xc0>
      if (has_errevent) {
 8008692:	f1b9 0f00 	cmp.w	r9, #0
 8008696:	d0e9      	beq.n	800866c <event_callback+0x94>
      if (do_signal) {
        scb->sem_signalled = 1;
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 8008698:	f105 0020 	add.w	r0, r5, #32
        scb->sem_signalled = 1;
 800869c:	61ee      	str	r6, [r5, #28]
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 800869e:	f008 fa21 	bl	8010ae4 <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 80086a2:	682d      	ldr	r5, [r5, #0]
 80086a4:	2d00      	cmp	r5, #0
 80086a6:	d1d7      	bne.n	8008658 <event_callback+0x80>
 80086a8:	e7b6      	b.n	8008618 <event_callback+0x40>
      sock->sendevent = 0;
 80086aa:	4445      	add	r5, r8
 80086ac:	2300      	movs	r3, #0
 80086ae:	816b      	strh	r3, [r5, #10]
    SYS_ARCH_UNPROTECT(lev);
 80086b0:	4630      	mov	r0, r6
}
 80086b2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    SYS_ARCH_UNPROTECT(lev);
 80086b6:	f008 ba6d 	b.w	8010b94 <sys_arch_unprotect>
      if (sock->sendevent) {
 80086ba:	4445      	add	r5, r8
 80086bc:	896b      	ldrh	r3, [r5, #10]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d148      	bne.n	8008754 <event_callback+0x17c>
      sock->sendevent = 1;
 80086c2:	f04f 0a01 	mov.w	sl, #1
  if (sock->select_waiting && check_waiters) {
 80086c6:	7bab      	ldrb	r3, [r5, #14]
      sock->sendevent = 1;
 80086c8:	f8a5 a00a 	strh.w	sl, [r5, #10]
  if (sock->select_waiting && check_waiters) {
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d0ef      	beq.n	80086b0 <event_callback+0xd8>
    has_recvevent = sock->rcvevent > 0;
 80086d0:	f9b5 8008 	ldrsh.w	r8, [r5, #8]
    has_errevent = sock->errevent != 0;
 80086d4:	4657      	mov	r7, sl
 80086d6:	f8b5 900c 	ldrh.w	r9, [r5, #12]
 80086da:	e7b3      	b.n	8008644 <event_callback+0x6c>
      sock->rcvevent--;
 80086dc:	4445      	add	r5, r8
 80086de:	892b      	ldrh	r3, [r5, #8]
 80086e0:	3b01      	subs	r3, #1
 80086e2:	812b      	strh	r3, [r5, #8]
  if (sock->select_waiting && check_waiters) {
 80086e4:	e7e4      	b.n	80086b0 <event_callback+0xd8>
      sock->rcvevent++;
 80086e6:	4445      	add	r5, r8
 80086e8:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 80086ec:	f108 0801 	add.w	r8, r8, #1
 80086f0:	fa0f f888 	sxth.w	r8, r8
      if (sock->rcvevent > 1) {
 80086f4:	f1b8 0f01 	cmp.w	r8, #1
      sock->rcvevent++;
 80086f8:	f8a5 8008 	strh.w	r8, [r5, #8]
      if (sock->rcvevent > 1) {
 80086fc:	dcd8      	bgt.n	80086b0 <event_callback+0xd8>
  if (sock->select_waiting && check_waiters) {
 80086fe:	7bab      	ldrb	r3, [r5, #14]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d0d5      	beq.n	80086b0 <event_callback+0xd8>
    has_sendevent = sock->sendevent != 0;
 8008704:	896f      	ldrh	r7, [r5, #10]
    has_errevent = sock->errevent != 0;
 8008706:	f8b5 900c 	ldrh.w	r9, [r5, #12]
 800870a:	e79b      	b.n	8008644 <event_callback+0x6c>
        if (evt == NETCONN_EVT_RCVPLUS) {
 800870c:	b90f      	cbnz	r7, 8008712 <event_callback+0x13a>
          conn->socket--;
 800870e:	3c01      	subs	r4, #1
 8008710:	61ac      	str	r4, [r5, #24]
        SYS_ARCH_UNPROTECT(lev);
 8008712:	4618      	mov	r0, r3
}
 8008714:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        SYS_ARCH_UNPROTECT(lev);
 8008718:	f008 ba3c 	b.w	8010b94 <sys_arch_unprotect>
        if (has_recvevent) {
 800871c:	f1b8 0f00 	cmp.w	r8, #0
 8008720:	dd05      	ble.n	800872e <event_callback+0x156>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 8008722:	68ab      	ldr	r3, [r5, #8]
 8008724:	b11b      	cbz	r3, 800872e <event_callback+0x156>
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	ea1a 0f03 	tst.w	sl, r3
 800872c:	d1b4      	bne.n	8008698 <event_callback+0xc0>
        if (has_sendevent) {
 800872e:	b12f      	cbz	r7, 800873c <event_callback+0x164>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 8008730:	68eb      	ldr	r3, [r5, #12]
 8008732:	b11b      	cbz	r3, 800873c <event_callback+0x164>
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	ea1a 0f03 	tst.w	sl, r3
 800873a:	d1ad      	bne.n	8008698 <event_callback+0xc0>
        if (has_errevent) {
 800873c:	f1b9 0f00 	cmp.w	r9, #0
 8008740:	d0af      	beq.n	80086a2 <event_callback+0xca>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 8008742:	692b      	ldr	r3, [r5, #16]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d0ac      	beq.n	80086a2 <event_callback+0xca>
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	ea1a 0f03 	tst.w	sl, r3
 800874e:	d0a8      	beq.n	80086a2 <event_callback+0xca>
 8008750:	e7a2      	b.n	8008698 <event_callback+0xc0>
 8008752:	4770      	bx	lr
      sock->sendevent = 1;
 8008754:	2301      	movs	r3, #1
 8008756:	816b      	strh	r3, [r5, #10]
  if (sock->select_waiting && check_waiters) {
 8008758:	e7aa      	b.n	80086b0 <event_callback+0xd8>
 800875a:	4445      	add	r5, r8
      LWIP_ASSERT("unknown event", 0);
 800875c:	4b09      	ldr	r3, [pc, #36]	; (8008784 <event_callback+0x1ac>)
 800875e:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 8008762:	4909      	ldr	r1, [pc, #36]	; (8008788 <event_callback+0x1b0>)
 8008764:	4809      	ldr	r0, [pc, #36]	; (800878c <event_callback+0x1b4>)
 8008766:	f008 ff4b 	bl	8011600 <iprintf>
  if (sock->select_waiting && check_waiters) {
 800876a:	7bab      	ldrb	r3, [r5, #14]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d09f      	beq.n	80086b0 <event_callback+0xd8>
    has_recvevent = sock->rcvevent > 0;
 8008770:	f9b5 8008 	ldrsh.w	r8, [r5, #8]
 8008774:	e7c6      	b.n	8008704 <event_callback+0x12c>
 8008776:	bf00      	nop
 8008778:	2400b4fc 	.word	0x2400b4fc
 800877c:	2400e928 	.word	0x2400e928
 8008780:	2400b4f8 	.word	0x2400b4f8
 8008784:	08012d24 	.word	0x08012d24
 8008788:	08012e78 	.word	0x08012e78
 800878c:	080124d0 	.word	0x080124d0

08008790 <lwip_accept>:
{
 8008790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t port = 0;
 8008794:	2300      	movs	r3, #0
{
 8008796:	b088      	sub	sp, #32
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8008798:	2803      	cmp	r0, #3
  u16_t port = 0;
 800879a:	f8ad 3006 	strh.w	r3, [sp, #6]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800879e:	d867      	bhi.n	8008870 <lwip_accept+0xe0>
    if (sock->conn) {
 80087a0:	4f60      	ldr	r7, [pc, #384]	; (8008924 <lwip_accept+0x194>)
 80087a2:	0104      	lsls	r4, r0, #4
 80087a4:	5938      	ldr	r0, [r7, r4]
 80087a6:	2800      	cmp	r0, #0
 80087a8:	d062      	beq.n	8008870 <lwip_accept+0xe0>
  err = netconn_accept(sock->conn, &newconn);
 80087aa:	460d      	mov	r5, r1
 80087ac:	a902      	add	r1, sp, #8
 80087ae:	4616      	mov	r6, r2
 80087b0:	f7fe f934 	bl	8006a1c <netconn_accept>
  if (err != ERR_OK) {
 80087b4:	4603      	mov	r3, r0
 80087b6:	2800      	cmp	r0, #0
 80087b8:	f040 808f 	bne.w	80088da <lwip_accept+0x14a>
  LWIP_ASSERT("newconn != NULL", newconn != NULL);
 80087bc:	9802      	ldr	r0, [sp, #8]
 80087be:	2800      	cmp	r0, #0
 80087c0:	d05f      	beq.n	8008882 <lwip_accept+0xf2>
  newsock = alloc_socket(newconn, 1);
 80087c2:	2101      	movs	r1, #1
 80087c4:	f7ff fc56 	bl	8008074 <alloc_socket>
  if (newsock == -1) {
 80087c8:	f1b0 3fff 	cmp.w	r0, #4294967295
  newsock = alloc_socket(newconn, 1);
 80087cc:	4680      	mov	r8, r0
  if (newsock == -1) {
 80087ce:	f000 8098 	beq.w	8008902 <lwip_accept+0x172>
  LWIP_ASSERT("invalid socket index", (newsock >= LWIP_SOCKET_OFFSET) && (newsock < NUM_SOCKETS + LWIP_SOCKET_OFFSET));
 80087d2:	2803      	cmp	r0, #3
 80087d4:	d844      	bhi.n	8008860 <lwip_accept+0xd0>
  SYS_ARCH_PROTECT(lev);
 80087d6:	f008 f9d1 	bl	8010b7c <sys_arch_protect>
  recvevent = (s16_t)(-1 - newconn->socket);
 80087da:	9b02      	ldr	r3, [sp, #8]
 80087dc:	699c      	ldr	r4, [r3, #24]
  newconn->socket = newsock;
 80087de:	f8c3 8018 	str.w	r8, [r3, #24]
  SYS_ARCH_UNPROTECT(lev);
 80087e2:	f008 f9d7 	bl	8010b94 <sys_arch_unprotect>
  if (newconn->callback) {
 80087e6:	9b02      	ldr	r3, [sp, #8]
 80087e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ea:	b18b      	cbz	r3, 8008810 <lwip_accept+0x80>
  recvevent = (s16_t)(-1 - newconn->socket);
 80087ec:	43e4      	mvns	r4, r4
    LOCK_TCPIP_CORE();
 80087ee:	484e      	ldr	r0, [pc, #312]	; (8008928 <lwip_accept+0x198>)
 80087f0:	f008 f9a6 	bl	8010b40 <sys_mutex_lock>
  recvevent = (s16_t)(-1 - newconn->socket);
 80087f4:	b224      	sxth	r4, r4
    while (recvevent > 0) {
 80087f6:	2c00      	cmp	r4, #0
 80087f8:	dd07      	ble.n	800880a <lwip_accept+0x7a>
      newconn->callback(newconn, NETCONN_EVT_RCVPLUS, 0);
 80087fa:	9802      	ldr	r0, [sp, #8]
 80087fc:	2200      	movs	r2, #0
      recvevent--;
 80087fe:	3c01      	subs	r4, #1
      newconn->callback(newconn, NETCONN_EVT_RCVPLUS, 0);
 8008800:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008802:	4611      	mov	r1, r2
 8008804:	4798      	blx	r3
    while (recvevent > 0) {
 8008806:	2c00      	cmp	r4, #0
 8008808:	d1f7      	bne.n	80087fa <lwip_accept+0x6a>
    UNLOCK_TCPIP_CORE();
 800880a:	4847      	ldr	r0, [pc, #284]	; (8008928 <lwip_accept+0x198>)
 800880c:	f008 f99e 	bl	8010b4c <sys_mutex_unlock>
  if ((addr != NULL) && (addrlen != NULL)) {
 8008810:	b315      	cbz	r5, 8008858 <lwip_accept+0xc8>
 8008812:	b30e      	cbz	r6, 8008858 <lwip_accept+0xc8>
    err = netconn_peer(newconn, &naddr, &port);
 8008814:	2300      	movs	r3, #0
 8008816:	f10d 0206 	add.w	r2, sp, #6
 800881a:	a903      	add	r1, sp, #12
 800881c:	9802      	ldr	r0, [sp, #8]
 800881e:	f7fe f86b 	bl	80068f8 <netconn_getaddr>
    if (err != ERR_OK) {
 8008822:	4604      	mov	r4, r0
 8008824:	2800      	cmp	r0, #0
 8008826:	d135      	bne.n	8008894 <lwip_accept+0x104>
    IPADDR_PORT_TO_SOCKADDR(&tempaddr, &naddr, port);
 8008828:	f44f 7304 	mov.w	r3, #528	; 0x210
 800882c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8008830:	f8ad 3010 	strh.w	r3, [sp, #16]
 8008834:	f000 fdb0 	bl	8009398 <lwip_htons>
    if (*addrlen > tempaddr.sa.sa_len) {
 8008838:	6832      	ldr	r2, [r6, #0]
    IPADDR_PORT_TO_SOCKADDR(&tempaddr, &naddr, port);
 800883a:	9b03      	ldr	r3, [sp, #12]
    if (*addrlen > tempaddr.sa.sa_len) {
 800883c:	2a10      	cmp	r2, #16
    IPADDR_PORT_TO_SOCKADDR(&tempaddr, &naddr, port);
 800883e:	f8ad 0012 	strh.w	r0, [sp, #18]
 8008842:	9305      	str	r3, [sp, #20]
 8008844:	e9cd 4406 	strd	r4, r4, [sp, #24]
    if (*addrlen > tempaddr.sa.sa_len) {
 8008848:	d902      	bls.n	8008850 <lwip_accept+0xc0>
      *addrlen = tempaddr.sa.sa_len;
 800884a:	2310      	movs	r3, #16
 800884c:	461a      	mov	r2, r3
 800884e:	6033      	str	r3, [r6, #0]
    MEMCPY(addr, &tempaddr, *addrlen);
 8008850:	a904      	add	r1, sp, #16
 8008852:	4628      	mov	r0, r5
 8008854:	f009 f905 	bl	8011a62 <memcpy>
}
 8008858:	4640      	mov	r0, r8
 800885a:	b008      	add	sp, #32
 800885c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("invalid socket index", (newsock >= LWIP_SOCKET_OFFSET) && (newsock < NUM_SOCKETS + LWIP_SOCKET_OFFSET));
 8008860:	4b32      	ldr	r3, [pc, #200]	; (800892c <lwip_accept+0x19c>)
 8008862:	f44f 7225 	mov.w	r2, #660	; 0x294
 8008866:	4932      	ldr	r1, [pc, #200]	; (8008930 <lwip_accept+0x1a0>)
 8008868:	4832      	ldr	r0, [pc, #200]	; (8008934 <lwip_accept+0x1a4>)
 800886a:	f008 fec9 	bl	8011600 <iprintf>
 800886e:	e7b2      	b.n	80087d6 <lwip_accept+0x46>
    return -1;
 8008870:	f04f 38ff 	mov.w	r8, #4294967295
    set_errno(EBADF);
 8008874:	4b30      	ldr	r3, [pc, #192]	; (8008938 <lwip_accept+0x1a8>)
 8008876:	2209      	movs	r2, #9
}
 8008878:	4640      	mov	r0, r8
    set_errno(EBADF);
 800887a:	601a      	str	r2, [r3, #0]
}
 800887c:	b008      	add	sp, #32
 800887e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("newconn != NULL", newconn != NULL);
 8008882:	4b2a      	ldr	r3, [pc, #168]	; (800892c <lwip_accept+0x19c>)
 8008884:	f240 228b 	movw	r2, #651	; 0x28b
 8008888:	492c      	ldr	r1, [pc, #176]	; (800893c <lwip_accept+0x1ac>)
 800888a:	482a      	ldr	r0, [pc, #168]	; (8008934 <lwip_accept+0x1a4>)
 800888c:	f008 feb8 	bl	8011600 <iprintf>
  newsock = alloc_socket(newconn, 1);
 8008890:	9802      	ldr	r0, [sp, #8]
 8008892:	e796      	b.n	80087c2 <lwip_accept+0x32>
      netconn_delete(newconn);
 8008894:	9802      	ldr	r0, [sp, #8]
 8008896:	f7fe f80b 	bl	80068b0 <netconn_delete>
  SYS_ARCH_PROTECT(lev);
 800889a:	f008 f96f 	bl	8010b7c <sys_arch_protect>
  sock->lastdata.pbuf = NULL;
 800889e:	2200      	movs	r2, #0
  *lastdata = sock->lastdata;
 80088a0:	ea4f 1308 	mov.w	r3, r8, lsl #4
 80088a4:	eb07 1808 	add.w	r8, r7, r8, lsl #4
  *conn = sock->conn;
 80088a8:	58fd      	ldr	r5, [r7, r3]
  *lastdata = sock->lastdata;
 80088aa:	f8d8 6004 	ldr.w	r6, [r8, #4]
  sock->lastdata.pbuf = NULL;
 80088ae:	f8c8 2004 	str.w	r2, [r8, #4]
  sock->conn = NULL;
 80088b2:	50fa      	str	r2, [r7, r3]
  SYS_ARCH_UNPROTECT(lev);
 80088b4:	f008 f96e 	bl	8010b94 <sys_arch_unprotect>
  if (lastdata->pbuf != NULL) {
 80088b8:	b116      	cbz	r6, 80088c0 <lwip_accept+0x130>
      pbuf_free(lastdata->pbuf);
 80088ba:	4630      	mov	r0, r6
 80088bc:	f001 fcee 	bl	800a29c <pbuf_free>
  if (conn != NULL) {
 80088c0:	b115      	cbz	r5, 80088c8 <lwip_accept+0x138>
    netconn_delete(conn);
 80088c2:	4628      	mov	r0, r5
 80088c4:	f7fd fff4 	bl	80068b0 <netconn_delete>
      sock_set_errno(sock, err_to_errno(err));
 80088c8:	4620      	mov	r0, r4
 80088ca:	f7ff fb71 	bl	8007fb0 <err_to_errno>
 80088ce:	b108      	cbz	r0, 80088d4 <lwip_accept+0x144>
 80088d0:	4b19      	ldr	r3, [pc, #100]	; (8008938 <lwip_accept+0x1a8>)
 80088d2:	6018      	str	r0, [r3, #0]
    return -1;
 80088d4:	f04f 38ff 	mov.w	r8, #4294967295
 80088d8:	e7be      	b.n	8008858 <lwip_accept+0xc8>
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 80088da:	593a      	ldr	r2, [r7, r4]
 80088dc:	7812      	ldrb	r2, [r2, #0]
 80088de:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80088e2:	2a10      	cmp	r2, #16
 80088e4:	d005      	beq.n	80088f2 <lwip_accept+0x162>
      sock_set_errno(sock, EOPNOTSUPP);
 80088e6:	4b14      	ldr	r3, [pc, #80]	; (8008938 <lwip_accept+0x1a8>)
 80088e8:	225f      	movs	r2, #95	; 0x5f
    return -1;
 80088ea:	f04f 38ff 	mov.w	r8, #4294967295
      sock_set_errno(sock, EOPNOTSUPP);
 80088ee:	601a      	str	r2, [r3, #0]
 80088f0:	e7b2      	b.n	8008858 <lwip_accept+0xc8>
    } else if (err == ERR_CLSD) {
 80088f2:	330f      	adds	r3, #15
 80088f4:	d10c      	bne.n	8008910 <lwip_accept+0x180>
      sock_set_errno(sock, EINVAL);
 80088f6:	4b10      	ldr	r3, [pc, #64]	; (8008938 <lwip_accept+0x1a8>)
 80088f8:	2216      	movs	r2, #22
    return -1;
 80088fa:	f04f 38ff 	mov.w	r8, #4294967295
      sock_set_errno(sock, EINVAL);
 80088fe:	601a      	str	r2, [r3, #0]
 8008900:	e7aa      	b.n	8008858 <lwip_accept+0xc8>
    netconn_delete(newconn);
 8008902:	9802      	ldr	r0, [sp, #8]
 8008904:	f7fd ffd4 	bl	80068b0 <netconn_delete>
    sock_set_errno(sock, ENFILE);
 8008908:	4b0b      	ldr	r3, [pc, #44]	; (8008938 <lwip_accept+0x1a8>)
 800890a:	2217      	movs	r2, #23
 800890c:	601a      	str	r2, [r3, #0]
    return -1;
 800890e:	e7a3      	b.n	8008858 <lwip_accept+0xc8>
      sock_set_errno(sock, err_to_errno(err));
 8008910:	f7ff fb4e 	bl	8007fb0 <err_to_errno>
 8008914:	2800      	cmp	r0, #0
 8008916:	d0dd      	beq.n	80088d4 <lwip_accept+0x144>
 8008918:	4b07      	ldr	r3, [pc, #28]	; (8008938 <lwip_accept+0x1a8>)
    return -1;
 800891a:	f04f 38ff 	mov.w	r8, #4294967295
      sock_set_errno(sock, err_to_errno(err));
 800891e:	6018      	str	r0, [r3, #0]
 8008920:	e79a      	b.n	8008858 <lwip_accept+0xc8>
 8008922:	bf00      	nop
 8008924:	2400b4fc 	.word	0x2400b4fc
 8008928:	2400b53c 	.word	0x2400b53c
 800892c:	08012d24 	.word	0x08012d24
 8008930:	08012e98 	.word	0x08012e98
 8008934:	080124d0 	.word	0x080124d0
 8008938:	2400e928 	.word	0x2400e928
 800893c:	08012e88 	.word	0x08012e88

08008940 <lwip_bind>:
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8008940:	2803      	cmp	r0, #3
{
 8008942:	b530      	push	{r4, r5, lr}
 8008944:	b083      	sub	sp, #12
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8008946:	d817      	bhi.n	8008978 <lwip_bind+0x38>
    if (sock->conn) {
 8008948:	4d19      	ldr	r5, [pc, #100]	; (80089b0 <lwip_bind+0x70>)
 800894a:	0104      	lsls	r4, r0, #4
 800894c:	592b      	ldr	r3, [r5, r4]
 800894e:	b19b      	cbz	r3, 8008978 <lwip_bind+0x38>
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 8008950:	2a10      	cmp	r2, #16
 8008952:	d118      	bne.n	8008986 <lwip_bind+0x46>
 8008954:	784b      	ldrb	r3, [r1, #1]
 8008956:	2b02      	cmp	r3, #2
 8008958:	d115      	bne.n	8008986 <lwip_bind+0x46>
 800895a:	078b      	lsls	r3, r1, #30
 800895c:	d113      	bne.n	8008986 <lwip_bind+0x46>
  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
 800895e:	684b      	ldr	r3, [r1, #4]
 8008960:	8848      	ldrh	r0, [r1, #2]
 8008962:	9301      	str	r3, [sp, #4]
 8008964:	f000 fd18 	bl	8009398 <lwip_htons>
  err = netconn_bind(sock->conn, &local_addr, local_port);
 8008968:	a901      	add	r1, sp, #4
  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
 800896a:	4602      	mov	r2, r0
  err = netconn_bind(sock->conn, &local_addr, local_port);
 800896c:	5928      	ldr	r0, [r5, r4]
 800896e:	f7fe f805 	bl	800697c <netconn_bind>
  if (err != ERR_OK) {
 8008972:	b988      	cbnz	r0, 8008998 <lwip_bind+0x58>
}
 8008974:	b003      	add	sp, #12
 8008976:	bd30      	pop	{r4, r5, pc}
    set_errno(EBADF);
 8008978:	4b0e      	ldr	r3, [pc, #56]	; (80089b4 <lwip_bind+0x74>)
 800897a:	2209      	movs	r2, #9
    return -1;
 800897c:	f04f 30ff 	mov.w	r0, #4294967295
    set_errno(EBADF);
 8008980:	601a      	str	r2, [r3, #0]
}
 8008982:	b003      	add	sp, #12
 8008984:	bd30      	pop	{r4, r5, pc}
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 8008986:	4b0c      	ldr	r3, [pc, #48]	; (80089b8 <lwip_bind+0x78>)
 8008988:	f240 22e2 	movw	r2, #738	; 0x2e2
 800898c:	490b      	ldr	r1, [pc, #44]	; (80089bc <lwip_bind+0x7c>)
 800898e:	480c      	ldr	r0, [pc, #48]	; (80089c0 <lwip_bind+0x80>)
 8008990:	f008 fe36 	bl	8011600 <iprintf>
 8008994:	f06f 000f 	mvn.w	r0, #15
 8008998:	f7ff fb0a 	bl	8007fb0 <err_to_errno>
 800899c:	4603      	mov	r3, r0
 800899e:	b910      	cbnz	r0, 80089a6 <lwip_bind+0x66>
 80089a0:	f04f 30ff 	mov.w	r0, #4294967295
 80089a4:	e7e6      	b.n	8008974 <lwip_bind+0x34>
    sock_set_errno(sock, err_to_errno(err));
 80089a6:	4a03      	ldr	r2, [pc, #12]	; (80089b4 <lwip_bind+0x74>)
    return -1;
 80089a8:	f04f 30ff 	mov.w	r0, #4294967295
    sock_set_errno(sock, err_to_errno(err));
 80089ac:	6013      	str	r3, [r2, #0]
 80089ae:	e7e1      	b.n	8008974 <lwip_bind+0x34>
 80089b0:	2400b4fc 	.word	0x2400b4fc
 80089b4:	2400e928 	.word	0x2400e928
 80089b8:	08012d24 	.word	0x08012d24
 80089bc:	08012eb0 	.word	0x08012eb0
 80089c0:	080124d0 	.word	0x080124d0

080089c4 <lwip_close>:
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 80089c4:	2803      	cmp	r0, #3
{
 80089c6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 80089ca:	d827      	bhi.n	8008a1c <lwip_close+0x58>
    if (sock->conn) {
 80089cc:	4d1f      	ldr	r5, [pc, #124]	; (8008a4c <lwip_close+0x88>)
 80089ce:	0107      	lsls	r7, r0, #4
 80089d0:	59eb      	ldr	r3, [r5, r7]
 80089d2:	eb05 1400 	add.w	r4, r5, r0, lsl #4
 80089d6:	b30b      	cbz	r3, 8008a1c <lwip_close+0x58>
  err = netconn_prepare_delete(sock->conn);
 80089d8:	4618      	mov	r0, r3
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 80089da:	f893 8000 	ldrb.w	r8, [r3]
  err = netconn_prepare_delete(sock->conn);
 80089de:	f7fd ff4b 	bl	8006878 <netconn_prepare_delete>
  if (err != ERR_OK) {
 80089e2:	4606      	mov	r6, r0
 80089e4:	bb30      	cbnz	r0, 8008a34 <lwip_close+0x70>
  SYS_ARCH_PROTECT(lev);
 80089e6:	f008 f8c9 	bl	8010b7c <sys_arch_protect>
  *lastdata = sock->lastdata;
 80089ea:	f8d4 9004 	ldr.w	r9, [r4, #4]
  sock->lastdata.pbuf = NULL;
 80089ee:	6066      	str	r6, [r4, #4]
  *conn = sock->conn;
 80089f0:	59ec      	ldr	r4, [r5, r7]
  sock->conn = NULL;
 80089f2:	51ee      	str	r6, [r5, r7]
  SYS_ARCH_UNPROTECT(lev);
 80089f4:	f008 f8ce 	bl	8010b94 <sys_arch_unprotect>
  if (lastdata->pbuf != NULL) {
 80089f8:	f1b9 0f00 	cmp.w	r9, #0
 80089fc:	d007      	beq.n	8008a0e <lwip_close+0x4a>
    if (is_tcp) {
 80089fe:	f008 08f0 	and.w	r8, r8, #240	; 0xf0
      pbuf_free(lastdata->pbuf);
 8008a02:	4648      	mov	r0, r9
    if (is_tcp) {
 8008a04:	f1b8 0f10 	cmp.w	r8, #16
 8008a08:	d10f      	bne.n	8008a2a <lwip_close+0x66>
      pbuf_free(lastdata->pbuf);
 8008a0a:	f001 fc47 	bl	800a29c <pbuf_free>
  if (conn != NULL) {
 8008a0e:	b114      	cbz	r4, 8008a16 <lwip_close+0x52>
    netconn_delete(conn);
 8008a10:	4620      	mov	r0, r4
 8008a12:	f7fd ff4d 	bl	80068b0 <netconn_delete>
  return 0;
 8008a16:	2000      	movs	r0, #0
}
 8008a18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    set_errno(EBADF);
 8008a1c:	4b0c      	ldr	r3, [pc, #48]	; (8008a50 <lwip_close+0x8c>)
 8008a1e:	2209      	movs	r2, #9
    return -1;
 8008a20:	f04f 30ff 	mov.w	r0, #4294967295
    set_errno(EBADF);
 8008a24:	601a      	str	r2, [r3, #0]
}
 8008a26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      netbuf_delete(lastdata->netbuf);
 8008a2a:	f7ff facf 	bl	8007fcc <netbuf_delete>
  if (conn != NULL) {
 8008a2e:	2c00      	cmp	r4, #0
 8008a30:	d1ee      	bne.n	8008a10 <lwip_close+0x4c>
 8008a32:	e7f0      	b.n	8008a16 <lwip_close+0x52>
    sock_set_errno(sock, err_to_errno(err));
 8008a34:	f7ff fabc 	bl	8007fb0 <err_to_errno>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	b120      	cbz	r0, 8008a46 <lwip_close+0x82>
 8008a3c:	4a04      	ldr	r2, [pc, #16]	; (8008a50 <lwip_close+0x8c>)
    return -1;
 8008a3e:	f04f 30ff 	mov.w	r0, #4294967295
    sock_set_errno(sock, err_to_errno(err));
 8008a42:	6013      	str	r3, [r2, #0]
 8008a44:	e7e8      	b.n	8008a18 <lwip_close+0x54>
    return -1;
 8008a46:	f04f 30ff 	mov.w	r0, #4294967295
 8008a4a:	e7e5      	b.n	8008a18 <lwip_close+0x54>
 8008a4c:	2400b4fc 	.word	0x2400b4fc
 8008a50:	2400e928 	.word	0x2400e928

08008a54 <lwip_listen>:
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8008a54:	2803      	cmp	r0, #3
{
 8008a56:	b538      	push	{r3, r4, r5, lr}
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8008a58:	d80a      	bhi.n	8008a70 <lwip_listen+0x1c>
    if (sock->conn) {
 8008a5a:	4d14      	ldr	r5, [pc, #80]	; (8008aac <lwip_listen+0x58>)
 8008a5c:	0104      	lsls	r4, r0, #4
 8008a5e:	5928      	ldr	r0, [r5, r4]
 8008a60:	b130      	cbz	r0, 8008a70 <lwip_listen+0x1c>
  err = netconn_listen_with_backlog(sock->conn, (u8_t)backlog);
 8008a62:	f381 0108 	usat	r1, #8, r1
 8008a66:	b2c9      	uxtb	r1, r1
 8008a68:	f7fd ffb4 	bl	80069d4 <netconn_listen_with_backlog>
  if (err != ERR_OK) {
 8008a6c:	b930      	cbnz	r0, 8008a7c <lwip_listen+0x28>
}
 8008a6e:	bd38      	pop	{r3, r4, r5, pc}
    set_errno(EBADF);
 8008a70:	4b0f      	ldr	r3, [pc, #60]	; (8008ab0 <lwip_listen+0x5c>)
 8008a72:	2209      	movs	r2, #9
    return -1;
 8008a74:	f04f 30ff 	mov.w	r0, #4294967295
    set_errno(EBADF);
 8008a78:	601a      	str	r2, [r3, #0]
}
 8008a7a:	bd38      	pop	{r3, r4, r5, pc}
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 8008a7c:	592b      	ldr	r3, [r5, r4]
 8008a7e:	781b      	ldrb	r3, [r3, #0]
 8008a80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a84:	2b10      	cmp	r3, #16
 8008a86:	d005      	beq.n	8008a94 <lwip_listen+0x40>
      sock_set_errno(sock, EOPNOTSUPP);
 8008a88:	4b09      	ldr	r3, [pc, #36]	; (8008ab0 <lwip_listen+0x5c>)
 8008a8a:	225f      	movs	r2, #95	; 0x5f
    return -1;
 8008a8c:	f04f 30ff 	mov.w	r0, #4294967295
      sock_set_errno(sock, EOPNOTSUPP);
 8008a90:	601a      	str	r2, [r3, #0]
}
 8008a92:	bd38      	pop	{r3, r4, r5, pc}
      sock_set_errno(sock, err_to_errno(err));
 8008a94:	f7ff fa8c 	bl	8007fb0 <err_to_errno>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	b120      	cbz	r0, 8008aa6 <lwip_listen+0x52>
 8008a9c:	4a04      	ldr	r2, [pc, #16]	; (8008ab0 <lwip_listen+0x5c>)
    return -1;
 8008a9e:	f04f 30ff 	mov.w	r0, #4294967295
      sock_set_errno(sock, err_to_errno(err));
 8008aa2:	6013      	str	r3, [r2, #0]
}
 8008aa4:	bd38      	pop	{r3, r4, r5, pc}
    return -1;
 8008aa6:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008aaa:	bd38      	pop	{r3, r4, r5, pc}
 8008aac:	2400b4fc 	.word	0x2400b4fc
 8008ab0:	2400e928 	.word	0x2400e928

08008ab4 <lwip_recvfrom>:
{
 8008ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8008ab8:	2803      	cmp	r0, #3
{
 8008aba:	b08a      	sub	sp, #40	; 0x28
 8008abc:	9d11      	ldr	r5, [sp, #68]	; 0x44
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8008abe:	d835      	bhi.n	8008b2c <lwip_recvfrom+0x78>
    if (sock->conn) {
 8008ac0:	4e36      	ldr	r6, [pc, #216]	; (8008b9c <lwip_recvfrom+0xe8>)
 8008ac2:	0107      	lsls	r7, r0, #4
 8008ac4:	f856 8007 	ldr.w	r8, [r6, r7]
 8008ac8:	eb06 1000 	add.w	r0, r6, r0, lsl #4
 8008acc:	f1b8 0f00 	cmp.w	r8, #0
 8008ad0:	d02c      	beq.n	8008b2c <lwip_recvfrom+0x78>
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 8008ad2:	f898 8000 	ldrb.w	r8, [r8]
 8008ad6:	f008 08f0 	and.w	r8, r8, #240	; 0xf0
 8008ada:	f1b8 0f10 	cmp.w	r8, #16
 8008ade:	d03f      	beq.n	8008b60 <lwip_recvfrom+0xac>
    u16_t datagram_len = 0;
 8008ae0:	469e      	mov	lr, r3
    msg.msg_iov = &vec;
 8008ae2:	ab01      	add	r3, sp, #4
 8008ae4:	4614      	mov	r4, r2
    vec.iov_len = len;
 8008ae6:	9202      	str	r2, [sp, #8]
    msg.msg_iov = &vec;
 8008ae8:	9305      	str	r3, [sp, #20]
    msg.msg_iovlen = 1;
 8008aea:	2301      	movs	r3, #1
    msg.msg_name = from;
 8008aec:	9a10      	ldr	r2, [sp, #64]	; 0x40
    msg.msg_iovlen = 1;
 8008aee:	9306      	str	r3, [sp, #24]
    u16_t datagram_len = 0;
 8008af0:	2300      	movs	r3, #0
    vec.iov_base = mem;
 8008af2:	9101      	str	r1, [sp, #4]
    msg.msg_name = from;
 8008af4:	9203      	str	r2, [sp, #12]
    u16_t datagram_len = 0;
 8008af6:	f8ad 3002 	strh.w	r3, [sp, #2]
    msg.msg_flags = 0;
 8008afa:	9309      	str	r3, [sp, #36]	; 0x24
    msg.msg_controllen = 0;
 8008afc:	e9cd 3307 	strd	r3, r3, [sp, #28]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 8008b00:	b1ed      	cbz	r5, 8008b3e <lwip_recvfrom+0x8a>
 8008b02:	682b      	ldr	r3, [r5, #0]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 8008b04:	4671      	mov	r1, lr
 8008b06:	aa03      	add	r2, sp, #12
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 8008b08:	9304      	str	r3, [sp, #16]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 8008b0a:	f10d 0302 	add.w	r3, sp, #2
 8008b0e:	f7ff fcd3 	bl	80084b8 <lwip_recvfrom_udp_raw.constprop.0>
    if (err != ERR_OK) {
 8008b12:	2800      	cmp	r0, #0
 8008b14:	d13a      	bne.n	8008b8c <lwip_recvfrom+0xd8>
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 8008b16:	f8bd 2002 	ldrh.w	r2, [sp, #2]
      *fromlen = msg.msg_namelen;
 8008b1a:	9b04      	ldr	r3, [sp, #16]
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 8008b1c:	4294      	cmp	r4, r2
      *fromlen = msg.msg_namelen;
 8008b1e:	602b      	str	r3, [r5, #0]
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 8008b20:	bf28      	it	cs
 8008b22:	4614      	movcs	r4, r2
}
 8008b24:	4620      	mov	r0, r4
 8008b26:	b00a      	add	sp, #40	; 0x28
 8008b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return -1;
 8008b2c:	f04f 34ff 	mov.w	r4, #4294967295
    set_errno(EBADF);
 8008b30:	4b1b      	ldr	r3, [pc, #108]	; (8008ba0 <lwip_recvfrom+0xec>)
 8008b32:	2209      	movs	r2, #9
}
 8008b34:	4620      	mov	r0, r4
    set_errno(EBADF);
 8008b36:	601a      	str	r2, [r3, #0]
}
 8008b38:	b00a      	add	sp, #40	; 0x28
 8008b3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 8008b3e:	f10d 0302 	add.w	r3, sp, #2
 8008b42:	4671      	mov	r1, lr
 8008b44:	aa03      	add	r2, sp, #12
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 8008b46:	9504      	str	r5, [sp, #16]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 8008b48:	f7ff fcb6 	bl	80084b8 <lwip_recvfrom_udp_raw.constprop.0>
    if (err != ERR_OK) {
 8008b4c:	b9f0      	cbnz	r0, 8008b8c <lwip_recvfrom+0xd8>
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 8008b4e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8008b52:	429c      	cmp	r4, r3
 8008b54:	bf28      	it	cs
 8008b56:	461c      	movcs	r4, r3
}
 8008b58:	4620      	mov	r0, r4
 8008b5a:	b00a      	add	sp, #40	; 0x28
 8008b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = lwip_recv_tcp(sock, mem, len, flags);
 8008b60:	f7ff fbbc 	bl	80082dc <lwip_recv_tcp>
  if (from && fromlen)
 8008b64:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ret = lwip_recv_tcp(sock, mem, len, flags);
 8008b66:	4604      	mov	r4, r0
  if (from && fromlen)
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d0db      	beq.n	8008b24 <lwip_recvfrom+0x70>
 8008b6c:	2d00      	cmp	r5, #0
 8008b6e:	d0d9      	beq.n	8008b24 <lwip_recvfrom+0x70>
    netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
 8008b70:	aa01      	add	r2, sp, #4
 8008b72:	a903      	add	r1, sp, #12
 8008b74:	59f0      	ldr	r0, [r6, r7]
 8008b76:	2300      	movs	r3, #0
 8008b78:	f7fd febe 	bl	80068f8 <netconn_getaddr>
      return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
 8008b7c:	462b      	mov	r3, r5
 8008b7e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008b80:	a803      	add	r0, sp, #12
 8008b82:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8008b86:	f7ff fc55 	bl	8008434 <lwip_sock_make_addr.constprop.0.isra.0>
 8008b8a:	e7cb      	b.n	8008b24 <lwip_recvfrom+0x70>
      sock_set_errno(sock, err_to_errno(err));
 8008b8c:	f7ff fa10 	bl	8007fb0 <err_to_errno>
 8008b90:	b108      	cbz	r0, 8008b96 <lwip_recvfrom+0xe2>
 8008b92:	4b03      	ldr	r3, [pc, #12]	; (8008ba0 <lwip_recvfrom+0xec>)
 8008b94:	6018      	str	r0, [r3, #0]
      return -1;
 8008b96:	f04f 34ff 	mov.w	r4, #4294967295
 8008b9a:	e7c3      	b.n	8008b24 <lwip_recvfrom+0x70>
 8008b9c:	2400b4fc 	.word	0x2400b4fc
 8008ba0:	2400e928 	.word	0x2400e928

08008ba4 <lwip_recv>:
{
 8008ba4:	b510      	push	{r4, lr}
  return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
 8008ba6:	2400      	movs	r4, #0
{
 8008ba8:	b082      	sub	sp, #8
  return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
 8008baa:	e9cd 4400 	strd	r4, r4, [sp]
 8008bae:	f7ff ff81 	bl	8008ab4 <lwip_recvfrom>
}
 8008bb2:	b002      	add	sp, #8
 8008bb4:	bd10      	pop	{r4, pc}
 8008bb6:	bf00      	nop

08008bb8 <lwip_sendto>:
{
 8008bb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8008bbc:	2803      	cmp	r0, #3
{
 8008bbe:	b085      	sub	sp, #20
 8008bc0:	e9dd 6e0c 	ldrd	r6, lr, [sp, #48]	; 0x30
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8008bc4:	d845      	bhi.n	8008c52 <lwip_sendto+0x9a>
    if (sock->conn) {
 8008bc6:	0104      	lsls	r4, r0, #4
 8008bc8:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8008cd4 <lwip_sendto+0x11c>
 8008bcc:	f858 c004 	ldr.w	ip, [r8, r4]
 8008bd0:	f1bc 0f00 	cmp.w	ip, #0
 8008bd4:	d03d      	beq.n	8008c52 <lwip_sendto+0x9a>
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 8008bd6:	f89c c000 	ldrb.w	ip, [ip]
 8008bda:	f00c 0cf0 	and.w	ip, ip, #240	; 0xf0
 8008bde:	f1bc 0f10 	cmp.w	ip, #16
 8008be2:	d04d      	beq.n	8008c80 <lwip_sendto+0xc8>
  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 8008be4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8008be8:	4615      	mov	r5, r2
 8008bea:	d264      	bcs.n	8008cb6 <lwip_sendto+0xfe>
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 8008bec:	ea5e 0006 	orrs.w	r0, lr, r6
 8008bf0:	460f      	mov	r7, r1
  short_size = (u16_t)size;
 8008bf2:	fa1f f982 	uxth.w	r9, r2
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 8008bf6:	d028      	beq.n	8008c4a <lwip_sendto+0x92>
 8008bf8:	f1be 0f10 	cmp.w	lr, #16
 8008bfc:	d148      	bne.n	8008c90 <lwip_sendto+0xd8>
 8008bfe:	2e00      	cmp	r6, #0
 8008c00:	d046      	beq.n	8008c90 <lwip_sendto+0xd8>
 8008c02:	7873      	ldrb	r3, [r6, #1]
 8008c04:	2b02      	cmp	r3, #2
 8008c06:	d143      	bne.n	8008c90 <lwip_sendto+0xd8>
 8008c08:	f016 0303 	ands.w	r3, r6, #3
 8008c0c:	d140      	bne.n	8008c90 <lwip_sendto+0xd8>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 8008c0e:	8870      	ldrh	r0, [r6, #2]
  buf.p = buf.ptr = NULL;
 8008c10:	e9cd 3300 	strd	r3, r3, [sp]
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 8008c14:	6873      	ldr	r3, [r6, #4]
 8008c16:	9302      	str	r3, [sp, #8]
 8008c18:	f000 fbbe 	bl	8009398 <lwip_htons>
  netbuf_fromport(&buf) = remote_port;
 8008c1c:	f8ad 000c 	strh.w	r0, [sp, #12]
  err = netbuf_ref(&buf, data, short_size);
 8008c20:	464a      	mov	r2, r9
 8008c22:	4639      	mov	r1, r7
 8008c24:	4668      	mov	r0, sp
 8008c26:	f7ff f9fb 	bl	8008020 <netbuf_ref>
  if (err == ERR_OK) {
 8008c2a:	4606      	mov	r6, r0
 8008c2c:	b1c8      	cbz	r0, 8008c62 <lwip_sendto+0xaa>
  netbuf_free(&buf);
 8008c2e:	4668      	mov	r0, sp
 8008c30:	f7ff f9de 	bl	8007ff0 <netbuf_free>
  sock_set_errno(sock, err_to_errno(err));
 8008c34:	4630      	mov	r0, r6
 8008c36:	f7ff f9bb 	bl	8007fb0 <err_to_errno>
 8008c3a:	b330      	cbz	r0, 8008c8a <lwip_sendto+0xd2>
 8008c3c:	4b21      	ldr	r3, [pc, #132]	; (8008cc4 <lwip_sendto+0x10c>)
 8008c3e:	6018      	str	r0, [r3, #0]
  return (err == ERR_OK ? short_size : -1);
 8008c40:	bb1e      	cbnz	r6, 8008c8a <lwip_sendto+0xd2>
 8008c42:	4628      	mov	r0, r5
}
 8008c44:	b005      	add	sp, #20
 8008c46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  buf.p = buf.ptr = NULL;
 8008c4a:	e9cd 0000 	strd	r0, r0, [sp]
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 8008c4e:	9002      	str	r0, [sp, #8]
 8008c50:	e7e4      	b.n	8008c1c <lwip_sendto+0x64>
    set_errno(EBADF);
 8008c52:	4b1c      	ldr	r3, [pc, #112]	; (8008cc4 <lwip_sendto+0x10c>)
 8008c54:	2209      	movs	r2, #9
    return -1;
 8008c56:	f04f 30ff 	mov.w	r0, #4294967295
    set_errno(EBADF);
 8008c5a:	601a      	str	r2, [r3, #0]
}
 8008c5c:	b005      	add	sp, #20
 8008c5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    err = netconn_send(sock->conn, &buf);
 8008c62:	4669      	mov	r1, sp
 8008c64:	f858 0004 	ldr.w	r0, [r8, r4]
 8008c68:	f7fd ffa2 	bl	8006bb0 <netconn_send>
 8008c6c:	4606      	mov	r6, r0
  netbuf_free(&buf);
 8008c6e:	4668      	mov	r0, sp
 8008c70:	f7ff f9be 	bl	8007ff0 <netbuf_free>
  sock_set_errno(sock, err_to_errno(err));
 8008c74:	4630      	mov	r0, r6
 8008c76:	f7ff f99b 	bl	8007fb0 <err_to_errno>
 8008c7a:	2800      	cmp	r0, #0
 8008c7c:	d0e0      	beq.n	8008c40 <lwip_sendto+0x88>
 8008c7e:	e7dd      	b.n	8008c3c <lwip_sendto+0x84>
}
 8008c80:	b005      	add	sp, #20
 8008c82:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    return lwip_send(s, data, size, flags);
 8008c86:	f000 b827 	b.w	8008cd8 <lwip_send>
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 8008c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8008c8e:	e7d9      	b.n	8008c44 <lwip_sendto+0x8c>
 8008c90:	4b0d      	ldr	r3, [pc, #52]	; (8008cc8 <lwip_sendto+0x110>)
 8008c92:	f240 6252 	movw	r2, #1618	; 0x652
 8008c96:	490d      	ldr	r1, [pc, #52]	; (8008ccc <lwip_sendto+0x114>)
 8008c98:	480d      	ldr	r0, [pc, #52]	; (8008cd0 <lwip_sendto+0x118>)
 8008c9a:	f008 fcb1 	bl	8011600 <iprintf>
 8008c9e:	f06f 000f 	mvn.w	r0, #15
 8008ca2:	f7ff f985 	bl	8007fb0 <err_to_errno>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	2800      	cmp	r0, #0
 8008caa:	d0ee      	beq.n	8008c8a <lwip_sendto+0xd2>
 8008cac:	4a05      	ldr	r2, [pc, #20]	; (8008cc4 <lwip_sendto+0x10c>)
 8008cae:	f04f 30ff 	mov.w	r0, #4294967295
 8008cb2:	6013      	str	r3, [r2, #0]
 8008cb4:	e7c6      	b.n	8008c44 <lwip_sendto+0x8c>
    sock_set_errno(sock, EMSGSIZE);
 8008cb6:	4b03      	ldr	r3, [pc, #12]	; (8008cc4 <lwip_sendto+0x10c>)
 8008cb8:	225a      	movs	r2, #90	; 0x5a
    return -1;
 8008cba:	f04f 30ff 	mov.w	r0, #4294967295
    sock_set_errno(sock, EMSGSIZE);
 8008cbe:	601a      	str	r2, [r3, #0]
    return -1;
 8008cc0:	e7c0      	b.n	8008c44 <lwip_sendto+0x8c>
 8008cc2:	bf00      	nop
 8008cc4:	2400e928 	.word	0x2400e928
 8008cc8:	08012d24 	.word	0x08012d24
 8008ccc:	08012ecc 	.word	0x08012ecc
 8008cd0:	080124d0 	.word	0x080124d0
 8008cd4:	2400b4fc 	.word	0x2400b4fc

08008cd8 <lwip_send>:
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8008cd8:	2803      	cmp	r0, #3
{
 8008cda:	b510      	push	{r4, lr}
 8008cdc:	b084      	sub	sp, #16
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8008cde:	d82e      	bhi.n	8008d3e <lwip_send+0x66>
    if (sock->conn) {
 8008ce0:	ea4f 1c00 	mov.w	ip, r0, lsl #4
 8008ce4:	4c1b      	ldr	r4, [pc, #108]	; (8008d54 <lwip_send+0x7c>)
 8008ce6:	f854 400c 	ldr.w	r4, [r4, ip]
 8008cea:	b344      	cbz	r4, 8008d3e <lwip_send+0x66>
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 8008cec:	f894 c000 	ldrb.w	ip, [r4]
 8008cf0:	f00c 0cf0 	and.w	ip, ip, #240	; 0xf0
 8008cf4:	f1bc 0f10 	cmp.w	ip, #16
 8008cf8:	d11a      	bne.n	8008d30 <lwip_send+0x58>
  write_flags = (u8_t)(NETCONN_COPY |
 8008cfa:	f013 0f10 	tst.w	r3, #16
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 8008cfe:	ea4f 0363 	mov.w	r3, r3, asr #1
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 8008d02:	4620      	mov	r0, r4
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 8008d04:	f003 0304 	and.w	r3, r3, #4
  write_flags = (u8_t)(NETCONN_COPY |
 8008d08:	bf14      	ite	ne
 8008d0a:	2403      	movne	r4, #3
 8008d0c:	2401      	moveq	r4, #1
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 8008d0e:	4323      	orrs	r3, r4
 8008d10:	ac03      	add	r4, sp, #12
 8008d12:	9400      	str	r4, [sp, #0]
  written = 0;
 8008d14:	2400      	movs	r4, #0
 8008d16:	9403      	str	r4, [sp, #12]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 8008d18:	f7fd ffee 	bl	8006cf8 <netconn_write_partly>
 8008d1c:	4604      	mov	r4, r0
  sock_set_errno(sock, err_to_errno(err));
 8008d1e:	f7ff f947 	bl	8007fb0 <err_to_errno>
 8008d22:	b108      	cbz	r0, 8008d28 <lwip_send+0x50>
 8008d24:	4b0c      	ldr	r3, [pc, #48]	; (8008d58 <lwip_send+0x80>)
 8008d26:	6018      	str	r0, [r3, #0]
  return (err == ERR_OK ? (ssize_t)written : -1);
 8008d28:	b984      	cbnz	r4, 8008d4c <lwip_send+0x74>
 8008d2a:	9803      	ldr	r0, [sp, #12]
}
 8008d2c:	b004      	add	sp, #16
 8008d2e:	bd10      	pop	{r4, pc}
    return lwip_sendto(s, data, size, flags, NULL, 0);
 8008d30:	2400      	movs	r4, #0
 8008d32:	e9cd 4400 	strd	r4, r4, [sp]
 8008d36:	f7ff ff3f 	bl	8008bb8 <lwip_sendto>
}
 8008d3a:	b004      	add	sp, #16
 8008d3c:	bd10      	pop	{r4, pc}
    set_errno(EBADF);
 8008d3e:	4b06      	ldr	r3, [pc, #24]	; (8008d58 <lwip_send+0x80>)
 8008d40:	2209      	movs	r2, #9
    return -1;
 8008d42:	f04f 30ff 	mov.w	r0, #4294967295
    set_errno(EBADF);
 8008d46:	601a      	str	r2, [r3, #0]
}
 8008d48:	b004      	add	sp, #16
 8008d4a:	bd10      	pop	{r4, pc}
  return (err == ERR_OK ? (ssize_t)written : -1);
 8008d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d50:	e7ec      	b.n	8008d2c <lwip_send+0x54>
 8008d52:	bf00      	nop
 8008d54:	2400b4fc 	.word	0x2400b4fc
 8008d58:	2400e928 	.word	0x2400e928

08008d5c <lwip_socket>:
{
 8008d5c:	b538      	push	{r3, r4, r5, lr}
 8008d5e:	460b      	mov	r3, r1
 8008d60:	4611      	mov	r1, r2
  switch (type) {
 8008d62:	2b02      	cmp	r3, #2
 8008d64:	d00a      	beq.n	8008d7c <lwip_socket+0x20>
 8008d66:	2b03      	cmp	r3, #3
 8008d68:	d024      	beq.n	8008db4 <lwip_socket+0x58>
 8008d6a:	2b01      	cmp	r3, #1
 8008d6c:	d01b      	beq.n	8008da6 <lwip_socket+0x4a>
      set_errno(EINVAL);
 8008d6e:	4b1b      	ldr	r3, [pc, #108]	; (8008ddc <lwip_socket+0x80>)
 8008d70:	2216      	movs	r2, #22
      return -1;
 8008d72:	f04f 34ff 	mov.w	r4, #4294967295
      set_errno(EINVAL);
 8008d76:	601a      	str	r2, [r3, #0]
}
 8008d78:	4620      	mov	r0, r4
 8008d7a:	bd38      	pop	{r3, r4, r5, pc}
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 8008d7c:	2a88      	cmp	r2, #136	; 0x88
 8008d7e:	f04f 0100 	mov.w	r1, #0
 8008d82:	4a17      	ldr	r2, [pc, #92]	; (8008de0 <lwip_socket+0x84>)
 8008d84:	bf0c      	ite	eq
 8008d86:	2021      	moveq	r0, #33	; 0x21
 8008d88:	2020      	movne	r0, #32
 8008d8a:	f7fd fd15 	bl	80067b8 <netconn_new_with_proto_and_callback>
 8008d8e:	4605      	mov	r5, r0
  if (!conn) {
 8008d90:	b1bd      	cbz	r5, 8008dc2 <lwip_socket+0x66>
  i = alloc_socket(conn, 0);
 8008d92:	2100      	movs	r1, #0
 8008d94:	4628      	mov	r0, r5
 8008d96:	f7ff f96d 	bl	8008074 <alloc_socket>
  if (i == -1) {
 8008d9a:	1c43      	adds	r3, r0, #1
  i = alloc_socket(conn, 0);
 8008d9c:	4604      	mov	r4, r0
  if (i == -1) {
 8008d9e:	d016      	beq.n	8008dce <lwip_socket+0x72>
  conn->socket = i;
 8008da0:	61a8      	str	r0, [r5, #24]
}
 8008da2:	4620      	mov	r0, r4
 8008da4:	bd38      	pop	{r3, r4, r5, pc}
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 8008da6:	4a0e      	ldr	r2, [pc, #56]	; (8008de0 <lwip_socket+0x84>)
 8008da8:	2100      	movs	r1, #0
 8008daa:	2010      	movs	r0, #16
 8008dac:	f7fd fd04 	bl	80067b8 <netconn_new_with_proto_and_callback>
 8008db0:	4605      	mov	r5, r0
      break;
 8008db2:	e7ed      	b.n	8008d90 <lwip_socket+0x34>
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 8008db4:	4a0a      	ldr	r2, [pc, #40]	; (8008de0 <lwip_socket+0x84>)
 8008db6:	b2c9      	uxtb	r1, r1
 8008db8:	2040      	movs	r0, #64	; 0x40
 8008dba:	f7fd fcfd 	bl	80067b8 <netconn_new_with_proto_and_callback>
 8008dbe:	4605      	mov	r5, r0
      break;
 8008dc0:	e7e6      	b.n	8008d90 <lwip_socket+0x34>
    set_errno(ENOBUFS);
 8008dc2:	4b06      	ldr	r3, [pc, #24]	; (8008ddc <lwip_socket+0x80>)
 8008dc4:	2269      	movs	r2, #105	; 0x69
    return -1;
 8008dc6:	f04f 34ff 	mov.w	r4, #4294967295
    set_errno(ENOBUFS);
 8008dca:	601a      	str	r2, [r3, #0]
    return -1;
 8008dcc:	e7d4      	b.n	8008d78 <lwip_socket+0x1c>
    netconn_delete(conn);
 8008dce:	4628      	mov	r0, r5
 8008dd0:	f7fd fd6e 	bl	80068b0 <netconn_delete>
    set_errno(ENFILE);
 8008dd4:	4b01      	ldr	r3, [pc, #4]	; (8008ddc <lwip_socket+0x80>)
 8008dd6:	2217      	movs	r2, #23
 8008dd8:	601a      	str	r2, [r3, #0]
    return -1;
 8008dda:	e7cd      	b.n	8008d78 <lwip_socket+0x1c>
 8008ddc:	2400e928 	.word	0x2400e928
 8008de0:	080085d9 	.word	0x080085d9

08008de4 <lwip_select>:
{
 8008de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((maxfdp1 < 0) || (maxfdp1 > LWIP_SELECT_MAXNFDS)) {
 8008de8:	2840      	cmp	r0, #64	; 0x40
{
 8008dea:	b097      	sub	sp, #92	; 0x5c
 8008dec:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8008dee:	9004      	str	r0, [sp, #16]
  if ((maxfdp1 < 0) || (maxfdp1 > LWIP_SELECT_MAXNFDS)) {
 8008df0:	f200 814c 	bhi.w	800908c <lwip_select+0x2a8>
  nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
 8008df4:	ad0b      	add	r5, sp, #44	; 0x2c
 8008df6:	460e      	mov	r6, r1
 8008df8:	4617      	mov	r7, r2
 8008dfa:	4699      	mov	r9, r3
 8008dfc:	9502      	str	r5, [sp, #8]
 8008dfe:	ad09      	add	r5, sp, #36	; 0x24
 8008e00:	9501      	str	r5, [sp, #4]
 8008e02:	ad07      	add	r5, sp, #28
 8008e04:	9500      	str	r5, [sp, #0]
 8008e06:	f7ff f975 	bl	80080f4 <lwip_selscan>
  if (nready < 0) {
 8008e0a:	f1b0 0b00 	subs.w	fp, r0, #0
 8008e0e:	f2c0 8166 	blt.w	80090de <lwip_select+0x2fa>
  } else if (nready > 0) {
 8008e12:	f040 80c3 	bne.w	8008f9c <lwip_select+0x1b8>
    if (timeout && timeout->tv_sec == 0 && timeout->tv_usec == 0) {
 8008e16:	b13c      	cbz	r4, 8008e28 <lwip_select+0x44>
 8008e18:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008e1c:	4313      	orrs	r3, r2
 8008e1e:	d103      	bne.n	8008e28 <lwip_select+0x44>
 8008e20:	68a3      	ldr	r3, [r4, #8]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	f000 80ba 	beq.w	8008f9c <lwip_select+0x1b8>
      memset(&API_SELECT_CB_VAR_REF(select_cb), 0, sizeof(struct lwip_select_cb));
 8008e28:	2100      	movs	r1, #0
 8008e2a:	2224      	movs	r2, #36	; 0x24
 8008e2c:	a80d      	add	r0, sp, #52	; 0x34
 8008e2e:	f008 fd3d 	bl	80118ac <memset>
      if (sys_sem_new(&API_SELECT_CB_VAR_REF(select_cb).sem, 0) != ERR_OK) {
 8008e32:	2100      	movs	r1, #0
 8008e34:	a815      	add	r0, sp, #84	; 0x54
      API_SELECT_CB_VAR_REF(select_cb).exceptset = exceptset;
 8008e36:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
      API_SELECT_CB_VAR_REF(select_cb).writeset = writeset;
 8008e3a:	e9cd 670f 	strd	r6, r7, [sp, #60]	; 0x3c
      if (sys_sem_new(&API_SELECT_CB_VAR_REF(select_cb).sem, 0) != ERR_OK) {
 8008e3e:	f007 fe1b 	bl	8010a78 <sys_sem_new>
 8008e42:	2800      	cmp	r0, #0
 8008e44:	f040 8147 	bne.w	80090d6 <lwip_select+0x2f2>
  LWIP_SOCKET_SELECT_PROTECT(lev);
 8008e48:	48ab      	ldr	r0, [pc, #684]	; (80090f8 <lwip_select+0x314>)
 8008e4a:	f007 fe79 	bl	8010b40 <sys_mutex_lock>
  select_cb->next = select_cb_list;
 8008e4e:	4aab      	ldr	r2, [pc, #684]	; (80090fc <lwip_select+0x318>)
 8008e50:	6813      	ldr	r3, [r2, #0]
 8008e52:	930d      	str	r3, [sp, #52]	; 0x34
  if (select_cb_list != NULL) {
 8008e54:	b10b      	cbz	r3, 8008e5a <lwip_select+0x76>
    select_cb_list->prev = select_cb;
 8008e56:	a90d      	add	r1, sp, #52	; 0x34
 8008e58:	6059      	str	r1, [r3, #4]
  select_cb_list = select_cb;
 8008e5a:	ab0d      	add	r3, sp, #52	; 0x34
  LWIP_SOCKET_SELECT_UNPROTECT(lev);
 8008e5c:	48a6      	ldr	r0, [pc, #664]	; (80090f8 <lwip_select+0x314>)
  select_cb_list = select_cb;
 8008e5e:	6013      	str	r3, [r2, #0]
  LWIP_SOCKET_SELECT_UNPROTECT(lev);
 8008e60:	f007 fe74 	bl	8010b4c <sys_mutex_unlock>
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 8008e64:	9b04      	ldr	r3, [sp, #16]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	f000 8116 	beq.w	8009098 <lwip_select+0x2b4>
 8008e6c:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 8009114 <lwip_select+0x330>
 8008e70:	465d      	mov	r5, fp
 8008e72:	9420      	str	r4, [sp, #128]	; 0x80
 8008e74:	469a      	mov	sl, r3
 8008e76:	4644      	mov	r4, r8
        if ((readset && FD_ISSET(i, readset)) ||
 8008e78:	116b      	asrs	r3, r5, #5
 8008e7a:	f005 011f 	and.w	r1, r5, #31
            (writeset && FD_ISSET(i, writeset)) ||
 8008e7e:	469c      	mov	ip, r3
 8008e80:	4608      	mov	r0, r1
        if ((readset && FD_ISSET(i, readset)) ||
 8008e82:	b126      	cbz	r6, 8008e8e <lwip_select+0xaa>
 8008e84:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8008e88:	40cb      	lsrs	r3, r1
 8008e8a:	07da      	lsls	r2, r3, #31
 8008e8c:	d409      	bmi.n	8008ea2 <lwip_select+0xbe>
            (exceptset && FD_ISSET(i, exceptset))) {
 8008e8e:	1169      	asrs	r1, r5, #5
        if ((readset && FD_ISSET(i, readset)) ||
 8008e90:	2f00      	cmp	r7, #0
 8008e92:	f000 809b 	beq.w	8008fcc <lwip_select+0x1e8>
            (writeset && FD_ISSET(i, writeset)) ||
 8008e96:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
 8008e9a:	40c3      	lsrs	r3, r0
 8008e9c:	07db      	lsls	r3, r3, #31
 8008e9e:	f140 8095 	bpl.w	8008fcc <lwip_select+0x1e8>
          SYS_ARCH_PROTECT(lev);
 8008ea2:	f007 fe6b 	bl	8010b7c <sys_arch_protect>
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8008ea6:	2d03      	cmp	r5, #3
 8008ea8:	dc40      	bgt.n	8008f2c <lwip_select+0x148>
            sock->select_waiting++;
 8008eaa:	7ba3      	ldrb	r3, [r4, #14]
 8008eac:	3301      	adds	r3, #1
 8008eae:	b2db      	uxtb	r3, r3
 8008eb0:	73a3      	strb	r3, [r4, #14]
            if (sock->select_waiting == 0) {
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	f000 80d8 	beq.w	8009068 <lwip_select+0x284>
            SYS_ARCH_UNPROTECT(lev);
 8008eb8:	f007 fe6c 	bl	8010b94 <sys_arch_unprotect>
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 8008ebc:	3501      	adds	r5, #1
 8008ebe:	3410      	adds	r4, #16
 8008ec0:	45aa      	cmp	sl, r5
 8008ec2:	d1d9      	bne.n	8008e78 <lwip_select+0x94>
        nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
 8008ec4:	ab0b      	add	r3, sp, #44	; 0x2c
 8008ec6:	463a      	mov	r2, r7
 8008ec8:	4631      	mov	r1, r6
 8008eca:	9804      	ldr	r0, [sp, #16]
 8008ecc:	9302      	str	r3, [sp, #8]
 8008ece:	ab09      	add	r3, sp, #36	; 0x24
 8008ed0:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8008ed2:	9301      	str	r3, [sp, #4]
 8008ed4:	ab07      	add	r3, sp, #28
 8008ed6:	9300      	str	r3, [sp, #0]
 8008ed8:	464b      	mov	r3, r9
 8008eda:	f7ff f90b 	bl	80080f4 <lwip_selscan>
        if (!nready) {
 8008ede:	4680      	mov	r8, r0
 8008ee0:	2800      	cmp	r0, #0
 8008ee2:	f040 80f2 	bne.w	80090ca <lwip_select+0x2e6>
          if (timeout == 0) {
 8008ee6:	2c00      	cmp	r4, #0
 8008ee8:	f000 80b8 	beq.w	800905c <lwip_select+0x278>
            long msecs_long = ((timeout->tv_sec * 1000) + ((timeout->tv_usec + 500) / 1000));
 8008eec:	68a3      	ldr	r3, [r4, #8]
 8008eee:	4a84      	ldr	r2, [pc, #528]	; (8009100 <lwip_select+0x31c>)
 8008ef0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008ef4:	6820      	ldr	r0, [r4, #0]
 8008ef6:	fb82 1203 	smull	r1, r2, r2, r3
 8008efa:	17d9      	asrs	r1, r3, #31
 8008efc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008f00:	ebc1 11a2 	rsb	r1, r1, r2, asr #6
 8008f04:	fb03 1100 	mla	r1, r3, r0, r1
          waitres = sys_arch_sem_wait(SELECT_SEM_PTR(API_SELECT_CB_VAR_REF(select_cb).sem), msectimeout);
 8008f08:	a815      	add	r0, sp, #84	; 0x54
 8008f0a:	2901      	cmp	r1, #1
 8008f0c:	bfb8      	it	lt
 8008f0e:	2101      	movlt	r1, #1
 8008f10:	f007 fdcc 	bl	8010aac <sys_arch_sem_wait>
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
 8008f14:	9b04      	ldr	r3, [sp, #16]
          waitres = sys_arch_sem_wait(SELECT_SEM_PTR(API_SELECT_CB_VAR_REF(select_cb).sem), msectimeout);
 8008f16:	9005      	str	r0, [sp, #20]
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	f040 80d9 	bne.w	80090d0 <lwip_select+0x2ec>
      lwip_unlink_select_cb(&API_SELECT_CB_VAR_REF(select_cb));
 8008f1e:	a80d      	add	r0, sp, #52	; 0x34
 8008f20:	f7ff f9a2 	bl	8008268 <lwip_unlink_select_cb>
      sys_sem_free(&API_SELECT_CB_VAR_REF(select_cb).sem);
 8008f24:	a815      	add	r0, sp, #84	; 0x54
 8008f26:	f007 fde1 	bl	8010aec <sys_sem_free>
      if (nready < 0) {
 8008f2a:	e034      	b.n	8008f96 <lwip_select+0x1b2>
            SYS_ARCH_UNPROTECT(lev);
 8008f2c:	f007 fe32 	bl	8010b94 <sys_arch_unprotect>
            set_errno(EBADF);
 8008f30:	4b74      	ldr	r3, [pc, #464]	; (8009104 <lwip_select+0x320>)
 8008f32:	2209      	movs	r2, #9
            nready = -1;
 8008f34:	f04f 38ff 	mov.w	r8, #4294967295
            set_errno(EBADF);
 8008f38:	601a      	str	r2, [r3, #0]
  u32_t waitres = 0;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	9305      	str	r3, [sp, #20]
            nready = -1;
 8008f3e:	465c      	mov	r4, fp
 8008f40:	46c3      	mov	fp, r8
 8008f42:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 8009114 <lwip_select+0x330>
        if ((readset && FD_ISSET(i, readset)) ||
 8008f46:	2e00      	cmp	r6, #0
 8008f48:	d04d      	beq.n	8008fe6 <lwip_select+0x202>
 8008f4a:	1163      	asrs	r3, r4, #5
 8008f4c:	f004 021f 	and.w	r2, r4, #31
 8008f50:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8008f54:	40d3      	lsrs	r3, r2
 8008f56:	07d9      	lsls	r1, r3, #31
 8008f58:	d545      	bpl.n	8008fe6 <lwip_select+0x202>
          SYS_ARCH_PROTECT(lev);
 8008f5a:	f007 fe0f 	bl	8010b7c <sys_arch_protect>
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8008f5e:	2c03      	cmp	r4, #3
          SYS_ARCH_PROTECT(lev);
 8008f60:	4682      	mov	sl, r0
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8008f62:	dc59      	bgt.n	8009018 <lwip_select+0x234>
            LWIP_ASSERT("sock->select_waiting > 0", sock->select_waiting > 0);
 8008f64:	f898 300e 	ldrb.w	r3, [r8, #14]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d05d      	beq.n	8009028 <lwip_select+0x244>
              sock->select_waiting--;
 8008f6c:	3b01      	subs	r3, #1
 8008f6e:	f888 300e 	strb.w	r3, [r8, #14]
            SYS_ARCH_UNPROTECT(lev);
 8008f72:	4650      	mov	r0, sl
 8008f74:	f007 fe0e 	bl	8010b94 <sys_arch_unprotect>
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
 8008f78:	3401      	adds	r4, #1
 8008f7a:	f108 0810 	add.w	r8, r8, #16
 8008f7e:	42ac      	cmp	r4, r5
 8008f80:	dbe1      	blt.n	8008f46 <lwip_select+0x162>
      lwip_unlink_select_cb(&API_SELECT_CB_VAR_REF(select_cb));
 8008f82:	a80d      	add	r0, sp, #52	; 0x34
 8008f84:	f7ff f970 	bl	8008268 <lwip_unlink_select_cb>
      sys_sem_free(&API_SELECT_CB_VAR_REF(select_cb).sem);
 8008f88:	a815      	add	r0, sp, #84	; 0x54
 8008f8a:	f007 fdaf 	bl	8010aec <sys_sem_free>
      if (nready < 0) {
 8008f8e:	f1bb 0f00 	cmp.w	fp, #0
 8008f92:	f2c0 8097 	blt.w	80090c4 <lwip_select+0x2e0>
      if (waitres == SYS_ARCH_TIMEOUT) {
 8008f96:	9b05      	ldr	r3, [sp, #20]
 8008f98:	3301      	adds	r3, #1
 8008f9a:	d151      	bne.n	8009040 <lwip_select+0x25c>
  if (readset) {
 8008f9c:	b126      	cbz	r6, 8008fa8 <lwip_select+0x1c4>
    *readset = lreadset;
 8008f9e:	ab07      	add	r3, sp, #28
 8008fa0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008fa4:	e886 0003 	stmia.w	r6, {r0, r1}
  if (writeset) {
 8008fa8:	b127      	cbz	r7, 8008fb4 <lwip_select+0x1d0>
    *writeset = lwriteset;
 8008faa:	ab09      	add	r3, sp, #36	; 0x24
 8008fac:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008fb0:	e887 0003 	stmia.w	r7, {r0, r1}
  if (exceptset) {
 8008fb4:	f1b9 0f00 	cmp.w	r9, #0
 8008fb8:	d004      	beq.n	8008fc4 <lwip_select+0x1e0>
    *exceptset = lexceptset;
 8008fba:	ab0b      	add	r3, sp, #44	; 0x2c
 8008fbc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008fc0:	e889 0003 	stmia.w	r9, {r0, r1}
}
 8008fc4:	4658      	mov	r0, fp
 8008fc6:	b017      	add	sp, #92	; 0x5c
 8008fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            (writeset && FD_ISSET(i, writeset)) ||
 8008fcc:	f1b9 0f00 	cmp.w	r9, #0
 8008fd0:	f43f af74 	beq.w	8008ebc <lwip_select+0xd8>
            (exceptset && FD_ISSET(i, exceptset))) {
 8008fd4:	f859 3021 	ldr.w	r3, [r9, r1, lsl #2]
 8008fd8:	f005 011f 	and.w	r1, r5, #31
 8008fdc:	40cb      	lsrs	r3, r1
 8008fde:	07d8      	lsls	r0, r3, #31
 8008fe0:	f57f af6c 	bpl.w	8008ebc <lwip_select+0xd8>
 8008fe4:	e75d      	b.n	8008ea2 <lwip_select+0xbe>
        if ((readset && FD_ISSET(i, readset)) ||
 8008fe6:	b13f      	cbz	r7, 8008ff8 <lwip_select+0x214>
            (writeset && FD_ISSET(i, writeset)) ||
 8008fe8:	1163      	asrs	r3, r4, #5
 8008fea:	f004 021f 	and.w	r2, r4, #31
 8008fee:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8008ff2:	40d3      	lsrs	r3, r2
 8008ff4:	07da      	lsls	r2, r3, #31
 8008ff6:	d4b0      	bmi.n	8008f5a <lwip_select+0x176>
 8008ff8:	f1b9 0f00 	cmp.w	r9, #0
 8008ffc:	d0bc      	beq.n	8008f78 <lwip_select+0x194>
            (exceptset && FD_ISSET(i, exceptset))) {
 8008ffe:	1163      	asrs	r3, r4, #5
 8009000:	f004 021f 	and.w	r2, r4, #31
 8009004:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009008:	40d3      	lsrs	r3, r2
 800900a:	07db      	lsls	r3, r3, #31
 800900c:	d5b4      	bpl.n	8008f78 <lwip_select+0x194>
          SYS_ARCH_PROTECT(lev);
 800900e:	f007 fdb5 	bl	8010b7c <sys_arch_protect>
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8009012:	2c03      	cmp	r4, #3
          SYS_ARCH_PROTECT(lev);
 8009014:	4682      	mov	sl, r0
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8009016:	dda5      	ble.n	8008f64 <lwip_select+0x180>
            SYS_ARCH_UNPROTECT(lev);
 8009018:	f007 fdbc 	bl	8010b94 <sys_arch_unprotect>
            set_errno(EBADF);
 800901c:	2309      	movs	r3, #9
 800901e:	4a39      	ldr	r2, [pc, #228]	; (8009104 <lwip_select+0x320>)
            nready = -1;
 8009020:	f04f 3bff 	mov.w	fp, #4294967295
            set_errno(EBADF);
 8009024:	6013      	str	r3, [r2, #0]
 8009026:	e7a7      	b.n	8008f78 <lwip_select+0x194>
            LWIP_ASSERT("sock->select_waiting > 0", sock->select_waiting > 0);
 8009028:	4b37      	ldr	r3, [pc, #220]	; (8009108 <lwip_select+0x324>)
 800902a:	f640 023c 	movw	r2, #2108	; 0x83c
 800902e:	4937      	ldr	r1, [pc, #220]	; (800910c <lwip_select+0x328>)
 8009030:	4837      	ldr	r0, [pc, #220]	; (8009110 <lwip_select+0x32c>)
 8009032:	f008 fae5 	bl	8011600 <iprintf>
            if (sock->select_waiting > 0) {
 8009036:	f898 300e 	ldrb.w	r3, [r8, #14]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d099      	beq.n	8008f72 <lwip_select+0x18e>
 800903e:	e795      	b.n	8008f6c <lwip_select+0x188>
        nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
 8009040:	ab0b      	add	r3, sp, #44	; 0x2c
 8009042:	9804      	ldr	r0, [sp, #16]
 8009044:	463a      	mov	r2, r7
 8009046:	4631      	mov	r1, r6
 8009048:	9302      	str	r3, [sp, #8]
 800904a:	ab09      	add	r3, sp, #36	; 0x24
 800904c:	9301      	str	r3, [sp, #4]
 800904e:	ab07      	add	r3, sp, #28
 8009050:	9300      	str	r3, [sp, #0]
 8009052:	464b      	mov	r3, r9
 8009054:	f7ff f84e 	bl	80080f4 <lwip_selscan>
 8009058:	4683      	mov	fp, r0
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: nready=%d\n", nready));
 800905a:	e79f      	b.n	8008f9c <lwip_select+0x1b8>
          waitres = sys_arch_sem_wait(SELECT_SEM_PTR(API_SELECT_CB_VAR_REF(select_cb).sem), msectimeout);
 800905c:	4641      	mov	r1, r8
 800905e:	a815      	add	r0, sp, #84	; 0x54
 8009060:	f007 fd24 	bl	8010aac <sys_arch_sem_wait>
 8009064:	9005      	str	r0, [sp, #20]
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
 8009066:	e76a      	b.n	8008f3e <lwip_select+0x15a>
              sock->select_waiting--;
 8009068:	22ff      	movs	r2, #255	; 0xff
 800906a:	eb08 1805 	add.w	r8, r8, r5, lsl #4
 800906e:	9305      	str	r3, [sp, #20]
 8009070:	f888 200e 	strb.w	r2, [r8, #14]
              SYS_ARCH_UNPROTECT(lev);
 8009074:	f007 fd8e 	bl	8010b94 <sys_arch_unprotect>
              set_errno(EBUSY);
 8009078:	4a22      	ldr	r2, [pc, #136]	; (8009104 <lwip_select+0x320>)
 800907a:	2110      	movs	r1, #16
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
 800907c:	9b05      	ldr	r3, [sp, #20]
              set_errno(EBUSY);
 800907e:	6011      	str	r1, [r2, #0]
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
 8009080:	2d00      	cmp	r5, #0
 8009082:	d032      	beq.n	80090ea <lwip_select+0x306>
              nready = -1;
 8009084:	f04f 38ff 	mov.w	r8, #4294967295
  u32_t waitres = 0;
 8009088:	9305      	str	r3, [sp, #20]
 800908a:	e758      	b.n	8008f3e <lwip_select+0x15a>
    set_errno(EINVAL);
 800908c:	4b1d      	ldr	r3, [pc, #116]	; (8009104 <lwip_select+0x320>)
 800908e:	2216      	movs	r2, #22
    return -1;
 8009090:	f04f 3bff 	mov.w	fp, #4294967295
    set_errno(EINVAL);
 8009094:	601a      	str	r2, [r3, #0]
    return -1;
 8009096:	e795      	b.n	8008fc4 <lwip_select+0x1e0>
        nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
 8009098:	ab0b      	add	r3, sp, #44	; 0x2c
 800909a:	463a      	mov	r2, r7
 800909c:	4631      	mov	r1, r6
 800909e:	9804      	ldr	r0, [sp, #16]
 80090a0:	9302      	str	r3, [sp, #8]
 80090a2:	ab09      	add	r3, sp, #36	; 0x24
 80090a4:	9301      	str	r3, [sp, #4]
 80090a6:	ab07      	add	r3, sp, #28
 80090a8:	9300      	str	r3, [sp, #0]
 80090aa:	464b      	mov	r3, r9
 80090ac:	f7ff f822 	bl	80080f4 <lwip_selscan>
        if (!nready) {
 80090b0:	4605      	mov	r5, r0
 80090b2:	b388      	cbz	r0, 8009118 <lwip_select+0x334>
      lwip_unlink_select_cb(&API_SELECT_CB_VAR_REF(select_cb));
 80090b4:	a80d      	add	r0, sp, #52	; 0x34
 80090b6:	f7ff f8d7 	bl	8008268 <lwip_unlink_select_cb>
      sys_sem_free(&API_SELECT_CB_VAR_REF(select_cb).sem);
 80090ba:	a815      	add	r0, sp, #84	; 0x54
 80090bc:	f007 fd16 	bl	8010aec <sys_sem_free>
      if (nready < 0) {
 80090c0:	2d00      	cmp	r5, #0
 80090c2:	dabd      	bge.n	8009040 <lwip_select+0x25c>
        return -1;
 80090c4:	f04f 3bff 	mov.w	fp, #4294967295
 80090c8:	e77c      	b.n	8008fc4 <lwip_select+0x1e0>
  u32_t waitres = 0;
 80090ca:	2300      	movs	r3, #0
 80090cc:	9305      	str	r3, [sp, #20]
 80090ce:	e736      	b.n	8008f3e <lwip_select+0x15a>
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
 80090d0:	461d      	mov	r5, r3
        nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
 80090d2:	46d8      	mov	r8, fp
 80090d4:	e733      	b.n	8008f3e <lwip_select+0x15a>
        set_errno(ENOMEM);
 80090d6:	4b0b      	ldr	r3, [pc, #44]	; (8009104 <lwip_select+0x320>)
 80090d8:	220c      	movs	r2, #12
 80090da:	601a      	str	r2, [r3, #0]
        return -1;
 80090dc:	e7f2      	b.n	80090c4 <lwip_select+0x2e0>
    set_errno(EBADF);
 80090de:	4b09      	ldr	r3, [pc, #36]	; (8009104 <lwip_select+0x320>)
 80090e0:	2209      	movs	r2, #9
    return -1;
 80090e2:	f04f 3bff 	mov.w	fp, #4294967295
    set_errno(EBADF);
 80090e6:	601a      	str	r2, [r3, #0]
    return -1;
 80090e8:	e76c      	b.n	8008fc4 <lwip_select+0x1e0>
      lwip_unlink_select_cb(&API_SELECT_CB_VAR_REF(select_cb));
 80090ea:	a80d      	add	r0, sp, #52	; 0x34
 80090ec:	f7ff f8bc 	bl	8008268 <lwip_unlink_select_cb>
      sys_sem_free(&API_SELECT_CB_VAR_REF(select_cb).sem);
 80090f0:	a815      	add	r0, sp, #84	; 0x54
 80090f2:	f007 fcfb 	bl	8010aec <sys_sem_free>
      if (nready < 0) {
 80090f6:	e7e5      	b.n	80090c4 <lwip_select+0x2e0>
 80090f8:	2400b53c 	.word	0x2400b53c
 80090fc:	2400b4f8 	.word	0x2400b4f8
 8009100:	10624dd3 	.word	0x10624dd3
 8009104:	2400e928 	.word	0x2400e928
 8009108:	08012d24 	.word	0x08012d24
 800910c:	08012d84 	.word	0x08012d84
 8009110:	080124d0 	.word	0x080124d0
 8009114:	2400b4fc 	.word	0x2400b4fc
          if (timeout == 0) {
 8009118:	2c00      	cmp	r4, #0
 800911a:	f47f aee7 	bne.w	8008eec <lwip_select+0x108>
          waitres = sys_arch_sem_wait(SELECT_SEM_PTR(API_SELECT_CB_VAR_REF(select_cb).sem), msectimeout);
 800911e:	9904      	ldr	r1, [sp, #16]
 8009120:	a815      	add	r0, sp, #84	; 0x54
 8009122:	f007 fcc3 	bl	8010aac <sys_arch_sem_wait>
 8009126:	9005      	str	r0, [sp, #20]
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
 8009128:	e6f9      	b.n	8008f1e <lwip_select+0x13a>
 800912a:	bf00      	nop

0800912c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800912c:	b580      	push	{r7, lr}
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800912e:	482f      	ldr	r0, [pc, #188]	; (80091ec <tcpip_thread+0xc0>)
{
 8009130:	b082      	sub	sp, #8
  LOCK_TCPIP_CORE();
 8009132:	f007 fd05 	bl	8010b40 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8009136:	4b2e      	ldr	r3, [pc, #184]	; (80091f0 <tcpip_thread+0xc4>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	b113      	cbz	r3, 8009142 <tcpip_thread+0x16>
    tcpip_init_done(tcpip_init_done_arg);
 800913c:	4a2d      	ldr	r2, [pc, #180]	; (80091f4 <tcpip_thread+0xc8>)
 800913e:	6810      	ldr	r0, [r2, #0]
 8009140:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8009142:	4d2a      	ldr	r5, [pc, #168]	; (80091ec <tcpip_thread+0xc0>)
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8009144:	4e2c      	ldr	r6, [pc, #176]	; (80091f8 <tcpip_thread+0xcc>)
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009146:	4f2d      	ldr	r7, [pc, #180]	; (80091fc <tcpip_thread+0xd0>)
 8009148:	e010      	b.n	800916c <tcpip_thread+0x40>
  } else if (sleeptime == 0) {
 800914a:	b168      	cbz	r0, 8009168 <tcpip_thread+0x3c>
  UNLOCK_TCPIP_CORE();
 800914c:	4628      	mov	r0, r5
 800914e:	f007 fcfd 	bl	8010b4c <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8009152:	4622      	mov	r2, r4
 8009154:	a901      	add	r1, sp, #4
 8009156:	4630      	mov	r0, r6
 8009158:	f007 fc4c 	bl	80109f4 <sys_arch_mbox_fetch>
 800915c:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 800915e:	4628      	mov	r0, r5
 8009160:	f007 fcee 	bl	8010b40 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8009164:	3401      	adds	r4, #1
 8009166:	d111      	bne.n	800918c <tcpip_thread+0x60>
    sys_check_timeouts();
 8009168:	f005 fc96 	bl	800ea98 <sys_check_timeouts>
  sleeptime = sys_timeouts_sleeptime();
 800916c:	f005 fcbc 	bl	800eae8 <sys_timeouts_sleeptime>
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8009170:	1c43      	adds	r3, r0, #1
  sleeptime = sys_timeouts_sleeptime();
 8009172:	4604      	mov	r4, r0
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8009174:	d1e9      	bne.n	800914a <tcpip_thread+0x1e>
    UNLOCK_TCPIP_CORE();
 8009176:	4628      	mov	r0, r5
 8009178:	f007 fce8 	bl	8010b4c <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800917c:	2200      	movs	r2, #0
 800917e:	a901      	add	r1, sp, #4
 8009180:	4630      	mov	r0, r6
 8009182:	f007 fc37 	bl	80109f4 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8009186:	4628      	mov	r0, r5
 8009188:	f007 fcda 	bl	8010b40 <sys_mutex_lock>
    if (msg == NULL) {
 800918c:	9c01      	ldr	r4, [sp, #4]
 800918e:	b164      	cbz	r4, 80091aa <tcpip_thread+0x7e>
  switch (msg->type) {
 8009190:	7823      	ldrb	r3, [r4, #0]
 8009192:	2b01      	cmp	r3, #1
 8009194:	d01e      	beq.n	80091d4 <tcpip_thread+0xa8>
 8009196:	2b02      	cmp	r3, #2
 8009198:	d018      	beq.n	80091cc <tcpip_thread+0xa0>
 800919a:	b16b      	cbz	r3, 80091b8 <tcpip_thread+0x8c>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800919c:	463b      	mov	r3, r7
 800919e:	22cf      	movs	r2, #207	; 0xcf
 80091a0:	4917      	ldr	r1, [pc, #92]	; (8009200 <tcpip_thread+0xd4>)
 80091a2:	4818      	ldr	r0, [pc, #96]	; (8009204 <tcpip_thread+0xd8>)
 80091a4:	f008 fa2c 	bl	8011600 <iprintf>
      break;
 80091a8:	e7e0      	b.n	800916c <tcpip_thread+0x40>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80091aa:	463b      	mov	r3, r7
 80091ac:	2291      	movs	r2, #145	; 0x91
 80091ae:	4914      	ldr	r1, [pc, #80]	; (8009200 <tcpip_thread+0xd4>)
 80091b0:	4814      	ldr	r0, [pc, #80]	; (8009204 <tcpip_thread+0xd8>)
 80091b2:	f008 fa25 	bl	8011600 <iprintf>
      continue;
 80091b6:	e7d9      	b.n	800916c <tcpip_thread+0x40>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80091b8:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 80091bc:	6860      	ldr	r0, [r4, #4]
 80091be:	4798      	blx	r3
 80091c0:	b980      	cbnz	r0, 80091e4 <tcpip_thread+0xb8>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80091c2:	4621      	mov	r1, r4
 80091c4:	2009      	movs	r0, #9
 80091c6:	f000 fcdb 	bl	8009b80 <memp_free>
      break;
 80091ca:	e7cf      	b.n	800916c <tcpip_thread+0x40>
      msg->msg.cb.function(msg->msg.cb.ctx);
 80091cc:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 80091d0:	4798      	blx	r3
      break;
 80091d2:	e7cb      	b.n	800916c <tcpip_thread+0x40>
      msg->msg.cb.function(msg->msg.cb.ctx);
 80091d4:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 80091d8:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80091da:	4621      	mov	r1, r4
 80091dc:	2008      	movs	r0, #8
 80091de:	f000 fccf 	bl	8009b80 <memp_free>
      break;
 80091e2:	e7c3      	b.n	800916c <tcpip_thread+0x40>
        pbuf_free(msg->msg.inp.p);
 80091e4:	6860      	ldr	r0, [r4, #4]
 80091e6:	f001 f859 	bl	800a29c <pbuf_free>
 80091ea:	e7ea      	b.n	80091c2 <tcpip_thread+0x96>
 80091ec:	2400b53c 	.word	0x2400b53c
 80091f0:	2400b540 	.word	0x2400b540
 80091f4:	2400b544 	.word	0x2400b544
 80091f8:	2400b548 	.word	0x2400b548
 80091fc:	08012eec 	.word	0x08012eec
 8009200:	08012f1c 	.word	0x08012f1c
 8009204:	080124d0 	.word	0x080124d0

08009208 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8009208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800920a:	4607      	mov	r7, r0
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800920c:	4813      	ldr	r0, [pc, #76]	; (800925c <tcpip_inpkt+0x54>)
{
 800920e:	460e      	mov	r6, r1
 8009210:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009212:	f007 fc27 	bl	8010a64 <sys_mbox_valid>
 8009216:	b178      	cbz	r0, 8009238 <tcpip_inpkt+0x30>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8009218:	2009      	movs	r0, #9
 800921a:	f000 fc6b 	bl	8009af4 <memp_malloc>
  if (msg == NULL) {
 800921e:	4604      	mov	r4, r0
 8009220:	b1c0      	cbz	r0, 8009254 <tcpip_inpkt+0x4c>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 8009222:	2300      	movs	r3, #0
  msg->msg.inp.p = p;
 8009224:	6047      	str	r7, [r0, #4]
  msg->msg.inp.netif = inp;
 8009226:	6086      	str	r6, [r0, #8]
  msg->msg.inp.input_fn = input_fn;
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009228:	4601      	mov	r1, r0
  msg->type = TCPIP_MSG_INPKT;
 800922a:	7003      	strb	r3, [r0, #0]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800922c:	480b      	ldr	r0, [pc, #44]	; (800925c <tcpip_inpkt+0x54>)
  msg->msg.inp.input_fn = input_fn;
 800922e:	60e5      	str	r5, [r4, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009230:	f007 fbd6 	bl	80109e0 <sys_mbox_trypost>
 8009234:	b938      	cbnz	r0, 8009246 <tcpip_inpkt+0x3e>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8009236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009238:	4b09      	ldr	r3, [pc, #36]	; (8009260 <tcpip_inpkt+0x58>)
 800923a:	22fc      	movs	r2, #252	; 0xfc
 800923c:	4909      	ldr	r1, [pc, #36]	; (8009264 <tcpip_inpkt+0x5c>)
 800923e:	480a      	ldr	r0, [pc, #40]	; (8009268 <tcpip_inpkt+0x60>)
 8009240:	f008 f9de 	bl	8011600 <iprintf>
 8009244:	e7e8      	b.n	8009218 <tcpip_inpkt+0x10>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009246:	4621      	mov	r1, r4
 8009248:	2009      	movs	r0, #9
 800924a:	f000 fc99 	bl	8009b80 <memp_free>
    return ERR_MEM;
 800924e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8009252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_MEM;
 8009254:	f04f 30ff 	mov.w	r0, #4294967295
}
 8009258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800925a:	bf00      	nop
 800925c:	2400b548 	.word	0x2400b548
 8009260:	08012eec 	.word	0x08012eec
 8009264:	08012f3c 	.word	0x08012f3c
 8009268:	080124d0 	.word	0x080124d0

0800926c <tcpip_input>:
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800926c:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
 8009270:	f013 0f18 	tst.w	r3, #24
 8009274:	d002      	beq.n	800927c <tcpip_input+0x10>
    return tcpip_inpkt(p, inp, ethernet_input);
 8009276:	4a03      	ldr	r2, [pc, #12]	; (8009284 <tcpip_input+0x18>)
 8009278:	f7ff bfc6 	b.w	8009208 <tcpip_inpkt>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800927c:	4a02      	ldr	r2, [pc, #8]	; (8009288 <tcpip_input+0x1c>)
 800927e:	f7ff bfc3 	b.w	8009208 <tcpip_inpkt>
 8009282:	bf00      	nop
 8009284:	0801088d 	.word	0x0801088d
 8009288:	0800fcc1 	.word	0x0800fcc1

0800928c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800928c:	b570      	push	{r4, r5, r6, lr}
 800928e:	4606      	mov	r6, r0
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009290:	4812      	ldr	r0, [pc, #72]	; (80092dc <tcpip_try_callback+0x50>)
{
 8009292:	460d      	mov	r5, r1
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009294:	f007 fbe6 	bl	8010a64 <sys_mbox_valid>
 8009298:	b170      	cbz	r0, 80092b8 <tcpip_try_callback+0x2c>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800929a:	2008      	movs	r0, #8
 800929c:	f000 fc2a 	bl	8009af4 <memp_malloc>
  if (msg == NULL) {
 80092a0:	4604      	mov	r4, r0
 80092a2:	b1c0      	cbz	r0, 80092d6 <tcpip_try_callback+0x4a>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80092a4:	2301      	movs	r3, #1
  msg->msg.cb.function = function;
  msg->msg.cb.ctx = ctx;

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80092a6:	4601      	mov	r1, r0
  msg->msg.cb.ctx = ctx;
 80092a8:	e9c0 6501 	strd	r6, r5, [r0, #4]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80092ac:	480b      	ldr	r0, [pc, #44]	; (80092dc <tcpip_try_callback+0x50>)
  msg->type = TCPIP_MSG_CALLBACK;
 80092ae:	7023      	strb	r3, [r4, #0]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80092b0:	f007 fb96 	bl	80109e0 <sys_mbox_trypost>
 80092b4:	b940      	cbnz	r0, 80092c8 <tcpip_try_callback+0x3c>
    memp_free(MEMP_TCPIP_MSG_API, msg);
    return ERR_MEM;
  }
  return ERR_OK;
}
 80092b6:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80092b8:	4b09      	ldr	r3, [pc, #36]	; (80092e0 <tcpip_try_callback+0x54>)
 80092ba:	f240 125d 	movw	r2, #349	; 0x15d
 80092be:	4909      	ldr	r1, [pc, #36]	; (80092e4 <tcpip_try_callback+0x58>)
 80092c0:	4809      	ldr	r0, [pc, #36]	; (80092e8 <tcpip_try_callback+0x5c>)
 80092c2:	f008 f99d 	bl	8011600 <iprintf>
 80092c6:	e7e8      	b.n	800929a <tcpip_try_callback+0xe>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80092c8:	4621      	mov	r1, r4
 80092ca:	2008      	movs	r0, #8
 80092cc:	f000 fc58 	bl	8009b80 <memp_free>
    return ERR_MEM;
 80092d0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80092d4:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 80092d6:	f04f 30ff 	mov.w	r0, #4294967295
}
 80092da:	bd70      	pop	{r4, r5, r6, pc}
 80092dc:	2400b548 	.word	0x2400b548
 80092e0:	08012eec 	.word	0x08012eec
 80092e4:	08012f3c 	.word	0x08012f3c
 80092e8:	080124d0 	.word	0x080124d0

080092ec <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 80092ec:	b570      	push	{r4, r5, r6, lr}
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 80092ee:	4e06      	ldr	r6, [pc, #24]	; (8009308 <tcpip_send_msg_wait_sem+0x1c>)
{
 80092f0:	460d      	mov	r5, r1
 80092f2:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 80092f4:	4630      	mov	r0, r6
 80092f6:	f007 fc23 	bl	8010b40 <sys_mutex_lock>
  fn(apimsg);
 80092fa:	4628      	mov	r0, r5
 80092fc:	47a0      	blx	r4
  UNLOCK_TCPIP_CORE();
 80092fe:	4630      	mov	r0, r6
 8009300:	f007 fc24 	bl	8010b4c <sys_mutex_unlock>
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8009304:	2000      	movs	r0, #0
 8009306:	bd70      	pop	{r4, r5, r6, pc}
 8009308:	2400b53c 	.word	0x2400b53c

0800930c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800930c:	b530      	push	{r4, r5, lr}
 800930e:	b083      	sub	sp, #12
 8009310:	4605      	mov	r5, r0
 8009312:	460c      	mov	r4, r1
  lwip_init();
 8009314:	f000 f8b2 	bl	800947c <lwip_init>

  tcpip_init_done = initfunc;
 8009318:	4a15      	ldr	r2, [pc, #84]	; (8009370 <tcpip_init+0x64>)
  tcpip_init_done_arg = arg;
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800931a:	2106      	movs	r1, #6
  tcpip_init_done_arg = arg;
 800931c:	4b15      	ldr	r3, [pc, #84]	; (8009374 <tcpip_init+0x68>)
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800931e:	4816      	ldr	r0, [pc, #88]	; (8009378 <tcpip_init+0x6c>)
  tcpip_init_done = initfunc;
 8009320:	6015      	str	r5, [r2, #0]
  tcpip_init_done_arg = arg;
 8009322:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8009324:	f007 fb3c 	bl	80109a0 <sys_mbox_new>
 8009328:	b968      	cbnz	r0, 8009346 <tcpip_init+0x3a>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800932a:	4814      	ldr	r0, [pc, #80]	; (800937c <tcpip_init+0x70>)
 800932c:	f007 fbf8 	bl	8010b20 <sys_mutex_new>
 8009330:	b9a8      	cbnz	r0, 800935e <tcpip_init+0x52>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8009332:	2200      	movs	r2, #0
 8009334:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009338:	4911      	ldr	r1, [pc, #68]	; (8009380 <tcpip_init+0x74>)
 800933a:	9200      	str	r2, [sp, #0]
 800933c:	4811      	ldr	r0, [pc, #68]	; (8009384 <tcpip_init+0x78>)
 800933e:	f007 fc09 	bl	8010b54 <sys_thread_new>
}
 8009342:	b003      	add	sp, #12
 8009344:	bd30      	pop	{r4, r5, pc}
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8009346:	4b10      	ldr	r3, [pc, #64]	; (8009388 <tcpip_init+0x7c>)
 8009348:	f240 2261 	movw	r2, #609	; 0x261
 800934c:	490f      	ldr	r1, [pc, #60]	; (800938c <tcpip_init+0x80>)
 800934e:	4810      	ldr	r0, [pc, #64]	; (8009390 <tcpip_init+0x84>)
 8009350:	f008 f956 	bl	8011600 <iprintf>
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8009354:	4809      	ldr	r0, [pc, #36]	; (800937c <tcpip_init+0x70>)
 8009356:	f007 fbe3 	bl	8010b20 <sys_mutex_new>
 800935a:	2800      	cmp	r0, #0
 800935c:	d0e9      	beq.n	8009332 <tcpip_init+0x26>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800935e:	4b0a      	ldr	r3, [pc, #40]	; (8009388 <tcpip_init+0x7c>)
 8009360:	f240 2265 	movw	r2, #613	; 0x265
 8009364:	490b      	ldr	r1, [pc, #44]	; (8009394 <tcpip_init+0x88>)
 8009366:	480a      	ldr	r0, [pc, #40]	; (8009390 <tcpip_init+0x84>)
 8009368:	f008 f94a 	bl	8011600 <iprintf>
 800936c:	e7e1      	b.n	8009332 <tcpip_init+0x26>
 800936e:	bf00      	nop
 8009370:	2400b540 	.word	0x2400b540
 8009374:	2400b544 	.word	0x2400b544
 8009378:	2400b548 	.word	0x2400b548
 800937c:	2400b53c 	.word	0x2400b53c
 8009380:	0800912d 	.word	0x0800912d
 8009384:	08012f94 	.word	0x08012f94
 8009388:	08012eec 	.word	0x08012eec
 800938c:	08012f4c 	.word	0x08012f4c
 8009390:	080124d0 	.word	0x080124d0
 8009394:	08012f70 	.word	0x08012f70

08009398 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 8009398:	ba40      	rev16	r0, r0
}
 800939a:	b280      	uxth	r0, r0
 800939c:	4770      	bx	lr
 800939e:	bf00      	nop

080093a0 <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
}
 80093a0:	ba00      	rev	r0, r0
 80093a2:	4770      	bx	lr

080093a4 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 80093a4:	b530      	push	{r4, r5, lr}
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
 80093a6:	f04f 0e00 	mov.w	lr, #0
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);
 80093aa:	f000 0501 	and.w	r5, r0, #1

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 80093ae:	4571      	cmp	r1, lr
 80093b0:	dd05      	ble.n	80093be <lwip_standard_chksum+0x1a>
 80093b2:	b125      	cbz	r5, 80093be <lwip_standard_chksum+0x1a>
    ((u8_t *)&t)[1] = *pb++;
 80093b4:	f810 3b01 	ldrb.w	r3, [r0], #1
    len--;
 80093b8:	3901      	subs	r1, #1
    ((u8_t *)&t)[1] = *pb++;
 80093ba:	f363 2e1f 	bfi	lr, r3, #8, #24
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
 80093be:	2901      	cmp	r1, #1
 80093c0:	dd27      	ble.n	8009412 <lwip_standard_chksum+0x6e>
 80093c2:	3902      	subs	r1, #2
  u32_t sum = 0;
 80093c4:	2300      	movs	r3, #0
 80093c6:	084c      	lsrs	r4, r1, #1
 80093c8:	f104 0c01 	add.w	ip, r4, #1
 80093cc:	eb00 0c4c 	add.w	ip, r0, ip, lsl #1
    sum += *ps++;
 80093d0:	f830 2b02 	ldrh.w	r2, [r0], #2
  while (len > 1) {
 80093d4:	4584      	cmp	ip, r0
    sum += *ps++;
 80093d6:	4413      	add	r3, r2
  while (len > 1) {
 80093d8:	d1fa      	bne.n	80093d0 <lwip_standard_chksum+0x2c>
    len -= 2;
 80093da:	ebc4 74c4 	rsb	r4, r4, r4, lsl #31
 80093de:	eb01 0144 	add.w	r1, r1, r4, lsl #1
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 80093e2:	2901      	cmp	r1, #1
 80093e4:	d105      	bne.n	80093f2 <lwip_standard_chksum+0x4e>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 80093e6:	f89c 2000 	ldrb.w	r2, [ip]
 80093ea:	f362 0e07 	bfi	lr, r2, #0, #8
 80093ee:	fa1f fe8e 	uxth.w	lr, lr
  }

  /* Add end bytes */
  sum += t;
 80093f2:	449e      	add	lr, r3

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 80093f4:	fa1f f38e 	uxth.w	r3, lr
 80093f8:	eb03 431e 	add.w	r3, r3, lr, lsr #16
  sum = FOLD_U32T(sum);
 80093fc:	b298      	uxth	r0, r3
 80093fe:	eb00 4013 	add.w	r0, r0, r3, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 8009402:	b125      	cbz	r5, 800940e <lwip_standard_chksum+0x6a>
    sum = SWAP_BYTES_IN_WORD(sum);
 8009404:	0203      	lsls	r3, r0, #8
 8009406:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800940a:	b29b      	uxth	r3, r3
 800940c:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 800940e:	b280      	uxth	r0, r0
 8009410:	bd30      	pop	{r4, r5, pc}
  ps = (const u16_t *)(const void *)pb;
 8009412:	4684      	mov	ip, r0
  u32_t sum = 0;
 8009414:	2300      	movs	r3, #0
 8009416:	e7e4      	b.n	80093e2 <lwip_standard_chksum+0x3e>

08009418 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8009418:	b508      	push	{r3, lr}
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800941a:	f7ff ffc3 	bl	80093a4 <lwip_standard_chksum>
 800941e:	43c0      	mvns	r0, r0
}
 8009420:	b280      	uxth	r0, r0
 8009422:	bd08      	pop	{r3, pc}

08009424 <inet_chksum_pbuf>:
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;

  acc = 0;
  for (q = p; q != NULL; q = q->next) {
 8009424:	b338      	cbz	r0, 8009476 <inet_chksum_pbuf+0x52>
{
 8009426:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int swapped = 0;
 8009428:	2700      	movs	r7, #0
 800942a:	4605      	mov	r5, r0
  acc = 0;
 800942c:	463c      	mov	r4, r7
    acc += LWIP_CHKSUM(q->payload, q->len);
 800942e:	896e      	ldrh	r6, [r5, #10]
 8009430:	6868      	ldr	r0, [r5, #4]
 8009432:	4631      	mov	r1, r6
 8009434:	f7ff ffb6 	bl	80093a4 <lwip_standard_chksum>
 8009438:	4404      	add	r4, r0
    acc = FOLD_U32T(acc);
    if (q->len % 2 != 0) {
 800943a:	f016 0f01 	tst.w	r6, #1
    acc = FOLD_U32T(acc);
 800943e:	b2a3      	uxth	r3, r4
 8009440:	eb03 4414 	add.w	r4, r3, r4, lsr #16
      swapped = !swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
 8009444:	ea4f 2304 	mov.w	r3, r4, lsl #8
 8009448:	f3c4 2207 	ubfx	r2, r4, #8, #8
    if (q->len % 2 != 0) {
 800944c:	d004      	beq.n	8009458 <inet_chksum_pbuf+0x34>
      acc = SWAP_BYTES_IN_WORD(acc);
 800944e:	b29b      	uxth	r3, r3
 8009450:	f087 0701 	eor.w	r7, r7, #1
 8009454:	ea43 0402 	orr.w	r4, r3, r2
  for (q = p; q != NULL; q = q->next) {
 8009458:	682d      	ldr	r5, [r5, #0]
 800945a:	2d00      	cmp	r5, #0
 800945c:	d1e7      	bne.n	800942e <inet_chksum_pbuf+0xa>
    }
  }

  if (swapped) {
 800945e:	b13f      	cbz	r7, 8009470 <inet_chksum_pbuf+0x4c>
    acc = SWAP_BYTES_IN_WORD(acc);
 8009460:	0220      	lsls	r0, r4, #8
 8009462:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8009466:	b280      	uxth	r0, r0
 8009468:	4320      	orrs	r0, r4
  }
  return (u16_t)~(acc & 0xffffUL);
 800946a:	43c0      	mvns	r0, r0
 800946c:	b280      	uxth	r0, r0
}
 800946e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return (u16_t)~(acc & 0xffffUL);
 8009470:	43e0      	mvns	r0, r4
 8009472:	b280      	uxth	r0, r0
}
 8009474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  for (q = p; q != NULL; q = q->next) {
 8009476:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 800947a:	4770      	bx	lr

0800947c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800947c:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800947e:	f007 fb43 	bl	8010b08 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8009482:	f000 f80d 	bl	80094a0 <mem_init>
  memp_init();
 8009486:	f000 faf3 	bl	8009a70 <memp_init>
  pbuf_init();
  netif_init();
 800948a:	f000 fbf9 	bl	8009c80 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800948e:	f005 fb3d 	bl	800eb0c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8009492:	f001 fa11 	bl	800a8b8 <tcp_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 8009496:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 800949a:	f005 bae3 	b.w	800ea64 <sys_timeouts_init>
 800949e:	bf00      	nop

080094a0 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80094a0:	4b13      	ldr	r3, [pc, #76]	; (80094f0 <mem_init+0x50>)
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
 80094a2:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80094a6:	4813      	ldr	r0, [pc, #76]	; (80094f4 <mem_init+0x54>)
  mem->next = MEM_SIZE_ALIGNED;
 80094a8:	f647 51e8 	movw	r1, #32232	; 0x7de8
{
 80094ac:	b510      	push	{r4, lr}
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80094ae:	6003      	str	r3, [r0, #0]
  mem->prev = 0;
  mem->used = 0;
 80094b0:	2400      	movs	r4, #0
  mem->next = MEM_SIZE_ALIGNED;
 80094b2:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80094b6:	4419      	add	r1, r3
 80094b8:	4a0f      	ldr	r2, [pc, #60]	; (80094f8 <mem_init+0x58>)
  mem->used = 0;
 80094ba:	711c      	strb	r4, [r3, #4]
  ram_end->used = 1;
  ram_end->next = MEM_SIZE_ALIGNED;
 80094bc:	480f      	ldr	r0, [pc, #60]	; (80094fc <mem_init+0x5c>)
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80094be:	6011      	str	r1, [r2, #0]
  ram_end->used = 1;
 80094c0:	2101      	movs	r1, #1
 80094c2:	4a0f      	ldr	r2, [pc, #60]	; (8009500 <mem_init+0x60>)
  ram_end->next = MEM_SIZE_ALIGNED;
 80094c4:	4c0f      	ldr	r4, [pc, #60]	; (8009504 <mem_init+0x64>)
 80094c6:	f8c0 4fe8 	str.w	r4, [r0, #4072]	; 0xfe8
  ram_end->used = 1;
 80094ca:	f882 10ec 	strb.w	r1, [r2, #236]	; 0xec
  ram_end->prev = MEM_SIZE_ALIGNED;
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80094ce:	4a0e      	ldr	r2, [pc, #56]	; (8009508 <mem_init+0x68>)

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80094d0:	480e      	ldr	r0, [pc, #56]	; (800950c <mem_init+0x6c>)
  lfree = (struct mem *)(void *)ram;
 80094d2:	6013      	str	r3, [r2, #0]
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80094d4:	f007 fb24 	bl	8010b20 <sys_mutex_new>
 80094d8:	b900      	cbnz	r0, 80094dc <mem_init+0x3c>
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80094da:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80094dc:	4b0c      	ldr	r3, [pc, #48]	; (8009510 <mem_init+0x70>)
 80094de:	f240 221f 	movw	r2, #543	; 0x21f
 80094e2:	490c      	ldr	r1, [pc, #48]	; (8009514 <mem_init+0x74>)
 80094e4:	480c      	ldr	r0, [pc, #48]	; (8009518 <mem_init+0x78>)
}
 80094e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80094ea:	f008 b889 	b.w	8011600 <iprintf>
 80094ee:	bf00      	nop
 80094f0:	30000200 	.word	0x30000200
 80094f4:	2400b56c 	.word	0x2400b56c
 80094f8:	2400b570 	.word	0x2400b570
 80094fc:	30007000 	.word	0x30007000
 8009500:	30007f00 	.word	0x30007f00
 8009504:	7de87de8 	.word	0x7de87de8
 8009508:	2400b564 	.word	0x2400b564
 800950c:	2400b568 	.word	0x2400b568
 8009510:	08012fa4 	.word	0x08012fa4
 8009514:	08012fd4 	.word	0x08012fd4
 8009518:	080124d0 	.word	0x080124d0

0800951c <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800951c:	2800      	cmp	r0, #0
 800951e:	f000 809c 	beq.w	800965a <mem_free+0x13e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8009522:	0783      	lsls	r3, r0, #30
{
 8009524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009528:	4604      	mov	r4, r0
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800952a:	f040 8091 	bne.w	8009650 <mem_free+0x134>

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800952e:	4e63      	ldr	r6, [pc, #396]	; (80096bc <mem_free+0x1a0>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009530:	f1a0 0508 	sub.w	r5, r0, #8
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8009534:	6833      	ldr	r3, [r6, #0]
 8009536:	42ab      	cmp	r3, r5
 8009538:	d805      	bhi.n	8009546 <mem_free+0x2a>
 800953a:	4f61      	ldr	r7, [pc, #388]	; (80096c0 <mem_free+0x1a4>)
 800953c:	f100 030c 	add.w	r3, r0, #12
 8009540:	683a      	ldr	r2, [r7, #0]
 8009542:	429a      	cmp	r2, r3
 8009544:	d20c      	bcs.n	8009560 <mem_free+0x44>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8009546:	4b5f      	ldr	r3, [pc, #380]	; (80096c4 <mem_free+0x1a8>)
 8009548:	f240 227f 	movw	r2, #639	; 0x27f
 800954c:	495e      	ldr	r1, [pc, #376]	; (80096c8 <mem_free+0x1ac>)
 800954e:	485f      	ldr	r0, [pc, #380]	; (80096cc <mem_free+0x1b0>)
 8009550:	f008 f856 	bl	8011600 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009554:	f007 fb12 	bl	8010b7c <sys_arch_protect>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8009558:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    MEM_STATS_INC_LOCKED(illegal);
 800955c:	f007 bb1a 	b.w	8010b94 <sys_arch_unprotect>
  LWIP_MEM_FREE_PROTECT();
 8009560:	485b      	ldr	r0, [pc, #364]	; (80096d0 <mem_free+0x1b4>)
 8009562:	f007 faed 	bl	8010b40 <sys_mutex_lock>
  if (!mem->used) {
 8009566:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 800956a:	2b00      	cmp	r3, #0
 800956c:	f000 80a1 	beq.w	80096b2 <mem_free+0x196>
  pmem = ptr_to_mem(mem->prev);
 8009570:	f834 1c06 	ldrh.w	r1, [r4, #-6]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009574:	f647 50e8 	movw	r0, #32232	; 0x7de8
  return (mem_size_t)((u8_t *)mem - ram);
 8009578:	6832      	ldr	r2, [r6, #0]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800957a:	4281      	cmp	r1, r0
  nmem = ptr_to_mem(mem->next);
 800957c:	f834 3c08 	ldrh.w	r3, [r4, #-8]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009580:	d808      	bhi.n	8009594 <mem_free+0x78>
 8009582:	4283      	cmp	r3, r0
 8009584:	d806      	bhi.n	8009594 <mem_free+0x78>
  return (mem_size_t)((u8_t *)mem - ram);
 8009586:	1aa8      	subs	r0, r5, r2
 8009588:	b280      	uxth	r0, r0
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800958a:	4288      	cmp	r0, r1
 800958c:	d012      	beq.n	80095b4 <mem_free+0x98>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800958e:	5a51      	ldrh	r1, [r2, r1]
 8009590:	4281      	cmp	r1, r0
 8009592:	d00f      	beq.n	80095b4 <mem_free+0x98>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8009594:	4b4b      	ldr	r3, [pc, #300]	; (80096c4 <mem_free+0x1a8>)
 8009596:	f240 2295 	movw	r2, #661	; 0x295
 800959a:	494e      	ldr	r1, [pc, #312]	; (80096d4 <mem_free+0x1b8>)
 800959c:	484b      	ldr	r0, [pc, #300]	; (80096cc <mem_free+0x1b0>)
 800959e:	f008 f82f 	bl	8011600 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80095a2:	484b      	ldr	r0, [pc, #300]	; (80096d0 <mem_free+0x1b4>)
 80095a4:	f007 fad2 	bl	8010b4c <sys_mutex_unlock>
    MEM_STATS_INC_LOCKED(illegal);
 80095a8:	f007 fae8 	bl	8010b7c <sys_arch_protect>
}
 80095ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    MEM_STATS_INC_LOCKED(illegal);
 80095b0:	f007 baf0 	b.w	8010b94 <sys_arch_unprotect>
  return (struct mem *)(void *)&ram[ptr];
 80095b4:	18d1      	adds	r1, r2, r3
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80095b6:	f8d7 c000 	ldr.w	ip, [r7]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80095ba:	4561      	cmp	r1, ip
 80095bc:	d002      	beq.n	80095c4 <mem_free+0xa8>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80095be:	8849      	ldrh	r1, [r1, #2]
 80095c0:	4281      	cmp	r1, r0
 80095c2:	d1e7      	bne.n	8009594 <mem_free+0x78>
  if (mem < lfree) {
 80095c4:	f8df 8128 	ldr.w	r8, [pc, #296]	; 80096f0 <mem_free+0x1d4>
  mem->used = 0;
 80095c8:	2100      	movs	r1, #0
 80095ca:	f804 1c04 	strb.w	r1, [r4, #-4]
  if (mem < lfree) {
 80095ce:	f8d8 1000 	ldr.w	r1, [r8]
 80095d2:	42a9      	cmp	r1, r5
    lfree = mem;
 80095d4:	bf88      	it	hi
 80095d6:	f8c8 5000 	strhi.w	r5, [r8]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80095da:	4295      	cmp	r5, r2
 80095dc:	d33e      	bcc.n	800965c <mem_free+0x140>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80095de:	4565      	cmp	r5, ip
 80095e0:	d246      	bcs.n	8009670 <mem_free+0x154>
  return (struct mem *)(void *)&ram[ptr];
 80095e2:	6832      	ldr	r2, [r6, #0]
 80095e4:	4413      	add	r3, r2
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80095e6:	429d      	cmp	r5, r3
 80095e8:	d015      	beq.n	8009616 <mem_free+0xfa>
 80095ea:	7919      	ldrb	r1, [r3, #4]
 80095ec:	b999      	cbnz	r1, 8009616 <mem_free+0xfa>
 80095ee:	6839      	ldr	r1, [r7, #0]
 80095f0:	428b      	cmp	r3, r1
 80095f2:	d010      	beq.n	8009616 <mem_free+0xfa>
    if (lfree == nmem) {
 80095f4:	f8d8 1000 	ldr.w	r1, [r8]
 80095f8:	428b      	cmp	r3, r1
    mem->next = nmem->next;
 80095fa:	8819      	ldrh	r1, [r3, #0]
 80095fc:	f824 1c08 	strh.w	r1, [r4, #-8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8009600:	f647 51e8 	movw	r1, #32232	; 0x7de8
 8009604:	881b      	ldrh	r3, [r3, #0]
      lfree = mem;
 8009606:	bf08      	it	eq
 8009608:	f8c8 5000 	streq.w	r5, [r8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800960c:	428b      	cmp	r3, r1
 800960e:	d002      	beq.n	8009616 <mem_free+0xfa>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8009610:	4413      	add	r3, r2
  return (mem_size_t)((u8_t *)mem - ram);
 8009612:	1aa9      	subs	r1, r5, r2
 8009614:	8059      	strh	r1, [r3, #2]
  pmem = ptr_to_mem(mem->prev);
 8009616:	f834 1c06 	ldrh.w	r1, [r4, #-6]
  return (struct mem *)(void *)&ram[ptr];
 800961a:	1853      	adds	r3, r2, r1
  if (pmem != mem && pmem->used == 0) {
 800961c:	429d      	cmp	r5, r3
 800961e:	d012      	beq.n	8009646 <mem_free+0x12a>
 8009620:	7918      	ldrb	r0, [r3, #4]
 8009622:	b980      	cbnz	r0, 8009646 <mem_free+0x12a>
    if (lfree == mem) {
 8009624:	f8d8 0000 	ldr.w	r0, [r8]
 8009628:	4285      	cmp	r5, r0
    if (mem->next != MEM_SIZE_ALIGNED) {
 800962a:	f647 50e8 	movw	r0, #32232	; 0x7de8
      lfree = pmem;
 800962e:	bf08      	it	eq
 8009630:	f8c8 3000 	streq.w	r3, [r8]
    pmem->next = mem->next;
 8009634:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 8009638:	5253      	strh	r3, [r2, r1]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800963a:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 800963e:	4283      	cmp	r3, r0
 8009640:	d001      	beq.n	8009646 <mem_free+0x12a>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8009642:	441a      	add	r2, r3
 8009644:	8051      	strh	r1, [r2, #2]
  LWIP_MEM_FREE_UNPROTECT();
 8009646:	4822      	ldr	r0, [pc, #136]	; (80096d0 <mem_free+0x1b4>)
}
 8009648:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_MEM_FREE_UNPROTECT();
 800964c:	f007 ba7e 	b.w	8010b4c <sys_mutex_unlock>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8009650:	4b1c      	ldr	r3, [pc, #112]	; (80096c4 <mem_free+0x1a8>)
 8009652:	f240 2273 	movw	r2, #627	; 0x273
 8009656:	4920      	ldr	r1, [pc, #128]	; (80096d8 <mem_free+0x1bc>)
 8009658:	e779      	b.n	800954e <mem_free+0x32>
 800965a:	4770      	bx	lr
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800965c:	4b19      	ldr	r3, [pc, #100]	; (80096c4 <mem_free+0x1a8>)
 800965e:	f240 12df 	movw	r2, #479	; 0x1df
 8009662:	491e      	ldr	r1, [pc, #120]	; (80096dc <mem_free+0x1c0>)
 8009664:	4819      	ldr	r0, [pc, #100]	; (80096cc <mem_free+0x1b0>)
 8009666:	f007 ffcb 	bl	8011600 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	429d      	cmp	r5, r3
 800966e:	d306      	bcc.n	800967e <mem_free+0x162>
 8009670:	4b14      	ldr	r3, [pc, #80]	; (80096c4 <mem_free+0x1a8>)
 8009672:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009676:	491a      	ldr	r1, [pc, #104]	; (80096e0 <mem_free+0x1c4>)
 8009678:	4814      	ldr	r0, [pc, #80]	; (80096cc <mem_free+0x1b0>)
 800967a:	f007 ffc1 	bl	8011600 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800967e:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8009682:	b133      	cbz	r3, 8009692 <mem_free+0x176>
 8009684:	4b0f      	ldr	r3, [pc, #60]	; (80096c4 <mem_free+0x1a8>)
 8009686:	f240 12e1 	movw	r2, #481	; 0x1e1
 800968a:	4916      	ldr	r1, [pc, #88]	; (80096e4 <mem_free+0x1c8>)
 800968c:	480f      	ldr	r0, [pc, #60]	; (80096cc <mem_free+0x1b0>)
 800968e:	f007 ffb7 	bl	8011600 <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8009692:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 8009696:	f647 52e8 	movw	r2, #32232	; 0x7de8
 800969a:	4293      	cmp	r3, r2
 800969c:	d9a1      	bls.n	80095e2 <mem_free+0xc6>
 800969e:	4b09      	ldr	r3, [pc, #36]	; (80096c4 <mem_free+0x1a8>)
 80096a0:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80096a4:	4910      	ldr	r1, [pc, #64]	; (80096e8 <mem_free+0x1cc>)
 80096a6:	4809      	ldr	r0, [pc, #36]	; (80096cc <mem_free+0x1b0>)
 80096a8:	f007 ffaa 	bl	8011600 <iprintf>
  nmem = ptr_to_mem(mem->next);
 80096ac:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 80096b0:	e797      	b.n	80095e2 <mem_free+0xc6>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80096b2:	4b04      	ldr	r3, [pc, #16]	; (80096c4 <mem_free+0x1a8>)
 80096b4:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80096b8:	490c      	ldr	r1, [pc, #48]	; (80096ec <mem_free+0x1d0>)
 80096ba:	e76f      	b.n	800959c <mem_free+0x80>
 80096bc:	2400b56c 	.word	0x2400b56c
 80096c0:	2400b570 	.word	0x2400b570
 80096c4:	08012fa4 	.word	0x08012fa4
 80096c8:	08013014 	.word	0x08013014
 80096cc:	080124d0 	.word	0x080124d0
 80096d0:	2400b568 	.word	0x2400b568
 80096d4:	08013058 	.word	0x08013058
 80096d8:	08012ff0 	.word	0x08012ff0
 80096dc:	0801308c 	.word	0x0801308c
 80096e0:	080130a4 	.word	0x080130a4
 80096e4:	080130c0 	.word	0x080130c0
 80096e8:	080130dc 	.word	0x080130dc
 80096ec:	08013030 	.word	0x08013030
 80096f0:	2400b564 	.word	0x2400b564

080096f4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80096f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80096f8:	1ccb      	adds	r3, r1, #3
 80096fa:	f023 0303 	bic.w	r3, r3, #3
 80096fe:	b29b      	uxth	r3, r3
  if (newsize < MIN_SIZE_ALIGNED) {
 8009700:	2b0c      	cmp	r3, #12
 8009702:	461d      	mov	r5, r3
 8009704:	bf38      	it	cc
 8009706:	250c      	movcc	r5, #12
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8009708:	42a9      	cmp	r1, r5
 800970a:	f200 8081 	bhi.w	8009810 <mem_trim+0x11c>
 800970e:	f647 52e8 	movw	r2, #32232	; 0x7de8
 8009712:	4293      	cmp	r3, r2
 8009714:	d87c      	bhi.n	8009810 <mem_trim+0x11c>
    return NULL;
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8009716:	4f50      	ldr	r7, [pc, #320]	; (8009858 <mem_trim+0x164>)
 8009718:	4604      	mov	r4, r0
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	4283      	cmp	r3, r0
 800971e:	d842      	bhi.n	80097a6 <mem_trim+0xb2>
 8009720:	4a4e      	ldr	r2, [pc, #312]	; (800985c <mem_trim+0x168>)
 8009722:	6812      	ldr	r2, [r2, #0]
 8009724:	4282      	cmp	r2, r0
 8009726:	d93e      	bls.n	80097a6 <mem_trim+0xb2>
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009728:	f1a4 0808 	sub.w	r8, r4, #8
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800972c:	f834 6c08 	ldrh.w	r6, [r4, #-8]
  return (mem_size_t)((u8_t *)mem - ram);
 8009730:	eba8 0803 	sub.w	r8, r8, r3
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8009734:	3e08      	subs	r6, #8
  return (mem_size_t)((u8_t *)mem - ram);
 8009736:	fa1f f888 	uxth.w	r8, r8
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800973a:	eba6 0608 	sub.w	r6, r6, r8
 800973e:	b2b6      	uxth	r6, r6
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8009740:	42ae      	cmp	r6, r5
 8009742:	d368      	bcc.n	8009816 <mem_trim+0x122>
  if (newsize > size) {
    /* not supported */
    return NULL;
  }
  if (newsize == size) {
 8009744:	d071      	beq.n	800982a <mem_trim+0x136>
    /* No change in size, simply return */
    return rmem;
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8009746:	4846      	ldr	r0, [pc, #280]	; (8009860 <mem_trim+0x16c>)
 8009748:	f007 f9fa 	bl	8010b40 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800974c:	f834 2c08 	ldrh.w	r2, [r4, #-8]
  return (struct mem *)(void *)&ram[ptr];
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	eb03 0902 	add.w	r9, r3, r2
  if (mem2->used == 0) {
 8009756:	f899 1004 	ldrb.w	r1, [r9, #4]
 800975a:	2900      	cmp	r1, #0
 800975c:	d138      	bne.n	80097d0 <mem_trim+0xdc>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800975e:	f647 51e8 	movw	r1, #32232	; 0x7de8
 8009762:	428a      	cmp	r2, r1
 8009764:	d06f      	beq.n	8009846 <mem_trim+0x152>
    /* remember the old next pointer */
    next = mem2->next;
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009766:	3508      	adds	r5, #8
    if (lfree == mem2) {
 8009768:	493e      	ldr	r1, [pc, #248]	; (8009864 <mem_trim+0x170>)
    next = mem2->next;
 800976a:	f8b9 0000 	ldrh.w	r0, [r9]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800976e:	4445      	add	r5, r8
    if (lfree == mem2) {
 8009770:	680a      	ldr	r2, [r1, #0]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009772:	b2ad      	uxth	r5, r5
    if (lfree == mem2) {
 8009774:	454a      	cmp	r2, r9
  return (struct mem *)(void *)&ram[ptr];
 8009776:	eb03 0205 	add.w	r2, r3, r5
      lfree = ptr_to_mem(ptr2);
 800977a:	bf08      	it	eq
 800977c:	600a      	streq	r2, [r1, #0]
    }
    mem2 = ptr_to_mem(ptr2);
    mem2->used = 0;
 800977e:	2100      	movs	r1, #0
    /* restore the next pointer */
    mem2->next = next;
 8009780:	8010      	strh	r0, [r2, #0]
    mem2->used = 0;
 8009782:	7111      	strb	r1, [r2, #4]
    /* link mem to it */
    mem->next = ptr2;
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009784:	f647 51e8 	movw	r1, #32232	; 0x7de8
    mem2->prev = ptr;
 8009788:	f8a2 8002 	strh.w	r8, [r2, #2]
    mem->next = ptr2;
 800978c:	f824 5c08 	strh.w	r5, [r4, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009790:	8812      	ldrh	r2, [r2, #0]
 8009792:	428a      	cmp	r2, r1
 8009794:	d001      	beq.n	800979a <mem_trim+0xa6>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009796:	441a      	add	r2, r3
 8009798:	8055      	strh	r5, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800979a:	4831      	ldr	r0, [pc, #196]	; (8009860 <mem_trim+0x16c>)
 800979c:	f007 f9d6 	bl	8010b4c <sys_mutex_unlock>
  return rmem;
 80097a0:	4620      	mov	r0, r4
}
 80097a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80097a6:	4b30      	ldr	r3, [pc, #192]	; (8009868 <mem_trim+0x174>)
 80097a8:	f240 22d1 	movw	r2, #721	; 0x2d1
 80097ac:	492f      	ldr	r1, [pc, #188]	; (800986c <mem_trim+0x178>)
 80097ae:	4830      	ldr	r0, [pc, #192]	; (8009870 <mem_trim+0x17c>)
 80097b0:	f007 ff26 	bl	8011600 <iprintf>
  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	42a3      	cmp	r3, r4
 80097b8:	d803      	bhi.n	80097c2 <mem_trim+0xce>
 80097ba:	4a28      	ldr	r2, [pc, #160]	; (800985c <mem_trim+0x168>)
 80097bc:	6812      	ldr	r2, [r2, #0]
 80097be:	42a2      	cmp	r2, r4
 80097c0:	d8b2      	bhi.n	8009728 <mem_trim+0x34>
    MEM_STATS_INC_LOCKED(illegal);
 80097c2:	f007 f9db 	bl	8010b7c <sys_arch_protect>
 80097c6:	f007 f9e5 	bl	8010b94 <sys_arch_unprotect>
    return rmem;
 80097ca:	4620      	mov	r0, r4
}
 80097cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80097d0:	f105 0114 	add.w	r1, r5, #20
 80097d4:	42b1      	cmp	r1, r6
 80097d6:	d8e0      	bhi.n	800979a <mem_trim+0xa6>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80097d8:	3508      	adds	r5, #8
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80097da:	f647 51e8 	movw	r1, #32232	; 0x7de8
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80097de:	4445      	add	r5, r8
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80097e0:	428a      	cmp	r2, r1
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80097e2:	b2ad      	uxth	r5, r5
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80097e4:	d024      	beq.n	8009830 <mem_trim+0x13c>
    if (mem2 < lfree) {
 80097e6:	481f      	ldr	r0, [pc, #124]	; (8009864 <mem_trim+0x170>)
  return (struct mem *)(void *)&ram[ptr];
 80097e8:	1959      	adds	r1, r3, r5
    if (mem2 < lfree) {
 80097ea:	6806      	ldr	r6, [r0, #0]
    mem2->next = mem->next;
 80097ec:	800a      	strh	r2, [r1, #0]
    mem2->used = 0;
 80097ee:	2200      	movs	r2, #0
    if (mem2 < lfree) {
 80097f0:	428e      	cmp	r6, r1
    mem2->prev = ptr;
 80097f2:	f8a1 8002 	strh.w	r8, [r1, #2]
    mem2->used = 0;
 80097f6:	710a      	strb	r2, [r1, #4]
      lfree = mem2;
 80097f8:	bf88      	it	hi
 80097fa:	6001      	strhi	r1, [r0, #0]
    mem->next = ptr2;
 80097fc:	f824 5c08 	strh.w	r5, [r4, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009800:	880a      	ldrh	r2, [r1, #0]
 8009802:	f647 51e8 	movw	r1, #32232	; 0x7de8
 8009806:	428a      	cmp	r2, r1
 8009808:	d0c7      	beq.n	800979a <mem_trim+0xa6>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800980a:	4413      	add	r3, r2
 800980c:	805d      	strh	r5, [r3, #2]
 800980e:	e7c4      	b.n	800979a <mem_trim+0xa6>
    return NULL;
 8009810:	2000      	movs	r0, #0
}
 8009812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8009816:	4b14      	ldr	r3, [pc, #80]	; (8009868 <mem_trim+0x174>)
 8009818:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800981c:	4915      	ldr	r1, [pc, #84]	; (8009874 <mem_trim+0x180>)
 800981e:	4814      	ldr	r0, [pc, #80]	; (8009870 <mem_trim+0x17c>)
 8009820:	f007 feee 	bl	8011600 <iprintf>
    return NULL;
 8009824:	2000      	movs	r0, #0
}
 8009826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800982a:	4620      	mov	r0, r4
 800982c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009830:	4b0d      	ldr	r3, [pc, #52]	; (8009868 <mem_trim+0x174>)
 8009832:	f240 3216 	movw	r2, #790	; 0x316
 8009836:	4910      	ldr	r1, [pc, #64]	; (8009878 <mem_trim+0x184>)
 8009838:	480d      	ldr	r0, [pc, #52]	; (8009870 <mem_trim+0x17c>)
 800983a:	f007 fee1 	bl	8011600 <iprintf>
    mem2->next = mem->next;
 800983e:	f834 2c08 	ldrh.w	r2, [r4, #-8]
  return (struct mem *)(void *)&ram[ptr];
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	e7cf      	b.n	80097e6 <mem_trim+0xf2>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009846:	4b08      	ldr	r3, [pc, #32]	; (8009868 <mem_trim+0x174>)
 8009848:	f240 22f5 	movw	r2, #757	; 0x2f5
 800984c:	490a      	ldr	r1, [pc, #40]	; (8009878 <mem_trim+0x184>)
 800984e:	4808      	ldr	r0, [pc, #32]	; (8009870 <mem_trim+0x17c>)
 8009850:	f007 fed6 	bl	8011600 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	e786      	b.n	8009766 <mem_trim+0x72>
 8009858:	2400b56c 	.word	0x2400b56c
 800985c:	2400b570 	.word	0x2400b570
 8009860:	2400b568 	.word	0x2400b568
 8009864:	2400b564 	.word	0x2400b564
 8009868:	08012fa4 	.word	0x08012fa4
 800986c:	08013108 	.word	0x08013108
 8009870:	080124d0 	.word	0x080124d0
 8009874:	08013120 	.word	0x08013120
 8009878:	08013140 	.word	0x08013140

0800987c <mem_malloc>:
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800987c:	2800      	cmp	r0, #0
 800987e:	d070      	beq.n	8009962 <mem_malloc+0xe6>
{
 8009880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8009884:	1cc3      	adds	r3, r0, #3
 8009886:	f023 0303 	bic.w	r3, r3, #3
 800988a:	b29b      	uxth	r3, r3
  if (size < MIN_SIZE_ALIGNED) {
 800988c:	2b0c      	cmp	r3, #12
 800988e:	4698      	mov	r8, r3
 8009890:	bf38      	it	cc
 8009892:	f04f 080c 	movcc.w	r8, #12
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8009896:	4580      	cmp	r8, r0
 8009898:	d32e      	bcc.n	80098f8 <mem_malloc+0x7c>
 800989a:	f647 54e8 	movw	r4, #32232	; 0x7de8
 800989e:	42a3      	cmp	r3, r4
 80098a0:	d82a      	bhi.n	80098f8 <mem_malloc+0x7c>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80098a2:	4e4a      	ldr	r6, [pc, #296]	; (80099cc <mem_malloc+0x150>)
  return (mem_size_t)((u8_t *)mem - ram);
 80098a4:	4d4a      	ldr	r5, [pc, #296]	; (80099d0 <mem_malloc+0x154>)
  sys_mutex_lock(&mem_mutex);
 80098a6:	484b      	ldr	r0, [pc, #300]	; (80099d4 <mem_malloc+0x158>)
 80098a8:	f007 f94a 	bl	8010b40 <sys_mutex_lock>
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80098ac:	f8d6 c000 	ldr.w	ip, [r6]
  return (mem_size_t)((u8_t *)mem - ram);
 80098b0:	6829      	ldr	r1, [r5, #0]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80098b2:	eba4 0e08 	sub.w	lr, r4, r8
  return (mem_size_t)((u8_t *)mem - ram);
 80098b6:	ebac 0701 	sub.w	r7, ip, r1
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80098ba:	b2bb      	uxth	r3, r7
 80098bc:	4573      	cmp	r3, lr
  return (mem_size_t)((u8_t *)mem - ram);
 80098be:	461f      	mov	r7, r3
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80098c0:	d214      	bcs.n	80098ec <mem_malloc+0x70>
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80098c2:	f06f 0907 	mvn.w	r9, #7
 80098c6:	e007      	b.n	80098d8 <mem_malloc+0x5c>
 80098c8:	5ac8      	ldrh	r0, [r1, r3]
 80098ca:	4402      	add	r2, r0
 80098cc:	4603      	mov	r3, r0
      if ((!mem->used) &&
 80098ce:	4542      	cmp	r2, r8
 80098d0:	d215      	bcs.n	80098fe <mem_malloc+0x82>
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80098d2:	4573      	cmp	r3, lr
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80098d4:	4607      	mov	r7, r0
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80098d6:	d209      	bcs.n	80098ec <mem_malloc+0x70>
  return (struct mem *)(void *)&ram[ptr];
 80098d8:	18cc      	adds	r4, r1, r3
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80098da:	eba9 0203 	sub.w	r2, r9, r3
      if ((!mem->used) &&
 80098de:	7920      	ldrb	r0, [r4, #4]
 80098e0:	2800      	cmp	r0, #0
 80098e2:	d0f1      	beq.n	80098c8 <mem_malloc+0x4c>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80098e4:	5acf      	ldrh	r7, [r1, r3]
 80098e6:	463b      	mov	r3, r7
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80098e8:	4573      	cmp	r3, lr
 80098ea:	d3f5      	bcc.n	80098d8 <mem_malloc+0x5c>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 80098ec:	4839      	ldr	r0, [pc, #228]	; (80099d4 <mem_malloc+0x158>)
 80098ee:	f007 f92d 	bl	8010b4c <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80098f2:	2000      	movs	r0, #0
}
 80098f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return NULL;
 80098f8:	2000      	movs	r0, #0
}
 80098fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80098fe:	f108 0314 	add.w	r3, r8, #20
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8009902:	f108 0808 	add.w	r8, r8, #8
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8009906:	429a      	cmp	r2, r3
 8009908:	d32c      	bcc.n	8009964 <mem_malloc+0xe8>
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800990a:	eb07 0908 	add.w	r9, r7, r8
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800990e:	f647 53e8 	movw	r3, #32232	; 0x7de8
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8009912:	fa1f f989 	uxth.w	r9, r9
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8009916:	4599      	cmp	r9, r3
 8009918:	d04c      	beq.n	80099b4 <mem_malloc+0x138>
  return (struct mem *)(void *)&ram[ptr];
 800991a:	eb01 0309 	add.w	r3, r1, r9
          mem2->used = 0;
 800991e:	2200      	movs	r2, #0
 8009920:	711a      	strb	r2, [r3, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8009922:	f647 52e8 	movw	r2, #32232	; 0x7de8
          mem2->next = mem->next;
 8009926:	f821 0009 	strh.w	r0, [r1, r9]
          mem2->prev = ptr;
 800992a:	805f      	strh	r7, [r3, #2]
          mem->used = 1;
 800992c:	2301      	movs	r3, #1
          mem->next = ptr2;
 800992e:	f8a4 9000 	strh.w	r9, [r4]
          mem->used = 1;
 8009932:	7123      	strb	r3, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8009934:	f831 3009 	ldrh.w	r3, [r1, r9]
 8009938:	4293      	cmp	r3, r2
 800993a:	d002      	beq.n	8009942 <mem_malloc+0xc6>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800993c:	4419      	add	r1, r3
 800993e:	f8a1 9002 	strh.w	r9, [r1, #2]
        if (mem == lfree) {
 8009942:	4564      	cmp	r4, ip
          while (cur->used && cur != ram_end) {
 8009944:	4f24      	ldr	r7, [pc, #144]	; (80099d8 <mem_malloc+0x15c>)
        if (mem == lfree) {
 8009946:	d027      	beq.n	8009998 <mem_malloc+0x11c>
        sys_mutex_unlock(&mem_mutex);
 8009948:	4822      	ldr	r0, [pc, #136]	; (80099d4 <mem_malloc+0x158>)
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800994a:	44a0      	add	r8, r4
        sys_mutex_unlock(&mem_mutex);
 800994c:	f007 f8fe 	bl	8010b4c <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	4543      	cmp	r3, r8
 8009954:	d318      	bcc.n	8009988 <mem_malloc+0x10c>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8009956:	07a3      	lsls	r3, r4, #30
 8009958:	d107      	bne.n	800996a <mem_malloc+0xee>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800995a:	f104 0008 	add.w	r0, r4, #8
}
 800995e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009962:	4770      	bx	lr
          mem->used = 1;
 8009964:	2301      	movs	r3, #1
 8009966:	7123      	strb	r3, [r4, #4]
 8009968:	e7eb      	b.n	8009942 <mem_malloc+0xc6>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800996a:	4b1c      	ldr	r3, [pc, #112]	; (80099dc <mem_malloc+0x160>)
 800996c:	f240 32bb 	movw	r2, #955	; 0x3bb
 8009970:	491b      	ldr	r1, [pc, #108]	; (80099e0 <mem_malloc+0x164>)
 8009972:	481c      	ldr	r0, [pc, #112]	; (80099e4 <mem_malloc+0x168>)
 8009974:	f007 fe44 	bl	8011600 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8009978:	4b18      	ldr	r3, [pc, #96]	; (80099dc <mem_malloc+0x160>)
 800997a:	f240 32bd 	movw	r2, #957	; 0x3bd
 800997e:	491a      	ldr	r1, [pc, #104]	; (80099e8 <mem_malloc+0x16c>)
 8009980:	4818      	ldr	r0, [pc, #96]	; (80099e4 <mem_malloc+0x168>)
 8009982:	f007 fe3d 	bl	8011600 <iprintf>
 8009986:	e7e8      	b.n	800995a <mem_malloc+0xde>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8009988:	4b14      	ldr	r3, [pc, #80]	; (80099dc <mem_malloc+0x160>)
 800998a:	f240 32b9 	movw	r2, #953	; 0x3b9
 800998e:	4917      	ldr	r1, [pc, #92]	; (80099ec <mem_malloc+0x170>)
 8009990:	4814      	ldr	r0, [pc, #80]	; (80099e4 <mem_malloc+0x168>)
 8009992:	f007 fe35 	bl	8011600 <iprintf>
 8009996:	e7de      	b.n	8009956 <mem_malloc+0xda>
  return (struct mem *)(void *)&ram[ptr];
 8009998:	6828      	ldr	r0, [r5, #0]
 800999a:	4623      	mov	r3, r4
          while (cur->used && cur != ram_end) {
 800999c:	6839      	ldr	r1, [r7, #0]
 800999e:	e003      	b.n	80099a8 <mem_malloc+0x12c>
  return (struct mem *)(void *)&ram[ptr];
 80099a0:	881b      	ldrh	r3, [r3, #0]
 80099a2:	4403      	add	r3, r0
          while (cur->used && cur != ram_end) {
 80099a4:	791a      	ldrb	r2, [r3, #4]
 80099a6:	b11a      	cbz	r2, 80099b0 <mem_malloc+0x134>
 80099a8:	4299      	cmp	r1, r3
 80099aa:	d1f9      	bne.n	80099a0 <mem_malloc+0x124>
          lfree = cur;
 80099ac:	6031      	str	r1, [r6, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80099ae:	e7cb      	b.n	8009948 <mem_malloc+0xcc>
          lfree = cur;
 80099b0:	6033      	str	r3, [r6, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80099b2:	e7c9      	b.n	8009948 <mem_malloc+0xcc>
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80099b4:	490e      	ldr	r1, [pc, #56]	; (80099f0 <mem_malloc+0x174>)
 80099b6:	f240 3287 	movw	r2, #903	; 0x387
 80099ba:	4b08      	ldr	r3, [pc, #32]	; (80099dc <mem_malloc+0x160>)
 80099bc:	4809      	ldr	r0, [pc, #36]	; (80099e4 <mem_malloc+0x168>)
 80099be:	f007 fe1f 	bl	8011600 <iprintf>
          mem2->next = mem->next;
 80099c2:	8820      	ldrh	r0, [r4, #0]
  return (struct mem *)(void *)&ram[ptr];
 80099c4:	6829      	ldr	r1, [r5, #0]
        if (mem == lfree) {
 80099c6:	f8d6 c000 	ldr.w	ip, [r6]
 80099ca:	e7a6      	b.n	800991a <mem_malloc+0x9e>
 80099cc:	2400b564 	.word	0x2400b564
 80099d0:	2400b56c 	.word	0x2400b56c
 80099d4:	2400b568 	.word	0x2400b568
 80099d8:	2400b570 	.word	0x2400b570
 80099dc:	08012fa4 	.word	0x08012fa4
 80099e0:	08013184 	.word	0x08013184
 80099e4:	080124d0 	.word	0x080124d0
 80099e8:	080131b4 	.word	0x080131b4
 80099ec:	08013154 	.word	0x08013154
 80099f0:	08013140 	.word	0x08013140

080099f4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80099f4:	b538      	push	{r3, r4, r5, lr}
 80099f6:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80099f8:	f007 f8c0 	bl	8010b7c <sys_arch_protect>

  memp = *desc->tab;
 80099fc:	68a3      	ldr	r3, [r4, #8]
 80099fe:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8009a00:	b18c      	cbz	r4, 8009a26 <do_memp_malloc_pool+0x32>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8009a02:	6822      	ldr	r2, [r4, #0]
 8009a04:	4605      	mov	r5, r0
 8009a06:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8009a08:	07a3      	lsls	r3, r4, #30
 8009a0a:	d104      	bne.n	8009a16 <do_memp_malloc_pool+0x22>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8009a0c:	4628      	mov	r0, r5
 8009a0e:	f007 f8c1 	bl	8010b94 <sys_arch_unprotect>
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
 8009a12:	4620      	mov	r0, r4
 8009a14:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8009a16:	4b06      	ldr	r3, [pc, #24]	; (8009a30 <do_memp_malloc_pool+0x3c>)
 8009a18:	f44f 728c 	mov.w	r2, #280	; 0x118
 8009a1c:	4905      	ldr	r1, [pc, #20]	; (8009a34 <do_memp_malloc_pool+0x40>)
 8009a1e:	4806      	ldr	r0, [pc, #24]	; (8009a38 <do_memp_malloc_pool+0x44>)
 8009a20:	f007 fdee 	bl	8011600 <iprintf>
 8009a24:	e7f2      	b.n	8009a0c <do_memp_malloc_pool+0x18>
    SYS_ARCH_UNPROTECT(old_level);
 8009a26:	f007 f8b5 	bl	8010b94 <sys_arch_unprotect>
}
 8009a2a:	4620      	mov	r0, r4
 8009a2c:	bd38      	pop	{r3, r4, r5, pc}
 8009a2e:	bf00      	nop
 8009a30:	080131d8 	.word	0x080131d8
 8009a34:	08013208 	.word	0x08013208
 8009a38:	080124d0 	.word	0x080124d0

08009a3c <memp_init_pool>:
{
 8009a3c:	b430      	push	{r4, r5}
  *desc->tab = NULL;
 8009a3e:	2100      	movs	r1, #0
  for (i = 0; i < desc->num; ++i) {
 8009a40:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 8009a42:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
 8009a46:	6029      	str	r1, [r5, #0]
  for (i = 0; i < desc->num; ++i) {
 8009a48:	b17c      	cbz	r4, 8009a6a <memp_init_pool+0x2e>
 8009a4a:	3303      	adds	r3, #3
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009a4c:	f8b0 c000 	ldrh.w	ip, [r0]
  for (i = 0; i < desc->num; ++i) {
 8009a50:	460a      	mov	r2, r1
 8009a52:	f023 0303 	bic.w	r3, r3, #3
 8009a56:	e000      	b.n	8009a5a <memp_init_pool+0x1e>
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009a58:	4603      	mov	r3, r0
  for (i = 0; i < desc->num; ++i) {
 8009a5a:	3201      	adds	r2, #1
    memp->next = *desc->tab;
 8009a5c:	6019      	str	r1, [r3, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009a5e:	eb03 000c 	add.w	r0, r3, ip
  for (i = 0; i < desc->num; ++i) {
 8009a62:	4619      	mov	r1, r3
 8009a64:	42a2      	cmp	r2, r4
 8009a66:	d1f7      	bne.n	8009a58 <memp_init_pool+0x1c>
 8009a68:	602b      	str	r3, [r5, #0]
}
 8009a6a:	bc30      	pop	{r4, r5}
 8009a6c:	4770      	bx	lr
 8009a6e:	bf00      	nop

08009a70 <memp_init>:
{
 8009a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a72:	f8df e054 	ldr.w	lr, [pc, #84]	; 8009ac8 <memp_init+0x58>
 8009a76:	2404      	movs	r4, #4
 8009a78:	4b10      	ldr	r3, [pc, #64]	; (8009abc <memp_init+0x4c>)
  *desc->tab = NULL;
 8009a7a:	2600      	movs	r6, #0
{
 8009a7c:	4d10      	ldr	r5, [pc, #64]	; (8009ac0 <memp_init+0x50>)
 8009a7e:	f10e 0730 	add.w	r7, lr, #48	; 0x30
 8009a82:	4a10      	ldr	r2, [pc, #64]	; (8009ac4 <memp_init+0x54>)
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8009a84:	3303      	adds	r3, #3
  *desc->tab = NULL;
 8009a86:	602e      	str	r6, [r5, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8009a88:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 8009a8c:	b16c      	cbz	r4, 8009aaa <memp_init+0x3a>
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009a8e:	2100      	movs	r1, #0
 8009a90:	f8b2 c000 	ldrh.w	ip, [r2]
  for (i = 0; i < desc->num; ++i) {
 8009a94:	460a      	mov	r2, r1
 8009a96:	e000      	b.n	8009a9a <memp_init+0x2a>
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009a98:	4603      	mov	r3, r0
  for (i = 0; i < desc->num; ++i) {
 8009a9a:	3201      	adds	r2, #1
    memp->next = *desc->tab;
 8009a9c:	6019      	str	r1, [r3, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009a9e:	eb03 000c 	add.w	r0, r3, ip
  for (i = 0; i < desc->num; ++i) {
 8009aa2:	4619      	mov	r1, r3
 8009aa4:	42a2      	cmp	r2, r4
 8009aa6:	d1f7      	bne.n	8009a98 <memp_init+0x28>
 8009aa8:	602b      	str	r3, [r5, #0]
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009aaa:	4577      	cmp	r7, lr
 8009aac:	d005      	beq.n	8009aba <memp_init+0x4a>
    memp_init_pool(memp_pools[i]);
 8009aae:	f85e 2f04 	ldr.w	r2, [lr, #4]!
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8009ab2:	e9d2 3501 	ldrd	r3, r5, [r2, #4]
  for (i = 0; i < desc->num; ++i) {
 8009ab6:	8854      	ldrh	r4, [r2, #2]
 8009ab8:	e7e4      	b.n	8009a84 <memp_init+0x14>
}
 8009aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009abc:	2400e588 	.word	0x2400e588
 8009ac0:	2400e63c 	.word	0x2400e63c
 8009ac4:	0801332c 	.word	0x0801332c
 8009ac8:	08013338 	.word	0x08013338

08009acc <memp_malloc_pool>:
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8009acc:	b108      	cbz	r0, 8009ad2 <memp_malloc_pool+0x6>
  if (desc == NULL) {
    return NULL;
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8009ace:	f7ff bf91 	b.w	80099f4 <do_memp_malloc_pool>
{
 8009ad2:	b510      	push	{r4, lr}
 8009ad4:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8009ad6:	4b04      	ldr	r3, [pc, #16]	; (8009ae8 <memp_malloc_pool+0x1c>)
 8009ad8:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8009adc:	4903      	ldr	r1, [pc, #12]	; (8009aec <memp_malloc_pool+0x20>)
 8009ade:	4804      	ldr	r0, [pc, #16]	; (8009af0 <memp_malloc_pool+0x24>)
 8009ae0:	f007 fd8e 	bl	8011600 <iprintf>
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8009ae4:	4620      	mov	r0, r4
 8009ae6:	bd10      	pop	{r4, pc}
 8009ae8:	080131d8 	.word	0x080131d8
 8009aec:	0801322c 	.word	0x0801322c
 8009af0:	080124d0 	.word	0x080124d0

08009af4 <memp_malloc>:
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8009af4:	280c      	cmp	r0, #12
{
 8009af6:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8009af8:	d806      	bhi.n	8009b08 <memp_malloc+0x14>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8009afa:	4b08      	ldr	r3, [pc, #32]	; (8009b1c <memp_malloc+0x28>)
 8009afc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
}
 8009b00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool(memp_pools[type]);
 8009b04:	f7ff bf76 	b.w	80099f4 <do_memp_malloc_pool>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8009b08:	4b05      	ldr	r3, [pc, #20]	; (8009b20 <memp_malloc+0x2c>)
 8009b0a:	f240 1257 	movw	r2, #343	; 0x157
 8009b0e:	4905      	ldr	r1, [pc, #20]	; (8009b24 <memp_malloc+0x30>)
 8009b10:	4805      	ldr	r0, [pc, #20]	; (8009b28 <memp_malloc+0x34>)
 8009b12:	f007 fd75 	bl	8011600 <iprintf>
}
 8009b16:	2000      	movs	r0, #0
 8009b18:	bd08      	pop	{r3, pc}
 8009b1a:	bf00      	nop
 8009b1c:	08013338 	.word	0x08013338
 8009b20:	080131d8 	.word	0x080131d8
 8009b24:	08013240 	.word	0x08013240
 8009b28:	080124d0 	.word	0x080124d0

08009b2c <memp_free_pool>:
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8009b2c:	b180      	cbz	r0, 8009b50 <memp_free_pool+0x24>
{
 8009b2e:	b570      	push	{r4, r5, r6, lr}
 8009b30:	460c      	mov	r4, r1
  if ((desc == NULL) || (mem == NULL)) {
 8009b32:	b161      	cbz	r1, 8009b4e <memp_free_pool+0x22>
  LWIP_ASSERT("memp_free: mem properly aligned",
 8009b34:	078b      	lsls	r3, r1, #30
 8009b36:	4605      	mov	r5, r0
 8009b38:	d111      	bne.n	8009b5e <memp_free_pool+0x32>
  SYS_ARCH_PROTECT(old_level);
 8009b3a:	f007 f81f 	bl	8010b7c <sys_arch_protect>
  memp->next = *desc->tab;
 8009b3e:	68ab      	ldr	r3, [r5, #8]
 8009b40:	681a      	ldr	r2, [r3, #0]
 8009b42:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 8009b44:	601c      	str	r4, [r3, #0]
    return;
  }

  do_memp_free_pool(desc, mem);
}
 8009b46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  SYS_ARCH_UNPROTECT(old_level);
 8009b4a:	f007 b823 	b.w	8010b94 <sys_arch_unprotect>
}
 8009b4e:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8009b50:	4b07      	ldr	r3, [pc, #28]	; (8009b70 <memp_free_pool+0x44>)
 8009b52:	f240 1295 	movw	r2, #405	; 0x195
 8009b56:	4907      	ldr	r1, [pc, #28]	; (8009b74 <memp_free_pool+0x48>)
 8009b58:	4807      	ldr	r0, [pc, #28]	; (8009b78 <memp_free_pool+0x4c>)
 8009b5a:	f007 bd51 	b.w	8011600 <iprintf>
  LWIP_ASSERT("memp_free: mem properly aligned",
 8009b5e:	4b04      	ldr	r3, [pc, #16]	; (8009b70 <memp_free_pool+0x44>)
 8009b60:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8009b64:	4905      	ldr	r1, [pc, #20]	; (8009b7c <memp_free_pool+0x50>)
 8009b66:	4804      	ldr	r0, [pc, #16]	; (8009b78 <memp_free_pool+0x4c>)
 8009b68:	f007 fd4a 	bl	8011600 <iprintf>
 8009b6c:	e7e5      	b.n	8009b3a <memp_free_pool+0xe>
 8009b6e:	bf00      	nop
 8009b70:	080131d8 	.word	0x080131d8
 8009b74:	0801322c 	.word	0x0801322c
 8009b78:	080124d0 	.word	0x080124d0
 8009b7c:	08013260 	.word	0x08013260

08009b80 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8009b80:	280c      	cmp	r0, #12
 8009b82:	d812      	bhi.n	8009baa <memp_free+0x2a>
{
 8009b84:	b570      	push	{r4, r5, r6, lr}
 8009b86:	460c      	mov	r4, r1

  if (mem == NULL) {
 8009b88:	b171      	cbz	r1, 8009ba8 <memp_free+0x28>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8009b8a:	4b0f      	ldr	r3, [pc, #60]	; (8009bc8 <memp_free+0x48>)
 8009b8c:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
  LWIP_ASSERT("memp_free: mem properly aligned",
 8009b90:	078b      	lsls	r3, r1, #30
 8009b92:	d111      	bne.n	8009bb8 <memp_free+0x38>
  SYS_ARCH_PROTECT(old_level);
 8009b94:	f006 fff2 	bl	8010b7c <sys_arch_protect>
  memp->next = *desc->tab;
 8009b98:	68ab      	ldr	r3, [r5, #8]
 8009b9a:	681a      	ldr	r2, [r3, #0]
 8009b9c:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 8009b9e:	601c      	str	r4, [r3, #0]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8009ba0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  SYS_ARCH_UNPROTECT(old_level);
 8009ba4:	f006 bff6 	b.w	8010b94 <sys_arch_unprotect>
}
 8009ba8:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8009baa:	4b08      	ldr	r3, [pc, #32]	; (8009bcc <memp_free+0x4c>)
 8009bac:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8009bb0:	4907      	ldr	r1, [pc, #28]	; (8009bd0 <memp_free+0x50>)
 8009bb2:	4808      	ldr	r0, [pc, #32]	; (8009bd4 <memp_free+0x54>)
 8009bb4:	f007 bd24 	b.w	8011600 <iprintf>
  LWIP_ASSERT("memp_free: mem properly aligned",
 8009bb8:	4b04      	ldr	r3, [pc, #16]	; (8009bcc <memp_free+0x4c>)
 8009bba:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8009bbe:	4906      	ldr	r1, [pc, #24]	; (8009bd8 <memp_free+0x58>)
 8009bc0:	4804      	ldr	r0, [pc, #16]	; (8009bd4 <memp_free+0x54>)
 8009bc2:	f007 fd1d 	bl	8011600 <iprintf>
 8009bc6:	e7e5      	b.n	8009b94 <memp_free+0x14>
 8009bc8:	08013338 	.word	0x08013338
 8009bcc:	080131d8 	.word	0x080131d8
 8009bd0:	08013280 	.word	0x08013280
 8009bd4:	080124d0 	.word	0x080124d0
 8009bd8:	08013260 	.word	0x08013260

08009bdc <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 8009bdc:	f06f 000b 	mvn.w	r0, #11
 8009be0:	4770      	bx	lr
 8009be2:	bf00      	nop

08009be4 <netif_issue_reports>:
{
 8009be4:	b510      	push	{r4, lr}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8009be6:	4604      	mov	r4, r0
 8009be8:	b150      	cbz	r0, 8009c00 <netif_issue_reports+0x1c>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009bea:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8009bee:	f003 0205 	and.w	r2, r3, #5
 8009bf2:	2a05      	cmp	r2, #5
 8009bf4:	d103      	bne.n	8009bfe <netif_issue_reports+0x1a>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009bf6:	6862      	ldr	r2, [r4, #4]
 8009bf8:	b10a      	cbz	r2, 8009bfe <netif_issue_reports+0x1a>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8009bfa:	071b      	lsls	r3, r3, #28
 8009bfc:	d408      	bmi.n	8009c10 <netif_issue_reports+0x2c>
}
 8009bfe:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8009c00:	4b06      	ldr	r3, [pc, #24]	; (8009c1c <netif_issue_reports+0x38>)
 8009c02:	f240 326d 	movw	r2, #877	; 0x36d
 8009c06:	4906      	ldr	r1, [pc, #24]	; (8009c20 <netif_issue_reports+0x3c>)
 8009c08:	4806      	ldr	r0, [pc, #24]	; (8009c24 <netif_issue_reports+0x40>)
 8009c0a:	f007 fcf9 	bl	8011600 <iprintf>
 8009c0e:	e7ec      	b.n	8009bea <netif_issue_reports+0x6>
      etharp_gratuitous(netif);
 8009c10:	1d21      	adds	r1, r4, #4
 8009c12:	4620      	mov	r0, r4
}
 8009c14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      etharp_gratuitous(netif);
 8009c18:	f005 bf02 	b.w	800fa20 <etharp_request>
 8009c1c:	0801336c 	.word	0x0801336c
 8009c20:	080133a0 	.word	0x080133a0
 8009c24:	080124d0 	.word	0x080124d0

08009c28 <netif_do_set_ipaddr.isra.0>:
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
 8009c28:	b570      	push	{r4, r5, r6, lr}
 8009c2a:	4605      	mov	r5, r0
 8009c2c:	b082      	sub	sp, #8
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8009c2e:	460c      	mov	r4, r1
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
 8009c30:	4616      	mov	r6, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8009c32:	b1b9      	cbz	r1, 8009c64 <netif_do_set_ipaddr.isra.0+0x3c>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8009c34:	686b      	ldr	r3, [r5, #4]
 8009c36:	6822      	ldr	r2, [r4, #0]
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d101      	bne.n	8009c40 <netif_do_set_ipaddr.isra.0+0x18>
}
 8009c3c:	b002      	add	sp, #8
 8009c3e:	bd70      	pop	{r4, r5, r6, pc}
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8009c40:	6033      	str	r3, [r6, #0]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8009c42:	4630      	mov	r0, r6
 8009c44:	a901      	add	r1, sp, #4
    *ip_2_ip4(&new_addr) = *ipaddr;
 8009c46:	9201      	str	r2, [sp, #4]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8009c48:	f001 fff6 	bl	800bc38 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8009c4c:	a901      	add	r1, sp, #4
 8009c4e:	4630      	mov	r0, r6
 8009c50:	f005 fa9e 	bl	800f190 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8009c54:	6823      	ldr	r3, [r4, #0]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8009c56:	2101      	movs	r1, #1
 8009c58:	4628      	mov	r0, r5
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8009c5a:	606b      	str	r3, [r5, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8009c5c:	f7ff ffc2 	bl	8009be4 <netif_issue_reports>
}
 8009c60:	b002      	add	sp, #8
 8009c62:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8009c64:	4b03      	ldr	r3, [pc, #12]	; (8009c74 <netif_do_set_ipaddr.isra.0+0x4c>)
 8009c66:	f240 12cb 	movw	r2, #459	; 0x1cb
 8009c6a:	4903      	ldr	r1, [pc, #12]	; (8009c78 <netif_do_set_ipaddr.isra.0+0x50>)
 8009c6c:	4803      	ldr	r0, [pc, #12]	; (8009c7c <netif_do_set_ipaddr.isra.0+0x54>)
 8009c6e:	f007 fcc7 	bl	8011600 <iprintf>
 8009c72:	e7df      	b.n	8009c34 <netif_do_set_ipaddr.isra.0+0xc>
 8009c74:	0801336c 	.word	0x0801336c
 8009c78:	08012714 	.word	0x08012714
 8009c7c:	080124d0 	.word	0x080124d0

08009c80 <netif_init>:
}
 8009c80:	4770      	bx	lr
 8009c82:	bf00      	nop

08009c84 <netif_set_addr>:
{
 8009c84:	b5f0      	push	{r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY4;
 8009c86:	2900      	cmp	r1, #0
{
 8009c88:	461e      	mov	r6, r3
    ipaddr = IP4_ADDR_ANY4;
 8009c8a:	4b16      	ldr	r3, [pc, #88]	; (8009ce4 <netif_set_addr+0x60>)
  if (ipaddr == NULL) {
 8009c8c:	460c      	mov	r4, r1
{
 8009c8e:	b083      	sub	sp, #12
 8009c90:	4605      	mov	r5, r0
    ipaddr = IP4_ADDR_ANY4;
 8009c92:	bf14      	ite	ne
 8009c94:	460c      	movne	r4, r1
 8009c96:	461c      	moveq	r4, r3
  if (netmask == NULL) {
 8009c98:	b30a      	cbz	r2, 8009cde <netif_set_addr+0x5a>
 8009c9a:	4617      	mov	r7, r2
  if (gw == NULL) {
 8009c9c:	b1ee      	cbz	r6, 8009cda <netif_set_addr+0x56>
  remove = ip4_addr_isany(ipaddr);
 8009c9e:	6823      	ldr	r3, [r4, #0]
 8009ca0:	b16b      	cbz	r3, 8009cbe <netif_set_addr+0x3a>
 8009ca2:	2200      	movs	r2, #0
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	68a9      	ldr	r1, [r5, #8]
 8009ca8:	428b      	cmp	r3, r1
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8009caa:	68e9      	ldr	r1, [r5, #12]
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8009cac:	bf18      	it	ne
 8009cae:	60ab      	strne	r3, [r5, #8]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8009cb0:	6833      	ldr	r3, [r6, #0]
 8009cb2:	428b      	cmp	r3, r1
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8009cb4:	bf18      	it	ne
 8009cb6:	60eb      	strne	r3, [r5, #12]
  if (!remove) {
 8009cb8:	b142      	cbz	r2, 8009ccc <netif_set_addr+0x48>
}
 8009cba:	b003      	add	sp, #12
 8009cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009cbe:	aa01      	add	r2, sp, #4
 8009cc0:	4621      	mov	r1, r4
 8009cc2:	4628      	mov	r0, r5
 8009cc4:	f7ff ffb0 	bl	8009c28 <netif_do_set_ipaddr.isra.0>
 8009cc8:	2201      	movs	r2, #1
 8009cca:	e7eb      	b.n	8009ca4 <netif_set_addr+0x20>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009ccc:	aa01      	add	r2, sp, #4
 8009cce:	4621      	mov	r1, r4
 8009cd0:	4628      	mov	r0, r5
 8009cd2:	f7ff ffa9 	bl	8009c28 <netif_do_set_ipaddr.isra.0>
}
 8009cd6:	b003      	add	sp, #12
 8009cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    gw = IP4_ADDR_ANY4;
 8009cda:	4e02      	ldr	r6, [pc, #8]	; (8009ce4 <netif_set_addr+0x60>)
 8009cdc:	e7df      	b.n	8009c9e <netif_set_addr+0x1a>
    netmask = IP4_ADDR_ANY4;
 8009cde:	461f      	mov	r7, r3
 8009ce0:	e7dc      	b.n	8009c9c <netif_set_addr+0x18>
 8009ce2:	bf00      	nop
 8009ce4:	08014f0c 	.word	0x08014f0c

08009ce8 <netif_add>:
{
 8009ce8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cec:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8009cee:	4606      	mov	r6, r0
 8009cf0:	2800      	cmp	r0, #0
 8009cf2:	d07e      	beq.n	8009df2 <netif_add+0x10a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8009cf4:	2d00      	cmp	r5, #0
 8009cf6:	f000 8085 	beq.w	8009e04 <netif_add+0x11c>
  if (ipaddr == NULL) {
 8009cfa:	2900      	cmp	r1, #0
 8009cfc:	d06d      	beq.n	8009dda <netif_add+0xf2>
  if (netmask == NULL) {
 8009cfe:	2a00      	cmp	r2, #0
 8009d00:	d066      	beq.n	8009dd0 <netif_add+0xe8>
  if (gw == NULL) {
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d067      	beq.n	8009dd6 <netif_add+0xee>
  netif->state = state;
 8009d06:	980a      	ldr	r0, [sp, #40]	; 0x28
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8009d08:	2400      	movs	r4, #0
  netif->num = netif_num;
 8009d0a:	f8df a128 	ldr.w	sl, [pc, #296]	; 8009e34 <netif_add+0x14c>
  netif->state = state;
 8009d0e:	6230      	str	r0, [r6, #32]
  netif->input = input;
 8009d10:	980c      	ldr	r0, [sp, #48]	; 0x30
  ip_addr_set_zero_ip4(&netif->gw);
 8009d12:	60f4      	str	r4, [r6, #12]
  netif->input = input;
 8009d14:	6130      	str	r0, [r6, #16]
  netif->num = netif_num;
 8009d16:	f89a 0000 	ldrb.w	r0, [sl]
  netif->mtu = 0;
 8009d1a:	84b4      	strh	r4, [r6, #36]	; 0x24
  netif->num = netif_num;
 8009d1c:	f886 0030 	strb.w	r0, [r6, #48]	; 0x30
  netif->output = netif_null_output_ip4;
 8009d20:	483d      	ldr	r0, [pc, #244]	; (8009e18 <netif_add+0x130>)
  netif->flags = 0;
 8009d22:	f886 402d 	strb.w	r4, [r6, #45]	; 0x2d
  netif->output = netif_null_output_ip4;
 8009d26:	6170      	str	r0, [r6, #20]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8009d28:	4630      	mov	r0, r6
  netif->link_callback = NULL;
 8009d2a:	61f4      	str	r4, [r6, #28]
  ip_addr_set_zero_ip4(&netif->netmask);
 8009d2c:	e9c6 4401 	strd	r4, r4, [r6, #4]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8009d30:	f7ff ffa8 	bl	8009c84 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 8009d34:	4630      	mov	r0, r6
 8009d36:	47a8      	blx	r5
 8009d38:	2800      	cmp	r0, #0
 8009d3a:	d157      	bne.n	8009dec <netif_add+0x104>
      if (netif->num == 255) {
 8009d3c:	f896 2030 	ldrb.w	r2, [r6, #48]	; 0x30
 8009d40:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8009e38 <netif_add+0x150>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8009d44:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 8009e28 <netif_add+0x140>
 8009d48:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 8009e3c <netif_add+0x154>
 8009d4c:	4f33      	ldr	r7, [pc, #204]	; (8009e1c <netif_add+0x134>)
      if (netif->num == 255) {
 8009d4e:	2aff      	cmp	r2, #255	; 0xff
 8009d50:	d102      	bne.n	8009d58 <netif_add+0x70>
        netif->num = 0;
 8009d52:	2300      	movs	r3, #0
 8009d54:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009d58:	f8d8 4000 	ldr.w	r4, [r8]
 8009d5c:	2c00      	cmp	r4, #0
 8009d5e:	d042      	beq.n	8009de6 <netif_add+0xfe>
      num_netifs = 0;
 8009d60:	2500      	movs	r5, #0
 8009d62:	e007      	b.n	8009d74 <netif_add+0x8c>
        if (netif2->num == netif->num) {
 8009d64:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8009d68:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 8009d6c:	429a      	cmp	r2, r3
 8009d6e:	d014      	beq.n	8009d9a <netif_add+0xb2>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009d70:	6824      	ldr	r4, [r4, #0]
 8009d72:	b1fc      	cbz	r4, 8009db4 <netif_add+0xcc>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8009d74:	42b4      	cmp	r4, r6
        num_netifs++;
 8009d76:	f105 0501 	add.w	r5, r5, #1
        LWIP_ASSERT("netif already added", netif2 != netif);
 8009d7a:	d013      	beq.n	8009da4 <netif_add+0xbc>
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8009d7c:	2dff      	cmp	r5, #255	; 0xff
 8009d7e:	ddf1      	ble.n	8009d64 <netif_add+0x7c>
 8009d80:	465b      	mov	r3, fp
 8009d82:	f240 128d 	movw	r2, #397	; 0x18d
 8009d86:	4926      	ldr	r1, [pc, #152]	; (8009e20 <netif_add+0x138>)
 8009d88:	4638      	mov	r0, r7
 8009d8a:	f007 fc39 	bl	8011600 <iprintf>
        if (netif2->num == netif->num) {
 8009d8e:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8009d92:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 8009d96:	429a      	cmp	r2, r3
 8009d98:	d1ea      	bne.n	8009d70 <netif_add+0x88>
          netif->num++;
 8009d9a:	3201      	adds	r2, #1
 8009d9c:	b2d2      	uxtb	r2, r2
 8009d9e:	f886 2030 	strb.w	r2, [r6, #48]	; 0x30
    } while (netif2 != NULL);
 8009da2:	e7d4      	b.n	8009d4e <netif_add+0x66>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8009da4:	465b      	mov	r3, fp
 8009da6:	f240 128b 	movw	r2, #395	; 0x18b
 8009daa:	4649      	mov	r1, r9
 8009dac:	4638      	mov	r0, r7
 8009dae:	f007 fc27 	bl	8011600 <iprintf>
 8009db2:	e7e3      	b.n	8009d7c <netif_add+0x94>
  netif->next = netif_list;
 8009db4:	f8d8 4000 	ldr.w	r4, [r8]
  if (netif->num == 254) {
 8009db8:	2bfe      	cmp	r3, #254	; 0xfe
 8009dba:	d012      	beq.n	8009de2 <netif_add+0xfa>
    netif_num = (u8_t)(netif->num + 1);
 8009dbc:	3301      	adds	r3, #1
 8009dbe:	b2db      	uxtb	r3, r3
  return netif;
 8009dc0:	4630      	mov	r0, r6
  netif->next = netif_list;
 8009dc2:	6034      	str	r4, [r6, #0]
 8009dc4:	f88a 3000 	strb.w	r3, [sl]
  netif_list = netif;
 8009dc8:	f8c8 6000 	str.w	r6, [r8]
}
 8009dcc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8009dd0:	4a14      	ldr	r2, [pc, #80]	; (8009e24 <netif_add+0x13c>)
  if (gw == NULL) {
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d197      	bne.n	8009d06 <netif_add+0x1e>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8009dd6:	4b13      	ldr	r3, [pc, #76]	; (8009e24 <netif_add+0x13c>)
 8009dd8:	e795      	b.n	8009d06 <netif_add+0x1e>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8009dda:	4912      	ldr	r1, [pc, #72]	; (8009e24 <netif_add+0x13c>)
  if (netmask == NULL) {
 8009ddc:	2a00      	cmp	r2, #0
 8009dde:	d190      	bne.n	8009d02 <netif_add+0x1a>
 8009de0:	e7f6      	b.n	8009dd0 <netif_add+0xe8>
    netif_num = 0;
 8009de2:	2300      	movs	r3, #0
 8009de4:	e7ec      	b.n	8009dc0 <netif_add+0xd8>
  if (netif->num == 254) {
 8009de6:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 8009dea:	e7e5      	b.n	8009db8 <netif_add+0xd0>
    return NULL;
 8009dec:	4620      	mov	r0, r4
}
 8009dee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8009df2:	4b0d      	ldr	r3, [pc, #52]	; (8009e28 <netif_add+0x140>)
 8009df4:	f240 1227 	movw	r2, #295	; 0x127
 8009df8:	490c      	ldr	r1, [pc, #48]	; (8009e2c <netif_add+0x144>)
 8009dfa:	4808      	ldr	r0, [pc, #32]	; (8009e1c <netif_add+0x134>)
 8009dfc:	f007 fc00 	bl	8011600 <iprintf>
 8009e00:	4630      	mov	r0, r6
 8009e02:	e7e3      	b.n	8009dcc <netif_add+0xe4>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8009e04:	4b08      	ldr	r3, [pc, #32]	; (8009e28 <netif_add+0x140>)
 8009e06:	f44f 7294 	mov.w	r2, #296	; 0x128
 8009e0a:	4909      	ldr	r1, [pc, #36]	; (8009e30 <netif_add+0x148>)
 8009e0c:	4803      	ldr	r0, [pc, #12]	; (8009e1c <netif_add+0x134>)
 8009e0e:	f007 fbf7 	bl	8011600 <iprintf>
 8009e12:	4628      	mov	r0, r5
 8009e14:	e7da      	b.n	8009dcc <netif_add+0xe4>
 8009e16:	bf00      	nop
 8009e18:	08009bdd 	.word	0x08009bdd
 8009e1c:	080124d0 	.word	0x080124d0
 8009e20:	08013418 	.word	0x08013418
 8009e24:	08014f0c 	.word	0x08014f0c
 8009e28:	0801336c 	.word	0x0801336c
 8009e2c:	080133c4 	.word	0x080133c4
 8009e30:	080133e0 	.word	0x080133e0
 8009e34:	2400e648 	.word	0x2400e648
 8009e38:	2400e644 	.word	0x2400e644
 8009e3c:	08013404 	.word	0x08013404

08009e40 <netif_set_default>:
  netif_default = netif;
 8009e40:	4b01      	ldr	r3, [pc, #4]	; (8009e48 <netif_set_default+0x8>)
 8009e42:	6018      	str	r0, [r3, #0]
}
 8009e44:	4770      	bx	lr
 8009e46:	bf00      	nop
 8009e48:	2400e640 	.word	0x2400e640

08009e4c <netif_set_up>:
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8009e4c:	b158      	cbz	r0, 8009e66 <netif_set_up+0x1a>
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8009e4e:	f890 202d 	ldrb.w	r2, [r0, #45]	; 0x2d
 8009e52:	07d1      	lsls	r1, r2, #31
 8009e54:	d500      	bpl.n	8009e58 <netif_set_up+0xc>
}
 8009e56:	4770      	bx	lr
    netif_set_flags(netif, NETIF_FLAG_UP);
 8009e58:	f042 0201 	orr.w	r2, r2, #1
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8009e5c:	2103      	movs	r1, #3
    netif_set_flags(netif, NETIF_FLAG_UP);
 8009e5e:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8009e62:	f7ff bebf 	b.w	8009be4 <netif_issue_reports>
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8009e66:	4b03      	ldr	r3, [pc, #12]	; (8009e74 <netif_set_up+0x28>)
 8009e68:	f44f 7254 	mov.w	r2, #848	; 0x350
 8009e6c:	4902      	ldr	r1, [pc, #8]	; (8009e78 <netif_set_up+0x2c>)
 8009e6e:	4803      	ldr	r0, [pc, #12]	; (8009e7c <netif_set_up+0x30>)
 8009e70:	f007 bbc6 	b.w	8011600 <iprintf>
 8009e74:	0801336c 	.word	0x0801336c
 8009e78:	08013448 	.word	0x08013448
 8009e7c:	080124d0 	.word	0x080124d0

08009e80 <netif_set_down>:
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8009e80:	b160      	cbz	r0, 8009e9c <netif_set_down+0x1c>
  if (netif->flags & NETIF_FLAG_UP) {
 8009e82:	f890 202d 	ldrb.w	r2, [r0, #45]	; 0x2d
 8009e86:	07d1      	lsls	r1, r2, #31
 8009e88:	d505      	bpl.n	8009e96 <netif_set_down+0x16>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 8009e8a:	f022 0101 	bic.w	r1, r2, #1
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8009e8e:	0713      	lsls	r3, r2, #28
    netif_clear_flags(netif, NETIF_FLAG_UP);
 8009e90:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8009e94:	d400      	bmi.n	8009e98 <netif_set_down+0x18>
}
 8009e96:	4770      	bx	lr
      etharp_cleanup_netif(netif);
 8009e98:	f005 bb8e 	b.w	800f5b8 <etharp_cleanup_netif>
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8009e9c:	4b03      	ldr	r3, [pc, #12]	; (8009eac <netif_set_down+0x2c>)
 8009e9e:	f240 329b 	movw	r2, #923	; 0x39b
 8009ea2:	4903      	ldr	r1, [pc, #12]	; (8009eb0 <netif_set_down+0x30>)
 8009ea4:	4803      	ldr	r0, [pc, #12]	; (8009eb4 <netif_set_down+0x34>)
 8009ea6:	f007 bbab 	b.w	8011600 <iprintf>
 8009eaa:	bf00      	nop
 8009eac:	0801336c 	.word	0x0801336c
 8009eb0:	08013464 	.word	0x08013464
 8009eb4:	080124d0 	.word	0x080124d0

08009eb8 <netif_set_link_up>:
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8009eb8:	b1a0      	cbz	r0, 8009ee4 <netif_set_link_up+0x2c>
{
 8009eba:	b510      	push	{r4, lr}
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8009ebc:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8009ec0:	4604      	mov	r4, r0
 8009ec2:	075a      	lsls	r2, r3, #29
 8009ec4:	d500      	bpl.n	8009ec8 <netif_set_link_up+0x10>
}
 8009ec6:	bd10      	pop	{r4, pc}
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8009ec8:	f043 0304 	orr.w	r3, r3, #4
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8009ecc:	2103      	movs	r1, #3
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8009ece:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8009ed2:	f7ff fe87 	bl	8009be4 <netif_issue_reports>
    NETIF_LINK_CALLBACK(netif);
 8009ed6:	69e3      	ldr	r3, [r4, #28]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d0f4      	beq.n	8009ec6 <netif_set_link_up+0xe>
 8009edc:	4620      	mov	r0, r4
}
 8009ede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_LINK_CALLBACK(netif);
 8009ee2:	4718      	bx	r3
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8009ee4:	4b03      	ldr	r3, [pc, #12]	; (8009ef4 <netif_set_link_up+0x3c>)
 8009ee6:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8009eea:	4903      	ldr	r1, [pc, #12]	; (8009ef8 <netif_set_link_up+0x40>)
 8009eec:	4803      	ldr	r0, [pc, #12]	; (8009efc <netif_set_link_up+0x44>)
 8009eee:	f007 bb87 	b.w	8011600 <iprintf>
 8009ef2:	bf00      	nop
 8009ef4:	0801336c 	.word	0x0801336c
 8009ef8:	08013484 	.word	0x08013484
 8009efc:	080124d0 	.word	0x080124d0

08009f00 <netif_set_link_down>:
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8009f00:	b158      	cbz	r0, 8009f1a <netif_set_link_down+0x1a>
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8009f02:	f890 202d 	ldrb.w	r2, [r0, #45]	; 0x2d
 8009f06:	0751      	lsls	r1, r2, #29
 8009f08:	d506      	bpl.n	8009f18 <netif_set_link_down+0x18>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8009f0a:	f022 0204 	bic.w	r2, r2, #4
    NETIF_LINK_CALLBACK(netif);
 8009f0e:	69c1      	ldr	r1, [r0, #28]
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8009f10:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8009f14:	b101      	cbz	r1, 8009f18 <netif_set_link_down+0x18>
 8009f16:	4708      	bx	r1
}
 8009f18:	4770      	bx	lr
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8009f1a:	4b03      	ldr	r3, [pc, #12]	; (8009f28 <netif_set_link_down+0x28>)
 8009f1c:	f240 4206 	movw	r2, #1030	; 0x406
 8009f20:	4902      	ldr	r1, [pc, #8]	; (8009f2c <netif_set_link_down+0x2c>)
 8009f22:	4803      	ldr	r0, [pc, #12]	; (8009f30 <netif_set_link_down+0x30>)
 8009f24:	f007 bb6c 	b.w	8011600 <iprintf>
 8009f28:	0801336c 	.word	0x0801336c
 8009f2c:	080134a8 	.word	0x080134a8
 8009f30:	080124d0 	.word	0x080124d0

08009f34 <netif_set_link_callback>:
  if (netif) {
 8009f34:	b100      	cbz	r0, 8009f38 <netif_set_link_callback+0x4>
    netif->link_callback = link_callback;
 8009f36:	61c1      	str	r1, [r0, #28]
}
 8009f38:	4770      	bx	lr
 8009f3a:	bf00      	nop

08009f3c <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8009f3c:	b168      	cbz	r0, 8009f5a <netif_get_by_index+0x1e>
    NETIF_FOREACH(netif) {
 8009f3e:	4b08      	ldr	r3, [pc, #32]	; (8009f60 <netif_get_by_index+0x24>)
 8009f40:	681a      	ldr	r2, [r3, #0]
 8009f42:	b912      	cbnz	r2, 8009f4a <netif_get_by_index+0xe>
 8009f44:	e007      	b.n	8009f56 <netif_get_by_index+0x1a>
 8009f46:	6812      	ldr	r2, [r2, #0]
 8009f48:	b12a      	cbz	r2, 8009f56 <netif_get_by_index+0x1a>
      if (idx == netif_get_index(netif)) {
 8009f4a:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8009f4e:	3301      	adds	r3, #1
 8009f50:	b2db      	uxtb	r3, r3
 8009f52:	4283      	cmp	r3, r0
 8009f54:	d1f7      	bne.n	8009f46 <netif_get_by_index+0xa>
      }
    }
  }

  return NULL;
}
 8009f56:	4610      	mov	r0, r2
 8009f58:	4770      	bx	lr
  return NULL;
 8009f5a:	4602      	mov	r2, r0
}
 8009f5c:	4610      	mov	r0, r2
 8009f5e:	4770      	bx	lr
 8009f60:	2400e644 	.word	0x2400e644

08009f64 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8009f64:	b508      	push	{r3, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8009f66:	f006 fe09 	bl	8010b7c <sys_arch_protect>
 8009f6a:	4b09      	ldr	r3, [pc, #36]	; (8009f90 <pbuf_free_ooseq_callback+0x2c>)
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	701a      	strb	r2, [r3, #0]
 8009f70:	f006 fe10 	bl	8010b94 <sys_arch_unprotect>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009f74:	4b07      	ldr	r3, [pc, #28]	; (8009f94 <pbuf_free_ooseq_callback+0x30>)
 8009f76:	6818      	ldr	r0, [r3, #0]
 8009f78:	b910      	cbnz	r0, 8009f80 <pbuf_free_ooseq_callback+0x1c>
 8009f7a:	e008      	b.n	8009f8e <pbuf_free_ooseq_callback+0x2a>
 8009f7c:	68c0      	ldr	r0, [r0, #12]
 8009f7e:	b130      	cbz	r0, 8009f8e <pbuf_free_ooseq_callback+0x2a>
    if (pcb->ooseq != NULL) {
 8009f80:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d0fa      	beq.n	8009f7c <pbuf_free_ooseq_callback+0x18>
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
}
 8009f86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      tcp_free_ooseq(pcb);
 8009f8a:	f001 be7f 	b.w	800bc8c <tcp_free_ooseq>
}
 8009f8e:	bd08      	pop	{r3, pc}
 8009f90:	2400e649 	.word	0x2400e649
 8009f94:	2400e64c 	.word	0x2400e64c

08009f98 <pbuf_copy.part.0>:
 * @return ERR_OK if pbuf was copied
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
 8009f98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
  size_t offset_to = 0, offset_from = 0, len;
 8009f9c:	2600      	movs	r6, #0
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8009f9e:	f8df a124 	ldr.w	sl, [pc, #292]	; 800a0c4 <pbuf_copy.part.0+0x12c>
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
 8009fa2:	4605      	mov	r5, r0
 8009fa4:	4688      	mov	r8, r1
  size_t offset_to = 0, offset_from = 0, len;
 8009fa6:	4637      	mov	r7, r6
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8009fa8:	8944      	ldrh	r4, [r0, #10]
 8009faa:	894b      	ldrh	r3, [r1, #10]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8009fac:	f8df b128 	ldr.w	fp, [pc, #296]	; 800a0d8 <pbuf_copy.part.0+0x140>
 8009fb0:	f8df 9118 	ldr.w	r9, [pc, #280]	; 800a0cc <pbuf_copy.part.0+0x134>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8009fb4:	1be4      	subs	r4, r4, r7
 8009fb6:	1b9b      	subs	r3, r3, r6
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8009fb8:	6868      	ldr	r0, [r5, #4]
 8009fba:	429c      	cmp	r4, r3
 8009fbc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009fc0:	4438      	add	r0, r7
 8009fc2:	bf28      	it	cs
 8009fc4:	461c      	movcs	r4, r3
 8009fc6:	4431      	add	r1, r6
 8009fc8:	4622      	mov	r2, r4
    offset_to += len;
 8009fca:	4427      	add	r7, r4
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8009fcc:	f007 fd49 	bl	8011a62 <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8009fd0:	896b      	ldrh	r3, [r5, #10]
    offset_from += len;
 8009fd2:	4426      	add	r6, r4
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8009fd4:	429f      	cmp	r7, r3
 8009fd6:	d838      	bhi.n	800a04a <pbuf_copy.part.0+0xb2>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8009fd8:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8009fdc:	429e      	cmp	r6, r3
 8009fde:	d82a      	bhi.n	800a036 <pbuf_copy.part.0+0x9e>
    if (offset_from >= p_from->len) {
 8009fe0:	429e      	cmp	r6, r3
 8009fe2:	d318      	bcc.n	800a016 <pbuf_copy.part.0+0x7e>
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
 8009fe4:	896b      	ldrh	r3, [r5, #10]
      p_from = p_from->next;
 8009fe6:	f8d8 8000 	ldr.w	r8, [r8]
    if (offset_to == p_to->len) {
 8009fea:	429f      	cmp	r7, r3
 8009fec:	d04c      	beq.n	800a088 <pbuf_copy.part.0+0xf0>
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8009fee:	f1b8 0f00 	cmp.w	r8, #0
 8009ff2:	d145      	bne.n	800a080 <pbuf_copy.part.0+0xe8>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8009ff4:	892a      	ldrh	r2, [r5, #8]
 8009ff6:	896b      	ldrh	r3, [r5, #10]
 8009ff8:	429a      	cmp	r2, r3
 8009ffa:	d14d      	bne.n	800a098 <pbuf_copy.part.0+0x100>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009ffc:	6828      	ldr	r0, [r5, #0]
 8009ffe:	b140      	cbz	r0, 800a012 <pbuf_copy.part.0+0x7a>
 800a000:	4b30      	ldr	r3, [pc, #192]	; (800a0c4 <pbuf_copy.part.0+0x12c>)
 800a002:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800a006:	4930      	ldr	r1, [pc, #192]	; (800a0c8 <pbuf_copy.part.0+0x130>)
 800a008:	4830      	ldr	r0, [pc, #192]	; (800a0cc <pbuf_copy.part.0+0x134>)
 800a00a:	f007 faf9 	bl	8011600 <iprintf>
 800a00e:	f06f 0005 	mvn.w	r0, #5
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
}
 800a012:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (offset_to == p_to->len) {
 800a016:	896a      	ldrh	r2, [r5, #10]
 800a018:	4297      	cmp	r7, r2
 800a01a:	d040      	beq.n	800a09e <pbuf_copy.part.0+0x106>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800a01c:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 800a020:	429a      	cmp	r2, r3
 800a022:	d01a      	beq.n	800a05a <pbuf_copy.part.0+0xc2>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800a024:	896c      	ldrh	r4, [r5, #10]
 800a026:	2d00      	cmp	r5, #0
 800a028:	d0c4      	beq.n	8009fb4 <pbuf_copy.part.0+0x1c>
 800a02a:	892b      	ldrh	r3, [r5, #8]
 800a02c:	42a3      	cmp	r3, r4
 800a02e:	d045      	beq.n	800a0bc <pbuf_copy.part.0+0x124>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800a030:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800a034:	e7be      	b.n	8009fb4 <pbuf_copy.part.0+0x1c>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800a036:	4653      	mov	r3, sl
 800a038:	f240 32da 	movw	r2, #986	; 0x3da
 800a03c:	4924      	ldr	r1, [pc, #144]	; (800a0d0 <pbuf_copy.part.0+0x138>)
 800a03e:	4648      	mov	r0, r9
 800a040:	f007 fade 	bl	8011600 <iprintf>
    if (offset_from >= p_from->len) {
 800a044:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800a048:	e7ca      	b.n	8009fe0 <pbuf_copy.part.0+0x48>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800a04a:	4653      	mov	r3, sl
 800a04c:	f240 32d9 	movw	r2, #985	; 0x3d9
 800a050:	4659      	mov	r1, fp
 800a052:	4648      	mov	r0, r9
 800a054:	f007 fad4 	bl	8011600 <iprintf>
 800a058:	e7be      	b.n	8009fd8 <pbuf_copy.part.0+0x40>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a05a:	f8d8 2000 	ldr.w	r2, [r8]
 800a05e:	2a00      	cmp	r2, #0
 800a060:	d0e0      	beq.n	800a024 <pbuf_copy.part.0+0x8c>
 800a062:	4b18      	ldr	r3, [pc, #96]	; (800a0c4 <pbuf_copy.part.0+0x12c>)
 800a064:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800a068:	4917      	ldr	r1, [pc, #92]	; (800a0c8 <pbuf_copy.part.0+0x130>)
 800a06a:	4818      	ldr	r0, [pc, #96]	; (800a0cc <pbuf_copy.part.0+0x134>)
 800a06c:	f007 fac8 	bl	8011600 <iprintf>
 800a070:	f06f 0005 	mvn.w	r0, #5
}
 800a074:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800a078:	f1b8 0f00 	cmp.w	r8, #0
 800a07c:	d00a      	beq.n	800a094 <pbuf_copy.part.0+0xfc>
      offset_to = 0;
 800a07e:	2700      	movs	r7, #0
 800a080:	2600      	movs	r6, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800a082:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800a086:	e7c9      	b.n	800a01c <pbuf_copy.part.0+0x84>
      p_to = p_to->next;
 800a088:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800a08a:	2d00      	cmp	r5, #0
 800a08c:	d1f4      	bne.n	800a078 <pbuf_copy.part.0+0xe0>
 800a08e:	f1b8 0f00 	cmp.w	r8, #0
 800a092:	d108      	bne.n	800a0a6 <pbuf_copy.part.0+0x10e>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800a094:	2d00      	cmp	r5, #0
 800a096:	d1ad      	bne.n	8009ff4 <pbuf_copy.part.0+0x5c>
  return ERR_OK;
 800a098:	2000      	movs	r0, #0
}
 800a09a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      p_to = p_to->next;
 800a09e:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800a0a0:	b10d      	cbz	r5, 800a0a6 <pbuf_copy.part.0+0x10e>
      offset_to = 0;
 800a0a2:	2700      	movs	r7, #0
 800a0a4:	e7ed      	b.n	800a082 <pbuf_copy.part.0+0xea>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800a0a6:	4b07      	ldr	r3, [pc, #28]	; (800a0c4 <pbuf_copy.part.0+0x12c>)
 800a0a8:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800a0ac:	4909      	ldr	r1, [pc, #36]	; (800a0d4 <pbuf_copy.part.0+0x13c>)
 800a0ae:	4807      	ldr	r0, [pc, #28]	; (800a0cc <pbuf_copy.part.0+0x134>)
 800a0b0:	f007 faa6 	bl	8011600 <iprintf>
 800a0b4:	f06f 000f 	mvn.w	r0, #15
}
 800a0b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a0bc:	682b      	ldr	r3, [r5, #0]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d0b6      	beq.n	800a030 <pbuf_copy.part.0+0x98>
 800a0c2:	e79d      	b.n	800a000 <pbuf_copy.part.0+0x68>
 800a0c4:	080134cc 	.word	0x080134cc
 800a0c8:	08013540 	.word	0x08013540
 800a0cc:	080124d0 	.word	0x080124d0
 800a0d0:	08013514 	.word	0x08013514
 800a0d4:	08013530 	.word	0x08013530
 800a0d8:	080134fc 	.word	0x080134fc

0800a0dc <pbuf_alloc_reference>:
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800a0dc:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 800a0e0:	2b01      	cmp	r3, #1
{
 800a0e2:	b570      	push	{r4, r5, r6, lr}
 800a0e4:	4614      	mov	r4, r2
 800a0e6:	4606      	mov	r6, r0
 800a0e8:	460d      	mov	r5, r1
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800a0ea:	d10d      	bne.n	800a108 <pbuf_alloc_reference+0x2c>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800a0ec:	200b      	movs	r0, #11
 800a0ee:	f7ff fd01 	bl	8009af4 <memp_malloc>
  if (p == NULL) {
 800a0f2:	b140      	cbz	r0, 800a106 <pbuf_alloc_reference+0x2a>
  p->next = NULL;
 800a0f4:	2300      	movs	r3, #0
  p->ref = 1;
 800a0f6:	2201      	movs	r2, #1
  p->payload = payload;
 800a0f8:	6046      	str	r6, [r0, #4]
  p->tot_len = tot_len;
 800a0fa:	8105      	strh	r5, [r0, #8]
  p->next = NULL;
 800a0fc:	6003      	str	r3, [r0, #0]
  p->len = len;
 800a0fe:	8145      	strh	r5, [r0, #10]
  p->type_internal = (u8_t)type;
 800a100:	7304      	strb	r4, [r0, #12]
  p->flags = flags;
 800a102:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 800a104:	81c2      	strh	r2, [r0, #14]
}
 800a106:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800a108:	4b03      	ldr	r3, [pc, #12]	; (800a118 <pbuf_alloc_reference+0x3c>)
 800a10a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800a10e:	4903      	ldr	r1, [pc, #12]	; (800a11c <pbuf_alloc_reference+0x40>)
 800a110:	4803      	ldr	r0, [pc, #12]	; (800a120 <pbuf_alloc_reference+0x44>)
 800a112:	f007 fa75 	bl	8011600 <iprintf>
 800a116:	e7e9      	b.n	800a0ec <pbuf_alloc_reference+0x10>
 800a118:	080134cc 	.word	0x080134cc
 800a11c:	0801356c 	.word	0x0801356c
 800a120:	080124d0 	.word	0x080124d0

0800a124 <pbuf_alloced_custom>:
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800a124:	3003      	adds	r0, #3
 800a126:	f020 0003 	bic.w	r0, r0, #3
{
 800a12a:	b510      	push	{r4, lr}
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800a12c:	eb01 0e00 	add.w	lr, r1, r0
{
 800a130:	f8bd c00c 	ldrh.w	ip, [sp, #12]
 800a134:	9c02      	ldr	r4, [sp, #8]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800a136:	45e6      	cmp	lr, ip
 800a138:	d80d      	bhi.n	800a156 <pbuf_alloced_custom+0x32>
  if (payload_mem != NULL) {
 800a13a:	b104      	cbz	r4, 800a13e <pbuf_alloced_custom+0x1a>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800a13c:	4404      	add	r4, r0
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800a13e:	4618      	mov	r0, r3
  p->next = NULL;
 800a140:	2300      	movs	r3, #0
  p->payload = payload;
 800a142:	6044      	str	r4, [r0, #4]
  p->flags = flags;
 800a144:	2402      	movs	r4, #2
  p->next = NULL;
 800a146:	6003      	str	r3, [r0, #0]
  p->ref = 1;
 800a148:	2301      	movs	r3, #1
  p->tot_len = tot_len;
 800a14a:	8101      	strh	r1, [r0, #8]
  p->len = len;
 800a14c:	8141      	strh	r1, [r0, #10]
  p->type_internal = (u8_t)type;
 800a14e:	7302      	strb	r2, [r0, #12]
  p->flags = flags;
 800a150:	7344      	strb	r4, [r0, #13]
  p->ref = 1;
 800a152:	81c3      	strh	r3, [r0, #14]
}
 800a154:	bd10      	pop	{r4, pc}
    return NULL;
 800a156:	2000      	movs	r0, #0
}
 800a158:	bd10      	pop	{r4, pc}
 800a15a:	bf00      	nop

0800a15c <pbuf_add_header>:
{
 800a15c:	b508      	push	{r3, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 800a15e:	b310      	cbz	r0, 800a1a6 <pbuf_add_header+0x4a>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800a160:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800a164:	d20c      	bcs.n	800a180 <pbuf_add_header+0x24>
  if (header_size_increment == 0) {
 800a166:	b169      	cbz	r1, 800a184 <pbuf_add_header+0x28>
  increment_magnitude = (u16_t)header_size_increment;
 800a168:	fa1f fc81 	uxth.w	ip, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800a16c:	8902      	ldrh	r2, [r0, #8]
 800a16e:	4603      	mov	r3, r0
 800a170:	4462      	add	r2, ip
 800a172:	b292      	uxth	r2, r2
 800a174:	4594      	cmp	ip, r2
 800a176:	d803      	bhi.n	800a180 <pbuf_add_header+0x24>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800a178:	f990 000c 	ldrsb.w	r0, [r0, #12]
 800a17c:	2800      	cmp	r0, #0
 800a17e:	db03      	blt.n	800a188 <pbuf_add_header+0x2c>
    return 1;
 800a180:	2001      	movs	r0, #1
}
 800a182:	bd08      	pop	{r3, pc}
    return 0;
 800a184:	4608      	mov	r0, r1
}
 800a186:	bd08      	pop	{r3, pc}
    payload = (u8_t *)p->payload - header_size_increment;
 800a188:	6858      	ldr	r0, [r3, #4]
 800a18a:	1a41      	subs	r1, r0, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800a18c:	f103 0010 	add.w	r0, r3, #16
 800a190:	4281      	cmp	r1, r0
 800a192:	d3f5      	bcc.n	800a180 <pbuf_add_header+0x24>
  p->len = (u16_t)(p->len + increment_magnitude);
 800a194:	f8b3 e00a 	ldrh.w	lr, [r3, #10]
  return 0;
 800a198:	2000      	movs	r0, #0
  p->payload = payload;
 800a19a:	6059      	str	r1, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800a19c:	44f4      	add	ip, lr
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800a19e:	811a      	strh	r2, [r3, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 800a1a0:	f8a3 c00a 	strh.w	ip, [r3, #10]
}
 800a1a4:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 800a1a6:	4b04      	ldr	r3, [pc, #16]	; (800a1b8 <pbuf_add_header+0x5c>)
 800a1a8:	f240 12df 	movw	r2, #479	; 0x1df
 800a1ac:	4903      	ldr	r1, [pc, #12]	; (800a1bc <pbuf_add_header+0x60>)
 800a1ae:	4804      	ldr	r0, [pc, #16]	; (800a1c0 <pbuf_add_header+0x64>)
 800a1b0:	f007 fa26 	bl	8011600 <iprintf>
    return 1;
 800a1b4:	2001      	movs	r0, #1
}
 800a1b6:	bd08      	pop	{r3, pc}
 800a1b8:	080134cc 	.word	0x080134cc
 800a1bc:	080128e0 	.word	0x080128e0
 800a1c0:	080124d0 	.word	0x080124d0

0800a1c4 <pbuf_remove_header>:
{
 800a1c4:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 800a1c6:	b1a0      	cbz	r0, 800a1f2 <pbuf_remove_header+0x2e>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800a1c8:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800a1cc:	d21a      	bcs.n	800a204 <pbuf_remove_header+0x40>
  if (header_size_decrement == 0) {
 800a1ce:	b171      	cbz	r1, 800a1ee <pbuf_remove_header+0x2a>
 800a1d0:	4603      	mov	r3, r0
  increment_magnitude = (u16_t)header_size_decrement;
 800a1d2:	b288      	uxth	r0, r1
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800a1d4:	895a      	ldrh	r2, [r3, #10]
 800a1d6:	4290      	cmp	r0, r2
 800a1d8:	d816      	bhi.n	800a208 <pbuf_remove_header+0x44>
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800a1da:	685c      	ldr	r4, [r3, #4]
  p->len = (u16_t)(p->len - increment_magnitude);
 800a1dc:	1a12      	subs	r2, r2, r0
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800a1de:	440c      	add	r4, r1
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800a1e0:	8919      	ldrh	r1, [r3, #8]
  p->len = (u16_t)(p->len - increment_magnitude);
 800a1e2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800a1e4:	1a0a      	subs	r2, r1, r0
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800a1e6:	605c      	str	r4, [r3, #4]
  return 0;
 800a1e8:	2000      	movs	r0, #0
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800a1ea:	811a      	strh	r2, [r3, #8]
}
 800a1ec:	bd10      	pop	{r4, pc}
    return 0;
 800a1ee:	4608      	mov	r0, r1
}
 800a1f0:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 800a1f2:	4b0a      	ldr	r3, [pc, #40]	; (800a21c <pbuf_remove_header+0x58>)
 800a1f4:	f240 224b 	movw	r2, #587	; 0x24b
 800a1f8:	4909      	ldr	r1, [pc, #36]	; (800a220 <pbuf_remove_header+0x5c>)
 800a1fa:	480a      	ldr	r0, [pc, #40]	; (800a224 <pbuf_remove_header+0x60>)
 800a1fc:	f007 fa00 	bl	8011600 <iprintf>
    return 1;
 800a200:	2001      	movs	r0, #1
}
 800a202:	bd10      	pop	{r4, pc}
    return 1;
 800a204:	2001      	movs	r0, #1
}
 800a206:	bd10      	pop	{r4, pc}
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800a208:	4b04      	ldr	r3, [pc, #16]	; (800a21c <pbuf_remove_header+0x58>)
 800a20a:	f240 2255 	movw	r2, #597	; 0x255
 800a20e:	4906      	ldr	r1, [pc, #24]	; (800a228 <pbuf_remove_header+0x64>)
 800a210:	4804      	ldr	r0, [pc, #16]	; (800a224 <pbuf_remove_header+0x60>)
 800a212:	f007 f9f5 	bl	8011600 <iprintf>
 800a216:	2001      	movs	r0, #1
}
 800a218:	bd10      	pop	{r4, pc}
 800a21a:	bf00      	nop
 800a21c:	080134cc 	.word	0x080134cc
 800a220:	080128e0 	.word	0x080128e0
 800a224:	080124d0 	.word	0x080124d0
 800a228:	08013580 	.word	0x08013580

0800a22c <pbuf_header_force>:
  if (header_size_increment < 0) {
 800a22c:	2900      	cmp	r1, #0
 800a22e:	db1a      	blt.n	800a266 <pbuf_header_force+0x3a>
{
 800a230:	b508      	push	{r3, lr}
 800a232:	4603      	mov	r3, r0
  LWIP_ASSERT("p != NULL", p != NULL);
 800a234:	b1d0      	cbz	r0, 800a26c <pbuf_header_force+0x40>
  if (header_size_increment == 0) {
 800a236:	b341      	cbz	r1, 800a28a <pbuf_header_force+0x5e>
  increment_magnitude = (u16_t)header_size_increment;
 800a238:	fa1f fc81 	uxth.w	ip, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800a23c:	891a      	ldrh	r2, [r3, #8]
 800a23e:	4462      	add	r2, ip
 800a240:	b292      	uxth	r2, r2
 800a242:	4594      	cmp	ip, r2
 800a244:	d81f      	bhi.n	800a286 <pbuf_header_force+0x5a>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800a246:	f993 000c 	ldrsb.w	r0, [r3, #12]
 800a24a:	2800      	cmp	r0, #0
    payload = (u8_t *)p->payload - header_size_increment;
 800a24c:	6858      	ldr	r0, [r3, #4]
 800a24e:	eba0 0101 	sub.w	r1, r0, r1
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800a252:	db14      	blt.n	800a27e <pbuf_header_force+0x52>
  p->len = (u16_t)(p->len + increment_magnitude);
 800a254:	f8b3 e00a 	ldrh.w	lr, [r3, #10]
  return 0;
 800a258:	2000      	movs	r0, #0
  p->payload = payload;
 800a25a:	6059      	str	r1, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800a25c:	44f4      	add	ip, lr
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800a25e:	811a      	strh	r2, [r3, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 800a260:	f8a3 c00a 	strh.w	ip, [r3, #10]
}
 800a264:	bd08      	pop	{r3, pc}
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800a266:	4249      	negs	r1, r1
 800a268:	f7ff bfac 	b.w	800a1c4 <pbuf_remove_header>
  LWIP_ASSERT("p != NULL", p != NULL);
 800a26c:	4b08      	ldr	r3, [pc, #32]	; (800a290 <pbuf_header_force+0x64>)
 800a26e:	f240 12df 	movw	r2, #479	; 0x1df
 800a272:	4908      	ldr	r1, [pc, #32]	; (800a294 <pbuf_header_force+0x68>)
 800a274:	4808      	ldr	r0, [pc, #32]	; (800a298 <pbuf_header_force+0x6c>)
 800a276:	f007 f9c3 	bl	8011600 <iprintf>
    return 1;
 800a27a:	2001      	movs	r0, #1
}
 800a27c:	bd08      	pop	{r3, pc}
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800a27e:	f103 0010 	add.w	r0, r3, #16
 800a282:	4281      	cmp	r1, r0
 800a284:	d2e6      	bcs.n	800a254 <pbuf_header_force+0x28>
    return 1;
 800a286:	2001      	movs	r0, #1
}
 800a288:	bd08      	pop	{r3, pc}
    return 0;
 800a28a:	4608      	mov	r0, r1
}
 800a28c:	bd08      	pop	{r3, pc}
 800a28e:	bf00      	nop
 800a290:	080134cc 	.word	0x080134cc
 800a294:	080128e0 	.word	0x080128e0
 800a298:	080124d0 	.word	0x080124d0

0800a29c <pbuf_free>:
{
 800a29c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (p == NULL) {
 800a2a0:	4605      	mov	r5, r0
 800a2a2:	2800      	cmp	r0, #0
 800a2a4:	d055      	beq.n	800a352 <pbuf_free+0xb6>
  count = 0;
 800a2a6:	2600      	movs	r6, #0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a2a8:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 800a370 <pbuf_free+0xd4>
 800a2ac:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 800a378 <pbuf_free+0xdc>
 800a2b0:	4f2c      	ldr	r7, [pc, #176]	; (800a364 <pbuf_free+0xc8>)
 800a2b2:	e008      	b.n	800a2c6 <pbuf_free+0x2a>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800a2b4:	692b      	ldr	r3, [r5, #16]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d03d      	beq.n	800a336 <pbuf_free+0x9a>
        pc->custom_free_function(p);
 800a2ba:	4628      	mov	r0, r5
 800a2bc:	4798      	blx	r3
      count++;
 800a2be:	3601      	adds	r6, #1
 800a2c0:	b2f6      	uxtb	r6, r6
  while (p != NULL) {
 800a2c2:	b1fc      	cbz	r4, 800a304 <pbuf_free+0x68>
 800a2c4:	4625      	mov	r5, r4
    SYS_ARCH_PROTECT(old_level);
 800a2c6:	f006 fc59 	bl	8010b7c <sys_arch_protect>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a2ca:	7bab      	ldrb	r3, [r5, #14]
    SYS_ARCH_PROTECT(old_level);
 800a2cc:	4604      	mov	r4, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a2ce:	b1e3      	cbz	r3, 800a30a <pbuf_free+0x6e>
    ref = --(p->ref);
 800a2d0:	3b01      	subs	r3, #1
    SYS_ARCH_UNPROTECT(old_level);
 800a2d2:	4620      	mov	r0, r4
    ref = --(p->ref);
 800a2d4:	b2dc      	uxtb	r4, r3
 800a2d6:	73ac      	strb	r4, [r5, #14]
    SYS_ARCH_UNPROTECT(old_level);
 800a2d8:	f006 fc5c 	bl	8010b94 <sys_arch_unprotect>
    if (ref == 0) {
 800a2dc:	b994      	cbnz	r4, 800a304 <pbuf_free+0x68>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800a2de:	7b6a      	ldrb	r2, [r5, #13]
      q = p->next;
 800a2e0:	682c      	ldr	r4, [r5, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800a2e2:	0792      	lsls	r2, r2, #30
      alloc_src = pbuf_get_allocsrc(p);
 800a2e4:	7b2b      	ldrb	r3, [r5, #12]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800a2e6:	d4e5      	bmi.n	800a2b4 <pbuf_free+0x18>
      alloc_src = pbuf_get_allocsrc(p);
 800a2e8:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800a2ec:	2b02      	cmp	r3, #2
 800a2ee:	d01d      	beq.n	800a32c <pbuf_free+0x90>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800a2f0:	2b01      	cmp	r3, #1
 800a2f2:	d029      	beq.n	800a348 <pbuf_free+0xac>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800a2f4:	b993      	cbnz	r3, 800a31c <pbuf_free+0x80>
      count++;
 800a2f6:	3601      	adds	r6, #1
          mem_free(p);
 800a2f8:	4628      	mov	r0, r5
 800a2fa:	f7ff f90f 	bl	800951c <mem_free>
      count++;
 800a2fe:	b2f6      	uxtb	r6, r6
  while (p != NULL) {
 800a300:	2c00      	cmp	r4, #0
 800a302:	d1df      	bne.n	800a2c4 <pbuf_free+0x28>
}
 800a304:	4630      	mov	r0, r6
 800a306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a30a:	4643      	mov	r3, r8
 800a30c:	f240 22f1 	movw	r2, #753	; 0x2f1
 800a310:	4649      	mov	r1, r9
 800a312:	4638      	mov	r0, r7
 800a314:	f007 f974 	bl	8011600 <iprintf>
    ref = --(p->ref);
 800a318:	7bab      	ldrb	r3, [r5, #14]
 800a31a:	e7d9      	b.n	800a2d0 <pbuf_free+0x34>
          LWIP_ASSERT("invalid pbuf type", 0);
 800a31c:	4643      	mov	r3, r8
 800a31e:	f240 320f 	movw	r2, #783	; 0x30f
 800a322:	4911      	ldr	r1, [pc, #68]	; (800a368 <pbuf_free+0xcc>)
 800a324:	4638      	mov	r0, r7
 800a326:	f007 f96b 	bl	8011600 <iprintf>
 800a32a:	e7c8      	b.n	800a2be <pbuf_free+0x22>
          memp_free(MEMP_PBUF_POOL, p);
 800a32c:	4629      	mov	r1, r5
 800a32e:	200c      	movs	r0, #12
 800a330:	f7ff fc26 	bl	8009b80 <memp_free>
 800a334:	e7c3      	b.n	800a2be <pbuf_free+0x22>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800a336:	4643      	mov	r3, r8
 800a338:	f240 22ff 	movw	r2, #767	; 0x2ff
 800a33c:	490b      	ldr	r1, [pc, #44]	; (800a36c <pbuf_free+0xd0>)
 800a33e:	4638      	mov	r0, r7
 800a340:	f007 f95e 	bl	8011600 <iprintf>
        pc->custom_free_function(p);
 800a344:	692b      	ldr	r3, [r5, #16]
 800a346:	e7b8      	b.n	800a2ba <pbuf_free+0x1e>
          memp_free(MEMP_PBUF, p);
 800a348:	4629      	mov	r1, r5
 800a34a:	200b      	movs	r0, #11
 800a34c:	f7ff fc18 	bl	8009b80 <memp_free>
 800a350:	e7b5      	b.n	800a2be <pbuf_free+0x22>
    LWIP_ASSERT("p != NULL", p != NULL);
 800a352:	4b07      	ldr	r3, [pc, #28]	; (800a370 <pbuf_free+0xd4>)
 800a354:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800a358:	4906      	ldr	r1, [pc, #24]	; (800a374 <pbuf_free+0xd8>)
    return 0;
 800a35a:	462e      	mov	r6, r5
    LWIP_ASSERT("p != NULL", p != NULL);
 800a35c:	4801      	ldr	r0, [pc, #4]	; (800a364 <pbuf_free+0xc8>)
 800a35e:	f007 f94f 	bl	8011600 <iprintf>
    return 0;
 800a362:	e7cf      	b.n	800a304 <pbuf_free+0x68>
 800a364:	080124d0 	.word	0x080124d0
 800a368:	080135dc 	.word	0x080135dc
 800a36c:	080135b8 	.word	0x080135b8
 800a370:	080134cc 	.word	0x080134cc
 800a374:	080128e0 	.word	0x080128e0
 800a378:	080135a0 	.word	0x080135a0

0800a37c <pbuf_alloc>:
  switch (type) {
 800a37c:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
{
 800a380:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a384:	4688      	mov	r8, r1
 800a386:	b083      	sub	sp, #12
  u16_t offset = (u16_t)layer;
 800a388:	fa1f f980 	uxth.w	r9, r0
  switch (type) {
 800a38c:	d040      	beq.n	800a410 <pbuf_alloc+0x94>
 800a38e:	d80f      	bhi.n	800a3b0 <pbuf_alloc+0x34>
 800a390:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 800a394:	2b01      	cmp	r3, #1
 800a396:	d035      	beq.n	800a404 <pbuf_alloc+0x88>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800a398:	4b46      	ldr	r3, [pc, #280]	; (800a4b4 <pbuf_alloc+0x138>)
 800a39a:	f240 1227 	movw	r2, #295	; 0x127
 800a39e:	4946      	ldr	r1, [pc, #280]	; (800a4b8 <pbuf_alloc+0x13c>)
      return NULL;
 800a3a0:	2400      	movs	r4, #0
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800a3a2:	4846      	ldr	r0, [pc, #280]	; (800a4bc <pbuf_alloc+0x140>)
 800a3a4:	f007 f92c 	bl	8011600 <iprintf>
}
 800a3a8:	4620      	mov	r0, r4
 800a3aa:	b003      	add	sp, #12
 800a3ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  switch (type) {
 800a3b0:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 800a3b4:	d1f0      	bne.n	800a398 <pbuf_alloc+0x1c>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800a3b6:	f109 0303 	add.w	r3, r9, #3
 800a3ba:	1cca      	adds	r2, r1, #3
 800a3bc:	4605      	mov	r5, r0
 800a3be:	f022 0203 	bic.w	r2, r2, #3
 800a3c2:	f023 0303 	bic.w	r3, r3, #3
 800a3c6:	4413      	add	r3, r2
 800a3c8:	b29b      	uxth	r3, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800a3ca:	f103 0010 	add.w	r0, r3, #16
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a3ce:	4293      	cmp	r3, r2
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800a3d0:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a3d2:	d34b      	bcc.n	800a46c <pbuf_alloc+0xf0>
 800a3d4:	4282      	cmp	r2, r0
 800a3d6:	d849      	bhi.n	800a46c <pbuf_alloc+0xf0>
      p = (struct pbuf *)mem_malloc(alloc_len);
 800a3d8:	f7ff fa50 	bl	800987c <mem_malloc>
      if (p == NULL) {
 800a3dc:	4604      	mov	r4, r0
 800a3de:	2800      	cmp	r0, #0
 800a3e0:	d0e2      	beq.n	800a3a8 <pbuf_alloc+0x2c>
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800a3e2:	1943      	adds	r3, r0, r5
  p->next = NULL;
 800a3e4:	2100      	movs	r1, #0
  p->type_internal = (u8_t)type;
 800a3e6:	4a36      	ldr	r2, [pc, #216]	; (800a4c0 <pbuf_alloc+0x144>)
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800a3e8:	3313      	adds	r3, #19
  p->tot_len = tot_len;
 800a3ea:	f8a0 8008 	strh.w	r8, [r0, #8]
  p->next = NULL;
 800a3ee:	6001      	str	r1, [r0, #0]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800a3f0:	f023 0303 	bic.w	r3, r3, #3
  p->len = len;
 800a3f4:	f8a0 800a 	strh.w	r8, [r0, #10]
  p->type_internal = (u8_t)type;
 800a3f8:	60c2      	str	r2, [r0, #12]
  p->payload = payload;
 800a3fa:	6043      	str	r3, [r0, #4]
}
 800a3fc:	4620      	mov	r0, r4
 800a3fe:	b003      	add	sp, #12
 800a400:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      p = pbuf_alloc_reference(NULL, length, type);
 800a404:	2000      	movs	r0, #0
}
 800a406:	b003      	add	sp, #12
 800a408:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
      p = pbuf_alloc_reference(NULL, length, type);
 800a40c:	f7ff be66 	b.w	800a0dc <pbuf_alloc_reference>
  switch (type) {
 800a410:	2100      	movs	r1, #0
  p->type_internal = (u8_t)type;
 800a412:	4d2c      	ldr	r5, [pc, #176]	; (800a4c4 <pbuf_alloc+0x148>)
  switch (type) {
 800a414:	460c      	mov	r4, r1
  p->next = NULL;
 800a416:	460e      	mov	r6, r1
 800a418:	e009      	b.n	800a42e <pbuf_alloc+0xb2>
          last->next = q;
 800a41a:	6038      	str	r0, [r7, #0]
        rem_len = (u16_t)(rem_len - qlen);
 800a41c:	eba8 0303 	sub.w	r3, r8, r3
        offset = 0;
 800a420:	f04f 0900 	mov.w	r9, #0
        rem_len = (u16_t)(rem_len - qlen);
 800a424:	fa1f f883 	uxth.w	r8, r3
      } while (rem_len > 0);
 800a428:	f1b8 0f00 	cmp.w	r8, #0
 800a42c:	d0bc      	beq.n	800a3a8 <pbuf_alloc+0x2c>
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800a42e:	200c      	movs	r0, #12
 800a430:	460f      	mov	r7, r1
 800a432:	f7ff fb5f 	bl	8009af4 <memp_malloc>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a436:	f109 0203 	add.w	r2, r9, #3
        if (q == NULL) {
 800a43a:	4601      	mov	r1, r0
 800a43c:	b1d8      	cbz	r0, 800a476 <pbuf_alloc+0xfa>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a43e:	f022 0303 	bic.w	r3, r2, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800a442:	eb00 0209 	add.w	r2, r0, r9
  p->tot_len = tot_len;
 800a446:	f8a0 8008 	strh.w	r8, [r0, #8]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a44a:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800a44e:	3213      	adds	r2, #19
  p->next = NULL;
 800a450:	6006      	str	r6, [r0, #0]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a452:	b29b      	uxth	r3, r3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800a454:	f022 0203 	bic.w	r2, r2, #3
  p->type_internal = (u8_t)type;
 800a458:	60c5      	str	r5, [r0, #12]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a45a:	4543      	cmp	r3, r8
  p->payload = payload;
 800a45c:	6042      	str	r2, [r0, #4]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a45e:	bf28      	it	cs
 800a460:	4643      	movcs	r3, r8
  p->len = len;
 800a462:	8143      	strh	r3, [r0, #10]
        if (p == NULL) {
 800a464:	2c00      	cmp	r4, #0
 800a466:	d1d8      	bne.n	800a41a <pbuf_alloc+0x9e>
 800a468:	4604      	mov	r4, r0
 800a46a:	e7d7      	b.n	800a41c <pbuf_alloc+0xa0>
          return NULL;
 800a46c:	2400      	movs	r4, #0
}
 800a46e:	4620      	mov	r0, r4
 800a470:	b003      	add	sp, #12
 800a472:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  queued = pbuf_free_ooseq_pending;
 800a476:	4e14      	ldr	r6, [pc, #80]	; (800a4c8 <pbuf_alloc+0x14c>)
 800a478:	9001      	str	r0, [sp, #4]
  SYS_ARCH_PROTECT(old_level);
 800a47a:	f006 fb7f 	bl	8010b7c <sys_arch_protect>
  queued = pbuf_free_ooseq_pending;
 800a47e:	7835      	ldrb	r5, [r6, #0]
  pbuf_free_ooseq_pending = 1;
 800a480:	2301      	movs	r3, #1
  queued = pbuf_free_ooseq_pending;
 800a482:	b2ed      	uxtb	r5, r5
  pbuf_free_ooseq_pending = 1;
 800a484:	7033      	strb	r3, [r6, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800a486:	f006 fb85 	bl	8010b94 <sys_arch_unprotect>
  if (!queued) {
 800a48a:	9901      	ldr	r1, [sp, #4]
 800a48c:	b135      	cbz	r5, 800a49c <pbuf_alloc+0x120>
          if (p) {
 800a48e:	2c00      	cmp	r4, #0
 800a490:	d0ec      	beq.n	800a46c <pbuf_alloc+0xf0>
            pbuf_free(p);
 800a492:	4620      	mov	r0, r4
          return NULL;
 800a494:	2400      	movs	r4, #0
            pbuf_free(p);
 800a496:	f7ff ff01 	bl	800a29c <pbuf_free>
 800a49a:	e785      	b.n	800a3a8 <pbuf_alloc+0x2c>
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800a49c:	480b      	ldr	r0, [pc, #44]	; (800a4cc <pbuf_alloc+0x150>)
 800a49e:	f7fe fef5 	bl	800928c <tcpip_try_callback>
 800a4a2:	2800      	cmp	r0, #0
 800a4a4:	d0f3      	beq.n	800a48e <pbuf_alloc+0x112>
 800a4a6:	f006 fb69 	bl	8010b7c <sys_arch_protect>
 800a4aa:	9901      	ldr	r1, [sp, #4]
 800a4ac:	7031      	strb	r1, [r6, #0]
 800a4ae:	f006 fb71 	bl	8010b94 <sys_arch_unprotect>
 800a4b2:	e7ec      	b.n	800a48e <pbuf_alloc+0x112>
 800a4b4:	080134cc 	.word	0x080134cc
 800a4b8:	080135f0 	.word	0x080135f0
 800a4bc:	080124d0 	.word	0x080124d0
 800a4c0:	00010080 	.word	0x00010080
 800a4c4:	00010082 	.word	0x00010082
 800a4c8:	2400e649 	.word	0x2400e649
 800a4cc:	08009f65 	.word	0x08009f65

0800a4d0 <pbuf_realloc>:
{
 800a4d0:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800a4d2:	4604      	mov	r4, r0
{
 800a4d4:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800a4d6:	2800      	cmp	r0, #0
 800a4d8:	d037      	beq.n	800a54a <pbuf_realloc+0x7a>
  if (new_len >= p->tot_len) {
 800a4da:	8922      	ldrh	r2, [r4, #8]
 800a4dc:	42aa      	cmp	r2, r5
 800a4de:	d91b      	bls.n	800a518 <pbuf_realloc+0x48>
  while (rem_len > q->len) {
 800a4e0:	8963      	ldrh	r3, [r4, #10]
 800a4e2:	429d      	cmp	r5, r3
 800a4e4:	d90d      	bls.n	800a502 <pbuf_realloc+0x32>
 800a4e6:	1aa9      	subs	r1, r5, r2
 800a4e8:	b289      	uxth	r1, r1
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800a4ea:	440a      	add	r2, r1
    rem_len = (u16_t)(rem_len - q->len);
 800a4ec:	1aeb      	subs	r3, r5, r3
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800a4ee:	8122      	strh	r2, [r4, #8]
    rem_len = (u16_t)(rem_len - q->len);
 800a4f0:	b29d      	uxth	r5, r3
    q = q->next;
 800a4f2:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800a4f4:	2c00      	cmp	r4, #0
 800a4f6:	d030      	beq.n	800a55a <pbuf_realloc+0x8a>
  while (rem_len > q->len) {
 800a4f8:	8963      	ldrh	r3, [r4, #10]
 800a4fa:	42ab      	cmp	r3, r5
 800a4fc:	d201      	bcs.n	800a502 <pbuf_realloc+0x32>
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800a4fe:	8922      	ldrh	r2, [r4, #8]
 800a500:	e7f3      	b.n	800a4ea <pbuf_realloc+0x1a>
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800a502:	7b22      	ldrb	r2, [r4, #12]
 800a504:	0712      	lsls	r2, r2, #28
 800a506:	d008      	beq.n	800a51a <pbuf_realloc+0x4a>
  if (q->next != NULL) {
 800a508:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 800a50a:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 800a50c:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 800a50e:	b108      	cbz	r0, 800a514 <pbuf_realloc+0x44>
    pbuf_free(q->next);
 800a510:	f7ff fec4 	bl	800a29c <pbuf_free>
  q->next = NULL;
 800a514:	2300      	movs	r3, #0
 800a516:	6023      	str	r3, [r4, #0]
}
 800a518:	bd38      	pop	{r3, r4, r5, pc}
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800a51a:	42ab      	cmp	r3, r5
 800a51c:	d0f4      	beq.n	800a508 <pbuf_realloc+0x38>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800a51e:	7b63      	ldrb	r3, [r4, #13]
 800a520:	079b      	lsls	r3, r3, #30
 800a522:	d4f1      	bmi.n	800a508 <pbuf_realloc+0x38>
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800a524:	6863      	ldr	r3, [r4, #4]
 800a526:	4620      	mov	r0, r4
 800a528:	1b1b      	subs	r3, r3, r4
 800a52a:	18e9      	adds	r1, r5, r3
 800a52c:	b289      	uxth	r1, r1
 800a52e:	f7ff f8e1 	bl	80096f4 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800a532:	4604      	mov	r4, r0
 800a534:	2800      	cmp	r0, #0
 800a536:	d1e7      	bne.n	800a508 <pbuf_realloc+0x38>
 800a538:	4b0c      	ldr	r3, [pc, #48]	; (800a56c <pbuf_realloc+0x9c>)
 800a53a:	f240 12bd 	movw	r2, #445	; 0x1bd
 800a53e:	490c      	ldr	r1, [pc, #48]	; (800a570 <pbuf_realloc+0xa0>)
 800a540:	480c      	ldr	r0, [pc, #48]	; (800a574 <pbuf_realloc+0xa4>)
 800a542:	f007 f85d 	bl	8011600 <iprintf>
  q->len = rem_len;
 800a546:	8164      	strh	r4, [r4, #10]
 800a548:	deff      	udf	#255	; 0xff
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800a54a:	4b08      	ldr	r3, [pc, #32]	; (800a56c <pbuf_realloc+0x9c>)
 800a54c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800a550:	4909      	ldr	r1, [pc, #36]	; (800a578 <pbuf_realloc+0xa8>)
 800a552:	4808      	ldr	r0, [pc, #32]	; (800a574 <pbuf_realloc+0xa4>)
 800a554:	f007 f854 	bl	8011600 <iprintf>
 800a558:	e7bf      	b.n	800a4da <pbuf_realloc+0xa>
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800a55a:	4b04      	ldr	r3, [pc, #16]	; (800a56c <pbuf_realloc+0x9c>)
 800a55c:	f240 12af 	movw	r2, #431	; 0x1af
 800a560:	4906      	ldr	r1, [pc, #24]	; (800a57c <pbuf_realloc+0xac>)
 800a562:	4804      	ldr	r0, [pc, #16]	; (800a574 <pbuf_realloc+0xa4>)
 800a564:	f007 f84c 	bl	8011600 <iprintf>
  while (rem_len > q->len) {
 800a568:	8963      	ldrh	r3, [r4, #10]
 800a56a:	deff      	udf	#255	; 0xff
 800a56c:	080134cc 	.word	0x080134cc
 800a570:	0801363c 	.word	0x0801363c
 800a574:	080124d0 	.word	0x080124d0
 800a578:	0801360c 	.word	0x0801360c
 800a57c:	08013624 	.word	0x08013624

0800a580 <pbuf_free_header>:
{
 800a580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a582:	4604      	mov	r4, r0
  while (free_left && p) {
 800a584:	b159      	cbz	r1, 800a59e <pbuf_free_header+0x1e>
 800a586:	b150      	cbz	r0, 800a59e <pbuf_free_header+0x1e>
 800a588:	460d      	mov	r5, r1
      f->next = 0;
 800a58a:	2700      	movs	r7, #0
    if (free_left >= p->len) {
 800a58c:	8963      	ldrh	r3, [r4, #10]
      pbuf_free(f);
 800a58e:	4620      	mov	r0, r4
    if (free_left >= p->len) {
 800a590:	42ab      	cmp	r3, r5
      free_left = (u16_t)(free_left - p->len);
 800a592:	eba5 0203 	sub.w	r2, r5, r3
    if (free_left >= p->len) {
 800a596:	d904      	bls.n	800a5a2 <pbuf_free_header+0x22>
      pbuf_remove_header(p, free_left);
 800a598:	4629      	mov	r1, r5
 800a59a:	f7ff fe13 	bl	800a1c4 <pbuf_remove_header>
}
 800a59e:	4620      	mov	r0, r4
 800a5a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      p = p->next;
 800a5a2:	6826      	ldr	r6, [r4, #0]
      free_left = (u16_t)(free_left - p->len);
 800a5a4:	b295      	uxth	r5, r2
      f->next = 0;
 800a5a6:	6027      	str	r7, [r4, #0]
      pbuf_free(f);
 800a5a8:	4634      	mov	r4, r6
 800a5aa:	f7ff fe77 	bl	800a29c <pbuf_free>
  while (free_left && p) {
 800a5ae:	b10d      	cbz	r5, 800a5b4 <pbuf_free_header+0x34>
 800a5b0:	2e00      	cmp	r6, #0
 800a5b2:	d1eb      	bne.n	800a58c <pbuf_free_header+0xc>
      p = p->next;
 800a5b4:	4634      	mov	r4, r6
 800a5b6:	e7f2      	b.n	800a59e <pbuf_free_header+0x1e>

0800a5b8 <pbuf_clen>:
  while (p != NULL) {
 800a5b8:	b138      	cbz	r0, 800a5ca <pbuf_clen+0x12>
  len = 0;
 800a5ba:	2300      	movs	r3, #0
    ++len;
 800a5bc:	3301      	adds	r3, #1
    p = p->next;
 800a5be:	6800      	ldr	r0, [r0, #0]
    ++len;
 800a5c0:	b29b      	uxth	r3, r3
  while (p != NULL) {
 800a5c2:	2800      	cmp	r0, #0
 800a5c4:	d1fa      	bne.n	800a5bc <pbuf_clen+0x4>
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	4770      	bx	lr
  len = 0;
 800a5ca:	4603      	mov	r3, r0
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	4770      	bx	lr

0800a5d0 <pbuf_ref>:
  if (p != NULL) {
 800a5d0:	b158      	cbz	r0, 800a5ea <pbuf_ref+0x1a>
{
 800a5d2:	b510      	push	{r4, lr}
 800a5d4:	4604      	mov	r4, r0
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800a5d6:	f006 fad1 	bl	8010b7c <sys_arch_protect>
 800a5da:	7ba3      	ldrb	r3, [r4, #14]
 800a5dc:	3301      	adds	r3, #1
 800a5de:	73a3      	strb	r3, [r4, #14]
 800a5e0:	f006 fad8 	bl	8010b94 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800a5e4:	7ba3      	ldrb	r3, [r4, #14]
 800a5e6:	b10b      	cbz	r3, 800a5ec <pbuf_ref+0x1c>
}
 800a5e8:	bd10      	pop	{r4, pc}
 800a5ea:	4770      	bx	lr
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800a5ec:	4b04      	ldr	r3, [pc, #16]	; (800a600 <pbuf_ref+0x30>)
 800a5ee:	f240 3242 	movw	r2, #834	; 0x342
 800a5f2:	4904      	ldr	r1, [pc, #16]	; (800a604 <pbuf_ref+0x34>)
 800a5f4:	4804      	ldr	r0, [pc, #16]	; (800a608 <pbuf_ref+0x38>)
}
 800a5f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800a5fa:	f007 b801 	b.w	8011600 <iprintf>
 800a5fe:	bf00      	nop
 800a600:	080134cc 	.word	0x080134cc
 800a604:	08013658 	.word	0x08013658
 800a608:	080124d0 	.word	0x080124d0

0800a60c <pbuf_cat>:
{
 800a60c:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800a60e:	b330      	cbz	r0, 800a65e <pbuf_cat+0x52>
 800a610:	460d      	mov	r5, r1
 800a612:	b321      	cbz	r1, 800a65e <pbuf_cat+0x52>
  for (p = h; p->next != NULL; p = p->next) {
 800a614:	6803      	ldr	r3, [r0, #0]
 800a616:	4604      	mov	r4, r0
 800a618:	b13b      	cbz	r3, 800a62a <pbuf_cat+0x1e>
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a61a:	8922      	ldrh	r2, [r4, #8]
 800a61c:	8928      	ldrh	r0, [r5, #8]
 800a61e:	4402      	add	r2, r0
 800a620:	8122      	strh	r2, [r4, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800a622:	461c      	mov	r4, r3
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d1f7      	bne.n	800a61a <pbuf_cat+0xe>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800a62a:	8963      	ldrh	r3, [r4, #10]
 800a62c:	8922      	ldrh	r2, [r4, #8]
 800a62e:	429a      	cmp	r2, r3
 800a630:	d010      	beq.n	800a654 <pbuf_cat+0x48>
 800a632:	4b0f      	ldr	r3, [pc, #60]	; (800a670 <pbuf_cat+0x64>)
 800a634:	f240 3262 	movw	r2, #866	; 0x362
 800a638:	490e      	ldr	r1, [pc, #56]	; (800a674 <pbuf_cat+0x68>)
 800a63a:	480f      	ldr	r0, [pc, #60]	; (800a678 <pbuf_cat+0x6c>)
 800a63c:	f006 ffe0 	bl	8011600 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800a640:	6823      	ldr	r3, [r4, #0]
 800a642:	b133      	cbz	r3, 800a652 <pbuf_cat+0x46>
 800a644:	4b0a      	ldr	r3, [pc, #40]	; (800a670 <pbuf_cat+0x64>)
 800a646:	f240 3263 	movw	r2, #867	; 0x363
 800a64a:	490c      	ldr	r1, [pc, #48]	; (800a67c <pbuf_cat+0x70>)
 800a64c:	480a      	ldr	r0, [pc, #40]	; (800a678 <pbuf_cat+0x6c>)
 800a64e:	f006 ffd7 	bl	8011600 <iprintf>
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a652:	8923      	ldrh	r3, [r4, #8]
 800a654:	892a      	ldrh	r2, [r5, #8]
  p->next = t;
 800a656:	6025      	str	r5, [r4, #0]
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a658:	4413      	add	r3, r2
 800a65a:	8123      	strh	r3, [r4, #8]
}
 800a65c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800a65e:	4b04      	ldr	r3, [pc, #16]	; (800a670 <pbuf_cat+0x64>)
 800a660:	f240 3259 	movw	r2, #857	; 0x359
 800a664:	4906      	ldr	r1, [pc, #24]	; (800a680 <pbuf_cat+0x74>)
 800a666:	4804      	ldr	r0, [pc, #16]	; (800a678 <pbuf_cat+0x6c>)
}
 800a668:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800a66c:	f006 bfc8 	b.w	8011600 <iprintf>
 800a670:	080134cc 	.word	0x080134cc
 800a674:	080136a4 	.word	0x080136a4
 800a678:	080124d0 	.word	0x080124d0
 800a67c:	080136d4 	.word	0x080136d4
 800a680:	0801366c 	.word	0x0801366c

0800a684 <pbuf_chain>:
{
 800a684:	b510      	push	{r4, lr}
 800a686:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 800a688:	f7ff ffc0 	bl	800a60c <pbuf_cat>
  if (p != NULL) {
 800a68c:	b144      	cbz	r4, 800a6a0 <pbuf_chain+0x1c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800a68e:	f006 fa75 	bl	8010b7c <sys_arch_protect>
 800a692:	7ba3      	ldrb	r3, [r4, #14]
 800a694:	3301      	adds	r3, #1
 800a696:	73a3      	strb	r3, [r4, #14]
 800a698:	f006 fa7c 	bl	8010b94 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800a69c:	7ba3      	ldrb	r3, [r4, #14]
 800a69e:	b103      	cbz	r3, 800a6a2 <pbuf_chain+0x1e>
}
 800a6a0:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800a6a2:	4b04      	ldr	r3, [pc, #16]	; (800a6b4 <pbuf_chain+0x30>)
 800a6a4:	f240 3242 	movw	r2, #834	; 0x342
 800a6a8:	4903      	ldr	r1, [pc, #12]	; (800a6b8 <pbuf_chain+0x34>)
 800a6aa:	4804      	ldr	r0, [pc, #16]	; (800a6bc <pbuf_chain+0x38>)
}
 800a6ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800a6b0:	f006 bfa6 	b.w	8011600 <iprintf>
 800a6b4:	080134cc 	.word	0x080134cc
 800a6b8:	08013658 	.word	0x08013658
 800a6bc:	080124d0 	.word	0x080124d0

0800a6c0 <pbuf_copy>:
{
 800a6c0:	b508      	push	{r3, lr}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800a6c2:	b140      	cbz	r0, 800a6d6 <pbuf_copy+0x16>
 800a6c4:	b139      	cbz	r1, 800a6d6 <pbuf_copy+0x16>
 800a6c6:	8902      	ldrh	r2, [r0, #8]
 800a6c8:	890b      	ldrh	r3, [r1, #8]
 800a6ca:	429a      	cmp	r2, r3
 800a6cc:	d303      	bcc.n	800a6d6 <pbuf_copy+0x16>
}
 800a6ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a6d2:	f7ff bc61 	b.w	8009f98 <pbuf_copy.part.0>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800a6d6:	4b05      	ldr	r3, [pc, #20]	; (800a6ec <pbuf_copy+0x2c>)
 800a6d8:	f240 32c9 	movw	r2, #969	; 0x3c9
 800a6dc:	4904      	ldr	r1, [pc, #16]	; (800a6f0 <pbuf_copy+0x30>)
 800a6de:	4805      	ldr	r0, [pc, #20]	; (800a6f4 <pbuf_copy+0x34>)
 800a6e0:	f006 ff8e 	bl	8011600 <iprintf>
}
 800a6e4:	f06f 000f 	mvn.w	r0, #15
 800a6e8:	bd08      	pop	{r3, pc}
 800a6ea:	bf00      	nop
 800a6ec:	080134cc 	.word	0x080134cc
 800a6f0:	080136e4 	.word	0x080136e4
 800a6f4:	080124d0 	.word	0x080124d0

0800a6f8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800a6f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const struct pbuf *p;
  u16_t left = 0;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800a6fc:	4605      	mov	r5, r0
 800a6fe:	b370      	cbz	r0, 800a75e <pbuf_copy_partial+0x66>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800a700:	460f      	mov	r7, r1
 800a702:	2900      	cmp	r1, #0
 800a704:	d036      	beq.n	800a774 <pbuf_copy_partial+0x7c>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a706:	4690      	mov	r8, r2
 800a708:	b392      	cbz	r2, 800a770 <pbuf_copy_partial+0x78>
  u16_t left = 0;
 800a70a:	2600      	movs	r6, #0
 800a70c:	e005      	b.n	800a71a <pbuf_copy_partial+0x22>
    if ((offset != 0) && (offset >= p->len)) {
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800a70e:	b293      	uxth	r3, r2
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a710:	682d      	ldr	r5, [r5, #0]
 800a712:	f1b8 0f00 	cmp.w	r8, #0
 800a716:	d01f      	beq.n	800a758 <pbuf_copy_partial+0x60>
 800a718:	b1f5      	cbz	r5, 800a758 <pbuf_copy_partial+0x60>
      buf_copy_len = (u16_t)(p->len - offset);
      if (buf_copy_len > len) {
        buf_copy_len = len;
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800a71a:	19b8      	adds	r0, r7, r6
    if ((offset != 0) && (offset >= p->len)) {
 800a71c:	f8b5 c00a 	ldrh.w	ip, [r5, #10]
 800a720:	b11b      	cbz	r3, 800a72a <pbuf_copy_partial+0x32>
 800a722:	4563      	cmp	r3, ip
      offset = (u16_t)(offset - p->len);
 800a724:	eba3 020c 	sub.w	r2, r3, ip
    if ((offset != 0) && (offset >= p->len)) {
 800a728:	d2f1      	bcs.n	800a70e <pbuf_copy_partial+0x16>
      buf_copy_len = (u16_t)(p->len - offset);
 800a72a:	ebac 0c03 	sub.w	ip, ip, r3
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800a72e:	6869      	ldr	r1, [r5, #4]
 800a730:	fa1f f48c 	uxth.w	r4, ip
 800a734:	4419      	add	r1, r3
 800a736:	4544      	cmp	r4, r8
 800a738:	bf28      	it	cs
 800a73a:	4644      	movcs	r4, r8
 800a73c:	4622      	mov	r2, r4
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800a73e:	4426      	add	r6, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800a740:	f007 f98f 	bl	8011a62 <memcpy>
      left = (u16_t)(left + buf_copy_len);
      len = (u16_t)(len - buf_copy_len);
 800a744:	eba8 0204 	sub.w	r2, r8, r4
      offset = 0;
 800a748:	2300      	movs	r3, #0
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800a74a:	b2b6      	uxth	r6, r6
      len = (u16_t)(len - buf_copy_len);
 800a74c:	fa1f f882 	uxth.w	r8, r2
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a750:	682d      	ldr	r5, [r5, #0]
 800a752:	f1b8 0f00 	cmp.w	r8, #0
 800a756:	d1df      	bne.n	800a718 <pbuf_copy_partial+0x20>
    }
  }
  return copied_total;
}
 800a758:	4630      	mov	r0, r6
 800a75a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800a75e:	4b0a      	ldr	r3, [pc, #40]	; (800a788 <pbuf_copy_partial+0x90>)
 800a760:	f240 420a 	movw	r2, #1034	; 0x40a
 800a764:	4909      	ldr	r1, [pc, #36]	; (800a78c <pbuf_copy_partial+0x94>)
 800a766:	462e      	mov	r6, r5
 800a768:	4809      	ldr	r0, [pc, #36]	; (800a790 <pbuf_copy_partial+0x98>)
 800a76a:	f006 ff49 	bl	8011600 <iprintf>
 800a76e:	e7f3      	b.n	800a758 <pbuf_copy_partial+0x60>
  u16_t left = 0;
 800a770:	4616      	mov	r6, r2
 800a772:	e7f1      	b.n	800a758 <pbuf_copy_partial+0x60>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800a774:	4b04      	ldr	r3, [pc, #16]	; (800a788 <pbuf_copy_partial+0x90>)
 800a776:	f240 420b 	movw	r2, #1035	; 0x40b
 800a77a:	4906      	ldr	r1, [pc, #24]	; (800a794 <pbuf_copy_partial+0x9c>)
 800a77c:	463e      	mov	r6, r7
 800a77e:	4804      	ldr	r0, [pc, #16]	; (800a790 <pbuf_copy_partial+0x98>)
 800a780:	f006 ff3e 	bl	8011600 <iprintf>
 800a784:	e7e8      	b.n	800a758 <pbuf_copy_partial+0x60>
 800a786:	bf00      	nop
 800a788:	080134cc 	.word	0x080134cc
 800a78c:	08013714 	.word	0x08013714
 800a790:	080124d0 	.word	0x080124d0
 800a794:	08013734 	.word	0x08013734

0800a798 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800a798:	b538      	push	{r3, r4, r5, lr}
 800a79a:	4615      	mov	r5, r2
 800a79c:	460a      	mov	r2, r1
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800a79e:	8929      	ldrh	r1, [r5, #8]
 800a7a0:	f7ff fdec 	bl	800a37c <pbuf_alloc>
  if (q == NULL) {
 800a7a4:	4604      	mov	r4, r0
 800a7a6:	b138      	cbz	r0, 800a7b8 <pbuf_clone+0x20>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800a7a8:	8902      	ldrh	r2, [r0, #8]
 800a7aa:	892b      	ldrh	r3, [r5, #8]
 800a7ac:	429a      	cmp	r2, r3
 800a7ae:	d305      	bcc.n	800a7bc <pbuf_clone+0x24>
 800a7b0:	4629      	mov	r1, r5
 800a7b2:	f7ff fbf1 	bl	8009f98 <pbuf_copy.part.0>
    return NULL;
  }
  err = pbuf_copy(q, p);
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800a7b6:	b940      	cbnz	r0, 800a7ca <pbuf_clone+0x32>
  return q;
}
 800a7b8:	4620      	mov	r0, r4
 800a7ba:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800a7bc:	4b07      	ldr	r3, [pc, #28]	; (800a7dc <pbuf_clone+0x44>)
 800a7be:	f240 32c9 	movw	r2, #969	; 0x3c9
 800a7c2:	4907      	ldr	r1, [pc, #28]	; (800a7e0 <pbuf_clone+0x48>)
 800a7c4:	4807      	ldr	r0, [pc, #28]	; (800a7e4 <pbuf_clone+0x4c>)
 800a7c6:	f006 ff1b 	bl	8011600 <iprintf>
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800a7ca:	4b04      	ldr	r3, [pc, #16]	; (800a7dc <pbuf_clone+0x44>)
 800a7cc:	f240 5224 	movw	r2, #1316	; 0x524
 800a7d0:	4905      	ldr	r1, [pc, #20]	; (800a7e8 <pbuf_clone+0x50>)
 800a7d2:	4804      	ldr	r0, [pc, #16]	; (800a7e4 <pbuf_clone+0x4c>)
 800a7d4:	f006 ff14 	bl	8011600 <iprintf>
}
 800a7d8:	4620      	mov	r0, r4
 800a7da:	bd38      	pop	{r3, r4, r5, pc}
 800a7dc:	080134cc 	.word	0x080134cc
 800a7e0:	080136e4 	.word	0x080136e4
 800a7e4:	080124d0 	.word	0x080124d0
 800a7e8:	08013758 	.word	0x08013758

0800a7ec <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800a7ec:	b4f0      	push	{r4, r5, r6, r7}
 800a7ee:	4f14      	ldr	r7, [pc, #80]	; (800a840 <tcp_new_port+0x54>)
 800a7f0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800a7f4:	4e13      	ldr	r6, [pc, #76]	; (800a844 <tcp_new_port+0x58>)
  u16_t n = 0;
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800a7f6:	f64f 7cff 	movw	ip, #65535	; 0xffff
 800a7fa:	8839      	ldrh	r1, [r7, #0]
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800a7fc:	4d12      	ldr	r5, [pc, #72]	; (800a848 <tcp_new_port+0x5c>)
  tcp_port++;
 800a7fe:	3101      	adds	r1, #1
 800a800:	4c12      	ldr	r4, [pc, #72]	; (800a84c <tcp_new_port+0x60>)
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800a802:	462b      	mov	r3, r5
  tcp_port++;
 800a804:	b289      	uxth	r1, r1
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800a806:	4561      	cmp	r1, ip
 800a808:	bf08      	it	eq
 800a80a:	f44f 4140 	moveq.w	r1, #49152	; 0xc000
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	b913      	cbnz	r3, 800a818 <tcp_new_port+0x2c>
 800a812:	e00b      	b.n	800a82c <tcp_new_port+0x40>
 800a814:	68db      	ldr	r3, [r3, #12]
 800a816:	b14b      	cbz	r3, 800a82c <tcp_new_port+0x40>
      if (pcb->local_port == tcp_port) {
 800a818:	8ada      	ldrh	r2, [r3, #22]
 800a81a:	428a      	cmp	r2, r1
 800a81c:	d1fa      	bne.n	800a814 <tcp_new_port+0x28>
        n++;
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800a81e:	3801      	subs	r0, #1
 800a820:	b280      	uxth	r0, r0
 800a822:	2800      	cmp	r0, #0
 800a824:	d1eb      	bne.n	800a7fe <tcp_new_port+0x12>
 800a826:	8039      	strh	r1, [r7, #0]
        goto again;
      }
    }
  }
  return tcp_port;
}
 800a828:	bcf0      	pop	{r4, r5, r6, r7}
 800a82a:	4770      	bx	lr
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800a82c:	42a6      	cmp	r6, r4
 800a82e:	d002      	beq.n	800a836 <tcp_new_port+0x4a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800a830:	f854 3f04 	ldr.w	r3, [r4, #4]!
 800a834:	e7eb      	b.n	800a80e <tcp_new_port+0x22>
 800a836:	4608      	mov	r0, r1
 800a838:	8039      	strh	r1, [r7, #0]
}
 800a83a:	bcf0      	pop	{r4, r5, r6, r7}
 800a83c:	4770      	bx	lr
 800a83e:	bf00      	nop
 800a840:	2400002c 	.word	0x2400002c
 800a844:	08013df4 	.word	0x08013df4
 800a848:	2400e658 	.word	0x2400e658
 800a84c:	08013de8 	.word	0x08013de8

0800a850 <tcp_close_shutdown_fin>:
{
 800a850:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a852:	4604      	mov	r4, r0
 800a854:	b308      	cbz	r0, 800a89a <tcp_close_shutdown_fin+0x4a>
  switch (pcb->state) {
 800a856:	7d23      	ldrb	r3, [r4, #20]
 800a858:	2b04      	cmp	r3, #4
 800a85a:	d005      	beq.n	800a868 <tcp_close_shutdown_fin+0x18>
 800a85c:	2b07      	cmp	r3, #7
 800a85e:	d00e      	beq.n	800a87e <tcp_close_shutdown_fin+0x2e>
 800a860:	2b03      	cmp	r3, #3
 800a862:	d001      	beq.n	800a868 <tcp_close_shutdown_fin+0x18>
 800a864:	2000      	movs	r0, #0
}
 800a866:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 800a868:	4620      	mov	r0, r4
 800a86a:	f003 fc4b 	bl	800e104 <tcp_send_fin>
      if (err == ERR_OK) {
 800a86e:	b950      	cbnz	r0, 800a886 <tcp_close_shutdown_fin+0x36>
  if (err == ERR_OK) {
 800a870:	2305      	movs	r3, #5
    tcp_output(pcb);
 800a872:	4620      	mov	r0, r4
        pcb->state = LAST_ACK;
 800a874:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 800a876:	f003 fdb5 	bl	800e3e4 <tcp_output>
 800a87a:	2000      	movs	r0, #0
}
 800a87c:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 800a87e:	4620      	mov	r0, r4
 800a880:	f003 fc40 	bl	800e104 <tcp_send_fin>
      if (err == ERR_OK) {
 800a884:	b138      	cbz	r0, 800a896 <tcp_close_shutdown_fin+0x46>
  } else if (err == ERR_MEM) {
 800a886:	1c43      	adds	r3, r0, #1
 800a888:	d1ed      	bne.n	800a866 <tcp_close_shutdown_fin+0x16>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800a88a:	8b63      	ldrh	r3, [r4, #26]
    return ERR_OK;
 800a88c:	2000      	movs	r0, #0
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800a88e:	f043 0308 	orr.w	r3, r3, #8
 800a892:	8363      	strh	r3, [r4, #26]
}
 800a894:	bd10      	pop	{r4, pc}
 800a896:	2309      	movs	r3, #9
 800a898:	e7eb      	b.n	800a872 <tcp_close_shutdown_fin+0x22>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a89a:	4b04      	ldr	r3, [pc, #16]	; (800a8ac <tcp_close_shutdown_fin+0x5c>)
 800a89c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800a8a0:	4903      	ldr	r1, [pc, #12]	; (800a8b0 <tcp_close_shutdown_fin+0x60>)
 800a8a2:	4804      	ldr	r0, [pc, #16]	; (800a8b4 <tcp_close_shutdown_fin+0x64>)
 800a8a4:	f006 feac 	bl	8011600 <iprintf>
 800a8a8:	e7d5      	b.n	800a856 <tcp_close_shutdown_fin+0x6>
 800a8aa:	bf00      	nop
 800a8ac:	0801376c 	.word	0x0801376c
 800a8b0:	0801379c 	.word	0x0801379c
 800a8b4:	080124d0 	.word	0x080124d0

0800a8b8 <tcp_init>:
{
 800a8b8:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800a8ba:	f006 fd8f 	bl	80113dc <rand>
 800a8be:	4b02      	ldr	r3, [pc, #8]	; (800a8c8 <tcp_init+0x10>)
 800a8c0:	4a02      	ldr	r2, [pc, #8]	; (800a8cc <tcp_init+0x14>)
 800a8c2:	4303      	orrs	r3, r0
 800a8c4:	8013      	strh	r3, [r2, #0]
}
 800a8c6:	bd08      	pop	{r3, pc}
 800a8c8:	ffffc000 	.word	0xffffc000
 800a8cc:	2400002c 	.word	0x2400002c

0800a8d0 <tcp_free>:
{
 800a8d0:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a8d2:	7d03      	ldrb	r3, [r0, #20]
{
 800a8d4:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a8d6:	2b01      	cmp	r3, #1
 800a8d8:	d005      	beq.n	800a8e6 <tcp_free+0x16>
  memp_free(MEMP_TCP_PCB, pcb);
 800a8da:	4621      	mov	r1, r4
 800a8dc:	2001      	movs	r0, #1
}
 800a8de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 800a8e2:	f7ff b94d 	b.w	8009b80 <memp_free>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a8e6:	4906      	ldr	r1, [pc, #24]	; (800a900 <tcp_free+0x30>)
 800a8e8:	22d4      	movs	r2, #212	; 0xd4
 800a8ea:	4b06      	ldr	r3, [pc, #24]	; (800a904 <tcp_free+0x34>)
 800a8ec:	4806      	ldr	r0, [pc, #24]	; (800a908 <tcp_free+0x38>)
 800a8ee:	f006 fe87 	bl	8011600 <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 800a8f2:	4621      	mov	r1, r4
 800a8f4:	2001      	movs	r0, #1
}
 800a8f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 800a8fa:	f7ff b941 	b.w	8009b80 <memp_free>
 800a8fe:	bf00      	nop
 800a900:	080137a8 	.word	0x080137a8
 800a904:	0801376c 	.word	0x0801376c
 800a908:	080124d0 	.word	0x080124d0

0800a90c <tcp_bind>:
    ipaddr = IP4_ADDR_ANY;
 800a90c:	2900      	cmp	r1, #0
{
 800a90e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 800a910:	4b26      	ldr	r3, [pc, #152]	; (800a9ac <tcp_bind+0xa0>)
  if (ipaddr == NULL) {
 800a912:	460e      	mov	r6, r1
    ipaddr = IP4_ADDR_ANY;
 800a914:	bf14      	ite	ne
 800a916:	460e      	movne	r6, r1
 800a918:	461e      	moveq	r6, r3
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800a91a:	2800      	cmp	r0, #0
 800a91c:	d03b      	beq.n	800a996 <tcp_bind+0x8a>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800a91e:	7d03      	ldrb	r3, [r0, #20]
 800a920:	4607      	mov	r7, r0
 800a922:	bb73      	cbnz	r3, 800a982 <tcp_bind+0x76>
  if (port == 0) {
 800a924:	b1d2      	cbz	r2, 800a95c <tcp_bind+0x50>
 800a926:	4922      	ldr	r1, [pc, #136]	; (800a9b0 <tcp_bind+0xa4>)
 800a928:	4b22      	ldr	r3, [pc, #136]	; (800a9b4 <tcp_bind+0xa8>)
 800a92a:	f101 000c 	add.w	r0, r1, #12
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	b913      	cbnz	r3, 800a938 <tcp_bind+0x2c>
 800a932:	e00e      	b.n	800a952 <tcp_bind+0x46>
 800a934:	68db      	ldr	r3, [r3, #12]
 800a936:	b163      	cbz	r3, 800a952 <tcp_bind+0x46>
        if (cpcb->local_port == port) {
 800a938:	f8b3 c016 	ldrh.w	ip, [r3, #22]
 800a93c:	4594      	cmp	ip, r2
 800a93e:	d1f9      	bne.n	800a934 <tcp_bind+0x28>
                (ip_addr_isany(&cpcb->local_ip) ||
 800a940:	681c      	ldr	r4, [r3, #0]
 800a942:	b11c      	cbz	r4, 800a94c <tcp_bind+0x40>
                 ip_addr_isany(ipaddr) ||
 800a944:	6835      	ldr	r5, [r6, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800a946:	b10d      	cbz	r5, 800a94c <tcp_bind+0x40>
 800a948:	42ac      	cmp	r4, r5
 800a94a:	d1f3      	bne.n	800a934 <tcp_bind+0x28>
              return ERR_USE;
 800a94c:	f06f 0007 	mvn.w	r0, #7
}
 800a950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < max_pcb_list; i++) {
 800a952:	4281      	cmp	r1, r0
 800a954:	d006      	beq.n	800a964 <tcp_bind+0x58>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800a956:	f851 3f04 	ldr.w	r3, [r1, #4]!
 800a95a:	e7e8      	b.n	800a92e <tcp_bind+0x22>
    port = tcp_new_port();
 800a95c:	f7ff ff46 	bl	800a7ec <tcp_new_port>
    if (port == 0) {
 800a960:	4602      	mov	r2, r0
 800a962:	b158      	cbz	r0, 800a97c <tcp_bind+0x70>
  if (!ip_addr_isany(ipaddr)
 800a964:	6833      	ldr	r3, [r6, #0]
 800a966:	b103      	cbz	r3, 800a96a <tcp_bind+0x5e>
    ip_addr_set(&pcb->local_ip, ipaddr);
 800a968:	603b      	str	r3, [r7, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800a96a:	4b13      	ldr	r3, [pc, #76]	; (800a9b8 <tcp_bind+0xac>)
  pcb->local_port = port;
 800a96c:	82fa      	strh	r2, [r7, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800a96e:	681a      	ldr	r2, [r3, #0]
 800a970:	601f      	str	r7, [r3, #0]
 800a972:	60fa      	str	r2, [r7, #12]
 800a974:	f004 f856 	bl	800ea24 <tcp_timer_needed>
  return ERR_OK;
 800a978:	2000      	movs	r0, #0
}
 800a97a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return ERR_BUF;
 800a97c:	f06f 0001 	mvn.w	r0, #1
}
 800a980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800a982:	4b0e      	ldr	r3, [pc, #56]	; (800a9bc <tcp_bind+0xb0>)
 800a984:	f240 22ab 	movw	r2, #683	; 0x2ab
 800a988:	490d      	ldr	r1, [pc, #52]	; (800a9c0 <tcp_bind+0xb4>)
 800a98a:	480e      	ldr	r0, [pc, #56]	; (800a9c4 <tcp_bind+0xb8>)
 800a98c:	f006 fe38 	bl	8011600 <iprintf>
 800a990:	f06f 0005 	mvn.w	r0, #5
}
 800a994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800a996:	4b09      	ldr	r3, [pc, #36]	; (800a9bc <tcp_bind+0xb0>)
 800a998:	f240 22a9 	movw	r2, #681	; 0x2a9
 800a99c:	490a      	ldr	r1, [pc, #40]	; (800a9c8 <tcp_bind+0xbc>)
 800a99e:	4809      	ldr	r0, [pc, #36]	; (800a9c4 <tcp_bind+0xb8>)
 800a9a0:	f006 fe2e 	bl	8011600 <iprintf>
 800a9a4:	f06f 000f 	mvn.w	r0, #15
}
 800a9a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9aa:	bf00      	nop
 800a9ac:	08014f0c 	.word	0x08014f0c
 800a9b0:	08013de8 	.word	0x08013de8
 800a9b4:	2400e658 	.word	0x2400e658
 800a9b8:	2400e654 	.word	0x2400e654
 800a9bc:	0801376c 	.word	0x0801376c
 800a9c0:	080137d4 	.word	0x080137d4
 800a9c4:	080124d0 	.word	0x080124d0
 800a9c8:	080137bc 	.word	0x080137bc

0800a9cc <tcp_listen_with_backlog_and_err>:
{
 800a9cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800a9ce:	4604      	mov	r4, r0
{
 800a9d0:	4617      	mov	r7, r2
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800a9d2:	2800      	cmp	r0, #0
 800a9d4:	d05d      	beq.n	800aa92 <tcp_listen_with_backlog_and_err+0xc6>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800a9d6:	7d05      	ldrb	r5, [r0, #20]
 800a9d8:	2d00      	cmp	r5, #0
 800a9da:	d147      	bne.n	800aa6c <tcp_listen_with_backlog_and_err+0xa0>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800a9dc:	2002      	movs	r0, #2
 800a9de:	f7ff f889 	bl	8009af4 <memp_malloc>
  if (lpcb == NULL) {
 800a9e2:	4606      	mov	r6, r0
 800a9e4:	2800      	cmp	r0, #0
 800a9e6:	d051      	beq.n	800aa8c <tcp_listen_with_backlog_and_err+0xc0>
  lpcb->callback_arg = pcb->callback_arg;
 800a9e8:	6923      	ldr	r3, [r4, #16]
  lpcb->state = LISTEN;
 800a9ea:	2201      	movs	r2, #1
  lpcb->callback_arg = pcb->callback_arg;
 800a9ec:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 800a9ee:	8ae3      	ldrh	r3, [r4, #22]
  lpcb->state = LISTEN;
 800a9f0:	7502      	strb	r2, [r0, #20]
  lpcb->local_port = pcb->local_port;
 800a9f2:	82c3      	strh	r3, [r0, #22]
  lpcb->prio = pcb->prio;
 800a9f4:	7d62      	ldrb	r2, [r4, #21]
 800a9f6:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 800a9f8:	7a62      	ldrb	r2, [r4, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800a9fa:	7205      	strb	r5, [r0, #8]
  lpcb->so_options = pcb->so_options;
 800a9fc:	7242      	strb	r2, [r0, #9]
  lpcb->ttl = pcb->ttl;
 800a9fe:	7ae2      	ldrb	r2, [r4, #11]
 800aa00:	72c2      	strb	r2, [r0, #11]
  lpcb->tos = pcb->tos;
 800aa02:	7aa2      	ldrb	r2, [r4, #10]
 800aa04:	7282      	strb	r2, [r0, #10]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800aa06:	6822      	ldr	r2, [r4, #0]
 800aa08:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 800aa0a:	b99b      	cbnz	r3, 800aa34 <tcp_listen_with_backlog_and_err+0x68>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800aa0c:	7d23      	ldrb	r3, [r4, #20]
 800aa0e:	2b01      	cmp	r3, #1
 800aa10:	d020      	beq.n	800aa54 <tcp_listen_with_backlog_and_err+0x88>
  memp_free(MEMP_TCP_PCB, pcb);
 800aa12:	4621      	mov	r1, r4
 800aa14:	2001      	movs	r0, #1
 800aa16:	f7ff f8b3 	bl	8009b80 <memp_free>
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800aa1a:	4b23      	ldr	r3, [pc, #140]	; (800aaa8 <tcp_listen_with_backlog_and_err+0xdc>)
  lpcb->accept = tcp_accept_null;
 800aa1c:	4923      	ldr	r1, [pc, #140]	; (800aaac <tcp_listen_with_backlog_and_err+0xe0>)
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800aa1e:	681a      	ldr	r2, [r3, #0]
  lpcb->accept = tcp_accept_null;
 800aa20:	61b1      	str	r1, [r6, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800aa22:	60f2      	str	r2, [r6, #12]
 800aa24:	601e      	str	r6, [r3, #0]
 800aa26:	f003 fffd 	bl	800ea24 <tcp_timer_needed>
  res = ERR_OK;
 800aa2a:	2300      	movs	r3, #0
  if (err != NULL) {
 800aa2c:	b107      	cbz	r7, 800aa30 <tcp_listen_with_backlog_and_err+0x64>
    *err = res;
 800aa2e:	703b      	strb	r3, [r7, #0]
}
 800aa30:	4630      	mov	r0, r6
 800aa32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800aa34:	4a1e      	ldr	r2, [pc, #120]	; (800aab0 <tcp_listen_with_backlog_and_err+0xe4>)
 800aa36:	6813      	ldr	r3, [r2, #0]
 800aa38:	42a3      	cmp	r3, r4
 800aa3a:	d012      	beq.n	800aa62 <tcp_listen_with_backlog_and_err+0x96>
 800aa3c:	b12b      	cbz	r3, 800aa4a <tcp_listen_with_backlog_and_err+0x7e>
 800aa3e:	68d9      	ldr	r1, [r3, #12]
 800aa40:	42a1      	cmp	r1, r4
 800aa42:	d01e      	beq.n	800aa82 <tcp_listen_with_backlog_and_err+0xb6>
 800aa44:	460b      	mov	r3, r1
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d1f9      	bne.n	800aa3e <tcp_listen_with_backlog_and_err+0x72>
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	60e3      	str	r3, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800aa4e:	7d23      	ldrb	r3, [r4, #20]
 800aa50:	2b01      	cmp	r3, #1
 800aa52:	d1de      	bne.n	800aa12 <tcp_listen_with_backlog_and_err+0x46>
 800aa54:	4b17      	ldr	r3, [pc, #92]	; (800aab4 <tcp_listen_with_backlog_and_err+0xe8>)
 800aa56:	22d4      	movs	r2, #212	; 0xd4
 800aa58:	4917      	ldr	r1, [pc, #92]	; (800aab8 <tcp_listen_with_backlog_and_err+0xec>)
 800aa5a:	4818      	ldr	r0, [pc, #96]	; (800aabc <tcp_listen_with_backlog_and_err+0xf0>)
 800aa5c:	f006 fdd0 	bl	8011600 <iprintf>
 800aa60:	e7d7      	b.n	800aa12 <tcp_listen_with_backlog_and_err+0x46>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800aa62:	68e3      	ldr	r3, [r4, #12]
 800aa64:	6013      	str	r3, [r2, #0]
 800aa66:	2300      	movs	r3, #0
 800aa68:	60e3      	str	r3, [r4, #12]
 800aa6a:	e7f0      	b.n	800aa4e <tcp_listen_with_backlog_and_err+0x82>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800aa6c:	4b11      	ldr	r3, [pc, #68]	; (800aab4 <tcp_listen_with_backlog_and_err+0xe8>)
 800aa6e:	f240 325a 	movw	r2, #858	; 0x35a
 800aa72:	4913      	ldr	r1, [pc, #76]	; (800aac0 <tcp_listen_with_backlog_and_err+0xf4>)
  struct tcp_pcb_listen *lpcb = NULL;
 800aa74:	2600      	movs	r6, #0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800aa76:	4811      	ldr	r0, [pc, #68]	; (800aabc <tcp_listen_with_backlog_and_err+0xf0>)
 800aa78:	f006 fdc2 	bl	8011600 <iprintf>
 800aa7c:	f06f 030e 	mvn.w	r3, #14
 800aa80:	e7d4      	b.n	800aa2c <tcp_listen_with_backlog_and_err+0x60>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800aa82:	68e2      	ldr	r2, [r4, #12]
 800aa84:	60da      	str	r2, [r3, #12]
 800aa86:	2300      	movs	r3, #0
 800aa88:	60e3      	str	r3, [r4, #12]
 800aa8a:	e7e0      	b.n	800aa4e <tcp_listen_with_backlog_and_err+0x82>
    res = ERR_MEM;
 800aa8c:	f04f 33ff 	mov.w	r3, #4294967295
 800aa90:	e7cc      	b.n	800aa2c <tcp_listen_with_backlog_and_err+0x60>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800aa92:	4b08      	ldr	r3, [pc, #32]	; (800aab4 <tcp_listen_with_backlog_and_err+0xe8>)
 800aa94:	f240 3259 	movw	r2, #857	; 0x359
 800aa98:	490a      	ldr	r1, [pc, #40]	; (800aac4 <tcp_listen_with_backlog_and_err+0xf8>)
  struct tcp_pcb_listen *lpcb = NULL;
 800aa9a:	4606      	mov	r6, r0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800aa9c:	4807      	ldr	r0, [pc, #28]	; (800aabc <tcp_listen_with_backlog_and_err+0xf0>)
 800aa9e:	f006 fdaf 	bl	8011600 <iprintf>
 800aaa2:	f06f 030f 	mvn.w	r3, #15
 800aaa6:	e7c1      	b.n	800aa2c <tcp_listen_with_backlog_and_err+0x60>
 800aaa8:	2400e658 	.word	0x2400e658
 800aaac:	0800b5c5 	.word	0x0800b5c5
 800aab0:	2400e654 	.word	0x2400e654
 800aab4:	0801376c 	.word	0x0801376c
 800aab8:	080137a8 	.word	0x080137a8
 800aabc:	080124d0 	.word	0x080124d0
 800aac0:	0801382c 	.word	0x0801382c
 800aac4:	080137fc 	.word	0x080137fc

0800aac8 <tcp_update_rcv_ann_wnd>:
{
 800aac8:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800aaca:	4604      	mov	r4, r0
 800aacc:	b1c0      	cbz	r0, 800ab00 <tcp_update_rcv_ann_wnd+0x38>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800aace:	8d23      	ldrh	r3, [r4, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800aad0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800aad2:	f8b4 c032 	ldrh.w	ip, [r4, #50]	; 0x32
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800aad6:	6a62      	ldr	r2, [r4, #36]	; 0x24
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800aad8:	1a58      	subs	r0, r3, r1
 800aada:	f5bc 6f86 	cmp.w	ip, #1072	; 0x430
 800aade:	4410      	add	r0, r2
 800aae0:	bf94      	ite	ls
 800aae2:	eba0 050c 	subls.w	r5, r0, ip
 800aae6:	f5a0 6586 	subhi.w	r5, r0, #1072	; 0x430
 800aaea:	2d00      	cmp	r5, #0
 800aaec:	db01      	blt.n	800aaf2 <tcp_update_rcv_ann_wnd+0x2a>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800aaee:	8563      	strh	r3, [r4, #42]	; 0x2a
}
 800aaf0:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800aaf2:	1a53      	subs	r3, r2, r1
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	dd0b      	ble.n	800ab10 <tcp_update_rcv_ann_wnd+0x48>
 800aaf8:	2300      	movs	r3, #0
    return 0;
 800aafa:	4618      	mov	r0, r3
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800aafc:	8563      	strh	r3, [r4, #42]	; 0x2a
}
 800aafe:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800ab00:	4b0b      	ldr	r3, [pc, #44]	; (800ab30 <tcp_update_rcv_ann_wnd+0x68>)
 800ab02:	f240 32a6 	movw	r2, #934	; 0x3a6
 800ab06:	490b      	ldr	r1, [pc, #44]	; (800ab34 <tcp_update_rcv_ann_wnd+0x6c>)
 800ab08:	480b      	ldr	r0, [pc, #44]	; (800ab38 <tcp_update_rcv_ann_wnd+0x70>)
 800ab0a:	f006 fd79 	bl	8011600 <iprintf>
 800ab0e:	e7de      	b.n	800aace <tcp_update_rcv_ann_wnd+0x6>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800ab10:	1a8d      	subs	r5, r1, r2
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800ab12:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 800ab16:	d203      	bcs.n	800ab20 <tcp_update_rcv_ann_wnd+0x58>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800ab18:	b2ab      	uxth	r3, r5
    return 0;
 800ab1a:	2000      	movs	r0, #0
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800ab1c:	8563      	strh	r3, [r4, #42]	; 0x2a
}
 800ab1e:	bd38      	pop	{r3, r4, r5, pc}
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800ab20:	4b03      	ldr	r3, [pc, #12]	; (800ab30 <tcp_update_rcv_ann_wnd+0x68>)
 800ab22:	f240 32b6 	movw	r2, #950	; 0x3b6
 800ab26:	4905      	ldr	r1, [pc, #20]	; (800ab3c <tcp_update_rcv_ann_wnd+0x74>)
 800ab28:	4803      	ldr	r0, [pc, #12]	; (800ab38 <tcp_update_rcv_ann_wnd+0x70>)
 800ab2a:	f006 fd69 	bl	8011600 <iprintf>
 800ab2e:	e7f3      	b.n	800ab18 <tcp_update_rcv_ann_wnd+0x50>
 800ab30:	0801376c 	.word	0x0801376c
 800ab34:	08013864 	.word	0x08013864
 800ab38:	080124d0 	.word	0x080124d0
 800ab3c:	08013888 	.word	0x08013888

0800ab40 <tcp_recved>:
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800ab40:	b340      	cbz	r0, 800ab94 <tcp_recved+0x54>
{
 800ab42:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800ab44:	7d03      	ldrb	r3, [r0, #20]
 800ab46:	4605      	mov	r5, r0
 800ab48:	460c      	mov	r4, r1
 800ab4a:	2b01      	cmp	r3, #1
 800ab4c:	d01a      	beq.n	800ab84 <tcp_recved+0x44>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800ab4e:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 800ab50:	1919      	adds	r1, r3, r4
 800ab52:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800ab54:	428b      	cmp	r3, r1
 800ab56:	d802      	bhi.n	800ab5e <tcp_recved+0x1e>
 800ab58:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
 800ab5c:	d901      	bls.n	800ab62 <tcp_recved+0x22>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800ab5e:	f44f 6106 	mov.w	r1, #2144	; 0x860
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800ab62:	4628      	mov	r0, r5
 800ab64:	8529      	strh	r1, [r5, #40]	; 0x28
 800ab66:	f7ff ffaf 	bl	800aac8 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800ab6a:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 800ab6e:	d200      	bcs.n	800ab72 <tcp_recved+0x32>
}
 800ab70:	bd70      	pop	{r4, r5, r6, pc}
    tcp_ack_now(pcb);
 800ab72:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 800ab74:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 800ab76:	f043 0302 	orr.w	r3, r3, #2
 800ab7a:	836b      	strh	r3, [r5, #26]
}
 800ab7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tcp_output(pcb);
 800ab80:	f003 bc30 	b.w	800e3e4 <tcp_output>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800ab84:	4b07      	ldr	r3, [pc, #28]	; (800aba4 <tcp_recved+0x64>)
 800ab86:	f240 32d2 	movw	r2, #978	; 0x3d2
 800ab8a:	4907      	ldr	r1, [pc, #28]	; (800aba8 <tcp_recved+0x68>)
 800ab8c:	4807      	ldr	r0, [pc, #28]	; (800abac <tcp_recved+0x6c>)
 800ab8e:	f006 fd37 	bl	8011600 <iprintf>
 800ab92:	e7dc      	b.n	800ab4e <tcp_recved+0xe>
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800ab94:	4b03      	ldr	r3, [pc, #12]	; (800aba4 <tcp_recved+0x64>)
 800ab96:	f240 32cf 	movw	r2, #975	; 0x3cf
 800ab9a:	4905      	ldr	r1, [pc, #20]	; (800abb0 <tcp_recved+0x70>)
 800ab9c:	4803      	ldr	r0, [pc, #12]	; (800abac <tcp_recved+0x6c>)
 800ab9e:	f006 bd2f 	b.w	8011600 <iprintf>
 800aba2:	bf00      	nop
 800aba4:	0801376c 	.word	0x0801376c
 800aba8:	080138bc 	.word	0x080138bc
 800abac:	080124d0 	.word	0x080124d0
 800abb0:	080138a4 	.word	0x080138a4

0800abb4 <tcp_segs_free>:
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
  while (seg != NULL) {
 800abb4:	b170      	cbz	r0, 800abd4 <tcp_segs_free+0x20>
{
 800abb6:	b538      	push	{r3, r4, r5, lr}
 800abb8:	4604      	mov	r4, r0
void
tcp_seg_free(struct tcp_seg *seg)
{
  if (seg != NULL) {
    if (seg->p != NULL) {
      pbuf_free(seg->p);
 800abba:	4625      	mov	r5, r4
    struct tcp_seg *next = seg->next;
 800abbc:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800abbe:	6868      	ldr	r0, [r5, #4]
 800abc0:	b108      	cbz	r0, 800abc6 <tcp_segs_free+0x12>
      pbuf_free(seg->p);
 800abc2:	f7ff fb6b 	bl	800a29c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800abc6:	4629      	mov	r1, r5
 800abc8:	2003      	movs	r0, #3
 800abca:	f7fe ffd9 	bl	8009b80 <memp_free>
  while (seg != NULL) {
 800abce:	2c00      	cmp	r4, #0
 800abd0:	d1f3      	bne.n	800abba <tcp_segs_free+0x6>
}
 800abd2:	bd38      	pop	{r3, r4, r5, pc}
 800abd4:	4770      	bx	lr
 800abd6:	bf00      	nop

0800abd8 <tcp_seg_free>:
  if (seg != NULL) {
 800abd8:	b158      	cbz	r0, 800abf2 <tcp_seg_free+0x1a>
{
 800abda:	b510      	push	{r4, lr}
 800abdc:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 800abde:	6840      	ldr	r0, [r0, #4]
 800abe0:	b108      	cbz	r0, 800abe6 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 800abe2:	f7ff fb5b 	bl	800a29c <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800abe6:	4621      	mov	r1, r4
 800abe8:	2003      	movs	r0, #3
  }
}
 800abea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 800abee:	f7fe bfc7 	b.w	8009b80 <memp_free>
 800abf2:	4770      	bx	lr

0800abf4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800abf4:	b538      	push	{r3, r4, r5, lr}
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800abf6:	4605      	mov	r5, r0
 800abf8:	b188      	cbz	r0, 800ac1e <tcp_seg_copy+0x2a>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800abfa:	2003      	movs	r0, #3
 800abfc:	f7fe ff7a 	bl	8009af4 <memp_malloc>
  if (cseg == NULL) {
 800ac00:	4604      	mov	r4, r0
 800ac02:	b150      	cbz	r0, 800ac1a <tcp_seg_copy+0x26>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800ac04:	6868      	ldr	r0, [r5, #4]
 800ac06:	6829      	ldr	r1, [r5, #0]
 800ac08:	68aa      	ldr	r2, [r5, #8]
 800ac0a:	68eb      	ldr	r3, [r5, #12]
 800ac0c:	6060      	str	r0, [r4, #4]
 800ac0e:	6021      	str	r1, [r4, #0]
  pbuf_ref(cseg->p);
 800ac10:	6860      	ldr	r0, [r4, #4]
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800ac12:	60a2      	str	r2, [r4, #8]
 800ac14:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
 800ac16:	f7ff fcdb 	bl	800a5d0 <pbuf_ref>
  return cseg;
}
 800ac1a:	4620      	mov	r0, r4
 800ac1c:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800ac1e:	4b04      	ldr	r3, [pc, #16]	; (800ac30 <tcp_seg_copy+0x3c>)
 800ac20:	f240 6282 	movw	r2, #1666	; 0x682
 800ac24:	4903      	ldr	r1, [pc, #12]	; (800ac34 <tcp_seg_copy+0x40>)
 800ac26:	4804      	ldr	r0, [pc, #16]	; (800ac38 <tcp_seg_copy+0x44>)
 800ac28:	f006 fcea 	bl	8011600 <iprintf>
 800ac2c:	e7e5      	b.n	800abfa <tcp_seg_copy+0x6>
 800ac2e:	bf00      	nop
 800ac30:	0801376c 	.word	0x0801376c
 800ac34:	080138e4 	.word	0x080138e4
 800ac38:	080124d0 	.word	0x080124d0

0800ac3c <tcp_arg>:
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800ac3c:	b100      	cbz	r0, 800ac40 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 800ac3e:	6101      	str	r1, [r0, #16]
  }
}
 800ac40:	4770      	bx	lr
 800ac42:	bf00      	nop

0800ac44 <tcp_recv>:
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ac44:	b140      	cbz	r0, 800ac58 <tcp_recv+0x14>
{
 800ac46:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800ac48:	7d03      	ldrb	r3, [r0, #20]
 800ac4a:	4604      	mov	r4, r0
 800ac4c:	460d      	mov	r5, r1
 800ac4e:	2b01      	cmp	r3, #1
 800ac50:	d003      	beq.n	800ac5a <tcp_recv+0x16>
    pcb->recv = recv;
 800ac52:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  }
}
 800ac56:	bd38      	pop	{r3, r4, r5, pc}
 800ac58:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800ac5a:	4b05      	ldr	r3, [pc, #20]	; (800ac70 <tcp_recv+0x2c>)
 800ac5c:	f240 72df 	movw	r2, #2015	; 0x7df
 800ac60:	4904      	ldr	r1, [pc, #16]	; (800ac74 <tcp_recv+0x30>)
 800ac62:	4805      	ldr	r0, [pc, #20]	; (800ac78 <tcp_recv+0x34>)
 800ac64:	f006 fccc 	bl	8011600 <iprintf>
    pcb->recv = recv;
 800ac68:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}
 800ac6c:	bd38      	pop	{r3, r4, r5, pc}
 800ac6e:	bf00      	nop
 800ac70:	0801376c 	.word	0x0801376c
 800ac74:	08013900 	.word	0x08013900
 800ac78:	080124d0 	.word	0x080124d0

0800ac7c <tcp_sent>:
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ac7c:	b140      	cbz	r0, 800ac90 <tcp_sent+0x14>
{
 800ac7e:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800ac80:	7d03      	ldrb	r3, [r0, #20]
 800ac82:	4604      	mov	r4, r0
 800ac84:	460d      	mov	r5, r1
 800ac86:	2b01      	cmp	r3, #1
 800ac88:	d003      	beq.n	800ac92 <tcp_sent+0x16>
    pcb->sent = sent;
 800ac8a:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  }
}
 800ac8e:	bd38      	pop	{r3, r4, r5, pc}
 800ac90:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800ac92:	4b05      	ldr	r3, [pc, #20]	; (800aca8 <tcp_sent+0x2c>)
 800ac94:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800ac98:	4904      	ldr	r1, [pc, #16]	; (800acac <tcp_sent+0x30>)
 800ac9a:	4805      	ldr	r0, [pc, #20]	; (800acb0 <tcp_sent+0x34>)
 800ac9c:	f006 fcb0 	bl	8011600 <iprintf>
    pcb->sent = sent;
 800aca0:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 800aca4:	bd38      	pop	{r3, r4, r5, pc}
 800aca6:	bf00      	nop
 800aca8:	0801376c 	.word	0x0801376c
 800acac:	08013928 	.word	0x08013928
 800acb0:	080124d0 	.word	0x080124d0

0800acb4 <tcp_err>:
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800acb4:	b140      	cbz	r0, 800acc8 <tcp_err+0x14>
{
 800acb6:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800acb8:	7d03      	ldrb	r3, [r0, #20]
 800acba:	4604      	mov	r4, r0
 800acbc:	460d      	mov	r5, r1
 800acbe:	2b01      	cmp	r3, #1
 800acc0:	d003      	beq.n	800acca <tcp_err+0x16>
    pcb->errf = err;
 800acc2:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
  }
}
 800acc6:	bd38      	pop	{r3, r4, r5, pc}
 800acc8:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800acca:	4b05      	ldr	r3, [pc, #20]	; (800ace0 <tcp_err+0x2c>)
 800accc:	f640 020d 	movw	r2, #2061	; 0x80d
 800acd0:	4904      	ldr	r1, [pc, #16]	; (800ace4 <tcp_err+0x30>)
 800acd2:	4805      	ldr	r0, [pc, #20]	; (800ace8 <tcp_err+0x34>)
 800acd4:	f006 fc94 	bl	8011600 <iprintf>
    pcb->errf = err;
 800acd8:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
}
 800acdc:	bd38      	pop	{r3, r4, r5, pc}
 800acde:	bf00      	nop
 800ace0:	0801376c 	.word	0x0801376c
 800ace4:	08013950 	.word	0x08013950
 800ace8:	080124d0 	.word	0x080124d0

0800acec <tcp_accept>:
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800acec:	b118      	cbz	r0, 800acf6 <tcp_accept+0xa>
 800acee:	7d03      	ldrb	r3, [r0, #20]
 800acf0:	2b01      	cmp	r3, #1
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
    lpcb->accept = accept;
 800acf2:	bf08      	it	eq
 800acf4:	6181      	streq	r1, [r0, #24]
  }
}
 800acf6:	4770      	bx	lr

0800acf8 <tcp_poll>:
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800acf8:	b1a8      	cbz	r0, 800ad26 <tcp_poll+0x2e>
{
 800acfa:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800acfc:	7d03      	ldrb	r3, [r0, #20]
 800acfe:	460e      	mov	r6, r1
 800ad00:	4604      	mov	r4, r0
 800ad02:	4615      	mov	r5, r2
 800ad04:	2b01      	cmp	r3, #1
 800ad06:	d003      	beq.n	800ad10 <tcp_poll+0x18>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800ad08:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800ad0c:	7765      	strb	r5, [r4, #29]
}
 800ad0e:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800ad10:	4b08      	ldr	r3, [pc, #32]	; (800ad34 <tcp_poll+0x3c>)
 800ad12:	f640 023e 	movw	r2, #2110	; 0x83e
 800ad16:	4908      	ldr	r1, [pc, #32]	; (800ad38 <tcp_poll+0x40>)
 800ad18:	4808      	ldr	r0, [pc, #32]	; (800ad3c <tcp_poll+0x44>)
 800ad1a:	f006 fc71 	bl	8011600 <iprintf>
  pcb->poll = poll;
 800ad1e:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
  pcb->pollinterval = interval;
 800ad22:	7765      	strb	r5, [r4, #29]
}
 800ad24:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800ad26:	4b03      	ldr	r3, [pc, #12]	; (800ad34 <tcp_poll+0x3c>)
 800ad28:	f640 023d 	movw	r2, #2109	; 0x83d
 800ad2c:	4904      	ldr	r1, [pc, #16]	; (800ad40 <tcp_poll+0x48>)
 800ad2e:	4803      	ldr	r0, [pc, #12]	; (800ad3c <tcp_poll+0x44>)
 800ad30:	f006 bc66 	b.w	8011600 <iprintf>
 800ad34:	0801376c 	.word	0x0801376c
 800ad38:	08013990 	.word	0x08013990
 800ad3c:	080124d0 	.word	0x080124d0
 800ad40:	08013978 	.word	0x08013978

0800ad44 <tcp_pcb_purge>:
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800ad44:	2800      	cmp	r0, #0
 800ad46:	d041      	beq.n	800adcc <tcp_pcb_purge+0x88>
{
 800ad48:	b570      	push	{r4, r5, r6, lr}

  if (pcb->state != CLOSED &&
 800ad4a:	7d03      	ldrb	r3, [r0, #20]
 800ad4c:	4605      	mov	r5, r0
      pcb->state != TIME_WAIT &&
 800ad4e:	2b0a      	cmp	r3, #10
 800ad50:	d001      	beq.n	800ad56 <tcp_pcb_purge+0x12>
 800ad52:	2b01      	cmp	r3, #1
 800ad54:	d800      	bhi.n	800ad58 <tcp_pcb_purge+0x14>
    pcb->unacked = pcb->unsent = NULL;
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
#endif /* TCP_OVERSIZE */
  }
}
 800ad56:	bd70      	pop	{r4, r5, r6, pc}
    if (pcb->refused_data != NULL) {
 800ad58:	6f80      	ldr	r0, [r0, #120]	; 0x78
 800ad5a:	b118      	cbz	r0, 800ad64 <tcp_pcb_purge+0x20>
      pbuf_free(pcb->refused_data);
 800ad5c:	f7ff fa9e 	bl	800a29c <pbuf_free>
      pcb->refused_data = NULL;
 800ad60:	2300      	movs	r3, #0
 800ad62:	67ab      	str	r3, [r5, #120]	; 0x78
    if (pcb->ooseq != NULL) {
 800ad64:	6f6c      	ldr	r4, [r5, #116]	; 0x74
 800ad66:	b164      	cbz	r4, 800ad82 <tcp_pcb_purge+0x3e>
      pbuf_free(seg->p);
 800ad68:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 800ad6a:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800ad6c:	6870      	ldr	r0, [r6, #4]
 800ad6e:	b108      	cbz	r0, 800ad74 <tcp_pcb_purge+0x30>
      pbuf_free(seg->p);
 800ad70:	f7ff fa94 	bl	800a29c <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800ad74:	4631      	mov	r1, r6
 800ad76:	2003      	movs	r0, #3
 800ad78:	f7fe ff02 	bl	8009b80 <memp_free>
  while (seg != NULL) {
 800ad7c:	2c00      	cmp	r4, #0
 800ad7e:	d1f3      	bne.n	800ad68 <tcp_pcb_purge+0x24>
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
  if (pcb->ooseq) {
    tcp_segs_free(pcb->ooseq);
    pcb->ooseq = NULL;
 800ad80:	676c      	str	r4, [r5, #116]	; 0x74
    pcb->rtime = -1;
 800ad82:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tcp_segs_free(pcb->unsent);
 800ad86:	6eec      	ldr	r4, [r5, #108]	; 0x6c
    pcb->rtime = -1;
 800ad88:	862b      	strh	r3, [r5, #48]	; 0x30
  while (seg != NULL) {
 800ad8a:	b15c      	cbz	r4, 800ada4 <tcp_pcb_purge+0x60>
      pbuf_free(seg->p);
 800ad8c:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 800ad8e:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800ad90:	6870      	ldr	r0, [r6, #4]
 800ad92:	b108      	cbz	r0, 800ad98 <tcp_pcb_purge+0x54>
      pbuf_free(seg->p);
 800ad94:	f7ff fa82 	bl	800a29c <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800ad98:	4631      	mov	r1, r6
 800ad9a:	2003      	movs	r0, #3
 800ad9c:	f7fe fef0 	bl	8009b80 <memp_free>
  while (seg != NULL) {
 800ada0:	2c00      	cmp	r4, #0
 800ada2:	d1f3      	bne.n	800ad8c <tcp_pcb_purge+0x48>
    tcp_segs_free(pcb->unacked);
 800ada4:	6f2c      	ldr	r4, [r5, #112]	; 0x70
  while (seg != NULL) {
 800ada6:	b15c      	cbz	r4, 800adc0 <tcp_pcb_purge+0x7c>
      pbuf_free(seg->p);
 800ada8:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 800adaa:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800adac:	6870      	ldr	r0, [r6, #4]
 800adae:	b108      	cbz	r0, 800adb4 <tcp_pcb_purge+0x70>
      pbuf_free(seg->p);
 800adb0:	f7ff fa74 	bl	800a29c <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800adb4:	4631      	mov	r1, r6
 800adb6:	2003      	movs	r0, #3
 800adb8:	f7fe fee2 	bl	8009b80 <memp_free>
  while (seg != NULL) {
 800adbc:	2c00      	cmp	r4, #0
 800adbe:	d1f3      	bne.n	800ada8 <tcp_pcb_purge+0x64>
    pcb->unacked = pcb->unsent = NULL;
 800adc0:	2300      	movs	r3, #0
 800adc2:	e9c5 331b 	strd	r3, r3, [r5, #108]	; 0x6c
    pcb->unsent_oversize = 0;
 800adc6:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
}
 800adca:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800adcc:	4b03      	ldr	r3, [pc, #12]	; (800addc <tcp_pcb_purge+0x98>)
 800adce:	f640 0251 	movw	r2, #2129	; 0x851
 800add2:	4903      	ldr	r1, [pc, #12]	; (800ade0 <tcp_pcb_purge+0x9c>)
 800add4:	4803      	ldr	r0, [pc, #12]	; (800ade4 <tcp_pcb_purge+0xa0>)
 800add6:	f006 bc13 	b.w	8011600 <iprintf>
 800adda:	bf00      	nop
 800addc:	0801376c 	.word	0x0801376c
 800ade0:	080139b0 	.word	0x080139b0
 800ade4:	080124d0 	.word	0x080124d0

0800ade8 <tcp_slowtmr>:
{
 800ade8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 800adec:	4da9      	ldr	r5, [pc, #676]	; (800b094 <tcp_slowtmr+0x2ac>)
{
 800adee:	b087      	sub	sp, #28
  ++tcp_timer_ctr;
 800adf0:	f8df b2cc 	ldr.w	fp, [pc, #716]	; 800b0c0 <tcp_slowtmr+0x2d8>
  ++tcp_ticks;
 800adf4:	682b      	ldr	r3, [r5, #0]
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800adf6:	4fa8      	ldr	r7, [pc, #672]	; (800b098 <tcp_slowtmr+0x2b0>)
  ++tcp_ticks;
 800adf8:	3301      	adds	r3, #1
 800adfa:	602b      	str	r3, [r5, #0]
  ++tcp_timer_ctr;
 800adfc:	f89b 3000 	ldrb.w	r3, [fp]
 800ae00:	3301      	adds	r3, #1
 800ae02:	f88b 3000 	strb.w	r3, [fp]
  pcb = tcp_active_pcbs;
 800ae06:	4ba5      	ldr	r3, [pc, #660]	; (800b09c <tcp_slowtmr+0x2b4>)
 800ae08:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 800ae0a:	2c00      	cmp	r4, #0
 800ae0c:	f000 808a 	beq.w	800af24 <tcp_slowtmr+0x13c>
  prev = NULL;
 800ae10:	2600      	movs	r6, #0
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800ae12:	46b1      	mov	r9, r6
 800ae14:	7d23      	ldrb	r3, [r4, #20]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	f000 80fc 	beq.w	800b014 <tcp_slowtmr+0x22c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800ae1c:	2b01      	cmp	r3, #1
 800ae1e:	f000 8104 	beq.w	800b02a <tcp_slowtmr+0x242>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800ae22:	2b0a      	cmp	r3, #10
 800ae24:	f000 810c 	beq.w	800b040 <tcp_slowtmr+0x258>
    if (pcb->last_timer == tcp_timer_ctr) {
 800ae28:	f89b 2000 	ldrb.w	r2, [fp]
 800ae2c:	7fa3      	ldrb	r3, [r4, #30]
 800ae2e:	4293      	cmp	r3, r2
 800ae30:	f000 8113 	beq.w	800b05a <tcp_slowtmr+0x272>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800ae34:	7d23      	ldrb	r3, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 800ae36:	77a2      	strb	r2, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800ae38:	2b02      	cmp	r3, #2
 800ae3a:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 800ae3e:	f000 8112 	beq.w	800b066 <tcp_slowtmr+0x27e>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800ae42:	2a0b      	cmp	r2, #11
 800ae44:	f240 80cb 	bls.w	800afde <tcp_slowtmr+0x1f6>
      ++pcb_remove;
 800ae48:	f04f 0801 	mov.w	r8, #1
    if (pcb->state == FIN_WAIT_2) {
 800ae4c:	2b06      	cmp	r3, #6
 800ae4e:	f000 80b7 	beq.w	800afc0 <tcp_slowtmr+0x1d8>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ae52:	f894 a009 	ldrb.w	sl, [r4, #9]
 800ae56:	f01a 0a08 	ands.w	sl, sl, #8
 800ae5a:	d01d      	beq.n	800ae98 <tcp_slowtmr+0xb0>
 800ae5c:	2b04      	cmp	r3, #4
 800ae5e:	d007      	beq.n	800ae70 <tcp_slowtmr+0x88>
 800ae60:	f1a3 0307 	sub.w	r3, r3, #7
 800ae64:	fab3 f383 	clz	r3, r3
 800ae68:	095b      	lsrs	r3, r3, #5
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	f000 80b4 	beq.w	800afd8 <tcp_slowtmr+0x1f0>
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800ae70:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800ae74:	4b8a      	ldr	r3, [pc, #552]	; (800b0a0 <tcp_slowtmr+0x2b8>)
 800ae76:	488b      	ldr	r0, [pc, #556]	; (800b0a4 <tcp_slowtmr+0x2bc>)
 800ae78:	440b      	add	r3, r1
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ae7a:	682a      	ldr	r2, [r5, #0]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800ae7c:	fba0 0303 	umull	r0, r3, r0, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ae80:	6a20      	ldr	r0, [r4, #32]
 800ae82:	1a12      	subs	r2, r2, r0
 800ae84:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 800ae88:	f240 8160 	bls.w	800b14c <tcp_slowtmr+0x364>
        ++pcb_remove;
 800ae8c:	f108 0801 	add.w	r8, r8, #1
        ++pcb_reset;
 800ae90:	f04f 0a01 	mov.w	sl, #1
        ++pcb_remove;
 800ae94:	fa5f f888 	uxtb.w	r8, r8
    if (pcb->ooseq != NULL &&
 800ae98:	6f66      	ldr	r6, [r4, #116]	; 0x74
 800ae9a:	b156      	cbz	r6, 800aeb2 <tcp_slowtmr+0xca>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800ae9c:	682b      	ldr	r3, [r5, #0]
 800ae9e:	6a22      	ldr	r2, [r4, #32]
 800aea0:	1a9a      	subs	r2, r3, r2
 800aea2:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 800aea6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 800aeaa:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 800aeae:	f080 80e1 	bcs.w	800b074 <tcp_slowtmr+0x28c>
    if (pcb->state == SYN_RCVD) {
 800aeb2:	7d23      	ldrb	r3, [r4, #20]
 800aeb4:	2b03      	cmp	r3, #3
 800aeb6:	d057      	beq.n	800af68 <tcp_slowtmr+0x180>
    if (pcb->state == LAST_ACK) {
 800aeb8:	2b09      	cmp	r3, #9
 800aeba:	d15a      	bne.n	800af72 <tcp_slowtmr+0x18a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800aebc:	682b      	ldr	r3, [r5, #0]
 800aebe:	6a22      	ldr	r2, [r4, #32]
 800aec0:	1a9b      	subs	r3, r3, r2
 800aec2:	2bf0      	cmp	r3, #240	; 0xf0
 800aec4:	d955      	bls.n	800af72 <tcp_slowtmr+0x18a>
      tcp_pcb_purge(pcb);
 800aec6:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 800aec8:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
      tcp_pcb_purge(pcb);
 800aecc:	f7ff ff3a 	bl	800ad44 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800aed0:	4b72      	ldr	r3, [pc, #456]	; (800b09c <tcp_slowtmr+0x2b4>)
 800aed2:	681b      	ldr	r3, [r3, #0]
      if (prev != NULL) {
 800aed4:	f1b9 0f00 	cmp.w	r9, #0
 800aed8:	f000 817e 	beq.w	800b1d8 <tcp_slowtmr+0x3f0>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800aedc:	42a3      	cmp	r3, r4
 800aede:	f000 81da 	beq.w	800b296 <tcp_slowtmr+0x4ae>
        prev->next = pcb->next;
 800aee2:	68e3      	ldr	r3, [r4, #12]
 800aee4:	f8c9 300c 	str.w	r3, [r9, #12]
      if (pcb_reset) {
 800aee8:	f1ba 0f00 	cmp.w	sl, #0
 800aeec:	f040 8147 	bne.w	800b17e <tcp_slowtmr+0x396>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800aef0:	7d23      	ldrb	r3, [r4, #20]
 800aef2:	2b01      	cmp	r3, #1
      pcb = pcb->next;
 800aef4:	e9d4 8a03 	ldrd	r8, sl, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800aef8:	f000 8153 	beq.w	800b1a2 <tcp_slowtmr+0x3ba>
  memp_free(MEMP_TCP_PCB, pcb);
 800aefc:	4621      	mov	r1, r4
 800aefe:	2001      	movs	r0, #1
 800af00:	f7fe fe3e 	bl	8009b80 <memp_free>
      tcp_active_pcbs_changed = 0;
 800af04:	4c68      	ldr	r4, [pc, #416]	; (800b0a8 <tcp_slowtmr+0x2c0>)
 800af06:	2300      	movs	r3, #0
 800af08:	7023      	strb	r3, [r4, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800af0a:	b13e      	cbz	r6, 800af1c <tcp_slowtmr+0x134>
 800af0c:	f06f 010c 	mvn.w	r1, #12
 800af10:	4650      	mov	r0, sl
 800af12:	47b0      	blx	r6
      if (tcp_active_pcbs_changed) {
 800af14:	7823      	ldrb	r3, [r4, #0]
 800af16:	2b00      	cmp	r3, #0
 800af18:	f47f af75 	bne.w	800ae06 <tcp_slowtmr+0x1e>
      pcb = pcb->next;
 800af1c:	4644      	mov	r4, r8
  while (pcb != NULL) {
 800af1e:	2c00      	cmp	r4, #0
 800af20:	f47f af78 	bne.w	800ae14 <tcp_slowtmr+0x2c>
  pcb = tcp_tw_pcbs;
 800af24:	f8df 919c 	ldr.w	r9, [pc, #412]	; 800b0c4 <tcp_slowtmr+0x2dc>
 800af28:	f8d9 4000 	ldr.w	r4, [r9]
  while (pcb != NULL) {
 800af2c:	b1cc      	cbz	r4, 800af62 <tcp_slowtmr+0x17a>
  prev = NULL;
 800af2e:	2600      	movs	r6, #0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800af30:	f8df 8164 	ldr.w	r8, [pc, #356]	; 800b098 <tcp_slowtmr+0x2b0>
 800af34:	f8df a190 	ldr.w	sl, [pc, #400]	; 800b0c8 <tcp_slowtmr+0x2e0>
 800af38:	4f5c      	ldr	r7, [pc, #368]	; (800b0ac <tcp_slowtmr+0x2c4>)
 800af3a:	7d23      	ldrb	r3, [r4, #20]
 800af3c:	2b0a      	cmp	r3, #10
 800af3e:	d006      	beq.n	800af4e <tcp_slowtmr+0x166>
 800af40:	4643      	mov	r3, r8
 800af42:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800af46:	4651      	mov	r1, sl
 800af48:	4638      	mov	r0, r7
 800af4a:	f006 fb59 	bl	8011600 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800af4e:	682b      	ldr	r3, [r5, #0]
 800af50:	6a22      	ldr	r2, [r4, #32]
 800af52:	1a9b      	subs	r3, r3, r2
 800af54:	2bf0      	cmp	r3, #240	; 0xf0
 800af56:	f200 80d4 	bhi.w	800b102 <tcp_slowtmr+0x31a>
      pcb = pcb->next;
 800af5a:	4626      	mov	r6, r4
 800af5c:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 800af5e:	2c00      	cmp	r4, #0
 800af60:	d1eb      	bne.n	800af3a <tcp_slowtmr+0x152>
}
 800af62:	b007      	add	sp, #28
 800af64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800af68:	682b      	ldr	r3, [r5, #0]
 800af6a:	6a22      	ldr	r2, [r4, #32]
 800af6c:	1a9b      	subs	r3, r3, r2
 800af6e:	2b28      	cmp	r3, #40	; 0x28
 800af70:	d8a9      	bhi.n	800aec6 <tcp_slowtmr+0xde>
    if (pcb_remove) {
 800af72:	f1b8 0f00 	cmp.w	r8, #0
 800af76:	d1a6      	bne.n	800aec6 <tcp_slowtmr+0xde>
      ++prev->polltmr;
 800af78:	7f23      	ldrb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800af7a:	7f62      	ldrb	r2, [r4, #29]
      ++prev->polltmr;
 800af7c:	3301      	adds	r3, #1
      pcb = pcb->next;
 800af7e:	68e6      	ldr	r6, [r4, #12]
      ++prev->polltmr;
 800af80:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 800af82:	429a      	cmp	r2, r3
      ++prev->polltmr;
 800af84:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800af86:	d815      	bhi.n	800afb4 <tcp_slowtmr+0x1cc>
        tcp_active_pcbs_changed = 0;
 800af88:	f8df 911c 	ldr.w	r9, [pc, #284]	; 800b0a8 <tcp_slowtmr+0x2c0>
        TCP_EVENT_POLL(prev, err);
 800af8c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        prev->polltmr = 0;
 800af90:	f884 801c 	strb.w	r8, [r4, #28]
        tcp_active_pcbs_changed = 0;
 800af94:	f889 8000 	strb.w	r8, [r9]
        TCP_EVENT_POLL(prev, err);
 800af98:	2b00      	cmp	r3, #0
 800af9a:	f000 80ce 	beq.w	800b13a <tcp_slowtmr+0x352>
 800af9e:	4621      	mov	r1, r4
 800afa0:	6920      	ldr	r0, [r4, #16]
 800afa2:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 800afa4:	f899 3000 	ldrb.w	r3, [r9]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	f47f af2c 	bne.w	800ae06 <tcp_slowtmr+0x1e>
        if (err == ERR_OK) {
 800afae:	2800      	cmp	r0, #0
 800afb0:	f000 80c3 	beq.w	800b13a <tcp_slowtmr+0x352>
 800afb4:	46a1      	mov	r9, r4
      pcb = pcb->next;
 800afb6:	4634      	mov	r4, r6
  while (pcb != NULL) {
 800afb8:	2c00      	cmp	r4, #0
 800afba:	f47f af2b 	bne.w	800ae14 <tcp_slowtmr+0x2c>
 800afbe:	e7b1      	b.n	800af24 <tcp_slowtmr+0x13c>
      if (pcb->flags & TF_RXCLOSED) {
 800afc0:	8b63      	ldrh	r3, [r4, #26]
 800afc2:	06db      	lsls	r3, r3, #27
 800afc4:	d508      	bpl.n	800afd8 <tcp_slowtmr+0x1f0>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800afc6:	682b      	ldr	r3, [r5, #0]
 800afc8:	6a22      	ldr	r2, [r4, #32]
 800afca:	1a9b      	subs	r3, r3, r2
 800afcc:	2b28      	cmp	r3, #40	; 0x28
 800afce:	d903      	bls.n	800afd8 <tcp_slowtmr+0x1f0>
          ++pcb_remove;
 800afd0:	f108 0801 	add.w	r8, r8, #1
 800afd4:	fa5f f888 	uxtb.w	r8, r8
    pcb_reset = 0;
 800afd8:	f04f 0a00 	mov.w	sl, #0
 800afdc:	e75c      	b.n	800ae98 <tcp_slowtmr+0xb0>
      if (pcb->persist_backoff > 0) {
 800afde:	f894 8099 	ldrb.w	r8, [r4, #153]	; 0x99
 800afe2:	f1b8 0f00 	cmp.w	r8, #0
 800afe6:	d071      	beq.n	800b0cc <tcp_slowtmr+0x2e4>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800afe8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800afea:	b133      	cbz	r3, 800affa <tcp_slowtmr+0x212>
 800afec:	463b      	mov	r3, r7
 800afee:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800aff2:	492f      	ldr	r1, [pc, #188]	; (800b0b0 <tcp_slowtmr+0x2c8>)
 800aff4:	482d      	ldr	r0, [pc, #180]	; (800b0ac <tcp_slowtmr+0x2c4>)
 800aff6:	f006 fb03 	bl	8011600 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800affa:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800affc:	2b00      	cmp	r3, #0
 800affe:	f000 816c 	beq.w	800b2da <tcp_slowtmr+0x4f2>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800b002:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 800b006:	2b0b      	cmp	r3, #11
 800b008:	f240 80d2 	bls.w	800b1b0 <tcp_slowtmr+0x3c8>
    if (pcb->state == FIN_WAIT_2) {
 800b00c:	7d23      	ldrb	r3, [r4, #20]
          ++pcb_remove; /* max probes reached */
 800b00e:	f04f 0801 	mov.w	r8, #1
 800b012:	e71b      	b.n	800ae4c <tcp_slowtmr+0x64>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800b014:	463b      	mov	r3, r7
 800b016:	f240 42be 	movw	r2, #1214	; 0x4be
 800b01a:	4926      	ldr	r1, [pc, #152]	; (800b0b4 <tcp_slowtmr+0x2cc>)
 800b01c:	4823      	ldr	r0, [pc, #140]	; (800b0ac <tcp_slowtmr+0x2c4>)
 800b01e:	f006 faef 	bl	8011600 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800b022:	7d23      	ldrb	r3, [r4, #20]
 800b024:	2b01      	cmp	r3, #1
 800b026:	f47f aefc 	bne.w	800ae22 <tcp_slowtmr+0x3a>
 800b02a:	463b      	mov	r3, r7
 800b02c:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800b030:	4921      	ldr	r1, [pc, #132]	; (800b0b8 <tcp_slowtmr+0x2d0>)
 800b032:	481e      	ldr	r0, [pc, #120]	; (800b0ac <tcp_slowtmr+0x2c4>)
 800b034:	f006 fae4 	bl	8011600 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800b038:	7d23      	ldrb	r3, [r4, #20]
 800b03a:	2b0a      	cmp	r3, #10
 800b03c:	f47f aef4 	bne.w	800ae28 <tcp_slowtmr+0x40>
 800b040:	463b      	mov	r3, r7
 800b042:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800b046:	491d      	ldr	r1, [pc, #116]	; (800b0bc <tcp_slowtmr+0x2d4>)
 800b048:	4818      	ldr	r0, [pc, #96]	; (800b0ac <tcp_slowtmr+0x2c4>)
 800b04a:	f006 fad9 	bl	8011600 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800b04e:	f89b 2000 	ldrb.w	r2, [fp]
 800b052:	7fa3      	ldrb	r3, [r4, #30]
 800b054:	4293      	cmp	r3, r2
 800b056:	f47f aeed 	bne.w	800ae34 <tcp_slowtmr+0x4c>
      continue;
 800b05a:	46a1      	mov	r9, r4
      pcb = pcb->next;
 800b05c:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 800b05e:	2c00      	cmp	r4, #0
 800b060:	f47f aed8 	bne.w	800ae14 <tcp_slowtmr+0x2c>
 800b064:	e75e      	b.n	800af24 <tcp_slowtmr+0x13c>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800b066:	2a05      	cmp	r2, #5
 800b068:	d9b9      	bls.n	800afde <tcp_slowtmr+0x1f6>
    pcb_reset = 0;
 800b06a:	f04f 0a00 	mov.w	sl, #0
      ++pcb_remove;
 800b06e:	f04f 0801 	mov.w	r8, #1
 800b072:	e711      	b.n	800ae98 <tcp_slowtmr+0xb0>
 800b074:	9405      	str	r4, [sp, #20]
      pbuf_free(seg->p);
 800b076:	4634      	mov	r4, r6
    struct tcp_seg *next = seg->next;
 800b078:	6836      	ldr	r6, [r6, #0]
    if (seg->p != NULL) {
 800b07a:	6860      	ldr	r0, [r4, #4]
 800b07c:	b108      	cbz	r0, 800b082 <tcp_slowtmr+0x29a>
      pbuf_free(seg->p);
 800b07e:	f7ff f90d 	bl	800a29c <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800b082:	4621      	mov	r1, r4
 800b084:	2003      	movs	r0, #3
 800b086:	f7fe fd7b 	bl	8009b80 <memp_free>
  while (seg != NULL) {
 800b08a:	2e00      	cmp	r6, #0
 800b08c:	d1f3      	bne.n	800b076 <tcp_slowtmr+0x28e>
    pcb->ooseq = NULL;
 800b08e:	9c05      	ldr	r4, [sp, #20]
 800b090:	6766      	str	r6, [r4, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800b092:	e70e      	b.n	800aeb2 <tcp_slowtmr+0xca>
 800b094:	2400e65c 	.word	0x2400e65c
 800b098:	0801376c 	.word	0x0801376c
 800b09c:	2400e64c 	.word	0x2400e64c
 800b0a0:	000a4cb8 	.word	0x000a4cb8
 800b0a4:	10624dd3 	.word	0x10624dd3
 800b0a8:	2400e650 	.word	0x2400e650
 800b0ac:	080124d0 	.word	0x080124d0
 800b0b0:	08013a54 	.word	0x08013a54
 800b0b4:	080139cc 	.word	0x080139cc
 800b0b8:	080139f8 	.word	0x080139f8
 800b0bc:	08013a24 	.word	0x08013a24
 800b0c0:	2400e661 	.word	0x2400e661
 800b0c4:	2400e664 	.word	0x2400e664
 800b0c8:	08013b18 	.word	0x08013b18
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800b0cc:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 800b0d0:	f647 70fe 	movw	r0, #32766	; 0x7ffe
 800b0d4:	b291      	uxth	r1, r2
 800b0d6:	4281      	cmp	r1, r0
 800b0d8:	d802      	bhi.n	800b0e0 <tcp_slowtmr+0x2f8>
          ++pcb->rtime;
 800b0da:	3101      	adds	r1, #1
 800b0dc:	b20a      	sxth	r2, r1
 800b0de:	8622      	strh	r2, [r4, #48]	; 0x30
        if (pcb->rtime >= pcb->rto) {
 800b0e0:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 800b0e4:	4291      	cmp	r1, r2
 800b0e6:	f73f aeb1 	bgt.w	800ae4c <tcp_slowtmr+0x64>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800b0ea:	4620      	mov	r0, r4
 800b0ec:	f003 f83c 	bl	800e168 <tcp_rexmit_rto_prepare>
 800b0f0:	2800      	cmp	r0, #0
 800b0f2:	f000 809e 	beq.w	800b232 <tcp_slowtmr+0x44a>
 800b0f6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	f000 8096 	beq.w	800b22a <tcp_slowtmr+0x442>
    if (pcb->state == FIN_WAIT_2) {
 800b0fe:	7d23      	ldrb	r3, [r4, #20]
 800b100:	e6a4      	b.n	800ae4c <tcp_slowtmr+0x64>
      tcp_pcb_purge(pcb);
 800b102:	4620      	mov	r0, r4
 800b104:	f7ff fe1e 	bl	800ad44 <tcp_pcb_purge>
      if (prev != NULL) {
 800b108:	2e00      	cmp	r6, #0
 800b10a:	f000 80cc 	beq.w	800b2a6 <tcp_slowtmr+0x4be>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800b10e:	f8d9 3000 	ldr.w	r3, [r9]
 800b112:	42a3      	cmp	r3, r4
 800b114:	f000 80e9 	beq.w	800b2ea <tcp_slowtmr+0x502>
        prev->next = pcb->next;
 800b118:	f8d4 b00c 	ldr.w	fp, [r4, #12]
 800b11c:	f8c6 b00c 	str.w	fp, [r6, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b120:	7d23      	ldrb	r3, [r4, #20]
 800b122:	2b01      	cmp	r3, #1
 800b124:	f000 80d2 	beq.w	800b2cc <tcp_slowtmr+0x4e4>
  memp_free(MEMP_TCP_PCB, pcb);
 800b128:	4621      	mov	r1, r4
      pcb = pcb->next;
 800b12a:	465c      	mov	r4, fp
  memp_free(MEMP_TCP_PCB, pcb);
 800b12c:	2001      	movs	r0, #1
 800b12e:	f7fe fd27 	bl	8009b80 <memp_free>
  while (pcb != NULL) {
 800b132:	2c00      	cmp	r4, #0
 800b134:	f47f af01 	bne.w	800af3a <tcp_slowtmr+0x152>
 800b138:	e713      	b.n	800af62 <tcp_slowtmr+0x17a>
          tcp_output(prev);
 800b13a:	4620      	mov	r0, r4
 800b13c:	46a1      	mov	r9, r4
      pcb = pcb->next;
 800b13e:	4634      	mov	r4, r6
          tcp_output(prev);
 800b140:	f003 f950 	bl	800e3e4 <tcp_output>
  while (pcb != NULL) {
 800b144:	2c00      	cmp	r4, #0
 800b146:	f47f ae65 	bne.w	800ae14 <tcp_slowtmr+0x2c>
 800b14a:	e6eb      	b.n	800af24 <tcp_slowtmr+0x13c>
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800b14c:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
 800b150:	486e      	ldr	r0, [pc, #440]	; (800b30c <tcp_slowtmr+0x524>)
 800b152:	fb00 1103 	mla	r1, r0, r3, r1
                 / TCP_SLOW_INTERVAL) {
 800b156:	4b6e      	ldr	r3, [pc, #440]	; (800b310 <tcp_slowtmr+0x528>)
 800b158:	fba3 3101 	umull	r3, r1, r3, r1
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b15c:	ebb2 1f51 	cmp.w	r2, r1, lsr #5
 800b160:	f67f af3a 	bls.w	800afd8 <tcp_slowtmr+0x1f0>
        err = tcp_keepalive(pcb);
 800b164:	4620      	mov	r0, r4
 800b166:	f003 fb69 	bl	800e83c <tcp_keepalive>
        if (err == ERR_OK) {
 800b16a:	2800      	cmp	r0, #0
 800b16c:	f47f af34 	bne.w	800afd8 <tcp_slowtmr+0x1f0>
          pcb->keep_cnt_sent++;
 800b170:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
    pcb_reset = 0;
 800b174:	4682      	mov	sl, r0
          pcb->keep_cnt_sent++;
 800b176:	3301      	adds	r3, #1
 800b178:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
 800b17c:	e68c      	b.n	800ae98 <tcp_slowtmr+0xb0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b17e:	8b23      	ldrh	r3, [r4, #24]
 800b180:	4620      	mov	r0, r4
 800b182:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b184:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800b186:	9302      	str	r3, [sp, #8]
 800b188:	8ae3      	ldrh	r3, [r4, #22]
 800b18a:	9301      	str	r3, [sp, #4]
 800b18c:	1d23      	adds	r3, r4, #4
 800b18e:	9300      	str	r3, [sp, #0]
 800b190:	4623      	mov	r3, r4
 800b192:	f003 f8ad 	bl	800e2f0 <tcp_rst>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b196:	7d23      	ldrb	r3, [r4, #20]
 800b198:	2b01      	cmp	r3, #1
      pcb = pcb->next;
 800b19a:	e9d4 8a03 	ldrd	r8, sl, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b19e:	f47f aead 	bne.w	800aefc <tcp_slowtmr+0x114>
 800b1a2:	463b      	mov	r3, r7
 800b1a4:	22d4      	movs	r2, #212	; 0xd4
 800b1a6:	495b      	ldr	r1, [pc, #364]	; (800b314 <tcp_slowtmr+0x52c>)
 800b1a8:	485b      	ldr	r0, [pc, #364]	; (800b318 <tcp_slowtmr+0x530>)
 800b1aa:	f006 fa29 	bl	8011600 <iprintf>
 800b1ae:	e6a5      	b.n	800aefc <tcp_slowtmr+0x114>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800b1b0:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 800b1b4:	4a59      	ldr	r2, [pc, #356]	; (800b31c <tcp_slowtmr+0x534>)
 800b1b6:	441a      	add	r2, r3
          if (pcb->persist_cnt < backoff_cnt) {
 800b1b8:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800b1bc:	f812 2c01 	ldrb.w	r2, [r2, #-1]
          if (pcb->persist_cnt < backoff_cnt) {
 800b1c0:	4293      	cmp	r3, r2
 800b1c2:	d216      	bcs.n	800b1f2 <tcp_slowtmr+0x40a>
            pcb->persist_cnt++;
 800b1c4:	3301      	adds	r3, #1
 800b1c6:	b2db      	uxtb	r3, r3
          if (pcb->persist_cnt >= backoff_cnt) {
 800b1c8:	4293      	cmp	r3, r2
            pcb->persist_cnt++;
 800b1ca:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800b1ce:	d210      	bcs.n	800b1f2 <tcp_slowtmr+0x40a>
    if (pcb->state == FIN_WAIT_2) {
 800b1d0:	7d23      	ldrb	r3, [r4, #20]
    pcb_remove = 0;
 800b1d2:	f04f 0800 	mov.w	r8, #0
 800b1d6:	e639      	b.n	800ae4c <tcp_slowtmr+0x64>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800b1d8:	42a3      	cmp	r3, r4
 800b1da:	d006      	beq.n	800b1ea <tcp_slowtmr+0x402>
 800b1dc:	463b      	mov	r3, r7
 800b1de:	f240 5271 	movw	r2, #1393	; 0x571
 800b1e2:	494f      	ldr	r1, [pc, #316]	; (800b320 <tcp_slowtmr+0x538>)
 800b1e4:	484c      	ldr	r0, [pc, #304]	; (800b318 <tcp_slowtmr+0x530>)
 800b1e6:	f006 fa0b 	bl	8011600 <iprintf>
        tcp_active_pcbs = pcb->next;
 800b1ea:	68e3      	ldr	r3, [r4, #12]
 800b1ec:	4a4d      	ldr	r2, [pc, #308]	; (800b324 <tcp_slowtmr+0x53c>)
 800b1ee:	6013      	str	r3, [r2, #0]
 800b1f0:	e67a      	b.n	800aee8 <tcp_slowtmr+0x100>
            if (pcb->snd_wnd == 0) {
 800b1f2:	f8b4 6060 	ldrh.w	r6, [r4, #96]	; 0x60
 800b1f6:	b936      	cbnz	r6, 800b206 <tcp_slowtmr+0x41e>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800b1f8:	4620      	mov	r0, r4
 800b1fa:	f003 fb45 	bl	800e888 <tcp_zero_window_probe>
 800b1fe:	b140      	cbz	r0, 800b212 <tcp_slowtmr+0x42a>
    pcb_remove = 0;
 800b200:	46b0      	mov	r8, r6
    if (pcb->state == FIN_WAIT_2) {
 800b202:	7d23      	ldrb	r3, [r4, #20]
 800b204:	e622      	b.n	800ae4c <tcp_slowtmr+0x64>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800b206:	4631      	mov	r1, r6
 800b208:	4620      	mov	r0, r4
 800b20a:	f002 fdf9 	bl	800de00 <tcp_split_unsent_seg>
 800b20e:	2800      	cmp	r0, #0
 800b210:	d073      	beq.n	800b2fa <tcp_slowtmr+0x512>
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800b212:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
              pcb->persist_cnt = 0;
 800b216:	f04f 0800 	mov.w	r8, #0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800b21a:	2b06      	cmp	r3, #6
              pcb->persist_cnt = 0;
 800b21c:	f884 8098 	strb.w	r8, [r4, #152]	; 0x98
                pcb->persist_backoff++;
 800b220:	bf9c      	itt	ls
 800b222:	3301      	addls	r3, #1
 800b224:	f884 3099 	strbls.w	r3, [r4, #153]	; 0x99
 800b228:	e769      	b.n	800b0fe <tcp_slowtmr+0x316>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800b22a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	f43f af66 	beq.w	800b0fe <tcp_slowtmr+0x316>
            if (pcb->state != SYN_SENT) {
 800b232:	7d23      	ldrb	r3, [r4, #20]
 800b234:	2b02      	cmp	r3, #2
 800b236:	d014      	beq.n	800b262 <tcp_slowtmr+0x47a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800b238:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800b23c:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 800b240:	2a0c      	cmp	r2, #12
 800b242:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 800b246:	bf28      	it	cs
 800b248:	220c      	movcs	r2, #12
 800b24a:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 800b24e:	4936      	ldr	r1, [pc, #216]	; (800b328 <tcp_slowtmr+0x540>)
 800b250:	5c8a      	ldrb	r2, [r1, r2]
 800b252:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800b254:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b258:	4293      	cmp	r3, r2
 800b25a:	bfa8      	it	ge
 800b25c:	4613      	movge	r3, r2
 800b25e:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800b262:	8e63      	ldrh	r3, [r4, #50]	; 0x32
            tcp_rexmit_rto_commit(pcb);
 800b264:	4620      	mov	r0, r4
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800b266:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
            pcb->cwnd = pcb->mss;
 800b26a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800b26e:	005b      	lsls	r3, r3, #1
 800b270:	b29a      	uxth	r2, r3
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800b272:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
            pcb->ssthresh = eff_wnd >> 1;
 800b276:	428b      	cmp	r3, r1
 800b278:	bf28      	it	cs
 800b27a:	460b      	movcs	r3, r1
 800b27c:	085b      	lsrs	r3, r3, #1
 800b27e:	4293      	cmp	r3, r2
 800b280:	bf38      	it	cc
 800b282:	4613      	movcc	r3, r2
 800b284:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            pcb->rtime = 0;
 800b288:	2300      	movs	r3, #0
 800b28a:	8623      	strh	r3, [r4, #48]	; 0x30
            pcb->bytes_acked = 0;
 800b28c:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            tcp_rexmit_rto_commit(pcb);
 800b290:	f003 fa88 	bl	800e7a4 <tcp_rexmit_rto_commit>
 800b294:	e733      	b.n	800b0fe <tcp_slowtmr+0x316>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800b296:	463b      	mov	r3, r7
 800b298:	f240 526d 	movw	r2, #1389	; 0x56d
 800b29c:	4923      	ldr	r1, [pc, #140]	; (800b32c <tcp_slowtmr+0x544>)
 800b29e:	481e      	ldr	r0, [pc, #120]	; (800b318 <tcp_slowtmr+0x530>)
 800b2a0:	f006 f9ae 	bl	8011600 <iprintf>
 800b2a4:	e61d      	b.n	800aee2 <tcp_slowtmr+0xfa>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800b2a6:	f8d9 3000 	ldr.w	r3, [r9]
 800b2aa:	42a3      	cmp	r3, r4
 800b2ac:	d006      	beq.n	800b2bc <tcp_slowtmr+0x4d4>
 800b2ae:	4643      	mov	r3, r8
 800b2b0:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800b2b4:	491e      	ldr	r1, [pc, #120]	; (800b330 <tcp_slowtmr+0x548>)
 800b2b6:	4638      	mov	r0, r7
 800b2b8:	f006 f9a2 	bl	8011600 <iprintf>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b2bc:	7d23      	ldrb	r3, [r4, #20]
        tcp_tw_pcbs = pcb->next;
 800b2be:	f8d4 b00c 	ldr.w	fp, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b2c2:	2b01      	cmp	r3, #1
        tcp_tw_pcbs = pcb->next;
 800b2c4:	f8c9 b000 	str.w	fp, [r9]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b2c8:	f47f af2e 	bne.w	800b128 <tcp_slowtmr+0x340>
 800b2cc:	4643      	mov	r3, r8
 800b2ce:	22d4      	movs	r2, #212	; 0xd4
 800b2d0:	4910      	ldr	r1, [pc, #64]	; (800b314 <tcp_slowtmr+0x52c>)
 800b2d2:	4638      	mov	r0, r7
 800b2d4:	f006 f994 	bl	8011600 <iprintf>
 800b2d8:	e726      	b.n	800b128 <tcp_slowtmr+0x340>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800b2da:	463b      	mov	r3, r7
 800b2dc:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800b2e0:	4914      	ldr	r1, [pc, #80]	; (800b334 <tcp_slowtmr+0x54c>)
 800b2e2:	480d      	ldr	r0, [pc, #52]	; (800b318 <tcp_slowtmr+0x530>)
 800b2e4:	f006 f98c 	bl	8011600 <iprintf>
 800b2e8:	e68b      	b.n	800b002 <tcp_slowtmr+0x21a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800b2ea:	4643      	mov	r3, r8
 800b2ec:	f240 52af 	movw	r2, #1455	; 0x5af
 800b2f0:	4911      	ldr	r1, [pc, #68]	; (800b338 <tcp_slowtmr+0x550>)
 800b2f2:	4638      	mov	r0, r7
 800b2f4:	f006 f984 	bl	8011600 <iprintf>
 800b2f8:	e70e      	b.n	800b118 <tcp_slowtmr+0x330>
                if (tcp_output(pcb) == ERR_OK) {
 800b2fa:	4620      	mov	r0, r4
 800b2fc:	f003 f872 	bl	800e3e4 <tcp_output>
 800b300:	2800      	cmp	r0, #0
 800b302:	d186      	bne.n	800b212 <tcp_slowtmr+0x42a>
    pcb_remove = 0;
 800b304:	4680      	mov	r8, r0
    if (pcb->state == FIN_WAIT_2) {
 800b306:	7d23      	ldrb	r3, [r4, #20]
 800b308:	e5a0      	b.n	800ae4c <tcp_slowtmr+0x64>
 800b30a:	bf00      	nop
 800b30c:	000124f8 	.word	0x000124f8
 800b310:	10624dd3 	.word	0x10624dd3
 800b314:	080137a8 	.word	0x080137a8
 800b318:	080124d0 	.word	0x080124d0
 800b31c:	08013df8 	.word	0x08013df8
 800b320:	08013aec 	.word	0x08013aec
 800b324:	2400e64c 	.word	0x2400e64c
 800b328:	08013dd8 	.word	0x08013dd8
 800b32c:	08013ac0 	.word	0x08013ac0
 800b330:	08013b70 	.word	0x08013b70
 800b334:	08013a88 	.word	0x08013a88
 800b338:	08013b48 	.word	0x08013b48

0800b33c <tcp_pcb_remove>:
{
 800b33c:	b538      	push	{r3, r4, r5, lr}
 800b33e:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800b340:	460c      	mov	r4, r1
 800b342:	2900      	cmp	r1, #0
 800b344:	d04a      	beq.n	800b3dc <tcp_pcb_remove+0xa0>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800b346:	2d00      	cmp	r5, #0
 800b348:	d051      	beq.n	800b3ee <tcp_pcb_remove+0xb2>
  TCP_RMV(pcblist, pcb);
 800b34a:	682b      	ldr	r3, [r5, #0]
 800b34c:	42a3      	cmp	r3, r4
 800b34e:	d032      	beq.n	800b3b6 <tcp_pcb_remove+0x7a>
 800b350:	b12b      	cbz	r3, 800b35e <tcp_pcb_remove+0x22>
 800b352:	68da      	ldr	r2, [r3, #12]
 800b354:	42a2      	cmp	r2, r4
 800b356:	d03e      	beq.n	800b3d6 <tcp_pcb_remove+0x9a>
 800b358:	4613      	mov	r3, r2
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d1f9      	bne.n	800b352 <tcp_pcb_remove+0x16>
 800b35e:	2300      	movs	r3, #0
  tcp_pcb_purge(pcb);
 800b360:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 800b362:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 800b364:	f7ff fcee 	bl	800ad44 <tcp_pcb_purge>
  if ((pcb->state != TIME_WAIT) &&
 800b368:	7d23      	ldrb	r3, [r4, #20]
 800b36a:	2b0a      	cmp	r3, #10
 800b36c:	d02d      	beq.n	800b3ca <tcp_pcb_remove+0x8e>
 800b36e:	2b01      	cmp	r3, #1
 800b370:	d01d      	beq.n	800b3ae <tcp_pcb_remove+0x72>
      (pcb->flags & TF_ACK_DELAY)) {
 800b372:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 800b374:	07da      	lsls	r2, r3, #31
 800b376:	d421      	bmi.n	800b3bc <tcp_pcb_remove+0x80>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800b378:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b37a:	b133      	cbz	r3, 800b38a <tcp_pcb_remove+0x4e>
 800b37c:	4b20      	ldr	r3, [pc, #128]	; (800b400 <tcp_pcb_remove+0xc4>)
 800b37e:	f640 0293 	movw	r2, #2195	; 0x893
 800b382:	4920      	ldr	r1, [pc, #128]	; (800b404 <tcp_pcb_remove+0xc8>)
 800b384:	4820      	ldr	r0, [pc, #128]	; (800b408 <tcp_pcb_remove+0xcc>)
 800b386:	f006 f93b 	bl	8011600 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800b38a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b38c:	b133      	cbz	r3, 800b39c <tcp_pcb_remove+0x60>
 800b38e:	4b1c      	ldr	r3, [pc, #112]	; (800b400 <tcp_pcb_remove+0xc4>)
 800b390:	f640 0294 	movw	r2, #2196	; 0x894
 800b394:	491d      	ldr	r1, [pc, #116]	; (800b40c <tcp_pcb_remove+0xd0>)
 800b396:	481c      	ldr	r0, [pc, #112]	; (800b408 <tcp_pcb_remove+0xcc>)
 800b398:	f006 f932 	bl	8011600 <iprintf>
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800b39c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800b39e:	b133      	cbz	r3, 800b3ae <tcp_pcb_remove+0x72>
 800b3a0:	4b17      	ldr	r3, [pc, #92]	; (800b400 <tcp_pcb_remove+0xc4>)
 800b3a2:	f640 0296 	movw	r2, #2198	; 0x896
 800b3a6:	491a      	ldr	r1, [pc, #104]	; (800b410 <tcp_pcb_remove+0xd4>)
 800b3a8:	4817      	ldr	r0, [pc, #92]	; (800b408 <tcp_pcb_remove+0xcc>)
 800b3aa:	f006 f929 	bl	8011600 <iprintf>
  pcb->state = CLOSED;
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	7523      	strb	r3, [r4, #20]
  pcb->local_port = 0;
 800b3b2:	82e3      	strh	r3, [r4, #22]
}
 800b3b4:	bd38      	pop	{r3, r4, r5, pc}
  TCP_RMV(pcblist, pcb);
 800b3b6:	68e3      	ldr	r3, [r4, #12]
 800b3b8:	602b      	str	r3, [r5, #0]
 800b3ba:	e7d0      	b.n	800b35e <tcp_pcb_remove+0x22>
    tcp_ack_now(pcb);
 800b3bc:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 800b3c0:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 800b3c2:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 800b3c4:	f003 f80e 	bl	800e3e4 <tcp_output>
  if (pcb->state != LISTEN) {
 800b3c8:	7d23      	ldrb	r3, [r4, #20]
 800b3ca:	2b01      	cmp	r3, #1
 800b3cc:	d0ef      	beq.n	800b3ae <tcp_pcb_remove+0x72>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800b3ce:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d1d3      	bne.n	800b37c <tcp_pcb_remove+0x40>
 800b3d4:	e7d9      	b.n	800b38a <tcp_pcb_remove+0x4e>
  TCP_RMV(pcblist, pcb);
 800b3d6:	68e2      	ldr	r2, [r4, #12]
 800b3d8:	60da      	str	r2, [r3, #12]
 800b3da:	e7c0      	b.n	800b35e <tcp_pcb_remove+0x22>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800b3dc:	4b08      	ldr	r3, [pc, #32]	; (800b400 <tcp_pcb_remove+0xc4>)
 800b3de:	f640 0283 	movw	r2, #2179	; 0x883
 800b3e2:	490c      	ldr	r1, [pc, #48]	; (800b414 <tcp_pcb_remove+0xd8>)
 800b3e4:	4808      	ldr	r0, [pc, #32]	; (800b408 <tcp_pcb_remove+0xcc>)
 800b3e6:	f006 f90b 	bl	8011600 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800b3ea:	2d00      	cmp	r5, #0
 800b3ec:	d1ad      	bne.n	800b34a <tcp_pcb_remove+0xe>
 800b3ee:	4b04      	ldr	r3, [pc, #16]	; (800b400 <tcp_pcb_remove+0xc4>)
 800b3f0:	f640 0284 	movw	r2, #2180	; 0x884
 800b3f4:	4908      	ldr	r1, [pc, #32]	; (800b418 <tcp_pcb_remove+0xdc>)
 800b3f6:	4804      	ldr	r0, [pc, #16]	; (800b408 <tcp_pcb_remove+0xcc>)
 800b3f8:	f006 f902 	bl	8011600 <iprintf>
 800b3fc:	e7a5      	b.n	800b34a <tcp_pcb_remove+0xe>
 800b3fe:	bf00      	nop
 800b400:	0801376c 	.word	0x0801376c
 800b404:	08013bd4 	.word	0x08013bd4
 800b408:	080124d0 	.word	0x080124d0
 800b40c:	08013bec 	.word	0x08013bec
 800b410:	08013c08 	.word	0x08013c08
 800b414:	08013b98 	.word	0x08013b98
 800b418:	08013bb4 	.word	0x08013bb4

0800b41c <tcp_abandon>:
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800b41c:	2800      	cmp	r0, #0
 800b41e:	f000 80ad 	beq.w	800b57c <tcp_abandon+0x160>
{
 800b422:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800b426:	7d03      	ldrb	r3, [r0, #20]
{
 800b428:	b087      	sub	sp, #28
 800b42a:	4605      	mov	r5, r0
 800b42c:	460e      	mov	r6, r1
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800b42e:	2b01      	cmp	r3, #1
 800b430:	f000 808b 	beq.w	800b54a <tcp_abandon+0x12e>
  if (pcb->state == TIME_WAIT) {
 800b434:	2b0a      	cmp	r3, #10
 800b436:	f000 8093 	beq.w	800b560 <tcp_abandon+0x144>
    seqno = pcb->snd_nxt;
 800b43a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
    ackno = pcb->rcv_nxt;
 800b43c:	f8d5 b024 	ldr.w	fp, [r5, #36]	; 0x24
    errf = pcb->errf;
 800b440:	f8d5 8090 	ldr.w	r8, [r5, #144]	; 0x90
    errf_arg = pcb->callback_arg;
 800b444:	f8d5 9010 	ldr.w	r9, [r5, #16]
    seqno = pcb->snd_nxt;
 800b448:	9205      	str	r2, [sp, #20]
    if (pcb->state == CLOSED) {
 800b44a:	b96b      	cbnz	r3, 800b468 <tcp_abandon+0x4c>
      if (pcb->local_port != 0) {
 800b44c:	8aef      	ldrh	r7, [r5, #22]
 800b44e:	2f00      	cmp	r7, #0
 800b450:	d052      	beq.n	800b4f8 <tcp_abandon+0xdc>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b452:	4a51      	ldr	r2, [pc, #324]	; (800b598 <tcp_abandon+0x17c>)
 800b454:	6813      	ldr	r3, [r2, #0]
 800b456:	42ab      	cmp	r3, r5
 800b458:	d074      	beq.n	800b544 <tcp_abandon+0x128>
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d050      	beq.n	800b500 <tcp_abandon+0xe4>
 800b45e:	68da      	ldr	r2, [r3, #12]
 800b460:	42aa      	cmp	r2, r5
 800b462:	d04b      	beq.n	800b4fc <tcp_abandon+0xe0>
 800b464:	4613      	mov	r3, r2
 800b466:	e7f8      	b.n	800b45a <tcp_abandon+0x3e>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b468:	4629      	mov	r1, r5
 800b46a:	484c      	ldr	r0, [pc, #304]	; (800b59c <tcp_abandon+0x180>)
      local_port = pcb->local_port;
 800b46c:	8aef      	ldrh	r7, [r5, #22]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b46e:	f7ff ff65 	bl	800b33c <tcp_pcb_remove>
 800b472:	4b4b      	ldr	r3, [pc, #300]	; (800b5a0 <tcp_abandon+0x184>)
 800b474:	2201      	movs	r2, #1
 800b476:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800b478:	6f2c      	ldr	r4, [r5, #112]	; 0x70
 800b47a:	b164      	cbz	r4, 800b496 <tcp_abandon+0x7a>
      pbuf_free(seg->p);
 800b47c:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 800b47e:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800b480:	f8da 0004 	ldr.w	r0, [sl, #4]
 800b484:	b108      	cbz	r0, 800b48a <tcp_abandon+0x6e>
      pbuf_free(seg->p);
 800b486:	f7fe ff09 	bl	800a29c <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800b48a:	4651      	mov	r1, sl
 800b48c:	2003      	movs	r0, #3
 800b48e:	f7fe fb77 	bl	8009b80 <memp_free>
  while (seg != NULL) {
 800b492:	2c00      	cmp	r4, #0
 800b494:	d1f2      	bne.n	800b47c <tcp_abandon+0x60>
    if (pcb->unsent != NULL) {
 800b496:	6eec      	ldr	r4, [r5, #108]	; 0x6c
 800b498:	b164      	cbz	r4, 800b4b4 <tcp_abandon+0x98>
      pbuf_free(seg->p);
 800b49a:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 800b49c:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800b49e:	f8da 0004 	ldr.w	r0, [sl, #4]
 800b4a2:	b108      	cbz	r0, 800b4a8 <tcp_abandon+0x8c>
      pbuf_free(seg->p);
 800b4a4:	f7fe fefa 	bl	800a29c <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800b4a8:	4651      	mov	r1, sl
 800b4aa:	2003      	movs	r0, #3
 800b4ac:	f7fe fb68 	bl	8009b80 <memp_free>
  while (seg != NULL) {
 800b4b0:	2c00      	cmp	r4, #0
 800b4b2:	d1f2      	bne.n	800b49a <tcp_abandon+0x7e>
    if (pcb->ooseq != NULL) {
 800b4b4:	6f6c      	ldr	r4, [r5, #116]	; 0x74
 800b4b6:	b164      	cbz	r4, 800b4d2 <tcp_abandon+0xb6>
      pbuf_free(seg->p);
 800b4b8:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 800b4ba:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800b4bc:	f8da 0004 	ldr.w	r0, [sl, #4]
 800b4c0:	b108      	cbz	r0, 800b4c6 <tcp_abandon+0xaa>
      pbuf_free(seg->p);
 800b4c2:	f7fe feeb 	bl	800a29c <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800b4c6:	4651      	mov	r1, sl
 800b4c8:	2003      	movs	r0, #3
 800b4ca:	f7fe fb59 	bl	8009b80 <memp_free>
  while (seg != NULL) {
 800b4ce:	2c00      	cmp	r4, #0
 800b4d0:	d1f2      	bne.n	800b4b8 <tcp_abandon+0x9c>
    if (send_rst) {
 800b4d2:	b9ce      	cbnz	r6, 800b508 <tcp_abandon+0xec>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b4d4:	7d2b      	ldrb	r3, [r5, #20]
 800b4d6:	2b01      	cmp	r3, #1
 800b4d8:	d024      	beq.n	800b524 <tcp_abandon+0x108>
  memp_free(MEMP_TCP_PCB, pcb);
 800b4da:	4629      	mov	r1, r5
 800b4dc:	2001      	movs	r0, #1
 800b4de:	f7fe fb4f 	bl	8009b80 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800b4e2:	f1b8 0f00 	cmp.w	r8, #0
 800b4e6:	d02a      	beq.n	800b53e <tcp_abandon+0x122>
 800b4e8:	f06f 010c 	mvn.w	r1, #12
 800b4ec:	4648      	mov	r0, r9
 800b4ee:	4643      	mov	r3, r8
}
 800b4f0:	b007      	add	sp, #28
 800b4f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800b4f6:	4718      	bx	r3
    int send_rst = 0;
 800b4f8:	461e      	mov	r6, r3
 800b4fa:	e7bd      	b.n	800b478 <tcp_abandon+0x5c>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b4fc:	68ea      	ldr	r2, [r5, #12]
 800b4fe:	60da      	str	r2, [r3, #12]
 800b500:	2700      	movs	r7, #0
    int send_rst = 0;
 800b502:	463e      	mov	r6, r7
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b504:	60ef      	str	r7, [r5, #12]
 800b506:	e7b7      	b.n	800b478 <tcp_abandon+0x5c>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800b508:	9701      	str	r7, [sp, #4]
 800b50a:	465a      	mov	r2, fp
 800b50c:	8b2b      	ldrh	r3, [r5, #24]
 800b50e:	4628      	mov	r0, r5
 800b510:	9905      	ldr	r1, [sp, #20]
 800b512:	9302      	str	r3, [sp, #8]
 800b514:	1d2b      	adds	r3, r5, #4
 800b516:	9300      	str	r3, [sp, #0]
 800b518:	462b      	mov	r3, r5
 800b51a:	f002 fee9 	bl	800e2f0 <tcp_rst>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b51e:	7d2b      	ldrb	r3, [r5, #20]
 800b520:	2b01      	cmp	r3, #1
 800b522:	d1da      	bne.n	800b4da <tcp_abandon+0xbe>
 800b524:	491f      	ldr	r1, [pc, #124]	; (800b5a4 <tcp_abandon+0x188>)
 800b526:	22d4      	movs	r2, #212	; 0xd4
 800b528:	4b1f      	ldr	r3, [pc, #124]	; (800b5a8 <tcp_abandon+0x18c>)
 800b52a:	4820      	ldr	r0, [pc, #128]	; (800b5ac <tcp_abandon+0x190>)
 800b52c:	f006 f868 	bl	8011600 <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 800b530:	4629      	mov	r1, r5
 800b532:	2001      	movs	r0, #1
 800b534:	f7fe fb24 	bl	8009b80 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800b538:	f1b8 0f00 	cmp.w	r8, #0
 800b53c:	d1d4      	bne.n	800b4e8 <tcp_abandon+0xcc>
}
 800b53e:	b007      	add	sp, #28
 800b540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b544:	68eb      	ldr	r3, [r5, #12]
 800b546:	6013      	str	r3, [r2, #0]
 800b548:	e7da      	b.n	800b500 <tcp_abandon+0xe4>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800b54a:	4b17      	ldr	r3, [pc, #92]	; (800b5a8 <tcp_abandon+0x18c>)
 800b54c:	f44f 7210 	mov.w	r2, #576	; 0x240
 800b550:	4917      	ldr	r1, [pc, #92]	; (800b5b0 <tcp_abandon+0x194>)
 800b552:	4816      	ldr	r0, [pc, #88]	; (800b5ac <tcp_abandon+0x190>)
 800b554:	f006 f854 	bl	8011600 <iprintf>
  if (pcb->state == TIME_WAIT) {
 800b558:	7d2b      	ldrb	r3, [r5, #20]
 800b55a:	2b0a      	cmp	r3, #10
 800b55c:	f47f af6d 	bne.w	800b43a <tcp_abandon+0x1e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800b560:	4629      	mov	r1, r5
 800b562:	4814      	ldr	r0, [pc, #80]	; (800b5b4 <tcp_abandon+0x198>)
 800b564:	f7ff feea 	bl	800b33c <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b568:	7d2b      	ldrb	r3, [r5, #20]
 800b56a:	2b01      	cmp	r3, #1
 800b56c:	d00d      	beq.n	800b58a <tcp_abandon+0x16e>
  memp_free(MEMP_TCP_PCB, pcb);
 800b56e:	4629      	mov	r1, r5
 800b570:	2001      	movs	r0, #1
}
 800b572:	b007      	add	sp, #28
 800b574:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 800b578:	f7fe bb02 	b.w	8009b80 <memp_free>
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800b57c:	4b0a      	ldr	r3, [pc, #40]	; (800b5a8 <tcp_abandon+0x18c>)
 800b57e:	f240 223d 	movw	r2, #573	; 0x23d
 800b582:	490d      	ldr	r1, [pc, #52]	; (800b5b8 <tcp_abandon+0x19c>)
 800b584:	4809      	ldr	r0, [pc, #36]	; (800b5ac <tcp_abandon+0x190>)
 800b586:	f006 b83b 	b.w	8011600 <iprintf>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b58a:	4b07      	ldr	r3, [pc, #28]	; (800b5a8 <tcp_abandon+0x18c>)
 800b58c:	22d4      	movs	r2, #212	; 0xd4
 800b58e:	4905      	ldr	r1, [pc, #20]	; (800b5a4 <tcp_abandon+0x188>)
 800b590:	4806      	ldr	r0, [pc, #24]	; (800b5ac <tcp_abandon+0x190>)
 800b592:	f006 f835 	bl	8011600 <iprintf>
 800b596:	e7ea      	b.n	800b56e <tcp_abandon+0x152>
 800b598:	2400e654 	.word	0x2400e654
 800b59c:	2400e64c 	.word	0x2400e64c
 800b5a0:	2400e650 	.word	0x2400e650
 800b5a4:	080137a8 	.word	0x080137a8
 800b5a8:	0801376c 	.word	0x0801376c
 800b5ac:	080124d0 	.word	0x080124d0
 800b5b0:	08013c3c 	.word	0x08013c3c
 800b5b4:	2400e664 	.word	0x2400e664
 800b5b8:	08013c20 	.word	0x08013c20

0800b5bc <tcp_abort>:
  tcp_abandon(pcb, 1);
 800b5bc:	2101      	movs	r1, #1
 800b5be:	f7ff bf2d 	b.w	800b41c <tcp_abandon>
 800b5c2:	bf00      	nop

0800b5c4 <tcp_accept_null>:
{
 800b5c4:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800b5c6:	460c      	mov	r4, r1
 800b5c8:	b131      	cbz	r1, 800b5d8 <tcp_accept_null+0x14>
  tcp_abandon(pcb, 1);
 800b5ca:	4620      	mov	r0, r4
 800b5cc:	2101      	movs	r1, #1
 800b5ce:	f7ff ff25 	bl	800b41c <tcp_abandon>
}
 800b5d2:	f06f 000c 	mvn.w	r0, #12
 800b5d6:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800b5d8:	4b06      	ldr	r3, [pc, #24]	; (800b5f4 <tcp_accept_null+0x30>)
 800b5da:	f240 320f 	movw	r2, #783	; 0x30f
 800b5de:	4906      	ldr	r1, [pc, #24]	; (800b5f8 <tcp_accept_null+0x34>)
 800b5e0:	4806      	ldr	r0, [pc, #24]	; (800b5fc <tcp_accept_null+0x38>)
 800b5e2:	f006 f80d 	bl	8011600 <iprintf>
  tcp_abandon(pcb, 1);
 800b5e6:	4620      	mov	r0, r4
 800b5e8:	2101      	movs	r1, #1
 800b5ea:	f7ff ff17 	bl	800b41c <tcp_abandon>
}
 800b5ee:	f06f 000c 	mvn.w	r0, #12
 800b5f2:	bd10      	pop	{r4, pc}
 800b5f4:	0801376c 	.word	0x0801376c
 800b5f8:	08013c70 	.word	0x08013c70
 800b5fc:	080124d0 	.word	0x080124d0

0800b600 <tcp_netif_ip_addr_changed_pcblist>:
{
 800b600:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800b602:	4605      	mov	r5, r0
{
 800b604:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800b606:	b178      	cbz	r0, 800b628 <tcp_netif_ip_addr_changed_pcblist+0x28>
  while (pcb != NULL) {
 800b608:	b134      	cbz	r4, 800b618 <tcp_netif_ip_addr_changed_pcblist+0x18>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800b60a:	6822      	ldr	r2, [r4, #0]
 800b60c:	682b      	ldr	r3, [r5, #0]
 800b60e:	429a      	cmp	r2, r3
 800b610:	d003      	beq.n	800b61a <tcp_netif_ip_addr_changed_pcblist+0x1a>
      pcb = pcb->next;
 800b612:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 800b614:	2c00      	cmp	r4, #0
 800b616:	d1f8      	bne.n	800b60a <tcp_netif_ip_addr_changed_pcblist+0xa>
}
 800b618:	bd38      	pop	{r3, r4, r5, pc}
      struct tcp_pcb *next = pcb->next;
 800b61a:	68e3      	ldr	r3, [r4, #12]
  tcp_abandon(pcb, 1);
 800b61c:	4620      	mov	r0, r4
 800b61e:	2101      	movs	r1, #1
      pcb = next;
 800b620:	461c      	mov	r4, r3
  tcp_abandon(pcb, 1);
 800b622:	f7ff fefb 	bl	800b41c <tcp_abandon>
      pcb = next;
 800b626:	e7ef      	b.n	800b608 <tcp_netif_ip_addr_changed_pcblist+0x8>
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800b628:	4b03      	ldr	r3, [pc, #12]	; (800b638 <tcp_netif_ip_addr_changed_pcblist+0x38>)
 800b62a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800b62e:	4903      	ldr	r1, [pc, #12]	; (800b63c <tcp_netif_ip_addr_changed_pcblist+0x3c>)
 800b630:	4803      	ldr	r0, [pc, #12]	; (800b640 <tcp_netif_ip_addr_changed_pcblist+0x40>)
 800b632:	f005 ffe5 	bl	8011600 <iprintf>
 800b636:	e7e7      	b.n	800b608 <tcp_netif_ip_addr_changed_pcblist+0x8>
 800b638:	0801376c 	.word	0x0801376c
 800b63c:	08013c90 	.word	0x08013c90
 800b640:	080124d0 	.word	0x080124d0

0800b644 <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b644:	4b0f      	ldr	r3, [pc, #60]	; (800b684 <tcp_kill_state+0x40>)
 800b646:	6819      	ldr	r1, [r3, #0]
 800b648:	b1d1      	cbz	r1, 800b680 <tcp_kill_state+0x3c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b64a:	4b0f      	ldr	r3, [pc, #60]	; (800b688 <tcp_kill_state+0x44>)
  inactivity = 0;
 800b64c:	2200      	movs	r2, #0
{
 800b64e:	b430      	push	{r4, r5}
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b650:	681d      	ldr	r5, [r3, #0]
  inactive = NULL;
 800b652:	4614      	mov	r4, r2
 800b654:	e001      	b.n	800b65a <tcp_kill_state+0x16>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b656:	68c9      	ldr	r1, [r1, #12]
 800b658:	b159      	cbz	r1, 800b672 <tcp_kill_state+0x2e>
    if (pcb->state == state) {
 800b65a:	7d0b      	ldrb	r3, [r1, #20]
 800b65c:	4283      	cmp	r3, r0
 800b65e:	d1fa      	bne.n	800b656 <tcp_kill_state+0x12>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b660:	6a0b      	ldr	r3, [r1, #32]
 800b662:	1aeb      	subs	r3, r5, r3
 800b664:	4293      	cmp	r3, r2
 800b666:	d3f6      	bcc.n	800b656 <tcp_kill_state+0x12>
 800b668:	460c      	mov	r4, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b66a:	68c9      	ldr	r1, [r1, #12]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b66c:	461a      	mov	r2, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b66e:	2900      	cmp	r1, #0
 800b670:	d1f3      	bne.n	800b65a <tcp_kill_state+0x16>
  if (inactive != NULL) {
 800b672:	b11c      	cbz	r4, 800b67c <tcp_kill_state+0x38>
    tcp_abandon(inactive, 0);
 800b674:	4620      	mov	r0, r4
}
 800b676:	bc30      	pop	{r4, r5}
    tcp_abandon(inactive, 0);
 800b678:	f7ff bed0 	b.w	800b41c <tcp_abandon>
}
 800b67c:	bc30      	pop	{r4, r5}
 800b67e:	4770      	bx	lr
 800b680:	4770      	bx	lr
 800b682:	bf00      	nop
 800b684:	2400e64c 	.word	0x2400e64c
 800b688:	2400e65c 	.word	0x2400e65c

0800b68c <tcp_alloc>:
{
 800b68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b68e:	4605      	mov	r5, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b690:	2001      	movs	r0, #1
 800b692:	f7fe fa2f 	bl	8009af4 <memp_malloc>
  if (pcb == NULL) {
 800b696:	4603      	mov	r3, r0
 800b698:	b320      	cbz	r0, 800b6e4 <tcp_alloc+0x58>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800b69a:	229c      	movs	r2, #156	; 0x9c
 800b69c:	2100      	movs	r1, #0
 800b69e:	4618      	mov	r0, r3
    pcb->snd_buf = TCP_SND_BUF;
 800b6a0:	f44f 6486 	mov.w	r4, #1072	; 0x430
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800b6a4:	f006 f902 	bl	80118ac <memset>
    pcb->last_timer = tcp_timer_ctr;
 800b6a8:	4943      	ldr	r1, [pc, #268]	; (800b7b8 <tcp_alloc+0x12c>)
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800b6aa:	4603      	mov	r3, r0
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800b6ac:	2206      	movs	r2, #6
    pcb->last_timer = tcp_timer_ctr;
 800b6ae:	7809      	ldrb	r1, [r1, #0]
    pcb->tmr = tcp_ticks;
 800b6b0:	4842      	ldr	r0, [pc, #264]	; (800b7bc <tcp_alloc+0x130>)
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800b6b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->tmr = tcp_ticks;
 800b6b6:	6800      	ldr	r0, [r0, #0]
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800b6b8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->last_timer = tcp_timer_ctr;
 800b6ba:	7799      	strb	r1, [r3, #30]
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800b6bc:	4a40      	ldr	r2, [pc, #256]	; (800b7c0 <tcp_alloc+0x134>)
    pcb->recv = tcp_recv_null;
 800b6be:	4941      	ldr	r1, [pc, #260]	; (800b7c4 <tcp_alloc+0x138>)
    pcb->snd_buf = TCP_SND_BUF;
 800b6c0:	f8a3 4064 	strh.w	r4, [r3, #100]	; 0x64
    pcb->tmr = tcp_ticks;
 800b6c4:	6218      	str	r0, [r3, #32]
    pcb->rtime = -1;
 800b6c6:	4c40      	ldr	r4, [pc, #256]	; (800b7c8 <tcp_alloc+0x13c>)
    pcb->cwnd = 1;
 800b6c8:	4840      	ldr	r0, [pc, #256]	; (800b7cc <tcp_alloc+0x140>)
    pcb->recv = tcp_recv_null;
 800b6ca:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800b6ce:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    pcb->ttl = TCP_TTL;
 800b6d2:	22ff      	movs	r2, #255	; 0xff
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800b6d4:	493e      	ldr	r1, [pc, #248]	; (800b7d0 <tcp_alloc+0x144>)
    pcb->cwnd = 1;
 800b6d6:	6498      	str	r0, [r3, #72]	; 0x48
}
 800b6d8:	4618      	mov	r0, r3
    pcb->prio = prio;
 800b6da:	755d      	strb	r5, [r3, #21]
    pcb->rtime = -1;
 800b6dc:	631c      	str	r4, [r3, #48]	; 0x30
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800b6de:	6299      	str	r1, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800b6e0:	72da      	strb	r2, [r3, #11]
}
 800b6e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800b6e4:	4e3b      	ldr	r6, [pc, #236]	; (800b7d4 <tcp_alloc+0x148>)
 800b6e6:	6834      	ldr	r4, [r6, #0]
  while (pcb != NULL) {
 800b6e8:	b15c      	cbz	r4, 800b702 <tcp_alloc+0x76>
    struct tcp_pcb *next = pcb->next;
 800b6ea:	4620      	mov	r0, r4
 800b6ec:	68e4      	ldr	r4, [r4, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 800b6ee:	8b43      	ldrh	r3, [r0, #26]
 800b6f0:	0719      	lsls	r1, r3, #28
 800b6f2:	d5f9      	bpl.n	800b6e8 <tcp_alloc+0x5c>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800b6f4:	f023 0308 	bic.w	r3, r3, #8
 800b6f8:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 800b6fa:	f7ff f8a9 	bl	800a850 <tcp_close_shutdown_fin>
  while (pcb != NULL) {
 800b6fe:	2c00      	cmp	r4, #0
 800b700:	d1f3      	bne.n	800b6ea <tcp_alloc+0x5e>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b702:	4b35      	ldr	r3, [pc, #212]	; (800b7d8 <tcp_alloc+0x14c>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	b193      	cbz	r3, 800b72e <tcp_alloc+0xa2>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b708:	4a2c      	ldr	r2, [pc, #176]	; (800b7bc <tcp_alloc+0x130>)
 800b70a:	4618      	mov	r0, r3
 800b70c:	6a19      	ldr	r1, [r3, #32]
 800b70e:	6814      	ldr	r4, [r2, #0]
 800b710:	1a61      	subs	r1, r4, r1
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b712:	68db      	ldr	r3, [r3, #12]
 800b714:	b143      	cbz	r3, 800b728 <tcp_alloc+0x9c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b716:	6a1a      	ldr	r2, [r3, #32]
 800b718:	1aa2      	subs	r2, r4, r2
 800b71a:	428a      	cmp	r2, r1
 800b71c:	d3f9      	bcc.n	800b712 <tcp_alloc+0x86>
 800b71e:	4618      	mov	r0, r3
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b720:	68db      	ldr	r3, [r3, #12]
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b722:	4611      	mov	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b724:	2b00      	cmp	r3, #0
 800b726:	d1f6      	bne.n	800b716 <tcp_alloc+0x8a>
  tcp_abandon(pcb, 1);
 800b728:	2101      	movs	r1, #1
 800b72a:	f7ff fe77 	bl	800b41c <tcp_abandon>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b72e:	2001      	movs	r0, #1
 800b730:	f7fe f9e0 	bl	8009af4 <memp_malloc>
    if (pcb == NULL) {
 800b734:	4603      	mov	r3, r0
 800b736:	2800      	cmp	r0, #0
 800b738:	d1af      	bne.n	800b69a <tcp_alloc+0xe>
      tcp_kill_state(LAST_ACK);
 800b73a:	2009      	movs	r0, #9
 800b73c:	f7ff ff82 	bl	800b644 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b740:	2001      	movs	r0, #1
 800b742:	f7fe f9d7 	bl	8009af4 <memp_malloc>
      if (pcb == NULL) {
 800b746:	4603      	mov	r3, r0
 800b748:	2800      	cmp	r0, #0
 800b74a:	d1a6      	bne.n	800b69a <tcp_alloc+0xe>
        tcp_kill_state(CLOSING);
 800b74c:	2008      	movs	r0, #8
 800b74e:	f7ff ff79 	bl	800b644 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b752:	2001      	movs	r0, #1
 800b754:	f7fe f9ce 	bl	8009af4 <memp_malloc>
        if (pcb == NULL) {
 800b758:	4603      	mov	r3, r0
 800b75a:	2800      	cmp	r0, #0
 800b75c:	d19d      	bne.n	800b69a <tcp_alloc+0xe>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800b75e:	062a      	lsls	r2, r5, #24
 800b760:	d427      	bmi.n	800b7b2 <tcp_alloc+0x126>
  if (mprio == 0) {
 800b762:	b1ed      	cbz	r5, 800b7a0 <tcp_alloc+0x114>
 800b764:	462a      	mov	r2, r5
  mprio--;
 800b766:	1e51      	subs	r1, r2, #1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b768:	6832      	ldr	r2, [r6, #0]
  mprio--;
 800b76a:	b2c9      	uxtb	r1, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b76c:	b1c2      	cbz	r2, 800b7a0 <tcp_alloc+0x114>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b76e:	4813      	ldr	r0, [pc, #76]	; (800b7bc <tcp_alloc+0x130>)
  inactivity = 0;
 800b770:	2600      	movs	r6, #0
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b772:	6807      	ldr	r7, [r0, #0]
 800b774:	e005      	b.n	800b782 <tcp_alloc+0xf6>
 800b776:	6a14      	ldr	r4, [r2, #32]
      inactivity = tcp_ticks - pcb->tmr;
 800b778:	1b3e      	subs	r6, r7, r4
    if ((pcb->prio < mprio) ||
 800b77a:	4601      	mov	r1, r0
      inactivity = tcp_ticks - pcb->tmr;
 800b77c:	4613      	mov	r3, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b77e:	68d2      	ldr	r2, [r2, #12]
 800b780:	b14a      	cbz	r2, 800b796 <tcp_alloc+0x10a>
    if ((pcb->prio < mprio) ||
 800b782:	7d50      	ldrb	r0, [r2, #21]
 800b784:	4288      	cmp	r0, r1
 800b786:	d3f6      	bcc.n	800b776 <tcp_alloc+0xea>
 800b788:	d1f9      	bne.n	800b77e <tcp_alloc+0xf2>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b78a:	6a14      	ldr	r4, [r2, #32]
 800b78c:	eba7 0e04 	sub.w	lr, r7, r4
 800b790:	45b6      	cmp	lr, r6
 800b792:	d3f4      	bcc.n	800b77e <tcp_alloc+0xf2>
 800b794:	e7f0      	b.n	800b778 <tcp_alloc+0xec>
  if (inactive != NULL) {
 800b796:	b11b      	cbz	r3, 800b7a0 <tcp_alloc+0x114>
  tcp_abandon(pcb, 1);
 800b798:	2101      	movs	r1, #1
 800b79a:	4618      	mov	r0, r3
 800b79c:	f7ff fe3e 	bl	800b41c <tcp_abandon>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b7a0:	2001      	movs	r0, #1
 800b7a2:	f7fe f9a7 	bl	8009af4 <memp_malloc>
  if (pcb != NULL) {
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	2800      	cmp	r0, #0
 800b7aa:	f47f af76 	bne.w	800b69a <tcp_alloc+0xe>
}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800b7b2:	227f      	movs	r2, #127	; 0x7f
 800b7b4:	e7d7      	b.n	800b766 <tcp_alloc+0xda>
 800b7b6:	bf00      	nop
 800b7b8:	2400e661 	.word	0x2400e661
 800b7bc:	2400e65c 	.word	0x2400e65c
 800b7c0:	006ddd00 	.word	0x006ddd00
 800b7c4:	0800ba39 	.word	0x0800ba39
 800b7c8:	0218ffff 	.word	0x0218ffff
 800b7cc:	04300001 	.word	0x04300001
 800b7d0:	08600860 	.word	0x08600860
 800b7d4:	2400e64c 	.word	0x2400e64c
 800b7d8:	2400e664 	.word	0x2400e664

0800b7dc <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800b7dc:	2040      	movs	r0, #64	; 0x40
 800b7de:	f7ff bf55 	b.w	800b68c <tcp_alloc>
 800b7e2:	bf00      	nop

0800b7e4 <tcp_close_shutdown>:
{
 800b7e4:	b530      	push	{r4, r5, lr}
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800b7e6:	4604      	mov	r4, r0
{
 800b7e8:	b085      	sub	sp, #20
 800b7ea:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800b7ec:	2800      	cmp	r0, #0
 800b7ee:	d06a      	beq.n	800b8c6 <tcp_close_shutdown+0xe2>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800b7f0:	7d23      	ldrb	r3, [r4, #20]
 800b7f2:	b11d      	cbz	r5, 800b7fc <tcp_close_shutdown+0x18>
 800b7f4:	2b04      	cmp	r3, #4
 800b7f6:	d00c      	beq.n	800b812 <tcp_close_shutdown+0x2e>
 800b7f8:	2b07      	cmp	r3, #7
 800b7fa:	d00a      	beq.n	800b812 <tcp_close_shutdown+0x2e>
  switch (pcb->state) {
 800b7fc:	2b01      	cmp	r3, #1
 800b7fe:	d06a      	beq.n	800b8d6 <tcp_close_shutdown+0xf2>
 800b800:	2b02      	cmp	r3, #2
 800b802:	d030      	beq.n	800b866 <tcp_close_shutdown+0x82>
 800b804:	b333      	cbz	r3, 800b854 <tcp_close_shutdown+0x70>
      return tcp_close_shutdown_fin(pcb);
 800b806:	4620      	mov	r0, r4
}
 800b808:	b005      	add	sp, #20
 800b80a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return tcp_close_shutdown_fin(pcb);
 800b80e:	f7ff b81f 	b.w	800a850 <tcp_close_shutdown_fin>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800b812:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800b814:	2a00      	cmp	r2, #0
 800b816:	d037      	beq.n	800b888 <tcp_close_shutdown+0xa4>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800b818:	8b63      	ldrh	r3, [r4, #26]
 800b81a:	06db      	lsls	r3, r3, #27
 800b81c:	f140 8084 	bpl.w	800b928 <tcp_close_shutdown+0x144>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b820:	8b21      	ldrh	r1, [r4, #24]
 800b822:	1d20      	adds	r0, r4, #4
 800b824:	8ae2      	ldrh	r2, [r4, #22]
 800b826:	4623      	mov	r3, r4
 800b828:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800b82c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b82e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800b830:	9000      	str	r0, [sp, #0]
 800b832:	4620      	mov	r0, r4
 800b834:	f002 fd5c 	bl	800e2f0 <tcp_rst>
      tcp_pcb_purge(pcb);
 800b838:	4620      	mov	r0, r4
 800b83a:	f7ff fa83 	bl	800ad44 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800b83e:	4a45      	ldr	r2, [pc, #276]	; (800b954 <tcp_close_shutdown+0x170>)
 800b840:	6813      	ldr	r3, [r2, #0]
 800b842:	42a3      	cmp	r3, r4
 800b844:	d030      	beq.n	800b8a8 <tcp_close_shutdown+0xc4>
 800b846:	2b00      	cmp	r3, #0
 800b848:	d030      	beq.n	800b8ac <tcp_close_shutdown+0xc8>
 800b84a:	68da      	ldr	r2, [r3, #12]
 800b84c:	42a2      	cmp	r2, r4
 800b84e:	d068      	beq.n	800b922 <tcp_close_shutdown+0x13e>
 800b850:	4613      	mov	r3, r2
 800b852:	e7f8      	b.n	800b846 <tcp_close_shutdown+0x62>
      if (pcb->local_port != 0) {
 800b854:	8ae3      	ldrh	r3, [r4, #22]
 800b856:	b9e3      	cbnz	r3, 800b892 <tcp_close_shutdown+0xae>
  memp_free(MEMP_TCP_PCB, pcb);
 800b858:	4621      	mov	r1, r4
 800b85a:	2001      	movs	r0, #1
 800b85c:	f7fe f990 	bl	8009b80 <memp_free>
}
 800b860:	2000      	movs	r0, #0
 800b862:	b005      	add	sp, #20
 800b864:	bd30      	pop	{r4, r5, pc}
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b866:	4621      	mov	r1, r4
 800b868:	483a      	ldr	r0, [pc, #232]	; (800b954 <tcp_close_shutdown+0x170>)
 800b86a:	f7ff fd67 	bl	800b33c <tcp_pcb_remove>
 800b86e:	2101      	movs	r1, #1
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b870:	7d23      	ldrb	r3, [r4, #20]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b872:	4a39      	ldr	r2, [pc, #228]	; (800b958 <tcp_close_shutdown+0x174>)
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b874:	428b      	cmp	r3, r1
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b876:	7011      	strb	r1, [r2, #0]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b878:	d1ee      	bne.n	800b858 <tcp_close_shutdown+0x74>
 800b87a:	4b38      	ldr	r3, [pc, #224]	; (800b95c <tcp_close_shutdown+0x178>)
 800b87c:	22d4      	movs	r2, #212	; 0xd4
 800b87e:	4938      	ldr	r1, [pc, #224]	; (800b960 <tcp_close_shutdown+0x17c>)
 800b880:	4838      	ldr	r0, [pc, #224]	; (800b964 <tcp_close_shutdown+0x180>)
 800b882:	f005 febd 	bl	8011600 <iprintf>
 800b886:	e7e7      	b.n	800b858 <tcp_close_shutdown+0x74>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800b888:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800b88a:	f5b2 6f06 	cmp.w	r2, #2144	; 0x860
 800b88e:	d0b5      	beq.n	800b7fc <tcp_close_shutdown+0x18>
 800b890:	e7c2      	b.n	800b818 <tcp_close_shutdown+0x34>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b892:	4a35      	ldr	r2, [pc, #212]	; (800b968 <tcp_close_shutdown+0x184>)
 800b894:	6813      	ldr	r3, [r2, #0]
 800b896:	42a3      	cmp	r3, r4
 800b898:	d051      	beq.n	800b93e <tcp_close_shutdown+0x15a>
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d03e      	beq.n	800b91c <tcp_close_shutdown+0x138>
 800b89e:	68da      	ldr	r2, [r3, #12]
 800b8a0:	42a2      	cmp	r2, r4
 800b8a2:	d039      	beq.n	800b918 <tcp_close_shutdown+0x134>
 800b8a4:	4613      	mov	r3, r2
 800b8a6:	e7f8      	b.n	800b89a <tcp_close_shutdown+0xb6>
      TCP_RMV_ACTIVE(pcb);
 800b8a8:	68e3      	ldr	r3, [r4, #12]
 800b8aa:	6013      	str	r3, [r2, #0]
      if (tcp_input_pcb == pcb) {
 800b8ac:	4b2f      	ldr	r3, [pc, #188]	; (800b96c <tcp_close_shutdown+0x188>)
      TCP_RMV_ACTIVE(pcb);
 800b8ae:	2000      	movs	r0, #0
 800b8b0:	4a29      	ldr	r2, [pc, #164]	; (800b958 <tcp_close_shutdown+0x174>)
 800b8b2:	2101      	movs	r1, #1
      if (tcp_input_pcb == pcb) {
 800b8b4:	681b      	ldr	r3, [r3, #0]
      TCP_RMV_ACTIVE(pcb);
 800b8b6:	60e0      	str	r0, [r4, #12]
      if (tcp_input_pcb == pcb) {
 800b8b8:	42a3      	cmp	r3, r4
      TCP_RMV_ACTIVE(pcb);
 800b8ba:	7011      	strb	r1, [r2, #0]
      if (tcp_input_pcb == pcb) {
 800b8bc:	d03c      	beq.n	800b938 <tcp_close_shutdown+0x154>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b8be:	7d23      	ldrb	r3, [r4, #20]
 800b8c0:	2b01      	cmp	r3, #1
 800b8c2:	d1c9      	bne.n	800b858 <tcp_close_shutdown+0x74>
 800b8c4:	e7d9      	b.n	800b87a <tcp_close_shutdown+0x96>
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800b8c6:	4b25      	ldr	r3, [pc, #148]	; (800b95c <tcp_close_shutdown+0x178>)
 800b8c8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800b8cc:	4928      	ldr	r1, [pc, #160]	; (800b970 <tcp_close_shutdown+0x18c>)
 800b8ce:	4825      	ldr	r0, [pc, #148]	; (800b964 <tcp_close_shutdown+0x180>)
 800b8d0:	f005 fe96 	bl	8011600 <iprintf>
 800b8d4:	e78c      	b.n	800b7f0 <tcp_close_shutdown+0xc>
 800b8d6:	4927      	ldr	r1, [pc, #156]	; (800b974 <tcp_close_shutdown+0x190>)
      pcb->listener = NULL;
 800b8d8:	2000      	movs	r0, #0
  switch (pcb->state) {
 800b8da:	4b23      	ldr	r3, [pc, #140]	; (800b968 <tcp_close_shutdown+0x184>)
 800b8dc:	f101 0508 	add.w	r5, r1, #8
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800b8e0:	681b      	ldr	r3, [r3, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b8e2:	b133      	cbz	r3, 800b8f2 <tcp_close_shutdown+0x10e>
    if (pcb->listener == lpcb) {
 800b8e4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800b8e6:	4294      	cmp	r4, r2
      pcb->listener = NULL;
 800b8e8:	bf08      	it	eq
 800b8ea:	67d8      	streq	r0, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b8ec:	68db      	ldr	r3, [r3, #12]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d1f8      	bne.n	800b8e4 <tcp_close_shutdown+0x100>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b8f2:	42a9      	cmp	r1, r5
 800b8f4:	d002      	beq.n	800b8fc <tcp_close_shutdown+0x118>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800b8f6:	f851 3f04 	ldr.w	r3, [r1, #4]!
 800b8fa:	e7f1      	b.n	800b8e0 <tcp_close_shutdown+0xfc>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800b8fc:	4621      	mov	r1, r4
 800b8fe:	481e      	ldr	r0, [pc, #120]	; (800b978 <tcp_close_shutdown+0x194>)
 800b900:	f7ff fd1c 	bl	800b33c <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800b904:	7d23      	ldrb	r3, [r4, #20]
 800b906:	2b01      	cmp	r3, #1
 800b908:	d01c      	beq.n	800b944 <tcp_close_shutdown+0x160>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800b90a:	4621      	mov	r1, r4
 800b90c:	2002      	movs	r0, #2
 800b90e:	f7fe f937 	bl	8009b80 <memp_free>
}
 800b912:	2000      	movs	r0, #0
 800b914:	b005      	add	sp, #20
 800b916:	bd30      	pop	{r4, r5, pc}
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b918:	68e2      	ldr	r2, [r4, #12]
 800b91a:	60da      	str	r2, [r3, #12]
 800b91c:	2300      	movs	r3, #0
 800b91e:	60e3      	str	r3, [r4, #12]
 800b920:	e79a      	b.n	800b858 <tcp_close_shutdown+0x74>
      TCP_RMV_ACTIVE(pcb);
 800b922:	68e2      	ldr	r2, [r4, #12]
 800b924:	60da      	str	r2, [r3, #12]
 800b926:	e7c1      	b.n	800b8ac <tcp_close_shutdown+0xc8>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800b928:	4b0c      	ldr	r3, [pc, #48]	; (800b95c <tcp_close_shutdown+0x178>)
 800b92a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800b92e:	4913      	ldr	r1, [pc, #76]	; (800b97c <tcp_close_shutdown+0x198>)
 800b930:	480c      	ldr	r0, [pc, #48]	; (800b964 <tcp_close_shutdown+0x180>)
 800b932:	f005 fe65 	bl	8011600 <iprintf>
 800b936:	e773      	b.n	800b820 <tcp_close_shutdown+0x3c>
        tcp_trigger_input_pcb_close();
 800b938:	f001 fdb8 	bl	800d4ac <tcp_trigger_input_pcb_close>
 800b93c:	e790      	b.n	800b860 <tcp_close_shutdown+0x7c>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b93e:	68e3      	ldr	r3, [r4, #12]
 800b940:	6013      	str	r3, [r2, #0]
 800b942:	e7eb      	b.n	800b91c <tcp_close_shutdown+0x138>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800b944:	4b05      	ldr	r3, [pc, #20]	; (800b95c <tcp_close_shutdown+0x178>)
 800b946:	22df      	movs	r2, #223	; 0xdf
 800b948:	490d      	ldr	r1, [pc, #52]	; (800b980 <tcp_close_shutdown+0x19c>)
 800b94a:	4806      	ldr	r0, [pc, #24]	; (800b964 <tcp_close_shutdown+0x180>)
 800b94c:	f005 fe58 	bl	8011600 <iprintf>
 800b950:	e7db      	b.n	800b90a <tcp_close_shutdown+0x126>
 800b952:	bf00      	nop
 800b954:	2400e64c 	.word	0x2400e64c
 800b958:	2400e650 	.word	0x2400e650
 800b95c:	0801376c 	.word	0x0801376c
 800b960:	080137a8 	.word	0x080137a8
 800b964:	080124d0 	.word	0x080124d0
 800b968:	2400e654 	.word	0x2400e654
 800b96c:	2400e690 	.word	0x2400e690
 800b970:	08013cc4 	.word	0x08013cc4
 800b974:	08013dec 	.word	0x08013dec
 800b978:	2400e658 	.word	0x2400e658
 800b97c:	08013ce4 	.word	0x08013ce4
 800b980:	08013d00 	.word	0x08013d00

0800b984 <tcp_close>:
{
 800b984:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800b986:	b158      	cbz	r0, 800b9a0 <tcp_close+0x1c>
  if (pcb->state != LISTEN) {
 800b988:	7d03      	ldrb	r3, [r0, #20]
 800b98a:	2b01      	cmp	r3, #1
 800b98c:	d003      	beq.n	800b996 <tcp_close+0x12>
    tcp_set_flags(pcb, TF_RXCLOSED);
 800b98e:	8b43      	ldrh	r3, [r0, #26]
 800b990:	f043 0310 	orr.w	r3, r3, #16
 800b994:	8343      	strh	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 800b996:	2101      	movs	r1, #1
}
 800b998:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return tcp_close_shutdown(pcb, 1);
 800b99c:	f7ff bf22 	b.w	800b7e4 <tcp_close_shutdown>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800b9a0:	4b04      	ldr	r3, [pc, #16]	; (800b9b4 <tcp_close+0x30>)
 800b9a2:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800b9a6:	4904      	ldr	r1, [pc, #16]	; (800b9b8 <tcp_close+0x34>)
 800b9a8:	4804      	ldr	r0, [pc, #16]	; (800b9bc <tcp_close+0x38>)
 800b9aa:	f005 fe29 	bl	8011600 <iprintf>
}
 800b9ae:	f06f 000f 	mvn.w	r0, #15
 800b9b2:	bd08      	pop	{r3, pc}
 800b9b4:	0801376c 	.word	0x0801376c
 800b9b8:	08013d1c 	.word	0x08013d1c
 800b9bc:	080124d0 	.word	0x080124d0

0800b9c0 <tcp_shutdown>:
{
 800b9c0:	b538      	push	{r3, r4, r5, lr}
  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800b9c2:	b340      	cbz	r0, 800ba16 <tcp_shutdown+0x56>
  if (pcb->state == LISTEN) {
 800b9c4:	7d03      	ldrb	r3, [r0, #20]
 800b9c6:	4604      	mov	r4, r0
 800b9c8:	2b01      	cmp	r3, #1
 800b9ca:	d006      	beq.n	800b9da <tcp_shutdown+0x1a>
  if (shut_rx) {
 800b9cc:	4615      	mov	r5, r2
 800b9ce:	b939      	cbnz	r1, 800b9e0 <tcp_shutdown+0x20>
  if (shut_tx) {
 800b9d0:	b1d2      	cbz	r2, 800ba08 <tcp_shutdown+0x48>
    switch (pcb->state) {
 800b9d2:	2b04      	cmp	r3, #4
 800b9d4:	d810      	bhi.n	800b9f8 <tcp_shutdown+0x38>
 800b9d6:	2b02      	cmp	r3, #2
 800b9d8:	d810      	bhi.n	800b9fc <tcp_shutdown+0x3c>
 800b9da:	f06f 000a 	mvn.w	r0, #10
}
 800b9de:	bd38      	pop	{r3, r4, r5, pc}
    tcp_set_flags(pcb, TF_RXCLOSED);
 800b9e0:	8b43      	ldrh	r3, [r0, #26]
 800b9e2:	f043 0310 	orr.w	r3, r3, #16
 800b9e6:	8343      	strh	r3, [r0, #26]
    if (shut_tx) {
 800b9e8:	b982      	cbnz	r2, 800ba0c <tcp_shutdown+0x4c>
    if (pcb->refused_data != NULL) {
 800b9ea:	6f80      	ldr	r0, [r0, #120]	; 0x78
 800b9ec:	b160      	cbz	r0, 800ba08 <tcp_shutdown+0x48>
      pbuf_free(pcb->refused_data);
 800b9ee:	f7fe fc55 	bl	800a29c <pbuf_free>
  return ERR_OK;
 800b9f2:	4628      	mov	r0, r5
      pcb->refused_data = NULL;
 800b9f4:	67a5      	str	r5, [r4, #120]	; 0x78
}
 800b9f6:	bd38      	pop	{r3, r4, r5, pc}
    switch (pcb->state) {
 800b9f8:	2b07      	cmp	r3, #7
 800b9fa:	d1ee      	bne.n	800b9da <tcp_shutdown+0x1a>
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800b9fc:	4620      	mov	r0, r4
 800b9fe:	2100      	movs	r1, #0
}
 800ba00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800ba04:	f7ff beee 	b.w	800b7e4 <tcp_close_shutdown>
  return ERR_OK;
 800ba08:	2000      	movs	r0, #0
}
 800ba0a:	bd38      	pop	{r3, r4, r5, pc}
      return tcp_close_shutdown(pcb, 1);
 800ba0c:	2101      	movs	r1, #1
}
 800ba0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      return tcp_close_shutdown(pcb, 1);
 800ba12:	f7ff bee7 	b.w	800b7e4 <tcp_close_shutdown>
  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800ba16:	4b05      	ldr	r3, [pc, #20]	; (800ba2c <tcp_shutdown+0x6c>)
 800ba18:	f240 2207 	movw	r2, #519	; 0x207
 800ba1c:	4904      	ldr	r1, [pc, #16]	; (800ba30 <tcp_shutdown+0x70>)
 800ba1e:	4805      	ldr	r0, [pc, #20]	; (800ba34 <tcp_shutdown+0x74>)
 800ba20:	f005 fdee 	bl	8011600 <iprintf>
 800ba24:	f06f 000f 	mvn.w	r0, #15
}
 800ba28:	bd38      	pop	{r3, r4, r5, pc}
 800ba2a:	bf00      	nop
 800ba2c:	0801376c 	.word	0x0801376c
 800ba30:	08013d34 	.word	0x08013d34
 800ba34:	080124d0 	.word	0x080124d0

0800ba38 <tcp_recv_null>:
{
 800ba38:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800ba3a:	b1c9      	cbz	r1, 800ba70 <tcp_recv_null+0x38>
  if (p != NULL) {
 800ba3c:	4614      	mov	r4, r2
 800ba3e:	4608      	mov	r0, r1
 800ba40:	b13a      	cbz	r2, 800ba52 <tcp_recv_null+0x1a>
    tcp_recved(pcb, p->tot_len);
 800ba42:	8911      	ldrh	r1, [r2, #8]
 800ba44:	f7ff f87c 	bl	800ab40 <tcp_recved>
    pbuf_free(p);
 800ba48:	4620      	mov	r0, r4
 800ba4a:	f7fe fc27 	bl	800a29c <pbuf_free>
  return ERR_OK;
 800ba4e:	2000      	movs	r0, #0
}
 800ba50:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 800ba52:	b10b      	cbz	r3, 800ba58 <tcp_recv_null+0x20>
  return ERR_OK;
 800ba54:	4610      	mov	r0, r2
}
 800ba56:	bd10      	pop	{r4, pc}
  if (pcb->state != LISTEN) {
 800ba58:	7d0b      	ldrb	r3, [r1, #20]
 800ba5a:	2b01      	cmp	r3, #1
 800ba5c:	d003      	beq.n	800ba66 <tcp_recv_null+0x2e>
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ba5e:	8b4b      	ldrh	r3, [r1, #26]
 800ba60:	f043 0310 	orr.w	r3, r3, #16
 800ba64:	834b      	strh	r3, [r1, #26]
  return tcp_close_shutdown(pcb, 1);
 800ba66:	2101      	movs	r1, #1
}
 800ba68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return tcp_close_shutdown(pcb, 1);
 800ba6c:	f7ff beba 	b.w	800b7e4 <tcp_close_shutdown>
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800ba70:	4b04      	ldr	r3, [pc, #16]	; (800ba84 <tcp_recv_null+0x4c>)
 800ba72:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ba76:	4904      	ldr	r1, [pc, #16]	; (800ba88 <tcp_recv_null+0x50>)
 800ba78:	4804      	ldr	r0, [pc, #16]	; (800ba8c <tcp_recv_null+0x54>)
 800ba7a:	f005 fdc1 	bl	8011600 <iprintf>
 800ba7e:	f06f 000f 	mvn.w	r0, #15
}
 800ba82:	bd10      	pop	{r4, pc}
 800ba84:	0801376c 	.word	0x0801376c
 800ba88:	08013d50 	.word	0x08013d50
 800ba8c:	080124d0 	.word	0x080124d0

0800ba90 <tcp_process_refused_data>:
{
 800ba90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800ba92:	b378      	cbz	r0, 800baf4 <tcp_process_refused_data+0x64>
    u8_t refused_flags = pcb->refused_data->flags;
 800ba94:	6f85      	ldr	r5, [r0, #120]	; 0x78
    pcb->refused_data = NULL;
 800ba96:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ba98:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
 800ba9c:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 800ba9e:	7b6f      	ldrb	r7, [r5, #13]
    pcb->refused_data = NULL;
 800baa0:	6783      	str	r3, [r0, #120]	; 0x78
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800baa2:	b156      	cbz	r6, 800baba <tcp_process_refused_data+0x2a>
 800baa4:	4601      	mov	r1, r0
 800baa6:	462a      	mov	r2, r5
 800baa8:	6900      	ldr	r0, [r0, #16]
 800baaa:	47b0      	blx	r6
    if (err == ERR_OK) {
 800baac:	b158      	cbz	r0, 800bac6 <tcp_process_refused_data+0x36>
    } else if (err == ERR_ABRT) {
 800baae:	300d      	adds	r0, #13
 800bab0:	d01d      	beq.n	800baee <tcp_process_refused_data+0x5e>
      return ERR_INPROGRESS;
 800bab2:	f06f 0004 	mvn.w	r0, #4
      pcb->refused_data = refused_data;
 800bab6:	67a5      	str	r5, [r4, #120]	; 0x78
}
 800bab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tcp_recved(pcb, p->tot_len);
 800baba:	8929      	ldrh	r1, [r5, #8]
 800babc:	f7ff f840 	bl	800ab40 <tcp_recved>
    pbuf_free(p);
 800bac0:	4628      	mov	r0, r5
 800bac2:	f7fe fbeb 	bl	800a29c <pbuf_free>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800bac6:	06bb      	lsls	r3, r7, #26
 800bac8:	d50f      	bpl.n	800baea <tcp_process_refused_data+0x5a>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800baca:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800bacc:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800bad0:	d001      	beq.n	800bad6 <tcp_process_refused_data+0x46>
          pcb->rcv_wnd++;
 800bad2:	3301      	adds	r3, #1
 800bad4:	8523      	strh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 800bad6:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 800bada:	b135      	cbz	r5, 800baea <tcp_process_refused_data+0x5a>
 800badc:	2300      	movs	r3, #0
 800bade:	4621      	mov	r1, r4
 800bae0:	6920      	ldr	r0, [r4, #16]
 800bae2:	461a      	mov	r2, r3
 800bae4:	47a8      	blx	r5
        if (err == ERR_ABRT) {
 800bae6:	300d      	adds	r0, #13
 800bae8:	d001      	beq.n	800baee <tcp_process_refused_data+0x5e>
  return ERR_OK;
 800baea:	2000      	movs	r0, #0
}
 800baec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          return ERR_ABRT;
 800baee:	f06f 000c 	mvn.w	r0, #12
}
 800baf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800baf4:	4b04      	ldr	r3, [pc, #16]	; (800bb08 <tcp_process_refused_data+0x78>)
 800baf6:	f240 6209 	movw	r2, #1545	; 0x609
 800bafa:	4904      	ldr	r1, [pc, #16]	; (800bb0c <tcp_process_refused_data+0x7c>)
 800bafc:	4804      	ldr	r0, [pc, #16]	; (800bb10 <tcp_process_refused_data+0x80>)
 800bafe:	f005 fd7f 	bl	8011600 <iprintf>
 800bb02:	f06f 000f 	mvn.w	r0, #15
}
 800bb06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb08:	0801376c 	.word	0x0801376c
 800bb0c:	08013d6c 	.word	0x08013d6c
 800bb10:	080124d0 	.word	0x080124d0

0800bb14 <tcp_fasttmr>:
{
 800bb14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 800bb18:	4d1c      	ldr	r5, [pc, #112]	; (800bb8c <tcp_fasttmr+0x78>)
        tcp_active_pcbs_changed = 0;
 800bb1a:	2700      	movs	r7, #0
 800bb1c:	f8df 8074 	ldr.w	r8, [pc, #116]	; 800bb94 <tcp_fasttmr+0x80>
  ++tcp_timer_ctr;
 800bb20:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 800bb22:	4e1b      	ldr	r6, [pc, #108]	; (800bb90 <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 800bb24:	3301      	adds	r3, #1
 800bb26:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 800bb28:	f8d8 4000 	ldr.w	r4, [r8]
  while (pcb != NULL) {
 800bb2c:	b1bc      	cbz	r4, 800bb5e <tcp_fasttmr+0x4a>
    if (pcb->last_timer != tcp_timer_ctr) {
 800bb2e:	782a      	ldrb	r2, [r5, #0]
 800bb30:	7fa3      	ldrb	r3, [r4, #30]
 800bb32:	4293      	cmp	r3, r2
 800bb34:	d015      	beq.n	800bb62 <tcp_fasttmr+0x4e>
      if (pcb->flags & TF_ACK_DELAY) {
 800bb36:	8b63      	ldrh	r3, [r4, #26]
      pcb->last_timer = tcp_timer_ctr;
 800bb38:	77a2      	strb	r2, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 800bb3a:	07d9      	lsls	r1, r3, #31
 800bb3c:	d41a      	bmi.n	800bb74 <tcp_fasttmr+0x60>
      if (pcb->flags & TF_CLOSEPEND) {
 800bb3e:	071a      	lsls	r2, r3, #28
 800bb40:	d411      	bmi.n	800bb66 <tcp_fasttmr+0x52>
      if (pcb->refused_data != NULL) {
 800bb42:	6fa3      	ldr	r3, [r4, #120]	; 0x78
      next = pcb->next;
 800bb44:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 800bb48:	b133      	cbz	r3, 800bb58 <tcp_fasttmr+0x44>
        tcp_process_refused_data(pcb);
 800bb4a:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 800bb4c:	7037      	strb	r7, [r6, #0]
        tcp_process_refused_data(pcb);
 800bb4e:	f7ff ff9f 	bl	800ba90 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800bb52:	7833      	ldrb	r3, [r6, #0]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d1e7      	bne.n	800bb28 <tcp_fasttmr+0x14>
      pcb = next;
 800bb58:	464c      	mov	r4, r9
  while (pcb != NULL) {
 800bb5a:	2c00      	cmp	r4, #0
 800bb5c:	d1e7      	bne.n	800bb2e <tcp_fasttmr+0x1a>
}
 800bb5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      pcb = pcb->next;
 800bb62:	68e4      	ldr	r4, [r4, #12]
 800bb64:	e7e2      	b.n	800bb2c <tcp_fasttmr+0x18>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800bb66:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
 800bb6a:	4620      	mov	r0, r4
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800bb6c:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 800bb6e:	f7fe fe6f 	bl	800a850 <tcp_close_shutdown_fin>
 800bb72:	e7e6      	b.n	800bb42 <tcp_fasttmr+0x2e>
        tcp_ack_now(pcb);
 800bb74:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 800bb78:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 800bb7a:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 800bb7c:	f002 fc32 	bl	800e3e4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bb80:	8b63      	ldrh	r3, [r4, #26]
 800bb82:	f023 0303 	bic.w	r3, r3, #3
 800bb86:	b29b      	uxth	r3, r3
 800bb88:	8363      	strh	r3, [r4, #26]
 800bb8a:	e7d8      	b.n	800bb3e <tcp_fasttmr+0x2a>
 800bb8c:	2400e661 	.word	0x2400e661
 800bb90:	2400e650 	.word	0x2400e650
 800bb94:	2400e64c 	.word	0x2400e64c

0800bb98 <tcp_tmr>:
{
 800bb98:	b508      	push	{r3, lr}
  tcp_fasttmr();
 800bb9a:	f7ff ffbb 	bl	800bb14 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 800bb9e:	4a06      	ldr	r2, [pc, #24]	; (800bbb8 <tcp_tmr+0x20>)
 800bba0:	7813      	ldrb	r3, [r2, #0]
 800bba2:	3301      	adds	r3, #1
 800bba4:	b2db      	uxtb	r3, r3
 800bba6:	7013      	strb	r3, [r2, #0]
 800bba8:	07db      	lsls	r3, r3, #31
 800bbaa:	d400      	bmi.n	800bbae <tcp_tmr+0x16>
}
 800bbac:	bd08      	pop	{r3, pc}
 800bbae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 800bbb2:	f7ff b919 	b.w	800ade8 <tcp_slowtmr>
 800bbb6:	bf00      	nop
 800bbb8:	2400e660 	.word	0x2400e660

0800bbbc <tcp_next_iss>:
{
 800bbbc:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800bbbe:	b130      	cbz	r0, 800bbce <tcp_next_iss+0x12>
  iss += tcp_ticks;       /* XXX */
 800bbc0:	4b07      	ldr	r3, [pc, #28]	; (800bbe0 <tcp_next_iss+0x24>)
 800bbc2:	4a08      	ldr	r2, [pc, #32]	; (800bbe4 <tcp_next_iss+0x28>)
 800bbc4:	6818      	ldr	r0, [r3, #0]
 800bbc6:	6812      	ldr	r2, [r2, #0]
 800bbc8:	4410      	add	r0, r2
 800bbca:	6018      	str	r0, [r3, #0]
}
 800bbcc:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800bbce:	4b06      	ldr	r3, [pc, #24]	; (800bbe8 <tcp_next_iss+0x2c>)
 800bbd0:	f640 02af 	movw	r2, #2223	; 0x8af
 800bbd4:	4905      	ldr	r1, [pc, #20]	; (800bbec <tcp_next_iss+0x30>)
 800bbd6:	4806      	ldr	r0, [pc, #24]	; (800bbf0 <tcp_next_iss+0x34>)
 800bbd8:	f005 fd12 	bl	8011600 <iprintf>
 800bbdc:	e7f0      	b.n	800bbc0 <tcp_next_iss+0x4>
 800bbde:	bf00      	nop
 800bbe0:	24000028 	.word	0x24000028
 800bbe4:	2400e65c 	.word	0x2400e65c
 800bbe8:	0801376c 	.word	0x0801376c
 800bbec:	08013d94 	.word	0x08013d94
 800bbf0:	080124d0 	.word	0x080124d0

0800bbf4 <tcp_eff_send_mss_netif>:
{
 800bbf4:	b538      	push	{r3, r4, r5, lr}
 800bbf6:	4605      	mov	r5, r0
 800bbf8:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800bbfa:	b172      	cbz	r2, 800bc1a <tcp_eff_send_mss_netif+0x26>
    if (outif == NULL) {
 800bbfc:	b144      	cbz	r4, 800bc10 <tcp_eff_send_mss_netif+0x1c>
    mtu = outif->mtu;
 800bbfe:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
  if (mtu != 0) {
 800bc00:	b133      	cbz	r3, 800bc10 <tcp_eff_send_mss_netif+0x1c>
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800bc02:	2b28      	cmp	r3, #40	; 0x28
 800bc04:	d906      	bls.n	800bc14 <tcp_eff_send_mss_netif+0x20>
 800bc06:	3b28      	subs	r3, #40	; 0x28
    sendmss = LWIP_MIN(sendmss, mss_s);
 800bc08:	b29b      	uxth	r3, r3
 800bc0a:	429d      	cmp	r5, r3
 800bc0c:	bf28      	it	cs
 800bc0e:	461d      	movcs	r5, r3
}
 800bc10:	4628      	mov	r0, r5
 800bc12:	bd38      	pop	{r3, r4, r5, pc}
 800bc14:	2500      	movs	r5, #0
 800bc16:	4628      	mov	r0, r5
 800bc18:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800bc1a:	4b04      	ldr	r3, [pc, #16]	; (800bc2c <tcp_eff_send_mss_netif+0x38>)
 800bc1c:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800bc20:	4903      	ldr	r1, [pc, #12]	; (800bc30 <tcp_eff_send_mss_netif+0x3c>)
 800bc22:	4804      	ldr	r0, [pc, #16]	; (800bc34 <tcp_eff_send_mss_netif+0x40>)
 800bc24:	f005 fcec 	bl	8011600 <iprintf>
 800bc28:	e7e8      	b.n	800bbfc <tcp_eff_send_mss_netif+0x8>
 800bc2a:	bf00      	nop
 800bc2c:	0801376c 	.word	0x0801376c
 800bc30:	08013db0 	.word	0x08013db0
 800bc34:	080124d0 	.word	0x080124d0

0800bc38 <tcp_netif_ip_addr_changed>:
  if (!ip_addr_isany(old_addr)) {
 800bc38:	b308      	cbz	r0, 800bc7e <tcp_netif_ip_addr_changed+0x46>
{
 800bc3a:	b538      	push	{r3, r4, r5, lr}
  if (!ip_addr_isany(old_addr)) {
 800bc3c:	6803      	ldr	r3, [r0, #0]
 800bc3e:	4604      	mov	r4, r0
 800bc40:	b903      	cbnz	r3, 800bc44 <tcp_netif_ip_addr_changed+0xc>
}
 800bc42:	bd38      	pop	{r3, r4, r5, pc}
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800bc44:	4b0e      	ldr	r3, [pc, #56]	; (800bc80 <tcp_netif_ip_addr_changed+0x48>)
 800bc46:	460d      	mov	r5, r1
 800bc48:	6819      	ldr	r1, [r3, #0]
 800bc4a:	f7ff fcd9 	bl	800b600 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800bc4e:	4b0d      	ldr	r3, [pc, #52]	; (800bc84 <tcp_netif_ip_addr_changed+0x4c>)
 800bc50:	4620      	mov	r0, r4
 800bc52:	6819      	ldr	r1, [r3, #0]
 800bc54:	f7ff fcd4 	bl	800b600 <tcp_netif_ip_addr_changed_pcblist>
    if (!ip_addr_isany(new_addr)) {
 800bc58:	2d00      	cmp	r5, #0
 800bc5a:	d0f2      	beq.n	800bc42 <tcp_netif_ip_addr_changed+0xa>
 800bc5c:	682b      	ldr	r3, [r5, #0]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d0ef      	beq.n	800bc42 <tcp_netif_ip_addr_changed+0xa>
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bc62:	4b09      	ldr	r3, [pc, #36]	; (800bc88 <tcp_netif_ip_addr_changed+0x50>)
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d0eb      	beq.n	800bc42 <tcp_netif_ip_addr_changed+0xa>
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800bc6a:	6819      	ldr	r1, [r3, #0]
 800bc6c:	6822      	ldr	r2, [r4, #0]
 800bc6e:	4291      	cmp	r1, r2
 800bc70:	d101      	bne.n	800bc76 <tcp_netif_ip_addr_changed+0x3e>
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800bc72:	682a      	ldr	r2, [r5, #0]
 800bc74:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bc76:	68db      	ldr	r3, [r3, #12]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d1f6      	bne.n	800bc6a <tcp_netif_ip_addr_changed+0x32>
}
 800bc7c:	bd38      	pop	{r3, r4, r5, pc}
 800bc7e:	4770      	bx	lr
 800bc80:	2400e64c 	.word	0x2400e64c
 800bc84:	2400e654 	.word	0x2400e654
 800bc88:	2400e658 	.word	0x2400e658

0800bc8c <tcp_free_ooseq>:
{
 800bc8c:	b570      	push	{r4, r5, r6, lr}
  if (pcb->ooseq) {
 800bc8e:	6f44      	ldr	r4, [r0, #116]	; 0x74
 800bc90:	b16c      	cbz	r4, 800bcae <tcp_free_ooseq+0x22>
 800bc92:	4606      	mov	r6, r0
      pbuf_free(seg->p);
 800bc94:	4625      	mov	r5, r4
    struct tcp_seg *next = seg->next;
 800bc96:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800bc98:	6868      	ldr	r0, [r5, #4]
 800bc9a:	b108      	cbz	r0, 800bca0 <tcp_free_ooseq+0x14>
      pbuf_free(seg->p);
 800bc9c:	f7fe fafe 	bl	800a29c <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800bca0:	4629      	mov	r1, r5
 800bca2:	2003      	movs	r0, #3
 800bca4:	f7fd ff6c 	bl	8009b80 <memp_free>
  while (seg != NULL) {
 800bca8:	2c00      	cmp	r4, #0
 800bcaa:	d1f3      	bne.n	800bc94 <tcp_free_ooseq+0x8>
    pcb->ooseq = NULL;
 800bcac:	6774      	str	r4, [r6, #116]	; 0x74
}
 800bcae:	bd70      	pop	{r4, r5, r6, pc}

0800bcb0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800bcb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800bcb2:	4605      	mov	r5, r0
{
 800bcb4:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800bcb6:	2800      	cmp	r0, #0
 800bcb8:	d03e      	beq.n	800bd38 <tcp_oos_insert_segment+0x88>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800bcba:	68eb      	ldr	r3, [r5, #12]
 800bcbc:	8998      	ldrh	r0, [r3, #12]
 800bcbe:	f7fd fb6b 	bl	8009398 <lwip_htons>
 800bcc2:	07c2      	lsls	r2, r0, #31
 800bcc4:	d432      	bmi.n	800bd2c <tcp_oos_insert_segment+0x7c>
 800bcc6:	4e20      	ldr	r6, [pc, #128]	; (800bd48 <tcp_oos_insert_segment+0x98>)
 800bcc8:	e005      	b.n	800bcd6 <tcp_oos_insert_segment+0x26>
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
      }
      old_seg = next;
      next = next->next;
 800bcca:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 800bccc:	4620      	mov	r0, r4
 800bcce:	f7fe ff83 	bl	800abd8 <tcp_seg_free>
    while (next &&
 800bcd2:	463c      	mov	r4, r7
 800bcd4:	b1ef      	cbz	r7, 800bd12 <tcp_oos_insert_segment+0x62>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800bcd6:	68e1      	ldr	r1, [r4, #12]
 800bcd8:	8923      	ldrh	r3, [r4, #8]
 800bcda:	6837      	ldr	r7, [r6, #0]
 800bcdc:	892a      	ldrh	r2, [r5, #8]
 800bcde:	6848      	ldr	r0, [r1, #4]
 800bce0:	443a      	add	r2, r7
 800bce2:	4403      	add	r3, r0
 800bce4:	1ad3      	subs	r3, r2, r3
    while (next &&
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	db15      	blt.n	800bd16 <tcp_oos_insert_segment+0x66>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800bcea:	8988      	ldrh	r0, [r1, #12]
 800bcec:	f7fd fb54 	bl	8009398 <lwip_htons>
 800bcf0:	07c3      	lsls	r3, r0, #31
 800bcf2:	d5ea      	bpl.n	800bcca <tcp_oos_insert_segment+0x1a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800bcf4:	68eb      	ldr	r3, [r5, #12]
 800bcf6:	2001      	movs	r0, #1
 800bcf8:	899f      	ldrh	r7, [r3, #12]
 800bcfa:	f7fd fb4d 	bl	8009398 <lwip_htons>
 800bcfe:	68eb      	ldr	r3, [r5, #12]
 800bd00:	4338      	orrs	r0, r7
      next = next->next;
 800bd02:	6827      	ldr	r7, [r4, #0]
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800bd04:	8198      	strh	r0, [r3, #12]
      tcp_seg_free(old_seg);
 800bd06:	4620      	mov	r0, r4
 800bd08:	f7fe ff66 	bl	800abd8 <tcp_seg_free>
    while (next &&
 800bd0c:	463c      	mov	r4, r7
 800bd0e:	2f00      	cmp	r7, #0
 800bd10:	d1e1      	bne.n	800bcd6 <tcp_oos_insert_segment+0x26>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
      pbuf_realloc(cseg->p, cseg->len);
    }
  }
  cseg->next = next;
 800bd12:	602c      	str	r4, [r5, #0]
}
 800bd14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800bd16:	1a12      	subs	r2, r2, r0
    if (next &&
 800bd18:	2a00      	cmp	r2, #0
 800bd1a:	ddfa      	ble.n	800bd12 <tcp_oos_insert_segment+0x62>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800bd1c:	1bc1      	subs	r1, r0, r7
      pbuf_realloc(cseg->p, cseg->len);
 800bd1e:	6868      	ldr	r0, [r5, #4]
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800bd20:	b289      	uxth	r1, r1
 800bd22:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800bd24:	f7fe fbd4 	bl	800a4d0 <pbuf_realloc>
  cseg->next = next;
 800bd28:	602c      	str	r4, [r5, #0]
}
 800bd2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tcp_segs_free(next);
 800bd2c:	4620      	mov	r0, r4
    next = NULL;
 800bd2e:	2400      	movs	r4, #0
    tcp_segs_free(next);
 800bd30:	f7fe ff40 	bl	800abb4 <tcp_segs_free>
  cseg->next = next;
 800bd34:	602c      	str	r4, [r5, #0]
}
 800bd36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800bd38:	4b04      	ldr	r3, [pc, #16]	; (800bd4c <tcp_oos_insert_segment+0x9c>)
 800bd3a:	f240 421f 	movw	r2, #1055	; 0x41f
 800bd3e:	4904      	ldr	r1, [pc, #16]	; (800bd50 <tcp_oos_insert_segment+0xa0>)
 800bd40:	4804      	ldr	r0, [pc, #16]	; (800bd54 <tcp_oos_insert_segment+0xa4>)
 800bd42:	f005 fc5d 	bl	8011600 <iprintf>
 800bd46:	e7b8      	b.n	800bcba <tcp_oos_insert_segment+0xa>
 800bd48:	2400e68c 	.word	0x2400e68c
 800bd4c:	08013e00 	.word	0x08013e00
 800bd50:	08013e34 	.word	0x08013e34
 800bd54:	080124d0 	.word	0x080124d0

0800bd58 <tcp_input_delayed_close>:
{
 800bd58:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800bd5a:	4604      	mov	r4, r0
 800bd5c:	b1c8      	cbz	r0, 800bd92 <tcp_input_delayed_close+0x3a>
  if (recv_flags & TF_CLOSED) {
 800bd5e:	4b11      	ldr	r3, [pc, #68]	; (800bda4 <tcp_input_delayed_close+0x4c>)
 800bd60:	781b      	ldrb	r3, [r3, #0]
 800bd62:	f013 0310 	ands.w	r3, r3, #16
 800bd66:	d101      	bne.n	800bd6c <tcp_input_delayed_close+0x14>
  return 0;
 800bd68:	4618      	mov	r0, r3
}
 800bd6a:	bd10      	pop	{r4, pc}
    if (!(pcb->flags & TF_RXCLOSED)) {
 800bd6c:	8b63      	ldrh	r3, [r4, #26]
 800bd6e:	06db      	lsls	r3, r3, #27
 800bd70:	d406      	bmi.n	800bd80 <tcp_input_delayed_close+0x28>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800bd72:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800bd76:	b11b      	cbz	r3, 800bd80 <tcp_input_delayed_close+0x28>
 800bd78:	f06f 010e 	mvn.w	r1, #14
 800bd7c:	6920      	ldr	r0, [r4, #16]
 800bd7e:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800bd80:	4621      	mov	r1, r4
 800bd82:	4809      	ldr	r0, [pc, #36]	; (800bda8 <tcp_input_delayed_close+0x50>)
 800bd84:	f7ff fada 	bl	800b33c <tcp_pcb_remove>
    tcp_free(pcb);
 800bd88:	4620      	mov	r0, r4
 800bd8a:	f7fe fda1 	bl	800a8d0 <tcp_free>
 800bd8e:	2001      	movs	r0, #1
}
 800bd90:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800bd92:	4b06      	ldr	r3, [pc, #24]	; (800bdac <tcp_input_delayed_close+0x54>)
 800bd94:	f240 225a 	movw	r2, #602	; 0x25a
 800bd98:	4905      	ldr	r1, [pc, #20]	; (800bdb0 <tcp_input_delayed_close+0x58>)
 800bd9a:	4806      	ldr	r0, [pc, #24]	; (800bdb4 <tcp_input_delayed_close+0x5c>)
 800bd9c:	f005 fc30 	bl	8011600 <iprintf>
 800bda0:	e7dd      	b.n	800bd5e <tcp_input_delayed_close+0x6>
 800bda2:	bf00      	nop
 800bda4:	2400e688 	.word	0x2400e688
 800bda8:	2400e64c 	.word	0x2400e64c
 800bdac:	08013e00 	.word	0x08013e00
 800bdb0:	08013e5c 	.word	0x08013e5c
 800bdb4:	080124d0 	.word	0x080124d0

0800bdb8 <tcp_free_acked_segments.constprop.0>:
#endif /* TCP_QUEUE_OOSEQ */

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 800bdb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdbc:	b083      	sub	sp, #12
 800bdbe:	9201      	str	r2, [sp, #4]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800bdc0:	2900      	cmp	r1, #0
 800bdc2:	d03d      	beq.n	800be40 <tcp_free_acked_segments.constprop.0+0x88>
 800bdc4:	4607      	mov	r7, r0
 800bdc6:	460c      	mov	r4, r1
 800bdc8:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800be8c <tcp_free_acked_segments.constprop.0+0xd4>
    seg_list = seg_list->next;

    clen = pbuf_clen(next->p);
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800bdcc:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 800be80 <tcp_free_acked_segments.constprop.0+0xc8>
 800bdd0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800be90 <tcp_free_acked_segments.constprop.0+0xd8>
 800bdd4:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 800be88 <tcp_free_acked_segments.constprop.0+0xd0>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800bdd8:	68e3      	ldr	r3, [r4, #12]
 800bdda:	6858      	ldr	r0, [r3, #4]
 800bddc:	f7fd fae0 	bl	80093a0 <lwip_htonl>
 800bde0:	68e3      	ldr	r3, [r4, #12]
 800bde2:	4605      	mov	r5, r0
 800bde4:	8926      	ldrh	r6, [r4, #8]
 800bde6:	8998      	ldrh	r0, [r3, #12]
 800bde8:	f7fd fad6 	bl	8009398 <lwip_htons>
 800bdec:	f8d8 3000 	ldr.w	r3, [r8]
 800bdf0:	f010 0003 	ands.w	r0, r0, #3
 800bdf4:	eba5 0503 	sub.w	r5, r5, r3
 800bdf8:	bf18      	it	ne
 800bdfa:	2001      	movne	r0, #1
 800bdfc:	4435      	add	r5, r6
 800bdfe:	4405      	add	r5, r0
  while (seg_list != NULL &&
 800be00:	2d00      	cmp	r5, #0
 800be02:	dc36      	bgt.n	800be72 <tcp_free_acked_segments.constprop.0+0xba>
    seg_list = seg_list->next;
 800be04:	e9d4 6000 	ldrd	r6, r0, [r4]
    clen = pbuf_clen(next->p);
 800be08:	f7fe fbd6 	bl	800a5b8 <pbuf_clen>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800be0c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
    clen = pbuf_clen(next->p);
 800be10:	4605      	mov	r5, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800be12:	4298      	cmp	r0, r3
 800be14:	d823      	bhi.n	800be5e <tcp_free_acked_segments.constprop.0+0xa6>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800be16:	4919      	ldr	r1, [pc, #100]	; (800be7c <tcp_free_acked_segments.constprop.0+0xc4>)
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800be18:	1b5b      	subs	r3, r3, r5
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800be1a:	8922      	ldrh	r2, [r4, #8]
    tcp_seg_free(next);
 800be1c:	4620      	mov	r0, r4
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800be1e:	880d      	ldrh	r5, [r1, #0]
 800be20:	4634      	mov	r4, r6
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800be22:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800be26:	1953      	adds	r3, r2, r5
 800be28:	800b      	strh	r3, [r1, #0]
    tcp_seg_free(next);
 800be2a:	f7fe fed5 	bl	800abd8 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800be2e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800be32:	b11b      	cbz	r3, 800be3c <tcp_free_acked_segments.constprop.0+0x84>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800be34:	9b01      	ldr	r3, [sp, #4]
 800be36:	ea53 0506 	orrs.w	r5, r3, r6
 800be3a:	d005      	beq.n	800be48 <tcp_free_acked_segments.constprop.0+0x90>
  while (seg_list != NULL &&
 800be3c:	2e00      	cmp	r6, #0
 800be3e:	d1cb      	bne.n	800bdd8 <tcp_free_acked_segments.constprop.0+0x20>
 800be40:	2000      	movs	r0, #0
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
}
 800be42:	b003      	add	sp, #12
 800be44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("tcp_receive: valid queue length",
 800be48:	4b0d      	ldr	r3, [pc, #52]	; (800be80 <tcp_free_acked_segments.constprop.0+0xc8>)
 800be4a:	f240 4261 	movw	r2, #1121	; 0x461
 800be4e:	490d      	ldr	r1, [pc, #52]	; (800be84 <tcp_free_acked_segments.constprop.0+0xcc>)
 800be50:	480d      	ldr	r0, [pc, #52]	; (800be88 <tcp_free_acked_segments.constprop.0+0xd0>)
 800be52:	f005 fbd5 	bl	8011600 <iprintf>
 800be56:	4628      	mov	r0, r5
}
 800be58:	b003      	add	sp, #12
 800be5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800be5e:	465b      	mov	r3, fp
 800be60:	f240 4257 	movw	r2, #1111	; 0x457
 800be64:	4651      	mov	r1, sl
 800be66:	4648      	mov	r0, r9
 800be68:	f005 fbca 	bl	8011600 <iprintf>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800be6c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800be70:	e7d1      	b.n	800be16 <tcp_free_acked_segments.constprop.0+0x5e>
 800be72:	4620      	mov	r0, r4
}
 800be74:	b003      	add	sp, #12
 800be76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be7a:	bf00      	nop
 800be7c:	2400e680 	.word	0x2400e680
 800be80:	08013e00 	.word	0x08013e00
 800be84:	08013eac 	.word	0x08013eac
 800be88:	080124d0 	.word	0x080124d0
 800be8c:	2400e668 	.word	0x2400e668
 800be90:	08013e84 	.word	0x08013e84

0800be94 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800be94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800be98:	4604      	mov	r4, r0
 800be9a:	2800      	cmp	r0, #0
 800be9c:	f000 81e2 	beq.w	800c264 <tcp_receive+0x3d0>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800bea0:	7d23      	ldrb	r3, [r4, #20]
 800bea2:	2b03      	cmp	r3, #3
 800bea4:	f240 80f5 	bls.w	800c092 <tcp_receive+0x1fe>

  if (flags & TCP_ACK) {
 800bea8:	4baf      	ldr	r3, [pc, #700]	; (800c168 <tcp_receive+0x2d4>)
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800beaa:	4eb0      	ldr	r6, [pc, #704]	; (800c16c <tcp_receive+0x2d8>)
  if (flags & TCP_ACK) {
 800beac:	781b      	ldrb	r3, [r3, #0]
 800beae:	06d8      	lsls	r0, r3, #27
 800beb0:	d470      	bmi.n	800bf94 <tcp_receive+0x100>
 800beb2:	4faf      	ldr	r7, [pc, #700]	; (800c170 <tcp_receive+0x2dc>)

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800beb4:	883b      	ldrh	r3, [r7, #0]
 800beb6:	b113      	cbz	r3, 800bebe <tcp_receive+0x2a>
 800beb8:	7d22      	ldrb	r2, [r4, #20]
 800beba:	2a06      	cmp	r2, #6
 800bebc:	d911      	bls.n	800bee2 <tcp_receive+0x4e>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800bebe:	6832      	ldr	r2, [r6, #0]
      tcp_send_empty_ack(pcb);
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800bec0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bec2:	1ad1      	subs	r1, r2, r3
 800bec4:	2900      	cmp	r1, #0
 800bec6:	db06      	blt.n	800bed6 <tcp_receive+0x42>
 800bec8:	f1c3 0301 	rsb	r3, r3, #1
 800becc:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800bece:	1a5b      	subs	r3, r3, r1
 800bed0:	4413      	add	r3, r2
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	dd03      	ble.n	800bede <tcp_receive+0x4a>
      tcp_ack_now(pcb);
 800bed6:	8b63      	ldrh	r3, [r4, #26]
 800bed8:	f043 0302 	orr.w	r3, r3, #2
 800bedc:	8363      	strh	r3, [r4, #26]
    }
  }
}
 800bede:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800bee2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bee4:	6832      	ldr	r2, [r6, #0]
 800bee6:	eba1 0802 	sub.w	r8, r1, r2
 800beea:	f1b8 0f01 	cmp.w	r8, #1
 800beee:	d406      	bmi.n	800befe <tcp_receive+0x6a>
 800bef0:	f1c2 0001 	rsb	r0, r2, #1
 800bef4:	1ac3      	subs	r3, r0, r3
 800bef6:	440b      	add	r3, r1
 800bef8:	2b00      	cmp	r3, #0
 800befa:	f340 81c2 	ble.w	800c282 <tcp_receive+0x3ee>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800befe:	1a53      	subs	r3, r2, r1
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	f2c0 81b9 	blt.w	800c278 <tcp_receive+0x3e4>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800bf06:	f102 0c01 	add.w	ip, r2, #1
 800bf0a:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 800bf0c:	ebac 0301 	sub.w	r3, ip, r1
 800bf10:	1a1b      	subs	r3, r3, r0
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	dc39      	bgt.n	800bf8a <tcp_receive+0xf6>
      if (pcb->rcv_nxt == seqno) {
 800bf16:	4291      	cmp	r1, r2
 800bf18:	f000 8452 	beq.w	800c7c0 <tcp_receive+0x92c>
        if (pcb->ooseq == NULL) {
 800bf1c:	6f65      	ldr	r5, [r4, #116]	; 0x74
 800bf1e:	2d00      	cmp	r5, #0
 800bf20:	f000 835d 	beq.w	800c5de <tcp_receive+0x74a>
            if (seqno == next->tcphdr->seqno) {
 800bf24:	68e8      	ldr	r0, [r5, #12]
          struct tcp_seg *next, *prev = NULL;
 800bf26:	f04f 0800 	mov.w	r8, #0
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800bf2a:	f102 3eff 	add.w	lr, r2, #4294967295
            if (seqno == next->tcphdr->seqno) {
 800bf2e:	6843      	ldr	r3, [r0, #4]
 800bf30:	429a      	cmp	r2, r3
 800bf32:	d019      	beq.n	800bf68 <tcp_receive+0xd4>
              if (prev == NULL) {
 800bf34:	f1b8 0f00 	cmp.w	r8, #0
 800bf38:	f000 812c 	beq.w	800c194 <tcp_receive+0x300>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800bf3c:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800bf40:	6849      	ldr	r1, [r1, #4]
 800bf42:	ebae 0101 	sub.w	r1, lr, r1
 800bf46:	2900      	cmp	r1, #0
 800bf48:	db04      	blt.n	800bf54 <tcp_receive+0xc0>
 800bf4a:	ebac 0103 	sub.w	r1, ip, r3
 800bf4e:	2900      	cmp	r1, #0
 800bf50:	f340 834e 	ble.w	800c5f0 <tcp_receive+0x75c>
              if (next->next == NULL &&
 800bf54:	6829      	ldr	r1, [r5, #0]
 800bf56:	46a8      	mov	r8, r5
 800bf58:	2900      	cmp	r1, #0
 800bf5a:	f000 812a 	beq.w	800c1b2 <tcp_receive+0x31e>
 800bf5e:	460d      	mov	r5, r1
            if (seqno == next->tcphdr->seqno) {
 800bf60:	68e8      	ldr	r0, [r5, #12]
 800bf62:	6843      	ldr	r3, [r0, #4]
 800bf64:	429a      	cmp	r2, r3
 800bf66:	d1e5      	bne.n	800bf34 <tcp_receive+0xa0>
              if (inseg.len > next->len) {
 800bf68:	4882      	ldr	r0, [pc, #520]	; (800c174 <tcp_receive+0x2e0>)
 800bf6a:	892b      	ldrh	r3, [r5, #8]
 800bf6c:	8902      	ldrh	r2, [r0, #8]
 800bf6e:	429a      	cmp	r2, r3
 800bf70:	d90b      	bls.n	800bf8a <tcp_receive+0xf6>
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800bf72:	f7fe fe3f 	bl	800abf4 <tcp_seg_copy>
                if (cseg != NULL) {
 800bf76:	b140      	cbz	r0, 800bf8a <tcp_receive+0xf6>
                  if (prev != NULL) {
 800bf78:	f1b8 0f00 	cmp.w	r8, #0
 800bf7c:	f000 83f7 	beq.w	800c76e <tcp_receive+0x8da>
                    prev->next = cseg;
 800bf80:	f8c8 0000 	str.w	r0, [r8]
                  tcp_oos_insert_segment(cseg, next);
 800bf84:	4629      	mov	r1, r5
 800bf86:	f7ff fe93 	bl	800bcb0 <tcp_oos_insert_segment>
        tcp_send_empty_ack(pcb);
 800bf8a:	4620      	mov	r0, r4
}
 800bf8c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        tcp_send_empty_ack(pcb);
 800bf90:	f002 b9f6 	b.w	800e380 <tcp_send_empty_ack>
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800bf94:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800bf96:	6832      	ldr	r2, [r6, #0]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800bf98:	f8b4 e060 	ldrh.w	lr, [r4, #96]	; 0x60
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800bf9c:	1a99      	subs	r1, r3, r2
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800bf9e:	f8d4 c058 	ldr.w	ip, [r4, #88]	; 0x58
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800bfa2:	2900      	cmp	r1, #0
 800bfa4:	db7d      	blt.n	800c0a2 <tcp_receive+0x20e>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800bfa6:	4d74      	ldr	r5, [pc, #464]	; (800c178 <tcp_receive+0x2e4>)
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800bfa8:	4293      	cmp	r3, r2
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800bfaa:	682b      	ldr	r3, [r5, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800bfac:	f000 80cb 	beq.w	800c146 <tcp_receive+0x2b2>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800bfb0:	459c      	cmp	ip, r3
 800bfb2:	f000 80d1 	beq.w	800c158 <tcp_receive+0x2c4>
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800bfb6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800bfb8:	1a19      	subs	r1, r3, r0
 800bfba:	2900      	cmp	r1, #0
 800bfbc:	f340 8085 	ble.w	800c0ca <tcp_receive+0x236>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bfc0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800bfc2:	1a9a      	subs	r2, r3, r2
 800bfc4:	2a00      	cmp	r2, #0
 800bfc6:	f300 808f 	bgt.w	800c0e8 <tcp_receive+0x254>
      if (pcb->flags & TF_INFR) {
 800bfca:	8b62      	ldrh	r2, [r4, #26]
 800bfcc:	0750      	lsls	r0, r2, #29
 800bfce:	d509      	bpl.n	800bfe4 <tcp_receive+0x150>
        tcp_clear_flags(pcb, TF_INFR);
 800bfd0:	f022 0204 	bic.w	r2, r2, #4
 800bfd4:	8362      	strh	r2, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 800bfd6:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 800bfda:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
        pcb->bytes_acked = 0;
 800bfde:	2200      	movs	r2, #0
 800bfe0:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800bfe4:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      pcb->lastack = ackno;
 800bfe8:	6463      	str	r3, [r4, #68]	; 0x44
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800bfea:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      if (pcb->state >= ESTABLISHED) {
 800bfec:	7d22      	ldrb	r2, [r4, #20]
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800bfee:	eb03 03e0 	add.w	r3, r3, r0, asr #3
      if (pcb->state >= ESTABLISHED) {
 800bff2:	2a03      	cmp	r2, #3
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800bff4:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->nrtx = 0;
 800bff8:	f04f 0300 	mov.w	r3, #0
 800bffc:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
      if (pcb->state >= ESTABLISHED) {
 800c000:	d913      	bls.n	800c02a <tcp_receive+0x196>
        if (pcb->cwnd < pcb->ssthresh) {
 800c002:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800c006:	b289      	uxth	r1, r1
        if (pcb->cwnd < pcb->ssthresh) {
 800c008:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 800c00c:	429a      	cmp	r2, r3
 800c00e:	f200 81d1 	bhi.w	800c3b4 <tcp_receive+0x520>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800c012:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800c016:	4411      	add	r1, r2
 800c018:	b289      	uxth	r1, r1
 800c01a:	428a      	cmp	r2, r1
 800c01c:	f200 82c6 	bhi.w	800c5ac <tcp_receive+0x718>
          if (pcb->bytes_acked >= pcb->cwnd) {
 800c020:	428b      	cmp	r3, r1
 800c022:	f240 82c5 	bls.w	800c5b0 <tcp_receive+0x71c>
 800c026:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800c02a:	4620      	mov	r0, r4
 800c02c:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	; 0x6c
 800c030:	f7ff fec2 	bl	800bdb8 <tcp_free_acked_segments.constprop.0>
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800c034:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800c036:	4602      	mov	r2, r0
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800c038:	6720      	str	r0, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800c03a:	4620      	mov	r0, r4
 800c03c:	f7ff febc 	bl	800bdb8 <tcp_free_acked_segments.constprop.0>
      if (pcb->unacked == NULL) {
 800c040:	6f22      	ldr	r2, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800c042:	66e0      	str	r0, [r4, #108]	; 0x6c
      if (pcb->unacked == NULL) {
 800c044:	fab2 f382 	clz	r3, r2
 800c048:	095b      	lsrs	r3, r3, #5
 800c04a:	425b      	negs	r3, r3
 800c04c:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 800c04e:	2300      	movs	r3, #0
 800c050:	7723      	strb	r3, [r4, #28]
      if (pcb->unsent == NULL) {
 800c052:	2800      	cmp	r0, #0
 800c054:	f000 81ab 	beq.w	800c3ae <tcp_receive+0x51a>
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800c058:	4b48      	ldr	r3, [pc, #288]	; (800c17c <tcp_receive+0x2e8>)
 800c05a:	8819      	ldrh	r1, [r3, #0]
 800c05c:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800c060:	440b      	add	r3, r1
 800c062:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      if (pcb->flags & TF_RTO) {
 800c066:	8b63      	ldrh	r3, [r4, #26]
 800c068:	0519      	lsls	r1, r3, #20
 800c06a:	f140 8103 	bpl.w	800c274 <tcp_receive+0x3e0>
        if (pcb->unacked == NULL) {
 800c06e:	2a00      	cmp	r2, #0
 800c070:	f000 81b7 	beq.w	800c3e2 <tcp_receive+0x54e>
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800c074:	68d3      	ldr	r3, [r2, #12]
 800c076:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 800c078:	6858      	ldr	r0, [r3, #4]
 800c07a:	f7fd f991 	bl	80093a0 <lwip_htonl>
 800c07e:	1a38      	subs	r0, r7, r0
 800c080:	2800      	cmp	r0, #0
 800c082:	f300 80f7 	bgt.w	800c274 <tcp_receive+0x3e0>
          tcp_clear_flags(pcb, TF_RTO);
 800c086:	8b63      	ldrh	r3, [r4, #26]
 800c088:	4f39      	ldr	r7, [pc, #228]	; (800c170 <tcp_receive+0x2dc>)
 800c08a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c08e:	8363      	strh	r3, [r4, #26]
 800c090:	e02e      	b.n	800c0f0 <tcp_receive+0x25c>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800c092:	4b3b      	ldr	r3, [pc, #236]	; (800c180 <tcp_receive+0x2ec>)
 800c094:	f240 427c 	movw	r2, #1148	; 0x47c
 800c098:	493a      	ldr	r1, [pc, #232]	; (800c184 <tcp_receive+0x2f0>)
 800c09a:	483b      	ldr	r0, [pc, #236]	; (800c188 <tcp_receive+0x2f4>)
 800c09c:	f005 fab0 	bl	8011600 <iprintf>
 800c0a0:	e702      	b.n	800bea8 <tcp_receive+0x14>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c0a2:	4b3a      	ldr	r3, [pc, #232]	; (800c18c <tcp_receive+0x2f8>)
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c0a4:	4d34      	ldr	r5, [pc, #208]	; (800c178 <tcp_receive+0x2e4>)
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	89d9      	ldrh	r1, [r3, #14]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c0aa:	682b      	ldr	r3, [r5, #0]
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800c0ac:	f8b4 0062 	ldrh.w	r0, [r4, #98]	; 0x62
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800c0b0:	f8a4 1060 	strh.w	r1, [r4, #96]	; 0x60
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800c0b4:	4288      	cmp	r0, r1
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800c0b6:	6c60      	ldr	r0, [r4, #68]	; 0x44
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c0b8:	bf38      	it	cc
 800c0ba:	f8a4 1062 	strhcc.w	r1, [r4, #98]	; 0x62
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800c0be:	1a19      	subs	r1, r3, r0
 800c0c0:	2900      	cmp	r1, #0
      pcb->snd_wl2 = ackno;
 800c0c2:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800c0c6:	f73f af7b 	bgt.w	800bfc0 <tcp_receive+0x12c>
      if (tcplen == 0) {
 800c0ca:	4f29      	ldr	r7, [pc, #164]	; (800c170 <tcp_receive+0x2dc>)
 800c0cc:	8839      	ldrh	r1, [r7, #0]
 800c0ce:	b939      	cbnz	r1, 800c0e0 <tcp_receive+0x24c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800c0d0:	44e6      	add	lr, ip
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800c0d2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c0d4:	f8b4 c060 	ldrh.w	ip, [r4, #96]	; 0x60
 800c0d8:	4461      	add	r1, ip
 800c0da:	4571      	cmp	r1, lr
 800c0dc:	f000 8191 	beq.w	800c402 <tcp_receive+0x56e>
        pcb->dupacks = 0;
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c0e6:	e003      	b.n	800c0f0 <tcp_receive+0x25c>
      tcp_send_empty_ack(pcb);
 800c0e8:	4620      	mov	r0, r4
 800c0ea:	4f21      	ldr	r7, [pc, #132]	; (800c170 <tcp_receive+0x2dc>)
 800c0ec:	f002 f948 	bl	800e380 <tcp_send_empty_ack>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800c0f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c0f2:	2900      	cmp	r1, #0
 800c0f4:	f43f aede 	beq.w	800beb4 <tcp_receive+0x20>
 800c0f8:	682b      	ldr	r3, [r5, #0]
 800c0fa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c0fc:	1ad2      	subs	r2, r2, r3
 800c0fe:	2a00      	cmp	r2, #0
 800c100:	f6bf aed8 	bge.w	800beb4 <tcp_receive+0x20>
      m = (s16_t)(m - (pcb->sa >> 3));
 800c104:	f9b4 203c 	ldrsh.w	r2, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800c108:	b289      	uxth	r1, r1
 800c10a:	4b21      	ldr	r3, [pc, #132]	; (800c190 <tcp_receive+0x2fc>)
      m = (s16_t)(m - (pcb->sa >> 3));
 800c10c:	f3c2 00cf 	ubfx	r0, r2, #3, #16
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800c110:	881d      	ldrh	r5, [r3, #0]
      m = (s16_t)(m - (pcb->sa >> 3));
 800c112:	1a2b      	subs	r3, r5, r0
 800c114:	1a5b      	subs	r3, r3, r1
 800c116:	b29b      	uxth	r3, r3
      pcb->sa = (s16_t)(pcb->sa + m);
 800c118:	441a      	add	r2, r3
      if (m < 0) {
 800c11a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
      pcb->sa = (s16_t)(pcb->sa + m);
 800c11e:	b212      	sxth	r2, r2
 800c120:	87a2      	strh	r2, [r4, #60]	; 0x3c
      if (m < 0) {
 800c122:	d002      	beq.n	800c12a <tcp_receive+0x296>
        m = (s16_t) - m;
 800c124:	1b40      	subs	r0, r0, r5
 800c126:	4401      	add	r1, r0
 800c128:	b28b      	uxth	r3, r1
      m = (s16_t)(m - (pcb->sv >> 2));
 800c12a:	f9b4 103e 	ldrsh.w	r1, [r4, #62]	; 0x3e
      pcb->sv = (s16_t)(pcb->sv + m);
 800c12e:	eba1 01a1 	sub.w	r1, r1, r1, asr #2
 800c132:	440b      	add	r3, r1
 800c134:	b29b      	uxth	r3, r3
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c136:	eb03 02e2 	add.w	r2, r3, r2, asr #3
      pcb->sv = (s16_t)(pcb->sv + m);
 800c13a:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rttest = 0;
 800c13c:	2300      	movs	r3, #0
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c13e:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      pcb->rttest = 0;
 800c142:	6363      	str	r3, [r4, #52]	; 0x34
 800c144:	e6b6      	b.n	800beb4 <tcp_receive+0x20>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c146:	ebac 0103 	sub.w	r1, ip, r3
 800c14a:	2900      	cmp	r1, #0
 800c14c:	f6bf af30 	bge.w	800bfb0 <tcp_receive+0x11c>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c150:	490e      	ldr	r1, [pc, #56]	; (800c18c <tcp_receive+0x2f8>)
 800c152:	6809      	ldr	r1, [r1, #0]
 800c154:	89c9      	ldrh	r1, [r1, #14]
 800c156:	e7a9      	b.n	800c0ac <tcp_receive+0x218>
 800c158:	490c      	ldr	r1, [pc, #48]	; (800c18c <tcp_receive+0x2f8>)
 800c15a:	6809      	ldr	r1, [r1, #0]
 800c15c:	89c9      	ldrh	r1, [r1, #14]
 800c15e:	458e      	cmp	lr, r1
 800c160:	f4bf af29 	bcs.w	800bfb6 <tcp_receive+0x122>
 800c164:	e7a2      	b.n	800c0ac <tcp_receive+0x218>
 800c166:	bf00      	nop
 800c168:	2400e66c 	.word	0x2400e66c
 800c16c:	2400e68c 	.word	0x2400e68c
 800c170:	2400e6a6 	.word	0x2400e6a6
 800c174:	2400e670 	.word	0x2400e670
 800c178:	2400e668 	.word	0x2400e668
 800c17c:	2400e680 	.word	0x2400e680
 800c180:	08013e00 	.word	0x08013e00
 800c184:	08013ee8 	.word	0x08013ee8
 800c188:	080124d0 	.word	0x080124d0
 800c18c:	2400e698 	.word	0x2400e698
 800c190:	2400e65c 	.word	0x2400e65c
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800c194:	1ad1      	subs	r1, r2, r3
 800c196:	2900      	cmp	r1, #0
 800c198:	f6bf aedc 	bge.w	800bf54 <tcp_receive+0xc0>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c19c:	48af      	ldr	r0, [pc, #700]	; (800c45c <tcp_receive+0x5c8>)
 800c19e:	f7fe fd29 	bl	800abf4 <tcp_seg_copy>
                  if (cseg != NULL) {
 800c1a2:	2800      	cmp	r0, #0
 800c1a4:	f43f aef1 	beq.w	800bf8a <tcp_receive+0xf6>
                    tcp_oos_insert_segment(cseg, next);
 800c1a8:	4629      	mov	r1, r5
                    pcb->ooseq = cseg;
 800c1aa:	6760      	str	r0, [r4, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800c1ac:	f7ff fd80 	bl	800bcb0 <tcp_oos_insert_segment>
 800c1b0:	e6eb      	b.n	800bf8a <tcp_receive+0xf6>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800c1b2:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	f77f aee8 	ble.w	800bf8a <tcp_receive+0xf6>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c1ba:	8980      	ldrh	r0, [r0, #12]
 800c1bc:	f7fd f8ec 	bl	8009398 <lwip_htons>
 800c1c0:	07c1      	lsls	r1, r0, #31
 800c1c2:	f53f aee2 	bmi.w	800bf8a <tcp_receive+0xf6>
                next->next = tcp_seg_copy(&inseg);
 800c1c6:	48a5      	ldr	r0, [pc, #660]	; (800c45c <tcp_receive+0x5c8>)
 800c1c8:	f7fe fd14 	bl	800abf4 <tcp_seg_copy>
 800c1cc:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 800c1ce:	2800      	cmp	r0, #0
 800c1d0:	f43f aedb 	beq.w	800bf8a <tcp_receive+0xf6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800c1d4:	68eb      	ldr	r3, [r5, #12]
 800c1d6:	892a      	ldrh	r2, [r5, #8]
 800c1d8:	6859      	ldr	r1, [r3, #4]
 800c1da:	6833      	ldr	r3, [r6, #0]
 800c1dc:	440a      	add	r2, r1
 800c1de:	1ad2      	subs	r2, r2, r3
 800c1e0:	2a00      	cmp	r2, #0
 800c1e2:	dd05      	ble.n	800c1f0 <tcp_receive+0x35c>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800c1e4:	1a5b      	subs	r3, r3, r1
                    pbuf_realloc(next->p, next->len);
 800c1e6:	6868      	ldr	r0, [r5, #4]
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800c1e8:	b299      	uxth	r1, r3
 800c1ea:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 800c1ec:	f7fe f970 	bl	800a4d0 <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800c1f0:	6832      	ldr	r2, [r6, #0]
 800c1f2:	883b      	ldrh	r3, [r7, #0]
 800c1f4:	4413      	add	r3, r2
 800c1f6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c1f8:	1a9b      	subs	r3, r3, r2
 800c1fa:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800c1fc:	1a9b      	subs	r3, r3, r2
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	f77f aec3 	ble.w	800bf8a <tcp_receive+0xf6>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800c204:	682b      	ldr	r3, [r5, #0]
 800c206:	68db      	ldr	r3, [r3, #12]
 800c208:	8998      	ldrh	r0, [r3, #12]
 800c20a:	f7fd f8c5 	bl	8009398 <lwip_htons>
 800c20e:	07c2      	lsls	r2, r0, #31
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800c210:	682b      	ldr	r3, [r5, #0]
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800c212:	f100 82c3 	bmi.w	800c79c <tcp_receive+0x908>
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800c216:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800c218:	6832      	ldr	r2, [r6, #0]
                    pbuf_realloc(next->next->p, next->next->len);
 800c21a:	6858      	ldr	r0, [r3, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800c21c:	1a89      	subs	r1, r1, r2
 800c21e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c220:	4411      	add	r1, r2
 800c222:	b289      	uxth	r1, r1
 800c224:	8119      	strh	r1, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800c226:	f7fe f953 	bl	800a4d0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800c22a:	682b      	ldr	r3, [r5, #0]
 800c22c:	891d      	ldrh	r5, [r3, #8]
 800c22e:	68db      	ldr	r3, [r3, #12]
 800c230:	8998      	ldrh	r0, [r3, #12]
 800c232:	f7fd f8b1 	bl	8009398 <lwip_htons>
 800c236:	f010 0003 	ands.w	r0, r0, #3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c23a:	6831      	ldr	r1, [r6, #0]
                    tcplen = TCP_TCPLEN(next->next);
 800c23c:	bf18      	it	ne
 800c23e:	2001      	movne	r0, #1
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c240:	8d22      	ldrh	r2, [r4, #40]	; 0x28
                    tcplen = TCP_TCPLEN(next->next);
 800c242:	182b      	adds	r3, r5, r0
 800c244:	b29b      	uxth	r3, r3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c246:	4419      	add	r1, r3
                    tcplen = TCP_TCPLEN(next->next);
 800c248:	803b      	strh	r3, [r7, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c24a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c24c:	4413      	add	r3, r2
 800c24e:	4299      	cmp	r1, r3
 800c250:	f43f ae9b 	beq.w	800bf8a <tcp_receive+0xf6>
 800c254:	4b82      	ldr	r3, [pc, #520]	; (800c460 <tcp_receive+0x5cc>)
 800c256:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800c25a:	4982      	ldr	r1, [pc, #520]	; (800c464 <tcp_receive+0x5d0>)
 800c25c:	4882      	ldr	r0, [pc, #520]	; (800c468 <tcp_receive+0x5d4>)
 800c25e:	f005 f9cf 	bl	8011600 <iprintf>
 800c262:	e692      	b.n	800bf8a <tcp_receive+0xf6>
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800c264:	4b7e      	ldr	r3, [pc, #504]	; (800c460 <tcp_receive+0x5cc>)
 800c266:	f240 427b 	movw	r2, #1147	; 0x47b
 800c26a:	4980      	ldr	r1, [pc, #512]	; (800c46c <tcp_receive+0x5d8>)
 800c26c:	487e      	ldr	r0, [pc, #504]	; (800c468 <tcp_receive+0x5d4>)
 800c26e:	f005 f9c7 	bl	8011600 <iprintf>
 800c272:	e615      	b.n	800bea0 <tcp_receive+0xc>
 800c274:	4f7e      	ldr	r7, [pc, #504]	; (800c470 <tcp_receive+0x5dc>)
 800c276:	e73b      	b.n	800c0f0 <tcp_receive+0x25c>
        tcp_ack_now(pcb);
 800c278:	8b63      	ldrh	r3, [r4, #26]
 800c27a:	f043 0302 	orr.w	r3, r3, #2
 800c27e:	8363      	strh	r3, [r4, #26]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c280:	e683      	b.n	800bf8a <tcp_receive+0xf6>
      struct pbuf *p = inseg.p;
 800c282:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 800c45c <tcp_receive+0x5c8>
 800c286:	f8d9 5004 	ldr.w	r5, [r9, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800c28a:	2d00      	cmp	r5, #0
 800c28c:	f000 8186 	beq.w	800c59c <tcp_receive+0x708>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800c290:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800c294:	4598      	cmp	r8, r3
 800c296:	f200 80d9 	bhi.w	800c44c <tcp_receive+0x5b8>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800c29a:	f8d9 3004 	ldr.w	r3, [r9, #4]
      off = (u16_t)off32;
 800c29e:	fa1f f888 	uxth.w	r8, r8
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800c2a2:	891a      	ldrh	r2, [r3, #8]
 800c2a4:	4542      	cmp	r2, r8
 800c2a6:	f0c0 80c6 	bcc.w	800c436 <tcp_receive+0x5a2>
      inseg.len -= off;
 800c2aa:	f8b9 3008 	ldrh.w	r3, [r9, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800c2ae:	eba2 0208 	sub.w	r2, r2, r8
      inseg.len -= off;
 800c2b2:	eba3 0308 	sub.w	r3, r3, r8
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800c2b6:	b292      	uxth	r2, r2
      inseg.len -= off;
 800c2b8:	f8a9 3008 	strh.w	r3, [r9, #8]
      while (p->len < off) {
 800c2bc:	896b      	ldrh	r3, [r5, #10]
 800c2be:	4543      	cmp	r3, r8
 800c2c0:	d20a      	bcs.n	800c2d8 <tcp_receive+0x444>
        p->len = 0;
 800c2c2:	2100      	movs	r1, #0
        off -= p->len;
 800c2c4:	eba8 0303 	sub.w	r3, r8, r3
        p->len = 0;
 800c2c8:	8169      	strh	r1, [r5, #10]
        p->tot_len = new_tot_len;
 800c2ca:	812a      	strh	r2, [r5, #8]
        p = p->next;
 800c2cc:	682d      	ldr	r5, [r5, #0]
        off -= p->len;
 800c2ce:	fa1f f883 	uxth.w	r8, r3
      while (p->len < off) {
 800c2d2:	896b      	ldrh	r3, [r5, #10]
 800c2d4:	4543      	cmp	r3, r8
 800c2d6:	d3f5      	bcc.n	800c2c4 <tcp_receive+0x430>
      pbuf_remove_header(p, off);
 800c2d8:	4641      	mov	r1, r8
 800c2da:	4628      	mov	r0, r5
 800c2dc:	f7fd ff72 	bl	800a1c4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800c2e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2e2:	f8d9 200c 	ldr.w	r2, [r9, #12]
 800c2e6:	6033      	str	r3, [r6, #0]
 800c2e8:	6053      	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c2ea:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	f43f ae4c 	beq.w	800bf8a <tcp_receive+0xf6>
        tcplen = TCP_TCPLEN(&inseg);
 800c2f2:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800c2f6:	f8b9 5008 	ldrh.w	r5, [r9, #8]
 800c2fa:	8998      	ldrh	r0, [r3, #12]
 800c2fc:	f7fd f84c 	bl	8009398 <lwip_htons>
 800c300:	f010 0003 	ands.w	r0, r0, #3
        if (tcplen > pcb->rcv_wnd) {
 800c304:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 800c306:	bf18      	it	ne
 800c308:	2001      	movne	r0, #1
 800c30a:	182b      	adds	r3, r5, r0
 800c30c:	b29b      	uxth	r3, r3
        if (tcplen > pcb->rcv_wnd) {
 800c30e:	429a      	cmp	r2, r3
        tcplen = TCP_TCPLEN(&inseg);
 800c310:	803b      	strh	r3, [r7, #0]
        if (tcplen > pcb->rcv_wnd) {
 800c312:	f0c0 8197 	bcc.w	800c644 <tcp_receive+0x7b0>
        if (pcb->ooseq != NULL) {
 800c316:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800c318:	2b00      	cmp	r3, #0
 800c31a:	f000 80b6 	beq.w	800c48a <tcp_receive+0x5f6>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c31e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800c322:	8998      	ldrh	r0, [r3, #12]
 800c324:	f7fd f838 	bl	8009398 <lwip_htons>
 800c328:	07c2      	lsls	r2, r0, #31
 800c32a:	f100 80ab 	bmi.w	800c484 <tcp_receive+0x5f0>
            struct tcp_seg *next = pcb->ooseq;
 800c32e:	6f65      	ldr	r5, [r4, #116]	; 0x74
            while (next &&
 800c330:	b955      	cbnz	r5, 800c348 <tcp_receive+0x4b4>
 800c332:	e208      	b.n	800c746 <tcp_receive+0x8b2>
              next = next->next;
 800c334:	f8d5 8000 	ldr.w	r8, [r5]
              tcp_seg_free(tmp);
 800c338:	4628      	mov	r0, r5
 800c33a:	f7fe fc4d 	bl	800abd8 <tcp_seg_free>
            while (next &&
 800c33e:	4645      	mov	r5, r8
 800c340:	f1b8 0f00 	cmp.w	r8, #0
 800c344:	f000 81ff 	beq.w	800c746 <tcp_receive+0x8b2>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800c348:	68e8      	ldr	r0, [r5, #12]
 800c34a:	883a      	ldrh	r2, [r7, #0]
 800c34c:	f8d6 e000 	ldr.w	lr, [r6]
 800c350:	892b      	ldrh	r3, [r5, #8]
 800c352:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800c356:	eb02 010e 	add.w	r1, r2, lr
 800c35a:	4463      	add	r3, ip
 800c35c:	1acb      	subs	r3, r1, r3
            while (next &&
 800c35e:	2b00      	cmp	r3, #0
 800c360:	f2c0 81b9 	blt.w	800c6d6 <tcp_receive+0x842>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c364:	8980      	ldrh	r0, [r0, #12]
 800c366:	f7fd f817 	bl	8009398 <lwip_htons>
 800c36a:	07c3      	lsls	r3, r0, #31
 800c36c:	d5e2      	bpl.n	800c334 <tcp_receive+0x4a0>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800c36e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800c372:	8998      	ldrh	r0, [r3, #12]
 800c374:	f7fd f810 	bl	8009398 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c378:	0780      	lsls	r0, r0, #30
 800c37a:	d4db      	bmi.n	800c334 <tcp_receive+0x4a0>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800c37c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800c380:	2001      	movs	r0, #1
 800c382:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 800c386:	f7fd f807 	bl	8009398 <lwip_htons>
 800c38a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800c38e:	ea48 0000 	orr.w	r0, r8, r0
                tcplen = TCP_TCPLEN(&inseg);
 800c392:	f8b9 8008 	ldrh.w	r8, [r9, #8]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800c396:	8198      	strh	r0, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800c398:	b280      	uxth	r0, r0
 800c39a:	f7fc fffd 	bl	8009398 <lwip_htons>
 800c39e:	f010 0003 	ands.w	r0, r0, #3
 800c3a2:	bf18      	it	ne
 800c3a4:	2001      	movne	r0, #1
 800c3a6:	4480      	add	r8, r0
 800c3a8:	f8a7 8000 	strh.w	r8, [r7]
 800c3ac:	e7c2      	b.n	800c334 <tcp_receive+0x4a0>
        pcb->unsent_oversize = 0;
 800c3ae:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
 800c3b2:	e651      	b.n	800c058 <tcp_receive+0x1c4>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800c3b4:	8b62      	ldrh	r2, [r4, #26]
 800c3b6:	f412 6f00 	tst.w	r2, #2048	; 0x800
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800c3ba:	8e62      	ldrh	r2, [r4, #50]	; 0x32
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800c3bc:	bf14      	ite	ne
 800c3be:	2001      	movne	r0, #1
 800c3c0:	2002      	moveq	r0, #2
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800c3c2:	fb12 f200 	smulbb	r2, r2, r0
 800c3c6:	b292      	uxth	r2, r2
          TCP_WND_INC(pcb->cwnd, increase);
 800c3c8:	428a      	cmp	r2, r1
 800c3ca:	bf94      	ite	ls
 800c3cc:	1898      	addls	r0, r3, r2
 800c3ce:	1858      	addhi	r0, r3, r1
 800c3d0:	b282      	uxth	r2, r0
 800c3d2:	4293      	cmp	r3, r2
 800c3d4:	f240 80f5 	bls.w	800c5c2 <tcp_receive+0x72e>
 800c3d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c3dc:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 800c3e0:	e623      	b.n	800c02a <tcp_receive+0x196>
          if ((pcb->unsent == NULL) ||
 800c3e2:	b148      	cbz	r0, 800c3f8 <tcp_receive+0x564>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800c3e4:	68c3      	ldr	r3, [r0, #12]
 800c3e6:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 800c3e8:	6858      	ldr	r0, [r3, #4]
 800c3ea:	f7fc ffd9 	bl	80093a0 <lwip_htonl>
 800c3ee:	1a38      	subs	r0, r7, r0
          if ((pcb->unsent == NULL) ||
 800c3f0:	2800      	cmp	r0, #0
 800c3f2:	f73f af3f 	bgt.w	800c274 <tcp_receive+0x3e0>
            tcp_clear_flags(pcb, TF_RTO);
 800c3f6:	8b63      	ldrh	r3, [r4, #26]
 800c3f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c3fc:	4f1c      	ldr	r7, [pc, #112]	; (800c470 <tcp_receive+0x5dc>)
 800c3fe:	8363      	strh	r3, [r4, #26]
 800c400:	e676      	b.n	800c0f0 <tcp_receive+0x25c>
          if (pcb->rtime >= 0) {
 800c402:	8e21      	ldrh	r1, [r4, #48]	; 0x30
            if (pcb->lastack == ackno) {
 800c404:	0409      	lsls	r1, r1, #16
 800c406:	f53f ae6b 	bmi.w	800c0e0 <tcp_receive+0x24c>
 800c40a:	4298      	cmp	r0, r3
 800c40c:	f47f ae68 	bne.w	800c0e0 <tcp_receive+0x24c>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800c410:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
 800c414:	29ff      	cmp	r1, #255	; 0xff
 800c416:	f000 814e 	beq.w	800c6b6 <tcp_receive+0x822>
                ++pcb->dupacks;
 800c41a:	3101      	adds	r1, #1
 800c41c:	b2c9      	uxtb	r1, r1
              if (pcb->dupacks > 3) {
 800c41e:	2903      	cmp	r1, #3
                ++pcb->dupacks;
 800c420:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 800c424:	f200 8147 	bhi.w	800c6b6 <tcp_receive+0x822>
              if (pcb->dupacks >= 3) {
 800c428:	f000 8151 	beq.w	800c6ce <tcp_receive+0x83a>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800c42c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c42e:	2900      	cmp	r1, #0
 800c430:	f47f ae63 	bne.w	800c0fa <tcp_receive+0x266>
 800c434:	e544      	b.n	800bec0 <tcp_receive+0x2c>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800c436:	4b0a      	ldr	r3, [pc, #40]	; (800c460 <tcp_receive+0x5cc>)
 800c438:	f240 5297 	movw	r2, #1431	; 0x597
 800c43c:	490d      	ldr	r1, [pc, #52]	; (800c474 <tcp_receive+0x5e0>)
 800c43e:	480a      	ldr	r0, [pc, #40]	; (800c468 <tcp_receive+0x5d4>)
 800c440:	f005 f8de 	bl	8011600 <iprintf>
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800c444:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c448:	891a      	ldrh	r2, [r3, #8]
 800c44a:	e72e      	b.n	800c2aa <tcp_receive+0x416>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800c44c:	4b04      	ldr	r3, [pc, #16]	; (800c460 <tcp_receive+0x5cc>)
 800c44e:	f240 5295 	movw	r2, #1429	; 0x595
 800c452:	4909      	ldr	r1, [pc, #36]	; (800c478 <tcp_receive+0x5e4>)
 800c454:	4804      	ldr	r0, [pc, #16]	; (800c468 <tcp_receive+0x5d4>)
 800c456:	f005 f8d3 	bl	8011600 <iprintf>
 800c45a:	e71e      	b.n	800c29a <tcp_receive+0x406>
 800c45c:	2400e670 	.word	0x2400e670
 800c460:	08013e00 	.word	0x08013e00
 800c464:	08013f34 	.word	0x08013f34
 800c468:	080124d0 	.word	0x080124d0
 800c46c:	08013ecc 	.word	0x08013ecc
 800c470:	2400e6a6 	.word	0x2400e6a6
 800c474:	08013f24 	.word	0x08013f24
 800c478:	08013f14 	.word	0x08013f14
              pcb->ooseq = pcb->ooseq->next;
 800c47c:	6803      	ldr	r3, [r0, #0]
 800c47e:	6763      	str	r3, [r4, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800c480:	f7fe fbaa 	bl	800abd8 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800c484:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800c486:	2800      	cmp	r0, #0
 800c488:	d1f8      	bne.n	800c47c <tcp_receive+0x5e8>
        pcb->rcv_nxt = seqno + tcplen;
 800c48a:	883a      	ldrh	r2, [r7, #0]
 800c48c:	6831      	ldr	r1, [r6, #0]
 800c48e:	4411      	add	r1, r2
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800c490:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        pcb->rcv_nxt = seqno + tcplen;
 800c492:	6261      	str	r1, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800c494:	4293      	cmp	r3, r2
 800c496:	f0c0 80cb 	bcc.w	800c630 <tcp_receive+0x79c>
        pcb->rcv_wnd -= tcplen;
 800c49a:	1a9b      	subs	r3, r3, r2
        tcp_update_rcv_ann_wnd(pcb);
 800c49c:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 800c49e:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 800c4a0:	f7fe fb12 	bl	800aac8 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 800c4a4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c4a8:	891a      	ldrh	r2, [r3, #8]
 800c4aa:	b122      	cbz	r2, 800c4b6 <tcp_receive+0x622>
          recv_data = inseg.p;
 800c4ac:	4ab1      	ldr	r2, [pc, #708]	; (800c774 <tcp_receive+0x8e0>)
 800c4ae:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	f8c9 3004 	str.w	r3, [r9, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c4b6:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800c4ba:	8998      	ldrh	r0, [r3, #12]
 800c4bc:	f7fc ff6c 	bl	8009398 <lwip_htons>
 800c4c0:	07c2      	lsls	r2, r0, #31
 800c4c2:	d504      	bpl.n	800c4ce <tcp_receive+0x63a>
          recv_flags |= TF_GOT_FIN;
 800c4c4:	4aac      	ldr	r2, [pc, #688]	; (800c778 <tcp_receive+0x8e4>)
 800c4c6:	7813      	ldrb	r3, [r2, #0]
 800c4c8:	f043 0320 	orr.w	r3, r3, #32
 800c4cc:	7013      	strb	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 800c4ce:	6f65      	ldr	r5, [r4, #116]	; 0x74
 800c4d0:	2d00      	cmp	r5, #0
 800c4d2:	d07b      	beq.n	800c5cc <tcp_receive+0x738>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800c4d4:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 800c780 <tcp_receive+0x8ec>
 800c4d8:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 800c798 <tcp_receive+0x904>
 800c4dc:	4fa7      	ldr	r7, [pc, #668]	; (800c77c <tcp_receive+0x8e8>)
 800c4de:	e033      	b.n	800c548 <tcp_receive+0x6b4>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800c4e0:	68eb      	ldr	r3, [r5, #12]
 800c4e2:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800c4e6:	8998      	ldrh	r0, [r3, #12]
 800c4e8:	f7fc ff56 	bl	8009398 <lwip_htons>
 800c4ec:	f010 0003 	ands.w	r0, r0, #3
 800c4f0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800c4f2:	bf18      	it	ne
 800c4f4:	2001      	movne	r0, #1
 800c4f6:	4450      	add	r0, sl
 800c4f8:	1a1b      	subs	r3, r3, r0
          tcp_update_rcv_ann_wnd(pcb);
 800c4fa:	4620      	mov	r0, r4
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800c4fc:	8523      	strh	r3, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 800c4fe:	f7fe fae3 	bl	800aac8 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 800c502:	6869      	ldr	r1, [r5, #4]
 800c504:	890b      	ldrh	r3, [r1, #8]
 800c506:	b13b      	cbz	r3, 800c518 <tcp_receive+0x684>
            if (recv_data) {
 800c508:	4b9a      	ldr	r3, [pc, #616]	; (800c774 <tcp_receive+0x8e0>)
 800c50a:	6818      	ldr	r0, [r3, #0]
 800c50c:	2800      	cmp	r0, #0
 800c50e:	d05b      	beq.n	800c5c8 <tcp_receive+0x734>
              pbuf_cat(recv_data, cseg->p);
 800c510:	f7fe f87c 	bl	800a60c <pbuf_cat>
            cseg->p = NULL;
 800c514:	2300      	movs	r3, #0
 800c516:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c518:	68eb      	ldr	r3, [r5, #12]
 800c51a:	8998      	ldrh	r0, [r3, #12]
 800c51c:	f7fc ff3c 	bl	8009398 <lwip_htons>
 800c520:	07c3      	lsls	r3, r0, #31
 800c522:	d509      	bpl.n	800c538 <tcp_receive+0x6a4>
            recv_flags |= TF_GOT_FIN;
 800c524:	4a94      	ldr	r2, [pc, #592]	; (800c778 <tcp_receive+0x8e4>)
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800c526:	7d21      	ldrb	r1, [r4, #20]
            recv_flags |= TF_GOT_FIN;
 800c528:	7813      	ldrb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800c52a:	2904      	cmp	r1, #4
            recv_flags |= TF_GOT_FIN;
 800c52c:	f043 0320 	orr.w	r3, r3, #32
 800c530:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800c532:	d101      	bne.n	800c538 <tcp_receive+0x6a4>
              pcb->state = CLOSE_WAIT;
 800c534:	2307      	movs	r3, #7
 800c536:	7523      	strb	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 800c538:	682b      	ldr	r3, [r5, #0]
          tcp_seg_free(cseg);
 800c53a:	4628      	mov	r0, r5
          pcb->ooseq = cseg->next;
 800c53c:	6763      	str	r3, [r4, #116]	; 0x74
          tcp_seg_free(cseg);
 800c53e:	f7fe fb4b 	bl	800abd8 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800c542:	6f65      	ldr	r5, [r4, #116]	; 0x74
 800c544:	2d00      	cmp	r5, #0
 800c546:	d041      	beq.n	800c5cc <tcp_receive+0x738>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800c548:	68ea      	ldr	r2, [r5, #12]
        while (pcb->ooseq != NULL &&
 800c54a:	6a61      	ldr	r1, [r4, #36]	; 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800c54c:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 800c54e:	428b      	cmp	r3, r1
 800c550:	d13c      	bne.n	800c5cc <tcp_receive+0x738>
          seqno = pcb->ooseq->tcphdr->seqno;
 800c552:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800c554:	8990      	ldrh	r0, [r2, #12]
 800c556:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800c55a:	f7fc ff1d 	bl	8009398 <lwip_htons>
 800c55e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c560:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800c564:	f8b5 b008 	ldrh.w	fp, [r5, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800c568:	bf18      	it	ne
 800c56a:	2001      	movne	r0, #1
 800c56c:	449a      	add	sl, r3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800c56e:	68eb      	ldr	r3, [r5, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800c570:	4450      	add	r0, sl
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800c572:	f8b4 a028 	ldrh.w	sl, [r4, #40]	; 0x28
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800c576:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800c578:	8998      	ldrh	r0, [r3, #12]
 800c57a:	f7fc ff0d 	bl	8009398 <lwip_htons>
 800c57e:	f010 0003 	ands.w	r0, r0, #3
 800c582:	bf18      	it	ne
 800c584:	2001      	movne	r0, #1
 800c586:	4458      	add	r0, fp
 800c588:	4582      	cmp	sl, r0
 800c58a:	d2a9      	bcs.n	800c4e0 <tcp_receive+0x64c>
 800c58c:	464b      	mov	r3, r9
 800c58e:	f240 622b 	movw	r2, #1579	; 0x62b
 800c592:	4641      	mov	r1, r8
 800c594:	4638      	mov	r0, r7
 800c596:	f005 f833 	bl	8011600 <iprintf>
 800c59a:	e7a1      	b.n	800c4e0 <tcp_receive+0x64c>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800c59c:	4b78      	ldr	r3, [pc, #480]	; (800c780 <tcp_receive+0x8ec>)
 800c59e:	f240 5294 	movw	r2, #1428	; 0x594
 800c5a2:	4978      	ldr	r1, [pc, #480]	; (800c784 <tcp_receive+0x8f0>)
 800c5a4:	4875      	ldr	r0, [pc, #468]	; (800c77c <tcp_receive+0x8e8>)
 800c5a6:	f005 f82b 	bl	8011600 <iprintf>
 800c5aa:	e671      	b.n	800c290 <tcp_receive+0x3fc>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800c5ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c5b0:	8e62      	ldrh	r2, [r4, #50]	; 0x32
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800c5b2:	1ac9      	subs	r1, r1, r3
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c5b4:	441a      	add	r2, r3
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800c5b6:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c5ba:	b292      	uxth	r2, r2
 800c5bc:	4293      	cmp	r3, r2
 800c5be:	f63f af0b 	bhi.w	800c3d8 <tcp_receive+0x544>
 800c5c2:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
 800c5c6:	e530      	b.n	800c02a <tcp_receive+0x196>
              recv_data = cseg->p;
 800c5c8:	6019      	str	r1, [r3, #0]
 800c5ca:	e7a3      	b.n	800c514 <tcp_receive+0x680>
        tcp_ack(pcb);
 800c5cc:	8b63      	ldrh	r3, [r4, #26]
 800c5ce:	07d8      	lsls	r0, r3, #31
 800c5d0:	d50a      	bpl.n	800c5e8 <tcp_receive+0x754>
 800c5d2:	f023 0301 	bic.w	r3, r3, #1
 800c5d6:	f043 0302 	orr.w	r3, r3, #2
 800c5da:	8363      	strh	r3, [r4, #26]
 800c5dc:	e47f      	b.n	800bede <tcp_receive+0x4a>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800c5de:	486a      	ldr	r0, [pc, #424]	; (800c788 <tcp_receive+0x8f4>)
 800c5e0:	f7fe fb08 	bl	800abf4 <tcp_seg_copy>
 800c5e4:	6760      	str	r0, [r4, #116]	; 0x74
 800c5e6:	e4d0      	b.n	800bf8a <tcp_receive+0xf6>
        tcp_ack(pcb);
 800c5e8:	f043 0301 	orr.w	r3, r3, #1
 800c5ec:	8363      	strh	r3, [r4, #26]
 800c5ee:	e476      	b.n	800bede <tcp_receive+0x4a>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c5f0:	4865      	ldr	r0, [pc, #404]	; (800c788 <tcp_receive+0x8f4>)
 800c5f2:	f7fe faff 	bl	800abf4 <tcp_seg_copy>
                  if (cseg != NULL) {
 800c5f6:	4607      	mov	r7, r0
 800c5f8:	2800      	cmp	r0, #0
 800c5fa:	f43f acc6 	beq.w	800bf8a <tcp_receive+0xf6>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800c5fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c602:	6832      	ldr	r2, [r6, #0]
 800c604:	6859      	ldr	r1, [r3, #4]
 800c606:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800c60a:	440b      	add	r3, r1
 800c60c:	1a9b      	subs	r3, r3, r2
 800c60e:	2b00      	cmp	r3, #0
 800c610:	dd07      	ble.n	800c622 <tcp_receive+0x78e>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800c612:	1a52      	subs	r2, r2, r1
                      pbuf_realloc(prev->p, prev->len);
 800c614:	f8d8 0004 	ldr.w	r0, [r8, #4]
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800c618:	b291      	uxth	r1, r2
 800c61a:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 800c61e:	f7fd ff57 	bl	800a4d0 <pbuf_realloc>
                    tcp_oos_insert_segment(cseg, next);
 800c622:	4629      	mov	r1, r5
 800c624:	4638      	mov	r0, r7
                    prev->next = cseg;
 800c626:	f8c8 7000 	str.w	r7, [r8]
                    tcp_oos_insert_segment(cseg, next);
 800c62a:	f7ff fb41 	bl	800bcb0 <tcp_oos_insert_segment>
 800c62e:	e4ac      	b.n	800bf8a <tcp_receive+0xf6>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800c630:	4b53      	ldr	r3, [pc, #332]	; (800c780 <tcp_receive+0x8ec>)
 800c632:	f240 6207 	movw	r2, #1543	; 0x607
 800c636:	4955      	ldr	r1, [pc, #340]	; (800c78c <tcp_receive+0x8f8>)
 800c638:	4850      	ldr	r0, [pc, #320]	; (800c77c <tcp_receive+0x8e8>)
 800c63a:	f004 ffe1 	bl	8011600 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800c63e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800c640:	883a      	ldrh	r2, [r7, #0]
 800c642:	e72a      	b.n	800c49a <tcp_receive+0x606>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c644:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800c648:	8998      	ldrh	r0, [r3, #12]
 800c64a:	f7fc fea5 	bl	8009398 <lwip_htons>
 800c64e:	07c5      	lsls	r5, r0, #31
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800c650:	f8d9 300c 	ldr.w	r3, [r9, #12]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c654:	d47b      	bmi.n	800c74e <tcp_receive+0x8ba>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800c656:	8998      	ldrh	r0, [r3, #12]
          inseg.len = (u16_t)pcb->rcv_wnd;
 800c658:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800c65a:	f8a9 3008 	strh.w	r3, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c65e:	f7fc fe9b 	bl	8009398 <lwip_htons>
 800c662:	0780      	lsls	r0, r0, #30
            inseg.len -= 1;
 800c664:	f8b9 1008 	ldrh.w	r1, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c668:	d503      	bpl.n	800c672 <tcp_receive+0x7de>
            inseg.len -= 1;
 800c66a:	3901      	subs	r1, #1
 800c66c:	b289      	uxth	r1, r1
 800c66e:	f8a9 1008 	strh.w	r1, [r9, #8]
          pbuf_realloc(inseg.p, inseg.len);
 800c672:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800c676:	f7fd ff2b 	bl	800a4d0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800c67a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800c67e:	f8b9 5008 	ldrh.w	r5, [r9, #8]
 800c682:	8998      	ldrh	r0, [r3, #12]
 800c684:	f7fc fe88 	bl	8009398 <lwip_htons>
 800c688:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c68c:	6832      	ldr	r2, [r6, #0]
          tcplen = TCP_TCPLEN(&inseg);
 800c68e:	bf18      	it	ne
 800c690:	2001      	movne	r0, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c692:	6a61      	ldr	r1, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 800c694:	182b      	adds	r3, r5, r0
 800c696:	b29b      	uxth	r3, r3
 800c698:	803b      	strh	r3, [r7, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c69a:	4413      	add	r3, r2
 800c69c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800c69e:	440a      	add	r2, r1
 800c6a0:	4293      	cmp	r3, r2
 800c6a2:	f43f ae38 	beq.w	800c316 <tcp_receive+0x482>
 800c6a6:	4b36      	ldr	r3, [pc, #216]	; (800c780 <tcp_receive+0x8ec>)
 800c6a8:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800c6ac:	4938      	ldr	r1, [pc, #224]	; (800c790 <tcp_receive+0x8fc>)
 800c6ae:	4833      	ldr	r0, [pc, #204]	; (800c77c <tcp_receive+0x8e8>)
 800c6b0:	f004 ffa6 	bl	8011600 <iprintf>
 800c6b4:	e62f      	b.n	800c316 <tcp_receive+0x482>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c6b6:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800c6ba:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c6be:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800c6c0:	4413      	add	r3, r2
 800c6c2:	b29b      	uxth	r3, r3
 800c6c4:	429a      	cmp	r2, r3
 800c6c6:	bf88      	it	hi
 800c6c8:	460b      	movhi	r3, r1
 800c6ca:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
                tcp_rexmit_fast(pcb);
 800c6ce:	4620      	mov	r0, r4
 800c6d0:	f001 fdd4 	bl	800e27c <tcp_rexmit_fast>
      if (!found_dupack) {
 800c6d4:	e50c      	b.n	800c0f0 <tcp_receive+0x25c>
                TCP_SEQ_GT(seqno + tcplen,
 800c6d6:	eba1 030c 	sub.w	r3, r1, ip
            if (next &&
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	dc01      	bgt.n	800c6e2 <tcp_receive+0x84e>
            pcb->ooseq = next;
 800c6de:	6765      	str	r5, [r4, #116]	; 0x74
 800c6e0:	e6d6      	b.n	800c490 <tcp_receive+0x5fc>
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800c6e2:	ebac 0c0e 	sub.w	ip, ip, lr
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c6e6:	f8d9 300c 	ldr.w	r3, [r9, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800c6ea:	f8a9 c008 	strh.w	ip, [r9, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c6ee:	8998      	ldrh	r0, [r3, #12]
 800c6f0:	f7fc fe52 	bl	8009398 <lwip_htons>
 800c6f4:	0781      	lsls	r1, r0, #30
 800c6f6:	d504      	bpl.n	800c702 <tcp_receive+0x86e>
                inseg.len -= 1;
 800c6f8:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 800c6fc:	3b01      	subs	r3, #1
 800c6fe:	f8a9 3008 	strh.w	r3, [r9, #8]
              pbuf_realloc(inseg.p, inseg.len);
 800c702:	f8b9 1008 	ldrh.w	r1, [r9, #8]
 800c706:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800c70a:	f7fd fee1 	bl	800a4d0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800c70e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800c712:	f8b9 8008 	ldrh.w	r8, [r9, #8]
 800c716:	8998      	ldrh	r0, [r3, #12]
 800c718:	f7fc fe3e 	bl	8009398 <lwip_htons>
 800c71c:	f010 0003 	ands.w	r0, r0, #3
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800c720:	68eb      	ldr	r3, [r5, #12]
              tcplen = TCP_TCPLEN(&inseg);
 800c722:	bf18      	it	ne
 800c724:	2001      	movne	r0, #1
 800c726:	eb08 0200 	add.w	r2, r8, r0
 800c72a:	b292      	uxth	r2, r2
 800c72c:	803a      	strh	r2, [r7, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800c72e:	6859      	ldr	r1, [r3, #4]
 800c730:	6833      	ldr	r3, [r6, #0]
 800c732:	4413      	add	r3, r2
 800c734:	428b      	cmp	r3, r1
 800c736:	d0d2      	beq.n	800c6de <tcp_receive+0x84a>
 800c738:	4b11      	ldr	r3, [pc, #68]	; (800c780 <tcp_receive+0x8ec>)
 800c73a:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800c73e:	4915      	ldr	r1, [pc, #84]	; (800c794 <tcp_receive+0x900>)
 800c740:	480e      	ldr	r0, [pc, #56]	; (800c77c <tcp_receive+0x8e8>)
 800c742:	f004 ff5d 	bl	8011600 <iprintf>
        pcb->rcv_nxt = seqno + tcplen;
 800c746:	883a      	ldrh	r2, [r7, #0]
 800c748:	6831      	ldr	r1, [r6, #0]
 800c74a:	4411      	add	r1, r2
 800c74c:	e7c7      	b.n	800c6de <tcp_receive+0x84a>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800c74e:	899d      	ldrh	r5, [r3, #12]
 800c750:	4628      	mov	r0, r5
 800c752:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 800c756:	f7fc fe1f 	bl	8009398 <lwip_htons>
 800c75a:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800c75e:	f7fc fe1b 	bl	8009398 <lwip_htons>
 800c762:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800c766:	4328      	orrs	r0, r5
 800c768:	8198      	strh	r0, [r3, #12]
 800c76a:	b280      	uxth	r0, r0
 800c76c:	e774      	b.n	800c658 <tcp_receive+0x7c4>
                    pcb->ooseq = cseg;
 800c76e:	6760      	str	r0, [r4, #116]	; 0x74
 800c770:	e408      	b.n	800bf84 <tcp_receive+0xf0>
 800c772:	bf00      	nop
 800c774:	2400e684 	.word	0x2400e684
 800c778:	2400e688 	.word	0x2400e688
 800c77c:	080124d0 	.word	0x080124d0
 800c780:	08013e00 	.word	0x08013e00
 800c784:	08013f04 	.word	0x08013f04
 800c788:	2400e670 	.word	0x2400e670
 800c78c:	08013fa8 	.word	0x08013fa8
 800c790:	08013f34 	.word	0x08013f34
 800c794:	08013f6c 	.word	0x08013f6c
 800c798:	08013fc8 	.word	0x08013fc8
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800c79c:	68db      	ldr	r3, [r3, #12]
 800c79e:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 800c7a2:	4640      	mov	r0, r8
 800c7a4:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 800c7a8:	f7fc fdf6 	bl	8009398 <lwip_htons>
 800c7ac:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800c7b0:	f7fc fdf2 	bl	8009398 <lwip_htons>
 800c7b4:	682b      	ldr	r3, [r5, #0]
 800c7b6:	ea40 0008 	orr.w	r0, r0, r8
 800c7ba:	68da      	ldr	r2, [r3, #12]
 800c7bc:	8190      	strh	r0, [r2, #12]
 800c7be:	e52a      	b.n	800c216 <tcp_receive+0x382>
 800c7c0:	f8df 9004 	ldr.w	r9, [pc, #4]	; 800c7c8 <tcp_receive+0x934>
 800c7c4:	e595      	b.n	800c2f2 <tcp_receive+0x45e>
 800c7c6:	bf00      	nop
 800c7c8:	2400e670 	.word	0x2400e670

0800c7cc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800c7cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800c7d0:	4604      	mov	r4, r0
 800c7d2:	2800      	cmp	r0, #0
 800c7d4:	d07e      	beq.n	800c8d4 <tcp_parseopt+0x108>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800c7d6:	4b4b      	ldr	r3, [pc, #300]	; (800c904 <tcp_parseopt+0x138>)
 800c7d8:	881d      	ldrh	r5, [r3, #0]
 800c7da:	2d00      	cmp	r5, #0
 800c7dc:	d035      	beq.n	800c84a <tcp_parseopt+0x7e>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c7de:	4b4a      	ldr	r3, [pc, #296]	; (800c908 <tcp_parseopt+0x13c>)
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	4f4a      	ldr	r7, [pc, #296]	; (800c90c <tcp_parseopt+0x140>)
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c7e4:	f8b3 e000 	ldrh.w	lr, [r3]
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800c7e8:	4611      	mov	r1, r2
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c7ea:	4b49      	ldr	r3, [pc, #292]	; (800c910 <tcp_parseopt+0x144>)
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800c7ec:	fa5f f88e 	uxtb.w	r8, lr
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c7f0:	803a      	strh	r2, [r7, #0]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c7f2:	6818      	ldr	r0, [r3, #0]
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800c7f4:	4b47      	ldr	r3, [pc, #284]	; (800c914 <tcp_parseopt+0x148>)
 800c7f6:	681e      	ldr	r6, [r3, #0]
 800c7f8:	f101 0c14 	add.w	ip, r1, #20
 800c7fc:	44b4      	add	ip, r6
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c7fe:	428d      	cmp	r5, r1
  u16_t optidx = tcp_optidx++;
 800c800:	f101 0301 	add.w	r3, r1, #1
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c804:	d974      	bls.n	800c8f0 <tcp_parseopt+0x124>
  u16_t optidx = tcp_optidx++;
 800c806:	b29b      	uxth	r3, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c808:	b1b0      	cbz	r0, 800c838 <tcp_parseopt+0x6c>
 800c80a:	458e      	cmp	lr, r1
    return tcphdr_opt2[idx];
 800c80c:	eba3 0208 	sub.w	r2, r3, r8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c810:	d812      	bhi.n	800c838 <tcp_parseopt+0x6c>
    return tcphdr_opt2[idx];
 800c812:	3a01      	subs	r2, #1
 800c814:	b2d2      	uxtb	r2, r2
 800c816:	5c82      	ldrb	r2, [r0, r2]
      u8_t opt = tcp_get_next_optbyte();
      switch (opt) {
 800c818:	2a01      	cmp	r2, #1
 800c81a:	d011      	beq.n	800c840 <tcp_parseopt+0x74>
 800c81c:	2a02      	cmp	r2, #2
 800c81e:	d016      	beq.n	800c84e <tcp_parseopt+0x82>
 800c820:	b192      	cbz	r2, 800c848 <tcp_parseopt+0x7c>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c822:	b108      	cbz	r0, 800c828 <tcp_parseopt+0x5c>
 800c824:	4573      	cmp	r3, lr
 800c826:	d244      	bcs.n	800c8b2 <tcp_parseopt+0xe6>
    return opts[optidx];
 800c828:	4433      	add	r3, r6
 800c82a:	7d1b      	ldrb	r3, [r3, #20]
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
          if (data < 2) {
 800c82c:	2b01      	cmp	r3, #1
 800c82e:	d965      	bls.n	800c8fc <tcp_parseopt+0x130>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800c830:	440b      	add	r3, r1
 800c832:	b299      	uxth	r1, r3
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800c834:	2201      	movs	r2, #1
 800c836:	e7df      	b.n	800c7f8 <tcp_parseopt+0x2c>
    return opts[optidx];
 800c838:	f89c 2000 	ldrb.w	r2, [ip]
      switch (opt) {
 800c83c:	2a01      	cmp	r2, #1
 800c83e:	d1ed      	bne.n	800c81c <tcp_parseopt+0x50>
 800c840:	f10c 0c01 	add.w	ip, ip, #1
  u16_t optidx = tcp_optidx++;
 800c844:	4619      	mov	r1, r3
 800c846:	e7da      	b.n	800c7fe <tcp_parseopt+0x32>
 800c848:	803b      	strh	r3, [r7, #0]
      }
    }
  }
}
 800c84a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  u16_t optidx = tcp_optidx++;
 800c84e:	1c8a      	adds	r2, r1, #2
 800c850:	b292      	uxth	r2, r2
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c852:	b108      	cbz	r0, 800c858 <tcp_parseopt+0x8c>
 800c854:	4573      	cmp	r3, lr
 800c856:	d227      	bcs.n	800c8a8 <tcp_parseopt+0xdc>
    return opts[optidx];
 800c858:	4433      	add	r3, r6
 800c85a:	7d1b      	ldrb	r3, [r3, #20]
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800c85c:	2b04      	cmp	r3, #4
 800c85e:	d14b      	bne.n	800c8f8 <tcp_parseopt+0x12c>
 800c860:	1c53      	adds	r3, r2, #1
 800c862:	42ab      	cmp	r3, r5
 800c864:	da48      	bge.n	800c8f8 <tcp_parseopt+0x12c>
  u16_t optidx = tcp_optidx++;
 800c866:	f101 0c03 	add.w	ip, r1, #3
 800c86a:	fa1f fc8c 	uxth.w	ip, ip
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c86e:	2800      	cmp	r0, #0
 800c870:	d038      	beq.n	800c8e4 <tcp_parseopt+0x118>
 800c872:	4596      	cmp	lr, r2
 800c874:	d822      	bhi.n	800c8bc <tcp_parseopt+0xf0>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800c876:	eba2 0208 	sub.w	r2, r2, r8
  u16_t optidx = tcp_optidx++;
 800c87a:	3104      	adds	r1, #4
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c87c:	45e6      	cmp	lr, ip
    return tcphdr_opt2[idx];
 800c87e:	b2d2      	uxtb	r2, r2
  u16_t optidx = tcp_optidx++;
 800c880:	b289      	uxth	r1, r1
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800c882:	5c83      	ldrb	r3, [r0, r2]
 800c884:	ea4f 2303 	mov.w	r3, r3, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c888:	d820      	bhi.n	800c8cc <tcp_parseopt+0x100>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800c88a:	ebac 0c08 	sub.w	ip, ip, r8
    return tcphdr_opt2[idx];
 800c88e:	fa5f fc8c 	uxtb.w	ip, ip
 800c892:	f810 200c 	ldrb.w	r2, [r0, ip]
          mss |= tcp_get_next_optbyte();
 800c896:	4313      	orrs	r3, r2
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800c898:	1e5a      	subs	r2, r3, #1
 800c89a:	f5b2 7f06 	cmp.w	r2, #536	; 0x218
 800c89e:	bf28      	it	cs
 800c8a0:	f44f 7306 	movcs.w	r3, #536	; 0x218
 800c8a4:	8663      	strh	r3, [r4, #50]	; 0x32
          break;
 800c8a6:	e7c5      	b.n	800c834 <tcp_parseopt+0x68>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800c8a8:	eba3 0308 	sub.w	r3, r3, r8
    return tcphdr_opt2[idx];
 800c8ac:	b2db      	uxtb	r3, r3
 800c8ae:	5cc3      	ldrb	r3, [r0, r3]
 800c8b0:	e7d4      	b.n	800c85c <tcp_parseopt+0x90>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800c8b2:	eba3 0308 	sub.w	r3, r3, r8
    return tcphdr_opt2[idx];
 800c8b6:	b2db      	uxtb	r3, r3
 800c8b8:	5cc3      	ldrb	r3, [r0, r3]
 800c8ba:	e7b7      	b.n	800c82c <tcp_parseopt+0x60>
    return opts[optidx];
 800c8bc:	4432      	add	r2, r6
  u16_t optidx = tcp_optidx++;
 800c8be:	3104      	adds	r1, #4
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c8c0:	45e6      	cmp	lr, ip
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800c8c2:	7d13      	ldrb	r3, [r2, #20]
  u16_t optidx = tcp_optidx++;
 800c8c4:	b289      	uxth	r1, r1
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800c8c6:	ea4f 2303 	mov.w	r3, r3, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c8ca:	d9de      	bls.n	800c88a <tcp_parseopt+0xbe>
    return opts[optidx];
 800c8cc:	44b4      	add	ip, r6
 800c8ce:	f89c 2014 	ldrb.w	r2, [ip, #20]
 800c8d2:	e7e0      	b.n	800c896 <tcp_parseopt+0xca>
  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800c8d4:	4b10      	ldr	r3, [pc, #64]	; (800c918 <tcp_parseopt+0x14c>)
 800c8d6:	f240 727d 	movw	r2, #1917	; 0x77d
 800c8da:	4910      	ldr	r1, [pc, #64]	; (800c91c <tcp_parseopt+0x150>)
 800c8dc:	4810      	ldr	r0, [pc, #64]	; (800c920 <tcp_parseopt+0x154>)
 800c8de:	f004 fe8f 	bl	8011600 <iprintf>
 800c8e2:	e778      	b.n	800c7d6 <tcp_parseopt+0xa>
    return opts[optidx];
 800c8e4:	4432      	add	r2, r6
  u16_t optidx = tcp_optidx++;
 800c8e6:	3104      	adds	r1, #4
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800c8e8:	7d13      	ldrb	r3, [r2, #20]
  u16_t optidx = tcp_optidx++;
 800c8ea:	b289      	uxth	r1, r1
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800c8ec:	021b      	lsls	r3, r3, #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c8ee:	e7ed      	b.n	800c8cc <tcp_parseopt+0x100>
 800c8f0:	2a00      	cmp	r2, #0
 800c8f2:	d0aa      	beq.n	800c84a <tcp_parseopt+0x7e>
 800c8f4:	8039      	strh	r1, [r7, #0]
 800c8f6:	e7a8      	b.n	800c84a <tcp_parseopt+0x7e>
 800c8f8:	803a      	strh	r2, [r7, #0]
 800c8fa:	e7a6      	b.n	800c84a <tcp_parseopt+0x7e>
  u16_t optidx = tcp_optidx++;
 800c8fc:	3102      	adds	r1, #2
 800c8fe:	8039      	strh	r1, [r7, #0]
 800c900:	e7a3      	b.n	800c84a <tcp_parseopt+0x7e>
 800c902:	bf00      	nop
 800c904:	2400e6a4 	.word	0x2400e6a4
 800c908:	2400e69c 	.word	0x2400e69c
 800c90c:	2400e694 	.word	0x2400e694
 800c910:	2400e6a0 	.word	0x2400e6a0
 800c914:	2400e698 	.word	0x2400e698
 800c918:	08013e00 	.word	0x08013e00
 800c91c:	08013ff0 	.word	0x08013ff0
 800c920:	080124d0 	.word	0x080124d0

0800c924 <tcp_input>:
{
 800c924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800c928:	4604      	mov	r4, r0
{
 800c92a:	b087      	sub	sp, #28
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800c92c:	2800      	cmp	r0, #0
 800c92e:	f000 80d6 	beq.w	800cade <tcp_input+0x1ba>
  if (p->len < TCP_HLEN) {
 800c932:	8963      	ldrh	r3, [r4, #10]
  tcphdr = (struct tcp_hdr *)p->payload;
 800c934:	4e6d      	ldr	r6, [pc, #436]	; (800caec <tcp_input+0x1c8>)
 800c936:	6862      	ldr	r2, [r4, #4]
  if (p->len < TCP_HLEN) {
 800c938:	2b13      	cmp	r3, #19
  tcphdr = (struct tcp_hdr *)p->payload;
 800c93a:	6032      	str	r2, [r6, #0]
  if (p->len < TCP_HLEN) {
 800c93c:	d805      	bhi.n	800c94a <tcp_input+0x26>
  pbuf_free(p);
 800c93e:	4620      	mov	r0, r4
}
 800c940:	b007      	add	sp, #28
 800c942:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800c946:	f7fd bca9 	b.w	800a29c <pbuf_free>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c94a:	4f69      	ldr	r7, [pc, #420]	; (800caf0 <tcp_input+0x1cc>)
 800c94c:	6839      	ldr	r1, [r7, #0]
 800c94e:	6978      	ldr	r0, [r7, #20]
 800c950:	f003 fb26 	bl	800ffa0 <ip4_addr_isbroadcast_u32>
 800c954:	4605      	mov	r5, r0
 800c956:	2800      	cmp	r0, #0
 800c958:	d1f1      	bne.n	800c93e <tcp_input+0x1a>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800c95a:	697b      	ldr	r3, [r7, #20]
 800c95c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c960:	2be0      	cmp	r3, #224	; 0xe0
 800c962:	d0ec      	beq.n	800c93e <tcp_input+0x1a>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800c964:	6833      	ldr	r3, [r6, #0]
 800c966:	8998      	ldrh	r0, [r3, #12]
 800c968:	f7fc fd16 	bl	8009398 <lwip_htons>
 800c96c:	0a80      	lsrs	r0, r0, #10
 800c96e:	f000 01fc 	and.w	r1, r0, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800c972:	2913      	cmp	r1, #19
 800c974:	d9e3      	bls.n	800c93e <tcp_input+0x1a>
 800c976:	8923      	ldrh	r3, [r4, #8]
 800c978:	b28a      	uxth	r2, r1
 800c97a:	428b      	cmp	r3, r1
 800c97c:	d3df      	bcc.n	800c93e <tcp_input+0x1a>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800c97e:	f1a2 0314 	sub.w	r3, r2, #20
  if (p->len >= hdrlen_bytes) {
 800c982:	8960      	ldrh	r0, [r4, #10]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800c984:	f8df 919c 	ldr.w	r9, [pc, #412]	; 800cb24 <tcp_input+0x200>
 800c988:	b29b      	uxth	r3, r3
  tcphdr_opt2 = NULL;
 800c98a:	f8df 819c 	ldr.w	r8, [pc, #412]	; 800cb28 <tcp_input+0x204>
  if (p->len >= hdrlen_bytes) {
 800c98e:	4290      	cmp	r0, r2
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800c990:	f8a9 3000 	strh.w	r3, [r9]
  tcphdr_opt2 = NULL;
 800c994:	f8c8 5000 	str.w	r5, [r8]
  if (p->len >= hdrlen_bytes) {
 800c998:	f080 819a 	bcs.w	800ccd0 <tcp_input+0x3ac>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800c99c:	6823      	ldr	r3, [r4, #0]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	f000 836e 	beq.w	800d080 <tcp_input+0x75c>
    pbuf_remove_header(p, TCP_HLEN);
 800c9a4:	2114      	movs	r1, #20
 800c9a6:	4620      	mov	r0, r4
 800c9a8:	f7fd fc0c 	bl	800a1c4 <pbuf_remove_header>
    tcphdr_opt1len = p->len;
 800c9ac:	8965      	ldrh	r5, [r4, #10]
 800c9ae:	4b51      	ldr	r3, [pc, #324]	; (800caf4 <tcp_input+0x1d0>)
    pbuf_remove_header(p, tcphdr_opt1len);
 800c9b0:	4620      	mov	r0, r4
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800c9b2:	f8b9 a000 	ldrh.w	sl, [r9]
    pbuf_remove_header(p, tcphdr_opt1len);
 800c9b6:	4629      	mov	r1, r5
    tcphdr_opt1len = p->len;
 800c9b8:	801d      	strh	r5, [r3, #0]
    pbuf_remove_header(p, tcphdr_opt1len);
 800c9ba:	f7fd fc03 	bl	800a1c4 <pbuf_remove_header>
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800c9be:	ebaa 0905 	sub.w	r9, sl, r5
    if (opt2len > p->next->len) {
 800c9c2:	6820      	ldr	r0, [r4, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800c9c4:	fa1f f989 	uxth.w	r9, r9
    if (opt2len > p->next->len) {
 800c9c8:	8943      	ldrh	r3, [r0, #10]
 800c9ca:	454b      	cmp	r3, r9
 800c9cc:	d3b7      	bcc.n	800c93e <tcp_input+0x1a>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800c9ce:	6843      	ldr	r3, [r0, #4]
    pbuf_remove_header(p->next, opt2len);
 800c9d0:	4649      	mov	r1, r9
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800c9d2:	f8c8 3000 	str.w	r3, [r8]
    pbuf_remove_header(p->next, opt2len);
 800c9d6:	f7fd fbf5 	bl	800a1c4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800c9da:	8923      	ldrh	r3, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800c9dc:	8962      	ldrh	r2, [r4, #10]
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800c9de:	442b      	add	r3, r5
 800c9e0:	eba3 030a 	sub.w	r3, r3, sl
 800c9e4:	b29b      	uxth	r3, r3
 800c9e6:	8123      	strh	r3, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800c9e8:	2a00      	cmp	r2, #0
 800c9ea:	f040 8350 	bne.w	800d08e <tcp_input+0x76a>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800c9ee:	6822      	ldr	r2, [r4, #0]
 800c9f0:	8912      	ldrh	r2, [r2, #8]
 800c9f2:	429a      	cmp	r2, r3
 800c9f4:	d005      	beq.n	800ca02 <tcp_input+0xde>
 800c9f6:	4b40      	ldr	r3, [pc, #256]	; (800caf8 <tcp_input+0x1d4>)
 800c9f8:	22e0      	movs	r2, #224	; 0xe0
 800c9fa:	4940      	ldr	r1, [pc, #256]	; (800cafc <tcp_input+0x1d8>)
 800c9fc:	4840      	ldr	r0, [pc, #256]	; (800cb00 <tcp_input+0x1dc>)
 800c9fe:	f004 fdff 	bl	8011600 <iprintf>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800ca02:	6835      	ldr	r5, [r6, #0]
 800ca04:	8828      	ldrh	r0, [r5, #0]
 800ca06:	f7fc fcc7 	bl	8009398 <lwip_htons>
 800ca0a:	8028      	strh	r0, [r5, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800ca0c:	6835      	ldr	r5, [r6, #0]
 800ca0e:	8868      	ldrh	r0, [r5, #2]
 800ca10:	f7fc fcc2 	bl	8009398 <lwip_htons>
 800ca14:	8068      	strh	r0, [r5, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800ca16:	6835      	ldr	r5, [r6, #0]
 800ca18:	6868      	ldr	r0, [r5, #4]
 800ca1a:	f7fc fcc1 	bl	80093a0 <lwip_htonl>
 800ca1e:	4b39      	ldr	r3, [pc, #228]	; (800cb04 <tcp_input+0x1e0>)
 800ca20:	6068      	str	r0, [r5, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800ca22:	6835      	ldr	r5, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800ca24:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800ca26:	68a8      	ldr	r0, [r5, #8]
 800ca28:	f7fc fcba 	bl	80093a0 <lwip_htonl>
 800ca2c:	4b36      	ldr	r3, [pc, #216]	; (800cb08 <tcp_input+0x1e4>)
 800ca2e:	60a8      	str	r0, [r5, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800ca30:	6835      	ldr	r5, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800ca32:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800ca34:	89e8      	ldrh	r0, [r5, #14]
 800ca36:	f7fc fcaf 	bl	8009398 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 800ca3a:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800ca3c:	81e8      	strh	r0, [r5, #14]
  flags = TCPH_FLAGS(tcphdr);
 800ca3e:	8998      	ldrh	r0, [r3, #12]
 800ca40:	f7fc fcaa 	bl	8009398 <lwip_htons>
 800ca44:	4931      	ldr	r1, [pc, #196]	; (800cb0c <tcp_input+0x1e8>)
 800ca46:	f000 033f 	and.w	r3, r0, #63	; 0x3f
  tcplen = p->tot_len;
 800ca4a:	8922      	ldrh	r2, [r4, #8]
  flags = TCPH_FLAGS(tcphdr);
 800ca4c:	700b      	strb	r3, [r1, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800ca4e:	0783      	lsls	r3, r0, #30
 800ca50:	f040 8144 	bne.w	800ccdc <tcp_input+0x3b8>
  tcplen = p->tot_len;
 800ca54:	4b2e      	ldr	r3, [pc, #184]	; (800cb10 <tcp_input+0x1ec>)
 800ca56:	9305      	str	r3, [sp, #20]
 800ca58:	801a      	strh	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ca5a:	4b2e      	ldr	r3, [pc, #184]	; (800cb14 <tcp_input+0x1f0>)
 800ca5c:	681d      	ldr	r5, [r3, #0]
 800ca5e:	2d00      	cmp	r5, #0
 800ca60:	f000 80e5 	beq.w	800cc2e <tcp_input+0x30a>
  prev = NULL;
 800ca64:	f04f 0800 	mov.w	r8, #0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800ca68:	f8df a08c 	ldr.w	sl, [pc, #140]	; 800caf8 <tcp_input+0x1d4>
 800ca6c:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 800cb2c <tcp_input+0x208>
 800ca70:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800cb00 <tcp_input+0x1dc>
 800ca74:	e017      	b.n	800caa6 <tcp_input+0x182>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800ca76:	2b0a      	cmp	r3, #10
 800ca78:	d021      	beq.n	800cabe <tcp_input+0x19a>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800ca7a:	2b01      	cmp	r3, #1
 800ca7c:	d028      	beq.n	800cad0 <tcp_input+0x1ac>
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ca7e:	7a2a      	ldrb	r2, [r5, #8]
 800ca80:	b132      	cbz	r2, 800ca90 <tcp_input+0x16c>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ca88:	3301      	adds	r3, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ca8a:	b2db      	uxtb	r3, r3
 800ca8c:	429a      	cmp	r2, r3
 800ca8e:	d104      	bne.n	800ca9a <tcp_input+0x176>
    if (pcb->remote_port == tcphdr->src &&
 800ca90:	6833      	ldr	r3, [r6, #0]
 800ca92:	8b29      	ldrh	r1, [r5, #24]
 800ca94:	881a      	ldrh	r2, [r3, #0]
 800ca96:	4291      	cmp	r1, r2
 800ca98:	d04a      	beq.n	800cb30 <tcp_input+0x20c>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ca9a:	68eb      	ldr	r3, [r5, #12]
 800ca9c:	46a8      	mov	r8, r5
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	f000 80c5 	beq.w	800cc2e <tcp_input+0x30a>
 800caa4:	461d      	mov	r5, r3
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800caa6:	7d2b      	ldrb	r3, [r5, #20]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d1e4      	bne.n	800ca76 <tcp_input+0x152>
 800caac:	4653      	mov	r3, sl
 800caae:	22fb      	movs	r2, #251	; 0xfb
 800cab0:	4659      	mov	r1, fp
 800cab2:	4648      	mov	r0, r9
 800cab4:	f004 fda4 	bl	8011600 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800cab8:	7d2b      	ldrb	r3, [r5, #20]
 800caba:	2b0a      	cmp	r3, #10
 800cabc:	d1dd      	bne.n	800ca7a <tcp_input+0x156>
 800cabe:	4653      	mov	r3, sl
 800cac0:	22fc      	movs	r2, #252	; 0xfc
 800cac2:	4915      	ldr	r1, [pc, #84]	; (800cb18 <tcp_input+0x1f4>)
 800cac4:	4648      	mov	r0, r9
 800cac6:	f004 fd9b 	bl	8011600 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800caca:	7d2b      	ldrb	r3, [r5, #20]
 800cacc:	2b01      	cmp	r3, #1
 800cace:	d1d6      	bne.n	800ca7e <tcp_input+0x15a>
 800cad0:	4653      	mov	r3, sl
 800cad2:	22fd      	movs	r2, #253	; 0xfd
 800cad4:	4911      	ldr	r1, [pc, #68]	; (800cb1c <tcp_input+0x1f8>)
 800cad6:	4648      	mov	r0, r9
 800cad8:	f004 fd92 	bl	8011600 <iprintf>
 800cadc:	e7cf      	b.n	800ca7e <tcp_input+0x15a>
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800cade:	4b06      	ldr	r3, [pc, #24]	; (800caf8 <tcp_input+0x1d4>)
 800cae0:	2283      	movs	r2, #131	; 0x83
 800cae2:	490f      	ldr	r1, [pc, #60]	; (800cb20 <tcp_input+0x1fc>)
 800cae4:	4806      	ldr	r0, [pc, #24]	; (800cb00 <tcp_input+0x1dc>)
 800cae6:	f004 fd8b 	bl	8011600 <iprintf>
 800caea:	e722      	b.n	800c932 <tcp_input+0xe>
 800caec:	2400e698 	.word	0x2400e698
 800caf0:	2400b54c 	.word	0x2400b54c
 800caf4:	2400e69c 	.word	0x2400e69c
 800caf8:	08013e00 	.word	0x08013e00
 800cafc:	08014040 	.word	0x08014040
 800cb00:	080124d0 	.word	0x080124d0
 800cb04:	2400e68c 	.word	0x2400e68c
 800cb08:	2400e668 	.word	0x2400e668
 800cb0c:	2400e66c 	.word	0x2400e66c
 800cb10:	2400e6a6 	.word	0x2400e6a6
 800cb14:	2400e64c 	.word	0x2400e64c
 800cb18:	08014088 	.word	0x08014088
 800cb1c:	080140b4 	.word	0x080140b4
 800cb20:	0801400c 	.word	0x0801400c
 800cb24:	2400e6a4 	.word	0x2400e6a4
 800cb28:	2400e6a0 	.word	0x2400e6a0
 800cb2c:	08014060 	.word	0x08014060
    if (pcb->remote_port == tcphdr->src &&
 800cb30:	885b      	ldrh	r3, [r3, #2]
 800cb32:	8aea      	ldrh	r2, [r5, #22]
 800cb34:	429a      	cmp	r2, r3
 800cb36:	d1b0      	bne.n	800ca9a <tcp_input+0x176>
        pcb->local_port == tcphdr->dest &&
 800cb38:	686a      	ldr	r2, [r5, #4]
 800cb3a:	693b      	ldr	r3, [r7, #16]
 800cb3c:	429a      	cmp	r2, r3
 800cb3e:	d1ac      	bne.n	800ca9a <tcp_input+0x176>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800cb40:	682a      	ldr	r2, [r5, #0]
 800cb42:	697b      	ldr	r3, [r7, #20]
 800cb44:	429a      	cmp	r2, r3
 800cb46:	d1a8      	bne.n	800ca9a <tcp_input+0x176>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800cb48:	68eb      	ldr	r3, [r5, #12]
 800cb4a:	42ab      	cmp	r3, r5
 800cb4c:	f000 8405 	beq.w	800d35a <tcp_input+0xa36>
      if (prev != NULL) {
 800cb50:	f1b8 0f00 	cmp.w	r8, #0
 800cb54:	d009      	beq.n	800cb6a <tcp_input+0x246>
        pcb->next = tcp_active_pcbs;
 800cb56:	4a6e      	ldr	r2, [pc, #440]	; (800cd10 <tcp_input+0x3ec>)
        prev->next = pcb->next;
 800cb58:	f8c8 300c 	str.w	r3, [r8, #12]
        pcb->next = tcp_active_pcbs;
 800cb5c:	6813      	ldr	r3, [r2, #0]
        tcp_active_pcbs = pcb;
 800cb5e:	6015      	str	r5, [r2, #0]
        pcb->next = tcp_active_pcbs;
 800cb60:	60eb      	str	r3, [r5, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800cb62:	68eb      	ldr	r3, [r5, #12]
 800cb64:	42ab      	cmp	r3, r5
 800cb66:	f000 8432 	beq.w	800d3ce <tcp_input+0xaaa>
    inseg.next = NULL;
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	4f69      	ldr	r7, [pc, #420]	; (800cd14 <tcp_input+0x3f0>)
    recv_data = NULL;
 800cb6e:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cd30 <tcp_input+0x40c>
    recv_flags = 0;
 800cb72:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 800cd34 <tcp_input+0x410>
    recv_acked = 0;
 800cb76:	f8df b1c0 	ldr.w	fp, [pc, #448]	; 800cd38 <tcp_input+0x414>
    inseg.len = p->tot_len;
 800cb7a:	8922      	ldrh	r2, [r4, #8]
    inseg.next = NULL;
 800cb7c:	603b      	str	r3, [r7, #0]
    recv_data = NULL;
 800cb7e:	f8c8 3000 	str.w	r3, [r8]
    recv_flags = 0;
 800cb82:	f889 3000 	strb.w	r3, [r9]
    recv_acked = 0;
 800cb86:	f8ab 3000 	strh.w	r3, [fp]
    if (flags & TCP_PSH) {
 800cb8a:	4b63      	ldr	r3, [pc, #396]	; (800cd18 <tcp_input+0x3f4>)
    inseg.len = p->tot_len;
 800cb8c:	813a      	strh	r2, [r7, #8]
    if (flags & TCP_PSH) {
 800cb8e:	781b      	ldrb	r3, [r3, #0]
    inseg.tcphdr = tcphdr;
 800cb90:	6832      	ldr	r2, [r6, #0]
    inseg.p = p;
 800cb92:	607c      	str	r4, [r7, #4]
    inseg.tcphdr = tcphdr;
 800cb94:	60fa      	str	r2, [r7, #12]
    if (flags & TCP_PSH) {
 800cb96:	071a      	lsls	r2, r3, #28
 800cb98:	d503      	bpl.n	800cba2 <tcp_input+0x27e>
      p->flags |= PBUF_FLAG_PUSH;
 800cb9a:	7b62      	ldrb	r2, [r4, #13]
 800cb9c:	f042 0201 	orr.w	r2, r2, #1
 800cba0:	7362      	strb	r2, [r4, #13]
    if (pcb->refused_data != NULL) {
 800cba2:	6faa      	ldr	r2, [r5, #120]	; 0x78
 800cba4:	b172      	cbz	r2, 800cbc4 <tcp_input+0x2a0>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800cba6:	4628      	mov	r0, r5
 800cba8:	f7fe ff72 	bl	800ba90 <tcp_process_refused_data>
 800cbac:	300d      	adds	r0, #13
 800cbae:	f000 8276 	beq.w	800d09e <tcp_input+0x77a>
 800cbb2:	6fab      	ldr	r3, [r5, #120]	; 0x78
 800cbb4:	b123      	cbz	r3, 800cbc0 <tcp_input+0x29c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800cbb6:	9b05      	ldr	r3, [sp, #20]
 800cbb8:	881b      	ldrh	r3, [r3, #0]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	f040 826f 	bne.w	800d09e <tcp_input+0x77a>
  if (flags & TCP_RST) {
 800cbc0:	4b55      	ldr	r3, [pc, #340]	; (800cd18 <tcp_input+0x3f4>)
 800cbc2:	781b      	ldrb	r3, [r3, #0]
    tcp_input_pcb = pcb;
 800cbc4:	4c55      	ldr	r4, [pc, #340]	; (800cd1c <tcp_input+0x3f8>)
  if (flags & TCP_RST) {
 800cbc6:	0759      	lsls	r1, r3, #29
    tcp_input_pcb = pcb;
 800cbc8:	6025      	str	r5, [r4, #0]
  if (flags & TCP_RST) {
 800cbca:	f140 814a 	bpl.w	800ce62 <tcp_input+0x53e>
    if (pcb->state == SYN_SENT) {
 800cbce:	7d29      	ldrb	r1, [r5, #20]
 800cbd0:	2902      	cmp	r1, #2
 800cbd2:	f000 8331 	beq.w	800d238 <tcp_input+0x914>
      if (seqno == pcb->rcv_nxt) {
 800cbd6:	4b52      	ldr	r3, [pc, #328]	; (800cd20 <tcp_input+0x3fc>)
 800cbd8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	429a      	cmp	r2, r3
 800cbde:	f000 8415 	beq.w	800d40c <tcp_input+0xae8>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800cbe2:	1a9b      	subs	r3, r3, r2
 800cbe4:	d404      	bmi.n	800cbf0 <tcp_input+0x2cc>
 800cbe6:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 800cbe8:	1a9b      	subs	r3, r3, r2
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	f340 831f 	ble.w	800d22e <tcp_input+0x90a>
      if (recv_flags & TF_RESET) {
 800cbf0:	f899 3000 	ldrb.w	r3, [r9]
 800cbf4:	0718      	lsls	r0, r3, #28
 800cbf6:	f140 8258 	bpl.w	800d0aa <tcp_input+0x786>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800cbfa:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800cbfe:	b11b      	cbz	r3, 800cc08 <tcp_input+0x2e4>
 800cc00:	f06f 010d 	mvn.w	r1, #13
 800cc04:	6928      	ldr	r0, [r5, #16]
 800cc06:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800cc08:	4841      	ldr	r0, [pc, #260]	; (800cd10 <tcp_input+0x3ec>)
 800cc0a:	4629      	mov	r1, r5
 800cc0c:	f7fe fb96 	bl	800b33c <tcp_pcb_remove>
        tcp_free(pcb);
 800cc10:	4628      	mov	r0, r5
 800cc12:	f7fd fe5d 	bl	800a8d0 <tcp_free>
    tcp_input_pcb = NULL;
 800cc16:	2500      	movs	r5, #0
    if (inseg.p != NULL) {
 800cc18:	6878      	ldr	r0, [r7, #4]
    tcp_input_pcb = NULL;
 800cc1a:	6025      	str	r5, [r4, #0]
    recv_data = NULL;
 800cc1c:	f8c8 5000 	str.w	r5, [r8]
    if (inseg.p != NULL) {
 800cc20:	b110      	cbz	r0, 800cc28 <tcp_input+0x304>
      pbuf_free(inseg.p);
 800cc22:	f7fd fb3b 	bl	800a29c <pbuf_free>
      inseg.p = NULL;
 800cc26:	607d      	str	r5, [r7, #4]
}
 800cc28:	b007      	add	sp, #28
 800cc2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cc2e:	4b3d      	ldr	r3, [pc, #244]	; (800cd24 <tcp_input+0x400>)
 800cc30:	681d      	ldr	r5, [r3, #0]
 800cc32:	2d00      	cmp	r5, #0
 800cc34:	d05b      	beq.n	800ccee <tcp_input+0x3ca>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800cc36:	f8df 8104 	ldr.w	r8, [pc, #260]	; 800cd3c <tcp_input+0x418>
 800cc3a:	f8df b104 	ldr.w	fp, [pc, #260]	; 800cd40 <tcp_input+0x41c>
 800cc3e:	f8df 9104 	ldr.w	r9, [pc, #260]	; 800cd44 <tcp_input+0x420>
 800cc42:	e002      	b.n	800cc4a <tcp_input+0x326>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cc44:	68ed      	ldr	r5, [r5, #12]
 800cc46:	2d00      	cmp	r5, #0
 800cc48:	d051      	beq.n	800ccee <tcp_input+0x3ca>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800cc4a:	7d2b      	ldrb	r3, [r5, #20]
 800cc4c:	2b0a      	cmp	r3, #10
 800cc4e:	4643      	mov	r3, r8
 800cc50:	d005      	beq.n	800cc5e <tcp_input+0x33a>
 800cc52:	f240 121f 	movw	r2, #287	; 0x11f
 800cc56:	4659      	mov	r1, fp
 800cc58:	4648      	mov	r0, r9
 800cc5a:	f004 fcd1 	bl	8011600 <iprintf>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cc5e:	7a2a      	ldrb	r2, [r5, #8]
 800cc60:	b132      	cbz	r2, 800cc70 <tcp_input+0x34c>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cc68:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cc6a:	b2db      	uxtb	r3, r3
 800cc6c:	429a      	cmp	r2, r3
 800cc6e:	d1e9      	bne.n	800cc44 <tcp_input+0x320>
      if (pcb->remote_port == tcphdr->src &&
 800cc70:	6832      	ldr	r2, [r6, #0]
 800cc72:	8b2b      	ldrh	r3, [r5, #24]
 800cc74:	8811      	ldrh	r1, [r2, #0]
 800cc76:	428b      	cmp	r3, r1
 800cc78:	d1e4      	bne.n	800cc44 <tcp_input+0x320>
          pcb->local_port == tcphdr->dest &&
 800cc7a:	8852      	ldrh	r2, [r2, #2]
      if (pcb->remote_port == tcphdr->src &&
 800cc7c:	8ae8      	ldrh	r0, [r5, #22]
 800cc7e:	4290      	cmp	r0, r2
 800cc80:	d1e0      	bne.n	800cc44 <tcp_input+0x320>
          pcb->local_port == tcphdr->dest &&
 800cc82:	6869      	ldr	r1, [r5, #4]
 800cc84:	693a      	ldr	r2, [r7, #16]
 800cc86:	4291      	cmp	r1, r2
 800cc88:	d1dc      	bne.n	800cc44 <tcp_input+0x320>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800cc8a:	6829      	ldr	r1, [r5, #0]
 800cc8c:	697a      	ldr	r2, [r7, #20]
 800cc8e:	4291      	cmp	r1, r2
 800cc90:	d1d8      	bne.n	800cc44 <tcp_input+0x320>
  if (flags & TCP_RST) {
 800cc92:	4a21      	ldr	r2, [pc, #132]	; (800cd18 <tcp_input+0x3f4>)
 800cc94:	7812      	ldrb	r2, [r2, #0]
 800cc96:	0757      	lsls	r7, r2, #29
 800cc98:	f53f ae51 	bmi.w	800c93e <tcp_input+0x1a>
  if (flags & TCP_SYN) {
 800cc9c:	0796      	lsls	r6, r2, #30
 800cc9e:	f140 83aa 	bpl.w	800d3f6 <tcp_input+0xad2>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800cca2:	4a1f      	ldr	r2, [pc, #124]	; (800cd20 <tcp_input+0x3fc>)
 800cca4:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800cca6:	6812      	ldr	r2, [r2, #0]
 800cca8:	1a51      	subs	r1, r2, r1
 800ccaa:	d404      	bmi.n	800ccb6 <tcp_input+0x392>
 800ccac:	8d2e      	ldrh	r6, [r5, #40]	; 0x28
 800ccae:	1b89      	subs	r1, r1, r6
 800ccb0:	2900      	cmp	r1, #0
 800ccb2:	f340 83b6 	ble.w	800d422 <tcp_input+0xafe>
  if ((tcplen > 0)) {
 800ccb6:	9b05      	ldr	r3, [sp, #20]
 800ccb8:	881b      	ldrh	r3, [r3, #0]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	f43f ae3f 	beq.w	800c93e <tcp_input+0x1a>
    tcp_ack_now(pcb);
 800ccc0:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 800ccc2:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 800ccc4:	f043 0302 	orr.w	r3, r3, #2
 800ccc8:	836b      	strh	r3, [r5, #26]
    tcp_output(pcb);
 800ccca:	f001 fb8b 	bl	800e3e4 <tcp_output>
        pbuf_free(p);
 800ccce:	e636      	b.n	800c93e <tcp_input+0x1a>
    tcphdr_opt1len = tcphdr_optlen;
 800ccd0:	4a15      	ldr	r2, [pc, #84]	; (800cd28 <tcp_input+0x404>)
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800ccd2:	4620      	mov	r0, r4
    tcphdr_opt1len = tcphdr_optlen;
 800ccd4:	8013      	strh	r3, [r2, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800ccd6:	f7fd fa75 	bl	800a1c4 <pbuf_remove_header>
 800ccda:	e692      	b.n	800ca02 <tcp_input+0xde>
    tcplen++;
 800ccdc:	1c53      	adds	r3, r2, #1
 800ccde:	4913      	ldr	r1, [pc, #76]	; (800cd2c <tcp_input+0x408>)
 800cce0:	b29b      	uxth	r3, r3
 800cce2:	9105      	str	r1, [sp, #20]
    if (tcplen < p->tot_len) {
 800cce4:	429a      	cmp	r2, r3
    tcplen++;
 800cce6:	800b      	strh	r3, [r1, #0]
    if (tcplen < p->tot_len) {
 800cce8:	f67f aeb7 	bls.w	800ca5a <tcp_input+0x136>
 800ccec:	e627      	b.n	800c93e <tcp_input+0x1a>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ccee:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800cd48 <tcp_input+0x424>
 800ccf2:	f8d9 8000 	ldr.w	r8, [r9]
 800ccf6:	f1b8 0f00 	cmp.w	r8, #0
 800ccfa:	f000 8226 	beq.w	800d14a <tcp_input+0x826>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ccfe:	f8d7 c004 	ldr.w	ip, [r7, #4]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800cd02:	4645      	mov	r5, r8
      if (lpcb->local_port == tcphdr->dest) {
 800cd04:	6830      	ldr	r0, [r6, #0]
    prev = NULL;
 800cd06:	2100      	movs	r1, #0
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800cd08:	f8d7 e014 	ldr.w	lr, [r7, #20]
 800cd0c:	e024      	b.n	800cd58 <tcp_input+0x434>
 800cd0e:	bf00      	nop
 800cd10:	2400e64c 	.word	0x2400e64c
 800cd14:	2400e670 	.word	0x2400e670
 800cd18:	2400e66c 	.word	0x2400e66c
 800cd1c:	2400e690 	.word	0x2400e690
 800cd20:	2400e68c 	.word	0x2400e68c
 800cd24:	2400e664 	.word	0x2400e664
 800cd28:	2400e69c 	.word	0x2400e69c
 800cd2c:	2400e6a6 	.word	0x2400e6a6
 800cd30:	2400e684 	.word	0x2400e684
 800cd34:	2400e688 	.word	0x2400e688
 800cd38:	2400e680 	.word	0x2400e680
 800cd3c:	08013e00 	.word	0x08013e00
 800cd40:	08014134 	.word	0x08014134
 800cd44:	080124d0 	.word	0x080124d0
 800cd48:	2400e658 	.word	0x2400e658
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cd4c:	68eb      	ldr	r3, [r5, #12]
 800cd4e:	4629      	mov	r1, r5
 800cd50:	461d      	mov	r5, r3
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	f000 81fa 	beq.w	800d14c <tcp_input+0x828>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800cd58:	7a2a      	ldrb	r2, [r5, #8]
 800cd5a:	b12a      	cbz	r2, 800cd68 <tcp_input+0x444>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800cd5c:	f89c 3030 	ldrb.w	r3, [ip, #48]	; 0x30
 800cd60:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800cd62:	b2db      	uxtb	r3, r3
 800cd64:	429a      	cmp	r2, r3
 800cd66:	d1f1      	bne.n	800cd4c <tcp_input+0x428>
      if (lpcb->local_port == tcphdr->dest) {
 800cd68:	8aea      	ldrh	r2, [r5, #22]
 800cd6a:	8843      	ldrh	r3, [r0, #2]
 800cd6c:	429a      	cmp	r2, r3
 800cd6e:	d1ed      	bne.n	800cd4c <tcp_input+0x428>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800cd70:	682a      	ldr	r2, [r5, #0]
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800cd72:	b10a      	cbz	r2, 800cd78 <tcp_input+0x454>
 800cd74:	4572      	cmp	r2, lr
 800cd76:	d1e9      	bne.n	800cd4c <tcp_input+0x428>
      if (prev != NULL) {
 800cd78:	b129      	cbz	r1, 800cd86 <tcp_input+0x462>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800cd7a:	68ea      	ldr	r2, [r5, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800cd7c:	f8c9 5000 	str.w	r5, [r9]
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800cd80:	60ca      	str	r2, [r1, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800cd82:	f8c5 800c 	str.w	r8, [r5, #12]
  if (flags & TCP_RST) {
 800cd86:	4aa8      	ldr	r2, [pc, #672]	; (800d028 <tcp_input+0x704>)
 800cd88:	7812      	ldrb	r2, [r2, #0]
 800cd8a:	0751      	lsls	r1, r2, #29
 800cd8c:	f53f add7 	bmi.w	800c93e <tcp_input+0x1a>
  if (flags & TCP_ACK) {
 800cd90:	f012 0810 	ands.w	r8, r2, #16
 800cd94:	f040 8266 	bne.w	800d264 <tcp_input+0x940>
  } else if (flags & TCP_SYN) {
 800cd98:	0790      	lsls	r0, r2, #30
 800cd9a:	f57f add0 	bpl.w	800c93e <tcp_input+0x1a>
    npcb = tcp_alloc(pcb->prio);
 800cd9e:	7d68      	ldrb	r0, [r5, #21]
 800cda0:	f7fe fc74 	bl	800b68c <tcp_alloc>
    if (npcb == NULL) {
 800cda4:	4681      	mov	r9, r0
 800cda6:	2800      	cmp	r0, #0
 800cda8:	f000 82c6 	beq.w	800d338 <tcp_input+0xa14>
    npcb->rcv_nxt = seqno + 1;
 800cdac:	4b9f      	ldr	r3, [pc, #636]	; (800d02c <tcp_input+0x708>)
    npcb->remote_port = tcphdr->src;
 800cdae:	6831      	ldr	r1, [r6, #0]
    npcb->rcv_nxt = seqno + 1;
 800cdb0:	681b      	ldr	r3, [r3, #0]
    npcb->remote_port = tcphdr->src;
 800cdb2:	780a      	ldrb	r2, [r1, #0]
    npcb->rcv_nxt = seqno + 1;
 800cdb4:	3301      	adds	r3, #1
    npcb->remote_port = tcphdr->src;
 800cdb6:	7849      	ldrb	r1, [r1, #1]
 800cdb8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    npcb->local_port = pcb->local_port;
 800cdbc:	8ae9      	ldrh	r1, [r5, #22]
    npcb->rcv_nxt = seqno + 1;
 800cdbe:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800cdc0:	62c3      	str	r3, [r0, #44]	; 0x2c
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800cdc2:	697b      	ldr	r3, [r7, #20]
    npcb->remote_port = tcphdr->src;
 800cdc4:	8302      	strh	r2, [r0, #24]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800cdc6:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800cdc8:	693b      	ldr	r3, [r7, #16]
    npcb->local_port = pcb->local_port;
 800cdca:	82c1      	strh	r1, [r0, #22]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800cdcc:	6043      	str	r3, [r0, #4]
    npcb->state = SYN_RCVD;
 800cdce:	2303      	movs	r3, #3
 800cdd0:	7503      	strb	r3, [r0, #20]
    iss = tcp_next_iss(npcb);
 800cdd2:	f7fe fef3 	bl	800bbbc <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800cdd6:	4b95      	ldr	r3, [pc, #596]	; (800d02c <tcp_input+0x708>)
    npcb->snd_nxt = iss;
 800cdd8:	f8c9 0050 	str.w	r0, [r9, #80]	; 0x50
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800cddc:	681b      	ldr	r3, [r3, #0]
    npcb->lastack = iss;
 800cdde:	f8c9 0044 	str.w	r0, [r9, #68]	; 0x44
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800cde2:	3b01      	subs	r3, #1
    npcb->snd_lbb = iss;
 800cde4:	f8c9 005c 	str.w	r0, [r9, #92]	; 0x5c
    TCP_REG_ACTIVE(npcb);
 800cde8:	4a91      	ldr	r2, [pc, #580]	; (800d030 <tcp_input+0x70c>)
    npcb->snd_wl2 = iss;
 800cdea:	e9c9 3015 	strd	r3, r0, [r9, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800cdee:	692b      	ldr	r3, [r5, #16]
    npcb->listener = pcb;
 800cdf0:	f8c9 507c 	str.w	r5, [r9, #124]	; 0x7c
    npcb->callback_arg = pcb->callback_arg;
 800cdf4:	f8c9 3010 	str.w	r3, [r9, #16]
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800cdf8:	7a6b      	ldrb	r3, [r5, #9]
 800cdfa:	f003 030c 	and.w	r3, r3, #12
 800cdfe:	f889 3009 	strb.w	r3, [r9, #9]
    npcb->netif_idx = pcb->netif_idx;
 800ce02:	7a2b      	ldrb	r3, [r5, #8]
 800ce04:	f889 3008 	strb.w	r3, [r9, #8]
    TCP_REG_ACTIVE(npcb);
 800ce08:	6813      	ldr	r3, [r2, #0]
 800ce0a:	f8c2 9000 	str.w	r9, [r2]
 800ce0e:	f8c9 300c 	str.w	r3, [r9, #12]
 800ce12:	f001 fe07 	bl	800ea24 <tcp_timer_needed>
 800ce16:	4b87      	ldr	r3, [pc, #540]	; (800d034 <tcp_input+0x710>)
 800ce18:	2201      	movs	r2, #1
    tcp_parseopt(npcb);
 800ce1a:	4648      	mov	r0, r9
    TCP_REG_ACTIVE(npcb);
 800ce1c:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800ce1e:	f7ff fcd5 	bl	800c7cc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800ce22:	6833      	ldr	r3, [r6, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ce24:	f109 0204 	add.w	r2, r9, #4
 800ce28:	f8b9 5032 	ldrh.w	r5, [r9, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 800ce2c:	89db      	ldrh	r3, [r3, #14]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ce2e:	4610      	mov	r0, r2
 800ce30:	9205      	str	r2, [sp, #20]
    npcb->snd_wnd = tcphdr->wnd;
 800ce32:	f8a9 3060 	strh.w	r3, [r9, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800ce36:	f8a9 3062 	strh.w	r3, [r9, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ce3a:	f002 ff09 	bl	800fc50 <ip4_route>
 800ce3e:	9a05      	ldr	r2, [sp, #20]
 800ce40:	4601      	mov	r1, r0
 800ce42:	4628      	mov	r0, r5
 800ce44:	f7fe fed6 	bl	800bbf4 <tcp_eff_send_mss_netif>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ce48:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ce4a:	f8a9 0032 	strh.w	r0, [r9, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ce4e:	4648      	mov	r0, r9
 800ce50:	f001 f8ac 	bl	800dfac <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 800ce54:	2800      	cmp	r0, #0
 800ce56:	f040 827a 	bne.w	800d34e <tcp_input+0xa2a>
    tcp_output(npcb);
 800ce5a:	4648      	mov	r0, r9
 800ce5c:	f001 fac2 	bl	800e3e4 <tcp_output>
 800ce60:	e56d      	b.n	800c93e <tcp_input+0x1a>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800ce62:	079a      	lsls	r2, r3, #30
 800ce64:	d504      	bpl.n	800ce70 <tcp_input+0x54c>
 800ce66:	7d2b      	ldrb	r3, [r5, #20]
 800ce68:	3b02      	subs	r3, #2
 800ce6a:	2b01      	cmp	r3, #1
 800ce6c:	f200 81df 	bhi.w	800d22e <tcp_input+0x90a>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800ce70:	8b6b      	ldrh	r3, [r5, #26]
 800ce72:	06db      	lsls	r3, r3, #27
 800ce74:	d402      	bmi.n	800ce7c <tcp_input+0x558>
    pcb->tmr = tcp_ticks;
 800ce76:	4b70      	ldr	r3, [pc, #448]	; (800d038 <tcp_input+0x714>)
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	622b      	str	r3, [r5, #32]
  pcb->persist_probe = 0;
 800ce7c:	2300      	movs	r3, #0
  tcp_parseopt(pcb);
 800ce7e:	4628      	mov	r0, r5
  pcb->persist_probe = 0;
 800ce80:	f8a5 309a 	strh.w	r3, [r5, #154]	; 0x9a
  tcp_parseopt(pcb);
 800ce84:	f7ff fca2 	bl	800c7cc <tcp_parseopt>
  switch (pcb->state) {
 800ce88:	7d2b      	ldrb	r3, [r5, #20]
 800ce8a:	3b02      	subs	r3, #2
 800ce8c:	2b07      	cmp	r3, #7
 800ce8e:	f63f aeaf 	bhi.w	800cbf0 <tcp_input+0x2cc>
 800ce92:	e8df f003 	tbb	[pc, r3]
 800ce96:	1334      	.short	0x1334
 800ce98:	04748f04 	.word	0x04748f04
 800ce9c:	5ba8      	.short	0x5ba8
      tcp_receive(pcb);
 800ce9e:	4628      	mov	r0, r5
 800cea0:	f7fe fff8 	bl	800be94 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800cea4:	f899 3000 	ldrb.w	r3, [r9]
 800cea8:	069e      	lsls	r6, r3, #26
 800ceaa:	f57f aea1 	bpl.w	800cbf0 <tcp_input+0x2cc>
        tcp_ack_now(pcb);
 800ceae:	8b6b      	ldrh	r3, [r5, #26]
 800ceb0:	f043 0302 	orr.w	r3, r3, #2
 800ceb4:	836b      	strh	r3, [r5, #26]
        pcb->state = CLOSE_WAIT;
 800ceb6:	2307      	movs	r3, #7
 800ceb8:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 800ceba:	e699      	b.n	800cbf0 <tcp_input+0x2cc>
      if (flags & TCP_ACK) {
 800cebc:	4b5a      	ldr	r3, [pc, #360]	; (800d028 <tcp_input+0x704>)
 800cebe:	781b      	ldrb	r3, [r3, #0]
 800cec0:	06d9      	lsls	r1, r3, #27
 800cec2:	f140 820c 	bpl.w	800d2de <tcp_input+0x9ba>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800cec6:	4b5d      	ldr	r3, [pc, #372]	; (800d03c <tcp_input+0x718>)
 800cec8:	6819      	ldr	r1, [r3, #0]
 800ceca:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800cecc:	43db      	mvns	r3, r3
 800cece:	42cb      	cmn	r3, r1
 800ced0:	d404      	bmi.n	800cedc <tcp_input+0x5b8>
 800ced2:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800ced4:	1acb      	subs	r3, r1, r3
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	f340 824d 	ble.w	800d376 <tcp_input+0xa52>
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cedc:	9a05      	ldr	r2, [sp, #20]
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cede:	6833      	ldr	r3, [r6, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cee0:	8810      	ldrh	r0, [r2, #0]
 800cee2:	4a52      	ldr	r2, [pc, #328]	; (800d02c <tcp_input+0x708>)
 800cee4:	6812      	ldr	r2, [r2, #0]
 800cee6:	4402      	add	r2, r0
 800cee8:	8818      	ldrh	r0, [r3, #0]
 800ceea:	9002      	str	r0, [sp, #8]
 800ceec:	4628      	mov	r0, r5
 800ceee:	885b      	ldrh	r3, [r3, #2]
 800cef0:	9301      	str	r3, [sp, #4]
 800cef2:	4b53      	ldr	r3, [pc, #332]	; (800d040 <tcp_input+0x71c>)
 800cef4:	9300      	str	r3, [sp, #0]
 800cef6:	3304      	adds	r3, #4
 800cef8:	f001 f9fa 	bl	800e2f0 <tcp_rst>
    if (err != ERR_ABRT) {
 800cefc:	e678      	b.n	800cbf0 <tcp_input+0x2cc>
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800cefe:	4b4a      	ldr	r3, [pc, #296]	; (800d028 <tcp_input+0x704>)
 800cf00:	781a      	ldrb	r2, [r3, #0]
 800cf02:	f002 0312 	and.w	r3, r2, #18
 800cf06:	2b12      	cmp	r3, #18
 800cf08:	f000 813a 	beq.w	800d180 <tcp_input+0x85c>
      else if (flags & TCP_ACK) {
 800cf0c:	06d0      	lsls	r0, r2, #27
 800cf0e:	f57f ae6f 	bpl.w	800cbf0 <tcp_input+0x2cc>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cf12:	9a05      	ldr	r2, [sp, #20]
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cf14:	6833      	ldr	r3, [r6, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cf16:	8811      	ldrh	r1, [r2, #0]
 800cf18:	4a44      	ldr	r2, [pc, #272]	; (800d02c <tcp_input+0x708>)
 800cf1a:	8818      	ldrh	r0, [r3, #0]
 800cf1c:	6812      	ldr	r2, [r2, #0]
 800cf1e:	440a      	add	r2, r1
 800cf20:	4946      	ldr	r1, [pc, #280]	; (800d03c <tcp_input+0x718>)
 800cf22:	6809      	ldr	r1, [r1, #0]
 800cf24:	9002      	str	r0, [sp, #8]
 800cf26:	4628      	mov	r0, r5
 800cf28:	885b      	ldrh	r3, [r3, #2]
 800cf2a:	9301      	str	r3, [sp, #4]
 800cf2c:	4b44      	ldr	r3, [pc, #272]	; (800d040 <tcp_input+0x71c>)
 800cf2e:	9300      	str	r3, [sp, #0]
 800cf30:	3304      	adds	r3, #4
 800cf32:	f001 f9dd 	bl	800e2f0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800cf36:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
 800cf3a:	2b05      	cmp	r3, #5
 800cf3c:	f63f ae58 	bhi.w	800cbf0 <tcp_input+0x2cc>
          pcb->rtime = 0;
 800cf40:	2300      	movs	r3, #0
          tcp_rexmit_rto(pcb);
 800cf42:	4628      	mov	r0, r5
          pcb->rtime = 0;
 800cf44:	862b      	strh	r3, [r5, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800cf46:	f001 fc4b 	bl	800e7e0 <tcp_rexmit_rto>
    if (err != ERR_ABRT) {
 800cf4a:	e651      	b.n	800cbf0 <tcp_input+0x2cc>
      tcp_receive(pcb);
 800cf4c:	4628      	mov	r0, r5
 800cf4e:	f7fe ffa1 	bl	800be94 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800cf52:	4b35      	ldr	r3, [pc, #212]	; (800d028 <tcp_input+0x704>)
 800cf54:	781b      	ldrb	r3, [r3, #0]
 800cf56:	06de      	lsls	r6, r3, #27
 800cf58:	f57f ae4a 	bpl.w	800cbf0 <tcp_input+0x2cc>
 800cf5c:	4b37      	ldr	r3, [pc, #220]	; (800d03c <tcp_input+0x718>)
 800cf5e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	429a      	cmp	r2, r3
 800cf64:	f47f ae44 	bne.w	800cbf0 <tcp_input+0x2cc>
 800cf68:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	f47f ae40 	bne.w	800cbf0 <tcp_input+0x2cc>
        recv_flags |= TF_CLOSED;
 800cf70:	f899 3000 	ldrb.w	r3, [r9]
 800cf74:	f043 0310 	orr.w	r3, r3, #16
 800cf78:	f889 3000 	strb.w	r3, [r9]
    if (err != ERR_ABRT) {
 800cf7c:	e638      	b.n	800cbf0 <tcp_input+0x2cc>
      tcp_receive(pcb);
 800cf7e:	4628      	mov	r0, r5
 800cf80:	f7fe ff88 	bl	800be94 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800cf84:	f899 3000 	ldrb.w	r3, [r9]
 800cf88:	069a      	lsls	r2, r3, #26
 800cf8a:	f57f ae31 	bpl.w	800cbf0 <tcp_input+0x2cc>
        tcp_ack_now(pcb);
 800cf8e:	8b6b      	ldrh	r3, [r5, #26]
        tcp_pcb_purge(pcb);
 800cf90:	4628      	mov	r0, r5
        tcp_ack_now(pcb);
 800cf92:	f043 0302 	orr.w	r3, r3, #2
 800cf96:	836b      	strh	r3, [r5, #26]
        tcp_pcb_purge(pcb);
 800cf98:	f7fd fed4 	bl	800ad44 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800cf9c:	4b24      	ldr	r3, [pc, #144]	; (800d030 <tcp_input+0x70c>)
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	42ab      	cmp	r3, r5
 800cfa2:	d05e      	beq.n	800d062 <tcp_input+0x73e>
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d05f      	beq.n	800d068 <tcp_input+0x744>
 800cfa8:	68da      	ldr	r2, [r3, #12]
 800cfaa:	42aa      	cmp	r2, r5
 800cfac:	f000 8218 	beq.w	800d3e0 <tcp_input+0xabc>
 800cfb0:	4613      	mov	r3, r2
 800cfb2:	e7f7      	b.n	800cfa4 <tcp_input+0x680>
      tcp_receive(pcb);
 800cfb4:	4628      	mov	r0, r5
 800cfb6:	f7fe ff6d 	bl	800be94 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800cfba:	f899 3000 	ldrb.w	r3, [r9]
 800cfbe:	f013 0f20 	tst.w	r3, #32
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800cfc2:	4b19      	ldr	r3, [pc, #100]	; (800d028 <tcp_input+0x704>)
 800cfc4:	781b      	ldrb	r3, [r3, #0]
      if (recv_flags & TF_GOT_FIN) {
 800cfc6:	f000 817a 	beq.w	800d2be <tcp_input+0x99a>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800cfca:	06d8      	lsls	r0, r3, #27
 800cfcc:	d504      	bpl.n	800cfd8 <tcp_input+0x6b4>
 800cfce:	4b1b      	ldr	r3, [pc, #108]	; (800d03c <tcp_input+0x718>)
 800cfd0:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	429a      	cmp	r2, r3
 800cfd6:	d035      	beq.n	800d044 <tcp_input+0x720>
          tcp_ack_now(pcb);
 800cfd8:	8b6b      	ldrh	r3, [r5, #26]
 800cfda:	f043 0302 	orr.w	r3, r3, #2
 800cfde:	836b      	strh	r3, [r5, #26]
          pcb->state = CLOSING;
 800cfe0:	2308      	movs	r3, #8
 800cfe2:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 800cfe4:	e604      	b.n	800cbf0 <tcp_input+0x2cc>
      tcp_receive(pcb);
 800cfe6:	4628      	mov	r0, r5
 800cfe8:	f7fe ff54 	bl	800be94 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800cfec:	4b0e      	ldr	r3, [pc, #56]	; (800d028 <tcp_input+0x704>)
 800cfee:	781b      	ldrb	r3, [r3, #0]
 800cff0:	06db      	lsls	r3, r3, #27
 800cff2:	f57f adfd 	bpl.w	800cbf0 <tcp_input+0x2cc>
 800cff6:	4b11      	ldr	r3, [pc, #68]	; (800d03c <tcp_input+0x718>)
 800cff8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	429a      	cmp	r2, r3
 800cffe:	f47f adf7 	bne.w	800cbf0 <tcp_input+0x2cc>
 800d002:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800d004:	2b00      	cmp	r3, #0
 800d006:	f47f adf3 	bne.w	800cbf0 <tcp_input+0x2cc>
        tcp_pcb_purge(pcb);
 800d00a:	4628      	mov	r0, r5
 800d00c:	f7fd fe9a 	bl	800ad44 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d010:	4b07      	ldr	r3, [pc, #28]	; (800d030 <tcp_input+0x70c>)
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	42ab      	cmp	r3, r5
 800d016:	d024      	beq.n	800d062 <tcp_input+0x73e>
 800d018:	b333      	cbz	r3, 800d068 <tcp_input+0x744>
 800d01a:	68da      	ldr	r2, [r3, #12]
 800d01c:	42aa      	cmp	r2, r5
 800d01e:	f000 81df 	beq.w	800d3e0 <tcp_input+0xabc>
 800d022:	4613      	mov	r3, r2
 800d024:	e7f8      	b.n	800d018 <tcp_input+0x6f4>
 800d026:	bf00      	nop
 800d028:	2400e66c 	.word	0x2400e66c
 800d02c:	2400e68c 	.word	0x2400e68c
 800d030:	2400e64c 	.word	0x2400e64c
 800d034:	2400e650 	.word	0x2400e650
 800d038:	2400e65c 	.word	0x2400e65c
 800d03c:	2400e668 	.word	0x2400e668
 800d040:	2400b55c 	.word	0x2400b55c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d044:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800d046:	2b00      	cmp	r3, #0
 800d048:	d1c6      	bne.n	800cfd8 <tcp_input+0x6b4>
          tcp_ack_now(pcb);
 800d04a:	8b6b      	ldrh	r3, [r5, #26]
          tcp_pcb_purge(pcb);
 800d04c:	4628      	mov	r0, r5
          tcp_ack_now(pcb);
 800d04e:	f043 0302 	orr.w	r3, r3, #2
 800d052:	836b      	strh	r3, [r5, #26]
          tcp_pcb_purge(pcb);
 800d054:	f7fd fe76 	bl	800ad44 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800d058:	4bab      	ldr	r3, [pc, #684]	; (800d308 <tcp_input+0x9e4>)
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	42ab      	cmp	r3, r5
 800d05e:	f040 81c2 	bne.w	800d3e6 <tcp_input+0xac2>
        TCP_RMV_ACTIVE(pcb);
 800d062:	68eb      	ldr	r3, [r5, #12]
 800d064:	4aa8      	ldr	r2, [pc, #672]	; (800d308 <tcp_input+0x9e4>)
 800d066:	6013      	str	r3, [r2, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d068:	4ba8      	ldr	r3, [pc, #672]	; (800d30c <tcp_input+0x9e8>)
        pcb->state = TIME_WAIT;
 800d06a:	220a      	movs	r2, #10
 800d06c:	752a      	strb	r2, [r5, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d06e:	681a      	ldr	r2, [r3, #0]
 800d070:	601d      	str	r5, [r3, #0]
 800d072:	60ea      	str	r2, [r5, #12]
        TCP_RMV_ACTIVE(pcb);
 800d074:	2201      	movs	r2, #1
 800d076:	4ba6      	ldr	r3, [pc, #664]	; (800d310 <tcp_input+0x9ec>)
 800d078:	701a      	strb	r2, [r3, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d07a:	f001 fcd3 	bl	800ea24 <tcp_timer_needed>
    if (err != ERR_ABRT) {
 800d07e:	e5b7      	b.n	800cbf0 <tcp_input+0x2cc>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800d080:	4ba4      	ldr	r3, [pc, #656]	; (800d314 <tcp_input+0x9f0>)
 800d082:	22c2      	movs	r2, #194	; 0xc2
 800d084:	49a4      	ldr	r1, [pc, #656]	; (800d318 <tcp_input+0x9f4>)
 800d086:	48a5      	ldr	r0, [pc, #660]	; (800d31c <tcp_input+0x9f8>)
 800d088:	f004 faba 	bl	8011600 <iprintf>
 800d08c:	e48a      	b.n	800c9a4 <tcp_input+0x80>
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800d08e:	4ba1      	ldr	r3, [pc, #644]	; (800d314 <tcp_input+0x9f0>)
 800d090:	22df      	movs	r2, #223	; 0xdf
 800d092:	49a3      	ldr	r1, [pc, #652]	; (800d320 <tcp_input+0x9fc>)
 800d094:	48a1      	ldr	r0, [pc, #644]	; (800d31c <tcp_input+0x9f8>)
 800d096:	f004 fab3 	bl	8011600 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800d09a:	8923      	ldrh	r3, [r4, #8]
 800d09c:	e4a7      	b.n	800c9ee <tcp_input+0xca>
        if (pcb->rcv_ann_wnd == 0) {
 800d09e:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	f000 80da 	beq.w	800d25a <tcp_input+0x936>
 800d0a6:	4c9f      	ldr	r4, [pc, #636]	; (800d324 <tcp_input+0xa00>)
 800d0a8:	e5b5      	b.n	800cc16 <tcp_input+0x2f2>
        if (recv_acked > 0) {
 800d0aa:	f8bb 2000 	ldrh.w	r2, [fp]
 800d0ae:	b15a      	cbz	r2, 800d0c8 <tcp_input+0x7a4>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800d0b0:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 800d0b4:	b12b      	cbz	r3, 800d0c2 <tcp_input+0x79e>
 800d0b6:	4629      	mov	r1, r5
 800d0b8:	6928      	ldr	r0, [r5, #16]
 800d0ba:	4798      	blx	r3
            if (err == ERR_ABRT) {
 800d0bc:	300d      	adds	r0, #13
 800d0be:	f43f adaa 	beq.w	800cc16 <tcp_input+0x2f2>
          recv_acked = 0;
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	f8ab 3000 	strh.w	r3, [fp]
        if (tcp_input_delayed_close(pcb)) {
 800d0c8:	4628      	mov	r0, r5
 800d0ca:	f7fe fe45 	bl	800bd58 <tcp_input_delayed_close>
 800d0ce:	2800      	cmp	r0, #0
 800d0d0:	f47f ada1 	bne.w	800cc16 <tcp_input+0x2f2>
        if (recv_data != NULL) {
 800d0d4:	f8d8 2000 	ldr.w	r2, [r8]
 800d0d8:	b1fa      	cbz	r2, 800d11a <tcp_input+0x7f6>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800d0da:	6fab      	ldr	r3, [r5, #120]	; 0x78
 800d0dc:	b143      	cbz	r3, 800d0f0 <tcp_input+0x7cc>
 800d0de:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800d0e2:	4b8c      	ldr	r3, [pc, #560]	; (800d314 <tcp_input+0x9f0>)
 800d0e4:	4990      	ldr	r1, [pc, #576]	; (800d328 <tcp_input+0xa04>)
 800d0e6:	488d      	ldr	r0, [pc, #564]	; (800d31c <tcp_input+0x9f8>)
 800d0e8:	f004 fa8a 	bl	8011600 <iprintf>
            pbuf_free(recv_data);
 800d0ec:	f8d8 2000 	ldr.w	r2, [r8]
          if (pcb->flags & TF_RXCLOSED) {
 800d0f0:	8b6b      	ldrh	r3, [r5, #26]
 800d0f2:	f013 0310 	ands.w	r3, r3, #16
 800d0f6:	f040 80db 	bne.w	800d2b0 <tcp_input+0x98c>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800d0fa:	f8d5 6084 	ldr.w	r6, [r5, #132]	; 0x84
 800d0fe:	2e00      	cmp	r6, #0
 800d100:	f000 80fb 	beq.w	800d2fa <tcp_input+0x9d6>
 800d104:	4629      	mov	r1, r5
 800d106:	6928      	ldr	r0, [r5, #16]
 800d108:	47b0      	blx	r6
          if (err == ERR_ABRT) {
 800d10a:	f110 0f0d 	cmn.w	r0, #13
 800d10e:	f43f ad82 	beq.w	800cc16 <tcp_input+0x2f2>
          if (err != ERR_OK) {
 800d112:	b110      	cbz	r0, 800d11a <tcp_input+0x7f6>
            pcb->refused_data = recv_data;
 800d114:	f8d8 3000 	ldr.w	r3, [r8]
 800d118:	67ab      	str	r3, [r5, #120]	; 0x78
        if (recv_flags & TF_GOT_FIN) {
 800d11a:	f899 3000 	ldrb.w	r3, [r9]
 800d11e:	0699      	lsls	r1, r3, #26
 800d120:	d507      	bpl.n	800d132 <tcp_input+0x80e>
          if (pcb->refused_data != NULL) {
 800d122:	6fab      	ldr	r3, [r5, #120]	; 0x78
 800d124:	2b00      	cmp	r3, #0
 800d126:	f000 80af 	beq.w	800d288 <tcp_input+0x964>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800d12a:	7b5a      	ldrb	r2, [r3, #13]
 800d12c:	f042 0220 	orr.w	r2, r2, #32
 800d130:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 800d132:	2300      	movs	r3, #0
        if (tcp_input_delayed_close(pcb)) {
 800d134:	4628      	mov	r0, r5
        tcp_input_pcb = NULL;
 800d136:	6023      	str	r3, [r4, #0]
        if (tcp_input_delayed_close(pcb)) {
 800d138:	f7fe fe0e 	bl	800bd58 <tcp_input_delayed_close>
 800d13c:	2800      	cmp	r0, #0
 800d13e:	f47f ad6a 	bne.w	800cc16 <tcp_input+0x2f2>
        tcp_output(pcb);
 800d142:	4628      	mov	r0, r5
 800d144:	f001 f94e 	bl	800e3e4 <tcp_output>
 800d148:	e565      	b.n	800cc16 <tcp_input+0x2f2>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800d14a:	6830      	ldr	r0, [r6, #0]
 800d14c:	8980      	ldrh	r0, [r0, #12]
 800d14e:	f7fc f923 	bl	8009398 <lwip_htons>
 800d152:	f010 0004 	ands.w	r0, r0, #4
 800d156:	f47f abf2 	bne.w	800c93e <tcp_input+0x1a>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d15a:	9a05      	ldr	r2, [sp, #20]
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d15c:	6833      	ldr	r3, [r6, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d15e:	8811      	ldrh	r1, [r2, #0]
 800d160:	4a72      	ldr	r2, [pc, #456]	; (800d32c <tcp_input+0xa08>)
 800d162:	881d      	ldrh	r5, [r3, #0]
 800d164:	6812      	ldr	r2, [r2, #0]
 800d166:	440a      	add	r2, r1
 800d168:	4971      	ldr	r1, [pc, #452]	; (800d330 <tcp_input+0xa0c>)
 800d16a:	6809      	ldr	r1, [r1, #0]
 800d16c:	9502      	str	r5, [sp, #8]
 800d16e:	885b      	ldrh	r3, [r3, #2]
 800d170:	9301      	str	r3, [sp, #4]
 800d172:	4b70      	ldr	r3, [pc, #448]	; (800d334 <tcp_input+0xa10>)
 800d174:	9300      	str	r3, [sp, #0]
 800d176:	3304      	adds	r3, #4
 800d178:	f001 f8ba 	bl	800e2f0 <tcp_rst>
 800d17c:	f7ff bbdf 	b.w	800c93e <tcp_input+0x1a>
          && (ackno == pcb->lastack + 1)) {
 800d180:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800d182:	496b      	ldr	r1, [pc, #428]	; (800d330 <tcp_input+0xa0c>)
 800d184:	3301      	adds	r3, #1
 800d186:	6809      	ldr	r1, [r1, #0]
 800d188:	428b      	cmp	r3, r1
 800d18a:	f47f aebf 	bne.w	800cf0c <tcp_input+0x5e8>
        pcb->lastack = ackno;
 800d18e:	646b      	str	r3, [r5, #68]	; 0x44
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d190:	1d2a      	adds	r2, r5, #4
        pcb->rcv_nxt = seqno + 1;
 800d192:	4b66      	ldr	r3, [pc, #408]	; (800d32c <tcp_input+0xa08>)
        pcb->snd_wnd = tcphdr->wnd;
 800d194:	6830      	ldr	r0, [r6, #0]
        pcb->rcv_nxt = seqno + 1;
 800d196:	681b      	ldr	r3, [r3, #0]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d198:	8e6e      	ldrh	r6, [r5, #50]	; 0x32
        pcb->rcv_nxt = seqno + 1;
 800d19a:	1c59      	adds	r1, r3, #1
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800d19c:	3b01      	subs	r3, #1
        pcb->rcv_nxt = seqno + 1;
 800d19e:	6269      	str	r1, [r5, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800d1a0:	62e9      	str	r1, [r5, #44]	; 0x2c
        pcb->snd_wnd = tcphdr->wnd;
 800d1a2:	89c1      	ldrh	r1, [r0, #14]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d1a4:	4610      	mov	r0, r2
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800d1a6:	656b      	str	r3, [r5, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800d1a8:	2304      	movs	r3, #4
        pcb->snd_wnd = tcphdr->wnd;
 800d1aa:	f8a5 1060 	strh.w	r1, [r5, #96]	; 0x60
        pcb->state = ESTABLISHED;
 800d1ae:	752b      	strb	r3, [r5, #20]
        pcb->snd_wnd_max = pcb->snd_wnd;
 800d1b0:	f8a5 1062 	strh.w	r1, [r5, #98]	; 0x62
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d1b4:	9205      	str	r2, [sp, #20]
 800d1b6:	f002 fd4b 	bl	800fc50 <ip4_route>
 800d1ba:	9a05      	ldr	r2, [sp, #20]
 800d1bc:	4601      	mov	r1, r0
 800d1be:	4630      	mov	r0, r6
 800d1c0:	f7fe fd18 	bl	800bbf4 <tcp_eff_send_mss_netif>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d1c4:	f241 131c 	movw	r3, #4380	; 0x111c
 800d1c8:	0042      	lsls	r2, r0, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d1ca:	8668      	strh	r0, [r5, #50]	; 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d1cc:	0081      	lsls	r1, r0, #2
 800d1ce:	429a      	cmp	r2, r3
 800d1d0:	4616      	mov	r6, r2
 800d1d2:	bf38      	it	cc
 800d1d4:	461e      	movcc	r6, r3
 800d1d6:	ebb6 0f80 	cmp.w	r6, r0, lsl #2
 800d1da:	f240 8148 	bls.w	800d46e <tcp_input+0xb4a>
 800d1de:	b28b      	uxth	r3, r1
 800d1e0:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800d1e4:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	f000 8138 	beq.w	800d45e <tcp_input+0xb3a>
        --pcb->snd_queuelen;
 800d1ee:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
        rseg = pcb->unacked;
 800d1f2:	6f2e      	ldr	r6, [r5, #112]	; 0x70
        --pcb->snd_queuelen;
 800d1f4:	3b01      	subs	r3, #1
 800d1f6:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
        if (rseg == NULL) {
 800d1fa:	2e00      	cmp	r6, #0
 800d1fc:	f000 812a 	beq.w	800d454 <tcp_input+0xb30>
          pcb->unacked = rseg->next;
 800d200:	6833      	ldr	r3, [r6, #0]
 800d202:	672b      	str	r3, [r5, #112]	; 0x70
        tcp_seg_free(rseg);
 800d204:	4630      	mov	r0, r6
 800d206:	f7fd fce7 	bl	800abd8 <tcp_seg_free>
        if (pcb->unacked == NULL) {
 800d20a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	f000 811d 	beq.w	800d44c <tcp_input+0xb28>
          pcb->rtime = 0;
 800d212:	2300      	movs	r3, #0
 800d214:	862b      	strh	r3, [r5, #48]	; 0x30
          pcb->nrtx = 0;
 800d216:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800d21a:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 800d21e:	b133      	cbz	r3, 800d22e <tcp_input+0x90a>
 800d220:	2200      	movs	r2, #0
 800d222:	4629      	mov	r1, r5
 800d224:	6928      	ldr	r0, [r5, #16]
 800d226:	4798      	blx	r3
        if (err == ERR_ABRT) {
 800d228:	300d      	adds	r0, #13
 800d22a:	f43f acf4 	beq.w	800cc16 <tcp_input+0x2f2>
        tcp_ack_now(pcb);
 800d22e:	8b6b      	ldrh	r3, [r5, #26]
 800d230:	f043 0302 	orr.w	r3, r3, #2
 800d234:	836b      	strh	r3, [r5, #26]
    if (err != ERR_ABRT) {
 800d236:	e4db      	b.n	800cbf0 <tcp_input+0x2cc>
      if (ackno == pcb->snd_nxt) {
 800d238:	4b3d      	ldr	r3, [pc, #244]	; (800d330 <tcp_input+0xa0c>)
 800d23a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	429a      	cmp	r2, r3
 800d240:	f47f acd6 	bne.w	800cbf0 <tcp_input+0x2cc>
      recv_flags |= TF_RESET;
 800d244:	f899 3000 	ldrb.w	r3, [r9]
 800d248:	f043 0308 	orr.w	r3, r3, #8
 800d24c:	f889 3000 	strb.w	r3, [r9]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800d250:	8b6b      	ldrh	r3, [r5, #26]
 800d252:	f023 0301 	bic.w	r3, r3, #1
 800d256:	836b      	strh	r3, [r5, #26]
    if (err != ERR_ABRT) {
 800d258:	e4ca      	b.n	800cbf0 <tcp_input+0x2cc>
          tcp_send_empty_ack(pcb);
 800d25a:	4628      	mov	r0, r5
 800d25c:	4c31      	ldr	r4, [pc, #196]	; (800d324 <tcp_input+0xa00>)
 800d25e:	f001 f88f 	bl	800e380 <tcp_send_empty_ack>
 800d262:	e4d8      	b.n	800cc16 <tcp_input+0x2f2>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d264:	8802      	ldrh	r2, [r0, #0]
 800d266:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800d26a:	9b05      	ldr	r3, [sp, #20]
 800d26c:	881a      	ldrh	r2, [r3, #0]
 800d26e:	4b2f      	ldr	r3, [pc, #188]	; (800d32c <tcp_input+0xa08>)
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	441a      	add	r2, r3
 800d274:	4b2e      	ldr	r3, [pc, #184]	; (800d330 <tcp_input+0xa0c>)
 800d276:	4628      	mov	r0, r5
 800d278:	6819      	ldr	r1, [r3, #0]
 800d27a:	4b2e      	ldr	r3, [pc, #184]	; (800d334 <tcp_input+0xa10>)
 800d27c:	9300      	str	r3, [sp, #0]
 800d27e:	3304      	adds	r3, #4
 800d280:	f001 f836 	bl	800e2f0 <tcp_rst>
 800d284:	f7ff bb5b 	b.w	800c93e <tcp_input+0x1a>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d288:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 800d28a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d28e:	d001      	beq.n	800d294 <tcp_input+0x970>
              pcb->rcv_wnd++;
 800d290:	3301      	adds	r3, #1
 800d292:	852b      	strh	r3, [r5, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800d294:	f8d5 6084 	ldr.w	r6, [r5, #132]	; 0x84
 800d298:	2e00      	cmp	r6, #0
 800d29a:	f43f af4a 	beq.w	800d132 <tcp_input+0x80e>
 800d29e:	2300      	movs	r3, #0
 800d2a0:	4629      	mov	r1, r5
 800d2a2:	6928      	ldr	r0, [r5, #16]
 800d2a4:	461a      	mov	r2, r3
 800d2a6:	47b0      	blx	r6
            if (err == ERR_ABRT) {
 800d2a8:	300d      	adds	r0, #13
 800d2aa:	f47f af42 	bne.w	800d132 <tcp_input+0x80e>
 800d2ae:	e4b2      	b.n	800cc16 <tcp_input+0x2f2>
            pbuf_free(recv_data);
 800d2b0:	4610      	mov	r0, r2
 800d2b2:	f7fc fff3 	bl	800a29c <pbuf_free>
            tcp_abort(pcb);
 800d2b6:	4628      	mov	r0, r5
 800d2b8:	f7fe f980 	bl	800b5bc <tcp_abort>
            goto aborted;
 800d2bc:	e4ab      	b.n	800cc16 <tcp_input+0x2f2>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d2be:	06d9      	lsls	r1, r3, #27
 800d2c0:	f57f ac96 	bpl.w	800cbf0 <tcp_input+0x2cc>
 800d2c4:	4b1a      	ldr	r3, [pc, #104]	; (800d330 <tcp_input+0xa0c>)
 800d2c6:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	429a      	cmp	r2, r3
 800d2cc:	f47f ac90 	bne.w	800cbf0 <tcp_input+0x2cc>
 800d2d0:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	f47f ac8c 	bne.w	800cbf0 <tcp_input+0x2cc>
        pcb->state = FIN_WAIT_2;
 800d2d8:	2306      	movs	r3, #6
 800d2da:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 800d2dc:	e488      	b.n	800cbf0 <tcp_input+0x2cc>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800d2de:	079b      	lsls	r3, r3, #30
 800d2e0:	f57f ac86 	bpl.w	800cbf0 <tcp_input+0x2cc>
 800d2e4:	4b11      	ldr	r3, [pc, #68]	; (800d32c <tcp_input+0xa08>)
 800d2e6:	681a      	ldr	r2, [r3, #0]
 800d2e8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d2ea:	3b01      	subs	r3, #1
 800d2ec:	4293      	cmp	r3, r2
 800d2ee:	f47f ac7f 	bne.w	800cbf0 <tcp_input+0x2cc>
        tcp_rexmit(pcb);
 800d2f2:	4628      	mov	r0, r5
 800d2f4:	f000 ff7e 	bl	800e1f4 <tcp_rexmit>
    if (err != ERR_ABRT) {
 800d2f8:	e47a      	b.n	800cbf0 <tcp_input+0x2cc>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800d2fa:	4633      	mov	r3, r6
 800d2fc:	4630      	mov	r0, r6
 800d2fe:	4629      	mov	r1, r5
 800d300:	f7fe fb9a 	bl	800ba38 <tcp_recv_null>
 800d304:	e701      	b.n	800d10a <tcp_input+0x7e6>
 800d306:	bf00      	nop
 800d308:	2400e64c 	.word	0x2400e64c
 800d30c:	2400e664 	.word	0x2400e664
 800d310:	2400e650 	.word	0x2400e650
 800d314:	08013e00 	.word	0x08013e00
 800d318:	08014024 	.word	0x08014024
 800d31c:	080124d0 	.word	0x080124d0
 800d320:	08014034 	.word	0x08014034
 800d324:	2400e690 	.word	0x2400e690
 800d328:	080141d0 	.word	0x080141d0
 800d32c:	2400e68c 	.word	0x2400e68c
 800d330:	2400e668 	.word	0x2400e668
 800d334:	2400b55c 	.word	0x2400b55c
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d338:	69ab      	ldr	r3, [r5, #24]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	f43f aaff 	beq.w	800c93e <tcp_input+0x1a>
 800d340:	4601      	mov	r1, r0
 800d342:	f04f 32ff 	mov.w	r2, #4294967295
 800d346:	6928      	ldr	r0, [r5, #16]
 800d348:	4798      	blx	r3
 800d34a:	f7ff baf8 	b.w	800c93e <tcp_input+0x1a>
      tcp_abandon(npcb, 0);
 800d34e:	4641      	mov	r1, r8
 800d350:	4648      	mov	r0, r9
 800d352:	f7fe f863 	bl	800b41c <tcp_abandon>
      return;
 800d356:	f7ff baf2 	b.w	800c93e <tcp_input+0x1a>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800d35a:	4b4b      	ldr	r3, [pc, #300]	; (800d488 <tcp_input+0xb64>)
 800d35c:	f240 120d 	movw	r2, #269	; 0x10d
 800d360:	494a      	ldr	r1, [pc, #296]	; (800d48c <tcp_input+0xb68>)
 800d362:	484b      	ldr	r0, [pc, #300]	; (800d490 <tcp_input+0xb6c>)
 800d364:	f004 f94c 	bl	8011600 <iprintf>
      if (prev != NULL) {
 800d368:	f1b8 0f00 	cmp.w	r8, #0
 800d36c:	f43f abf9 	beq.w	800cb62 <tcp_input+0x23e>
 800d370:	68eb      	ldr	r3, [r5, #12]
 800d372:	f7ff bbf0 	b.w	800cb56 <tcp_input+0x232>
          pcb->state = ESTABLISHED;
 800d376:	2304      	movs	r3, #4
 800d378:	752b      	strb	r3, [r5, #20]
          if (pcb->listener == NULL) {
 800d37a:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d09a      	beq.n	800d2b6 <tcp_input+0x992>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800d380:	699b      	ldr	r3, [r3, #24]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d056      	beq.n	800d434 <tcp_input+0xb10>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800d386:	2200      	movs	r2, #0
 800d388:	4629      	mov	r1, r5
 800d38a:	6928      	ldr	r0, [r5, #16]
 800d38c:	4798      	blx	r3
          if (err != ERR_OK) {
 800d38e:	2800      	cmp	r0, #0
 800d390:	d14c      	bne.n	800d42c <tcp_input+0xb08>
          tcp_receive(pcb);
 800d392:	4628      	mov	r0, r5
 800d394:	f7fe fd7e 	bl	800be94 <tcp_receive>
          if (recv_acked != 0) {
 800d398:	f8bb 3000 	ldrh.w	r3, [fp]
 800d39c:	b113      	cbz	r3, 800d3a4 <tcp_input+0xa80>
            recv_acked--;
 800d39e:	3b01      	subs	r3, #1
 800d3a0:	f8ab 3000 	strh.w	r3, [fp]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d3a4:	8e69      	ldrh	r1, [r5, #50]	; 0x32
 800d3a6:	f241 131c 	movw	r3, #4380	; 0x111c
 800d3aa:	004a      	lsls	r2, r1, #1
 800d3ac:	0088      	lsls	r0, r1, #2
 800d3ae:	429a      	cmp	r2, r3
 800d3b0:	4616      	mov	r6, r2
 800d3b2:	bf38      	it	cc
 800d3b4:	461e      	movcc	r6, r3
 800d3b6:	ebb6 0f81 	cmp.w	r6, r1, lsl #2
 800d3ba:	d923      	bls.n	800d404 <tcp_input+0xae0>
 800d3bc:	b283      	uxth	r3, r0
 800d3be:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
 800d3c2:	f899 3000 	ldrb.w	r3, [r9]
 800d3c6:	069a      	lsls	r2, r3, #26
 800d3c8:	f57f ac12 	bpl.w	800cbf0 <tcp_input+0x2cc>
 800d3cc:	e56f      	b.n	800ceae <tcp_input+0x58a>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800d3ce:	4b2e      	ldr	r3, [pc, #184]	; (800d488 <tcp_input+0xb64>)
 800d3d0:	f240 1215 	movw	r2, #277	; 0x115
 800d3d4:	492f      	ldr	r1, [pc, #188]	; (800d494 <tcp_input+0xb70>)
 800d3d6:	482e      	ldr	r0, [pc, #184]	; (800d490 <tcp_input+0xb6c>)
 800d3d8:	f004 f912 	bl	8011600 <iprintf>
 800d3dc:	f7ff bbc5 	b.w	800cb6a <tcp_input+0x246>
        TCP_RMV_ACTIVE(pcb);
 800d3e0:	68ea      	ldr	r2, [r5, #12]
 800d3e2:	60da      	str	r2, [r3, #12]
 800d3e4:	e640      	b.n	800d068 <tcp_input+0x744>
          TCP_RMV_ACTIVE(pcb);
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	f43f ae3e 	beq.w	800d068 <tcp_input+0x744>
 800d3ec:	68da      	ldr	r2, [r3, #12]
 800d3ee:	42aa      	cmp	r2, r5
 800d3f0:	d0f6      	beq.n	800d3e0 <tcp_input+0xabc>
 800d3f2:	4613      	mov	r3, r2
 800d3f4:	e7f7      	b.n	800d3e6 <tcp_input+0xac2>
  } else if (flags & TCP_FIN) {
 800d3f6:	07d0      	lsls	r0, r2, #31
 800d3f8:	f57f ac5d 	bpl.w	800ccb6 <tcp_input+0x392>
    pcb->tmr = tcp_ticks;
 800d3fc:	4b26      	ldr	r3, [pc, #152]	; (800d498 <tcp_input+0xb74>)
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	622b      	str	r3, [r5, #32]
 800d402:	e458      	b.n	800ccb6 <tcp_input+0x392>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d404:	429a      	cmp	r2, r3
 800d406:	bf88      	it	hi
 800d408:	b293      	uxthhi	r3, r2
 800d40a:	e7d8      	b.n	800d3be <tcp_input+0xa9a>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800d40c:	2900      	cmp	r1, #0
 800d40e:	f47f af19 	bne.w	800d244 <tcp_input+0x920>
 800d412:	4b1d      	ldr	r3, [pc, #116]	; (800d488 <tcp_input+0xb64>)
 800d414:	f44f 724e 	mov.w	r2, #824	; 0x338
 800d418:	4920      	ldr	r1, [pc, #128]	; (800d49c <tcp_input+0xb78>)
 800d41a:	481d      	ldr	r0, [pc, #116]	; (800d490 <tcp_input+0xb6c>)
 800d41c:	f004 f8f0 	bl	8011600 <iprintf>
 800d420:	e710      	b.n	800d244 <tcp_input+0x920>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d422:	e9cd 0301 	strd	r0, r3, [sp, #4]
 800d426:	9b05      	ldr	r3, [sp, #20]
 800d428:	881b      	ldrh	r3, [r3, #0]
 800d42a:	e722      	b.n	800d272 <tcp_input+0x94e>
            if (err != ERR_ABRT) {
 800d42c:	300d      	adds	r0, #13
 800d42e:	f43f abf2 	beq.w	800cc16 <tcp_input+0x2f2>
 800d432:	e740      	b.n	800d2b6 <tcp_input+0x992>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800d434:	4b14      	ldr	r3, [pc, #80]	; (800d488 <tcp_input+0xb64>)
 800d436:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800d43a:	4919      	ldr	r1, [pc, #100]	; (800d4a0 <tcp_input+0xb7c>)
 800d43c:	4814      	ldr	r0, [pc, #80]	; (800d490 <tcp_input+0xb6c>)
 800d43e:	f004 f8df 	bl	8011600 <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800d442:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 800d444:	699b      	ldr	r3, [r3, #24]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d19d      	bne.n	800d386 <tcp_input+0xa62>
 800d44a:	e734      	b.n	800d2b6 <tcp_input+0x992>
          pcb->rtime = -1;
 800d44c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d450:	862b      	strh	r3, [r5, #48]	; 0x30
 800d452:	e6e2      	b.n	800d21a <tcp_input+0x8f6>
          rseg = pcb->unsent;
 800d454:	6eee      	ldr	r6, [r5, #108]	; 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800d456:	b176      	cbz	r6, 800d476 <tcp_input+0xb52>
          pcb->unsent = rseg->next;
 800d458:	6833      	ldr	r3, [r6, #0]
 800d45a:	66eb      	str	r3, [r5, #108]	; 0x6c
 800d45c:	e6d2      	b.n	800d204 <tcp_input+0x8e0>
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800d45e:	4b0a      	ldr	r3, [pc, #40]	; (800d488 <tcp_input+0xb64>)
 800d460:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800d464:	490f      	ldr	r1, [pc, #60]	; (800d4a4 <tcp_input+0xb80>)
 800d466:	480a      	ldr	r0, [pc, #40]	; (800d490 <tcp_input+0xb6c>)
 800d468:	f004 f8ca 	bl	8011600 <iprintf>
 800d46c:	e6bf      	b.n	800d1ee <tcp_input+0x8ca>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d46e:	429a      	cmp	r2, r3
 800d470:	bf88      	it	hi
 800d472:	b293      	uxthhi	r3, r2
 800d474:	e6b4      	b.n	800d1e0 <tcp_input+0x8bc>
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800d476:	4b04      	ldr	r3, [pc, #16]	; (800d488 <tcp_input+0xb64>)
 800d478:	f44f 725d 	mov.w	r2, #884	; 0x374
 800d47c:	490a      	ldr	r1, [pc, #40]	; (800d4a8 <tcp_input+0xb84>)
 800d47e:	4804      	ldr	r0, [pc, #16]	; (800d490 <tcp_input+0xb6c>)
 800d480:	f004 f8be 	bl	8011600 <iprintf>
 800d484:	e7e8      	b.n	800d458 <tcp_input+0xb34>
 800d486:	bf00      	nop
 800d488:	08013e00 	.word	0x08013e00
 800d48c:	080140dc 	.word	0x080140dc
 800d490:	080124d0 	.word	0x080124d0
 800d494:	08014108 	.word	0x08014108
 800d498:	2400e65c 	.word	0x2400e65c
 800d49c:	08014164 	.word	0x08014164
 800d4a0:	080141b0 	.word	0x080141b0
 800d4a4:	08014184 	.word	0x08014184
 800d4a8:	0801419c 	.word	0x0801419c

0800d4ac <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 800d4ac:	4a02      	ldr	r2, [pc, #8]	; (800d4b8 <tcp_trigger_input_pcb_close+0xc>)
 800d4ae:	7813      	ldrb	r3, [r2, #0]
 800d4b0:	f043 0310 	orr.w	r3, r3, #16
 800d4b4:	7013      	strb	r3, [r2, #0]
}
 800d4b6:	4770      	bx	lr
 800d4b8:	2400e688 	.word	0x2400e688

0800d4bc <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800d4bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4c0:	9f08      	ldr	r7, [sp, #32]
 800d4c2:	4680      	mov	r8, r0
 800d4c4:	460d      	mov	r5, r1
 800d4c6:	4614      	mov	r4, r2
 800d4c8:	461e      	mov	r6, r3
 800d4ca:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 800d4ce:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
  struct pbuf *p;
  u16_t alloc = length;

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800d4d2:	2f00      	cmp	r7, #0
 800d4d4:	d033      	beq.n	800d53e <tcp_pbuf_prealloc+0x82>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800d4d6:	42a5      	cmp	r5, r4
 800d4d8:	d20e      	bcs.n	800d4f8 <tcp_pbuf_prealloc+0x3c>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800d4da:	f019 0f02 	tst.w	r9, #2
 800d4de:	d008      	beq.n	800d4f2 <tcp_pbuf_prealloc+0x36>
        (!(pcb->flags & TF_NODELAY) &&
         (!first_seg ||
          pcb->unsent != NULL ||
          pcb->unacked != NULL))) {
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800d4e0:	f205 211b 	addw	r1, r5, #539	; 0x21b
 800d4e4:	f021 0103 	bic.w	r1, r1, #3
 800d4e8:	42a1      	cmp	r1, r4
 800d4ea:	bf28      	it	cs
 800d4ec:	4621      	movcs	r1, r4
 800d4ee:	b289      	uxth	r1, r1
 800d4f0:	e003      	b.n	800d4fa <tcp_pbuf_prealloc+0x3e>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800d4f2:	8b7b      	ldrh	r3, [r7, #26]
 800d4f4:	065b      	lsls	r3, r3, #25
 800d4f6:	d518      	bpl.n	800d52a <tcp_pbuf_prealloc+0x6e>
 800d4f8:	4629      	mov	r1, r5
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800d4fa:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d4fe:	4640      	mov	r0, r8
 800d500:	f7fc ff3c 	bl	800a37c <pbuf_alloc>
  if (p == NULL) {
 800d504:	4604      	mov	r4, r0
 800d506:	b168      	cbz	r0, 800d524 <tcp_pbuf_prealloc+0x68>
    return NULL;
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800d508:	6803      	ldr	r3, [r0, #0]
 800d50a:	b133      	cbz	r3, 800d51a <tcp_pbuf_prealloc+0x5e>
 800d50c:	4b0f      	ldr	r3, [pc, #60]	; (800d54c <tcp_pbuf_prealloc+0x90>)
 800d50e:	f240 120b 	movw	r2, #267	; 0x10b
 800d512:	490f      	ldr	r1, [pc, #60]	; (800d550 <tcp_pbuf_prealloc+0x94>)
 800d514:	480f      	ldr	r0, [pc, #60]	; (800d554 <tcp_pbuf_prealloc+0x98>)
 800d516:	f004 f873 	bl	8011600 <iprintf>
  *oversize = p->len - length;
 800d51a:	8963      	ldrh	r3, [r4, #10]
 800d51c:	1b5b      	subs	r3, r3, r5
 800d51e:	8033      	strh	r3, [r6, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800d520:	8125      	strh	r5, [r4, #8]
 800d522:	8165      	strh	r5, [r4, #10]
  return p;
}
 800d524:	4620      	mov	r0, r4
 800d526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        (!(pcb->flags & TF_NODELAY) &&
 800d52a:	f1ba 0f00 	cmp.w	sl, #0
 800d52e:	d0d7      	beq.n	800d4e0 <tcp_pbuf_prealloc+0x24>
         (!first_seg ||
 800d530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d532:	2b00      	cmp	r3, #0
 800d534:	d1d4      	bne.n	800d4e0 <tcp_pbuf_prealloc+0x24>
          pcb->unsent != NULL ||
 800d536:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d1d1      	bne.n	800d4e0 <tcp_pbuf_prealloc+0x24>
 800d53c:	e7dc      	b.n	800d4f8 <tcp_pbuf_prealloc+0x3c>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800d53e:	4b03      	ldr	r3, [pc, #12]	; (800d54c <tcp_pbuf_prealloc+0x90>)
 800d540:	22e9      	movs	r2, #233	; 0xe9
 800d542:	4905      	ldr	r1, [pc, #20]	; (800d558 <tcp_pbuf_prealloc+0x9c>)
 800d544:	4803      	ldr	r0, [pc, #12]	; (800d554 <tcp_pbuf_prealloc+0x98>)
 800d546:	f004 f85b 	bl	8011600 <iprintf>
 800d54a:	e7c4      	b.n	800d4d6 <tcp_pbuf_prealloc+0x1a>
 800d54c:	080141ec 	.word	0x080141ec
 800d550:	08014240 	.word	0x08014240
 800d554:	080124d0 	.word	0x080124d0
 800d558:	08014220 	.word	0x08014220

0800d55c <tcp_create_segment>:
{
 800d55c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d560:	460e      	mov	r6, r1
 800d562:	f89d a020 	ldrb.w	sl, [sp, #32]
 800d566:	4690      	mov	r8, r2
 800d568:	4699      	mov	r9, r3
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800d56a:	4607      	mov	r7, r0
 800d56c:	2800      	cmp	r0, #0
 800d56e:	d04a      	beq.n	800d606 <tcp_create_segment+0xaa>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800d570:	2e00      	cmp	r6, #0
 800d572:	d050      	beq.n	800d616 <tcp_create_segment+0xba>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d574:	ea4f 058a 	mov.w	r5, sl, lsl #2
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800d578:	2003      	movs	r0, #3
 800d57a:	f7fc fabb 	bl	8009af4 <memp_malloc>
 800d57e:	4604      	mov	r4, r0
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d580:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800d584:	2800      	cmp	r0, #0
 800d586:	d054      	beq.n	800d632 <tcp_create_segment+0xd6>
  seg->flags = optflags;
 800d588:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 800d58c:	2300      	movs	r3, #0
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800d58e:	8932      	ldrh	r2, [r6, #8]
 800d590:	fa1f fa85 	uxth.w	sl, r5
  seg->p = p;
 800d594:	6046      	str	r6, [r0, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800d596:	42aa      	cmp	r2, r5
  seg->next = NULL;
 800d598:	6003      	str	r3, [r0, #0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800d59a:	d32c      	bcc.n	800d5f6 <tcp_create_segment+0x9a>
  seg->len = p->tot_len - optlen;
 800d59c:	eba2 020a 	sub.w	r2, r2, sl
  if (pbuf_add_header(p, TCP_HLEN)) {
 800d5a0:	4630      	mov	r0, r6
 800d5a2:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 800d5a4:	8122      	strh	r2, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 800d5a6:	f7fc fdd9 	bl	800a15c <pbuf_add_header>
 800d5aa:	4606      	mov	r6, r0
 800d5ac:	2800      	cmp	r0, #0
 800d5ae:	d139      	bne.n	800d624 <tcp_create_segment+0xc8>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800d5b0:	6863      	ldr	r3, [r4, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800d5b2:	02ad      	lsls	r5, r5, #10
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800d5b4:	8af8      	ldrh	r0, [r7, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800d5b6:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800d5ba:	f505 45a0 	add.w	r5, r5, #20480	; 0x5000
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800d5be:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800d5c2:	f7fb fee9 	bl	8009398 <lwip_htons>
 800d5c6:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800d5ca:	8b38      	ldrh	r0, [r7, #24]
 800d5cc:	68e7      	ldr	r7, [r4, #12]
 800d5ce:	f7fb fee3 	bl	8009398 <lwip_htons>
 800d5d2:	8078      	strh	r0, [r7, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800d5d4:	4648      	mov	r0, r9
 800d5d6:	68e7      	ldr	r7, [r4, #12]
 800d5d8:	f7fb fee2 	bl	80093a0 <lwip_htonl>
 800d5dc:	6078      	str	r0, [r7, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800d5de:	ea45 0008 	orr.w	r0, r5, r8
 800d5e2:	68e7      	ldr	r7, [r4, #12]
 800d5e4:	f7fb fed8 	bl	8009398 <lwip_htons>
  seg->tcphdr->urgp = 0;
 800d5e8:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800d5ea:	81b8      	strh	r0, [r7, #12]
  seg->tcphdr->urgp = 0;
 800d5ec:	749e      	strb	r6, [r3, #18]
 800d5ee:	74de      	strb	r6, [r3, #19]
}
 800d5f0:	4620      	mov	r0, r4
 800d5f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800d5f6:	22b0      	movs	r2, #176	; 0xb0
 800d5f8:	4b10      	ldr	r3, [pc, #64]	; (800d63c <tcp_create_segment+0xe0>)
 800d5fa:	4911      	ldr	r1, [pc, #68]	; (800d640 <tcp_create_segment+0xe4>)
 800d5fc:	4811      	ldr	r0, [pc, #68]	; (800d644 <tcp_create_segment+0xe8>)
 800d5fe:	f003 ffff 	bl	8011600 <iprintf>
  seg->len = p->tot_len - optlen;
 800d602:	8932      	ldrh	r2, [r6, #8]
 800d604:	e7ca      	b.n	800d59c <tcp_create_segment+0x40>
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800d606:	4b0d      	ldr	r3, [pc, #52]	; (800d63c <tcp_create_segment+0xe0>)
 800d608:	22a3      	movs	r2, #163	; 0xa3
 800d60a:	490f      	ldr	r1, [pc, #60]	; (800d648 <tcp_create_segment+0xec>)
 800d60c:	480d      	ldr	r0, [pc, #52]	; (800d644 <tcp_create_segment+0xe8>)
 800d60e:	f003 fff7 	bl	8011600 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800d612:	2e00      	cmp	r6, #0
 800d614:	d1ae      	bne.n	800d574 <tcp_create_segment+0x18>
 800d616:	4b09      	ldr	r3, [pc, #36]	; (800d63c <tcp_create_segment+0xe0>)
 800d618:	22a4      	movs	r2, #164	; 0xa4
 800d61a:	490c      	ldr	r1, [pc, #48]	; (800d64c <tcp_create_segment+0xf0>)
 800d61c:	4809      	ldr	r0, [pc, #36]	; (800d644 <tcp_create_segment+0xe8>)
 800d61e:	f003 ffef 	bl	8011600 <iprintf>
 800d622:	e7a7      	b.n	800d574 <tcp_create_segment+0x18>
    tcp_seg_free(seg);
 800d624:	4620      	mov	r0, r4
    return NULL;
 800d626:	2400      	movs	r4, #0
    tcp_seg_free(seg);
 800d628:	f7fd fad6 	bl	800abd8 <tcp_seg_free>
}
 800d62c:	4620      	mov	r0, r4
 800d62e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    pbuf_free(p);
 800d632:	4630      	mov	r0, r6
 800d634:	f7fc fe32 	bl	800a29c <pbuf_free>
    return NULL;
 800d638:	e7da      	b.n	800d5f0 <tcp_create_segment+0x94>
 800d63a:	bf00      	nop
 800d63c:	080141ec 	.word	0x080141ec
 800d640:	08014298 	.word	0x08014298
 800d644:	080124d0 	.word	0x080124d0
 800d648:	08014254 	.word	0x08014254
 800d64c:	08014274 	.word	0x08014274

0800d650 <tcp_output_alloc_header_common.constprop.0>:
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800d650:	3114      	adds	r1, #20
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800d652:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800d656:	b289      	uxth	r1, r1
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800d658:	4606      	mov	r6, r0
 800d65a:	4617      	mov	r7, r2
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800d65c:	2022      	movs	r0, #34	; 0x22
 800d65e:	f44f 7220 	mov.w	r2, #640	; 0x280
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800d662:	461c      	mov	r4, r3
 800d664:	f8bd a020 	ldrh.w	sl, [sp, #32]
 800d668:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 800d66c:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800d670:	f7fc fe84 	bl	800a37c <pbuf_alloc>
  if (p != NULL) {
 800d674:	4605      	mov	r5, r0
 800d676:	b300      	cbz	r0, 800d6ba <tcp_output_alloc_header_common.constprop.0+0x6a>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800d678:	8943      	ldrh	r3, [r0, #10]
 800d67a:	2b13      	cmp	r3, #19
 800d67c:	d920      	bls.n	800d6c0 <tcp_output_alloc_header_common.constprop.0+0x70>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
    tcphdr->src = lwip_htons(src_port);
 800d67e:	4620      	mov	r0, r4
    tcphdr = (struct tcp_hdr *)p->payload;
 800d680:	686c      	ldr	r4, [r5, #4]
    tcphdr->src = lwip_htons(src_port);
 800d682:	f7fb fe89 	bl	8009398 <lwip_htons>
 800d686:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800d688:	4650      	mov	r0, sl
 800d68a:	f7fb fe85 	bl	8009398 <lwip_htons>
    tcphdr->seqno = seqno_be;
 800d68e:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(dst_port);
 800d690:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(ackno);
 800d692:	4630      	mov	r0, r6
 800d694:	f7fb fe84 	bl	80093a0 <lwip_htonl>
 800d698:	4603      	mov	r3, r0
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800d69a:	f449 40a0 	orr.w	r0, r9, #20480	; 0x5000
    tcphdr->ackno = lwip_htonl(ackno);
 800d69e:	60a3      	str	r3, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800d6a0:	f7fb fe7a 	bl	8009398 <lwip_htons>
 800d6a4:	4603      	mov	r3, r0
    tcphdr->wnd = lwip_htons(wnd);
 800d6a6:	4640      	mov	r0, r8
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800d6a8:	81a3      	strh	r3, [r4, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800d6aa:	f7fb fe75 	bl	8009398 <lwip_htons>
    tcphdr->chksum = 0;
 800d6ae:	2300      	movs	r3, #0
    tcphdr->wnd = lwip_htons(wnd);
 800d6b0:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
 800d6b2:	7423      	strb	r3, [r4, #16]
 800d6b4:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 800d6b6:	74a3      	strb	r3, [r4, #18]
 800d6b8:	74e3      	strb	r3, [r4, #19]
  }
  return p;
}
 800d6ba:	4628      	mov	r0, r5
 800d6bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800d6c0:	4b03      	ldr	r3, [pc, #12]	; (800d6d0 <tcp_output_alloc_header_common.constprop.0+0x80>)
 800d6c2:	f240 7223 	movw	r2, #1827	; 0x723
 800d6c6:	4903      	ldr	r1, [pc, #12]	; (800d6d4 <tcp_output_alloc_header_common.constprop.0+0x84>)
 800d6c8:	4803      	ldr	r0, [pc, #12]	; (800d6d8 <tcp_output_alloc_header_common.constprop.0+0x88>)
 800d6ca:	f003 ff99 	bl	8011600 <iprintf>
 800d6ce:	e7d6      	b.n	800d67e <tcp_output_alloc_header_common.constprop.0+0x2e>
 800d6d0:	080141ec 	.word	0x080141ec
 800d6d4:	080142b0 	.word	0x080142b0
 800d6d8:	080124d0 	.word	0x080124d0

0800d6dc <tcp_output_alloc_header.constprop.0>:
 * @param datalen length of tcp data to reserve in pbuf
 * @param seqno_be seqno in network byte order (big-endian)
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800d6dc:	b570      	push	{r4, r5, r6, lr}
 800d6de:	460d      	mov	r5, r1
 800d6e0:	b084      	sub	sp, #16
                        u32_t seqno_be /* already in network byte order */)
{
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800d6e2:	4604      	mov	r4, r0
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800d6e4:	4616      	mov	r6, r2
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800d6e6:	b190      	cbz	r0, 800d70e <tcp_output_alloc_header.constprop.0+0x32>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800d6e8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800d6ea:	2210      	movs	r2, #16
 800d6ec:	8b21      	ldrh	r1, [r4, #24]
 800d6ee:	9302      	str	r3, [sp, #8]
 800d6f0:	e9cd 1200 	strd	r1, r2, [sp]
 800d6f4:	4632      	mov	r2, r6
 800d6f6:	4629      	mov	r1, r5
 800d6f8:	8ae3      	ldrh	r3, [r4, #22]
 800d6fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d6fc:	f7ff ffa8 	bl	800d650 <tcp_output_alloc_header_common.constprop.0>
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800d700:	b118      	cbz	r0, 800d70a <tcp_output_alloc_header.constprop.0+0x2e>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d702:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800d704:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d706:	4413      	add	r3, r2
 800d708:	62e3      	str	r3, [r4, #44]	; 0x2c
  }
  return p;
}
 800d70a:	b004      	add	sp, #16
 800d70c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800d70e:	4b04      	ldr	r3, [pc, #16]	; (800d720 <tcp_output_alloc_header.constprop.0+0x44>)
 800d710:	f240 7242 	movw	r2, #1858	; 0x742
 800d714:	4903      	ldr	r1, [pc, #12]	; (800d724 <tcp_output_alloc_header.constprop.0+0x48>)
 800d716:	4804      	ldr	r0, [pc, #16]	; (800d728 <tcp_output_alloc_header.constprop.0+0x4c>)
 800d718:	f003 ff72 	bl	8011600 <iprintf>
 800d71c:	e7e4      	b.n	800d6e8 <tcp_output_alloc_header.constprop.0+0xc>
 800d71e:	bf00      	nop
 800d720:	080141ec 	.word	0x080141ec
 800d724:	080142e0 	.word	0x080142e0
 800d728:	080124d0 	.word	0x080124d0

0800d72c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800d72c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d72e:	4604      	mov	r4, r0
 800d730:	b085      	sub	sp, #20
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800d732:	460d      	mov	r5, r1
{
 800d734:	4617      	mov	r7, r2
 800d736:	461e      	mov	r6, r3
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800d738:	b321      	cbz	r1, 800d784 <tcp_output_control_segment+0x58>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800d73a:	b35c      	cbz	r4, 800d794 <tcp_output_control_segment+0x68>
 800d73c:	7a20      	ldrb	r0, [r4, #8]
 800d73e:	b9a8      	cbnz	r0, 800d76c <tcp_output_control_segment+0x40>
    return ip_route(src, dst);
 800d740:	4630      	mov	r0, r6
 800d742:	f002 fa85 	bl	800fc50 <ip4_route>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 800d746:	b1a8      	cbz	r0, 800d774 <tcp_output_control_segment+0x48>
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800d748:	7ae3      	ldrb	r3, [r4, #11]
      tos = pcb->tos;
 800d74a:	7aa4      	ldrb	r4, [r4, #10]
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
      tos = 0;
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800d74c:	9400      	str	r4, [sp, #0]
 800d74e:	2406      	movs	r4, #6
 800d750:	4632      	mov	r2, r6
 800d752:	4639      	mov	r1, r7
 800d754:	9002      	str	r0, [sp, #8]
 800d756:	4628      	mov	r0, r5
 800d758:	9401      	str	r4, [sp, #4]
 800d75a:	f002 fc0f 	bl	800ff7c <ip4_output_if>
 800d75e:	4604      	mov	r4, r0
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800d760:	4628      	mov	r0, r5
 800d762:	f7fc fd9b 	bl	800a29c <pbuf_free>
  return err;
}
 800d766:	4620      	mov	r0, r4
 800d768:	b005      	add	sp, #20
 800d76a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return netif_get_by_index(pcb->netif_idx);
 800d76c:	f7fc fbe6 	bl	8009f3c <netif_get_by_index>
  if (netif == NULL) {
 800d770:	2800      	cmp	r0, #0
 800d772:	d1e9      	bne.n	800d748 <tcp_output_control_segment+0x1c>
    err = ERR_RTE;
 800d774:	f06f 0403 	mvn.w	r4, #3
  pbuf_free(p);
 800d778:	4628      	mov	r0, r5
 800d77a:	f7fc fd8f 	bl	800a29c <pbuf_free>
}
 800d77e:	4620      	mov	r0, r4
 800d780:	b005      	add	sp, #20
 800d782:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800d784:	4b07      	ldr	r3, [pc, #28]	; (800d7a4 <tcp_output_control_segment+0x78>)
 800d786:	f240 7287 	movw	r2, #1927	; 0x787
 800d78a:	4907      	ldr	r1, [pc, #28]	; (800d7a8 <tcp_output_control_segment+0x7c>)
 800d78c:	4807      	ldr	r0, [pc, #28]	; (800d7ac <tcp_output_control_segment+0x80>)
 800d78e:	f003 ff37 	bl	8011600 <iprintf>
 800d792:	e7d2      	b.n	800d73a <tcp_output_control_segment+0xe>
    return ip_route(src, dst);
 800d794:	4630      	mov	r0, r6
 800d796:	f002 fa5b 	bl	800fc50 <ip4_route>
  if (netif == NULL) {
 800d79a:	2800      	cmp	r0, #0
 800d79c:	d0ea      	beq.n	800d774 <tcp_output_control_segment+0x48>
      ttl = TCP_TTL;
 800d79e:	23ff      	movs	r3, #255	; 0xff
 800d7a0:	e7d4      	b.n	800d74c <tcp_output_control_segment+0x20>
 800d7a2:	bf00      	nop
 800d7a4:	080141ec 	.word	0x080141ec
 800d7a8:	08014308 	.word	0x08014308
 800d7ac:	080124d0 	.word	0x080124d0

0800d7b0 <tcp_write>:
{
 800d7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t oversize = 0;
 800d7b4:	2400      	movs	r4, #0
{
 800d7b6:	b091      	sub	sp, #68	; 0x44
 800d7b8:	9107      	str	r1, [sp, #28]
 800d7ba:	9309      	str	r3, [sp, #36]	; 0x24
  u16_t oversize = 0;
 800d7bc:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800d7c0:	2800      	cmp	r0, #0
 800d7c2:	f000 82fc 	beq.w	800ddbe <tcp_write+0x60e>
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800d7c6:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800d7ca:	4692      	mov	sl, r2
 800d7cc:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 800d7ce:	4681      	mov	r9, r0
 800d7d0:	085b      	lsrs	r3, r3, #1
 800d7d2:	4293      	cmp	r3, r2
 800d7d4:	bf28      	it	cs
 800d7d6:	4613      	movcs	r3, r2
 800d7d8:	469b      	mov	fp, r3
  mss_local = mss_local ? mss_local : pcb->mss;
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	bf08      	it	eq
 800d7de:	4693      	moveq	fp, r2
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800d7e0:	9b07      	ldr	r3, [sp, #28]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	f000 82df 	beq.w	800dda6 <tcp_write+0x5f6>
  if ((pcb->state != ESTABLISHED) &&
 800d7e8:	7d03      	ldrb	r3, [r0, #20]
      (pcb->state != CLOSE_WAIT) &&
 800d7ea:	1e9a      	subs	r2, r3, #2
      (pcb->state != SYN_SENT) &&
 800d7ec:	2a02      	cmp	r2, #2
 800d7ee:	d902      	bls.n	800d7f6 <tcp_write+0x46>
 800d7f0:	2b07      	cmp	r3, #7
 800d7f2:	f040 829c 	bne.w	800dd2e <tcp_write+0x57e>
  } else if (len == 0) {
 800d7f6:	f1ba 0f00 	cmp.w	sl, #0
 800d7fa:	f000 80ec 	beq.w	800d9d6 <tcp_write+0x226>
  if (len > pcb->snd_buf) {
 800d7fe:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
 800d802:	4553      	cmp	r3, sl
 800d804:	f0c0 82b6 	bcc.w	800dd74 <tcp_write+0x5c4>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800d808:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
 800d80c:	2e08      	cmp	r6, #8
 800d80e:	f200 82b1 	bhi.w	800dd74 <tcp_write+0x5c4>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800d812:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
  if (pcb->snd_queuelen != 0) {
 800d816:	2e00      	cmp	r6, #0
 800d818:	f000 80d3 	beq.w	800d9c2 <tcp_write+0x212>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	f040 80dc 	bne.w	800d9da <tcp_write+0x22a>
 800d822:	f8d9 806c 	ldr.w	r8, [r9, #108]	; 0x6c
 800d826:	f1b8 0f00 	cmp.w	r8, #0
 800d82a:	f000 8263 	beq.w	800dcf4 <tcp_write+0x544>
 800d82e:	4643      	mov	r3, r8
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d830:	461a      	mov	r2, r3
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d1fb      	bne.n	800d830 <tcp_write+0x80>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800d838:	7a94      	ldrb	r4, [r2, #10]
 800d83a:	4698      	mov	r8, r3
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800d83c:	8913      	ldrh	r3, [r2, #8]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800d83e:	00a4      	lsls	r4, r4, #2
 800d840:	920b      	str	r2, [sp, #44]	; 0x2c
 800d842:	f004 0404 	and.w	r4, r4, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800d846:	191a      	adds	r2, r3, r4
 800d848:	4593      	cmp	fp, r2
 800d84a:	f2c0 81a6 	blt.w	800db9a <tcp_write+0x3ea>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800d84e:	ebab 0404 	sub.w	r4, fp, r4
 800d852:	1ae4      	subs	r4, r4, r3
    oversize = pcb->unsent_oversize;
 800d854:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
    space = mss_local - (last_unsent->len + unsent_optlen);
 800d858:	b2a4      	uxth	r4, r4
    oversize = pcb->unsent_oversize;
 800d85a:	930a      	str	r3, [sp, #40]	; 0x28
 800d85c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    if (oversize > 0) {
 800d860:	2b00      	cmp	r3, #0
 800d862:	f000 80cf 	beq.w	800da04 <tcp_write+0x254>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800d866:	42a3      	cmp	r3, r4
 800d868:	f200 818a 	bhi.w	800db80 <tcp_write+0x3d0>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800d86c:	45a2      	cmp	sl, r4
 800d86e:	4653      	mov	r3, sl
 800d870:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d872:	bf28      	it	cs
 800d874:	4623      	movcs	r3, r4
 800d876:	4293      	cmp	r3, r2
 800d878:	bf28      	it	cs
 800d87a:	4613      	movcs	r3, r2
      oversize -= oversize_used;
 800d87c:	1ad2      	subs	r2, r2, r3
      space -= oversize_used;
 800d87e:	1ae4      	subs	r4, r4, r3
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800d880:	930a      	str	r3, [sp, #40]	; 0x28
      oversize -= oversize_used;
 800d882:	b292      	uxth	r2, r2
      space -= oversize_used;
 800d884:	b2a4      	uxth	r4, r4
      oversize -= oversize_used;
 800d886:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800d88a:	2a00      	cmp	r2, #0
 800d88c:	f000 8183 	beq.w	800db96 <tcp_write+0x3e6>
 800d890:	459a      	cmp	sl, r3
 800d892:	f000 8180 	beq.w	800db96 <tcp_write+0x3e6>
 800d896:	4bb2      	ldr	r3, [pc, #712]	; (800db60 <tcp_write+0x3b0>)
 800d898:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d89c:	49b1      	ldr	r1, [pc, #708]	; (800db64 <tcp_write+0x3b4>)
 800d89e:	48b2      	ldr	r0, [pc, #712]	; (800db68 <tcp_write+0x3b8>)
 800d8a0:	f003 feae 	bl	8011600 <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800d8a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800d8a6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800d8a8:	459a      	cmp	sl, r3
 800d8aa:	f200 80b0 	bhi.w	800da0e <tcp_write+0x25e>
  struct pbuf *concat_p = NULL;
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d8b2:	930c      	str	r3, [sp, #48]	; 0x30
  u16_t extendlen = 0;
 800d8b4:	930d      	str	r3, [sp, #52]	; 0x34
  while (pos < len) {
 800d8b6:	45a2      	cmp	sl, r4
 800d8b8:	f240 80ee 	bls.w	800da98 <tcp_write+0x2e8>
 800d8bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8be:	f04f 0800 	mov.w	r8, #0
 800d8c2:	f003 0301 	and.w	r3, r3, #1
 800d8c6:	f8cd 8014 	str.w	r8, [sp, #20]
 800d8ca:	9308      	str	r3, [sp, #32]
 800d8cc:	4643      	mov	r3, r8
 800d8ce:	46d8      	mov	r8, fp
 800d8d0:	469b      	mov	fp, r3
 800d8d2:	e042      	b.n	800d95a <tcp_write+0x1aa>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800d8d4:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	f040 80f0 	bne.w	800dabe <tcp_write+0x30e>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800d8de:	2201      	movs	r2, #1
 800d8e0:	4629      	mov	r1, r5
 800d8e2:	2036      	movs	r0, #54	; 0x36
 800d8e4:	f7fc fd4a 	bl	800a37c <pbuf_alloc>
 800d8e8:	2800      	cmp	r0, #0
 800d8ea:	f000 8100 	beq.w	800daee <tcp_write+0x33e>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800d8ee:	9a07      	ldr	r2, [sp, #28]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d8f0:	2100      	movs	r1, #0
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800d8f2:	9006      	str	r0, [sp, #24]
 800d8f4:	4422      	add	r2, r4
 800d8f6:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d8f8:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d8fc:	2036      	movs	r0, #54	; 0x36
 800d8fe:	f7fc fd3d 	bl	800a37c <pbuf_alloc>
 800d902:	9b06      	ldr	r3, [sp, #24]
 800d904:	4607      	mov	r7, r0
 800d906:	2800      	cmp	r0, #0
 800d908:	f000 8195 	beq.w	800dc36 <tcp_write+0x486>
      pbuf_cat(p/*header*/, p2/*data*/);
 800d90c:	4619      	mov	r1, r3
 800d90e:	f7fc fe7d 	bl	800a60c <pbuf_cat>
    queuelen += pbuf_clen(p);
 800d912:	4638      	mov	r0, r7
 800d914:	f7fc fe50 	bl	800a5b8 <pbuf_clen>
 800d918:	4430      	add	r0, r6
 800d91a:	b286      	uxth	r6, r0
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800d91c:	2e09      	cmp	r6, #9
 800d91e:	d84a      	bhi.n	800d9b6 <tcp_write+0x206>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800d920:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
 800d924:	2200      	movs	r2, #0
 800d926:	4639      	mov	r1, r7
 800d928:	4648      	mov	r0, r9
 800d92a:	4423      	add	r3, r4
 800d92c:	9200      	str	r2, [sp, #0]
 800d92e:	f7ff fe15 	bl	800d55c <tcp_create_segment>
 800d932:	4607      	mov	r7, r0
 800d934:	2800      	cmp	r0, #0
 800d936:	f000 80da 	beq.w	800daee <tcp_write+0x33e>
    if (queue == NULL) {
 800d93a:	9b05      	ldr	r3, [sp, #20]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	f000 80a3 	beq.w	800da88 <tcp_write+0x2d8>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800d942:	f1bb 0f00 	cmp.w	fp, #0
 800d946:	f000 80c2 	beq.w	800dace <tcp_write+0x31e>
    pos += seglen;
 800d94a:	4425      	add	r5, r4
      prev_seg->next = seg;
 800d94c:	f8cb 7000 	str.w	r7, [fp]
    pos += seglen;
 800d950:	b2ac      	uxth	r4, r5
  while (pos < len) {
 800d952:	45a2      	cmp	sl, r4
 800d954:	f240 809e 	bls.w	800da94 <tcp_write+0x2e4>
 800d958:	46bb      	mov	fp, r7
    u16_t left = len - pos;
 800d95a:	ebaa 0504 	sub.w	r5, sl, r4
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d95e:	9b08      	ldr	r3, [sp, #32]
    u16_t seglen = LWIP_MIN(left, max_len);
 800d960:	b2ad      	uxth	r5, r5
 800d962:	4545      	cmp	r5, r8
 800d964:	bf28      	it	cs
 800d966:	4645      	movcs	r5, r8
 800d968:	b2ad      	uxth	r5, r5
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d0b2      	beq.n	800d8d4 <tcp_write+0x124>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800d96e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d970:	4642      	mov	r2, r8
 800d972:	4629      	mov	r1, r5
 800d974:	2036      	movs	r0, #54	; 0x36
 800d976:	e9cd 9300 	strd	r9, r3, [sp]
 800d97a:	9b05      	ldr	r3, [sp, #20]
 800d97c:	fab3 f383 	clz	r3, r3
 800d980:	095b      	lsrs	r3, r3, #5
 800d982:	9302      	str	r3, [sp, #8]
 800d984:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800d988:	f7ff fd98 	bl	800d4bc <tcp_pbuf_prealloc>
 800d98c:	4607      	mov	r7, r0
 800d98e:	2800      	cmp	r0, #0
 800d990:	f000 80ad 	beq.w	800daee <tcp_write+0x33e>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800d994:	8943      	ldrh	r3, [r0, #10]
 800d996:	42ab      	cmp	r3, r5
 800d998:	f0c0 80a1 	bcc.w	800dade <tcp_write+0x32e>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800d99c:	9b07      	ldr	r3, [sp, #28]
 800d99e:	462a      	mov	r2, r5
 800d9a0:	6878      	ldr	r0, [r7, #4]
 800d9a2:	1919      	adds	r1, r3, r4
 800d9a4:	f004 f85d 	bl	8011a62 <memcpy>
    queuelen += pbuf_clen(p);
 800d9a8:	4638      	mov	r0, r7
 800d9aa:	f7fc fe05 	bl	800a5b8 <pbuf_clen>
 800d9ae:	4430      	add	r0, r6
 800d9b0:	b286      	uxth	r6, r0
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800d9b2:	2e09      	cmp	r6, #9
 800d9b4:	d9b4      	bls.n	800d920 <tcp_write+0x170>
      pbuf_free(p);
 800d9b6:	4638      	mov	r0, r7
 800d9b8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800d9bc:	f7fc fc6e 	bl	800a29c <pbuf_free>
      goto memerr;
 800d9c0:	e097      	b.n	800daf2 <tcp_write+0x342>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	f000 80b6 	beq.w	800db34 <tcp_write+0x384>
 800d9c8:	4b65      	ldr	r3, [pc, #404]	; (800db60 <tcp_write+0x3b0>)
 800d9ca:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800d9ce:	4967      	ldr	r1, [pc, #412]	; (800db6c <tcp_write+0x3bc>)
 800d9d0:	4865      	ldr	r0, [pc, #404]	; (800db68 <tcp_write+0x3b8>)
 800d9d2:	f003 fe15 	bl	8011600 <iprintf>
  queuelen = pcb->snd_queuelen;
 800d9d6:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
  if (pcb->unsent != NULL) {
 800d9da:	f8d9 806c 	ldr.w	r8, [r9, #108]	; 0x6c
 800d9de:	f1b8 0f00 	cmp.w	r8, #0
 800d9e2:	f47f af24 	bne.w	800d82e <tcp_write+0x7e>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800d9e6:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	f040 80ac 	bne.w	800db48 <tcp_write+0x398>
  while (pos < len) {
 800d9f0:	f1ba 0f00 	cmp.w	sl, #0
 800d9f4:	f000 81c7 	beq.w	800dd86 <tcp_write+0x5d6>
 800d9f8:	2400      	movs	r4, #0
 800d9fa:	940d      	str	r4, [sp, #52]	; 0x34
 800d9fc:	940c      	str	r4, [sp, #48]	; 0x30
 800d9fe:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 800da02:	e75b      	b.n	800d8bc <tcp_write+0x10c>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800da04:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800da06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da08:	459a      	cmp	sl, r3
 800da0a:	f67f af50 	bls.w	800d8ae <tcp_write+0xfe>
 800da0e:	2c00      	cmp	r4, #0
 800da10:	f43f af4d 	beq.w	800d8ae <tcp_write+0xfe>
 800da14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800da16:	8912      	ldrh	r2, [r2, #8]
 800da18:	920d      	str	r2, [sp, #52]	; 0x34
 800da1a:	2a00      	cmp	r2, #0
 800da1c:	f000 809c 	beq.w	800db58 <tcp_write+0x3a8>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800da20:	ebaa 0703 	sub.w	r7, sl, r3
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800da24:	9b09      	ldr	r3, [sp, #36]	; 0x24
      u16_t seglen = LWIP_MIN(space, len - pos);
 800da26:	42a7      	cmp	r7, r4
 800da28:	bfa8      	it	ge
 800da2a:	4627      	movge	r7, r4
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800da2c:	07da      	lsls	r2, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 800da2e:	b2bd      	uxth	r5, r7
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800da30:	f100 8187 	bmi.w	800dd42 <tcp_write+0x592>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800da34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da36:	685a      	ldr	r2, [r3, #4]
 800da38:	4613      	mov	r3, r2
 800da3a:	6812      	ldr	r2, [r2, #0]
 800da3c:	2a00      	cmp	r2, #0
 800da3e:	d1fb      	bne.n	800da38 <tcp_write+0x288>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800da40:	920c      	str	r2, [sp, #48]	; 0x30
 800da42:	7b1a      	ldrb	r2, [r3, #12]
 800da44:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 800da48:	d106      	bne.n	800da58 <tcp_write+0x2a8>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800da4a:	895a      	ldrh	r2, [r3, #10]
 800da4c:	685b      	ldr	r3, [r3, #4]
 800da4e:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800da50:	9a07      	ldr	r2, [sp, #28]
 800da52:	429a      	cmp	r2, r3
 800da54:	f000 8167 	beq.w	800dd26 <tcp_write+0x576>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800da58:	2201      	movs	r2, #1
 800da5a:	4629      	mov	r1, r5
 800da5c:	2000      	movs	r0, #0
 800da5e:	f7fc fc8d 	bl	800a37c <pbuf_alloc>
 800da62:	900c      	str	r0, [sp, #48]	; 0x30
 800da64:	2800      	cmp	r0, #0
 800da66:	f000 813e 	beq.w	800dce6 <tcp_write+0x536>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800da6a:	9b07      	ldr	r3, [sp, #28]
 800da6c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800da6e:	440b      	add	r3, r1
 800da70:	6043      	str	r3, [r0, #4]
          queuelen += pbuf_clen(concat_p);
 800da72:	f7fc fda1 	bl	800a5b8 <pbuf_clen>
 800da76:	4430      	add	r0, r6
  u16_t extendlen = 0;
 800da78:	2300      	movs	r3, #0
          queuelen += pbuf_clen(concat_p);
 800da7a:	b286      	uxth	r6, r0
  u16_t extendlen = 0;
 800da7c:	930d      	str	r3, [sp, #52]	; 0x34
      pos += seglen;
 800da7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da80:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800da82:	18ec      	adds	r4, r5, r3
 800da84:	b2a4      	uxth	r4, r4
 800da86:	e716      	b.n	800d8b6 <tcp_write+0x106>
    pos += seglen;
 800da88:	4425      	add	r5, r4
 800da8a:	9005      	str	r0, [sp, #20]
 800da8c:	b2ac      	uxth	r4, r5
  while (pos < len) {
 800da8e:	45a2      	cmp	sl, r4
 800da90:	f63f af62 	bhi.w	800d958 <tcp_write+0x1a8>
 800da94:	f8dd 8014 	ldr.w	r8, [sp, #20]
  if (oversize_used > 0) {
 800da98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	f000 80db 	beq.w	800dc56 <tcp_write+0x4a6>
    for (p = last_unsent->p; p; p = p->next) {
 800daa0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800daa2:	6854      	ldr	r4, [r2, #4]
 800daa4:	2c00      	cmp	r4, #0
 800daa6:	f000 8090 	beq.w	800dbca <tcp_write+0x41a>
 800daaa:	469b      	mov	fp, r3
 800daac:	9d07      	ldr	r5, [sp, #28]
      p->tot_len += oversize_used;
 800daae:	8923      	ldrh	r3, [r4, #8]
      if (p->next == NULL) {
 800dab0:	6822      	ldr	r2, [r4, #0]
      p->tot_len += oversize_used;
 800dab2:	445b      	add	r3, fp
 800dab4:	8123      	strh	r3, [r4, #8]
      if (p->next == NULL) {
 800dab6:	2a00      	cmp	r2, #0
 800dab8:	d079      	beq.n	800dbae <tcp_write+0x3fe>
      pos += seglen;
 800daba:	4614      	mov	r4, r2
 800dabc:	e7f7      	b.n	800daae <tcp_write+0x2fe>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800dabe:	4b28      	ldr	r3, [pc, #160]	; (800db60 <tcp_write+0x3b0>)
 800dac0:	f240 2271 	movw	r2, #625	; 0x271
 800dac4:	492a      	ldr	r1, [pc, #168]	; (800db70 <tcp_write+0x3c0>)
 800dac6:	4828      	ldr	r0, [pc, #160]	; (800db68 <tcp_write+0x3b8>)
 800dac8:	f003 fd9a 	bl	8011600 <iprintf>
 800dacc:	e707      	b.n	800d8de <tcp_write+0x12e>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800dace:	4b24      	ldr	r3, [pc, #144]	; (800db60 <tcp_write+0x3b0>)
 800dad0:	f240 22ab 	movw	r2, #683	; 0x2ab
 800dad4:	4927      	ldr	r1, [pc, #156]	; (800db74 <tcp_write+0x3c4>)
 800dad6:	4824      	ldr	r0, [pc, #144]	; (800db68 <tcp_write+0x3b8>)
 800dad8:	f003 fd92 	bl	8011600 <iprintf>
 800dadc:	e735      	b.n	800d94a <tcp_write+0x19a>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800dade:	4b20      	ldr	r3, [pc, #128]	; (800db60 <tcp_write+0x3b0>)
 800dae0:	f240 2266 	movw	r2, #614	; 0x266
 800dae4:	4924      	ldr	r1, [pc, #144]	; (800db78 <tcp_write+0x3c8>)
 800dae6:	4820      	ldr	r0, [pc, #128]	; (800db68 <tcp_write+0x3b8>)
 800dae8:	f003 fd8a 	bl	8011600 <iprintf>
 800daec:	e756      	b.n	800d99c <tcp_write+0x1ec>
 800daee:	f8dd 8014 	ldr.w	r8, [sp, #20]
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800daf2:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 800daf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dafa:	f8a9 301a 	strh.w	r3, [r9, #26]
  if (concat_p != NULL) {
 800dafe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800db00:	b113      	cbz	r3, 800db08 <tcp_write+0x358>
    pbuf_free(concat_p);
 800db02:	4618      	mov	r0, r3
 800db04:	f7fc fbca 	bl	800a29c <pbuf_free>
  if (queue != NULL) {
 800db08:	f1b8 0f00 	cmp.w	r8, #0
 800db0c:	d002      	beq.n	800db14 <tcp_write+0x364>
    tcp_segs_free(queue);
 800db0e:	4640      	mov	r0, r8
 800db10:	f7fd f850 	bl	800abb4 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 800db14:	f8b9 3066 	ldrh.w	r3, [r9, #102]	; 0x66
 800db18:	b13b      	cbz	r3, 800db2a <tcp_write+0x37a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800db1a:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
 800db1e:	b923      	cbnz	r3, 800db2a <tcp_write+0x37a>
 800db20:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 800db24:	2b00      	cmp	r3, #0
 800db26:	f000 808c 	beq.w	800dc42 <tcp_write+0x492>
  return ERR_MEM;
 800db2a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800db2e:	b011      	add	sp, #68	; 0x44
 800db30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800db34:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 800db38:	2b00      	cmp	r3, #0
 800db3a:	f47f af45 	bne.w	800d9c8 <tcp_write+0x218>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800db3e:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
 800db42:	2b00      	cmp	r3, #0
 800db44:	f43f af58 	beq.w	800d9f8 <tcp_write+0x248>
 800db48:	4b05      	ldr	r3, [pc, #20]	; (800db60 <tcp_write+0x3b0>)
 800db4a:	f240 224a 	movw	r2, #586	; 0x24a
 800db4e:	490b      	ldr	r1, [pc, #44]	; (800db7c <tcp_write+0x3cc>)
 800db50:	4805      	ldr	r0, [pc, #20]	; (800db68 <tcp_write+0x3b8>)
 800db52:	f003 fd55 	bl	8011600 <iprintf>
 800db56:	e74b      	b.n	800d9f0 <tcp_write+0x240>
  struct pbuf *concat_p = NULL;
 800db58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db5a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800db5c:	930c      	str	r3, [sp, #48]	; 0x30
 800db5e:	e6ad      	b.n	800d8bc <tcp_write+0x10c>
 800db60:	080141ec 	.word	0x080141ec
 800db64:	08014428 	.word	0x08014428
 800db68:	080124d0 	.word	0x080124d0
 800db6c:	080143bc 	.word	0x080143bc
 800db70:	080144e4 	.word	0x080144e4
 800db74:	080144f4 	.word	0x080144f4
 800db78:	080144a4 	.word	0x080144a4
 800db7c:	08014474 	.word	0x08014474
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800db80:	4b94      	ldr	r3, [pc, #592]	; (800ddd4 <tcp_write+0x624>)
 800db82:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800db86:	4994      	ldr	r1, [pc, #592]	; (800ddd8 <tcp_write+0x628>)
 800db88:	4894      	ldr	r0, [pc, #592]	; (800dddc <tcp_write+0x62c>)
 800db8a:	f003 fd39 	bl	8011600 <iprintf>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800db8e:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800db92:	930a      	str	r3, [sp, #40]	; 0x28
 800db94:	e66a      	b.n	800d86c <tcp_write+0xbc>
 800db96:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800db98:	e735      	b.n	800da06 <tcp_write+0x256>
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800db9a:	4b8e      	ldr	r3, [pc, #568]	; (800ddd4 <tcp_write+0x624>)
 800db9c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800dba0:	498f      	ldr	r1, [pc, #572]	; (800dde0 <tcp_write+0x630>)
 800dba2:	488e      	ldr	r0, [pc, #568]	; (800dddc <tcp_write+0x62c>)
 800dba4:	f003 fd2c 	bl	8011600 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800dba8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dbaa:	891b      	ldrh	r3, [r3, #8]
 800dbac:	e64f      	b.n	800d84e <tcp_write+0x9e>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800dbae:	8963      	ldrh	r3, [r4, #10]
 800dbb0:	465a      	mov	r2, fp
 800dbb2:	6860      	ldr	r0, [r4, #4]
 800dbb4:	4629      	mov	r1, r5
 800dbb6:	4418      	add	r0, r3
 800dbb8:	f003 ff53 	bl	8011a62 <memcpy>
        p->len += oversize_used;
 800dbbc:	8963      	ldrh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800dbbe:	6822      	ldr	r2, [r4, #0]
        p->len += oversize_used;
 800dbc0:	445b      	add	r3, fp
 800dbc2:	8163      	strh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800dbc4:	2a00      	cmp	r2, #0
 800dbc6:	f47f af78 	bne.w	800daba <tcp_write+0x30a>
    last_unsent->len += oversize_used;
 800dbca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dbcc:	990a      	ldr	r1, [sp, #40]	; 0x28
 800dbce:	8913      	ldrh	r3, [r2, #8]
 800dbd0:	4419      	add	r1, r3
  pcb->unsent_oversize = oversize;
 800dbd2:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
    last_unsent->len += oversize_used;
 800dbd6:	8111      	strh	r1, [r2, #8]
  pcb->unsent_oversize = oversize;
 800dbd8:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 800dbdc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d061      	beq.n	800dca6 <tcp_write+0x4f6>
    pbuf_cat(last_unsent->p, concat_p);
 800dbe2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800dbe4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dbe6:	6860      	ldr	r0, [r4, #4]
 800dbe8:	4629      	mov	r1, r5
 800dbea:	f7fc fd0f 	bl	800a60c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800dbee:	892a      	ldrh	r2, [r5, #8]
 800dbf0:	8923      	ldrh	r3, [r4, #8]
 800dbf2:	4413      	add	r3, r2
 800dbf4:	8123      	strh	r3, [r4, #8]
    last_unsent->next = queue;
 800dbf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dbf8:	f8c3 8000 	str.w	r8, [r3]
  pcb->snd_lbb += len;
 800dbfc:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
  pcb->snd_queuelen = queuelen;
 800dc00:	f8a9 6066 	strh.w	r6, [r9, #102]	; 0x66
  pcb->snd_lbb += len;
 800dc04:	4453      	add	r3, sl
 800dc06:	f8c9 305c 	str.w	r3, [r9, #92]	; 0x5c
  pcb->snd_buf -= len;
 800dc0a:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
 800dc0e:	eba3 030a 	sub.w	r3, r3, sl
 800dc12:	f8a9 3064 	strh.w	r3, [r9, #100]	; 0x64
  if (pcb->snd_queuelen != 0) {
 800dc16:	b11e      	cbz	r6, 800dc20 <tcp_write+0x470>
    LWIP_ASSERT("tcp_write: valid queue length",
 800dc18:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d036      	beq.n	800dc8e <tcp_write+0x4de>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800dc20:	b12f      	cbz	r7, 800dc2e <tcp_write+0x47e>
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	b11b      	cbz	r3, 800dc2e <tcp_write+0x47e>
 800dc26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dc28:	f012 0502 	ands.w	r5, r2, #2
 800dc2c:	d025      	beq.n	800dc7a <tcp_write+0x4ca>
  return ERR_OK;
 800dc2e:	2000      	movs	r0, #0
}
 800dc30:	b011      	add	sp, #68	; 0x44
 800dc32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        pbuf_free(p2);
 800dc36:	4618      	mov	r0, r3
 800dc38:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800dc3c:	f7fc fb2e 	bl	800a29c <pbuf_free>
        goto memerr;
 800dc40:	e757      	b.n	800daf2 <tcp_write+0x342>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800dc42:	4b64      	ldr	r3, [pc, #400]	; (800ddd4 <tcp_write+0x624>)
 800dc44:	f240 3227 	movw	r2, #807	; 0x327
 800dc48:	4966      	ldr	r1, [pc, #408]	; (800dde4 <tcp_write+0x634>)
 800dc4a:	4864      	ldr	r0, [pc, #400]	; (800dddc <tcp_write+0x62c>)
 800dc4c:	f003 fcd8 	bl	8011600 <iprintf>
  return ERR_MEM;
 800dc50:	f04f 30ff 	mov.w	r0, #4294967295
 800dc54:	e76b      	b.n	800db2e <tcp_write+0x37e>
  pcb->unsent_oversize = oversize;
 800dc56:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800dc5a:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 800dc5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d051      	beq.n	800dd08 <tcp_write+0x558>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800dc64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d1bb      	bne.n	800dbe2 <tcp_write+0x432>
 800dc6a:	4b5a      	ldr	r3, [pc, #360]	; (800ddd4 <tcp_write+0x624>)
 800dc6c:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800dc70:	495d      	ldr	r1, [pc, #372]	; (800dde8 <tcp_write+0x638>)
 800dc72:	485a      	ldr	r0, [pc, #360]	; (800dddc <tcp_write+0x62c>)
 800dc74:	f003 fcc4 	bl	8011600 <iprintf>
 800dc78:	e7b3      	b.n	800dbe2 <tcp_write+0x432>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800dc7a:	2008      	movs	r0, #8
 800dc7c:	899c      	ldrh	r4, [r3, #12]
 800dc7e:	f7fb fb8b 	bl	8009398 <lwip_htons>
 800dc82:	4602      	mov	r2, r0
 800dc84:	68fb      	ldr	r3, [r7, #12]
  return ERR_OK;
 800dc86:	4628      	mov	r0, r5
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800dc88:	4314      	orrs	r4, r2
 800dc8a:	819c      	strh	r4, [r3, #12]
 800dc8c:	e74f      	b.n	800db2e <tcp_write+0x37e>
    LWIP_ASSERT("tcp_write: valid queue length",
 800dc8e:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d1c4      	bne.n	800dc20 <tcp_write+0x470>
 800dc96:	4b4f      	ldr	r3, [pc, #316]	; (800ddd4 <tcp_write+0x624>)
 800dc98:	f240 3212 	movw	r2, #786	; 0x312
 800dc9c:	4951      	ldr	r1, [pc, #324]	; (800dde4 <tcp_write+0x634>)
 800dc9e:	484f      	ldr	r0, [pc, #316]	; (800dddc <tcp_write+0x62c>)
 800dca0:	f003 fcae 	bl	8011600 <iprintf>
 800dca4:	e7bc      	b.n	800dc20 <tcp_write+0x470>
  } else if (extendlen > 0) {
 800dca6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d0a4      	beq.n	800dbf6 <tcp_write+0x446>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800dcac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dcae:	6859      	ldr	r1, [r3, #4]
 800dcb0:	2900      	cmp	r1, #0
 800dcb2:	d02e      	beq.n	800dd12 <tcp_write+0x562>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800dcb4:	680a      	ldr	r2, [r1, #0]
 800dcb6:	2a00      	cmp	r2, #0
 800dcb8:	d07f      	beq.n	800ddba <tcp_write+0x60a>
 800dcba:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800dcbc:	e000      	b.n	800dcc0 <tcp_write+0x510>
 800dcbe:	4602      	mov	r2, r0
      p->tot_len += extendlen;
 800dcc0:	890b      	ldrh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800dcc2:	6810      	ldr	r0, [r2, #0]
      p->tot_len += extendlen;
 800dcc4:	4423      	add	r3, r4
 800dcc6:	810b      	strh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800dcc8:	4611      	mov	r1, r2
 800dcca:	2800      	cmp	r0, #0
 800dccc:	d1f7      	bne.n	800dcbe <tcp_write+0x50e>
    p->tot_len += extendlen;
 800dcce:	8913      	ldrh	r3, [r2, #8]
 800dcd0:	990d      	ldr	r1, [sp, #52]	; 0x34
 800dcd2:	440b      	add	r3, r1
 800dcd4:	8113      	strh	r3, [r2, #8]
    p->len += extendlen;
 800dcd6:	8953      	ldrh	r3, [r2, #10]
 800dcd8:	440b      	add	r3, r1
 800dcda:	8153      	strh	r3, [r2, #10]
    last_unsent->len += extendlen;
 800dcdc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dcde:	8913      	ldrh	r3, [r2, #8]
 800dce0:	440b      	add	r3, r1
 800dce2:	8113      	strh	r3, [r2, #8]
 800dce4:	e787      	b.n	800dbf6 <tcp_write+0x446>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800dce6:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 800dcea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dcee:	f8a9 301a 	strh.w	r3, [r9, #26]
  if (concat_p != NULL) {
 800dcf2:	e70f      	b.n	800db14 <tcp_write+0x364>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800dcf4:	4b37      	ldr	r3, [pc, #220]	; (800ddd4 <tcp_write+0x624>)
 800dcf6:	f240 1255 	movw	r2, #341	; 0x155
 800dcfa:	493c      	ldr	r1, [pc, #240]	; (800ddec <tcp_write+0x63c>)
 800dcfc:	4837      	ldr	r0, [pc, #220]	; (800dddc <tcp_write+0x62c>)
 800dcfe:	f003 fc7f 	bl	8011600 <iprintf>
  queuelen = pcb->snd_queuelen;
 800dd02:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
 800dd06:	e668      	b.n	800d9da <tcp_write+0x22a>
  } else if (extendlen > 0) {
 800dd08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dd0a:	b19b      	cbz	r3, 800dd34 <tcp_write+0x584>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800dd0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d1cc      	bne.n	800dcac <tcp_write+0x4fc>
 800dd12:	4b30      	ldr	r3, [pc, #192]	; (800ddd4 <tcp_write+0x624>)
 800dd14:	f240 22e6 	movw	r2, #742	; 0x2e6
 800dd18:	4935      	ldr	r1, [pc, #212]	; (800ddf0 <tcp_write+0x640>)
 800dd1a:	4830      	ldr	r0, [pc, #192]	; (800dddc <tcp_write+0x62c>)
 800dd1c:	f003 fc70 	bl	8011600 <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800dd20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd22:	6859      	ldr	r1, [r3, #4]
 800dd24:	e7c6      	b.n	800dcb4 <tcp_write+0x504>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800dd26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd28:	bba3      	cbnz	r3, 800dd94 <tcp_write+0x5e4>
          extendlen = seglen;
 800dd2a:	950d      	str	r5, [sp, #52]	; 0x34
 800dd2c:	e6a7      	b.n	800da7e <tcp_write+0x2ce>
    return ERR_CONN;
 800dd2e:	f06f 000a 	mvn.w	r0, #10
 800dd32:	e6fc      	b.n	800db2e <tcp_write+0x37e>
  if (last_unsent == NULL) {
 800dd34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	f47f af5d 	bne.w	800dbf6 <tcp_write+0x446>
    pcb->unsent = queue;
 800dd3c:	f8c9 806c 	str.w	r8, [r9, #108]	; 0x6c
 800dd40:	e75c      	b.n	800dbfc <tcp_write+0x44c>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800dd42:	e9cd 9300 	strd	r9, r3, [sp]
 800dd46:	2301      	movs	r3, #1
 800dd48:	4622      	mov	r2, r4
 800dd4a:	4629      	mov	r1, r5
 800dd4c:	2000      	movs	r0, #0
 800dd4e:	9302      	str	r3, [sp, #8]
 800dd50:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800dd54:	f7ff fbb2 	bl	800d4bc <tcp_pbuf_prealloc>
 800dd58:	4603      	mov	r3, r0
 800dd5a:	4604      	mov	r4, r0
 800dd5c:	900c      	str	r0, [sp, #48]	; 0x30
 800dd5e:	2800      	cmp	r0, #0
 800dd60:	d0c1      	beq.n	800dce6 <tcp_write+0x536>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800dd62:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dd64:	462a      	mov	r2, r5
 800dd66:	9907      	ldr	r1, [sp, #28]
 800dd68:	4401      	add	r1, r0
 800dd6a:	6858      	ldr	r0, [r3, #4]
 800dd6c:	f003 fe79 	bl	8011a62 <memcpy>
        queuelen += pbuf_clen(concat_p);
 800dd70:	4620      	mov	r0, r4
 800dd72:	e67e      	b.n	800da72 <tcp_write+0x2c2>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800dd74:	f8b9 301a 	ldrh.w	r3, [r9, #26]
    return ERR_MEM;
 800dd78:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800dd7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd80:	f8a9 301a 	strh.w	r3, [r9, #26]
  if (err != ERR_OK) {
 800dd84:	e6d3      	b.n	800db2e <tcp_write+0x37e>
  pcb->unsent_oversize = oversize;
 800dd86:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800dd8a:	46d0      	mov	r8, sl
 800dd8c:	4657      	mov	r7, sl
 800dd8e:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 800dd92:	e7d3      	b.n	800dd3c <tcp_write+0x58c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800dd94:	4b0f      	ldr	r3, [pc, #60]	; (800ddd4 <tcp_write+0x624>)
 800dd96:	f240 2231 	movw	r2, #561	; 0x231
 800dd9a:	4916      	ldr	r1, [pc, #88]	; (800ddf4 <tcp_write+0x644>)
 800dd9c:	480f      	ldr	r0, [pc, #60]	; (800dddc <tcp_write+0x62c>)
 800dd9e:	f003 fc2f 	bl	8011600 <iprintf>
          extendlen = seglen;
 800dda2:	950d      	str	r5, [sp, #52]	; 0x34
 800dda4:	e66b      	b.n	800da7e <tcp_write+0x2ce>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800dda6:	4b0b      	ldr	r3, [pc, #44]	; (800ddd4 <tcp_write+0x624>)
 800dda8:	f240 12ad 	movw	r2, #429	; 0x1ad
 800ddac:	4912      	ldr	r1, [pc, #72]	; (800ddf8 <tcp_write+0x648>)
 800ddae:	480b      	ldr	r0, [pc, #44]	; (800dddc <tcp_write+0x62c>)
 800ddb0:	f003 fc26 	bl	8011600 <iprintf>
 800ddb4:	f06f 000f 	mvn.w	r0, #15
 800ddb8:	e6b9      	b.n	800db2e <tcp_write+0x37e>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800ddba:	460a      	mov	r2, r1
 800ddbc:	e787      	b.n	800dcce <tcp_write+0x51e>
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800ddbe:	4b05      	ldr	r3, [pc, #20]	; (800ddd4 <tcp_write+0x624>)
 800ddc0:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800ddc4:	490d      	ldr	r1, [pc, #52]	; (800ddfc <tcp_write+0x64c>)
 800ddc6:	4805      	ldr	r0, [pc, #20]	; (800dddc <tcp_write+0x62c>)
 800ddc8:	f003 fc1a 	bl	8011600 <iprintf>
 800ddcc:	f06f 000f 	mvn.w	r0, #15
 800ddd0:	e6ad      	b.n	800db2e <tcp_write+0x37e>
 800ddd2:	bf00      	nop
 800ddd4:	080141ec 	.word	0x080141ec
 800ddd8:	08014408 	.word	0x08014408
 800dddc:	080124d0 	.word	0x080124d0
 800dde0:	080143f0 	.word	0x080143f0
 800dde4:	08014578 	.word	0x08014578
 800dde8:	08014508 	.word	0x08014508
 800ddec:	08014380 	.word	0x08014380
 800ddf0:	08014540 	.word	0x08014540
 800ddf4:	08014448 	.word	0x08014448
 800ddf8:	0801434c 	.word	0x0801434c
 800ddfc:	08014334 	.word	0x08014334

0800de00 <tcp_split_unsent_seg>:
{
 800de00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800de04:	4605      	mov	r5, r0
{
 800de06:	b083      	sub	sp, #12
 800de08:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800de0a:	2800      	cmp	r0, #0
 800de0c:	f000 80a7 	beq.w	800df5e <tcp_split_unsent_seg+0x15e>
  useg = pcb->unsent;
 800de10:	6eee      	ldr	r6, [r5, #108]	; 0x6c
  if (useg == NULL) {
 800de12:	b376      	cbz	r6, 800de72 <tcp_split_unsent_seg+0x72>
  if (split == 0) {
 800de14:	2c00      	cmp	r4, #0
 800de16:	f000 80b3 	beq.w	800df80 <tcp_split_unsent_seg+0x180>
  if (useg->len <= split) {
 800de1a:	f8b6 9008 	ldrh.w	r9, [r6, #8]
 800de1e:	45a1      	cmp	r9, r4
 800de20:	f240 8099 	bls.w	800df56 <tcp_split_unsent_seg+0x156>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800de24:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 800de26:	42a3      	cmp	r3, r4
 800de28:	d328      	bcc.n	800de7c <tcp_split_unsent_seg+0x7c>
  optflags = useg->flags;
 800de2a:	f896 a00a 	ldrb.w	sl, [r6, #10]
  remainder = useg->len - split;
 800de2e:	eba9 0804 	sub.w	r8, r9, r4
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800de32:	f44f 7220 	mov.w	r2, #640	; 0x280
 800de36:	2036      	movs	r0, #54	; 0x36
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800de38:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
  remainder = useg->len - split;
 800de3c:	fa1f f888 	uxth.w	r8, r8
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800de40:	f00b 0b04 	and.w	fp, fp, #4
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800de44:	eb08 010b 	add.w	r1, r8, fp
 800de48:	b289      	uxth	r1, r1
 800de4a:	f7fc fa97 	bl	800a37c <pbuf_alloc>
  if (p == NULL) {
 800de4e:	4607      	mov	r7, r0
 800de50:	b178      	cbz	r0, 800de72 <tcp_split_unsent_seg+0x72>
  offset = useg->p->tot_len - useg->len + split;
 800de52:	6870      	ldr	r0, [r6, #4]
 800de54:	8932      	ldrh	r2, [r6, #8]
 800de56:	8903      	ldrh	r3, [r0, #8]
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800de58:	6879      	ldr	r1, [r7, #4]
  offset = useg->p->tot_len - useg->len + split;
 800de5a:	1a9b      	subs	r3, r3, r2
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800de5c:	4642      	mov	r2, r8
 800de5e:	4459      	add	r1, fp
  offset = useg->p->tot_len - useg->len + split;
 800de60:	4423      	add	r3, r4
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800de62:	b29b      	uxth	r3, r3
 800de64:	f7fc fc48 	bl	800a6f8 <pbuf_copy_partial>
 800de68:	4540      	cmp	r0, r8
 800de6a:	d01d      	beq.n	800dea8 <tcp_split_unsent_seg+0xa8>
    pbuf_free(p);
 800de6c:	4638      	mov	r0, r7
 800de6e:	f7fc fa15 	bl	800a29c <pbuf_free>
  return ERR_MEM;
 800de72:	f04f 30ff 	mov.w	r0, #4294967295
}
 800de76:	b003      	add	sp, #12
 800de78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800de7c:	4b45      	ldr	r3, [pc, #276]	; (800df94 <tcp_split_unsent_seg+0x194>)
 800de7e:	f240 325b 	movw	r2, #859	; 0x35b
 800de82:	4945      	ldr	r1, [pc, #276]	; (800df98 <tcp_split_unsent_seg+0x198>)
 800de84:	4845      	ldr	r0, [pc, #276]	; (800df9c <tcp_split_unsent_seg+0x19c>)
 800de86:	f003 fbbb 	bl	8011600 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800de8a:	f8b6 9008 	ldrh.w	r9, [r6, #8]
 800de8e:	f1b9 0f00 	cmp.w	r9, #0
 800de92:	d1ca      	bne.n	800de2a <tcp_split_unsent_seg+0x2a>
 800de94:	4b3f      	ldr	r3, [pc, #252]	; (800df94 <tcp_split_unsent_seg+0x194>)
 800de96:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800de9a:	4941      	ldr	r1, [pc, #260]	; (800dfa0 <tcp_split_unsent_seg+0x1a0>)
 800de9c:	483f      	ldr	r0, [pc, #252]	; (800df9c <tcp_split_unsent_seg+0x19c>)
 800de9e:	f003 fbaf 	bl	8011600 <iprintf>
  remainder = useg->len - split;
 800dea2:	f8b6 9008 	ldrh.w	r9, [r6, #8]
 800dea6:	e7c0      	b.n	800de2a <tcp_split_unsent_seg+0x2a>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800dea8:	68f3      	ldr	r3, [r6, #12]
 800deaa:	8998      	ldrh	r0, [r3, #12]
 800deac:	f7fb fa74 	bl	8009398 <lwip_htons>
  if (split_flags & TCP_PSH) {
 800deb0:	f010 0b08 	ands.w	fp, r0, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800deb4:	fa5f f880 	uxtb.w	r8, r0
  if (split_flags & TCP_PSH) {
 800deb8:	d159      	bne.n	800df6e <tcp_split_unsent_seg+0x16e>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800deba:	f008 083f 	and.w	r8, r8, #63	; 0x3f
  if (split_flags & TCP_FIN) {
 800debe:	f018 0f01 	tst.w	r8, #1
 800dec2:	d003      	beq.n	800decc <tcp_split_unsent_seg+0xcc>
    split_flags &= ~TCP_FIN;
 800dec4:	f008 08fe 	and.w	r8, r8, #254	; 0xfe
    remainder_flags |= TCP_FIN;
 800dec8:	f04b 0b01 	orr.w	fp, fp, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800decc:	68f3      	ldr	r3, [r6, #12]
 800dece:	6858      	ldr	r0, [r3, #4]
 800ded0:	f7fb fa66 	bl	80093a0 <lwip_htonl>
 800ded4:	f8cd a000 	str.w	sl, [sp]
 800ded8:	1823      	adds	r3, r4, r0
 800deda:	465a      	mov	r2, fp
 800dedc:	4639      	mov	r1, r7
 800dede:	4628      	mov	r0, r5
 800dee0:	f7ff fb3c 	bl	800d55c <tcp_create_segment>
  if (seg == NULL) {
 800dee4:	4682      	mov	sl, r0
 800dee6:	2800      	cmp	r0, #0
 800dee8:	d0c0      	beq.n	800de6c <tcp_split_unsent_seg+0x6c>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800deea:	6870      	ldr	r0, [r6, #4]
 800deec:	eba4 0409 	sub.w	r4, r4, r9
 800def0:	f7fc fb62 	bl	800a5b8 <pbuf_clen>
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800def4:	6872      	ldr	r2, [r6, #4]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800def6:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 800defa:	b2a4      	uxth	r4, r4
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800defc:	8911      	ldrh	r1, [r2, #8]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800defe:	1a1b      	subs	r3, r3, r0
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800df00:	4610      	mov	r0, r2
 800df02:	4421      	add	r1, r4
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800df04:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800df08:	b289      	uxth	r1, r1
 800df0a:	f7fc fae1 	bl	800a4d0 <pbuf_realloc>
  useg->len -= remainder;
 800df0e:	8933      	ldrh	r3, [r6, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800df10:	4640      	mov	r0, r8
  useg->len -= remainder;
 800df12:	441c      	add	r4, r3
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800df14:	68f3      	ldr	r3, [r6, #12]
  useg->len -= remainder;
 800df16:	8134      	strh	r4, [r6, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800df18:	899c      	ldrh	r4, [r3, #12]
 800df1a:	f7fb fa3d 	bl	8009398 <lwip_htons>
 800df1e:	68f3      	ldr	r3, [r6, #12]
 800df20:	4304      	orrs	r4, r0
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800df22:	6870      	ldr	r0, [r6, #4]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800df24:	819c      	strh	r4, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800df26:	f7fc fb47 	bl	800a5b8 <pbuf_clen>
 800df2a:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 800df2e:	4403      	add	r3, r0
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800df30:	f8da 0004 	ldr.w	r0, [sl, #4]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800df34:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800df38:	f7fc fb3e 	bl	800a5b8 <pbuf_clen>
 800df3c:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 800df40:	4418      	add	r0, r3
  seg->next = useg->next;
 800df42:	6833      	ldr	r3, [r6, #0]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800df44:	f8a5 0066 	strh.w	r0, [r5, #102]	; 0x66
  seg->next = useg->next;
 800df48:	f8ca 3000 	str.w	r3, [sl]
  useg->next = seg;
 800df4c:	f8c6 a000 	str.w	sl, [r6]
  if (seg->next == NULL) {
 800df50:	f8da 3000 	ldr.w	r3, [sl]
 800df54:	b183      	cbz	r3, 800df78 <tcp_split_unsent_seg+0x178>
    return ERR_OK;
 800df56:	2000      	movs	r0, #0
}
 800df58:	b003      	add	sp, #12
 800df5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800df5e:	4b0d      	ldr	r3, [pc, #52]	; (800df94 <tcp_split_unsent_seg+0x194>)
 800df60:	f240 324b 	movw	r2, #843	; 0x34b
 800df64:	490f      	ldr	r1, [pc, #60]	; (800dfa4 <tcp_split_unsent_seg+0x1a4>)
 800df66:	480d      	ldr	r0, [pc, #52]	; (800df9c <tcp_split_unsent_seg+0x19c>)
 800df68:	f003 fb4a 	bl	8011600 <iprintf>
 800df6c:	e750      	b.n	800de10 <tcp_split_unsent_seg+0x10>
    split_flags &= ~TCP_PSH;
 800df6e:	f008 0837 	and.w	r8, r8, #55	; 0x37
    remainder_flags |= TCP_PSH;
 800df72:	f04f 0b08 	mov.w	fp, #8
 800df76:	e7a2      	b.n	800debe <tcp_split_unsent_seg+0xbe>
  return ERR_OK;
 800df78:	4618      	mov	r0, r3
    pcb->unsent_oversize = 0;
 800df7a:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 800df7e:	e77a      	b.n	800de76 <tcp_split_unsent_seg+0x76>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800df80:	4b04      	ldr	r3, [pc, #16]	; (800df94 <tcp_split_unsent_seg+0x194>)
 800df82:	f240 3253 	movw	r2, #851	; 0x353
 800df86:	4908      	ldr	r1, [pc, #32]	; (800dfa8 <tcp_split_unsent_seg+0x1a8>)
 800df88:	4804      	ldr	r0, [pc, #16]	; (800df9c <tcp_split_unsent_seg+0x19c>)
 800df8a:	f003 fb39 	bl	8011600 <iprintf>
    return ERR_VAL;
 800df8e:	f06f 0005 	mvn.w	r0, #5
 800df92:	e770      	b.n	800de76 <tcp_split_unsent_seg+0x76>
 800df94:	080141ec 	.word	0x080141ec
 800df98:	080145e0 	.word	0x080145e0
 800df9c:	080124d0 	.word	0x080124d0
 800dfa0:	080145f0 	.word	0x080145f0
 800dfa4:	08014598 	.word	0x08014598
 800dfa8:	080145bc 	.word	0x080145bc

0800dfac <tcp_enqueue_flags>:
{
 800dfac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800dfb0:	f011 0703 	ands.w	r7, r1, #3
{
 800dfb4:	b082      	sub	sp, #8
 800dfb6:	460d      	mov	r5, r1
 800dfb8:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800dfba:	d05e      	beq.n	800e07a <tcp_enqueue_flags+0xce>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800dfbc:	2c00      	cmp	r4, #0
 800dfbe:	d065      	beq.n	800e08c <tcp_enqueue_flags+0xe0>
  if (flags & TCP_SYN) {
 800dfc0:	f015 0802 	ands.w	r8, r5, #2
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800dfc4:	f44f 7220 	mov.w	r2, #640	; 0x280
  if (flags & TCP_SYN) {
 800dfc8:	d049      	beq.n	800e05e <tcp_enqueue_flags+0xb2>
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800dfca:	2104      	movs	r1, #4
 800dfcc:	2036      	movs	r0, #54	; 0x36
 800dfce:	f7fc f9d5 	bl	800a37c <pbuf_alloc>
 800dfd2:	4606      	mov	r6, r0
 800dfd4:	2800      	cmp	r0, #0
 800dfd6:	d049      	beq.n	800e06c <tcp_enqueue_flags+0xc0>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800dfd8:	8943      	ldrh	r3, [r0, #10]
 800dfda:	2b03      	cmp	r3, #3
 800dfdc:	d872      	bhi.n	800e0c4 <tcp_enqueue_flags+0x118>
    optflags = TF_SEG_OPTS_MSS;
 800dfde:	f04f 0801 	mov.w	r8, #1
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800dfe2:	4b40      	ldr	r3, [pc, #256]	; (800e0e4 <tcp_enqueue_flags+0x138>)
 800dfe4:	f240 4239 	movw	r2, #1081	; 0x439
 800dfe8:	493f      	ldr	r1, [pc, #252]	; (800e0e8 <tcp_enqueue_flags+0x13c>)
 800dfea:	4840      	ldr	r0, [pc, #256]	; (800e0ec <tcp_enqueue_flags+0x140>)
 800dfec:	f003 fb08 	bl	8011600 <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800dff0:	4631      	mov	r1, r6
 800dff2:	f8cd 8000 	str.w	r8, [sp]
 800dff6:	462a      	mov	r2, r5
 800dff8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800dffa:	4620      	mov	r0, r4
 800dffc:	f7ff faae 	bl	800d55c <tcp_create_segment>
 800e000:	4606      	mov	r6, r0
 800e002:	2800      	cmp	r0, #0
 800e004:	d032      	beq.n	800e06c <tcp_enqueue_flags+0xc0>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800e006:	68c3      	ldr	r3, [r0, #12]
 800e008:	079a      	lsls	r2, r3, #30
 800e00a:	d153      	bne.n	800e0b4 <tcp_enqueue_flags+0x108>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800e00c:	8933      	ldrh	r3, [r6, #8]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d144      	bne.n	800e09c <tcp_enqueue_flags+0xf0>
  if (pcb->unsent == NULL) {
 800e012:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800e014:	2b00      	cmp	r3, #0
 800e016:	d04b      	beq.n	800e0b0 <tcp_enqueue_flags+0x104>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800e018:	461a      	mov	r2, r3
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d1fb      	bne.n	800e018 <tcp_enqueue_flags+0x6c>
    useg->next = seg;
 800e020:	6016      	str	r6, [r2, #0]
  pcb->unsent_oversize = 0;
 800e022:	2300      	movs	r3, #0
 800e024:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800e028:	b117      	cbz	r7, 800e030 <tcp_enqueue_flags+0x84>
    pcb->snd_lbb++;
 800e02a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800e02c:	3301      	adds	r3, #1
 800e02e:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (flags & TCP_FIN) {
 800e030:	07eb      	lsls	r3, r5, #31
 800e032:	d503      	bpl.n	800e03c <tcp_enqueue_flags+0x90>
    tcp_set_flags(pcb, TF_FIN);
 800e034:	8b63      	ldrh	r3, [r4, #26]
 800e036:	f043 0320 	orr.w	r3, r3, #32
 800e03a:	8363      	strh	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e03c:	6870      	ldr	r0, [r6, #4]
 800e03e:	f7fc fabb 	bl	800a5b8 <pbuf_clen>
 800e042:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800e046:	4418      	add	r0, r3
 800e048:	b280      	uxth	r0, r0
 800e04a:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 800e04e:	b118      	cbz	r0, 800e058 <tcp_enqueue_flags+0xac>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800e050:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800e052:	2800      	cmp	r0, #0
 800e054:	d039      	beq.n	800e0ca <tcp_enqueue_flags+0x11e>
  return ERR_OK;
 800e056:	2000      	movs	r0, #0
}
 800e058:	b002      	add	sp, #8
 800e05a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800e05e:	4641      	mov	r1, r8
 800e060:	2036      	movs	r0, #54	; 0x36
 800e062:	f7fc f98b 	bl	800a37c <pbuf_alloc>
 800e066:	4606      	mov	r6, r0
 800e068:	2800      	cmp	r0, #0
 800e06a:	d1c1      	bne.n	800dff0 <tcp_enqueue_flags+0x44>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e06c:	8b63      	ldrh	r3, [r4, #26]
    return ERR_MEM;
 800e06e:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e072:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e076:	8363      	strh	r3, [r4, #26]
    return ERR_MEM;
 800e078:	e7ee      	b.n	800e058 <tcp_enqueue_flags+0xac>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800e07a:	4b1a      	ldr	r3, [pc, #104]	; (800e0e4 <tcp_enqueue_flags+0x138>)
 800e07c:	f240 4211 	movw	r2, #1041	; 0x411
 800e080:	491b      	ldr	r1, [pc, #108]	; (800e0f0 <tcp_enqueue_flags+0x144>)
 800e082:	481a      	ldr	r0, [pc, #104]	; (800e0ec <tcp_enqueue_flags+0x140>)
 800e084:	f003 fabc 	bl	8011600 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800e088:	2c00      	cmp	r4, #0
 800e08a:	d199      	bne.n	800dfc0 <tcp_enqueue_flags+0x14>
 800e08c:	4b15      	ldr	r3, [pc, #84]	; (800e0e4 <tcp_enqueue_flags+0x138>)
 800e08e:	f240 4213 	movw	r2, #1043	; 0x413
 800e092:	4918      	ldr	r1, [pc, #96]	; (800e0f4 <tcp_enqueue_flags+0x148>)
 800e094:	4815      	ldr	r0, [pc, #84]	; (800e0ec <tcp_enqueue_flags+0x140>)
 800e096:	f003 fab3 	bl	8011600 <iprintf>
 800e09a:	e791      	b.n	800dfc0 <tcp_enqueue_flags+0x14>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800e09c:	4b11      	ldr	r3, [pc, #68]	; (800e0e4 <tcp_enqueue_flags+0x138>)
 800e09e:	f240 4243 	movw	r2, #1091	; 0x443
 800e0a2:	4915      	ldr	r1, [pc, #84]	; (800e0f8 <tcp_enqueue_flags+0x14c>)
 800e0a4:	4811      	ldr	r0, [pc, #68]	; (800e0ec <tcp_enqueue_flags+0x140>)
 800e0a6:	f003 faab 	bl	8011600 <iprintf>
  if (pcb->unsent == NULL) {
 800e0aa:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d1b3      	bne.n	800e018 <tcp_enqueue_flags+0x6c>
    pcb->unsent = seg;
 800e0b0:	66e6      	str	r6, [r4, #108]	; 0x6c
 800e0b2:	e7b6      	b.n	800e022 <tcp_enqueue_flags+0x76>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800e0b4:	4b0b      	ldr	r3, [pc, #44]	; (800e0e4 <tcp_enqueue_flags+0x138>)
 800e0b6:	f240 4242 	movw	r2, #1090	; 0x442
 800e0ba:	4910      	ldr	r1, [pc, #64]	; (800e0fc <tcp_enqueue_flags+0x150>)
 800e0bc:	480b      	ldr	r0, [pc, #44]	; (800e0ec <tcp_enqueue_flags+0x140>)
 800e0be:	f003 fa9f 	bl	8011600 <iprintf>
 800e0c2:	e7a3      	b.n	800e00c <tcp_enqueue_flags+0x60>
    optflags = TF_SEG_OPTS_MSS;
 800e0c4:	f04f 0801 	mov.w	r8, #1
 800e0c8:	e792      	b.n	800dff0 <tcp_enqueue_flags+0x44>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800e0ca:	6ee4      	ldr	r4, [r4, #108]	; 0x6c
 800e0cc:	2c00      	cmp	r4, #0
 800e0ce:	d1c3      	bne.n	800e058 <tcp_enqueue_flags+0xac>
 800e0d0:	4b04      	ldr	r3, [pc, #16]	; (800e0e4 <tcp_enqueue_flags+0x138>)
 800e0d2:	f240 4265 	movw	r2, #1125	; 0x465
 800e0d6:	490a      	ldr	r1, [pc, #40]	; (800e100 <tcp_enqueue_flags+0x154>)
 800e0d8:	4804      	ldr	r0, [pc, #16]	; (800e0ec <tcp_enqueue_flags+0x140>)
 800e0da:	f003 fa91 	bl	8011600 <iprintf>
  return ERR_OK;
 800e0de:	4620      	mov	r0, r4
 800e0e0:	e7ba      	b.n	800e058 <tcp_enqueue_flags+0xac>
 800e0e2:	bf00      	nop
 800e0e4:	080141ec 	.word	0x080141ec
 800e0e8:	08014678 	.word	0x08014678
 800e0ec:	080124d0 	.word	0x080124d0
 800e0f0:	08014600 	.word	0x08014600
 800e0f4:	08014658 	.word	0x08014658
 800e0f8:	080146cc 	.word	0x080146cc
 800e0fc:	080146b4 	.word	0x080146b4
 800e100:	080146f8 	.word	0x080146f8

0800e104 <tcp_send_fin>:
{
 800e104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800e106:	4606      	mov	r6, r0
 800e108:	b188      	cbz	r0, 800e12e <tcp_send_fin+0x2a>
  if (pcb->unsent != NULL) {
 800e10a:	6ef4      	ldr	r4, [r6, #108]	; 0x6c
 800e10c:	b14c      	cbz	r4, 800e122 <tcp_send_fin+0x1e>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e10e:	4625      	mov	r5, r4
 800e110:	6824      	ldr	r4, [r4, #0]
 800e112:	2c00      	cmp	r4, #0
 800e114:	d1fb      	bne.n	800e10e <tcp_send_fin+0xa>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800e116:	68eb      	ldr	r3, [r5, #12]
 800e118:	8998      	ldrh	r0, [r3, #12]
 800e11a:	f7fb f93d 	bl	8009398 <lwip_htons>
 800e11e:	0743      	lsls	r3, r0, #29
 800e120:	d00d      	beq.n	800e13e <tcp_send_fin+0x3a>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800e122:	4630      	mov	r0, r6
 800e124:	2101      	movs	r1, #1
}
 800e126:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800e12a:	f7ff bf3f 	b.w	800dfac <tcp_enqueue_flags>
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800e12e:	4b0b      	ldr	r3, [pc, #44]	; (800e15c <tcp_send_fin+0x58>)
 800e130:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800e134:	490a      	ldr	r1, [pc, #40]	; (800e160 <tcp_send_fin+0x5c>)
 800e136:	480b      	ldr	r0, [pc, #44]	; (800e164 <tcp_send_fin+0x60>)
 800e138:	f003 fa62 	bl	8011600 <iprintf>
 800e13c:	e7e5      	b.n	800e10a <tcp_send_fin+0x6>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800e13e:	68eb      	ldr	r3, [r5, #12]
 800e140:	2001      	movs	r0, #1
 800e142:	899f      	ldrh	r7, [r3, #12]
 800e144:	f7fb f928 	bl	8009398 <lwip_htons>
      tcp_set_flags(pcb, TF_FIN);
 800e148:	8b73      	ldrh	r3, [r6, #26]
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800e14a:	4338      	orrs	r0, r7
 800e14c:	68ea      	ldr	r2, [r5, #12]
      tcp_set_flags(pcb, TF_FIN);
 800e14e:	f043 0320 	orr.w	r3, r3, #32
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800e152:	8190      	strh	r0, [r2, #12]
}
 800e154:	4620      	mov	r0, r4
      tcp_set_flags(pcb, TF_FIN);
 800e156:	8373      	strh	r3, [r6, #26]
}
 800e158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e15a:	bf00      	nop
 800e15c:	080141ec 	.word	0x080141ec
 800e160:	08014720 	.word	0x08014720
 800e164:	080124d0 	.word	0x080124d0

0800e168 <tcp_rexmit_rto_prepare>:
{
 800e168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800e16a:	4605      	mov	r5, r0
 800e16c:	2800      	cmp	r0, #0
 800e16e:	d032      	beq.n	800e1d6 <tcp_rexmit_rto_prepare+0x6e>
  if (pcb->unacked == NULL) {
 800e170:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800e172:	b132      	cbz	r2, 800e182 <tcp_rexmit_rto_prepare+0x1a>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e174:	6813      	ldr	r3, [r2, #0]
 800e176:	4614      	mov	r4, r2
 800e178:	b15b      	cbz	r3, 800e192 <tcp_rexmit_rto_prepare+0x2a>
  if (seg->p->ref != 1) {
 800e17a:	6863      	ldr	r3, [r4, #4]
 800e17c:	7b9b      	ldrb	r3, [r3, #14]
 800e17e:	2b01      	cmp	r3, #1
 800e180:	d003      	beq.n	800e18a <tcp_rexmit_rto_prepare+0x22>
    return ERR_VAL;
 800e182:	f06f 0305 	mvn.w	r3, #5
}
 800e186:	4618      	mov	r0, r3
 800e188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e18a:	6824      	ldr	r4, [r4, #0]
 800e18c:	6823      	ldr	r3, [r4, #0]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d1f3      	bne.n	800e17a <tcp_rexmit_rto_prepare+0x12>
  if (seg->p->ref != 1) {
 800e192:	6863      	ldr	r3, [r4, #4]
 800e194:	7b9b      	ldrb	r3, [r3, #14]
 800e196:	2b01      	cmp	r3, #1
 800e198:	d1f3      	bne.n	800e182 <tcp_rexmit_rto_prepare+0x1a>
  tcp_set_flags(pcb, TF_RTO);
 800e19a:	8b6b      	ldrh	r3, [r5, #26]
  pcb->unacked = NULL;
 800e19c:	2700      	movs	r7, #0
  seg->next = pcb->unsent;
 800e19e:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
  tcp_set_flags(pcb, TF_RTO);
 800e1a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  seg->next = pcb->unsent;
 800e1a4:	6021      	str	r1, [r4, #0]
  tcp_set_flags(pcb, TF_RTO);
 800e1a6:	836b      	strh	r3, [r5, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e1a8:	68e3      	ldr	r3, [r4, #12]
  pcb->unacked = NULL;
 800e1aa:	e9c5 271b 	strd	r2, r7, [r5, #108]	; 0x6c
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e1ae:	6858      	ldr	r0, [r3, #4]
 800e1b0:	f7fb f8f6 	bl	80093a0 <lwip_htonl>
 800e1b4:	68e3      	ldr	r3, [r4, #12]
 800e1b6:	4606      	mov	r6, r0
 800e1b8:	8924      	ldrh	r4, [r4, #8]
 800e1ba:	8998      	ldrh	r0, [r3, #12]
 800e1bc:	f7fb f8ec 	bl	8009398 <lwip_htons>
 800e1c0:	f010 0003 	ands.w	r0, r0, #3
 800e1c4:	4426      	add	r6, r4
  return ERR_OK;
 800e1c6:	463b      	mov	r3, r7
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e1c8:	bf18      	it	ne
 800e1ca:	2001      	movne	r0, #1
  pcb->rttest = 0;
 800e1cc:	636f      	str	r7, [r5, #52]	; 0x34
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e1ce:	4430      	add	r0, r6
 800e1d0:	64e8      	str	r0, [r5, #76]	; 0x4c
}
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800e1d6:	4b04      	ldr	r3, [pc, #16]	; (800e1e8 <tcp_rexmit_rto_prepare+0x80>)
 800e1d8:	f240 6263 	movw	r2, #1635	; 0x663
 800e1dc:	4903      	ldr	r1, [pc, #12]	; (800e1ec <tcp_rexmit_rto_prepare+0x84>)
 800e1de:	4804      	ldr	r0, [pc, #16]	; (800e1f0 <tcp_rexmit_rto_prepare+0x88>)
 800e1e0:	f003 fa0e 	bl	8011600 <iprintf>
 800e1e4:	e7c4      	b.n	800e170 <tcp_rexmit_rto_prepare+0x8>
 800e1e6:	bf00      	nop
 800e1e8:	080141ec 	.word	0x080141ec
 800e1ec:	0801473c 	.word	0x0801473c
 800e1f0:	080124d0 	.word	0x080124d0

0800e1f4 <tcp_rexmit>:
{
 800e1f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800e1f6:	4607      	mov	r7, r0
 800e1f8:	2800      	cmp	r0, #0
 800e1fa:	d031      	beq.n	800e260 <tcp_rexmit+0x6c>
  if (pcb->unacked == NULL) {
 800e1fc:	6f3e      	ldr	r6, [r7, #112]	; 0x70
 800e1fe:	b34e      	cbz	r6, 800e254 <tcp_rexmit+0x60>
  if (seg->p->ref != 1) {
 800e200:	6873      	ldr	r3, [r6, #4]
 800e202:	7b9b      	ldrb	r3, [r3, #14]
 800e204:	2b01      	cmp	r3, #1
 800e206:	d125      	bne.n	800e254 <tcp_rexmit+0x60>
  pcb->unacked = seg->next;
 800e208:	6832      	ldr	r2, [r6, #0]
  cur_seg = &(pcb->unsent);
 800e20a:	f107 056c 	add.w	r5, r7, #108	; 0x6c
  while (*cur_seg &&
 800e20e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  pcb->unacked = seg->next;
 800e210:	673a      	str	r2, [r7, #112]	; 0x70
  while (*cur_seg &&
 800e212:	b91b      	cbnz	r3, 800e21c <tcp_rexmit+0x28>
 800e214:	e00f      	b.n	800e236 <tcp_rexmit+0x42>
    cur_seg = &((*cur_seg)->next );
 800e216:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
 800e218:	682b      	ldr	r3, [r5, #0]
 800e21a:	b163      	cbz	r3, 800e236 <tcp_rexmit+0x42>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e21c:	68db      	ldr	r3, [r3, #12]
 800e21e:	6858      	ldr	r0, [r3, #4]
 800e220:	f7fb f8be 	bl	80093a0 <lwip_htonl>
 800e224:	68f3      	ldr	r3, [r6, #12]
 800e226:	4604      	mov	r4, r0
 800e228:	6858      	ldr	r0, [r3, #4]
 800e22a:	f7fb f8b9 	bl	80093a0 <lwip_htonl>
 800e22e:	1a24      	subs	r4, r4, r0
  while (*cur_seg &&
 800e230:	2c00      	cmp	r4, #0
 800e232:	dbf0      	blt.n	800e216 <tcp_rexmit+0x22>
    cur_seg = &((*cur_seg)->next );
 800e234:	682b      	ldr	r3, [r5, #0]
  seg->next = *cur_seg;
 800e236:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 800e238:	602e      	str	r6, [r5, #0]
  if (seg->next == NULL) {
 800e23a:	6833      	ldr	r3, [r6, #0]
 800e23c:	b16b      	cbz	r3, 800e25a <tcp_rexmit+0x66>
  if (pcb->nrtx < 0xFF) {
 800e23e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800e242:	2bff      	cmp	r3, #255	; 0xff
 800e244:	d002      	beq.n	800e24c <tcp_rexmit+0x58>
    ++pcb->nrtx;
 800e246:	3301      	adds	r3, #1
 800e248:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  pcb->rttest = 0;
 800e24c:	2300      	movs	r3, #0
  return ERR_OK;
 800e24e:	4618      	mov	r0, r3
  pcb->rttest = 0;
 800e250:	637b      	str	r3, [r7, #52]	; 0x34
}
 800e252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_VAL;
 800e254:	f06f 0005 	mvn.w	r0, #5
}
 800e258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = 0;
 800e25a:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 800e25e:	e7ee      	b.n	800e23e <tcp_rexmit+0x4a>
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800e260:	4b03      	ldr	r3, [pc, #12]	; (800e270 <tcp_rexmit+0x7c>)
 800e262:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800e266:	4903      	ldr	r1, [pc, #12]	; (800e274 <tcp_rexmit+0x80>)
 800e268:	4803      	ldr	r0, [pc, #12]	; (800e278 <tcp_rexmit+0x84>)
 800e26a:	f003 f9c9 	bl	8011600 <iprintf>
 800e26e:	e7c5      	b.n	800e1fc <tcp_rexmit+0x8>
 800e270:	080141ec 	.word	0x080141ec
 800e274:	08014760 	.word	0x08014760
 800e278:	080124d0 	.word	0x080124d0

0800e27c <tcp_rexmit_fast>:
{
 800e27c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800e27e:	4604      	mov	r4, r0
 800e280:	b340      	cbz	r0, 800e2d4 <tcp_rexmit_fast+0x58>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800e282:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800e284:	b113      	cbz	r3, 800e28c <tcp_rexmit_fast+0x10>
 800e286:	8b63      	ldrh	r3, [r4, #26]
 800e288:	075b      	lsls	r3, r3, #29
 800e28a:	d500      	bpl.n	800e28e <tcp_rexmit_fast+0x12>
}
 800e28c:	bd10      	pop	{r4, pc}
    if (tcp_rexmit(pcb) == ERR_OK) {
 800e28e:	4620      	mov	r0, r4
 800e290:	f7ff ffb0 	bl	800e1f4 <tcp_rexmit>
 800e294:	2800      	cmp	r0, #0
 800e296:	d1f9      	bne.n	800e28c <tcp_rexmit_fast+0x10>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e298:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 800e29c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800e2a0:	8e62      	ldrh	r2, [r4, #50]	; 0x32
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e2a2:	4299      	cmp	r1, r3
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800e2a4:	ea4f 0042 	mov.w	r0, r2, lsl #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e2a8:	bf28      	it	cs
 800e2aa:	4619      	movcs	r1, r3
 800e2ac:	084b      	lsrs	r3, r1, #1
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800e2ae:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e2b2:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800e2b6:	d902      	bls.n	800e2be <tcp_rexmit_fast+0x42>
        pcb->ssthresh = 2 * pcb->mss;
 800e2b8:	b283      	uxth	r3, r0
 800e2ba:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
      tcp_set_flags(pcb, TF_INFR);
 800e2be:	8b61      	ldrh	r1, [r4, #26]
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800e2c0:	4402      	add	r2, r0
      tcp_set_flags(pcb, TF_INFR);
 800e2c2:	f041 0104 	orr.w	r1, r1, #4
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800e2c6:	4413      	add	r3, r2
      pcb->rtime = 0;
 800e2c8:	2200      	movs	r2, #0
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800e2ca:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800e2ce:	8361      	strh	r1, [r4, #26]
      pcb->rtime = 0;
 800e2d0:	8622      	strh	r2, [r4, #48]	; 0x30
}
 800e2d2:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800e2d4:	4b03      	ldr	r3, [pc, #12]	; (800e2e4 <tcp_rexmit_fast+0x68>)
 800e2d6:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800e2da:	4903      	ldr	r1, [pc, #12]	; (800e2e8 <tcp_rexmit_fast+0x6c>)
 800e2dc:	4803      	ldr	r0, [pc, #12]	; (800e2ec <tcp_rexmit_fast+0x70>)
 800e2de:	f003 f98f 	bl	8011600 <iprintf>
 800e2e2:	e7ce      	b.n	800e282 <tcp_rexmit_fast+0x6>
 800e2e4:	080141ec 	.word	0x080141ec
 800e2e8:	08014778 	.word	0x08014778
 800e2ec:	080124d0 	.word	0x080124d0

0800e2f0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800e2f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2f4:	b084      	sub	sp, #16
 800e2f6:	4607      	mov	r7, r0
 800e2f8:	460e      	mov	r6, r1
 800e2fa:	4615      	mov	r5, r2
 800e2fc:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800e300:	461c      	mov	r4, r3
{
 800e302:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 800e306:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800e30a:	b1fb      	cbz	r3, 800e34c <tcp_rst+0x5c>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800e30c:	f1b8 0f00 	cmp.w	r8, #0
 800e310:	d026      	beq.n	800e360 <tcp_rst+0x70>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800e312:	4630      	mov	r0, r6
 800e314:	f7fb f844 	bl	80093a0 <lwip_htonl>
 800e318:	2114      	movs	r1, #20
 800e31a:	4602      	mov	r2, r0
 800e31c:	4628      	mov	r0, r5
 800e31e:	f246 0508 	movw	r5, #24584	; 0x6008
 800e322:	464b      	mov	r3, r9
 800e324:	f8cd a000 	str.w	sl, [sp]
 800e328:	e9cd 1501 	strd	r1, r5, [sp, #4]
 800e32c:	2100      	movs	r1, #0
 800e32e:	f7ff f98f 	bl	800d650 <tcp_output_alloc_header_common.constprop.0>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800e332:	4601      	mov	r1, r0
 800e334:	b138      	cbz	r0, 800e346 <tcp_rst+0x56>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800e336:	4643      	mov	r3, r8
 800e338:	4622      	mov	r2, r4
 800e33a:	4638      	mov	r0, r7
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800e33c:	b004      	add	sp, #16
 800e33e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800e342:	f7ff b9f3 	b.w	800d72c <tcp_output_control_segment>
}
 800e346:	b004      	add	sp, #16
 800e348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800e34c:	4b08      	ldr	r3, [pc, #32]	; (800e370 <tcp_rst+0x80>)
 800e34e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800e352:	4908      	ldr	r1, [pc, #32]	; (800e374 <tcp_rst+0x84>)
 800e354:	4808      	ldr	r0, [pc, #32]	; (800e378 <tcp_rst+0x88>)
 800e356:	f003 f953 	bl	8011600 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800e35a:	f1b8 0f00 	cmp.w	r8, #0
 800e35e:	d1d8      	bne.n	800e312 <tcp_rst+0x22>
 800e360:	4b03      	ldr	r3, [pc, #12]	; (800e370 <tcp_rst+0x80>)
 800e362:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800e366:	4905      	ldr	r1, [pc, #20]	; (800e37c <tcp_rst+0x8c>)
 800e368:	4803      	ldr	r0, [pc, #12]	; (800e378 <tcp_rst+0x88>)
 800e36a:	f003 f949 	bl	8011600 <iprintf>
 800e36e:	e7d0      	b.n	800e312 <tcp_rst+0x22>
 800e370:	080141ec 	.word	0x080141ec
 800e374:	08014798 	.word	0x08014798
 800e378:	080124d0 	.word	0x080124d0
 800e37c:	080147b4 	.word	0x080147b4

0800e380 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800e380:	b510      	push	{r4, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800e382:	4604      	mov	r4, r0
 800e384:	b1c8      	cbz	r0, 800e3ba <tcp_send_empty_ack+0x3a>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800e386:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800e388:	f7fb f80a 	bl	80093a0 <lwip_htonl>
 800e38c:	2100      	movs	r1, #0
 800e38e:	4602      	mov	r2, r0
 800e390:	4620      	mov	r0, r4
 800e392:	f7ff f9a3 	bl	800d6dc <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800e396:	4601      	mov	r1, r0
 800e398:	b1b8      	cbz	r0, 800e3ca <tcp_send_empty_ack+0x4a>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e39a:	1d23      	adds	r3, r4, #4
 800e39c:	4622      	mov	r2, r4
 800e39e:	4620      	mov	r0, r4
 800e3a0:	f7ff f9c4 	bl	800d72c <tcp_output_control_segment>
  if (err != ERR_OK) {
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e3a4:	8b63      	ldrh	r3, [r4, #26]
  if (err != ERR_OK) {
 800e3a6:	b920      	cbnz	r0, 800e3b2 <tcp_send_empty_ack+0x32>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e3a8:	f023 0303 	bic.w	r3, r3, #3
 800e3ac:	b29b      	uxth	r3, r3
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e3ae:	8363      	strh	r3, [r4, #26]
  }

  return err;
}
 800e3b0:	bd10      	pop	{r4, pc}
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e3b2:	f043 0303 	orr.w	r3, r3, #3
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e3b6:	8363      	strh	r3, [r4, #26]
}
 800e3b8:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800e3ba:	4b07      	ldr	r3, [pc, #28]	; (800e3d8 <tcp_send_empty_ack+0x58>)
 800e3bc:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800e3c0:	4906      	ldr	r1, [pc, #24]	; (800e3dc <tcp_send_empty_ack+0x5c>)
 800e3c2:	4807      	ldr	r0, [pc, #28]	; (800e3e0 <tcp_send_empty_ack+0x60>)
 800e3c4:	f003 f91c 	bl	8011600 <iprintf>
 800e3c8:	e7dd      	b.n	800e386 <tcp_send_empty_ack+0x6>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e3ca:	8b63      	ldrh	r3, [r4, #26]
    return ERR_BUF;
 800e3cc:	f06f 0001 	mvn.w	r0, #1
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e3d0:	f043 0303 	orr.w	r3, r3, #3
    return ERR_BUF;
 800e3d4:	e7eb      	b.n	800e3ae <tcp_send_empty_ack+0x2e>
 800e3d6:	bf00      	nop
 800e3d8:	080141ec 	.word	0x080141ec
 800e3dc:	080147d0 	.word	0x080147d0
 800e3e0:	080124d0 	.word	0x080124d0

0800e3e4 <tcp_output>:
{
 800e3e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800e3e8:	4604      	mov	r4, r0
{
 800e3ea:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800e3ec:	2800      	cmp	r0, #0
 800e3ee:	f000 81b2 	beq.w	800e756 <tcp_output+0x372>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800e3f2:	7d23      	ldrb	r3, [r4, #20]
 800e3f4:	2b01      	cmp	r3, #1
 800e3f6:	f000 8169 	beq.w	800e6cc <tcp_output+0x2e8>
  if (tcp_input_pcb == pcb) {
 800e3fa:	4bae      	ldr	r3, [pc, #696]	; (800e6b4 <tcp_output+0x2d0>)
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	42a3      	cmp	r3, r4
 800e400:	f000 8170 	beq.w	800e6e4 <tcp_output+0x300>
  seg = pcb->unsent;
 800e404:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800e406:	f8b4 6048 	ldrh.w	r6, [r4, #72]	; 0x48
 800e40a:	f8b4 7060 	ldrh.w	r7, [r4, #96]	; 0x60
  if (seg == NULL) {
 800e40e:	b325      	cbz	r5, 800e45a <tcp_output+0x76>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800e410:	7a20      	ldrb	r0, [r4, #8]
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800e412:	f104 0904 	add.w	r9, r4, #4
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800e416:	2800      	cmp	r0, #0
 800e418:	f040 81a5 	bne.w	800e766 <tcp_output+0x382>
    return ip_route(src, dst);
 800e41c:	4648      	mov	r0, r9
 800e41e:	f001 fc17 	bl	800fc50 <ip4_route>
 800e422:	4680      	mov	r8, r0
  if (netif == NULL) {
 800e424:	f1b8 0f00 	cmp.w	r8, #0
 800e428:	f000 81af 	beq.w	800e78a <tcp_output+0x3a6>
  if (ip_addr_isany(&pcb->local_ip)) {
 800e42c:	6823      	ldr	r3, [r4, #0]
 800e42e:	b913      	cbnz	r3, 800e436 <tcp_output+0x52>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800e430:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e434:	6023      	str	r3, [r4, #0]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800e436:	68eb      	ldr	r3, [r5, #12]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800e438:	42be      	cmp	r6, r7
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800e43a:	6858      	ldr	r0, [r3, #4]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800e43c:	bf28      	it	cs
 800e43e:	463e      	movcs	r6, r7
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800e440:	f7fa ffae 	bl	80093a0 <lwip_htonl>
 800e444:	892b      	ldrh	r3, [r5, #8]
 800e446:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800e448:	1a9b      	subs	r3, r3, r2
 800e44a:	4418      	add	r0, r3
 800e44c:	42b0      	cmp	r0, r6
 800e44e:	d90f      	bls.n	800e470 <tcp_output+0x8c>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800e450:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800e454:	42b3      	cmp	r3, r6
 800e456:	f000 814f 	beq.w	800e6f8 <tcp_output+0x314>
    if (pcb->flags & TF_ACK_NOW) {
 800e45a:	8b62      	ldrh	r2, [r4, #26]
 800e45c:	0791      	lsls	r1, r2, #30
 800e45e:	f100 8145 	bmi.w	800e6ec <tcp_output+0x308>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800e462:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  return ERR_OK;
 800e466:	2000      	movs	r0, #0
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800e468:	8362      	strh	r2, [r4, #26]
}
 800e46a:	b005      	add	sp, #20
 800e46c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  pcb->persist_backoff = 0;
 800e470:	2300      	movs	r3, #0
 800e472:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
  useg = pcb->unacked;
 800e476:	6f23      	ldr	r3, [r4, #112]	; 0x70
  if (useg != NULL) {
 800e478:	2b00      	cmp	r3, #0
 800e47a:	f000 814d 	beq.w	800e718 <tcp_output+0x334>
    for (; useg->next != NULL; useg = useg->next);
 800e47e:	461f      	mov	r7, r3
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	2b00      	cmp	r3, #0
 800e484:	f000 80af 	beq.w	800e5e6 <tcp_output+0x202>
 800e488:	461f      	mov	r7, r3
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d1f6      	bne.n	800e47e <tcp_output+0x9a>
 800e490:	e0a9      	b.n	800e5e6 <tcp_output+0x202>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800e492:	68eb      	ldr	r3, [r5, #12]
 800e494:	2010      	movs	r0, #16
 800e496:	f8b3 a00c 	ldrh.w	sl, [r3, #12]
 800e49a:	f7fa ff7d 	bl	8009398 <lwip_htons>
 800e49e:	ea4a 0000 	orr.w	r0, sl, r0
 800e4a2:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800e4a6:	f8aa 000c 	strh.w	r0, [sl, #12]
  if (seg->p->ref != 1) {
 800e4aa:	686b      	ldr	r3, [r5, #4]
 800e4ac:	7b9b      	ldrb	r3, [r3, #14]
 800e4ae:	2b01      	cmp	r3, #1
 800e4b0:	d154      	bne.n	800e55c <tcp_output+0x178>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800e4b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e4b4:	f7fa ff74 	bl	80093a0 <lwip_htonl>
 800e4b8:	f8ca 0008 	str.w	r0, [sl, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800e4bc:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800e4be:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800e4c2:	f7fa ff69 	bl	8009398 <lwip_htons>
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e4c6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800e4c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800e4ca:	f8aa 000e 	strh.w	r0, [sl, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e4ce:	4413      	add	r3, r2
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800e4d0:	f8d5 a00c 	ldr.w	sl, [r5, #12]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e4d4:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800e4d6:	7aab      	ldrb	r3, [r5, #10]
 800e4d8:	07db      	lsls	r3, r3, #31
 800e4da:	f100 80c2 	bmi.w	800e662 <tcp_output+0x27e>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800e4de:	f10a 0b14 	add.w	fp, sl, #20
  if (pcb->rtime < 0) {
 800e4e2:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	da01      	bge.n	800e4ee <tcp_output+0x10a>
    pcb->rtime = 0;
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	8623      	strh	r3, [r4, #48]	; 0x30
  if (pcb->rttest == 0) {
 800e4ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	f000 80ab 	beq.w	800e64c <tcp_output+0x268>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e4f6:	6868      	ldr	r0, [r5, #4]
  seg->tcphdr->chksum = 0;
 800e4f8:	2200      	movs	r2, #0
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e4fa:	6843      	ldr	r3, [r0, #4]
  seg->p->len -= len;
 800e4fc:	8941      	ldrh	r1, [r0, #10]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e4fe:	ebaa 0303 	sub.w	r3, sl, r3
  seg->p->payload = seg->tcphdr;
 800e502:	f8c0 a004 	str.w	sl, [r0, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e506:	b29b      	uxth	r3, r3
  seg->p->len -= len;
 800e508:	1ac9      	subs	r1, r1, r3
 800e50a:	8141      	strh	r1, [r0, #10]
  seg->p->tot_len -= len;
 800e50c:	8901      	ldrh	r1, [r0, #8]
 800e50e:	1acb      	subs	r3, r1, r3
 800e510:	8103      	strh	r3, [r0, #8]
  seg->tcphdr->chksum = 0;
 800e512:	f88a 2010 	strb.w	r2, [sl, #16]
 800e516:	f88a 2011 	strb.w	r2, [sl, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800e51a:	7aab      	ldrb	r3, [r5, #10]
 800e51c:	f013 0f01 	tst.w	r3, #1
 800e520:	bf14      	ite	ne
 800e522:	2318      	movne	r3, #24
 800e524:	2314      	moveq	r3, #20
 800e526:	449a      	add	sl, r3
 800e528:	45d3      	cmp	fp, sl
 800e52a:	d007      	beq.n	800e53c <tcp_output+0x158>
 800e52c:	4b62      	ldr	r3, [pc, #392]	; (800e6b8 <tcp_output+0x2d4>)
 800e52e:	f240 621c 	movw	r2, #1564	; 0x61c
 800e532:	4962      	ldr	r1, [pc, #392]	; (800e6bc <tcp_output+0x2d8>)
 800e534:	4862      	ldr	r0, [pc, #392]	; (800e6c0 <tcp_output+0x2dc>)
 800e536:	f003 f863 	bl	8011600 <iprintf>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800e53a:	6868      	ldr	r0, [r5, #4]
 800e53c:	f8cd 8008 	str.w	r8, [sp, #8]
 800e540:	464a      	mov	r2, r9
 800e542:	7aa3      	ldrb	r3, [r4, #10]
 800e544:	4621      	mov	r1, r4
 800e546:	9300      	str	r3, [sp, #0]
 800e548:	2306      	movs	r3, #6
 800e54a:	9301      	str	r3, [sp, #4]
 800e54c:	7ae3      	ldrb	r3, [r4, #11]
 800e54e:	f001 fd15 	bl	800ff7c <ip4_output_if>
    if (err != ERR_OK) {
 800e552:	2800      	cmp	r0, #0
 800e554:	f040 8114 	bne.w	800e780 <tcp_output+0x39c>
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e558:	f8d5 a00c 	ldr.w	sl, [r5, #12]
    pcb->unsent = seg->next;
 800e55c:	682b      	ldr	r3, [r5, #0]
 800e55e:	66e3      	str	r3, [r4, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800e560:	7d23      	ldrb	r3, [r4, #20]
 800e562:	2b02      	cmp	r3, #2
 800e564:	d003      	beq.n	800e56e <tcp_output+0x18a>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e566:	8b63      	ldrh	r3, [r4, #26]
 800e568:	f023 0303 	bic.w	r3, r3, #3
 800e56c:	8363      	strh	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e56e:	f8da 0004 	ldr.w	r0, [sl, #4]
 800e572:	f7fa ff15 	bl	80093a0 <lwip_htonl>
 800e576:	68eb      	ldr	r3, [r5, #12]
 800e578:	4682      	mov	sl, r0
 800e57a:	f8b5 b008 	ldrh.w	fp, [r5, #8]
 800e57e:	8998      	ldrh	r0, [r3, #12]
 800e580:	f7fa ff0a 	bl	8009398 <lwip_htons>
 800e584:	f010 0303 	ands.w	r3, r0, #3
 800e588:	44da      	add	sl, fp
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e58a:	6d22      	ldr	r2, [r4, #80]	; 0x50
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e58c:	bf18      	it	ne
 800e58e:	2301      	movne	r3, #1
 800e590:	4453      	add	r3, sl
    if (TCP_TCPLEN(seg) > 0) {
 800e592:	f8b5 a008 	ldrh.w	sl, [r5, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e596:	1ad2      	subs	r2, r2, r3
 800e598:	2a00      	cmp	r2, #0
      pcb->snd_nxt = snd_nxt;
 800e59a:	bfb8      	it	lt
 800e59c:	6523      	strlt	r3, [r4, #80]	; 0x50
    if (TCP_TCPLEN(seg) > 0) {
 800e59e:	68eb      	ldr	r3, [r5, #12]
 800e5a0:	8998      	ldrh	r0, [r3, #12]
 800e5a2:	f7fa fef9 	bl	8009398 <lwip_htons>
 800e5a6:	f010 0003 	ands.w	r0, r0, #3
 800e5aa:	bf18      	it	ne
 800e5ac:	2001      	movne	r0, #1
 800e5ae:	eb10 0f0a 	cmn.w	r0, sl
 800e5b2:	d044      	beq.n	800e63e <tcp_output+0x25a>
      seg->next = NULL;
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 800e5b8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d043      	beq.n	800e646 <tcp_output+0x262>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800e5be:	68eb      	ldr	r3, [r5, #12]
 800e5c0:	6858      	ldr	r0, [r3, #4]
 800e5c2:	f7fa feed 	bl	80093a0 <lwip_htonl>
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	4682      	mov	sl, r0
 800e5ca:	6858      	ldr	r0, [r3, #4]
 800e5cc:	f7fa fee8 	bl	80093a0 <lwip_htonl>
 800e5d0:	ebaa 0000 	sub.w	r0, sl, r0
 800e5d4:	2800      	cmp	r0, #0
 800e5d6:	f2c0 80a1 	blt.w	800e71c <tcp_output+0x338>
          useg->next = seg;
 800e5da:	603d      	str	r5, [r7, #0]
 800e5dc:	462f      	mov	r7, r5
    seg = pcb->unsent;
 800e5de:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  while (seg != NULL &&
 800e5e0:	2d00      	cmp	r5, #0
 800e5e2:	f000 80c4 	beq.w	800e76e <tcp_output+0x38a>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800e5e6:	68eb      	ldr	r3, [r5, #12]
 800e5e8:	6858      	ldr	r0, [r3, #4]
 800e5ea:	f7fa fed9 	bl	80093a0 <lwip_htonl>
 800e5ee:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e5f0:	1ac0      	subs	r0, r0, r3
 800e5f2:	892b      	ldrh	r3, [r5, #8]
 800e5f4:	4418      	add	r0, r3
  while (seg != NULL &&
 800e5f6:	42b0      	cmp	r0, r6
 800e5f8:	f200 80bb 	bhi.w	800e772 <tcp_output+0x38e>
    LWIP_ASSERT("RST not expected here!",
 800e5fc:	68eb      	ldr	r3, [r5, #12]
 800e5fe:	8998      	ldrh	r0, [r3, #12]
 800e600:	f7fa feca 	bl	8009398 <lwip_htons>
 800e604:	0742      	lsls	r2, r0, #29
 800e606:	d412      	bmi.n	800e62e <tcp_output+0x24a>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e608:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800e60a:	b14b      	cbz	r3, 800e620 <tcp_output+0x23c>
 800e60c:	8b63      	ldrh	r3, [r4, #26]
 800e60e:	f013 0f44 	tst.w	r3, #68	; 0x44
 800e612:	461a      	mov	r2, r3
 800e614:	d104      	bne.n	800e620 <tcp_output+0x23c>
 800e616:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800e618:	2900      	cmp	r1, #0
 800e61a:	d038      	beq.n	800e68e <tcp_output+0x2aa>
 800e61c:	6808      	ldr	r0, [r1, #0]
 800e61e:	b388      	cbz	r0, 800e684 <tcp_output+0x2a0>
    if (pcb->state != SYN_SENT) {
 800e620:	7d23      	ldrb	r3, [r4, #20]
 800e622:	2b02      	cmp	r3, #2
 800e624:	f47f af35 	bne.w	800e492 <tcp_output+0xae>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800e628:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800e62c:	e73d      	b.n	800e4aa <tcp_output+0xc6>
    LWIP_ASSERT("RST not expected here!",
 800e62e:	4b22      	ldr	r3, [pc, #136]	; (800e6b8 <tcp_output+0x2d4>)
 800e630:	f240 5236 	movw	r2, #1334	; 0x536
 800e634:	4923      	ldr	r1, [pc, #140]	; (800e6c4 <tcp_output+0x2e0>)
 800e636:	4822      	ldr	r0, [pc, #136]	; (800e6c0 <tcp_output+0x2dc>)
 800e638:	f002 ffe2 	bl	8011600 <iprintf>
 800e63c:	e7e4      	b.n	800e608 <tcp_output+0x224>
      tcp_seg_free(seg);
 800e63e:	4628      	mov	r0, r5
 800e640:	f7fc faca 	bl	800abd8 <tcp_seg_free>
 800e644:	e7cb      	b.n	800e5de <tcp_output+0x1fa>
        pcb->unacked = seg;
 800e646:	462f      	mov	r7, r5
 800e648:	6725      	str	r5, [r4, #112]	; 0x70
        useg = seg;
 800e64a:	e7c8      	b.n	800e5de <tcp_output+0x1fa>
    pcb->rttest = tcp_ticks;
 800e64c:	4b1e      	ldr	r3, [pc, #120]	; (800e6c8 <tcp_output+0x2e4>)
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	6363      	str	r3, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800e652:	f8da 0004 	ldr.w	r0, [sl, #4]
 800e656:	f7fa fea3 	bl	80093a0 <lwip_htonl>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e65a:	f8d5 a00c 	ldr.w	sl, [r5, #12]
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800e65e:	63a0      	str	r0, [r4, #56]	; 0x38
 800e660:	e749      	b.n	800e4f6 <tcp_output+0x112>
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800e662:	464a      	mov	r2, r9
 800e664:	4641      	mov	r1, r8
 800e666:	f44f 7006 	mov.w	r0, #536	; 0x218
    opts += 1;
 800e66a:	f10a 0b18 	add.w	fp, sl, #24
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800e66e:	f7fd fac1 	bl	800bbf4 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800e672:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 800e676:	f7fa fe93 	bl	80093a0 <lwip_htonl>
 800e67a:	f8ca 0014 	str.w	r0, [sl, #20]
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800e67e:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800e682:	e72e      	b.n	800e4e2 <tcp_output+0xfe>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e684:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 800e688:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 800e68a:	4584      	cmp	ip, r0
 800e68c:	d2c8      	bcs.n	800e620 <tcp_output+0x23c>
 800e68e:	f8b4 0064 	ldrh.w	r0, [r4, #100]	; 0x64
 800e692:	2800      	cmp	r0, #0
 800e694:	d0c4      	beq.n	800e620 <tcp_output+0x23c>
 800e696:	f8b4 0066 	ldrh.w	r0, [r4, #102]	; 0x66
 800e69a:	2808      	cmp	r0, #8
 800e69c:	d8c0      	bhi.n	800e620 <tcp_output+0x23c>
 800e69e:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 800e6a2:	d1bd      	bne.n	800e620 <tcp_output+0x23c>
  if (pcb->unsent == NULL) {
 800e6a4:	2900      	cmp	r1, #0
 800e6a6:	f47f aedc 	bne.w	800e462 <tcp_output+0x7e>
    pcb->unsent_oversize = 0;
 800e6aa:	2100      	movs	r1, #0
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800e6ac:	461a      	mov	r2, r3
    pcb->unsent_oversize = 0;
 800e6ae:	f8a4 1068 	strh.w	r1, [r4, #104]	; 0x68
 800e6b2:	e6d6      	b.n	800e462 <tcp_output+0x7e>
 800e6b4:	2400e690 	.word	0x2400e690
 800e6b8:	080141ec 	.word	0x080141ec
 800e6bc:	08014848 	.word	0x08014848
 800e6c0:	080124d0 	.word	0x080124d0
 800e6c4:	08014830 	.word	0x08014830
 800e6c8:	2400e65c 	.word	0x2400e65c
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800e6cc:	4b30      	ldr	r3, [pc, #192]	; (800e790 <tcp_output+0x3ac>)
 800e6ce:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800e6d2:	4930      	ldr	r1, [pc, #192]	; (800e794 <tcp_output+0x3b0>)
 800e6d4:	4830      	ldr	r0, [pc, #192]	; (800e798 <tcp_output+0x3b4>)
 800e6d6:	f002 ff93 	bl	8011600 <iprintf>
  if (tcp_input_pcb == pcb) {
 800e6da:	4b30      	ldr	r3, [pc, #192]	; (800e79c <tcp_output+0x3b8>)
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	42a3      	cmp	r3, r4
 800e6e0:	f47f ae90 	bne.w	800e404 <tcp_output+0x20>
    return ERR_OK;
 800e6e4:	2000      	movs	r0, #0
}
 800e6e6:	b005      	add	sp, #20
 800e6e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return tcp_send_empty_ack(pcb);
 800e6ec:	4620      	mov	r0, r4
}
 800e6ee:	b005      	add	sp, #20
 800e6f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return tcp_send_empty_ack(pcb);
 800e6f4:	f7ff be44 	b.w	800e380 <tcp_send_empty_ack>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800e6f8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	f47f aead 	bne.w	800e45a <tcp_output+0x76>
 800e700:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 800e704:	2b00      	cmp	r3, #0
 800e706:	f47f aea8 	bne.w	800e45a <tcp_output+0x76>
      pcb->persist_cnt = 0;
 800e70a:	f44f 7280 	mov.w	r2, #256	; 0x100
      pcb->persist_probe = 0;
 800e70e:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
      pcb->persist_cnt = 0;
 800e712:	f8a4 2098 	strh.w	r2, [r4, #152]	; 0x98
 800e716:	e6a0      	b.n	800e45a <tcp_output+0x76>
  useg = pcb->unacked;
 800e718:	461f      	mov	r7, r3
 800e71a:	e764      	b.n	800e5e6 <tcp_output+0x202>
          while (*cur_seg &&
 800e71c:	6f23      	ldr	r3, [r4, #112]	; 0x70
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800e71e:	f104 0b70 	add.w	fp, r4, #112	; 0x70
          while (*cur_seg &&
 800e722:	b92b      	cbnz	r3, 800e730 <tcp_output+0x34c>
 800e724:	e013      	b.n	800e74e <tcp_output+0x36a>
            cur_seg = &((*cur_seg)->next );
 800e726:	f8db b000 	ldr.w	fp, [fp]
          while (*cur_seg &&
 800e72a:	f8db 3000 	ldr.w	r3, [fp]
 800e72e:	b173      	cbz	r3, 800e74e <tcp_output+0x36a>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e730:	68db      	ldr	r3, [r3, #12]
 800e732:	6858      	ldr	r0, [r3, #4]
 800e734:	f7fa fe34 	bl	80093a0 <lwip_htonl>
 800e738:	68eb      	ldr	r3, [r5, #12]
 800e73a:	4682      	mov	sl, r0
 800e73c:	6858      	ldr	r0, [r3, #4]
 800e73e:	f7fa fe2f 	bl	80093a0 <lwip_htonl>
 800e742:	ebaa 0000 	sub.w	r0, sl, r0
          while (*cur_seg &&
 800e746:	2800      	cmp	r0, #0
 800e748:	dbed      	blt.n	800e726 <tcp_output+0x342>
            cur_seg = &((*cur_seg)->next );
 800e74a:	f8db 3000 	ldr.w	r3, [fp]
          seg->next = (*cur_seg);
 800e74e:	602b      	str	r3, [r5, #0]
          (*cur_seg) = seg;
 800e750:	f8cb 5000 	str.w	r5, [fp]
 800e754:	e743      	b.n	800e5de <tcp_output+0x1fa>
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800e756:	4b0e      	ldr	r3, [pc, #56]	; (800e790 <tcp_output+0x3ac>)
 800e758:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800e75c:	4910      	ldr	r1, [pc, #64]	; (800e7a0 <tcp_output+0x3bc>)
 800e75e:	480e      	ldr	r0, [pc, #56]	; (800e798 <tcp_output+0x3b4>)
 800e760:	f002 ff4e 	bl	8011600 <iprintf>
 800e764:	e645      	b.n	800e3f2 <tcp_output+0xe>
    return netif_get_by_index(pcb->netif_idx);
 800e766:	f7fb fbe9 	bl	8009f3c <netif_get_by_index>
 800e76a:	4680      	mov	r8, r0
 800e76c:	e65a      	b.n	800e424 <tcp_output+0x40>
 800e76e:	8b63      	ldrh	r3, [r4, #26]
 800e770:	e79b      	b.n	800e6aa <tcp_output+0x2c6>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800e772:	8b63      	ldrh	r3, [r4, #26]
  if (pcb->unsent == NULL) {
 800e774:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800e776:	461a      	mov	r2, r3
  if (pcb->unsent == NULL) {
 800e778:	2900      	cmp	r1, #0
 800e77a:	f47f ae72 	bne.w	800e462 <tcp_output+0x7e>
 800e77e:	e794      	b.n	800e6aa <tcp_output+0x2c6>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e780:	8b63      	ldrh	r3, [r4, #26]
 800e782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e786:	8363      	strh	r3, [r4, #26]
      return err;
 800e788:	e66f      	b.n	800e46a <tcp_output+0x86>
    return ERR_RTE;
 800e78a:	f06f 0003 	mvn.w	r0, #3
 800e78e:	e66c      	b.n	800e46a <tcp_output+0x86>
 800e790:	080141ec 	.word	0x080141ec
 800e794:	08014808 	.word	0x08014808
 800e798:	080124d0 	.word	0x080124d0
 800e79c:	2400e690 	.word	0x2400e690
 800e7a0:	080147f0 	.word	0x080147f0

0800e7a4 <tcp_rexmit_rto_commit>:
{
 800e7a4:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800e7a6:	4604      	mov	r4, r0
 800e7a8:	b158      	cbz	r0, 800e7c2 <tcp_rexmit_rto_commit+0x1e>
  if (pcb->nrtx < 0xFF) {
 800e7aa:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800e7ae:	2bff      	cmp	r3, #255	; 0xff
 800e7b0:	d002      	beq.n	800e7b8 <tcp_rexmit_rto_commit+0x14>
    ++pcb->nrtx;
 800e7b2:	3301      	adds	r3, #1
 800e7b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 800e7b8:	4620      	mov	r0, r4
}
 800e7ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 800e7be:	f7ff be11 	b.w	800e3e4 <tcp_output>
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800e7c2:	4b04      	ldr	r3, [pc, #16]	; (800e7d4 <tcp_rexmit_rto_commit+0x30>)
 800e7c4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800e7c8:	4903      	ldr	r1, [pc, #12]	; (800e7d8 <tcp_rexmit_rto_commit+0x34>)
 800e7ca:	4804      	ldr	r0, [pc, #16]	; (800e7dc <tcp_rexmit_rto_commit+0x38>)
 800e7cc:	f002 ff18 	bl	8011600 <iprintf>
 800e7d0:	e7eb      	b.n	800e7aa <tcp_rexmit_rto_commit+0x6>
 800e7d2:	bf00      	nop
 800e7d4:	080141ec 	.word	0x080141ec
 800e7d8:	0801485c 	.word	0x0801485c
 800e7dc:	080124d0 	.word	0x080124d0

0800e7e0 <tcp_rexmit_rto>:
{
 800e7e0:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800e7e2:	4604      	mov	r4, r0
 800e7e4:	b118      	cbz	r0, 800e7ee <tcp_rexmit_rto+0xe>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800e7e6:	f7ff fcbf 	bl	800e168 <tcp_rexmit_rto_prepare>
 800e7ea:	b198      	cbz	r0, 800e814 <tcp_rexmit_rto+0x34>
}
 800e7ec:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800e7ee:	4b0f      	ldr	r3, [pc, #60]	; (800e82c <tcp_rexmit_rto+0x4c>)
 800e7f0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800e7f4:	490e      	ldr	r1, [pc, #56]	; (800e830 <tcp_rexmit_rto+0x50>)
 800e7f6:	480f      	ldr	r0, [pc, #60]	; (800e834 <tcp_rexmit_rto+0x54>)
 800e7f8:	f002 ff02 	bl	8011600 <iprintf>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800e7fc:	4620      	mov	r0, r4
 800e7fe:	f7ff fcb3 	bl	800e168 <tcp_rexmit_rto_prepare>
 800e802:	2800      	cmp	r0, #0
 800e804:	d1f2      	bne.n	800e7ec <tcp_rexmit_rto+0xc>
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800e806:	4b09      	ldr	r3, [pc, #36]	; (800e82c <tcp_rexmit_rto+0x4c>)
 800e808:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800e80c:	490a      	ldr	r1, [pc, #40]	; (800e838 <tcp_rexmit_rto+0x58>)
 800e80e:	4809      	ldr	r0, [pc, #36]	; (800e834 <tcp_rexmit_rto+0x54>)
 800e810:	f002 fef6 	bl	8011600 <iprintf>
  if (pcb->nrtx < 0xFF) {
 800e814:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800e818:	2bff      	cmp	r3, #255	; 0xff
 800e81a:	d002      	beq.n	800e822 <tcp_rexmit_rto+0x42>
    ++pcb->nrtx;
 800e81c:	3301      	adds	r3, #1
 800e81e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 800e822:	4620      	mov	r0, r4
}
 800e824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 800e828:	f7ff bddc 	b.w	800e3e4 <tcp_output>
 800e82c:	080141ec 	.word	0x080141ec
 800e830:	08014880 	.word	0x08014880
 800e834:	080124d0 	.word	0x080124d0
 800e838:	0801485c 	.word	0x0801485c

0800e83c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800e83c:	b510      	push	{r4, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800e83e:	4604      	mov	r4, r0
 800e840:	b188      	cbz	r0, 800e866 <tcp_keepalive+0x2a>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800e842:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800e844:	3801      	subs	r0, #1
 800e846:	f7fa fdab 	bl	80093a0 <lwip_htonl>
 800e84a:	2100      	movs	r1, #0
 800e84c:	4602      	mov	r2, r0
 800e84e:	4620      	mov	r0, r4
 800e850:	f7fe ff44 	bl	800d6dc <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800e854:	4601      	mov	r1, r0
 800e856:	b170      	cbz	r0, 800e876 <tcp_keepalive+0x3a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e858:	1d23      	adds	r3, r4, #4
 800e85a:	4622      	mov	r2, r4
 800e85c:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800e85e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e862:	f7fe bf63 	b.w	800d72c <tcp_output_control_segment>
  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800e866:	4b05      	ldr	r3, [pc, #20]	; (800e87c <tcp_keepalive+0x40>)
 800e868:	f640 0224 	movw	r2, #2084	; 0x824
 800e86c:	4904      	ldr	r1, [pc, #16]	; (800e880 <tcp_keepalive+0x44>)
 800e86e:	4805      	ldr	r0, [pc, #20]	; (800e884 <tcp_keepalive+0x48>)
 800e870:	f002 fec6 	bl	8011600 <iprintf>
 800e874:	e7e5      	b.n	800e842 <tcp_keepalive+0x6>
}
 800e876:	f04f 30ff 	mov.w	r0, #4294967295
 800e87a:	bd10      	pop	{r4, pc}
 800e87c:	080141ec 	.word	0x080141ec
 800e880:	0801489c 	.word	0x0801489c
 800e884:	080124d0 	.word	0x080124d0

0800e888 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800e888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800e88c:	4604      	mov	r4, r0
 800e88e:	2800      	cmp	r0, #0
 800e890:	d051      	beq.n	800e936 <tcp_zero_window_probe+0xae>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800e892:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 800e894:	2d00      	cmp	r5, #0
 800e896:	d04b      	beq.n	800e930 <tcp_zero_window_probe+0xa8>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800e898:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 800e89c:	2bff      	cmp	r3, #255	; 0xff
 800e89e:	d002      	beq.n	800e8a6 <tcp_zero_window_probe+0x1e>
    ++pcb->persist_probe;
 800e8a0:	3301      	adds	r3, #1
 800e8a2:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800e8a6:	68eb      	ldr	r3, [r5, #12]
 800e8a8:	8998      	ldrh	r0, [r3, #12]
 800e8aa:	f7fa fd75 	bl	8009398 <lwip_htons>
 800e8ae:	07c3      	lsls	r3, r0, #31
 800e8b0:	d527      	bpl.n	800e902 <tcp_zero_window_probe+0x7a>
 800e8b2:	8929      	ldrh	r1, [r5, #8]
 800e8b4:	bb29      	cbnz	r1, 800e902 <tcp_zero_window_probe+0x7a>
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800e8b6:	68eb      	ldr	r3, [r5, #12]
 800e8b8:	4620      	mov	r0, r4
 800e8ba:	685a      	ldr	r2, [r3, #4]
 800e8bc:	f7fe ff0e 	bl	800d6dc <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800e8c0:	4606      	mov	r6, r0
 800e8c2:	b388      	cbz	r0, 800e928 <tcp_zero_window_probe+0xa0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800e8c4:	f8d6 8004 	ldr.w	r8, [r6, #4]

  if (is_fin) {
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800e8c8:	2011      	movs	r0, #17
 800e8ca:	f9b8 700c 	ldrsh.w	r7, [r8, #12]
 800e8ce:	f7fa fd63 	bl	8009398 <lwip_htons>
 800e8d2:	f427 577c 	bic.w	r7, r7, #16128	; 0x3f00
 800e8d6:	4338      	orrs	r0, r7
 800e8d8:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800e8dc:	68eb      	ldr	r3, [r5, #12]
 800e8de:	6858      	ldr	r0, [r3, #4]
 800e8e0:	f7fa fd5e 	bl	80093a0 <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e8e4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800e8e6:	3001      	adds	r0, #1
    pcb->snd_nxt = snd_nxt;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e8e8:	4622      	mov	r2, r4
 800e8ea:	4631      	mov	r1, r6
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e8ec:	1a1b      	subs	r3, r3, r0
 800e8ee:	2b00      	cmp	r3, #0
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e8f0:	f104 0304 	add.w	r3, r4, #4
    pcb->snd_nxt = snd_nxt;
 800e8f4:	bfb8      	it	lt
 800e8f6:	6520      	strlt	r0, [r4, #80]	; 0x50
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e8f8:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800e8fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e8fe:	f7fe bf15 	b.w	800d72c <tcp_output_control_segment>
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800e902:	68eb      	ldr	r3, [r5, #12]
 800e904:	2101      	movs	r1, #1
 800e906:	4620      	mov	r0, r4
 800e908:	685a      	ldr	r2, [r3, #4]
 800e90a:	f7fe fee7 	bl	800d6dc <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800e90e:	4606      	mov	r6, r0
 800e910:	b150      	cbz	r0, 800e928 <tcp_zero_window_probe+0xa0>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800e912:	6868      	ldr	r0, [r5, #4]
 800e914:	892a      	ldrh	r2, [r5, #8]
 800e916:	8903      	ldrh	r3, [r0, #8]
    char *d = ((char *)p->payload + TCP_HLEN);
 800e918:	6871      	ldr	r1, [r6, #4]
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800e91a:	1a9b      	subs	r3, r3, r2
 800e91c:	2201      	movs	r2, #1
 800e91e:	3114      	adds	r1, #20
 800e920:	b29b      	uxth	r3, r3
 800e922:	f7fb fee9 	bl	800a6f8 <pbuf_copy_partial>
 800e926:	e7d9      	b.n	800e8dc <tcp_zero_window_probe+0x54>
    return ERR_MEM;
 800e928:	f04f 30ff 	mov.w	r0, #4294967295
}
 800e92c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_OK;
 800e930:	4628      	mov	r0, r5
}
 800e932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800e936:	4b04      	ldr	r3, [pc, #16]	; (800e948 <tcp_zero_window_probe+0xc0>)
 800e938:	f640 024f 	movw	r2, #2127	; 0x84f
 800e93c:	4903      	ldr	r1, [pc, #12]	; (800e94c <tcp_zero_window_probe+0xc4>)
 800e93e:	4804      	ldr	r0, [pc, #16]	; (800e950 <tcp_zero_window_probe+0xc8>)
 800e940:	f002 fe5e 	bl	8011600 <iprintf>
 800e944:	e7a5      	b.n	800e892 <tcp_zero_window_probe+0xa>
 800e946:	bf00      	nop
 800e948:	080141ec 	.word	0x080141ec
 800e94c:	080148b8 	.word	0x080148b8
 800e950:	080124d0 	.word	0x080124d0

0800e954 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800e954:	b570      	push	{r4, r5, r6, lr}
 800e956:	4604      	mov	r4, r0
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800e958:	200a      	movs	r0, #10
{
 800e95a:	460e      	mov	r6, r1
 800e95c:	4615      	mov	r5, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800e95e:	f7fb f8c9 	bl	8009af4 <memp_malloc>
  if (timeout == NULL) {
 800e962:	b190      	cbz	r0, 800e98a <sys_timeout_abs+0x36>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }

  timeout->next = NULL;
 800e964:	2300      	movs	r3, #0
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800e966:	490d      	ldr	r1, [pc, #52]	; (800e99c <sys_timeout_abs+0x48>)
  timeout->h = handler;
 800e968:	6086      	str	r6, [r0, #8]
  timeout->arg = arg;
 800e96a:	60c5      	str	r5, [r0, #12]
  timeout->time = abs_time;
 800e96c:	e9c0 3400 	strd	r3, r4, [r0]
  if (next_timeout == NULL) {
 800e970:	680b      	ldr	r3, [r1, #0]
 800e972:	b91b      	cbnz	r3, 800e97c <sys_timeout_abs+0x28>
 800e974:	e007      	b.n	800e986 <sys_timeout_abs+0x32>
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
    timeout->next = next_timeout;
    next_timeout = timeout;
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800e976:	4619      	mov	r1, r3
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	b11b      	cbz	r3, 800e984 <sys_timeout_abs+0x30>
 800e97c:	685a      	ldr	r2, [r3, #4]
 800e97e:	1aa2      	subs	r2, r4, r2
 800e980:	2a00      	cmp	r2, #0
 800e982:	daf8      	bge.n	800e976 <sys_timeout_abs+0x22>
        timeout->next = t->next;
 800e984:	6003      	str	r3, [r0, #0]
        t->next = timeout;
 800e986:	6008      	str	r0, [r1, #0]
        break;
      }
    }
  }
}
 800e988:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800e98a:	4b05      	ldr	r3, [pc, #20]	; (800e9a0 <sys_timeout_abs+0x4c>)
 800e98c:	22be      	movs	r2, #190	; 0xbe
 800e98e:	4905      	ldr	r1, [pc, #20]	; (800e9a4 <sys_timeout_abs+0x50>)
 800e990:	4805      	ldr	r0, [pc, #20]	; (800e9a8 <sys_timeout_abs+0x54>)
}
 800e992:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800e996:	f002 be33 	b.w	8011600 <iprintf>
 800e99a:	bf00      	nop
 800e99c:	2400e6ac 	.word	0x2400e6ac
 800e9a0:	080148dc 	.word	0x080148dc
 800e9a4:	08014910 	.word	0x08014910
 800e9a8:	080124d0 	.word	0x080124d0

0800e9ac <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800e9ac:	b538      	push	{r3, r4, r5, lr}
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800e9ae:	6843      	ldr	r3, [r0, #4]
{
 800e9b0:	4604      	mov	r4, r0
  cyclic->handler();
 800e9b2:	4798      	blx	r3

  now = sys_now();
 800e9b4:	f7f5 fc42 	bl	800423c <sys_now>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800e9b8:	4b09      	ldr	r3, [pc, #36]	; (800e9e0 <lwip_cyclic_timer+0x34>)
 800e9ba:	6825      	ldr	r5, [r4, #0]
 800e9bc:	681b      	ldr	r3, [r3, #0]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800e9be:	4909      	ldr	r1, [pc, #36]	; (800e9e4 <lwip_cyclic_timer+0x38>)
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800e9c0:	442b      	add	r3, r5
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800e9c2:	1a1a      	subs	r2, r3, r0
 800e9c4:	2a00      	cmp	r2, #0
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800e9c6:	4622      	mov	r2, r4
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800e9c8:	da04      	bge.n	800e9d4 <lwip_cyclic_timer+0x28>
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800e9ca:	4428      	add	r0, r5
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800e9cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800e9d0:	f7ff bfc0 	b.w	800e954 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800e9d4:	4618      	mov	r0, r3
}
 800e9d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800e9da:	f7ff bfbb 	b.w	800e954 <sys_timeout_abs>
 800e9de:	bf00      	nop
 800e9e0:	2400e6a8 	.word	0x2400e6a8
 800e9e4:	0800e9ad 	.word	0x0800e9ad

0800e9e8 <tcpip_tcp_timer>:
{
 800e9e8:	b508      	push	{r3, lr}
  tcp_tmr();
 800e9ea:	f7fd f8d5 	bl	800bb98 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800e9ee:	4b09      	ldr	r3, [pc, #36]	; (800ea14 <tcpip_tcp_timer+0x2c>)
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	b143      	cbz	r3, 800ea06 <tcpip_tcp_timer+0x1e>

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800e9f4:	f7f5 fc22 	bl	800423c <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	4907      	ldr	r1, [pc, #28]	; (800ea18 <tcpip_tcp_timer+0x30>)
 800e9fc:	30fa      	adds	r0, #250	; 0xfa
}
 800e9fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800ea02:	f7ff bfa7 	b.w	800e954 <sys_timeout_abs>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800ea06:	4b05      	ldr	r3, [pc, #20]	; (800ea1c <tcpip_tcp_timer+0x34>)
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d1f2      	bne.n	800e9f4 <tcpip_tcp_timer+0xc>
    tcpip_tcp_timer_active = 0;
 800ea0e:	4a04      	ldr	r2, [pc, #16]	; (800ea20 <tcpip_tcp_timer+0x38>)
 800ea10:	6013      	str	r3, [r2, #0]
}
 800ea12:	bd08      	pop	{r3, pc}
 800ea14:	2400e64c 	.word	0x2400e64c
 800ea18:	0800e9e9 	.word	0x0800e9e9
 800ea1c:	2400e664 	.word	0x2400e664
 800ea20:	2400e6b0 	.word	0x2400e6b0

0800ea24 <tcp_timer_needed>:
{
 800ea24:	b508      	push	{r3, lr}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800ea26:	4b0b      	ldr	r3, [pc, #44]	; (800ea54 <tcp_timer_needed+0x30>)
 800ea28:	681a      	ldr	r2, [r3, #0]
 800ea2a:	b98a      	cbnz	r2, 800ea50 <tcp_timer_needed+0x2c>
 800ea2c:	4a0a      	ldr	r2, [pc, #40]	; (800ea58 <tcp_timer_needed+0x34>)
 800ea2e:	6812      	ldr	r2, [r2, #0]
 800ea30:	b152      	cbz	r2, 800ea48 <tcp_timer_needed+0x24>
    tcpip_tcp_timer_active = 1;
 800ea32:	2201      	movs	r2, #1
 800ea34:	601a      	str	r2, [r3, #0]
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800ea36:	f7f5 fc01 	bl	800423c <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 800ea3a:	2200      	movs	r2, #0
 800ea3c:	4907      	ldr	r1, [pc, #28]	; (800ea5c <tcp_timer_needed+0x38>)
 800ea3e:	30fa      	adds	r0, #250	; 0xfa
}
 800ea40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800ea44:	f7ff bf86 	b.w	800e954 <sys_timeout_abs>
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800ea48:	4a05      	ldr	r2, [pc, #20]	; (800ea60 <tcp_timer_needed+0x3c>)
 800ea4a:	6812      	ldr	r2, [r2, #0]
 800ea4c:	2a00      	cmp	r2, #0
 800ea4e:	d1f0      	bne.n	800ea32 <tcp_timer_needed+0xe>
}
 800ea50:	bd08      	pop	{r3, pc}
 800ea52:	bf00      	nop
 800ea54:	2400e6b0 	.word	0x2400e6b0
 800ea58:	2400e64c 	.word	0x2400e64c
 800ea5c:	0800e9e9 	.word	0x0800e9e9
 800ea60:	2400e664 	.word	0x2400e664

0800ea64 <sys_timeouts_init>:
{
 800ea64:	b510      	push	{r4, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800ea66:	4c0a      	ldr	r4, [pc, #40]	; (800ea90 <sys_timeouts_init+0x2c>)
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800ea68:	f7f5 fbe8 	bl	800423c <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 800ea6c:	4909      	ldr	r1, [pc, #36]	; (800ea94 <sys_timeouts_init+0x30>)
 800ea6e:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 800ea72:	f104 0208 	add.w	r2, r4, #8
 800ea76:	f7ff ff6d 	bl	800e954 <sys_timeout_abs>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800ea7a:	f7f5 fbdf 	bl	800423c <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 800ea7e:	f104 0210 	add.w	r2, r4, #16
 800ea82:	4904      	ldr	r1, [pc, #16]	; (800ea94 <sys_timeouts_init+0x30>)
 800ea84:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
}
 800ea88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800ea8c:	f7ff bf62 	b.w	800e954 <sys_timeout_abs>
 800ea90:	08014950 	.word	0x08014950
 800ea94:	0800e9ad 	.word	0x0800e9ad

0800ea98 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800ea98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800ea9c:	f7f5 fbce 	bl	800423c <sys_now>
 800eaa0:	4c0f      	ldr	r4, [pc, #60]	; (800eae0 <sys_check_timeouts+0x48>)

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
    handler = tmptimeout->h;
    arg = tmptimeout->arg;
    current_timeout_due_time = tmptimeout->time;
 800eaa2:	f8df 8040 	ldr.w	r8, [pc, #64]	; 800eae4 <sys_check_timeouts+0x4c>
  now = sys_now();
 800eaa6:	4607      	mov	r7, r0
 800eaa8:	e00f      	b.n	800eaca <sys_check_timeouts+0x32>
    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800eaaa:	685a      	ldr	r2, [r3, #4]
 800eaac:	eba7 0c02 	sub.w	ip, r7, r2
 800eab0:	f1bc 0f00 	cmp.w	ip, #0
 800eab4:	db0e      	blt.n	800ead4 <sys_check_timeouts+0x3c>
    handler = tmptimeout->h;
 800eab6:	689d      	ldr	r5, [r3, #8]
    next_timeout = tmptimeout->next;
 800eab8:	681e      	ldr	r6, [r3, #0]
    arg = tmptimeout->arg;
 800eaba:	f8d3 900c 	ldr.w	r9, [r3, #12]
    current_timeout_due_time = tmptimeout->time;
 800eabe:	f8c8 2000 	str.w	r2, [r8]
    next_timeout = tmptimeout->next;
 800eac2:	6026      	str	r6, [r4, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800eac4:	f7fb f85c 	bl	8009b80 <memp_free>
    if (handler != NULL) {
 800eac8:	b935      	cbnz	r5, 800ead8 <sys_check_timeouts+0x40>
    tmptimeout = next_timeout;
 800eaca:	6823      	ldr	r3, [r4, #0]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800eacc:	200a      	movs	r0, #10
 800eace:	4619      	mov	r1, r3
    if (tmptimeout == NULL) {
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d1ea      	bne.n	800eaaa <sys_check_timeouts+0x12>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800ead4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      handler(arg);
 800ead8:	4648      	mov	r0, r9
 800eada:	47a8      	blx	r5
 800eadc:	e7f5      	b.n	800eaca <sys_check_timeouts+0x32>
 800eade:	bf00      	nop
 800eae0:	2400e6ac 	.word	0x2400e6ac
 800eae4:	2400e6a8 	.word	0x2400e6a8

0800eae8 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800eae8:	b510      	push	{r4, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800eaea:	4c07      	ldr	r4, [pc, #28]	; (800eb08 <sys_timeouts_sleeptime+0x20>)
 800eaec:	6823      	ldr	r3, [r4, #0]
 800eaee:	b13b      	cbz	r3, 800eb00 <sys_timeouts_sleeptime+0x18>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
 800eaf0:	f7f5 fba4 	bl	800423c <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800eaf4:	6823      	ldr	r3, [r4, #0]
 800eaf6:	685b      	ldr	r3, [r3, #4]
    return 0;
 800eaf8:	1a18      	subs	r0, r3, r0
 800eafa:	bf48      	it	mi
 800eafc:	2000      	movmi	r0, #0
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
    return ret;
  }
}
 800eafe:	bd10      	pop	{r4, pc}
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800eb00:	f04f 30ff 	mov.w	r0, #4294967295
}
 800eb04:	bd10      	pop	{r4, pc}
 800eb06:	bf00      	nop
 800eb08:	2400e6ac 	.word	0x2400e6ac

0800eb0c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800eb0c:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800eb0e:	f002 fc65 	bl	80113dc <rand>
 800eb12:	4b02      	ldr	r3, [pc, #8]	; (800eb1c <udp_init+0x10>)
 800eb14:	4a02      	ldr	r2, [pc, #8]	; (800eb20 <udp_init+0x14>)
 800eb16:	4303      	orrs	r3, r0
 800eb18:	8013      	strh	r3, [r2, #0]
#endif /* LWIP_RAND */
}
 800eb1a:	bd08      	pop	{r3, pc}
 800eb1c:	ffffc000 	.word	0xffffc000
 800eb20:	2400002e 	.word	0x2400002e

0800eb24 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800eb24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800eb28:	4680      	mov	r8, r0
{
 800eb2a:	b085      	sub	sp, #20
 800eb2c:	460f      	mov	r7, r1
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800eb2e:	2800      	cmp	r0, #0
 800eb30:	f000 80af 	beq.w	800ec92 <udp_input+0x16e>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800eb34:	2f00      	cmp	r7, #0
 800eb36:	f000 80b5 	beq.w	800eca4 <udp_input+0x180>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800eb3a:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800eb3e:	2b07      	cmp	r3, #7
 800eb40:	f240 8091 	bls.w	800ec66 <udp_input+0x142>
  }

  udphdr = (struct udp_hdr *)p->payload;

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800eb44:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 800ed1c <udp_input+0x1f8>
  udphdr = (struct udp_hdr *)p->payload;
 800eb48:	f8d8 4004 	ldr.w	r4, [r8, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800eb4c:	f8d9 1000 	ldr.w	r1, [r9]
 800eb50:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800eb54:	f001 fa24 	bl	800ffa0 <ip4_addr_isbroadcast_u32>
 800eb58:	4682      	mov	sl, r0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800eb5a:	8820      	ldrh	r0, [r4, #0]
 800eb5c:	f7fa fc1c 	bl	8009398 <lwip_htons>
 800eb60:	4603      	mov	r3, r0
  dest = lwip_ntohs(udphdr->dest);
 800eb62:	8860      	ldrh	r0, [r4, #2]
  src = lwip_ntohs(udphdr->src);
 800eb64:	9303      	str	r3, [sp, #12]
  dest = lwip_ntohs(udphdr->dest);
 800eb66:	f7fa fc17 	bl	8009398 <lwip_htons>
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800eb6a:	4b64      	ldr	r3, [pc, #400]	; (800ecfc <udp_input+0x1d8>)
  dest = lwip_ntohs(udphdr->dest);
 800eb6c:	4605      	mov	r5, r0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800eb6e:	681c      	ldr	r4, [r3, #0]
 800eb70:	2c00      	cmp	r4, #0
 800eb72:	d064      	beq.n	800ec3e <udp_input+0x11a>
  uncon_pcb = NULL;
 800eb74:	f04f 0b00 	mov.w	fp, #0
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800eb78:	f8df c190 	ldr.w	ip, [pc, #400]	; 800ed0c <udp_input+0x1e8>
 800eb7c:	4960      	ldr	r1, [pc, #384]	; (800ed00 <udp_input+0x1dc>)
  prev = NULL;
 800eb7e:	465e      	mov	r6, fp
 800eb80:	e004      	b.n	800eb8c <udp_input+0x68>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800eb82:	68e2      	ldr	r2, [r4, #12]
 800eb84:	4626      	mov	r6, r4
 800eb86:	2a00      	cmp	r2, #0
 800eb88:	d056      	beq.n	800ec38 <udp_input+0x114>
 800eb8a:	4614      	mov	r4, r2
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800eb8c:	8a62      	ldrh	r2, [r4, #18]
 800eb8e:	42aa      	cmp	r2, r5
 800eb90:	d1f7      	bne.n	800eb82 <udp_input+0x5e>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800eb92:	2f00      	cmp	r7, #0
 800eb94:	d06d      	beq.n	800ec72 <udp_input+0x14e>
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800eb96:	7a20      	ldrb	r0, [r4, #8]
 800eb98:	b138      	cbz	r0, 800ebaa <udp_input+0x86>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800eb9a:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800eb9e:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800eba2:	3201      	adds	r2, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800eba4:	b2d2      	uxtb	r2, r2
 800eba6:	4290      	cmp	r0, r2
 800eba8:	d1eb      	bne.n	800eb82 <udp_input+0x5e>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ebaa:	6822      	ldr	r2, [r4, #0]
    if (broadcast != 0) {
 800ebac:	f1ba 0f00 	cmp.w	sl, #0
 800ebb0:	d038      	beq.n	800ec24 <udp_input+0x100>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ebb2:	b13a      	cbz	r2, 800ebc4 <udp_input+0xa0>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ebb4:	f8d9 0014 	ldr.w	r0, [r9, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ebb8:	1c43      	adds	r3, r0, #1
 800ebba:	d003      	beq.n	800ebc4 <udp_input+0xa0>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800ebbc:	4050      	eors	r0, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ebbe:	68bb      	ldr	r3, [r7, #8]
 800ebc0:	4218      	tst	r0, r3
 800ebc2:	d1de      	bne.n	800eb82 <udp_input+0x5e>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800ebc4:	7c20      	ldrb	r0, [r4, #16]
 800ebc6:	0743      	lsls	r3, r0, #29
 800ebc8:	d409      	bmi.n	800ebde <udp_input+0xba>
        if (uncon_pcb == NULL) {
 800ebca:	f1bb 0f00 	cmp.w	fp, #0
 800ebce:	d059      	beq.n	800ec84 <udp_input+0x160>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800ebd0:	f1ba 0f00 	cmp.w	sl, #0
 800ebd4:	d003      	beq.n	800ebde <udp_input+0xba>
 800ebd6:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800ebda:	3001      	adds	r0, #1
 800ebdc:	d069      	beq.n	800ecb2 <udp_input+0x18e>
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800ebde:	8aa2      	ldrh	r2, [r4, #20]
 800ebe0:	9803      	ldr	r0, [sp, #12]
 800ebe2:	4282      	cmp	r2, r0
 800ebe4:	d1cd      	bne.n	800eb82 <udp_input+0x5e>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ebe6:	6862      	ldr	r2, [r4, #4]
      if ((pcb->remote_port == src) &&
 800ebe8:	b11a      	cbz	r2, 800ebf2 <udp_input+0xce>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ebea:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ebee:	4282      	cmp	r2, r0
 800ebf0:	d1c7      	bne.n	800eb82 <udp_input+0x5e>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
        /* the first fully matching PCB */
        if (prev != NULL) {
 800ebf2:	b12e      	cbz	r6, 800ec00 <udp_input+0xdc>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800ebf4:	68e3      	ldr	r3, [r4, #12]
          pcb->next = udp_pcbs;
 800ebf6:	4a41      	ldr	r2, [pc, #260]	; (800ecfc <udp_input+0x1d8>)
          prev->next = pcb->next;
 800ebf8:	60f3      	str	r3, [r6, #12]
          pcb->next = udp_pcbs;
 800ebfa:	6813      	ldr	r3, [r2, #0]
          udp_pcbs = pcb;
 800ebfc:	6014      	str	r4, [r2, #0]
          pcb->next = udp_pcbs;
 800ebfe:	60e3      	str	r3, [r4, #12]
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800ec00:	2108      	movs	r1, #8
 800ec02:	4640      	mov	r0, r8
 800ec04:	f7fb fade 	bl	800a1c4 <pbuf_remove_header>
 800ec08:	2800      	cmp	r0, #0
 800ec0a:	d15b      	bne.n	800ecc4 <udp_input+0x1a0>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800ec0c:	69a5      	ldr	r5, [r4, #24]
 800ec0e:	b355      	cbz	r5, 800ec66 <udp_input+0x142>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800ec10:	9b03      	ldr	r3, [sp, #12]
 800ec12:	4642      	mov	r2, r8
 800ec14:	69e0      	ldr	r0, [r4, #28]
 800ec16:	4621      	mov	r1, r4
 800ec18:	9300      	str	r3, [sp, #0]
 800ec1a:	4b3a      	ldr	r3, [pc, #232]	; (800ed04 <udp_input+0x1e0>)
 800ec1c:	47a8      	blx	r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800ec1e:	b005      	add	sp, #20
 800ec20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ec24:	2a00      	cmp	r2, #0
 800ec26:	d0cd      	beq.n	800ebc4 <udp_input+0xa0>
 800ec28:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800ec2c:	4282      	cmp	r2, r0
 800ec2e:	d0c9      	beq.n	800ebc4 <udp_input+0xa0>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ec30:	68e2      	ldr	r2, [r4, #12]
 800ec32:	4626      	mov	r6, r4
 800ec34:	2a00      	cmp	r2, #0
 800ec36:	d1a8      	bne.n	800eb8a <udp_input+0x66>
  if (pcb != NULL) {
 800ec38:	f1bb 0f00 	cmp.w	fp, #0
 800ec3c:	d15b      	bne.n	800ecf6 <udp_input+0x1d2>
  if (for_us) {
 800ec3e:	687a      	ldr	r2, [r7, #4]
 800ec40:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800ec44:	429a      	cmp	r2, r3
 800ec46:	d10e      	bne.n	800ec66 <udp_input+0x142>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800ec48:	2108      	movs	r1, #8
 800ec4a:	4640      	mov	r0, r8
 800ec4c:	f7fb faba 	bl	800a1c4 <pbuf_remove_header>
 800ec50:	2800      	cmp	r0, #0
 800ec52:	d137      	bne.n	800ecc4 <udp_input+0x1a0>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800ec54:	f1ba 0f00 	cmp.w	sl, #0
 800ec58:	d105      	bne.n	800ec66 <udp_input+0x142>
 800ec5a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800ec5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ec62:	2be0      	cmp	r3, #224	; 0xe0
 800ec64:	d13b      	bne.n	800ecde <udp_input+0x1ba>
      pbuf_free(p);
 800ec66:	4640      	mov	r0, r8
}
 800ec68:	b005      	add	sp, #20
 800ec6a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 800ec6e:	f7fb bb15 	b.w	800a29c <pbuf_free>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800ec72:	4663      	mov	r3, ip
 800ec74:	2288      	movs	r2, #136	; 0x88
 800ec76:	4824      	ldr	r0, [pc, #144]	; (800ed08 <udp_input+0x1e4>)
 800ec78:	f002 fcc2 	bl	8011600 <iprintf>
 800ec7c:	f8df c08c 	ldr.w	ip, [pc, #140]	; 800ed0c <udp_input+0x1e8>
 800ec80:	491f      	ldr	r1, [pc, #124]	; (800ed00 <udp_input+0x1dc>)
 800ec82:	e788      	b.n	800eb96 <udp_input+0x72>
      if ((pcb->remote_port == src) &&
 800ec84:	8aa2      	ldrh	r2, [r4, #20]
 800ec86:	46a3      	mov	fp, r4
 800ec88:	9803      	ldr	r0, [sp, #12]
 800ec8a:	4282      	cmp	r2, r0
 800ec8c:	f47f af79 	bne.w	800eb82 <udp_input+0x5e>
 800ec90:	e7a9      	b.n	800ebe6 <udp_input+0xc2>
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800ec92:	4b1e      	ldr	r3, [pc, #120]	; (800ed0c <udp_input+0x1e8>)
 800ec94:	22cf      	movs	r2, #207	; 0xcf
 800ec96:	491e      	ldr	r1, [pc, #120]	; (800ed10 <udp_input+0x1ec>)
 800ec98:	481b      	ldr	r0, [pc, #108]	; (800ed08 <udp_input+0x1e4>)
 800ec9a:	f002 fcb1 	bl	8011600 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800ec9e:	2f00      	cmp	r7, #0
 800eca0:	f47f af4b 	bne.w	800eb3a <udp_input+0x16>
 800eca4:	4b19      	ldr	r3, [pc, #100]	; (800ed0c <udp_input+0x1e8>)
 800eca6:	22d0      	movs	r2, #208	; 0xd0
 800eca8:	491a      	ldr	r1, [pc, #104]	; (800ed14 <udp_input+0x1f0>)
 800ecaa:	4817      	ldr	r0, [pc, #92]	; (800ed08 <udp_input+0x1e4>)
 800ecac:	f002 fca8 	bl	8011600 <iprintf>
 800ecb0:	e743      	b.n	800eb3a <udp_input+0x16>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800ecb2:	6878      	ldr	r0, [r7, #4]
 800ecb4:	f8db 3000 	ldr.w	r3, [fp]
 800ecb8:	4283      	cmp	r3, r0
 800ecba:	d090      	beq.n	800ebde <udp_input+0xba>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800ecbc:	4290      	cmp	r0, r2
 800ecbe:	bf08      	it	eq
 800ecc0:	46a3      	moveq	fp, r4
 800ecc2:	e78c      	b.n	800ebde <udp_input+0xba>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800ecc4:	4b11      	ldr	r3, [pc, #68]	; (800ed0c <udp_input+0x1e8>)
 800ecc6:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800ecca:	4913      	ldr	r1, [pc, #76]	; (800ed18 <udp_input+0x1f4>)
 800eccc:	480e      	ldr	r0, [pc, #56]	; (800ed08 <udp_input+0x1e4>)
 800ecce:	f002 fc97 	bl	8011600 <iprintf>
      pbuf_free(p);
 800ecd2:	4640      	mov	r0, r8
}
 800ecd4:	b005      	add	sp, #20
 800ecd6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 800ecda:	f7fb badf 	b.w	800a29c <pbuf_free>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800ecde:	f8b9 100c 	ldrh.w	r1, [r9, #12]
 800ece2:	4640      	mov	r0, r8
 800ece4:	3108      	adds	r1, #8
 800ece6:	b209      	sxth	r1, r1
 800ece8:	f7fb faa0 	bl	800a22c <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800ecec:	2103      	movs	r1, #3
 800ecee:	4640      	mov	r0, r8
 800ecf0:	f000 ffa6 	bl	800fc40 <icmp_dest_unreach>
 800ecf4:	e7b7      	b.n	800ec66 <udp_input+0x142>
 800ecf6:	465c      	mov	r4, fp
 800ecf8:	e782      	b.n	800ec00 <udp_input+0xdc>
 800ecfa:	bf00      	nop
 800ecfc:	2400e6b4 	.word	0x2400e6b4
 800ed00:	080149cc 	.word	0x080149cc
 800ed04:	2400b55c 	.word	0x2400b55c
 800ed08:	080124d0 	.word	0x080124d0
 800ed0c:	08014968 	.word	0x08014968
 800ed10:	08014998 	.word	0x08014998
 800ed14:	080149b0 	.word	0x080149b0
 800ed18:	080149f4 	.word	0x080149f4
 800ed1c:	2400b54c 	.word	0x2400b54c

0800ed20 <udp_bind>:
  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 800ed20:	4b38      	ldr	r3, [pc, #224]	; (800ee04 <udp_bind+0xe4>)
 800ed22:	2900      	cmp	r1, #0
{
 800ed24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ipaddr = IP4_ADDR_ANY;
 800ed28:	bf08      	it	eq
 800ed2a:	4619      	moveq	r1, r3
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800ed2c:	2800      	cmp	r0, #0
 800ed2e:	d05e      	beq.n	800edee <udp_bind+0xce>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ed30:	4f35      	ldr	r7, [pc, #212]	; (800ee08 <udp_bind+0xe8>)
 800ed32:	683e      	ldr	r6, [r7, #0]
 800ed34:	b34e      	cbz	r6, 800ed8a <udp_bind+0x6a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800ed36:	42b0      	cmp	r0, r6
 800ed38:	d031      	beq.n	800ed9e <udp_bind+0x7e>
 800ed3a:	4634      	mov	r4, r6
 800ed3c:	e001      	b.n	800ed42 <udp_bind+0x22>
 800ed3e:	42a0      	cmp	r0, r4
 800ed40:	d02d      	beq.n	800ed9e <udp_bind+0x7e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ed42:	68e4      	ldr	r4, [r4, #12]
 800ed44:	2c00      	cmp	r4, #0
 800ed46:	d1fa      	bne.n	800ed3e <udp_bind+0x1e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800ed48:	b362      	cbz	r2, 800eda4 <udp_bind+0x84>
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800ed4a:	680d      	ldr	r5, [r1, #0]
 800ed4c:	4633      	mov	r3, r6
 800ed4e:	e001      	b.n	800ed54 <udp_bind+0x34>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ed50:	68db      	ldr	r3, [r3, #12]
 800ed52:	b19b      	cbz	r3, 800ed7c <udp_bind+0x5c>
      if (pcb != ipcb) {
 800ed54:	4298      	cmp	r0, r3
 800ed56:	d0fb      	beq.n	800ed50 <udp_bind+0x30>
          if ((ipcb->local_port == port) &&
 800ed58:	8a59      	ldrh	r1, [r3, #18]
 800ed5a:	4291      	cmp	r1, r2
 800ed5c:	d1f8      	bne.n	800ed50 <udp_bind+0x30>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800ed5e:	6819      	ldr	r1, [r3, #0]
              ip_addr_isany(&ipcb->local_ip))) {
 800ed60:	42a9      	cmp	r1, r5
 800ed62:	bf18      	it	ne
 800ed64:	2900      	cmpne	r1, #0
 800ed66:	d001      	beq.n	800ed6c <udp_bind+0x4c>
 800ed68:	2d00      	cmp	r5, #0
 800ed6a:	d1f1      	bne.n	800ed50 <udp_bind+0x30>
      return ERR_USE;
 800ed6c:	f06f 0307 	mvn.w	r3, #7
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
}
 800ed70:	4618      	mov	r0, r3
 800ed72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800ed76:	680d      	ldr	r5, [r1, #0]
 800ed78:	f8ae 2000 	strh.w	r2, [lr]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800ed7c:	6005      	str	r5, [r0, #0]
  pcb->local_port = port;
 800ed7e:	8242      	strh	r2, [r0, #18]
  if (rebind == 0) {
 800ed80:	b13c      	cbz	r4, 800ed92 <udp_bind+0x72>
  return ERR_OK;
 800ed82:	2300      	movs	r3, #0
}
 800ed84:	4618      	mov	r0, r3
 800ed86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (port == 0) {
 800ed8a:	b372      	cbz	r2, 800edea <udp_bind+0xca>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800ed8c:	680b      	ldr	r3, [r1, #0]
  pcb->local_port = port;
 800ed8e:	8242      	strh	r2, [r0, #18]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800ed90:	6003      	str	r3, [r0, #0]
  return ERR_OK;
 800ed92:	2300      	movs	r3, #0
    pcb->next = udp_pcbs;
 800ed94:	60c6      	str	r6, [r0, #12]
    udp_pcbs = pcb;
 800ed96:	6038      	str	r0, [r7, #0]
}
 800ed98:	4618      	mov	r0, r3
 800ed9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      rebind = 1;
 800ed9e:	2401      	movs	r4, #1
  if (port == 0) {
 800eda0:	2a00      	cmp	r2, #0
 800eda2:	d1d2      	bne.n	800ed4a <udp_bind+0x2a>
 800eda4:	f8df e070 	ldr.w	lr, [pc, #112]	; 800ee18 <udp_bind+0xf8>
  rebind = 0;
 800eda8:	f44f 4580 	mov.w	r5, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800edac:	f64f 78ff 	movw	r8, #65535	; 0xffff
 800edb0:	f8be 2000 	ldrh.w	r2, [lr]
 800edb4:	4542      	cmp	r2, r8
 800edb6:	d015      	beq.n	800ede4 <udp_bind+0xc4>
 800edb8:	3201      	adds	r2, #1
 800edba:	b292      	uxth	r2, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800edbc:	2e00      	cmp	r6, #0
 800edbe:	d0da      	beq.n	800ed76 <udp_bind+0x56>
 800edc0:	4633      	mov	r3, r6
 800edc2:	e002      	b.n	800edca <udp_bind+0xaa>
 800edc4:	68db      	ldr	r3, [r3, #12]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d0d5      	beq.n	800ed76 <udp_bind+0x56>
    if (pcb->local_port == udp_port) {
 800edca:	f8b3 c012 	ldrh.w	ip, [r3, #18]
 800edce:	4594      	cmp	ip, r2
 800edd0:	d1f8      	bne.n	800edc4 <udp_bind+0xa4>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800edd2:	3d01      	subs	r5, #1
 800edd4:	b2ad      	uxth	r5, r5
 800edd6:	2d00      	cmp	r5, #0
 800edd8:	d1ec      	bne.n	800edb4 <udp_bind+0x94>
      return ERR_USE;
 800edda:	f06f 0307 	mvn.w	r3, #7
 800edde:	f8ae 2000 	strh.w	r2, [lr]
 800ede2:	e7cf      	b.n	800ed84 <udp_bind+0x64>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800ede4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800ede8:	e7e8      	b.n	800edbc <udp_bind+0x9c>
  rebind = 0;
 800edea:	4634      	mov	r4, r6
 800edec:	e7da      	b.n	800eda4 <udp_bind+0x84>
  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800edee:	4b07      	ldr	r3, [pc, #28]	; (800ee0c <udp_bind+0xec>)
 800edf0:	f240 32b7 	movw	r2, #951	; 0x3b7
 800edf4:	4906      	ldr	r1, [pc, #24]	; (800ee10 <udp_bind+0xf0>)
 800edf6:	4807      	ldr	r0, [pc, #28]	; (800ee14 <udp_bind+0xf4>)
 800edf8:	f002 fc02 	bl	8011600 <iprintf>
 800edfc:	f06f 030f 	mvn.w	r3, #15
 800ee00:	e7c0      	b.n	800ed84 <udp_bind+0x64>
 800ee02:	bf00      	nop
 800ee04:	08014f0c 	.word	0x08014f0c
 800ee08:	2400e6b4 	.word	0x2400e6b4
 800ee0c:	08014968 	.word	0x08014968
 800ee10:	08014a10 	.word	0x08014a10
 800ee14:	080124d0 	.word	0x080124d0
 800ee18:	2400002e 	.word	0x2400002e

0800ee1c <udp_sendto_if_src>:
{
 800ee1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee20:	b085      	sub	sp, #20
 800ee22:	e9dd ba0e 	ldrd	fp, sl, [sp, #56]	; 0x38
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800ee26:	2800      	cmp	r0, #0
 800ee28:	f000 8087 	beq.w	800ef3a <udp_sendto_if_src+0x11e>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800ee2c:	460d      	mov	r5, r1
 800ee2e:	2900      	cmp	r1, #0
 800ee30:	d079      	beq.n	800ef26 <udp_sendto_if_src+0x10a>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800ee32:	4690      	mov	r8, r2
 800ee34:	2a00      	cmp	r2, #0
 800ee36:	d06c      	beq.n	800ef12 <udp_sendto_if_src+0xf6>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800ee38:	f1ba 0f00 	cmp.w	sl, #0
 800ee3c:	d05f      	beq.n	800eefe <udp_sendto_if_src+0xe2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800ee3e:	f1bb 0f00 	cmp.w	fp, #0
 800ee42:	f000 8084 	beq.w	800ef4e <udp_sendto_if_src+0x132>
  if (pcb->local_port == 0) {
 800ee46:	8a42      	ldrh	r2, [r0, #18]
 800ee48:	4699      	mov	r9, r3
 800ee4a:	4604      	mov	r4, r0
 800ee4c:	b39a      	cbz	r2, 800eeb6 <udp_sendto_if_src+0x9a>
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800ee4e:	892a      	ldrh	r2, [r5, #8]
 800ee50:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 800ee54:	429a      	cmp	r2, r3
 800ee56:	d84f      	bhi.n	800eef8 <udp_sendto_if_src+0xdc>
  if (pbuf_add_header(p, UDP_HLEN)) {
 800ee58:	2108      	movs	r1, #8
 800ee5a:	4628      	mov	r0, r5
 800ee5c:	f7fb f97e 	bl	800a15c <pbuf_add_header>
 800ee60:	bb98      	cbnz	r0, 800eeca <udp_sendto_if_src+0xae>
 800ee62:	462e      	mov	r6, r5
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800ee64:	8973      	ldrh	r3, [r6, #10]
 800ee66:	2b07      	cmp	r3, #7
 800ee68:	d93e      	bls.n	800eee8 <udp_sendto_if_src+0xcc>
  udphdr = (struct udp_hdr *)q->payload;
 800ee6a:	6877      	ldr	r7, [r6, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 800ee6c:	8a60      	ldrh	r0, [r4, #18]
 800ee6e:	f7fa fa93 	bl	8009398 <lwip_htons>
 800ee72:	8038      	strh	r0, [r7, #0]
  udphdr->dest = lwip_htons(dst_port);
 800ee74:	4648      	mov	r0, r9
 800ee76:	f7fa fa8f 	bl	8009398 <lwip_htons>
  udphdr->chksum = 0x0000;
 800ee7a:	2300      	movs	r3, #0
  udphdr->dest = lwip_htons(dst_port);
 800ee7c:	8078      	strh	r0, [r7, #2]
  udphdr->chksum = 0x0000;
 800ee7e:	71bb      	strb	r3, [r7, #6]
 800ee80:	71fb      	strb	r3, [r7, #7]
    udphdr->len = lwip_htons(q->tot_len);
 800ee82:	8930      	ldrh	r0, [r6, #8]
 800ee84:	f7fa fa88 	bl	8009398 <lwip_htons>
 800ee88:	80b8      	strh	r0, [r7, #4]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800ee8a:	f8cd b008 	str.w	fp, [sp, #8]
 800ee8e:	2011      	movs	r0, #17
 800ee90:	7aa3      	ldrb	r3, [r4, #10]
 800ee92:	4642      	mov	r2, r8
 800ee94:	4651      	mov	r1, sl
 800ee96:	9300      	str	r3, [sp, #0]
 800ee98:	7ae3      	ldrb	r3, [r4, #11]
 800ee9a:	9001      	str	r0, [sp, #4]
 800ee9c:	4630      	mov	r0, r6
 800ee9e:	f000 ffeb 	bl	800fe78 <ip4_output_if_src>
  if (q != p) {
 800eea2:	42ae      	cmp	r6, r5
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800eea4:	4607      	mov	r7, r0
  if (q != p) {
 800eea6:	d002      	beq.n	800eeae <udp_sendto_if_src+0x92>
    pbuf_free(q);
 800eea8:	4630      	mov	r0, r6
 800eeaa:	f7fb f9f7 	bl	800a29c <pbuf_free>
}
 800eeae:	4638      	mov	r0, r7
 800eeb0:	b005      	add	sp, #20
 800eeb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800eeb6:	4601      	mov	r1, r0
 800eeb8:	f7ff ff32 	bl	800ed20 <udp_bind>
    if (err != ERR_OK) {
 800eebc:	4607      	mov	r7, r0
 800eebe:	2800      	cmp	r0, #0
 800eec0:	d0c5      	beq.n	800ee4e <udp_sendto_if_src+0x32>
}
 800eec2:	4638      	mov	r0, r7
 800eec4:	b005      	add	sp, #20
 800eec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800eeca:	f44f 7220 	mov.w	r2, #640	; 0x280
 800eece:	2108      	movs	r1, #8
 800eed0:	2022      	movs	r0, #34	; 0x22
 800eed2:	f7fb fa53 	bl	800a37c <pbuf_alloc>
    if (q == NULL) {
 800eed6:	4606      	mov	r6, r0
 800eed8:	b170      	cbz	r0, 800eef8 <udp_sendto_if_src+0xdc>
    if (p->tot_len != 0) {
 800eeda:	892b      	ldrh	r3, [r5, #8]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d0c1      	beq.n	800ee64 <udp_sendto_if_src+0x48>
      pbuf_chain(q, p);
 800eee0:	4629      	mov	r1, r5
 800eee2:	f7fb fbcf 	bl	800a684 <pbuf_chain>
 800eee6:	e7bd      	b.n	800ee64 <udp_sendto_if_src+0x48>
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800eee8:	4b1e      	ldr	r3, [pc, #120]	; (800ef64 <udp_sendto_if_src+0x148>)
 800eeea:	f240 320d 	movw	r2, #781	; 0x30d
 800eeee:	491e      	ldr	r1, [pc, #120]	; (800ef68 <udp_sendto_if_src+0x14c>)
 800eef0:	481e      	ldr	r0, [pc, #120]	; (800ef6c <udp_sendto_if_src+0x150>)
 800eef2:	f002 fb85 	bl	8011600 <iprintf>
 800eef6:	e7b8      	b.n	800ee6a <udp_sendto_if_src+0x4e>
    return ERR_MEM;
 800eef8:	f04f 37ff 	mov.w	r7, #4294967295
 800eefc:	e7d7      	b.n	800eeae <udp_sendto_if_src+0x92>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800eefe:	4b19      	ldr	r3, [pc, #100]	; (800ef64 <udp_sendto_if_src+0x148>)
 800ef00:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800ef04:	491a      	ldr	r1, [pc, #104]	; (800ef70 <udp_sendto_if_src+0x154>)
 800ef06:	f06f 070f 	mvn.w	r7, #15
 800ef0a:	4818      	ldr	r0, [pc, #96]	; (800ef6c <udp_sendto_if_src+0x150>)
 800ef0c:	f002 fb78 	bl	8011600 <iprintf>
 800ef10:	e7cd      	b.n	800eeae <udp_sendto_if_src+0x92>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800ef12:	4b14      	ldr	r3, [pc, #80]	; (800ef64 <udp_sendto_if_src+0x148>)
 800ef14:	f240 22d3 	movw	r2, #723	; 0x2d3
 800ef18:	4916      	ldr	r1, [pc, #88]	; (800ef74 <udp_sendto_if_src+0x158>)
 800ef1a:	f06f 070f 	mvn.w	r7, #15
 800ef1e:	4813      	ldr	r0, [pc, #76]	; (800ef6c <udp_sendto_if_src+0x150>)
 800ef20:	f002 fb6e 	bl	8011600 <iprintf>
 800ef24:	e7c3      	b.n	800eeae <udp_sendto_if_src+0x92>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800ef26:	4b0f      	ldr	r3, [pc, #60]	; (800ef64 <udp_sendto_if_src+0x148>)
 800ef28:	f240 22d2 	movw	r2, #722	; 0x2d2
 800ef2c:	4912      	ldr	r1, [pc, #72]	; (800ef78 <udp_sendto_if_src+0x15c>)
 800ef2e:	f06f 070f 	mvn.w	r7, #15
 800ef32:	480e      	ldr	r0, [pc, #56]	; (800ef6c <udp_sendto_if_src+0x150>)
 800ef34:	f002 fb64 	bl	8011600 <iprintf>
 800ef38:	e7b9      	b.n	800eeae <udp_sendto_if_src+0x92>
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800ef3a:	4b0a      	ldr	r3, [pc, #40]	; (800ef64 <udp_sendto_if_src+0x148>)
 800ef3c:	f240 22d1 	movw	r2, #721	; 0x2d1
 800ef40:	490e      	ldr	r1, [pc, #56]	; (800ef7c <udp_sendto_if_src+0x160>)
 800ef42:	f06f 070f 	mvn.w	r7, #15
 800ef46:	4809      	ldr	r0, [pc, #36]	; (800ef6c <udp_sendto_if_src+0x150>)
 800ef48:	f002 fb5a 	bl	8011600 <iprintf>
 800ef4c:	e7af      	b.n	800eeae <udp_sendto_if_src+0x92>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800ef4e:	4b05      	ldr	r3, [pc, #20]	; (800ef64 <udp_sendto_if_src+0x148>)
 800ef50:	f240 22d5 	movw	r2, #725	; 0x2d5
 800ef54:	490a      	ldr	r1, [pc, #40]	; (800ef80 <udp_sendto_if_src+0x164>)
 800ef56:	f06f 070f 	mvn.w	r7, #15
 800ef5a:	4804      	ldr	r0, [pc, #16]	; (800ef6c <udp_sendto_if_src+0x150>)
 800ef5c:	f002 fb50 	bl	8011600 <iprintf>
 800ef60:	e7a5      	b.n	800eeae <udp_sendto_if_src+0x92>
 800ef62:	bf00      	nop
 800ef64:	08014968 	.word	0x08014968
 800ef68:	08014ad4 	.word	0x08014ad4
 800ef6c:	080124d0 	.word	0x080124d0
 800ef70:	08014a8c 	.word	0x08014a8c
 800ef74:	08014a68 	.word	0x08014a68
 800ef78:	08014a48 	.word	0x08014a48
 800ef7c:	08014a28 	.word	0x08014a28
 800ef80:	08014ab0 	.word	0x08014ab0

0800ef84 <udp_sendto_if>:
{
 800ef84:	b570      	push	{r4, r5, r6, lr}
 800ef86:	b082      	sub	sp, #8
 800ef88:	9c06      	ldr	r4, [sp, #24]
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800ef8a:	2800      	cmp	r0, #0
 800ef8c:	d036      	beq.n	800effc <udp_sendto_if+0x78>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800ef8e:	b359      	cbz	r1, 800efe8 <udp_sendto_if+0x64>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800ef90:	b302      	cbz	r2, 800efd4 <udp_sendto_if+0x50>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800ef92:	b1ac      	cbz	r4, 800efc0 <udp_sendto_if+0x3c>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ef94:	6805      	ldr	r5, [r0, #0]
 800ef96:	b935      	cbnz	r5, 800efa6 <udp_sendto_if+0x22>
      src_ip = netif_ip_addr4(netif);
 800ef98:	1d25      	adds	r5, r4, #4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800ef9a:	e9cd 4500 	strd	r4, r5, [sp]
 800ef9e:	f7ff ff3d 	bl	800ee1c <udp_sendto_if_src>
}
 800efa2:	b002      	add	sp, #8
 800efa4:	bd70      	pop	{r4, r5, r6, pc}
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800efa6:	f005 0cf0 	and.w	ip, r5, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800efaa:	f1bc 0fe0 	cmp.w	ip, #224	; 0xe0
 800efae:	d0f3      	beq.n	800ef98 <udp_sendto_if+0x14>
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800efb0:	6866      	ldr	r6, [r4, #4]
 800efb2:	42b5      	cmp	r5, r6
 800efb4:	d101      	bne.n	800efba <udp_sendto_if+0x36>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800efb6:	4605      	mov	r5, r0
 800efb8:	e7ef      	b.n	800ef9a <udp_sendto_if+0x16>
        return ERR_RTE;
 800efba:	f06f 0003 	mvn.w	r0, #3
 800efbe:	e7f0      	b.n	800efa2 <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800efc0:	4b13      	ldr	r3, [pc, #76]	; (800f010 <udp_sendto_if+0x8c>)
 800efc2:	f240 2283 	movw	r2, #643	; 0x283
 800efc6:	4913      	ldr	r1, [pc, #76]	; (800f014 <udp_sendto_if+0x90>)
 800efc8:	4813      	ldr	r0, [pc, #76]	; (800f018 <udp_sendto_if+0x94>)
 800efca:	f002 fb19 	bl	8011600 <iprintf>
 800efce:	f06f 000f 	mvn.w	r0, #15
 800efd2:	e7e6      	b.n	800efa2 <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800efd4:	4b0e      	ldr	r3, [pc, #56]	; (800f010 <udp_sendto_if+0x8c>)
 800efd6:	f240 2282 	movw	r2, #642	; 0x282
 800efda:	4910      	ldr	r1, [pc, #64]	; (800f01c <udp_sendto_if+0x98>)
 800efdc:	480e      	ldr	r0, [pc, #56]	; (800f018 <udp_sendto_if+0x94>)
 800efde:	f002 fb0f 	bl	8011600 <iprintf>
 800efe2:	f06f 000f 	mvn.w	r0, #15
 800efe6:	e7dc      	b.n	800efa2 <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800efe8:	4b09      	ldr	r3, [pc, #36]	; (800f010 <udp_sendto_if+0x8c>)
 800efea:	f240 2281 	movw	r2, #641	; 0x281
 800efee:	490c      	ldr	r1, [pc, #48]	; (800f020 <udp_sendto_if+0x9c>)
 800eff0:	4809      	ldr	r0, [pc, #36]	; (800f018 <udp_sendto_if+0x94>)
 800eff2:	f002 fb05 	bl	8011600 <iprintf>
 800eff6:	f06f 000f 	mvn.w	r0, #15
 800effa:	e7d2      	b.n	800efa2 <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800effc:	4b04      	ldr	r3, [pc, #16]	; (800f010 <udp_sendto_if+0x8c>)
 800effe:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f002:	4908      	ldr	r1, [pc, #32]	; (800f024 <udp_sendto_if+0xa0>)
 800f004:	4804      	ldr	r0, [pc, #16]	; (800f018 <udp_sendto_if+0x94>)
 800f006:	f002 fafb 	bl	8011600 <iprintf>
 800f00a:	f06f 000f 	mvn.w	r0, #15
 800f00e:	e7c8      	b.n	800efa2 <udp_sendto_if+0x1e>
 800f010:	08014968 	.word	0x08014968
 800f014:	08014b5c 	.word	0x08014b5c
 800f018:	080124d0 	.word	0x080124d0
 800f01c:	08014b3c 	.word	0x08014b3c
 800f020:	08014b20 	.word	0x08014b20
 800f024:	08014b04 	.word	0x08014b04

0800f028 <udp_sendto>:
{
 800f028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f02c:	b082      	sub	sp, #8
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800f02e:	b388      	cbz	r0, 800f094 <udp_sendto+0x6c>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800f030:	460e      	mov	r6, r1
 800f032:	b329      	cbz	r1, 800f080 <udp_sendto+0x58>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800f034:	4615      	mov	r5, r2
 800f036:	b1ca      	cbz	r2, 800f06c <udp_sendto+0x44>
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800f038:	4604      	mov	r4, r0
 800f03a:	7a00      	ldrb	r0, [r0, #8]
 800f03c:	4698      	mov	r8, r3
 800f03e:	b168      	cbz	r0, 800f05c <udp_sendto+0x34>
    netif = netif_get_by_index(pcb->netif_idx);
 800f040:	f7fa ff7c 	bl	8009f3c <netif_get_by_index>
 800f044:	4607      	mov	r7, r0
  if (netif == NULL) {
 800f046:	b177      	cbz	r7, 800f066 <udp_sendto+0x3e>
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800f048:	4643      	mov	r3, r8
 800f04a:	462a      	mov	r2, r5
 800f04c:	4631      	mov	r1, r6
 800f04e:	4620      	mov	r0, r4
 800f050:	9700      	str	r7, [sp, #0]
 800f052:	f7ff ff97 	bl	800ef84 <udp_sendto_if>
}
 800f056:	b002      	add	sp, #8
 800f058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      netif = ip_route(&pcb->local_ip, dst_ip);
 800f05c:	4610      	mov	r0, r2
 800f05e:	f000 fdf7 	bl	800fc50 <ip4_route>
 800f062:	4607      	mov	r7, r0
 800f064:	e7ef      	b.n	800f046 <udp_sendto+0x1e>
    return ERR_RTE;
 800f066:	f06f 0003 	mvn.w	r0, #3
 800f06a:	e7f4      	b.n	800f056 <udp_sendto+0x2e>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800f06c:	4b0e      	ldr	r3, [pc, #56]	; (800f0a8 <udp_sendto+0x80>)
 800f06e:	f240 221a 	movw	r2, #538	; 0x21a
 800f072:	490e      	ldr	r1, [pc, #56]	; (800f0ac <udp_sendto+0x84>)
 800f074:	480e      	ldr	r0, [pc, #56]	; (800f0b0 <udp_sendto+0x88>)
 800f076:	f002 fac3 	bl	8011600 <iprintf>
 800f07a:	f06f 000f 	mvn.w	r0, #15
 800f07e:	e7ea      	b.n	800f056 <udp_sendto+0x2e>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800f080:	4b09      	ldr	r3, [pc, #36]	; (800f0a8 <udp_sendto+0x80>)
 800f082:	f240 2219 	movw	r2, #537	; 0x219
 800f086:	490b      	ldr	r1, [pc, #44]	; (800f0b4 <udp_sendto+0x8c>)
 800f088:	4809      	ldr	r0, [pc, #36]	; (800f0b0 <udp_sendto+0x88>)
 800f08a:	f002 fab9 	bl	8011600 <iprintf>
 800f08e:	f06f 000f 	mvn.w	r0, #15
 800f092:	e7e0      	b.n	800f056 <udp_sendto+0x2e>
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800f094:	4b04      	ldr	r3, [pc, #16]	; (800f0a8 <udp_sendto+0x80>)
 800f096:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f09a:	4907      	ldr	r1, [pc, #28]	; (800f0b8 <udp_sendto+0x90>)
 800f09c:	4804      	ldr	r0, [pc, #16]	; (800f0b0 <udp_sendto+0x88>)
 800f09e:	f002 faaf 	bl	8011600 <iprintf>
 800f0a2:	f06f 000f 	mvn.w	r0, #15
 800f0a6:	e7d6      	b.n	800f056 <udp_sendto+0x2e>
 800f0a8:	08014968 	.word	0x08014968
 800f0ac:	08014bb0 	.word	0x08014bb0
 800f0b0:	080124d0 	.word	0x080124d0
 800f0b4:	08014b94 	.word	0x08014b94
 800f0b8:	08014b7c 	.word	0x08014b7c

0800f0bc <udp_send>:
{
 800f0bc:	b510      	push	{r4, lr}
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800f0be:	b188      	cbz	r0, 800f0e4 <udp_send+0x28>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800f0c0:	b131      	cbz	r1, 800f0d0 <udp_send+0x14>
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800f0c2:	4602      	mov	r2, r0
 800f0c4:	8a83      	ldrh	r3, [r0, #20]
 800f0c6:	3204      	adds	r2, #4
}
 800f0c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800f0cc:	f7ff bfac 	b.w	800f028 <udp_sendto>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800f0d0:	4b08      	ldr	r3, [pc, #32]	; (800f0f4 <udp_send+0x38>)
 800f0d2:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800f0d6:	4908      	ldr	r1, [pc, #32]	; (800f0f8 <udp_send+0x3c>)
 800f0d8:	4808      	ldr	r0, [pc, #32]	; (800f0fc <udp_send+0x40>)
 800f0da:	f002 fa91 	bl	8011600 <iprintf>
}
 800f0de:	f06f 000f 	mvn.w	r0, #15
 800f0e2:	bd10      	pop	{r4, pc}
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800f0e4:	4b03      	ldr	r3, [pc, #12]	; (800f0f4 <udp_send+0x38>)
 800f0e6:	f240 12d5 	movw	r2, #469	; 0x1d5
 800f0ea:	4905      	ldr	r1, [pc, #20]	; (800f100 <udp_send+0x44>)
 800f0ec:	4803      	ldr	r0, [pc, #12]	; (800f0fc <udp_send+0x40>)
 800f0ee:	f002 fa87 	bl	8011600 <iprintf>
 800f0f2:	e7f4      	b.n	800f0de <udp_send+0x22>
 800f0f4:	08014968 	.word	0x08014968
 800f0f8:	08014be4 	.word	0x08014be4
 800f0fc:	080124d0 	.word	0x080124d0
 800f100:	08014bcc 	.word	0x08014bcc

0800f104 <udp_recv>:
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800f104:	b110      	cbz	r0, 800f10c <udp_recv+0x8>

  /* remember recv() callback and user data */
  pcb->recv = recv;
  pcb->recv_arg = recv_arg;
 800f106:	e9c0 1206 	strd	r1, r2, [r0, #24]
}
 800f10a:	4770      	bx	lr
  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800f10c:	4b03      	ldr	r3, [pc, #12]	; (800f11c <udp_recv+0x18>)
 800f10e:	f240 428a 	movw	r2, #1162	; 0x48a
 800f112:	4903      	ldr	r1, [pc, #12]	; (800f120 <udp_recv+0x1c>)
 800f114:	4803      	ldr	r0, [pc, #12]	; (800f124 <udp_recv+0x20>)
 800f116:	f002 ba73 	b.w	8011600 <iprintf>
 800f11a:	bf00      	nop
 800f11c:	08014968 	.word	0x08014968
 800f120:	08014bfc 	.word	0x08014bfc
 800f124:	080124d0 	.word	0x080124d0

0800f128 <udp_remove>:
{
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800f128:	4601      	mov	r1, r0
 800f12a:	b1a0      	cbz	r0, 800f156 <udp_remove+0x2e>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800f12c:	4b0d      	ldr	r3, [pc, #52]	; (800f164 <udp_remove+0x3c>)
 800f12e:	681a      	ldr	r2, [r3, #0]
 800f130:	4282      	cmp	r2, r0
 800f132:	d006      	beq.n	800f142 <udp_remove+0x1a>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800f134:	b13a      	cbz	r2, 800f146 <udp_remove+0x1e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800f136:	68d3      	ldr	r3, [r2, #12]
 800f138:	b12b      	cbz	r3, 800f146 <udp_remove+0x1e>
 800f13a:	428b      	cmp	r3, r1
 800f13c:	d006      	beq.n	800f14c <udp_remove+0x24>
 800f13e:	461a      	mov	r2, r3
 800f140:	e7f8      	b.n	800f134 <udp_remove+0xc>
    udp_pcbs = udp_pcbs->next;
 800f142:	68c2      	ldr	r2, [r0, #12]
 800f144:	601a      	str	r2, [r3, #0]
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800f146:	2000      	movs	r0, #0
 800f148:	f7fa bd1a 	b.w	8009b80 <memp_free>
        pcb2->next = pcb->next;
 800f14c:	68cb      	ldr	r3, [r1, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 800f14e:	2000      	movs	r0, #0
        pcb2->next = pcb->next;
 800f150:	60d3      	str	r3, [r2, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 800f152:	f7fa bd15 	b.w	8009b80 <memp_free>
  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800f156:	4b04      	ldr	r3, [pc, #16]	; (800f168 <udp_remove+0x40>)
 800f158:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800f15c:	4903      	ldr	r1, [pc, #12]	; (800f16c <udp_remove+0x44>)
 800f15e:	4804      	ldr	r0, [pc, #16]	; (800f170 <udp_remove+0x48>)
 800f160:	f002 ba4e 	b.w	8011600 <iprintf>
 800f164:	2400e6b4 	.word	0x2400e6b4
 800f168:	08014968 	.word	0x08014968
 800f16c:	08014c14 	.word	0x08014c14
 800f170:	080124d0 	.word	0x080124d0

0800f174 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 800f174:	b510      	push	{r4, lr}
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800f176:	2000      	movs	r0, #0
 800f178:	f7fa fcbc 	bl	8009af4 <memp_malloc>
  if (pcb != NULL) {
 800f17c:	4604      	mov	r4, r0
 800f17e:	b128      	cbz	r0, 800f18c <udp_new_ip_type+0x18>
    memset(pcb, 0, sizeof(struct udp_pcb));
 800f180:	2220      	movs	r2, #32
 800f182:	2100      	movs	r1, #0
 800f184:	f002 fb92 	bl	80118ac <memset>
    pcb->ttl = UDP_TTL;
 800f188:	23ff      	movs	r3, #255	; 0xff
 800f18a:	72e3      	strb	r3, [r4, #11]
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
}
 800f18c:	4620      	mov	r0, r4
 800f18e:	bd10      	pop	{r4, pc}

0800f190 <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800f190:	b110      	cbz	r0, 800f198 <udp_netif_ip_addr_changed+0x8>
 800f192:	6802      	ldr	r2, [r0, #0]
 800f194:	b101      	cbz	r1, 800f198 <udp_netif_ip_addr_changed+0x8>
 800f196:	b902      	cbnz	r2, 800f19a <udp_netif_ip_addr_changed+0xa>
 800f198:	4770      	bx	lr
 800f19a:	680b      	ldr	r3, [r1, #0]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d0fb      	beq.n	800f198 <udp_netif_ip_addr_changed+0x8>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f1a0:	4b08      	ldr	r3, [pc, #32]	; (800f1c4 <udp_netif_ip_addr_changed+0x34>)
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d0f7      	beq.n	800f198 <udp_netif_ip_addr_changed+0x8>
{
 800f1a8:	b410      	push	{r4}
 800f1aa:	e000      	b.n	800f1ae <udp_netif_ip_addr_changed+0x1e>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800f1ac:	6802      	ldr	r2, [r0, #0]
 800f1ae:	681c      	ldr	r4, [r3, #0]
 800f1b0:	4294      	cmp	r4, r2
 800f1b2:	d101      	bne.n	800f1b8 <udp_netif_ip_addr_changed+0x28>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800f1b4:	680a      	ldr	r2, [r1, #0]
 800f1b6:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f1b8:	68db      	ldr	r3, [r3, #12]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d1f6      	bne.n	800f1ac <udp_netif_ip_addr_changed+0x1c>
      }
    }
  }
}
 800f1be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f1c2:	4770      	bx	lr
 800f1c4:	2400e6b4 	.word	0x2400e6b4

0800f1c8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800f1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1cc:	468b      	mov	fp, r1
 800f1ce:	2300      	movs	r3, #0
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800f1d0:	f04f 080a 	mov.w	r8, #10
{
 800f1d4:	b085      	sub	sp, #20
 800f1d6:	4617      	mov	r7, r2
 800f1d8:	4e52      	ldr	r6, [pc, #328]	; (800f324 <etharp_find_entry+0x15c>)
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800f1da:	465a      	mov	r2, fp
{
 800f1dc:	4605      	mov	r5, r0
 800f1de:	4631      	mov	r1, r6
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800f1e0:	4699      	mov	r9, r3
  s16_t empty = ARP_TABLE_SIZE;
 800f1e2:	4644      	mov	r4, r8
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800f1e4:	46c6      	mov	lr, r8
 800f1e6:	46c3      	mov	fp, r8
 800f1e8:	469a      	mov	sl, r3
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800f1ea:	9303      	str	r3, [sp, #12]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800f1ec:	e9cd 7201 	strd	r7, r2, [sp, #4]
 800f1f0:	e004      	b.n	800f1fc <etharp_find_entry+0x34>
 800f1f2:	4664      	mov	r4, ip
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f1f4:	3301      	adds	r3, #1
 800f1f6:	3118      	adds	r1, #24
 800f1f8:	2b0a      	cmp	r3, #10
 800f1fa:	d016      	beq.n	800f22a <etharp_find_entry+0x62>
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800f1fc:	2c0a      	cmp	r4, #10
 800f1fe:	fa0f fc83 	sxth.w	ip, r3
    u8_t state = arp_table[i].state;
 800f202:	7d0a      	ldrb	r2, [r1, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800f204:	d13a      	bne.n	800f27c <etharp_find_entry+0xb4>
 800f206:	2a00      	cmp	r2, #0
 800f208:	d0f3      	beq.n	800f1f2 <etharp_find_entry+0x2a>
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800f20a:	b11d      	cbz	r5, 800f214 <etharp_find_entry+0x4c>
 800f20c:	6828      	ldr	r0, [r5, #0]
 800f20e:	684f      	ldr	r7, [r1, #4]
 800f210:	42b8      	cmp	r0, r7
 800f212:	d03e      	beq.n	800f292 <etharp_find_entry+0xca>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800f214:	2a01      	cmp	r2, #1
 800f216:	d034      	beq.n	800f282 <etharp_find_entry+0xba>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800f218:	8a4a      	ldrh	r2, [r1, #18]
 800f21a:	454a      	cmp	r2, r9
 800f21c:	d3ea      	bcc.n	800f1f4 <etharp_find_entry+0x2c>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f21e:	3301      	adds	r3, #1
          if (arp_table[i].ctime >= age_stable) {
 800f220:	4691      	mov	r9, r2
 800f222:	46e6      	mov	lr, ip
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f224:	3118      	adds	r1, #24
 800f226:	2b0a      	cmp	r3, #10
 800f228:	d1e8      	bne.n	800f1fc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800f22a:	46da      	mov	sl, fp
 800f22c:	e9dd 7b01 	ldrd	r7, fp, [sp, #4]
 800f230:	f1bb 0f01 	cmp.w	fp, #1
 800f234:	d172      	bne.n	800f31c <etharp_find_entry+0x154>
 800f236:	2c0a      	cmp	r4, #10
 800f238:	d032      	beq.n	800f2a0 <etharp_find_entry+0xd8>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800f23a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800f23e:	46a1      	mov	r9, r4
 800f240:	ea4f 0844 	mov.w	r8, r4, lsl #1
 800f244:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800f248:	7d1b      	ldrb	r3, [r3, #20]
 800f24a:	b133      	cbz	r3, 800f25a <etharp_find_entry+0x92>
 800f24c:	4b36      	ldr	r3, [pc, #216]	; (800f328 <etharp_find_entry+0x160>)
 800f24e:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800f252:	4936      	ldr	r1, [pc, #216]	; (800f32c <etharp_find_entry+0x164>)
 800f254:	4836      	ldr	r0, [pc, #216]	; (800f330 <etharp_find_entry+0x168>)
 800f256:	f002 f9d3 	bl	8011600 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800f25a:	b12d      	cbz	r5, 800f268 <etharp_find_entry+0xa0>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800f25c:	eb08 0309 	add.w	r3, r8, r9
 800f260:	682a      	ldr	r2, [r5, #0]
 800f262:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800f266:	605a      	str	r2, [r3, #4]
  }
  arp_table[i].ctime = 0;
 800f268:	44c8      	add	r8, r9
 800f26a:	2300      	movs	r3, #0
 800f26c:	eb06 06c8 	add.w	r6, r6, r8, lsl #3
 800f270:	8273      	strh	r3, [r6, #18]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800f272:	60b7      	str	r7, [r6, #8]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
}
 800f274:	4620      	mov	r0, r4
 800f276:	b005      	add	sp, #20
 800f278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (state != ETHARP_STATE_EMPTY) {
 800f27c:	2a00      	cmp	r2, #0
 800f27e:	d0b9      	beq.n	800f1f4 <etharp_find_entry+0x2c>
 800f280:	e7c3      	b.n	800f20a <etharp_find_entry+0x42>
        if (arp_table[i].q != NULL) {
 800f282:	680a      	ldr	r2, [r1, #0]
 800f284:	b3a2      	cbz	r2, 800f2f0 <etharp_find_entry+0x128>
          if (arp_table[i].ctime >= age_queue) {
 800f286:	8a4a      	ldrh	r2, [r1, #18]
 800f288:	4552      	cmp	r2, sl
 800f28a:	d3b3      	bcc.n	800f1f4 <etharp_find_entry+0x2c>
 800f28c:	4692      	mov	sl, r2
 800f28e:	46e0      	mov	r8, ip
 800f290:	e7b0      	b.n	800f1f4 <etharp_find_entry+0x2c>
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800f292:	9f01      	ldr	r7, [sp, #4]
 800f294:	b117      	cbz	r7, 800f29c <etharp_find_entry+0xd4>
 800f296:	6888      	ldr	r0, [r1, #8]
 800f298:	42b8      	cmp	r0, r7
 800f29a:	d1bb      	bne.n	800f214 <etharp_find_entry+0x4c>
 800f29c:	4664      	mov	r4, ip
 800f29e:	e7e9      	b.n	800f274 <etharp_find_entry+0xac>
    if (old_stable < ARP_TABLE_SIZE) {
 800f2a0:	f1be 0f0a 	cmp.w	lr, #10
 800f2a4:	d02c      	beq.n	800f300 <etharp_find_entry+0x138>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800f2a6:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
 800f2aa:	46f1      	mov	r9, lr
 800f2ac:	ea4f 084e 	mov.w	r8, lr, lsl #1
 800f2b0:	f856 3033 	ldr.w	r3, [r6, r3, lsl #3]
 800f2b4:	b383      	cbz	r3, 800f318 <etharp_find_entry+0x150>
 800f2b6:	464c      	mov	r4, r9
 800f2b8:	4b1b      	ldr	r3, [pc, #108]	; (800f328 <etharp_find_entry+0x160>)
 800f2ba:	f240 126d 	movw	r2, #365	; 0x16d
 800f2be:	491d      	ldr	r1, [pc, #116]	; (800f334 <etharp_find_entry+0x16c>)
 800f2c0:	481b      	ldr	r0, [pc, #108]	; (800f330 <etharp_find_entry+0x168>)
 800f2c2:	f002 f99d 	bl	8011600 <iprintf>
  if (arp_table[i].q != NULL) {
 800f2c6:	eb09 0a49 	add.w	sl, r9, r9, lsl #1
 800f2ca:	ea4f 0849 	mov.w	r8, r9, lsl #1
 800f2ce:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800f2d2:	f856 000a 	ldr.w	r0, [r6, sl]
 800f2d6:	b120      	cbz	r0, 800f2e2 <etharp_find_entry+0x11a>
    free_etharp_q(arp_table[i].q);
 800f2d8:	f7fa ffe0 	bl	800a29c <pbuf_free>
    arp_table[i].q = NULL;
 800f2dc:	2300      	movs	r3, #0
 800f2de:	f846 300a 	str.w	r3, [r6, sl]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800f2e2:	eb08 0309 	add.w	r3, r8, r9
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800f2ec:	751a      	strb	r2, [r3, #20]
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800f2ee:	e7b4      	b.n	800f25a <etharp_find_entry+0x92>
          if (arp_table[i].ctime >= age_pending) {
 800f2f0:	8a4a      	ldrh	r2, [r1, #18]
 800f2f2:	9803      	ldr	r0, [sp, #12]
 800f2f4:	4282      	cmp	r2, r0
 800f2f6:	f4ff af7d 	bcc.w	800f1f4 <etharp_find_entry+0x2c>
 800f2fa:	46e3      	mov	fp, ip
 800f2fc:	9203      	str	r2, [sp, #12]
 800f2fe:	e779      	b.n	800f1f4 <etharp_find_entry+0x2c>
    } else if (old_pending < ARP_TABLE_SIZE) {
 800f300:	f1ba 0f0a 	cmp.w	sl, #10
 800f304:	d105      	bne.n	800f312 <etharp_find_entry+0x14a>
    } else if (old_queue < ARP_TABLE_SIZE) {
 800f306:	f1b8 0f0a 	cmp.w	r8, #10
 800f30a:	d007      	beq.n	800f31c <etharp_find_entry+0x154>
    etharp_free_entry(i);
 800f30c:	4644      	mov	r4, r8
 800f30e:	46c1      	mov	r9, r8
 800f310:	e7d9      	b.n	800f2c6 <etharp_find_entry+0xfe>
 800f312:	4654      	mov	r4, sl
 800f314:	46d1      	mov	r9, sl
 800f316:	e7d6      	b.n	800f2c6 <etharp_find_entry+0xfe>
 800f318:	4674      	mov	r4, lr
 800f31a:	e7e2      	b.n	800f2e2 <etharp_find_entry+0x11a>
    return (s16_t)ERR_MEM;
 800f31c:	f04f 34ff 	mov.w	r4, #4294967295
 800f320:	e7a8      	b.n	800f274 <etharp_find_entry+0xac>
 800f322:	bf00      	nop
 800f324:	2400e6b8 	.word	0x2400e6b8
 800f328:	08014c2c 	.word	0x08014c2c
 800f32c:	08014c7c 	.word	0x08014c7c
 800f330:	080124d0 	.word	0x080124d0
 800f334:	08014c64 	.word	0x08014c64

0800f338 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800f338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f33c:	b082      	sub	sp, #8
 800f33e:	4688      	mov	r8, r1
 800f340:	4691      	mov	r9, r2
 800f342:	461f      	mov	r7, r3
 800f344:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f348:	4606      	mov	r6, r0
{
 800f34a:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f34e:	2800      	cmp	r0, #0
 800f350:	d050      	beq.n	800f3f4 <etharp_raw+0xbc>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800f352:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f356:	211c      	movs	r1, #28
 800f358:	200e      	movs	r0, #14
 800f35a:	f7fb f80f 	bl	800a37c <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800f35e:	4605      	mov	r5, r0
 800f360:	2800      	cmp	r0, #0
 800f362:	d04f      	beq.n	800f404 <etharp_raw+0xcc>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800f364:	8943      	ldrh	r3, [r0, #10]
 800f366:	2b1b      	cmp	r3, #27
 800f368:	d93c      	bls.n	800f3e4 <etharp_raw+0xac>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800f36a:	4620      	mov	r0, r4
  hdr = (struct etharp_hdr *)p->payload;
 800f36c:	686c      	ldr	r4, [r5, #4]
  hdr->opcode = lwip_htons(opcode);
 800f36e:	f7fa f813 	bl	8009398 <lwip_htons>
 800f372:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800f374:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
 800f378:	2b06      	cmp	r3, #6
 800f37a:	d006      	beq.n	800f38a <etharp_raw+0x52>
 800f37c:	4b23      	ldr	r3, [pc, #140]	; (800f40c <etharp_raw+0xd4>)
 800f37e:	f240 4269 	movw	r2, #1129	; 0x469
 800f382:	4923      	ldr	r1, [pc, #140]	; (800f410 <etharp_raw+0xd8>)
 800f384:	4823      	ldr	r0, [pc, #140]	; (800f414 <etharp_raw+0xdc>)
 800f386:	f002 f93b 	bl	8011600 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800f38a:	6839      	ldr	r1, [r7, #0]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800f38c:	4630      	mov	r0, r6
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800f38e:	2600      	movs	r6, #0
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800f390:	464b      	mov	r3, r9
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800f392:	60a1      	str	r1, [r4, #8]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800f394:	4642      	mov	r2, r8
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800f396:	88b9      	ldrh	r1, [r7, #4]
 800f398:	81a1      	strh	r1, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800f39a:	f8da 1000 	ldr.w	r1, [sl]
 800f39e:	f8c4 1012 	str.w	r1, [r4, #18]
 800f3a2:	f8ba 1004 	ldrh.w	r1, [sl, #4]
 800f3a6:	82e1      	strh	r1, [r4, #22]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800f3a8:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f3aa:	6809      	ldr	r1, [r1, #0]
 800f3ac:	f8c4 100e 	str.w	r1, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800f3b0:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f3b2:	6809      	ldr	r1, [r1, #0]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800f3b4:	7026      	strb	r6, [r4, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800f3b6:	61a1      	str	r1, [r4, #24]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800f3b8:	2101      	movs	r1, #1
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800f3ba:	70e6      	strb	r6, [r4, #3]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800f3bc:	7061      	strb	r1, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800f3be:	2108      	movs	r1, #8
 800f3c0:	70a1      	strb	r1, [r4, #2]
  hdr->hwlen = ETH_HWADDR_LEN;
 800f3c2:	2106      	movs	r1, #6
 800f3c4:	7121      	strb	r1, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800f3c6:	2104      	movs	r1, #4
 800f3c8:	7161      	strb	r1, [r4, #5]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800f3ca:	f640 0106 	movw	r1, #2054	; 0x806
 800f3ce:	9100      	str	r1, [sp, #0]
 800f3d0:	4629      	mov	r1, r5
 800f3d2:	f001 faad 	bl	8010930 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800f3d6:	4628      	mov	r0, r5
 800f3d8:	f7fa ff60 	bl	800a29c <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 800f3dc:	4630      	mov	r0, r6
}
 800f3de:	b002      	add	sp, #8
 800f3e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800f3e4:	4b09      	ldr	r3, [pc, #36]	; (800f40c <etharp_raw+0xd4>)
 800f3e6:	f240 4262 	movw	r2, #1122	; 0x462
 800f3ea:	490b      	ldr	r1, [pc, #44]	; (800f418 <etharp_raw+0xe0>)
 800f3ec:	4809      	ldr	r0, [pc, #36]	; (800f414 <etharp_raw+0xdc>)
 800f3ee:	f002 f907 	bl	8011600 <iprintf>
 800f3f2:	e7ba      	b.n	800f36a <etharp_raw+0x32>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f3f4:	4b05      	ldr	r3, [pc, #20]	; (800f40c <etharp_raw+0xd4>)
 800f3f6:	f240 4257 	movw	r2, #1111	; 0x457
 800f3fa:	4908      	ldr	r1, [pc, #32]	; (800f41c <etharp_raw+0xe4>)
 800f3fc:	4805      	ldr	r0, [pc, #20]	; (800f414 <etharp_raw+0xdc>)
 800f3fe:	f002 f8ff 	bl	8011600 <iprintf>
 800f402:	e7a6      	b.n	800f352 <etharp_raw+0x1a>
    return ERR_MEM;
 800f404:	f04f 30ff 	mov.w	r0, #4294967295
 800f408:	e7e9      	b.n	800f3de <etharp_raw+0xa6>
 800f40a:	bf00      	nop
 800f40c:	08014c2c 	.word	0x08014c2c
 800f410:	08014cdc 	.word	0x08014cdc
 800f414:	080124d0 	.word	0x080124d0
 800f418:	08014ca8 	.word	0x08014ca8
 800f41c:	080124c0 	.word	0x080124c0

0800f420 <etharp_output_to_arp_index>:
{
 800f420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800f424:	4f39      	ldr	r7, [pc, #228]	; (800f50c <etharp_output_to_arp_index+0xec>)
 800f426:	eb02 0942 	add.w	r9, r2, r2, lsl #1
{
 800f42a:	b084      	sub	sp, #16
 800f42c:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800f42e:	eb07 09c9 	add.w	r9, r7, r9, lsl #3
{
 800f432:	4605      	mov	r5, r0
 800f434:	460e      	mov	r6, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800f436:	ea4f 0842 	mov.w	r8, r2, lsl #1
 800f43a:	f899 3014 	ldrb.w	r3, [r9, #20]
 800f43e:	2b01      	cmp	r3, #1
 800f440:	d93d      	bls.n	800f4be <etharp_output_to_arp_index+0x9e>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800f442:	2b02      	cmp	r3, #2
 800f444:	d013      	beq.n	800f46e <etharp_output_to_arp_index+0x4e>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f446:	f04f 0918 	mov.w	r9, #24
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f44a:	f105 0a26 	add.w	sl, r5, #38	; 0x26
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f44e:	fb09 7904 	mla	r9, r9, r4, r7
 800f452:	f109 090c 	add.w	r9, r9, #12
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800f456:	f44f 6400 	mov.w	r4, #2048	; 0x800
 800f45a:	464b      	mov	r3, r9
 800f45c:	4652      	mov	r2, sl
 800f45e:	4631      	mov	r1, r6
 800f460:	4628      	mov	r0, r5
 800f462:	9400      	str	r4, [sp, #0]
 800f464:	f001 fa64 	bl	8010930 <ethernet_output>
}
 800f468:	b004      	add	sp, #16
 800f46a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800f46e:	44a0      	add	r8, r4
 800f470:	eb07 08c8 	add.w	r8, r7, r8, lsl #3
 800f474:	f8b8 3012 	ldrh.w	r3, [r8, #18]
 800f478:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800f47c:	d829      	bhi.n	800f4d2 <etharp_output_to_arp_index+0xb2>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800f47e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800f482:	d3e0      	bcc.n	800f446 <etharp_output_to_arp_index+0x26>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f484:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f488:	2301      	movs	r3, #1
 800f48a:	f105 0a26 	add.w	sl, r5, #38	; 0x26
 800f48e:	4628      	mov	r0, r5
 800f490:	00e4      	lsls	r4, r4, #3
 800f492:	9303      	str	r3, [sp, #12]
 800f494:	4b1e      	ldr	r3, [pc, #120]	; (800f510 <etharp_output_to_arp_index+0xf0>)
 800f496:	4651      	mov	r1, sl
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f498:	f104 090c 	add.w	r9, r4, #12
 800f49c:	3404      	adds	r4, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f49e:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800f4a0:	1d2b      	adds	r3, r5, #4
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f4a2:	44b9      	add	r9, r7
 800f4a4:	4427      	add	r7, r4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f4a6:	9300      	str	r3, [sp, #0]
 800f4a8:	4653      	mov	r3, sl
 800f4aa:	464a      	mov	r2, r9
 800f4ac:	9702      	str	r7, [sp, #8]
 800f4ae:	f7ff ff43 	bl	800f338 <etharp_raw>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f4b2:	2800      	cmp	r0, #0
 800f4b4:	d1cf      	bne.n	800f456 <etharp_output_to_arp_index+0x36>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f4b6:	2303      	movs	r3, #3
 800f4b8:	f888 3014 	strb.w	r3, [r8, #20]
 800f4bc:	e7cb      	b.n	800f456 <etharp_output_to_arp_index+0x36>
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800f4be:	4b15      	ldr	r3, [pc, #84]	; (800f514 <etharp_output_to_arp_index+0xf4>)
 800f4c0:	f240 22ee 	movw	r2, #750	; 0x2ee
 800f4c4:	4914      	ldr	r1, [pc, #80]	; (800f518 <etharp_output_to_arp_index+0xf8>)
 800f4c6:	4815      	ldr	r0, [pc, #84]	; (800f51c <etharp_output_to_arp_index+0xfc>)
 800f4c8:	f002 f89a 	bl	8011600 <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800f4cc:	f899 3014 	ldrb.w	r3, [r9, #20]
 800f4d0:	e7b7      	b.n	800f442 <etharp_output_to_arp_index+0x22>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800f4d2:	eb04 0944 	add.w	r9, r4, r4, lsl #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f4d6:	2301      	movs	r3, #1
 800f4d8:	f105 0a26 	add.w	sl, r5, #38	; 0x26
 800f4dc:	4a10      	ldr	r2, [pc, #64]	; (800f520 <etharp_output_to_arp_index+0x100>)
 800f4de:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 800f4e2:	9303      	str	r3, [sp, #12]
 800f4e4:	4651      	mov	r1, sl
 800f4e6:	4628      	mov	r0, r5
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800f4e8:	f109 0304 	add.w	r3, r9, #4
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f4ec:	f109 090c 	add.w	r9, r9, #12
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800f4f0:	443b      	add	r3, r7
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f4f2:	44b9      	add	r9, r7
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f4f4:	9302      	str	r3, [sp, #8]
 800f4f6:	4b06      	ldr	r3, [pc, #24]	; (800f510 <etharp_output_to_arp_index+0xf0>)
 800f4f8:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800f4fa:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f4fc:	9300      	str	r3, [sp, #0]
 800f4fe:	4653      	mov	r3, sl
 800f500:	f7ff ff1a 	bl	800f338 <etharp_raw>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800f504:	2800      	cmp	r0, #0
 800f506:	d0d6      	beq.n	800f4b6 <etharp_output_to_arp_index+0x96>
 800f508:	e7a5      	b.n	800f456 <etharp_output_to_arp_index+0x36>
 800f50a:	bf00      	nop
 800f50c:	2400e6b8 	.word	0x2400e6b8
 800f510:	08015108 	.word	0x08015108
 800f514:	08014c2c 	.word	0x08014c2c
 800f518:	08014d20 	.word	0x08014d20
 800f51c:	080124d0 	.word	0x080124d0
 800f520:	08015100 	.word	0x08015100

0800f524 <etharp_tmr>:
{
 800f524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f528:	4c20      	ldr	r4, [pc, #128]	; (800f5ac <etharp_tmr+0x88>)
 800f52a:	b084      	sub	sp, #16
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800f52c:	2600      	movs	r6, #0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f52e:	f8df 8084 	ldr.w	r8, [pc, #132]	; 800f5b4 <etharp_tmr+0x90>
 800f532:	4f1f      	ldr	r7, [pc, #124]	; (800f5b0 <etharp_tmr+0x8c>)
 800f534:	f104 05f0 	add.w	r5, r4, #240	; 0xf0
 800f538:	e00c      	b.n	800f554 <etharp_tmr+0x30>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800f53a:	2a01      	cmp	r2, #1
 800f53c:	d101      	bne.n	800f542 <etharp_tmr+0x1e>
 800f53e:	2b04      	cmp	r3, #4
 800f540:	d812      	bhi.n	800f568 <etharp_tmr+0x44>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800f542:	2a03      	cmp	r2, #3
 800f544:	d01e      	beq.n	800f584 <etharp_tmr+0x60>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800f546:	2a04      	cmp	r2, #4
 800f548:	d01f      	beq.n	800f58a <etharp_tmr+0x66>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800f54a:	2a01      	cmp	r2, #1
 800f54c:	d020      	beq.n	800f590 <etharp_tmr+0x6c>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f54e:	3418      	adds	r4, #24
 800f550:	42ac      	cmp	r4, r5
 800f552:	d014      	beq.n	800f57e <etharp_tmr+0x5a>
    u8_t state = arp_table[i].state;
 800f554:	7c22      	ldrb	r2, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 800f556:	2a00      	cmp	r2, #0
 800f558:	d0f9      	beq.n	800f54e <etharp_tmr+0x2a>
      arp_table[i].ctime++;
 800f55a:	89e3      	ldrh	r3, [r4, #14]
 800f55c:	3301      	adds	r3, #1
 800f55e:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800f560:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 800f564:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800f566:	d3e8      	bcc.n	800f53a <etharp_tmr+0x16>
  if (arp_table[i].q != NULL) {
 800f568:	f854 0c04 	ldr.w	r0, [r4, #-4]
 800f56c:	b118      	cbz	r0, 800f576 <etharp_tmr+0x52>
    free_etharp_q(arp_table[i].q);
 800f56e:	f7fa fe95 	bl	800a29c <pbuf_free>
    arp_table[i].q = NULL;
 800f572:	f844 6c04 	str.w	r6, [r4, #-4]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800f576:	7426      	strb	r6, [r4, #16]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f578:	3418      	adds	r4, #24
 800f57a:	42ac      	cmp	r4, r5
 800f57c:	d1ea      	bne.n	800f554 <etharp_tmr+0x30>
}
 800f57e:	b004      	add	sp, #16
 800f580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800f584:	2304      	movs	r3, #4
 800f586:	7423      	strb	r3, [r4, #16]
 800f588:	e7e1      	b.n	800f54e <etharp_tmr+0x2a>
        arp_table[i].state = ETHARP_STATE_STABLE;
 800f58a:	2302      	movs	r3, #2
 800f58c:	7423      	strb	r3, [r4, #16]
 800f58e:	e7de      	b.n	800f54e <etharp_tmr+0x2a>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800f590:	6860      	ldr	r0, [r4, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f592:	f8cd 8004 	str.w	r8, [sp, #4]
 800f596:	f100 0326 	add.w	r3, r0, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800f59a:	1d01      	adds	r1, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f59c:	e9cd 4202 	strd	r4, r2, [sp, #8]
 800f5a0:	9100      	str	r1, [sp, #0]
 800f5a2:	463a      	mov	r2, r7
 800f5a4:	4619      	mov	r1, r3
 800f5a6:	f7ff fec7 	bl	800f338 <etharp_raw>
 800f5aa:	e7d0      	b.n	800f54e <etharp_tmr+0x2a>
 800f5ac:	2400e6bc 	.word	0x2400e6bc
 800f5b0:	08015100 	.word	0x08015100
 800f5b4:	08015108 	.word	0x08015108

0800f5b8 <etharp_cleanup_netif>:
{
 800f5b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5ba:	4c0a      	ldr	r4, [pc, #40]	; (800f5e4 <etharp_cleanup_netif+0x2c>)
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800f5bc:	2700      	movs	r7, #0
{
 800f5be:	4606      	mov	r6, r0
 800f5c0:	f104 05f0 	add.w	r5, r4, #240	; 0xf0
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800f5c4:	7d23      	ldrb	r3, [r4, #20]
 800f5c6:	b113      	cbz	r3, 800f5ce <etharp_cleanup_netif+0x16>
 800f5c8:	68a3      	ldr	r3, [r4, #8]
 800f5ca:	42b3      	cmp	r3, r6
 800f5cc:	d003      	beq.n	800f5d6 <etharp_cleanup_netif+0x1e>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f5ce:	3418      	adds	r4, #24
 800f5d0:	42ac      	cmp	r4, r5
 800f5d2:	d1f7      	bne.n	800f5c4 <etharp_cleanup_netif+0xc>
}
 800f5d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (arp_table[i].q != NULL) {
 800f5d6:	6820      	ldr	r0, [r4, #0]
 800f5d8:	b110      	cbz	r0, 800f5e0 <etharp_cleanup_netif+0x28>
    free_etharp_q(arp_table[i].q);
 800f5da:	f7fa fe5f 	bl	800a29c <pbuf_free>
    arp_table[i].q = NULL;
 800f5de:	6027      	str	r7, [r4, #0]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800f5e0:	7527      	strb	r7, [r4, #20]
}
 800f5e2:	e7f4      	b.n	800f5ce <etharp_cleanup_netif+0x16>
 800f5e4:	2400e6b8 	.word	0x2400e6b8

0800f5e8 <etharp_input>:
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f5e8:	2900      	cmp	r1, #0
 800f5ea:	f000 8081 	beq.w	800f6f0 <etharp_input+0x108>
{
 800f5ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hdr = (struct etharp_hdr *)p->payload;
 800f5f2:	6846      	ldr	r6, [r0, #4]
{
 800f5f4:	b087      	sub	sp, #28
 800f5f6:	4604      	mov	r4, r0
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800f5f8:	8833      	ldrh	r3, [r6, #0]
 800f5fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f5fe:	d102      	bne.n	800f606 <etharp_input+0x1e>
 800f600:	7933      	ldrb	r3, [r6, #4]
 800f602:	2b06      	cmp	r3, #6
 800f604:	d005      	beq.n	800f612 <etharp_input+0x2a>
  pbuf_free(p);
 800f606:	4620      	mov	r0, r4
}
 800f608:	b007      	add	sp, #28
 800f60a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800f60e:	f7fa be45 	b.w	800a29c <pbuf_free>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f612:	7973      	ldrb	r3, [r6, #5]
 800f614:	2b04      	cmp	r3, #4
 800f616:	d1f6      	bne.n	800f606 <etharp_input+0x1e>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800f618:	8873      	ldrh	r3, [r6, #2]
 800f61a:	2b08      	cmp	r3, #8
 800f61c:	d1f3      	bne.n	800f606 <etharp_input+0x1e>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800f61e:	f8d6 a00e 	ldr.w	sl, [r6, #14]
 800f622:	460d      	mov	r5, r1
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f624:	684f      	ldr	r7, [r1, #4]
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800f626:	f106 0808 	add.w	r8, r6, #8
 800f62a:	69b3      	ldr	r3, [r6, #24]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800f62c:	f8cd a014 	str.w	sl, [sp, #20]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f630:	2f00      	cmp	r7, #0
 800f632:	d164      	bne.n	800f6fe <etharp_input+0x116>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800f634:	f04f 0b02 	mov.w	fp, #2
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800f638:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800f63c:	2b06      	cmp	r3, #6
 800f63e:	d162      	bne.n	800f706 <etharp_input+0x11e>
  if (ip4_addr_isany(ipaddr) ||
 800f640:	f1ba 0f00 	cmp.w	sl, #0
 800f644:	d03e      	beq.n	800f6c4 <etharp_input+0xdc>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f646:	4629      	mov	r1, r5
 800f648:	4650      	mov	r0, sl
 800f64a:	f000 fca9 	bl	800ffa0 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 800f64e:	4681      	mov	r9, r0
 800f650:	bbc0      	cbnz	r0, 800f6c4 <etharp_input+0xdc>
      ip4_addr_ismulticast(ipaddr)) {
 800f652:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f656:	f1ba 0fe0 	cmp.w	sl, #224	; 0xe0
 800f65a:	d033      	beq.n	800f6c4 <etharp_input+0xdc>
  i = etharp_find_entry(ipaddr, flags, netif);
 800f65c:	4659      	mov	r1, fp
 800f65e:	462a      	mov	r2, r5
 800f660:	a805      	add	r0, sp, #20
 800f662:	f7ff fdb1 	bl	800f1c8 <etharp_find_entry>
  if (i < 0) {
 800f666:	1e03      	subs	r3, r0, #0
 800f668:	db2c      	blt.n	800f6c4 <etharp_input+0xdc>
    arp_table[i].state = ETHARP_STATE_STABLE;
 800f66a:	492c      	ldr	r1, [pc, #176]	; (800f71c <etharp_input+0x134>)
 800f66c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800f670:	2002      	movs	r0, #2
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800f672:	f04f 0e18 	mov.w	lr, #24
    arp_table[i].state = ETHARP_STATE_STABLE;
 800f676:	eb01 0cc2 	add.w	ip, r1, r2, lsl #3
 800f67a:	00d2      	lsls	r2, r2, #3
 800f67c:	f88c 0014 	strb.w	r0, [ip, #20]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800f680:	200c      	movs	r0, #12
  arp_table[i].netif = netif;
 800f682:	f8cc 5008 	str.w	r5, [ip, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800f686:	fb13 030e 	smlabb	r3, r3, lr, r0
 800f68a:	f8d8 0000 	ldr.w	r0, [r8]
 800f68e:	50c8      	str	r0, [r1, r3]
 800f690:	440b      	add	r3, r1
 800f692:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 800f696:	8098      	strh	r0, [r3, #4]
  if (arp_table[i].q != NULL) {
 800f698:	f851 a002 	ldr.w	sl, [r1, r2]
  arp_table[i].ctime = 0;
 800f69c:	f8ac 9012 	strh.w	r9, [ip, #18]
  if (arp_table[i].q != NULL) {
 800f6a0:	f1ba 0f00 	cmp.w	sl, #0
 800f6a4:	d00e      	beq.n	800f6c4 <etharp_input+0xdc>
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800f6a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
    arp_table[i].q = NULL;
 800f6aa:	f841 9002 	str.w	r9, [r1, r2]
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800f6ae:	4628      	mov	r0, r5
 800f6b0:	f105 0226 	add.w	r2, r5, #38	; 0x26
 800f6b4:	9300      	str	r3, [sp, #0]
 800f6b6:	4651      	mov	r1, sl
 800f6b8:	4643      	mov	r3, r8
 800f6ba:	f001 f939 	bl	8010930 <ethernet_output>
    pbuf_free(p);
 800f6be:	4650      	mov	r0, sl
 800f6c0:	f7fa fdec 	bl	800a29c <pbuf_free>
  switch (hdr->opcode) {
 800f6c4:	88f3      	ldrh	r3, [r6, #6]
      if (for_us) {
 800f6c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f6ca:	d19c      	bne.n	800f606 <etharp_input+0x1e>
 800f6cc:	2f00      	cmp	r7, #0
 800f6ce:	d09a      	beq.n	800f606 <etharp_input+0x1e>
        etharp_raw(netif,
 800f6d0:	2102      	movs	r1, #2
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800f6d2:	f105 0326 	add.w	r3, r5, #38	; 0x26
        etharp_raw(netif,
 800f6d6:	4642      	mov	r2, r8
 800f6d8:	4628      	mov	r0, r5
 800f6da:	9103      	str	r1, [sp, #12]
 800f6dc:	a905      	add	r1, sp, #20
 800f6de:	f8cd 8004 	str.w	r8, [sp, #4]
 800f6e2:	9102      	str	r1, [sp, #8]
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800f6e4:	1d29      	adds	r1, r5, #4
        etharp_raw(netif,
 800f6e6:	9100      	str	r1, [sp, #0]
 800f6e8:	4619      	mov	r1, r3
 800f6ea:	f7ff fe25 	bl	800f338 <etharp_raw>
 800f6ee:	e78a      	b.n	800f606 <etharp_input+0x1e>
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f6f0:	4b0b      	ldr	r3, [pc, #44]	; (800f720 <etharp_input+0x138>)
 800f6f2:	f240 228a 	movw	r2, #650	; 0x28a
 800f6f6:	490b      	ldr	r1, [pc, #44]	; (800f724 <etharp_input+0x13c>)
 800f6f8:	480b      	ldr	r0, [pc, #44]	; (800f728 <etharp_input+0x140>)
 800f6fa:	f001 bf81 	b.w	8011600 <iprintf>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800f6fe:	429f      	cmp	r7, r3
 800f700:	d009      	beq.n	800f716 <etharp_input+0x12e>
 800f702:	2700      	movs	r7, #0
 800f704:	e796      	b.n	800f634 <etharp_input+0x4c>
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800f706:	4b06      	ldr	r3, [pc, #24]	; (800f720 <etharp_input+0x138>)
 800f708:	f240 12a9 	movw	r2, #425	; 0x1a9
 800f70c:	4907      	ldr	r1, [pc, #28]	; (800f72c <etharp_input+0x144>)
 800f70e:	4806      	ldr	r0, [pc, #24]	; (800f728 <etharp_input+0x140>)
 800f710:	f001 ff76 	bl	8011600 <iprintf>
 800f714:	e794      	b.n	800f640 <etharp_input+0x58>
 800f716:	2701      	movs	r7, #1
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800f718:	46bb      	mov	fp, r7
 800f71a:	e78d      	b.n	800f638 <etharp_input+0x50>
 800f71c:	2400e6b8 	.word	0x2400e6b8
 800f720:	08014c2c 	.word	0x08014c2c
 800f724:	080124c0 	.word	0x080124c0
 800f728:	080124d0 	.word	0x080124d0
 800f72c:	08014d70 	.word	0x08014d70

0800f730 <etharp_query>:
{
 800f730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f734:	460e      	mov	r6, r1
 800f736:	b085      	sub	sp, #20
 800f738:	4605      	mov	r5, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f73a:	4601      	mov	r1, r0
 800f73c:	6830      	ldr	r0, [r6, #0]
{
 800f73e:	4617      	mov	r7, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f740:	f000 fc2e 	bl	800ffa0 <ip4_addr_isbroadcast_u32>
 800f744:	2800      	cmp	r0, #0
 800f746:	f040 8099 	bne.w	800f87c <etharp_query+0x14c>
      ip4_addr_ismulticast(ipaddr) ||
 800f74a:	6833      	ldr	r3, [r6, #0]
 800f74c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
      ip4_addr_isany(ipaddr)) {
 800f750:	2ae0      	cmp	r2, #224	; 0xe0
 800f752:	f000 8093 	beq.w	800f87c <etharp_query+0x14c>
 800f756:	2b00      	cmp	r3, #0
 800f758:	f000 8090 	beq.w	800f87c <etharp_query+0x14c>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800f75c:	462a      	mov	r2, r5
 800f75e:	2101      	movs	r1, #1
 800f760:	4630      	mov	r0, r6
 800f762:	f7ff fd31 	bl	800f1c8 <etharp_find_entry>
  if (i_err < 0) {
 800f766:	f1b0 0800 	subs.w	r8, r0, #0
 800f76a:	db4c      	blt.n	800f806 <etharp_query+0xd6>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800f76c:	f1b8 0f7e 	cmp.w	r8, #126	; 0x7e
 800f770:	dc41      	bgt.n	800f7f6 <etharp_query+0xc6>
  i = (netif_addr_idx_t)i_err;
 800f772:	fa5f f888 	uxtb.w	r8, r8
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800f776:	f8df a144 	ldr.w	sl, [pc, #324]	; 800f8bc <etharp_query+0x18c>
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800f77a:	f105 0426 	add.w	r4, r5, #38	; 0x26
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800f77e:	eb08 0948 	add.w	r9, r8, r8, lsl #1
 800f782:	ea4f 0b48 	mov.w	fp, r8, lsl #1
 800f786:	eb0a 09c9 	add.w	r9, sl, r9, lsl #3
 800f78a:	f899 3014 	ldrb.w	r3, [r9, #20]
 800f78e:	b14b      	cbz	r3, 800f7a4 <etharp_query+0x74>
  if (is_new_entry || (q == NULL)) {
 800f790:	2f00      	cmp	r7, #0
 800f792:	d079      	beq.n	800f888 <etharp_query+0x158>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800f794:	2b01      	cmp	r3, #1
  err_t result = ERR_MEM;
 800f796:	f04f 30ff 	mov.w	r0, #4294967295
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800f79a:	d81a      	bhi.n	800f7d2 <etharp_query+0xa2>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800f79c:	d038      	beq.n	800f810 <etharp_query+0xe0>
}
 800f79e:	b005      	add	sp, #20
 800f7a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    arp_table[i].state = ETHARP_STATE_PENDING;
 800f7a4:	2301      	movs	r3, #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f7a6:	9602      	str	r6, [sp, #8]
    arp_table[i].netif = netif;
 800f7a8:	f8c9 5008 	str.w	r5, [r9, #8]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f7ac:	4621      	mov	r1, r4
 800f7ae:	9303      	str	r3, [sp, #12]
 800f7b0:	4628      	mov	r0, r5
    arp_table[i].state = ETHARP_STATE_PENDING;
 800f7b2:	f889 3014 	strb.w	r3, [r9, #20]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f7b6:	4b3b      	ldr	r3, [pc, #236]	; (800f8a4 <etharp_query+0x174>)
 800f7b8:	4a3b      	ldr	r2, [pc, #236]	; (800f8a8 <etharp_query+0x178>)
 800f7ba:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800f7bc:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f7be:	9300      	str	r3, [sp, #0]
 800f7c0:	4623      	mov	r3, r4
 800f7c2:	f7ff fdb9 	bl	800f338 <etharp_raw>
    if (q == NULL) {
 800f7c6:	2f00      	cmp	r7, #0
 800f7c8:	d0e9      	beq.n	800f79e <etharp_query+0x6e>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800f7ca:	f899 3014 	ldrb.w	r3, [r9, #20]
 800f7ce:	2b01      	cmp	r3, #1
 800f7d0:	d9e4      	bls.n	800f79c <etharp_query+0x6c>
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800f7d2:	2318      	movs	r3, #24
 800f7d4:	4622      	mov	r2, r4
 800f7d6:	f44f 6400 	mov.w	r4, #2048	; 0x800
 800f7da:	4639      	mov	r1, r7
 800f7dc:	fb03 a308 	mla	r3, r3, r8, sl
 800f7e0:	4628      	mov	r0, r5
 800f7e2:	9400      	str	r4, [sp, #0]
    ETHARP_SET_ADDRHINT(netif, i);
 800f7e4:	4c31      	ldr	r4, [pc, #196]	; (800f8ac <etharp_query+0x17c>)
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800f7e6:	330c      	adds	r3, #12
    ETHARP_SET_ADDRHINT(netif, i);
 800f7e8:	f884 8000 	strb.w	r8, [r4]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800f7ec:	f001 f8a0 	bl	8010930 <ethernet_output>
}
 800f7f0:	b005      	add	sp, #20
 800f7f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800f7f6:	4b2e      	ldr	r3, [pc, #184]	; (800f8b0 <etharp_query+0x180>)
 800f7f8:	f240 32c1 	movw	r2, #961	; 0x3c1
 800f7fc:	492d      	ldr	r1, [pc, #180]	; (800f8b4 <etharp_query+0x184>)
 800f7fe:	482e      	ldr	r0, [pc, #184]	; (800f8b8 <etharp_query+0x188>)
 800f800:	f001 fefe 	bl	8011600 <iprintf>
 800f804:	e7b5      	b.n	800f772 <etharp_query+0x42>
    return (err_t)i_err;
 800f806:	fa4f f088 	sxtb.w	r0, r8
}
 800f80a:	b005      	add	sp, #20
 800f80c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f810:	463c      	mov	r4, r7
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800f812:	4d27      	ldr	r5, [pc, #156]	; (800f8b0 <etharp_query+0x180>)
 800f814:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 800f8c0 <etharp_query+0x190>
 800f818:	4e27      	ldr	r6, [pc, #156]	; (800f8b8 <etharp_query+0x188>)
 800f81a:	e004      	b.n	800f826 <etharp_query+0xf6>
      if (PBUF_NEEDS_COPY(p)) {
 800f81c:	7b23      	ldrb	r3, [r4, #12]
 800f81e:	065a      	lsls	r2, r3, #25
 800f820:	d412      	bmi.n	800f848 <etharp_query+0x118>
      p = p->next;
 800f822:	6824      	ldr	r4, [r4, #0]
    while (p) {
 800f824:	b334      	cbz	r4, 800f874 <etharp_query+0x144>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800f826:	8962      	ldrh	r2, [r4, #10]
 800f828:	8923      	ldrh	r3, [r4, #8]
 800f82a:	429a      	cmp	r2, r3
 800f82c:	d1f6      	bne.n	800f81c <etharp_query+0xec>
 800f82e:	6822      	ldr	r2, [r4, #0]
 800f830:	462b      	mov	r3, r5
 800f832:	b132      	cbz	r2, 800f842 <etharp_query+0x112>
 800f834:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800f838:	4649      	mov	r1, r9
 800f83a:	4630      	mov	r0, r6
 800f83c:	f001 fee0 	bl	8011600 <iprintf>
 800f840:	e7ec      	b.n	800f81c <etharp_query+0xec>
      if (PBUF_NEEDS_COPY(p)) {
 800f842:	7b23      	ldrb	r3, [r4, #12]
 800f844:	065b      	lsls	r3, r3, #25
 800f846:	d515      	bpl.n	800f874 <etharp_query+0x144>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800f848:	463a      	mov	r2, r7
 800f84a:	f44f 7120 	mov.w	r1, #640	; 0x280
 800f84e:	200e      	movs	r0, #14
 800f850:	f7fa ffa2 	bl	800a798 <pbuf_clone>
    if (p != NULL) {
 800f854:	4607      	mov	r7, r0
 800f856:	b1a0      	cbz	r0, 800f882 <etharp_query+0x152>
      if (arp_table[i].q != NULL) {
 800f858:	eb0b 0308 	add.w	r3, fp, r8
 800f85c:	f85a 0033 	ldr.w	r0, [sl, r3, lsl #3]
 800f860:	b108      	cbz	r0, 800f866 <etharp_query+0x136>
        pbuf_free(arp_table[i].q);
 800f862:	f7fa fd1b 	bl	800a29c <pbuf_free>
      arp_table[i].q = p;
 800f866:	44d8      	add	r8, fp
      result = ERR_OK;
 800f868:	2000      	movs	r0, #0
      arp_table[i].q = p;
 800f86a:	f84a 7038 	str.w	r7, [sl, r8, lsl #3]
}
 800f86e:	b005      	add	sp, #20
 800f870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pbuf_ref(p);
 800f874:	4638      	mov	r0, r7
 800f876:	f7fa feab 	bl	800a5d0 <pbuf_ref>
    if (p != NULL) {
 800f87a:	e7ed      	b.n	800f858 <etharp_query+0x128>
    return ERR_ARG;
 800f87c:	f06f 000f 	mvn.w	r0, #15
 800f880:	e78d      	b.n	800f79e <etharp_query+0x6e>
      result = ERR_MEM;
 800f882:	f04f 30ff 	mov.w	r0, #4294967295
 800f886:	e78a      	b.n	800f79e <etharp_query+0x6e>
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800f888:	1d2a      	adds	r2, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f88a:	2301      	movs	r3, #1
 800f88c:	4f05      	ldr	r7, [pc, #20]	; (800f8a4 <etharp_query+0x174>)
 800f88e:	4621      	mov	r1, r4
 800f890:	4628      	mov	r0, r5
 800f892:	e9cd 6302 	strd	r6, r3, [sp, #8]
 800f896:	e9cd 2700 	strd	r2, r7, [sp]
 800f89a:	4623      	mov	r3, r4
 800f89c:	4a02      	ldr	r2, [pc, #8]	; (800f8a8 <etharp_query+0x178>)
 800f89e:	f7ff fd4b 	bl	800f338 <etharp_raw>
    if (q == NULL) {
 800f8a2:	e77c      	b.n	800f79e <etharp_query+0x6e>
 800f8a4:	08015108 	.word	0x08015108
 800f8a8:	08015100 	.word	0x08015100
 800f8ac:	2400e7a8 	.word	0x2400e7a8
 800f8b0:	08014c2c 	.word	0x08014c2c
 800f8b4:	08014d94 	.word	0x08014d94
 800f8b8:	080124d0 	.word	0x080124d0
 800f8bc:	2400e6b8 	.word	0x2400e6b8
 800f8c0:	08014da4 	.word	0x08014da4

0800f8c4 <etharp_output>:
{
 800f8c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f8c6:	460f      	mov	r7, r1
 800f8c8:	b085      	sub	sp, #20
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f8ca:	4605      	mov	r5, r0
{
 800f8cc:	4616      	mov	r6, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f8ce:	2800      	cmp	r0, #0
 800f8d0:	f000 8081 	beq.w	800f9d6 <etharp_output+0x112>
  LWIP_ASSERT("q != NULL", q != NULL);
 800f8d4:	2f00      	cmp	r7, #0
 800f8d6:	d06d      	beq.n	800f9b4 <etharp_output+0xf0>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800f8d8:	2e00      	cmp	r6, #0
 800f8da:	d074      	beq.n	800f9c6 <etharp_output+0x102>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800f8dc:	4629      	mov	r1, r5
 800f8de:	6830      	ldr	r0, [r6, #0]
 800f8e0:	f000 fb5e 	bl	800ffa0 <ip4_addr_isbroadcast_u32>
 800f8e4:	2800      	cmp	r0, #0
 800f8e6:	d163      	bne.n	800f9b0 <etharp_output+0xec>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800f8e8:	6833      	ldr	r3, [r6, #0]
 800f8ea:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800f8ee:	2ae0      	cmp	r2, #224	; 0xe0
 800f8f0:	d039      	beq.n	800f966 <etharp_output+0xa2>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f8f2:	686a      	ldr	r2, [r5, #4]
 800f8f4:	68a9      	ldr	r1, [r5, #8]
 800f8f6:	405a      	eors	r2, r3
 800f8f8:	420a      	tst	r2, r1
 800f8fa:	d009      	beq.n	800f910 <etharp_output+0x4c>
        !ip4_addr_islinklocal(ipaddr)) {
 800f8fc:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f8fe:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800f902:	4293      	cmp	r3, r2
 800f904:	d004      	beq.n	800f910 <etharp_output+0x4c>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800f906:	68eb      	ldr	r3, [r5, #12]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d076      	beq.n	800f9fa <etharp_output+0x136>
            dst_addr = netif_ip4_gw(netif);
 800f90c:	f105 060c 	add.w	r6, r5, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f910:	f8df c108 	ldr.w	ip, [pc, #264]	; 800fa1c <etharp_output+0x158>
 800f914:	4b3a      	ldr	r3, [pc, #232]	; (800fa00 <etharp_output+0x13c>)
 800f916:	f89c 2000 	ldrb.w	r2, [ip]
 800f91a:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800f91e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800f922:	7d19      	ldrb	r1, [r3, #20]
 800f924:	2901      	cmp	r1, #1
 800f926:	d902      	bls.n	800f92e <etharp_output+0x6a>
 800f928:	6899      	ldr	r1, [r3, #8]
 800f92a:	42a9      	cmp	r1, r5
 800f92c:	d05e      	beq.n	800f9ec <etharp_output+0x128>
 800f92e:	4c34      	ldr	r4, [pc, #208]	; (800fa00 <etharp_output+0x13c>)
{
 800f930:	2300      	movs	r3, #0
 800f932:	e003      	b.n	800f93c <etharp_output+0x78>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f934:	2b0a      	cmp	r3, #10
 800f936:	f104 0418 	add.w	r4, r4, #24
 800f93a:	d031      	beq.n	800f9a0 <etharp_output+0xdc>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f93c:	7d20      	ldrb	r0, [r4, #20]
 800f93e:	b2da      	uxtb	r2, r3
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f940:	3301      	adds	r3, #1
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f942:	2801      	cmp	r0, #1
 800f944:	d9f6      	bls.n	800f934 <etharp_output+0x70>
 800f946:	68a1      	ldr	r1, [r4, #8]
 800f948:	42a9      	cmp	r1, r5
 800f94a:	d1f3      	bne.n	800f934 <etharp_output+0x70>
          (arp_table[i].netif == netif) &&
 800f94c:	6830      	ldr	r0, [r6, #0]
 800f94e:	6861      	ldr	r1, [r4, #4]
 800f950:	4288      	cmp	r0, r1
 800f952:	d1ef      	bne.n	800f934 <etharp_output+0x70>
        return etharp_output_to_arp_index(netif, q, i);
 800f954:	4639      	mov	r1, r7
 800f956:	4628      	mov	r0, r5
        ETHARP_SET_ADDRHINT(netif, i);
 800f958:	f88c 2000 	strb.w	r2, [ip]
}
 800f95c:	b005      	add	sp, #20
 800f95e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        return etharp_output_to_arp_index(netif, q, i);
 800f962:	f7ff bd5d 	b.w	800f420 <etharp_output_to_arp_index>
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800f966:	7873      	ldrb	r3, [r6, #1]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800f968:	2201      	movs	r2, #1
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800f96a:	215e      	movs	r1, #94	; 0x5e
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800f96c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800f970:	f8ad 2008 	strh.w	r2, [sp, #8]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800f974:	78f2      	ldrb	r2, [r6, #3]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800f976:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800f97a:	78b3      	ldrb	r3, [r6, #2]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800f97c:	f88d 100a 	strb.w	r1, [sp, #10]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800f980:	f88d 300c 	strb.w	r3, [sp, #12]
    dest = &mcastaddr;
 800f984:	ab02      	add	r3, sp, #8
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800f986:	f88d 200d 	strb.w	r2, [sp, #13]
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800f98a:	f44f 6400 	mov.w	r4, #2048	; 0x800
 800f98e:	f105 0226 	add.w	r2, r5, #38	; 0x26
 800f992:	4639      	mov	r1, r7
 800f994:	4628      	mov	r0, r5
 800f996:	9400      	str	r4, [sp, #0]
 800f998:	f000 ffca 	bl	8010930 <ethernet_output>
}
 800f99c:	b005      	add	sp, #20
 800f99e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return etharp_query(netif, dst_addr, q);
 800f9a0:	463a      	mov	r2, r7
 800f9a2:	4631      	mov	r1, r6
 800f9a4:	4628      	mov	r0, r5
}
 800f9a6:	b005      	add	sp, #20
 800f9a8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    return etharp_query(netif, dst_addr, q);
 800f9ac:	f7ff bec0 	b.w	800f730 <etharp_query>
    dest = (const struct eth_addr *)&ethbroadcast;
 800f9b0:	4b14      	ldr	r3, [pc, #80]	; (800fa04 <etharp_output+0x140>)
 800f9b2:	e7ea      	b.n	800f98a <etharp_output+0xc6>
  LWIP_ASSERT("q != NULL", q != NULL);
 800f9b4:	4b14      	ldr	r3, [pc, #80]	; (800fa08 <etharp_output+0x144>)
 800f9b6:	f240 321f 	movw	r2, #799	; 0x31f
 800f9ba:	4914      	ldr	r1, [pc, #80]	; (800fa0c <etharp_output+0x148>)
 800f9bc:	4814      	ldr	r0, [pc, #80]	; (800fa10 <etharp_output+0x14c>)
 800f9be:	f001 fe1f 	bl	8011600 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800f9c2:	2e00      	cmp	r6, #0
 800f9c4:	d18a      	bne.n	800f8dc <etharp_output+0x18>
 800f9c6:	4b10      	ldr	r3, [pc, #64]	; (800fa08 <etharp_output+0x144>)
 800f9c8:	f44f 7248 	mov.w	r2, #800	; 0x320
 800f9cc:	4911      	ldr	r1, [pc, #68]	; (800fa14 <etharp_output+0x150>)
 800f9ce:	4810      	ldr	r0, [pc, #64]	; (800fa10 <etharp_output+0x14c>)
 800f9d0:	f001 fe16 	bl	8011600 <iprintf>
 800f9d4:	e782      	b.n	800f8dc <etharp_output+0x18>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f9d6:	4b0c      	ldr	r3, [pc, #48]	; (800fa08 <etharp_output+0x144>)
 800f9d8:	f240 321e 	movw	r2, #798	; 0x31e
 800f9dc:	490e      	ldr	r1, [pc, #56]	; (800fa18 <etharp_output+0x154>)
 800f9de:	480c      	ldr	r0, [pc, #48]	; (800fa10 <etharp_output+0x14c>)
 800f9e0:	f001 fe0e 	bl	8011600 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800f9e4:	2f00      	cmp	r7, #0
 800f9e6:	f47f af77 	bne.w	800f8d8 <etharp_output+0x14>
 800f9ea:	e7e3      	b.n	800f9b4 <etharp_output+0xf0>
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f9ec:	685b      	ldr	r3, [r3, #4]
 800f9ee:	6831      	ldr	r1, [r6, #0]
 800f9f0:	4299      	cmp	r1, r3
 800f9f2:	d19c      	bne.n	800f92e <etharp_output+0x6a>
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800f9f4:	4639      	mov	r1, r7
 800f9f6:	4628      	mov	r0, r5
 800f9f8:	e7b0      	b.n	800f95c <etharp_output+0x98>
            return ERR_RTE;
 800f9fa:	f06f 0003 	mvn.w	r0, #3
 800f9fe:	e7cd      	b.n	800f99c <etharp_output+0xd8>
 800fa00:	2400e6b8 	.word	0x2400e6b8
 800fa04:	08015100 	.word	0x08015100
 800fa08:	08014c2c 	.word	0x08014c2c
 800fa0c:	08014dc0 	.word	0x08014dc0
 800fa10:	080124d0 	.word	0x080124d0
 800fa14:	08014d50 	.word	0x08014d50
 800fa18:	080124c0 	.word	0x080124c0
 800fa1c:	2400e7a8 	.word	0x2400e7a8

0800fa20 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800fa20:	b510      	push	{r4, lr}
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800fa22:	2301      	movs	r3, #1
{
 800fa24:	b084      	sub	sp, #16
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800fa26:	4c07      	ldr	r4, [pc, #28]	; (800fa44 <etharp_request+0x24>)
 800fa28:	4a07      	ldr	r2, [pc, #28]	; (800fa48 <etharp_request+0x28>)
 800fa2a:	9401      	str	r4, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800fa2c:	1d04      	adds	r4, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800fa2e:	e9cd 1302 	strd	r1, r3, [sp, #8]
 800fa32:	f100 0326 	add.w	r3, r0, #38	; 0x26
 800fa36:	9400      	str	r4, [sp, #0]
 800fa38:	4619      	mov	r1, r3
 800fa3a:	f7ff fc7d 	bl	800f338 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 800fa3e:	b004      	add	sp, #16
 800fa40:	bd10      	pop	{r4, pc}
 800fa42:	bf00      	nop
 800fa44:	08015108 	.word	0x08015108
 800fa48:	08015100 	.word	0x08015100

0800fa4c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800fa4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa4e:	460e      	mov	r6, r1
 800fa50:	b087      	sub	sp, #28
 800fa52:	4617      	mov	r7, r2
 800fa54:	4604      	mov	r4, r0

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800fa56:	2124      	movs	r1, #36	; 0x24
 800fa58:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fa5c:	2022      	movs	r0, #34	; 0x22
 800fa5e:	f7fa fc8d 	bl	800a37c <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 800fa62:	b3a8      	cbz	r0, 800fad0 <icmp_send_response+0x84>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800fa64:	8943      	ldrh	r3, [r0, #10]
 800fa66:	4605      	mov	r5, r0
 800fa68:	2b23      	cmp	r3, #35	; 0x23
 800fa6a:	d933      	bls.n	800fad4 <icmp_send_response+0x88>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800fa6c:	6863      	ldr	r3, [r4, #4]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800fa6e:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
 800fa70:	7026      	strb	r6, [r4, #0]
  icmphdr->code = code;
  icmphdr->id = 0;
 800fa72:	2600      	movs	r6, #0
  icmphdr->code = code;
 800fa74:	7067      	strb	r7, [r4, #1]
  icmphdr->id = 0;
 800fa76:	7126      	strb	r6, [r4, #4]
 800fa78:	7166      	strb	r6, [r4, #5]
  icmphdr->seqno = 0;
 800fa7a:	71a6      	strb	r6, [r4, #6]
 800fa7c:	71e6      	strb	r6, [r4, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800fa7e:	6818      	ldr	r0, [r3, #0]
 800fa80:	6859      	ldr	r1, [r3, #4]
 800fa82:	689a      	ldr	r2, [r3, #8]
 800fa84:	68df      	ldr	r7, [r3, #12]
 800fa86:	60a0      	str	r0, [r4, #8]
 800fa88:	6167      	str	r7, [r4, #20]
 800fa8a:	60e1      	str	r1, [r4, #12]
 800fa8c:	6122      	str	r2, [r4, #16]
 800fa8e:	6918      	ldr	r0, [r3, #16]
 800fa90:	6959      	ldr	r1, [r3, #20]
 800fa92:	699a      	ldr	r2, [r3, #24]
 800fa94:	61a0      	str	r0, [r4, #24]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800fa96:	a805      	add	r0, sp, #20
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800fa98:	61e1      	str	r1, [r4, #28]
 800fa9a:	6222      	str	r2, [r4, #32]
  ip4_addr_copy(iphdr_src, iphdr->src);
 800fa9c:	68db      	ldr	r3, [r3, #12]
 800fa9e:	9305      	str	r3, [sp, #20]
  netif = ip4_route(&iphdr_src);
 800faa0:	f000 f8d6 	bl	800fc50 <ip4_route>
#endif
  if (netif != NULL) {
 800faa4:	4607      	mov	r7, r0
 800faa6:	b180      	cbz	r0, 800faca <icmp_send_response+0x7e>
    /* calculate checksum */
    icmphdr->chksum = 0;
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800faa8:	8969      	ldrh	r1, [r5, #10]
 800faaa:	4620      	mov	r0, r4
    icmphdr->chksum = 0;
 800faac:	70a6      	strb	r6, [r4, #2]
 800faae:	70e6      	strb	r6, [r4, #3]
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800fab0:	f7f9 fcb2 	bl	8009418 <inet_chksum>
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800fab4:	2301      	movs	r3, #1
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800fab6:	8060      	strh	r0, [r4, #2]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800fab8:	aa05      	add	r2, sp, #20
 800faba:	4631      	mov	r1, r6
 800fabc:	4628      	mov	r0, r5
 800fabe:	9600      	str	r6, [sp, #0]
 800fac0:	e9cd 3701 	strd	r3, r7, [sp, #4]
 800fac4:	23ff      	movs	r3, #255	; 0xff
 800fac6:	f000 fa59 	bl	800ff7c <ip4_output_if>
  }
  pbuf_free(q);
 800faca:	4628      	mov	r0, r5
 800facc:	f7fa fbe6 	bl	800a29c <pbuf_free>
}
 800fad0:	b007      	add	sp, #28
 800fad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800fad4:	4b03      	ldr	r3, [pc, #12]	; (800fae4 <icmp_send_response+0x98>)
 800fad6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800fada:	4903      	ldr	r1, [pc, #12]	; (800fae8 <icmp_send_response+0x9c>)
 800fadc:	4803      	ldr	r0, [pc, #12]	; (800faec <icmp_send_response+0xa0>)
 800fade:	f001 fd8f 	bl	8011600 <iprintf>
 800fae2:	e7c3      	b.n	800fa6c <icmp_send_response+0x20>
 800fae4:	08014dcc 	.word	0x08014dcc
 800fae8:	08014e04 	.word	0x08014e04
 800faec:	080124d0 	.word	0x080124d0

0800faf0 <icmp_input>:
{
 800faf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 800faf4:	4f4c      	ldr	r7, [pc, #304]	; (800fc28 <icmp_input+0x138>)
{
 800faf6:	b087      	sub	sp, #28
 800faf8:	4605      	mov	r5, r0
  iphdr_in = ip4_current_header();
 800fafa:	f8d7 8008 	ldr.w	r8, [r7, #8]
  hlen = IPH_HL_BYTES(iphdr_in);
 800fafe:	f898 4000 	ldrb.w	r4, [r8]
 800fb02:	f004 040f 	and.w	r4, r4, #15
 800fb06:	00a4      	lsls	r4, r4, #2
  if (hlen < IP_HLEN) {
 800fb08:	2c13      	cmp	r4, #19
 800fb0a:	d913      	bls.n	800fb34 <icmp_input+0x44>
  if (p->len < sizeof(u16_t) * 2) {
 800fb0c:	8943      	ldrh	r3, [r0, #10]
 800fb0e:	2b03      	cmp	r3, #3
 800fb10:	d910      	bls.n	800fb34 <icmp_input+0x44>
  type = *((u8_t *)p->payload);
 800fb12:	6843      	ldr	r3, [r0, #4]
  switch (type) {
 800fb14:	781b      	ldrb	r3, [r3, #0]
 800fb16:	2b08      	cmp	r3, #8
 800fb18:	d10c      	bne.n	800fb34 <icmp_input+0x44>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fb1a:	6978      	ldr	r0, [r7, #20]
 800fb1c:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 800fb20:	2be0      	cmp	r3, #224	; 0xe0
 800fb22:	d007      	beq.n	800fb34 <icmp_input+0x44>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800fb24:	460e      	mov	r6, r1
 800fb26:	6839      	ldr	r1, [r7, #0]
 800fb28:	f000 fa3a 	bl	800ffa0 <ip4_addr_isbroadcast_u32>
 800fb2c:	b910      	cbnz	r0, 800fb34 <icmp_input+0x44>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800fb2e:	892b      	ldrh	r3, [r5, #8]
 800fb30:	2b07      	cmp	r3, #7
 800fb32:	d805      	bhi.n	800fb40 <icmp_input+0x50>
  pbuf_free(p);
 800fb34:	4628      	mov	r0, r5
}
 800fb36:	b007      	add	sp, #28
 800fb38:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 800fb3c:	f7fa bbae 	b.w	800a29c <pbuf_free>
        if (inet_chksum_pbuf(p) != 0) {
 800fb40:	4628      	mov	r0, r5
 800fb42:	f7f9 fc6f 	bl	8009424 <inet_chksum_pbuf>
 800fb46:	2800      	cmp	r0, #0
 800fb48:	d1f4      	bne.n	800fb34 <icmp_input+0x44>
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800fb4a:	f104 010e 	add.w	r1, r4, #14
 800fb4e:	4628      	mov	r0, r5
 800fb50:	9105      	str	r1, [sp, #20]
 800fb52:	f7fa fb03 	bl	800a15c <pbuf_add_header>
 800fb56:	9905      	ldr	r1, [sp, #20]
 800fb58:	2800      	cmp	r0, #0
 800fb5a:	d04b      	beq.n	800fbf4 <icmp_input+0x104>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800fb5c:	892b      	ldrh	r3, [r5, #8]
 800fb5e:	1919      	adds	r1, r3, r4
 800fb60:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
 800fb62:	428b      	cmp	r3, r1
 800fb64:	d8e6      	bhi.n	800fb34 <icmp_input+0x44>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800fb66:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fb6a:	200e      	movs	r0, #14
 800fb6c:	f7fa fc06 	bl	800a37c <pbuf_alloc>
        if (r == NULL) {
 800fb70:	4681      	mov	r9, r0
 800fb72:	2800      	cmp	r0, #0
 800fb74:	d0de      	beq.n	800fb34 <icmp_input+0x44>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800fb76:	8942      	ldrh	r2, [r0, #10]
 800fb78:	f104 0308 	add.w	r3, r4, #8
 800fb7c:	429a      	cmp	r2, r3
 800fb7e:	d345      	bcc.n	800fc0c <icmp_input+0x11c>
        MEMCPY(r->payload, iphdr_in, hlen);
 800fb80:	4641      	mov	r1, r8
 800fb82:	4622      	mov	r2, r4
 800fb84:	6840      	ldr	r0, [r0, #4]
 800fb86:	f001 ff6c 	bl	8011a62 <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 800fb8a:	4621      	mov	r1, r4
 800fb8c:	4648      	mov	r0, r9
 800fb8e:	f7fa fb19 	bl	800a1c4 <pbuf_remove_header>
 800fb92:	2800      	cmp	r0, #0
 800fb94:	d13e      	bne.n	800fc14 <icmp_input+0x124>
        if (pbuf_copy(r, p) != ERR_OK) {
 800fb96:	4629      	mov	r1, r5
 800fb98:	4648      	mov	r0, r9
 800fb9a:	f7fa fd91 	bl	800a6c0 <pbuf_copy>
 800fb9e:	2800      	cmp	r0, #0
 800fba0:	d134      	bne.n	800fc0c <icmp_input+0x11c>
        pbuf_free(p);
 800fba2:	4628      	mov	r0, r5
 800fba4:	464d      	mov	r5, r9
 800fba6:	f7fa fb79 	bl	800a29c <pbuf_free>
      if (pbuf_add_header(p, hlen)) {
 800fbaa:	4621      	mov	r1, r4
 800fbac:	4628      	mov	r0, r5
      iecho = (struct icmp_echo_hdr *)p->payload;
 800fbae:	686c      	ldr	r4, [r5, #4]
      if (pbuf_add_header(p, hlen)) {
 800fbb0:	f7fa fad4 	bl	800a15c <pbuf_add_header>
 800fbb4:	2800      	cmp	r0, #0
 800fbb6:	d1bd      	bne.n	800fb34 <icmp_input+0x44>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800fbb8:	6869      	ldr	r1, [r5, #4]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800fbba:	f64f 72f7 	movw	r2, #65527	; 0xfff7
        ip4_addr_copy(iphdr->src, *src);
 800fbbe:	697b      	ldr	r3, [r7, #20]
 800fbc0:	60cb      	str	r3, [r1, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800fbc2:	693b      	ldr	r3, [r7, #16]
 800fbc4:	610b      	str	r3, [r1, #16]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800fbc6:	8863      	ldrh	r3, [r4, #2]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800fbc8:	7020      	strb	r0, [r4, #0]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800fbca:	4628      	mov	r0, r5
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800fbcc:	4293      	cmp	r3, r2
        IPH_CHKSUM_SET(iphdr, 0);
 800fbce:	f04f 0200 	mov.w	r2, #0
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 800fbd2:	bf8c      	ite	hi
 800fbd4:	3309      	addhi	r3, #9
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 800fbd6:	3308      	addls	r3, #8
 800fbd8:	b29b      	uxth	r3, r3
 800fbda:	8063      	strh	r3, [r4, #2]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800fbdc:	23ff      	movs	r3, #255	; 0xff
        IPH_CHKSUM_SET(iphdr, 0);
 800fbde:	728a      	strb	r2, [r1, #10]
 800fbe0:	72ca      	strb	r2, [r1, #11]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800fbe2:	720b      	strb	r3, [r1, #8]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800fbe4:	2101      	movs	r1, #1
 800fbe6:	9200      	str	r2, [sp, #0]
 800fbe8:	e9cd 1601 	strd	r1, r6, [sp, #4]
 800fbec:	490f      	ldr	r1, [pc, #60]	; (800fc2c <icmp_input+0x13c>)
 800fbee:	f000 f9c5 	bl	800ff7c <ip4_output_if>
  pbuf_free(p);
 800fbf2:	e79f      	b.n	800fb34 <icmp_input+0x44>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800fbf4:	4628      	mov	r0, r5
 800fbf6:	f7fa fae5 	bl	800a1c4 <pbuf_remove_header>
 800fbfa:	2800      	cmp	r0, #0
 800fbfc:	d0d5      	beq.n	800fbaa <icmp_input+0xba>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800fbfe:	4b0c      	ldr	r3, [pc, #48]	; (800fc30 <icmp_input+0x140>)
 800fc00:	22c7      	movs	r2, #199	; 0xc7
 800fc02:	490c      	ldr	r1, [pc, #48]	; (800fc34 <icmp_input+0x144>)
 800fc04:	480c      	ldr	r0, [pc, #48]	; (800fc38 <icmp_input+0x148>)
 800fc06:	f001 fcfb 	bl	8011600 <iprintf>
          goto icmperr;
 800fc0a:	e793      	b.n	800fb34 <icmp_input+0x44>
          pbuf_free(r);
 800fc0c:	4648      	mov	r0, r9
 800fc0e:	f7fa fb45 	bl	800a29c <pbuf_free>
          goto icmperr;
 800fc12:	e78f      	b.n	800fb34 <icmp_input+0x44>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800fc14:	4b06      	ldr	r3, [pc, #24]	; (800fc30 <icmp_input+0x140>)
 800fc16:	22b6      	movs	r2, #182	; 0xb6
 800fc18:	4908      	ldr	r1, [pc, #32]	; (800fc3c <icmp_input+0x14c>)
 800fc1a:	4807      	ldr	r0, [pc, #28]	; (800fc38 <icmp_input+0x148>)
 800fc1c:	f001 fcf0 	bl	8011600 <iprintf>
          pbuf_free(r);
 800fc20:	4648      	mov	r0, r9
 800fc22:	f7fa fb3b 	bl	800a29c <pbuf_free>
          goto icmperr;
 800fc26:	e785      	b.n	800fb34 <icmp_input+0x44>
 800fc28:	2400b54c 	.word	0x2400b54c
 800fc2c:	2400b560 	.word	0x2400b560
 800fc30:	08014dcc 	.word	0x08014dcc
 800fc34:	08014e68 	.word	0x08014e68
 800fc38:	080124d0 	.word	0x080124d0
 800fc3c:	08014e30 	.word	0x08014e30

0800fc40 <icmp_dest_unreach>:
{
 800fc40:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 800fc42:	2103      	movs	r1, #3
 800fc44:	f7ff bf02 	b.w	800fa4c <icmp_send_response>

0800fc48 <icmp_time_exceeded>:
{
 800fc48:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 800fc4a:	210b      	movs	r1, #11
 800fc4c:	f7ff befe 	b.w	800fa4c <icmp_send_response>

0800fc50 <ip4_route>:

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800fc50:	4b19      	ldr	r3, [pc, #100]	; (800fcb8 <ip4_route+0x68>)
{
 800fc52:	b430      	push	{r4, r5}
  NETIF_FOREACH(netif) {
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	b1ab      	cbz	r3, 800fc84 <ip4_route+0x34>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800fc58:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800fc5c:	07d4      	lsls	r4, r2, #31
 800fc5e:	d5f9      	bpl.n	800fc54 <ip4_route+0x4>
 800fc60:	0751      	lsls	r1, r2, #29
 800fc62:	d5f7      	bpl.n	800fc54 <ip4_route+0x4>
 800fc64:	6859      	ldr	r1, [r3, #4]
 800fc66:	2900      	cmp	r1, #0
 800fc68:	d0f4      	beq.n	800fc54 <ip4_route+0x4>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800fc6a:	6804      	ldr	r4, [r0, #0]
 800fc6c:	689d      	ldr	r5, [r3, #8]
 800fc6e:	4061      	eors	r1, r4
 800fc70:	4229      	tst	r1, r5
 800fc72:	d004      	beq.n	800fc7e <ip4_route+0x2e>
        /* return netif on which to forward IP packet */
        return netif;
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800fc74:	0792      	lsls	r2, r2, #30
 800fc76:	d4ed      	bmi.n	800fc54 <ip4_route+0x4>
 800fc78:	68da      	ldr	r2, [r3, #12]
 800fc7a:	4294      	cmp	r4, r2
 800fc7c:	d1ea      	bne.n	800fc54 <ip4_route+0x4>
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
  }

  return netif_default;
}
 800fc7e:	4618      	mov	r0, r3
 800fc80:	bc30      	pop	{r4, r5}
 800fc82:	4770      	bx	lr
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800fc84:	4b0d      	ldr	r3, [pc, #52]	; (800fcbc <ip4_route+0x6c>)
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d0f8      	beq.n	800fc7e <ip4_route+0x2e>
 800fc8c:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800fc90:	f002 0205 	and.w	r2, r2, #5
 800fc94:	2a05      	cmp	r2, #5
 800fc96:	d108      	bne.n	800fcaa <ip4_route+0x5a>
 800fc98:	685a      	ldr	r2, [r3, #4]
 800fc9a:	b152      	cbz	r2, 800fcb2 <ip4_route+0x62>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800fc9c:	7802      	ldrb	r2, [r0, #0]
    return NULL;
 800fc9e:	2a7f      	cmp	r2, #127	; 0x7f
 800fca0:	bf08      	it	eq
 800fca2:	2300      	moveq	r3, #0
}
 800fca4:	bc30      	pop	{r4, r5}
 800fca6:	4618      	mov	r0, r3
 800fca8:	4770      	bx	lr
    return NULL;
 800fcaa:	2300      	movs	r3, #0
}
 800fcac:	bc30      	pop	{r4, r5}
 800fcae:	4618      	mov	r0, r3
 800fcb0:	4770      	bx	lr
    return NULL;
 800fcb2:	4613      	mov	r3, r2
 800fcb4:	e7e3      	b.n	800fc7e <ip4_route+0x2e>
 800fcb6:	bf00      	nop
 800fcb8:	2400e644 	.word	0x2400e644
 800fcbc:	2400e640 	.word	0x2400e640

0800fcc0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800fcc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800fcc4:	6847      	ldr	r7, [r0, #4]
{
 800fcc6:	4604      	mov	r4, r0
  if (IPH_V(iphdr) != 4) {
 800fcc8:	783b      	ldrb	r3, [r7, #0]
 800fcca:	091a      	lsrs	r2, r3, #4
 800fccc:	2a04      	cmp	r2, #4
 800fcce:	f040 808e 	bne.w	800fdee <ip4_input+0x12e>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800fcd2:	f003 030f 	and.w	r3, r3, #15
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800fcd6:	8878      	ldrh	r0, [r7, #2]
 800fcd8:	460e      	mov	r6, r1
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800fcda:	ea4f 0983 	mov.w	r9, r3, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800fcde:	f7f9 fb5b 	bl	8009398 <lwip_htons>

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800fce2:	8923      	ldrh	r3, [r4, #8]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800fce4:	464d      	mov	r5, r9
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800fce6:	4680      	mov	r8, r0
  if (iphdr_len < p->tot_len) {
 800fce8:	4283      	cmp	r3, r0
 800fcea:	f200 8086 	bhi.w	800fdfa <ip4_input+0x13a>
    pbuf_realloc(p, iphdr_len);
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800fcee:	8963      	ldrh	r3, [r4, #10]
 800fcf0:	42ab      	cmp	r3, r5
 800fcf2:	d37c      	bcc.n	800fdee <ip4_input+0x12e>
 800fcf4:	8923      	ldrh	r3, [r4, #8]
 800fcf6:	4543      	cmp	r3, r8
 800fcf8:	d379      	bcc.n	800fdee <ip4_input+0x12e>
 800fcfa:	2d13      	cmp	r5, #19
 800fcfc:	d977      	bls.n	800fdee <ip4_input+0x12e>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800fcfe:	693b      	ldr	r3, [r7, #16]
 800fd00:	f8df 8170 	ldr.w	r8, [pc, #368]	; 800fe74 <ip4_input+0x1b4>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fd04:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800fd08:	f8c8 3014 	str.w	r3, [r8, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fd0c:	2ae0      	cmp	r2, #224	; 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800fd0e:	68f8      	ldr	r0, [r7, #12]
 800fd10:	f8c8 0010 	str.w	r0, [r8, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fd14:	d076      	beq.n	800fe04 <ip4_input+0x144>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800fd16:	f896 202d 	ldrb.w	r2, [r6, #45]	; 0x2d
 800fd1a:	07d2      	lsls	r2, r2, #31
 800fd1c:	d503      	bpl.n	800fd26 <ip4_input+0x66>
 800fd1e:	6872      	ldr	r2, [r6, #4]
 800fd20:	2a00      	cmp	r2, #0
 800fd22:	f040 8082 	bne.w	800fe2a <ip4_input+0x16a>
      netif = NULL;
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800fd26:	b2db      	uxtb	r3, r3
 800fd28:	2b7f      	cmp	r3, #127	; 0x7f
 800fd2a:	f000 8088 	beq.w	800fe3e <ip4_input+0x17e>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800fd2e:	4b50      	ldr	r3, [pc, #320]	; (800fe70 <ip4_input+0x1b0>)
 800fd30:	681d      	ldr	r5, [r3, #0]
 800fd32:	b92d      	cbnz	r5, 800fd40 <ip4_input+0x80>
 800fd34:	e083      	b.n	800fe3e <ip4_input+0x17e>
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800fd36:	f000 f933 	bl	800ffa0 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800fd3a:	b978      	cbnz	r0, 800fd5c <ip4_input+0x9c>
        NETIF_FOREACH(netif) {
 800fd3c:	682d      	ldr	r5, [r5, #0]
 800fd3e:	b16d      	cbz	r5, 800fd5c <ip4_input+0x9c>
          if (netif == inp) {
 800fd40:	42ae      	cmp	r6, r5
 800fd42:	d0fb      	beq.n	800fd3c <ip4_input+0x7c>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800fd44:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 800fd48:	07db      	lsls	r3, r3, #31
 800fd4a:	d5f7      	bpl.n	800fd3c <ip4_input+0x7c>
 800fd4c:	686b      	ldr	r3, [r5, #4]
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d0f4      	beq.n	800fd3c <ip4_input+0x7c>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800fd52:	f8d8 0014 	ldr.w	r0, [r8, #20]
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800fd56:	4629      	mov	r1, r5
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800fd58:	4283      	cmp	r3, r0
 800fd5a:	d1ec      	bne.n	800fd36 <ip4_input+0x76>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800fd5c:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800fd60:	4631      	mov	r1, r6
 800fd62:	f000 f91d 	bl	800ffa0 <ip4_addr_isbroadcast_u32>
 800fd66:	2800      	cmp	r0, #0
 800fd68:	d141      	bne.n	800fdee <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800fd6a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800fd6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800fd72:	2be0      	cmp	r3, #224	; 0xe0
 800fd74:	d03b      	beq.n	800fdee <ip4_input+0x12e>
      return ERR_OK;
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800fd76:	b3d5      	cbz	r5, 800fdee <ip4_input+0x12e>
    }
    pbuf_free(p);
    return ERR_OK;
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800fd78:	88fb      	ldrh	r3, [r7, #6]
 800fd7a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d14b      	bne.n	800fe1a <ip4_input+0x15a>
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
  ip_data.current_input_netif = inp;
  ip_data.current_ip4_header = iphdr;
 800fd82:	f8c8 7008 	str.w	r7, [r8, #8]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800fd86:	4649      	mov	r1, r9
 800fd88:	4620      	mov	r0, r4
  ip_data.current_input_netif = inp;
 800fd8a:	e9c8 5600 	strd	r5, r6, [r8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800fd8e:	783b      	ldrb	r3, [r7, #0]
 800fd90:	f003 030f 	and.w	r3, r3, #15
 800fd94:	009b      	lsls	r3, r3, #2
 800fd96:	f8a8 300c 	strh.w	r3, [r8, #12]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800fd9a:	f7fa fa13 	bl	800a1c4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800fd9e:	7a7b      	ldrb	r3, [r7, #9]
 800fda0:	2b06      	cmp	r3, #6
 800fda2:	d05a      	beq.n	800fe5a <ip4_input+0x19a>
 800fda4:	2b11      	cmp	r3, #17
 800fda6:	d053      	beq.n	800fe50 <ip4_input+0x190>
 800fda8:	2b01      	cmp	r3, #1
 800fdaa:	d04c      	beq.n	800fe46 <ip4_input+0x186>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800fdac:	4629      	mov	r1, r5
 800fdae:	f8d8 0014 	ldr.w	r0, [r8, #20]
 800fdb2:	f000 f8f5 	bl	800ffa0 <ip4_addr_isbroadcast_u32>
 800fdb6:	b968      	cbnz	r0, 800fdd4 <ip4_input+0x114>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fdb8:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800fdbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800fdc0:	2be0      	cmp	r3, #224	; 0xe0
 800fdc2:	d007      	beq.n	800fdd4 <ip4_input+0x114>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800fdc4:	4649      	mov	r1, r9
 800fdc6:	4620      	mov	r0, r4
 800fdc8:	f7fa fa30 	bl	800a22c <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800fdcc:	2102      	movs	r1, #2
 800fdce:	4620      	mov	r0, r4
 800fdd0:	f7ff ff36 	bl	800fc40 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800fdd4:	4620      	mov	r0, r4
 800fdd6:	f7fa fa61 	bl	800a29c <pbuf_free>
        break;
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800fdda:	2300      	movs	r3, #0
  ip_data.current_input_netif = NULL;
 800fddc:	e9c8 3300 	strd	r3, r3, [r8]
  ip_data.current_ip4_header = NULL;
 800fde0:	f8c8 3008 	str.w	r3, [r8, #8]
  ip_data.current_ip_header_tot_len = 0;
 800fde4:	f8a8 300c 	strh.w	r3, [r8, #12]
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());
 800fde8:	e9c8 3304 	strd	r3, r3, [r8, #16]

  return ERR_OK;
 800fdec:	e002      	b.n	800fdf4 <ip4_input+0x134>
    pbuf_free(p);
 800fdee:	4620      	mov	r0, r4
 800fdf0:	f7fa fa54 	bl	800a29c <pbuf_free>
}
 800fdf4:	2000      	movs	r0, #0
 800fdf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    pbuf_realloc(p, iphdr_len);
 800fdfa:	4601      	mov	r1, r0
 800fdfc:	4620      	mov	r0, r4
 800fdfe:	f7fa fb67 	bl	800a4d0 <pbuf_realloc>
 800fe02:	e774      	b.n	800fcee <ip4_input+0x2e>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800fe04:	f896 502d 	ldrb.w	r5, [r6, #45]	; 0x2d
 800fe08:	f015 0501 	ands.w	r5, r5, #1
 800fe0c:	d0a8      	beq.n	800fd60 <ip4_input+0xa0>
 800fe0e:	6873      	ldr	r3, [r6, #4]
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	bf14      	ite	ne
 800fe14:	4635      	movne	r5, r6
 800fe16:	2500      	moveq	r5, #0
 800fe18:	e7a2      	b.n	800fd60 <ip4_input+0xa0>
    p = ip4_reass(p);
 800fe1a:	4620      	mov	r0, r4
 800fe1c:	f000 f9ea 	bl	80101f4 <ip4_reass>
    if (p == NULL) {
 800fe20:	4604      	mov	r4, r0
 800fe22:	2800      	cmp	r0, #0
 800fe24:	d0e6      	beq.n	800fdf4 <ip4_input+0x134>
    iphdr = (const struct ip_hdr *)p->payload;
 800fe26:	6847      	ldr	r7, [r0, #4]
 800fe28:	e7ab      	b.n	800fd82 <ip4_input+0xc2>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800fe2a:	4293      	cmp	r3, r2
 800fe2c:	d01a      	beq.n	800fe64 <ip4_input+0x1a4>
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800fe2e:	4618      	mov	r0, r3
 800fe30:	4631      	mov	r1, r6
 800fe32:	f000 f8b5 	bl	800ffa0 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800fe36:	b9b8      	cbnz	r0, 800fe68 <ip4_input+0x1a8>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800fe38:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800fe3c:	e773      	b.n	800fd26 <ip4_input+0x66>
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800fe3e:	f8d8 0010 	ldr.w	r0, [r8, #16]
      netif = NULL;
 800fe42:	2500      	movs	r5, #0
 800fe44:	e78c      	b.n	800fd60 <ip4_input+0xa0>
        icmp_input(p, inp);
 800fe46:	4631      	mov	r1, r6
 800fe48:	4620      	mov	r0, r4
 800fe4a:	f7ff fe51 	bl	800faf0 <icmp_input>
        break;
 800fe4e:	e7c4      	b.n	800fdda <ip4_input+0x11a>
        udp_input(p, inp);
 800fe50:	4631      	mov	r1, r6
 800fe52:	4620      	mov	r0, r4
 800fe54:	f7fe fe66 	bl	800eb24 <udp_input>
        break;
 800fe58:	e7bf      	b.n	800fdda <ip4_input+0x11a>
        tcp_input(p, inp);
 800fe5a:	4631      	mov	r1, r6
 800fe5c:	4620      	mov	r0, r4
 800fe5e:	f7fc fd61 	bl	800c924 <tcp_input>
        break;
 800fe62:	e7ba      	b.n	800fdda <ip4_input+0x11a>
 800fe64:	4635      	mov	r5, r6
 800fe66:	e77b      	b.n	800fd60 <ip4_input+0xa0>
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800fe68:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800fe6c:	4635      	mov	r5, r6
 800fe6e:	e777      	b.n	800fd60 <ip4_input+0xa0>
 800fe70:	2400e644 	.word	0x2400e644
 800fe74:	2400b54c 	.word	0x2400b54c

0800fe78 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800fe78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe7c:	4699      	mov	r9, r3
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800fe7e:	7b83      	ldrb	r3, [r0, #14]
{
 800fe80:	b083      	sub	sp, #12
 800fe82:	4604      	mov	r4, r0
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800fe84:	2b01      	cmp	r3, #1
{
 800fe86:	460f      	mov	r7, r1
 800fe88:	4616      	mov	r6, r2
 800fe8a:	f89d a030 	ldrb.w	sl, [sp, #48]	; 0x30
 800fe8e:	f89d b034 	ldrb.w	fp, [sp, #52]	; 0x34
 800fe92:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800fe96:	d13d      	bne.n	800ff14 <ip4_output_if_src+0x9c>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800fe98:	2e00      	cmp	r6, #0
 800fe9a:	d044      	beq.n	800ff26 <ip4_output_if_src+0xae>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800fe9c:	2114      	movs	r1, #20
 800fe9e:	4620      	mov	r0, r4
 800fea0:	f7fa f95c 	bl	800a15c <pbuf_add_header>
 800fea4:	2800      	cmp	r0, #0
 800fea6:	d159      	bne.n	800ff5c <ip4_output_if_src+0xe4>
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800fea8:	8963      	ldrh	r3, [r4, #10]
    iphdr = (struct ip_hdr *)p->payload;
 800feaa:	6865      	ldr	r5, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800feac:	2b13      	cmp	r3, #19
 800feae:	d942      	bls.n	800ff36 <ip4_output_if_src+0xbe>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800feb0:	f885 9008 	strb.w	r9, [r5, #8]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800feb4:	2245      	movs	r2, #69	; 0x45
    IPH_PROTO_SET(iphdr, proto);
 800feb6:	f885 b009 	strb.w	fp, [r5, #9]
    ip4_addr_copy(iphdr->dest, *dest);
 800feba:	6833      	ldr	r3, [r6, #0]
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800febc:	702a      	strb	r2, [r5, #0]
    IPH_TOS_SET(iphdr, tos);
 800febe:	f885 a001 	strb.w	sl, [r5, #1]
    ip4_addr_copy(iphdr->dest, *dest);
 800fec2:	612b      	str	r3, [r5, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800fec4:	8920      	ldrh	r0, [r4, #8]
 800fec6:	f7f9 fa67 	bl	8009398 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800feca:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 800ff78 <ip4_output_if_src+0x100>
    IPH_OFFSET_SET(iphdr, 0);
 800fece:	2300      	movs	r3, #0
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800fed0:	8068      	strh	r0, [r5, #2]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800fed2:	f8b9 0000 	ldrh.w	r0, [r9]
    IPH_OFFSET_SET(iphdr, 0);
 800fed6:	71ab      	strb	r3, [r5, #6]
 800fed8:	71eb      	strb	r3, [r5, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800feda:	f7f9 fa5d 	bl	8009398 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800fede:	f8b9 3000 	ldrh.w	r3, [r9]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800fee2:	80a8      	strh	r0, [r5, #4]
    ++ip_id;
 800fee4:	3301      	adds	r3, #1
 800fee6:	f8a9 3000 	strh.w	r3, [r9]

    if (src == NULL) {
 800feea:	b367      	cbz	r7, 800ff46 <ip4_output_if_src+0xce>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800feec:	683b      	ldr	r3, [r7, #0]
 800feee:	60eb      	str	r3, [r5, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800fef0:	2300      	movs	r3, #0
 800fef2:	72ab      	strb	r3, [r5, #10]
 800fef4:	72eb      	strb	r3, [r5, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800fef6:	f8b8 3024 	ldrh.w	r3, [r8, #36]	; 0x24
 800fefa:	b113      	cbz	r3, 800ff02 <ip4_output_if_src+0x8a>
 800fefc:	8922      	ldrh	r2, [r4, #8]
 800fefe:	429a      	cmp	r2, r3
 800ff00:	d824      	bhi.n	800ff4c <ip4_output_if_src+0xd4>
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800ff02:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800ff06:	4632      	mov	r2, r6
 800ff08:	4621      	mov	r1, r4
 800ff0a:	4640      	mov	r0, r8
 800ff0c:	4798      	blx	r3
}
 800ff0e:	b003      	add	sp, #12
 800ff10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800ff14:	4b13      	ldr	r3, [pc, #76]	; (800ff64 <ip4_output_if_src+0xec>)
 800ff16:	f44f 7255 	mov.w	r2, #852	; 0x354
 800ff1a:	4913      	ldr	r1, [pc, #76]	; (800ff68 <ip4_output_if_src+0xf0>)
 800ff1c:	4813      	ldr	r0, [pc, #76]	; (800ff6c <ip4_output_if_src+0xf4>)
 800ff1e:	f001 fb6f 	bl	8011600 <iprintf>
  if (dest != LWIP_IP_HDRINCL) {
 800ff22:	2e00      	cmp	r6, #0
 800ff24:	d1ba      	bne.n	800fe9c <ip4_output_if_src+0x24>
    if (p->len < IP_HLEN) {
 800ff26:	8963      	ldrh	r3, [r4, #10]
 800ff28:	2b13      	cmp	r3, #19
 800ff2a:	d917      	bls.n	800ff5c <ip4_output_if_src+0xe4>
    ip4_addr_copy(dest_addr, iphdr->dest);
 800ff2c:	6863      	ldr	r3, [r4, #4]
    dest = &dest_addr;
 800ff2e:	ae01      	add	r6, sp, #4
    ip4_addr_copy(dest_addr, iphdr->dest);
 800ff30:	691b      	ldr	r3, [r3, #16]
 800ff32:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 800ff34:	e7df      	b.n	800fef6 <ip4_output_if_src+0x7e>
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800ff36:	4b0b      	ldr	r3, [pc, #44]	; (800ff64 <ip4_output_if_src+0xec>)
 800ff38:	f44f 7262 	mov.w	r2, #904	; 0x388
 800ff3c:	490c      	ldr	r1, [pc, #48]	; (800ff70 <ip4_output_if_src+0xf8>)
 800ff3e:	480b      	ldr	r0, [pc, #44]	; (800ff6c <ip4_output_if_src+0xf4>)
 800ff40:	f001 fb5e 	bl	8011600 <iprintf>
 800ff44:	e7b4      	b.n	800feb0 <ip4_output_if_src+0x38>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800ff46:	4b0b      	ldr	r3, [pc, #44]	; (800ff74 <ip4_output_if_src+0xfc>)
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	e7d0      	b.n	800feee <ip4_output_if_src+0x76>
    return ip4_frag(p, netif, dest);
 800ff4c:	4632      	mov	r2, r6
 800ff4e:	4641      	mov	r1, r8
 800ff50:	4620      	mov	r0, r4
 800ff52:	f000 fb83 	bl	801065c <ip4_frag>
}
 800ff56:	b003      	add	sp, #12
 800ff58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return ERR_BUF;
 800ff5c:	f06f 0001 	mvn.w	r0, #1
 800ff60:	e7d5      	b.n	800ff0e <ip4_output_if_src+0x96>
 800ff62:	bf00      	nop
 800ff64:	08014e9c 	.word	0x08014e9c
 800ff68:	08014ed0 	.word	0x08014ed0
 800ff6c:	080124d0 	.word	0x080124d0
 800ff70:	08014edc 	.word	0x08014edc
 800ff74:	08014f0c 	.word	0x08014f0c
 800ff78:	2400e7aa 	.word	0x2400e7aa

0800ff7c <ip4_output_if>:
{
 800ff7c:	b4f0      	push	{r4, r5, r6, r7}
 800ff7e:	9c06      	ldr	r4, [sp, #24]
 800ff80:	f89d 5010 	ldrb.w	r5, [sp, #16]
 800ff84:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800ff88:	b11a      	cbz	r2, 800ff92 <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 800ff8a:	b109      	cbz	r1, 800ff90 <ip4_output_if+0x14>
 800ff8c:	680f      	ldr	r7, [r1, #0]
 800ff8e:	b907      	cbnz	r7, 800ff92 <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 800ff90:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800ff92:	9504      	str	r5, [sp, #16]
 800ff94:	e9cd 6405 	strd	r6, r4, [sp, #20]
}
 800ff98:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800ff9a:	f7ff bf6d 	b.w	800fe78 <ip4_output_if_src>
 800ff9e:	bf00      	nop

0800ffa0 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800ffa0:	1e43      	subs	r3, r0, #1
 800ffa2:	3303      	adds	r3, #3
 800ffa4:	d814      	bhi.n	800ffd0 <ip4_addr_isbroadcast_u32+0x30>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800ffa6:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
 800ffaa:	f013 0302 	ands.w	r3, r3, #2
 800ffae:	d00d      	beq.n	800ffcc <ip4_addr_isbroadcast_u32+0x2c>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800ffb0:	684b      	ldr	r3, [r1, #4]
 800ffb2:	4283      	cmp	r3, r0
 800ffb4:	d00f      	beq.n	800ffd6 <ip4_addr_isbroadcast_u32+0x36>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800ffb6:	688a      	ldr	r2, [r1, #8]
 800ffb8:	4043      	eors	r3, r0
 800ffba:	4213      	tst	r3, r2
 800ffbc:	d10b      	bne.n	800ffd6 <ip4_addr_isbroadcast_u32+0x36>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800ffbe:	43d3      	mvns	r3, r2
 800ffc0:	ea20 0002 	bic.w	r0, r0, r2
    return 1;
 800ffc4:	1ac3      	subs	r3, r0, r3
 800ffc6:	fab3 f383 	clz	r3, r3
 800ffca:	095b      	lsrs	r3, r3, #5
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
  }
}
 800ffcc:	4618      	mov	r0, r3
 800ffce:	4770      	bx	lr
    return 1;
 800ffd0:	2301      	movs	r3, #1
}
 800ffd2:	4618      	mov	r0, r3
 800ffd4:	4770      	bx	lr
    return 0;
 800ffd6:	2300      	movs	r3, #0
}
 800ffd8:	4618      	mov	r0, r3
 800ffda:	4770      	bx	lr

0800ffdc <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800ffdc:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800ffde:	4604      	mov	r4, r0
 800ffe0:	b148      	cbz	r0, 800fff6 <ipfrag_free_pbuf_custom+0x1a>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 800ffe2:	6960      	ldr	r0, [r4, #20]
 800ffe4:	b108      	cbz	r0, 800ffea <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 800ffe6:	f7fa f959 	bl	800a29c <pbuf_free>
  memp_free(MEMP_FRAG_PBUF, p);
 800ffea:	4621      	mov	r1, r4
 800ffec:	2005      	movs	r0, #5
  }
  ip_frag_free_pbuf_custom_ref(pcr);
}
 800ffee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 800fff2:	f7f9 bdc5 	b.w	8009b80 <memp_free>
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800fff6:	4b04      	ldr	r3, [pc, #16]	; (8010008 <ipfrag_free_pbuf_custom+0x2c>)
 800fff8:	f240 22ce 	movw	r2, #718	; 0x2ce
 800fffc:	4903      	ldr	r1, [pc, #12]	; (801000c <ipfrag_free_pbuf_custom+0x30>)
 800fffe:	4804      	ldr	r0, [pc, #16]	; (8010010 <ipfrag_free_pbuf_custom+0x34>)
 8010000:	f001 fafe 	bl	8011600 <iprintf>
 8010004:	e7ed      	b.n	800ffe2 <ipfrag_free_pbuf_custom+0x6>
 8010006:	bf00      	nop
 8010008:	08014f10 	.word	0x08014f10
 801000c:	08014f4c 	.word	0x08014f4c
 8010010:	080124d0 	.word	0x080124d0

08010014 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8010014:	4281      	cmp	r1, r0
{
 8010016:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801001a:	4606      	mov	r6, r0
 801001c:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 801001e:	d075      	beq.n	801010c <ip_reass_free_complete_datagram+0xf8>
  if (prev != NULL) {
 8010020:	b147      	cbz	r7, 8010034 <ip_reass_free_complete_datagram+0x20>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8010022:	683b      	ldr	r3, [r7, #0]
 8010024:	42b3      	cmp	r3, r6
 8010026:	d005      	beq.n	8010034 <ip_reass_free_complete_datagram+0x20>
 8010028:	4b40      	ldr	r3, [pc, #256]	; (801012c <ip_reass_free_complete_datagram+0x118>)
 801002a:	22ad      	movs	r2, #173	; 0xad
 801002c:	4940      	ldr	r1, [pc, #256]	; (8010130 <ip_reass_free_complete_datagram+0x11c>)
 801002e:	4841      	ldr	r0, [pc, #260]	; (8010134 <ip_reass_free_complete_datagram+0x120>)
 8010030:	f001 fae6 	bl	8011600 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8010034:	6875      	ldr	r5, [r6, #4]
 8010036:	686b      	ldr	r3, [r5, #4]
  if (iprh->start == 0) {
 8010038:	889a      	ldrh	r2, [r3, #4]
 801003a:	2a00      	cmp	r2, #0
 801003c:	d047      	beq.n	80100ce <ip_reass_free_complete_datagram+0xba>
  u16_t pbufs_freed = 0;
 801003e:	f04f 0b00 	mov.w	fp, #0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8010042:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 801012c <ip_reass_free_complete_datagram+0x118>
 8010046:	f8df 9104 	ldr.w	r9, [pc, #260]	; 801014c <ip_reass_free_complete_datagram+0x138>
 801004a:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8010134 <ip_reass_free_complete_datagram+0x120>
 801004e:	e005      	b.n	801005c <ip_reass_free_complete_datagram+0x48>
    pbuf_free(pcur);
 8010050:	4628      	mov	r0, r5
    iprh = (struct ip_reass_helper *)p->payload;
 8010052:	4625      	mov	r5, r4
    pbuf_free(pcur);
 8010054:	f7fa f922 	bl	800a29c <pbuf_free>
  while (p != NULL) {
 8010058:	b1b4      	cbz	r4, 8010088 <ip_reass_free_complete_datagram+0x74>
    iprh = (struct ip_reass_helper *)p->payload;
 801005a:	6863      	ldr	r3, [r4, #4]
    clen = pbuf_clen(pcur);
 801005c:	4628      	mov	r0, r5
    p = iprh->next_pbuf;
 801005e:	681c      	ldr	r4, [r3, #0]
    clen = pbuf_clen(pcur);
 8010060:	f7fa faaa 	bl	800a5b8 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8010064:	4458      	add	r0, fp
 8010066:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801006a:	fa1f fb80 	uxth.w	fp, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801006e:	dbef      	blt.n	8010050 <ip_reass_free_complete_datagram+0x3c>
 8010070:	4653      	mov	r3, sl
 8010072:	22cc      	movs	r2, #204	; 0xcc
 8010074:	4649      	mov	r1, r9
 8010076:	4640      	mov	r0, r8
 8010078:	f001 fac2 	bl	8011600 <iprintf>
    pbuf_free(pcur);
 801007c:	4628      	mov	r0, r5
    iprh = (struct ip_reass_helper *)p->payload;
 801007e:	4625      	mov	r5, r4
    pbuf_free(pcur);
 8010080:	f7fa f90c 	bl	800a29c <pbuf_free>
  while (p != NULL) {
 8010084:	2c00      	cmp	r4, #0
 8010086:	d1e8      	bne.n	801005a <ip_reass_free_complete_datagram+0x46>
  if (reassdatagrams == ipr) {
 8010088:	4b2b      	ldr	r3, [pc, #172]	; (8010138 <ip_reass_free_complete_datagram+0x124>)
 801008a:	681a      	ldr	r2, [r3, #0]
 801008c:	4296      	cmp	r6, r2
 801008e:	d03a      	beq.n	8010106 <ip_reass_free_complete_datagram+0xf2>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8010090:	2f00      	cmp	r7, #0
 8010092:	d042      	beq.n	801011a <ip_reass_free_complete_datagram+0x106>
    prev->next = ipr->next;
 8010094:	6833      	ldr	r3, [r6, #0]
 8010096:	603b      	str	r3, [r7, #0]
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8010098:	4c28      	ldr	r4, [pc, #160]	; (801013c <ip_reass_free_complete_datagram+0x128>)
  memp_free(MEMP_REASSDATA, ipr);
 801009a:	4631      	mov	r1, r6
 801009c:	2004      	movs	r0, #4
 801009e:	f7f9 fd6f 	bl	8009b80 <memp_free>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80100a2:	8823      	ldrh	r3, [r4, #0]
 80100a4:	455b      	cmp	r3, fp
 80100a6:	d305      	bcc.n	80100b4 <ip_reass_free_complete_datagram+0xa0>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80100a8:	eba3 030b 	sub.w	r3, r3, fp
}
 80100ac:	4658      	mov	r0, fp
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80100ae:	8023      	strh	r3, [r4, #0]
}
 80100b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80100b4:	4b1d      	ldr	r3, [pc, #116]	; (801012c <ip_reass_free_complete_datagram+0x118>)
 80100b6:	22d2      	movs	r2, #210	; 0xd2
 80100b8:	4921      	ldr	r1, [pc, #132]	; (8010140 <ip_reass_free_complete_datagram+0x12c>)
 80100ba:	481e      	ldr	r0, [pc, #120]	; (8010134 <ip_reass_free_complete_datagram+0x120>)
 80100bc:	f001 faa0 	bl	8011600 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80100c0:	8823      	ldrh	r3, [r4, #0]
}
 80100c2:	4658      	mov	r0, fp
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80100c4:	eba3 030b 	sub.w	r3, r3, fp
 80100c8:	8023      	strh	r3, [r4, #0]
}
 80100ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ipr->p = iprh->next_pbuf;
 80100ce:	681a      	ldr	r2, [r3, #0]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80100d0:	6930      	ldr	r0, [r6, #16]
 80100d2:	6971      	ldr	r1, [r6, #20]
    ipr->p = iprh->next_pbuf;
 80100d4:	6072      	str	r2, [r6, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80100d6:	68f4      	ldr	r4, [r6, #12]
 80100d8:	68b2      	ldr	r2, [r6, #8]
 80100da:	6098      	str	r0, [r3, #8]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80100dc:	4628      	mov	r0, r5
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80100de:	60d9      	str	r1, [r3, #12]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80100e0:	2101      	movs	r1, #1
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80100e2:	601a      	str	r2, [r3, #0]
 80100e4:	605c      	str	r4, [r3, #4]
 80100e6:	69b2      	ldr	r2, [r6, #24]
 80100e8:	611a      	str	r2, [r3, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80100ea:	f7ff fdad 	bl	800fc48 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80100ee:	4628      	mov	r0, r5
 80100f0:	f7fa fa62 	bl	800a5b8 <pbuf_clen>
 80100f4:	4683      	mov	fp, r0
    pbuf_free(p);
 80100f6:	4628      	mov	r0, r5
 80100f8:	f7fa f8d0 	bl	800a29c <pbuf_free>
  p = ipr->p;
 80100fc:	6875      	ldr	r5, [r6, #4]
  while (p != NULL) {
 80100fe:	2d00      	cmp	r5, #0
 8010100:	d0c2      	beq.n	8010088 <ip_reass_free_complete_datagram+0x74>
    iprh = (struct ip_reass_helper *)p->payload;
 8010102:	686b      	ldr	r3, [r5, #4]
 8010104:	e79d      	b.n	8010042 <ip_reass_free_complete_datagram+0x2e>
    reassdatagrams = ipr->next;
 8010106:	6832      	ldr	r2, [r6, #0]
 8010108:	601a      	str	r2, [r3, #0]
 801010a:	e7c5      	b.n	8010098 <ip_reass_free_complete_datagram+0x84>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 801010c:	4b07      	ldr	r3, [pc, #28]	; (801012c <ip_reass_free_complete_datagram+0x118>)
 801010e:	22ab      	movs	r2, #171	; 0xab
 8010110:	490c      	ldr	r1, [pc, #48]	; (8010144 <ip_reass_free_complete_datagram+0x130>)
 8010112:	4808      	ldr	r0, [pc, #32]	; (8010134 <ip_reass_free_complete_datagram+0x120>)
 8010114:	f001 fa74 	bl	8011600 <iprintf>
 8010118:	e782      	b.n	8010020 <ip_reass_free_complete_datagram+0xc>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801011a:	4b04      	ldr	r3, [pc, #16]	; (801012c <ip_reass_free_complete_datagram+0x118>)
 801011c:	f240 1245 	movw	r2, #325	; 0x145
 8010120:	4909      	ldr	r1, [pc, #36]	; (8010148 <ip_reass_free_complete_datagram+0x134>)
 8010122:	4804      	ldr	r0, [pc, #16]	; (8010134 <ip_reass_free_complete_datagram+0x120>)
 8010124:	f001 fa6c 	bl	8011600 <iprintf>
 8010128:	e7b4      	b.n	8010094 <ip_reass_free_complete_datagram+0x80>
 801012a:	bf00      	nop
 801012c:	08014f10 	.word	0x08014f10
 8010130:	08014f64 	.word	0x08014f64
 8010134:	080124d0 	.word	0x080124d0
 8010138:	2400e7b0 	.word	0x2400e7b0
 801013c:	2400e7ac 	.word	0x2400e7ac
 8010140:	08014fb4 	.word	0x08014fb4
 8010144:	08014f58 	.word	0x08014f58
 8010148:	08014f98 	.word	0x08014f98
 801014c:	08014f78 	.word	0x08014f78

08010150 <ip_reass_remove_oldest_datagram>:
{
 8010150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  int pbufs_freed = 0, pbufs_freed_current;
 8010154:	2700      	movs	r7, #0
 8010156:	f8df 8068 	ldr.w	r8, [pc, #104]	; 80101c0 <ip_reass_remove_oldest_datagram+0x70>
{
 801015a:	4605      	mov	r5, r0
 801015c:	460e      	mov	r6, r1
    r = reassdatagrams;
 801015e:	f8d8 3000 	ldr.w	r3, [r8]
    while (r != NULL) {
 8010162:	b1f3      	cbz	r3, 80101a2 <ip_reass_remove_oldest_datagram+0x52>
    other_datagrams = 0;
 8010164:	2400      	movs	r4, #0
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8010166:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    oldest_prev = NULL;
 801016a:	4621      	mov	r1, r4
    prev = NULL;
 801016c:	46a4      	mov	ip, r4
    oldest = NULL;
 801016e:	4620      	mov	r0, r4
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8010170:	695a      	ldr	r2, [r3, #20]
 8010172:	4572      	cmp	r2, lr
 8010174:	d018      	beq.n	80101a8 <ip_reass_remove_oldest_datagram+0x58>
        other_datagrams++;
 8010176:	3401      	adds	r4, #1
        if (oldest == NULL) {
 8010178:	b120      	cbz	r0, 8010184 <ip_reass_remove_oldest_datagram+0x34>
        } else if (r->timer <= oldest->timer) {
 801017a:	f893 901f 	ldrb.w	r9, [r3, #31]
 801017e:	7fc2      	ldrb	r2, [r0, #31]
 8010180:	4591      	cmp	r9, r2
 8010182:	d801      	bhi.n	8010188 <ip_reass_remove_oldest_datagram+0x38>
 8010184:	4661      	mov	r1, ip
 8010186:	4618      	mov	r0, r3
      if (r->next != NULL) {
 8010188:	681a      	ldr	r2, [r3, #0]
 801018a:	469c      	mov	ip, r3
 801018c:	4613      	mov	r3, r2
 801018e:	2a00      	cmp	r2, #0
 8010190:	d1ee      	bne.n	8010170 <ip_reass_remove_oldest_datagram+0x20>
    if (oldest != NULL) {
 8010192:	b110      	cbz	r0, 801019a <ip_reass_remove_oldest_datagram+0x4a>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8010194:	f7ff ff3e 	bl	8010014 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 8010198:	4407      	add	r7, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801019a:	42b7      	cmp	r7, r6
 801019c:	da01      	bge.n	80101a2 <ip_reass_remove_oldest_datagram+0x52>
 801019e:	2c01      	cmp	r4, #1
 80101a0:	dcdd      	bgt.n	801015e <ip_reass_remove_oldest_datagram+0xe>
}
 80101a2:	4638      	mov	r0, r7
 80101a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80101a8:	699a      	ldr	r2, [r3, #24]
 80101aa:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80101ae:	454a      	cmp	r2, r9
 80101b0:	d1e1      	bne.n	8010176 <ip_reass_remove_oldest_datagram+0x26>
 80101b2:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 80101b6:	88aa      	ldrh	r2, [r5, #4]
 80101b8:	4591      	cmp	r9, r2
 80101ba:	d1dc      	bne.n	8010176 <ip_reass_remove_oldest_datagram+0x26>
 80101bc:	e7e4      	b.n	8010188 <ip_reass_remove_oldest_datagram+0x38>
 80101be:	bf00      	nop
 80101c0:	2400e7b0 	.word	0x2400e7b0

080101c4 <ip_reass_tmr>:
{
 80101c4:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 80101c6:	4b0a      	ldr	r3, [pc, #40]	; (80101f0 <ip_reass_tmr+0x2c>)
 80101c8:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 80101ca:	b140      	cbz	r0, 80101de <ip_reass_tmr+0x1a>
  struct ip_reassdata *r, *prev = NULL;
 80101cc:	2400      	movs	r4, #0
    if (r->timer > 0) {
 80101ce:	7fc3      	ldrb	r3, [r0, #31]
      r->timer--;
 80101d0:	1e5a      	subs	r2, r3, #1
    if (r->timer > 0) {
 80101d2:	b12b      	cbz	r3, 80101e0 <ip_reass_tmr+0x1c>
 80101d4:	4604      	mov	r4, r0
      r->timer--;
 80101d6:	77c2      	strb	r2, [r0, #31]
      r = r->next;
 80101d8:	6800      	ldr	r0, [r0, #0]
  while (r != NULL) {
 80101da:	2800      	cmp	r0, #0
 80101dc:	d1f7      	bne.n	80101ce <ip_reass_tmr+0xa>
}
 80101de:	bd38      	pop	{r3, r4, r5, pc}
      r = r->next;
 80101e0:	6805      	ldr	r5, [r0, #0]
      ip_reass_free_complete_datagram(tmp, prev);
 80101e2:	4621      	mov	r1, r4
 80101e4:	f7ff ff16 	bl	8010014 <ip_reass_free_complete_datagram>
      r = r->next;
 80101e8:	4628      	mov	r0, r5
  while (r != NULL) {
 80101ea:	2800      	cmp	r0, #0
 80101ec:	d1ef      	bne.n	80101ce <ip_reass_tmr+0xa>
 80101ee:	e7f6      	b.n	80101de <ip_reass_tmr+0x1a>
 80101f0:	2400e7b0 	.word	0x2400e7b0

080101f4 <ip4_reass>:
{
 80101f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr *)p->payload;
 80101f8:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
 80101fc:	b085      	sub	sp, #20
 80101fe:	4605      	mov	r5, r0
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8010200:	f89a 3000 	ldrb.w	r3, [sl]
 8010204:	f003 030f 	and.w	r3, r3, #15
 8010208:	2b05      	cmp	r3, #5
 801020a:	f040 8089 	bne.w	8010320 <ip4_reass+0x12c>
  offset = IPH_OFFSET_BYTES(fraghdr);
 801020e:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 8010212:	f7f9 f8c1 	bl	8009398 <lwip_htons>
 8010216:	4606      	mov	r6, r0
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010218:	f8ba 0002 	ldrh.w	r0, [sl, #2]
 801021c:	f7f9 f8bc 	bl	8009398 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 8010220:	f89a 3000 	ldrb.w	r3, [sl]
 8010224:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 8010228:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 801022c:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8010230:	d376      	bcc.n	8010320 <ip4_reass+0x12c>
  len = (u16_t)(len - hlen);
 8010232:	1a83      	subs	r3, r0, r2
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8010234:	f8df 82e8 	ldr.w	r8, [pc, #744]	; 8010520 <ip4_reass+0x32c>
  clen = pbuf_clen(p);
 8010238:	4628      	mov	r0, r5
  len = (u16_t)(len - hlen);
 801023a:	b29b      	uxth	r3, r3
 801023c:	9300      	str	r3, [sp, #0]
  clen = pbuf_clen(p);
 801023e:	f7fa f9bb 	bl	800a5b8 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8010242:	f8b8 3000 	ldrh.w	r3, [r8]
  clen = pbuf_clen(p);
 8010246:	4607      	mov	r7, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8010248:	4403      	add	r3, r0
 801024a:	2b0a      	cmp	r3, #10
 801024c:	f300 80e5 	bgt.w	801041a <ip4_reass+0x226>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8010250:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8010524 <ip4_reass+0x330>
 8010254:	f8d9 4000 	ldr.w	r4, [r9]
 8010258:	2c00      	cmp	r4, #0
 801025a:	f000 80ec 	beq.w	8010436 <ip4_reass+0x242>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801025e:	f8da 200c 	ldr.w	r2, [sl, #12]
 8010262:	e003      	b.n	801026c <ip4_reass+0x78>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8010264:	6824      	ldr	r4, [r4, #0]
 8010266:	2c00      	cmp	r4, #0
 8010268:	f000 80e5 	beq.w	8010436 <ip4_reass+0x242>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801026c:	6963      	ldr	r3, [r4, #20]
 801026e:	4293      	cmp	r3, r2
 8010270:	d1f8      	bne.n	8010264 <ip4_reass+0x70>
 8010272:	f8da 3010 	ldr.w	r3, [sl, #16]
 8010276:	69a1      	ldr	r1, [r4, #24]
 8010278:	4299      	cmp	r1, r3
 801027a:	d1f3      	bne.n	8010264 <ip4_reass+0x70>
 801027c:	89a1      	ldrh	r1, [r4, #12]
 801027e:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 8010282:	4299      	cmp	r1, r3
 8010284:	d1ee      	bne.n	8010264 <ip4_reass+0x70>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8010286:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 801028a:	f7f9 f885 	bl	8009398 <lwip_htons>
 801028e:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8010292:	2800      	cmp	r0, #0
 8010294:	f000 80a9 	beq.w	80103ea <ip4_reass+0x1f6>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8010298:	f8ba 3006 	ldrh.w	r3, [sl, #6]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801029c:	f3c6 060c 	ubfx	r6, r6, #0, #13
  if (is_last) {
 80102a0:	f013 0320 	ands.w	r3, r3, #32
  offset = IPH_OFFSET_BYTES(fraghdr);
 80102a4:	ea4f 06c6 	mov.w	r6, r6, lsl #3
  if (is_last) {
 80102a8:	9301      	str	r3, [sp, #4]
 80102aa:	d108      	bne.n	80102be <ip4_reass+0xca>
    u16_t datagram_len = (u16_t)(offset + len);
 80102ac:	9b00      	ldr	r3, [sp, #0]
 80102ae:	18f3      	adds	r3, r6, r3
 80102b0:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80102b2:	429e      	cmp	r6, r3
 80102b4:	d812      	bhi.n	80102dc <ip4_reass+0xe8>
 80102b6:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80102ba:	4293      	cmp	r3, r2
 80102bc:	d80e      	bhi.n	80102dc <ip4_reass+0xe8>
  fraghdr = (struct ip_hdr *)new_p->payload;
 80102be:	f8d5 a004 	ldr.w	sl, [r5, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80102c2:	f8ba 0002 	ldrh.w	r0, [sl, #2]
 80102c6:	f7f9 f867 	bl	8009398 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 80102ca:	f89a 3000 	ldrb.w	r3, [sl]
 80102ce:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 80102d2:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 80102d6:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80102da:	d229      	bcs.n	8010330 <ip4_reass+0x13c>
  if (ipr->p == NULL) {
 80102dc:	6866      	ldr	r6, [r4, #4]
 80102de:	b9fe      	cbnz	r6, 8010320 <ip4_reass+0x12c>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80102e0:	f8d9 3000 	ldr.w	r3, [r9]
 80102e4:	42a3      	cmp	r3, r4
 80102e6:	d014      	beq.n	8010312 <ip4_reass+0x11e>
 80102e8:	4b89      	ldr	r3, [pc, #548]	; (8010510 <ip4_reass+0x31c>)
 80102ea:	f240 22ab 	movw	r2, #683	; 0x2ab
 80102ee:	4989      	ldr	r1, [pc, #548]	; (8010514 <ip4_reass+0x320>)
 80102f0:	4889      	ldr	r0, [pc, #548]	; (8010518 <ip4_reass+0x324>)
 80102f2:	f001 f985 	bl	8011600 <iprintf>
  if (reassdatagrams == ipr) {
 80102f6:	f8d9 3000 	ldr.w	r3, [r9]
 80102fa:	429c      	cmp	r4, r3
 80102fc:	d009      	beq.n	8010312 <ip4_reass+0x11e>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80102fe:	4b84      	ldr	r3, [pc, #528]	; (8010510 <ip4_reass+0x31c>)
 8010300:	f240 1245 	movw	r2, #325	; 0x145
 8010304:	4985      	ldr	r1, [pc, #532]	; (801051c <ip4_reass+0x328>)
 8010306:	4884      	ldr	r0, [pc, #528]	; (8010518 <ip4_reass+0x324>)
 8010308:	f001 f97a 	bl	8011600 <iprintf>
    prev->next = ipr->next;
 801030c:	6823      	ldr	r3, [r4, #0]
 801030e:	6033      	str	r3, [r6, #0]
 8010310:	deff      	udf	#255	; 0xff
    reassdatagrams = ipr->next;
 8010312:	6823      	ldr	r3, [r4, #0]
  memp_free(MEMP_REASSDATA, ipr);
 8010314:	4621      	mov	r1, r4
 8010316:	2004      	movs	r0, #4
    reassdatagrams = ipr->next;
 8010318:	f8c9 3000 	str.w	r3, [r9]
  memp_free(MEMP_REASSDATA, ipr);
 801031c:	f7f9 fc30 	bl	8009b80 <memp_free>
  pbuf_free(p);
 8010320:	4628      	mov	r0, r5
  return NULL;
 8010322:	2600      	movs	r6, #0
  pbuf_free(p);
 8010324:	f7f9 ffba 	bl	800a29c <pbuf_free>
}
 8010328:	4630      	mov	r0, r6
 801032a:	b005      	add	sp, #20
 801032c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  len = (u16_t)(len - hlen);
 8010330:	1a83      	subs	r3, r0, r2
  offset = IPH_OFFSET_BYTES(fraghdr);
 8010332:	f8ba 0006 	ldrh.w	r0, [sl, #6]
  len = (u16_t)(len - hlen);
 8010336:	fa1f fa83 	uxth.w	sl, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 801033a:	f7f9 f82d 	bl	8009398 <lwip_htons>
 801033e:	f3c0 000c 	ubfx	r0, r0, #0, #13
  iprh = (struct ip_reass_helper *)new_p->payload;
 8010342:	f8d5 b004 	ldr.w	fp, [r5, #4]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8010346:	00c2      	lsls	r2, r0, #3
  iprh = (struct ip_reass_helper *)new_p->payload;
 8010348:	f8cd b008 	str.w	fp, [sp, #8]
  iprh->end = (u16_t)(offset + len);
 801034c:	eb0a 0302 	add.w	r3, sl, r2
  iprh->start = offset;
 8010350:	f8ab 2004 	strh.w	r2, [fp, #4]
  iprh->end = (u16_t)(offset + len);
 8010354:	f8ab 3006 	strh.w	r3, [fp, #6]
 8010358:	b29b      	uxth	r3, r3
 801035a:	4619      	mov	r1, r3
 801035c:	9303      	str	r3, [sp, #12]
  iprh->next_pbuf = NULL;
 801035e:	2300      	movs	r3, #0
  if (iprh->end < offset) {
 8010360:	428a      	cmp	r2, r1
  iprh->next_pbuf = NULL;
 8010362:	f88b 3000 	strb.w	r3, [fp]
 8010366:	f88b 3001 	strb.w	r3, [fp, #1]
 801036a:	f88b 3002 	strb.w	r3, [fp, #2]
 801036e:	f88b 3003 	strb.w	r3, [fp, #3]
  if (iprh->end < offset) {
 8010372:	d8b3      	bhi.n	80102dc <ip4_reass+0xe8>
  for (q = ipr->p; q != NULL;) {
 8010374:	6861      	ldr	r1, [r4, #4]
 8010376:	2900      	cmp	r1, #0
 8010378:	f000 80be 	beq.w	80104f8 <ip4_reass+0x304>
  int valid = 1;
 801037c:	f04f 0a01 	mov.w	sl, #1
 8010380:	4694      	mov	ip, r2
 8010382:	e00e      	b.n	80103a2 <ip4_reass+0x1ae>
    } else if (iprh->start == iprh_tmp->start) {
 8010384:	d0cc      	beq.n	8010320 <ip4_reass+0x12c>
    } else if (iprh->start < iprh_tmp->end) {
 8010386:	f8b3 e006 	ldrh.w	lr, [r3, #6]
 801038a:	45f4      	cmp	ip, lr
 801038c:	d3c8      	bcc.n	8010320 <ip4_reass+0x12c>
      if (iprh_prev != NULL) {
 801038e:	b122      	cbz	r2, 801039a <ip4_reass+0x1a6>
        if (iprh_prev->end != iprh_tmp->start) {
 8010390:	88d2      	ldrh	r2, [r2, #6]
          valid = 0;
 8010392:	4282      	cmp	r2, r0
 8010394:	bf18      	it	ne
 8010396:	f04f 0a00 	movne.w	sl, #0
    q = iprh_tmp->next_pbuf;
 801039a:	6819      	ldr	r1, [r3, #0]
  for (q = ipr->p; q != NULL;) {
 801039c:	2900      	cmp	r1, #0
 801039e:	f000 8084 	beq.w	80104aa <ip4_reass+0x2b6>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80103a2:	461a      	mov	r2, r3
 80103a4:	684b      	ldr	r3, [r1, #4]
    if (iprh->start < iprh_tmp->start) {
 80103a6:	8898      	ldrh	r0, [r3, #4]
 80103a8:	4584      	cmp	ip, r0
 80103aa:	d2eb      	bcs.n	8010384 <ip4_reass+0x190>
      iprh->next_pbuf = q;
 80103ac:	4613      	mov	r3, r2
 80103ae:	f8cb 1000 	str.w	r1, [fp]
 80103b2:	4662      	mov	r2, ip
 80103b4:	469c      	mov	ip, r3
      if (iprh_prev != NULL) {
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d060      	beq.n	801047c <ip4_reass+0x288>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80103ba:	88db      	ldrh	r3, [r3, #6]
 80103bc:	429a      	cmp	r2, r3
 80103be:	d3af      	bcc.n	8010320 <ip4_reass+0x12c>
 80103c0:	9903      	ldr	r1, [sp, #12]
 80103c2:	4281      	cmp	r1, r0
 80103c4:	d8ac      	bhi.n	8010320 <ip4_reass+0x12c>
        if (iprh_prev->end != iprh->start) {
 80103c6:	429a      	cmp	r2, r3
        iprh_prev->next_pbuf = new_p;
 80103c8:	f8cc 5000 	str.w	r5, [ip]
        if (iprh_prev->end != iprh->start) {
 80103cc:	d05b      	beq.n	8010486 <ip4_reass+0x292>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80103ce:	9b01      	ldr	r3, [sp, #4]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	f000 8084 	beq.w	80104de <ip4_reass+0x2ea>
 80103d6:	7fa3      	ldrb	r3, [r4, #30]
 80103d8:	07db      	lsls	r3, r3, #31
 80103da:	d45c      	bmi.n	8010496 <ip4_reass+0x2a2>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80103dc:	f8b8 3000 	ldrh.w	r3, [r8]
  return NULL;
 80103e0:	2600      	movs	r6, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80103e2:	443b      	add	r3, r7
 80103e4:	f8a8 3000 	strh.w	r3, [r8]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80103e8:	e79e      	b.n	8010328 <ip4_reass+0x134>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80103ea:	89e0      	ldrh	r0, [r4, #14]
 80103ec:	f7f8 ffd4 	bl	8009398 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80103f0:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80103f4:	2800      	cmp	r0, #0
 80103f6:	f43f af4f 	beq.w	8010298 <ip4_reass+0xa4>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80103fa:	f8da 3000 	ldr.w	r3, [sl]
 80103fe:	f8da 0004 	ldr.w	r0, [sl, #4]
 8010402:	f8da 1008 	ldr.w	r1, [sl, #8]
 8010406:	f8da 200c 	ldr.w	r2, [sl, #12]
 801040a:	60a3      	str	r3, [r4, #8]
 801040c:	60e0      	str	r0, [r4, #12]
 801040e:	6121      	str	r1, [r4, #16]
 8010410:	6162      	str	r2, [r4, #20]
 8010412:	f8da 3010 	ldr.w	r3, [sl, #16]
 8010416:	61a3      	str	r3, [r4, #24]
 8010418:	e73e      	b.n	8010298 <ip4_reass+0xa4>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801041a:	4601      	mov	r1, r0
 801041c:	4650      	mov	r0, sl
 801041e:	f7ff fe97 	bl	8010150 <ip_reass_remove_oldest_datagram>
 8010422:	2800      	cmp	r0, #0
 8010424:	f43f af7c 	beq.w	8010320 <ip4_reass+0x12c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8010428:	f8b8 3000 	ldrh.w	r3, [r8]
 801042c:	443b      	add	r3, r7
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801042e:	2b0a      	cmp	r3, #10
 8010430:	f77f af0e 	ble.w	8010250 <ip4_reass+0x5c>
 8010434:	e774      	b.n	8010320 <ip4_reass+0x12c>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010436:	2004      	movs	r0, #4
 8010438:	f7f9 fb5c 	bl	8009af4 <memp_malloc>
  if (ipr == NULL) {
 801043c:	4604      	mov	r4, r0
 801043e:	b178      	cbz	r0, 8010460 <ip4_reass+0x26c>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8010440:	2300      	movs	r3, #0
 8010442:	61e3      	str	r3, [r4, #28]
 8010444:	60a3      	str	r3, [r4, #8]
 8010446:	60e3      	str	r3, [r4, #12]
 8010448:	6123      	str	r3, [r4, #16]
 801044a:	6163      	str	r3, [r4, #20]
 801044c:	61a3      	str	r3, [r4, #24]
 801044e:	6063      	str	r3, [r4, #4]
  ipr->next = reassdatagrams;
 8010450:	f8d9 3000 	ldr.w	r3, [r9]
  reassdatagrams = ipr;
 8010454:	f8c9 4000 	str.w	r4, [r9]
  ipr->next = reassdatagrams;
 8010458:	6023      	str	r3, [r4, #0]
  ipr->timer = IP_REASS_MAXAGE;
 801045a:	230f      	movs	r3, #15
 801045c:	77e3      	strb	r3, [r4, #31]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801045e:	e7cc      	b.n	80103fa <ip4_reass+0x206>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8010460:	4639      	mov	r1, r7
 8010462:	4650      	mov	r0, sl
 8010464:	f7ff fe74 	bl	8010150 <ip_reass_remove_oldest_datagram>
 8010468:	4287      	cmp	r7, r0
 801046a:	f73f af59 	bgt.w	8010320 <ip4_reass+0x12c>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801046e:	2004      	movs	r0, #4
 8010470:	f7f9 fb40 	bl	8009af4 <memp_malloc>
    if (ipr == NULL)
 8010474:	4604      	mov	r4, r0
 8010476:	2800      	cmp	r0, #0
 8010478:	d1e2      	bne.n	8010440 <ip4_reass+0x24c>
 801047a:	e751      	b.n	8010320 <ip4_reass+0x12c>
        if (iprh->end > iprh_tmp->start) {
 801047c:	9b03      	ldr	r3, [sp, #12]
 801047e:	4283      	cmp	r3, r0
 8010480:	f63f af4e 	bhi.w	8010320 <ip4_reass+0x12c>
        ipr->p = new_p;
 8010484:	6065      	str	r5, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8010486:	9b01      	ldr	r3, [sp, #4]
 8010488:	b19b      	cbz	r3, 80104b2 <ip4_reass+0x2be>
 801048a:	7fa3      	ldrb	r3, [r4, #30]
 801048c:	07d9      	lsls	r1, r3, #31
 801048e:	d5a5      	bpl.n	80103dc <ip4_reass+0x1e8>
    if (valid) {
 8010490:	f1ba 0f00 	cmp.w	sl, #0
 8010494:	d138      	bne.n	8010508 <ip4_reass+0x314>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8010496:	f8b8 3000 	ldrh.w	r3, [r8]
 801049a:	443b      	add	r3, r7
 801049c:	f8a8 3000 	strh.w	r3, [r8]
  return NULL;
 80104a0:	2600      	movs	r6, #0
}
 80104a2:	4630      	mov	r0, r6
 80104a4:	b005      	add	sp, #20
 80104a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (iprh_prev->end != iprh->start) {
 80104aa:	45f4      	cmp	ip, lr
      iprh_prev->next_pbuf = new_p;
 80104ac:	601d      	str	r5, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80104ae:	d18e      	bne.n	80103ce <ip4_reass+0x1da>
 80104b0:	e7e9      	b.n	8010486 <ip4_reass+0x292>
    if (valid) {
 80104b2:	f1ba 0f00 	cmp.w	sl, #0
 80104b6:	d012      	beq.n	80104de <ip4_reass+0x2ea>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80104b8:	6863      	ldr	r3, [r4, #4]
 80104ba:	b183      	cbz	r3, 80104de <ip4_reass+0x2ea>
 80104bc:	6859      	ldr	r1, [r3, #4]
 80104be:	888b      	ldrh	r3, [r1, #4]
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d031      	beq.n	8010528 <ip4_reass+0x334>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80104c4:	f8b8 3000 	ldrh.w	r3, [r8]
 80104c8:	443b      	add	r3, r7
 80104ca:	f8a8 3000 	strh.w	r3, [r8]
  if (is_last) {
 80104ce:	9b01      	ldr	r3, [sp, #4]
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d1e5      	bne.n	80104a0 <ip4_reass+0x2ac>
 80104d4:	e008      	b.n	80104e8 <ip4_reass+0x2f4>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80104d6:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 80104da:	4659      	mov	r1, fp
 80104dc:	b323      	cbz	r3, 8010528 <ip4_reass+0x334>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80104de:	f8b8 3000 	ldrh.w	r3, [r8]
 80104e2:	443b      	add	r3, r7
 80104e4:	f8a8 3000 	strh.w	r3, [r8]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80104e8:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 80104ea:	9a00      	ldr	r2, [sp, #0]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80104ec:	f043 0301 	orr.w	r3, r3, #1
    u16_t datagram_len = (u16_t)(offset + len);
 80104f0:	4416      	add	r6, r2
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80104f2:	77a3      	strb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 80104f4:	83a6      	strh	r6, [r4, #28]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80104f6:	e7d3      	b.n	80104a0 <ip4_reass+0x2ac>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80104f8:	9b01      	ldr	r3, [sp, #4]
      ipr->p = new_p;
 80104fa:	6065      	str	r5, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d0ea      	beq.n	80104d6 <ip4_reass+0x2e2>
 8010500:	7fa3      	ldrb	r3, [r4, #30]
 8010502:	07da      	lsls	r2, r3, #31
 8010504:	f57f af6a 	bpl.w	80103dc <ip4_reass+0x1e8>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8010508:	6863      	ldr	r3, [r4, #4]
 801050a:	2b00      	cmp	r3, #0
 801050c:	d0c3      	beq.n	8010496 <ip4_reass+0x2a2>
 801050e:	e7d5      	b.n	80104bc <ip4_reass+0x2c8>
 8010510:	08014f10 	.word	0x08014f10
 8010514:	08015028 	.word	0x08015028
 8010518:	080124d0 	.word	0x080124d0
 801051c:	08014f98 	.word	0x08014f98
 8010520:	2400e7ac 	.word	0x2400e7ac
 8010524:	2400e7b0 	.word	0x2400e7b0
        q = iprh->next_pbuf;
 8010528:	f8db 3000 	ldr.w	r3, [fp]
        while (q != NULL) {
 801052c:	b153      	cbz	r3, 8010544 <ip4_reass+0x350>
 801052e:	9a02      	ldr	r2, [sp, #8]
          iprh = (struct ip_reass_helper *)q->payload;
 8010530:	4610      	mov	r0, r2
 8010532:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 8010534:	88c0      	ldrh	r0, [r0, #6]
 8010536:	8893      	ldrh	r3, [r2, #4]
 8010538:	4298      	cmp	r0, r3
 801053a:	d1c3      	bne.n	80104c4 <ip4_reass+0x2d0>
          q = iprh->next_pbuf;
 801053c:	6813      	ldr	r3, [r2, #0]
        while (q != NULL) {
 801053e:	2b00      	cmp	r3, #0
 8010540:	d1f6      	bne.n	8010530 <ip4_reass+0x33c>
 8010542:	9202      	str	r2, [sp, #8]
          LWIP_ASSERT("sanity check",
 8010544:	9b02      	ldr	r3, [sp, #8]
 8010546:	428b      	cmp	r3, r1
 8010548:	d110      	bne.n	801056c <ip4_reass+0x378>
 801054a:	4b3e      	ldr	r3, [pc, #248]	; (8010644 <ip4_reass+0x450>)
 801054c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8010550:	493d      	ldr	r1, [pc, #244]	; (8010648 <ip4_reass+0x454>)
 8010552:	483e      	ldr	r0, [pc, #248]	; (801064c <ip4_reass+0x458>)
 8010554:	f001 f854 	bl	8011600 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8010558:	9b02      	ldr	r3, [sp, #8]
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	b133      	cbz	r3, 801056c <ip4_reass+0x378>
 801055e:	4b39      	ldr	r3, [pc, #228]	; (8010644 <ip4_reass+0x450>)
 8010560:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8010564:	493a      	ldr	r1, [pc, #232]	; (8010650 <ip4_reass+0x45c>)
 8010566:	4839      	ldr	r0, [pc, #228]	; (801064c <ip4_reass+0x458>)
 8010568:	f001 f84a 	bl	8011600 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801056c:	f8b8 3000 	ldrh.w	r3, [r8]
 8010570:	443b      	add	r3, r7
 8010572:	f8a8 3000 	strh.w	r3, [r8]
  if (is_last) {
 8010576:	9b01      	ldr	r3, [sp, #4]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d156      	bne.n	801062a <ip4_reass+0x436>
    u16_t datagram_len = (u16_t)(offset + len);
 801057c:	9800      	ldr	r0, [sp, #0]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801057e:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 8010580:	4430      	add	r0, r6
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8010582:	f043 0301 	orr.w	r3, r3, #1
    u16_t datagram_len = (u16_t)(offset + len);
 8010586:	b280      	uxth	r0, r0
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8010588:	77a3      	strb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 801058a:	83a0      	strh	r0, [r4, #28]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801058c:	6863      	ldr	r3, [r4, #4]
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801058e:	3014      	adds	r0, #20
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8010590:	68e5      	ldr	r5, [r4, #12]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8010592:	685e      	ldr	r6, [r3, #4]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8010594:	b280      	uxth	r0, r0
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8010596:	68a3      	ldr	r3, [r4, #8]
 8010598:	6921      	ldr	r1, [r4, #16]
 801059a:	6962      	ldr	r2, [r4, #20]
 801059c:	6075      	str	r5, [r6, #4]
 801059e:	60b1      	str	r1, [r6, #8]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80105a0:	6835      	ldr	r5, [r6, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80105a2:	60f2      	str	r2, [r6, #12]
 80105a4:	6033      	str	r3, [r6, #0]
 80105a6:	69a3      	ldr	r3, [r4, #24]
 80105a8:	6133      	str	r3, [r6, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80105aa:	f7f8 fef5 	bl	8009398 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 80105ae:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80105b0:	8070      	strh	r0, [r6, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80105b2:	71b3      	strb	r3, [r6, #6]
 80105b4:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80105b6:	72b3      	strb	r3, [r6, #10]
 80105b8:	72f3      	strb	r3, [r6, #11]
    p = ipr->p;
 80105ba:	6866      	ldr	r6, [r4, #4]
    while (r != NULL) {
 80105bc:	b15d      	cbz	r5, 80105d6 <ip4_reass+0x3e2>
      iprh = (struct ip_reass_helper *)r->payload;
 80105be:	686f      	ldr	r7, [r5, #4]
      pbuf_remove_header(r, IP_HLEN);
 80105c0:	4628      	mov	r0, r5
 80105c2:	2114      	movs	r1, #20
 80105c4:	f7f9 fdfe 	bl	800a1c4 <pbuf_remove_header>
      pbuf_cat(p, r);
 80105c8:	4629      	mov	r1, r5
 80105ca:	4630      	mov	r0, r6
 80105cc:	f7fa f81e 	bl	800a60c <pbuf_cat>
      r = iprh->next_pbuf;
 80105d0:	683d      	ldr	r5, [r7, #0]
    while (r != NULL) {
 80105d2:	2d00      	cmp	r5, #0
 80105d4:	d1f3      	bne.n	80105be <ip4_reass+0x3ca>
    if (ipr == reassdatagrams) {
 80105d6:	f8d9 5000 	ldr.w	r5, [r9]
 80105da:	42a5      	cmp	r5, r4
 80105dc:	d005      	beq.n	80105ea <ip4_reass+0x3f6>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80105de:	b335      	cbz	r5, 801062e <ip4_reass+0x43a>
        if (ipr_prev->next == ipr) {
 80105e0:	682b      	ldr	r3, [r5, #0]
 80105e2:	42a3      	cmp	r3, r4
 80105e4:	d014      	beq.n	8010610 <ip4_reass+0x41c>
 80105e6:	461d      	mov	r5, r3
 80105e8:	e7f9      	b.n	80105de <ip4_reass+0x3ea>
    reassdatagrams = ipr->next;
 80105ea:	6823      	ldr	r3, [r4, #0]
 80105ec:	f8c9 3000 	str.w	r3, [r9]
  memp_free(MEMP_REASSDATA, ipr);
 80105f0:	4621      	mov	r1, r4
 80105f2:	2004      	movs	r0, #4
 80105f4:	f7f9 fac4 	bl	8009b80 <memp_free>
    clen = pbuf_clen(p);
 80105f8:	4630      	mov	r0, r6
 80105fa:	f7f9 ffdd 	bl	800a5b8 <pbuf_clen>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80105fe:	f8b8 3000 	ldrh.w	r3, [r8]
    clen = pbuf_clen(p);
 8010602:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8010604:	4283      	cmp	r3, r0
 8010606:	d306      	bcc.n	8010616 <ip4_reass+0x422>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8010608:	1b1b      	subs	r3, r3, r4
 801060a:	f8a8 3000 	strh.w	r3, [r8]
    return p;
 801060e:	e68b      	b.n	8010328 <ip4_reass+0x134>
    prev->next = ipr->next;
 8010610:	6823      	ldr	r3, [r4, #0]
 8010612:	602b      	str	r3, [r5, #0]
 8010614:	e7ec      	b.n	80105f0 <ip4_reass+0x3fc>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8010616:	4b0b      	ldr	r3, [pc, #44]	; (8010644 <ip4_reass+0x450>)
 8010618:	f240 229b 	movw	r2, #667	; 0x29b
 801061c:	490d      	ldr	r1, [pc, #52]	; (8010654 <ip4_reass+0x460>)
 801061e:	480b      	ldr	r0, [pc, #44]	; (801064c <ip4_reass+0x458>)
 8010620:	f000 ffee 	bl	8011600 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8010624:	f8b8 3000 	ldrh.w	r3, [r8]
 8010628:	e7ee      	b.n	8010608 <ip4_reass+0x414>
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801062a:	8ba0      	ldrh	r0, [r4, #28]
 801062c:	e7ae      	b.n	801058c <ip4_reass+0x398>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801062e:	4b05      	ldr	r3, [pc, #20]	; (8010644 <ip4_reass+0x450>)
 8010630:	f240 1245 	movw	r2, #325	; 0x145
 8010634:	4908      	ldr	r1, [pc, #32]	; (8010658 <ip4_reass+0x464>)
 8010636:	4805      	ldr	r0, [pc, #20]	; (801064c <ip4_reass+0x458>)
 8010638:	f000 ffe2 	bl	8011600 <iprintf>
    prev->next = ipr->next;
 801063c:	6823      	ldr	r3, [r4, #0]
 801063e:	602b      	str	r3, [r5, #0]
 8010640:	deff      	udf	#255	; 0xff
 8010642:	bf00      	nop
 8010644:	08014f10 	.word	0x08014f10
 8010648:	08014fd8 	.word	0x08014fd8
 801064c:	080124d0 	.word	0x080124d0
 8010650:	08014fe8 	.word	0x08014fe8
 8010654:	0801500c 	.word	0x0801500c
 8010658:	08014f98 	.word	0x08014f98

0801065c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801065c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8010660:	8c8b      	ldrh	r3, [r1, #36]	; 0x24
{
 8010662:	b08f      	sub	sp, #60	; 0x3c
 8010664:	4606      	mov	r6, r0
 8010666:	920c      	str	r2, [sp, #48]	; 0x30
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8010668:	f1b3 0214 	subs.w	r2, r3, #20
{
 801066c:	9109      	str	r1, [sp, #36]	; 0x24
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801066e:	bf48      	it	mi
 8010670:	f1a3 020d 	submi.w	r2, r3, #13
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8010674:	6843      	ldr	r3, [r0, #4]
 8010676:	9304      	str	r3, [sp, #16]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8010678:	f3c2 02cf 	ubfx	r2, r2, #3, #16
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801067c:	781b      	ldrb	r3, [r3, #0]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801067e:	9208      	str	r2, [sp, #32]
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8010680:	f003 030f 	and.w	r3, r3, #15
 8010684:	2b05      	cmp	r3, #5
 8010686:	ea4f 0583 	mov.w	r5, r3, lsl #2
 801068a:	f040 80e5 	bne.w	8010858 <ip4_frag+0x1fc>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801068e:	8943      	ldrh	r3, [r0, #10]
 8010690:	2b13      	cmp	r3, #19
 8010692:	f240 80e4 	bls.w	801085e <ip4_frag+0x202>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8010696:	9b04      	ldr	r3, [sp, #16]
 8010698:	88d8      	ldrh	r0, [r3, #6]
 801069a:	f7f8 fe7d 	bl	8009398 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;

  left = (u16_t)(p->tot_len - IP_HLEN);
 801069e:	8933      	ldrh	r3, [r6, #8]
  ofo = tmp & IP_OFFMASK;
 80106a0:	f3c0 020c 	ubfx	r2, r0, #0, #13
  left = (u16_t)(p->tot_len - IP_HLEN);
 80106a4:	3b14      	subs	r3, #20
  ofo = tmp & IP_OFFMASK;
 80106a6:	9207      	str	r2, [sp, #28]
  mf_set = tmp & IP_MF;
 80106a8:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
  left = (u16_t)(p->tot_len - IP_HLEN);
 80106ac:	b29b      	uxth	r3, r3
 80106ae:	920d      	str	r2, [sp, #52]	; 0x34
 80106b0:	9305      	str	r3, [sp, #20]

  while (left) {
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	f000 8098 	beq.w	80107e8 <ip4_frag+0x18c>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80106b8:	9b08      	ldr	r3, [sp, #32]
  u16_t newpbuflen = 0;
 80106ba:	2400      	movs	r4, #0
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
    if (rambuf == NULL) {
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80106bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010880 <ip4_frag+0x224>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80106c0:	00db      	lsls	r3, r3, #3
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80106c2:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8010888 <ip4_frag+0x22c>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80106c6:	b29b      	uxth	r3, r3
 80106c8:	930a      	str	r3, [sp, #40]	; 0x28
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80106ca:	f44f 7220 	mov.w	r2, #640	; 0x280
 80106ce:	2114      	movs	r1, #20
 80106d0:	200e      	movs	r0, #14
 80106d2:	f7f9 fe53 	bl	800a37c <pbuf_alloc>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80106d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80106d8:	9a05      	ldr	r2, [sp, #20]
    if (rambuf == NULL) {
 80106da:	9003      	str	r0, [sp, #12]
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80106dc:	4293      	cmp	r3, r2
 80106de:	bf28      	it	cs
 80106e0:	4613      	movcs	r3, r2
 80106e2:	9306      	str	r3, [sp, #24]
    if (rambuf == NULL) {
 80106e4:	2800      	cmp	r0, #0
 80106e6:	f000 80b4 	beq.w	8010852 <ip4_frag+0x1f6>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80106ea:	8943      	ldrh	r3, [r0, #10]
 80106ec:	2b13      	cmp	r3, #19
 80106ee:	f240 808c 	bls.w	801080a <ip4_frag+0x1ae>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80106f2:	9904      	ldr	r1, [sp, #16]
 80106f4:	9b03      	ldr	r3, [sp, #12]
 80106f6:	680a      	ldr	r2, [r1, #0]
 80106f8:	685b      	ldr	r3, [r3, #4]
 80106fa:	684f      	ldr	r7, [r1, #4]
 80106fc:	6888      	ldr	r0, [r1, #8]
 80106fe:	68c9      	ldr	r1, [r1, #12]
 8010700:	605f      	str	r7, [r3, #4]
 8010702:	60d9      	str	r1, [r3, #12]
 8010704:	9904      	ldr	r1, [sp, #16]
 8010706:	601a      	str	r2, [r3, #0]
 8010708:	6098      	str	r0, [r3, #8]
 801070a:	690a      	ldr	r2, [r1, #16]
 801070c:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 801070e:	9b03      	ldr	r3, [sp, #12]
 8010710:	685b      	ldr	r3, [r3, #4]
 8010712:	930b      	str	r3, [sp, #44]	; 0x2c

    left_to_copy = fragsize;
    while (left_to_copy) {
 8010714:	9b06      	ldr	r3, [sp, #24]
 8010716:	2b00      	cmp	r3, #0
 8010718:	d034      	beq.n	8010784 <ip4_frag+0x128>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801071a:	9302      	str	r3, [sp, #8]
      u16_t plen = (u16_t)(p->len - poff);
 801071c:	8973      	ldrh	r3, [r6, #10]
 801071e:	1b5c      	subs	r4, r3, r5
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8010720:	42ab      	cmp	r3, r5
      u16_t plen = (u16_t)(p->len - poff);
 8010722:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8010724:	d369      	bcc.n	80107fa <ip4_frag+0x19e>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8010726:	9b02      	ldr	r3, [sp, #8]
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8010728:	2005      	movs	r0, #5
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801072a:	429c      	cmp	r4, r3
 801072c:	bf28      	it	cs
 801072e:	461c      	movcs	r4, r3
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8010730:	2c00      	cmp	r4, #0
 8010732:	d05b      	beq.n	80107ec <ip4_frag+0x190>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8010734:	f7f9 f9de 	bl	8009af4 <memp_malloc>
 8010738:	4683      	mov	fp, r0
      if (pcr == NULL) {
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801073a:	2241      	movs	r2, #65	; 0x41
 801073c:	4621      	mov	r1, r4
 801073e:	2000      	movs	r0, #0
      if (pcr == NULL) {
 8010740:	f1bb 0f00 	cmp.w	fp, #0
 8010744:	d06c      	beq.n	8010820 <ip4_frag+0x1c4>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010746:	9401      	str	r4, [sp, #4]
 8010748:	465b      	mov	r3, fp
 801074a:	6877      	ldr	r7, [r6, #4]
 801074c:	eb07 0c05 	add.w	ip, r7, r5
 8010750:	f8cd c000 	str.w	ip, [sp]
 8010754:	f7f9 fce6 	bl	800a124 <pbuf_alloced_custom>
 8010758:	4682      	mov	sl, r0
      if (newpbuf == NULL) {
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 801075a:	4630      	mov	r0, r6
      if (newpbuf == NULL) {
 801075c:	f1ba 0f00 	cmp.w	sl, #0
 8010760:	d068      	beq.n	8010834 <ip4_frag+0x1d8>
      pbuf_ref(p);
 8010762:	f7f9 ff35 	bl	800a5d0 <pbuf_ref>
      pcr->original = p;
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8010766:	4b43      	ldr	r3, [pc, #268]	; (8010874 <ip4_frag+0x218>)

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8010768:	4651      	mov	r1, sl
 801076a:	9803      	ldr	r0, [sp, #12]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801076c:	f8cb 3010 	str.w	r3, [fp, #16]
      pcr->original = p;
 8010770:	f8cb 6014 	str.w	r6, [fp, #20]
      pbuf_cat(rambuf, newpbuf);
 8010774:	f7f9 ff4a 	bl	800a60c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8010778:	9b02      	ldr	r3, [sp, #8]
 801077a:	1b1f      	subs	r7, r3, r4
 801077c:	b2bb      	uxth	r3, r7
 801077e:	9302      	str	r3, [sp, #8]
      if (left_to_copy) {
 8010780:	2b00      	cmp	r3, #0
 8010782:	d133      	bne.n	80107ec <ip4_frag+0x190>
    }
    poff = (u16_t)(poff + newpbuflen);
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8010784:	9b09      	ldr	r3, [sp, #36]	; 0x24
    poff = (u16_t)(poff + newpbuflen);
 8010786:	4425      	add	r5, r4

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8010788:	9a07      	ldr	r2, [sp, #28]
    last = (left <= netif->mtu - IP_HLEN);
 801078a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    poff = (u16_t)(poff + newpbuflen);
 801078c:	b2ad      	uxth	r5, r5
    tmp = (IP_OFFMASK & (ofo));
 801078e:	f3c2 000c 	ubfx	r0, r2, #0, #13
    if (!last || mf_set) {
 8010792:	9a05      	ldr	r2, [sp, #20]
    last = (left <= netif->mtu - IP_HLEN);
 8010794:	3b13      	subs	r3, #19
    if (!last || mf_set) {
 8010796:	4293      	cmp	r3, r2
 8010798:	dd3f      	ble.n	801081a <ip4_frag+0x1be>
 801079a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801079c:	2b00      	cmp	r3, #0
 801079e:	d13c      	bne.n	801081a <ip4_frag+0x1be>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80107a0:	f7f8 fdfa 	bl	8009398 <lwip_htons>
 80107a4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80107a6:	9b06      	ldr	r3, [sp, #24]
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80107a8:	80f8      	strh	r0, [r7, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80107aa:	f103 0014 	add.w	r0, r3, #20
 80107ae:	b280      	uxth	r0, r0
 80107b0:	f7f8 fdf2 	bl	8009398 <lwip_htons>
    IPH_CHKSUM_SET(iphdr, 0);
 80107b4:	2300      	movs	r3, #0
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80107b6:	8078      	strh	r0, [r7, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80107b8:	72bb      	strb	r3, [r7, #10]
 80107ba:	72fb      	strb	r3, [r7, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80107bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80107be:	9f03      	ldr	r7, [sp, #12]
 80107c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80107c2:	4639      	mov	r1, r7
 80107c4:	6943      	ldr	r3, [r0, #20]
 80107c6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80107c8:	4638      	mov	r0, r7
 80107ca:	f7f9 fd67 	bl	800a29c <pbuf_free>
    left = (u16_t)(left - fragsize);
 80107ce:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 80107d2:	1ad3      	subs	r3, r2, r3
    ofo = (u16_t)(ofo + nfb);
 80107d4:	e9dd 2107 	ldrd	r2, r1, [sp, #28]
    left = (u16_t)(left - fragsize);
 80107d8:	b29b      	uxth	r3, r3
    ofo = (u16_t)(ofo + nfb);
 80107da:	440a      	add	r2, r1
    left = (u16_t)(left - fragsize);
 80107dc:	9305      	str	r3, [sp, #20]
    ofo = (u16_t)(ofo + nfb);
 80107de:	b292      	uxth	r2, r2
 80107e0:	9207      	str	r2, [sp, #28]
  while (left) {
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	f47f af71 	bne.w	80106ca <ip4_frag+0x6e>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80107e8:	2000      	movs	r0, #0
 80107ea:	e020      	b.n	801082e <ip4_frag+0x1d2>
        p = p->next;
 80107ec:	6836      	ldr	r6, [r6, #0]
  u16_t newpbuflen = 0;
 80107ee:	2500      	movs	r5, #0
      u16_t plen = (u16_t)(p->len - poff);
 80107f0:	8973      	ldrh	r3, [r6, #10]
 80107f2:	1b5c      	subs	r4, r3, r5
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80107f4:	42ab      	cmp	r3, r5
      u16_t plen = (u16_t)(p->len - poff);
 80107f6:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80107f8:	d295      	bcs.n	8010726 <ip4_frag+0xca>
 80107fa:	4643      	mov	r3, r8
 80107fc:	f240 322d 	movw	r2, #813	; 0x32d
 8010800:	491d      	ldr	r1, [pc, #116]	; (8010878 <ip4_frag+0x21c>)
 8010802:	4648      	mov	r0, r9
 8010804:	f000 fefc 	bl	8011600 <iprintf>
 8010808:	e78d      	b.n	8010726 <ip4_frag+0xca>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801080a:	4643      	mov	r3, r8
 801080c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8010810:	491a      	ldr	r1, [pc, #104]	; (801087c <ip4_frag+0x220>)
 8010812:	4648      	mov	r0, r9
 8010814:	f000 fef4 	bl	8011600 <iprintf>
 8010818:	e76b      	b.n	80106f2 <ip4_frag+0x96>
      tmp = tmp | IP_MF;
 801081a:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
 801081e:	e7bf      	b.n	80107a0 <ip4_frag+0x144>
        pbuf_free(rambuf);
 8010820:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8010824:	4658      	mov	r0, fp
 8010826:	f7f9 fd39 	bl	800a29c <pbuf_free>
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801082a:	f04f 30ff 	mov.w	r0, #4294967295
}
 801082e:	b00f      	add	sp, #60	; 0x3c
 8010830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  memp_free(MEMP_FRAG_PBUF, p);
 8010834:	46da      	mov	sl, fp
 8010836:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801083a:	2005      	movs	r0, #5
 801083c:	4651      	mov	r1, sl
 801083e:	f7f9 f99f 	bl	8009b80 <memp_free>
        pbuf_free(rambuf);
 8010842:	4658      	mov	r0, fp
 8010844:	f7f9 fd2a 	bl	800a29c <pbuf_free>
  return ERR_MEM;
 8010848:	f04f 30ff 	mov.w	r0, #4294967295
}
 801084c:	b00f      	add	sp, #60	; 0x3c
 801084e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return ERR_MEM;
 8010852:	f04f 30ff 	mov.w	r0, #4294967295
 8010856:	e7ea      	b.n	801082e <ip4_frag+0x1d2>
    return ERR_VAL;
 8010858:	f06f 0005 	mvn.w	r0, #5
 801085c:	e7e7      	b.n	801082e <ip4_frag+0x1d2>
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801085e:	4b08      	ldr	r3, [pc, #32]	; (8010880 <ip4_frag+0x224>)
 8010860:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8010864:	4907      	ldr	r1, [pc, #28]	; (8010884 <ip4_frag+0x228>)
 8010866:	4808      	ldr	r0, [pc, #32]	; (8010888 <ip4_frag+0x22c>)
 8010868:	f000 feca 	bl	8011600 <iprintf>
 801086c:	f06f 0005 	mvn.w	r0, #5
 8010870:	e7dd      	b.n	801082e <ip4_frag+0x1d2>
 8010872:	bf00      	nop
 8010874:	0800ffdd 	.word	0x0800ffdd
 8010878:	08015084 	.word	0x08015084
 801087c:	08015064 	.word	0x08015064
 8010880:	08014f10 	.word	0x08014f10
 8010884:	08015048 	.word	0x08015048
 8010888:	080124d0 	.word	0x080124d0

0801088c <ethernet_input>:
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801088c:	8943      	ldrh	r3, [r0, #10]
 801088e:	2b0e      	cmp	r3, #14
{
 8010890:	b570      	push	{r4, r5, r6, lr}
 8010892:	4604      	mov	r4, r0
  if (p->len <= SIZEOF_ETH_HDR) {
 8010894:	d91b      	bls.n	80108ce <ethernet_input+0x42>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8010896:	7bc3      	ldrb	r3, [r0, #15]
 8010898:	460d      	mov	r5, r1
 801089a:	b91b      	cbnz	r3, 80108a4 <ethernet_input+0x18>
    p->if_idx = netif_get_index(netif);
 801089c:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 80108a0:	3301      	adds	r3, #1
 80108a2:	73c3      	strb	r3, [r0, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80108a4:	6860      	ldr	r0, [r4, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80108a6:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 80108a8:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 80108aa:	07d9      	lsls	r1, r3, #31
 80108ac:	d50a      	bpl.n	80108c4 <ethernet_input+0x38>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80108ae:	2b01      	cmp	r3, #1
 80108b0:	d030      	beq.n	8010914 <ethernet_input+0x88>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80108b2:	2206      	movs	r2, #6
 80108b4:	491d      	ldr	r1, [pc, #116]	; (801092c <ethernet_input+0xa0>)
 80108b6:	f000 ffe9 	bl	801188c <memcmp>
 80108ba:	b918      	cbnz	r0, 80108c4 <ethernet_input+0x38>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80108bc:	7b63      	ldrb	r3, [r4, #13]
 80108be:	f043 0308 	orr.w	r3, r3, #8
 80108c2:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 80108c4:	2e08      	cmp	r6, #8
 80108c6:	d016      	beq.n	80108f6 <ethernet_input+0x6a>
 80108c8:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 80108cc:	d004      	beq.n	80108d8 <ethernet_input+0x4c>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 80108ce:	4620      	mov	r0, r4
 80108d0:	f7f9 fce4 	bl	800a29c <pbuf_free>
  return ERR_OK;
}
 80108d4:	2000      	movs	r0, #0
 80108d6:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80108d8:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 80108dc:	071b      	lsls	r3, r3, #28
 80108de:	d5f6      	bpl.n	80108ce <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80108e0:	210e      	movs	r1, #14
 80108e2:	4620      	mov	r0, r4
 80108e4:	f7f9 fc6e 	bl	800a1c4 <pbuf_remove_header>
 80108e8:	2800      	cmp	r0, #0
 80108ea:	d1f0      	bne.n	80108ce <ethernet_input+0x42>
        etharp_input(p, netif);
 80108ec:	4629      	mov	r1, r5
 80108ee:	4620      	mov	r0, r4
 80108f0:	f7fe fe7a 	bl	800f5e8 <etharp_input>
      break;
 80108f4:	e7ee      	b.n	80108d4 <ethernet_input+0x48>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80108f6:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 80108fa:	071a      	lsls	r2, r3, #28
 80108fc:	d5e7      	bpl.n	80108ce <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80108fe:	210e      	movs	r1, #14
 8010900:	4620      	mov	r0, r4
 8010902:	f7f9 fc5f 	bl	800a1c4 <pbuf_remove_header>
 8010906:	2800      	cmp	r0, #0
 8010908:	d1e1      	bne.n	80108ce <ethernet_input+0x42>
        ip4_input(p, netif);
 801090a:	4629      	mov	r1, r5
 801090c:	4620      	mov	r0, r4
 801090e:	f7ff f9d7 	bl	800fcc0 <ip4_input>
      break;
 8010912:	e7df      	b.n	80108d4 <ethernet_input+0x48>
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8010914:	7843      	ldrb	r3, [r0, #1]
 8010916:	2b00      	cmp	r3, #0
 8010918:	d1d4      	bne.n	80108c4 <ethernet_input+0x38>
 801091a:	7883      	ldrb	r3, [r0, #2]
 801091c:	2b5e      	cmp	r3, #94	; 0x5e
 801091e:	d1d1      	bne.n	80108c4 <ethernet_input+0x38>
        p->flags |= PBUF_FLAG_LLMCAST;
 8010920:	7b63      	ldrb	r3, [r4, #13]
 8010922:	f043 0310 	orr.w	r3, r3, #16
 8010926:	7363      	strb	r3, [r4, #13]
 8010928:	e7cc      	b.n	80108c4 <ethernet_input+0x38>
 801092a:	bf00      	nop
 801092c:	08015100 	.word	0x08015100

08010930 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8010930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010934:	460c      	mov	r4, r1
 8010936:	4605      	mov	r5, r0
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8010938:	f8bd 0018 	ldrh.w	r0, [sp, #24]
                u16_t eth_type) {
 801093c:	4616      	mov	r6, r2
 801093e:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 8010940:	f7f8 fd2a 	bl	8009398 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8010944:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 8010946:	4680      	mov	r8, r0
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8010948:	4620      	mov	r0, r4
 801094a:	f7f9 fc07 	bl	800a15c <pbuf_add_header>
 801094e:	b9e0      	cbnz	r0, 801098a <ethernet_output+0x5a>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8010950:	6861      	ldr	r1, [r4, #4]
  ethhdr->type = eth_type_be;
 8010952:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8010956:	683b      	ldr	r3, [r7, #0]
 8010958:	600b      	str	r3, [r1, #0]
 801095a:	88bb      	ldrh	r3, [r7, #4]
 801095c:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801095e:	6833      	ldr	r3, [r6, #0]
 8010960:	f8c1 3006 	str.w	r3, [r1, #6]
 8010964:	88b3      	ldrh	r3, [r6, #4]
 8010966:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8010968:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 801096c:	2b06      	cmp	r3, #6
 801096e:	d006      	beq.n	801097e <ethernet_output+0x4e>
 8010970:	4b08      	ldr	r3, [pc, #32]	; (8010994 <ethernet_output+0x64>)
 8010972:	f44f 7299 	mov.w	r2, #306	; 0x132
 8010976:	4908      	ldr	r1, [pc, #32]	; (8010998 <ethernet_output+0x68>)
 8010978:	4808      	ldr	r0, [pc, #32]	; (801099c <ethernet_output+0x6c>)
 801097a:	f000 fe41 	bl	8011600 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801097e:	69ab      	ldr	r3, [r5, #24]
 8010980:	4621      	mov	r1, r4
 8010982:	4628      	mov	r0, r5
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 8010984:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 8010988:	4718      	bx	r3
}
 801098a:	f06f 0001 	mvn.w	r0, #1
 801098e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010992:	bf00      	nop
 8010994:	08015094 	.word	0x08015094
 8010998:	080150cc 	.word	0x080150cc
 801099c:	080124d0 	.word	0x080124d0

080109a0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80109a0:	b530      	push	{r4, r5, lr}
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80109a2:	2300      	movs	r3, #0
{
 80109a4:	b085      	sub	sp, #20
 80109a6:	460d      	mov	r5, r1
  osMessageQDef(QUEUE, size, void *);
 80109a8:	2204      	movs	r2, #4
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80109aa:	4619      	mov	r1, r3
{
 80109ac:	4604      	mov	r4, r0
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80109ae:	4668      	mov	r0, sp
  osMessageQDef(QUEUE, size, void *);
 80109b0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80109b4:	e9cd 5200 	strd	r5, r2, [sp]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80109b8:	f7f3 fec8 	bl	800474c <osMessageCreate>
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80109bc:	fab0 f380 	clz	r3, r0
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80109c0:	6020      	str	r0, [r4, #0]
  if(*mbox == NULL)
 80109c2:	095b      	lsrs	r3, r3, #5
    return ERR_MEM;

  return ERR_OK;
}
 80109c4:	4258      	negs	r0, r3
 80109c6:	b005      	add	sp, #20
 80109c8:	bd30      	pop	{r4, r5, pc}
 80109ca:	bf00      	nop

080109cc <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 80109cc:	b510      	push	{r4, lr}
 80109ce:	4604      	mov	r4, r0
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 80109d0:	6800      	ldr	r0, [r0, #0]
 80109d2:	f7f3 ff3b 	bl	800484c <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 80109d6:	6820      	ldr	r0, [r4, #0]
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 80109d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  osMessageDelete(*mbox);
 80109dc:	f7f3 bf3e 	b.w	800485c <osMessageDelete>

080109e0 <sys_mbox_trypost>:
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80109e0:	2200      	movs	r2, #0
 80109e2:	6800      	ldr	r0, [r0, #0]
{
 80109e4:	b508      	push	{r3, lr}
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80109e6:	f7f3 fec5 	bl	8004774 <osMessagePut>
 80109ea:	3800      	subs	r0, #0
 80109ec:	bf18      	it	ne
 80109ee:	2001      	movne	r0, #1
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 80109f0:	4240      	negs	r0, r0
 80109f2:	bd08      	pop	{r3, pc}

080109f4 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80109f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80109f6:	4614      	mov	r4, r2
 80109f8:	b085      	sub	sp, #20
 80109fa:	4605      	mov	r5, r0
 80109fc:	460f      	mov	r7, r1
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80109fe:	f7f3 fd7b 	bl	80044f8 <osKernelSysTick>
 8010a02:	4606      	mov	r6, r0
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8010a04:	b15c      	cbz	r4, 8010a1e <sys_arch_mbox_fetch+0x2a>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8010a06:	4622      	mov	r2, r4
 8010a08:	6829      	ldr	r1, [r5, #0]
 8010a0a:	a801      	add	r0, sp, #4
 8010a0c:	f7f3 fede 	bl	80047cc <osMessageGet>

    if(event.status == osEventMessage)
 8010a10:	9b01      	ldr	r3, [sp, #4]
 8010a12:	2b10      	cmp	r3, #16
 8010a14:	d009      	beq.n	8010a2a <sys_arch_mbox_fetch+0x36>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8010a16:	f04f 30ff 	mov.w	r0, #4294967295
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8010a1a:	b005      	add	sp, #20
 8010a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    event = osMessageGet (*mbox, osWaitForever);
 8010a1e:	f04f 32ff 	mov.w	r2, #4294967295
 8010a22:	6829      	ldr	r1, [r5, #0]
 8010a24:	a801      	add	r0, sp, #4
 8010a26:	f7f3 fed1 	bl	80047cc <osMessageGet>
    *msg = (void *)event.value.v;
 8010a2a:	9b02      	ldr	r3, [sp, #8]
 8010a2c:	603b      	str	r3, [r7, #0]
    return (osKernelSysTick() - starttime);
 8010a2e:	f7f3 fd63 	bl	80044f8 <osKernelSysTick>
 8010a32:	1b80      	subs	r0, r0, r6
}
 8010a34:	b005      	add	sp, #20
 8010a36:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010a38 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8010a38:	b510      	push	{r4, lr}
 8010a3a:	4604      	mov	r4, r0
 8010a3c:	b084      	sub	sp, #16
 8010a3e:	460b      	mov	r3, r1
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8010a40:	2200      	movs	r2, #0
 8010a42:	6821      	ldr	r1, [r4, #0]
 8010a44:	a801      	add	r0, sp, #4
{
 8010a46:	461c      	mov	r4, r3
  event = osMessageGet (*mbox, 0);
 8010a48:	f7f3 fec0 	bl	80047cc <osMessageGet>

  if(event.status == osEventMessage)
 8010a4c:	9b01      	ldr	r3, [sp, #4]
 8010a4e:	2b10      	cmp	r3, #16
 8010a50:	d003      	beq.n	8010a5a <sys_arch_mbox_tryfetch+0x22>
#endif
    return ERR_OK;
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8010a52:	f04f 30ff 	mov.w	r0, #4294967295
  }
}
 8010a56:	b004      	add	sp, #16
 8010a58:	bd10      	pop	{r4, pc}
    *msg = (void *)event.value.v;
 8010a5a:	9b02      	ldr	r3, [sp, #8]
    return ERR_OK;
 8010a5c:	2000      	movs	r0, #0
    *msg = (void *)event.value.v;
 8010a5e:	6023      	str	r3, [r4, #0]
}
 8010a60:	b004      	add	sp, #16
 8010a62:	bd10      	pop	{r4, pc}

08010a64 <sys_mbox_valid>:
 8010a64:	6800      	ldr	r0, [r0, #0]
 8010a66:	3800      	subs	r0, #0
 8010a68:	bf18      	it	ne
 8010a6a:	2001      	movne	r0, #1
 8010a6c:	4770      	bx	lr
 8010a6e:	bf00      	nop

08010a70 <sys_mbox_set_invalid>:
 8010a70:	2300      	movs	r3, #0
 8010a72:	6003      	str	r3, [r0, #0]
 8010a74:	4770      	bx	lr
 8010a76:	bf00      	nop

08010a78 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8010a78:	b570      	push	{r4, r5, r6, lr}
 8010a7a:	b082      	sub	sp, #8
 8010a7c:	4606      	mov	r6, r0
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8010a7e:	2400      	movs	r4, #0
{
 8010a80:	460d      	mov	r5, r1
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8010a82:	4668      	mov	r0, sp
 8010a84:	2101      	movs	r1, #1
  osSemaphoreDef(SEM);
 8010a86:	e9cd 4400 	strd	r4, r4, [sp]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8010a8a:	f7f3 fdd3 	bl	8004634 <osSemaphoreCreate>
 8010a8e:	6030      	str	r0, [r6, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8010a90:	b148      	cbz	r0, 8010aa6 <sys_sem_new+0x2e>
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
  }

  if(count == 0)	// Means it can't be taken
 8010a92:	b115      	cbz	r5, 8010a9a <sys_sem_new+0x22>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8010a94:	4620      	mov	r0, r4
}
 8010a96:	b002      	add	sp, #8
 8010a98:	bd70      	pop	{r4, r5, r6, pc}
    osSemaphoreWait(*sem, 0);
 8010a9a:	4629      	mov	r1, r5
 8010a9c:	f7f3 fdf6 	bl	800468c <osSemaphoreWait>
  return ERR_OK;
 8010aa0:	4628      	mov	r0, r5
}
 8010aa2:	b002      	add	sp, #8
 8010aa4:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 8010aa6:	f04f 30ff 	mov.w	r0, #4294967295
 8010aaa:	e7f4      	b.n	8010a96 <sys_sem_new+0x1e>

08010aac <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8010aac:	b570      	push	{r4, r5, r6, lr}
 8010aae:	460e      	mov	r6, r1
 8010ab0:	4604      	mov	r4, r0
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8010ab2:	f7f3 fd21 	bl	80044f8 <osKernelSysTick>
 8010ab6:	4605      	mov	r5, r0
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8010ab8:	b956      	cbnz	r6, 8010ad0 <sys_arch_sem_wait+0x24>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8010aba:	f04f 31ff 	mov.w	r1, #4294967295
 8010abe:	6820      	ldr	r0, [r4, #0]
 8010ac0:	f7f3 fde4 	bl	800468c <osSemaphoreWait>
 8010ac4:	2800      	cmp	r0, #0
 8010ac6:	d1f8      	bne.n	8010aba <sys_arch_sem_wait+0xe>
    return (osKernelSysTick() - starttime);
 8010ac8:	f7f3 fd16 	bl	80044f8 <osKernelSysTick>
 8010acc:	1b40      	subs	r0, r0, r5
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8010ace:	bd70      	pop	{r4, r5, r6, pc}
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8010ad0:	4631      	mov	r1, r6
 8010ad2:	6820      	ldr	r0, [r4, #0]
 8010ad4:	f7f3 fdda 	bl	800468c <osSemaphoreWait>
 8010ad8:	2800      	cmp	r0, #0
 8010ada:	d0f5      	beq.n	8010ac8 <sys_arch_sem_wait+0x1c>
      return SYS_ARCH_TIMEOUT;
 8010adc:	f04f 30ff 	mov.w	r0, #4294967295
}
 8010ae0:	bd70      	pop	{r4, r5, r6, pc}
 8010ae2:	bf00      	nop

08010ae4 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
  osSemaphoreRelease(*sem);
 8010ae4:	6800      	ldr	r0, [r0, #0]
 8010ae6:	f7f3 bdfd 	b.w	80046e4 <osSemaphoreRelease>
 8010aea:	bf00      	nop

08010aec <sys_sem_free>:
{
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8010aec:	6800      	ldr	r0, [r0, #0]
 8010aee:	f7f3 be21 	b.w	8004734 <osSemaphoreDelete>
 8010af2:	bf00      	nop

08010af4 <sys_sem_valid>:
}
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
  if (*sem == SYS_SEM_NULL)
 8010af4:	6800      	ldr	r0, [r0, #0]
    return 0;
  else
    return 1;
}
 8010af6:	3800      	subs	r0, #0
 8010af8:	bf18      	it	ne
 8010afa:	2001      	movne	r0, #1
 8010afc:	4770      	bx	lr
 8010afe:	bf00      	nop

08010b00 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
  *sem = SYS_SEM_NULL;
 8010b00:	2300      	movs	r3, #0
 8010b02:	6003      	str	r3, [r0, #0]
}
 8010b04:	4770      	bx	lr
 8010b06:	bf00      	nop

08010b08 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8010b08:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8010b0a:	4803      	ldr	r0, [pc, #12]	; (8010b18 <sys_init+0x10>)
 8010b0c:	f7f3 fd36 	bl	800457c <osMutexCreate>
 8010b10:	4b02      	ldr	r3, [pc, #8]	; (8010b1c <sys_init+0x14>)
 8010b12:	6018      	str	r0, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8010b14:	bd08      	pop	{r3, pc}
 8010b16:	bf00      	nop
 8010b18:	08015110 	.word	0x08015110
 8010b1c:	2400e7b4 	.word	0x2400e7b4

08010b20 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8010b20:	b510      	push	{r4, lr}
 8010b22:	b082      	sub	sp, #8

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8010b24:	2300      	movs	r3, #0
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8010b26:	4604      	mov	r4, r0
  *mutex = osMutexCreate(osMutex(MUTEX));
 8010b28:	4668      	mov	r0, sp
  osMutexDef(MUTEX);
 8010b2a:	e9cd 3300 	strd	r3, r3, [sp]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8010b2e:	f7f3 fd25 	bl	800457c <osMutexCreate>
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8010b32:	fab0 f380 	clz	r3, r0
  *mutex = osMutexCreate(osMutex(MUTEX));
 8010b36:	6020      	str	r0, [r4, #0]
  if(*mutex == NULL)
 8010b38:	095b      	lsrs	r3, r3, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 8010b3a:	4258      	negs	r0, r3
 8010b3c:	b002      	add	sp, #8
 8010b3e:	bd10      	pop	{r4, pc}

08010b40 <sys_mutex_lock>:
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8010b40:	f04f 31ff 	mov.w	r1, #4294967295
 8010b44:	6800      	ldr	r0, [r0, #0]
 8010b46:	f7f3 bd21 	b.w	800458c <osMutexWait>
 8010b4a:	bf00      	nop

08010b4c <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 8010b4c:	6800      	ldr	r0, [r0, #0]
 8010b4e:	f7f3 bd49 	b.w	80045e4 <osMutexRelease>
 8010b52:	bf00      	nop

08010b54 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8010b54:	b510      	push	{r4, lr}
 8010b56:	b088      	sub	sp, #32
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8010b58:	2400      	movs	r4, #0
 8010b5a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8010b5e:	9305      	str	r3, [sp, #20]
  return osThreadCreate(&os_thread_def, arg);
 8010b60:	4611      	mov	r1, r2
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8010b62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  return osThreadCreate(&os_thread_def, arg);
 8010b64:	a801      	add	r0, sp, #4
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8010b66:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8010b6a:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8010b6e:	f8ad 300c 	strh.w	r3, [sp, #12]
  return osThreadCreate(&os_thread_def, arg);
 8010b72:	f7f3 fcc9 	bl	8004508 <osThreadCreate>
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8010b76:	b008      	add	sp, #32
 8010b78:	bd10      	pop	{r4, pc}
 8010b7a:	bf00      	nop

08010b7c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8010b7c:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8010b7e:	4b04      	ldr	r3, [pc, #16]	; (8010b90 <sys_arch_protect+0x14>)
 8010b80:	f04f 31ff 	mov.w	r1, #4294967295
 8010b84:	6818      	ldr	r0, [r3, #0]
 8010b86:	f7f3 fd01 	bl	800458c <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
}
 8010b8a:	2001      	movs	r0, #1
 8010b8c:	bd08      	pop	{r3, pc}
 8010b8e:	bf00      	nop
 8010b90:	2400e7b4 	.word	0x2400e7b4

08010b94 <sys_arch_unprotect>:
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8010b94:	4b01      	ldr	r3, [pc, #4]	; (8010b9c <sys_arch_unprotect+0x8>)
 8010b96:	6818      	ldr	r0, [r3, #0]
 8010b98:	f7f3 bd24 	b.w	80045e4 <osMutexRelease>
 8010b9c:	2400e7b4 	.word	0x2400e7b4

08010ba0 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8010ba0:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8010ba4:	4905      	ldr	r1, [pc, #20]	; (8010bbc <__NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8010ba6:	4b06      	ldr	r3, [pc, #24]	; (8010bc0 <__NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8010ba8:	68ca      	ldr	r2, [r1, #12]
 8010baa:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8010bae:	4313      	orrs	r3, r2
 8010bb0:	60cb      	str	r3, [r1, #12]
 8010bb2:	f3bf 8f4f 	dsb	sy
    __NOP();
 8010bb6:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8010bb8:	e7fd      	b.n	8010bb6 <__NVIC_SystemReset+0x16>
 8010bba:	bf00      	nop
 8010bbc:	e000ed00 	.word	0xe000ed00
 8010bc0:	05fa0004 	.word	0x05fa0004

08010bc4 <msgFreeCallback>:

}
#endif

void msgFreeCallback(void * data) {
	free(data);
 8010bc4:	f000 bb56 	b.w	8011274 <free>

08010bc8 <devparse>:
		int connfd) {
 8010bc8:	b570      	push	{r4, r5, r6, lr}
	if (len > 0) {
 8010bca:	2900      	cmp	r1, #0
 8010bcc:	d050      	beq.n	8010c70 <devparse+0xa8>
 8010bce:	4614      	mov	r4, r2
		switch (opcode) {
 8010bd0:	7802      	ldrb	r2, [r0, #0]
 8010bd2:	461d      	mov	r5, r3
 8010bd4:	3a41      	subs	r2, #65	; 0x41
 8010bd6:	2a11      	cmp	r2, #17
 8010bd8:	d80a      	bhi.n	8010bf0 <devparse+0x28>
 8010bda:	e8df f002 	tbb	[pc, r2]
 8010bde:	092b      	.short	0x092b
 8010be0:	09090909 	.word	0x09090909
 8010be4:	094e0921 	.word	0x094e0921
 8010be8:	09090909 	.word	0x09090909
 8010bec:	4c090909 	.word	0x4c090909
			memcpy(str, "Unknown Command\r\n", 18);
 8010bf0:	4e28      	ldr	r6, [pc, #160]	; (8010c94 <devparse+0xcc>)
			str = malloc(18);
 8010bf2:	2012      	movs	r0, #18
 8010bf4:	f000 fb36 	bl	8011264 <malloc>
			memcpy(str, "Unknown Command\r\n", 18);
 8010bf8:	4684      	mov	ip, r0
			strcpy(response, str);
 8010bfa:	4686      	mov	lr, r0
		return PARSE_OK;
 8010bfc:	2500      	movs	r5, #0
			memcpy(str, "Unknown Command\r\n", 18);
 8010bfe:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8010c00:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010c04:	6833      	ldr	r3, [r6, #0]
 8010c06:	f8ac 3000 	strh.w	r3, [ip]
			strcpy(response, str);
 8010c0a:	f8bc 3000 	ldrh.w	r3, [ip]
 8010c0e:	8223      	strh	r3, [r4, #16]
 8010c10:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010c14:	6020      	str	r0, [r4, #0]
}
 8010c16:	4628      	mov	r0, r5
			strcpy(response, str);
 8010c18:	6061      	str	r1, [r4, #4]
 8010c1a:	60a2      	str	r2, [r4, #8]
 8010c1c:	60e3      	str	r3, [r4, #12]
}
 8010c1e:	bd70      	pop	{r4, r5, r6, pc}
			*ret_len = strlen(GIT_INFO);
 8010c20:	236b      	movs	r3, #107	; 0x6b
			strcpy(response, GIT_INFO);
 8010c22:	226c      	movs	r2, #108	; 0x6c
 8010c24:	491c      	ldr	r1, [pc, #112]	; (8010c98 <devparse+0xd0>)
 8010c26:	4620      	mov	r0, r4
			*ret_len = strlen(GIT_INFO);
 8010c28:	802b      	strh	r3, [r5, #0]
		return PARSE_OK;
 8010c2a:	2500      	movs	r5, #0
			strcpy(response, GIT_INFO);
 8010c2c:	f000 ff19 	bl	8011a62 <memcpy>
}
 8010c30:	4628      	mov	r0, r5
 8010c32:	bd70      	pop	{r4, r5, r6, pc}
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin); // Toggle LED1
 8010c34:	2101      	movs	r1, #1
 8010c36:	4819      	ldr	r0, [pc, #100]	; (8010c9c <devparse+0xd4>)
 8010c38:	f7f1 fa42 	bl	80020c0 <HAL_GPIO_TogglePin>
			str = malloc(15);
 8010c3c:	200f      	movs	r0, #15
 8010c3e:	f000 fb11 	bl	8011264 <malloc>
			*ret_len = strlen(str);
 8010c42:	220e      	movs	r2, #14
			memcpy(str, "Toggled LED1\r\n", 15);
 8010c44:	4b16      	ldr	r3, [pc, #88]	; (8010ca0 <devparse+0xd8>)
 8010c46:	4684      	mov	ip, r0
			*ret_len = strlen(str);
 8010c48:	802a      	strh	r2, [r5, #0]
			strcpy(response, str);
 8010c4a:	4606      	mov	r6, r0
		return PARSE_OK;
 8010c4c:	2500      	movs	r5, #0
			memcpy(str, "Toggled LED1\r\n", 15);
 8010c4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010c50:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 8010c54:	f82c 3b02 	strh.w	r3, [ip], #2
 8010c58:	0c1b      	lsrs	r3, r3, #16
 8010c5a:	f88c 3000 	strb.w	r3, [ip]
			strcpy(response, str);
 8010c5e:	73a3      	strb	r3, [r4, #14]
 8010c60:	ce07      	ldmia	r6!, {r0, r1, r2}
 8010c62:	8833      	ldrh	r3, [r6, #0]
 8010c64:	6020      	str	r0, [r4, #0]
}
 8010c66:	4628      	mov	r0, r5
			strcpy(response, str);
 8010c68:	6061      	str	r1, [r4, #4]
 8010c6a:	60a2      	str	r2, [r4, #8]
 8010c6c:	81a3      	strh	r3, [r4, #12]
}
 8010c6e:	bd70      	pop	{r4, r5, r6, pc}
		return PARSE_ERR;
 8010c70:	2501      	movs	r5, #1
}
 8010c72:	4628      	mov	r0, r5
 8010c74:	bd70      	pop	{r4, r5, r6, pc}
			NVIC_SystemReset();
 8010c76:	f7ff ff93 	bl	8010ba0 <__NVIC_SystemReset>
			HAL_PWR_EnableBkUpAccess();
 8010c7a:	f7f1 fa2b 	bl	80020d4 <HAL_PWR_EnableBkUpAccess>
			HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0xDEE2);
 8010c7e:	f64d 62e2 	movw	r2, #57058	; 0xdee2
 8010c82:	2101      	movs	r1, #1
 8010c84:	4807      	ldr	r0, [pc, #28]	; (8010ca4 <devparse+0xdc>)
 8010c86:	f7f2 feb5 	bl	80039f4 <HAL_RTCEx_BKUPWrite>
			HAL_PWR_DisableBkUpAccess();
 8010c8a:	f7f1 fa2b 	bl	80020e4 <HAL_PWR_DisableBkUpAccess>
			NVIC_SystemReset();
 8010c8e:	f7ff ff87 	bl	8010ba0 <__NVIC_SystemReset>
 8010c92:	bf00      	nop
 8010c94:	08015194 	.word	0x08015194
 8010c98:	08015128 	.word	0x08015128
 8010c9c:	58020400 	.word	0x58020400
 8010ca0:	08015118 	.word	0x08015118
 8010ca4:	2400034c 	.word	0x2400034c

08010ca8 <server_init>:

/*
 * Starts the TCP server
 * Creates a listen thread, a recv thread, and a send thread
 */
void server_init() {
 8010ca8:	b510      	push	{r4, lr}

	memset(connections, -1, MAX_CONN_NUM * sizeof(int));
 8010caa:	2220      	movs	r2, #32
void server_init() {
 8010cac:	b082      	sub	sp, #8
	memset(connections, -1, MAX_CONN_NUM * sizeof(int));
 8010cae:	f04f 31ff 	mov.w	r1, #4294967295
 8010cb2:	481d      	ldr	r0, [pc, #116]	; (8010d28 <server_init+0x80>)
 8010cb4:	f000 fdfa 	bl	80118ac <memset>

	conn_mu = malloc(sizeof(sys_mutex_t));
 8010cb8:	2004      	movs	r0, #4
 8010cba:	f000 fad3 	bl	8011264 <malloc>
 8010cbe:	4b1b      	ldr	r3, [pc, #108]	; (8010d2c <server_init+0x84>)
 8010cc0:	6018      	str	r0, [r3, #0]
	err_t err = sys_mutex_new(conn_mu);
 8010cc2:	f7ff ff2d 	bl	8010b20 <sys_mutex_new>

	// size of list element is max message size + length and connfd integers
	rxMsgBuffer = list_create(MAX_MSG_LEN + 2*sizeof(int), msgFreeCallback);
 8010cc6:	491a      	ldr	r1, [pc, #104]	; (8010d30 <server_init+0x88>)
	err_t err = sys_mutex_new(conn_mu);
 8010cc8:	4604      	mov	r4, r0
	rxMsgBuffer = list_create(MAX_MSG_LEN + 2*sizeof(int), msgFreeCallback);
 8010cca:	f44f 709a 	mov.w	r0, #308	; 0x134
 8010cce:	f000 f9b5 	bl	801103c <list_create>
 8010cd2:	4b18      	ldr	r3, [pc, #96]	; (8010d34 <server_init+0x8c>)
 8010cd4:	4602      	mov	r2, r0
	txMsgBuffer = list_create(MAX_MSG_LEN + 2*sizeof(int), msgFreeCallback);
 8010cd6:	4916      	ldr	r1, [pc, #88]	; (8010d30 <server_init+0x88>)
 8010cd8:	f44f 709a 	mov.w	r0, #308	; 0x134
	rxMsgBuffer = list_create(MAX_MSG_LEN + 2*sizeof(int), msgFreeCallback);
 8010cdc:	601a      	str	r2, [r3, #0]
	txMsgBuffer = list_create(MAX_MSG_LEN + 2*sizeof(int), msgFreeCallback);
 8010cde:	f000 f9ad 	bl	801103c <list_create>
 8010ce2:	4b15      	ldr	r3, [pc, #84]	; (8010d38 <server_init+0x90>)
 8010ce4:	6018      	str	r0, [r3, #0]

	if (err == ERR_OK) {
 8010ce6:	b9cc      	cbnz	r4, 8010d1c <server_init+0x74>

		// prime server to connect to clients
		if ( NULL == sys_thread_new("server_listen_thread", server_listen, NULL, 512,
 8010ce8:	4622      	mov	r2, r4
 8010cea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010cee:	4913      	ldr	r1, [pc, #76]	; (8010d3c <server_init+0x94>)
 8010cf0:	9400      	str	r4, [sp, #0]
 8010cf2:	4813      	ldr	r0, [pc, #76]	; (8010d40 <server_init+0x98>)
 8010cf4:	f7ff ff2e 	bl	8010b54 <sys_thread_new>
						osPriorityNormal)) {
		}

		// prime server to receive messages from clients
		if ( NULL == sys_thread_new("server_recv_thread", server_recv, NULL, 512,
 8010cf8:	4622      	mov	r2, r4
 8010cfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010cfe:	4911      	ldr	r1, [pc, #68]	; (8010d44 <server_init+0x9c>)
 8010d00:	9400      	str	r4, [sp, #0]
 8010d02:	4811      	ldr	r0, [pc, #68]	; (8010d48 <server_init+0xa0>)
 8010d04:	f7ff ff26 	bl	8010b54 <sys_thread_new>
						osPriorityNormal)) {
		}

		// prime server to send messages to clients
		if ( NULL == sys_thread_new("server_recv_thread", server_send, NULL, 512,
 8010d08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010d0c:	4622      	mov	r2, r4
 8010d0e:	490f      	ldr	r1, [pc, #60]	; (8010d4c <server_init+0xa4>)
 8010d10:	9400      	str	r4, [sp, #0]
 8010d12:	480d      	ldr	r0, [pc, #52]	; (8010d48 <server_init+0xa0>)
 8010d14:	f7ff ff1e 	bl	8010b54 <sys_thread_new>
		}
	}
	else {
		printf("Error in server init\r\n");
	}
}
 8010d18:	b002      	add	sp, #8
 8010d1a:	bd10      	pop	{r4, pc}
		printf("Error in server init\r\n");
 8010d1c:	480c      	ldr	r0, [pc, #48]	; (8010d50 <server_init+0xa8>)
}
 8010d1e:	b002      	add	sp, #8
 8010d20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printf("Error in server init\r\n");
 8010d24:	f000 bcd2 	b.w	80116cc <puts>
 8010d28:	2400e7bc 	.word	0x2400e7bc
 8010d2c:	2400e7b8 	.word	0x2400e7b8
 8010d30:	08010bc5 	.word	0x08010bc5
 8010d34:	2400e7dc 	.word	0x2400e7dc
 8010d38:	2400e7e0 	.word	0x2400e7e0
 8010d3c:	08010d99 	.word	0x08010d99
 8010d40:	080151a8 	.word	0x080151a8
 8010d44:	08010f79 	.word	0x08010f79
 8010d48:	080151c0 	.word	0x080151c0
 8010d4c:	08010e51 	.word	0x08010e51
 8010d50:	080151d4 	.word	0x080151d4

08010d54 <server_addConnection>:
}

/*
 * Adds socket to connections list
 */
void server_addConnection(int connfd) {
 8010d54:	b538      	push	{r3, r4, r5, lr}

	sys_mutex_lock(conn_mu);
 8010d56:	4d0d      	ldr	r5, [pc, #52]	; (8010d8c <server_addConnection+0x38>)
void server_addConnection(int connfd) {
 8010d58:	4604      	mov	r4, r0
	sys_mutex_lock(conn_mu);
 8010d5a:	6828      	ldr	r0, [r5, #0]
 8010d5c:	f7ff fef0 	bl	8010b40 <sys_mutex_lock>

	for (int i = 0; i < MAX_CONN_NUM; ++i) {
 8010d60:	4a0b      	ldr	r2, [pc, #44]	; (8010d90 <server_addConnection+0x3c>)
 8010d62:	2300      	movs	r3, #0
		if (connections[i] == -1) {
 8010d64:	f852 1f04 	ldr.w	r1, [r2, #4]!
 8010d68:	3101      	adds	r1, #1
 8010d6a:	d007      	beq.n	8010d7c <server_addConnection+0x28>
	for (int i = 0; i < MAX_CONN_NUM; ++i) {
 8010d6c:	3301      	adds	r3, #1
 8010d6e:	2b08      	cmp	r3, #8
 8010d70:	d1f8      	bne.n	8010d64 <server_addConnection+0x10>
			sys_mutex_unlock(conn_mu);
			return;
		}
	}

	sys_mutex_unlock(conn_mu);
 8010d72:	6828      	ldr	r0, [r5, #0]

}
 8010d74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	sys_mutex_unlock(conn_mu);
 8010d78:	f7ff bee8 	b.w	8010b4c <sys_mutex_unlock>
			connections[i] = connfd;
 8010d7c:	4a05      	ldr	r2, [pc, #20]	; (8010d94 <server_addConnection+0x40>)
			sys_mutex_unlock(conn_mu);
 8010d7e:	6828      	ldr	r0, [r5, #0]
			connections[i] = connfd;
 8010d80:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
}
 8010d84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			sys_mutex_unlock(conn_mu);
 8010d88:	f7ff bee0 	b.w	8010b4c <sys_mutex_unlock>
 8010d8c:	2400e7b8 	.word	0x2400e7b8
 8010d90:	2400e7b8 	.word	0x2400e7b8
 8010d94:	2400e7bc 	.word	0x2400e7bc

08010d98 <server_listen>:
void server_listen(void *arg) {
 8010d98:	b530      	push	{r4, r5, lr}
	serv.sin_family = AF_INET;
 8010d9a:	2402      	movs	r4, #2
void server_listen(void *arg) {
 8010d9c:	b08b      	sub	sp, #44	; 0x2c
	serv.sin_port = htons(SERVER_PORT);
 8010d9e:	f24c 3050 	movw	r0, #50000	; 0xc350
	serv.sin_family = AF_INET;
 8010da2:	f88d 4009 	strb.w	r4, [sp, #9]
	serv.sin_port = htons(SERVER_PORT);
 8010da6:	f7f8 faf7 	bl	8009398 <lwip_htons>
	serv.sin_addr.s_addr = (in_addr_t) ipaddr.addr;
 8010daa:	4b14      	ldr	r3, [pc, #80]	; (8010dfc <server_listen+0x64>)
	serv.sin_port = htons(SERVER_PORT);
 8010dac:	4605      	mov	r5, r0
	listen_sockfd = socket(AF_INET, SOCK_STREAM, 6); // 6 is the DARPA protocol # for tcp
 8010dae:	2206      	movs	r2, #6
 8010db0:	2101      	movs	r1, #1
	serv.sin_addr.s_addr = (in_addr_t) ipaddr.addr;
 8010db2:	681b      	ldr	r3, [r3, #0]
	listen_sockfd = socket(AF_INET, SOCK_STREAM, 6); // 6 is the DARPA protocol # for tcp
 8010db4:	4620      	mov	r0, r4
	serv.sin_port = htons(SERVER_PORT);
 8010db6:	f8ad 500a 	strh.w	r5, [sp, #10]
	serv.sin_addr.s_addr = (in_addr_t) ipaddr.addr;
 8010dba:	9303      	str	r3, [sp, #12]
	listen_sockfd = socket(AF_INET, SOCK_STREAM, 6); // 6 is the DARPA protocol # for tcp
 8010dbc:	f7f7 ffce 	bl	8008d5c <lwip_socket>
	if (listen_sockfd != -1) {
 8010dc0:	1c43      	adds	r3, r0, #1
 8010dc2:	d101      	bne.n	8010dc8 <server_listen+0x30>
}
 8010dc4:	b00b      	add	sp, #44	; 0x2c
 8010dc6:	bd30      	pop	{r4, r5, pc}
		err = bind(listen_sockfd, (struct sockaddr* ) &serv, sizeof(serv));
 8010dc8:	2210      	movs	r2, #16
 8010dca:	a902      	add	r1, sp, #8
 8010dcc:	4604      	mov	r4, r0
 8010dce:	f7f7 fdb7 	bl	8008940 <lwip_bind>
		if (err == 0) {
 8010dd2:	b968      	cbnz	r0, 8010df0 <server_listen+0x58>
			err = listen(listen_sockfd, MAX_CONN_NUM);
 8010dd4:	2108      	movs	r1, #8
 8010dd6:	4620      	mov	r0, r4
				clilen = sizeof(cli);
 8010dd8:	2510      	movs	r5, #16
			err = listen(listen_sockfd, MAX_CONN_NUM);
 8010dda:	f7f7 fe3b 	bl	8008a54 <lwip_listen>
				connfd = accept(listen_sockfd, (struct sockaddr* ) &cli, &clilen);
 8010dde:	aa01      	add	r2, sp, #4
 8010de0:	a906      	add	r1, sp, #24
 8010de2:	4620      	mov	r0, r4
				clilen = sizeof(cli);
 8010de4:	9501      	str	r5, [sp, #4]
				connfd = accept(listen_sockfd, (struct sockaddr* ) &cli, &clilen);
 8010de6:	f7f7 fcd3 	bl	8008790 <lwip_accept>
				server_addConnection(connfd);
 8010dea:	f7ff ffb3 	bl	8010d54 <server_addConnection>
			for (;;) {
 8010dee:	e7f6      	b.n	8010dde <server_listen+0x46>
			close(listen_sockfd);
 8010df0:	4620      	mov	r0, r4
 8010df2:	f7f7 fde7 	bl	80089c4 <lwip_close>
}
 8010df6:	b00b      	add	sp, #44	; 0x2c
 8010df8:	bd30      	pop	{r4, r5, pc}
 8010dfa:	bf00      	nop
 8010dfc:	24000410 	.word	0x24000410

08010e00 <server_removeConnection>:

/*
 * Removes socket from connections list and frees fd for a new socket to use
 */
void server_removeConnection(int connfd) {
 8010e00:	b538      	push	{r3, r4, r5, lr}

	sys_mutex_lock(conn_mu);
 8010e02:	4d10      	ldr	r5, [pc, #64]	; (8010e44 <server_removeConnection+0x44>)
void server_removeConnection(int connfd) {
 8010e04:	4604      	mov	r4, r0
	sys_mutex_lock(conn_mu);
 8010e06:	6828      	ldr	r0, [r5, #0]
 8010e08:	f7ff fe9a 	bl	8010b40 <sys_mutex_lock>

	for (int i = 0; i < MAX_CONN_NUM; ++i) {
 8010e0c:	4a0e      	ldr	r2, [pc, #56]	; (8010e48 <server_removeConnection+0x48>)
 8010e0e:	2300      	movs	r3, #0
		if (connections[i] == connfd) {
 8010e10:	f852 1f04 	ldr.w	r1, [r2, #4]!
 8010e14:	42a1      	cmp	r1, r4
 8010e16:	d007      	beq.n	8010e28 <server_removeConnection+0x28>
	for (int i = 0; i < MAX_CONN_NUM; ++i) {
 8010e18:	3301      	adds	r3, #1
 8010e1a:	2b08      	cmp	r3, #8
 8010e1c:	d1f8      	bne.n	8010e10 <server_removeConnection+0x10>
	sys_mutex_unlock(conn_mu);
 8010e1e:	6828      	ldr	r0, [r5, #0]
			return;
		}
	}

	sys_mutex_unlock(conn_mu);
}
 8010e20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	sys_mutex_unlock(conn_mu);
 8010e24:	f7ff be92 	b.w	8010b4c <sys_mutex_unlock>
			connections[i] = -1;
 8010e28:	4a08      	ldr	r2, [pc, #32]	; (8010e4c <server_removeConnection+0x4c>)
 8010e2a:	f04f 31ff 	mov.w	r1, #4294967295
			close(connfd);
 8010e2e:	4620      	mov	r0, r4
			connections[i] = -1;
 8010e30:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			close(connfd);
 8010e34:	f7f7 fdc6 	bl	80089c4 <lwip_close>
			sys_mutex_unlock(conn_mu);
 8010e38:	6828      	ldr	r0, [r5, #0]
}
 8010e3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			sys_mutex_unlock(conn_mu);
 8010e3e:	f7ff be85 	b.w	8010b4c <sys_mutex_unlock>
 8010e42:	bf00      	nop
 8010e44:	2400e7b8 	.word	0x2400e7b8
 8010e48:	2400e7b8 	.word	0x2400e7b8
 8010e4c:	2400e7bc 	.word	0x2400e7bc

08010e50 <server_send>:

void server_retrieveMsg(struct message* msg) {
	list_pop(rxMsgBuffer, (void*)(msg));
}

void server_send(void* args) {
 8010e50:	b580      	push	{r7, lr}
 8010e52:	b0ce      	sub	sp, #312	; 0x138
 8010e54:	4e0d      	ldr	r6, [pc, #52]	; (8010e8c <server_send+0x3c>)

	char buf[MAX_MSG_LEN];

	for (;;) {

		struct message msg = {-1, buf, MAX_MSG_LEN};
 8010e56:	f04f 35ff 	mov.w	r5, #4294967295
 8010e5a:	f44f 7496 	mov.w	r4, #300	; 0x12c
 8010e5e:	af03      	add	r7, sp, #12

		list_pop(txMsgBuffer, (void*)(&msg));
 8010e60:	4669      	mov	r1, sp
 8010e62:	6830      	ldr	r0, [r6, #0]
		struct message msg = {-1, buf, MAX_MSG_LEN};
 8010e64:	9402      	str	r4, [sp, #8]
 8010e66:	e9cd 5700 	strd	r5, r7, [sp]
		list_pop(txMsgBuffer, (void*)(&msg));
 8010e6a:	f000 f9bd 	bl	80111e8 <list_pop>

		if (-1 == send(msg.connfd, msg.buf, msg.len, 0)) { // opts = 0
 8010e6e:	2300      	movs	r3, #0
 8010e70:	9800      	ldr	r0, [sp, #0]
 8010e72:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
 8010e76:	f7f7 ff2f 	bl	8008cd8 <lwip_send>
 8010e7a:	3001      	adds	r0, #1
 8010e7c:	d102      	bne.n	8010e84 <server_send+0x34>
			// message failed to send
			server_removeConnection(msg.connfd);
 8010e7e:	9800      	ldr	r0, [sp, #0]
 8010e80:	f7ff ffbe 	bl	8010e00 <server_removeConnection>
		}

		free(msg.buf);
 8010e84:	9801      	ldr	r0, [sp, #4]
 8010e86:	f000 f9f5 	bl	8011274 <free>
	for (;;) {
 8010e8a:	e7e9      	b.n	8010e60 <server_send+0x10>
 8010e8c:	2400e7e0 	.word	0x2400e7e0

08010e90 <server_setFDs>:
void server_setFDs(fd_set *rfds) {
 8010e90:	b570      	push	{r4, r5, r6, lr}
	FD_ZERO(rfds);
 8010e92:	2300      	movs	r3, #0
void server_setFDs(fd_set *rfds) {
 8010e94:	4605      	mov	r5, r0
	sys_mutex_lock(conn_mu);
 8010e96:	4e12      	ldr	r6, [pc, #72]	; (8010ee0 <server_setFDs+0x50>)
 8010e98:	4c12      	ldr	r4, [pc, #72]	; (8010ee4 <server_setFDs+0x54>)
 8010e9a:	6830      	ldr	r0, [r6, #0]
	FD_ZERO(rfds);
 8010e9c:	e9c5 3300 	strd	r3, r3, [r5]
	sys_mutex_lock(conn_mu);
 8010ea0:	f7ff fe4e 	bl	8010b40 <sys_mutex_lock>
			FD_SET(connections[i], rfds);
 8010ea4:	f04f 0c01 	mov.w	ip, #1
 8010ea8:	f104 0020 	add.w	r0, r4, #32
		if (connections[i] != -1) {
 8010eac:	f854 3f04 	ldr.w	r3, [r4, #4]!
			FD_SET(connections[i], rfds);
 8010eb0:	f003 011f 	and.w	r1, r3, #31
		if (connections[i] != -1) {
 8010eb4:	1c5a      	adds	r2, r3, #1
			FD_SET(connections[i], rfds);
 8010eb6:	461a      	mov	r2, r3
 8010eb8:	fa0c f101 	lsl.w	r1, ip, r1
		if (connections[i] != -1) {
 8010ebc:	d009      	beq.n	8010ed2 <server_setFDs+0x42>
			FD_SET(connections[i], rfds);
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	bfb8      	it	lt
 8010ec2:	f103 021f 	addlt.w	r2, r3, #31
 8010ec6:	1153      	asrs	r3, r2, #5
 8010ec8:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 8010ecc:	430a      	orrs	r2, r1
 8010ece:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
	for (int i = 0; i < MAX_CONN_NUM; ++i) {
 8010ed2:	4284      	cmp	r4, r0
 8010ed4:	d1ea      	bne.n	8010eac <server_setFDs+0x1c>
	sys_mutex_unlock(conn_mu);
 8010ed6:	6830      	ldr	r0, [r6, #0]
}
 8010ed8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	sys_mutex_unlock(conn_mu);
 8010edc:	f7ff be36 	b.w	8010b4c <sys_mutex_unlock>
 8010ee0:	2400e7b8 	.word	0x2400e7b8
 8010ee4:	2400e7b8 	.word	0x2400e7b8

08010ee8 <server_handleRecv>:
void server_handleRecv(fd_set *rfds) {
 8010ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_mutex_lock(conn_mu);
 8010eec:	4e1f      	ldr	r6, [pc, #124]	; (8010f6c <server_handleRecv+0x84>)
void server_handleRecv(fd_set *rfds) {
 8010eee:	4680      	mov	r8, r0
 8010ef0:	4d1f      	ldr	r5, [pc, #124]	; (8010f70 <server_handleRecv+0x88>)
 8010ef2:	b084      	sub	sp, #16
	sys_mutex_lock(conn_mu);
 8010ef4:	6830      	ldr	r0, [r6, #0]
				list_push(rxMsgBuffer, (void*)(&msg));
 8010ef6:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8010f74 <server_handleRecv+0x8c>
 8010efa:	f105 0720 	add.w	r7, r5, #32
	sys_mutex_lock(conn_mu);
 8010efe:	f7ff fe1f 	bl	8010b40 <sys_mutex_lock>
	for (int i = 0; i < MAX_CONN_NUM; ++i) {
 8010f02:	e004      	b.n	8010f0e <server_handleRecv+0x26>
		sys_mutex_unlock(conn_mu);
 8010f04:	6830      	ldr	r0, [r6, #0]
 8010f06:	f7ff fe21 	bl	8010b4c <sys_mutex_unlock>
	for (int i = 0; i < MAX_CONN_NUM; ++i) {
 8010f0a:	42bd      	cmp	r5, r7
 8010f0c:	d02a      	beq.n	8010f64 <server_handleRecv+0x7c>
		if (connections[i] != -1) {
 8010f0e:	f855 4f04 	ldr.w	r4, [r5, #4]!
 8010f12:	1c61      	adds	r1, r4, #1
			if (FD_ISSET(connfd, rfds)) { // FD data recv
 8010f14:	f004 021f 	and.w	r2, r4, #31
 8010f18:	4623      	mov	r3, r4
		if (connections[i] != -1) {
 8010f1a:	d0f3      	beq.n	8010f04 <server_handleRecv+0x1c>
			if (FD_ISSET(connfd, rfds)) { // FD data recv
 8010f1c:	2c00      	cmp	r4, #0
 8010f1e:	bfb8      	it	lt
 8010f20:	f104 031f 	addlt.w	r3, r4, #31
 8010f24:	115b      	asrs	r3, r3, #5
 8010f26:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8010f2a:	40d3      	lsrs	r3, r2
 8010f2c:	07db      	lsls	r3, r3, #31
 8010f2e:	d5e9      	bpl.n	8010f04 <server_handleRecv+0x1c>
				char* buf = malloc(MAX_MSG_LEN);
 8010f30:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8010f34:	f000 f996 	bl	8011264 <malloc>
				int n = recv(connfd, buf, MAX_MSG_LEN, 0);
 8010f38:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8010f3c:	4601      	mov	r1, r0
 8010f3e:	2300      	movs	r3, #0
				char* buf = malloc(MAX_MSG_LEN);
 8010f40:	4682      	mov	sl, r0
				int n = recv(connfd, buf, MAX_MSG_LEN, 0);
 8010f42:	4620      	mov	r0, r4
 8010f44:	f7f7 fe2e 	bl	8008ba4 <lwip_recv>
 8010f48:	4603      	mov	r3, r0
				list_push(rxMsgBuffer, (void*)(&msg));
 8010f4a:	a901      	add	r1, sp, #4
 8010f4c:	f8d9 0000 	ldr.w	r0, [r9]
				struct message msg = {connfd, buf, n};
 8010f50:	9303      	str	r3, [sp, #12]
 8010f52:	e9cd 4a01 	strd	r4, sl, [sp, #4]
				list_push(rxMsgBuffer, (void*)(&msg));
 8010f56:	f000 f8eb 	bl	8011130 <list_push>
		sys_mutex_unlock(conn_mu);
 8010f5a:	6830      	ldr	r0, [r6, #0]
 8010f5c:	f7ff fdf6 	bl	8010b4c <sys_mutex_unlock>
	for (int i = 0; i < MAX_CONN_NUM; ++i) {
 8010f60:	42bd      	cmp	r5, r7
 8010f62:	d1d4      	bne.n	8010f0e <server_handleRecv+0x26>
}
 8010f64:	b004      	add	sp, #16
 8010f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f6a:	bf00      	nop
 8010f6c:	2400e7b8 	.word	0x2400e7b8
 8010f70:	2400e7b8 	.word	0x2400e7b8
 8010f74:	2400e7dc 	.word	0x2400e7dc

08010f78 <server_recv>:
void server_recv(void *arg) {
 8010f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f7a:	b089      	sub	sp, #36	; 0x24
		tv.tv_sec = 1;
 8010f7c:	2601      	movs	r6, #1
 8010f7e:	2700      	movs	r7, #0
		tv.tv_usec = 0;
 8010f80:	2400      	movs	r4, #0
 8010f82:	ad04      	add	r5, sp, #16
		server_setFDs(&rfds);
 8010f84:	a802      	add	r0, sp, #8
 8010f86:	f7ff ff83 	bl	8010e90 <server_setFDs>
		retval = select(MAX_CONN_NUM+1, &rfds, NULL, NULL, &tv);
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	a902      	add	r1, sp, #8
 8010f8e:	2009      	movs	r0, #9
 8010f90:	461a      	mov	r2, r3
 8010f92:	9500      	str	r5, [sp, #0]
		tv.tv_usec = 0;
 8010f94:	9406      	str	r4, [sp, #24]
		tv.tv_sec = 1;
 8010f96:	e9cd 6704 	strd	r6, r7, [sp, #16]
		retval = select(MAX_CONN_NUM+1, &rfds, NULL, NULL, &tv);
 8010f9a:	f7f7 ff23 	bl	8008de4 <lwip_select>
		} else if (retval) { // FD_ISSET will have some true fd
 8010f9e:	3001      	adds	r0, #1
 8010fa0:	2801      	cmp	r0, #1
 8010fa2:	d9ef      	bls.n	8010f84 <server_recv+0xc>
			server_handleRecv(&rfds);
 8010fa4:	a802      	add	r0, sp, #8
 8010fa6:	f7ff ff9f 	bl	8010ee8 <server_handleRecv>
 8010faa:	e7eb      	b.n	8010f84 <server_recv+0xc>

08010fac <server_sendMsg>:
void server_sendMsg(int destIP, char* data, int len) {
 8010fac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010fb0:	460f      	mov	r7, r1
	if (destIP == ALL_CONNECTIONS) {
 8010fb2:	1c41      	adds	r1, r0, #1
void server_sendMsg(int destIP, char* data, int len) {
 8010fb4:	b085      	sub	sp, #20
 8010fb6:	4615      	mov	r5, r2
	if (destIP == ALL_CONNECTIONS) {
 8010fb8:	d012      	beq.n	8010fe0 <server_sendMsg+0x34>
		sys_mutex_lock(conn_mu);
 8010fba:	4e19      	ldr	r6, [pc, #100]	; (8011020 <server_sendMsg+0x74>)
 8010fbc:	4604      	mov	r4, r0
 8010fbe:	6830      	ldr	r0, [r6, #0]
 8010fc0:	f7ff fdbe 	bl	8010b40 <sys_mutex_lock>
				list_push(txMsgBuffer, (void*)(&msg));
 8010fc4:	4b17      	ldr	r3, [pc, #92]	; (8011024 <server_sendMsg+0x78>)
 8010fc6:	a901      	add	r1, sp, #4
				struct message msg = {destIP, data, len};
 8010fc8:	9503      	str	r5, [sp, #12]
				list_push(txMsgBuffer, (void*)(&msg));
 8010fca:	6818      	ldr	r0, [r3, #0]
				struct message msg = {destIP, data, len};
 8010fcc:	e9cd 4701 	strd	r4, r7, [sp, #4]
				list_push(txMsgBuffer, (void*)(&msg));
 8010fd0:	f000 f8ae 	bl	8011130 <list_push>
		sys_mutex_unlock(conn_mu);
 8010fd4:	6830      	ldr	r0, [r6, #0]
 8010fd6:	f7ff fdb9 	bl	8010b4c <sys_mutex_unlock>
}
 8010fda:	b005      	add	sp, #20
 8010fdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		sys_mutex_lock(conn_mu);
 8010fe0:	4c11      	ldr	r4, [pc, #68]	; (8011028 <server_sendMsg+0x7c>)
 8010fe2:	f8df 903c 	ldr.w	r9, [pc, #60]	; 8011020 <server_sendMsg+0x74>
 8010fe6:	f104 0620 	add.w	r6, r4, #32
				list_push(txMsgBuffer, (void*)(&msg));
 8010fea:	f8df 8038 	ldr.w	r8, [pc, #56]	; 8011024 <server_sendMsg+0x78>
		sys_mutex_lock(conn_mu);
 8010fee:	f8d9 0000 	ldr.w	r0, [r9]
 8010ff2:	f7ff fda5 	bl	8010b40 <sys_mutex_lock>
			if (connections[i] != -1) {
 8010ff6:	f854 3f04 	ldr.w	r3, [r4, #4]!
				list_push(txMsgBuffer, (void*)(&msg));
 8010ffa:	a901      	add	r1, sp, #4
			if (connections[i] != -1) {
 8010ffc:	1c5a      	adds	r2, r3, #1
 8010ffe:	d006      	beq.n	801100e <server_sendMsg+0x62>
				list_push(txMsgBuffer, (void*)(&msg));
 8011000:	f8d8 0000 	ldr.w	r0, [r8]
				struct message msg = {connfd, data, len};
 8011004:	9301      	str	r3, [sp, #4]
 8011006:	e9cd 7502 	strd	r7, r5, [sp, #8]
				list_push(txMsgBuffer, (void*)(&msg));
 801100a:	f000 f891 	bl	8011130 <list_push>
		for (int i = 0; i < MAX_CONN_NUM; ++i) {
 801100e:	42b4      	cmp	r4, r6
 8011010:	d1f1      	bne.n	8010ff6 <server_sendMsg+0x4a>
		sys_mutex_unlock(conn_mu);
 8011012:	f8d9 0000 	ldr.w	r0, [r9]
}
 8011016:	b005      	add	sp, #20
 8011018:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		sys_mutex_unlock(conn_mu);
 801101c:	f7ff bd96 	b.w	8010b4c <sys_mutex_unlock>
 8011020:	2400e7b8 	.word	0x2400e7b8
 8011024:	2400e7e0 	.word	0x2400e7e0
 8011028:	2400e7b8 	.word	0x2400e7b8

0801102c <server_retrieveMsg>:
	list_pop(rxMsgBuffer, (void*)(msg));
 801102c:	4b02      	ldr	r3, [pc, #8]	; (8011038 <server_retrieveMsg+0xc>)
void server_retrieveMsg(struct message* msg) {
 801102e:	4601      	mov	r1, r0
	list_pop(rxMsgBuffer, (void*)(msg));
 8011030:	6818      	ldr	r0, [r3, #0]
 8011032:	f000 b8d9 	b.w	80111e8 <list_pop>
 8011036:	bf00      	nop
 8011038:	2400e7dc 	.word	0x2400e7dc

0801103c <list_create>:
		free_callback(data);
	else
		free(data);
}

List *list_create(int dataSize, CallbackFree free_callback) {
 801103c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	assert(dataSize > 0);
 801103e:	1e05      	subs	r5, r0, #0
 8011040:	dd21      	ble.n	8011086 <list_create+0x4a>

	List *list = (List *)malloc(sizeof(List));
	list->count = 0;
 8011042:	2700      	movs	r7, #0
	List *list = (List *)malloc(sizeof(List));
 8011044:	2020      	movs	r0, #32
 8011046:	460e      	mov	r6, r1
 8011048:	f000 f90c 	bl	8011264 <malloc>
	list->data_size = dataSize;
	list->head = calloc(sizeof(Node), 1); // next init to NULL
 801104c:	2101      	movs	r1, #1
	List *list = (List *)malloc(sizeof(List));
 801104e:	4604      	mov	r4, r0
	list->data_size = dataSize;
 8011050:	e9c0 7500 	strd	r7, r5, [r0]
	list->head = calloc(sizeof(Node), 1); // next init to NULL
 8011054:	2008      	movs	r0, #8
 8011056:	f000 f8e7 	bl	8011228 <calloc>
 801105a:	4603      	mov	r3, r0
	list->callback_free = free_callback;
	list->mutex = xSemaphoreCreateMutex();
 801105c:	2001      	movs	r0, #1
	list->callback_free = free_callback;
 801105e:	6126      	str	r6, [r4, #16]
	list->head = calloc(sizeof(Node), 1); // next init to NULL
 8011060:	60a3      	str	r3, [r4, #8]
	list->mutex = xSemaphoreCreateMutex();
 8011062:	f7f3 fecd 	bl	8004e00 <xQueueCreateMutex>
 8011066:	4603      	mov	r3, r0
	list->msgs = xSemaphoreCreateCounting(MAX_QUEUE_SIZE, 0);
 8011068:	4639      	mov	r1, r7
 801106a:	2064      	movs	r0, #100	; 0x64
	list->mutex = xSemaphoreCreateMutex();
 801106c:	6163      	str	r3, [r4, #20]
	list->msgs = xSemaphoreCreateCounting(MAX_QUEUE_SIZE, 0);
 801106e:	f7f3 fdb3 	bl	8004bd8 <xQueueCreateCountingSemaphore>
	list->remainingSpace = xSemaphoreCreateCounting(MAX_QUEUE_SIZE, MAX_QUEUE_SIZE);
 8011072:	2164      	movs	r1, #100	; 0x64
	list->msgs = xSemaphoreCreateCounting(MAX_QUEUE_SIZE, 0);
 8011074:	4603      	mov	r3, r0
	list->remainingSpace = xSemaphoreCreateCounting(MAX_QUEUE_SIZE, MAX_QUEUE_SIZE);
 8011076:	4608      	mov	r0, r1
	list->msgs = xSemaphoreCreateCounting(MAX_QUEUE_SIZE, 0);
 8011078:	61a3      	str	r3, [r4, #24]
	list->remainingSpace = xSemaphoreCreateCounting(MAX_QUEUE_SIZE, MAX_QUEUE_SIZE);
 801107a:	f7f3 fdad 	bl	8004bd8 <xQueueCreateCountingSemaphore>
 801107e:	4603      	mov	r3, r0

	return list;
}
 8011080:	4620      	mov	r0, r4
	list->remainingSpace = xSemaphoreCreateCounting(MAX_QUEUE_SIZE, MAX_QUEUE_SIZE);
 8011082:	61e3      	str	r3, [r4, #28]
}
 8011084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	assert(dataSize > 0);
 8011086:	4b03      	ldr	r3, [pc, #12]	; (8011094 <list_create+0x58>)
 8011088:	2120      	movs	r1, #32
 801108a:	4a03      	ldr	r2, [pc, #12]	; (8011098 <list_create+0x5c>)
 801108c:	4803      	ldr	r0, [pc, #12]	; (801109c <list_create+0x60>)
 801108e:	f000 f8ad 	bl	80111ec <__assert_func>
 8011092:	bf00      	nop
 8011094:	080151ec 	.word	0x080151ec
 8011098:	08015298 	.word	0x08015298
 801109c:	080151fc 	.word	0x080151fc

080110a0 <list_add>:

	free(list);
}


void list_add(List *list, void *data) { // push to front
 80110a0:	b570      	push	{r4, r5, r6, lr}
 80110a2:	b082      	sub	sp, #8

	assert(list != NULL);
 80110a4:	b378      	cbz	r0, 8011106 <list_add+0x66>

	xSemaphoreTake(list->remainingSpace, portMAX_DELAY); // Only add to queue if there is space
 80110a6:	4604      	mov	r4, r0
 80110a8:	460e      	mov	r6, r1
 80110aa:	69c0      	ldr	r0, [r0, #28]
 80110ac:	f04f 31ff 	mov.w	r1, #4294967295
 80110b0:	f7f4 f844 	bl	800513c <xQueueSemaphoreTake>

	xSemaphoreTake(list->mutex, portMAX_DELAY); // Lock mutex
 80110b4:	f04f 31ff 	mov.w	r1, #4294967295
 80110b8:	6960      	ldr	r0, [r4, #20]
 80110ba:	f7f4 f83f 	bl	800513c <xQueueSemaphoreTake>

	assert(data != NULL);
 80110be:	b346      	cbz	r6, 8011112 <list_add+0x72>

	Node *newNode = malloc(sizeof(Node));
 80110c0:	2008      	movs	r0, #8
 80110c2:	f000 f8cf 	bl	8011264 <malloc>
	newNode->data = malloc(list->data_size);
 80110c6:	6862      	ldr	r2, [r4, #4]
	Node *newNode = malloc(sizeof(Node));
 80110c8:	4605      	mov	r5, r0
	newNode->data = malloc(list->data_size);
 80110ca:	4610      	mov	r0, r2
 80110cc:	9201      	str	r2, [sp, #4]
 80110ce:	f000 f8c9 	bl	8011264 <malloc>
	memcpy(newNode->data, data, list->data_size);
 80110d2:	9a01      	ldr	r2, [sp, #4]
 80110d4:	4631      	mov	r1, r6
	newNode->data = malloc(list->data_size);
 80110d6:	6028      	str	r0, [r5, #0]
	memcpy(newNode->data, data, list->data_size);
 80110d8:	f000 fcc3 	bl	8011a62 <memcpy>

	newNode->next = list->head;
	list->head = newNode;
	list->count++;
 80110dc:	6822      	ldr	r2, [r4, #0]
	newNode->next = list->head;
 80110de:	68a1      	ldr	r1, [r4, #8]

	xSemaphoreGive(list->mutex); // Unlock mutex
 80110e0:	2300      	movs	r3, #0
	list->count++;
 80110e2:	1c50      	adds	r0, r2, #1
	list->head = newNode;
 80110e4:	60a5      	str	r5, [r4, #8]
	xSemaphoreGive(list->mutex); // Unlock mutex
 80110e6:	461a      	mov	r2, r3
	newNode->next = list->head;
 80110e8:	6069      	str	r1, [r5, #4]
	list->count++;
 80110ea:	6020      	str	r0, [r4, #0]
	xSemaphoreGive(list->mutex); // Unlock mutex
 80110ec:	4619      	mov	r1, r3
 80110ee:	6960      	ldr	r0, [r4, #20]
 80110f0:	f7f3 fd90 	bl	8004c14 <xQueueGenericSend>

	xSemaphoreGive(list->msgs); // Notify waiting consumers
 80110f4:	2300      	movs	r3, #0
 80110f6:	69a0      	ldr	r0, [r4, #24]
 80110f8:	461a      	mov	r2, r3
 80110fa:	4619      	mov	r1, r3
}
 80110fc:	b002      	add	sp, #8
 80110fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	xSemaphoreGive(list->msgs); // Notify waiting consumers
 8011102:	f7f3 bd87 	b.w	8004c14 <xQueueGenericSend>
	assert(list != NULL);
 8011106:	4b06      	ldr	r3, [pc, #24]	; (8011120 <list_add+0x80>)
 8011108:	2145      	movs	r1, #69	; 0x45
 801110a:	4a06      	ldr	r2, [pc, #24]	; (8011124 <list_add+0x84>)
 801110c:	4806      	ldr	r0, [pc, #24]	; (8011128 <list_add+0x88>)
 801110e:	f000 f86d 	bl	80111ec <__assert_func>
	assert(data != NULL);
 8011112:	4b06      	ldr	r3, [pc, #24]	; (801112c <list_add+0x8c>)
 8011114:	214b      	movs	r1, #75	; 0x4b
 8011116:	4a03      	ldr	r2, [pc, #12]	; (8011124 <list_add+0x84>)
 8011118:	4803      	ldr	r0, [pc, #12]	; (8011128 <list_add+0x88>)
 801111a:	f000 f867 	bl	80111ec <__assert_func>
 801111e:	bf00      	nop
 8011120:	08015250 	.word	0x08015250
 8011124:	0801528c 	.word	0x0801528c
 8011128:	080151fc 	.word	0x080151fc
 801112c:	08015260 	.word	0x08015260

08011130 <list_push>:
	list_add(list, data); // push to front
 8011130:	f7ff bfb6 	b.w	80110a0 <list_add>

08011134 <list_remove>:

void list_remove(List *list, void* data) {
 8011134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	assert(list != NULL);
 8011138:	2800      	cmp	r0, #0
 801113a:	d040      	beq.n	80111be <list_remove+0x8a>

	xSemaphoreTake(list->msgs, portMAX_DELAY); // Remove message when at least one exists
 801113c:	4605      	mov	r5, r0
 801113e:	460f      	mov	r7, r1
 8011140:	6980      	ldr	r0, [r0, #24]
 8011142:	f04f 31ff 	mov.w	r1, #4294967295
 8011146:	f7f3 fff9 	bl	800513c <xQueueSemaphoreTake>

	xSemaphoreTake(list->mutex, portMAX_DELAY); // Lock mutex
 801114a:	f04f 31ff 	mov.w	r1, #4294967295
 801114e:	6968      	ldr	r0, [r5, #20]
 8011150:	f7f3 fff4 	bl	800513c <xQueueSemaphoreTake>

	assert(list->count > 0);
 8011154:	682b      	ldr	r3, [r5, #0]
 8011156:	2b00      	cmp	r3, #0
 8011158:	dd37      	ble.n	80111ca <list_remove+0x96>

	Node *prev_node = NULL;
	Node *curr_node = list->head;
 801115a:	68ac      	ldr	r4, [r5, #8]
	Node *prev_node = NULL;
 801115c:	2600      	movs	r6, #0

	// Condition OK because count > 0
	while (curr_node->next->next != NULL){ // look for last node in list
 801115e:	6863      	ldr	r3, [r4, #4]
 8011160:	e001      	b.n	8011166 <list_remove+0x32>
 8011162:	4626      	mov	r6, r4
 8011164:	4614      	mov	r4, r2
 8011166:	461a      	mov	r2, r3
 8011168:	685b      	ldr	r3, [r3, #4]
 801116a:	2b00      	cmp	r3, #0
 801116c:	d1f9      	bne.n	8011162 <list_remove+0x2e>
		prev_node = curr_node;
		curr_node = prev_node->next;
	}

	memcpy(data, curr_node->data, list->data_size);
 801116e:	686a      	ldr	r2, [r5, #4]
 8011170:	4638      	mov	r0, r7
 8011172:	6821      	ldr	r1, [r4, #0]
 8011174:	f000 fc75 	bl	8011a62 <memcpy>

	if (prev_node != NULL) {
		prev_node->next = curr_node->next;
 8011178:	6863      	ldr	r3, [r4, #4]
	if (prev_node != NULL) {
 801117a:	b1c6      	cbz	r6, 80111ae <list_remove+0x7a>
		prev_node->next = curr_node->next;
 801117c:	6073      	str	r3, [r6, #4]
	} else {
		list->head = curr_node->next;
	}
	free_node_data(list->callback_free, curr_node->data);
 801117e:	692b      	ldr	r3, [r5, #16]
 8011180:	6820      	ldr	r0, [r4, #0]
	if (free_callback != NULL)
 8011182:	b1cb      	cbz	r3, 80111b8 <list_remove+0x84>
		free_callback(data);
 8011184:	4798      	blx	r3
	free(curr_node);
 8011186:	4620      	mov	r0, r4
 8011188:	f000 f874 	bl	8011274 <free>

	list->count--;
 801118c:	682a      	ldr	r2, [r5, #0]

	xSemaphoreGive(list->mutex); // Unlock mutex
 801118e:	2300      	movs	r3, #0
	list->count--;
 8011190:	1e50      	subs	r0, r2, #1
	xSemaphoreGive(list->mutex); // Unlock mutex
 8011192:	4619      	mov	r1, r3
 8011194:	461a      	mov	r2, r3
	list->count--;
 8011196:	6028      	str	r0, [r5, #0]
	xSemaphoreGive(list->mutex); // Unlock mutex
 8011198:	6968      	ldr	r0, [r5, #20]
 801119a:	f7f3 fd3b 	bl	8004c14 <xQueueGenericSend>

	xSemaphoreGive(list->remainingSpace); // Notify waiting producers
 801119e:	2300      	movs	r3, #0
 80111a0:	69e8      	ldr	r0, [r5, #28]
 80111a2:	461a      	mov	r2, r3
 80111a4:	4619      	mov	r1, r3
}
 80111a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	xSemaphoreGive(list->remainingSpace); // Notify waiting producers
 80111aa:	f7f3 bd33 	b.w	8004c14 <xQueueGenericSend>
		list->head = curr_node->next;
 80111ae:	60ab      	str	r3, [r5, #8]
	free_node_data(list->callback_free, curr_node->data);
 80111b0:	692b      	ldr	r3, [r5, #16]
 80111b2:	6820      	ldr	r0, [r4, #0]
	if (free_callback != NULL)
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d1e5      	bne.n	8011184 <list_remove+0x50>
		free(data);
 80111b8:	f000 f85c 	bl	8011274 <free>
 80111bc:	e7e3      	b.n	8011186 <list_remove+0x52>
	assert(list != NULL);
 80111be:	4b06      	ldr	r3, [pc, #24]	; (80111d8 <list_remove+0xa4>)
 80111c0:	215c      	movs	r1, #92	; 0x5c
 80111c2:	4a06      	ldr	r2, [pc, #24]	; (80111dc <list_remove+0xa8>)
 80111c4:	4806      	ldr	r0, [pc, #24]	; (80111e0 <list_remove+0xac>)
 80111c6:	f000 f811 	bl	80111ec <__assert_func>
	assert(list->count > 0);
 80111ca:	4b06      	ldr	r3, [pc, #24]	; (80111e4 <list_remove+0xb0>)
 80111cc:	2162      	movs	r1, #98	; 0x62
 80111ce:	4a03      	ldr	r2, [pc, #12]	; (80111dc <list_remove+0xa8>)
 80111d0:	4803      	ldr	r0, [pc, #12]	; (80111e0 <list_remove+0xac>)
 80111d2:	f000 f80b 	bl	80111ec <__assert_func>
 80111d6:	bf00      	nop
 80111d8:	08015250 	.word	0x08015250
 80111dc:	08015280 	.word	0x08015280
 80111e0:	080151fc 	.word	0x080151fc
 80111e4:	08015270 	.word	0x08015270

080111e8 <list_pop>:
	list_remove(list, data); // pop from end
 80111e8:	f7ff bfa4 	b.w	8011134 <list_remove>

080111ec <__assert_func>:
 80111ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80111ee:	4614      	mov	r4, r2
 80111f0:	461a      	mov	r2, r3
 80111f2:	4b09      	ldr	r3, [pc, #36]	; (8011218 <__assert_func+0x2c>)
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	4605      	mov	r5, r0
 80111f8:	68d8      	ldr	r0, [r3, #12]
 80111fa:	b14c      	cbz	r4, 8011210 <__assert_func+0x24>
 80111fc:	4b07      	ldr	r3, [pc, #28]	; (801121c <__assert_func+0x30>)
 80111fe:	9100      	str	r1, [sp, #0]
 8011200:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011204:	4906      	ldr	r1, [pc, #24]	; (8011220 <__assert_func+0x34>)
 8011206:	462b      	mov	r3, r5
 8011208:	f000 f9ca 	bl	80115a0 <fiprintf>
 801120c:	f000 fc37 	bl	8011a7e <abort>
 8011210:	4b04      	ldr	r3, [pc, #16]	; (8011224 <__assert_func+0x38>)
 8011212:	461c      	mov	r4, r3
 8011214:	e7f3      	b.n	80111fe <__assert_func+0x12>
 8011216:	bf00      	nop
 8011218:	24000088 	.word	0x24000088
 801121c:	080152a4 	.word	0x080152a4
 8011220:	080152b1 	.word	0x080152b1
 8011224:	080152df 	.word	0x080152df

08011228 <calloc>:
 8011228:	4b02      	ldr	r3, [pc, #8]	; (8011234 <calloc+0xc>)
 801122a:	460a      	mov	r2, r1
 801122c:	4601      	mov	r1, r0
 801122e:	6818      	ldr	r0, [r3, #0]
 8011230:	f000 b802 	b.w	8011238 <_calloc_r>
 8011234:	24000088 	.word	0x24000088

08011238 <_calloc_r>:
 8011238:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801123a:	fba1 2402 	umull	r2, r4, r1, r2
 801123e:	b94c      	cbnz	r4, 8011254 <_calloc_r+0x1c>
 8011240:	4611      	mov	r1, r2
 8011242:	9201      	str	r2, [sp, #4]
 8011244:	f000 f83e 	bl	80112c4 <_malloc_r>
 8011248:	9a01      	ldr	r2, [sp, #4]
 801124a:	4605      	mov	r5, r0
 801124c:	b930      	cbnz	r0, 801125c <_calloc_r+0x24>
 801124e:	4628      	mov	r0, r5
 8011250:	b003      	add	sp, #12
 8011252:	bd30      	pop	{r4, r5, pc}
 8011254:	220c      	movs	r2, #12
 8011256:	6002      	str	r2, [r0, #0]
 8011258:	2500      	movs	r5, #0
 801125a:	e7f8      	b.n	801124e <_calloc_r+0x16>
 801125c:	4621      	mov	r1, r4
 801125e:	f000 fb25 	bl	80118ac <memset>
 8011262:	e7f4      	b.n	801124e <_calloc_r+0x16>

08011264 <malloc>:
 8011264:	4b02      	ldr	r3, [pc, #8]	; (8011270 <malloc+0xc>)
 8011266:	4601      	mov	r1, r0
 8011268:	6818      	ldr	r0, [r3, #0]
 801126a:	f000 b82b 	b.w	80112c4 <_malloc_r>
 801126e:	bf00      	nop
 8011270:	24000088 	.word	0x24000088

08011274 <free>:
 8011274:	4b02      	ldr	r3, [pc, #8]	; (8011280 <free+0xc>)
 8011276:	4601      	mov	r1, r0
 8011278:	6818      	ldr	r0, [r3, #0]
 801127a:	f000 bc07 	b.w	8011a8c <_free_r>
 801127e:	bf00      	nop
 8011280:	24000088 	.word	0x24000088

08011284 <sbrk_aligned>:
 8011284:	b570      	push	{r4, r5, r6, lr}
 8011286:	4e0e      	ldr	r6, [pc, #56]	; (80112c0 <sbrk_aligned+0x3c>)
 8011288:	460c      	mov	r4, r1
 801128a:	6831      	ldr	r1, [r6, #0]
 801128c:	4605      	mov	r5, r0
 801128e:	b911      	cbnz	r1, 8011296 <sbrk_aligned+0x12>
 8011290:	f000 fb9e 	bl	80119d0 <_sbrk_r>
 8011294:	6030      	str	r0, [r6, #0]
 8011296:	4621      	mov	r1, r4
 8011298:	4628      	mov	r0, r5
 801129a:	f000 fb99 	bl	80119d0 <_sbrk_r>
 801129e:	1c43      	adds	r3, r0, #1
 80112a0:	d00a      	beq.n	80112b8 <sbrk_aligned+0x34>
 80112a2:	1cc4      	adds	r4, r0, #3
 80112a4:	f024 0403 	bic.w	r4, r4, #3
 80112a8:	42a0      	cmp	r0, r4
 80112aa:	d007      	beq.n	80112bc <sbrk_aligned+0x38>
 80112ac:	1a21      	subs	r1, r4, r0
 80112ae:	4628      	mov	r0, r5
 80112b0:	f000 fb8e 	bl	80119d0 <_sbrk_r>
 80112b4:	3001      	adds	r0, #1
 80112b6:	d101      	bne.n	80112bc <sbrk_aligned+0x38>
 80112b8:	f04f 34ff 	mov.w	r4, #4294967295
 80112bc:	4620      	mov	r0, r4
 80112be:	bd70      	pop	{r4, r5, r6, pc}
 80112c0:	2400e7e8 	.word	0x2400e7e8

080112c4 <_malloc_r>:
 80112c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80112c8:	1ccd      	adds	r5, r1, #3
 80112ca:	f025 0503 	bic.w	r5, r5, #3
 80112ce:	3508      	adds	r5, #8
 80112d0:	2d0c      	cmp	r5, #12
 80112d2:	bf38      	it	cc
 80112d4:	250c      	movcc	r5, #12
 80112d6:	2d00      	cmp	r5, #0
 80112d8:	4607      	mov	r7, r0
 80112da:	db01      	blt.n	80112e0 <_malloc_r+0x1c>
 80112dc:	42a9      	cmp	r1, r5
 80112de:	d905      	bls.n	80112ec <_malloc_r+0x28>
 80112e0:	230c      	movs	r3, #12
 80112e2:	603b      	str	r3, [r7, #0]
 80112e4:	2600      	movs	r6, #0
 80112e6:	4630      	mov	r0, r6
 80112e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80112ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80113c0 <_malloc_r+0xfc>
 80112f0:	f000 f868 	bl	80113c4 <__malloc_lock>
 80112f4:	f8d8 3000 	ldr.w	r3, [r8]
 80112f8:	461c      	mov	r4, r3
 80112fa:	bb5c      	cbnz	r4, 8011354 <_malloc_r+0x90>
 80112fc:	4629      	mov	r1, r5
 80112fe:	4638      	mov	r0, r7
 8011300:	f7ff ffc0 	bl	8011284 <sbrk_aligned>
 8011304:	1c43      	adds	r3, r0, #1
 8011306:	4604      	mov	r4, r0
 8011308:	d155      	bne.n	80113b6 <_malloc_r+0xf2>
 801130a:	f8d8 4000 	ldr.w	r4, [r8]
 801130e:	4626      	mov	r6, r4
 8011310:	2e00      	cmp	r6, #0
 8011312:	d145      	bne.n	80113a0 <_malloc_r+0xdc>
 8011314:	2c00      	cmp	r4, #0
 8011316:	d048      	beq.n	80113aa <_malloc_r+0xe6>
 8011318:	6823      	ldr	r3, [r4, #0]
 801131a:	4631      	mov	r1, r6
 801131c:	4638      	mov	r0, r7
 801131e:	eb04 0903 	add.w	r9, r4, r3
 8011322:	f000 fb55 	bl	80119d0 <_sbrk_r>
 8011326:	4581      	cmp	r9, r0
 8011328:	d13f      	bne.n	80113aa <_malloc_r+0xe6>
 801132a:	6821      	ldr	r1, [r4, #0]
 801132c:	1a6d      	subs	r5, r5, r1
 801132e:	4629      	mov	r1, r5
 8011330:	4638      	mov	r0, r7
 8011332:	f7ff ffa7 	bl	8011284 <sbrk_aligned>
 8011336:	3001      	adds	r0, #1
 8011338:	d037      	beq.n	80113aa <_malloc_r+0xe6>
 801133a:	6823      	ldr	r3, [r4, #0]
 801133c:	442b      	add	r3, r5
 801133e:	6023      	str	r3, [r4, #0]
 8011340:	f8d8 3000 	ldr.w	r3, [r8]
 8011344:	2b00      	cmp	r3, #0
 8011346:	d038      	beq.n	80113ba <_malloc_r+0xf6>
 8011348:	685a      	ldr	r2, [r3, #4]
 801134a:	42a2      	cmp	r2, r4
 801134c:	d12b      	bne.n	80113a6 <_malloc_r+0xe2>
 801134e:	2200      	movs	r2, #0
 8011350:	605a      	str	r2, [r3, #4]
 8011352:	e00f      	b.n	8011374 <_malloc_r+0xb0>
 8011354:	6822      	ldr	r2, [r4, #0]
 8011356:	1b52      	subs	r2, r2, r5
 8011358:	d41f      	bmi.n	801139a <_malloc_r+0xd6>
 801135a:	2a0b      	cmp	r2, #11
 801135c:	d917      	bls.n	801138e <_malloc_r+0xca>
 801135e:	1961      	adds	r1, r4, r5
 8011360:	42a3      	cmp	r3, r4
 8011362:	6025      	str	r5, [r4, #0]
 8011364:	bf18      	it	ne
 8011366:	6059      	strne	r1, [r3, #4]
 8011368:	6863      	ldr	r3, [r4, #4]
 801136a:	bf08      	it	eq
 801136c:	f8c8 1000 	streq.w	r1, [r8]
 8011370:	5162      	str	r2, [r4, r5]
 8011372:	604b      	str	r3, [r1, #4]
 8011374:	4638      	mov	r0, r7
 8011376:	f104 060b 	add.w	r6, r4, #11
 801137a:	f000 f829 	bl	80113d0 <__malloc_unlock>
 801137e:	f026 0607 	bic.w	r6, r6, #7
 8011382:	1d23      	adds	r3, r4, #4
 8011384:	1af2      	subs	r2, r6, r3
 8011386:	d0ae      	beq.n	80112e6 <_malloc_r+0x22>
 8011388:	1b9b      	subs	r3, r3, r6
 801138a:	50a3      	str	r3, [r4, r2]
 801138c:	e7ab      	b.n	80112e6 <_malloc_r+0x22>
 801138e:	42a3      	cmp	r3, r4
 8011390:	6862      	ldr	r2, [r4, #4]
 8011392:	d1dd      	bne.n	8011350 <_malloc_r+0x8c>
 8011394:	f8c8 2000 	str.w	r2, [r8]
 8011398:	e7ec      	b.n	8011374 <_malloc_r+0xb0>
 801139a:	4623      	mov	r3, r4
 801139c:	6864      	ldr	r4, [r4, #4]
 801139e:	e7ac      	b.n	80112fa <_malloc_r+0x36>
 80113a0:	4634      	mov	r4, r6
 80113a2:	6876      	ldr	r6, [r6, #4]
 80113a4:	e7b4      	b.n	8011310 <_malloc_r+0x4c>
 80113a6:	4613      	mov	r3, r2
 80113a8:	e7cc      	b.n	8011344 <_malloc_r+0x80>
 80113aa:	230c      	movs	r3, #12
 80113ac:	603b      	str	r3, [r7, #0]
 80113ae:	4638      	mov	r0, r7
 80113b0:	f000 f80e 	bl	80113d0 <__malloc_unlock>
 80113b4:	e797      	b.n	80112e6 <_malloc_r+0x22>
 80113b6:	6025      	str	r5, [r4, #0]
 80113b8:	e7dc      	b.n	8011374 <_malloc_r+0xb0>
 80113ba:	605b      	str	r3, [r3, #4]
 80113bc:	deff      	udf	#255	; 0xff
 80113be:	bf00      	nop
 80113c0:	2400e7e4 	.word	0x2400e7e4

080113c4 <__malloc_lock>:
 80113c4:	4801      	ldr	r0, [pc, #4]	; (80113cc <__malloc_lock+0x8>)
 80113c6:	f000 bb4a 	b.w	8011a5e <__retarget_lock_acquire_recursive>
 80113ca:	bf00      	nop
 80113cc:	2400e92c 	.word	0x2400e92c

080113d0 <__malloc_unlock>:
 80113d0:	4801      	ldr	r0, [pc, #4]	; (80113d8 <__malloc_unlock+0x8>)
 80113d2:	f000 bb45 	b.w	8011a60 <__retarget_lock_release_recursive>
 80113d6:	bf00      	nop
 80113d8:	2400e92c 	.word	0x2400e92c

080113dc <rand>:
 80113dc:	4b16      	ldr	r3, [pc, #88]	; (8011438 <rand+0x5c>)
 80113de:	b510      	push	{r4, lr}
 80113e0:	681c      	ldr	r4, [r3, #0]
 80113e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80113e4:	b9b3      	cbnz	r3, 8011414 <rand+0x38>
 80113e6:	2018      	movs	r0, #24
 80113e8:	f7ff ff3c 	bl	8011264 <malloc>
 80113ec:	4602      	mov	r2, r0
 80113ee:	6320      	str	r0, [r4, #48]	; 0x30
 80113f0:	b920      	cbnz	r0, 80113fc <rand+0x20>
 80113f2:	4b12      	ldr	r3, [pc, #72]	; (801143c <rand+0x60>)
 80113f4:	4812      	ldr	r0, [pc, #72]	; (8011440 <rand+0x64>)
 80113f6:	2152      	movs	r1, #82	; 0x52
 80113f8:	f7ff fef8 	bl	80111ec <__assert_func>
 80113fc:	4911      	ldr	r1, [pc, #68]	; (8011444 <rand+0x68>)
 80113fe:	4b12      	ldr	r3, [pc, #72]	; (8011448 <rand+0x6c>)
 8011400:	e9c0 1300 	strd	r1, r3, [r0]
 8011404:	4b11      	ldr	r3, [pc, #68]	; (801144c <rand+0x70>)
 8011406:	6083      	str	r3, [r0, #8]
 8011408:	230b      	movs	r3, #11
 801140a:	8183      	strh	r3, [r0, #12]
 801140c:	2100      	movs	r1, #0
 801140e:	2001      	movs	r0, #1
 8011410:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8011414:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8011416:	480e      	ldr	r0, [pc, #56]	; (8011450 <rand+0x74>)
 8011418:	690b      	ldr	r3, [r1, #16]
 801141a:	694c      	ldr	r4, [r1, #20]
 801141c:	4a0d      	ldr	r2, [pc, #52]	; (8011454 <rand+0x78>)
 801141e:	4358      	muls	r0, r3
 8011420:	fb02 0004 	mla	r0, r2, r4, r0
 8011424:	fba3 3202 	umull	r3, r2, r3, r2
 8011428:	3301      	adds	r3, #1
 801142a:	eb40 0002 	adc.w	r0, r0, r2
 801142e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8011432:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8011436:	bd10      	pop	{r4, pc}
 8011438:	24000088 	.word	0x24000088
 801143c:	080152e0 	.word	0x080152e0
 8011440:	080152f7 	.word	0x080152f7
 8011444:	abcd330e 	.word	0xabcd330e
 8011448:	e66d1234 	.word	0xe66d1234
 801144c:	0005deec 	.word	0x0005deec
 8011450:	5851f42d 	.word	0x5851f42d
 8011454:	4c957f2d 	.word	0x4c957f2d

08011458 <std>:
 8011458:	2300      	movs	r3, #0
 801145a:	b510      	push	{r4, lr}
 801145c:	4604      	mov	r4, r0
 801145e:	e9c0 3300 	strd	r3, r3, [r0]
 8011462:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011466:	6083      	str	r3, [r0, #8]
 8011468:	8181      	strh	r1, [r0, #12]
 801146a:	6643      	str	r3, [r0, #100]	; 0x64
 801146c:	81c2      	strh	r2, [r0, #14]
 801146e:	6183      	str	r3, [r0, #24]
 8011470:	4619      	mov	r1, r3
 8011472:	2208      	movs	r2, #8
 8011474:	305c      	adds	r0, #92	; 0x5c
 8011476:	f000 fa19 	bl	80118ac <memset>
 801147a:	4b0d      	ldr	r3, [pc, #52]	; (80114b0 <std+0x58>)
 801147c:	6263      	str	r3, [r4, #36]	; 0x24
 801147e:	4b0d      	ldr	r3, [pc, #52]	; (80114b4 <std+0x5c>)
 8011480:	62a3      	str	r3, [r4, #40]	; 0x28
 8011482:	4b0d      	ldr	r3, [pc, #52]	; (80114b8 <std+0x60>)
 8011484:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011486:	4b0d      	ldr	r3, [pc, #52]	; (80114bc <std+0x64>)
 8011488:	6323      	str	r3, [r4, #48]	; 0x30
 801148a:	4b0d      	ldr	r3, [pc, #52]	; (80114c0 <std+0x68>)
 801148c:	6224      	str	r4, [r4, #32]
 801148e:	429c      	cmp	r4, r3
 8011490:	d006      	beq.n	80114a0 <std+0x48>
 8011492:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8011496:	4294      	cmp	r4, r2
 8011498:	d002      	beq.n	80114a0 <std+0x48>
 801149a:	33d0      	adds	r3, #208	; 0xd0
 801149c:	429c      	cmp	r4, r3
 801149e:	d105      	bne.n	80114ac <std+0x54>
 80114a0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80114a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80114a8:	f000 bad8 	b.w	8011a5c <__retarget_lock_init_recursive>
 80114ac:	bd10      	pop	{r4, pc}
 80114ae:	bf00      	nop
 80114b0:	080116dd 	.word	0x080116dd
 80114b4:	080116ff 	.word	0x080116ff
 80114b8:	08011737 	.word	0x08011737
 80114bc:	0801175b 	.word	0x0801175b
 80114c0:	2400e7ec 	.word	0x2400e7ec

080114c4 <stdio_exit_handler>:
 80114c4:	4a02      	ldr	r2, [pc, #8]	; (80114d0 <stdio_exit_handler+0xc>)
 80114c6:	4903      	ldr	r1, [pc, #12]	; (80114d4 <stdio_exit_handler+0x10>)
 80114c8:	4803      	ldr	r0, [pc, #12]	; (80114d8 <stdio_exit_handler+0x14>)
 80114ca:	f000 b87b 	b.w	80115c4 <_fwalk_sglue>
 80114ce:	bf00      	nop
 80114d0:	24000030 	.word	0x24000030
 80114d4:	080121d9 	.word	0x080121d9
 80114d8:	2400003c 	.word	0x2400003c

080114dc <cleanup_stdio>:
 80114dc:	6841      	ldr	r1, [r0, #4]
 80114de:	4b0c      	ldr	r3, [pc, #48]	; (8011510 <cleanup_stdio+0x34>)
 80114e0:	4299      	cmp	r1, r3
 80114e2:	b510      	push	{r4, lr}
 80114e4:	4604      	mov	r4, r0
 80114e6:	d001      	beq.n	80114ec <cleanup_stdio+0x10>
 80114e8:	f000 fe76 	bl	80121d8 <_fflush_r>
 80114ec:	68a1      	ldr	r1, [r4, #8]
 80114ee:	4b09      	ldr	r3, [pc, #36]	; (8011514 <cleanup_stdio+0x38>)
 80114f0:	4299      	cmp	r1, r3
 80114f2:	d002      	beq.n	80114fa <cleanup_stdio+0x1e>
 80114f4:	4620      	mov	r0, r4
 80114f6:	f000 fe6f 	bl	80121d8 <_fflush_r>
 80114fa:	68e1      	ldr	r1, [r4, #12]
 80114fc:	4b06      	ldr	r3, [pc, #24]	; (8011518 <cleanup_stdio+0x3c>)
 80114fe:	4299      	cmp	r1, r3
 8011500:	d004      	beq.n	801150c <cleanup_stdio+0x30>
 8011502:	4620      	mov	r0, r4
 8011504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011508:	f000 be66 	b.w	80121d8 <_fflush_r>
 801150c:	bd10      	pop	{r4, pc}
 801150e:	bf00      	nop
 8011510:	2400e7ec 	.word	0x2400e7ec
 8011514:	2400e854 	.word	0x2400e854
 8011518:	2400e8bc 	.word	0x2400e8bc

0801151c <global_stdio_init.part.0>:
 801151c:	b510      	push	{r4, lr}
 801151e:	4b0b      	ldr	r3, [pc, #44]	; (801154c <global_stdio_init.part.0+0x30>)
 8011520:	4c0b      	ldr	r4, [pc, #44]	; (8011550 <global_stdio_init.part.0+0x34>)
 8011522:	4a0c      	ldr	r2, [pc, #48]	; (8011554 <global_stdio_init.part.0+0x38>)
 8011524:	601a      	str	r2, [r3, #0]
 8011526:	4620      	mov	r0, r4
 8011528:	2200      	movs	r2, #0
 801152a:	2104      	movs	r1, #4
 801152c:	f7ff ff94 	bl	8011458 <std>
 8011530:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8011534:	2201      	movs	r2, #1
 8011536:	2109      	movs	r1, #9
 8011538:	f7ff ff8e 	bl	8011458 <std>
 801153c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8011540:	2202      	movs	r2, #2
 8011542:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011546:	2112      	movs	r1, #18
 8011548:	f7ff bf86 	b.w	8011458 <std>
 801154c:	2400e924 	.word	0x2400e924
 8011550:	2400e7ec 	.word	0x2400e7ec
 8011554:	080114c5 	.word	0x080114c5

08011558 <__sfp_lock_acquire>:
 8011558:	4801      	ldr	r0, [pc, #4]	; (8011560 <__sfp_lock_acquire+0x8>)
 801155a:	f000 ba80 	b.w	8011a5e <__retarget_lock_acquire_recursive>
 801155e:	bf00      	nop
 8011560:	2400e92d 	.word	0x2400e92d

08011564 <__sfp_lock_release>:
 8011564:	4801      	ldr	r0, [pc, #4]	; (801156c <__sfp_lock_release+0x8>)
 8011566:	f000 ba7b 	b.w	8011a60 <__retarget_lock_release_recursive>
 801156a:	bf00      	nop
 801156c:	2400e92d 	.word	0x2400e92d

08011570 <__sinit>:
 8011570:	b510      	push	{r4, lr}
 8011572:	4604      	mov	r4, r0
 8011574:	f7ff fff0 	bl	8011558 <__sfp_lock_acquire>
 8011578:	6a23      	ldr	r3, [r4, #32]
 801157a:	b11b      	cbz	r3, 8011584 <__sinit+0x14>
 801157c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011580:	f7ff bff0 	b.w	8011564 <__sfp_lock_release>
 8011584:	4b04      	ldr	r3, [pc, #16]	; (8011598 <__sinit+0x28>)
 8011586:	6223      	str	r3, [r4, #32]
 8011588:	4b04      	ldr	r3, [pc, #16]	; (801159c <__sinit+0x2c>)
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	2b00      	cmp	r3, #0
 801158e:	d1f5      	bne.n	801157c <__sinit+0xc>
 8011590:	f7ff ffc4 	bl	801151c <global_stdio_init.part.0>
 8011594:	e7f2      	b.n	801157c <__sinit+0xc>
 8011596:	bf00      	nop
 8011598:	080114dd 	.word	0x080114dd
 801159c:	2400e924 	.word	0x2400e924

080115a0 <fiprintf>:
 80115a0:	b40e      	push	{r1, r2, r3}
 80115a2:	b503      	push	{r0, r1, lr}
 80115a4:	4601      	mov	r1, r0
 80115a6:	ab03      	add	r3, sp, #12
 80115a8:	4805      	ldr	r0, [pc, #20]	; (80115c0 <fiprintf+0x20>)
 80115aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80115ae:	6800      	ldr	r0, [r0, #0]
 80115b0:	9301      	str	r3, [sp, #4]
 80115b2:	f000 fae1 	bl	8011b78 <_vfiprintf_r>
 80115b6:	b002      	add	sp, #8
 80115b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80115bc:	b003      	add	sp, #12
 80115be:	4770      	bx	lr
 80115c0:	24000088 	.word	0x24000088

080115c4 <_fwalk_sglue>:
 80115c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80115c8:	4607      	mov	r7, r0
 80115ca:	4688      	mov	r8, r1
 80115cc:	4614      	mov	r4, r2
 80115ce:	2600      	movs	r6, #0
 80115d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80115d4:	f1b9 0901 	subs.w	r9, r9, #1
 80115d8:	d505      	bpl.n	80115e6 <_fwalk_sglue+0x22>
 80115da:	6824      	ldr	r4, [r4, #0]
 80115dc:	2c00      	cmp	r4, #0
 80115de:	d1f7      	bne.n	80115d0 <_fwalk_sglue+0xc>
 80115e0:	4630      	mov	r0, r6
 80115e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80115e6:	89ab      	ldrh	r3, [r5, #12]
 80115e8:	2b01      	cmp	r3, #1
 80115ea:	d907      	bls.n	80115fc <_fwalk_sglue+0x38>
 80115ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80115f0:	3301      	adds	r3, #1
 80115f2:	d003      	beq.n	80115fc <_fwalk_sglue+0x38>
 80115f4:	4629      	mov	r1, r5
 80115f6:	4638      	mov	r0, r7
 80115f8:	47c0      	blx	r8
 80115fa:	4306      	orrs	r6, r0
 80115fc:	3568      	adds	r5, #104	; 0x68
 80115fe:	e7e9      	b.n	80115d4 <_fwalk_sglue+0x10>

08011600 <iprintf>:
 8011600:	b40f      	push	{r0, r1, r2, r3}
 8011602:	b507      	push	{r0, r1, r2, lr}
 8011604:	4906      	ldr	r1, [pc, #24]	; (8011620 <iprintf+0x20>)
 8011606:	ab04      	add	r3, sp, #16
 8011608:	6808      	ldr	r0, [r1, #0]
 801160a:	f853 2b04 	ldr.w	r2, [r3], #4
 801160e:	6881      	ldr	r1, [r0, #8]
 8011610:	9301      	str	r3, [sp, #4]
 8011612:	f000 fab1 	bl	8011b78 <_vfiprintf_r>
 8011616:	b003      	add	sp, #12
 8011618:	f85d eb04 	ldr.w	lr, [sp], #4
 801161c:	b004      	add	sp, #16
 801161e:	4770      	bx	lr
 8011620:	24000088 	.word	0x24000088

08011624 <_puts_r>:
 8011624:	6a03      	ldr	r3, [r0, #32]
 8011626:	b570      	push	{r4, r5, r6, lr}
 8011628:	6884      	ldr	r4, [r0, #8]
 801162a:	4605      	mov	r5, r0
 801162c:	460e      	mov	r6, r1
 801162e:	b90b      	cbnz	r3, 8011634 <_puts_r+0x10>
 8011630:	f7ff ff9e 	bl	8011570 <__sinit>
 8011634:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011636:	07db      	lsls	r3, r3, #31
 8011638:	d405      	bmi.n	8011646 <_puts_r+0x22>
 801163a:	89a3      	ldrh	r3, [r4, #12]
 801163c:	0598      	lsls	r0, r3, #22
 801163e:	d402      	bmi.n	8011646 <_puts_r+0x22>
 8011640:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011642:	f000 fa0c 	bl	8011a5e <__retarget_lock_acquire_recursive>
 8011646:	89a3      	ldrh	r3, [r4, #12]
 8011648:	0719      	lsls	r1, r3, #28
 801164a:	d513      	bpl.n	8011674 <_puts_r+0x50>
 801164c:	6923      	ldr	r3, [r4, #16]
 801164e:	b18b      	cbz	r3, 8011674 <_puts_r+0x50>
 8011650:	3e01      	subs	r6, #1
 8011652:	68a3      	ldr	r3, [r4, #8]
 8011654:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011658:	3b01      	subs	r3, #1
 801165a:	60a3      	str	r3, [r4, #8]
 801165c:	b9e9      	cbnz	r1, 801169a <_puts_r+0x76>
 801165e:	2b00      	cmp	r3, #0
 8011660:	da2e      	bge.n	80116c0 <_puts_r+0x9c>
 8011662:	4622      	mov	r2, r4
 8011664:	210a      	movs	r1, #10
 8011666:	4628      	mov	r0, r5
 8011668:	f000 f87b 	bl	8011762 <__swbuf_r>
 801166c:	3001      	adds	r0, #1
 801166e:	d007      	beq.n	8011680 <_puts_r+0x5c>
 8011670:	250a      	movs	r5, #10
 8011672:	e007      	b.n	8011684 <_puts_r+0x60>
 8011674:	4621      	mov	r1, r4
 8011676:	4628      	mov	r0, r5
 8011678:	f000 f8b0 	bl	80117dc <__swsetup_r>
 801167c:	2800      	cmp	r0, #0
 801167e:	d0e7      	beq.n	8011650 <_puts_r+0x2c>
 8011680:	f04f 35ff 	mov.w	r5, #4294967295
 8011684:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011686:	07da      	lsls	r2, r3, #31
 8011688:	d405      	bmi.n	8011696 <_puts_r+0x72>
 801168a:	89a3      	ldrh	r3, [r4, #12]
 801168c:	059b      	lsls	r3, r3, #22
 801168e:	d402      	bmi.n	8011696 <_puts_r+0x72>
 8011690:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011692:	f000 f9e5 	bl	8011a60 <__retarget_lock_release_recursive>
 8011696:	4628      	mov	r0, r5
 8011698:	bd70      	pop	{r4, r5, r6, pc}
 801169a:	2b00      	cmp	r3, #0
 801169c:	da04      	bge.n	80116a8 <_puts_r+0x84>
 801169e:	69a2      	ldr	r2, [r4, #24]
 80116a0:	429a      	cmp	r2, r3
 80116a2:	dc06      	bgt.n	80116b2 <_puts_r+0x8e>
 80116a4:	290a      	cmp	r1, #10
 80116a6:	d004      	beq.n	80116b2 <_puts_r+0x8e>
 80116a8:	6823      	ldr	r3, [r4, #0]
 80116aa:	1c5a      	adds	r2, r3, #1
 80116ac:	6022      	str	r2, [r4, #0]
 80116ae:	7019      	strb	r1, [r3, #0]
 80116b0:	e7cf      	b.n	8011652 <_puts_r+0x2e>
 80116b2:	4622      	mov	r2, r4
 80116b4:	4628      	mov	r0, r5
 80116b6:	f000 f854 	bl	8011762 <__swbuf_r>
 80116ba:	3001      	adds	r0, #1
 80116bc:	d1c9      	bne.n	8011652 <_puts_r+0x2e>
 80116be:	e7df      	b.n	8011680 <_puts_r+0x5c>
 80116c0:	6823      	ldr	r3, [r4, #0]
 80116c2:	250a      	movs	r5, #10
 80116c4:	1c5a      	adds	r2, r3, #1
 80116c6:	6022      	str	r2, [r4, #0]
 80116c8:	701d      	strb	r5, [r3, #0]
 80116ca:	e7db      	b.n	8011684 <_puts_r+0x60>

080116cc <puts>:
 80116cc:	4b02      	ldr	r3, [pc, #8]	; (80116d8 <puts+0xc>)
 80116ce:	4601      	mov	r1, r0
 80116d0:	6818      	ldr	r0, [r3, #0]
 80116d2:	f7ff bfa7 	b.w	8011624 <_puts_r>
 80116d6:	bf00      	nop
 80116d8:	24000088 	.word	0x24000088

080116dc <__sread>:
 80116dc:	b510      	push	{r4, lr}
 80116de:	460c      	mov	r4, r1
 80116e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80116e4:	f000 f962 	bl	80119ac <_read_r>
 80116e8:	2800      	cmp	r0, #0
 80116ea:	bfab      	itete	ge
 80116ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80116ee:	89a3      	ldrhlt	r3, [r4, #12]
 80116f0:	181b      	addge	r3, r3, r0
 80116f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80116f6:	bfac      	ite	ge
 80116f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80116fa:	81a3      	strhlt	r3, [r4, #12]
 80116fc:	bd10      	pop	{r4, pc}

080116fe <__swrite>:
 80116fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011702:	461f      	mov	r7, r3
 8011704:	898b      	ldrh	r3, [r1, #12]
 8011706:	05db      	lsls	r3, r3, #23
 8011708:	4605      	mov	r5, r0
 801170a:	460c      	mov	r4, r1
 801170c:	4616      	mov	r6, r2
 801170e:	d505      	bpl.n	801171c <__swrite+0x1e>
 8011710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011714:	2302      	movs	r3, #2
 8011716:	2200      	movs	r2, #0
 8011718:	f000 f936 	bl	8011988 <_lseek_r>
 801171c:	89a3      	ldrh	r3, [r4, #12]
 801171e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011722:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011726:	81a3      	strh	r3, [r4, #12]
 8011728:	4632      	mov	r2, r6
 801172a:	463b      	mov	r3, r7
 801172c:	4628      	mov	r0, r5
 801172e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011732:	f000 b95d 	b.w	80119f0 <_write_r>

08011736 <__sseek>:
 8011736:	b510      	push	{r4, lr}
 8011738:	460c      	mov	r4, r1
 801173a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801173e:	f000 f923 	bl	8011988 <_lseek_r>
 8011742:	1c43      	adds	r3, r0, #1
 8011744:	89a3      	ldrh	r3, [r4, #12]
 8011746:	bf15      	itete	ne
 8011748:	6560      	strne	r0, [r4, #84]	; 0x54
 801174a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801174e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011752:	81a3      	strheq	r3, [r4, #12]
 8011754:	bf18      	it	ne
 8011756:	81a3      	strhne	r3, [r4, #12]
 8011758:	bd10      	pop	{r4, pc}

0801175a <__sclose>:
 801175a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801175e:	f000 b8ad 	b.w	80118bc <_close_r>

08011762 <__swbuf_r>:
 8011762:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011764:	460e      	mov	r6, r1
 8011766:	4614      	mov	r4, r2
 8011768:	4605      	mov	r5, r0
 801176a:	b118      	cbz	r0, 8011774 <__swbuf_r+0x12>
 801176c:	6a03      	ldr	r3, [r0, #32]
 801176e:	b90b      	cbnz	r3, 8011774 <__swbuf_r+0x12>
 8011770:	f7ff fefe 	bl	8011570 <__sinit>
 8011774:	69a3      	ldr	r3, [r4, #24]
 8011776:	60a3      	str	r3, [r4, #8]
 8011778:	89a3      	ldrh	r3, [r4, #12]
 801177a:	071a      	lsls	r2, r3, #28
 801177c:	d525      	bpl.n	80117ca <__swbuf_r+0x68>
 801177e:	6923      	ldr	r3, [r4, #16]
 8011780:	b31b      	cbz	r3, 80117ca <__swbuf_r+0x68>
 8011782:	6823      	ldr	r3, [r4, #0]
 8011784:	6922      	ldr	r2, [r4, #16]
 8011786:	1a98      	subs	r0, r3, r2
 8011788:	6963      	ldr	r3, [r4, #20]
 801178a:	b2f6      	uxtb	r6, r6
 801178c:	4283      	cmp	r3, r0
 801178e:	4637      	mov	r7, r6
 8011790:	dc04      	bgt.n	801179c <__swbuf_r+0x3a>
 8011792:	4621      	mov	r1, r4
 8011794:	4628      	mov	r0, r5
 8011796:	f000 fd1f 	bl	80121d8 <_fflush_r>
 801179a:	b9e0      	cbnz	r0, 80117d6 <__swbuf_r+0x74>
 801179c:	68a3      	ldr	r3, [r4, #8]
 801179e:	3b01      	subs	r3, #1
 80117a0:	60a3      	str	r3, [r4, #8]
 80117a2:	6823      	ldr	r3, [r4, #0]
 80117a4:	1c5a      	adds	r2, r3, #1
 80117a6:	6022      	str	r2, [r4, #0]
 80117a8:	701e      	strb	r6, [r3, #0]
 80117aa:	6962      	ldr	r2, [r4, #20]
 80117ac:	1c43      	adds	r3, r0, #1
 80117ae:	429a      	cmp	r2, r3
 80117b0:	d004      	beq.n	80117bc <__swbuf_r+0x5a>
 80117b2:	89a3      	ldrh	r3, [r4, #12]
 80117b4:	07db      	lsls	r3, r3, #31
 80117b6:	d506      	bpl.n	80117c6 <__swbuf_r+0x64>
 80117b8:	2e0a      	cmp	r6, #10
 80117ba:	d104      	bne.n	80117c6 <__swbuf_r+0x64>
 80117bc:	4621      	mov	r1, r4
 80117be:	4628      	mov	r0, r5
 80117c0:	f000 fd0a 	bl	80121d8 <_fflush_r>
 80117c4:	b938      	cbnz	r0, 80117d6 <__swbuf_r+0x74>
 80117c6:	4638      	mov	r0, r7
 80117c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80117ca:	4621      	mov	r1, r4
 80117cc:	4628      	mov	r0, r5
 80117ce:	f000 f805 	bl	80117dc <__swsetup_r>
 80117d2:	2800      	cmp	r0, #0
 80117d4:	d0d5      	beq.n	8011782 <__swbuf_r+0x20>
 80117d6:	f04f 37ff 	mov.w	r7, #4294967295
 80117da:	e7f4      	b.n	80117c6 <__swbuf_r+0x64>

080117dc <__swsetup_r>:
 80117dc:	b538      	push	{r3, r4, r5, lr}
 80117de:	4b2a      	ldr	r3, [pc, #168]	; (8011888 <__swsetup_r+0xac>)
 80117e0:	4605      	mov	r5, r0
 80117e2:	6818      	ldr	r0, [r3, #0]
 80117e4:	460c      	mov	r4, r1
 80117e6:	b118      	cbz	r0, 80117f0 <__swsetup_r+0x14>
 80117e8:	6a03      	ldr	r3, [r0, #32]
 80117ea:	b90b      	cbnz	r3, 80117f0 <__swsetup_r+0x14>
 80117ec:	f7ff fec0 	bl	8011570 <__sinit>
 80117f0:	89a3      	ldrh	r3, [r4, #12]
 80117f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80117f6:	0718      	lsls	r0, r3, #28
 80117f8:	d422      	bmi.n	8011840 <__swsetup_r+0x64>
 80117fa:	06d9      	lsls	r1, r3, #27
 80117fc:	d407      	bmi.n	801180e <__swsetup_r+0x32>
 80117fe:	2309      	movs	r3, #9
 8011800:	602b      	str	r3, [r5, #0]
 8011802:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011806:	81a3      	strh	r3, [r4, #12]
 8011808:	f04f 30ff 	mov.w	r0, #4294967295
 801180c:	e034      	b.n	8011878 <__swsetup_r+0x9c>
 801180e:	0758      	lsls	r0, r3, #29
 8011810:	d512      	bpl.n	8011838 <__swsetup_r+0x5c>
 8011812:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011814:	b141      	cbz	r1, 8011828 <__swsetup_r+0x4c>
 8011816:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801181a:	4299      	cmp	r1, r3
 801181c:	d002      	beq.n	8011824 <__swsetup_r+0x48>
 801181e:	4628      	mov	r0, r5
 8011820:	f000 f934 	bl	8011a8c <_free_r>
 8011824:	2300      	movs	r3, #0
 8011826:	6363      	str	r3, [r4, #52]	; 0x34
 8011828:	89a3      	ldrh	r3, [r4, #12]
 801182a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801182e:	81a3      	strh	r3, [r4, #12]
 8011830:	2300      	movs	r3, #0
 8011832:	6063      	str	r3, [r4, #4]
 8011834:	6923      	ldr	r3, [r4, #16]
 8011836:	6023      	str	r3, [r4, #0]
 8011838:	89a3      	ldrh	r3, [r4, #12]
 801183a:	f043 0308 	orr.w	r3, r3, #8
 801183e:	81a3      	strh	r3, [r4, #12]
 8011840:	6923      	ldr	r3, [r4, #16]
 8011842:	b94b      	cbnz	r3, 8011858 <__swsetup_r+0x7c>
 8011844:	89a3      	ldrh	r3, [r4, #12]
 8011846:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801184a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801184e:	d003      	beq.n	8011858 <__swsetup_r+0x7c>
 8011850:	4621      	mov	r1, r4
 8011852:	4628      	mov	r0, r5
 8011854:	f000 fd0e 	bl	8012274 <__smakebuf_r>
 8011858:	89a0      	ldrh	r0, [r4, #12]
 801185a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801185e:	f010 0301 	ands.w	r3, r0, #1
 8011862:	d00a      	beq.n	801187a <__swsetup_r+0x9e>
 8011864:	2300      	movs	r3, #0
 8011866:	60a3      	str	r3, [r4, #8]
 8011868:	6963      	ldr	r3, [r4, #20]
 801186a:	425b      	negs	r3, r3
 801186c:	61a3      	str	r3, [r4, #24]
 801186e:	6923      	ldr	r3, [r4, #16]
 8011870:	b943      	cbnz	r3, 8011884 <__swsetup_r+0xa8>
 8011872:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011876:	d1c4      	bne.n	8011802 <__swsetup_r+0x26>
 8011878:	bd38      	pop	{r3, r4, r5, pc}
 801187a:	0781      	lsls	r1, r0, #30
 801187c:	bf58      	it	pl
 801187e:	6963      	ldrpl	r3, [r4, #20]
 8011880:	60a3      	str	r3, [r4, #8]
 8011882:	e7f4      	b.n	801186e <__swsetup_r+0x92>
 8011884:	2000      	movs	r0, #0
 8011886:	e7f7      	b.n	8011878 <__swsetup_r+0x9c>
 8011888:	24000088 	.word	0x24000088

0801188c <memcmp>:
 801188c:	b510      	push	{r4, lr}
 801188e:	3901      	subs	r1, #1
 8011890:	4402      	add	r2, r0
 8011892:	4290      	cmp	r0, r2
 8011894:	d101      	bne.n	801189a <memcmp+0xe>
 8011896:	2000      	movs	r0, #0
 8011898:	e005      	b.n	80118a6 <memcmp+0x1a>
 801189a:	7803      	ldrb	r3, [r0, #0]
 801189c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80118a0:	42a3      	cmp	r3, r4
 80118a2:	d001      	beq.n	80118a8 <memcmp+0x1c>
 80118a4:	1b18      	subs	r0, r3, r4
 80118a6:	bd10      	pop	{r4, pc}
 80118a8:	3001      	adds	r0, #1
 80118aa:	e7f2      	b.n	8011892 <memcmp+0x6>

080118ac <memset>:
 80118ac:	4402      	add	r2, r0
 80118ae:	4603      	mov	r3, r0
 80118b0:	4293      	cmp	r3, r2
 80118b2:	d100      	bne.n	80118b6 <memset+0xa>
 80118b4:	4770      	bx	lr
 80118b6:	f803 1b01 	strb.w	r1, [r3], #1
 80118ba:	e7f9      	b.n	80118b0 <memset+0x4>

080118bc <_close_r>:
 80118bc:	b538      	push	{r3, r4, r5, lr}
 80118be:	4d06      	ldr	r5, [pc, #24]	; (80118d8 <_close_r+0x1c>)
 80118c0:	2300      	movs	r3, #0
 80118c2:	4604      	mov	r4, r0
 80118c4:	4608      	mov	r0, r1
 80118c6:	602b      	str	r3, [r5, #0]
 80118c8:	f7ef f888 	bl	80009dc <_close>
 80118cc:	1c43      	adds	r3, r0, #1
 80118ce:	d102      	bne.n	80118d6 <_close_r+0x1a>
 80118d0:	682b      	ldr	r3, [r5, #0]
 80118d2:	b103      	cbz	r3, 80118d6 <_close_r+0x1a>
 80118d4:	6023      	str	r3, [r4, #0]
 80118d6:	bd38      	pop	{r3, r4, r5, pc}
 80118d8:	2400e928 	.word	0x2400e928

080118dc <_reclaim_reent>:
 80118dc:	4b29      	ldr	r3, [pc, #164]	; (8011984 <_reclaim_reent+0xa8>)
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	4283      	cmp	r3, r0
 80118e2:	b570      	push	{r4, r5, r6, lr}
 80118e4:	4604      	mov	r4, r0
 80118e6:	d04b      	beq.n	8011980 <_reclaim_reent+0xa4>
 80118e8:	69c3      	ldr	r3, [r0, #28]
 80118ea:	b143      	cbz	r3, 80118fe <_reclaim_reent+0x22>
 80118ec:	68db      	ldr	r3, [r3, #12]
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d144      	bne.n	801197c <_reclaim_reent+0xa0>
 80118f2:	69e3      	ldr	r3, [r4, #28]
 80118f4:	6819      	ldr	r1, [r3, #0]
 80118f6:	b111      	cbz	r1, 80118fe <_reclaim_reent+0x22>
 80118f8:	4620      	mov	r0, r4
 80118fa:	f000 f8c7 	bl	8011a8c <_free_r>
 80118fe:	6961      	ldr	r1, [r4, #20]
 8011900:	b111      	cbz	r1, 8011908 <_reclaim_reent+0x2c>
 8011902:	4620      	mov	r0, r4
 8011904:	f000 f8c2 	bl	8011a8c <_free_r>
 8011908:	69e1      	ldr	r1, [r4, #28]
 801190a:	b111      	cbz	r1, 8011912 <_reclaim_reent+0x36>
 801190c:	4620      	mov	r0, r4
 801190e:	f000 f8bd 	bl	8011a8c <_free_r>
 8011912:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8011914:	b111      	cbz	r1, 801191c <_reclaim_reent+0x40>
 8011916:	4620      	mov	r0, r4
 8011918:	f000 f8b8 	bl	8011a8c <_free_r>
 801191c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801191e:	b111      	cbz	r1, 8011926 <_reclaim_reent+0x4a>
 8011920:	4620      	mov	r0, r4
 8011922:	f000 f8b3 	bl	8011a8c <_free_r>
 8011926:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011928:	b111      	cbz	r1, 8011930 <_reclaim_reent+0x54>
 801192a:	4620      	mov	r0, r4
 801192c:	f000 f8ae 	bl	8011a8c <_free_r>
 8011930:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011932:	b111      	cbz	r1, 801193a <_reclaim_reent+0x5e>
 8011934:	4620      	mov	r0, r4
 8011936:	f000 f8a9 	bl	8011a8c <_free_r>
 801193a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801193c:	b111      	cbz	r1, 8011944 <_reclaim_reent+0x68>
 801193e:	4620      	mov	r0, r4
 8011940:	f000 f8a4 	bl	8011a8c <_free_r>
 8011944:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8011946:	b111      	cbz	r1, 801194e <_reclaim_reent+0x72>
 8011948:	4620      	mov	r0, r4
 801194a:	f000 f89f 	bl	8011a8c <_free_r>
 801194e:	6a23      	ldr	r3, [r4, #32]
 8011950:	b1b3      	cbz	r3, 8011980 <_reclaim_reent+0xa4>
 8011952:	4620      	mov	r0, r4
 8011954:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011958:	4718      	bx	r3
 801195a:	5949      	ldr	r1, [r1, r5]
 801195c:	b941      	cbnz	r1, 8011970 <_reclaim_reent+0x94>
 801195e:	3504      	adds	r5, #4
 8011960:	69e3      	ldr	r3, [r4, #28]
 8011962:	2d80      	cmp	r5, #128	; 0x80
 8011964:	68d9      	ldr	r1, [r3, #12]
 8011966:	d1f8      	bne.n	801195a <_reclaim_reent+0x7e>
 8011968:	4620      	mov	r0, r4
 801196a:	f000 f88f 	bl	8011a8c <_free_r>
 801196e:	e7c0      	b.n	80118f2 <_reclaim_reent+0x16>
 8011970:	680e      	ldr	r6, [r1, #0]
 8011972:	4620      	mov	r0, r4
 8011974:	f000 f88a 	bl	8011a8c <_free_r>
 8011978:	4631      	mov	r1, r6
 801197a:	e7ef      	b.n	801195c <_reclaim_reent+0x80>
 801197c:	2500      	movs	r5, #0
 801197e:	e7ef      	b.n	8011960 <_reclaim_reent+0x84>
 8011980:	bd70      	pop	{r4, r5, r6, pc}
 8011982:	bf00      	nop
 8011984:	24000088 	.word	0x24000088

08011988 <_lseek_r>:
 8011988:	b538      	push	{r3, r4, r5, lr}
 801198a:	4d07      	ldr	r5, [pc, #28]	; (80119a8 <_lseek_r+0x20>)
 801198c:	4604      	mov	r4, r0
 801198e:	4608      	mov	r0, r1
 8011990:	4611      	mov	r1, r2
 8011992:	2200      	movs	r2, #0
 8011994:	602a      	str	r2, [r5, #0]
 8011996:	461a      	mov	r2, r3
 8011998:	f7ef f82c 	bl	80009f4 <_lseek>
 801199c:	1c43      	adds	r3, r0, #1
 801199e:	d102      	bne.n	80119a6 <_lseek_r+0x1e>
 80119a0:	682b      	ldr	r3, [r5, #0]
 80119a2:	b103      	cbz	r3, 80119a6 <_lseek_r+0x1e>
 80119a4:	6023      	str	r3, [r4, #0]
 80119a6:	bd38      	pop	{r3, r4, r5, pc}
 80119a8:	2400e928 	.word	0x2400e928

080119ac <_read_r>:
 80119ac:	b538      	push	{r3, r4, r5, lr}
 80119ae:	4d07      	ldr	r5, [pc, #28]	; (80119cc <_read_r+0x20>)
 80119b0:	4604      	mov	r4, r0
 80119b2:	4608      	mov	r0, r1
 80119b4:	4611      	mov	r1, r2
 80119b6:	2200      	movs	r2, #0
 80119b8:	602a      	str	r2, [r5, #0]
 80119ba:	461a      	mov	r2, r3
 80119bc:	f7ee fff2 	bl	80009a4 <_read>
 80119c0:	1c43      	adds	r3, r0, #1
 80119c2:	d102      	bne.n	80119ca <_read_r+0x1e>
 80119c4:	682b      	ldr	r3, [r5, #0]
 80119c6:	b103      	cbz	r3, 80119ca <_read_r+0x1e>
 80119c8:	6023      	str	r3, [r4, #0]
 80119ca:	bd38      	pop	{r3, r4, r5, pc}
 80119cc:	2400e928 	.word	0x2400e928

080119d0 <_sbrk_r>:
 80119d0:	b538      	push	{r3, r4, r5, lr}
 80119d2:	4d06      	ldr	r5, [pc, #24]	; (80119ec <_sbrk_r+0x1c>)
 80119d4:	2300      	movs	r3, #0
 80119d6:	4604      	mov	r4, r0
 80119d8:	4608      	mov	r0, r1
 80119da:	602b      	str	r3, [r5, #0]
 80119dc:	f7ef f80c 	bl	80009f8 <_sbrk>
 80119e0:	1c43      	adds	r3, r0, #1
 80119e2:	d102      	bne.n	80119ea <_sbrk_r+0x1a>
 80119e4:	682b      	ldr	r3, [r5, #0]
 80119e6:	b103      	cbz	r3, 80119ea <_sbrk_r+0x1a>
 80119e8:	6023      	str	r3, [r4, #0]
 80119ea:	bd38      	pop	{r3, r4, r5, pc}
 80119ec:	2400e928 	.word	0x2400e928

080119f0 <_write_r>:
 80119f0:	b538      	push	{r3, r4, r5, lr}
 80119f2:	4d07      	ldr	r5, [pc, #28]	; (8011a10 <_write_r+0x20>)
 80119f4:	4604      	mov	r4, r0
 80119f6:	4608      	mov	r0, r1
 80119f8:	4611      	mov	r1, r2
 80119fa:	2200      	movs	r2, #0
 80119fc:	602a      	str	r2, [r5, #0]
 80119fe:	461a      	mov	r2, r3
 8011a00:	f7ee ffde 	bl	80009c0 <_write>
 8011a04:	1c43      	adds	r3, r0, #1
 8011a06:	d102      	bne.n	8011a0e <_write_r+0x1e>
 8011a08:	682b      	ldr	r3, [r5, #0]
 8011a0a:	b103      	cbz	r3, 8011a0e <_write_r+0x1e>
 8011a0c:	6023      	str	r3, [r4, #0]
 8011a0e:	bd38      	pop	{r3, r4, r5, pc}
 8011a10:	2400e928 	.word	0x2400e928

08011a14 <__libc_init_array>:
 8011a14:	b570      	push	{r4, r5, r6, lr}
 8011a16:	4d0d      	ldr	r5, [pc, #52]	; (8011a4c <__libc_init_array+0x38>)
 8011a18:	4c0d      	ldr	r4, [pc, #52]	; (8011a50 <__libc_init_array+0x3c>)
 8011a1a:	1b64      	subs	r4, r4, r5
 8011a1c:	10a4      	asrs	r4, r4, #2
 8011a1e:	2600      	movs	r6, #0
 8011a20:	42a6      	cmp	r6, r4
 8011a22:	d109      	bne.n	8011a38 <__libc_init_array+0x24>
 8011a24:	4d0b      	ldr	r5, [pc, #44]	; (8011a54 <__libc_init_array+0x40>)
 8011a26:	4c0c      	ldr	r4, [pc, #48]	; (8011a58 <__libc_init_array+0x44>)
 8011a28:	f000 fcc6 	bl	80123b8 <_init>
 8011a2c:	1b64      	subs	r4, r4, r5
 8011a2e:	10a4      	asrs	r4, r4, #2
 8011a30:	2600      	movs	r6, #0
 8011a32:	42a6      	cmp	r6, r4
 8011a34:	d105      	bne.n	8011a42 <__libc_init_array+0x2e>
 8011a36:	bd70      	pop	{r4, r5, r6, pc}
 8011a38:	f855 3b04 	ldr.w	r3, [r5], #4
 8011a3c:	4798      	blx	r3
 8011a3e:	3601      	adds	r6, #1
 8011a40:	e7ee      	b.n	8011a20 <__libc_init_array+0xc>
 8011a42:	f855 3b04 	ldr.w	r3, [r5], #4
 8011a46:	4798      	blx	r3
 8011a48:	3601      	adds	r6, #1
 8011a4a:	e7f2      	b.n	8011a32 <__libc_init_array+0x1e>
 8011a4c:	08015384 	.word	0x08015384
 8011a50:	08015384 	.word	0x08015384
 8011a54:	08015384 	.word	0x08015384
 8011a58:	08015388 	.word	0x08015388

08011a5c <__retarget_lock_init_recursive>:
 8011a5c:	4770      	bx	lr

08011a5e <__retarget_lock_acquire_recursive>:
 8011a5e:	4770      	bx	lr

08011a60 <__retarget_lock_release_recursive>:
 8011a60:	4770      	bx	lr

08011a62 <memcpy>:
 8011a62:	440a      	add	r2, r1
 8011a64:	4291      	cmp	r1, r2
 8011a66:	f100 33ff 	add.w	r3, r0, #4294967295
 8011a6a:	d100      	bne.n	8011a6e <memcpy+0xc>
 8011a6c:	4770      	bx	lr
 8011a6e:	b510      	push	{r4, lr}
 8011a70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011a74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011a78:	4291      	cmp	r1, r2
 8011a7a:	d1f9      	bne.n	8011a70 <memcpy+0xe>
 8011a7c:	bd10      	pop	{r4, pc}

08011a7e <abort>:
 8011a7e:	b508      	push	{r3, lr}
 8011a80:	2006      	movs	r0, #6
 8011a82:	f000 fc5b 	bl	801233c <raise>
 8011a86:	2001      	movs	r0, #1
 8011a88:	f7ee ff86 	bl	8000998 <_exit>

08011a8c <_free_r>:
 8011a8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011a8e:	2900      	cmp	r1, #0
 8011a90:	d044      	beq.n	8011b1c <_free_r+0x90>
 8011a92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011a96:	9001      	str	r0, [sp, #4]
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	f1a1 0404 	sub.w	r4, r1, #4
 8011a9e:	bfb8      	it	lt
 8011aa0:	18e4      	addlt	r4, r4, r3
 8011aa2:	f7ff fc8f 	bl	80113c4 <__malloc_lock>
 8011aa6:	4a1e      	ldr	r2, [pc, #120]	; (8011b20 <_free_r+0x94>)
 8011aa8:	9801      	ldr	r0, [sp, #4]
 8011aaa:	6813      	ldr	r3, [r2, #0]
 8011aac:	b933      	cbnz	r3, 8011abc <_free_r+0x30>
 8011aae:	6063      	str	r3, [r4, #4]
 8011ab0:	6014      	str	r4, [r2, #0]
 8011ab2:	b003      	add	sp, #12
 8011ab4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011ab8:	f7ff bc8a 	b.w	80113d0 <__malloc_unlock>
 8011abc:	42a3      	cmp	r3, r4
 8011abe:	d908      	bls.n	8011ad2 <_free_r+0x46>
 8011ac0:	6825      	ldr	r5, [r4, #0]
 8011ac2:	1961      	adds	r1, r4, r5
 8011ac4:	428b      	cmp	r3, r1
 8011ac6:	bf01      	itttt	eq
 8011ac8:	6819      	ldreq	r1, [r3, #0]
 8011aca:	685b      	ldreq	r3, [r3, #4]
 8011acc:	1949      	addeq	r1, r1, r5
 8011ace:	6021      	streq	r1, [r4, #0]
 8011ad0:	e7ed      	b.n	8011aae <_free_r+0x22>
 8011ad2:	461a      	mov	r2, r3
 8011ad4:	685b      	ldr	r3, [r3, #4]
 8011ad6:	b10b      	cbz	r3, 8011adc <_free_r+0x50>
 8011ad8:	42a3      	cmp	r3, r4
 8011ada:	d9fa      	bls.n	8011ad2 <_free_r+0x46>
 8011adc:	6811      	ldr	r1, [r2, #0]
 8011ade:	1855      	adds	r5, r2, r1
 8011ae0:	42a5      	cmp	r5, r4
 8011ae2:	d10b      	bne.n	8011afc <_free_r+0x70>
 8011ae4:	6824      	ldr	r4, [r4, #0]
 8011ae6:	4421      	add	r1, r4
 8011ae8:	1854      	adds	r4, r2, r1
 8011aea:	42a3      	cmp	r3, r4
 8011aec:	6011      	str	r1, [r2, #0]
 8011aee:	d1e0      	bne.n	8011ab2 <_free_r+0x26>
 8011af0:	681c      	ldr	r4, [r3, #0]
 8011af2:	685b      	ldr	r3, [r3, #4]
 8011af4:	6053      	str	r3, [r2, #4]
 8011af6:	440c      	add	r4, r1
 8011af8:	6014      	str	r4, [r2, #0]
 8011afa:	e7da      	b.n	8011ab2 <_free_r+0x26>
 8011afc:	d902      	bls.n	8011b04 <_free_r+0x78>
 8011afe:	230c      	movs	r3, #12
 8011b00:	6003      	str	r3, [r0, #0]
 8011b02:	e7d6      	b.n	8011ab2 <_free_r+0x26>
 8011b04:	6825      	ldr	r5, [r4, #0]
 8011b06:	1961      	adds	r1, r4, r5
 8011b08:	428b      	cmp	r3, r1
 8011b0a:	bf04      	itt	eq
 8011b0c:	6819      	ldreq	r1, [r3, #0]
 8011b0e:	685b      	ldreq	r3, [r3, #4]
 8011b10:	6063      	str	r3, [r4, #4]
 8011b12:	bf04      	itt	eq
 8011b14:	1949      	addeq	r1, r1, r5
 8011b16:	6021      	streq	r1, [r4, #0]
 8011b18:	6054      	str	r4, [r2, #4]
 8011b1a:	e7ca      	b.n	8011ab2 <_free_r+0x26>
 8011b1c:	b003      	add	sp, #12
 8011b1e:	bd30      	pop	{r4, r5, pc}
 8011b20:	2400e7e4 	.word	0x2400e7e4

08011b24 <__sfputc_r>:
 8011b24:	6893      	ldr	r3, [r2, #8]
 8011b26:	3b01      	subs	r3, #1
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	b410      	push	{r4}
 8011b2c:	6093      	str	r3, [r2, #8]
 8011b2e:	da08      	bge.n	8011b42 <__sfputc_r+0x1e>
 8011b30:	6994      	ldr	r4, [r2, #24]
 8011b32:	42a3      	cmp	r3, r4
 8011b34:	db01      	blt.n	8011b3a <__sfputc_r+0x16>
 8011b36:	290a      	cmp	r1, #10
 8011b38:	d103      	bne.n	8011b42 <__sfputc_r+0x1e>
 8011b3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b3e:	f7ff be10 	b.w	8011762 <__swbuf_r>
 8011b42:	6813      	ldr	r3, [r2, #0]
 8011b44:	1c58      	adds	r0, r3, #1
 8011b46:	6010      	str	r0, [r2, #0]
 8011b48:	7019      	strb	r1, [r3, #0]
 8011b4a:	4608      	mov	r0, r1
 8011b4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b50:	4770      	bx	lr

08011b52 <__sfputs_r>:
 8011b52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b54:	4606      	mov	r6, r0
 8011b56:	460f      	mov	r7, r1
 8011b58:	4614      	mov	r4, r2
 8011b5a:	18d5      	adds	r5, r2, r3
 8011b5c:	42ac      	cmp	r4, r5
 8011b5e:	d101      	bne.n	8011b64 <__sfputs_r+0x12>
 8011b60:	2000      	movs	r0, #0
 8011b62:	e007      	b.n	8011b74 <__sfputs_r+0x22>
 8011b64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b68:	463a      	mov	r2, r7
 8011b6a:	4630      	mov	r0, r6
 8011b6c:	f7ff ffda 	bl	8011b24 <__sfputc_r>
 8011b70:	1c43      	adds	r3, r0, #1
 8011b72:	d1f3      	bne.n	8011b5c <__sfputs_r+0xa>
 8011b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011b78 <_vfiprintf_r>:
 8011b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b7c:	460d      	mov	r5, r1
 8011b7e:	b09d      	sub	sp, #116	; 0x74
 8011b80:	4614      	mov	r4, r2
 8011b82:	4698      	mov	r8, r3
 8011b84:	4606      	mov	r6, r0
 8011b86:	b118      	cbz	r0, 8011b90 <_vfiprintf_r+0x18>
 8011b88:	6a03      	ldr	r3, [r0, #32]
 8011b8a:	b90b      	cbnz	r3, 8011b90 <_vfiprintf_r+0x18>
 8011b8c:	f7ff fcf0 	bl	8011570 <__sinit>
 8011b90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011b92:	07d9      	lsls	r1, r3, #31
 8011b94:	d405      	bmi.n	8011ba2 <_vfiprintf_r+0x2a>
 8011b96:	89ab      	ldrh	r3, [r5, #12]
 8011b98:	059a      	lsls	r2, r3, #22
 8011b9a:	d402      	bmi.n	8011ba2 <_vfiprintf_r+0x2a>
 8011b9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011b9e:	f7ff ff5e 	bl	8011a5e <__retarget_lock_acquire_recursive>
 8011ba2:	89ab      	ldrh	r3, [r5, #12]
 8011ba4:	071b      	lsls	r3, r3, #28
 8011ba6:	d501      	bpl.n	8011bac <_vfiprintf_r+0x34>
 8011ba8:	692b      	ldr	r3, [r5, #16]
 8011baa:	b99b      	cbnz	r3, 8011bd4 <_vfiprintf_r+0x5c>
 8011bac:	4629      	mov	r1, r5
 8011bae:	4630      	mov	r0, r6
 8011bb0:	f7ff fe14 	bl	80117dc <__swsetup_r>
 8011bb4:	b170      	cbz	r0, 8011bd4 <_vfiprintf_r+0x5c>
 8011bb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011bb8:	07dc      	lsls	r4, r3, #31
 8011bba:	d504      	bpl.n	8011bc6 <_vfiprintf_r+0x4e>
 8011bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8011bc0:	b01d      	add	sp, #116	; 0x74
 8011bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bc6:	89ab      	ldrh	r3, [r5, #12]
 8011bc8:	0598      	lsls	r0, r3, #22
 8011bca:	d4f7      	bmi.n	8011bbc <_vfiprintf_r+0x44>
 8011bcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011bce:	f7ff ff47 	bl	8011a60 <__retarget_lock_release_recursive>
 8011bd2:	e7f3      	b.n	8011bbc <_vfiprintf_r+0x44>
 8011bd4:	2300      	movs	r3, #0
 8011bd6:	9309      	str	r3, [sp, #36]	; 0x24
 8011bd8:	2320      	movs	r3, #32
 8011bda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011bde:	f8cd 800c 	str.w	r8, [sp, #12]
 8011be2:	2330      	movs	r3, #48	; 0x30
 8011be4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8011d98 <_vfiprintf_r+0x220>
 8011be8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011bec:	f04f 0901 	mov.w	r9, #1
 8011bf0:	4623      	mov	r3, r4
 8011bf2:	469a      	mov	sl, r3
 8011bf4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011bf8:	b10a      	cbz	r2, 8011bfe <_vfiprintf_r+0x86>
 8011bfa:	2a25      	cmp	r2, #37	; 0x25
 8011bfc:	d1f9      	bne.n	8011bf2 <_vfiprintf_r+0x7a>
 8011bfe:	ebba 0b04 	subs.w	fp, sl, r4
 8011c02:	d00b      	beq.n	8011c1c <_vfiprintf_r+0xa4>
 8011c04:	465b      	mov	r3, fp
 8011c06:	4622      	mov	r2, r4
 8011c08:	4629      	mov	r1, r5
 8011c0a:	4630      	mov	r0, r6
 8011c0c:	f7ff ffa1 	bl	8011b52 <__sfputs_r>
 8011c10:	3001      	adds	r0, #1
 8011c12:	f000 80a9 	beq.w	8011d68 <_vfiprintf_r+0x1f0>
 8011c16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011c18:	445a      	add	r2, fp
 8011c1a:	9209      	str	r2, [sp, #36]	; 0x24
 8011c1c:	f89a 3000 	ldrb.w	r3, [sl]
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	f000 80a1 	beq.w	8011d68 <_vfiprintf_r+0x1f0>
 8011c26:	2300      	movs	r3, #0
 8011c28:	f04f 32ff 	mov.w	r2, #4294967295
 8011c2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011c30:	f10a 0a01 	add.w	sl, sl, #1
 8011c34:	9304      	str	r3, [sp, #16]
 8011c36:	9307      	str	r3, [sp, #28]
 8011c38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011c3c:	931a      	str	r3, [sp, #104]	; 0x68
 8011c3e:	4654      	mov	r4, sl
 8011c40:	2205      	movs	r2, #5
 8011c42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c46:	4854      	ldr	r0, [pc, #336]	; (8011d98 <_vfiprintf_r+0x220>)
 8011c48:	f7ee fb62 	bl	8000310 <memchr>
 8011c4c:	9a04      	ldr	r2, [sp, #16]
 8011c4e:	b9d8      	cbnz	r0, 8011c88 <_vfiprintf_r+0x110>
 8011c50:	06d1      	lsls	r1, r2, #27
 8011c52:	bf44      	itt	mi
 8011c54:	2320      	movmi	r3, #32
 8011c56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011c5a:	0713      	lsls	r3, r2, #28
 8011c5c:	bf44      	itt	mi
 8011c5e:	232b      	movmi	r3, #43	; 0x2b
 8011c60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011c64:	f89a 3000 	ldrb.w	r3, [sl]
 8011c68:	2b2a      	cmp	r3, #42	; 0x2a
 8011c6a:	d015      	beq.n	8011c98 <_vfiprintf_r+0x120>
 8011c6c:	9a07      	ldr	r2, [sp, #28]
 8011c6e:	4654      	mov	r4, sl
 8011c70:	2000      	movs	r0, #0
 8011c72:	f04f 0c0a 	mov.w	ip, #10
 8011c76:	4621      	mov	r1, r4
 8011c78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011c7c:	3b30      	subs	r3, #48	; 0x30
 8011c7e:	2b09      	cmp	r3, #9
 8011c80:	d94d      	bls.n	8011d1e <_vfiprintf_r+0x1a6>
 8011c82:	b1b0      	cbz	r0, 8011cb2 <_vfiprintf_r+0x13a>
 8011c84:	9207      	str	r2, [sp, #28]
 8011c86:	e014      	b.n	8011cb2 <_vfiprintf_r+0x13a>
 8011c88:	eba0 0308 	sub.w	r3, r0, r8
 8011c8c:	fa09 f303 	lsl.w	r3, r9, r3
 8011c90:	4313      	orrs	r3, r2
 8011c92:	9304      	str	r3, [sp, #16]
 8011c94:	46a2      	mov	sl, r4
 8011c96:	e7d2      	b.n	8011c3e <_vfiprintf_r+0xc6>
 8011c98:	9b03      	ldr	r3, [sp, #12]
 8011c9a:	1d19      	adds	r1, r3, #4
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	9103      	str	r1, [sp, #12]
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	bfbb      	ittet	lt
 8011ca4:	425b      	neglt	r3, r3
 8011ca6:	f042 0202 	orrlt.w	r2, r2, #2
 8011caa:	9307      	strge	r3, [sp, #28]
 8011cac:	9307      	strlt	r3, [sp, #28]
 8011cae:	bfb8      	it	lt
 8011cb0:	9204      	strlt	r2, [sp, #16]
 8011cb2:	7823      	ldrb	r3, [r4, #0]
 8011cb4:	2b2e      	cmp	r3, #46	; 0x2e
 8011cb6:	d10c      	bne.n	8011cd2 <_vfiprintf_r+0x15a>
 8011cb8:	7863      	ldrb	r3, [r4, #1]
 8011cba:	2b2a      	cmp	r3, #42	; 0x2a
 8011cbc:	d134      	bne.n	8011d28 <_vfiprintf_r+0x1b0>
 8011cbe:	9b03      	ldr	r3, [sp, #12]
 8011cc0:	1d1a      	adds	r2, r3, #4
 8011cc2:	681b      	ldr	r3, [r3, #0]
 8011cc4:	9203      	str	r2, [sp, #12]
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	bfb8      	it	lt
 8011cca:	f04f 33ff 	movlt.w	r3, #4294967295
 8011cce:	3402      	adds	r4, #2
 8011cd0:	9305      	str	r3, [sp, #20]
 8011cd2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8011da8 <_vfiprintf_r+0x230>
 8011cd6:	7821      	ldrb	r1, [r4, #0]
 8011cd8:	2203      	movs	r2, #3
 8011cda:	4650      	mov	r0, sl
 8011cdc:	f7ee fb18 	bl	8000310 <memchr>
 8011ce0:	b138      	cbz	r0, 8011cf2 <_vfiprintf_r+0x17a>
 8011ce2:	9b04      	ldr	r3, [sp, #16]
 8011ce4:	eba0 000a 	sub.w	r0, r0, sl
 8011ce8:	2240      	movs	r2, #64	; 0x40
 8011cea:	4082      	lsls	r2, r0
 8011cec:	4313      	orrs	r3, r2
 8011cee:	3401      	adds	r4, #1
 8011cf0:	9304      	str	r3, [sp, #16]
 8011cf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011cf6:	4829      	ldr	r0, [pc, #164]	; (8011d9c <_vfiprintf_r+0x224>)
 8011cf8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011cfc:	2206      	movs	r2, #6
 8011cfe:	f7ee fb07 	bl	8000310 <memchr>
 8011d02:	2800      	cmp	r0, #0
 8011d04:	d03f      	beq.n	8011d86 <_vfiprintf_r+0x20e>
 8011d06:	4b26      	ldr	r3, [pc, #152]	; (8011da0 <_vfiprintf_r+0x228>)
 8011d08:	bb1b      	cbnz	r3, 8011d52 <_vfiprintf_r+0x1da>
 8011d0a:	9b03      	ldr	r3, [sp, #12]
 8011d0c:	3307      	adds	r3, #7
 8011d0e:	f023 0307 	bic.w	r3, r3, #7
 8011d12:	3308      	adds	r3, #8
 8011d14:	9303      	str	r3, [sp, #12]
 8011d16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d18:	443b      	add	r3, r7
 8011d1a:	9309      	str	r3, [sp, #36]	; 0x24
 8011d1c:	e768      	b.n	8011bf0 <_vfiprintf_r+0x78>
 8011d1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011d22:	460c      	mov	r4, r1
 8011d24:	2001      	movs	r0, #1
 8011d26:	e7a6      	b.n	8011c76 <_vfiprintf_r+0xfe>
 8011d28:	2300      	movs	r3, #0
 8011d2a:	3401      	adds	r4, #1
 8011d2c:	9305      	str	r3, [sp, #20]
 8011d2e:	4619      	mov	r1, r3
 8011d30:	f04f 0c0a 	mov.w	ip, #10
 8011d34:	4620      	mov	r0, r4
 8011d36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011d3a:	3a30      	subs	r2, #48	; 0x30
 8011d3c:	2a09      	cmp	r2, #9
 8011d3e:	d903      	bls.n	8011d48 <_vfiprintf_r+0x1d0>
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d0c6      	beq.n	8011cd2 <_vfiprintf_r+0x15a>
 8011d44:	9105      	str	r1, [sp, #20]
 8011d46:	e7c4      	b.n	8011cd2 <_vfiprintf_r+0x15a>
 8011d48:	fb0c 2101 	mla	r1, ip, r1, r2
 8011d4c:	4604      	mov	r4, r0
 8011d4e:	2301      	movs	r3, #1
 8011d50:	e7f0      	b.n	8011d34 <_vfiprintf_r+0x1bc>
 8011d52:	ab03      	add	r3, sp, #12
 8011d54:	9300      	str	r3, [sp, #0]
 8011d56:	462a      	mov	r2, r5
 8011d58:	4b12      	ldr	r3, [pc, #72]	; (8011da4 <_vfiprintf_r+0x22c>)
 8011d5a:	a904      	add	r1, sp, #16
 8011d5c:	4630      	mov	r0, r6
 8011d5e:	f3af 8000 	nop.w
 8011d62:	4607      	mov	r7, r0
 8011d64:	1c78      	adds	r0, r7, #1
 8011d66:	d1d6      	bne.n	8011d16 <_vfiprintf_r+0x19e>
 8011d68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011d6a:	07d9      	lsls	r1, r3, #31
 8011d6c:	d405      	bmi.n	8011d7a <_vfiprintf_r+0x202>
 8011d6e:	89ab      	ldrh	r3, [r5, #12]
 8011d70:	059a      	lsls	r2, r3, #22
 8011d72:	d402      	bmi.n	8011d7a <_vfiprintf_r+0x202>
 8011d74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011d76:	f7ff fe73 	bl	8011a60 <__retarget_lock_release_recursive>
 8011d7a:	89ab      	ldrh	r3, [r5, #12]
 8011d7c:	065b      	lsls	r3, r3, #25
 8011d7e:	f53f af1d 	bmi.w	8011bbc <_vfiprintf_r+0x44>
 8011d82:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011d84:	e71c      	b.n	8011bc0 <_vfiprintf_r+0x48>
 8011d86:	ab03      	add	r3, sp, #12
 8011d88:	9300      	str	r3, [sp, #0]
 8011d8a:	462a      	mov	r2, r5
 8011d8c:	4b05      	ldr	r3, [pc, #20]	; (8011da4 <_vfiprintf_r+0x22c>)
 8011d8e:	a904      	add	r1, sp, #16
 8011d90:	4630      	mov	r0, r6
 8011d92:	f000 f879 	bl	8011e88 <_printf_i>
 8011d96:	e7e4      	b.n	8011d62 <_vfiprintf_r+0x1ea>
 8011d98:	0801534f 	.word	0x0801534f
 8011d9c:	08015359 	.word	0x08015359
 8011da0:	00000000 	.word	0x00000000
 8011da4:	08011b53 	.word	0x08011b53
 8011da8:	08015355 	.word	0x08015355

08011dac <_printf_common>:
 8011dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011db0:	4616      	mov	r6, r2
 8011db2:	4699      	mov	r9, r3
 8011db4:	688a      	ldr	r2, [r1, #8]
 8011db6:	690b      	ldr	r3, [r1, #16]
 8011db8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011dbc:	4293      	cmp	r3, r2
 8011dbe:	bfb8      	it	lt
 8011dc0:	4613      	movlt	r3, r2
 8011dc2:	6033      	str	r3, [r6, #0]
 8011dc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011dc8:	4607      	mov	r7, r0
 8011dca:	460c      	mov	r4, r1
 8011dcc:	b10a      	cbz	r2, 8011dd2 <_printf_common+0x26>
 8011dce:	3301      	adds	r3, #1
 8011dd0:	6033      	str	r3, [r6, #0]
 8011dd2:	6823      	ldr	r3, [r4, #0]
 8011dd4:	0699      	lsls	r1, r3, #26
 8011dd6:	bf42      	ittt	mi
 8011dd8:	6833      	ldrmi	r3, [r6, #0]
 8011dda:	3302      	addmi	r3, #2
 8011ddc:	6033      	strmi	r3, [r6, #0]
 8011dde:	6825      	ldr	r5, [r4, #0]
 8011de0:	f015 0506 	ands.w	r5, r5, #6
 8011de4:	d106      	bne.n	8011df4 <_printf_common+0x48>
 8011de6:	f104 0a19 	add.w	sl, r4, #25
 8011dea:	68e3      	ldr	r3, [r4, #12]
 8011dec:	6832      	ldr	r2, [r6, #0]
 8011dee:	1a9b      	subs	r3, r3, r2
 8011df0:	42ab      	cmp	r3, r5
 8011df2:	dc26      	bgt.n	8011e42 <_printf_common+0x96>
 8011df4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011df8:	1e13      	subs	r3, r2, #0
 8011dfa:	6822      	ldr	r2, [r4, #0]
 8011dfc:	bf18      	it	ne
 8011dfe:	2301      	movne	r3, #1
 8011e00:	0692      	lsls	r2, r2, #26
 8011e02:	d42b      	bmi.n	8011e5c <_printf_common+0xb0>
 8011e04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011e08:	4649      	mov	r1, r9
 8011e0a:	4638      	mov	r0, r7
 8011e0c:	47c0      	blx	r8
 8011e0e:	3001      	adds	r0, #1
 8011e10:	d01e      	beq.n	8011e50 <_printf_common+0xa4>
 8011e12:	6823      	ldr	r3, [r4, #0]
 8011e14:	6922      	ldr	r2, [r4, #16]
 8011e16:	f003 0306 	and.w	r3, r3, #6
 8011e1a:	2b04      	cmp	r3, #4
 8011e1c:	bf02      	ittt	eq
 8011e1e:	68e5      	ldreq	r5, [r4, #12]
 8011e20:	6833      	ldreq	r3, [r6, #0]
 8011e22:	1aed      	subeq	r5, r5, r3
 8011e24:	68a3      	ldr	r3, [r4, #8]
 8011e26:	bf0c      	ite	eq
 8011e28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011e2c:	2500      	movne	r5, #0
 8011e2e:	4293      	cmp	r3, r2
 8011e30:	bfc4      	itt	gt
 8011e32:	1a9b      	subgt	r3, r3, r2
 8011e34:	18ed      	addgt	r5, r5, r3
 8011e36:	2600      	movs	r6, #0
 8011e38:	341a      	adds	r4, #26
 8011e3a:	42b5      	cmp	r5, r6
 8011e3c:	d11a      	bne.n	8011e74 <_printf_common+0xc8>
 8011e3e:	2000      	movs	r0, #0
 8011e40:	e008      	b.n	8011e54 <_printf_common+0xa8>
 8011e42:	2301      	movs	r3, #1
 8011e44:	4652      	mov	r2, sl
 8011e46:	4649      	mov	r1, r9
 8011e48:	4638      	mov	r0, r7
 8011e4a:	47c0      	blx	r8
 8011e4c:	3001      	adds	r0, #1
 8011e4e:	d103      	bne.n	8011e58 <_printf_common+0xac>
 8011e50:	f04f 30ff 	mov.w	r0, #4294967295
 8011e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e58:	3501      	adds	r5, #1
 8011e5a:	e7c6      	b.n	8011dea <_printf_common+0x3e>
 8011e5c:	18e1      	adds	r1, r4, r3
 8011e5e:	1c5a      	adds	r2, r3, #1
 8011e60:	2030      	movs	r0, #48	; 0x30
 8011e62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011e66:	4422      	add	r2, r4
 8011e68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011e6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011e70:	3302      	adds	r3, #2
 8011e72:	e7c7      	b.n	8011e04 <_printf_common+0x58>
 8011e74:	2301      	movs	r3, #1
 8011e76:	4622      	mov	r2, r4
 8011e78:	4649      	mov	r1, r9
 8011e7a:	4638      	mov	r0, r7
 8011e7c:	47c0      	blx	r8
 8011e7e:	3001      	adds	r0, #1
 8011e80:	d0e6      	beq.n	8011e50 <_printf_common+0xa4>
 8011e82:	3601      	adds	r6, #1
 8011e84:	e7d9      	b.n	8011e3a <_printf_common+0x8e>
	...

08011e88 <_printf_i>:
 8011e88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011e8c:	7e0f      	ldrb	r7, [r1, #24]
 8011e8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011e90:	2f78      	cmp	r7, #120	; 0x78
 8011e92:	4691      	mov	r9, r2
 8011e94:	4680      	mov	r8, r0
 8011e96:	460c      	mov	r4, r1
 8011e98:	469a      	mov	sl, r3
 8011e9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011e9e:	d807      	bhi.n	8011eb0 <_printf_i+0x28>
 8011ea0:	2f62      	cmp	r7, #98	; 0x62
 8011ea2:	d80a      	bhi.n	8011eba <_printf_i+0x32>
 8011ea4:	2f00      	cmp	r7, #0
 8011ea6:	f000 80d4 	beq.w	8012052 <_printf_i+0x1ca>
 8011eaa:	2f58      	cmp	r7, #88	; 0x58
 8011eac:	f000 80c0 	beq.w	8012030 <_printf_i+0x1a8>
 8011eb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011eb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011eb8:	e03a      	b.n	8011f30 <_printf_i+0xa8>
 8011eba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011ebe:	2b15      	cmp	r3, #21
 8011ec0:	d8f6      	bhi.n	8011eb0 <_printf_i+0x28>
 8011ec2:	a101      	add	r1, pc, #4	; (adr r1, 8011ec8 <_printf_i+0x40>)
 8011ec4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011ec8:	08011f21 	.word	0x08011f21
 8011ecc:	08011f35 	.word	0x08011f35
 8011ed0:	08011eb1 	.word	0x08011eb1
 8011ed4:	08011eb1 	.word	0x08011eb1
 8011ed8:	08011eb1 	.word	0x08011eb1
 8011edc:	08011eb1 	.word	0x08011eb1
 8011ee0:	08011f35 	.word	0x08011f35
 8011ee4:	08011eb1 	.word	0x08011eb1
 8011ee8:	08011eb1 	.word	0x08011eb1
 8011eec:	08011eb1 	.word	0x08011eb1
 8011ef0:	08011eb1 	.word	0x08011eb1
 8011ef4:	08012039 	.word	0x08012039
 8011ef8:	08011f61 	.word	0x08011f61
 8011efc:	08011ff3 	.word	0x08011ff3
 8011f00:	08011eb1 	.word	0x08011eb1
 8011f04:	08011eb1 	.word	0x08011eb1
 8011f08:	0801205b 	.word	0x0801205b
 8011f0c:	08011eb1 	.word	0x08011eb1
 8011f10:	08011f61 	.word	0x08011f61
 8011f14:	08011eb1 	.word	0x08011eb1
 8011f18:	08011eb1 	.word	0x08011eb1
 8011f1c:	08011ffb 	.word	0x08011ffb
 8011f20:	682b      	ldr	r3, [r5, #0]
 8011f22:	1d1a      	adds	r2, r3, #4
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	602a      	str	r2, [r5, #0]
 8011f28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011f2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011f30:	2301      	movs	r3, #1
 8011f32:	e09f      	b.n	8012074 <_printf_i+0x1ec>
 8011f34:	6820      	ldr	r0, [r4, #0]
 8011f36:	682b      	ldr	r3, [r5, #0]
 8011f38:	0607      	lsls	r7, r0, #24
 8011f3a:	f103 0104 	add.w	r1, r3, #4
 8011f3e:	6029      	str	r1, [r5, #0]
 8011f40:	d501      	bpl.n	8011f46 <_printf_i+0xbe>
 8011f42:	681e      	ldr	r6, [r3, #0]
 8011f44:	e003      	b.n	8011f4e <_printf_i+0xc6>
 8011f46:	0646      	lsls	r6, r0, #25
 8011f48:	d5fb      	bpl.n	8011f42 <_printf_i+0xba>
 8011f4a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8011f4e:	2e00      	cmp	r6, #0
 8011f50:	da03      	bge.n	8011f5a <_printf_i+0xd2>
 8011f52:	232d      	movs	r3, #45	; 0x2d
 8011f54:	4276      	negs	r6, r6
 8011f56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011f5a:	485a      	ldr	r0, [pc, #360]	; (80120c4 <_printf_i+0x23c>)
 8011f5c:	230a      	movs	r3, #10
 8011f5e:	e012      	b.n	8011f86 <_printf_i+0xfe>
 8011f60:	682b      	ldr	r3, [r5, #0]
 8011f62:	6820      	ldr	r0, [r4, #0]
 8011f64:	1d19      	adds	r1, r3, #4
 8011f66:	6029      	str	r1, [r5, #0]
 8011f68:	0605      	lsls	r5, r0, #24
 8011f6a:	d501      	bpl.n	8011f70 <_printf_i+0xe8>
 8011f6c:	681e      	ldr	r6, [r3, #0]
 8011f6e:	e002      	b.n	8011f76 <_printf_i+0xee>
 8011f70:	0641      	lsls	r1, r0, #25
 8011f72:	d5fb      	bpl.n	8011f6c <_printf_i+0xe4>
 8011f74:	881e      	ldrh	r6, [r3, #0]
 8011f76:	4853      	ldr	r0, [pc, #332]	; (80120c4 <_printf_i+0x23c>)
 8011f78:	2f6f      	cmp	r7, #111	; 0x6f
 8011f7a:	bf0c      	ite	eq
 8011f7c:	2308      	moveq	r3, #8
 8011f7e:	230a      	movne	r3, #10
 8011f80:	2100      	movs	r1, #0
 8011f82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011f86:	6865      	ldr	r5, [r4, #4]
 8011f88:	60a5      	str	r5, [r4, #8]
 8011f8a:	2d00      	cmp	r5, #0
 8011f8c:	bfa2      	ittt	ge
 8011f8e:	6821      	ldrge	r1, [r4, #0]
 8011f90:	f021 0104 	bicge.w	r1, r1, #4
 8011f94:	6021      	strge	r1, [r4, #0]
 8011f96:	b90e      	cbnz	r6, 8011f9c <_printf_i+0x114>
 8011f98:	2d00      	cmp	r5, #0
 8011f9a:	d04b      	beq.n	8012034 <_printf_i+0x1ac>
 8011f9c:	4615      	mov	r5, r2
 8011f9e:	fbb6 f1f3 	udiv	r1, r6, r3
 8011fa2:	fb03 6711 	mls	r7, r3, r1, r6
 8011fa6:	5dc7      	ldrb	r7, [r0, r7]
 8011fa8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011fac:	4637      	mov	r7, r6
 8011fae:	42bb      	cmp	r3, r7
 8011fb0:	460e      	mov	r6, r1
 8011fb2:	d9f4      	bls.n	8011f9e <_printf_i+0x116>
 8011fb4:	2b08      	cmp	r3, #8
 8011fb6:	d10b      	bne.n	8011fd0 <_printf_i+0x148>
 8011fb8:	6823      	ldr	r3, [r4, #0]
 8011fba:	07de      	lsls	r6, r3, #31
 8011fbc:	d508      	bpl.n	8011fd0 <_printf_i+0x148>
 8011fbe:	6923      	ldr	r3, [r4, #16]
 8011fc0:	6861      	ldr	r1, [r4, #4]
 8011fc2:	4299      	cmp	r1, r3
 8011fc4:	bfde      	ittt	le
 8011fc6:	2330      	movle	r3, #48	; 0x30
 8011fc8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011fcc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011fd0:	1b52      	subs	r2, r2, r5
 8011fd2:	6122      	str	r2, [r4, #16]
 8011fd4:	f8cd a000 	str.w	sl, [sp]
 8011fd8:	464b      	mov	r3, r9
 8011fda:	aa03      	add	r2, sp, #12
 8011fdc:	4621      	mov	r1, r4
 8011fde:	4640      	mov	r0, r8
 8011fe0:	f7ff fee4 	bl	8011dac <_printf_common>
 8011fe4:	3001      	adds	r0, #1
 8011fe6:	d14a      	bne.n	801207e <_printf_i+0x1f6>
 8011fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8011fec:	b004      	add	sp, #16
 8011fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ff2:	6823      	ldr	r3, [r4, #0]
 8011ff4:	f043 0320 	orr.w	r3, r3, #32
 8011ff8:	6023      	str	r3, [r4, #0]
 8011ffa:	4833      	ldr	r0, [pc, #204]	; (80120c8 <_printf_i+0x240>)
 8011ffc:	2778      	movs	r7, #120	; 0x78
 8011ffe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012002:	6823      	ldr	r3, [r4, #0]
 8012004:	6829      	ldr	r1, [r5, #0]
 8012006:	061f      	lsls	r7, r3, #24
 8012008:	f851 6b04 	ldr.w	r6, [r1], #4
 801200c:	d402      	bmi.n	8012014 <_printf_i+0x18c>
 801200e:	065f      	lsls	r7, r3, #25
 8012010:	bf48      	it	mi
 8012012:	b2b6      	uxthmi	r6, r6
 8012014:	07df      	lsls	r7, r3, #31
 8012016:	bf48      	it	mi
 8012018:	f043 0320 	orrmi.w	r3, r3, #32
 801201c:	6029      	str	r1, [r5, #0]
 801201e:	bf48      	it	mi
 8012020:	6023      	strmi	r3, [r4, #0]
 8012022:	b91e      	cbnz	r6, 801202c <_printf_i+0x1a4>
 8012024:	6823      	ldr	r3, [r4, #0]
 8012026:	f023 0320 	bic.w	r3, r3, #32
 801202a:	6023      	str	r3, [r4, #0]
 801202c:	2310      	movs	r3, #16
 801202e:	e7a7      	b.n	8011f80 <_printf_i+0xf8>
 8012030:	4824      	ldr	r0, [pc, #144]	; (80120c4 <_printf_i+0x23c>)
 8012032:	e7e4      	b.n	8011ffe <_printf_i+0x176>
 8012034:	4615      	mov	r5, r2
 8012036:	e7bd      	b.n	8011fb4 <_printf_i+0x12c>
 8012038:	682b      	ldr	r3, [r5, #0]
 801203a:	6826      	ldr	r6, [r4, #0]
 801203c:	6961      	ldr	r1, [r4, #20]
 801203e:	1d18      	adds	r0, r3, #4
 8012040:	6028      	str	r0, [r5, #0]
 8012042:	0635      	lsls	r5, r6, #24
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	d501      	bpl.n	801204c <_printf_i+0x1c4>
 8012048:	6019      	str	r1, [r3, #0]
 801204a:	e002      	b.n	8012052 <_printf_i+0x1ca>
 801204c:	0670      	lsls	r0, r6, #25
 801204e:	d5fb      	bpl.n	8012048 <_printf_i+0x1c0>
 8012050:	8019      	strh	r1, [r3, #0]
 8012052:	2300      	movs	r3, #0
 8012054:	6123      	str	r3, [r4, #16]
 8012056:	4615      	mov	r5, r2
 8012058:	e7bc      	b.n	8011fd4 <_printf_i+0x14c>
 801205a:	682b      	ldr	r3, [r5, #0]
 801205c:	1d1a      	adds	r2, r3, #4
 801205e:	602a      	str	r2, [r5, #0]
 8012060:	681d      	ldr	r5, [r3, #0]
 8012062:	6862      	ldr	r2, [r4, #4]
 8012064:	2100      	movs	r1, #0
 8012066:	4628      	mov	r0, r5
 8012068:	f7ee f952 	bl	8000310 <memchr>
 801206c:	b108      	cbz	r0, 8012072 <_printf_i+0x1ea>
 801206e:	1b40      	subs	r0, r0, r5
 8012070:	6060      	str	r0, [r4, #4]
 8012072:	6863      	ldr	r3, [r4, #4]
 8012074:	6123      	str	r3, [r4, #16]
 8012076:	2300      	movs	r3, #0
 8012078:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801207c:	e7aa      	b.n	8011fd4 <_printf_i+0x14c>
 801207e:	6923      	ldr	r3, [r4, #16]
 8012080:	462a      	mov	r2, r5
 8012082:	4649      	mov	r1, r9
 8012084:	4640      	mov	r0, r8
 8012086:	47d0      	blx	sl
 8012088:	3001      	adds	r0, #1
 801208a:	d0ad      	beq.n	8011fe8 <_printf_i+0x160>
 801208c:	6823      	ldr	r3, [r4, #0]
 801208e:	079b      	lsls	r3, r3, #30
 8012090:	d413      	bmi.n	80120ba <_printf_i+0x232>
 8012092:	68e0      	ldr	r0, [r4, #12]
 8012094:	9b03      	ldr	r3, [sp, #12]
 8012096:	4298      	cmp	r0, r3
 8012098:	bfb8      	it	lt
 801209a:	4618      	movlt	r0, r3
 801209c:	e7a6      	b.n	8011fec <_printf_i+0x164>
 801209e:	2301      	movs	r3, #1
 80120a0:	4632      	mov	r2, r6
 80120a2:	4649      	mov	r1, r9
 80120a4:	4640      	mov	r0, r8
 80120a6:	47d0      	blx	sl
 80120a8:	3001      	adds	r0, #1
 80120aa:	d09d      	beq.n	8011fe8 <_printf_i+0x160>
 80120ac:	3501      	adds	r5, #1
 80120ae:	68e3      	ldr	r3, [r4, #12]
 80120b0:	9903      	ldr	r1, [sp, #12]
 80120b2:	1a5b      	subs	r3, r3, r1
 80120b4:	42ab      	cmp	r3, r5
 80120b6:	dcf2      	bgt.n	801209e <_printf_i+0x216>
 80120b8:	e7eb      	b.n	8012092 <_printf_i+0x20a>
 80120ba:	2500      	movs	r5, #0
 80120bc:	f104 0619 	add.w	r6, r4, #25
 80120c0:	e7f5      	b.n	80120ae <_printf_i+0x226>
 80120c2:	bf00      	nop
 80120c4:	08015360 	.word	0x08015360
 80120c8:	08015371 	.word	0x08015371

080120cc <__sflush_r>:
 80120cc:	898a      	ldrh	r2, [r1, #12]
 80120ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120d2:	4605      	mov	r5, r0
 80120d4:	0710      	lsls	r0, r2, #28
 80120d6:	460c      	mov	r4, r1
 80120d8:	d458      	bmi.n	801218c <__sflush_r+0xc0>
 80120da:	684b      	ldr	r3, [r1, #4]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	dc05      	bgt.n	80120ec <__sflush_r+0x20>
 80120e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	dc02      	bgt.n	80120ec <__sflush_r+0x20>
 80120e6:	2000      	movs	r0, #0
 80120e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80120ee:	2e00      	cmp	r6, #0
 80120f0:	d0f9      	beq.n	80120e6 <__sflush_r+0x1a>
 80120f2:	2300      	movs	r3, #0
 80120f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80120f8:	682f      	ldr	r7, [r5, #0]
 80120fa:	6a21      	ldr	r1, [r4, #32]
 80120fc:	602b      	str	r3, [r5, #0]
 80120fe:	d032      	beq.n	8012166 <__sflush_r+0x9a>
 8012100:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012102:	89a3      	ldrh	r3, [r4, #12]
 8012104:	075a      	lsls	r2, r3, #29
 8012106:	d505      	bpl.n	8012114 <__sflush_r+0x48>
 8012108:	6863      	ldr	r3, [r4, #4]
 801210a:	1ac0      	subs	r0, r0, r3
 801210c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801210e:	b10b      	cbz	r3, 8012114 <__sflush_r+0x48>
 8012110:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012112:	1ac0      	subs	r0, r0, r3
 8012114:	2300      	movs	r3, #0
 8012116:	4602      	mov	r2, r0
 8012118:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801211a:	6a21      	ldr	r1, [r4, #32]
 801211c:	4628      	mov	r0, r5
 801211e:	47b0      	blx	r6
 8012120:	1c43      	adds	r3, r0, #1
 8012122:	89a3      	ldrh	r3, [r4, #12]
 8012124:	d106      	bne.n	8012134 <__sflush_r+0x68>
 8012126:	6829      	ldr	r1, [r5, #0]
 8012128:	291d      	cmp	r1, #29
 801212a:	d82b      	bhi.n	8012184 <__sflush_r+0xb8>
 801212c:	4a29      	ldr	r2, [pc, #164]	; (80121d4 <__sflush_r+0x108>)
 801212e:	410a      	asrs	r2, r1
 8012130:	07d6      	lsls	r6, r2, #31
 8012132:	d427      	bmi.n	8012184 <__sflush_r+0xb8>
 8012134:	2200      	movs	r2, #0
 8012136:	6062      	str	r2, [r4, #4]
 8012138:	04d9      	lsls	r1, r3, #19
 801213a:	6922      	ldr	r2, [r4, #16]
 801213c:	6022      	str	r2, [r4, #0]
 801213e:	d504      	bpl.n	801214a <__sflush_r+0x7e>
 8012140:	1c42      	adds	r2, r0, #1
 8012142:	d101      	bne.n	8012148 <__sflush_r+0x7c>
 8012144:	682b      	ldr	r3, [r5, #0]
 8012146:	b903      	cbnz	r3, 801214a <__sflush_r+0x7e>
 8012148:	6560      	str	r0, [r4, #84]	; 0x54
 801214a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801214c:	602f      	str	r7, [r5, #0]
 801214e:	2900      	cmp	r1, #0
 8012150:	d0c9      	beq.n	80120e6 <__sflush_r+0x1a>
 8012152:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012156:	4299      	cmp	r1, r3
 8012158:	d002      	beq.n	8012160 <__sflush_r+0x94>
 801215a:	4628      	mov	r0, r5
 801215c:	f7ff fc96 	bl	8011a8c <_free_r>
 8012160:	2000      	movs	r0, #0
 8012162:	6360      	str	r0, [r4, #52]	; 0x34
 8012164:	e7c0      	b.n	80120e8 <__sflush_r+0x1c>
 8012166:	2301      	movs	r3, #1
 8012168:	4628      	mov	r0, r5
 801216a:	47b0      	blx	r6
 801216c:	1c41      	adds	r1, r0, #1
 801216e:	d1c8      	bne.n	8012102 <__sflush_r+0x36>
 8012170:	682b      	ldr	r3, [r5, #0]
 8012172:	2b00      	cmp	r3, #0
 8012174:	d0c5      	beq.n	8012102 <__sflush_r+0x36>
 8012176:	2b1d      	cmp	r3, #29
 8012178:	d001      	beq.n	801217e <__sflush_r+0xb2>
 801217a:	2b16      	cmp	r3, #22
 801217c:	d101      	bne.n	8012182 <__sflush_r+0xb6>
 801217e:	602f      	str	r7, [r5, #0]
 8012180:	e7b1      	b.n	80120e6 <__sflush_r+0x1a>
 8012182:	89a3      	ldrh	r3, [r4, #12]
 8012184:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012188:	81a3      	strh	r3, [r4, #12]
 801218a:	e7ad      	b.n	80120e8 <__sflush_r+0x1c>
 801218c:	690f      	ldr	r7, [r1, #16]
 801218e:	2f00      	cmp	r7, #0
 8012190:	d0a9      	beq.n	80120e6 <__sflush_r+0x1a>
 8012192:	0793      	lsls	r3, r2, #30
 8012194:	680e      	ldr	r6, [r1, #0]
 8012196:	bf08      	it	eq
 8012198:	694b      	ldreq	r3, [r1, #20]
 801219a:	600f      	str	r7, [r1, #0]
 801219c:	bf18      	it	ne
 801219e:	2300      	movne	r3, #0
 80121a0:	eba6 0807 	sub.w	r8, r6, r7
 80121a4:	608b      	str	r3, [r1, #8]
 80121a6:	f1b8 0f00 	cmp.w	r8, #0
 80121aa:	dd9c      	ble.n	80120e6 <__sflush_r+0x1a>
 80121ac:	6a21      	ldr	r1, [r4, #32]
 80121ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80121b0:	4643      	mov	r3, r8
 80121b2:	463a      	mov	r2, r7
 80121b4:	4628      	mov	r0, r5
 80121b6:	47b0      	blx	r6
 80121b8:	2800      	cmp	r0, #0
 80121ba:	dc06      	bgt.n	80121ca <__sflush_r+0xfe>
 80121bc:	89a3      	ldrh	r3, [r4, #12]
 80121be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80121c2:	81a3      	strh	r3, [r4, #12]
 80121c4:	f04f 30ff 	mov.w	r0, #4294967295
 80121c8:	e78e      	b.n	80120e8 <__sflush_r+0x1c>
 80121ca:	4407      	add	r7, r0
 80121cc:	eba8 0800 	sub.w	r8, r8, r0
 80121d0:	e7e9      	b.n	80121a6 <__sflush_r+0xda>
 80121d2:	bf00      	nop
 80121d4:	dfbffffe 	.word	0xdfbffffe

080121d8 <_fflush_r>:
 80121d8:	b538      	push	{r3, r4, r5, lr}
 80121da:	690b      	ldr	r3, [r1, #16]
 80121dc:	4605      	mov	r5, r0
 80121de:	460c      	mov	r4, r1
 80121e0:	b913      	cbnz	r3, 80121e8 <_fflush_r+0x10>
 80121e2:	2500      	movs	r5, #0
 80121e4:	4628      	mov	r0, r5
 80121e6:	bd38      	pop	{r3, r4, r5, pc}
 80121e8:	b118      	cbz	r0, 80121f2 <_fflush_r+0x1a>
 80121ea:	6a03      	ldr	r3, [r0, #32]
 80121ec:	b90b      	cbnz	r3, 80121f2 <_fflush_r+0x1a>
 80121ee:	f7ff f9bf 	bl	8011570 <__sinit>
 80121f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d0f3      	beq.n	80121e2 <_fflush_r+0xa>
 80121fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80121fc:	07d0      	lsls	r0, r2, #31
 80121fe:	d404      	bmi.n	801220a <_fflush_r+0x32>
 8012200:	0599      	lsls	r1, r3, #22
 8012202:	d402      	bmi.n	801220a <_fflush_r+0x32>
 8012204:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012206:	f7ff fc2a 	bl	8011a5e <__retarget_lock_acquire_recursive>
 801220a:	4628      	mov	r0, r5
 801220c:	4621      	mov	r1, r4
 801220e:	f7ff ff5d 	bl	80120cc <__sflush_r>
 8012212:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012214:	07da      	lsls	r2, r3, #31
 8012216:	4605      	mov	r5, r0
 8012218:	d4e4      	bmi.n	80121e4 <_fflush_r+0xc>
 801221a:	89a3      	ldrh	r3, [r4, #12]
 801221c:	059b      	lsls	r3, r3, #22
 801221e:	d4e1      	bmi.n	80121e4 <_fflush_r+0xc>
 8012220:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012222:	f7ff fc1d 	bl	8011a60 <__retarget_lock_release_recursive>
 8012226:	e7dd      	b.n	80121e4 <_fflush_r+0xc>

08012228 <__swhatbuf_r>:
 8012228:	b570      	push	{r4, r5, r6, lr}
 801222a:	460c      	mov	r4, r1
 801222c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012230:	2900      	cmp	r1, #0
 8012232:	b096      	sub	sp, #88	; 0x58
 8012234:	4615      	mov	r5, r2
 8012236:	461e      	mov	r6, r3
 8012238:	da0d      	bge.n	8012256 <__swhatbuf_r+0x2e>
 801223a:	89a3      	ldrh	r3, [r4, #12]
 801223c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8012240:	f04f 0100 	mov.w	r1, #0
 8012244:	bf0c      	ite	eq
 8012246:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801224a:	2340      	movne	r3, #64	; 0x40
 801224c:	2000      	movs	r0, #0
 801224e:	6031      	str	r1, [r6, #0]
 8012250:	602b      	str	r3, [r5, #0]
 8012252:	b016      	add	sp, #88	; 0x58
 8012254:	bd70      	pop	{r4, r5, r6, pc}
 8012256:	466a      	mov	r2, sp
 8012258:	f000 f878 	bl	801234c <_fstat_r>
 801225c:	2800      	cmp	r0, #0
 801225e:	dbec      	blt.n	801223a <__swhatbuf_r+0x12>
 8012260:	9901      	ldr	r1, [sp, #4]
 8012262:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8012266:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801226a:	4259      	negs	r1, r3
 801226c:	4159      	adcs	r1, r3
 801226e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012272:	e7eb      	b.n	801224c <__swhatbuf_r+0x24>

08012274 <__smakebuf_r>:
 8012274:	898b      	ldrh	r3, [r1, #12]
 8012276:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012278:	079d      	lsls	r5, r3, #30
 801227a:	4606      	mov	r6, r0
 801227c:	460c      	mov	r4, r1
 801227e:	d507      	bpl.n	8012290 <__smakebuf_r+0x1c>
 8012280:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012284:	6023      	str	r3, [r4, #0]
 8012286:	6123      	str	r3, [r4, #16]
 8012288:	2301      	movs	r3, #1
 801228a:	6163      	str	r3, [r4, #20]
 801228c:	b002      	add	sp, #8
 801228e:	bd70      	pop	{r4, r5, r6, pc}
 8012290:	ab01      	add	r3, sp, #4
 8012292:	466a      	mov	r2, sp
 8012294:	f7ff ffc8 	bl	8012228 <__swhatbuf_r>
 8012298:	9900      	ldr	r1, [sp, #0]
 801229a:	4605      	mov	r5, r0
 801229c:	4630      	mov	r0, r6
 801229e:	f7ff f811 	bl	80112c4 <_malloc_r>
 80122a2:	b948      	cbnz	r0, 80122b8 <__smakebuf_r+0x44>
 80122a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80122a8:	059a      	lsls	r2, r3, #22
 80122aa:	d4ef      	bmi.n	801228c <__smakebuf_r+0x18>
 80122ac:	f023 0303 	bic.w	r3, r3, #3
 80122b0:	f043 0302 	orr.w	r3, r3, #2
 80122b4:	81a3      	strh	r3, [r4, #12]
 80122b6:	e7e3      	b.n	8012280 <__smakebuf_r+0xc>
 80122b8:	89a3      	ldrh	r3, [r4, #12]
 80122ba:	6020      	str	r0, [r4, #0]
 80122bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80122c0:	81a3      	strh	r3, [r4, #12]
 80122c2:	9b00      	ldr	r3, [sp, #0]
 80122c4:	6163      	str	r3, [r4, #20]
 80122c6:	9b01      	ldr	r3, [sp, #4]
 80122c8:	6120      	str	r0, [r4, #16]
 80122ca:	b15b      	cbz	r3, 80122e4 <__smakebuf_r+0x70>
 80122cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80122d0:	4630      	mov	r0, r6
 80122d2:	f000 f84d 	bl	8012370 <_isatty_r>
 80122d6:	b128      	cbz	r0, 80122e4 <__smakebuf_r+0x70>
 80122d8:	89a3      	ldrh	r3, [r4, #12]
 80122da:	f023 0303 	bic.w	r3, r3, #3
 80122de:	f043 0301 	orr.w	r3, r3, #1
 80122e2:	81a3      	strh	r3, [r4, #12]
 80122e4:	89a3      	ldrh	r3, [r4, #12]
 80122e6:	431d      	orrs	r5, r3
 80122e8:	81a5      	strh	r5, [r4, #12]
 80122ea:	e7cf      	b.n	801228c <__smakebuf_r+0x18>

080122ec <_raise_r>:
 80122ec:	291f      	cmp	r1, #31
 80122ee:	b538      	push	{r3, r4, r5, lr}
 80122f0:	4604      	mov	r4, r0
 80122f2:	460d      	mov	r5, r1
 80122f4:	d904      	bls.n	8012300 <_raise_r+0x14>
 80122f6:	2316      	movs	r3, #22
 80122f8:	6003      	str	r3, [r0, #0]
 80122fa:	f04f 30ff 	mov.w	r0, #4294967295
 80122fe:	bd38      	pop	{r3, r4, r5, pc}
 8012300:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8012302:	b112      	cbz	r2, 801230a <_raise_r+0x1e>
 8012304:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012308:	b94b      	cbnz	r3, 801231e <_raise_r+0x32>
 801230a:	4620      	mov	r0, r4
 801230c:	f000 f852 	bl	80123b4 <_getpid_r>
 8012310:	462a      	mov	r2, r5
 8012312:	4601      	mov	r1, r0
 8012314:	4620      	mov	r0, r4
 8012316:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801231a:	f000 b839 	b.w	8012390 <_kill_r>
 801231e:	2b01      	cmp	r3, #1
 8012320:	d00a      	beq.n	8012338 <_raise_r+0x4c>
 8012322:	1c59      	adds	r1, r3, #1
 8012324:	d103      	bne.n	801232e <_raise_r+0x42>
 8012326:	2316      	movs	r3, #22
 8012328:	6003      	str	r3, [r0, #0]
 801232a:	2001      	movs	r0, #1
 801232c:	e7e7      	b.n	80122fe <_raise_r+0x12>
 801232e:	2400      	movs	r4, #0
 8012330:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012334:	4628      	mov	r0, r5
 8012336:	4798      	blx	r3
 8012338:	2000      	movs	r0, #0
 801233a:	e7e0      	b.n	80122fe <_raise_r+0x12>

0801233c <raise>:
 801233c:	4b02      	ldr	r3, [pc, #8]	; (8012348 <raise+0xc>)
 801233e:	4601      	mov	r1, r0
 8012340:	6818      	ldr	r0, [r3, #0]
 8012342:	f7ff bfd3 	b.w	80122ec <_raise_r>
 8012346:	bf00      	nop
 8012348:	24000088 	.word	0x24000088

0801234c <_fstat_r>:
 801234c:	b538      	push	{r3, r4, r5, lr}
 801234e:	4d07      	ldr	r5, [pc, #28]	; (801236c <_fstat_r+0x20>)
 8012350:	2300      	movs	r3, #0
 8012352:	4604      	mov	r4, r0
 8012354:	4608      	mov	r0, r1
 8012356:	4611      	mov	r1, r2
 8012358:	602b      	str	r3, [r5, #0]
 801235a:	f7ee fb43 	bl	80009e4 <_fstat>
 801235e:	1c43      	adds	r3, r0, #1
 8012360:	d102      	bne.n	8012368 <_fstat_r+0x1c>
 8012362:	682b      	ldr	r3, [r5, #0]
 8012364:	b103      	cbz	r3, 8012368 <_fstat_r+0x1c>
 8012366:	6023      	str	r3, [r4, #0]
 8012368:	bd38      	pop	{r3, r4, r5, pc}
 801236a:	bf00      	nop
 801236c:	2400e928 	.word	0x2400e928

08012370 <_isatty_r>:
 8012370:	b538      	push	{r3, r4, r5, lr}
 8012372:	4d06      	ldr	r5, [pc, #24]	; (801238c <_isatty_r+0x1c>)
 8012374:	2300      	movs	r3, #0
 8012376:	4604      	mov	r4, r0
 8012378:	4608      	mov	r0, r1
 801237a:	602b      	str	r3, [r5, #0]
 801237c:	f7ee fb38 	bl	80009f0 <_isatty>
 8012380:	1c43      	adds	r3, r0, #1
 8012382:	d102      	bne.n	801238a <_isatty_r+0x1a>
 8012384:	682b      	ldr	r3, [r5, #0]
 8012386:	b103      	cbz	r3, 801238a <_isatty_r+0x1a>
 8012388:	6023      	str	r3, [r4, #0]
 801238a:	bd38      	pop	{r3, r4, r5, pc}
 801238c:	2400e928 	.word	0x2400e928

08012390 <_kill_r>:
 8012390:	b538      	push	{r3, r4, r5, lr}
 8012392:	4d07      	ldr	r5, [pc, #28]	; (80123b0 <_kill_r+0x20>)
 8012394:	2300      	movs	r3, #0
 8012396:	4604      	mov	r4, r0
 8012398:	4608      	mov	r0, r1
 801239a:	4611      	mov	r1, r2
 801239c:	602b      	str	r3, [r5, #0]
 801239e:	f7ee faf3 	bl	8000988 <_kill>
 80123a2:	1c43      	adds	r3, r0, #1
 80123a4:	d102      	bne.n	80123ac <_kill_r+0x1c>
 80123a6:	682b      	ldr	r3, [r5, #0]
 80123a8:	b103      	cbz	r3, 80123ac <_kill_r+0x1c>
 80123aa:	6023      	str	r3, [r4, #0]
 80123ac:	bd38      	pop	{r3, r4, r5, pc}
 80123ae:	bf00      	nop
 80123b0:	2400e928 	.word	0x2400e928

080123b4 <_getpid_r>:
 80123b4:	f7ee bae6 	b.w	8000984 <_getpid>

080123b8 <_init>:
 80123b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123ba:	bf00      	nop
 80123bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80123be:	bc08      	pop	{r3}
 80123c0:	469e      	mov	lr, r3
 80123c2:	4770      	bx	lr

080123c4 <_fini>:
 80123c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123c6:	bf00      	nop
 80123c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80123ca:	bc08      	pop	{r3}
 80123cc:	469e      	mov	lr, r3
 80123ce:	4770      	bx	lr
