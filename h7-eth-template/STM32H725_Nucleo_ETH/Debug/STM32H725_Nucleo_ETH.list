
STM32H725_Nucleo_ETH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000141d8  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d9c  080144a8  080144a8  000154a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017244  08017244  00018244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801724c  0801724c  0001824c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08017250  08017250  00018250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000090  24000000  08017254  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000150f4  24000090  080172e4  00019090  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24015184  080172e4  00019184  2**0
                  ALLOC
  9 .lwip_sec     00000160  30000000  30000000  0001a000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00019090  2**0
                  CONTENTS, READONLY
 11 .debug_info   00031e24  00000000  00000000  000190be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00007526  00000000  00000000  0004aee2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002370  00000000  00000000  00052408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001bdd  00000000  00000000  00054778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000427a8  00000000  00000000  00056355  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00036f9e  00000000  00000000  00098afd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0016ae13  00000000  00000000  000cfa9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0023a8ae  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00009ac8  00000000  00000000  0023a8f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000007f  00000000  00000000  002443bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000090 	.word	0x24000090
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08014490 	.word	0x08014490

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000094 	.word	0x24000094
 800030c:	08014490 	.word	0x08014490

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
 80003b8:	6039      	str	r1, [r7, #0]
   /* ETH_CODE: add breakpoint when stack oveflow is detected by FreeRTOS.
	* Useful for debugging issues.
	*/
   __BKPT(0);
 80003ba:	be00      	bkpt	0x0000
}
 80003bc:	bf00      	nop
 80003be:	370c      	adds	r7, #12
 80003c0:	46bd      	mov	sp, r7
 80003c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c6:	4770      	bx	lr

080003c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b084      	sub	sp, #16
 80003cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80003ce:	f000 f987 	bl	80006e0 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003d2:	4b3b      	ldr	r3, [pc, #236]	@ (80004c0 <main+0xf8>)
 80003d4:	695b      	ldr	r3, [r3, #20]
 80003d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d11b      	bne.n	8000416 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80003de:	f3bf 8f4f 	dsb	sy
}
 80003e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003e4:	f3bf 8f6f 	isb	sy
}
 80003e8:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80003ea:	4b35      	ldr	r3, [pc, #212]	@ (80004c0 <main+0xf8>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80003f2:	f3bf 8f4f 	dsb	sy
}
 80003f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003f8:	f3bf 8f6f 	isb	sy
}
 80003fc:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80003fe:	4b30      	ldr	r3, [pc, #192]	@ (80004c0 <main+0xf8>)
 8000400:	695b      	ldr	r3, [r3, #20]
 8000402:	4a2f      	ldr	r2, [pc, #188]	@ (80004c0 <main+0xf8>)
 8000404:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000408:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800040a:	f3bf 8f4f 	dsb	sy
}
 800040e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000410:	f3bf 8f6f 	isb	sy
}
 8000414:	e000      	b.n	8000418 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000416:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000418:	4b29      	ldr	r3, [pc, #164]	@ (80004c0 <main+0xf8>)
 800041a:	695b      	ldr	r3, [r3, #20]
 800041c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000420:	2b00      	cmp	r3, #0
 8000422:	d138      	bne.n	8000496 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000424:	4b26      	ldr	r3, [pc, #152]	@ (80004c0 <main+0xf8>)
 8000426:	2200      	movs	r2, #0
 8000428:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800042c:	f3bf 8f4f 	dsb	sy
}
 8000430:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000432:	4b23      	ldr	r3, [pc, #140]	@ (80004c0 <main+0xf8>)
 8000434:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000438:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	0b5b      	lsrs	r3, r3, #13
 800043e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000442:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	08db      	lsrs	r3, r3, #3
 8000448:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800044c:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800044e:	68bb      	ldr	r3, [r7, #8]
 8000450:	015a      	lsls	r2, r3, #5
 8000452:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000456:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000458:	687a      	ldr	r2, [r7, #4]
 800045a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800045c:	4918      	ldr	r1, [pc, #96]	@ (80004c0 <main+0xf8>)
 800045e:	4313      	orrs	r3, r2
 8000460:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	1e5a      	subs	r2, r3, #1
 8000468:	607a      	str	r2, [r7, #4]
 800046a:	2b00      	cmp	r3, #0
 800046c:	d1ef      	bne.n	800044e <main+0x86>
    } while(sets-- != 0U);
 800046e:	68bb      	ldr	r3, [r7, #8]
 8000470:	1e5a      	subs	r2, r3, #1
 8000472:	60ba      	str	r2, [r7, #8]
 8000474:	2b00      	cmp	r3, #0
 8000476:	d1e5      	bne.n	8000444 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000478:	f3bf 8f4f 	dsb	sy
}
 800047c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800047e:	4b10      	ldr	r3, [pc, #64]	@ (80004c0 <main+0xf8>)
 8000480:	695b      	ldr	r3, [r3, #20]
 8000482:	4a0f      	ldr	r2, [pc, #60]	@ (80004c0 <main+0xf8>)
 8000484:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000488:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800048a:	f3bf 8f4f 	dsb	sy
}
 800048e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000490:	f3bf 8f6f 	isb	sy
}
 8000494:	e000      	b.n	8000498 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000496:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000498:	f000 fcb8 	bl	8000e0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800049c:	f000 f818 	bl	80004d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004a0:	f000 f884 	bl	80005ac <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004a4:	f004 ffb4 	bl	8005410 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004a8:	4a06      	ldr	r2, [pc, #24]	@ (80004c4 <main+0xfc>)
 80004aa:	2100      	movs	r1, #0
 80004ac:	4806      	ldr	r0, [pc, #24]	@ (80004c8 <main+0x100>)
 80004ae:	f005 f80e 	bl	80054ce <osThreadNew>
 80004b2:	4603      	mov	r3, r0
 80004b4:	4a05      	ldr	r2, [pc, #20]	@ (80004cc <main+0x104>)
 80004b6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80004b8:	f004 ffce 	bl	8005458 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004bc:	bf00      	nop
 80004be:	e7fd      	b.n	80004bc <main+0xf4>
 80004c0:	e000ed00 	.word	0xe000ed00
 80004c4:	08017004 	.word	0x08017004
 80004c8:	08000671 	.word	0x08000671
 80004cc:	240000ac 	.word	0x240000ac

080004d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b09c      	sub	sp, #112	@ 0x70
 80004d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004da:	224c      	movs	r2, #76	@ 0x4c
 80004dc:	2100      	movs	r1, #0
 80004de:	4618      	mov	r0, r3
 80004e0:	f013 f8db 	bl	801369a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e4:	1d3b      	adds	r3, r7, #4
 80004e6:	2220      	movs	r2, #32
 80004e8:	2100      	movs	r1, #0
 80004ea:	4618      	mov	r0, r3
 80004ec:	f013 f8d5 	bl	801369a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80004f0:	2002      	movs	r0, #2
 80004f2:	f002 fd97 	bl	8003024 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80004f6:	2300      	movs	r3, #0
 80004f8:	603b      	str	r3, [r7, #0]
 80004fa:	4b2b      	ldr	r3, [pc, #172]	@ (80005a8 <SystemClock_Config+0xd8>)
 80004fc:	699b      	ldr	r3, [r3, #24]
 80004fe:	4a2a      	ldr	r2, [pc, #168]	@ (80005a8 <SystemClock_Config+0xd8>)
 8000500:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000504:	6193      	str	r3, [r2, #24]
 8000506:	4b28      	ldr	r3, [pc, #160]	@ (80005a8 <SystemClock_Config+0xd8>)
 8000508:	699b      	ldr	r3, [r3, #24]
 800050a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800050e:	603b      	str	r3, [r7, #0]
 8000510:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000512:	bf00      	nop
 8000514:	4b24      	ldr	r3, [pc, #144]	@ (80005a8 <SystemClock_Config+0xd8>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800051c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000520:	d1f8      	bne.n	8000514 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000522:	2302      	movs	r3, #2
 8000524:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000526:	2301      	movs	r3, #1
 8000528:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800052a:	2340      	movs	r3, #64	@ 0x40
 800052c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800052e:	2302      	movs	r3, #2
 8000530:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000532:	2300      	movs	r3, #0
 8000534:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000536:	2310      	movs	r3, #16
 8000538:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 125;
 800053a:	237d      	movs	r3, #125	@ 0x7d
 800053c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800053e:	2301      	movs	r3, #1
 8000540:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000542:	2304      	movs	r3, #4
 8000544:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000546:	2302      	movs	r3, #2
 8000548:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800054a:	2308      	movs	r3, #8
 800054c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800054e:	2300      	movs	r3, #0
 8000550:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000552:	2300      	movs	r3, #0
 8000554:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000556:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800055a:	4618      	mov	r0, r3
 800055c:	f002 fdbc 	bl	80030d8 <HAL_RCC_OscConfig>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000566:	f000 f91b 	bl	80007a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800056a:	233f      	movs	r3, #63	@ 0x3f
 800056c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800056e:	2303      	movs	r3, #3
 8000570:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000572:	2300      	movs	r3, #0
 8000574:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000576:	2308      	movs	r3, #8
 8000578:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800057a:	2340      	movs	r3, #64	@ 0x40
 800057c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800057e:	2340      	movs	r3, #64	@ 0x40
 8000580:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000582:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000586:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000588:	2340      	movs	r3, #64	@ 0x40
 800058a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800058c:	1d3b      	adds	r3, r7, #4
 800058e:	2103      	movs	r1, #3
 8000590:	4618      	mov	r0, r3
 8000592:	f003 f97b 	bl	800388c <HAL_RCC_ClockConfig>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800059c:	f000 f900 	bl	80007a0 <Error_Handler>
  }
}
 80005a0:	bf00      	nop
 80005a2:	3770      	adds	r7, #112	@ 0x70
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	58024800 	.word	0x58024800

080005ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08a      	sub	sp, #40	@ 0x28
 80005b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b2:	f107 0314 	add.w	r3, r7, #20
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	60da      	str	r2, [r3, #12]
 80005c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c2:	4b29      	ldr	r3, [pc, #164]	@ (8000668 <MX_GPIO_Init+0xbc>)
 80005c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005c8:	4a27      	ldr	r2, [pc, #156]	@ (8000668 <MX_GPIO_Init+0xbc>)
 80005ca:	f043 0304 	orr.w	r3, r3, #4
 80005ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80005d2:	4b25      	ldr	r3, [pc, #148]	@ (8000668 <MX_GPIO_Init+0xbc>)
 80005d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005d8:	f003 0304 	and.w	r3, r3, #4
 80005dc:	613b      	str	r3, [r7, #16]
 80005de:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e0:	4b21      	ldr	r3, [pc, #132]	@ (8000668 <MX_GPIO_Init+0xbc>)
 80005e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005e6:	4a20      	ldr	r2, [pc, #128]	@ (8000668 <MX_GPIO_Init+0xbc>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80005f0:	4b1d      	ldr	r3, [pc, #116]	@ (8000668 <MX_GPIO_Init+0xbc>)
 80005f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005f6:	f003 0301 	and.w	r3, r3, #1
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000668 <MX_GPIO_Init+0xbc>)
 8000600:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000604:	4a18      	ldr	r2, [pc, #96]	@ (8000668 <MX_GPIO_Init+0xbc>)
 8000606:	f043 0302 	orr.w	r3, r3, #2
 800060a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800060e:	4b16      	ldr	r3, [pc, #88]	@ (8000668 <MX_GPIO_Init+0xbc>)
 8000610:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000614:	f003 0302 	and.w	r3, r3, #2
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800061c:	4b12      	ldr	r3, [pc, #72]	@ (8000668 <MX_GPIO_Init+0xbc>)
 800061e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000622:	4a11      	ldr	r2, [pc, #68]	@ (8000668 <MX_GPIO_Init+0xbc>)
 8000624:	f043 0310 	orr.w	r3, r3, #16
 8000628:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800062c:	4b0e      	ldr	r3, [pc, #56]	@ (8000668 <MX_GPIO_Init+0xbc>)
 800062e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000632:	f003 0310 	and.w	r3, r3, #16
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 800063a:	2200      	movs	r2, #0
 800063c:	2102      	movs	r1, #2
 800063e:	480b      	ldr	r0, [pc, #44]	@ (800066c <MX_GPIO_Init+0xc0>)
 8000640:	f002 fcbc 	bl	8002fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8000644:	2302      	movs	r3, #2
 8000646:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000648:	2301      	movs	r3, #1
 800064a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064c:	2300      	movs	r3, #0
 800064e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000650:	2300      	movs	r3, #0
 8000652:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8000654:	f107 0314 	add.w	r3, r7, #20
 8000658:	4619      	mov	r1, r3
 800065a:	4804      	ldr	r0, [pc, #16]	@ (800066c <MX_GPIO_Init+0xc0>)
 800065c:	f002 fb06 	bl	8002c6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000660:	bf00      	nop
 8000662:	3728      	adds	r7, #40	@ 0x28
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	58024400 	.word	0x58024400
 800066c:	58021000 	.word	0x58021000

08000670 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b086      	sub	sp, #24
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000678:	f003 ffb8 	bl	80045ec <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  uint32_t value = 0;
 800067c:	2300      	movs	r3, #0
 800067e:	60bb      	str	r3, [r7, #8]
  //uint32_t phyaddr = 0x1F;
  //uint32_t phyreg = 0x01;
  HAL_StatusTypeDef status;
  for (uint32_t phyaddr = 0x00; phyaddr <= 0xFF; phyaddr++) {
 8000680:	2300      	movs	r3, #0
 8000682:	617b      	str	r3, [r7, #20]
 8000684:	e01b      	b.n	80006be <StartDefaultTask+0x4e>
	  for (uint32_t phyreg = 0x00; phyreg <= 0xFF; phyreg++) {
 8000686:	2300      	movs	r3, #0
 8000688:	613b      	str	r3, [r7, #16]
 800068a:	e010      	b.n	80006ae <StartDefaultTask+0x3e>
			status = HAL_ETH_ReadPHYRegister(&heth, phyaddr, phyreg, &value);
 800068c:	f107 0308 	add.w	r3, r7, #8
 8000690:	693a      	ldr	r2, [r7, #16]
 8000692:	6979      	ldr	r1, [r7, #20]
 8000694:	4810      	ldr	r0, [pc, #64]	@ (80006d8 <StartDefaultTask+0x68>)
 8000696:	f001 fa67 	bl	8001b68 <HAL_ETH_ReadPHYRegister>
 800069a:	4603      	mov	r3, r0
 800069c:	73fb      	strb	r3, [r7, #15]
			if (value != 0xFFFF) {
 800069e:	68bb      	ldr	r3, [r7, #8]
 80006a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80006a4:	4293      	cmp	r3, r2
 80006a6:	d106      	bne.n	80006b6 <StartDefaultTask+0x46>
	  for (uint32_t phyreg = 0x00; phyreg <= 0xFF; phyreg++) {
 80006a8:	693b      	ldr	r3, [r7, #16]
 80006aa:	3301      	adds	r3, #1
 80006ac:	613b      	str	r3, [r7, #16]
 80006ae:	693b      	ldr	r3, [r7, #16]
 80006b0:	2bff      	cmp	r3, #255	@ 0xff
 80006b2:	d9eb      	bls.n	800068c <StartDefaultTask+0x1c>
 80006b4:	e000      	b.n	80006b8 <StartDefaultTask+0x48>
				break;
 80006b6:	bf00      	nop
  for (uint32_t phyaddr = 0x00; phyaddr <= 0xFF; phyaddr++) {
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	3301      	adds	r3, #1
 80006bc:	617b      	str	r3, [r7, #20]
 80006be:	697b      	ldr	r3, [r7, #20]
 80006c0:	2bff      	cmp	r3, #255	@ 0xff
 80006c2:	d9e0      	bls.n	8000686 <StartDefaultTask+0x16>
//    lwiperf_start_tcp_client_default(&remote_addr, NULL, NULL);
//    UNLOCK_TCPIP_CORE();
    /* Infinite loop */
    for(;;)
    {
      osDelay(1000);
 80006c4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006c8:	f004 ff9f 	bl	800560a <osDelay>
      HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 80006cc:	2102      	movs	r1, #2
 80006ce:	4803      	ldr	r0, [pc, #12]	@ (80006dc <StartDefaultTask+0x6c>)
 80006d0:	f002 fc8d 	bl	8002fee <HAL_GPIO_TogglePin>
      osDelay(1000);
 80006d4:	bf00      	nop
 80006d6:	e7f5      	b.n	80006c4 <StartDefaultTask+0x54>
 80006d8:	24000184 	.word	0x24000184
 80006dc:	58021000 	.word	0x58021000

080006e0 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80006e6:	463b      	mov	r3, r7
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80006f2:	f000 fcdb 	bl	80010ac <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80006f6:	2301      	movs	r3, #1
 80006f8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80006fe:	2300      	movs	r3, #0
 8000700:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000702:	231f      	movs	r3, #31
 8000704:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000706:	2387      	movs	r3, #135	@ 0x87
 8000708:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800070a:	2300      	movs	r3, #0
 800070c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800070e:	2300      	movs	r3, #0
 8000710:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000712:	2301      	movs	r3, #1
 8000714:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000716:	2301      	movs	r3, #1
 8000718:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800071a:	2300      	movs	r3, #0
 800071c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800071e:	2300      	movs	r3, #0
 8000720:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000722:	463b      	mov	r3, r7
 8000724:	4618      	mov	r0, r3
 8000726:	f000 fcf9 	bl	800111c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800072a:	2301      	movs	r3, #1
 800072c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 800072e:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8000732:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000734:	230e      	movs	r3, #14
 8000736:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000738:	2300      	movs	r3, #0
 800073a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800073c:	2301      	movs	r3, #1
 800073e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000740:	2303      	movs	r3, #3
 8000742:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000744:	2300      	movs	r3, #0
 8000746:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000748:	463b      	mov	r3, r7
 800074a:	4618      	mov	r0, r3
 800074c:	f000 fce6 	bl	800111c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000750:	2302      	movs	r3, #2
 8000752:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 8000754:	2308      	movs	r3, #8
 8000756:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000758:	2300      	movs	r3, #0
 800075a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800075c:	2301      	movs	r3, #1
 800075e:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000760:	2301      	movs	r3, #1
 8000762:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000764:	463b      	mov	r3, r7
 8000766:	4618      	mov	r0, r3
 8000768:	f000 fcd8 	bl	800111c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800076c:	2004      	movs	r0, #4
 800076e:	f000 fcb5 	bl	80010dc <HAL_MPU_Enable>

}
 8000772:	bf00      	nop
 8000774:	3710      	adds	r7, #16
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
	...

0800077c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a04      	ldr	r2, [pc, #16]	@ (800079c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d101      	bne.n	8000792 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800078e:	f000 fb79 	bl	8000e84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40001000 	.word	0x40001000

080007a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80007a4:	b672      	cpsid	i
}
 80007a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a8:	bf00      	nop
 80007aa:	e7fd      	b.n	80007a8 <Error_Handler+0x8>

080007ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b2:	4b0c      	ldr	r3, [pc, #48]	@ (80007e4 <HAL_MspInit+0x38>)
 80007b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80007b8:	4a0a      	ldr	r2, [pc, #40]	@ (80007e4 <HAL_MspInit+0x38>)
 80007ba:	f043 0302 	orr.w	r3, r3, #2
 80007be:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80007c2:	4b08      	ldr	r3, [pc, #32]	@ (80007e4 <HAL_MspInit+0x38>)
 80007c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80007c8:	f003 0302 	and.w	r3, r3, #2
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007d0:	2200      	movs	r2, #0
 80007d2:	210f      	movs	r1, #15
 80007d4:	f06f 0001 	mvn.w	r0, #1
 80007d8:	f000 fc40 	bl	800105c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007dc:	bf00      	nop
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	58024400 	.word	0x58024400

080007e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b090      	sub	sp, #64	@ 0x40
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2b0f      	cmp	r3, #15
 80007f4:	d827      	bhi.n	8000846 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80007f6:	2200      	movs	r2, #0
 80007f8:	6879      	ldr	r1, [r7, #4]
 80007fa:	2036      	movs	r0, #54	@ 0x36
 80007fc:	f000 fc2e 	bl	800105c <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000800:	2036      	movs	r0, #54	@ 0x36
 8000802:	f000 fc45 	bl	8001090 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8000806:	4a29      	ldr	r2, [pc, #164]	@ (80008ac <HAL_InitTick+0xc4>)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800080c:	4b28      	ldr	r3, [pc, #160]	@ (80008b0 <HAL_InitTick+0xc8>)
 800080e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000812:	4a27      	ldr	r2, [pc, #156]	@ (80008b0 <HAL_InitTick+0xc8>)
 8000814:	f043 0310 	orr.w	r3, r3, #16
 8000818:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800081c:	4b24      	ldr	r3, [pc, #144]	@ (80008b0 <HAL_InitTick+0xc8>)
 800081e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000822:	f003 0310 	and.w	r3, r3, #16
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800082a:	f107 0210 	add.w	r2, r7, #16
 800082e:	f107 0314 	add.w	r3, r7, #20
 8000832:	4611      	mov	r1, r2
 8000834:	4618      	mov	r0, r3
 8000836:	f003 fb9f 	bl	8003f78 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800083a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800083c:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800083e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000840:	2b00      	cmp	r3, #0
 8000842:	d106      	bne.n	8000852 <HAL_InitTick+0x6a>
 8000844:	e001      	b.n	800084a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000846:	2301      	movs	r3, #1
 8000848:	e02b      	b.n	80008a2 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800084a:	f003 fb7f 	bl	8003f4c <HAL_RCC_GetPCLK1Freq>
 800084e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8000850:	e004      	b.n	800085c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000852:	f003 fb7b 	bl	8003f4c <HAL_RCC_GetPCLK1Freq>
 8000856:	4603      	mov	r3, r0
 8000858:	005b      	lsls	r3, r3, #1
 800085a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800085c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800085e:	4a15      	ldr	r2, [pc, #84]	@ (80008b4 <HAL_InitTick+0xcc>)
 8000860:	fba2 2303 	umull	r2, r3, r2, r3
 8000864:	0c9b      	lsrs	r3, r3, #18
 8000866:	3b01      	subs	r3, #1
 8000868:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800086a:	4b13      	ldr	r3, [pc, #76]	@ (80008b8 <HAL_InitTick+0xd0>)
 800086c:	4a13      	ldr	r2, [pc, #76]	@ (80008bc <HAL_InitTick+0xd4>)
 800086e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000870:	4b11      	ldr	r3, [pc, #68]	@ (80008b8 <HAL_InitTick+0xd0>)
 8000872:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000876:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000878:	4a0f      	ldr	r2, [pc, #60]	@ (80008b8 <HAL_InitTick+0xd0>)
 800087a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800087c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800087e:	4b0e      	ldr	r3, [pc, #56]	@ (80008b8 <HAL_InitTick+0xd0>)
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000884:	4b0c      	ldr	r3, [pc, #48]	@ (80008b8 <HAL_InitTick+0xd0>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800088a:	480b      	ldr	r0, [pc, #44]	@ (80008b8 <HAL_InitTick+0xd0>)
 800088c:	f003 fbb6 	bl	8003ffc <HAL_TIM_Base_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d104      	bne.n	80008a0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000896:	4808      	ldr	r0, [pc, #32]	@ (80008b8 <HAL_InitTick+0xd0>)
 8000898:	f003 fc12 	bl	80040c0 <HAL_TIM_Base_Start_IT>
 800089c:	4603      	mov	r3, r0
 800089e:	e000      	b.n	80008a2 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80008a0:	2301      	movs	r3, #1
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3740      	adds	r7, #64	@ 0x40
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	24000008 	.word	0x24000008
 80008b0:	58024400 	.word	0x58024400
 80008b4:	431bde83 	.word	0x431bde83
 80008b8:	240000b0 	.word	0x240000b0
 80008bc:	40001000 	.word	0x40001000

080008c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008c4:	bf00      	nop
 80008c6:	e7fd      	b.n	80008c4 <NMI_Handler+0x4>

080008c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008cc:	bf00      	nop
 80008ce:	e7fd      	b.n	80008cc <HardFault_Handler+0x4>

080008d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d4:	bf00      	nop
 80008d6:	e7fd      	b.n	80008d4 <MemManage_Handler+0x4>

080008d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008dc:	bf00      	nop
 80008de:	e7fd      	b.n	80008dc <BusFault_Handler+0x4>

080008e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e4:	bf00      	nop
 80008e6:	e7fd      	b.n	80008e4 <UsageFault_Handler+0x4>

080008e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
	...

080008f8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80008fc:	4802      	ldr	r0, [pc, #8]	@ (8000908 <TIM6_DAC_IRQHandler+0x10>)
 80008fe:	f003 fc65 	bl	80041cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	240000b0 	.word	0x240000b0

0800090c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000910:	4802      	ldr	r0, [pc, #8]	@ (800091c <ETH_IRQHandler+0x10>)
 8000912:	f001 f817 	bl	8001944 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	24000184 	.word	0x24000184

08000920 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  return 1;
 8000924:	2301      	movs	r3, #1
}
 8000926:	4618      	mov	r0, r3
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <_kill>:

int _kill(int pid, int sig)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800093a:	4b05      	ldr	r3, [pc, #20]	@ (8000950 <_kill+0x20>)
 800093c:	2216      	movs	r2, #22
 800093e:	601a      	str	r2, [r3, #0]
  return -1;
 8000940:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000944:	4618      	mov	r0, r3
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr
 8000950:	240107e8 	.word	0x240107e8

08000954 <_exit>:

void _exit (int status)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800095c:	f04f 31ff 	mov.w	r1, #4294967295
 8000960:	6878      	ldr	r0, [r7, #4]
 8000962:	f7ff ffe5 	bl	8000930 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000966:	bf00      	nop
 8000968:	e7fd      	b.n	8000966 <_exit+0x12>

0800096a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800096a:	b580      	push	{r7, lr}
 800096c:	b086      	sub	sp, #24
 800096e:	af00      	add	r7, sp, #0
 8000970:	60f8      	str	r0, [r7, #12]
 8000972:	60b9      	str	r1, [r7, #8]
 8000974:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000976:	2300      	movs	r3, #0
 8000978:	617b      	str	r3, [r7, #20]
 800097a:	e00a      	b.n	8000992 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800097c:	f3af 8000 	nop.w
 8000980:	4601      	mov	r1, r0
 8000982:	68bb      	ldr	r3, [r7, #8]
 8000984:	1c5a      	adds	r2, r3, #1
 8000986:	60ba      	str	r2, [r7, #8]
 8000988:	b2ca      	uxtb	r2, r1
 800098a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	3301      	adds	r3, #1
 8000990:	617b      	str	r3, [r7, #20]
 8000992:	697a      	ldr	r2, [r7, #20]
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	429a      	cmp	r2, r3
 8000998:	dbf0      	blt.n	800097c <_read+0x12>
  }

  return len;
 800099a:	687b      	ldr	r3, [r7, #4]
}
 800099c:	4618      	mov	r0, r3
 800099e:	3718      	adds	r7, #24
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	60f8      	str	r0, [r7, #12]
 80009ac:	60b9      	str	r1, [r7, #8]
 80009ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]
 80009b4:	e009      	b.n	80009ca <_write+0x26>
  {
    __io_putchar(*ptr++);
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	1c5a      	adds	r2, r3, #1
 80009ba:	60ba      	str	r2, [r7, #8]
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	4618      	mov	r0, r3
 80009c0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	3301      	adds	r3, #1
 80009c8:	617b      	str	r3, [r7, #20]
 80009ca:	697a      	ldr	r2, [r7, #20]
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	429a      	cmp	r2, r3
 80009d0:	dbf1      	blt.n	80009b6 <_write+0x12>
  }
  return len;
 80009d2:	687b      	ldr	r3, [r7, #4]
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3718      	adds	r7, #24
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}

080009dc <_close>:

int _close(int file)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a04:	605a      	str	r2, [r3, #4]
  return 0;
 8000a06:	2300      	movs	r3, #0
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <_isatty>:

int _isatty(int file)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a1c:	2301      	movs	r3, #1
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr

08000a2a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	b085      	sub	sp, #20
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	60f8      	str	r0, [r7, #12]
 8000a32:	60b9      	str	r1, [r7, #8]
 8000a34:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a36:	2300      	movs	r3, #0
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3714      	adds	r7, #20
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b087      	sub	sp, #28
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a4c:	4a14      	ldr	r2, [pc, #80]	@ (8000aa0 <_sbrk+0x5c>)
 8000a4e:	4b15      	ldr	r3, [pc, #84]	@ (8000aa4 <_sbrk+0x60>)
 8000a50:	1ad3      	subs	r3, r2, r3
 8000a52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a58:	4b13      	ldr	r3, [pc, #76]	@ (8000aa8 <_sbrk+0x64>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d102      	bne.n	8000a66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a60:	4b11      	ldr	r3, [pc, #68]	@ (8000aa8 <_sbrk+0x64>)
 8000a62:	4a12      	ldr	r2, [pc, #72]	@ (8000aac <_sbrk+0x68>)
 8000a64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a66:	4b10      	ldr	r3, [pc, #64]	@ (8000aa8 <_sbrk+0x64>)
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d205      	bcs.n	8000a80 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000a74:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab0 <_sbrk+0x6c>)
 8000a76:	220c      	movs	r2, #12
 8000a78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a7e:	e009      	b.n	8000a94 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a80:	4b09      	ldr	r3, [pc, #36]	@ (8000aa8 <_sbrk+0x64>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a86:	4b08      	ldr	r3, [pc, #32]	@ (8000aa8 <_sbrk+0x64>)
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	4a06      	ldr	r2, [pc, #24]	@ (8000aa8 <_sbrk+0x64>)
 8000a90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a92:	68fb      	ldr	r3, [r7, #12]
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	371c      	adds	r7, #28
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	24050000 	.word	0x24050000
 8000aa4:	00000400 	.word	0x00000400
 8000aa8:	240000fc 	.word	0x240000fc
 8000aac:	24015188 	.word	0x24015188
 8000ab0:	240107e8 	.word	0x240107e8

08000ab4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ab8:	4b34      	ldr	r3, [pc, #208]	@ (8000b8c <SystemInit+0xd8>)
 8000aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000abe:	4a33      	ldr	r2, [pc, #204]	@ (8000b8c <SystemInit+0xd8>)
 8000ac0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ac4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ac8:	4b31      	ldr	r3, [pc, #196]	@ (8000b90 <SystemInit+0xdc>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f003 030f 	and.w	r3, r3, #15
 8000ad0:	2b06      	cmp	r3, #6
 8000ad2:	d807      	bhi.n	8000ae4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ad4:	4b2e      	ldr	r3, [pc, #184]	@ (8000b90 <SystemInit+0xdc>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f023 030f 	bic.w	r3, r3, #15
 8000adc:	4a2c      	ldr	r2, [pc, #176]	@ (8000b90 <SystemInit+0xdc>)
 8000ade:	f043 0307 	orr.w	r3, r3, #7
 8000ae2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ae4:	4b2b      	ldr	r3, [pc, #172]	@ (8000b94 <SystemInit+0xe0>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a2a      	ldr	r2, [pc, #168]	@ (8000b94 <SystemInit+0xe0>)
 8000aea:	f043 0301 	orr.w	r3, r3, #1
 8000aee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000af0:	4b28      	ldr	r3, [pc, #160]	@ (8000b94 <SystemInit+0xe0>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000af6:	4b27      	ldr	r3, [pc, #156]	@ (8000b94 <SystemInit+0xe0>)
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	4926      	ldr	r1, [pc, #152]	@ (8000b94 <SystemInit+0xe0>)
 8000afc:	4b26      	ldr	r3, [pc, #152]	@ (8000b98 <SystemInit+0xe4>)
 8000afe:	4013      	ands	r3, r2
 8000b00:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b02:	4b23      	ldr	r3, [pc, #140]	@ (8000b90 <SystemInit+0xdc>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f003 0308 	and.w	r3, r3, #8
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d007      	beq.n	8000b1e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b0e:	4b20      	ldr	r3, [pc, #128]	@ (8000b90 <SystemInit+0xdc>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f023 030f 	bic.w	r3, r3, #15
 8000b16:	4a1e      	ldr	r2, [pc, #120]	@ (8000b90 <SystemInit+0xdc>)
 8000b18:	f043 0307 	orr.w	r3, r3, #7
 8000b1c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000b1e:	4b1d      	ldr	r3, [pc, #116]	@ (8000b94 <SystemInit+0xe0>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000b24:	4b1b      	ldr	r3, [pc, #108]	@ (8000b94 <SystemInit+0xe0>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000b2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000b94 <SystemInit+0xe0>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000b30:	4b18      	ldr	r3, [pc, #96]	@ (8000b94 <SystemInit+0xe0>)
 8000b32:	4a1a      	ldr	r2, [pc, #104]	@ (8000b9c <SystemInit+0xe8>)
 8000b34:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b36:	4b17      	ldr	r3, [pc, #92]	@ (8000b94 <SystemInit+0xe0>)
 8000b38:	4a19      	ldr	r2, [pc, #100]	@ (8000ba0 <SystemInit+0xec>)
 8000b3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b3c:	4b15      	ldr	r3, [pc, #84]	@ (8000b94 <SystemInit+0xe0>)
 8000b3e:	4a19      	ldr	r2, [pc, #100]	@ (8000ba4 <SystemInit+0xf0>)
 8000b40:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b42:	4b14      	ldr	r3, [pc, #80]	@ (8000b94 <SystemInit+0xe0>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b48:	4b12      	ldr	r3, [pc, #72]	@ (8000b94 <SystemInit+0xe0>)
 8000b4a:	4a16      	ldr	r2, [pc, #88]	@ (8000ba4 <SystemInit+0xf0>)
 8000b4c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b4e:	4b11      	ldr	r3, [pc, #68]	@ (8000b94 <SystemInit+0xe0>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b54:	4b0f      	ldr	r3, [pc, #60]	@ (8000b94 <SystemInit+0xe0>)
 8000b56:	4a13      	ldr	r2, [pc, #76]	@ (8000ba4 <SystemInit+0xf0>)
 8000b58:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b94 <SystemInit+0xe0>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b60:	4b0c      	ldr	r3, [pc, #48]	@ (8000b94 <SystemInit+0xe0>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a0b      	ldr	r2, [pc, #44]	@ (8000b94 <SystemInit+0xe0>)
 8000b66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b6a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b6c:	4b09      	ldr	r3, [pc, #36]	@ (8000b94 <SystemInit+0xe0>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b72:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba8 <SystemInit+0xf4>)
 8000b74:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000b78:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
 8000b7a:	4b04      	ldr	r3, [pc, #16]	@ (8000b8c <SystemInit+0xd8>)
 8000b7c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000b80:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	e000ed00 	.word	0xe000ed00
 8000b90:	52002000 	.word	0x52002000
 8000b94:	58024400 	.word	0x58024400
 8000b98:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b9c:	02020200 	.word	0x02020200
 8000ba0:	01ff0000 	.word	0x01ff0000
 8000ba4:	01010280 	.word	0x01010280
 8000ba8:	52004000 	.word	0x52004000

08000bac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000bac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000be4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bb0:	f7ff ff80 	bl	8000ab4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb4:	480c      	ldr	r0, [pc, #48]	@ (8000be8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bb6:	490d      	ldr	r1, [pc, #52]	@ (8000bec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bb8:	4a0d      	ldr	r2, [pc, #52]	@ (8000bf0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bbc:	e002      	b.n	8000bc4 <LoopCopyDataInit>

08000bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc2:	3304      	adds	r3, #4

08000bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc8:	d3f9      	bcc.n	8000bbe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bca:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bcc:	4c0a      	ldr	r4, [pc, #40]	@ (8000bf8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd0:	e001      	b.n	8000bd6 <LoopFillZerobss>

08000bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd4:	3204      	adds	r2, #4

08000bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd8:	d3fb      	bcc.n	8000bd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bda:	f012 fe03 	bl	80137e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bde:	f7ff fbf3 	bl	80003c8 <main>
  bx  lr
 8000be2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000be4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000be8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000bec:	24000090 	.word	0x24000090
  ldr r2, =_sidata
 8000bf0:	08017254 	.word	0x08017254
  ldr r2, =_sbss
 8000bf4:	24000090 	.word	0x24000090
  ldr r4, =_ebss
 8000bf8:	24015184 	.word	0x24015184

08000bfc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bfc:	e7fe      	b.n	8000bfc <ADC3_IRQHandler>

08000bfe <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	b083      	sub	sp, #12
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
 8000c06:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d00b      	beq.n	8000c26 <LAN8742_RegisterBusIO+0x28>
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	68db      	ldr	r3, [r3, #12]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d007      	beq.n	8000c26 <LAN8742_RegisterBusIO+0x28>
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	689b      	ldr	r3, [r3, #8]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d003      	beq.n	8000c26 <LAN8742_RegisterBusIO+0x28>
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	691b      	ldr	r3, [r3, #16]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d102      	bne.n	8000c2c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000c26:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2a:	e014      	b.n	8000c56 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	685a      	ldr	r2, [r3, #4]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	68da      	ldr	r2, [r3, #12]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	689a      	ldr	r2, [r3, #8]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	691a      	ldr	r2, [r3, #16]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8000c54:	2300      	movs	r3, #0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr

08000c62 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b086      	sub	sp, #24
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	2300      	movs	r3, #0
 8000c70:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000c72:	2300      	movs	r3, #0
 8000c74:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d139      	bne.n	8000cf2 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d002      	beq.n	8000c8c <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	689b      	ldr	r3, [r3, #8]
 8000c8a:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2220      	movs	r2, #32
 8000c90:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000c92:	2300      	movs	r3, #0
 8000c94:	617b      	str	r3, [r7, #20]
 8000c96:	e01c      	b.n	8000cd2 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	695b      	ldr	r3, [r3, #20]
 8000c9c:	f107 020c 	add.w	r2, r7, #12
 8000ca0:	2112      	movs	r1, #18
 8000ca2:	6978      	ldr	r0, [r7, #20]
 8000ca4:	4798      	blx	r3
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	da03      	bge.n	8000cb4 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8000cac:	f06f 0304 	mvn.w	r3, #4
 8000cb0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000cb2:	e00b      	b.n	8000ccc <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	f003 031f 	and.w	r3, r3, #31
 8000cba:	697a      	ldr	r2, [r7, #20]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d105      	bne.n	8000ccc <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	697a      	ldr	r2, [r7, #20]
 8000cc4:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	613b      	str	r3, [r7, #16]
         break;
 8000cca:	e005      	b.n	8000cd8 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	617b      	str	r3, [r7, #20]
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	2b1f      	cmp	r3, #31
 8000cd6:	d9df      	bls.n	8000c98 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2b1f      	cmp	r3, #31
 8000cde:	d902      	bls.n	8000ce6 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000ce0:	f06f 0302 	mvn.w	r3, #2
 8000ce4:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d102      	bne.n	8000cf2 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2201      	movs	r2, #1
 8000cf0:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8000cf2:	693b      	ldr	r3, [r7, #16]
 }
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3718      	adds	r7, #24
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	695b      	ldr	r3, [r3, #20]
 8000d0c:	687a      	ldr	r2, [r7, #4]
 8000d0e:	6810      	ldr	r0, [r2, #0]
 8000d10:	f107 020c 	add.w	r2, r7, #12
 8000d14:	2101      	movs	r1, #1
 8000d16:	4798      	blx	r3
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	da02      	bge.n	8000d24 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000d1e:	f06f 0304 	mvn.w	r3, #4
 8000d22:	e06e      	b.n	8000e02 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	695b      	ldr	r3, [r3, #20]
 8000d28:	687a      	ldr	r2, [r7, #4]
 8000d2a:	6810      	ldr	r0, [r2, #0]
 8000d2c:	f107 020c 	add.w	r2, r7, #12
 8000d30:	2101      	movs	r1, #1
 8000d32:	4798      	blx	r3
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	da02      	bge.n	8000d40 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000d3a:	f06f 0304 	mvn.w	r3, #4
 8000d3e:	e060      	b.n	8000e02 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	f003 0304 	and.w	r3, r3, #4
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d101      	bne.n	8000d4e <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e059      	b.n	8000e02 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	695b      	ldr	r3, [r3, #20]
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	6810      	ldr	r0, [r2, #0]
 8000d56:	f107 020c 	add.w	r2, r7, #12
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4798      	blx	r3
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	da02      	bge.n	8000d6a <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000d64:	f06f 0304 	mvn.w	r3, #4
 8000d68:	e04b      	b.n	8000e02 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d11b      	bne.n	8000dac <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d006      	beq.n	8000d8c <LAN8742_GetLinkState+0x90>
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	e03a      	b.n	8000e02 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000d96:	2303      	movs	r3, #3
 8000d98:	e033      	b.n	8000e02 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000da4:	2304      	movs	r3, #4
 8000da6:	e02c      	b.n	8000e02 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000da8:	2305      	movs	r3, #5
 8000daa:	e02a      	b.n	8000e02 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	695b      	ldr	r3, [r3, #20]
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	6810      	ldr	r0, [r2, #0]
 8000db4:	f107 020c 	add.w	r2, r7, #12
 8000db8:	211f      	movs	r1, #31
 8000dba:	4798      	blx	r3
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	da02      	bge.n	8000dc8 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000dc2:	f06f 0304 	mvn.w	r3, #4
 8000dc6:	e01c      	b.n	8000e02 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d101      	bne.n	8000dd6 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000dd2:	2306      	movs	r3, #6
 8000dd4:	e015      	b.n	8000e02 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	f003 031c 	and.w	r3, r3, #28
 8000ddc:	2b18      	cmp	r3, #24
 8000dde:	d101      	bne.n	8000de4 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000de0:	2302      	movs	r3, #2
 8000de2:	e00e      	b.n	8000e02 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	f003 031c 	and.w	r3, r3, #28
 8000dea:	2b08      	cmp	r3, #8
 8000dec:	d101      	bne.n	8000df2 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000dee:	2303      	movs	r3, #3
 8000df0:	e007      	b.n	8000e02 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	f003 031c 	and.w	r3, r3, #28
 8000df8:	2b14      	cmp	r3, #20
 8000dfa:	d101      	bne.n	8000e00 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000dfc:	2304      	movs	r3, #4
 8000dfe:	e000      	b.n	8000e02 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000e00:	2305      	movs	r3, #5
    }
  }
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
	...

08000e0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e12:	2003      	movs	r0, #3
 8000e14:	f000 f917 	bl	8001046 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000e18:	f002 feee 	bl	8003bf8 <HAL_RCC_GetSysClockFreq>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	4b15      	ldr	r3, [pc, #84]	@ (8000e74 <HAL_Init+0x68>)
 8000e20:	699b      	ldr	r3, [r3, #24]
 8000e22:	0a1b      	lsrs	r3, r3, #8
 8000e24:	f003 030f 	and.w	r3, r3, #15
 8000e28:	4913      	ldr	r1, [pc, #76]	@ (8000e78 <HAL_Init+0x6c>)
 8000e2a:	5ccb      	ldrb	r3, [r1, r3]
 8000e2c:	f003 031f 	and.w	r3, r3, #31
 8000e30:	fa22 f303 	lsr.w	r3, r2, r3
 8000e34:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000e36:	4b0f      	ldr	r3, [pc, #60]	@ (8000e74 <HAL_Init+0x68>)
 8000e38:	699b      	ldr	r3, [r3, #24]
 8000e3a:	f003 030f 	and.w	r3, r3, #15
 8000e3e:	4a0e      	ldr	r2, [pc, #56]	@ (8000e78 <HAL_Init+0x6c>)
 8000e40:	5cd3      	ldrb	r3, [r2, r3]
 8000e42:	f003 031f 	and.w	r3, r3, #31
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	fa22 f303 	lsr.w	r3, r2, r3
 8000e4c:	4a0b      	ldr	r2, [pc, #44]	@ (8000e7c <HAL_Init+0x70>)
 8000e4e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e50:	4a0b      	ldr	r2, [pc, #44]	@ (8000e80 <HAL_Init+0x74>)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e56:	200f      	movs	r0, #15
 8000e58:	f7ff fcc6 	bl	80007e8 <HAL_InitTick>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e002      	b.n	8000e6c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e66:	f7ff fca1 	bl	80007ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e6a:	2300      	movs	r3, #0
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	58024400 	.word	0x58024400
 8000e78:	08017028 	.word	0x08017028
 8000e7c:	24000004 	.word	0x24000004
 8000e80:	24000000 	.word	0x24000000

08000e84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e88:	4b06      	ldr	r3, [pc, #24]	@ (8000ea4 <HAL_IncTick+0x20>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ea8 <HAL_IncTick+0x24>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4413      	add	r3, r2
 8000e94:	4a04      	ldr	r2, [pc, #16]	@ (8000ea8 <HAL_IncTick+0x24>)
 8000e96:	6013      	str	r3, [r2, #0]
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	2400000c 	.word	0x2400000c
 8000ea8:	24000100 	.word	0x24000100

08000eac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb0:	4b03      	ldr	r3, [pc, #12]	@ (8000ec0 <HAL_GetTick+0x14>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	24000100 	.word	0x24000100

08000ec4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8000ecc:	4b06      	ldr	r3, [pc, #24]	@ (8000ee8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8000ed4:	4904      	ldr	r1, [pc, #16]	@ (8000ee8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	604b      	str	r3, [r1, #4]
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	58000400 	.word	0x58000400

08000eec <__NVIC_SetPriorityGrouping>:
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000efc:	4b0b      	ldr	r3, [pc, #44]	@ (8000f2c <__NVIC_SetPriorityGrouping+0x40>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f02:	68ba      	ldr	r2, [r7, #8]
 8000f04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f08:	4013      	ands	r3, r2
 8000f0a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f14:	4b06      	ldr	r3, [pc, #24]	@ (8000f30 <__NVIC_SetPriorityGrouping+0x44>)
 8000f16:	4313      	orrs	r3, r2
 8000f18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f1a:	4a04      	ldr	r2, [pc, #16]	@ (8000f2c <__NVIC_SetPriorityGrouping+0x40>)
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	60d3      	str	r3, [r2, #12]
}
 8000f20:	bf00      	nop
 8000f22:	3714      	adds	r7, #20
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	e000ed00 	.word	0xe000ed00
 8000f30:	05fa0000 	.word	0x05fa0000

08000f34 <__NVIC_GetPriorityGrouping>:
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f38:	4b04      	ldr	r3, [pc, #16]	@ (8000f4c <__NVIC_GetPriorityGrouping+0x18>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	0a1b      	lsrs	r3, r3, #8
 8000f3e:	f003 0307 	and.w	r3, r3, #7
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <__NVIC_EnableIRQ>:
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	db0b      	blt.n	8000f7a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f62:	88fb      	ldrh	r3, [r7, #6]
 8000f64:	f003 021f 	and.w	r2, r3, #31
 8000f68:	4907      	ldr	r1, [pc, #28]	@ (8000f88 <__NVIC_EnableIRQ+0x38>)
 8000f6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f6e:	095b      	lsrs	r3, r3, #5
 8000f70:	2001      	movs	r0, #1
 8000f72:	fa00 f202 	lsl.w	r2, r0, r2
 8000f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e000e100 	.word	0xe000e100

08000f8c <__NVIC_SetPriority>:
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	6039      	str	r1, [r7, #0]
 8000f96:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	db0a      	blt.n	8000fb6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	490c      	ldr	r1, [pc, #48]	@ (8000fd8 <__NVIC_SetPriority+0x4c>)
 8000fa6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000faa:	0112      	lsls	r2, r2, #4
 8000fac:	b2d2      	uxtb	r2, r2
 8000fae:	440b      	add	r3, r1
 8000fb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000fb4:	e00a      	b.n	8000fcc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	4908      	ldr	r1, [pc, #32]	@ (8000fdc <__NVIC_SetPriority+0x50>)
 8000fbc:	88fb      	ldrh	r3, [r7, #6]
 8000fbe:	f003 030f 	and.w	r3, r3, #15
 8000fc2:	3b04      	subs	r3, #4
 8000fc4:	0112      	lsls	r2, r2, #4
 8000fc6:	b2d2      	uxtb	r2, r2
 8000fc8:	440b      	add	r3, r1
 8000fca:	761a      	strb	r2, [r3, #24]
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	e000e100 	.word	0xe000e100
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <NVIC_EncodePriority>:
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b089      	sub	sp, #36	@ 0x24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	f1c3 0307 	rsb	r3, r3, #7
 8000ffa:	2b04      	cmp	r3, #4
 8000ffc:	bf28      	it	cs
 8000ffe:	2304      	movcs	r3, #4
 8001000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	3304      	adds	r3, #4
 8001006:	2b06      	cmp	r3, #6
 8001008:	d902      	bls.n	8001010 <NVIC_EncodePriority+0x30>
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	3b03      	subs	r3, #3
 800100e:	e000      	b.n	8001012 <NVIC_EncodePriority+0x32>
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001014:	f04f 32ff 	mov.w	r2, #4294967295
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43da      	mvns	r2, r3
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	401a      	ands	r2, r3
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001028:	f04f 31ff 	mov.w	r1, #4294967295
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	fa01 f303 	lsl.w	r3, r1, r3
 8001032:	43d9      	mvns	r1, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001038:	4313      	orrs	r3, r2
}
 800103a:	4618      	mov	r0, r3
 800103c:	3724      	adds	r7, #36	@ 0x24
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b082      	sub	sp, #8
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff ff4c 	bl	8000eec <__NVIC_SetPriorityGrouping>
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
 8001068:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800106a:	f7ff ff63 	bl	8000f34 <__NVIC_GetPriorityGrouping>
 800106e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	68b9      	ldr	r1, [r7, #8]
 8001074:	6978      	ldr	r0, [r7, #20]
 8001076:	f7ff ffb3 	bl	8000fe0 <NVIC_EncodePriority>
 800107a:	4602      	mov	r2, r0
 800107c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001080:	4611      	mov	r1, r2
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff ff82 	bl	8000f8c <__NVIC_SetPriority>
}
 8001088:	bf00      	nop
 800108a:	3718      	adds	r7, #24
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800109a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff ff56 	bl	8000f50 <__NVIC_EnableIRQ>
}
 80010a4:	bf00      	nop
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80010b0:	f3bf 8f5f 	dmb	sy
}
 80010b4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80010b6:	4b07      	ldr	r3, [pc, #28]	@ (80010d4 <HAL_MPU_Disable+0x28>)
 80010b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ba:	4a06      	ldr	r2, [pc, #24]	@ (80010d4 <HAL_MPU_Disable+0x28>)
 80010bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010c0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80010c2:	4b05      	ldr	r3, [pc, #20]	@ (80010d8 <HAL_MPU_Disable+0x2c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	605a      	str	r2, [r3, #4]
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	e000ed00 	.word	0xe000ed00
 80010d8:	e000ed90 	.word	0xe000ed90

080010dc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80010e4:	4a0b      	ldr	r2, [pc, #44]	@ (8001114 <HAL_MPU_Enable+0x38>)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80010ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001118 <HAL_MPU_Enable+0x3c>)
 80010f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010f2:	4a09      	ldr	r2, [pc, #36]	@ (8001118 <HAL_MPU_Enable+0x3c>)
 80010f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010f8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80010fa:	f3bf 8f4f 	dsb	sy
}
 80010fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001100:	f3bf 8f6f 	isb	sy
}
 8001104:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	e000ed90 	.word	0xe000ed90
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	785a      	ldrb	r2, [r3, #1]
 8001128:	4b1b      	ldr	r3, [pc, #108]	@ (8001198 <HAL_MPU_ConfigRegion+0x7c>)
 800112a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800112c:	4b1a      	ldr	r3, [pc, #104]	@ (8001198 <HAL_MPU_ConfigRegion+0x7c>)
 800112e:	691b      	ldr	r3, [r3, #16]
 8001130:	4a19      	ldr	r2, [pc, #100]	@ (8001198 <HAL_MPU_ConfigRegion+0x7c>)
 8001132:	f023 0301 	bic.w	r3, r3, #1
 8001136:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001138:	4a17      	ldr	r2, [pc, #92]	@ (8001198 <HAL_MPU_ConfigRegion+0x7c>)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	7b1b      	ldrb	r3, [r3, #12]
 8001144:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	7adb      	ldrb	r3, [r3, #11]
 800114a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800114c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	7a9b      	ldrb	r3, [r3, #10]
 8001152:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001154:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	7b5b      	ldrb	r3, [r3, #13]
 800115a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800115c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	7b9b      	ldrb	r3, [r3, #14]
 8001162:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001164:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	7bdb      	ldrb	r3, [r3, #15]
 800116a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800116c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	7a5b      	ldrb	r3, [r3, #9]
 8001172:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001174:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	7a1b      	ldrb	r3, [r3, #8]
 800117a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800117c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	7812      	ldrb	r2, [r2, #0]
 8001182:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001184:	4a04      	ldr	r2, [pc, #16]	@ (8001198 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001186:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001188:	6113      	str	r3, [r2, #16]
}
 800118a:	bf00      	nop
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	e000ed90 	.word	0xe000ed90

0800119c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d101      	bne.n	80011ae <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e0e3      	b.n	8001376 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d106      	bne.n	80011c6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2223      	movs	r2, #35	@ 0x23
 80011bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f003 fe21 	bl	8004e08 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c6:	4b6e      	ldr	r3, [pc, #440]	@ (8001380 <HAL_ETH_Init+0x1e4>)
 80011c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011cc:	4a6c      	ldr	r2, [pc, #432]	@ (8001380 <HAL_ETH_Init+0x1e4>)
 80011ce:	f043 0302 	orr.w	r3, r3, #2
 80011d2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80011d6:	4b6a      	ldr	r3, [pc, #424]	@ (8001380 <HAL_ETH_Init+0x1e4>)
 80011d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011dc:	f003 0302 	and.w	r3, r3, #2
 80011e0:	60bb      	str	r3, [r7, #8]
 80011e2:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	7a1b      	ldrb	r3, [r3, #8]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d103      	bne.n	80011f4 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80011ec:	2000      	movs	r0, #0
 80011ee:	f7ff fe69 	bl	8000ec4 <HAL_SYSCFG_ETHInterfaceSelect>
 80011f2:	e003      	b.n	80011fc <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80011f4:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80011f8:	f7ff fe64 	bl	8000ec4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80011fc:	4b61      	ldr	r3, [pc, #388]	@ (8001384 <HAL_ETH_Init+0x1e8>)
 80011fe:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	6812      	ldr	r2, [r2, #0]
 800120e:	f043 0301 	orr.w	r3, r3, #1
 8001212:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001216:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001218:	f7ff fe48 	bl	8000eac <HAL_GetTick>
 800121c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800121e:	e011      	b.n	8001244 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001220:	f7ff fe44 	bl	8000eac <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800122e:	d909      	bls.n	8001244 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2204      	movs	r2, #4
 8001234:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	22e0      	movs	r2, #224	@ 0xe0
 800123c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	e098      	b.n	8001376 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	2b00      	cmp	r3, #0
 8001254:	d1e4      	bne.n	8001220 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f000 ff1c 	bl	8002094 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800125c:	f002 fe46 	bl	8003eec <HAL_RCC_GetHCLKFreq>
 8001260:	4603      	mov	r3, r0
 8001262:	4a49      	ldr	r2, [pc, #292]	@ (8001388 <HAL_ETH_Init+0x1ec>)
 8001264:	fba2 2303 	umull	r2, r3, r2, r3
 8001268:	0c9a      	lsrs	r2, r3, #18
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	3a01      	subs	r2, #1
 8001270:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f001 f919 	bl	80024ac <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001282:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001286:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	6812      	ldr	r2, [r2, #0]
 800128e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001292:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001296:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	f003 0303 	and.w	r3, r3, #3
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d009      	beq.n	80012ba <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2201      	movs	r2, #1
 80012aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	22e0      	movs	r2, #224	@ 0xe0
 80012b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e05d      	b.n	8001376 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012c2:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80012c6:	4b31      	ldr	r3, [pc, #196]	@ (800138c <HAL_ETH_Init+0x1f0>)
 80012c8:	4013      	ands	r3, r2
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	6952      	ldr	r2, [r2, #20]
 80012ce:	0051      	lsls	r1, r2, #1
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	6812      	ldr	r2, [r2, #0]
 80012d4:	430b      	orrs	r3, r1
 80012d6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80012da:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f001 f981 	bl	80025e6 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f001 f9c7 	bl	8002678 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	3305      	adds	r3, #5
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	021a      	lsls	r2, r3, #8
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	3304      	adds	r3, #4
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	4619      	mov	r1, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	430a      	orrs	r2, r1
 8001304:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	3303      	adds	r3, #3
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	061a      	lsls	r2, r3, #24
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	3302      	adds	r3, #2
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	041b      	lsls	r3, r3, #16
 800131c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	3301      	adds	r3, #1
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001328:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001336:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001338:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	4b11      	ldr	r3, [pc, #68]	@ (8001390 <HAL_ETH_Init+0x1f4>)
 800134a:	430b      	orrs	r3, r1
 800134c:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	4b0d      	ldr	r3, [pc, #52]	@ (8001394 <HAL_ETH_Init+0x1f8>)
 800135e:	430b      	orrs	r3, r1
 8001360:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2210      	movs	r2, #16
 8001370:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	58024400 	.word	0x58024400
 8001384:	58000400 	.word	0x58000400
 8001388:	431bde83 	.word	0x431bde83
 800138c:	ffff8001 	.word	0xffff8001
 8001390:	0c020060 	.word	0x0c020060
 8001394:	0c20c000 	.word	0x0c20c000

08001398 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80013a6:	2b10      	cmp	r3, #16
 80013a8:	d165      	bne.n	8001476 <HAL_ETH_Start_IT+0xde>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2223      	movs	r2, #35	@ 0x23
 80013ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2201      	movs	r2, #1
 80013b6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2204      	movs	r2, #4
 80013bc:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f000 f9e4 	bl	800178c <ETH_UpdateDescriptor>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013cc:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	6812      	ldr	r2, [r2, #0]
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80013dc:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013e8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	6812      	ldr	r2, [r2, #0]
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80013f8:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001404:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	6812      	ldr	r2, [r2, #0]
 800140c:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 8001410:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001414:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f042 0201 	orr.w	r2, r2, #1
 8001428:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f042 0202 	orr.w	r2, r2, #2
 800143a:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f042 0201 	orr.w	r2, r2, #1
 800144a:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001454:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	f24d 03c1 	movw	r3, #53441	@ 0xd0c1
 8001460:	430b      	orrs	r3, r1
 8001462:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001466:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2223      	movs	r2, #35	@ 0x23
 800146e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8001472:	2300      	movs	r3, #0
 8001474:	e000      	b.n	8001478 <HAL_ETH_Start_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
  }
}
 8001478:	4618      	mov	r0, r3
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800148e:	2b23      	cmp	r3, #35	@ 0x23
 8001490:	d165      	bne.n	800155e <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2223      	movs	r2, #35	@ 0x23
 8001496:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014a2:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	4b30      	ldr	r3, [pc, #192]	@ (800156c <HAL_ETH_Stop_IT+0xec>)
 80014ac:	400b      	ands	r3, r1
 80014ae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80014b2:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014be:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	6812      	ldr	r2, [r2, #0]
 80014c6:	f023 0301 	bic.w	r3, r3, #1
 80014ca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80014ce:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014da:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	6812      	ldr	r2, [r2, #0]
 80014e2:	f023 0301 	bic.w	r3, r3, #1
 80014e6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80014ea:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f022 0201 	bic.w	r2, r2, #1
 80014fc:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f042 0201 	orr.w	r2, r2, #1
 800150e:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f022 0202 	bic.w	r2, r2, #2
 8001520:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001522:	2300      	movs	r3, #0
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	e00e      	b.n	8001546 <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	3212      	adds	r2, #18
 800152e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001532:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	3301      	adds	r3, #1
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	2b03      	cmp	r3, #3
 800154a:	d9ed      	bls.n	8001528 <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2210      	movs	r2, #16
 8001556:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 800155a:	2300      	movs	r3, #0
 800155c:	e000      	b.n	8001560 <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
  }
}
 8001560:	4618      	mov	r0, r3
 8001562:	3714      	adds	r7, #20
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	ffff2f3e 	.word	0xffff2f3e

08001570 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d109      	bne.n	8001594 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001586:	f043 0201 	orr.w	r2, r3, #1
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e03a      	b.n	800160a <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800159a:	2b23      	cmp	r3, #35	@ 0x23
 800159c:	d134      	bne.n	8001608 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80015a6:	2201      	movs	r2, #1
 80015a8:	6839      	ldr	r1, [r7, #0]
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f001 f8c2 	bl	8002734 <ETH_Prepare_Tx_Descriptors>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d009      	beq.n	80015ca <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015bc:	f043 0202 	orr.w	r2, r3, #2
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e01f      	b.n	800160a <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 80015ca:	f3bf 8f4f 	dsb	sy
}
 80015ce:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015d4:	1c5a      	adds	r2, r3, #1
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	629a      	str	r2, [r3, #40]	@ 0x28
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015de:	2b03      	cmp	r3, #3
 80015e0:	d904      	bls.n	80015ec <HAL_ETH_Transmit_IT+0x7c>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015e6:	1f1a      	subs	r2, r3, #4
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3106      	adds	r1, #6
 80015f8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80015fc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001600:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    return HAL_OK;
 8001604:	2300      	movs	r3, #0
 8001606:	e000      	b.n	800160a <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
  }
}
 800160a:	4618      	mov	r0, r3
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b088      	sub	sp, #32
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
 800161a:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001620:	2300      	movs	r3, #0
 8001622:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d109      	bne.n	800163e <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001630:	f043 0201 	orr.w	r2, r3, #1
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e0a2      	b.n	8001784 <HAL_ETH_ReadData+0x172>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001644:	2b23      	cmp	r3, #35	@ 0x23
 8001646:	d001      	beq.n	800164c <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e09b      	b.n	8001784 <HAL_ETH_ReadData+0x172>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001650:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	69fa      	ldr	r2, [r7, #28]
 8001656:	3212      	adds	r2, #18
 8001658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800165c:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001662:	f1c3 0304 	rsb	r3, r3, #4
 8001666:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001668:	e064      	b.n	8001734 <HAL_ETH_ReadData+0x122>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d007      	beq.n	8001686 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	685a      	ldr	r2, [r3, #4]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d103      	bne.n	800169a <HAL_ETH_ReadData+0x88>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001696:	2b00      	cmp	r3, #0
 8001698:	d03a      	beq.n	8001710 <HAL_ETH_ReadData+0xfe>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d005      	beq.n	80016b2 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d005      	beq.n	80016da <HAL_ETH_ReadData+0xc8>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	68da      	ldr	r2, [r3, #12]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 80016d6:	2301      	movs	r3, #1
 80016d8:	74fb      	strb	r3, [r7, #19]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80016ea:	461a      	mov	r2, r3
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	f003 fd70 	bl	80051d4 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016f8:	1c5a      	adds	r2, r3, #1
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	441a      	add	r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	2200      	movs	r2, #0
 800170e:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	3301      	adds	r3, #1
 8001714:	61fb      	str	r3, [r7, #28]
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	2b03      	cmp	r3, #3
 800171a:	d902      	bls.n	8001722 <HAL_ETH_ReadData+0x110>
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	3b04      	subs	r3, #4
 8001720:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	69fa      	ldr	r2, [r7, #28]
 8001726:	3212      	adds	r2, #18
 8001728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800172c:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	3301      	adds	r3, #1
 8001732:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 8001738:	2b00      	cmp	r3, #0
 800173a:	db06      	blt.n	800174a <HAL_ETH_ReadData+0x138>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800173c:	697a      	ldr	r2, [r7, #20]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	429a      	cmp	r2, r3
 8001742:	d202      	bcs.n	800174a <HAL_ETH_ReadData+0x138>
         && (rxdataready == 0U))
 8001744:	7cfb      	ldrb	r3, [r7, #19]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d08f      	beq.n	800166a <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	441a      	add	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800175a:	2b00      	cmp	r3, #0
 800175c:	d002      	beq.n	8001764 <HAL_ETH_ReadData+0x152>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f000 f814 	bl	800178c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	69fa      	ldr	r2, [r7, #28]
 8001768:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 800176a:	7cfb      	ldrb	r3, [r7, #19]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d108      	bne.n	8001782 <HAL_ETH_ReadData+0x170>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800177e:	2300      	movs	r3, #0
 8001780:	e000      	b.n	8001784 <HAL_ETH_ReadData+0x172>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
}
 8001784:	4618      	mov	r0, r3
 8001786:	3720      	adds	r7, #32
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b088      	sub	sp, #32
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001794:	2300      	movs	r3, #0
 8001796:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8001798:	2301      	movs	r3, #1
 800179a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80017a0:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	69fa      	ldr	r2, [r7, #28]
 80017a6:	3212      	adds	r2, #18
 80017a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ac:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80017b2:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80017b4:	e038      	b.n	8001828 <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d112      	bne.n	80017e4 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80017be:	f107 0308 	add.w	r3, r7, #8
 80017c2:	4618      	mov	r0, r3
 80017c4:	f003 fcd6 	bl	8005174 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d102      	bne.n	80017d4 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80017ce:	2300      	movs	r3, #0
 80017d0:	74fb      	strb	r3, [r7, #19]
 80017d2:	e007      	b.n	80017e4 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	461a      	mov	r2, r3
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	461a      	mov	r2, r3
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 80017e4:	7cfb      	ldrb	r3, [r7, #19]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d01e      	beq.n	8001828 <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d004      	beq.n	80017fc <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	e003      	b.n	8001804 <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 8001802:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	3301      	adds	r3, #1
 8001808:	61fb      	str	r3, [r7, #28]
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	2b03      	cmp	r3, #3
 800180e:	d902      	bls.n	8001816 <ETH_UpdateDescriptor+0x8a>
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	3b04      	subs	r3, #4
 8001814:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	69fa      	ldr	r2, [r7, #28]
 800181a:	3212      	adds	r2, #18
 800181c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001820:	617b      	str	r3, [r7, #20]
      desccount--;
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	3b01      	subs	r3, #1
 8001826:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d002      	beq.n	8001834 <ETH_UpdateDescriptor+0xa8>
 800182e:	7cfb      	ldrb	r3, [r7, #19]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d1c0      	bne.n	80017b6 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	429a      	cmp	r2, r3
 800183c:	d01b      	beq.n	8001876 <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	3301      	adds	r3, #1
 8001842:	f003 0303 	and.w	r3, r3, #3
 8001846:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8001848:	f3bf 8f5f 	dmb	sy
}
 800184c:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6919      	ldr	r1, [r3, #16]
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	4613      	mov	r3, r2
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	4413      	add	r3, r2
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	18ca      	adds	r2, r1, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001866:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	69fa      	ldr	r2, [r7, #28]
 800186e:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8001876:	bf00      	nop
 8001878:	3720      	adds	r7, #32
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b086      	sub	sp, #24
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	3318      	adds	r3, #24
 800188a:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001890:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001896:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001898:	2301      	movs	r3, #1
 800189a:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800189c:	e047      	b.n	800192e <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 800189e:	2301      	movs	r3, #1
 80018a0:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	3b01      	subs	r3, #1
 80018a6:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 80018a8:	68ba      	ldr	r2, [r7, #8]
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	3304      	adds	r3, #4
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	4413      	add	r3, r2
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d10a      	bne.n	80018ce <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	3301      	adds	r3, #1
 80018bc:	613b      	str	r3, [r7, #16]
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	2b03      	cmp	r3, #3
 80018c2:	d902      	bls.n	80018ca <HAL_ETH_ReleaseTxPacket+0x4c>
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	3b04      	subs	r3, #4
 80018c8:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80018ca:	2300      	movs	r3, #0
 80018cc:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 80018ce:	7bbb      	ldrb	r3, [r7, #14]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d02c      	beq.n	800192e <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	68d9      	ldr	r1, [r3, #12]
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	4613      	mov	r3, r2
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	4413      	add	r3, r2
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	440b      	add	r3, r1
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	db1f      	blt.n	800192a <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 80018ea:	68ba      	ldr	r2, [r7, #8]
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	3304      	adds	r3, #4
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	4413      	add	r3, r2
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f003 fcd4 	bl	80052a4 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 80018fc:	68ba      	ldr	r2, [r7, #8]
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	3304      	adds	r3, #4
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4413      	add	r3, r2
 8001906:	2200      	movs	r2, #0
 8001908:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	3301      	adds	r3, #1
 800190e:	613b      	str	r3, [r7, #16]
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	2b03      	cmp	r3, #3
 8001914:	d902      	bls.n	800191c <HAL_ETH_ReleaseTxPacket+0x9e>
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	3b04      	subs	r3, #4
 800191a:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	697a      	ldr	r2, [r7, #20]
 8001920:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001928:	e001      	b.n	800192e <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 800192a:	2300      	movs	r3, #0
 800192c:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d002      	beq.n	800193a <HAL_ETH_ReleaseTxPacket+0xbc>
 8001934:	7bfb      	ldrb	r3, [r7, #15]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1b1      	bne.n	800189e <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	3718      	adds	r7, #24
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACISR);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8001954:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMACSR);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800195e:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8001962:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMACIER);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800196c:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001970:	60fb      	str	r3, [r7, #12]
  uint32_t exti_d1_flag = READ_REG(EXTI_D1->PR3);
 8001972:	4b6d      	ldr	r3, [pc, #436]	@ (8001b28 <HAL_ETH_IRQHandler+0x1e4>)
 8001974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001976:	60bb      	str	r3, [r7, #8]
#if defined(DUAL_CORE)
  uint32_t exti_d2_flag = READ_REG(EXTI_D2->PR3);
#endif /* DUAL_CORE */

  /* Packet received */
  if (((dma_flag & ETH_DMACSR_RI) != 0U) && ((dma_itsource & ETH_DMACIER_RIE) != 0U))
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800197e:	2b00      	cmp	r3, #0
 8001980:	d010      	beq.n	80019a4 <HAL_ETH_IRQHandler+0x60>
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001988:	2b00      	cmp	r3, #0
 800198a:	d00b      	beq.n	80019a4 <HAL_ETH_IRQHandler+0x60>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001994:	461a      	mov	r2, r3
 8001996:	f248 0340 	movw	r3, #32832	@ 0x8040
 800199a:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f002 ff72 	bl	8004888 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMACSR_TI) != 0U) && ((dma_itsource & ETH_DMACIER_TIE) != 0U))
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d010      	beq.n	80019d0 <HAL_ETH_IRQHandler+0x8c>
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d00b      	beq.n	80019d0 <HAL_ETH_IRQHandler+0x8c>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019c0:	461a      	mov	r2, r3
 80019c2:	f248 0301 	movw	r3, #32769	@ 0x8001
 80019c6:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f002 ff6c 	bl	80048a8 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMACSR_AIS) != 0U) && ((dma_itsource & ETH_DMACIER_AIE) != 0U))
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d047      	beq.n	8001a6a <HAL_ETH_IRQHandler+0x126>
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d042      	beq.n	8001a6a <HAL_ETH_IRQHandler+0x126>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019ea:	f043 0208 	orr.w	r2, r3, #8
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMACSR_FBE) != 0U)
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d01e      	beq.n	8001a3c <HAL_ETH_IRQHandler+0xf8>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a06:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 8001a0a:	f241 1302 	movw	r3, #4354	@ 0x1102
 8001a0e:	4013      	ands	r3, r2
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a1e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	6812      	ldr	r2, [r2, #0]
 8001a26:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001a2a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a2e:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	22e0      	movs	r2, #224	@ 0xe0
 8001a36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8001a3a:	e013      	b.n	8001a64 <HAL_ETH_IRQHandler+0x120>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a44:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8001a48:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
                                                             ETH_DMACSR_RBU | ETH_DMACSR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 8001a60:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f002 ff2f 	bl	80048c8 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH MAC Error IT */
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d104      	bne.n	8001a7e <HAL_ETH_IRQHandler+0x13a>
      ((mac_flag & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d019      	beq.n	8001ab2 <HAL_ETH_IRQHandler+0x16e>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a84:	f043 0210 	orr.w	r2, r3, #16
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	22e0      	movs	r2, #224	@ 0xe0
 8001aa0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f002 ff0f 	bl	80048c8 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    heth->MACErrorCode = (uint32_t)(0x0U);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }

  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	f003 0310 	and.w	r3, r3, #16
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d00f      	beq.n	8001adc <HAL_ETH_IRQHandler+0x198>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001ac4:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 f82c 	bl	8001b2c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }

  /* ETH EEE IT */
  if ((mac_flag & ETH_MAC_LPI_IT) != 0U)
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	f003 0320 	and.w	r3, r3, #32
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d00f      	beq.n	8001b06 <HAL_ETH_IRQHandler+0x1c2>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACLCSR, 0x0000000FU);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8001aee:	f003 020f 	and.w	r2, r3, #15
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f000 f821 	bl	8001b40 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }
#else /* DUAL_CORE not defined */
  /* check ETH WAKEUP exti flag */
  if ((exti_d1_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d006      	beq.n	8001b1e <HAL_ETH_IRQHandler+0x1da>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001b10:	4b05      	ldr	r3, [pc, #20]	@ (8001b28 <HAL_ETH_IRQHandler+0x1e4>)
 8001b12:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001b16:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f000 f81b 	bl	8001b54 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* DUAL_CORE */
}
 8001b1e:	bf00      	nop
 8001b20:	3718      	adds	r7, #24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	58000080 	.word	0x58000080

08001b2c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
 8001b74:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e03e      	b.n	8001c08 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001b92:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	055b      	lsls	r3, r3, #21
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	041b      	lsls	r3, r3, #16
 8001bac:	4313      	orrs	r3, r2
 8001bae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	f043 030c 	orr.w	r3, r3, #12
 8001bb6:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	f043 0301 	orr.w	r3, r3, #1
 8001bbe:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8001bca:	f7ff f96f 	bl	8000eac <HAL_GetTick>
 8001bce:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001bd0:	e009      	b.n	8001be6 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8001bd2:	f7ff f96b 	bl	8000eac <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001be0:	d901      	bls.n	8001be6 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e010      	b.n	8001c08 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1ed      	bne.n	8001bd2 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	461a      	mov	r2, r3
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001c06:	2300      	movs	r3, #0
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3718      	adds	r7, #24
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
 8001c1c:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e03c      	b.n	8001cac <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001c3a:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	055b      	lsls	r3, r3, #21
 8001c46:	4313      	orrs	r3, r2
 8001c48:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	041b      	lsls	r3, r3, #16
 8001c54:	4313      	orrs	r3, r2
 8001c56:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	f023 030c 	bic.w	r3, r3, #12
 8001c5e:	f043 0304 	orr.w	r3, r3, #4
 8001c62:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	f043 0301 	orr.w	r3, r3, #1
 8001c6a:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	4b10      	ldr	r3, [pc, #64]	@ (8001cb4 <HAL_ETH_WritePHYRegister+0xa4>)
 8001c72:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8001c76:	4a0f      	ldr	r2, [pc, #60]	@ (8001cb4 <HAL_ETH_WritePHYRegister+0xa4>)
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8001c7e:	f7ff f915 	bl	8000eac <HAL_GetTick>
 8001c82:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001c84:	e009      	b.n	8001c9a <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8001c86:	f7ff f911 	bl	8000eac <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c94:	d901      	bls.n	8001c9a <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e008      	b.n	8001cac <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1ed      	bne.n	8001c86 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8001caa:	2300      	movs	r3, #0
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40028000 	.word	0x40028000

08001cb8 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d101      	bne.n	8001ccc <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e1c3      	b.n	8002054 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 020c 	and.w	r2, r3, #12
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0310 	and.w	r3, r3, #16
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	bf14      	ite	ne
 8001ce8:	2301      	movne	r3, #1
 8001cea:	2300      	moveq	r3, #0
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	461a      	mov	r2, r3
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	bf0c      	ite	eq
 8001d12:	2301      	moveq	r3, #1
 8001d14:	2300      	movne	r3, #0
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	461a      	mov	r2, r3
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	bf14      	ite	ne
 8001d2e:	2301      	movne	r3, #1
 8001d30:	2300      	moveq	r3, #0
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	bf0c      	ite	eq
 8001d48:	2301      	moveq	r3, #1
 8001d4a:	2300      	movne	r3, #0
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	461a      	mov	r2, r3
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8001d5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	bf14      	ite	ne
 8001d62:	2301      	movne	r3, #1
 8001d64:	2300      	moveq	r3, #0
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	bf14      	ite	ne
 8001d7c:	2301      	movne	r3, #1
 8001d7e:	2300      	moveq	r3, #0
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	461a      	mov	r2, r3
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	bf14      	ite	ne
 8001db2:	2301      	movne	r3, #1
 8001db4:	2300      	moveq	r3, #0
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	461a      	mov	r2, r3
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	bf0c      	ite	eq
 8001dcc:	2301      	moveq	r3, #1
 8001dce:	2300      	movne	r3, #0
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	bf0c      	ite	eq
 8001de6:	2301      	moveq	r3, #1
 8001de8:	2300      	movne	r3, #0
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	461a      	mov	r2, r3
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	bf14      	ite	ne
 8001e00:	2301      	movne	r3, #1
 8001e02:	2300      	moveq	r3, #0
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	461a      	mov	r2, r3
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	bf14      	ite	ne
 8001e1a:	2301      	movne	r3, #1
 8001e1c:	2300      	moveq	r3, #0
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	461a      	mov	r2, r3
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	bf14      	ite	ne
 8001e34:	2301      	movne	r3, #1
 8001e36:	2300      	moveq	r3, #0
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8001e46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	bf14      	ite	ne
 8001e4e:	2301      	movne	r3, #1
 8001e50:	2300      	moveq	r3, #0
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	bf14      	ite	ne
 8001e76:	2301      	movne	r3, #1
 8001e78:	2300      	moveq	r3, #0
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	bf0c      	ite	eq
 8001eac:	2301      	moveq	r3, #1
 8001eae:	2300      	movne	r3, #0
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	bf14      	ite	ne
 8001ec8:	2301      	movne	r3, #1
 8001eca:	2300      	moveq	r3, #0
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	461a      	mov	r2, r3
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8001edc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	bf14      	ite	ne
 8001ee4:	2301      	movne	r3, #1
 8001ee6:	2300      	moveq	r3, #0
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	bf14      	ite	ne
 8001f00:	2301      	movne	r3, #1
 8001f02:	2300      	moveq	r3, #0
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	0e5b      	lsrs	r3, r3, #25
 8001f16:	f003 021f 	and.w	r2, r3, #31
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	bf14      	ite	ne
 8001f2c:	2301      	movne	r3, #1
 8001f2e:	2300      	moveq	r3, #0
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	461a      	mov	r2, r3
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	f003 020f 	and.w	r2, r3, #15
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	bf14      	ite	ne
 8001f56:	2301      	movne	r3, #1
 8001f58:	2300      	moveq	r3, #0
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	bf0c      	ite	eq
 8001f72:	2301      	moveq	r3, #1
 8001f74:	2300      	movne	r3, #0
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	461a      	mov	r2, r3
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f86:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f94:	0c1b      	lsrs	r3, r3, #16
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	bf14      	ite	ne
 8001fac:	2301      	movne	r3, #1
 8001fae:	2300      	moveq	r3, #0
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fc2:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	bf14      	ite	ne
 8001fca:	2301      	movne	r3, #1
 8001fcc:	2300      	moveq	r3, #0
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8001fe0:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8001ff0:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8002000:	f003 0308 	and.w	r3, r3, #8
 8002004:	2b00      	cmp	r3, #0
 8002006:	bf14      	ite	ne
 8002008:	2301      	movne	r3, #1
 800200a:	2300      	moveq	r3, #0
 800200c:	b2db      	uxtb	r3, r3
 800200e:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 800201e:	f003 0310 	and.w	r3, r3, #16
 8002022:	2b00      	cmp	r3, #0
 8002024:	bf14      	ite	ne
 8002026:	2301      	movne	r3, #1
 8002028:	2300      	moveq	r3, #0
 800202a:	b2db      	uxtb	r3, r3
 800202c:	461a      	mov	r2, r3
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 800203c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002040:	2b00      	cmp	r3, #0
 8002042:	bf0c      	ite	eq
 8002044:	2301      	moveq	r3, #1
 8002046:	2300      	movne	r3, #0
 8002048:	b2db      	uxtb	r3, r3
 800204a:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d101      	bne.n	8002074 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e00b      	b.n	800208c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800207a:	2b10      	cmp	r3, #16
 800207c:	d105      	bne.n	800208a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800207e:	6839      	ldr	r1, [r7, #0]
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f000 f871 	bl	8002168 <ETH_SetMACConfig>

    return HAL_OK;
 8002086:	2300      	movs	r3, #0
 8002088:	e000      	b.n	800208c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
  }
}
 800208c:	4618      	mov	r0, r3
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80020a4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80020ac:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80020ae:	f001 ff1d 	bl	8003eec <HAL_RCC_GetHCLKFreq>
 80020b2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	4a1a      	ldr	r2, [pc, #104]	@ (8002120 <HAL_ETH_SetMDIOClockRange+0x8c>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d804      	bhi.n	80020c6 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	e022      	b.n	800210c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	4a16      	ldr	r2, [pc, #88]	@ (8002124 <HAL_ETH_SetMDIOClockRange+0x90>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d204      	bcs.n	80020d8 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	e019      	b.n	800210c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	4a13      	ldr	r2, [pc, #76]	@ (8002128 <HAL_ETH_SetMDIOClockRange+0x94>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d915      	bls.n	800210c <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	4a12      	ldr	r2, [pc, #72]	@ (800212c <HAL_ETH_SetMDIOClockRange+0x98>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d804      	bhi.n	80020f2 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	e00c      	b.n	800210c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	4a0e      	ldr	r2, [pc, #56]	@ (8002130 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d804      	bhi.n	8002104 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	e003      	b.n	800210c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 800210a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8002116:	bf00      	nop
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	02160ebf 	.word	0x02160ebf
 8002124:	03938700 	.word	0x03938700
 8002128:	05f5e0ff 	.word	0x05f5e0ff
 800212c:	08f0d17f 	.word	0x08f0d17f
 8002130:	0ee6b27f 	.word	0x0ee6b27f

08002134 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 8002142:	4618      	mov	r0, r3
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 800214e:	b480      	push	{r7}
 8002150:	b083      	sub	sp, #12
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 800215c:	4618      	mov	r0, r3
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800217a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	791b      	ldrb	r3, [r3, #4]
 8002180:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002182:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	7b1b      	ldrb	r3, [r3, #12]
 8002188:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800218a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	7b5b      	ldrb	r3, [r3, #13]
 8002190:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002192:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	7b9b      	ldrb	r3, [r3, #14]
 8002198:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800219a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	7bdb      	ldrb	r3, [r3, #15]
 80021a0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80021a2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80021a4:	683a      	ldr	r2, [r7, #0]
 80021a6:	7c12      	ldrb	r2, [r2, #16]
 80021a8:	2a00      	cmp	r2, #0
 80021aa:	d102      	bne.n	80021b2 <ETH_SetMACConfig+0x4a>
 80021ac:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80021b0:	e000      	b.n	80021b4 <ETH_SetMACConfig+0x4c>
 80021b2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80021b4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	7c52      	ldrb	r2, [r2, #17]
 80021ba:	2a00      	cmp	r2, #0
 80021bc:	d102      	bne.n	80021c4 <ETH_SetMACConfig+0x5c>
 80021be:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80021c2:	e000      	b.n	80021c6 <ETH_SetMACConfig+0x5e>
 80021c4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80021c6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	7c9b      	ldrb	r3, [r3, #18]
 80021cc:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80021ce:	431a      	orrs	r2, r3
               macconf->Speed |
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80021d4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80021da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	7f1b      	ldrb	r3, [r3, #28]
 80021e0:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80021e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	7f5b      	ldrb	r3, [r3, #29]
 80021e8:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80021ea:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	7f92      	ldrb	r2, [r2, #30]
 80021f0:	2a00      	cmp	r2, #0
 80021f2:	d102      	bne.n	80021fa <ETH_SetMACConfig+0x92>
 80021f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021f8:	e000      	b.n	80021fc <ETH_SetMACConfig+0x94>
 80021fa:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80021fc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	7fdb      	ldrb	r3, [r3, #31]
 8002202:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002204:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	f892 2020 	ldrb.w	r2, [r2, #32]
 800220c:	2a00      	cmp	r2, #0
 800220e:	d102      	bne.n	8002216 <ETH_SetMACConfig+0xae>
 8002210:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002214:	e000      	b.n	8002218 <ETH_SetMACConfig+0xb0>
 8002216:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002218:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800221e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002226:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002228:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 800222e:	4313      	orrs	r3, r2
 8002230:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	4b56      	ldr	r3, [pc, #344]	@ (8002394 <ETH_SetMACConfig+0x22c>)
 800223a:	4013      	ands	r3, r2
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	6812      	ldr	r2, [r2, #0]
 8002240:	68f9      	ldr	r1, [r7, #12]
 8002242:	430b      	orrs	r3, r1
 8002244:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800224a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002252:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002254:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800225c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800225e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002266:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002268:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8002270:	2a00      	cmp	r2, #0
 8002272:	d102      	bne.n	800227a <ETH_SetMACConfig+0x112>
 8002274:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002278:	e000      	b.n	800227c <ETH_SetMACConfig+0x114>
 800227a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800227c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002282:	4313      	orrs	r3, r2
 8002284:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	685a      	ldr	r2, [r3, #4]
 800228c:	4b42      	ldr	r3, [pc, #264]	@ (8002398 <ETH_SetMACConfig+0x230>)
 800228e:	4013      	ands	r3, r2
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	6812      	ldr	r2, [r2, #0]
 8002294:	68f9      	ldr	r1, [r7, #12]
 8002296:	430b      	orrs	r3, r1
 8002298:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80022a0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80022a6:	4313      	orrs	r3, r2
 80022a8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68da      	ldr	r2, [r3, #12]
 80022b0:	4b3a      	ldr	r3, [pc, #232]	@ (800239c <ETH_SetMACConfig+0x234>)
 80022b2:	4013      	ands	r3, r2
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	6812      	ldr	r2, [r2, #0]
 80022b8:	68f9      	ldr	r1, [r7, #12]
 80022ba:	430b      	orrs	r3, r1
 80022bc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80022c4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80022ca:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80022d2:	2a00      	cmp	r2, #0
 80022d4:	d101      	bne.n	80022da <ETH_SetMACConfig+0x172>
 80022d6:	2280      	movs	r2, #128	@ 0x80
 80022d8:	e000      	b.n	80022dc <ETH_SetMACConfig+0x174>
 80022da:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80022dc:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022e2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80022e4:	4313      	orrs	r3, r2
 80022e6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80022ee:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 80022f2:	4013      	ands	r3, r2
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	6812      	ldr	r2, [r2, #0]
 80022f8:	68f9      	ldr	r1, [r7, #12]
 80022fa:	430b      	orrs	r3, r1
 80022fc:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8002304:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800230c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800230e:	4313      	orrs	r3, r2
 8002310:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800231a:	f023 0103 	bic.w	r1, r3, #3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	430a      	orrs	r2, r1
 8002326:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8002332:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	430a      	orrs	r2, r1
 8002340:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800234e:	2a00      	cmp	r2, #0
 8002350:	d101      	bne.n	8002356 <ETH_SetMACConfig+0x1ee>
 8002352:	2240      	movs	r2, #64	@ 0x40
 8002354:	e000      	b.n	8002358 <ETH_SetMACConfig+0x1f0>
 8002356:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002358:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8002360:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002362:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800236a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800236c:	4313      	orrs	r3, r2
 800236e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8002378:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	430a      	orrs	r2, r1
 8002384:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8002388:	bf00      	nop
 800238a:	3714      	adds	r7, #20
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	00048083 	.word	0x00048083
 8002398:	c0f88000 	.word	0xc0f88000
 800239c:	fffffef0 	.word	0xfffffef0

080023a0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	4b38      	ldr	r3, [pc, #224]	@ (8002498 <ETH_SetDMAConfig+0xf8>)
 80023b6:	4013      	ands	r3, r2
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	6811      	ldr	r1, [r2, #0]
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	6812      	ldr	r2, [r2, #0]
 80023c0:	430b      	orrs	r3, r1
 80023c2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80023c6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	791b      	ldrb	r3, [r3, #4]
 80023cc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80023d2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	7b1b      	ldrb	r3, [r3, #12]
 80023d8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80023da:	4313      	orrs	r3, r2
 80023dc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	4b2c      	ldr	r3, [pc, #176]	@ (800249c <ETH_SetDMAConfig+0xfc>)
 80023ea:	4013      	ands	r3, r2
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	6812      	ldr	r2, [r2, #0]
 80023f0:	68f9      	ldr	r1, [r7, #12]
 80023f2:	430b      	orrs	r3, r1
 80023f4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80023f8:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	7b5b      	ldrb	r3, [r3, #13]
 80023fe:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002404:	4313      	orrs	r3, r2
 8002406:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002410:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8002414:	4b22      	ldr	r3, [pc, #136]	@ (80024a0 <ETH_SetDMAConfig+0x100>)
 8002416:	4013      	ands	r3, r2
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	6812      	ldr	r2, [r2, #0]
 800241c:	68f9      	ldr	r1, [r7, #12]
 800241e:	430b      	orrs	r3, r1
 8002420:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002424:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	7d1b      	ldrb	r3, [r3, #20]
 8002430:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002432:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	7f5b      	ldrb	r3, [r3, #29]
 8002438:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800243a:	4313      	orrs	r3, r2
 800243c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002446:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800244a:	4b16      	ldr	r3, [pc, #88]	@ (80024a4 <ETH_SetDMAConfig+0x104>)
 800244c:	4013      	ands	r3, r2
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	6812      	ldr	r2, [r2, #0]
 8002452:	68f9      	ldr	r1, [r7, #12]
 8002454:	430b      	orrs	r3, r1
 8002456:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800245a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	7f1b      	ldrb	r3, [r3, #28]
 8002462:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002468:	4313      	orrs	r3, r2
 800246a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002474:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8002478:	4b0b      	ldr	r3, [pc, #44]	@ (80024a8 <ETH_SetDMAConfig+0x108>)
 800247a:	4013      	ands	r3, r2
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	6812      	ldr	r2, [r2, #0]
 8002480:	68f9      	ldr	r1, [r7, #12]
 8002482:	430b      	orrs	r3, r1
 8002484:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002488:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 800248c:	bf00      	nop
 800248e:	3714      	adds	r7, #20
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	ffff87fd 	.word	0xffff87fd
 800249c:	ffff2ffe 	.word	0xffff2ffe
 80024a0:	fffec000 	.word	0xfffec000
 80024a4:	ffc0efef 	.word	0xffc0efef
 80024a8:	7fc0ffff 	.word	0x7fc0ffff

080024ac <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b0a4      	sub	sp, #144	@ 0x90
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80024b4:	2301      	movs	r3, #1
 80024b6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80024ba:	2300      	movs	r3, #0
 80024bc:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80024be:	2300      	movs	r3, #0
 80024c0:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80024c4:	2300      	movs	r3, #0
 80024c6:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80024ca:	2301      	movs	r3, #1
 80024cc:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80024d0:	2301      	movs	r3, #1
 80024d2:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80024d6:	2301      	movs	r3, #1
 80024d8:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80024dc:	2300      	movs	r3, #0
 80024de:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80024e2:	2301      	movs	r3, #1
 80024e4:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80024e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80024ec:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80024ee:	2300      	movs	r3, #0
 80024f0:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 80024f4:	2300      	movs	r3, #0
 80024f6:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80024f8:	2300      	movs	r3, #0
 80024fa:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80024fe:	2300      	movs	r3, #0
 8002500:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8002504:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8002508:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800250a:	2300      	movs	r3, #0
 800250c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002510:	2300      	movs	r3, #0
 8002512:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8002514:	2301      	movs	r3, #1
 8002516:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800251a:	2300      	movs	r3, #0
 800251c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002520:	2300      	movs	r3, #0
 8002522:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002526:	2300      	movs	r3, #0
 8002528:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 800252a:	2300      	movs	r3, #0
 800252c:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800252e:	2300      	movs	r3, #0
 8002530:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002532:	2300      	movs	r3, #0
 8002534:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002538:	2300      	movs	r3, #0
 800253a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800253e:	2301      	movs	r3, #1
 8002540:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002544:	2320      	movs	r3, #32
 8002546:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800254a:	2301      	movs	r3, #1
 800254c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002550:	2300      	movs	r3, #0
 8002552:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002556:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800255a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800255c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002560:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002562:	2300      	movs	r3, #0
 8002564:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002568:	2302      	movs	r3, #2
 800256a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800256e:	2300      	movs	r3, #0
 8002570:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002574:	2300      	movs	r3, #0
 8002576:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800257a:	2300      	movs	r3, #0
 800257c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002580:	2301      	movs	r3, #1
 8002582:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002586:	2300      	movs	r3, #0
 8002588:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800258a:	2301      	movs	r3, #1
 800258c:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002590:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002594:	4619      	mov	r1, r3
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f7ff fde6 	bl	8002168 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800259c:	2301      	movs	r3, #1
 800259e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80025a0:	2301      	movs	r3, #1
 80025a2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80025a4:	2300      	movs	r3, #0
 80025a6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80025a8:	2300      	movs	r3, #0
 80025aa:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80025ae:	2300      	movs	r3, #0
 80025b0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80025b2:	2300      	movs	r3, #0
 80025b4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80025b6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80025ba:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80025bc:	2300      	movs	r3, #0
 80025be:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80025c0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80025c4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80025c6:	2300      	movs	r3, #0
 80025c8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80025cc:	f44f 7306 	mov.w	r3, #536	@ 0x218
 80025d0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80025d2:	f107 0308 	add.w	r3, r7, #8
 80025d6:	4619      	mov	r1, r3
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f7ff fee1 	bl	80023a0 <ETH_SetDMAConfig>
}
 80025de:	bf00      	nop
 80025e0:	3790      	adds	r7, #144	@ 0x90
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b085      	sub	sp, #20
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80025ee:	2300      	movs	r3, #0
 80025f0:	60fb      	str	r3, [r7, #12]
 80025f2:	e01d      	b.n	8002630 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	68d9      	ldr	r1, [r3, #12]
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	4613      	mov	r3, r2
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	4413      	add	r3, r2
 8002600:	00db      	lsls	r3, r3, #3
 8002602:	440b      	add	r3, r1
 8002604:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	2200      	movs	r2, #0
 8002610:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	2200      	movs	r2, #0
 8002616:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	2200      	movs	r2, #0
 800261c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800261e:	68b9      	ldr	r1, [r7, #8]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	68fa      	ldr	r2, [r7, #12]
 8002624:	3206      	adds	r2, #6
 8002626:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	3301      	adds	r3, #1
 800262e:	60fb      	str	r3, [r7, #12]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2b03      	cmp	r3, #3
 8002634:	d9de      	bls.n	80025f4 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002644:	461a      	mov	r2, r3
 8002646:	2303      	movs	r3, #3
 8002648:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68da      	ldr	r2, [r3, #12]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002658:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	68da      	ldr	r2, [r3, #12]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002668:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 800266c:	bf00      	nop
 800266e:	3714      	adds	r7, #20
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002680:	2300      	movs	r3, #0
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	e023      	b.n	80026ce <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6919      	ldr	r1, [r3, #16]
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	4613      	mov	r3, r2
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	4413      	add	r3, r2
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	440b      	add	r3, r1
 8002696:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	2200      	movs	r2, #0
 800269c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	2200      	movs	r2, #0
 80026a2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	2200      	movs	r2, #0
 80026a8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	2200      	movs	r2, #0
 80026ae:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	2200      	movs	r2, #0
 80026b4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	2200      	movs	r2, #0
 80026ba:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80026bc:	68b9      	ldr	r1, [r7, #8]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	3212      	adds	r2, #18
 80026c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	3301      	adds	r3, #1
 80026cc:	60fb      	str	r3, [r7, #12]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2b03      	cmp	r3, #3
 80026d2:	d9d8      	bls.n	8002686 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026fa:	461a      	mov	r2, r3
 80026fc:	2303      	movs	r3, #3
 80026fe:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	691a      	ldr	r2, [r3, #16]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800270e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002722:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8002726:	bf00      	nop
 8002728:	3714      	adds	r7, #20
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
	...

08002734 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8002734:	b480      	push	{r7}
 8002736:	b091      	sub	sp, #68	@ 0x44
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	3318      	adds	r3, #24
 8002744:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800274c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002752:	2300      	movs	r3, #0
 8002754:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002758:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800275a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800275e:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8002766:	2300      	movs	r3, #0
 8002768:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800276a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002772:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002776:	d007      	beq.n	8002788 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002778:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800277a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800277c:	3304      	adds	r3, #4
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	4413      	add	r3, r2
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002788:	2302      	movs	r3, #2
 800278a:	e266      	b.n	8002c5a <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0304 	and.w	r3, r3, #4
 8002794:	2b00      	cmp	r3, #0
 8002796:	d044      	beq.n	8002822 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8002798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800279a:	68da      	ldr	r2, [r3, #12]
 800279c:	4b75      	ldr	r3, [pc, #468]	@ (8002974 <ETH_Prepare_Tx_Descriptors+0x240>)
 800279e:	4013      	ands	r3, r2
 80027a0:	68ba      	ldr	r2, [r7, #8]
 80027a2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80027a4:	431a      	orrs	r2, r3
 80027a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027a8:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 80027aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80027b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027b4:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80027c4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0308 	and.w	r3, r3, #8
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d027      	beq.n	8002822 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 80027d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027dc:	041b      	lsls	r3, r3, #16
 80027de:	431a      	orrs	r2, r3
 80027e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027e2:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 80027e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80027ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027ee:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 80027f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fc:	431a      	orrs	r2, r3
 80027fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002800:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002810:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002820:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0310 	and.w	r3, r3, #16
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00e      	beq.n	800284c <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 800282e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002830:	689a      	ldr	r2, [r3, #8]
 8002832:	4b51      	ldr	r3, [pc, #324]	@ (8002978 <ETH_Prepare_Tx_Descriptors+0x244>)
 8002834:	4013      	ands	r3, r2
 8002836:	68ba      	ldr	r2, [r7, #8]
 8002838:	6992      	ldr	r2, [r2, #24]
 800283a:	431a      	orrs	r2, r3
 800283c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800283e:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8002840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8002848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800284a:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0304 	and.w	r3, r3, #4
 8002854:	2b00      	cmp	r3, #0
 8002856:	d105      	bne.n	8002864 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0310 	and.w	r3, r3, #16
 8002860:	2b00      	cmp	r3, #0
 8002862:	d036      	beq.n	80028d2 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8002864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800286c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800286e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002870:	f3bf 8f5f 	dmb	sy
}
 8002874:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800287e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002880:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002882:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002884:	3301      	adds	r3, #1
 8002886:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002888:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800288a:	2b03      	cmp	r3, #3
 800288c:	d902      	bls.n	8002894 <ETH_Prepare_Tx_Descriptors+0x160>
 800288e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002890:	3b04      	subs	r3, #4
 8002892:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002896:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800289c:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
 800289e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028a0:	3301      	adds	r3, #1
 80028a2:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80028a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80028ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80028b0:	d10f      	bne.n	80028d2 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80028b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b4:	6a3a      	ldr	r2, [r7, #32]
 80028b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028ba:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 80028bc:	f3bf 8f5f 	dmb	sy
}
 80028c0:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80028c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80028ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028cc:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 80028ce:	2302      	movs	r3, #2
 80028d0:	e1c3      	b.n	8002c5a <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 80028d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028d4:	3301      	adds	r3, #1
 80028d6:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80028d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	461a      	mov	r2, r3
 80028de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028e0:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80028e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028e4:	689a      	ldr	r2, [r3, #8]
 80028e6:	4b24      	ldr	r3, [pc, #144]	@ (8002978 <ETH_Prepare_Tx_Descriptors+0x244>)
 80028e8:	4013      	ands	r3, r2
 80028ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028ec:	6852      	ldr	r2, [r2, #4]
 80028ee:	431a      	orrs	r2, r3
 80028f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028f2:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 80028f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d012      	beq.n	8002922 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 80028fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	461a      	mov	r2, r3
 8002908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800290a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800290c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	4b1a      	ldr	r3, [pc, #104]	@ (800297c <ETH_Prepare_Tx_Descriptors+0x248>)
 8002912:	4013      	ands	r3, r2
 8002914:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002916:	6852      	ldr	r2, [r2, #4]
 8002918:	0412      	lsls	r2, r2, #16
 800291a:	431a      	orrs	r2, r3
 800291c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800291e:	609a      	str	r2, [r3, #8]
 8002920:	e008      	b.n	8002934 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002924:	2200      	movs	r2, #0
 8002926:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	4b13      	ldr	r3, [pc, #76]	@ (800297c <ETH_Prepare_Tx_Descriptors+0x248>)
 800292e:	4013      	ands	r3, r2
 8002930:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002932:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0310 	and.w	r3, r3, #16
 800293c:	2b00      	cmp	r3, #0
 800293e:	d021      	beq.n	8002984 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8002940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	6a1b      	ldr	r3, [r3, #32]
 800294c:	04db      	lsls	r3, r3, #19
 800294e:	431a      	orrs	r2, r3
 8002950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002952:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002956:	68da      	ldr	r2, [r3, #12]
 8002958:	4b09      	ldr	r3, [pc, #36]	@ (8002980 <ETH_Prepare_Tx_Descriptors+0x24c>)
 800295a:	4013      	ands	r3, r2
 800295c:	68ba      	ldr	r2, [r7, #8]
 800295e:	69d2      	ldr	r2, [r2, #28]
 8002960:	431a      	orrs	r2, r3
 8002962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002964:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800296e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002970:	60da      	str	r2, [r3, #12]
 8002972:	e02e      	b.n	80029d2 <ETH_Prepare_Tx_Descriptors+0x29e>
 8002974:	ffff0000 	.word	0xffff0000
 8002978:	ffffc000 	.word	0xffffc000
 800297c:	c000ffff 	.word	0xc000ffff
 8002980:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002986:	68da      	ldr	r2, [r3, #12]
 8002988:	4b7b      	ldr	r3, [pc, #492]	@ (8002b78 <ETH_Prepare_Tx_Descriptors+0x444>)
 800298a:	4013      	ands	r3, r2
 800298c:	68ba      	ldr	r2, [r7, #8]
 800298e:	6852      	ldr	r2, [r2, #4]
 8002990:	431a      	orrs	r2, r3
 8002992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002994:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d008      	beq.n	80029b4 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80029a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	431a      	orrs	r2, r3
 80029b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029b2:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0320 	and.w	r3, r3, #32
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d008      	beq.n	80029d2 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 80029c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	431a      	orrs	r2, r3
 80029ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029d0:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0304 	and.w	r3, r3, #4
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d008      	beq.n	80029f0 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 80029de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ea:	431a      	orrs	r2, r3
 80029ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ee:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80029f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80029f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029fa:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80029fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a06:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002a08:	f3bf 8f5f 	dmb	sy
}
 8002a0c:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a18:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f000 80da 	beq.w	8002bdc <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8002a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	431a      	orrs	r2, r3
 8002a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a38:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002a3a:	e0cf      	b.n	8002bdc <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a46:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002a48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a50:	2b03      	cmp	r3, #3
 8002a52:	d902      	bls.n	8002a5a <ETH_Prepare_Tx_Descriptors+0x326>
 8002a54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a56:	3b04      	subs	r3, #4
 8002a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002a5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a62:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a6e:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8002a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002a78:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002a7c:	d007      	beq.n	8002a8e <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002a7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a82:	3304      	adds	r3, #4
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4413      	add	r3, r2
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d029      	beq.n	8002ae2 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8002a8e:	6a3b      	ldr	r3, [r7, #32]
 8002a90:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a94:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002a96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a9a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002aa0:	e019      	b.n	8002ad6 <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8002aa2:	f3bf 8f5f 	dmb	sy
}
 8002aa6:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ab2:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002ab4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002aba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002abc:	2b03      	cmp	r3, #3
 8002abe:	d902      	bls.n	8002ac6 <ETH_Prepare_Tx_Descriptors+0x392>
 8002ac0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ac2:	3b04      	subs	r3, #4
 8002ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002aca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ace:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8002ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ad6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002ad8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d3e1      	bcc.n	8002aa2 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8002ade:	2302      	movs	r3, #2
 8002ae0:	e0bb      	b.n	8002c5a <ETH_Prepare_Tx_Descriptors+0x526>
    }

    descnbr += 1U;
 8002ae2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002aee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	461a      	mov	r2, r3
 8002af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002af6:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002afa:	689a      	ldr	r2, [r3, #8]
 8002afc:	4b1f      	ldr	r3, [pc, #124]	@ (8002b7c <ETH_Prepare_Tx_Descriptors+0x448>)
 8002afe:	4013      	ands	r3, r2
 8002b00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b02:	6852      	ldr	r2, [r2, #4]
 8002b04:	431a      	orrs	r2, r3
 8002b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b08:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8002b0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d012      	beq.n	8002b38 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8002b12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b20:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b24:	689a      	ldr	r2, [r3, #8]
 8002b26:	4b16      	ldr	r3, [pc, #88]	@ (8002b80 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8002b28:	4013      	ands	r3, r2
 8002b2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b2c:	6852      	ldr	r2, [r2, #4]
 8002b2e:	0412      	lsls	r2, r2, #16
 8002b30:	431a      	orrs	r2, r3
 8002b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b34:	609a      	str	r2, [r3, #8]
 8002b36:	e008      	b.n	8002b4a <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b40:	689a      	ldr	r2, [r3, #8]
 8002b42:	4b0f      	ldr	r3, [pc, #60]	@ (8002b80 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8002b44:	4013      	ands	r3, r2
 8002b46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b48:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0310 	and.w	r3, r3, #16
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d018      	beq.n	8002b88 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b58:	68da      	ldr	r2, [r3, #12]
 8002b5a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b84 <ETH_Prepare_Tx_Descriptors+0x450>)
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	68ba      	ldr	r2, [r7, #8]
 8002b60:	69d2      	ldr	r2, [r2, #28]
 8002b62:	431a      	orrs	r2, r3
 8002b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b66:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b72:	60da      	str	r2, [r3, #12]
 8002b74:	e020      	b.n	8002bb8 <ETH_Prepare_Tx_Descriptors+0x484>
 8002b76:	bf00      	nop
 8002b78:	ffff8000 	.word	0xffff8000
 8002b7c:	ffffc000 	.word	0xffffc000
 8002b80:	c000ffff 	.word	0xc000ffff
 8002b84:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b8a:	68da      	ldr	r2, [r3, #12]
 8002b8c:	4b36      	ldr	r3, [pc, #216]	@ (8002c68 <ETH_Prepare_Tx_Descriptors+0x534>)
 8002b8e:	4013      	ands	r3, r2
 8002b90:	68ba      	ldr	r2, [r7, #8]
 8002b92:	6852      	ldr	r2, [r2, #4]
 8002b94:	431a      	orrs	r2, r3
 8002b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b98:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d008      	beq.n	8002bb8 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bb6:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8002bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bba:	3301      	adds	r3, #1
 8002bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8002bbe:	f3bf 8f5f 	dmb	sy
}
 8002bc2:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bce:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bda:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8002bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f47f af2b 	bne.w	8002a3c <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d006      	beq.n	8002bfa <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bf6:	609a      	str	r2, [r3, #8]
 8002bf8:	e005      	b.n	8002c06 <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c04:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c10:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c16:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c1a:	3304      	adds	r3, #4
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	440b      	add	r3, r1
 8002c20:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c24:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c26:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c28:	f3ef 8310 	mrs	r3, PRIMASK
 8002c2c:	613b      	str	r3, [r7, #16]
  return(result);
 8002c2e:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8002c30:	61fb      	str	r3, [r7, #28]
 8002c32:	2301      	movs	r3, #1
 8002c34:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	f383 8810 	msr	PRIMASK, r3
}
 8002c3c:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c40:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c44:	4413      	add	r3, r2
 8002c46:	1c5a      	adds	r2, r3, #1
 8002c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c4a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	f383 8810 	msr	PRIMASK, r3
}
 8002c56:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3744      	adds	r7, #68	@ 0x44
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	ffff8000 	.word	0xffff8000

08002c6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b089      	sub	sp, #36	@ 0x24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002c76:	2300      	movs	r3, #0
 8002c78:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002c7a:	4b86      	ldr	r3, [pc, #536]	@ (8002e94 <HAL_GPIO_Init+0x228>)
 8002c7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002c7e:	e18c      	b.n	8002f9a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	2101      	movs	r1, #1
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	fa01 f303 	lsl.w	r3, r1, r3
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f000 817e 	beq.w	8002f94 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f003 0303 	and.w	r3, r3, #3
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d005      	beq.n	8002cb0 <HAL_GPIO_Init+0x44>
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f003 0303 	and.w	r3, r3, #3
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d130      	bne.n	8002d12 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	2203      	movs	r2, #3
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	68da      	ldr	r2, [r3, #12]
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	005b      	lsls	r3, r3, #1
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	fa02 f303 	lsl.w	r3, r2, r3
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	091b      	lsrs	r3, r3, #4
 8002cfc:	f003 0201 	and.w	r2, r3, #1
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	fa02 f303 	lsl.w	r3, r2, r3
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f003 0303 	and.w	r3, r3, #3
 8002d1a:	2b03      	cmp	r3, #3
 8002d1c:	d017      	beq.n	8002d4e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	2203      	movs	r2, #3
 8002d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2e:	43db      	mvns	r3, r3
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	4013      	ands	r3, r2
 8002d34:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	689a      	ldr	r2, [r3, #8]
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f003 0303 	and.w	r3, r3, #3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d123      	bne.n	8002da2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	08da      	lsrs	r2, r3, #3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	3208      	adds	r2, #8
 8002d62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	f003 0307 	and.w	r3, r3, #7
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	220f      	movs	r2, #15
 8002d72:	fa02 f303 	lsl.w	r3, r2, r3
 8002d76:	43db      	mvns	r3, r3
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	691a      	ldr	r2, [r3, #16]
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	f003 0307 	and.w	r3, r3, #7
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	08da      	lsrs	r2, r3, #3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	3208      	adds	r2, #8
 8002d9c:	69b9      	ldr	r1, [r7, #24]
 8002d9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	2203      	movs	r2, #3
 8002dae:	fa02 f303 	lsl.w	r3, r2, r3
 8002db2:	43db      	mvns	r3, r3
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	4013      	ands	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f003 0203 	and.w	r2, r3, #3
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f000 80d8 	beq.w	8002f94 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002de4:	4b2c      	ldr	r3, [pc, #176]	@ (8002e98 <HAL_GPIO_Init+0x22c>)
 8002de6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002dea:	4a2b      	ldr	r2, [pc, #172]	@ (8002e98 <HAL_GPIO_Init+0x22c>)
 8002dec:	f043 0302 	orr.w	r3, r3, #2
 8002df0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002df4:	4b28      	ldr	r3, [pc, #160]	@ (8002e98 <HAL_GPIO_Init+0x22c>)
 8002df6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	60fb      	str	r3, [r7, #12]
 8002e00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e02:	4a26      	ldr	r2, [pc, #152]	@ (8002e9c <HAL_GPIO_Init+0x230>)
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	089b      	lsrs	r3, r3, #2
 8002e08:	3302      	adds	r3, #2
 8002e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	f003 0303 	and.w	r3, r3, #3
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	220f      	movs	r2, #15
 8002e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1e:	43db      	mvns	r3, r3
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	4013      	ands	r3, r2
 8002e24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a1d      	ldr	r2, [pc, #116]	@ (8002ea0 <HAL_GPIO_Init+0x234>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d04a      	beq.n	8002ec4 <HAL_GPIO_Init+0x258>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a1c      	ldr	r2, [pc, #112]	@ (8002ea4 <HAL_GPIO_Init+0x238>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d02b      	beq.n	8002e8e <HAL_GPIO_Init+0x222>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a1b      	ldr	r2, [pc, #108]	@ (8002ea8 <HAL_GPIO_Init+0x23c>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d025      	beq.n	8002e8a <HAL_GPIO_Init+0x21e>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a1a      	ldr	r2, [pc, #104]	@ (8002eac <HAL_GPIO_Init+0x240>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d01f      	beq.n	8002e86 <HAL_GPIO_Init+0x21a>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a19      	ldr	r2, [pc, #100]	@ (8002eb0 <HAL_GPIO_Init+0x244>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d019      	beq.n	8002e82 <HAL_GPIO_Init+0x216>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a18      	ldr	r2, [pc, #96]	@ (8002eb4 <HAL_GPIO_Init+0x248>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d013      	beq.n	8002e7e <HAL_GPIO_Init+0x212>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a17      	ldr	r2, [pc, #92]	@ (8002eb8 <HAL_GPIO_Init+0x24c>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d00d      	beq.n	8002e7a <HAL_GPIO_Init+0x20e>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a16      	ldr	r2, [pc, #88]	@ (8002ebc <HAL_GPIO_Init+0x250>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d007      	beq.n	8002e76 <HAL_GPIO_Init+0x20a>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a15      	ldr	r2, [pc, #84]	@ (8002ec0 <HAL_GPIO_Init+0x254>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d101      	bne.n	8002e72 <HAL_GPIO_Init+0x206>
 8002e6e:	2309      	movs	r3, #9
 8002e70:	e029      	b.n	8002ec6 <HAL_GPIO_Init+0x25a>
 8002e72:	230a      	movs	r3, #10
 8002e74:	e027      	b.n	8002ec6 <HAL_GPIO_Init+0x25a>
 8002e76:	2307      	movs	r3, #7
 8002e78:	e025      	b.n	8002ec6 <HAL_GPIO_Init+0x25a>
 8002e7a:	2306      	movs	r3, #6
 8002e7c:	e023      	b.n	8002ec6 <HAL_GPIO_Init+0x25a>
 8002e7e:	2305      	movs	r3, #5
 8002e80:	e021      	b.n	8002ec6 <HAL_GPIO_Init+0x25a>
 8002e82:	2304      	movs	r3, #4
 8002e84:	e01f      	b.n	8002ec6 <HAL_GPIO_Init+0x25a>
 8002e86:	2303      	movs	r3, #3
 8002e88:	e01d      	b.n	8002ec6 <HAL_GPIO_Init+0x25a>
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	e01b      	b.n	8002ec6 <HAL_GPIO_Init+0x25a>
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e019      	b.n	8002ec6 <HAL_GPIO_Init+0x25a>
 8002e92:	bf00      	nop
 8002e94:	58000080 	.word	0x58000080
 8002e98:	58024400 	.word	0x58024400
 8002e9c:	58000400 	.word	0x58000400
 8002ea0:	58020000 	.word	0x58020000
 8002ea4:	58020400 	.word	0x58020400
 8002ea8:	58020800 	.word	0x58020800
 8002eac:	58020c00 	.word	0x58020c00
 8002eb0:	58021000 	.word	0x58021000
 8002eb4:	58021400 	.word	0x58021400
 8002eb8:	58021800 	.word	0x58021800
 8002ebc:	58021c00 	.word	0x58021c00
 8002ec0:	58022400 	.word	0x58022400
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	69fa      	ldr	r2, [r7, #28]
 8002ec8:	f002 0203 	and.w	r2, r2, #3
 8002ecc:	0092      	lsls	r2, r2, #2
 8002ece:	4093      	lsls	r3, r2
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ed6:	4938      	ldr	r1, [pc, #224]	@ (8002fb8 <HAL_GPIO_Init+0x34c>)
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	089b      	lsrs	r3, r3, #2
 8002edc:	3302      	adds	r3, #2
 8002ede:	69ba      	ldr	r2, [r7, #24]
 8002ee0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ee4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	43db      	mvns	r3, r3
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002f0a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002f12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	43db      	mvns	r3, r3
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	4013      	ands	r3, r2
 8002f22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d003      	beq.n	8002f38 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002f38:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d003      	beq.n	8002f64 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	43db      	mvns	r3, r3
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	4013      	ands	r3, r2
 8002f78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	3301      	adds	r3, #1
 8002f98:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f47f ae6b 	bne.w	8002c80 <HAL_GPIO_Init+0x14>
  }
}
 8002faa:	bf00      	nop
 8002fac:	bf00      	nop
 8002fae:	3724      	adds	r7, #36	@ 0x24
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr
 8002fb8:	58000400 	.word	0x58000400

08002fbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	807b      	strh	r3, [r7, #2]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fcc:	787b      	ldrb	r3, [r7, #1]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fd2:	887a      	ldrh	r2, [r7, #2]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002fd8:	e003      	b.n	8002fe2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002fda:	887b      	ldrh	r3, [r7, #2]
 8002fdc:	041a      	lsls	r2, r3, #16
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	619a      	str	r2, [r3, #24]
}
 8002fe2:	bf00      	nop
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr

08002fee <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002fee:	b480      	push	{r7}
 8002ff0:	b085      	sub	sp, #20
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003000:	887a      	ldrh	r2, [r7, #2]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	4013      	ands	r3, r2
 8003006:	041a      	lsls	r2, r3, #16
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	43d9      	mvns	r1, r3
 800300c:	887b      	ldrh	r3, [r7, #2]
 800300e:	400b      	ands	r3, r1
 8003010:	431a      	orrs	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	619a      	str	r2, [r3, #24]
}
 8003016:	bf00      	nop
 8003018:	3714      	adds	r7, #20
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
	...

08003024 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800302c:	4b29      	ldr	r3, [pc, #164]	@ (80030d4 <HAL_PWREx_ConfigSupply+0xb0>)
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	f003 0307 	and.w	r3, r3, #7
 8003034:	2b06      	cmp	r3, #6
 8003036:	d00a      	beq.n	800304e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003038:	4b26      	ldr	r3, [pc, #152]	@ (80030d4 <HAL_PWREx_ConfigSupply+0xb0>)
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	429a      	cmp	r2, r3
 8003044:	d001      	beq.n	800304a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e03f      	b.n	80030ca <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800304a:	2300      	movs	r3, #0
 800304c:	e03d      	b.n	80030ca <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800304e:	4b21      	ldr	r3, [pc, #132]	@ (80030d4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8003056:	491f      	ldr	r1, [pc, #124]	@ (80030d4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4313      	orrs	r3, r2
 800305c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800305e:	f7fd ff25 	bl	8000eac <HAL_GetTick>
 8003062:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003064:	e009      	b.n	800307a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003066:	f7fd ff21 	bl	8000eac <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003074:	d901      	bls.n	800307a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e027      	b.n	80030ca <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800307a:	4b16      	ldr	r3, [pc, #88]	@ (80030d4 <HAL_PWREx_ConfigSupply+0xb0>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003082:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003086:	d1ee      	bne.n	8003066 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b1e      	cmp	r3, #30
 800308c:	d008      	beq.n	80030a0 <HAL_PWREx_ConfigSupply+0x7c>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b2e      	cmp	r3, #46	@ 0x2e
 8003092:	d005      	beq.n	80030a0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b1d      	cmp	r3, #29
 8003098:	d002      	beq.n	80030a0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2b2d      	cmp	r3, #45	@ 0x2d
 800309e:	d113      	bne.n	80030c8 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80030a0:	f7fd ff04 	bl	8000eac <HAL_GetTick>
 80030a4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80030a6:	e009      	b.n	80030bc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80030a8:	f7fd ff00 	bl	8000eac <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80030b6:	d901      	bls.n	80030bc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e006      	b.n	80030ca <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80030bc:	4b05      	ldr	r3, [pc, #20]	@ (80030d4 <HAL_PWREx_ConfigSupply+0xb0>)
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	f003 0311 	and.w	r3, r3, #17
 80030c4:	2b11      	cmp	r3, #17
 80030c6:	d1ef      	bne.n	80030a8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	58024800 	.word	0x58024800

080030d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b08c      	sub	sp, #48	@ 0x30
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e3c8      	b.n	800387c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f000 8087 	beq.w	8003206 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030f8:	4b88      	ldr	r3, [pc, #544]	@ (800331c <HAL_RCC_OscConfig+0x244>)
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003100:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003102:	4b86      	ldr	r3, [pc, #536]	@ (800331c <HAL_RCC_OscConfig+0x244>)
 8003104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003106:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800310a:	2b10      	cmp	r3, #16
 800310c:	d007      	beq.n	800311e <HAL_RCC_OscConfig+0x46>
 800310e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003110:	2b18      	cmp	r3, #24
 8003112:	d110      	bne.n	8003136 <HAL_RCC_OscConfig+0x5e>
 8003114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003116:	f003 0303 	and.w	r3, r3, #3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d10b      	bne.n	8003136 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800311e:	4b7f      	ldr	r3, [pc, #508]	@ (800331c <HAL_RCC_OscConfig+0x244>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d06c      	beq.n	8003204 <HAL_RCC_OscConfig+0x12c>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d168      	bne.n	8003204 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e3a2      	b.n	800387c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800313e:	d106      	bne.n	800314e <HAL_RCC_OscConfig+0x76>
 8003140:	4b76      	ldr	r3, [pc, #472]	@ (800331c <HAL_RCC_OscConfig+0x244>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a75      	ldr	r2, [pc, #468]	@ (800331c <HAL_RCC_OscConfig+0x244>)
 8003146:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800314a:	6013      	str	r3, [r2, #0]
 800314c:	e02e      	b.n	80031ac <HAL_RCC_OscConfig+0xd4>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10c      	bne.n	8003170 <HAL_RCC_OscConfig+0x98>
 8003156:	4b71      	ldr	r3, [pc, #452]	@ (800331c <HAL_RCC_OscConfig+0x244>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a70      	ldr	r2, [pc, #448]	@ (800331c <HAL_RCC_OscConfig+0x244>)
 800315c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003160:	6013      	str	r3, [r2, #0]
 8003162:	4b6e      	ldr	r3, [pc, #440]	@ (800331c <HAL_RCC_OscConfig+0x244>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a6d      	ldr	r2, [pc, #436]	@ (800331c <HAL_RCC_OscConfig+0x244>)
 8003168:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800316c:	6013      	str	r3, [r2, #0]
 800316e:	e01d      	b.n	80031ac <HAL_RCC_OscConfig+0xd4>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003178:	d10c      	bne.n	8003194 <HAL_RCC_OscConfig+0xbc>
 800317a:	4b68      	ldr	r3, [pc, #416]	@ (800331c <HAL_RCC_OscConfig+0x244>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a67      	ldr	r2, [pc, #412]	@ (800331c <HAL_RCC_OscConfig+0x244>)
 8003180:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003184:	6013      	str	r3, [r2, #0]
 8003186:	4b65      	ldr	r3, [pc, #404]	@ (800331c <HAL_RCC_OscConfig+0x244>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a64      	ldr	r2, [pc, #400]	@ (800331c <HAL_RCC_OscConfig+0x244>)
 800318c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003190:	6013      	str	r3, [r2, #0]
 8003192:	e00b      	b.n	80031ac <HAL_RCC_OscConfig+0xd4>
 8003194:	4b61      	ldr	r3, [pc, #388]	@ (800331c <HAL_RCC_OscConfig+0x244>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a60      	ldr	r2, [pc, #384]	@ (800331c <HAL_RCC_OscConfig+0x244>)
 800319a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800319e:	6013      	str	r3, [r2, #0]
 80031a0:	4b5e      	ldr	r3, [pc, #376]	@ (800331c <HAL_RCC_OscConfig+0x244>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a5d      	ldr	r2, [pc, #372]	@ (800331c <HAL_RCC_OscConfig+0x244>)
 80031a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d013      	beq.n	80031dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b4:	f7fd fe7a 	bl	8000eac <HAL_GetTick>
 80031b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80031ba:	e008      	b.n	80031ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031bc:	f7fd fe76 	bl	8000eac <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b64      	cmp	r3, #100	@ 0x64
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e356      	b.n	800387c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80031ce:	4b53      	ldr	r3, [pc, #332]	@ (800331c <HAL_RCC_OscConfig+0x244>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d0f0      	beq.n	80031bc <HAL_RCC_OscConfig+0xe4>
 80031da:	e014      	b.n	8003206 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031dc:	f7fd fe66 	bl	8000eac <HAL_GetTick>
 80031e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031e4:	f7fd fe62 	bl	8000eac <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b64      	cmp	r3, #100	@ 0x64
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e342      	b.n	800387c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80031f6:	4b49      	ldr	r3, [pc, #292]	@ (800331c <HAL_RCC_OscConfig+0x244>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1f0      	bne.n	80031e4 <HAL_RCC_OscConfig+0x10c>
 8003202:	e000      	b.n	8003206 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003204:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	f000 808c 	beq.w	800332c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003214:	4b41      	ldr	r3, [pc, #260]	@ (800331c <HAL_RCC_OscConfig+0x244>)
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800321c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800321e:	4b3f      	ldr	r3, [pc, #252]	@ (800331c <HAL_RCC_OscConfig+0x244>)
 8003220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003222:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003224:	6a3b      	ldr	r3, [r7, #32]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d007      	beq.n	800323a <HAL_RCC_OscConfig+0x162>
 800322a:	6a3b      	ldr	r3, [r7, #32]
 800322c:	2b18      	cmp	r3, #24
 800322e:	d137      	bne.n	80032a0 <HAL_RCC_OscConfig+0x1c8>
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	f003 0303 	and.w	r3, r3, #3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d132      	bne.n	80032a0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800323a:	4b38      	ldr	r3, [pc, #224]	@ (800331c <HAL_RCC_OscConfig+0x244>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0304 	and.w	r3, r3, #4
 8003242:	2b00      	cmp	r3, #0
 8003244:	d005      	beq.n	8003252 <HAL_RCC_OscConfig+0x17a>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e314      	b.n	800387c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003252:	4b32      	ldr	r3, [pc, #200]	@ (800331c <HAL_RCC_OscConfig+0x244>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f023 0219 	bic.w	r2, r3, #25
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	492f      	ldr	r1, [pc, #188]	@ (800331c <HAL_RCC_OscConfig+0x244>)
 8003260:	4313      	orrs	r3, r2
 8003262:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003264:	f7fd fe22 	bl	8000eac <HAL_GetTick>
 8003268:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800326a:	e008      	b.n	800327e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800326c:	f7fd fe1e 	bl	8000eac <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b02      	cmp	r3, #2
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e2fe      	b.n	800387c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800327e:	4b27      	ldr	r3, [pc, #156]	@ (800331c <HAL_RCC_OscConfig+0x244>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0304 	and.w	r3, r3, #4
 8003286:	2b00      	cmp	r3, #0
 8003288:	d0f0      	beq.n	800326c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800328a:	4b24      	ldr	r3, [pc, #144]	@ (800331c <HAL_RCC_OscConfig+0x244>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	061b      	lsls	r3, r3, #24
 8003298:	4920      	ldr	r1, [pc, #128]	@ (800331c <HAL_RCC_OscConfig+0x244>)
 800329a:	4313      	orrs	r3, r2
 800329c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800329e:	e045      	b.n	800332c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d026      	beq.n	80032f6 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80032a8:	4b1c      	ldr	r3, [pc, #112]	@ (800331c <HAL_RCC_OscConfig+0x244>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f023 0219 	bic.w	r2, r3, #25
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	4919      	ldr	r1, [pc, #100]	@ (800331c <HAL_RCC_OscConfig+0x244>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ba:	f7fd fdf7 	bl	8000eac <HAL_GetTick>
 80032be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032c0:	e008      	b.n	80032d4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032c2:	f7fd fdf3 	bl	8000eac <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e2d3      	b.n	800387c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032d4:	4b11      	ldr	r3, [pc, #68]	@ (800331c <HAL_RCC_OscConfig+0x244>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0304 	and.w	r3, r3, #4
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0f0      	beq.n	80032c2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032e0:	4b0e      	ldr	r3, [pc, #56]	@ (800331c <HAL_RCC_OscConfig+0x244>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	061b      	lsls	r3, r3, #24
 80032ee:	490b      	ldr	r1, [pc, #44]	@ (800331c <HAL_RCC_OscConfig+0x244>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	604b      	str	r3, [r1, #4]
 80032f4:	e01a      	b.n	800332c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032f6:	4b09      	ldr	r3, [pc, #36]	@ (800331c <HAL_RCC_OscConfig+0x244>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a08      	ldr	r2, [pc, #32]	@ (800331c <HAL_RCC_OscConfig+0x244>)
 80032fc:	f023 0301 	bic.w	r3, r3, #1
 8003300:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003302:	f7fd fdd3 	bl	8000eac <HAL_GetTick>
 8003306:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003308:	e00a      	b.n	8003320 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800330a:	f7fd fdcf 	bl	8000eac <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d903      	bls.n	8003320 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e2af      	b.n	800387c <HAL_RCC_OscConfig+0x7a4>
 800331c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003320:	4b96      	ldr	r3, [pc, #600]	@ (800357c <HAL_RCC_OscConfig+0x4a4>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0304 	and.w	r3, r3, #4
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1ee      	bne.n	800330a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0310 	and.w	r3, r3, #16
 8003334:	2b00      	cmp	r3, #0
 8003336:	d06a      	beq.n	800340e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003338:	4b90      	ldr	r3, [pc, #576]	@ (800357c <HAL_RCC_OscConfig+0x4a4>)
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003340:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003342:	4b8e      	ldr	r3, [pc, #568]	@ (800357c <HAL_RCC_OscConfig+0x4a4>)
 8003344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003346:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	2b08      	cmp	r3, #8
 800334c:	d007      	beq.n	800335e <HAL_RCC_OscConfig+0x286>
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	2b18      	cmp	r3, #24
 8003352:	d11b      	bne.n	800338c <HAL_RCC_OscConfig+0x2b4>
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	f003 0303 	and.w	r3, r3, #3
 800335a:	2b01      	cmp	r3, #1
 800335c:	d116      	bne.n	800338c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800335e:	4b87      	ldr	r3, [pc, #540]	@ (800357c <HAL_RCC_OscConfig+0x4a4>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003366:	2b00      	cmp	r3, #0
 8003368:	d005      	beq.n	8003376 <HAL_RCC_OscConfig+0x29e>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	69db      	ldr	r3, [r3, #28]
 800336e:	2b80      	cmp	r3, #128	@ 0x80
 8003370:	d001      	beq.n	8003376 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e282      	b.n	800387c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003376:	4b81      	ldr	r3, [pc, #516]	@ (800357c <HAL_RCC_OscConfig+0x4a4>)
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	061b      	lsls	r3, r3, #24
 8003384:	497d      	ldr	r1, [pc, #500]	@ (800357c <HAL_RCC_OscConfig+0x4a4>)
 8003386:	4313      	orrs	r3, r2
 8003388:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800338a:	e040      	b.n	800340e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	69db      	ldr	r3, [r3, #28]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d023      	beq.n	80033dc <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003394:	4b79      	ldr	r3, [pc, #484]	@ (800357c <HAL_RCC_OscConfig+0x4a4>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a78      	ldr	r2, [pc, #480]	@ (800357c <HAL_RCC_OscConfig+0x4a4>)
 800339a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800339e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a0:	f7fd fd84 	bl	8000eac <HAL_GetTick>
 80033a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80033a8:	f7fd fd80 	bl	8000eac <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e260      	b.n	800387c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80033ba:	4b70      	ldr	r3, [pc, #448]	@ (800357c <HAL_RCC_OscConfig+0x4a4>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d0f0      	beq.n	80033a8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80033c6:	4b6d      	ldr	r3, [pc, #436]	@ (800357c <HAL_RCC_OscConfig+0x4a4>)
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	061b      	lsls	r3, r3, #24
 80033d4:	4969      	ldr	r1, [pc, #420]	@ (800357c <HAL_RCC_OscConfig+0x4a4>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	60cb      	str	r3, [r1, #12]
 80033da:	e018      	b.n	800340e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80033dc:	4b67      	ldr	r3, [pc, #412]	@ (800357c <HAL_RCC_OscConfig+0x4a4>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a66      	ldr	r2, [pc, #408]	@ (800357c <HAL_RCC_OscConfig+0x4a4>)
 80033e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e8:	f7fd fd60 	bl	8000eac <HAL_GetTick>
 80033ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80033f0:	f7fd fd5c 	bl	8000eac <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e23c      	b.n	800387c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003402:	4b5e      	ldr	r3, [pc, #376]	@ (800357c <HAL_RCC_OscConfig+0x4a4>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1f0      	bne.n	80033f0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0308 	and.w	r3, r3, #8
 8003416:	2b00      	cmp	r3, #0
 8003418:	d036      	beq.n	8003488 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d019      	beq.n	8003456 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003422:	4b56      	ldr	r3, [pc, #344]	@ (800357c <HAL_RCC_OscConfig+0x4a4>)
 8003424:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003426:	4a55      	ldr	r2, [pc, #340]	@ (800357c <HAL_RCC_OscConfig+0x4a4>)
 8003428:	f043 0301 	orr.w	r3, r3, #1
 800342c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800342e:	f7fd fd3d 	bl	8000eac <HAL_GetTick>
 8003432:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003434:	e008      	b.n	8003448 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003436:	f7fd fd39 	bl	8000eac <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	2b02      	cmp	r3, #2
 8003442:	d901      	bls.n	8003448 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e219      	b.n	800387c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003448:	4b4c      	ldr	r3, [pc, #304]	@ (800357c <HAL_RCC_OscConfig+0x4a4>)
 800344a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800344c:	f003 0302 	and.w	r3, r3, #2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d0f0      	beq.n	8003436 <HAL_RCC_OscConfig+0x35e>
 8003454:	e018      	b.n	8003488 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003456:	4b49      	ldr	r3, [pc, #292]	@ (800357c <HAL_RCC_OscConfig+0x4a4>)
 8003458:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800345a:	4a48      	ldr	r2, [pc, #288]	@ (800357c <HAL_RCC_OscConfig+0x4a4>)
 800345c:	f023 0301 	bic.w	r3, r3, #1
 8003460:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003462:	f7fd fd23 	bl	8000eac <HAL_GetTick>
 8003466:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003468:	e008      	b.n	800347c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800346a:	f7fd fd1f 	bl	8000eac <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d901      	bls.n	800347c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e1ff      	b.n	800387c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800347c:	4b3f      	ldr	r3, [pc, #252]	@ (800357c <HAL_RCC_OscConfig+0x4a4>)
 800347e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d1f0      	bne.n	800346a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0320 	and.w	r3, r3, #32
 8003490:	2b00      	cmp	r3, #0
 8003492:	d036      	beq.n	8003502 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d019      	beq.n	80034d0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800349c:	4b37      	ldr	r3, [pc, #220]	@ (800357c <HAL_RCC_OscConfig+0x4a4>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a36      	ldr	r2, [pc, #216]	@ (800357c <HAL_RCC_OscConfig+0x4a4>)
 80034a2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80034a6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80034a8:	f7fd fd00 	bl	8000eac <HAL_GetTick>
 80034ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80034ae:	e008      	b.n	80034c2 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034b0:	f7fd fcfc 	bl	8000eac <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e1dc      	b.n	800387c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80034c2:	4b2e      	ldr	r3, [pc, #184]	@ (800357c <HAL_RCC_OscConfig+0x4a4>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d0f0      	beq.n	80034b0 <HAL_RCC_OscConfig+0x3d8>
 80034ce:	e018      	b.n	8003502 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80034d0:	4b2a      	ldr	r3, [pc, #168]	@ (800357c <HAL_RCC_OscConfig+0x4a4>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a29      	ldr	r2, [pc, #164]	@ (800357c <HAL_RCC_OscConfig+0x4a4>)
 80034d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80034da:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80034dc:	f7fd fce6 	bl	8000eac <HAL_GetTick>
 80034e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80034e2:	e008      	b.n	80034f6 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034e4:	f7fd fce2 	bl	8000eac <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e1c2      	b.n	800387c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80034f6:	4b21      	ldr	r3, [pc, #132]	@ (800357c <HAL_RCC_OscConfig+0x4a4>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1f0      	bne.n	80034e4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0304 	and.w	r3, r3, #4
 800350a:	2b00      	cmp	r3, #0
 800350c:	f000 8086 	beq.w	800361c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003510:	4b1b      	ldr	r3, [pc, #108]	@ (8003580 <HAL_RCC_OscConfig+0x4a8>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a1a      	ldr	r2, [pc, #104]	@ (8003580 <HAL_RCC_OscConfig+0x4a8>)
 8003516:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800351a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800351c:	f7fd fcc6 	bl	8000eac <HAL_GetTick>
 8003520:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003522:	e008      	b.n	8003536 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003524:	f7fd fcc2 	bl	8000eac <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b64      	cmp	r3, #100	@ 0x64
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e1a2      	b.n	800387c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003536:	4b12      	ldr	r3, [pc, #72]	@ (8003580 <HAL_RCC_OscConfig+0x4a8>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800353e:	2b00      	cmp	r3, #0
 8003540:	d0f0      	beq.n	8003524 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d106      	bne.n	8003558 <HAL_RCC_OscConfig+0x480>
 800354a:	4b0c      	ldr	r3, [pc, #48]	@ (800357c <HAL_RCC_OscConfig+0x4a4>)
 800354c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800354e:	4a0b      	ldr	r2, [pc, #44]	@ (800357c <HAL_RCC_OscConfig+0x4a4>)
 8003550:	f043 0301 	orr.w	r3, r3, #1
 8003554:	6713      	str	r3, [r2, #112]	@ 0x70
 8003556:	e032      	b.n	80035be <HAL_RCC_OscConfig+0x4e6>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d111      	bne.n	8003584 <HAL_RCC_OscConfig+0x4ac>
 8003560:	4b06      	ldr	r3, [pc, #24]	@ (800357c <HAL_RCC_OscConfig+0x4a4>)
 8003562:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003564:	4a05      	ldr	r2, [pc, #20]	@ (800357c <HAL_RCC_OscConfig+0x4a4>)
 8003566:	f023 0301 	bic.w	r3, r3, #1
 800356a:	6713      	str	r3, [r2, #112]	@ 0x70
 800356c:	4b03      	ldr	r3, [pc, #12]	@ (800357c <HAL_RCC_OscConfig+0x4a4>)
 800356e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003570:	4a02      	ldr	r2, [pc, #8]	@ (800357c <HAL_RCC_OscConfig+0x4a4>)
 8003572:	f023 0304 	bic.w	r3, r3, #4
 8003576:	6713      	str	r3, [r2, #112]	@ 0x70
 8003578:	e021      	b.n	80035be <HAL_RCC_OscConfig+0x4e6>
 800357a:	bf00      	nop
 800357c:	58024400 	.word	0x58024400
 8003580:	58024800 	.word	0x58024800
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	2b05      	cmp	r3, #5
 800358a:	d10c      	bne.n	80035a6 <HAL_RCC_OscConfig+0x4ce>
 800358c:	4b83      	ldr	r3, [pc, #524]	@ (800379c <HAL_RCC_OscConfig+0x6c4>)
 800358e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003590:	4a82      	ldr	r2, [pc, #520]	@ (800379c <HAL_RCC_OscConfig+0x6c4>)
 8003592:	f043 0304 	orr.w	r3, r3, #4
 8003596:	6713      	str	r3, [r2, #112]	@ 0x70
 8003598:	4b80      	ldr	r3, [pc, #512]	@ (800379c <HAL_RCC_OscConfig+0x6c4>)
 800359a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800359c:	4a7f      	ldr	r2, [pc, #508]	@ (800379c <HAL_RCC_OscConfig+0x6c4>)
 800359e:	f043 0301 	orr.w	r3, r3, #1
 80035a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80035a4:	e00b      	b.n	80035be <HAL_RCC_OscConfig+0x4e6>
 80035a6:	4b7d      	ldr	r3, [pc, #500]	@ (800379c <HAL_RCC_OscConfig+0x6c4>)
 80035a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035aa:	4a7c      	ldr	r2, [pc, #496]	@ (800379c <HAL_RCC_OscConfig+0x6c4>)
 80035ac:	f023 0301 	bic.w	r3, r3, #1
 80035b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80035b2:	4b7a      	ldr	r3, [pc, #488]	@ (800379c <HAL_RCC_OscConfig+0x6c4>)
 80035b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035b6:	4a79      	ldr	r2, [pc, #484]	@ (800379c <HAL_RCC_OscConfig+0x6c4>)
 80035b8:	f023 0304 	bic.w	r3, r3, #4
 80035bc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d015      	beq.n	80035f2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c6:	f7fd fc71 	bl	8000eac <HAL_GetTick>
 80035ca:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80035cc:	e00a      	b.n	80035e4 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ce:	f7fd fc6d 	bl	8000eac <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035dc:	4293      	cmp	r3, r2
 80035de:	d901      	bls.n	80035e4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e14b      	b.n	800387c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80035e4:	4b6d      	ldr	r3, [pc, #436]	@ (800379c <HAL_RCC_OscConfig+0x6c4>)
 80035e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d0ee      	beq.n	80035ce <HAL_RCC_OscConfig+0x4f6>
 80035f0:	e014      	b.n	800361c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f2:	f7fd fc5b 	bl	8000eac <HAL_GetTick>
 80035f6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80035f8:	e00a      	b.n	8003610 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035fa:	f7fd fc57 	bl	8000eac <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003608:	4293      	cmp	r3, r2
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e135      	b.n	800387c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003610:	4b62      	ldr	r3, [pc, #392]	@ (800379c <HAL_RCC_OscConfig+0x6c4>)
 8003612:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1ee      	bne.n	80035fa <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 812a 	beq.w	800387a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003626:	4b5d      	ldr	r3, [pc, #372]	@ (800379c <HAL_RCC_OscConfig+0x6c4>)
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800362e:	2b18      	cmp	r3, #24
 8003630:	f000 80ba 	beq.w	80037a8 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003638:	2b02      	cmp	r3, #2
 800363a:	f040 8095 	bne.w	8003768 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800363e:	4b57      	ldr	r3, [pc, #348]	@ (800379c <HAL_RCC_OscConfig+0x6c4>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a56      	ldr	r2, [pc, #344]	@ (800379c <HAL_RCC_OscConfig+0x6c4>)
 8003644:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003648:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800364a:	f7fd fc2f 	bl	8000eac <HAL_GetTick>
 800364e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003650:	e008      	b.n	8003664 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003652:	f7fd fc2b 	bl	8000eac <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	2b02      	cmp	r3, #2
 800365e:	d901      	bls.n	8003664 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e10b      	b.n	800387c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003664:	4b4d      	ldr	r3, [pc, #308]	@ (800379c <HAL_RCC_OscConfig+0x6c4>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d1f0      	bne.n	8003652 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003670:	4b4a      	ldr	r3, [pc, #296]	@ (800379c <HAL_RCC_OscConfig+0x6c4>)
 8003672:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003674:	4b4a      	ldr	r3, [pc, #296]	@ (80037a0 <HAL_RCC_OscConfig+0x6c8>)
 8003676:	4013      	ands	r3, r2
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003680:	0112      	lsls	r2, r2, #4
 8003682:	430a      	orrs	r2, r1
 8003684:	4945      	ldr	r1, [pc, #276]	@ (800379c <HAL_RCC_OscConfig+0x6c4>)
 8003686:	4313      	orrs	r3, r2
 8003688:	628b      	str	r3, [r1, #40]	@ 0x28
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800368e:	3b01      	subs	r3, #1
 8003690:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003698:	3b01      	subs	r3, #1
 800369a:	025b      	lsls	r3, r3, #9
 800369c:	b29b      	uxth	r3, r3
 800369e:	431a      	orrs	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036a4:	3b01      	subs	r3, #1
 80036a6:	041b      	lsls	r3, r3, #16
 80036a8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80036ac:	431a      	orrs	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036b2:	3b01      	subs	r3, #1
 80036b4:	061b      	lsls	r3, r3, #24
 80036b6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80036ba:	4938      	ldr	r1, [pc, #224]	@ (800379c <HAL_RCC_OscConfig+0x6c4>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80036c0:	4b36      	ldr	r3, [pc, #216]	@ (800379c <HAL_RCC_OscConfig+0x6c4>)
 80036c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c4:	4a35      	ldr	r2, [pc, #212]	@ (800379c <HAL_RCC_OscConfig+0x6c4>)
 80036c6:	f023 0301 	bic.w	r3, r3, #1
 80036ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80036cc:	4b33      	ldr	r3, [pc, #204]	@ (800379c <HAL_RCC_OscConfig+0x6c4>)
 80036ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036d0:	4b34      	ldr	r3, [pc, #208]	@ (80037a4 <HAL_RCC_OscConfig+0x6cc>)
 80036d2:	4013      	ands	r3, r2
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80036d8:	00d2      	lsls	r2, r2, #3
 80036da:	4930      	ldr	r1, [pc, #192]	@ (800379c <HAL_RCC_OscConfig+0x6c4>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80036e0:	4b2e      	ldr	r3, [pc, #184]	@ (800379c <HAL_RCC_OscConfig+0x6c4>)
 80036e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e4:	f023 020c 	bic.w	r2, r3, #12
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ec:	492b      	ldr	r1, [pc, #172]	@ (800379c <HAL_RCC_OscConfig+0x6c4>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80036f2:	4b2a      	ldr	r3, [pc, #168]	@ (800379c <HAL_RCC_OscConfig+0x6c4>)
 80036f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036f6:	f023 0202 	bic.w	r2, r3, #2
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036fe:	4927      	ldr	r1, [pc, #156]	@ (800379c <HAL_RCC_OscConfig+0x6c4>)
 8003700:	4313      	orrs	r3, r2
 8003702:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003704:	4b25      	ldr	r3, [pc, #148]	@ (800379c <HAL_RCC_OscConfig+0x6c4>)
 8003706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003708:	4a24      	ldr	r2, [pc, #144]	@ (800379c <HAL_RCC_OscConfig+0x6c4>)
 800370a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800370e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003710:	4b22      	ldr	r3, [pc, #136]	@ (800379c <HAL_RCC_OscConfig+0x6c4>)
 8003712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003714:	4a21      	ldr	r2, [pc, #132]	@ (800379c <HAL_RCC_OscConfig+0x6c4>)
 8003716:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800371a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800371c:	4b1f      	ldr	r3, [pc, #124]	@ (800379c <HAL_RCC_OscConfig+0x6c4>)
 800371e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003720:	4a1e      	ldr	r2, [pc, #120]	@ (800379c <HAL_RCC_OscConfig+0x6c4>)
 8003722:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003726:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003728:	4b1c      	ldr	r3, [pc, #112]	@ (800379c <HAL_RCC_OscConfig+0x6c4>)
 800372a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800372c:	4a1b      	ldr	r2, [pc, #108]	@ (800379c <HAL_RCC_OscConfig+0x6c4>)
 800372e:	f043 0301 	orr.w	r3, r3, #1
 8003732:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003734:	4b19      	ldr	r3, [pc, #100]	@ (800379c <HAL_RCC_OscConfig+0x6c4>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a18      	ldr	r2, [pc, #96]	@ (800379c <HAL_RCC_OscConfig+0x6c4>)
 800373a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800373e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003740:	f7fd fbb4 	bl	8000eac <HAL_GetTick>
 8003744:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003746:	e008      	b.n	800375a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003748:	f7fd fbb0 	bl	8000eac <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e090      	b.n	800387c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800375a:	4b10      	ldr	r3, [pc, #64]	@ (800379c <HAL_RCC_OscConfig+0x6c4>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d0f0      	beq.n	8003748 <HAL_RCC_OscConfig+0x670>
 8003766:	e088      	b.n	800387a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003768:	4b0c      	ldr	r3, [pc, #48]	@ (800379c <HAL_RCC_OscConfig+0x6c4>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a0b      	ldr	r2, [pc, #44]	@ (800379c <HAL_RCC_OscConfig+0x6c4>)
 800376e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003772:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003774:	f7fd fb9a 	bl	8000eac <HAL_GetTick>
 8003778:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800377c:	f7fd fb96 	bl	8000eac <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e076      	b.n	800387c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800378e:	4b03      	ldr	r3, [pc, #12]	@ (800379c <HAL_RCC_OscConfig+0x6c4>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1f0      	bne.n	800377c <HAL_RCC_OscConfig+0x6a4>
 800379a:	e06e      	b.n	800387a <HAL_RCC_OscConfig+0x7a2>
 800379c:	58024400 	.word	0x58024400
 80037a0:	fffffc0c 	.word	0xfffffc0c
 80037a4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80037a8:	4b36      	ldr	r3, [pc, #216]	@ (8003884 <HAL_RCC_OscConfig+0x7ac>)
 80037aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ac:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80037ae:	4b35      	ldr	r3, [pc, #212]	@ (8003884 <HAL_RCC_OscConfig+0x7ac>)
 80037b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d031      	beq.n	8003820 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	f003 0203 	and.w	r2, r3, #3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d12a      	bne.n	8003820 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	091b      	lsrs	r3, r3, #4
 80037ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d122      	bne.n	8003820 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037e4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d11a      	bne.n	8003820 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	0a5b      	lsrs	r3, r3, #9
 80037ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037f6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d111      	bne.n	8003820 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	0c1b      	lsrs	r3, r3, #16
 8003800:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003808:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800380a:	429a      	cmp	r2, r3
 800380c:	d108      	bne.n	8003820 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	0e1b      	lsrs	r3, r3, #24
 8003812:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800381a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800381c:	429a      	cmp	r2, r3
 800381e:	d001      	beq.n	8003824 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e02b      	b.n	800387c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003824:	4b17      	ldr	r3, [pc, #92]	@ (8003884 <HAL_RCC_OscConfig+0x7ac>)
 8003826:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003828:	08db      	lsrs	r3, r3, #3
 800382a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800382e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	429a      	cmp	r2, r3
 8003838:	d01f      	beq.n	800387a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800383a:	4b12      	ldr	r3, [pc, #72]	@ (8003884 <HAL_RCC_OscConfig+0x7ac>)
 800383c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800383e:	4a11      	ldr	r2, [pc, #68]	@ (8003884 <HAL_RCC_OscConfig+0x7ac>)
 8003840:	f023 0301 	bic.w	r3, r3, #1
 8003844:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003846:	f7fd fb31 	bl	8000eac <HAL_GetTick>
 800384a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800384c:	bf00      	nop
 800384e:	f7fd fb2d 	bl	8000eac <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003856:	4293      	cmp	r3, r2
 8003858:	d0f9      	beq.n	800384e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800385a:	4b0a      	ldr	r3, [pc, #40]	@ (8003884 <HAL_RCC_OscConfig+0x7ac>)
 800385c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800385e:	4b0a      	ldr	r3, [pc, #40]	@ (8003888 <HAL_RCC_OscConfig+0x7b0>)
 8003860:	4013      	ands	r3, r2
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003866:	00d2      	lsls	r2, r2, #3
 8003868:	4906      	ldr	r1, [pc, #24]	@ (8003884 <HAL_RCC_OscConfig+0x7ac>)
 800386a:	4313      	orrs	r3, r2
 800386c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800386e:	4b05      	ldr	r3, [pc, #20]	@ (8003884 <HAL_RCC_OscConfig+0x7ac>)
 8003870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003872:	4a04      	ldr	r2, [pc, #16]	@ (8003884 <HAL_RCC_OscConfig+0x7ac>)
 8003874:	f043 0301 	orr.w	r3, r3, #1
 8003878:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	3730      	adds	r7, #48	@ 0x30
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	58024400 	.word	0x58024400
 8003888:	ffff0007 	.word	0xffff0007

0800388c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d101      	bne.n	80038a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e19c      	b.n	8003bda <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038a0:	4b8a      	ldr	r3, [pc, #552]	@ (8003acc <HAL_RCC_ClockConfig+0x240>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 030f 	and.w	r3, r3, #15
 80038a8:	683a      	ldr	r2, [r7, #0]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d910      	bls.n	80038d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ae:	4b87      	ldr	r3, [pc, #540]	@ (8003acc <HAL_RCC_ClockConfig+0x240>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f023 020f 	bic.w	r2, r3, #15
 80038b6:	4985      	ldr	r1, [pc, #532]	@ (8003acc <HAL_RCC_ClockConfig+0x240>)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038be:	4b83      	ldr	r3, [pc, #524]	@ (8003acc <HAL_RCC_ClockConfig+0x240>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 030f 	and.w	r3, r3, #15
 80038c6:	683a      	ldr	r2, [r7, #0]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d001      	beq.n	80038d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e184      	b.n	8003bda <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0304 	and.w	r3, r3, #4
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d010      	beq.n	80038fe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	691a      	ldr	r2, [r3, #16]
 80038e0:	4b7b      	ldr	r3, [pc, #492]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d908      	bls.n	80038fe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80038ec:	4b78      	ldr	r3, [pc, #480]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	4975      	ldr	r1, [pc, #468]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0308 	and.w	r3, r3, #8
 8003906:	2b00      	cmp	r3, #0
 8003908:	d010      	beq.n	800392c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	695a      	ldr	r2, [r3, #20]
 800390e:	4b70      	ldr	r3, [pc, #448]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 8003910:	69db      	ldr	r3, [r3, #28]
 8003912:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003916:	429a      	cmp	r2, r3
 8003918:	d908      	bls.n	800392c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800391a:	4b6d      	ldr	r3, [pc, #436]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 800391c:	69db      	ldr	r3, [r3, #28]
 800391e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	496a      	ldr	r1, [pc, #424]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 8003928:	4313      	orrs	r3, r2
 800392a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0310 	and.w	r3, r3, #16
 8003934:	2b00      	cmp	r3, #0
 8003936:	d010      	beq.n	800395a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	699a      	ldr	r2, [r3, #24]
 800393c:	4b64      	ldr	r3, [pc, #400]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 800393e:	69db      	ldr	r3, [r3, #28]
 8003940:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003944:	429a      	cmp	r2, r3
 8003946:	d908      	bls.n	800395a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003948:	4b61      	ldr	r3, [pc, #388]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 800394a:	69db      	ldr	r3, [r3, #28]
 800394c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	495e      	ldr	r1, [pc, #376]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 8003956:	4313      	orrs	r3, r2
 8003958:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0320 	and.w	r3, r3, #32
 8003962:	2b00      	cmp	r3, #0
 8003964:	d010      	beq.n	8003988 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	69da      	ldr	r2, [r3, #28]
 800396a:	4b59      	ldr	r3, [pc, #356]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003972:	429a      	cmp	r2, r3
 8003974:	d908      	bls.n	8003988 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003976:	4b56      	ldr	r3, [pc, #344]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	69db      	ldr	r3, [r3, #28]
 8003982:	4953      	ldr	r1, [pc, #332]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 8003984:	4313      	orrs	r3, r2
 8003986:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d010      	beq.n	80039b6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68da      	ldr	r2, [r3, #12]
 8003998:	4b4d      	ldr	r3, [pc, #308]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	f003 030f 	and.w	r3, r3, #15
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d908      	bls.n	80039b6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039a4:	4b4a      	ldr	r3, [pc, #296]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	f023 020f 	bic.w	r2, r3, #15
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	4947      	ldr	r1, [pc, #284]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d055      	beq.n	8003a6e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80039c2:	4b43      	ldr	r3, [pc, #268]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	4940      	ldr	r1, [pc, #256]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d107      	bne.n	80039ec <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80039dc:	4b3c      	ldr	r3, [pc, #240]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d121      	bne.n	8003a2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e0f6      	b.n	8003bda <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	2b03      	cmp	r3, #3
 80039f2:	d107      	bne.n	8003a04 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80039f4:	4b36      	ldr	r3, [pc, #216]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d115      	bne.n	8003a2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e0ea      	b.n	8003bda <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d107      	bne.n	8003a1c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a0c:	4b30      	ldr	r3, [pc, #192]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d109      	bne.n	8003a2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e0de      	b.n	8003bda <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a1c:	4b2c      	ldr	r3, [pc, #176]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0304 	and.w	r3, r3, #4
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d101      	bne.n	8003a2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e0d6      	b.n	8003bda <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a2c:	4b28      	ldr	r3, [pc, #160]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	f023 0207 	bic.w	r2, r3, #7
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	4925      	ldr	r1, [pc, #148]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a3e:	f7fd fa35 	bl	8000eac <HAL_GetTick>
 8003a42:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a44:	e00a      	b.n	8003a5c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a46:	f7fd fa31 	bl	8000eac <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d901      	bls.n	8003a5c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e0be      	b.n	8003bda <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a5c:	4b1c      	ldr	r3, [pc, #112]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 8003a5e:	691b      	ldr	r3, [r3, #16]
 8003a60:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d1eb      	bne.n	8003a46 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d010      	beq.n	8003a9c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	68da      	ldr	r2, [r3, #12]
 8003a7e:	4b14      	ldr	r3, [pc, #80]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	f003 030f 	and.w	r3, r3, #15
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d208      	bcs.n	8003a9c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a8a:	4b11      	ldr	r3, [pc, #68]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	f023 020f 	bic.w	r2, r3, #15
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	490e      	ldr	r1, [pc, #56]	@ (8003ad0 <HAL_RCC_ClockConfig+0x244>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8003acc <HAL_RCC_ClockConfig+0x240>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 030f 	and.w	r3, r3, #15
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d214      	bcs.n	8003ad4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aaa:	4b08      	ldr	r3, [pc, #32]	@ (8003acc <HAL_RCC_ClockConfig+0x240>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f023 020f 	bic.w	r2, r3, #15
 8003ab2:	4906      	ldr	r1, [pc, #24]	@ (8003acc <HAL_RCC_ClockConfig+0x240>)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aba:	4b04      	ldr	r3, [pc, #16]	@ (8003acc <HAL_RCC_ClockConfig+0x240>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 030f 	and.w	r3, r3, #15
 8003ac2:	683a      	ldr	r2, [r7, #0]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d005      	beq.n	8003ad4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e086      	b.n	8003bda <HAL_RCC_ClockConfig+0x34e>
 8003acc:	52002000 	.word	0x52002000
 8003ad0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0304 	and.w	r3, r3, #4
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d010      	beq.n	8003b02 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	691a      	ldr	r2, [r3, #16]
 8003ae4:	4b3f      	ldr	r3, [pc, #252]	@ (8003be4 <HAL_RCC_ClockConfig+0x358>)
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d208      	bcs.n	8003b02 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003af0:	4b3c      	ldr	r3, [pc, #240]	@ (8003be4 <HAL_RCC_ClockConfig+0x358>)
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	4939      	ldr	r1, [pc, #228]	@ (8003be4 <HAL_RCC_ClockConfig+0x358>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0308 	and.w	r3, r3, #8
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d010      	beq.n	8003b30 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	695a      	ldr	r2, [r3, #20]
 8003b12:	4b34      	ldr	r3, [pc, #208]	@ (8003be4 <HAL_RCC_ClockConfig+0x358>)
 8003b14:	69db      	ldr	r3, [r3, #28]
 8003b16:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d208      	bcs.n	8003b30 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003b1e:	4b31      	ldr	r3, [pc, #196]	@ (8003be4 <HAL_RCC_ClockConfig+0x358>)
 8003b20:	69db      	ldr	r3, [r3, #28]
 8003b22:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	492e      	ldr	r1, [pc, #184]	@ (8003be4 <HAL_RCC_ClockConfig+0x358>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0310 	and.w	r3, r3, #16
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d010      	beq.n	8003b5e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	699a      	ldr	r2, [r3, #24]
 8003b40:	4b28      	ldr	r3, [pc, #160]	@ (8003be4 <HAL_RCC_ClockConfig+0x358>)
 8003b42:	69db      	ldr	r3, [r3, #28]
 8003b44:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d208      	bcs.n	8003b5e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003b4c:	4b25      	ldr	r3, [pc, #148]	@ (8003be4 <HAL_RCC_ClockConfig+0x358>)
 8003b4e:	69db      	ldr	r3, [r3, #28]
 8003b50:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	4922      	ldr	r1, [pc, #136]	@ (8003be4 <HAL_RCC_ClockConfig+0x358>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0320 	and.w	r3, r3, #32
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d010      	beq.n	8003b8c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	69da      	ldr	r2, [r3, #28]
 8003b6e:	4b1d      	ldr	r3, [pc, #116]	@ (8003be4 <HAL_RCC_ClockConfig+0x358>)
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d208      	bcs.n	8003b8c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003b7a:	4b1a      	ldr	r3, [pc, #104]	@ (8003be4 <HAL_RCC_ClockConfig+0x358>)
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
 8003b7e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	69db      	ldr	r3, [r3, #28]
 8003b86:	4917      	ldr	r1, [pc, #92]	@ (8003be4 <HAL_RCC_ClockConfig+0x358>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003b8c:	f000 f834 	bl	8003bf8 <HAL_RCC_GetSysClockFreq>
 8003b90:	4602      	mov	r2, r0
 8003b92:	4b14      	ldr	r3, [pc, #80]	@ (8003be4 <HAL_RCC_ClockConfig+0x358>)
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	0a1b      	lsrs	r3, r3, #8
 8003b98:	f003 030f 	and.w	r3, r3, #15
 8003b9c:	4912      	ldr	r1, [pc, #72]	@ (8003be8 <HAL_RCC_ClockConfig+0x35c>)
 8003b9e:	5ccb      	ldrb	r3, [r1, r3]
 8003ba0:	f003 031f 	and.w	r3, r3, #31
 8003ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ba8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003baa:	4b0e      	ldr	r3, [pc, #56]	@ (8003be4 <HAL_RCC_ClockConfig+0x358>)
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	f003 030f 	and.w	r3, r3, #15
 8003bb2:	4a0d      	ldr	r2, [pc, #52]	@ (8003be8 <HAL_RCC_ClockConfig+0x35c>)
 8003bb4:	5cd3      	ldrb	r3, [r2, r3]
 8003bb6:	f003 031f 	and.w	r3, r3, #31
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8003bc0:	4a0a      	ldr	r2, [pc, #40]	@ (8003bec <HAL_RCC_ClockConfig+0x360>)
 8003bc2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003bc4:	4a0a      	ldr	r2, [pc, #40]	@ (8003bf0 <HAL_RCC_ClockConfig+0x364>)
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003bca:	4b0a      	ldr	r3, [pc, #40]	@ (8003bf4 <HAL_RCC_ClockConfig+0x368>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7fc fe0a 	bl	80007e8 <HAL_InitTick>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3718      	adds	r7, #24
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	58024400 	.word	0x58024400
 8003be8:	08017028 	.word	0x08017028
 8003bec:	24000004 	.word	0x24000004
 8003bf0:	24000000 	.word	0x24000000
 8003bf4:	24000008 	.word	0x24000008

08003bf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b089      	sub	sp, #36	@ 0x24
 8003bfc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bfe:	4bb3      	ldr	r3, [pc, #716]	@ (8003ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c06:	2b18      	cmp	r3, #24
 8003c08:	f200 8155 	bhi.w	8003eb6 <HAL_RCC_GetSysClockFreq+0x2be>
 8003c0c:	a201      	add	r2, pc, #4	@ (adr r2, 8003c14 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c12:	bf00      	nop
 8003c14:	08003c79 	.word	0x08003c79
 8003c18:	08003eb7 	.word	0x08003eb7
 8003c1c:	08003eb7 	.word	0x08003eb7
 8003c20:	08003eb7 	.word	0x08003eb7
 8003c24:	08003eb7 	.word	0x08003eb7
 8003c28:	08003eb7 	.word	0x08003eb7
 8003c2c:	08003eb7 	.word	0x08003eb7
 8003c30:	08003eb7 	.word	0x08003eb7
 8003c34:	08003c9f 	.word	0x08003c9f
 8003c38:	08003eb7 	.word	0x08003eb7
 8003c3c:	08003eb7 	.word	0x08003eb7
 8003c40:	08003eb7 	.word	0x08003eb7
 8003c44:	08003eb7 	.word	0x08003eb7
 8003c48:	08003eb7 	.word	0x08003eb7
 8003c4c:	08003eb7 	.word	0x08003eb7
 8003c50:	08003eb7 	.word	0x08003eb7
 8003c54:	08003ca5 	.word	0x08003ca5
 8003c58:	08003eb7 	.word	0x08003eb7
 8003c5c:	08003eb7 	.word	0x08003eb7
 8003c60:	08003eb7 	.word	0x08003eb7
 8003c64:	08003eb7 	.word	0x08003eb7
 8003c68:	08003eb7 	.word	0x08003eb7
 8003c6c:	08003eb7 	.word	0x08003eb7
 8003c70:	08003eb7 	.word	0x08003eb7
 8003c74:	08003cab 	.word	0x08003cab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c78:	4b94      	ldr	r3, [pc, #592]	@ (8003ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0320 	and.w	r3, r3, #32
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d009      	beq.n	8003c98 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003c84:	4b91      	ldr	r3, [pc, #580]	@ (8003ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	08db      	lsrs	r3, r3, #3
 8003c8a:	f003 0303 	and.w	r3, r3, #3
 8003c8e:	4a90      	ldr	r2, [pc, #576]	@ (8003ed0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003c90:	fa22 f303 	lsr.w	r3, r2, r3
 8003c94:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003c96:	e111      	b.n	8003ebc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003c98:	4b8d      	ldr	r3, [pc, #564]	@ (8003ed0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003c9a:	61bb      	str	r3, [r7, #24]
      break;
 8003c9c:	e10e      	b.n	8003ebc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003c9e:	4b8d      	ldr	r3, [pc, #564]	@ (8003ed4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003ca0:	61bb      	str	r3, [r7, #24]
      break;
 8003ca2:	e10b      	b.n	8003ebc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003ca4:	4b8c      	ldr	r3, [pc, #560]	@ (8003ed8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003ca6:	61bb      	str	r3, [r7, #24]
      break;
 8003ca8:	e108      	b.n	8003ebc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003caa:	4b88      	ldr	r3, [pc, #544]	@ (8003ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cae:	f003 0303 	and.w	r3, r3, #3
 8003cb2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003cb4:	4b85      	ldr	r3, [pc, #532]	@ (8003ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cb8:	091b      	lsrs	r3, r3, #4
 8003cba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003cbe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003cc0:	4b82      	ldr	r3, [pc, #520]	@ (8003ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cc4:	f003 0301 	and.w	r3, r3, #1
 8003cc8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003cca:	4b80      	ldr	r3, [pc, #512]	@ (8003ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ccc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cce:	08db      	lsrs	r3, r3, #3
 8003cd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	fb02 f303 	mul.w	r3, r2, r3
 8003cda:	ee07 3a90 	vmov	s15, r3
 8003cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ce2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f000 80e1 	beq.w	8003eb0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	f000 8083 	beq.w	8003dfc <HAL_RCC_GetSysClockFreq+0x204>
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	f200 80a1 	bhi.w	8003e40 <HAL_RCC_GetSysClockFreq+0x248>
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d003      	beq.n	8003d0c <HAL_RCC_GetSysClockFreq+0x114>
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d056      	beq.n	8003db8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003d0a:	e099      	b.n	8003e40 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d0c:	4b6f      	ldr	r3, [pc, #444]	@ (8003ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0320 	and.w	r3, r3, #32
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d02d      	beq.n	8003d74 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003d18:	4b6c      	ldr	r3, [pc, #432]	@ (8003ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	08db      	lsrs	r3, r3, #3
 8003d1e:	f003 0303 	and.w	r3, r3, #3
 8003d22:	4a6b      	ldr	r2, [pc, #428]	@ (8003ed0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003d24:	fa22 f303 	lsr.w	r3, r2, r3
 8003d28:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	ee07 3a90 	vmov	s15, r3
 8003d30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	ee07 3a90 	vmov	s15, r3
 8003d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d42:	4b62      	ldr	r3, [pc, #392]	@ (8003ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d4a:	ee07 3a90 	vmov	s15, r3
 8003d4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d52:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d56:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003edc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d6e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003d72:	e087      	b.n	8003e84 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	ee07 3a90 	vmov	s15, r3
 8003d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d7e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003ee0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003d82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d86:	4b51      	ldr	r3, [pc, #324]	@ (8003ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d8e:	ee07 3a90 	vmov	s15, r3
 8003d92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d96:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d9a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003edc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003da2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003da6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003daa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003db2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003db6:	e065      	b.n	8003e84 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	ee07 3a90 	vmov	s15, r3
 8003dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dc2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003ee4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003dc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dca:	4b40      	ldr	r3, [pc, #256]	@ (8003ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dd2:	ee07 3a90 	vmov	s15, r3
 8003dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dda:	ed97 6a02 	vldr	s12, [r7, #8]
 8003dde:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003edc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003de2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003de6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003dee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003df6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003dfa:	e043      	b.n	8003e84 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	ee07 3a90 	vmov	s15, r3
 8003e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e06:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003ee8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003e0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e0e:	4b2f      	ldr	r3, [pc, #188]	@ (8003ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e16:	ee07 3a90 	vmov	s15, r3
 8003e1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e22:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003edc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003e3e:	e021      	b.n	8003e84 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	ee07 3a90 	vmov	s15, r3
 8003e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e4a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003ee4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003e4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e52:	4b1e      	ldr	r3, [pc, #120]	@ (8003ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e5a:	ee07 3a90 	vmov	s15, r3
 8003e5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e62:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e66:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003edc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e7e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003e82:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003e84:	4b11      	ldr	r3, [pc, #68]	@ (8003ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e88:	0a5b      	lsrs	r3, r3, #9
 8003e8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e8e:	3301      	adds	r3, #1
 8003e90:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	ee07 3a90 	vmov	s15, r3
 8003e98:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ea0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ea4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ea8:	ee17 3a90 	vmov	r3, s15
 8003eac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003eae:	e005      	b.n	8003ebc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	61bb      	str	r3, [r7, #24]
      break;
 8003eb4:	e002      	b.n	8003ebc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003eb6:	4b07      	ldr	r3, [pc, #28]	@ (8003ed4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003eb8:	61bb      	str	r3, [r7, #24]
      break;
 8003eba:	bf00      	nop
  }

  return sysclockfreq;
 8003ebc:	69bb      	ldr	r3, [r7, #24]
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3724      	adds	r7, #36	@ 0x24
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	58024400 	.word	0x58024400
 8003ed0:	03d09000 	.word	0x03d09000
 8003ed4:	003d0900 	.word	0x003d0900
 8003ed8:	007a1200 	.word	0x007a1200
 8003edc:	46000000 	.word	0x46000000
 8003ee0:	4c742400 	.word	0x4c742400
 8003ee4:	4a742400 	.word	0x4a742400
 8003ee8:	4af42400 	.word	0x4af42400

08003eec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003ef2:	f7ff fe81 	bl	8003bf8 <HAL_RCC_GetSysClockFreq>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	4b10      	ldr	r3, [pc, #64]	@ (8003f3c <HAL_RCC_GetHCLKFreq+0x50>)
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	0a1b      	lsrs	r3, r3, #8
 8003efe:	f003 030f 	and.w	r3, r3, #15
 8003f02:	490f      	ldr	r1, [pc, #60]	@ (8003f40 <HAL_RCC_GetHCLKFreq+0x54>)
 8003f04:	5ccb      	ldrb	r3, [r1, r3]
 8003f06:	f003 031f 	and.w	r3, r3, #31
 8003f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f0e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003f10:	4b0a      	ldr	r3, [pc, #40]	@ (8003f3c <HAL_RCC_GetHCLKFreq+0x50>)
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	f003 030f 	and.w	r3, r3, #15
 8003f18:	4a09      	ldr	r2, [pc, #36]	@ (8003f40 <HAL_RCC_GetHCLKFreq+0x54>)
 8003f1a:	5cd3      	ldrb	r3, [r2, r3]
 8003f1c:	f003 031f 	and.w	r3, r3, #31
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	fa22 f303 	lsr.w	r3, r2, r3
 8003f26:	4a07      	ldr	r2, [pc, #28]	@ (8003f44 <HAL_RCC_GetHCLKFreq+0x58>)
 8003f28:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003f2a:	4a07      	ldr	r2, [pc, #28]	@ (8003f48 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003f30:	4b04      	ldr	r3, [pc, #16]	@ (8003f44 <HAL_RCC_GetHCLKFreq+0x58>)
 8003f32:	681b      	ldr	r3, [r3, #0]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3708      	adds	r7, #8
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	58024400 	.word	0x58024400
 8003f40:	08017028 	.word	0x08017028
 8003f44:	24000004 	.word	0x24000004
 8003f48:	24000000 	.word	0x24000000

08003f4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003f50:	f7ff ffcc 	bl	8003eec <HAL_RCC_GetHCLKFreq>
 8003f54:	4602      	mov	r2, r0
 8003f56:	4b06      	ldr	r3, [pc, #24]	@ (8003f70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f58:	69db      	ldr	r3, [r3, #28]
 8003f5a:	091b      	lsrs	r3, r3, #4
 8003f5c:	f003 0307 	and.w	r3, r3, #7
 8003f60:	4904      	ldr	r1, [pc, #16]	@ (8003f74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f62:	5ccb      	ldrb	r3, [r1, r3]
 8003f64:	f003 031f 	and.w	r3, r3, #31
 8003f68:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	58024400 	.word	0x58024400
 8003f74:	08017028 	.word	0x08017028

08003f78 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	223f      	movs	r2, #63	@ 0x3f
 8003f86:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003f88:	4b1a      	ldr	r3, [pc, #104]	@ (8003ff4 <HAL_RCC_GetClockConfig+0x7c>)
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	f003 0207 	and.w	r2, r3, #7
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8003f94:	4b17      	ldr	r3, [pc, #92]	@ (8003ff4 <HAL_RCC_GetClockConfig+0x7c>)
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8003fa0:	4b14      	ldr	r3, [pc, #80]	@ (8003ff4 <HAL_RCC_GetClockConfig+0x7c>)
 8003fa2:	699b      	ldr	r3, [r3, #24]
 8003fa4:	f003 020f 	and.w	r2, r3, #15
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8003fac:	4b11      	ldr	r3, [pc, #68]	@ (8003ff4 <HAL_RCC_GetClockConfig+0x7c>)
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8003fb8:	4b0e      	ldr	r3, [pc, #56]	@ (8003ff4 <HAL_RCC_GetClockConfig+0x7c>)
 8003fba:	69db      	ldr	r3, [r3, #28]
 8003fbc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8003fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ff4 <HAL_RCC_GetClockConfig+0x7c>)
 8003fc6:	69db      	ldr	r3, [r3, #28]
 8003fc8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8003fd0:	4b08      	ldr	r3, [pc, #32]	@ (8003ff4 <HAL_RCC_GetClockConfig+0x7c>)
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
 8003fd4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003fdc:	4b06      	ldr	r3, [pc, #24]	@ (8003ff8 <HAL_RCC_GetClockConfig+0x80>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 020f 	and.w	r2, r3, #15
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	601a      	str	r2, [r3, #0]
}
 8003fe8:	bf00      	nop
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr
 8003ff4:	58024400 	.word	0x58024400
 8003ff8:	52002000 	.word	0x52002000

08003ffc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e049      	b.n	80040a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d106      	bne.n	8004028 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f841 	bl	80040aa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2202      	movs	r2, #2
 800402c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	3304      	adds	r3, #4
 8004038:	4619      	mov	r1, r3
 800403a:	4610      	mov	r0, r2
 800403c:	f000 f9f6 	bl	800442c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3708      	adds	r7, #8
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}

080040aa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80040aa:	b480      	push	{r7}
 80040ac:	b083      	sub	sp, #12
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80040b2:	bf00      	nop
 80040b4:	370c      	adds	r7, #12
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
	...

080040c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d001      	beq.n	80040d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e05e      	b.n	8004196 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2202      	movs	r2, #2
 80040dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68da      	ldr	r2, [r3, #12]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f042 0201 	orr.w	r2, r2, #1
 80040ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a2b      	ldr	r2, [pc, #172]	@ (80041a4 <HAL_TIM_Base_Start_IT+0xe4>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d02c      	beq.n	8004154 <HAL_TIM_Base_Start_IT+0x94>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004102:	d027      	beq.n	8004154 <HAL_TIM_Base_Start_IT+0x94>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a27      	ldr	r2, [pc, #156]	@ (80041a8 <HAL_TIM_Base_Start_IT+0xe8>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d022      	beq.n	8004154 <HAL_TIM_Base_Start_IT+0x94>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a26      	ldr	r2, [pc, #152]	@ (80041ac <HAL_TIM_Base_Start_IT+0xec>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d01d      	beq.n	8004154 <HAL_TIM_Base_Start_IT+0x94>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a24      	ldr	r2, [pc, #144]	@ (80041b0 <HAL_TIM_Base_Start_IT+0xf0>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d018      	beq.n	8004154 <HAL_TIM_Base_Start_IT+0x94>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a23      	ldr	r2, [pc, #140]	@ (80041b4 <HAL_TIM_Base_Start_IT+0xf4>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d013      	beq.n	8004154 <HAL_TIM_Base_Start_IT+0x94>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a21      	ldr	r2, [pc, #132]	@ (80041b8 <HAL_TIM_Base_Start_IT+0xf8>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d00e      	beq.n	8004154 <HAL_TIM_Base_Start_IT+0x94>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a20      	ldr	r2, [pc, #128]	@ (80041bc <HAL_TIM_Base_Start_IT+0xfc>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d009      	beq.n	8004154 <HAL_TIM_Base_Start_IT+0x94>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a1e      	ldr	r2, [pc, #120]	@ (80041c0 <HAL_TIM_Base_Start_IT+0x100>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d004      	beq.n	8004154 <HAL_TIM_Base_Start_IT+0x94>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a1d      	ldr	r2, [pc, #116]	@ (80041c4 <HAL_TIM_Base_Start_IT+0x104>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d115      	bne.n	8004180 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	689a      	ldr	r2, [r3, #8]
 800415a:	4b1b      	ldr	r3, [pc, #108]	@ (80041c8 <HAL_TIM_Base_Start_IT+0x108>)
 800415c:	4013      	ands	r3, r2
 800415e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2b06      	cmp	r3, #6
 8004164:	d015      	beq.n	8004192 <HAL_TIM_Base_Start_IT+0xd2>
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800416c:	d011      	beq.n	8004192 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f042 0201 	orr.w	r2, r2, #1
 800417c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800417e:	e008      	b.n	8004192 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f042 0201 	orr.w	r2, r2, #1
 800418e:	601a      	str	r2, [r3, #0]
 8004190:	e000      	b.n	8004194 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004192:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3714      	adds	r7, #20
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	40010000 	.word	0x40010000
 80041a8:	40000400 	.word	0x40000400
 80041ac:	40000800 	.word	0x40000800
 80041b0:	40000c00 	.word	0x40000c00
 80041b4:	40010400 	.word	0x40010400
 80041b8:	40001800 	.word	0x40001800
 80041bc:	40014000 	.word	0x40014000
 80041c0:	4000e000 	.word	0x4000e000
 80041c4:	4000e400 	.word	0x4000e400
 80041c8:	00010007 	.word	0x00010007

080041cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d020      	beq.n	8004230 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d01b      	beq.n	8004230 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f06f 0202 	mvn.w	r2, #2
 8004200:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2201      	movs	r2, #1
 8004206:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	f003 0303 	and.w	r3, r3, #3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d003      	beq.n	800421e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 f8e9 	bl	80043ee <HAL_TIM_IC_CaptureCallback>
 800421c:	e005      	b.n	800422a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 f8db 	bl	80043da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 f8ec 	bl	8004402 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	f003 0304 	and.w	r3, r3, #4
 8004236:	2b00      	cmp	r3, #0
 8004238:	d020      	beq.n	800427c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f003 0304 	and.w	r3, r3, #4
 8004240:	2b00      	cmp	r3, #0
 8004242:	d01b      	beq.n	800427c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f06f 0204 	mvn.w	r2, #4
 800424c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2202      	movs	r2, #2
 8004252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800425e:	2b00      	cmp	r3, #0
 8004260:	d003      	beq.n	800426a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 f8c3 	bl	80043ee <HAL_TIM_IC_CaptureCallback>
 8004268:	e005      	b.n	8004276 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 f8b5 	bl	80043da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 f8c6 	bl	8004402 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	f003 0308 	and.w	r3, r3, #8
 8004282:	2b00      	cmp	r3, #0
 8004284:	d020      	beq.n	80042c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f003 0308 	and.w	r3, r3, #8
 800428c:	2b00      	cmp	r3, #0
 800428e:	d01b      	beq.n	80042c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f06f 0208 	mvn.w	r2, #8
 8004298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2204      	movs	r2, #4
 800429e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	69db      	ldr	r3, [r3, #28]
 80042a6:	f003 0303 	and.w	r3, r3, #3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d003      	beq.n	80042b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 f89d 	bl	80043ee <HAL_TIM_IC_CaptureCallback>
 80042b4:	e005      	b.n	80042c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 f88f 	bl	80043da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 f8a0 	bl	8004402 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	f003 0310 	and.w	r3, r3, #16
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d020      	beq.n	8004314 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f003 0310 	and.w	r3, r3, #16
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d01b      	beq.n	8004314 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f06f 0210 	mvn.w	r2, #16
 80042e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2208      	movs	r2, #8
 80042ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	69db      	ldr	r3, [r3, #28]
 80042f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d003      	beq.n	8004302 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f877 	bl	80043ee <HAL_TIM_IC_CaptureCallback>
 8004300:	e005      	b.n	800430e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f869 	bl	80043da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f000 f87a 	bl	8004402 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	f003 0301 	and.w	r3, r3, #1
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00c      	beq.n	8004338 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f003 0301 	and.w	r3, r3, #1
 8004324:	2b00      	cmp	r3, #0
 8004326:	d007      	beq.n	8004338 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f06f 0201 	mvn.w	r2, #1
 8004330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f7fc fa22 	bl	800077c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800433e:	2b00      	cmp	r3, #0
 8004340:	d104      	bne.n	800434c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00c      	beq.n	8004366 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004352:	2b00      	cmp	r3, #0
 8004354:	d007      	beq.n	8004366 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800435e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 f91f 	bl	80045a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00c      	beq.n	800438a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004376:	2b00      	cmp	r3, #0
 8004378:	d007      	beq.n	800438a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004382:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 f917 	bl	80045b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00c      	beq.n	80043ae <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800439a:	2b00      	cmp	r3, #0
 800439c:	d007      	beq.n	80043ae <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80043a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f000 f834 	bl	8004416 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	f003 0320 	and.w	r3, r3, #32
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d00c      	beq.n	80043d2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f003 0320 	and.w	r3, r3, #32
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d007      	beq.n	80043d2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f06f 0220 	mvn.w	r2, #32
 80043ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 f8df 	bl	8004590 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043d2:	bf00      	nop
 80043d4:	3710      	adds	r7, #16
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}

080043da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043da:	b480      	push	{r7}
 80043dc:	b083      	sub	sp, #12
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043e2:	bf00      	nop
 80043e4:	370c      	adds	r7, #12
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr

080043ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043ee:	b480      	push	{r7}
 80043f0:	b083      	sub	sp, #12
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043f6:	bf00      	nop
 80043f8:	370c      	adds	r7, #12
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr

08004402 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004402:	b480      	push	{r7}
 8004404:	b083      	sub	sp, #12
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800440a:	bf00      	nop
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004416:	b480      	push	{r7}
 8004418:	b083      	sub	sp, #12
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800441e:	bf00      	nop
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
	...

0800442c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a4a      	ldr	r2, [pc, #296]	@ (8004568 <TIM_Base_SetConfig+0x13c>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d013      	beq.n	800446c <TIM_Base_SetConfig+0x40>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800444a:	d00f      	beq.n	800446c <TIM_Base_SetConfig+0x40>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a47      	ldr	r2, [pc, #284]	@ (800456c <TIM_Base_SetConfig+0x140>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d00b      	beq.n	800446c <TIM_Base_SetConfig+0x40>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a46      	ldr	r2, [pc, #280]	@ (8004570 <TIM_Base_SetConfig+0x144>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d007      	beq.n	800446c <TIM_Base_SetConfig+0x40>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a45      	ldr	r2, [pc, #276]	@ (8004574 <TIM_Base_SetConfig+0x148>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d003      	beq.n	800446c <TIM_Base_SetConfig+0x40>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a44      	ldr	r2, [pc, #272]	@ (8004578 <TIM_Base_SetConfig+0x14c>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d108      	bne.n	800447e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004472:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	4313      	orrs	r3, r2
 800447c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a39      	ldr	r2, [pc, #228]	@ (8004568 <TIM_Base_SetConfig+0x13c>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d027      	beq.n	80044d6 <TIM_Base_SetConfig+0xaa>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800448c:	d023      	beq.n	80044d6 <TIM_Base_SetConfig+0xaa>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a36      	ldr	r2, [pc, #216]	@ (800456c <TIM_Base_SetConfig+0x140>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d01f      	beq.n	80044d6 <TIM_Base_SetConfig+0xaa>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a35      	ldr	r2, [pc, #212]	@ (8004570 <TIM_Base_SetConfig+0x144>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d01b      	beq.n	80044d6 <TIM_Base_SetConfig+0xaa>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a34      	ldr	r2, [pc, #208]	@ (8004574 <TIM_Base_SetConfig+0x148>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d017      	beq.n	80044d6 <TIM_Base_SetConfig+0xaa>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a33      	ldr	r2, [pc, #204]	@ (8004578 <TIM_Base_SetConfig+0x14c>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d013      	beq.n	80044d6 <TIM_Base_SetConfig+0xaa>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a32      	ldr	r2, [pc, #200]	@ (800457c <TIM_Base_SetConfig+0x150>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d00f      	beq.n	80044d6 <TIM_Base_SetConfig+0xaa>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a31      	ldr	r2, [pc, #196]	@ (8004580 <TIM_Base_SetConfig+0x154>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d00b      	beq.n	80044d6 <TIM_Base_SetConfig+0xaa>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a30      	ldr	r2, [pc, #192]	@ (8004584 <TIM_Base_SetConfig+0x158>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d007      	beq.n	80044d6 <TIM_Base_SetConfig+0xaa>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a2f      	ldr	r2, [pc, #188]	@ (8004588 <TIM_Base_SetConfig+0x15c>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d003      	beq.n	80044d6 <TIM_Base_SetConfig+0xaa>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a2e      	ldr	r2, [pc, #184]	@ (800458c <TIM_Base_SetConfig+0x160>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d108      	bne.n	80044e8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	689a      	ldr	r2, [r3, #8]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a16      	ldr	r2, [pc, #88]	@ (8004568 <TIM_Base_SetConfig+0x13c>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d00f      	beq.n	8004534 <TIM_Base_SetConfig+0x108>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a18      	ldr	r2, [pc, #96]	@ (8004578 <TIM_Base_SetConfig+0x14c>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d00b      	beq.n	8004534 <TIM_Base_SetConfig+0x108>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a17      	ldr	r2, [pc, #92]	@ (800457c <TIM_Base_SetConfig+0x150>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d007      	beq.n	8004534 <TIM_Base_SetConfig+0x108>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a16      	ldr	r2, [pc, #88]	@ (8004580 <TIM_Base_SetConfig+0x154>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d003      	beq.n	8004534 <TIM_Base_SetConfig+0x108>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a15      	ldr	r2, [pc, #84]	@ (8004584 <TIM_Base_SetConfig+0x158>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d103      	bne.n	800453c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	691a      	ldr	r2, [r3, #16]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b01      	cmp	r3, #1
 800454c:	d105      	bne.n	800455a <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	f023 0201 	bic.w	r2, r3, #1
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	611a      	str	r2, [r3, #16]
  }
}
 800455a:	bf00      	nop
 800455c:	3714      	adds	r7, #20
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	40010000 	.word	0x40010000
 800456c:	40000400 	.word	0x40000400
 8004570:	40000800 	.word	0x40000800
 8004574:	40000c00 	.word	0x40000c00
 8004578:	40010400 	.word	0x40010400
 800457c:	40014000 	.word	0x40014000
 8004580:	40014400 	.word	0x40014400
 8004584:	40014800 	.word	0x40014800
 8004588:	4000e000 	.word	0x4000e000
 800458c:	4000e400 	.word	0x4000e400

08004590 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045ac:	bf00      	nop
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <tcpip_init_wrap>:
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 2 */
/* ETH_CODE: workaround to call LOCK_TCPIP_CORE after tcpip_init in MX_LWIP_Init
 * This is to keep the code after MX code re-generation */
static inline void tcpip_init_wrap(tcpip_init_done_fn tcpip_init_done, void *arg){
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
	tcpip_init(tcpip_init_done, arg);
 80045d6:	6839      	ldr	r1, [r7, #0]
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f004 feb9 	bl	8009350 <tcpip_init>
	LOCK_TCPIP_CORE();
 80045de:	f000 fe6d 	bl	80052bc <sys_lock_tcpip_core>
}
 80045e2:	bf00      	nop
 80045e4:	3708      	adds	r7, #8
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
	...

080045ec <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80045f2:	4b93      	ldr	r3, [pc, #588]	@ (8004840 <MX_LWIP_Init+0x254>)
 80045f4:	22c0      	movs	r2, #192	@ 0xc0
 80045f6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80045f8:	4b91      	ldr	r3, [pc, #580]	@ (8004840 <MX_LWIP_Init+0x254>)
 80045fa:	22a8      	movs	r2, #168	@ 0xa8
 80045fc:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 50;
 80045fe:	4b90      	ldr	r3, [pc, #576]	@ (8004840 <MX_LWIP_Init+0x254>)
 8004600:	2232      	movs	r2, #50	@ 0x32
 8004602:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 8004604:	4b8e      	ldr	r3, [pc, #568]	@ (8004840 <MX_LWIP_Init+0x254>)
 8004606:	220a      	movs	r2, #10
 8004608:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800460a:	4b8e      	ldr	r3, [pc, #568]	@ (8004844 <MX_LWIP_Init+0x258>)
 800460c:	22ff      	movs	r2, #255	@ 0xff
 800460e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004610:	4b8c      	ldr	r3, [pc, #560]	@ (8004844 <MX_LWIP_Init+0x258>)
 8004612:	22ff      	movs	r2, #255	@ 0xff
 8004614:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8004616:	4b8b      	ldr	r3, [pc, #556]	@ (8004844 <MX_LWIP_Init+0x258>)
 8004618:	22ff      	movs	r2, #255	@ 0xff
 800461a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800461c:	4b89      	ldr	r3, [pc, #548]	@ (8004844 <MX_LWIP_Init+0x258>)
 800461e:	2200      	movs	r2, #0
 8004620:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8004622:	4b89      	ldr	r3, [pc, #548]	@ (8004848 <MX_LWIP_Init+0x25c>)
 8004624:	2200      	movs	r2, #0
 8004626:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8004628:	4b87      	ldr	r3, [pc, #540]	@ (8004848 <MX_LWIP_Init+0x25c>)
 800462a:	2200      	movs	r2, #0
 800462c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800462e:	4b86      	ldr	r3, [pc, #536]	@ (8004848 <MX_LWIP_Init+0x25c>)
 8004630:	2200      	movs	r2, #0
 8004632:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8004634:	4b84      	ldr	r3, [pc, #528]	@ (8004848 <MX_LWIP_Init+0x25c>)
 8004636:	2200      	movs	r2, #0
 8004638:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800463a:	2100      	movs	r1, #0
 800463c:	2000      	movs	r0, #0
 800463e:	f7ff ffc5 	bl	80045cc <tcpip_init_wrap>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004642:	4b7f      	ldr	r3, [pc, #508]	@ (8004840 <MX_LWIP_Init+0x254>)
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	061a      	lsls	r2, r3, #24
 8004648:	4b7d      	ldr	r3, [pc, #500]	@ (8004840 <MX_LWIP_Init+0x254>)
 800464a:	785b      	ldrb	r3, [r3, #1]
 800464c:	041b      	lsls	r3, r3, #16
 800464e:	431a      	orrs	r2, r3
 8004650:	4b7b      	ldr	r3, [pc, #492]	@ (8004840 <MX_LWIP_Init+0x254>)
 8004652:	789b      	ldrb	r3, [r3, #2]
 8004654:	021b      	lsls	r3, r3, #8
 8004656:	4313      	orrs	r3, r2
 8004658:	4a79      	ldr	r2, [pc, #484]	@ (8004840 <MX_LWIP_Init+0x254>)
 800465a:	78d2      	ldrb	r2, [r2, #3]
 800465c:	4313      	orrs	r3, r2
 800465e:	061a      	lsls	r2, r3, #24
 8004660:	4b77      	ldr	r3, [pc, #476]	@ (8004840 <MX_LWIP_Init+0x254>)
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	0619      	lsls	r1, r3, #24
 8004666:	4b76      	ldr	r3, [pc, #472]	@ (8004840 <MX_LWIP_Init+0x254>)
 8004668:	785b      	ldrb	r3, [r3, #1]
 800466a:	041b      	lsls	r3, r3, #16
 800466c:	4319      	orrs	r1, r3
 800466e:	4b74      	ldr	r3, [pc, #464]	@ (8004840 <MX_LWIP_Init+0x254>)
 8004670:	789b      	ldrb	r3, [r3, #2]
 8004672:	021b      	lsls	r3, r3, #8
 8004674:	430b      	orrs	r3, r1
 8004676:	4972      	ldr	r1, [pc, #456]	@ (8004840 <MX_LWIP_Init+0x254>)
 8004678:	78c9      	ldrb	r1, [r1, #3]
 800467a:	430b      	orrs	r3, r1
 800467c:	021b      	lsls	r3, r3, #8
 800467e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004682:	431a      	orrs	r2, r3
 8004684:	4b6e      	ldr	r3, [pc, #440]	@ (8004840 <MX_LWIP_Init+0x254>)
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	0619      	lsls	r1, r3, #24
 800468a:	4b6d      	ldr	r3, [pc, #436]	@ (8004840 <MX_LWIP_Init+0x254>)
 800468c:	785b      	ldrb	r3, [r3, #1]
 800468e:	041b      	lsls	r3, r3, #16
 8004690:	4319      	orrs	r1, r3
 8004692:	4b6b      	ldr	r3, [pc, #428]	@ (8004840 <MX_LWIP_Init+0x254>)
 8004694:	789b      	ldrb	r3, [r3, #2]
 8004696:	021b      	lsls	r3, r3, #8
 8004698:	430b      	orrs	r3, r1
 800469a:	4969      	ldr	r1, [pc, #420]	@ (8004840 <MX_LWIP_Init+0x254>)
 800469c:	78c9      	ldrb	r1, [r1, #3]
 800469e:	430b      	orrs	r3, r1
 80046a0:	0a1b      	lsrs	r3, r3, #8
 80046a2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80046a6:	431a      	orrs	r2, r3
 80046a8:	4b65      	ldr	r3, [pc, #404]	@ (8004840 <MX_LWIP_Init+0x254>)
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	0619      	lsls	r1, r3, #24
 80046ae:	4b64      	ldr	r3, [pc, #400]	@ (8004840 <MX_LWIP_Init+0x254>)
 80046b0:	785b      	ldrb	r3, [r3, #1]
 80046b2:	041b      	lsls	r3, r3, #16
 80046b4:	4319      	orrs	r1, r3
 80046b6:	4b62      	ldr	r3, [pc, #392]	@ (8004840 <MX_LWIP_Init+0x254>)
 80046b8:	789b      	ldrb	r3, [r3, #2]
 80046ba:	021b      	lsls	r3, r3, #8
 80046bc:	430b      	orrs	r3, r1
 80046be:	4960      	ldr	r1, [pc, #384]	@ (8004840 <MX_LWIP_Init+0x254>)
 80046c0:	78c9      	ldrb	r1, [r1, #3]
 80046c2:	430b      	orrs	r3, r1
 80046c4:	0e1b      	lsrs	r3, r3, #24
 80046c6:	4313      	orrs	r3, r2
 80046c8:	4a60      	ldr	r2, [pc, #384]	@ (800484c <MX_LWIP_Init+0x260>)
 80046ca:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80046cc:	4b5d      	ldr	r3, [pc, #372]	@ (8004844 <MX_LWIP_Init+0x258>)
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	061a      	lsls	r2, r3, #24
 80046d2:	4b5c      	ldr	r3, [pc, #368]	@ (8004844 <MX_LWIP_Init+0x258>)
 80046d4:	785b      	ldrb	r3, [r3, #1]
 80046d6:	041b      	lsls	r3, r3, #16
 80046d8:	431a      	orrs	r2, r3
 80046da:	4b5a      	ldr	r3, [pc, #360]	@ (8004844 <MX_LWIP_Init+0x258>)
 80046dc:	789b      	ldrb	r3, [r3, #2]
 80046de:	021b      	lsls	r3, r3, #8
 80046e0:	4313      	orrs	r3, r2
 80046e2:	4a58      	ldr	r2, [pc, #352]	@ (8004844 <MX_LWIP_Init+0x258>)
 80046e4:	78d2      	ldrb	r2, [r2, #3]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	061a      	lsls	r2, r3, #24
 80046ea:	4b56      	ldr	r3, [pc, #344]	@ (8004844 <MX_LWIP_Init+0x258>)
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	0619      	lsls	r1, r3, #24
 80046f0:	4b54      	ldr	r3, [pc, #336]	@ (8004844 <MX_LWIP_Init+0x258>)
 80046f2:	785b      	ldrb	r3, [r3, #1]
 80046f4:	041b      	lsls	r3, r3, #16
 80046f6:	4319      	orrs	r1, r3
 80046f8:	4b52      	ldr	r3, [pc, #328]	@ (8004844 <MX_LWIP_Init+0x258>)
 80046fa:	789b      	ldrb	r3, [r3, #2]
 80046fc:	021b      	lsls	r3, r3, #8
 80046fe:	430b      	orrs	r3, r1
 8004700:	4950      	ldr	r1, [pc, #320]	@ (8004844 <MX_LWIP_Init+0x258>)
 8004702:	78c9      	ldrb	r1, [r1, #3]
 8004704:	430b      	orrs	r3, r1
 8004706:	021b      	lsls	r3, r3, #8
 8004708:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800470c:	431a      	orrs	r2, r3
 800470e:	4b4d      	ldr	r3, [pc, #308]	@ (8004844 <MX_LWIP_Init+0x258>)
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	0619      	lsls	r1, r3, #24
 8004714:	4b4b      	ldr	r3, [pc, #300]	@ (8004844 <MX_LWIP_Init+0x258>)
 8004716:	785b      	ldrb	r3, [r3, #1]
 8004718:	041b      	lsls	r3, r3, #16
 800471a:	4319      	orrs	r1, r3
 800471c:	4b49      	ldr	r3, [pc, #292]	@ (8004844 <MX_LWIP_Init+0x258>)
 800471e:	789b      	ldrb	r3, [r3, #2]
 8004720:	021b      	lsls	r3, r3, #8
 8004722:	430b      	orrs	r3, r1
 8004724:	4947      	ldr	r1, [pc, #284]	@ (8004844 <MX_LWIP_Init+0x258>)
 8004726:	78c9      	ldrb	r1, [r1, #3]
 8004728:	430b      	orrs	r3, r1
 800472a:	0a1b      	lsrs	r3, r3, #8
 800472c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004730:	431a      	orrs	r2, r3
 8004732:	4b44      	ldr	r3, [pc, #272]	@ (8004844 <MX_LWIP_Init+0x258>)
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	0619      	lsls	r1, r3, #24
 8004738:	4b42      	ldr	r3, [pc, #264]	@ (8004844 <MX_LWIP_Init+0x258>)
 800473a:	785b      	ldrb	r3, [r3, #1]
 800473c:	041b      	lsls	r3, r3, #16
 800473e:	4319      	orrs	r1, r3
 8004740:	4b40      	ldr	r3, [pc, #256]	@ (8004844 <MX_LWIP_Init+0x258>)
 8004742:	789b      	ldrb	r3, [r3, #2]
 8004744:	021b      	lsls	r3, r3, #8
 8004746:	430b      	orrs	r3, r1
 8004748:	493e      	ldr	r1, [pc, #248]	@ (8004844 <MX_LWIP_Init+0x258>)
 800474a:	78c9      	ldrb	r1, [r1, #3]
 800474c:	430b      	orrs	r3, r1
 800474e:	0e1b      	lsrs	r3, r3, #24
 8004750:	4313      	orrs	r3, r2
 8004752:	4a3f      	ldr	r2, [pc, #252]	@ (8004850 <MX_LWIP_Init+0x264>)
 8004754:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004756:	4b3c      	ldr	r3, [pc, #240]	@ (8004848 <MX_LWIP_Init+0x25c>)
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	061a      	lsls	r2, r3, #24
 800475c:	4b3a      	ldr	r3, [pc, #232]	@ (8004848 <MX_LWIP_Init+0x25c>)
 800475e:	785b      	ldrb	r3, [r3, #1]
 8004760:	041b      	lsls	r3, r3, #16
 8004762:	431a      	orrs	r2, r3
 8004764:	4b38      	ldr	r3, [pc, #224]	@ (8004848 <MX_LWIP_Init+0x25c>)
 8004766:	789b      	ldrb	r3, [r3, #2]
 8004768:	021b      	lsls	r3, r3, #8
 800476a:	4313      	orrs	r3, r2
 800476c:	4a36      	ldr	r2, [pc, #216]	@ (8004848 <MX_LWIP_Init+0x25c>)
 800476e:	78d2      	ldrb	r2, [r2, #3]
 8004770:	4313      	orrs	r3, r2
 8004772:	061a      	lsls	r2, r3, #24
 8004774:	4b34      	ldr	r3, [pc, #208]	@ (8004848 <MX_LWIP_Init+0x25c>)
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	0619      	lsls	r1, r3, #24
 800477a:	4b33      	ldr	r3, [pc, #204]	@ (8004848 <MX_LWIP_Init+0x25c>)
 800477c:	785b      	ldrb	r3, [r3, #1]
 800477e:	041b      	lsls	r3, r3, #16
 8004780:	4319      	orrs	r1, r3
 8004782:	4b31      	ldr	r3, [pc, #196]	@ (8004848 <MX_LWIP_Init+0x25c>)
 8004784:	789b      	ldrb	r3, [r3, #2]
 8004786:	021b      	lsls	r3, r3, #8
 8004788:	430b      	orrs	r3, r1
 800478a:	492f      	ldr	r1, [pc, #188]	@ (8004848 <MX_LWIP_Init+0x25c>)
 800478c:	78c9      	ldrb	r1, [r1, #3]
 800478e:	430b      	orrs	r3, r1
 8004790:	021b      	lsls	r3, r3, #8
 8004792:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004796:	431a      	orrs	r2, r3
 8004798:	4b2b      	ldr	r3, [pc, #172]	@ (8004848 <MX_LWIP_Init+0x25c>)
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	0619      	lsls	r1, r3, #24
 800479e:	4b2a      	ldr	r3, [pc, #168]	@ (8004848 <MX_LWIP_Init+0x25c>)
 80047a0:	785b      	ldrb	r3, [r3, #1]
 80047a2:	041b      	lsls	r3, r3, #16
 80047a4:	4319      	orrs	r1, r3
 80047a6:	4b28      	ldr	r3, [pc, #160]	@ (8004848 <MX_LWIP_Init+0x25c>)
 80047a8:	789b      	ldrb	r3, [r3, #2]
 80047aa:	021b      	lsls	r3, r3, #8
 80047ac:	430b      	orrs	r3, r1
 80047ae:	4926      	ldr	r1, [pc, #152]	@ (8004848 <MX_LWIP_Init+0x25c>)
 80047b0:	78c9      	ldrb	r1, [r1, #3]
 80047b2:	430b      	orrs	r3, r1
 80047b4:	0a1b      	lsrs	r3, r3, #8
 80047b6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80047ba:	431a      	orrs	r2, r3
 80047bc:	4b22      	ldr	r3, [pc, #136]	@ (8004848 <MX_LWIP_Init+0x25c>)
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	0619      	lsls	r1, r3, #24
 80047c2:	4b21      	ldr	r3, [pc, #132]	@ (8004848 <MX_LWIP_Init+0x25c>)
 80047c4:	785b      	ldrb	r3, [r3, #1]
 80047c6:	041b      	lsls	r3, r3, #16
 80047c8:	4319      	orrs	r1, r3
 80047ca:	4b1f      	ldr	r3, [pc, #124]	@ (8004848 <MX_LWIP_Init+0x25c>)
 80047cc:	789b      	ldrb	r3, [r3, #2]
 80047ce:	021b      	lsls	r3, r3, #8
 80047d0:	430b      	orrs	r3, r1
 80047d2:	491d      	ldr	r1, [pc, #116]	@ (8004848 <MX_LWIP_Init+0x25c>)
 80047d4:	78c9      	ldrb	r1, [r1, #3]
 80047d6:	430b      	orrs	r3, r1
 80047d8:	0e1b      	lsrs	r3, r3, #24
 80047da:	4313      	orrs	r3, r2
 80047dc:	4a1d      	ldr	r2, [pc, #116]	@ (8004854 <MX_LWIP_Init+0x268>)
 80047de:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80047e0:	4b1d      	ldr	r3, [pc, #116]	@ (8004858 <MX_LWIP_Init+0x26c>)
 80047e2:	9302      	str	r3, [sp, #8]
 80047e4:	4b1d      	ldr	r3, [pc, #116]	@ (800485c <MX_LWIP_Init+0x270>)
 80047e6:	9301      	str	r3, [sp, #4]
 80047e8:	2300      	movs	r3, #0
 80047ea:	9300      	str	r3, [sp, #0]
 80047ec:	4b19      	ldr	r3, [pc, #100]	@ (8004854 <MX_LWIP_Init+0x268>)
 80047ee:	4a18      	ldr	r2, [pc, #96]	@ (8004850 <MX_LWIP_Init+0x264>)
 80047f0:	4916      	ldr	r1, [pc, #88]	@ (800484c <MX_LWIP_Init+0x260>)
 80047f2:	481b      	ldr	r0, [pc, #108]	@ (8004860 <MX_LWIP_Init+0x274>)
 80047f4:	f005 fc3e 	bl	800a074 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80047f8:	4819      	ldr	r0, [pc, #100]	@ (8004860 <MX_LWIP_Init+0x274>)
 80047fa:	f005 fdf1 	bl	800a3e0 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 80047fe:	4818      	ldr	r0, [pc, #96]	@ (8004860 <MX_LWIP_Init+0x274>)
 8004800:	f005 fdfe 	bl	800a400 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004804:	4917      	ldr	r1, [pc, #92]	@ (8004864 <MX_LWIP_Init+0x278>)
 8004806:	4816      	ldr	r0, [pc, #88]	@ (8004860 <MX_LWIP_Init+0x274>)
 8004808:	f005 ff04 	bl	800a614 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800480c:	2224      	movs	r2, #36	@ 0x24
 800480e:	2100      	movs	r1, #0
 8004810:	4815      	ldr	r0, [pc, #84]	@ (8004868 <MX_LWIP_Init+0x27c>)
 8004812:	f00e ff42 	bl	801369a <memset>
  attributes.name = "EthLink";
 8004816:	4b14      	ldr	r3, [pc, #80]	@ (8004868 <MX_LWIP_Init+0x27c>)
 8004818:	4a14      	ldr	r2, [pc, #80]	@ (800486c <MX_LWIP_Init+0x280>)
 800481a:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800481c:	4b12      	ldr	r3, [pc, #72]	@ (8004868 <MX_LWIP_Init+0x27c>)
 800481e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004822:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8004824:	4b10      	ldr	r3, [pc, #64]	@ (8004868 <MX_LWIP_Init+0x27c>)
 8004826:	2210      	movs	r2, #16
 8004828:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 800482a:	4a0f      	ldr	r2, [pc, #60]	@ (8004868 <MX_LWIP_Init+0x27c>)
 800482c:	490c      	ldr	r1, [pc, #48]	@ (8004860 <MX_LWIP_Init+0x274>)
 800482e:	4810      	ldr	r0, [pc, #64]	@ (8004870 <MX_LWIP_Init+0x284>)
 8004830:	f000 fe4d 	bl	80054ce <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */
  /* ETH_CODE: call UNLOCK_TCPIP_CORE after we are done */
  UNLOCK_TCPIP_CORE();
 8004834:	f000 fd52 	bl	80052dc <sys_unlock_tcpip_core>
/* USER CODE END 3 */
}
 8004838:	bf00      	nop
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	24000144 	.word	0x24000144
 8004844:	24000148 	.word	0x24000148
 8004848:	2400014c 	.word	0x2400014c
 800484c:	24000138 	.word	0x24000138
 8004850:	2400013c 	.word	0x2400013c
 8004854:	24000140 	.word	0x24000140
 8004858:	0800928d 	.word	0x0800928d
 800485c:	08004d5d 	.word	0x08004d5d
 8004860:	24000104 	.word	0x24000104
 8004864:	08004875 	.word	0x08004875
 8004868:	24000150 	.word	0x24000150
 800486c:	080144b4 	.word	0x080144b4
 8004870:	0800504d 	.word	0x0800504d

08004874 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800487c:	bf00      	nop
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8004890:	4b04      	ldr	r3, [pc, #16]	@ (80048a4 <HAL_ETH_RxCpltCallback+0x1c>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4618      	mov	r0, r3
 8004896:	f001 f8bd 	bl	8005a14 <osSemaphoreRelease>
}
 800489a:	bf00      	nop
 800489c:	3708      	adds	r7, #8
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	2400017c 	.word	0x2400017c

080048a8 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 80048b0:	4b04      	ldr	r3, [pc, #16]	@ (80048c4 <HAL_ETH_TxCpltCallback+0x1c>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4618      	mov	r0, r3
 80048b6:	f001 f8ad 	bl	8005a14 <osSemaphoreRelease>
}
 80048ba:	bf00      	nop
 80048bc:	3708      	adds	r7, #8
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	24000180 	.word	0x24000180

080048c8 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f7fd fc3c 	bl	800214e <HAL_ETH_GetDMAError>
 80048d6:	4603      	mov	r3, r0
 80048d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048dc:	2b80      	cmp	r3, #128	@ 0x80
 80048de:	d104      	bne.n	80048ea <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 80048e0:	4b04      	ldr	r3, [pc, #16]	@ (80048f4 <HAL_ETH_ErrorCallback+0x2c>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4618      	mov	r0, r3
 80048e6:	f001 f895 	bl	8005a14 <osSemaphoreRelease>
  }
}
 80048ea:	bf00      	nop
 80048ec:	3708      	adds	r7, #8
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	2400017c 	.word	0x2400017c

080048f8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b0aa      	sub	sp, #168	@ 0xa8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004900:	2300      	movs	r3, #0
 8004902:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 8004906:	2300      	movs	r3, #0
 8004908:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 800490c:	2300      	movs	r3, #0
 800490e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 8004912:	f107 0310 	add.w	r3, r7, #16
 8004916:	2264      	movs	r2, #100	@ 0x64
 8004918:	2100      	movs	r1, #0
 800491a:	4618      	mov	r0, r3
 800491c:	f00e febd 	bl	801369a <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004920:	4b89      	ldr	r3, [pc, #548]	@ (8004b48 <low_level_init+0x250>)
 8004922:	4a8a      	ldr	r2, [pc, #552]	@ (8004b4c <low_level_init+0x254>)
 8004924:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004926:	2300      	movs	r3, #0
 8004928:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800492a:	2380      	movs	r3, #128	@ 0x80
 800492c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800492e:	23e1      	movs	r3, #225	@ 0xe1
 8004930:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8004932:	2300      	movs	r3, #0
 8004934:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8004936:	2300      	movs	r3, #0
 8004938:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800493a:	2300      	movs	r3, #0
 800493c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800493e:	4a82      	ldr	r2, [pc, #520]	@ (8004b48 <low_level_init+0x250>)
 8004940:	f107 0308 	add.w	r3, r7, #8
 8004944:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004946:	4b80      	ldr	r3, [pc, #512]	@ (8004b48 <low_level_init+0x250>)
 8004948:	2201      	movs	r2, #1
 800494a:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800494c:	4b7e      	ldr	r3, [pc, #504]	@ (8004b48 <low_level_init+0x250>)
 800494e:	4a80      	ldr	r2, [pc, #512]	@ (8004b50 <low_level_init+0x258>)
 8004950:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004952:	4b7d      	ldr	r3, [pc, #500]	@ (8004b48 <low_level_init+0x250>)
 8004954:	4a7f      	ldr	r2, [pc, #508]	@ (8004b54 <low_level_init+0x25c>)
 8004956:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8004958:	4b7b      	ldr	r3, [pc, #492]	@ (8004b48 <low_level_init+0x250>)
 800495a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800495e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004960:	4879      	ldr	r0, [pc, #484]	@ (8004b48 <low_level_init+0x250>)
 8004962:	f7fc fc1b 	bl	800119c <HAL_ETH_Init>
 8004966:	4603      	mov	r3, r0
 8004968:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800496c:	2238      	movs	r2, #56	@ 0x38
 800496e:	2100      	movs	r1, #0
 8004970:	4879      	ldr	r0, [pc, #484]	@ (8004b58 <low_level_init+0x260>)
 8004972:	f00e fe92 	bl	801369a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8004976:	4b78      	ldr	r3, [pc, #480]	@ (8004b58 <low_level_init+0x260>)
 8004978:	2221      	movs	r2, #33	@ 0x21
 800497a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800497c:	4b76      	ldr	r3, [pc, #472]	@ (8004b58 <low_level_init+0x260>)
 800497e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004982:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8004984:	4b74      	ldr	r3, [pc, #464]	@ (8004b58 <low_level_init+0x260>)
 8004986:	2200      	movs	r2, #0
 8004988:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800498a:	4874      	ldr	r0, [pc, #464]	@ (8004b5c <low_level_init+0x264>)
 800498c:	f005 fa2c 	bl	8009de8 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2206      	movs	r2, #6
 8004994:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004998:	4b6b      	ldr	r3, [pc, #428]	@ (8004b48 <low_level_init+0x250>)
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	781a      	ldrb	r2, [r3, #0]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80049a4:	4b68      	ldr	r3, [pc, #416]	@ (8004b48 <low_level_init+0x250>)
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	785a      	ldrb	r2, [r3, #1]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80049b0:	4b65      	ldr	r3, [pc, #404]	@ (8004b48 <low_level_init+0x250>)
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	789a      	ldrb	r2, [r3, #2]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80049bc:	4b62      	ldr	r3, [pc, #392]	@ (8004b48 <low_level_init+0x250>)
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	78da      	ldrb	r2, [r3, #3]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80049c8:	4b5f      	ldr	r3, [pc, #380]	@ (8004b48 <low_level_init+0x250>)
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	791a      	ldrb	r2, [r3, #4]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80049d4:	4b5c      	ldr	r3, [pc, #368]	@ (8004b48 <low_level_init+0x250>)
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	795a      	ldrb	r2, [r3, #5]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80049e6:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80049ee:	f043 030a 	orr.w	r3, r3, #10
 80049f2:	b2da      	uxtb	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 80049fa:	2200      	movs	r2, #0
 80049fc:	2100      	movs	r1, #0
 80049fe:	2001      	movs	r0, #1
 8004a00:	f000 ff2c 	bl	800585c <osSemaphoreNew>
 8004a04:	4603      	mov	r3, r0
 8004a06:	4a56      	ldr	r2, [pc, #344]	@ (8004b60 <low_level_init+0x268>)
 8004a08:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	2100      	movs	r1, #0
 8004a0e:	2001      	movs	r0, #1
 8004a10:	f000 ff24 	bl	800585c <osSemaphoreNew>
 8004a14:	4603      	mov	r3, r0
 8004a16:	4a53      	ldr	r2, [pc, #332]	@ (8004b64 <low_level_init+0x26c>)
 8004a18:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8004a1a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8004a1e:	2224      	movs	r2, #36	@ 0x24
 8004a20:	2100      	movs	r1, #0
 8004a22:	4618      	mov	r0, r3
 8004a24:	f00e fe39 	bl	801369a <memset>
  attributes.name = "EthIf";
 8004a28:	4b4f      	ldr	r3, [pc, #316]	@ (8004b68 <low_level_init+0x270>)
 8004a2a:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8004a2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004a30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 8004a34:	2330      	movs	r3, #48	@ 0x30
 8004a36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 8004a3a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8004a3e:	461a      	mov	r2, r3
 8004a40:	6879      	ldr	r1, [r7, #4]
 8004a42:	484a      	ldr	r0, [pc, #296]	@ (8004b6c <low_level_init+0x274>)
 8004a44:	f000 fd43 	bl	80054ce <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8004a48:	4949      	ldr	r1, [pc, #292]	@ (8004b70 <low_level_init+0x278>)
 8004a4a:	484a      	ldr	r0, [pc, #296]	@ (8004b74 <low_level_init+0x27c>)
 8004a4c:	f7fc f8d7 	bl	8000bfe <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8004a50:	4848      	ldr	r0, [pc, #288]	@ (8004b74 <low_level_init+0x27c>)
 8004a52:	f7fc f906 	bl	8000c62 <LAN8742_Init>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d006      	beq.n	8004a6a <low_level_init+0x172>
  {
    netif_set_link_down(netif);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f005 fda7 	bl	800a5b0 <netif_set_link_down>
    netif_set_down(netif);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f005 fd3a 	bl	800a4dc <netif_set_down>
 8004a68:	e06b      	b.n	8004b42 <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8004a6a:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d165      	bne.n	8004b3e <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004a72:	4840      	ldr	r0, [pc, #256]	@ (8004b74 <low_level_init+0x27c>)
 8004a74:	f7fc f942 	bl	8000cfc <LAN8742_GetLinkState>
 8004a78:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8004a7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	dc06      	bgt.n	8004a92 <low_level_init+0x19a>
    {
      netif_set_link_down(netif);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f005 fd93 	bl	800a5b0 <netif_set_link_down>
      netif_set_down(netif);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f005 fd26 	bl	800a4dc <netif_set_down>
 8004a90:	e057      	b.n	8004b42 <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 8004a92:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004a96:	3b02      	subs	r3, #2
 8004a98:	2b03      	cmp	r3, #3
 8004a9a:	d82b      	bhi.n	8004af4 <low_level_init+0x1fc>
 8004a9c:	a201      	add	r2, pc, #4	@ (adr r2, 8004aa4 <low_level_init+0x1ac>)
 8004a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa2:	bf00      	nop
 8004aa4:	08004ab5 	.word	0x08004ab5
 8004aa8:	08004ac7 	.word	0x08004ac7
 8004aac:	08004ad7 	.word	0x08004ad7
 8004ab0:	08004ae7 	.word	0x08004ae7
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8004ab4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004ab8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8004abc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004ac0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8004ac4:	e01f      	b.n	8004b06 <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8004acc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004ad0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8004ad4:	e017      	b.n	8004b06 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8004ad6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004ada:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8004ae4:	e00f      	b.n	8004b06 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 8004aec:	2300      	movs	r3, #0
 8004aee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8004af2:	e008      	b.n	8004b06 <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 8004af4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004af8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8004afc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004b00:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8004b04:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004b06:	f107 0310 	add.w	r3, r7, #16
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	480e      	ldr	r0, [pc, #56]	@ (8004b48 <low_level_init+0x250>)
 8004b0e:	f7fd f8d3 	bl	8001cb8 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8004b12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004b16:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 8004b18:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004b1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004b1e:	f107 0310 	add.w	r3, r7, #16
 8004b22:	4619      	mov	r1, r3
 8004b24:	4808      	ldr	r0, [pc, #32]	@ (8004b48 <low_level_init+0x250>)
 8004b26:	f7fd fa9b 	bl	8002060 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 8004b2a:	4807      	ldr	r0, [pc, #28]	@ (8004b48 <low_level_init+0x250>)
 8004b2c:	f7fc fc34 	bl	8001398 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f005 fc65 	bl	800a400 <netif_set_up>
    netif_set_link_up(netif);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f005 fd04 	bl	800a544 <netif_set_link_up>
 8004b3c:	e001      	b.n	8004b42 <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 8004b3e:	f7fb fe2f 	bl	80007a0 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004b42:	37a8      	adds	r7, #168	@ 0xa8
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	24000184 	.word	0x24000184
 8004b4c:	40028000 	.word	0x40028000
 8004b50:	30000100 	.word	0x30000100
 8004b54:	30000000 	.word	0x30000000
 8004b58:	24000234 	.word	0x24000234
 8004b5c:	08017038 	.word	0x08017038
 8004b60:	2400017c 	.word	0x2400017c
 8004b64:	24000180 	.word	0x24000180
 8004b68:	080144bc 	.word	0x080144bc
 8004b6c:	08004d09 	.word	0x08004d09
 8004b70:	24000010 	.word	0x24000010
 8004b74:	2400026c 	.word	0x2400026c

08004b78 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b092      	sub	sp, #72	@ 0x48
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8004b82:	2300      	movs	r3, #0
 8004b84:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8004b86:	2300      	movs	r3, #0
 8004b88:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8004b90:	f107 030c 	add.w	r3, r7, #12
 8004b94:	2230      	movs	r2, #48	@ 0x30
 8004b96:	2100      	movs	r1, #0
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f00e fd7e 	bl	801369a <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8004b9e:	f107 030c 	add.w	r3, r7, #12
 8004ba2:	2230      	movs	r2, #48	@ 0x30
 8004ba4:	2100      	movs	r1, #0
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f00e fd77 	bl	801369a <memset>

  for(q = p; q != NULL; q = q->next)
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	643b      	str	r3, [r7, #64]	@ 0x40
 8004bb0:	e045      	b.n	8004c3e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8004bb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bb4:	2b03      	cmp	r3, #3
 8004bb6:	d902      	bls.n	8004bbe <low_level_output+0x46>
      return ERR_IF;
 8004bb8:	f06f 030b 	mvn.w	r3, #11
 8004bbc:	e07f      	b.n	8004cbe <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 8004bbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bc0:	6859      	ldr	r1, [r3, #4]
 8004bc2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	005b      	lsls	r3, r3, #1
 8004bc8:	4413      	add	r3, r2
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	3348      	adds	r3, #72	@ 0x48
 8004bce:	443b      	add	r3, r7
 8004bd0:	3b3c      	subs	r3, #60	@ 0x3c
 8004bd2:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8004bd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bd6:	895b      	ldrh	r3, [r3, #10]
 8004bd8:	4619      	mov	r1, r3
 8004bda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004bdc:	4613      	mov	r3, r2
 8004bde:	005b      	lsls	r3, r3, #1
 8004be0:	4413      	add	r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	3348      	adds	r3, #72	@ 0x48
 8004be6:	443b      	add	r3, r7
 8004be8:	3b38      	subs	r3, #56	@ 0x38
 8004bea:	6019      	str	r1, [r3, #0]

    if(i>0)
 8004bec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d011      	beq.n	8004c16 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8004bf2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bf4:	1e5a      	subs	r2, r3, #1
 8004bf6:	f107 000c 	add.w	r0, r7, #12
 8004bfa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	005b      	lsls	r3, r3, #1
 8004c00:	440b      	add	r3, r1
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	18c1      	adds	r1, r0, r3
 8004c06:	4613      	mov	r3, r2
 8004c08:	005b      	lsls	r3, r3, #1
 8004c0a:	4413      	add	r3, r2
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	3348      	adds	r3, #72	@ 0x48
 8004c10:	443b      	add	r3, r7
 8004c12:	3b34      	subs	r3, #52	@ 0x34
 8004c14:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8004c16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d109      	bne.n	8004c32 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8004c1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c20:	4613      	mov	r3, r2
 8004c22:	005b      	lsls	r3, r3, #1
 8004c24:	4413      	add	r3, r2
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	3348      	adds	r3, #72	@ 0x48
 8004c2a:	443b      	add	r3, r7
 8004c2c:	3b34      	subs	r3, #52	@ 0x34
 8004c2e:	2200      	movs	r2, #0
 8004c30:	601a      	str	r2, [r3, #0]
    }

    i++;
 8004c32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c34:	3301      	adds	r3, #1
 8004c36:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8004c38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d1b6      	bne.n	8004bb2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	891b      	ldrh	r3, [r3, #8]
 8004c48:	461a      	mov	r2, r3
 8004c4a:	4b1f      	ldr	r3, [pc, #124]	@ (8004cc8 <low_level_output+0x150>)
 8004c4c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8004c4e:	4a1e      	ldr	r2, [pc, #120]	@ (8004cc8 <low_level_output+0x150>)
 8004c50:	f107 030c 	add.w	r3, r7, #12
 8004c54:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8004c56:	4a1c      	ldr	r2, [pc, #112]	@ (8004cc8 <low_level_output+0x150>)
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 8004c5c:	6838      	ldr	r0, [r7, #0]
 8004c5e:	f006 f931 	bl	800aec4 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 8004c62:	4919      	ldr	r1, [pc, #100]	@ (8004cc8 <low_level_output+0x150>)
 8004c64:	4819      	ldr	r0, [pc, #100]	@ (8004ccc <low_level_output+0x154>)
 8004c66:	f7fc fc83 	bl	8001570 <HAL_ETH_Transmit_IT>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d103      	bne.n	8004c78 <low_level_output+0x100>
    {
      errval = ERR_OK;
 8004c70:	2300      	movs	r3, #0
 8004c72:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8004c76:	e01b      	b.n	8004cb0 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 8004c78:	4814      	ldr	r0, [pc, #80]	@ (8004ccc <low_level_output+0x154>)
 8004c7a:	f7fd fa5b 	bl	8002134 <HAL_ETH_GetError>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	f003 0302 	and.w	r3, r3, #2
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d00d      	beq.n	8004ca4 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 8004c88:	4b11      	ldr	r3, [pc, #68]	@ (8004cd0 <low_level_output+0x158>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8004c90:	4618      	mov	r0, r3
 8004c92:	f000 fe6d 	bl	8005970 <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 8004c96:	480d      	ldr	r0, [pc, #52]	@ (8004ccc <low_level_output+0x154>)
 8004c98:	f7fc fdf1 	bl	800187e <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 8004c9c:	23fe      	movs	r3, #254	@ 0xfe
 8004c9e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8004ca2:	e005      	b.n	8004cb0 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 8004ca4:	6838      	ldr	r0, [r7, #0]
 8004ca6:	f006 f867 	bl	800ad78 <pbuf_free>
        errval =  ERR_IF;
 8004caa:	23f4      	movs	r3, #244	@ 0xf4
 8004cac:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 8004cb0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8004cb4:	f113 0f02 	cmn.w	r3, #2
 8004cb8:	d0d3      	beq.n	8004c62 <low_level_output+0xea>

  return errval;
 8004cba:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3748      	adds	r7, #72	@ 0x48
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	24000234 	.word	0x24000234
 8004ccc:	24000184 	.word	0x24000184
 8004cd0:	24000180 	.word	0x24000180

08004cd4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8004ce0:	4b07      	ldr	r3, [pc, #28]	@ (8004d00 <low_level_input+0x2c>)
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d105      	bne.n	8004cf4 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8004ce8:	f107 030c 	add.w	r3, r7, #12
 8004cec:	4619      	mov	r1, r3
 8004cee:	4805      	ldr	r0, [pc, #20]	@ (8004d04 <low_level_input+0x30>)
 8004cf0:	f7fc fc8f 	bl	8001612 <HAL_ETH_ReadData>
  }

  return p;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3710      	adds	r7, #16
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	24000178 	.word	0x24000178
 8004d04:	24000184 	.word	0x24000184

08004d08 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004d10:	2300      	movs	r3, #0
 8004d12:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004d18:	4b0f      	ldr	r3, [pc, #60]	@ (8004d58 <ethernetif_input+0x50>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f04f 31ff 	mov.w	r1, #4294967295
 8004d20:	4618      	mov	r0, r3
 8004d22:	f000 fe25 	bl	8005970 <osSemaphoreAcquire>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1f5      	bne.n	8004d18 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8004d2c:	68b8      	ldr	r0, [r7, #8]
 8004d2e:	f7ff ffd1 	bl	8004cd4 <low_level_input>
 8004d32:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00a      	beq.n	8004d50 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	68b9      	ldr	r1, [r7, #8]
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	4798      	blx	r3
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d002      	beq.n	8004d50 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8004d4a:	68f8      	ldr	r0, [r7, #12]
 8004d4c:	f006 f814 	bl	800ad78 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1ea      	bne.n	8004d2c <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004d56:	e7df      	b.n	8004d18 <ethernetif_input+0x10>
 8004d58:	2400017c 	.word	0x2400017c

08004d5c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d106      	bne.n	8004d78 <ethernetif_init+0x1c>
 8004d6a:	4b0e      	ldr	r3, [pc, #56]	@ (8004da4 <ethernetif_init+0x48>)
 8004d6c:	f240 2237 	movw	r2, #567	@ 0x237
 8004d70:	490d      	ldr	r1, [pc, #52]	@ (8004da8 <ethernetif_init+0x4c>)
 8004d72:	480e      	ldr	r0, [pc, #56]	@ (8004dac <ethernetif_init+0x50>)
 8004d74:	f00e fc2c 	bl	80135d0 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2273      	movs	r2, #115	@ 0x73
 8004d7c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2274      	movs	r2, #116	@ 0x74
 8004d84:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a09      	ldr	r2, [pc, #36]	@ (8004db0 <ethernetif_init+0x54>)
 8004d8c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a08      	ldr	r2, [pc, #32]	@ (8004db4 <ethernetif_init+0x58>)
 8004d92:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f7ff fdaf 	bl	80048f8 <low_level_init>

  return ERR_OK;
 8004d9a:	2300      	movs	r3, #0
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3708      	adds	r7, #8
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	080144c4 	.word	0x080144c4
 8004da8:	080144e0 	.word	0x080144e0
 8004dac:	080144f0 	.word	0x080144f0
 8004db0:	08011499 	.word	0x08011499
 8004db4:	08004b79 	.word	0x08004b79

08004db8 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8004dc4:	68f9      	ldr	r1, [r7, #12]
 8004dc6:	4809      	ldr	r0, [pc, #36]	@ (8004dec <pbuf_free_custom+0x34>)
 8004dc8:	f005 f8fe 	bl	8009fc8 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8004dcc:	4b08      	ldr	r3, [pc, #32]	@ (8004df0 <pbuf_free_custom+0x38>)
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d107      	bne.n	8004de4 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8004dd4:	4b06      	ldr	r3, [pc, #24]	@ (8004df0 <pbuf_free_custom+0x38>)
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8004dda:	4b06      	ldr	r3, [pc, #24]	@ (8004df4 <pbuf_free_custom+0x3c>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4618      	mov	r0, r3
 8004de0:	f000 fe18 	bl	8005a14 <osSemaphoreRelease>
  }
}
 8004de4:	bf00      	nop
 8004de6:	3710      	adds	r7, #16
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	08017038 	.word	0x08017038
 8004df0:	24000178 	.word	0x24000178
 8004df4:	2400017c 	.word	0x2400017c

08004df8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004dfc:	f7fc f856 	bl	8000eac <HAL_GetTick>
 8004e00:	4603      	mov	r3, r0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	bd80      	pop	{r7, pc}
	...

08004e08 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b08e      	sub	sp, #56	@ 0x38
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004e14:	2200      	movs	r2, #0
 8004e16:	601a      	str	r2, [r3, #0]
 8004e18:	605a      	str	r2, [r3, #4]
 8004e1a:	609a      	str	r2, [r3, #8]
 8004e1c:	60da      	str	r2, [r3, #12]
 8004e1e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a5d      	ldr	r2, [pc, #372]	@ (8004f9c <HAL_ETH_MspInit+0x194>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	f040 80b3 	bne.w	8004f92 <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8004e2c:	4b5c      	ldr	r3, [pc, #368]	@ (8004fa0 <HAL_ETH_MspInit+0x198>)
 8004e2e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004e32:	4a5b      	ldr	r2, [pc, #364]	@ (8004fa0 <HAL_ETH_MspInit+0x198>)
 8004e34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e38:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004e3c:	4b58      	ldr	r3, [pc, #352]	@ (8004fa0 <HAL_ETH_MspInit+0x198>)
 8004e3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004e42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e46:	623b      	str	r3, [r7, #32]
 8004e48:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8004e4a:	4b55      	ldr	r3, [pc, #340]	@ (8004fa0 <HAL_ETH_MspInit+0x198>)
 8004e4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004e50:	4a53      	ldr	r2, [pc, #332]	@ (8004fa0 <HAL_ETH_MspInit+0x198>)
 8004e52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e56:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004e5a:	4b51      	ldr	r3, [pc, #324]	@ (8004fa0 <HAL_ETH_MspInit+0x198>)
 8004e5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004e60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e64:	61fb      	str	r3, [r7, #28]
 8004e66:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8004e68:	4b4d      	ldr	r3, [pc, #308]	@ (8004fa0 <HAL_ETH_MspInit+0x198>)
 8004e6a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004e6e:	4a4c      	ldr	r2, [pc, #304]	@ (8004fa0 <HAL_ETH_MspInit+0x198>)
 8004e70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e74:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004e78:	4b49      	ldr	r3, [pc, #292]	@ (8004fa0 <HAL_ETH_MspInit+0x198>)
 8004e7a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004e7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e82:	61bb      	str	r3, [r7, #24]
 8004e84:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e86:	4b46      	ldr	r3, [pc, #280]	@ (8004fa0 <HAL_ETH_MspInit+0x198>)
 8004e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e8c:	4a44      	ldr	r2, [pc, #272]	@ (8004fa0 <HAL_ETH_MspInit+0x198>)
 8004e8e:	f043 0304 	orr.w	r3, r3, #4
 8004e92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004e96:	4b42      	ldr	r3, [pc, #264]	@ (8004fa0 <HAL_ETH_MspInit+0x198>)
 8004e98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e9c:	f003 0304 	and.w	r3, r3, #4
 8004ea0:	617b      	str	r3, [r7, #20]
 8004ea2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ea4:	4b3e      	ldr	r3, [pc, #248]	@ (8004fa0 <HAL_ETH_MspInit+0x198>)
 8004ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004eaa:	4a3d      	ldr	r2, [pc, #244]	@ (8004fa0 <HAL_ETH_MspInit+0x198>)
 8004eac:	f043 0301 	orr.w	r3, r3, #1
 8004eb0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004eb4:	4b3a      	ldr	r3, [pc, #232]	@ (8004fa0 <HAL_ETH_MspInit+0x198>)
 8004eb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004eba:	f003 0301 	and.w	r3, r3, #1
 8004ebe:	613b      	str	r3, [r7, #16]
 8004ec0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ec2:	4b37      	ldr	r3, [pc, #220]	@ (8004fa0 <HAL_ETH_MspInit+0x198>)
 8004ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ec8:	4a35      	ldr	r2, [pc, #212]	@ (8004fa0 <HAL_ETH_MspInit+0x198>)
 8004eca:	f043 0302 	orr.w	r3, r3, #2
 8004ece:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004ed2:	4b33      	ldr	r3, [pc, #204]	@ (8004fa0 <HAL_ETH_MspInit+0x198>)
 8004ed4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ed8:	f003 0302 	and.w	r3, r3, #2
 8004edc:	60fb      	str	r3, [r7, #12]
 8004ede:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004ee0:	2302      	movs	r3, #2
 8004ee2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004eec:	2303      	movs	r3, #3
 8004eee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004ef0:	230b      	movs	r3, #11
 8004ef2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ef4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004ef8:	4619      	mov	r1, r3
 8004efa:	482a      	ldr	r0, [pc, #168]	@ (8004fa4 <HAL_ETH_MspInit+0x19c>)
 8004efc:	f7fd feb6 	bl	8002c6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 8004f00:	2382      	movs	r3, #130	@ 0x82
 8004f02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f04:	2302      	movs	r3, #2
 8004f06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004f10:	230b      	movs	r3, #11
 8004f12:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004f18:	4619      	mov	r1, r3
 8004f1a:	4823      	ldr	r0, [pc, #140]	@ (8004fa8 <HAL_ETH_MspInit+0x1a0>)
 8004f1c:	f7fd fea6 	bl	8002c6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004f20:	2304      	movs	r3, #4
 8004f22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f24:	2302      	movs	r3, #2
 8004f26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004f30:	230b      	movs	r3, #11
 8004f32:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004f38:	4619      	mov	r1, r3
 8004f3a:	481b      	ldr	r0, [pc, #108]	@ (8004fa8 <HAL_ETH_MspInit+0x1a0>)
 8004f3c:	f7fd fe96 	bl	8002c6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004f40:	2330      	movs	r3, #48	@ 0x30
 8004f42:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f44:	2302      	movs	r3, #2
 8004f46:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004f50:	230b      	movs	r3, #11
 8004f52:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004f58:	4619      	mov	r1, r3
 8004f5a:	4812      	ldr	r0, [pc, #72]	@ (8004fa4 <HAL_ETH_MspInit+0x19c>)
 8004f5c:	f7fd fe86 	bl	8002c6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8004f60:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8004f64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f66:	2302      	movs	r3, #2
 8004f68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004f72:	230b      	movs	r3, #11
 8004f74:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	480b      	ldr	r0, [pc, #44]	@ (8004fac <HAL_ETH_MspInit+0x1a4>)
 8004f7e:	f7fd fe75 	bl	8002c6c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8004f82:	2200      	movs	r2, #0
 8004f84:	2105      	movs	r1, #5
 8004f86:	203d      	movs	r0, #61	@ 0x3d
 8004f88:	f7fc f868 	bl	800105c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8004f8c:	203d      	movs	r0, #61	@ 0x3d
 8004f8e:	f7fc f87f 	bl	8001090 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004f92:	bf00      	nop
 8004f94:	3738      	adds	r7, #56	@ 0x38
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	40028000 	.word	0x40028000
 8004fa0:	58024400 	.word	0x58024400
 8004fa4:	58020800 	.word	0x58020800
 8004fa8:	58020000 	.word	0x58020000
 8004fac:	58020400 	.word	0x58020400

08004fb0 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8004fb4:	4802      	ldr	r0, [pc, #8]	@ (8004fc0 <ETH_PHY_IO_Init+0x10>)
 8004fb6:	f7fd f86d 	bl	8002094 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	24000184 	.word	0x24000184

08004fc4 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	af00      	add	r7, sp, #0
  return 0;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	68ba      	ldr	r2, [r7, #8]
 8004fe4:	68f9      	ldr	r1, [r7, #12]
 8004fe6:	4807      	ldr	r0, [pc, #28]	@ (8005004 <ETH_PHY_IO_ReadReg+0x30>)
 8004fe8:	f7fc fdbe 	bl	8001b68 <HAL_ETH_ReadPHYRegister>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d002      	beq.n	8004ff8 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8004ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ff6:	e000      	b.n	8004ffa <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	24000184 	.word	0x24000184

08005008 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	68ba      	ldr	r2, [r7, #8]
 8005018:	68f9      	ldr	r1, [r7, #12]
 800501a:	4807      	ldr	r0, [pc, #28]	@ (8005038 <ETH_PHY_IO_WriteReg+0x30>)
 800501c:	f7fc fdf8 	bl	8001c10 <HAL_ETH_WritePHYRegister>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d002      	beq.n	800502c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8005026:	f04f 33ff 	mov.w	r3, #4294967295
 800502a:	e000      	b.n	800502e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3710      	adds	r7, #16
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	24000184 	.word	0x24000184

0800503c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005040:	f7fb ff34 	bl	8000eac <HAL_GetTick>
 8005044:	4603      	mov	r3, r0
}
 8005046:	4618      	mov	r0, r3
 8005048:	bd80      	pop	{r7, pc}
	...

0800504c <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b0a0      	sub	sp, #128	@ 0x80
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8005054:	f107 0308 	add.w	r3, r7, #8
 8005058:	2264      	movs	r2, #100	@ 0x64
 800505a:	2100      	movs	r1, #0
 800505c:	4618      	mov	r0, r3
 800505e:	f00e fb1c 	bl	801369a <memset>
  int32_t PHYLinkState = 0;
 8005062:	2300      	movs	r3, #0
 8005064:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8005066:	2300      	movs	r3, #0
 8005068:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800506a:	2300      	movs	r3, #0
 800506c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800506e:	2300      	movs	r3, #0
 8005070:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	66fb      	str	r3, [r7, #108]	@ 0x6c
   * This trick allows to keep this change through
   * code re-generation by STM32CubeMX
   */
#define HAL_ETH_Start HAL_ETH_Start_IT
  /* ETH_CODE: workaround to call LOCK_TCPIP_CORE when accessing netif link functions*/
  LOCK_TCPIP_CORE();
 8005076:	f000 f921 	bl	80052bc <sys_lock_tcpip_core>
/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800507a:	483c      	ldr	r0, [pc, #240]	@ (800516c <ethernet_link_thread+0x120>)
 800507c:	f7fb fe3e 	bl	8000cfc <LAN8742_GetLinkState>
 8005080:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8005082:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005084:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005088:	089b      	lsrs	r3, r3, #2
 800508a:	f003 0301 	and.w	r3, r3, #1
 800508e:	b2db      	uxtb	r3, r3
 8005090:	2b00      	cmp	r3, #0
 8005092:	d00c      	beq.n	80050ae <ethernet_link_thread+0x62>
 8005094:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005096:	2b01      	cmp	r3, #1
 8005098:	dc09      	bgt.n	80050ae <ethernet_link_thread+0x62>
  {
    HAL_ETH_Stop_IT(&heth);
 800509a:	4835      	ldr	r0, [pc, #212]	@ (8005170 <ethernet_link_thread+0x124>)
 800509c:	f7fc f9f0 	bl	8001480 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 80050a0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80050a2:	f005 fa1b 	bl	800a4dc <netif_set_down>
    netif_set_link_down(netif);
 80050a6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80050a8:	f005 fa82 	bl	800a5b0 <netif_set_link_down>
 80050ac:	e055      	b.n	800515a <ethernet_link_thread+0x10e>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80050ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050b0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80050b4:	f003 0304 	and.w	r3, r3, #4
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d14e      	bne.n	800515a <ethernet_link_thread+0x10e>
 80050bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80050be:	2b01      	cmp	r3, #1
 80050c0:	dd4b      	ble.n	800515a <ethernet_link_thread+0x10e>
  {
    switch (PHYLinkState)
 80050c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80050c4:	3b02      	subs	r3, #2
 80050c6:	2b03      	cmp	r3, #3
 80050c8:	d82a      	bhi.n	8005120 <ethernet_link_thread+0xd4>
 80050ca:	a201      	add	r2, pc, #4	@ (adr r2, 80050d0 <ethernet_link_thread+0x84>)
 80050cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d0:	080050e1 	.word	0x080050e1
 80050d4:	080050f3 	.word	0x080050f3
 80050d8:	08005103 	.word	0x08005103
 80050dc:	08005113 	.word	0x08005113
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80050e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80050e4:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80050e6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80050ea:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80050ec:	2301      	movs	r3, #1
 80050ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80050f0:	e017      	b.n	8005122 <ethernet_link_thread+0xd6>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80050f2:	2300      	movs	r3, #0
 80050f4:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80050f6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80050fa:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80050fc:	2301      	movs	r3, #1
 80050fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8005100:	e00f      	b.n	8005122 <ethernet_link_thread+0xd6>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8005102:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005106:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8005108:	2300      	movs	r3, #0
 800510a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800510c:	2301      	movs	r3, #1
 800510e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8005110:	e007      	b.n	8005122 <ethernet_link_thread+0xd6>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8005112:	2300      	movs	r3, #0
 8005114:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8005116:	2300      	movs	r3, #0
 8005118:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800511a:	2301      	movs	r3, #1
 800511c:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800511e:	e000      	b.n	8005122 <ethernet_link_thread+0xd6>
    default:
      break;
 8005120:	bf00      	nop
    }

    if(linkchanged)
 8005122:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005124:	2b00      	cmp	r3, #0
 8005126:	d018      	beq.n	800515a <ethernet_link_thread+0x10e>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005128:	f107 0308 	add.w	r3, r7, #8
 800512c:	4619      	mov	r1, r3
 800512e:	4810      	ldr	r0, [pc, #64]	@ (8005170 <ethernet_link_thread+0x124>)
 8005130:	f7fc fdc2 	bl	8001cb8 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8005134:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005136:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8005138:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800513a:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800513c:	f107 0308 	add.w	r3, r7, #8
 8005140:	4619      	mov	r1, r3
 8005142:	480b      	ldr	r0, [pc, #44]	@ (8005170 <ethernet_link_thread+0x124>)
 8005144:	f7fc ff8c 	bl	8002060 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8005148:	4809      	ldr	r0, [pc, #36]	@ (8005170 <ethernet_link_thread+0x124>)
 800514a:	f7fc f925 	bl	8001398 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800514e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005150:	f005 f956 	bl	800a400 <netif_set_up>
      netif_set_link_up(netif);
 8005154:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005156:	f005 f9f5 	bl	800a544 <netif_set_link_up>
    }
  }

/* USER CODE BEGIN ETH link Thread core code for User BSP */
  /* ETH_CODE: workaround to call LOCK_TCPIP_CORE when accessing netif link functions*/
  UNLOCK_TCPIP_CORE();
 800515a:	f000 f8bf 	bl	80052dc <sys_unlock_tcpip_core>
  osDelay(100);
 800515e:	2064      	movs	r0, #100	@ 0x64
 8005160:	f000 fa53 	bl	800560a <osDelay>
  LOCK_TCPIP_CORE();
 8005164:	f000 f8aa 	bl	80052bc <sys_lock_tcpip_core>
  continue; /* skip next osDelay */
 8005168:	bf00      	nop
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800516a:	e786      	b.n	800507a <ethernet_link_thread+0x2e>
 800516c:	2400026c 	.word	0x2400026c
 8005170:	24000184 	.word	0x24000184

08005174 <HAL_ETH_RxAllocateCallback>:
    osDelay(100);
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b086      	sub	sp, #24
 8005178:	af02      	add	r7, sp, #8
 800517a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */

  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800517c:	4812      	ldr	r0, [pc, #72]	@ (80051c8 <HAL_ETH_RxAllocateCallback+0x54>)
 800517e:	f004 feaf 	bl	8009ee0 <memp_malloc_pool>
 8005182:	60f8      	str	r0, [r7, #12]
  if (p)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d014      	beq.n	80051b4 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f103 0220 	add.w	r2, r3, #32
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	4a0d      	ldr	r2, [pc, #52]	@ (80051cc <HAL_ETH_RxAllocateCallback+0x58>)
 8005198:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80051a2:	9201      	str	r2, [sp, #4]
 80051a4:	9300      	str	r3, [sp, #0]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2241      	movs	r2, #65	@ 0x41
 80051aa:	2100      	movs	r1, #0
 80051ac:	2000      	movs	r0, #0
 80051ae:	f005 fc29 	bl	800aa04 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80051b2:	e005      	b.n	80051c0 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80051b4:	4b06      	ldr	r3, [pc, #24]	@ (80051d0 <HAL_ETH_RxAllocateCallback+0x5c>)
 80051b6:	2201      	movs	r2, #1
 80051b8:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	601a      	str	r2, [r3, #0]
}
 80051c0:	bf00      	nop
 80051c2:	3710      	adds	r7, #16
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	08017038 	.word	0x08017038
 80051cc:	08004db9 	.word	0x08004db9
 80051d0:	24000178 	.word	0x24000178

080051d4 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b08d      	sub	sp, #52	@ 0x34
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
 80051e0:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	627b      	str	r3, [r7, #36]	@ 0x24
  struct pbuf *p = NULL;
 80051ea:	2300      	movs	r3, #0
 80051ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	3b20      	subs	r3, #32
 80051f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  p->next = NULL;
 80051f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051f6:	2200      	movs	r2, #0
 80051f8:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80051fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051fc:	2200      	movs	r2, #0
 80051fe:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8005200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005202:	887a      	ldrh	r2, [r7, #2]
 8005204:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8005206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d103      	bne.n	8005216 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800520e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005210:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005212:	601a      	str	r2, [r3, #0]
 8005214:	e003      	b.n	800521e <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8005216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800521c:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800521e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005220:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005222:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8005224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800522a:	e009      	b.n	8005240 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800522c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800522e:	891a      	ldrh	r2, [r3, #8]
 8005230:	887b      	ldrh	r3, [r7, #2]
 8005232:	4413      	add	r3, r2
 8005234:	b29a      	uxth	r2, r3
 8005236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005238:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800523a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005242:	2b00      	cmp	r3, #0
 8005244:	d1f2      	bne.n	800522c <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8005246:	887b      	ldrh	r3, [r7, #2]
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	623a      	str	r2, [r7, #32]
 800524c:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	2b00      	cmp	r3, #0
 8005252:	dd1d      	ble.n	8005290 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8005254:	6a3b      	ldr	r3, [r7, #32]
 8005256:	f003 021f 	and.w	r2, r3, #31
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	4413      	add	r3, r2
 800525e:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8005260:	6a3b      	ldr	r3, [r7, #32]
 8005262:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8005264:	f3bf 8f4f 	dsb	sy
}
 8005268:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800526a:	4a0d      	ldr	r2, [pc, #52]	@ (80052a0 <HAL_ETH_RxLinkCallback+0xcc>)
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	3320      	adds	r3, #32
 8005276:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	3b20      	subs	r3, #32
 800527c:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	2b00      	cmp	r3, #0
 8005282:	dcf2      	bgt.n	800526a <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 8005284:	f3bf 8f4f 	dsb	sy
}
 8005288:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800528a:	f3bf 8f6f 	isb	sy
}
 800528e:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8005290:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 8005292:	bf00      	nop
 8005294:	3734      	adds	r7, #52	@ 0x34
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	e000ed00 	.word	0xe000ed00

080052a4 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f005 fd63 	bl	800ad78 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 80052b2:	bf00      	nop
 80052b4:	3708      	adds	r7, #8
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
	...

080052bc <sys_lock_tcpip_core>:
/* ETH_CODE: add functions needed for proper multithreading support and check */

static osThreadId_t lwip_core_lock_holder_thread_id;
static osThreadId_t lwip_tcpip_thread_id;

void sys_lock_tcpip_core(void){
 80052bc:	b580      	push	{r7, lr}
 80052be:	af00      	add	r7, sp, #0
	sys_mutex_lock(&lock_tcpip_core);
 80052c0:	4804      	ldr	r0, [pc, #16]	@ (80052d4 <sys_lock_tcpip_core+0x18>)
 80052c2:	f00e f82b 	bl	801331c <sys_mutex_lock>
	lwip_core_lock_holder_thread_id = osThreadGetId();
 80052c6:	f000 f995 	bl	80055f4 <osThreadGetId>
 80052ca:	4603      	mov	r3, r0
 80052cc:	4a02      	ldr	r2, [pc, #8]	@ (80052d8 <sys_lock_tcpip_core+0x1c>)
 80052ce:	6013      	str	r3, [r2, #0]
}
 80052d0:	bf00      	nop
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	24009a88 	.word	0x24009a88
 80052d8:	2400028c 	.word	0x2400028c

080052dc <sys_unlock_tcpip_core>:

void sys_unlock_tcpip_core(void){
 80052dc:	b580      	push	{r7, lr}
 80052de:	af00      	add	r7, sp, #0
	lwip_core_lock_holder_thread_id = 0;
 80052e0:	4b03      	ldr	r3, [pc, #12]	@ (80052f0 <sys_unlock_tcpip_core+0x14>)
 80052e2:	2200      	movs	r2, #0
 80052e4:	601a      	str	r2, [r3, #0]
	sys_mutex_unlock(&lock_tcpip_core);
 80052e6:	4803      	ldr	r0, [pc, #12]	@ (80052f4 <sys_unlock_tcpip_core+0x18>)
 80052e8:	f00e f827 	bl	801333a <sys_mutex_unlock>
}
 80052ec:	bf00      	nop
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	2400028c 	.word	0x2400028c
 80052f4:	24009a88 	.word	0x24009a88

080052f8 <sys_check_core_locking>:

void sys_check_core_locking(void){
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
  /* Embedded systems should check we are NOT in an interrupt context here */

  LWIP_ASSERT("Function called from interrupt context", (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0);
 80052fe:	4b15      	ldr	r3, [pc, #84]	@ (8005354 <sys_check_core_locking+0x5c>)
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005306:	2b00      	cmp	r3, #0
 8005308:	d006      	beq.n	8005318 <sys_check_core_locking+0x20>
 800530a:	4b13      	ldr	r3, [pc, #76]	@ (8005358 <sys_check_core_locking+0x60>)
 800530c:	f240 32f3 	movw	r2, #1011	@ 0x3f3
 8005310:	4912      	ldr	r1, [pc, #72]	@ (800535c <sys_check_core_locking+0x64>)
 8005312:	4813      	ldr	r0, [pc, #76]	@ (8005360 <sys_check_core_locking+0x68>)
 8005314:	f00e f95c 	bl	80135d0 <iprintf>

  if (lwip_tcpip_thread_id != 0) {
 8005318:	4b12      	ldr	r3, [pc, #72]	@ (8005364 <sys_check_core_locking+0x6c>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d014      	beq.n	800534a <sys_check_core_locking+0x52>
	  osThreadId_t current_thread_id = osThreadGetId();
 8005320:	f000 f968 	bl	80055f4 <osThreadGetId>
 8005324:	6078      	str	r0, [r7, #4]

#if LWIP_TCPIP_CORE_LOCKING
	LWIP_ASSERT("Function called without core lock", current_thread_id == lwip_core_lock_holder_thread_id);
 8005326:	4b10      	ldr	r3, [pc, #64]	@ (8005368 <sys_check_core_locking+0x70>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	429a      	cmp	r2, r3
 800532e:	d006      	beq.n	800533e <sys_check_core_locking+0x46>
 8005330:	4b09      	ldr	r3, [pc, #36]	@ (8005358 <sys_check_core_locking+0x60>)
 8005332:	f240 32f9 	movw	r2, #1017	@ 0x3f9
 8005336:	490d      	ldr	r1, [pc, #52]	@ (800536c <sys_check_core_locking+0x74>)
 8005338:	4809      	ldr	r0, [pc, #36]	@ (8005360 <sys_check_core_locking+0x68>)
 800533a:	f00e f949 	bl	80135d0 <iprintf>
	/* ETH_CODE: to easily check that example has correct handling of core lock
	 * This will trigger breakpoint (__BKPT)
	 */
#warning Below check should be removed in production code
	if(current_thread_id != lwip_core_lock_holder_thread_id) __BKPT(0);
 800533e:	4b0a      	ldr	r3, [pc, #40]	@ (8005368 <sys_check_core_locking+0x70>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	429a      	cmp	r2, r3
 8005346:	d000      	beq.n	800534a <sys_check_core_locking+0x52>
 8005348:	be00      	bkpt	0x0000
#else /* LWIP_TCPIP_CORE_LOCKING */
	LWIP_ASSERT("Function called from wrong thread", current_thread_id == lwip_tcpip_thread_id);
#endif /* LWIP_TCPIP_CORE_LOCKING */
	LWIP_UNUSED_ARG(current_thread_id); /* for LWIP_NOASSERT */
  }
}
 800534a:	bf00      	nop
 800534c:	3708      	adds	r7, #8
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	e000ed00 	.word	0xe000ed00
 8005358:	080144c4 	.word	0x080144c4
 800535c:	08014518 	.word	0x08014518
 8005360:	080144f0 	.word	0x080144f0
 8005364:	24000290 	.word	0x24000290
 8005368:	2400028c 	.word	0x2400028c
 800536c:	08014540 	.word	0x08014540

08005370 <sys_mark_tcpip_thread>:
void sys_mark_tcpip_thread(void){
 8005370:	b580      	push	{r7, lr}
 8005372:	af00      	add	r7, sp, #0
	lwip_tcpip_thread_id = osThreadGetId();
 8005374:	f000 f93e 	bl	80055f4 <osThreadGetId>
 8005378:	4603      	mov	r3, r0
 800537a:	4a02      	ldr	r2, [pc, #8]	@ (8005384 <sys_mark_tcpip_thread+0x14>)
 800537c:	6013      	str	r3, [r2, #0]
}
 800537e:	bf00      	nop
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	24000290 	.word	0x24000290

08005388 <__NVIC_SetPriority>:
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	4603      	mov	r3, r0
 8005390:	6039      	str	r1, [r7, #0]
 8005392:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005394:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005398:	2b00      	cmp	r3, #0
 800539a:	db0a      	blt.n	80053b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	b2da      	uxtb	r2, r3
 80053a0:	490c      	ldr	r1, [pc, #48]	@ (80053d4 <__NVIC_SetPriority+0x4c>)
 80053a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053a6:	0112      	lsls	r2, r2, #4
 80053a8:	b2d2      	uxtb	r2, r2
 80053aa:	440b      	add	r3, r1
 80053ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80053b0:	e00a      	b.n	80053c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	b2da      	uxtb	r2, r3
 80053b6:	4908      	ldr	r1, [pc, #32]	@ (80053d8 <__NVIC_SetPriority+0x50>)
 80053b8:	88fb      	ldrh	r3, [r7, #6]
 80053ba:	f003 030f 	and.w	r3, r3, #15
 80053be:	3b04      	subs	r3, #4
 80053c0:	0112      	lsls	r2, r2, #4
 80053c2:	b2d2      	uxtb	r2, r2
 80053c4:	440b      	add	r3, r1
 80053c6:	761a      	strb	r2, [r3, #24]
}
 80053c8:	bf00      	nop
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr
 80053d4:	e000e100 	.word	0xe000e100
 80053d8:	e000ed00 	.word	0xe000ed00

080053dc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80053dc:	b580      	push	{r7, lr}
 80053de:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80053e0:	4b05      	ldr	r3, [pc, #20]	@ (80053f8 <SysTick_Handler+0x1c>)
 80053e2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80053e4:	f002 fce0 	bl	8007da8 <xTaskGetSchedulerState>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d001      	beq.n	80053f2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80053ee:	f003 fbdb 	bl	8008ba8 <xPortSysTickHandler>
  }
}
 80053f2:	bf00      	nop
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	e000e010 	.word	0xe000e010

080053fc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80053fc:	b580      	push	{r7, lr}
 80053fe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005400:	2100      	movs	r1, #0
 8005402:	f06f 0004 	mvn.w	r0, #4
 8005406:	f7ff ffbf 	bl	8005388 <__NVIC_SetPriority>
#endif
}
 800540a:	bf00      	nop
 800540c:	bd80      	pop	{r7, pc}
	...

08005410 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005416:	f3ef 8305 	mrs	r3, IPSR
 800541a:	603b      	str	r3, [r7, #0]
  return(result);
 800541c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800541e:	2b00      	cmp	r3, #0
 8005420:	d003      	beq.n	800542a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005422:	f06f 0305 	mvn.w	r3, #5
 8005426:	607b      	str	r3, [r7, #4]
 8005428:	e00c      	b.n	8005444 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800542a:	4b0a      	ldr	r3, [pc, #40]	@ (8005454 <osKernelInitialize+0x44>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d105      	bne.n	800543e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005432:	4b08      	ldr	r3, [pc, #32]	@ (8005454 <osKernelInitialize+0x44>)
 8005434:	2201      	movs	r2, #1
 8005436:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005438:	2300      	movs	r3, #0
 800543a:	607b      	str	r3, [r7, #4]
 800543c:	e002      	b.n	8005444 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800543e:	f04f 33ff 	mov.w	r3, #4294967295
 8005442:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005444:	687b      	ldr	r3, [r7, #4]
}
 8005446:	4618      	mov	r0, r3
 8005448:	370c      	adds	r7, #12
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	24000294 	.word	0x24000294

08005458 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005458:	b580      	push	{r7, lr}
 800545a:	b082      	sub	sp, #8
 800545c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800545e:	f3ef 8305 	mrs	r3, IPSR
 8005462:	603b      	str	r3, [r7, #0]
  return(result);
 8005464:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005466:	2b00      	cmp	r3, #0
 8005468:	d003      	beq.n	8005472 <osKernelStart+0x1a>
    stat = osErrorISR;
 800546a:	f06f 0305 	mvn.w	r3, #5
 800546e:	607b      	str	r3, [r7, #4]
 8005470:	e010      	b.n	8005494 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005472:	4b0b      	ldr	r3, [pc, #44]	@ (80054a0 <osKernelStart+0x48>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2b01      	cmp	r3, #1
 8005478:	d109      	bne.n	800548e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800547a:	f7ff ffbf 	bl	80053fc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800547e:	4b08      	ldr	r3, [pc, #32]	@ (80054a0 <osKernelStart+0x48>)
 8005480:	2202      	movs	r2, #2
 8005482:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005484:	f001 fffc 	bl	8007480 <vTaskStartScheduler>
      stat = osOK;
 8005488:	2300      	movs	r3, #0
 800548a:	607b      	str	r3, [r7, #4]
 800548c:	e002      	b.n	8005494 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800548e:	f04f 33ff 	mov.w	r3, #4294967295
 8005492:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005494:	687b      	ldr	r3, [r7, #4]
}
 8005496:	4618      	mov	r0, r3
 8005498:	3708      	adds	r7, #8
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	24000294 	.word	0x24000294

080054a4 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054aa:	f3ef 8305 	mrs	r3, IPSR
 80054ae:	603b      	str	r3, [r7, #0]
  return(result);
 80054b0:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d003      	beq.n	80054be <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80054b6:	f002 f90f 	bl	80076d8 <xTaskGetTickCountFromISR>
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	e002      	b.n	80054c4 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80054be:	f002 f8fb 	bl	80076b8 <xTaskGetTickCount>
 80054c2:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80054c4:	687b      	ldr	r3, [r7, #4]
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3708      	adds	r7, #8
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}

080054ce <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b08e      	sub	sp, #56	@ 0x38
 80054d2:	af04      	add	r7, sp, #16
 80054d4:	60f8      	str	r0, [r7, #12]
 80054d6:	60b9      	str	r1, [r7, #8]
 80054d8:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80054da:	2300      	movs	r3, #0
 80054dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054de:	f3ef 8305 	mrs	r3, IPSR
 80054e2:	617b      	str	r3, [r7, #20]
  return(result);
 80054e4:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d17f      	bne.n	80055ea <osThreadNew+0x11c>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d07c      	beq.n	80055ea <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 80054f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80054f4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80054f6:	2318      	movs	r3, #24
 80054f8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80054fa:	2300      	movs	r3, #0
 80054fc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80054fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005502:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d045      	beq.n	8005596 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d002      	beq.n	8005518 <osThreadNew+0x4a>
        name = attr->name;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	699b      	ldr	r3, [r3, #24]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d002      	beq.n	8005526 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d008      	beq.n	800553e <osThreadNew+0x70>
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	2b38      	cmp	r3, #56	@ 0x38
 8005530:	d805      	bhi.n	800553e <osThreadNew+0x70>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	f003 0301 	and.w	r3, r3, #1
 800553a:	2b00      	cmp	r3, #0
 800553c:	d001      	beq.n	8005542 <osThreadNew+0x74>
        return (NULL);
 800553e:	2300      	movs	r3, #0
 8005540:	e054      	b.n	80055ec <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	695b      	ldr	r3, [r3, #20]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d003      	beq.n	8005552 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	695b      	ldr	r3, [r3, #20]
 800554e:	089b      	lsrs	r3, r3, #2
 8005550:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00e      	beq.n	8005578 <osThreadNew+0xaa>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	2ba7      	cmp	r3, #167	@ 0xa7
 8005560:	d90a      	bls.n	8005578 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005566:	2b00      	cmp	r3, #0
 8005568:	d006      	beq.n	8005578 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	695b      	ldr	r3, [r3, #20]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d002      	beq.n	8005578 <osThreadNew+0xaa>
        mem = 1;
 8005572:	2301      	movs	r3, #1
 8005574:	61bb      	str	r3, [r7, #24]
 8005576:	e010      	b.n	800559a <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d10c      	bne.n	800559a <osThreadNew+0xcc>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d108      	bne.n	800559a <osThreadNew+0xcc>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d104      	bne.n	800559a <osThreadNew+0xcc>
          mem = 0;
 8005590:	2300      	movs	r3, #0
 8005592:	61bb      	str	r3, [r7, #24]
 8005594:	e001      	b.n	800559a <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8005596:	2300      	movs	r3, #0
 8005598:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800559a:	69bb      	ldr	r3, [r7, #24]
 800559c:	2b01      	cmp	r3, #1
 800559e:	d110      	bne.n	80055c2 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80055a8:	9202      	str	r2, [sp, #8]
 80055aa:	9301      	str	r3, [sp, #4]
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	9300      	str	r3, [sp, #0]
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	6a3a      	ldr	r2, [r7, #32]
 80055b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80055b6:	68f8      	ldr	r0, [r7, #12]
 80055b8:	f001 fd6e 	bl	8007098 <xTaskCreateStatic>
 80055bc:	4603      	mov	r3, r0
 80055be:	613b      	str	r3, [r7, #16]
 80055c0:	e013      	b.n	80055ea <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d110      	bne.n	80055ea <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80055c8:	6a3b      	ldr	r3, [r7, #32]
 80055ca:	b29a      	uxth	r2, r3
 80055cc:	f107 0310 	add.w	r3, r7, #16
 80055d0:	9301      	str	r3, [sp, #4]
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	9300      	str	r3, [sp, #0]
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80055da:	68f8      	ldr	r0, [r7, #12]
 80055dc:	f001 fdbc 	bl	8007158 <xTaskCreate>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d001      	beq.n	80055ea <osThreadNew+0x11c>
            hTask = NULL;
 80055e6:	2300      	movs	r3, #0
 80055e8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80055ea:	693b      	ldr	r3, [r7, #16]
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3728      	adds	r7, #40	@ 0x28
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 80055fa:	f002 fbc5 	bl	8007d88 <xTaskGetCurrentTaskHandle>
 80055fe:	6078      	str	r0, [r7, #4]

  return (id);
 8005600:	687b      	ldr	r3, [r7, #4]
}
 8005602:	4618      	mov	r0, r3
 8005604:	3708      	adds	r7, #8
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}

0800560a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800560a:	b580      	push	{r7, lr}
 800560c:	b084      	sub	sp, #16
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005612:	f3ef 8305 	mrs	r3, IPSR
 8005616:	60bb      	str	r3, [r7, #8]
  return(result);
 8005618:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800561a:	2b00      	cmp	r3, #0
 800561c:	d003      	beq.n	8005626 <osDelay+0x1c>
    stat = osErrorISR;
 800561e:	f06f 0305 	mvn.w	r3, #5
 8005622:	60fb      	str	r3, [r7, #12]
 8005624:	e007      	b.n	8005636 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005626:	2300      	movs	r3, #0
 8005628:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d002      	beq.n	8005636 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f001 feef 	bl	8007414 <vTaskDelay>
    }
  }

  return (stat);
 8005636:	68fb      	ldr	r3, [r7, #12]
}
 8005638:	4618      	mov	r0, r3
 800563a:	3710      	adds	r7, #16
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005640:	b580      	push	{r7, lr}
 8005642:	b088      	sub	sp, #32
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005648:	2300      	movs	r3, #0
 800564a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800564c:	f3ef 8305 	mrs	r3, IPSR
 8005650:	60bb      	str	r3, [r7, #8]
  return(result);
 8005652:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8005654:	2b00      	cmp	r3, #0
 8005656:	d174      	bne.n	8005742 <osMutexNew+0x102>
    if (attr != NULL) {
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d003      	beq.n	8005666 <osMutexNew+0x26>
      type = attr->attr_bits;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	61bb      	str	r3, [r7, #24]
 8005664:	e001      	b.n	800566a <osMutexNew+0x2a>
    } else {
      type = 0U;
 8005666:	2300      	movs	r3, #0
 8005668:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	f003 0301 	and.w	r3, r3, #1
 8005670:	2b00      	cmp	r3, #0
 8005672:	d002      	beq.n	800567a <osMutexNew+0x3a>
      rmtx = 1U;
 8005674:	2301      	movs	r3, #1
 8005676:	617b      	str	r3, [r7, #20]
 8005678:	e001      	b.n	800567e <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800567a:	2300      	movs	r3, #0
 800567c:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	f003 0308 	and.w	r3, r3, #8
 8005684:	2b00      	cmp	r3, #0
 8005686:	d15c      	bne.n	8005742 <osMutexNew+0x102>
      mem = -1;
 8005688:	f04f 33ff 	mov.w	r3, #4294967295
 800568c:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d015      	beq.n	80056c0 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d006      	beq.n	80056aa <osMutexNew+0x6a>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	2b4f      	cmp	r3, #79	@ 0x4f
 80056a2:	d902      	bls.n	80056aa <osMutexNew+0x6a>
          mem = 1;
 80056a4:	2301      	movs	r3, #1
 80056a6:	613b      	str	r3, [r7, #16]
 80056a8:	e00c      	b.n	80056c4 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d108      	bne.n	80056c4 <osMutexNew+0x84>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d104      	bne.n	80056c4 <osMutexNew+0x84>
            mem = 0;
 80056ba:	2300      	movs	r3, #0
 80056bc:	613b      	str	r3, [r7, #16]
 80056be:	e001      	b.n	80056c4 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80056c0:	2300      	movs	r3, #0
 80056c2:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d112      	bne.n	80056f0 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d007      	beq.n	80056e0 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	4619      	mov	r1, r3
 80056d6:	2004      	movs	r0, #4
 80056d8:	f000 fd71 	bl	80061be <xQueueCreateMutexStatic>
 80056dc:	61f8      	str	r0, [r7, #28]
 80056de:	e016      	b.n	800570e <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	4619      	mov	r1, r3
 80056e6:	2001      	movs	r0, #1
 80056e8:	f000 fd69 	bl	80061be <xQueueCreateMutexStatic>
 80056ec:	61f8      	str	r0, [r7, #28]
 80056ee:	e00e      	b.n	800570e <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d10b      	bne.n	800570e <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d004      	beq.n	8005706 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80056fc:	2004      	movs	r0, #4
 80056fe:	f000 fd46 	bl	800618e <xQueueCreateMutex>
 8005702:	61f8      	str	r0, [r7, #28]
 8005704:	e003      	b.n	800570e <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8005706:	2001      	movs	r0, #1
 8005708:	f000 fd41 	bl	800618e <xQueueCreateMutex>
 800570c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00c      	beq.n	800572e <osMutexNew+0xee>
        if (attr != NULL) {
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d003      	beq.n	8005722 <osMutexNew+0xe2>
          name = attr->name;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	60fb      	str	r3, [r7, #12]
 8005720:	e001      	b.n	8005726 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8005722:	2300      	movs	r3, #0
 8005724:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8005726:	68f9      	ldr	r1, [r7, #12]
 8005728:	69f8      	ldr	r0, [r7, #28]
 800572a:	f001 fc2d 	bl	8006f88 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d006      	beq.n	8005742 <osMutexNew+0x102>
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d003      	beq.n	8005742 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	f043 0301 	orr.w	r3, r3, #1
 8005740:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005742:	69fb      	ldr	r3, [r7, #28]
}
 8005744:	4618      	mov	r0, r3
 8005746:	3720      	adds	r7, #32
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800574c:	b580      	push	{r7, lr}
 800574e:	b086      	sub	sp, #24
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f023 0301 	bic.w	r3, r3, #1
 800575c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f003 0301 	and.w	r3, r3, #1
 8005764:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005766:	2300      	movs	r3, #0
 8005768:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800576a:	f3ef 8305 	mrs	r3, IPSR
 800576e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005770:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005772:	2b00      	cmp	r3, #0
 8005774:	d003      	beq.n	800577e <osMutexAcquire+0x32>
    stat = osErrorISR;
 8005776:	f06f 0305 	mvn.w	r3, #5
 800577a:	617b      	str	r3, [r7, #20]
 800577c:	e02c      	b.n	80057d8 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d103      	bne.n	800578c <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8005784:	f06f 0303 	mvn.w	r3, #3
 8005788:	617b      	str	r3, [r7, #20]
 800578a:	e025      	b.n	80057d8 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d011      	beq.n	80057b6 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005792:	6839      	ldr	r1, [r7, #0]
 8005794:	6938      	ldr	r0, [r7, #16]
 8005796:	f000 fd62 	bl	800625e <xQueueTakeMutexRecursive>
 800579a:	4603      	mov	r3, r0
 800579c:	2b01      	cmp	r3, #1
 800579e:	d01b      	beq.n	80057d8 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d003      	beq.n	80057ae <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80057a6:	f06f 0301 	mvn.w	r3, #1
 80057aa:	617b      	str	r3, [r7, #20]
 80057ac:	e014      	b.n	80057d8 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80057ae:	f06f 0302 	mvn.w	r3, #2
 80057b2:	617b      	str	r3, [r7, #20]
 80057b4:	e010      	b.n	80057d8 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80057b6:	6839      	ldr	r1, [r7, #0]
 80057b8:	6938      	ldr	r0, [r7, #16]
 80057ba:	f001 f907 	bl	80069cc <xQueueSemaphoreTake>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d009      	beq.n	80057d8 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d003      	beq.n	80057d2 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80057ca:	f06f 0301 	mvn.w	r3, #1
 80057ce:	617b      	str	r3, [r7, #20]
 80057d0:	e002      	b.n	80057d8 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80057d2:	f06f 0302 	mvn.w	r3, #2
 80057d6:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80057d8:	697b      	ldr	r3, [r7, #20]
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3718      	adds	r7, #24
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}

080057e2 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80057e2:	b580      	push	{r7, lr}
 80057e4:	b086      	sub	sp, #24
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f023 0301 	bic.w	r3, r3, #1
 80057f0:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f003 0301 	and.w	r3, r3, #1
 80057f8:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80057fa:	2300      	movs	r3, #0
 80057fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057fe:	f3ef 8305 	mrs	r3, IPSR
 8005802:	60bb      	str	r3, [r7, #8]
  return(result);
 8005804:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005806:	2b00      	cmp	r3, #0
 8005808:	d003      	beq.n	8005812 <osMutexRelease+0x30>
    stat = osErrorISR;
 800580a:	f06f 0305 	mvn.w	r3, #5
 800580e:	617b      	str	r3, [r7, #20]
 8005810:	e01f      	b.n	8005852 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d103      	bne.n	8005820 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8005818:	f06f 0303 	mvn.w	r3, #3
 800581c:	617b      	str	r3, [r7, #20]
 800581e:	e018      	b.n	8005852 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d009      	beq.n	800583a <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005826:	6938      	ldr	r0, [r7, #16]
 8005828:	f000 fce4 	bl	80061f4 <xQueueGiveMutexRecursive>
 800582c:	4603      	mov	r3, r0
 800582e:	2b01      	cmp	r3, #1
 8005830:	d00f      	beq.n	8005852 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005832:	f06f 0302 	mvn.w	r3, #2
 8005836:	617b      	str	r3, [r7, #20]
 8005838:	e00b      	b.n	8005852 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800583a:	2300      	movs	r3, #0
 800583c:	2200      	movs	r2, #0
 800583e:	2100      	movs	r1, #0
 8005840:	6938      	ldr	r0, [r7, #16]
 8005842:	f000 fdb1 	bl	80063a8 <xQueueGenericSend>
 8005846:	4603      	mov	r3, r0
 8005848:	2b01      	cmp	r3, #1
 800584a:	d002      	beq.n	8005852 <osMutexRelease+0x70>
        stat = osErrorResource;
 800584c:	f06f 0302 	mvn.w	r3, #2
 8005850:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005852:	697b      	ldr	r3, [r7, #20]
}
 8005854:	4618      	mov	r0, r3
 8005856:	3718      	adds	r7, #24
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}

0800585c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800585c:	b580      	push	{r7, lr}
 800585e:	b08a      	sub	sp, #40	@ 0x28
 8005860:	af02      	add	r7, sp, #8
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005868:	2300      	movs	r3, #0
 800586a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800586c:	f3ef 8305 	mrs	r3, IPSR
 8005870:	613b      	str	r3, [r7, #16]
  return(result);
 8005872:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005874:	2b00      	cmp	r3, #0
 8005876:	d175      	bne.n	8005964 <osSemaphoreNew+0x108>
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d072      	beq.n	8005964 <osSemaphoreNew+0x108>
 800587e:	68ba      	ldr	r2, [r7, #8]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	429a      	cmp	r2, r3
 8005884:	d86e      	bhi.n	8005964 <osSemaphoreNew+0x108>
    mem = -1;
 8005886:	f04f 33ff 	mov.w	r3, #4294967295
 800588a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d015      	beq.n	80058be <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d006      	beq.n	80058a8 <osSemaphoreNew+0x4c>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	2b4f      	cmp	r3, #79	@ 0x4f
 80058a0:	d902      	bls.n	80058a8 <osSemaphoreNew+0x4c>
        mem = 1;
 80058a2:	2301      	movs	r3, #1
 80058a4:	61bb      	str	r3, [r7, #24]
 80058a6:	e00c      	b.n	80058c2 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d108      	bne.n	80058c2 <osSemaphoreNew+0x66>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d104      	bne.n	80058c2 <osSemaphoreNew+0x66>
          mem = 0;
 80058b8:	2300      	movs	r3, #0
 80058ba:	61bb      	str	r3, [r7, #24]
 80058bc:	e001      	b.n	80058c2 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80058be:	2300      	movs	r3, #0
 80058c0:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058c8:	d04c      	beq.n	8005964 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d128      	bne.n	8005922 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d10a      	bne.n	80058ec <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	2203      	movs	r2, #3
 80058dc:	9200      	str	r2, [sp, #0]
 80058de:	2200      	movs	r2, #0
 80058e0:	2100      	movs	r1, #0
 80058e2:	2001      	movs	r0, #1
 80058e4:	f000 fb5e 	bl	8005fa4 <xQueueGenericCreateStatic>
 80058e8:	61f8      	str	r0, [r7, #28]
 80058ea:	e005      	b.n	80058f8 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80058ec:	2203      	movs	r2, #3
 80058ee:	2100      	movs	r1, #0
 80058f0:	2001      	movs	r0, #1
 80058f2:	f000 fbd4 	bl	800609e <xQueueGenericCreate>
 80058f6:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d022      	beq.n	8005944 <osSemaphoreNew+0xe8>
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d01f      	beq.n	8005944 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005904:	2300      	movs	r3, #0
 8005906:	2200      	movs	r2, #0
 8005908:	2100      	movs	r1, #0
 800590a:	69f8      	ldr	r0, [r7, #28]
 800590c:	f000 fd4c 	bl	80063a8 <xQueueGenericSend>
 8005910:	4603      	mov	r3, r0
 8005912:	2b01      	cmp	r3, #1
 8005914:	d016      	beq.n	8005944 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8005916:	69f8      	ldr	r0, [r7, #28]
 8005918:	f001 f9ea 	bl	8006cf0 <vQueueDelete>
            hSemaphore = NULL;
 800591c:	2300      	movs	r3, #0
 800591e:	61fb      	str	r3, [r7, #28]
 8005920:	e010      	b.n	8005944 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	2b01      	cmp	r3, #1
 8005926:	d108      	bne.n	800593a <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	461a      	mov	r2, r3
 800592e:	68b9      	ldr	r1, [r7, #8]
 8005930:	68f8      	ldr	r0, [r7, #12]
 8005932:	f000 fccb 	bl	80062cc <xQueueCreateCountingSemaphoreStatic>
 8005936:	61f8      	str	r0, [r7, #28]
 8005938:	e004      	b.n	8005944 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800593a:	68b9      	ldr	r1, [r7, #8]
 800593c:	68f8      	ldr	r0, [r7, #12]
 800593e:	f000 fcfe 	bl	800633e <xQueueCreateCountingSemaphore>
 8005942:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00c      	beq.n	8005964 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d003      	beq.n	8005958 <osSemaphoreNew+0xfc>
          name = attr->name;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	617b      	str	r3, [r7, #20]
 8005956:	e001      	b.n	800595c <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005958:	2300      	movs	r3, #0
 800595a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800595c:	6979      	ldr	r1, [r7, #20]
 800595e:	69f8      	ldr	r0, [r7, #28]
 8005960:	f001 fb12 	bl	8006f88 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005964:	69fb      	ldr	r3, [r7, #28]
}
 8005966:	4618      	mov	r0, r3
 8005968:	3720      	adds	r7, #32
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
	...

08005970 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005970:	b580      	push	{r7, lr}
 8005972:	b086      	sub	sp, #24
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800597e:	2300      	movs	r3, #0
 8005980:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d103      	bne.n	8005990 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005988:	f06f 0303 	mvn.w	r3, #3
 800598c:	617b      	str	r3, [r7, #20]
 800598e:	e039      	b.n	8005a04 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005990:	f3ef 8305 	mrs	r3, IPSR
 8005994:	60fb      	str	r3, [r7, #12]
  return(result);
 8005996:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005998:	2b00      	cmp	r3, #0
 800599a:	d022      	beq.n	80059e2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d003      	beq.n	80059aa <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80059a2:	f06f 0303 	mvn.w	r3, #3
 80059a6:	617b      	str	r3, [r7, #20]
 80059a8:	e02c      	b.n	8005a04 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80059aa:	2300      	movs	r3, #0
 80059ac:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80059ae:	f107 0308 	add.w	r3, r7, #8
 80059b2:	461a      	mov	r2, r3
 80059b4:	2100      	movs	r1, #0
 80059b6:	6938      	ldr	r0, [r7, #16]
 80059b8:	f001 f918 	bl	8006bec <xQueueReceiveFromISR>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d003      	beq.n	80059ca <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80059c2:	f06f 0302 	mvn.w	r3, #2
 80059c6:	617b      	str	r3, [r7, #20]
 80059c8:	e01c      	b.n	8005a04 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d019      	beq.n	8005a04 <osSemaphoreAcquire+0x94>
 80059d0:	4b0f      	ldr	r3, [pc, #60]	@ (8005a10 <osSemaphoreAcquire+0xa0>)
 80059d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059d6:	601a      	str	r2, [r3, #0]
 80059d8:	f3bf 8f4f 	dsb	sy
 80059dc:	f3bf 8f6f 	isb	sy
 80059e0:	e010      	b.n	8005a04 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80059e2:	6839      	ldr	r1, [r7, #0]
 80059e4:	6938      	ldr	r0, [r7, #16]
 80059e6:	f000 fff1 	bl	80069cc <xQueueSemaphoreTake>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d009      	beq.n	8005a04 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d003      	beq.n	80059fe <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80059f6:	f06f 0301 	mvn.w	r3, #1
 80059fa:	617b      	str	r3, [r7, #20]
 80059fc:	e002      	b.n	8005a04 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80059fe:	f06f 0302 	mvn.w	r3, #2
 8005a02:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005a04:	697b      	ldr	r3, [r7, #20]
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3718      	adds	r7, #24
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	e000ed04 	.word	0xe000ed04

08005a14 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b086      	sub	sp, #24
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005a20:	2300      	movs	r3, #0
 8005a22:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d103      	bne.n	8005a32 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005a2a:	f06f 0303 	mvn.w	r3, #3
 8005a2e:	617b      	str	r3, [r7, #20]
 8005a30:	e02c      	b.n	8005a8c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a32:	f3ef 8305 	mrs	r3, IPSR
 8005a36:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a38:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d01a      	beq.n	8005a74 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005a42:	f107 0308 	add.w	r3, r7, #8
 8005a46:	4619      	mov	r1, r3
 8005a48:	6938      	ldr	r0, [r7, #16]
 8005a4a:	f000 fe4d 	bl	80066e8 <xQueueGiveFromISR>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d003      	beq.n	8005a5c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8005a54:	f06f 0302 	mvn.w	r3, #2
 8005a58:	617b      	str	r3, [r7, #20]
 8005a5a:	e017      	b.n	8005a8c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d014      	beq.n	8005a8c <osSemaphoreRelease+0x78>
 8005a62:	4b0d      	ldr	r3, [pc, #52]	@ (8005a98 <osSemaphoreRelease+0x84>)
 8005a64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a68:	601a      	str	r2, [r3, #0]
 8005a6a:	f3bf 8f4f 	dsb	sy
 8005a6e:	f3bf 8f6f 	isb	sy
 8005a72:	e00b      	b.n	8005a8c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005a74:	2300      	movs	r3, #0
 8005a76:	2200      	movs	r2, #0
 8005a78:	2100      	movs	r1, #0
 8005a7a:	6938      	ldr	r0, [r7, #16]
 8005a7c:	f000 fc94 	bl	80063a8 <xQueueGenericSend>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d002      	beq.n	8005a8c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8005a86:	f06f 0302 	mvn.w	r3, #2
 8005a8a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005a8c:	697b      	ldr	r3, [r7, #20]
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3718      	adds	r7, #24
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop
 8005a98:	e000ed04 	.word	0xe000ed04

08005a9c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b08a      	sub	sp, #40	@ 0x28
 8005aa0:	af02      	add	r7, sp, #8
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005aac:	f3ef 8305 	mrs	r3, IPSR
 8005ab0:	613b      	str	r3, [r7, #16]
  return(result);
 8005ab2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d15f      	bne.n	8005b78 <osMessageQueueNew+0xdc>
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d05c      	beq.n	8005b78 <osMessageQueueNew+0xdc>
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d059      	beq.n	8005b78 <osMessageQueueNew+0xdc>
    mem = -1;
 8005ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ac8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d029      	beq.n	8005b24 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d012      	beq.n	8005afe <osMessageQueueNew+0x62>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	2b4f      	cmp	r3, #79	@ 0x4f
 8005ade:	d90e      	bls.n	8005afe <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00a      	beq.n	8005afe <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	695a      	ldr	r2, [r3, #20]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	68b9      	ldr	r1, [r7, #8]
 8005af0:	fb01 f303 	mul.w	r3, r1, r3
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d302      	bcc.n	8005afe <osMessageQueueNew+0x62>
        mem = 1;
 8005af8:	2301      	movs	r3, #1
 8005afa:	61bb      	str	r3, [r7, #24]
 8005afc:	e014      	b.n	8005b28 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d110      	bne.n	8005b28 <osMessageQueueNew+0x8c>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d10c      	bne.n	8005b28 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d108      	bne.n	8005b28 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	695b      	ldr	r3, [r3, #20]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d104      	bne.n	8005b28 <osMessageQueueNew+0x8c>
          mem = 0;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	61bb      	str	r3, [r7, #24]
 8005b22:	e001      	b.n	8005b28 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005b24:	2300      	movs	r3, #0
 8005b26:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d10b      	bne.n	8005b46 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	691a      	ldr	r2, [r3, #16]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	2100      	movs	r1, #0
 8005b38:	9100      	str	r1, [sp, #0]
 8005b3a:	68b9      	ldr	r1, [r7, #8]
 8005b3c:	68f8      	ldr	r0, [r7, #12]
 8005b3e:	f000 fa31 	bl	8005fa4 <xQueueGenericCreateStatic>
 8005b42:	61f8      	str	r0, [r7, #28]
 8005b44:	e008      	b.n	8005b58 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d105      	bne.n	8005b58 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	68b9      	ldr	r1, [r7, #8]
 8005b50:	68f8      	ldr	r0, [r7, #12]
 8005b52:	f000 faa4 	bl	800609e <xQueueGenericCreate>
 8005b56:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00c      	beq.n	8005b78 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d003      	beq.n	8005b6c <osMessageQueueNew+0xd0>
        name = attr->name;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	617b      	str	r3, [r7, #20]
 8005b6a:	e001      	b.n	8005b70 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005b70:	6979      	ldr	r1, [r7, #20]
 8005b72:	69f8      	ldr	r0, [r7, #28]
 8005b74:	f001 fa08 	bl	8006f88 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005b78:	69fb      	ldr	r3, [r7, #28]
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3720      	adds	r7, #32
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
	...

08005b84 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b088      	sub	sp, #32
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	603b      	str	r3, [r7, #0]
 8005b90:	4613      	mov	r3, r2
 8005b92:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b9c:	f3ef 8305 	mrs	r3, IPSR
 8005ba0:	617b      	str	r3, [r7, #20]
  return(result);
 8005ba2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d028      	beq.n	8005bfa <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d005      	beq.n	8005bba <osMessageQueuePut+0x36>
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d002      	beq.n	8005bba <osMessageQueuePut+0x36>
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d003      	beq.n	8005bc2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005bba:	f06f 0303 	mvn.w	r3, #3
 8005bbe:	61fb      	str	r3, [r7, #28]
 8005bc0:	e038      	b.n	8005c34 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005bc6:	f107 0210 	add.w	r2, r7, #16
 8005bca:	2300      	movs	r3, #0
 8005bcc:	68b9      	ldr	r1, [r7, #8]
 8005bce:	69b8      	ldr	r0, [r7, #24]
 8005bd0:	f000 fcec 	bl	80065ac <xQueueGenericSendFromISR>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d003      	beq.n	8005be2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005bda:	f06f 0302 	mvn.w	r3, #2
 8005bde:	61fb      	str	r3, [r7, #28]
 8005be0:	e028      	b.n	8005c34 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d025      	beq.n	8005c34 <osMessageQueuePut+0xb0>
 8005be8:	4b15      	ldr	r3, [pc, #84]	@ (8005c40 <osMessageQueuePut+0xbc>)
 8005bea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bee:	601a      	str	r2, [r3, #0]
 8005bf0:	f3bf 8f4f 	dsb	sy
 8005bf4:	f3bf 8f6f 	isb	sy
 8005bf8:	e01c      	b.n	8005c34 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d002      	beq.n	8005c06 <osMessageQueuePut+0x82>
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d103      	bne.n	8005c0e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005c06:	f06f 0303 	mvn.w	r3, #3
 8005c0a:	61fb      	str	r3, [r7, #28]
 8005c0c:	e012      	b.n	8005c34 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005c0e:	2300      	movs	r3, #0
 8005c10:	683a      	ldr	r2, [r7, #0]
 8005c12:	68b9      	ldr	r1, [r7, #8]
 8005c14:	69b8      	ldr	r0, [r7, #24]
 8005c16:	f000 fbc7 	bl	80063a8 <xQueueGenericSend>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d009      	beq.n	8005c34 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d003      	beq.n	8005c2e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8005c26:	f06f 0301 	mvn.w	r3, #1
 8005c2a:	61fb      	str	r3, [r7, #28]
 8005c2c:	e002      	b.n	8005c34 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005c2e:	f06f 0302 	mvn.w	r3, #2
 8005c32:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005c34:	69fb      	ldr	r3, [r7, #28]
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3720      	adds	r7, #32
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	e000ed04 	.word	0xe000ed04

08005c44 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b088      	sub	sp, #32
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	607a      	str	r2, [r7, #4]
 8005c50:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005c56:	2300      	movs	r3, #0
 8005c58:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c5a:	f3ef 8305 	mrs	r3, IPSR
 8005c5e:	617b      	str	r3, [r7, #20]
  return(result);
 8005c60:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d028      	beq.n	8005cb8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d005      	beq.n	8005c78 <osMessageQueueGet+0x34>
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d002      	beq.n	8005c78 <osMessageQueueGet+0x34>
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d003      	beq.n	8005c80 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005c78:	f06f 0303 	mvn.w	r3, #3
 8005c7c:	61fb      	str	r3, [r7, #28]
 8005c7e:	e037      	b.n	8005cf0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005c80:	2300      	movs	r3, #0
 8005c82:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005c84:	f107 0310 	add.w	r3, r7, #16
 8005c88:	461a      	mov	r2, r3
 8005c8a:	68b9      	ldr	r1, [r7, #8]
 8005c8c:	69b8      	ldr	r0, [r7, #24]
 8005c8e:	f000 ffad 	bl	8006bec <xQueueReceiveFromISR>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d003      	beq.n	8005ca0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005c98:	f06f 0302 	mvn.w	r3, #2
 8005c9c:	61fb      	str	r3, [r7, #28]
 8005c9e:	e027      	b.n	8005cf0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d024      	beq.n	8005cf0 <osMessageQueueGet+0xac>
 8005ca6:	4b15      	ldr	r3, [pc, #84]	@ (8005cfc <osMessageQueueGet+0xb8>)
 8005ca8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cac:	601a      	str	r2, [r3, #0]
 8005cae:	f3bf 8f4f 	dsb	sy
 8005cb2:	f3bf 8f6f 	isb	sy
 8005cb6:	e01b      	b.n	8005cf0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d002      	beq.n	8005cc4 <osMessageQueueGet+0x80>
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d103      	bne.n	8005ccc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005cc4:	f06f 0303 	mvn.w	r3, #3
 8005cc8:	61fb      	str	r3, [r7, #28]
 8005cca:	e011      	b.n	8005cf0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005ccc:	683a      	ldr	r2, [r7, #0]
 8005cce:	68b9      	ldr	r1, [r7, #8]
 8005cd0:	69b8      	ldr	r0, [r7, #24]
 8005cd2:	f000 fd99 	bl	8006808 <xQueueReceive>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d009      	beq.n	8005cf0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d003      	beq.n	8005cea <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8005ce2:	f06f 0301 	mvn.w	r3, #1
 8005ce6:	61fb      	str	r3, [r7, #28]
 8005ce8:	e002      	b.n	8005cf0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8005cea:	f06f 0302 	mvn.w	r3, #2
 8005cee:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005cf0:	69fb      	ldr	r3, [r7, #28]
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3720      	adds	r7, #32
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	e000ed04 	.word	0xe000ed04

08005d00 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005d00:	b480      	push	{r7}
 8005d02:	b085      	sub	sp, #20
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	4a07      	ldr	r2, [pc, #28]	@ (8005d2c <vApplicationGetIdleTaskMemory+0x2c>)
 8005d10:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	4a06      	ldr	r2, [pc, #24]	@ (8005d30 <vApplicationGetIdleTaskMemory+0x30>)
 8005d16:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d1e:	601a      	str	r2, [r3, #0]
}
 8005d20:	bf00      	nop
 8005d22:	3714      	adds	r7, #20
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr
 8005d2c:	24000298 	.word	0x24000298
 8005d30:	24000340 	.word	0x24000340

08005d34 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	4a07      	ldr	r2, [pc, #28]	@ (8005d60 <vApplicationGetTimerTaskMemory+0x2c>)
 8005d44:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	4a06      	ldr	r2, [pc, #24]	@ (8005d64 <vApplicationGetTimerTaskMemory+0x30>)
 8005d4a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005d52:	601a      	str	r2, [r3, #0]
}
 8005d54:	bf00      	nop
 8005d56:	3714      	adds	r7, #20
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr
 8005d60:	24000b40 	.word	0x24000b40
 8005d64:	24000be8 	.word	0x24000be8

08005d68 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f103 0208 	add.w	r2, r3, #8
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d80:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f103 0208 	add.w	r2, r3, #8
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f103 0208 	add.w	r2, r3, #8
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005d9c:	bf00      	nop
 8005d9e:	370c      	adds	r7, #12
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005db6:	bf00      	nop
 8005db8:	370c      	adds	r7, #12
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr

08005dc2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005dc2:	b480      	push	{r7}
 8005dc4:	b085      	sub	sp, #20
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
 8005dca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	689a      	ldr	r2, [r3, #8]
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	683a      	ldr	r2, [r7, #0]
 8005de6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	683a      	ldr	r2, [r7, #0]
 8005dec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	1c5a      	adds	r2, r3, #1
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	601a      	str	r2, [r3, #0]
}
 8005dfe:	bf00      	nop
 8005e00:	3714      	adds	r7, #20
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr

08005e0a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e0a:	b480      	push	{r7}
 8005e0c:	b085      	sub	sp, #20
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
 8005e12:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e20:	d103      	bne.n	8005e2a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	60fb      	str	r3, [r7, #12]
 8005e28:	e00c      	b.n	8005e44 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	3308      	adds	r3, #8
 8005e2e:	60fb      	str	r3, [r7, #12]
 8005e30:	e002      	b.n	8005e38 <vListInsert+0x2e>
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	60fb      	str	r3, [r7, #12]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	68ba      	ldr	r2, [r7, #8]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d2f6      	bcs.n	8005e32 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	685a      	ldr	r2, [r3, #4]
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	683a      	ldr	r2, [r7, #0]
 8005e52:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	683a      	ldr	r2, [r7, #0]
 8005e5e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	1c5a      	adds	r2, r3, #1
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	601a      	str	r2, [r3, #0]
}
 8005e70:	bf00      	nop
 8005e72:	3714      	adds	r7, #20
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b085      	sub	sp, #20
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	6892      	ldr	r2, [r2, #8]
 8005e92:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	6852      	ldr	r2, [r2, #4]
 8005e9c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d103      	bne.n	8005eb0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	689a      	ldr	r2, [r3, #8]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	1e5a      	subs	r2, r3, #1
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3714      	adds	r7, #20
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d10b      	bne.n	8005efc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee8:	f383 8811 	msr	BASEPRI, r3
 8005eec:	f3bf 8f6f 	isb	sy
 8005ef0:	f3bf 8f4f 	dsb	sy
 8005ef4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005ef6:	bf00      	nop
 8005ef8:	bf00      	nop
 8005efa:	e7fd      	b.n	8005ef8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005efc:	f002 fdc4 	bl	8008a88 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f08:	68f9      	ldr	r1, [r7, #12]
 8005f0a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005f0c:	fb01 f303 	mul.w	r3, r1, r3
 8005f10:	441a      	add	r2, r3
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	68f9      	ldr	r1, [r7, #12]
 8005f30:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005f32:	fb01 f303 	mul.w	r3, r1, r3
 8005f36:	441a      	add	r2, r3
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	22ff      	movs	r2, #255	@ 0xff
 8005f40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	22ff      	movs	r2, #255	@ 0xff
 8005f48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d114      	bne.n	8005f7c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d01a      	beq.n	8005f90 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	3310      	adds	r3, #16
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f001 fd4c 	bl	80079fc <xTaskRemoveFromEventList>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d012      	beq.n	8005f90 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8005fa0 <xQueueGenericReset+0xd0>)
 8005f6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f70:	601a      	str	r2, [r3, #0]
 8005f72:	f3bf 8f4f 	dsb	sy
 8005f76:	f3bf 8f6f 	isb	sy
 8005f7a:	e009      	b.n	8005f90 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	3310      	adds	r3, #16
 8005f80:	4618      	mov	r0, r3
 8005f82:	f7ff fef1 	bl	8005d68 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	3324      	adds	r3, #36	@ 0x24
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7ff feec 	bl	8005d68 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005f90:	f002 fdac 	bl	8008aec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005f94:	2301      	movs	r3, #1
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3710      	adds	r7, #16
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	e000ed04 	.word	0xe000ed04

08005fa4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b08e      	sub	sp, #56	@ 0x38
 8005fa8:	af02      	add	r7, sp, #8
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	607a      	str	r2, [r7, #4]
 8005fb0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d10b      	bne.n	8005fd0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fbc:	f383 8811 	msr	BASEPRI, r3
 8005fc0:	f3bf 8f6f 	isb	sy
 8005fc4:	f3bf 8f4f 	dsb	sy
 8005fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005fca:	bf00      	nop
 8005fcc:	bf00      	nop
 8005fce:	e7fd      	b.n	8005fcc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d10b      	bne.n	8005fee <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fda:	f383 8811 	msr	BASEPRI, r3
 8005fde:	f3bf 8f6f 	isb	sy
 8005fe2:	f3bf 8f4f 	dsb	sy
 8005fe6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005fe8:	bf00      	nop
 8005fea:	bf00      	nop
 8005fec:	e7fd      	b.n	8005fea <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d002      	beq.n	8005ffa <xQueueGenericCreateStatic+0x56>
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d001      	beq.n	8005ffe <xQueueGenericCreateStatic+0x5a>
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e000      	b.n	8006000 <xQueueGenericCreateStatic+0x5c>
 8005ffe:	2300      	movs	r3, #0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d10b      	bne.n	800601c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006008:	f383 8811 	msr	BASEPRI, r3
 800600c:	f3bf 8f6f 	isb	sy
 8006010:	f3bf 8f4f 	dsb	sy
 8006014:	623b      	str	r3, [r7, #32]
}
 8006016:	bf00      	nop
 8006018:	bf00      	nop
 800601a:	e7fd      	b.n	8006018 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d102      	bne.n	8006028 <xQueueGenericCreateStatic+0x84>
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d101      	bne.n	800602c <xQueueGenericCreateStatic+0x88>
 8006028:	2301      	movs	r3, #1
 800602a:	e000      	b.n	800602e <xQueueGenericCreateStatic+0x8a>
 800602c:	2300      	movs	r3, #0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d10b      	bne.n	800604a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006036:	f383 8811 	msr	BASEPRI, r3
 800603a:	f3bf 8f6f 	isb	sy
 800603e:	f3bf 8f4f 	dsb	sy
 8006042:	61fb      	str	r3, [r7, #28]
}
 8006044:	bf00      	nop
 8006046:	bf00      	nop
 8006048:	e7fd      	b.n	8006046 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800604a:	2350      	movs	r3, #80	@ 0x50
 800604c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	2b50      	cmp	r3, #80	@ 0x50
 8006052:	d00b      	beq.n	800606c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006058:	f383 8811 	msr	BASEPRI, r3
 800605c:	f3bf 8f6f 	isb	sy
 8006060:	f3bf 8f4f 	dsb	sy
 8006064:	61bb      	str	r3, [r7, #24]
}
 8006066:	bf00      	nop
 8006068:	bf00      	nop
 800606a:	e7fd      	b.n	8006068 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800606c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00d      	beq.n	8006094 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800607a:	2201      	movs	r2, #1
 800607c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006080:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006086:	9300      	str	r3, [sp, #0]
 8006088:	4613      	mov	r3, r2
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	68b9      	ldr	r1, [r7, #8]
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f000 f840 	bl	8006114 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006096:	4618      	mov	r0, r3
 8006098:	3730      	adds	r7, #48	@ 0x30
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}

0800609e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800609e:	b580      	push	{r7, lr}
 80060a0:	b08a      	sub	sp, #40	@ 0x28
 80060a2:	af02      	add	r7, sp, #8
 80060a4:	60f8      	str	r0, [r7, #12]
 80060a6:	60b9      	str	r1, [r7, #8]
 80060a8:	4613      	mov	r3, r2
 80060aa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d10b      	bne.n	80060ca <xQueueGenericCreate+0x2c>
	__asm volatile
 80060b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060b6:	f383 8811 	msr	BASEPRI, r3
 80060ba:	f3bf 8f6f 	isb	sy
 80060be:	f3bf 8f4f 	dsb	sy
 80060c2:	613b      	str	r3, [r7, #16]
}
 80060c4:	bf00      	nop
 80060c6:	bf00      	nop
 80060c8:	e7fd      	b.n	80060c6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	68ba      	ldr	r2, [r7, #8]
 80060ce:	fb02 f303 	mul.w	r3, r2, r3
 80060d2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	3350      	adds	r3, #80	@ 0x50
 80060d8:	4618      	mov	r0, r3
 80060da:	f002 fdf7 	bl	8008ccc <pvPortMalloc>
 80060de:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d011      	beq.n	800610a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	3350      	adds	r3, #80	@ 0x50
 80060ee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80060f0:	69bb      	ldr	r3, [r7, #24]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80060f8:	79fa      	ldrb	r2, [r7, #7]
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	9300      	str	r3, [sp, #0]
 80060fe:	4613      	mov	r3, r2
 8006100:	697a      	ldr	r2, [r7, #20]
 8006102:	68b9      	ldr	r1, [r7, #8]
 8006104:	68f8      	ldr	r0, [r7, #12]
 8006106:	f000 f805 	bl	8006114 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800610a:	69bb      	ldr	r3, [r7, #24]
	}
 800610c:	4618      	mov	r0, r3
 800610e:	3720      	adds	r7, #32
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}

08006114 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	607a      	str	r2, [r7, #4]
 8006120:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d103      	bne.n	8006130 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	69ba      	ldr	r2, [r7, #24]
 800612c:	601a      	str	r2, [r3, #0]
 800612e:	e002      	b.n	8006136 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006130:	69bb      	ldr	r3, [r7, #24]
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	68fa      	ldr	r2, [r7, #12]
 800613a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	68ba      	ldr	r2, [r7, #8]
 8006140:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006142:	2101      	movs	r1, #1
 8006144:	69b8      	ldr	r0, [r7, #24]
 8006146:	f7ff fec3 	bl	8005ed0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	78fa      	ldrb	r2, [r7, #3]
 800614e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006152:	bf00      	nop
 8006154:	3710      	adds	r7, #16
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}

0800615a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800615a:	b580      	push	{r7, lr}
 800615c:	b082      	sub	sp, #8
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d00e      	beq.n	8006186 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800617a:	2300      	movs	r3, #0
 800617c:	2200      	movs	r2, #0
 800617e:	2100      	movs	r1, #0
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 f911 	bl	80063a8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006186:	bf00      	nop
 8006188:	3708      	adds	r7, #8
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}

0800618e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800618e:	b580      	push	{r7, lr}
 8006190:	b086      	sub	sp, #24
 8006192:	af00      	add	r7, sp, #0
 8006194:	4603      	mov	r3, r0
 8006196:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006198:	2301      	movs	r3, #1
 800619a:	617b      	str	r3, [r7, #20]
 800619c:	2300      	movs	r3, #0
 800619e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80061a0:	79fb      	ldrb	r3, [r7, #7]
 80061a2:	461a      	mov	r2, r3
 80061a4:	6939      	ldr	r1, [r7, #16]
 80061a6:	6978      	ldr	r0, [r7, #20]
 80061a8:	f7ff ff79 	bl	800609e <xQueueGenericCreate>
 80061ac:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80061ae:	68f8      	ldr	r0, [r7, #12]
 80061b0:	f7ff ffd3 	bl	800615a <prvInitialiseMutex>

		return xNewQueue;
 80061b4:	68fb      	ldr	r3, [r7, #12]
	}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3718      	adds	r7, #24
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}

080061be <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80061be:	b580      	push	{r7, lr}
 80061c0:	b088      	sub	sp, #32
 80061c2:	af02      	add	r7, sp, #8
 80061c4:	4603      	mov	r3, r0
 80061c6:	6039      	str	r1, [r7, #0]
 80061c8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80061ca:	2301      	movs	r3, #1
 80061cc:	617b      	str	r3, [r7, #20]
 80061ce:	2300      	movs	r3, #0
 80061d0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80061d2:	79fb      	ldrb	r3, [r7, #7]
 80061d4:	9300      	str	r3, [sp, #0]
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	2200      	movs	r2, #0
 80061da:	6939      	ldr	r1, [r7, #16]
 80061dc:	6978      	ldr	r0, [r7, #20]
 80061de:	f7ff fee1 	bl	8005fa4 <xQueueGenericCreateStatic>
 80061e2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f7ff ffb8 	bl	800615a <prvInitialiseMutex>

		return xNewQueue;
 80061ea:	68fb      	ldr	r3, [r7, #12]
	}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3718      	adds	r7, #24
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80061f4:	b590      	push	{r4, r7, lr}
 80061f6:	b087      	sub	sp, #28
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d10b      	bne.n	800621e <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8006206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800620a:	f383 8811 	msr	BASEPRI, r3
 800620e:	f3bf 8f6f 	isb	sy
 8006212:	f3bf 8f4f 	dsb	sy
 8006216:	60fb      	str	r3, [r7, #12]
}
 8006218:	bf00      	nop
 800621a:	bf00      	nop
 800621c:	e7fd      	b.n	800621a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	689c      	ldr	r4, [r3, #8]
 8006222:	f001 fdb1 	bl	8007d88 <xTaskGetCurrentTaskHandle>
 8006226:	4603      	mov	r3, r0
 8006228:	429c      	cmp	r4, r3
 800622a:	d111      	bne.n	8006250 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	1e5a      	subs	r2, r3, #1
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d105      	bne.n	800624a <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800623e:	2300      	movs	r3, #0
 8006240:	2200      	movs	r2, #0
 8006242:	2100      	movs	r1, #0
 8006244:	6938      	ldr	r0, [r7, #16]
 8006246:	f000 f8af 	bl	80063a8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800624a:	2301      	movs	r3, #1
 800624c:	617b      	str	r3, [r7, #20]
 800624e:	e001      	b.n	8006254 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006250:	2300      	movs	r3, #0
 8006252:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8006254:	697b      	ldr	r3, [r7, #20]
	}
 8006256:	4618      	mov	r0, r3
 8006258:	371c      	adds	r7, #28
 800625a:	46bd      	mov	sp, r7
 800625c:	bd90      	pop	{r4, r7, pc}

0800625e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800625e:	b590      	push	{r4, r7, lr}
 8006260:	b087      	sub	sp, #28
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
 8006266:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d10b      	bne.n	800628a <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8006272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006276:	f383 8811 	msr	BASEPRI, r3
 800627a:	f3bf 8f6f 	isb	sy
 800627e:	f3bf 8f4f 	dsb	sy
 8006282:	60fb      	str	r3, [r7, #12]
}
 8006284:	bf00      	nop
 8006286:	bf00      	nop
 8006288:	e7fd      	b.n	8006286 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	689c      	ldr	r4, [r3, #8]
 800628e:	f001 fd7b 	bl	8007d88 <xTaskGetCurrentTaskHandle>
 8006292:	4603      	mov	r3, r0
 8006294:	429c      	cmp	r4, r3
 8006296:	d107      	bne.n	80062a8 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	1c5a      	adds	r2, r3, #1
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80062a2:	2301      	movs	r3, #1
 80062a4:	617b      	str	r3, [r7, #20]
 80062a6:	e00c      	b.n	80062c2 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80062a8:	6839      	ldr	r1, [r7, #0]
 80062aa:	6938      	ldr	r0, [r7, #16]
 80062ac:	f000 fb8e 	bl	80069cc <xQueueSemaphoreTake>
 80062b0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d004      	beq.n	80062c2 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	1c5a      	adds	r2, r3, #1
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80062c2:	697b      	ldr	r3, [r7, #20]
	}
 80062c4:	4618      	mov	r0, r3
 80062c6:	371c      	adds	r7, #28
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd90      	pop	{r4, r7, pc}

080062cc <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b08a      	sub	sp, #40	@ 0x28
 80062d0:	af02      	add	r7, sp, #8
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d10b      	bne.n	80062f6 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 80062de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062e2:	f383 8811 	msr	BASEPRI, r3
 80062e6:	f3bf 8f6f 	isb	sy
 80062ea:	f3bf 8f4f 	dsb	sy
 80062ee:	61bb      	str	r3, [r7, #24]
}
 80062f0:	bf00      	nop
 80062f2:	bf00      	nop
 80062f4:	e7fd      	b.n	80062f2 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80062f6:	68ba      	ldr	r2, [r7, #8]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d90b      	bls.n	8006316 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 80062fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006302:	f383 8811 	msr	BASEPRI, r3
 8006306:	f3bf 8f6f 	isb	sy
 800630a:	f3bf 8f4f 	dsb	sy
 800630e:	617b      	str	r3, [r7, #20]
}
 8006310:	bf00      	nop
 8006312:	bf00      	nop
 8006314:	e7fd      	b.n	8006312 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006316:	2302      	movs	r3, #2
 8006318:	9300      	str	r3, [sp, #0]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	2100      	movs	r1, #0
 8006320:	68f8      	ldr	r0, [r7, #12]
 8006322:	f7ff fe3f 	bl	8005fa4 <xQueueGenericCreateStatic>
 8006326:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d002      	beq.n	8006334 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	68ba      	ldr	r2, [r7, #8]
 8006332:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006334:	69fb      	ldr	r3, [r7, #28]
	}
 8006336:	4618      	mov	r0, r3
 8006338:	3720      	adds	r7, #32
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}

0800633e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800633e:	b580      	push	{r7, lr}
 8006340:	b086      	sub	sp, #24
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
 8006346:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d10b      	bne.n	8006366 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800634e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006352:	f383 8811 	msr	BASEPRI, r3
 8006356:	f3bf 8f6f 	isb	sy
 800635a:	f3bf 8f4f 	dsb	sy
 800635e:	613b      	str	r3, [r7, #16]
}
 8006360:	bf00      	nop
 8006362:	bf00      	nop
 8006364:	e7fd      	b.n	8006362 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006366:	683a      	ldr	r2, [r7, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	429a      	cmp	r2, r3
 800636c:	d90b      	bls.n	8006386 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800636e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006372:	f383 8811 	msr	BASEPRI, r3
 8006376:	f3bf 8f6f 	isb	sy
 800637a:	f3bf 8f4f 	dsb	sy
 800637e:	60fb      	str	r3, [r7, #12]
}
 8006380:	bf00      	nop
 8006382:	bf00      	nop
 8006384:	e7fd      	b.n	8006382 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006386:	2202      	movs	r2, #2
 8006388:	2100      	movs	r1, #0
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f7ff fe87 	bl	800609e <xQueueGenericCreate>
 8006390:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d002      	beq.n	800639e <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	683a      	ldr	r2, [r7, #0]
 800639c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800639e:	697b      	ldr	r3, [r7, #20]
	}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3718      	adds	r7, #24
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b08e      	sub	sp, #56	@ 0x38
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	60b9      	str	r1, [r7, #8]
 80063b2:	607a      	str	r2, [r7, #4]
 80063b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80063b6:	2300      	movs	r3, #0
 80063b8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80063be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d10b      	bne.n	80063dc <xQueueGenericSend+0x34>
	__asm volatile
 80063c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063c8:	f383 8811 	msr	BASEPRI, r3
 80063cc:	f3bf 8f6f 	isb	sy
 80063d0:	f3bf 8f4f 	dsb	sy
 80063d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80063d6:	bf00      	nop
 80063d8:	bf00      	nop
 80063da:	e7fd      	b.n	80063d8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d103      	bne.n	80063ea <xQueueGenericSend+0x42>
 80063e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d101      	bne.n	80063ee <xQueueGenericSend+0x46>
 80063ea:	2301      	movs	r3, #1
 80063ec:	e000      	b.n	80063f0 <xQueueGenericSend+0x48>
 80063ee:	2300      	movs	r3, #0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d10b      	bne.n	800640c <xQueueGenericSend+0x64>
	__asm volatile
 80063f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063f8:	f383 8811 	msr	BASEPRI, r3
 80063fc:	f3bf 8f6f 	isb	sy
 8006400:	f3bf 8f4f 	dsb	sy
 8006404:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006406:	bf00      	nop
 8006408:	bf00      	nop
 800640a:	e7fd      	b.n	8006408 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	2b02      	cmp	r3, #2
 8006410:	d103      	bne.n	800641a <xQueueGenericSend+0x72>
 8006412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006416:	2b01      	cmp	r3, #1
 8006418:	d101      	bne.n	800641e <xQueueGenericSend+0x76>
 800641a:	2301      	movs	r3, #1
 800641c:	e000      	b.n	8006420 <xQueueGenericSend+0x78>
 800641e:	2300      	movs	r3, #0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d10b      	bne.n	800643c <xQueueGenericSend+0x94>
	__asm volatile
 8006424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006428:	f383 8811 	msr	BASEPRI, r3
 800642c:	f3bf 8f6f 	isb	sy
 8006430:	f3bf 8f4f 	dsb	sy
 8006434:	623b      	str	r3, [r7, #32]
}
 8006436:	bf00      	nop
 8006438:	bf00      	nop
 800643a:	e7fd      	b.n	8006438 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800643c:	f001 fcb4 	bl	8007da8 <xTaskGetSchedulerState>
 8006440:	4603      	mov	r3, r0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d102      	bne.n	800644c <xQueueGenericSend+0xa4>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d101      	bne.n	8006450 <xQueueGenericSend+0xa8>
 800644c:	2301      	movs	r3, #1
 800644e:	e000      	b.n	8006452 <xQueueGenericSend+0xaa>
 8006450:	2300      	movs	r3, #0
 8006452:	2b00      	cmp	r3, #0
 8006454:	d10b      	bne.n	800646e <xQueueGenericSend+0xc6>
	__asm volatile
 8006456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800645a:	f383 8811 	msr	BASEPRI, r3
 800645e:	f3bf 8f6f 	isb	sy
 8006462:	f3bf 8f4f 	dsb	sy
 8006466:	61fb      	str	r3, [r7, #28]
}
 8006468:	bf00      	nop
 800646a:	bf00      	nop
 800646c:	e7fd      	b.n	800646a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800646e:	f002 fb0b 	bl	8008a88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006474:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006478:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800647a:	429a      	cmp	r2, r3
 800647c:	d302      	bcc.n	8006484 <xQueueGenericSend+0xdc>
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	2b02      	cmp	r3, #2
 8006482:	d129      	bne.n	80064d8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006484:	683a      	ldr	r2, [r7, #0]
 8006486:	68b9      	ldr	r1, [r7, #8]
 8006488:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800648a:	f000 fc6d 	bl	8006d68 <prvCopyDataToQueue>
 800648e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006494:	2b00      	cmp	r3, #0
 8006496:	d010      	beq.n	80064ba <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800649a:	3324      	adds	r3, #36	@ 0x24
 800649c:	4618      	mov	r0, r3
 800649e:	f001 faad 	bl	80079fc <xTaskRemoveFromEventList>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d013      	beq.n	80064d0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80064a8:	4b3f      	ldr	r3, [pc, #252]	@ (80065a8 <xQueueGenericSend+0x200>)
 80064aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064ae:	601a      	str	r2, [r3, #0]
 80064b0:	f3bf 8f4f 	dsb	sy
 80064b4:	f3bf 8f6f 	isb	sy
 80064b8:	e00a      	b.n	80064d0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80064ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d007      	beq.n	80064d0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80064c0:	4b39      	ldr	r3, [pc, #228]	@ (80065a8 <xQueueGenericSend+0x200>)
 80064c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064c6:	601a      	str	r2, [r3, #0]
 80064c8:	f3bf 8f4f 	dsb	sy
 80064cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80064d0:	f002 fb0c 	bl	8008aec <vPortExitCritical>
				return pdPASS;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e063      	b.n	80065a0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d103      	bne.n	80064e6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80064de:	f002 fb05 	bl	8008aec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80064e2:	2300      	movs	r3, #0
 80064e4:	e05c      	b.n	80065a0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80064e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d106      	bne.n	80064fa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80064ec:	f107 0314 	add.w	r3, r7, #20
 80064f0:	4618      	mov	r0, r3
 80064f2:	f001 fae7 	bl	8007ac4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80064f6:	2301      	movs	r3, #1
 80064f8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80064fa:	f002 faf7 	bl	8008aec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80064fe:	f001 f82f 	bl	8007560 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006502:	f002 fac1 	bl	8008a88 <vPortEnterCritical>
 8006506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006508:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800650c:	b25b      	sxtb	r3, r3
 800650e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006512:	d103      	bne.n	800651c <xQueueGenericSend+0x174>
 8006514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006516:	2200      	movs	r2, #0
 8006518:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800651c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800651e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006522:	b25b      	sxtb	r3, r3
 8006524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006528:	d103      	bne.n	8006532 <xQueueGenericSend+0x18a>
 800652a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800652c:	2200      	movs	r2, #0
 800652e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006532:	f002 fadb 	bl	8008aec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006536:	1d3a      	adds	r2, r7, #4
 8006538:	f107 0314 	add.w	r3, r7, #20
 800653c:	4611      	mov	r1, r2
 800653e:	4618      	mov	r0, r3
 8006540:	f001 fad6 	bl	8007af0 <xTaskCheckForTimeOut>
 8006544:	4603      	mov	r3, r0
 8006546:	2b00      	cmp	r3, #0
 8006548:	d124      	bne.n	8006594 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800654a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800654c:	f000 fd04 	bl	8006f58 <prvIsQueueFull>
 8006550:	4603      	mov	r3, r0
 8006552:	2b00      	cmp	r3, #0
 8006554:	d018      	beq.n	8006588 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006558:	3310      	adds	r3, #16
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	4611      	mov	r1, r2
 800655e:	4618      	mov	r0, r3
 8006560:	f001 f9fa 	bl	8007958 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006564:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006566:	f000 fc8f 	bl	8006e88 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800656a:	f001 f807 	bl	800757c <xTaskResumeAll>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	f47f af7c 	bne.w	800646e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006576:	4b0c      	ldr	r3, [pc, #48]	@ (80065a8 <xQueueGenericSend+0x200>)
 8006578:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800657c:	601a      	str	r2, [r3, #0]
 800657e:	f3bf 8f4f 	dsb	sy
 8006582:	f3bf 8f6f 	isb	sy
 8006586:	e772      	b.n	800646e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006588:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800658a:	f000 fc7d 	bl	8006e88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800658e:	f000 fff5 	bl	800757c <xTaskResumeAll>
 8006592:	e76c      	b.n	800646e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006594:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006596:	f000 fc77 	bl	8006e88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800659a:	f000 ffef 	bl	800757c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800659e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3738      	adds	r7, #56	@ 0x38
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	e000ed04 	.word	0xe000ed04

080065ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b090      	sub	sp, #64	@ 0x40
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	607a      	str	r2, [r7, #4]
 80065b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80065be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d10b      	bne.n	80065dc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80065c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065c8:	f383 8811 	msr	BASEPRI, r3
 80065cc:	f3bf 8f6f 	isb	sy
 80065d0:	f3bf 8f4f 	dsb	sy
 80065d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80065d6:	bf00      	nop
 80065d8:	bf00      	nop
 80065da:	e7fd      	b.n	80065d8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d103      	bne.n	80065ea <xQueueGenericSendFromISR+0x3e>
 80065e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d101      	bne.n	80065ee <xQueueGenericSendFromISR+0x42>
 80065ea:	2301      	movs	r3, #1
 80065ec:	e000      	b.n	80065f0 <xQueueGenericSendFromISR+0x44>
 80065ee:	2300      	movs	r3, #0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d10b      	bne.n	800660c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80065f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065f8:	f383 8811 	msr	BASEPRI, r3
 80065fc:	f3bf 8f6f 	isb	sy
 8006600:	f3bf 8f4f 	dsb	sy
 8006604:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006606:	bf00      	nop
 8006608:	bf00      	nop
 800660a:	e7fd      	b.n	8006608 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	2b02      	cmp	r3, #2
 8006610:	d103      	bne.n	800661a <xQueueGenericSendFromISR+0x6e>
 8006612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006614:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006616:	2b01      	cmp	r3, #1
 8006618:	d101      	bne.n	800661e <xQueueGenericSendFromISR+0x72>
 800661a:	2301      	movs	r3, #1
 800661c:	e000      	b.n	8006620 <xQueueGenericSendFromISR+0x74>
 800661e:	2300      	movs	r3, #0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d10b      	bne.n	800663c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006628:	f383 8811 	msr	BASEPRI, r3
 800662c:	f3bf 8f6f 	isb	sy
 8006630:	f3bf 8f4f 	dsb	sy
 8006634:	623b      	str	r3, [r7, #32]
}
 8006636:	bf00      	nop
 8006638:	bf00      	nop
 800663a:	e7fd      	b.n	8006638 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800663c:	f002 fb04 	bl	8008c48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006640:	f3ef 8211 	mrs	r2, BASEPRI
 8006644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006648:	f383 8811 	msr	BASEPRI, r3
 800664c:	f3bf 8f6f 	isb	sy
 8006650:	f3bf 8f4f 	dsb	sy
 8006654:	61fa      	str	r2, [r7, #28]
 8006656:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006658:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800665a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800665c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800665e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006662:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006664:	429a      	cmp	r2, r3
 8006666:	d302      	bcc.n	800666e <xQueueGenericSendFromISR+0xc2>
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	2b02      	cmp	r3, #2
 800666c:	d12f      	bne.n	80066ce <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800666e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006670:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006674:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800667a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800667c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800667e:	683a      	ldr	r2, [r7, #0]
 8006680:	68b9      	ldr	r1, [r7, #8]
 8006682:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006684:	f000 fb70 	bl	8006d68 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006688:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800668c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006690:	d112      	bne.n	80066b8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006696:	2b00      	cmp	r3, #0
 8006698:	d016      	beq.n	80066c8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800669a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800669c:	3324      	adds	r3, #36	@ 0x24
 800669e:	4618      	mov	r0, r3
 80066a0:	f001 f9ac 	bl	80079fc <xTaskRemoveFromEventList>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00e      	beq.n	80066c8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d00b      	beq.n	80066c8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	601a      	str	r2, [r3, #0]
 80066b6:	e007      	b.n	80066c8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80066b8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80066bc:	3301      	adds	r3, #1
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	b25a      	sxtb	r2, r3
 80066c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80066c8:	2301      	movs	r3, #1
 80066ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80066cc:	e001      	b.n	80066d2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80066ce:	2300      	movs	r3, #0
 80066d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066d4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80066dc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80066de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3740      	adds	r7, #64	@ 0x40
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b08e      	sub	sp, #56	@ 0x38
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80066f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d10b      	bne.n	8006714 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80066fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006700:	f383 8811 	msr	BASEPRI, r3
 8006704:	f3bf 8f6f 	isb	sy
 8006708:	f3bf 8f4f 	dsb	sy
 800670c:	623b      	str	r3, [r7, #32]
}
 800670e:	bf00      	nop
 8006710:	bf00      	nop
 8006712:	e7fd      	b.n	8006710 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006718:	2b00      	cmp	r3, #0
 800671a:	d00b      	beq.n	8006734 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800671c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006720:	f383 8811 	msr	BASEPRI, r3
 8006724:	f3bf 8f6f 	isb	sy
 8006728:	f3bf 8f4f 	dsb	sy
 800672c:	61fb      	str	r3, [r7, #28]
}
 800672e:	bf00      	nop
 8006730:	bf00      	nop
 8006732:	e7fd      	b.n	8006730 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d103      	bne.n	8006744 <xQueueGiveFromISR+0x5c>
 800673c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d101      	bne.n	8006748 <xQueueGiveFromISR+0x60>
 8006744:	2301      	movs	r3, #1
 8006746:	e000      	b.n	800674a <xQueueGiveFromISR+0x62>
 8006748:	2300      	movs	r3, #0
 800674a:	2b00      	cmp	r3, #0
 800674c:	d10b      	bne.n	8006766 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800674e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006752:	f383 8811 	msr	BASEPRI, r3
 8006756:	f3bf 8f6f 	isb	sy
 800675a:	f3bf 8f4f 	dsb	sy
 800675e:	61bb      	str	r3, [r7, #24]
}
 8006760:	bf00      	nop
 8006762:	bf00      	nop
 8006764:	e7fd      	b.n	8006762 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006766:	f002 fa6f 	bl	8008c48 <vPortValidateInterruptPriority>
	__asm volatile
 800676a:	f3ef 8211 	mrs	r2, BASEPRI
 800676e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006772:	f383 8811 	msr	BASEPRI, r3
 8006776:	f3bf 8f6f 	isb	sy
 800677a:	f3bf 8f4f 	dsb	sy
 800677e:	617a      	str	r2, [r7, #20]
 8006780:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006782:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006784:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800678a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800678c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800678e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006790:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006792:	429a      	cmp	r2, r3
 8006794:	d22b      	bcs.n	80067ee <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006798:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800679c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80067a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067a2:	1c5a      	adds	r2, r3, #1
 80067a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067a6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80067a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80067ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b0:	d112      	bne.n	80067d8 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d016      	beq.n	80067e8 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067bc:	3324      	adds	r3, #36	@ 0x24
 80067be:	4618      	mov	r0, r3
 80067c0:	f001 f91c 	bl	80079fc <xTaskRemoveFromEventList>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00e      	beq.n	80067e8 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d00b      	beq.n	80067e8 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	2201      	movs	r2, #1
 80067d4:	601a      	str	r2, [r3, #0]
 80067d6:	e007      	b.n	80067e8 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80067d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80067dc:	3301      	adds	r3, #1
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	b25a      	sxtb	r2, r3
 80067e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80067e8:	2301      	movs	r3, #1
 80067ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80067ec:	e001      	b.n	80067f2 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80067ee:	2300      	movs	r3, #0
 80067f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80067f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067f4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f383 8811 	msr	BASEPRI, r3
}
 80067fc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80067fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006800:	4618      	mov	r0, r3
 8006802:	3738      	adds	r7, #56	@ 0x38
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b08c      	sub	sp, #48	@ 0x30
 800680c:	af00      	add	r7, sp, #0
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	60b9      	str	r1, [r7, #8]
 8006812:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006814:	2300      	movs	r3, #0
 8006816:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800681c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800681e:	2b00      	cmp	r3, #0
 8006820:	d10b      	bne.n	800683a <xQueueReceive+0x32>
	__asm volatile
 8006822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006826:	f383 8811 	msr	BASEPRI, r3
 800682a:	f3bf 8f6f 	isb	sy
 800682e:	f3bf 8f4f 	dsb	sy
 8006832:	623b      	str	r3, [r7, #32]
}
 8006834:	bf00      	nop
 8006836:	bf00      	nop
 8006838:	e7fd      	b.n	8006836 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d103      	bne.n	8006848 <xQueueReceive+0x40>
 8006840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006844:	2b00      	cmp	r3, #0
 8006846:	d101      	bne.n	800684c <xQueueReceive+0x44>
 8006848:	2301      	movs	r3, #1
 800684a:	e000      	b.n	800684e <xQueueReceive+0x46>
 800684c:	2300      	movs	r3, #0
 800684e:	2b00      	cmp	r3, #0
 8006850:	d10b      	bne.n	800686a <xQueueReceive+0x62>
	__asm volatile
 8006852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006856:	f383 8811 	msr	BASEPRI, r3
 800685a:	f3bf 8f6f 	isb	sy
 800685e:	f3bf 8f4f 	dsb	sy
 8006862:	61fb      	str	r3, [r7, #28]
}
 8006864:	bf00      	nop
 8006866:	bf00      	nop
 8006868:	e7fd      	b.n	8006866 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800686a:	f001 fa9d 	bl	8007da8 <xTaskGetSchedulerState>
 800686e:	4603      	mov	r3, r0
 8006870:	2b00      	cmp	r3, #0
 8006872:	d102      	bne.n	800687a <xQueueReceive+0x72>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d101      	bne.n	800687e <xQueueReceive+0x76>
 800687a:	2301      	movs	r3, #1
 800687c:	e000      	b.n	8006880 <xQueueReceive+0x78>
 800687e:	2300      	movs	r3, #0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d10b      	bne.n	800689c <xQueueReceive+0x94>
	__asm volatile
 8006884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006888:	f383 8811 	msr	BASEPRI, r3
 800688c:	f3bf 8f6f 	isb	sy
 8006890:	f3bf 8f4f 	dsb	sy
 8006894:	61bb      	str	r3, [r7, #24]
}
 8006896:	bf00      	nop
 8006898:	bf00      	nop
 800689a:	e7fd      	b.n	8006898 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800689c:	f002 f8f4 	bl	8008a88 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068a4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80068a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d01f      	beq.n	80068ec <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80068ac:	68b9      	ldr	r1, [r7, #8]
 80068ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80068b0:	f000 fac4 	bl	8006e3c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80068b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b6:	1e5a      	subs	r2, r3, #1
 80068b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ba:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068be:	691b      	ldr	r3, [r3, #16]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d00f      	beq.n	80068e4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068c6:	3310      	adds	r3, #16
 80068c8:	4618      	mov	r0, r3
 80068ca:	f001 f897 	bl	80079fc <xTaskRemoveFromEventList>
 80068ce:	4603      	mov	r3, r0
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d007      	beq.n	80068e4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80068d4:	4b3c      	ldr	r3, [pc, #240]	@ (80069c8 <xQueueReceive+0x1c0>)
 80068d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068da:	601a      	str	r2, [r3, #0]
 80068dc:	f3bf 8f4f 	dsb	sy
 80068e0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80068e4:	f002 f902 	bl	8008aec <vPortExitCritical>
				return pdPASS;
 80068e8:	2301      	movs	r3, #1
 80068ea:	e069      	b.n	80069c0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d103      	bne.n	80068fa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80068f2:	f002 f8fb 	bl	8008aec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80068f6:	2300      	movs	r3, #0
 80068f8:	e062      	b.n	80069c0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80068fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d106      	bne.n	800690e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006900:	f107 0310 	add.w	r3, r7, #16
 8006904:	4618      	mov	r0, r3
 8006906:	f001 f8dd 	bl	8007ac4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800690a:	2301      	movs	r3, #1
 800690c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800690e:	f002 f8ed 	bl	8008aec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006912:	f000 fe25 	bl	8007560 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006916:	f002 f8b7 	bl	8008a88 <vPortEnterCritical>
 800691a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800691c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006920:	b25b      	sxtb	r3, r3
 8006922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006926:	d103      	bne.n	8006930 <xQueueReceive+0x128>
 8006928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800692a:	2200      	movs	r2, #0
 800692c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006932:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006936:	b25b      	sxtb	r3, r3
 8006938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800693c:	d103      	bne.n	8006946 <xQueueReceive+0x13e>
 800693e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006940:	2200      	movs	r2, #0
 8006942:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006946:	f002 f8d1 	bl	8008aec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800694a:	1d3a      	adds	r2, r7, #4
 800694c:	f107 0310 	add.w	r3, r7, #16
 8006950:	4611      	mov	r1, r2
 8006952:	4618      	mov	r0, r3
 8006954:	f001 f8cc 	bl	8007af0 <xTaskCheckForTimeOut>
 8006958:	4603      	mov	r3, r0
 800695a:	2b00      	cmp	r3, #0
 800695c:	d123      	bne.n	80069a6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800695e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006960:	f000 fae4 	bl	8006f2c <prvIsQueueEmpty>
 8006964:	4603      	mov	r3, r0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d017      	beq.n	800699a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800696a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800696c:	3324      	adds	r3, #36	@ 0x24
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	4611      	mov	r1, r2
 8006972:	4618      	mov	r0, r3
 8006974:	f000 fff0 	bl	8007958 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006978:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800697a:	f000 fa85 	bl	8006e88 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800697e:	f000 fdfd 	bl	800757c <xTaskResumeAll>
 8006982:	4603      	mov	r3, r0
 8006984:	2b00      	cmp	r3, #0
 8006986:	d189      	bne.n	800689c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006988:	4b0f      	ldr	r3, [pc, #60]	@ (80069c8 <xQueueReceive+0x1c0>)
 800698a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800698e:	601a      	str	r2, [r3, #0]
 8006990:	f3bf 8f4f 	dsb	sy
 8006994:	f3bf 8f6f 	isb	sy
 8006998:	e780      	b.n	800689c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800699a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800699c:	f000 fa74 	bl	8006e88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80069a0:	f000 fdec 	bl	800757c <xTaskResumeAll>
 80069a4:	e77a      	b.n	800689c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80069a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80069a8:	f000 fa6e 	bl	8006e88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80069ac:	f000 fde6 	bl	800757c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80069b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80069b2:	f000 fabb 	bl	8006f2c <prvIsQueueEmpty>
 80069b6:	4603      	mov	r3, r0
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	f43f af6f 	beq.w	800689c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80069be:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3730      	adds	r7, #48	@ 0x30
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	e000ed04 	.word	0xe000ed04

080069cc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b08e      	sub	sp, #56	@ 0x38
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80069d6:	2300      	movs	r3, #0
 80069d8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80069de:	2300      	movs	r3, #0
 80069e0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80069e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d10b      	bne.n	8006a00 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80069e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069ec:	f383 8811 	msr	BASEPRI, r3
 80069f0:	f3bf 8f6f 	isb	sy
 80069f4:	f3bf 8f4f 	dsb	sy
 80069f8:	623b      	str	r3, [r7, #32]
}
 80069fa:	bf00      	nop
 80069fc:	bf00      	nop
 80069fe:	e7fd      	b.n	80069fc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006a00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d00b      	beq.n	8006a20 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8006a08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a0c:	f383 8811 	msr	BASEPRI, r3
 8006a10:	f3bf 8f6f 	isb	sy
 8006a14:	f3bf 8f4f 	dsb	sy
 8006a18:	61fb      	str	r3, [r7, #28]
}
 8006a1a:	bf00      	nop
 8006a1c:	bf00      	nop
 8006a1e:	e7fd      	b.n	8006a1c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a20:	f001 f9c2 	bl	8007da8 <xTaskGetSchedulerState>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d102      	bne.n	8006a30 <xQueueSemaphoreTake+0x64>
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d101      	bne.n	8006a34 <xQueueSemaphoreTake+0x68>
 8006a30:	2301      	movs	r3, #1
 8006a32:	e000      	b.n	8006a36 <xQueueSemaphoreTake+0x6a>
 8006a34:	2300      	movs	r3, #0
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d10b      	bne.n	8006a52 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8006a3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a3e:	f383 8811 	msr	BASEPRI, r3
 8006a42:	f3bf 8f6f 	isb	sy
 8006a46:	f3bf 8f4f 	dsb	sy
 8006a4a:	61bb      	str	r3, [r7, #24]
}
 8006a4c:	bf00      	nop
 8006a4e:	bf00      	nop
 8006a50:	e7fd      	b.n	8006a4e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a52:	f002 f819 	bl	8008a88 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a5a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d024      	beq.n	8006aac <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a64:	1e5a      	subs	r2, r3, #1
 8006a66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a68:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d104      	bne.n	8006a7c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006a72:	f001 fb13 	bl	800809c <pvTaskIncrementMutexHeldCount>
 8006a76:	4602      	mov	r2, r0
 8006a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a7a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a7e:	691b      	ldr	r3, [r3, #16]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d00f      	beq.n	8006aa4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a86:	3310      	adds	r3, #16
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f000 ffb7 	bl	80079fc <xTaskRemoveFromEventList>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d007      	beq.n	8006aa4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006a94:	4b54      	ldr	r3, [pc, #336]	@ (8006be8 <xQueueSemaphoreTake+0x21c>)
 8006a96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a9a:	601a      	str	r2, [r3, #0]
 8006a9c:	f3bf 8f4f 	dsb	sy
 8006aa0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006aa4:	f002 f822 	bl	8008aec <vPortExitCritical>
				return pdPASS;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e098      	b.n	8006bde <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d112      	bne.n	8006ad8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d00b      	beq.n	8006ad0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8006ab8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006abc:	f383 8811 	msr	BASEPRI, r3
 8006ac0:	f3bf 8f6f 	isb	sy
 8006ac4:	f3bf 8f4f 	dsb	sy
 8006ac8:	617b      	str	r3, [r7, #20]
}
 8006aca:	bf00      	nop
 8006acc:	bf00      	nop
 8006ace:	e7fd      	b.n	8006acc <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006ad0:	f002 f80c 	bl	8008aec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	e082      	b.n	8006bde <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ad8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d106      	bne.n	8006aec <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ade:	f107 030c 	add.w	r3, r7, #12
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f000 ffee 	bl	8007ac4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006aec:	f001 fffe 	bl	8008aec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006af0:	f000 fd36 	bl	8007560 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006af4:	f001 ffc8 	bl	8008a88 <vPortEnterCritical>
 8006af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006afa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006afe:	b25b      	sxtb	r3, r3
 8006b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b04:	d103      	bne.n	8006b0e <xQueueSemaphoreTake+0x142>
 8006b06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b10:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006b14:	b25b      	sxtb	r3, r3
 8006b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b1a:	d103      	bne.n	8006b24 <xQueueSemaphoreTake+0x158>
 8006b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006b24:	f001 ffe2 	bl	8008aec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b28:	463a      	mov	r2, r7
 8006b2a:	f107 030c 	add.w	r3, r7, #12
 8006b2e:	4611      	mov	r1, r2
 8006b30:	4618      	mov	r0, r3
 8006b32:	f000 ffdd 	bl	8007af0 <xTaskCheckForTimeOut>
 8006b36:	4603      	mov	r3, r0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d132      	bne.n	8006ba2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b3c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b3e:	f000 f9f5 	bl	8006f2c <prvIsQueueEmpty>
 8006b42:	4603      	mov	r3, r0
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d026      	beq.n	8006b96 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d109      	bne.n	8006b64 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006b50:	f001 ff9a 	bl	8008a88 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006b54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f001 f943 	bl	8007de4 <xTaskPriorityInherit>
 8006b5e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006b60:	f001 ffc4 	bl	8008aec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b66:	3324      	adds	r3, #36	@ 0x24
 8006b68:	683a      	ldr	r2, [r7, #0]
 8006b6a:	4611      	mov	r1, r2
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f000 fef3 	bl	8007958 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006b72:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b74:	f000 f988 	bl	8006e88 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006b78:	f000 fd00 	bl	800757c <xTaskResumeAll>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	f47f af67 	bne.w	8006a52 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006b84:	4b18      	ldr	r3, [pc, #96]	@ (8006be8 <xQueueSemaphoreTake+0x21c>)
 8006b86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b8a:	601a      	str	r2, [r3, #0]
 8006b8c:	f3bf 8f4f 	dsb	sy
 8006b90:	f3bf 8f6f 	isb	sy
 8006b94:	e75d      	b.n	8006a52 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006b96:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b98:	f000 f976 	bl	8006e88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b9c:	f000 fcee 	bl	800757c <xTaskResumeAll>
 8006ba0:	e757      	b.n	8006a52 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006ba2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006ba4:	f000 f970 	bl	8006e88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ba8:	f000 fce8 	bl	800757c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006bac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006bae:	f000 f9bd 	bl	8006f2c <prvIsQueueEmpty>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	f43f af4c 	beq.w	8006a52 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d00d      	beq.n	8006bdc <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006bc0:	f001 ff62 	bl	8008a88 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006bc4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006bc6:	f000 f8b7 	bl	8006d38 <prvGetDisinheritPriorityAfterTimeout>
 8006bca:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f001 f9de 	bl	8007f94 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006bd8:	f001 ff88 	bl	8008aec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006bdc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3738      	adds	r7, #56	@ 0x38
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	bf00      	nop
 8006be8:	e000ed04 	.word	0xe000ed04

08006bec <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b08e      	sub	sp, #56	@ 0x38
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	60b9      	str	r1, [r7, #8]
 8006bf6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d10b      	bne.n	8006c1a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8006c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c06:	f383 8811 	msr	BASEPRI, r3
 8006c0a:	f3bf 8f6f 	isb	sy
 8006c0e:	f3bf 8f4f 	dsb	sy
 8006c12:	623b      	str	r3, [r7, #32]
}
 8006c14:	bf00      	nop
 8006c16:	bf00      	nop
 8006c18:	e7fd      	b.n	8006c16 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d103      	bne.n	8006c28 <xQueueReceiveFromISR+0x3c>
 8006c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d101      	bne.n	8006c2c <xQueueReceiveFromISR+0x40>
 8006c28:	2301      	movs	r3, #1
 8006c2a:	e000      	b.n	8006c2e <xQueueReceiveFromISR+0x42>
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d10b      	bne.n	8006c4a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8006c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c36:	f383 8811 	msr	BASEPRI, r3
 8006c3a:	f3bf 8f6f 	isb	sy
 8006c3e:	f3bf 8f4f 	dsb	sy
 8006c42:	61fb      	str	r3, [r7, #28]
}
 8006c44:	bf00      	nop
 8006c46:	bf00      	nop
 8006c48:	e7fd      	b.n	8006c46 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c4a:	f001 fffd 	bl	8008c48 <vPortValidateInterruptPriority>
	__asm volatile
 8006c4e:	f3ef 8211 	mrs	r2, BASEPRI
 8006c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c56:	f383 8811 	msr	BASEPRI, r3
 8006c5a:	f3bf 8f6f 	isb	sy
 8006c5e:	f3bf 8f4f 	dsb	sy
 8006c62:	61ba      	str	r2, [r7, #24]
 8006c64:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006c66:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c6e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d02f      	beq.n	8006cd6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c78:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006c7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006c80:	68b9      	ldr	r1, [r7, #8]
 8006c82:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c84:	f000 f8da 	bl	8006e3c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c8a:	1e5a      	subs	r2, r3, #1
 8006c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c8e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006c90:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c98:	d112      	bne.n	8006cc0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d016      	beq.n	8006cd0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca4:	3310      	adds	r3, #16
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f000 fea8 	bl	80079fc <xTaskRemoveFromEventList>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d00e      	beq.n	8006cd0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d00b      	beq.n	8006cd0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	601a      	str	r2, [r3, #0]
 8006cbe:	e007      	b.n	8006cd0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006cc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	b25a      	sxtb	r2, r3
 8006cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ccc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cd4:	e001      	b.n	8006cda <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cdc:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	f383 8811 	msr	BASEPRI, r3
}
 8006ce4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006ce6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3738      	adds	r7, #56	@ 0x38
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d10b      	bne.n	8006d1a <vQueueDelete+0x2a>
	__asm volatile
 8006d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d06:	f383 8811 	msr	BASEPRI, r3
 8006d0a:	f3bf 8f6f 	isb	sy
 8006d0e:	f3bf 8f4f 	dsb	sy
 8006d12:	60bb      	str	r3, [r7, #8]
}
 8006d14:	bf00      	nop
 8006d16:	bf00      	nop
 8006d18:	e7fd      	b.n	8006d16 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006d1a:	68f8      	ldr	r0, [r7, #12]
 8006d1c:	f000 f95e 	bl	8006fdc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d102      	bne.n	8006d30 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	f002 f89c 	bl	8008e68 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006d30:	bf00      	nop
 8006d32:	3710      	adds	r7, #16
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006d38:	b480      	push	{r7}
 8006d3a:	b085      	sub	sp, #20
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d006      	beq.n	8006d56 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8006d52:	60fb      	str	r3, [r7, #12]
 8006d54:	e001      	b.n	8006d5a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006d56:	2300      	movs	r3, #0
 8006d58:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
	}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3714      	adds	r7, #20
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr

08006d68 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b086      	sub	sp, #24
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	60b9      	str	r1, [r7, #8]
 8006d72:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006d74:	2300      	movs	r3, #0
 8006d76:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d7c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d10d      	bne.n	8006da2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d14d      	bne.n	8006e2a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	4618      	mov	r0, r3
 8006d94:	f001 f88e 	bl	8007eb4 <xTaskPriorityDisinherit>
 8006d98:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	609a      	str	r2, [r3, #8]
 8006da0:	e043      	b.n	8006e2a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d119      	bne.n	8006ddc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6858      	ldr	r0, [r3, #4]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006db0:	461a      	mov	r2, r3
 8006db2:	68b9      	ldr	r1, [r7, #8]
 8006db4:	f00c fd3d 	bl	8013832 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	685a      	ldr	r2, [r3, #4]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dc0:	441a      	add	r2, r3
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	685a      	ldr	r2, [r3, #4]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d32b      	bcc.n	8006e2a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	605a      	str	r2, [r3, #4]
 8006dda:	e026      	b.n	8006e2a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	68d8      	ldr	r0, [r3, #12]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006de4:	461a      	mov	r2, r3
 8006de6:	68b9      	ldr	r1, [r7, #8]
 8006de8:	f00c fd23 	bl	8013832 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	68da      	ldr	r2, [r3, #12]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006df4:	425b      	negs	r3, r3
 8006df6:	441a      	add	r2, r3
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	68da      	ldr	r2, [r3, #12]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d207      	bcs.n	8006e18 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	689a      	ldr	r2, [r3, #8]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e10:	425b      	negs	r3, r3
 8006e12:	441a      	add	r2, r3
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2b02      	cmp	r3, #2
 8006e1c:	d105      	bne.n	8006e2a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d002      	beq.n	8006e2a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	3b01      	subs	r3, #1
 8006e28:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	1c5a      	adds	r2, r3, #1
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006e32:	697b      	ldr	r3, [r7, #20]
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3718      	adds	r7, #24
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b082      	sub	sp, #8
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d018      	beq.n	8006e80 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	68da      	ldr	r2, [r3, #12]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e56:	441a      	add	r2, r3
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	68da      	ldr	r2, [r3, #12]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d303      	bcc.n	8006e70 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	68d9      	ldr	r1, [r3, #12]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e78:	461a      	mov	r2, r3
 8006e7a:	6838      	ldr	r0, [r7, #0]
 8006e7c:	f00c fcd9 	bl	8013832 <memcpy>
	}
}
 8006e80:	bf00      	nop
 8006e82:	3708      	adds	r7, #8
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006e90:	f001 fdfa 	bl	8008a88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006e9a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e9c:	e011      	b.n	8006ec2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d012      	beq.n	8006ecc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	3324      	adds	r3, #36	@ 0x24
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f000 fda6 	bl	80079fc <xTaskRemoveFromEventList>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d001      	beq.n	8006eba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006eb6:	f000 fe7f 	bl	8007bb8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006eba:	7bfb      	ldrb	r3, [r7, #15]
 8006ebc:	3b01      	subs	r3, #1
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	dce9      	bgt.n	8006e9e <prvUnlockQueue+0x16>
 8006eca:	e000      	b.n	8006ece <prvUnlockQueue+0x46>
					break;
 8006ecc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	22ff      	movs	r2, #255	@ 0xff
 8006ed2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006ed6:	f001 fe09 	bl	8008aec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006eda:	f001 fdd5 	bl	8008a88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ee4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ee6:	e011      	b.n	8006f0c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	691b      	ldr	r3, [r3, #16]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d012      	beq.n	8006f16 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	3310      	adds	r3, #16
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f000 fd81 	bl	80079fc <xTaskRemoveFromEventList>
 8006efa:	4603      	mov	r3, r0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d001      	beq.n	8006f04 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006f00:	f000 fe5a 	bl	8007bb8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006f04:	7bbb      	ldrb	r3, [r7, #14]
 8006f06:	3b01      	subs	r3, #1
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006f0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	dce9      	bgt.n	8006ee8 <prvUnlockQueue+0x60>
 8006f14:	e000      	b.n	8006f18 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006f16:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	22ff      	movs	r2, #255	@ 0xff
 8006f1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006f20:	f001 fde4 	bl	8008aec <vPortExitCritical>
}
 8006f24:	bf00      	nop
 8006f26:	3710      	adds	r7, #16
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006f34:	f001 fda8 	bl	8008a88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d102      	bne.n	8006f46 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006f40:	2301      	movs	r3, #1
 8006f42:	60fb      	str	r3, [r7, #12]
 8006f44:	e001      	b.n	8006f4a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006f46:	2300      	movs	r3, #0
 8006f48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f4a:	f001 fdcf 	bl	8008aec <vPortExitCritical>

	return xReturn;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3710      	adds	r7, #16
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b084      	sub	sp, #16
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006f60:	f001 fd92 	bl	8008a88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d102      	bne.n	8006f76 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006f70:	2301      	movs	r3, #1
 8006f72:	60fb      	str	r3, [r7, #12]
 8006f74:	e001      	b.n	8006f7a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006f76:	2300      	movs	r3, #0
 8006f78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f7a:	f001 fdb7 	bl	8008aec <vPortExitCritical>

	return xReturn;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3710      	adds	r7, #16
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006f88:	b480      	push	{r7}
 8006f8a:	b085      	sub	sp, #20
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f92:	2300      	movs	r3, #0
 8006f94:	60fb      	str	r3, [r7, #12]
 8006f96:	e014      	b.n	8006fc2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006f98:	4a0f      	ldr	r2, [pc, #60]	@ (8006fd8 <vQueueAddToRegistry+0x50>)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d10b      	bne.n	8006fbc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006fa4:	490c      	ldr	r1, [pc, #48]	@ (8006fd8 <vQueueAddToRegistry+0x50>)
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	683a      	ldr	r2, [r7, #0]
 8006faa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006fae:	4a0a      	ldr	r2, [pc, #40]	@ (8006fd8 <vQueueAddToRegistry+0x50>)
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	00db      	lsls	r3, r3, #3
 8006fb4:	4413      	add	r3, r2
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006fba:	e006      	b.n	8006fca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	60fb      	str	r3, [r7, #12]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2b07      	cmp	r3, #7
 8006fc6:	d9e7      	bls.n	8006f98 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006fc8:	bf00      	nop
 8006fca:	bf00      	nop
 8006fcc:	3714      	adds	r7, #20
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr
 8006fd6:	bf00      	nop
 8006fd8:	24001be8 	.word	0x24001be8

08006fdc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006fdc:	b480      	push	{r7}
 8006fde:	b085      	sub	sp, #20
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	60fb      	str	r3, [r7, #12]
 8006fe8:	e016      	b.n	8007018 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006fea:	4a10      	ldr	r2, [pc, #64]	@ (800702c <vQueueUnregisterQueue+0x50>)
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	00db      	lsls	r3, r3, #3
 8006ff0:	4413      	add	r3, r2
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d10b      	bne.n	8007012 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006ffa:	4a0c      	ldr	r2, [pc, #48]	@ (800702c <vQueueUnregisterQueue+0x50>)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2100      	movs	r1, #0
 8007000:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007004:	4a09      	ldr	r2, [pc, #36]	@ (800702c <vQueueUnregisterQueue+0x50>)
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	00db      	lsls	r3, r3, #3
 800700a:	4413      	add	r3, r2
 800700c:	2200      	movs	r2, #0
 800700e:	605a      	str	r2, [r3, #4]
				break;
 8007010:	e006      	b.n	8007020 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	3301      	adds	r3, #1
 8007016:	60fb      	str	r3, [r7, #12]
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2b07      	cmp	r3, #7
 800701c:	d9e5      	bls.n	8006fea <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800701e:	bf00      	nop
 8007020:	bf00      	nop
 8007022:	3714      	adds	r7, #20
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr
 800702c:	24001be8 	.word	0x24001be8

08007030 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007030:	b580      	push	{r7, lr}
 8007032:	b086      	sub	sp, #24
 8007034:	af00      	add	r7, sp, #0
 8007036:	60f8      	str	r0, [r7, #12]
 8007038:	60b9      	str	r1, [r7, #8]
 800703a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007040:	f001 fd22 	bl	8008a88 <vPortEnterCritical>
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800704a:	b25b      	sxtb	r3, r3
 800704c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007050:	d103      	bne.n	800705a <vQueueWaitForMessageRestricted+0x2a>
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	2200      	movs	r2, #0
 8007056:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007060:	b25b      	sxtb	r3, r3
 8007062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007066:	d103      	bne.n	8007070 <vQueueWaitForMessageRestricted+0x40>
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	2200      	movs	r2, #0
 800706c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007070:	f001 fd3c 	bl	8008aec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007078:	2b00      	cmp	r3, #0
 800707a:	d106      	bne.n	800708a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	3324      	adds	r3, #36	@ 0x24
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	68b9      	ldr	r1, [r7, #8]
 8007084:	4618      	mov	r0, r3
 8007086:	f000 fc8d 	bl	80079a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800708a:	6978      	ldr	r0, [r7, #20]
 800708c:	f7ff fefc 	bl	8006e88 <prvUnlockQueue>
	}
 8007090:	bf00      	nop
 8007092:	3718      	adds	r7, #24
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}

08007098 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007098:	b580      	push	{r7, lr}
 800709a:	b08e      	sub	sp, #56	@ 0x38
 800709c:	af04      	add	r7, sp, #16
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	607a      	str	r2, [r7, #4]
 80070a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80070a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d10b      	bne.n	80070c4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80070ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070b0:	f383 8811 	msr	BASEPRI, r3
 80070b4:	f3bf 8f6f 	isb	sy
 80070b8:	f3bf 8f4f 	dsb	sy
 80070bc:	623b      	str	r3, [r7, #32]
}
 80070be:	bf00      	nop
 80070c0:	bf00      	nop
 80070c2:	e7fd      	b.n	80070c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80070c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d10b      	bne.n	80070e2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80070ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ce:	f383 8811 	msr	BASEPRI, r3
 80070d2:	f3bf 8f6f 	isb	sy
 80070d6:	f3bf 8f4f 	dsb	sy
 80070da:	61fb      	str	r3, [r7, #28]
}
 80070dc:	bf00      	nop
 80070de:	bf00      	nop
 80070e0:	e7fd      	b.n	80070de <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80070e2:	23a8      	movs	r3, #168	@ 0xa8
 80070e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	2ba8      	cmp	r3, #168	@ 0xa8
 80070ea:	d00b      	beq.n	8007104 <xTaskCreateStatic+0x6c>
	__asm volatile
 80070ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070f0:	f383 8811 	msr	BASEPRI, r3
 80070f4:	f3bf 8f6f 	isb	sy
 80070f8:	f3bf 8f4f 	dsb	sy
 80070fc:	61bb      	str	r3, [r7, #24]
}
 80070fe:	bf00      	nop
 8007100:	bf00      	nop
 8007102:	e7fd      	b.n	8007100 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007104:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007108:	2b00      	cmp	r3, #0
 800710a:	d01e      	beq.n	800714a <xTaskCreateStatic+0xb2>
 800710c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800710e:	2b00      	cmp	r3, #0
 8007110:	d01b      	beq.n	800714a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007114:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007118:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800711a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800711c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800711e:	2202      	movs	r2, #2
 8007120:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007124:	2300      	movs	r3, #0
 8007126:	9303      	str	r3, [sp, #12]
 8007128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800712a:	9302      	str	r3, [sp, #8]
 800712c:	f107 0314 	add.w	r3, r7, #20
 8007130:	9301      	str	r3, [sp, #4]
 8007132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007134:	9300      	str	r3, [sp, #0]
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	68b9      	ldr	r1, [r7, #8]
 800713c:	68f8      	ldr	r0, [r7, #12]
 800713e:	f000 f851 	bl	80071e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007142:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007144:	f000 f8f6 	bl	8007334 <prvAddNewTaskToReadyList>
 8007148:	e001      	b.n	800714e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800714a:	2300      	movs	r3, #0
 800714c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800714e:	697b      	ldr	r3, [r7, #20]
	}
 8007150:	4618      	mov	r0, r3
 8007152:	3728      	adds	r7, #40	@ 0x28
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007158:	b580      	push	{r7, lr}
 800715a:	b08c      	sub	sp, #48	@ 0x30
 800715c:	af04      	add	r7, sp, #16
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	60b9      	str	r1, [r7, #8]
 8007162:	603b      	str	r3, [r7, #0]
 8007164:	4613      	mov	r3, r2
 8007166:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007168:	88fb      	ldrh	r3, [r7, #6]
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	4618      	mov	r0, r3
 800716e:	f001 fdad 	bl	8008ccc <pvPortMalloc>
 8007172:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d00e      	beq.n	8007198 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800717a:	20a8      	movs	r0, #168	@ 0xa8
 800717c:	f001 fda6 	bl	8008ccc <pvPortMalloc>
 8007180:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007182:	69fb      	ldr	r3, [r7, #28]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d003      	beq.n	8007190 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	697a      	ldr	r2, [r7, #20]
 800718c:	631a      	str	r2, [r3, #48]	@ 0x30
 800718e:	e005      	b.n	800719c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007190:	6978      	ldr	r0, [r7, #20]
 8007192:	f001 fe69 	bl	8008e68 <vPortFree>
 8007196:	e001      	b.n	800719c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007198:	2300      	movs	r3, #0
 800719a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800719c:	69fb      	ldr	r3, [r7, #28]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d017      	beq.n	80071d2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	2200      	movs	r2, #0
 80071a6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80071aa:	88fa      	ldrh	r2, [r7, #6]
 80071ac:	2300      	movs	r3, #0
 80071ae:	9303      	str	r3, [sp, #12]
 80071b0:	69fb      	ldr	r3, [r7, #28]
 80071b2:	9302      	str	r3, [sp, #8]
 80071b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071b6:	9301      	str	r3, [sp, #4]
 80071b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ba:	9300      	str	r3, [sp, #0]
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	68b9      	ldr	r1, [r7, #8]
 80071c0:	68f8      	ldr	r0, [r7, #12]
 80071c2:	f000 f80f 	bl	80071e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80071c6:	69f8      	ldr	r0, [r7, #28]
 80071c8:	f000 f8b4 	bl	8007334 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80071cc:	2301      	movs	r3, #1
 80071ce:	61bb      	str	r3, [r7, #24]
 80071d0:	e002      	b.n	80071d8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80071d2:	f04f 33ff 	mov.w	r3, #4294967295
 80071d6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80071d8:	69bb      	ldr	r3, [r7, #24]
	}
 80071da:	4618      	mov	r0, r3
 80071dc:	3720      	adds	r7, #32
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
	...

080071e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b088      	sub	sp, #32
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	60b9      	str	r1, [r7, #8]
 80071ee:	607a      	str	r2, [r7, #4]
 80071f0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80071f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	009b      	lsls	r3, r3, #2
 80071fa:	461a      	mov	r2, r3
 80071fc:	21a5      	movs	r1, #165	@ 0xa5
 80071fe:	f00c fa4c 	bl	801369a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007204:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007206:	6879      	ldr	r1, [r7, #4]
 8007208:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800720c:	440b      	add	r3, r1
 800720e:	009b      	lsls	r3, r3, #2
 8007210:	4413      	add	r3, r2
 8007212:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	f023 0307 	bic.w	r3, r3, #7
 800721a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	f003 0307 	and.w	r3, r3, #7
 8007222:	2b00      	cmp	r3, #0
 8007224:	d00b      	beq.n	800723e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800722a:	f383 8811 	msr	BASEPRI, r3
 800722e:	f3bf 8f6f 	isb	sy
 8007232:	f3bf 8f4f 	dsb	sy
 8007236:	617b      	str	r3, [r7, #20]
}
 8007238:	bf00      	nop
 800723a:	bf00      	nop
 800723c:	e7fd      	b.n	800723a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d01f      	beq.n	8007284 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007244:	2300      	movs	r3, #0
 8007246:	61fb      	str	r3, [r7, #28]
 8007248:	e012      	b.n	8007270 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800724a:	68ba      	ldr	r2, [r7, #8]
 800724c:	69fb      	ldr	r3, [r7, #28]
 800724e:	4413      	add	r3, r2
 8007250:	7819      	ldrb	r1, [r3, #0]
 8007252:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007254:	69fb      	ldr	r3, [r7, #28]
 8007256:	4413      	add	r3, r2
 8007258:	3334      	adds	r3, #52	@ 0x34
 800725a:	460a      	mov	r2, r1
 800725c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800725e:	68ba      	ldr	r2, [r7, #8]
 8007260:	69fb      	ldr	r3, [r7, #28]
 8007262:	4413      	add	r3, r2
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d006      	beq.n	8007278 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	3301      	adds	r3, #1
 800726e:	61fb      	str	r3, [r7, #28]
 8007270:	69fb      	ldr	r3, [r7, #28]
 8007272:	2b0f      	cmp	r3, #15
 8007274:	d9e9      	bls.n	800724a <prvInitialiseNewTask+0x66>
 8007276:	e000      	b.n	800727a <prvInitialiseNewTask+0x96>
			{
				break;
 8007278:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800727a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800727c:	2200      	movs	r2, #0
 800727e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007282:	e003      	b.n	800728c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007286:	2200      	movs	r2, #0
 8007288:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800728c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800728e:	2b37      	cmp	r3, #55	@ 0x37
 8007290:	d901      	bls.n	8007296 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007292:	2337      	movs	r3, #55	@ 0x37
 8007294:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007298:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800729a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800729c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800729e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80072a0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80072a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072a4:	2200      	movs	r2, #0
 80072a6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80072a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072aa:	3304      	adds	r3, #4
 80072ac:	4618      	mov	r0, r3
 80072ae:	f7fe fd7b 	bl	8005da8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80072b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072b4:	3318      	adds	r3, #24
 80072b6:	4618      	mov	r0, r3
 80072b8:	f7fe fd76 	bl	8005da8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80072bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072c0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072c4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80072c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80072cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072d0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80072d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d4:	2200      	movs	r2, #0
 80072d6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80072da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072dc:	2200      	movs	r2, #0
 80072de:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80072e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072e4:	3354      	adds	r3, #84	@ 0x54
 80072e6:	224c      	movs	r2, #76	@ 0x4c
 80072e8:	2100      	movs	r1, #0
 80072ea:	4618      	mov	r0, r3
 80072ec:	f00c f9d5 	bl	801369a <memset>
 80072f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f2:	4a0d      	ldr	r2, [pc, #52]	@ (8007328 <prvInitialiseNewTask+0x144>)
 80072f4:	659a      	str	r2, [r3, #88]	@ 0x58
 80072f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f8:	4a0c      	ldr	r2, [pc, #48]	@ (800732c <prvInitialiseNewTask+0x148>)
 80072fa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80072fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072fe:	4a0c      	ldr	r2, [pc, #48]	@ (8007330 <prvInitialiseNewTask+0x14c>)
 8007300:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007302:	683a      	ldr	r2, [r7, #0]
 8007304:	68f9      	ldr	r1, [r7, #12]
 8007306:	69b8      	ldr	r0, [r7, #24]
 8007308:	f001 fa8a 	bl	8008820 <pxPortInitialiseStack>
 800730c:	4602      	mov	r2, r0
 800730e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007310:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007314:	2b00      	cmp	r3, #0
 8007316:	d002      	beq.n	800731e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800731a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800731c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800731e:	bf00      	nop
 8007320:	3720      	adds	r7, #32
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	240106ac 	.word	0x240106ac
 800732c:	24010714 	.word	0x24010714
 8007330:	2401077c 	.word	0x2401077c

08007334 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b082      	sub	sp, #8
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800733c:	f001 fba4 	bl	8008a88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007340:	4b2d      	ldr	r3, [pc, #180]	@ (80073f8 <prvAddNewTaskToReadyList+0xc4>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	3301      	adds	r3, #1
 8007346:	4a2c      	ldr	r2, [pc, #176]	@ (80073f8 <prvAddNewTaskToReadyList+0xc4>)
 8007348:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800734a:	4b2c      	ldr	r3, [pc, #176]	@ (80073fc <prvAddNewTaskToReadyList+0xc8>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d109      	bne.n	8007366 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007352:	4a2a      	ldr	r2, [pc, #168]	@ (80073fc <prvAddNewTaskToReadyList+0xc8>)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007358:	4b27      	ldr	r3, [pc, #156]	@ (80073f8 <prvAddNewTaskToReadyList+0xc4>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	2b01      	cmp	r3, #1
 800735e:	d110      	bne.n	8007382 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007360:	f000 fc4e 	bl	8007c00 <prvInitialiseTaskLists>
 8007364:	e00d      	b.n	8007382 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007366:	4b26      	ldr	r3, [pc, #152]	@ (8007400 <prvAddNewTaskToReadyList+0xcc>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d109      	bne.n	8007382 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800736e:	4b23      	ldr	r3, [pc, #140]	@ (80073fc <prvAddNewTaskToReadyList+0xc8>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007378:	429a      	cmp	r2, r3
 800737a:	d802      	bhi.n	8007382 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800737c:	4a1f      	ldr	r2, [pc, #124]	@ (80073fc <prvAddNewTaskToReadyList+0xc8>)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007382:	4b20      	ldr	r3, [pc, #128]	@ (8007404 <prvAddNewTaskToReadyList+0xd0>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	3301      	adds	r3, #1
 8007388:	4a1e      	ldr	r2, [pc, #120]	@ (8007404 <prvAddNewTaskToReadyList+0xd0>)
 800738a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800738c:	4b1d      	ldr	r3, [pc, #116]	@ (8007404 <prvAddNewTaskToReadyList+0xd0>)
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007398:	4b1b      	ldr	r3, [pc, #108]	@ (8007408 <prvAddNewTaskToReadyList+0xd4>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	429a      	cmp	r2, r3
 800739e:	d903      	bls.n	80073a8 <prvAddNewTaskToReadyList+0x74>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073a4:	4a18      	ldr	r2, [pc, #96]	@ (8007408 <prvAddNewTaskToReadyList+0xd4>)
 80073a6:	6013      	str	r3, [r2, #0]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073ac:	4613      	mov	r3, r2
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	4413      	add	r3, r2
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	4a15      	ldr	r2, [pc, #84]	@ (800740c <prvAddNewTaskToReadyList+0xd8>)
 80073b6:	441a      	add	r2, r3
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	3304      	adds	r3, #4
 80073bc:	4619      	mov	r1, r3
 80073be:	4610      	mov	r0, r2
 80073c0:	f7fe fcff 	bl	8005dc2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80073c4:	f001 fb92 	bl	8008aec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80073c8:	4b0d      	ldr	r3, [pc, #52]	@ (8007400 <prvAddNewTaskToReadyList+0xcc>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d00e      	beq.n	80073ee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80073d0:	4b0a      	ldr	r3, [pc, #40]	@ (80073fc <prvAddNewTaskToReadyList+0xc8>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073da:	429a      	cmp	r2, r3
 80073dc:	d207      	bcs.n	80073ee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80073de:	4b0c      	ldr	r3, [pc, #48]	@ (8007410 <prvAddNewTaskToReadyList+0xdc>)
 80073e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073e4:	601a      	str	r2, [r3, #0]
 80073e6:	f3bf 8f4f 	dsb	sy
 80073ea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073ee:	bf00      	nop
 80073f0:	3708      	adds	r7, #8
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	bf00      	nop
 80073f8:	240020fc 	.word	0x240020fc
 80073fc:	24001c28 	.word	0x24001c28
 8007400:	24002108 	.word	0x24002108
 8007404:	24002118 	.word	0x24002118
 8007408:	24002104 	.word	0x24002104
 800740c:	24001c2c 	.word	0x24001c2c
 8007410:	e000ed04 	.word	0xe000ed04

08007414 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800741c:	2300      	movs	r3, #0
 800741e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d018      	beq.n	8007458 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007426:	4b14      	ldr	r3, [pc, #80]	@ (8007478 <vTaskDelay+0x64>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d00b      	beq.n	8007446 <vTaskDelay+0x32>
	__asm volatile
 800742e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007432:	f383 8811 	msr	BASEPRI, r3
 8007436:	f3bf 8f6f 	isb	sy
 800743a:	f3bf 8f4f 	dsb	sy
 800743e:	60bb      	str	r3, [r7, #8]
}
 8007440:	bf00      	nop
 8007442:	bf00      	nop
 8007444:	e7fd      	b.n	8007442 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007446:	f000 f88b 	bl	8007560 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800744a:	2100      	movs	r1, #0
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f000 fe39 	bl	80080c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007452:	f000 f893 	bl	800757c <xTaskResumeAll>
 8007456:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d107      	bne.n	800746e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800745e:	4b07      	ldr	r3, [pc, #28]	@ (800747c <vTaskDelay+0x68>)
 8007460:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007464:	601a      	str	r2, [r3, #0]
 8007466:	f3bf 8f4f 	dsb	sy
 800746a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800746e:	bf00      	nop
 8007470:	3710      	adds	r7, #16
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop
 8007478:	24002124 	.word	0x24002124
 800747c:	e000ed04 	.word	0xe000ed04

08007480 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b08a      	sub	sp, #40	@ 0x28
 8007484:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007486:	2300      	movs	r3, #0
 8007488:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800748a:	2300      	movs	r3, #0
 800748c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800748e:	463a      	mov	r2, r7
 8007490:	1d39      	adds	r1, r7, #4
 8007492:	f107 0308 	add.w	r3, r7, #8
 8007496:	4618      	mov	r0, r3
 8007498:	f7fe fc32 	bl	8005d00 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800749c:	6839      	ldr	r1, [r7, #0]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	68ba      	ldr	r2, [r7, #8]
 80074a2:	9202      	str	r2, [sp, #8]
 80074a4:	9301      	str	r3, [sp, #4]
 80074a6:	2300      	movs	r3, #0
 80074a8:	9300      	str	r3, [sp, #0]
 80074aa:	2300      	movs	r3, #0
 80074ac:	460a      	mov	r2, r1
 80074ae:	4924      	ldr	r1, [pc, #144]	@ (8007540 <vTaskStartScheduler+0xc0>)
 80074b0:	4824      	ldr	r0, [pc, #144]	@ (8007544 <vTaskStartScheduler+0xc4>)
 80074b2:	f7ff fdf1 	bl	8007098 <xTaskCreateStatic>
 80074b6:	4603      	mov	r3, r0
 80074b8:	4a23      	ldr	r2, [pc, #140]	@ (8007548 <vTaskStartScheduler+0xc8>)
 80074ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80074bc:	4b22      	ldr	r3, [pc, #136]	@ (8007548 <vTaskStartScheduler+0xc8>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d002      	beq.n	80074ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80074c4:	2301      	movs	r3, #1
 80074c6:	617b      	str	r3, [r7, #20]
 80074c8:	e001      	b.n	80074ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80074ca:	2300      	movs	r3, #0
 80074cc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d102      	bne.n	80074da <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80074d4:	f000 fe4a 	bl	800816c <xTimerCreateTimerTask>
 80074d8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d11b      	bne.n	8007518 <vTaskStartScheduler+0x98>
	__asm volatile
 80074e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074e4:	f383 8811 	msr	BASEPRI, r3
 80074e8:	f3bf 8f6f 	isb	sy
 80074ec:	f3bf 8f4f 	dsb	sy
 80074f0:	613b      	str	r3, [r7, #16]
}
 80074f2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80074f4:	4b15      	ldr	r3, [pc, #84]	@ (800754c <vTaskStartScheduler+0xcc>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	3354      	adds	r3, #84	@ 0x54
 80074fa:	4a15      	ldr	r2, [pc, #84]	@ (8007550 <vTaskStartScheduler+0xd0>)
 80074fc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80074fe:	4b15      	ldr	r3, [pc, #84]	@ (8007554 <vTaskStartScheduler+0xd4>)
 8007500:	f04f 32ff 	mov.w	r2, #4294967295
 8007504:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007506:	4b14      	ldr	r3, [pc, #80]	@ (8007558 <vTaskStartScheduler+0xd8>)
 8007508:	2201      	movs	r2, #1
 800750a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800750c:	4b13      	ldr	r3, [pc, #76]	@ (800755c <vTaskStartScheduler+0xdc>)
 800750e:	2200      	movs	r2, #0
 8007510:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007512:	f001 fa15 	bl	8008940 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007516:	e00f      	b.n	8007538 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800751e:	d10b      	bne.n	8007538 <vTaskStartScheduler+0xb8>
	__asm volatile
 8007520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007524:	f383 8811 	msr	BASEPRI, r3
 8007528:	f3bf 8f6f 	isb	sy
 800752c:	f3bf 8f4f 	dsb	sy
 8007530:	60fb      	str	r3, [r7, #12]
}
 8007532:	bf00      	nop
 8007534:	bf00      	nop
 8007536:	e7fd      	b.n	8007534 <vTaskStartScheduler+0xb4>
}
 8007538:	bf00      	nop
 800753a:	3718      	adds	r7, #24
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}
 8007540:	08014564 	.word	0x08014564
 8007544:	08007bd1 	.word	0x08007bd1
 8007548:	24002120 	.word	0x24002120
 800754c:	24001c28 	.word	0x24001c28
 8007550:	24000040 	.word	0x24000040
 8007554:	2400211c 	.word	0x2400211c
 8007558:	24002108 	.word	0x24002108
 800755c:	24002100 	.word	0x24002100

08007560 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007560:	b480      	push	{r7}
 8007562:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007564:	4b04      	ldr	r3, [pc, #16]	@ (8007578 <vTaskSuspendAll+0x18>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	3301      	adds	r3, #1
 800756a:	4a03      	ldr	r2, [pc, #12]	@ (8007578 <vTaskSuspendAll+0x18>)
 800756c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800756e:	bf00      	nop
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr
 8007578:	24002124 	.word	0x24002124

0800757c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007582:	2300      	movs	r3, #0
 8007584:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007586:	2300      	movs	r3, #0
 8007588:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800758a:	4b42      	ldr	r3, [pc, #264]	@ (8007694 <xTaskResumeAll+0x118>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d10b      	bne.n	80075aa <xTaskResumeAll+0x2e>
	__asm volatile
 8007592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007596:	f383 8811 	msr	BASEPRI, r3
 800759a:	f3bf 8f6f 	isb	sy
 800759e:	f3bf 8f4f 	dsb	sy
 80075a2:	603b      	str	r3, [r7, #0]
}
 80075a4:	bf00      	nop
 80075a6:	bf00      	nop
 80075a8:	e7fd      	b.n	80075a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80075aa:	f001 fa6d 	bl	8008a88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80075ae:	4b39      	ldr	r3, [pc, #228]	@ (8007694 <xTaskResumeAll+0x118>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	3b01      	subs	r3, #1
 80075b4:	4a37      	ldr	r2, [pc, #220]	@ (8007694 <xTaskResumeAll+0x118>)
 80075b6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075b8:	4b36      	ldr	r3, [pc, #216]	@ (8007694 <xTaskResumeAll+0x118>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d162      	bne.n	8007686 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80075c0:	4b35      	ldr	r3, [pc, #212]	@ (8007698 <xTaskResumeAll+0x11c>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d05e      	beq.n	8007686 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80075c8:	e02f      	b.n	800762a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075ca:	4b34      	ldr	r3, [pc, #208]	@ (800769c <xTaskResumeAll+0x120>)
 80075cc:	68db      	ldr	r3, [r3, #12]
 80075ce:	68db      	ldr	r3, [r3, #12]
 80075d0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	3318      	adds	r3, #24
 80075d6:	4618      	mov	r0, r3
 80075d8:	f7fe fc50 	bl	8005e7c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	3304      	adds	r3, #4
 80075e0:	4618      	mov	r0, r3
 80075e2:	f7fe fc4b 	bl	8005e7c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075ea:	4b2d      	ldr	r3, [pc, #180]	@ (80076a0 <xTaskResumeAll+0x124>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d903      	bls.n	80075fa <xTaskResumeAll+0x7e>
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075f6:	4a2a      	ldr	r2, [pc, #168]	@ (80076a0 <xTaskResumeAll+0x124>)
 80075f8:	6013      	str	r3, [r2, #0]
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075fe:	4613      	mov	r3, r2
 8007600:	009b      	lsls	r3, r3, #2
 8007602:	4413      	add	r3, r2
 8007604:	009b      	lsls	r3, r3, #2
 8007606:	4a27      	ldr	r2, [pc, #156]	@ (80076a4 <xTaskResumeAll+0x128>)
 8007608:	441a      	add	r2, r3
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	3304      	adds	r3, #4
 800760e:	4619      	mov	r1, r3
 8007610:	4610      	mov	r0, r2
 8007612:	f7fe fbd6 	bl	8005dc2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800761a:	4b23      	ldr	r3, [pc, #140]	@ (80076a8 <xTaskResumeAll+0x12c>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007620:	429a      	cmp	r2, r3
 8007622:	d302      	bcc.n	800762a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007624:	4b21      	ldr	r3, [pc, #132]	@ (80076ac <xTaskResumeAll+0x130>)
 8007626:	2201      	movs	r2, #1
 8007628:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800762a:	4b1c      	ldr	r3, [pc, #112]	@ (800769c <xTaskResumeAll+0x120>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d1cb      	bne.n	80075ca <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d001      	beq.n	800763c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007638:	f000 fb86 	bl	8007d48 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800763c:	4b1c      	ldr	r3, [pc, #112]	@ (80076b0 <xTaskResumeAll+0x134>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d010      	beq.n	800766a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007648:	f000 f858 	bl	80076fc <xTaskIncrementTick>
 800764c:	4603      	mov	r3, r0
 800764e:	2b00      	cmp	r3, #0
 8007650:	d002      	beq.n	8007658 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007652:	4b16      	ldr	r3, [pc, #88]	@ (80076ac <xTaskResumeAll+0x130>)
 8007654:	2201      	movs	r2, #1
 8007656:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	3b01      	subs	r3, #1
 800765c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d1f1      	bne.n	8007648 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007664:	4b12      	ldr	r3, [pc, #72]	@ (80076b0 <xTaskResumeAll+0x134>)
 8007666:	2200      	movs	r2, #0
 8007668:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800766a:	4b10      	ldr	r3, [pc, #64]	@ (80076ac <xTaskResumeAll+0x130>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d009      	beq.n	8007686 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007672:	2301      	movs	r3, #1
 8007674:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007676:	4b0f      	ldr	r3, [pc, #60]	@ (80076b4 <xTaskResumeAll+0x138>)
 8007678:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800767c:	601a      	str	r2, [r3, #0]
 800767e:	f3bf 8f4f 	dsb	sy
 8007682:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007686:	f001 fa31 	bl	8008aec <vPortExitCritical>

	return xAlreadyYielded;
 800768a:	68bb      	ldr	r3, [r7, #8]
}
 800768c:	4618      	mov	r0, r3
 800768e:	3710      	adds	r7, #16
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}
 8007694:	24002124 	.word	0x24002124
 8007698:	240020fc 	.word	0x240020fc
 800769c:	240020bc 	.word	0x240020bc
 80076a0:	24002104 	.word	0x24002104
 80076a4:	24001c2c 	.word	0x24001c2c
 80076a8:	24001c28 	.word	0x24001c28
 80076ac:	24002110 	.word	0x24002110
 80076b0:	2400210c 	.word	0x2400210c
 80076b4:	e000ed04 	.word	0xe000ed04

080076b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80076be:	4b05      	ldr	r3, [pc, #20]	@ (80076d4 <xTaskGetTickCount+0x1c>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80076c4:	687b      	ldr	r3, [r7, #4]
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	370c      	adds	r7, #12
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr
 80076d2:	bf00      	nop
 80076d4:	24002100 	.word	0x24002100

080076d8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80076de:	f001 fab3 	bl	8008c48 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80076e2:	2300      	movs	r3, #0
 80076e4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80076e6:	4b04      	ldr	r3, [pc, #16]	@ (80076f8 <xTaskGetTickCountFromISR+0x20>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80076ec:	683b      	ldr	r3, [r7, #0]
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3708      	adds	r7, #8
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop
 80076f8:	24002100 	.word	0x24002100

080076fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b086      	sub	sp, #24
 8007700:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007702:	2300      	movs	r3, #0
 8007704:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007706:	4b4f      	ldr	r3, [pc, #316]	@ (8007844 <xTaskIncrementTick+0x148>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	2b00      	cmp	r3, #0
 800770c:	f040 8090 	bne.w	8007830 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007710:	4b4d      	ldr	r3, [pc, #308]	@ (8007848 <xTaskIncrementTick+0x14c>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	3301      	adds	r3, #1
 8007716:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007718:	4a4b      	ldr	r2, [pc, #300]	@ (8007848 <xTaskIncrementTick+0x14c>)
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d121      	bne.n	8007768 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007724:	4b49      	ldr	r3, [pc, #292]	@ (800784c <xTaskIncrementTick+0x150>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d00b      	beq.n	8007746 <xTaskIncrementTick+0x4a>
	__asm volatile
 800772e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007732:	f383 8811 	msr	BASEPRI, r3
 8007736:	f3bf 8f6f 	isb	sy
 800773a:	f3bf 8f4f 	dsb	sy
 800773e:	603b      	str	r3, [r7, #0]
}
 8007740:	bf00      	nop
 8007742:	bf00      	nop
 8007744:	e7fd      	b.n	8007742 <xTaskIncrementTick+0x46>
 8007746:	4b41      	ldr	r3, [pc, #260]	@ (800784c <xTaskIncrementTick+0x150>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	60fb      	str	r3, [r7, #12]
 800774c:	4b40      	ldr	r3, [pc, #256]	@ (8007850 <xTaskIncrementTick+0x154>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a3e      	ldr	r2, [pc, #248]	@ (800784c <xTaskIncrementTick+0x150>)
 8007752:	6013      	str	r3, [r2, #0]
 8007754:	4a3e      	ldr	r2, [pc, #248]	@ (8007850 <xTaskIncrementTick+0x154>)
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	6013      	str	r3, [r2, #0]
 800775a:	4b3e      	ldr	r3, [pc, #248]	@ (8007854 <xTaskIncrementTick+0x158>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	3301      	adds	r3, #1
 8007760:	4a3c      	ldr	r2, [pc, #240]	@ (8007854 <xTaskIncrementTick+0x158>)
 8007762:	6013      	str	r3, [r2, #0]
 8007764:	f000 faf0 	bl	8007d48 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007768:	4b3b      	ldr	r3, [pc, #236]	@ (8007858 <xTaskIncrementTick+0x15c>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	693a      	ldr	r2, [r7, #16]
 800776e:	429a      	cmp	r2, r3
 8007770:	d349      	bcc.n	8007806 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007772:	4b36      	ldr	r3, [pc, #216]	@ (800784c <xTaskIncrementTick+0x150>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d104      	bne.n	8007786 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800777c:	4b36      	ldr	r3, [pc, #216]	@ (8007858 <xTaskIncrementTick+0x15c>)
 800777e:	f04f 32ff 	mov.w	r2, #4294967295
 8007782:	601a      	str	r2, [r3, #0]
					break;
 8007784:	e03f      	b.n	8007806 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007786:	4b31      	ldr	r3, [pc, #196]	@ (800784c <xTaskIncrementTick+0x150>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	68db      	ldr	r3, [r3, #12]
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007796:	693a      	ldr	r2, [r7, #16]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	429a      	cmp	r2, r3
 800779c:	d203      	bcs.n	80077a6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800779e:	4a2e      	ldr	r2, [pc, #184]	@ (8007858 <xTaskIncrementTick+0x15c>)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80077a4:	e02f      	b.n	8007806 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	3304      	adds	r3, #4
 80077aa:	4618      	mov	r0, r3
 80077ac:	f7fe fb66 	bl	8005e7c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d004      	beq.n	80077c2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	3318      	adds	r3, #24
 80077bc:	4618      	mov	r0, r3
 80077be:	f7fe fb5d 	bl	8005e7c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077c6:	4b25      	ldr	r3, [pc, #148]	@ (800785c <xTaskIncrementTick+0x160>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d903      	bls.n	80077d6 <xTaskIncrementTick+0xda>
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077d2:	4a22      	ldr	r2, [pc, #136]	@ (800785c <xTaskIncrementTick+0x160>)
 80077d4:	6013      	str	r3, [r2, #0]
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077da:	4613      	mov	r3, r2
 80077dc:	009b      	lsls	r3, r3, #2
 80077de:	4413      	add	r3, r2
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	4a1f      	ldr	r2, [pc, #124]	@ (8007860 <xTaskIncrementTick+0x164>)
 80077e4:	441a      	add	r2, r3
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	3304      	adds	r3, #4
 80077ea:	4619      	mov	r1, r3
 80077ec:	4610      	mov	r0, r2
 80077ee:	f7fe fae8 	bl	8005dc2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077f6:	4b1b      	ldr	r3, [pc, #108]	@ (8007864 <xTaskIncrementTick+0x168>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d3b8      	bcc.n	8007772 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007800:	2301      	movs	r3, #1
 8007802:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007804:	e7b5      	b.n	8007772 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007806:	4b17      	ldr	r3, [pc, #92]	@ (8007864 <xTaskIncrementTick+0x168>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800780c:	4914      	ldr	r1, [pc, #80]	@ (8007860 <xTaskIncrementTick+0x164>)
 800780e:	4613      	mov	r3, r2
 8007810:	009b      	lsls	r3, r3, #2
 8007812:	4413      	add	r3, r2
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	440b      	add	r3, r1
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	2b01      	cmp	r3, #1
 800781c:	d901      	bls.n	8007822 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800781e:	2301      	movs	r3, #1
 8007820:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007822:	4b11      	ldr	r3, [pc, #68]	@ (8007868 <xTaskIncrementTick+0x16c>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d007      	beq.n	800783a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800782a:	2301      	movs	r3, #1
 800782c:	617b      	str	r3, [r7, #20]
 800782e:	e004      	b.n	800783a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007830:	4b0e      	ldr	r3, [pc, #56]	@ (800786c <xTaskIncrementTick+0x170>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	3301      	adds	r3, #1
 8007836:	4a0d      	ldr	r2, [pc, #52]	@ (800786c <xTaskIncrementTick+0x170>)
 8007838:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800783a:	697b      	ldr	r3, [r7, #20]
}
 800783c:	4618      	mov	r0, r3
 800783e:	3718      	adds	r7, #24
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}
 8007844:	24002124 	.word	0x24002124
 8007848:	24002100 	.word	0x24002100
 800784c:	240020b4 	.word	0x240020b4
 8007850:	240020b8 	.word	0x240020b8
 8007854:	24002114 	.word	0x24002114
 8007858:	2400211c 	.word	0x2400211c
 800785c:	24002104 	.word	0x24002104
 8007860:	24001c2c 	.word	0x24001c2c
 8007864:	24001c28 	.word	0x24001c28
 8007868:	24002110 	.word	0x24002110
 800786c:	2400210c 	.word	0x2400210c

08007870 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007876:	4b32      	ldr	r3, [pc, #200]	@ (8007940 <vTaskSwitchContext+0xd0>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d003      	beq.n	8007886 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800787e:	4b31      	ldr	r3, [pc, #196]	@ (8007944 <vTaskSwitchContext+0xd4>)
 8007880:	2201      	movs	r2, #1
 8007882:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007884:	e058      	b.n	8007938 <vTaskSwitchContext+0xc8>
		xYieldPending = pdFALSE;
 8007886:	4b2f      	ldr	r3, [pc, #188]	@ (8007944 <vTaskSwitchContext+0xd4>)
 8007888:	2200      	movs	r2, #0
 800788a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800788c:	4b2e      	ldr	r3, [pc, #184]	@ (8007948 <vTaskSwitchContext+0xd8>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	4b2d      	ldr	r3, [pc, #180]	@ (8007948 <vTaskSwitchContext+0xd8>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007898:	429a      	cmp	r2, r3
 800789a:	d808      	bhi.n	80078ae <vTaskSwitchContext+0x3e>
 800789c:	4b2a      	ldr	r3, [pc, #168]	@ (8007948 <vTaskSwitchContext+0xd8>)
 800789e:	681a      	ldr	r2, [r3, #0]
 80078a0:	4b29      	ldr	r3, [pc, #164]	@ (8007948 <vTaskSwitchContext+0xd8>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	3334      	adds	r3, #52	@ 0x34
 80078a6:	4619      	mov	r1, r3
 80078a8:	4610      	mov	r0, r2
 80078aa:	f7f8 fd81 	bl	80003b0 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078ae:	4b27      	ldr	r3, [pc, #156]	@ (800794c <vTaskSwitchContext+0xdc>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	60fb      	str	r3, [r7, #12]
 80078b4:	e011      	b.n	80078da <vTaskSwitchContext+0x6a>
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d10b      	bne.n	80078d4 <vTaskSwitchContext+0x64>
	__asm volatile
 80078bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078c0:	f383 8811 	msr	BASEPRI, r3
 80078c4:	f3bf 8f6f 	isb	sy
 80078c8:	f3bf 8f4f 	dsb	sy
 80078cc:	607b      	str	r3, [r7, #4]
}
 80078ce:	bf00      	nop
 80078d0:	bf00      	nop
 80078d2:	e7fd      	b.n	80078d0 <vTaskSwitchContext+0x60>
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	3b01      	subs	r3, #1
 80078d8:	60fb      	str	r3, [r7, #12]
 80078da:	491d      	ldr	r1, [pc, #116]	@ (8007950 <vTaskSwitchContext+0xe0>)
 80078dc:	68fa      	ldr	r2, [r7, #12]
 80078de:	4613      	mov	r3, r2
 80078e0:	009b      	lsls	r3, r3, #2
 80078e2:	4413      	add	r3, r2
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	440b      	add	r3, r1
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d0e3      	beq.n	80078b6 <vTaskSwitchContext+0x46>
 80078ee:	68fa      	ldr	r2, [r7, #12]
 80078f0:	4613      	mov	r3, r2
 80078f2:	009b      	lsls	r3, r3, #2
 80078f4:	4413      	add	r3, r2
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	4a15      	ldr	r2, [pc, #84]	@ (8007950 <vTaskSwitchContext+0xe0>)
 80078fa:	4413      	add	r3, r2
 80078fc:	60bb      	str	r3, [r7, #8]
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	685a      	ldr	r2, [r3, #4]
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	605a      	str	r2, [r3, #4]
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	685a      	ldr	r2, [r3, #4]
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	3308      	adds	r3, #8
 8007910:	429a      	cmp	r2, r3
 8007912:	d104      	bne.n	800791e <vTaskSwitchContext+0xae>
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	685a      	ldr	r2, [r3, #4]
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	605a      	str	r2, [r3, #4]
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	4a08      	ldr	r2, [pc, #32]	@ (8007948 <vTaskSwitchContext+0xd8>)
 8007926:	6013      	str	r3, [r2, #0]
 8007928:	4a08      	ldr	r2, [pc, #32]	@ (800794c <vTaskSwitchContext+0xdc>)
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800792e:	4b06      	ldr	r3, [pc, #24]	@ (8007948 <vTaskSwitchContext+0xd8>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	3354      	adds	r3, #84	@ 0x54
 8007934:	4a07      	ldr	r2, [pc, #28]	@ (8007954 <vTaskSwitchContext+0xe4>)
 8007936:	6013      	str	r3, [r2, #0]
}
 8007938:	bf00      	nop
 800793a:	3710      	adds	r7, #16
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}
 8007940:	24002124 	.word	0x24002124
 8007944:	24002110 	.word	0x24002110
 8007948:	24001c28 	.word	0x24001c28
 800794c:	24002104 	.word	0x24002104
 8007950:	24001c2c 	.word	0x24001c2c
 8007954:	24000040 	.word	0x24000040

08007958 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b084      	sub	sp, #16
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d10b      	bne.n	8007980 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800796c:	f383 8811 	msr	BASEPRI, r3
 8007970:	f3bf 8f6f 	isb	sy
 8007974:	f3bf 8f4f 	dsb	sy
 8007978:	60fb      	str	r3, [r7, #12]
}
 800797a:	bf00      	nop
 800797c:	bf00      	nop
 800797e:	e7fd      	b.n	800797c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007980:	4b07      	ldr	r3, [pc, #28]	@ (80079a0 <vTaskPlaceOnEventList+0x48>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	3318      	adds	r3, #24
 8007986:	4619      	mov	r1, r3
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f7fe fa3e 	bl	8005e0a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800798e:	2101      	movs	r1, #1
 8007990:	6838      	ldr	r0, [r7, #0]
 8007992:	f000 fb97 	bl	80080c4 <prvAddCurrentTaskToDelayedList>
}
 8007996:	bf00      	nop
 8007998:	3710      	adds	r7, #16
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
 800799e:	bf00      	nop
 80079a0:	24001c28 	.word	0x24001c28

080079a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b086      	sub	sp, #24
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	60f8      	str	r0, [r7, #12]
 80079ac:	60b9      	str	r1, [r7, #8]
 80079ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d10b      	bne.n	80079ce <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80079b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ba:	f383 8811 	msr	BASEPRI, r3
 80079be:	f3bf 8f6f 	isb	sy
 80079c2:	f3bf 8f4f 	dsb	sy
 80079c6:	617b      	str	r3, [r7, #20]
}
 80079c8:	bf00      	nop
 80079ca:	bf00      	nop
 80079cc:	e7fd      	b.n	80079ca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80079ce:	4b0a      	ldr	r3, [pc, #40]	@ (80079f8 <vTaskPlaceOnEventListRestricted+0x54>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	3318      	adds	r3, #24
 80079d4:	4619      	mov	r1, r3
 80079d6:	68f8      	ldr	r0, [r7, #12]
 80079d8:	f7fe f9f3 	bl	8005dc2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d002      	beq.n	80079e8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80079e2:	f04f 33ff 	mov.w	r3, #4294967295
 80079e6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80079e8:	6879      	ldr	r1, [r7, #4]
 80079ea:	68b8      	ldr	r0, [r7, #8]
 80079ec:	f000 fb6a 	bl	80080c4 <prvAddCurrentTaskToDelayedList>
	}
 80079f0:	bf00      	nop
 80079f2:	3718      	adds	r7, #24
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}
 80079f8:	24001c28 	.word	0x24001c28

080079fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b086      	sub	sp, #24
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	68db      	ldr	r3, [r3, #12]
 8007a08:	68db      	ldr	r3, [r3, #12]
 8007a0a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d10b      	bne.n	8007a2a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a16:	f383 8811 	msr	BASEPRI, r3
 8007a1a:	f3bf 8f6f 	isb	sy
 8007a1e:	f3bf 8f4f 	dsb	sy
 8007a22:	60fb      	str	r3, [r7, #12]
}
 8007a24:	bf00      	nop
 8007a26:	bf00      	nop
 8007a28:	e7fd      	b.n	8007a26 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	3318      	adds	r3, #24
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f7fe fa24 	bl	8005e7c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a34:	4b1d      	ldr	r3, [pc, #116]	@ (8007aac <xTaskRemoveFromEventList+0xb0>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d11d      	bne.n	8007a78 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	3304      	adds	r3, #4
 8007a40:	4618      	mov	r0, r3
 8007a42:	f7fe fa1b 	bl	8005e7c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a4a:	4b19      	ldr	r3, [pc, #100]	@ (8007ab0 <xTaskRemoveFromEventList+0xb4>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d903      	bls.n	8007a5a <xTaskRemoveFromEventList+0x5e>
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a56:	4a16      	ldr	r2, [pc, #88]	@ (8007ab0 <xTaskRemoveFromEventList+0xb4>)
 8007a58:	6013      	str	r3, [r2, #0]
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a5e:	4613      	mov	r3, r2
 8007a60:	009b      	lsls	r3, r3, #2
 8007a62:	4413      	add	r3, r2
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	4a13      	ldr	r2, [pc, #76]	@ (8007ab4 <xTaskRemoveFromEventList+0xb8>)
 8007a68:	441a      	add	r2, r3
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	3304      	adds	r3, #4
 8007a6e:	4619      	mov	r1, r3
 8007a70:	4610      	mov	r0, r2
 8007a72:	f7fe f9a6 	bl	8005dc2 <vListInsertEnd>
 8007a76:	e005      	b.n	8007a84 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	3318      	adds	r3, #24
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	480e      	ldr	r0, [pc, #56]	@ (8007ab8 <xTaskRemoveFromEventList+0xbc>)
 8007a80:	f7fe f99f 	bl	8005dc2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a88:	4b0c      	ldr	r3, [pc, #48]	@ (8007abc <xTaskRemoveFromEventList+0xc0>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d905      	bls.n	8007a9e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007a92:	2301      	movs	r3, #1
 8007a94:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007a96:	4b0a      	ldr	r3, [pc, #40]	@ (8007ac0 <xTaskRemoveFromEventList+0xc4>)
 8007a98:	2201      	movs	r2, #1
 8007a9a:	601a      	str	r2, [r3, #0]
 8007a9c:	e001      	b.n	8007aa2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007aa2:	697b      	ldr	r3, [r7, #20]
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3718      	adds	r7, #24
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}
 8007aac:	24002124 	.word	0x24002124
 8007ab0:	24002104 	.word	0x24002104
 8007ab4:	24001c2c 	.word	0x24001c2c
 8007ab8:	240020bc 	.word	0x240020bc
 8007abc:	24001c28 	.word	0x24001c28
 8007ac0:	24002110 	.word	0x24002110

08007ac4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b083      	sub	sp, #12
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007acc:	4b06      	ldr	r3, [pc, #24]	@ (8007ae8 <vTaskInternalSetTimeOutState+0x24>)
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007ad4:	4b05      	ldr	r3, [pc, #20]	@ (8007aec <vTaskInternalSetTimeOutState+0x28>)
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	605a      	str	r2, [r3, #4]
}
 8007adc:	bf00      	nop
 8007ade:	370c      	adds	r7, #12
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr
 8007ae8:	24002114 	.word	0x24002114
 8007aec:	24002100 	.word	0x24002100

08007af0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b088      	sub	sp, #32
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d10b      	bne.n	8007b18 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b04:	f383 8811 	msr	BASEPRI, r3
 8007b08:	f3bf 8f6f 	isb	sy
 8007b0c:	f3bf 8f4f 	dsb	sy
 8007b10:	613b      	str	r3, [r7, #16]
}
 8007b12:	bf00      	nop
 8007b14:	bf00      	nop
 8007b16:	e7fd      	b.n	8007b14 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d10b      	bne.n	8007b36 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b22:	f383 8811 	msr	BASEPRI, r3
 8007b26:	f3bf 8f6f 	isb	sy
 8007b2a:	f3bf 8f4f 	dsb	sy
 8007b2e:	60fb      	str	r3, [r7, #12]
}
 8007b30:	bf00      	nop
 8007b32:	bf00      	nop
 8007b34:	e7fd      	b.n	8007b32 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007b36:	f000 ffa7 	bl	8008a88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007b3a:	4b1d      	ldr	r3, [pc, #116]	@ (8007bb0 <xTaskCheckForTimeOut+0xc0>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	69ba      	ldr	r2, [r7, #24]
 8007b46:	1ad3      	subs	r3, r2, r3
 8007b48:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b52:	d102      	bne.n	8007b5a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007b54:	2300      	movs	r3, #0
 8007b56:	61fb      	str	r3, [r7, #28]
 8007b58:	e023      	b.n	8007ba2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	4b15      	ldr	r3, [pc, #84]	@ (8007bb4 <xTaskCheckForTimeOut+0xc4>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d007      	beq.n	8007b76 <xTaskCheckForTimeOut+0x86>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	69ba      	ldr	r2, [r7, #24]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d302      	bcc.n	8007b76 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007b70:	2301      	movs	r3, #1
 8007b72:	61fb      	str	r3, [r7, #28]
 8007b74:	e015      	b.n	8007ba2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	697a      	ldr	r2, [r7, #20]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d20b      	bcs.n	8007b98 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	1ad2      	subs	r2, r2, r3
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f7ff ff99 	bl	8007ac4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007b92:	2300      	movs	r3, #0
 8007b94:	61fb      	str	r3, [r7, #28]
 8007b96:	e004      	b.n	8007ba2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007ba2:	f000 ffa3 	bl	8008aec <vPortExitCritical>

	return xReturn;
 8007ba6:	69fb      	ldr	r3, [r7, #28]
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3720      	adds	r7, #32
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}
 8007bb0:	24002100 	.word	0x24002100
 8007bb4:	24002114 	.word	0x24002114

08007bb8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007bb8:	b480      	push	{r7}
 8007bba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007bbc:	4b03      	ldr	r3, [pc, #12]	@ (8007bcc <vTaskMissedYield+0x14>)
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	601a      	str	r2, [r3, #0]
}
 8007bc2:	bf00      	nop
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr
 8007bcc:	24002110 	.word	0x24002110

08007bd0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b082      	sub	sp, #8
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007bd8:	f000 f852 	bl	8007c80 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007bdc:	4b06      	ldr	r3, [pc, #24]	@ (8007bf8 <prvIdleTask+0x28>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d9f9      	bls.n	8007bd8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007be4:	4b05      	ldr	r3, [pc, #20]	@ (8007bfc <prvIdleTask+0x2c>)
 8007be6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007bea:	601a      	str	r2, [r3, #0]
 8007bec:	f3bf 8f4f 	dsb	sy
 8007bf0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007bf4:	e7f0      	b.n	8007bd8 <prvIdleTask+0x8>
 8007bf6:	bf00      	nop
 8007bf8:	24001c2c 	.word	0x24001c2c
 8007bfc:	e000ed04 	.word	0xe000ed04

08007c00 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b082      	sub	sp, #8
 8007c04:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c06:	2300      	movs	r3, #0
 8007c08:	607b      	str	r3, [r7, #4]
 8007c0a:	e00c      	b.n	8007c26 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	4613      	mov	r3, r2
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	4413      	add	r3, r2
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	4a12      	ldr	r2, [pc, #72]	@ (8007c60 <prvInitialiseTaskLists+0x60>)
 8007c18:	4413      	add	r3, r2
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f7fe f8a4 	bl	8005d68 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	3301      	adds	r3, #1
 8007c24:	607b      	str	r3, [r7, #4]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2b37      	cmp	r3, #55	@ 0x37
 8007c2a:	d9ef      	bls.n	8007c0c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007c2c:	480d      	ldr	r0, [pc, #52]	@ (8007c64 <prvInitialiseTaskLists+0x64>)
 8007c2e:	f7fe f89b 	bl	8005d68 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007c32:	480d      	ldr	r0, [pc, #52]	@ (8007c68 <prvInitialiseTaskLists+0x68>)
 8007c34:	f7fe f898 	bl	8005d68 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007c38:	480c      	ldr	r0, [pc, #48]	@ (8007c6c <prvInitialiseTaskLists+0x6c>)
 8007c3a:	f7fe f895 	bl	8005d68 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007c3e:	480c      	ldr	r0, [pc, #48]	@ (8007c70 <prvInitialiseTaskLists+0x70>)
 8007c40:	f7fe f892 	bl	8005d68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007c44:	480b      	ldr	r0, [pc, #44]	@ (8007c74 <prvInitialiseTaskLists+0x74>)
 8007c46:	f7fe f88f 	bl	8005d68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8007c78 <prvInitialiseTaskLists+0x78>)
 8007c4c:	4a05      	ldr	r2, [pc, #20]	@ (8007c64 <prvInitialiseTaskLists+0x64>)
 8007c4e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007c50:	4b0a      	ldr	r3, [pc, #40]	@ (8007c7c <prvInitialiseTaskLists+0x7c>)
 8007c52:	4a05      	ldr	r2, [pc, #20]	@ (8007c68 <prvInitialiseTaskLists+0x68>)
 8007c54:	601a      	str	r2, [r3, #0]
}
 8007c56:	bf00      	nop
 8007c58:	3708      	adds	r7, #8
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	24001c2c 	.word	0x24001c2c
 8007c64:	2400208c 	.word	0x2400208c
 8007c68:	240020a0 	.word	0x240020a0
 8007c6c:	240020bc 	.word	0x240020bc
 8007c70:	240020d0 	.word	0x240020d0
 8007c74:	240020e8 	.word	0x240020e8
 8007c78:	240020b4 	.word	0x240020b4
 8007c7c:	240020b8 	.word	0x240020b8

08007c80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b082      	sub	sp, #8
 8007c84:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007c86:	e019      	b.n	8007cbc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007c88:	f000 fefe 	bl	8008a88 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c8c:	4b10      	ldr	r3, [pc, #64]	@ (8007cd0 <prvCheckTasksWaitingTermination+0x50>)
 8007c8e:	68db      	ldr	r3, [r3, #12]
 8007c90:	68db      	ldr	r3, [r3, #12]
 8007c92:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	3304      	adds	r3, #4
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f7fe f8ef 	bl	8005e7c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8007cd4 <prvCheckTasksWaitingTermination+0x54>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	3b01      	subs	r3, #1
 8007ca4:	4a0b      	ldr	r2, [pc, #44]	@ (8007cd4 <prvCheckTasksWaitingTermination+0x54>)
 8007ca6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8007cd8 <prvCheckTasksWaitingTermination+0x58>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	3b01      	subs	r3, #1
 8007cae:	4a0a      	ldr	r2, [pc, #40]	@ (8007cd8 <prvCheckTasksWaitingTermination+0x58>)
 8007cb0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007cb2:	f000 ff1b 	bl	8008aec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 f810 	bl	8007cdc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007cbc:	4b06      	ldr	r3, [pc, #24]	@ (8007cd8 <prvCheckTasksWaitingTermination+0x58>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d1e1      	bne.n	8007c88 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007cc4:	bf00      	nop
 8007cc6:	bf00      	nop
 8007cc8:	3708      	adds	r7, #8
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
 8007cce:	bf00      	nop
 8007cd0:	240020d0 	.word	0x240020d0
 8007cd4:	240020fc 	.word	0x240020fc
 8007cd8:	240020e4 	.word	0x240020e4

08007cdc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	3354      	adds	r3, #84	@ 0x54
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f00b fcef 	bl	80136cc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d108      	bne.n	8007d0a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f001 f8b3 	bl	8008e68 <vPortFree>
				vPortFree( pxTCB );
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f001 f8b0 	bl	8008e68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007d08:	e019      	b.n	8007d3e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d103      	bne.n	8007d1c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f001 f8a7 	bl	8008e68 <vPortFree>
	}
 8007d1a:	e010      	b.n	8007d3e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007d22:	2b02      	cmp	r3, #2
 8007d24:	d00b      	beq.n	8007d3e <prvDeleteTCB+0x62>
	__asm volatile
 8007d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d2a:	f383 8811 	msr	BASEPRI, r3
 8007d2e:	f3bf 8f6f 	isb	sy
 8007d32:	f3bf 8f4f 	dsb	sy
 8007d36:	60fb      	str	r3, [r7, #12]
}
 8007d38:	bf00      	nop
 8007d3a:	bf00      	nop
 8007d3c:	e7fd      	b.n	8007d3a <prvDeleteTCB+0x5e>
	}
 8007d3e:	bf00      	nop
 8007d40:	3710      	adds	r7, #16
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
	...

08007d48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d4e:	4b0c      	ldr	r3, [pc, #48]	@ (8007d80 <prvResetNextTaskUnblockTime+0x38>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d104      	bne.n	8007d62 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007d58:	4b0a      	ldr	r3, [pc, #40]	@ (8007d84 <prvResetNextTaskUnblockTime+0x3c>)
 8007d5a:	f04f 32ff 	mov.w	r2, #4294967295
 8007d5e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007d60:	e008      	b.n	8007d74 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d62:	4b07      	ldr	r3, [pc, #28]	@ (8007d80 <prvResetNextTaskUnblockTime+0x38>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	68db      	ldr	r3, [r3, #12]
 8007d68:	68db      	ldr	r3, [r3, #12]
 8007d6a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	4a04      	ldr	r2, [pc, #16]	@ (8007d84 <prvResetNextTaskUnblockTime+0x3c>)
 8007d72:	6013      	str	r3, [r2, #0]
}
 8007d74:	bf00      	nop
 8007d76:	370c      	adds	r7, #12
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr
 8007d80:	240020b4 	.word	0x240020b4
 8007d84:	2400211c 	.word	0x2400211c

08007d88 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007d88:	b480      	push	{r7}
 8007d8a:	b083      	sub	sp, #12
 8007d8c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007d8e:	4b05      	ldr	r3, [pc, #20]	@ (8007da4 <xTaskGetCurrentTaskHandle+0x1c>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007d94:	687b      	ldr	r3, [r7, #4]
	}
 8007d96:	4618      	mov	r0, r3
 8007d98:	370c      	adds	r7, #12
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr
 8007da2:	bf00      	nop
 8007da4:	24001c28 	.word	0x24001c28

08007da8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007da8:	b480      	push	{r7}
 8007daa:	b083      	sub	sp, #12
 8007dac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007dae:	4b0b      	ldr	r3, [pc, #44]	@ (8007ddc <xTaskGetSchedulerState+0x34>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d102      	bne.n	8007dbc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007db6:	2301      	movs	r3, #1
 8007db8:	607b      	str	r3, [r7, #4]
 8007dba:	e008      	b.n	8007dce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007dbc:	4b08      	ldr	r3, [pc, #32]	@ (8007de0 <xTaskGetSchedulerState+0x38>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d102      	bne.n	8007dca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007dc4:	2302      	movs	r3, #2
 8007dc6:	607b      	str	r3, [r7, #4]
 8007dc8:	e001      	b.n	8007dce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007dce:	687b      	ldr	r3, [r7, #4]
	}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	370c      	adds	r7, #12
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr
 8007ddc:	24002108 	.word	0x24002108
 8007de0:	24002124 	.word	0x24002124

08007de4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007df0:	2300      	movs	r3, #0
 8007df2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d051      	beq.n	8007e9e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dfe:	4b2a      	ldr	r3, [pc, #168]	@ (8007ea8 <xTaskPriorityInherit+0xc4>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d241      	bcs.n	8007e8c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	699b      	ldr	r3, [r3, #24]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	db06      	blt.n	8007e1e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e10:	4b25      	ldr	r3, [pc, #148]	@ (8007ea8 <xTaskPriorityInherit+0xc4>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e16:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	6959      	ldr	r1, [r3, #20]
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e26:	4613      	mov	r3, r2
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	4413      	add	r3, r2
 8007e2c:	009b      	lsls	r3, r3, #2
 8007e2e:	4a1f      	ldr	r2, [pc, #124]	@ (8007eac <xTaskPriorityInherit+0xc8>)
 8007e30:	4413      	add	r3, r2
 8007e32:	4299      	cmp	r1, r3
 8007e34:	d122      	bne.n	8007e7c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	3304      	adds	r3, #4
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f7fe f81e 	bl	8005e7c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007e40:	4b19      	ldr	r3, [pc, #100]	@ (8007ea8 <xTaskPriorityInherit+0xc4>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e4e:	4b18      	ldr	r3, [pc, #96]	@ (8007eb0 <xTaskPriorityInherit+0xcc>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d903      	bls.n	8007e5e <xTaskPriorityInherit+0x7a>
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e5a:	4a15      	ldr	r2, [pc, #84]	@ (8007eb0 <xTaskPriorityInherit+0xcc>)
 8007e5c:	6013      	str	r3, [r2, #0]
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e62:	4613      	mov	r3, r2
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	4413      	add	r3, r2
 8007e68:	009b      	lsls	r3, r3, #2
 8007e6a:	4a10      	ldr	r2, [pc, #64]	@ (8007eac <xTaskPriorityInherit+0xc8>)
 8007e6c:	441a      	add	r2, r3
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	3304      	adds	r3, #4
 8007e72:	4619      	mov	r1, r3
 8007e74:	4610      	mov	r0, r2
 8007e76:	f7fd ffa4 	bl	8005dc2 <vListInsertEnd>
 8007e7a:	e004      	b.n	8007e86 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007e7c:	4b0a      	ldr	r3, [pc, #40]	@ (8007ea8 <xTaskPriorityInherit+0xc4>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007e86:	2301      	movs	r3, #1
 8007e88:	60fb      	str	r3, [r7, #12]
 8007e8a:	e008      	b.n	8007e9e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007e90:	4b05      	ldr	r3, [pc, #20]	@ (8007ea8 <xTaskPriorityInherit+0xc4>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d201      	bcs.n	8007e9e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
	}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3710      	adds	r7, #16
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}
 8007ea8:	24001c28 	.word	0x24001c28
 8007eac:	24001c2c 	.word	0x24001c2c
 8007eb0:	24002104 	.word	0x24002104

08007eb4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b086      	sub	sp, #24
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d058      	beq.n	8007f7c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007eca:	4b2f      	ldr	r3, [pc, #188]	@ (8007f88 <xTaskPriorityDisinherit+0xd4>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	693a      	ldr	r2, [r7, #16]
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d00b      	beq.n	8007eec <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ed8:	f383 8811 	msr	BASEPRI, r3
 8007edc:	f3bf 8f6f 	isb	sy
 8007ee0:	f3bf 8f4f 	dsb	sy
 8007ee4:	60fb      	str	r3, [r7, #12]
}
 8007ee6:	bf00      	nop
 8007ee8:	bf00      	nop
 8007eea:	e7fd      	b.n	8007ee8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d10b      	bne.n	8007f0c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ef8:	f383 8811 	msr	BASEPRI, r3
 8007efc:	f3bf 8f6f 	isb	sy
 8007f00:	f3bf 8f4f 	dsb	sy
 8007f04:	60bb      	str	r3, [r7, #8]
}
 8007f06:	bf00      	nop
 8007f08:	bf00      	nop
 8007f0a:	e7fd      	b.n	8007f08 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f10:	1e5a      	subs	r2, r3, #1
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d02c      	beq.n	8007f7c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d128      	bne.n	8007f7c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	3304      	adds	r3, #4
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f7fd ffa4 	bl	8005e7c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f40:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8007f8c <xTaskPriorityDisinherit+0xd8>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d903      	bls.n	8007f5c <xTaskPriorityDisinherit+0xa8>
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f58:	4a0c      	ldr	r2, [pc, #48]	@ (8007f8c <xTaskPriorityDisinherit+0xd8>)
 8007f5a:	6013      	str	r3, [r2, #0]
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f60:	4613      	mov	r3, r2
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	4413      	add	r3, r2
 8007f66:	009b      	lsls	r3, r3, #2
 8007f68:	4a09      	ldr	r2, [pc, #36]	@ (8007f90 <xTaskPriorityDisinherit+0xdc>)
 8007f6a:	441a      	add	r2, r3
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	3304      	adds	r3, #4
 8007f70:	4619      	mov	r1, r3
 8007f72:	4610      	mov	r0, r2
 8007f74:	f7fd ff25 	bl	8005dc2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007f7c:	697b      	ldr	r3, [r7, #20]
	}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3718      	adds	r7, #24
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
 8007f86:	bf00      	nop
 8007f88:	24001c28 	.word	0x24001c28
 8007f8c:	24002104 	.word	0x24002104
 8007f90:	24001c2c 	.word	0x24001c2c

08007f94 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b088      	sub	sp, #32
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d06c      	beq.n	8008086 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007fac:	69bb      	ldr	r3, [r7, #24]
 8007fae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d10b      	bne.n	8007fcc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007fb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fb8:	f383 8811 	msr	BASEPRI, r3
 8007fbc:	f3bf 8f6f 	isb	sy
 8007fc0:	f3bf 8f4f 	dsb	sy
 8007fc4:	60fb      	str	r3, [r7, #12]
}
 8007fc6:	bf00      	nop
 8007fc8:	bf00      	nop
 8007fca:	e7fd      	b.n	8007fc8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007fcc:	69bb      	ldr	r3, [r7, #24]
 8007fce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fd0:	683a      	ldr	r2, [r7, #0]
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d902      	bls.n	8007fdc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	61fb      	str	r3, [r7, #28]
 8007fda:	e002      	b.n	8007fe2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007fdc:	69bb      	ldr	r3, [r7, #24]
 8007fde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fe0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007fe2:	69bb      	ldr	r3, [r7, #24]
 8007fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fe6:	69fa      	ldr	r2, [r7, #28]
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d04c      	beq.n	8008086 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007fec:	69bb      	ldr	r3, [r7, #24]
 8007fee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ff0:	697a      	ldr	r2, [r7, #20]
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d147      	bne.n	8008086 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007ff6:	4b26      	ldr	r3, [pc, #152]	@ (8008090 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	69ba      	ldr	r2, [r7, #24]
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d10b      	bne.n	8008018 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8008000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008004:	f383 8811 	msr	BASEPRI, r3
 8008008:	f3bf 8f6f 	isb	sy
 800800c:	f3bf 8f4f 	dsb	sy
 8008010:	60bb      	str	r3, [r7, #8]
}
 8008012:	bf00      	nop
 8008014:	bf00      	nop
 8008016:	e7fd      	b.n	8008014 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008018:	69bb      	ldr	r3, [r7, #24]
 800801a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800801c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800801e:	69bb      	ldr	r3, [r7, #24]
 8008020:	69fa      	ldr	r2, [r7, #28]
 8008022:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008024:	69bb      	ldr	r3, [r7, #24]
 8008026:	699b      	ldr	r3, [r3, #24]
 8008028:	2b00      	cmp	r3, #0
 800802a:	db04      	blt.n	8008036 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800802c:	69fb      	ldr	r3, [r7, #28]
 800802e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008032:	69bb      	ldr	r3, [r7, #24]
 8008034:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008036:	69bb      	ldr	r3, [r7, #24]
 8008038:	6959      	ldr	r1, [r3, #20]
 800803a:	693a      	ldr	r2, [r7, #16]
 800803c:	4613      	mov	r3, r2
 800803e:	009b      	lsls	r3, r3, #2
 8008040:	4413      	add	r3, r2
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	4a13      	ldr	r2, [pc, #76]	@ (8008094 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008046:	4413      	add	r3, r2
 8008048:	4299      	cmp	r1, r3
 800804a:	d11c      	bne.n	8008086 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800804c:	69bb      	ldr	r3, [r7, #24]
 800804e:	3304      	adds	r3, #4
 8008050:	4618      	mov	r0, r3
 8008052:	f7fd ff13 	bl	8005e7c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008056:	69bb      	ldr	r3, [r7, #24]
 8008058:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800805a:	4b0f      	ldr	r3, [pc, #60]	@ (8008098 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	429a      	cmp	r2, r3
 8008060:	d903      	bls.n	800806a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8008062:	69bb      	ldr	r3, [r7, #24]
 8008064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008066:	4a0c      	ldr	r2, [pc, #48]	@ (8008098 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008068:	6013      	str	r3, [r2, #0]
 800806a:	69bb      	ldr	r3, [r7, #24]
 800806c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800806e:	4613      	mov	r3, r2
 8008070:	009b      	lsls	r3, r3, #2
 8008072:	4413      	add	r3, r2
 8008074:	009b      	lsls	r3, r3, #2
 8008076:	4a07      	ldr	r2, [pc, #28]	@ (8008094 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008078:	441a      	add	r2, r3
 800807a:	69bb      	ldr	r3, [r7, #24]
 800807c:	3304      	adds	r3, #4
 800807e:	4619      	mov	r1, r3
 8008080:	4610      	mov	r0, r2
 8008082:	f7fd fe9e 	bl	8005dc2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008086:	bf00      	nop
 8008088:	3720      	adds	r7, #32
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}
 800808e:	bf00      	nop
 8008090:	24001c28 	.word	0x24001c28
 8008094:	24001c2c 	.word	0x24001c2c
 8008098:	24002104 	.word	0x24002104

0800809c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800809c:	b480      	push	{r7}
 800809e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80080a0:	4b07      	ldr	r3, [pc, #28]	@ (80080c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d004      	beq.n	80080b2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80080a8:	4b05      	ldr	r3, [pc, #20]	@ (80080c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80080ae:	3201      	adds	r2, #1
 80080b0:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80080b2:	4b03      	ldr	r3, [pc, #12]	@ (80080c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80080b4:	681b      	ldr	r3, [r3, #0]
	}
 80080b6:	4618      	mov	r0, r3
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr
 80080c0:	24001c28 	.word	0x24001c28

080080c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80080ce:	4b21      	ldr	r3, [pc, #132]	@ (8008154 <prvAddCurrentTaskToDelayedList+0x90>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080d4:	4b20      	ldr	r3, [pc, #128]	@ (8008158 <prvAddCurrentTaskToDelayedList+0x94>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	3304      	adds	r3, #4
 80080da:	4618      	mov	r0, r3
 80080dc:	f7fd fece 	bl	8005e7c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080e6:	d10a      	bne.n	80080fe <prvAddCurrentTaskToDelayedList+0x3a>
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d007      	beq.n	80080fe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080ee:	4b1a      	ldr	r3, [pc, #104]	@ (8008158 <prvAddCurrentTaskToDelayedList+0x94>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	3304      	adds	r3, #4
 80080f4:	4619      	mov	r1, r3
 80080f6:	4819      	ldr	r0, [pc, #100]	@ (800815c <prvAddCurrentTaskToDelayedList+0x98>)
 80080f8:	f7fd fe63 	bl	8005dc2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80080fc:	e026      	b.n	800814c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80080fe:	68fa      	ldr	r2, [r7, #12]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	4413      	add	r3, r2
 8008104:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008106:	4b14      	ldr	r3, [pc, #80]	@ (8008158 <prvAddCurrentTaskToDelayedList+0x94>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	68ba      	ldr	r2, [r7, #8]
 800810c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800810e:	68ba      	ldr	r2, [r7, #8]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	429a      	cmp	r2, r3
 8008114:	d209      	bcs.n	800812a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008116:	4b12      	ldr	r3, [pc, #72]	@ (8008160 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	4b0f      	ldr	r3, [pc, #60]	@ (8008158 <prvAddCurrentTaskToDelayedList+0x94>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	3304      	adds	r3, #4
 8008120:	4619      	mov	r1, r3
 8008122:	4610      	mov	r0, r2
 8008124:	f7fd fe71 	bl	8005e0a <vListInsert>
}
 8008128:	e010      	b.n	800814c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800812a:	4b0e      	ldr	r3, [pc, #56]	@ (8008164 <prvAddCurrentTaskToDelayedList+0xa0>)
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	4b0a      	ldr	r3, [pc, #40]	@ (8008158 <prvAddCurrentTaskToDelayedList+0x94>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	3304      	adds	r3, #4
 8008134:	4619      	mov	r1, r3
 8008136:	4610      	mov	r0, r2
 8008138:	f7fd fe67 	bl	8005e0a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800813c:	4b0a      	ldr	r3, [pc, #40]	@ (8008168 <prvAddCurrentTaskToDelayedList+0xa4>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	68ba      	ldr	r2, [r7, #8]
 8008142:	429a      	cmp	r2, r3
 8008144:	d202      	bcs.n	800814c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008146:	4a08      	ldr	r2, [pc, #32]	@ (8008168 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	6013      	str	r3, [r2, #0]
}
 800814c:	bf00      	nop
 800814e:	3710      	adds	r7, #16
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}
 8008154:	24002100 	.word	0x24002100
 8008158:	24001c28 	.word	0x24001c28
 800815c:	240020e8 	.word	0x240020e8
 8008160:	240020b8 	.word	0x240020b8
 8008164:	240020b4 	.word	0x240020b4
 8008168:	2400211c 	.word	0x2400211c

0800816c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b08a      	sub	sp, #40	@ 0x28
 8008170:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008172:	2300      	movs	r3, #0
 8008174:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008176:	f000 fb13 	bl	80087a0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800817a:	4b1d      	ldr	r3, [pc, #116]	@ (80081f0 <xTimerCreateTimerTask+0x84>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d021      	beq.n	80081c6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008182:	2300      	movs	r3, #0
 8008184:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008186:	2300      	movs	r3, #0
 8008188:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800818a:	1d3a      	adds	r2, r7, #4
 800818c:	f107 0108 	add.w	r1, r7, #8
 8008190:	f107 030c 	add.w	r3, r7, #12
 8008194:	4618      	mov	r0, r3
 8008196:	f7fd fdcd 	bl	8005d34 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800819a:	6879      	ldr	r1, [r7, #4]
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	68fa      	ldr	r2, [r7, #12]
 80081a0:	9202      	str	r2, [sp, #8]
 80081a2:	9301      	str	r3, [sp, #4]
 80081a4:	2302      	movs	r3, #2
 80081a6:	9300      	str	r3, [sp, #0]
 80081a8:	2300      	movs	r3, #0
 80081aa:	460a      	mov	r2, r1
 80081ac:	4911      	ldr	r1, [pc, #68]	@ (80081f4 <xTimerCreateTimerTask+0x88>)
 80081ae:	4812      	ldr	r0, [pc, #72]	@ (80081f8 <xTimerCreateTimerTask+0x8c>)
 80081b0:	f7fe ff72 	bl	8007098 <xTaskCreateStatic>
 80081b4:	4603      	mov	r3, r0
 80081b6:	4a11      	ldr	r2, [pc, #68]	@ (80081fc <xTimerCreateTimerTask+0x90>)
 80081b8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80081ba:	4b10      	ldr	r3, [pc, #64]	@ (80081fc <xTimerCreateTimerTask+0x90>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d001      	beq.n	80081c6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80081c2:	2301      	movs	r3, #1
 80081c4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d10b      	bne.n	80081e4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80081cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081d0:	f383 8811 	msr	BASEPRI, r3
 80081d4:	f3bf 8f6f 	isb	sy
 80081d8:	f3bf 8f4f 	dsb	sy
 80081dc:	613b      	str	r3, [r7, #16]
}
 80081de:	bf00      	nop
 80081e0:	bf00      	nop
 80081e2:	e7fd      	b.n	80081e0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80081e4:	697b      	ldr	r3, [r7, #20]
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3718      	adds	r7, #24
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
 80081ee:	bf00      	nop
 80081f0:	24002158 	.word	0x24002158
 80081f4:	0801456c 	.word	0x0801456c
 80081f8:	08008339 	.word	0x08008339
 80081fc:	2400215c 	.word	0x2400215c

08008200 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b08a      	sub	sp, #40	@ 0x28
 8008204:	af00      	add	r7, sp, #0
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	60b9      	str	r1, [r7, #8]
 800820a:	607a      	str	r2, [r7, #4]
 800820c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800820e:	2300      	movs	r3, #0
 8008210:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d10b      	bne.n	8008230 <xTimerGenericCommand+0x30>
	__asm volatile
 8008218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800821c:	f383 8811 	msr	BASEPRI, r3
 8008220:	f3bf 8f6f 	isb	sy
 8008224:	f3bf 8f4f 	dsb	sy
 8008228:	623b      	str	r3, [r7, #32]
}
 800822a:	bf00      	nop
 800822c:	bf00      	nop
 800822e:	e7fd      	b.n	800822c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008230:	4b19      	ldr	r3, [pc, #100]	@ (8008298 <xTimerGenericCommand+0x98>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d02a      	beq.n	800828e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	2b05      	cmp	r3, #5
 8008248:	dc18      	bgt.n	800827c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800824a:	f7ff fdad 	bl	8007da8 <xTaskGetSchedulerState>
 800824e:	4603      	mov	r3, r0
 8008250:	2b02      	cmp	r3, #2
 8008252:	d109      	bne.n	8008268 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008254:	4b10      	ldr	r3, [pc, #64]	@ (8008298 <xTimerGenericCommand+0x98>)
 8008256:	6818      	ldr	r0, [r3, #0]
 8008258:	f107 0110 	add.w	r1, r7, #16
 800825c:	2300      	movs	r3, #0
 800825e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008260:	f7fe f8a2 	bl	80063a8 <xQueueGenericSend>
 8008264:	6278      	str	r0, [r7, #36]	@ 0x24
 8008266:	e012      	b.n	800828e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008268:	4b0b      	ldr	r3, [pc, #44]	@ (8008298 <xTimerGenericCommand+0x98>)
 800826a:	6818      	ldr	r0, [r3, #0]
 800826c:	f107 0110 	add.w	r1, r7, #16
 8008270:	2300      	movs	r3, #0
 8008272:	2200      	movs	r2, #0
 8008274:	f7fe f898 	bl	80063a8 <xQueueGenericSend>
 8008278:	6278      	str	r0, [r7, #36]	@ 0x24
 800827a:	e008      	b.n	800828e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800827c:	4b06      	ldr	r3, [pc, #24]	@ (8008298 <xTimerGenericCommand+0x98>)
 800827e:	6818      	ldr	r0, [r3, #0]
 8008280:	f107 0110 	add.w	r1, r7, #16
 8008284:	2300      	movs	r3, #0
 8008286:	683a      	ldr	r2, [r7, #0]
 8008288:	f7fe f990 	bl	80065ac <xQueueGenericSendFromISR>
 800828c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800828e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008290:	4618      	mov	r0, r3
 8008292:	3728      	adds	r7, #40	@ 0x28
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}
 8008298:	24002158 	.word	0x24002158

0800829c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b088      	sub	sp, #32
 80082a0:	af02      	add	r7, sp, #8
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082a6:	4b23      	ldr	r3, [pc, #140]	@ (8008334 <prvProcessExpiredTimer+0x98>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	68db      	ldr	r3, [r3, #12]
 80082ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	3304      	adds	r3, #4
 80082b4:	4618      	mov	r0, r3
 80082b6:	f7fd fde1 	bl	8005e7c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80082c0:	f003 0304 	and.w	r3, r3, #4
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d023      	beq.n	8008310 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	699a      	ldr	r2, [r3, #24]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	18d1      	adds	r1, r2, r3
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	683a      	ldr	r2, [r7, #0]
 80082d4:	6978      	ldr	r0, [r7, #20]
 80082d6:	f000 f8d5 	bl	8008484 <prvInsertTimerInActiveList>
 80082da:	4603      	mov	r3, r0
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d020      	beq.n	8008322 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80082e0:	2300      	movs	r3, #0
 80082e2:	9300      	str	r3, [sp, #0]
 80082e4:	2300      	movs	r3, #0
 80082e6:	687a      	ldr	r2, [r7, #4]
 80082e8:	2100      	movs	r1, #0
 80082ea:	6978      	ldr	r0, [r7, #20]
 80082ec:	f7ff ff88 	bl	8008200 <xTimerGenericCommand>
 80082f0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d114      	bne.n	8008322 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80082f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082fc:	f383 8811 	msr	BASEPRI, r3
 8008300:	f3bf 8f6f 	isb	sy
 8008304:	f3bf 8f4f 	dsb	sy
 8008308:	60fb      	str	r3, [r7, #12]
}
 800830a:	bf00      	nop
 800830c:	bf00      	nop
 800830e:	e7fd      	b.n	800830c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008316:	f023 0301 	bic.w	r3, r3, #1
 800831a:	b2da      	uxtb	r2, r3
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	6a1b      	ldr	r3, [r3, #32]
 8008326:	6978      	ldr	r0, [r7, #20]
 8008328:	4798      	blx	r3
}
 800832a:	bf00      	nop
 800832c:	3718      	adds	r7, #24
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}
 8008332:	bf00      	nop
 8008334:	24002150 	.word	0x24002150

08008338 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b084      	sub	sp, #16
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008340:	f107 0308 	add.w	r3, r7, #8
 8008344:	4618      	mov	r0, r3
 8008346:	f000 f859 	bl	80083fc <prvGetNextExpireTime>
 800834a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	4619      	mov	r1, r3
 8008350:	68f8      	ldr	r0, [r7, #12]
 8008352:	f000 f805 	bl	8008360 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008356:	f000 f8d7 	bl	8008508 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800835a:	bf00      	nop
 800835c:	e7f0      	b.n	8008340 <prvTimerTask+0x8>
	...

08008360 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800836a:	f7ff f8f9 	bl	8007560 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800836e:	f107 0308 	add.w	r3, r7, #8
 8008372:	4618      	mov	r0, r3
 8008374:	f000 f866 	bl	8008444 <prvSampleTimeNow>
 8008378:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d130      	bne.n	80083e2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d10a      	bne.n	800839c <prvProcessTimerOrBlockTask+0x3c>
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	429a      	cmp	r2, r3
 800838c:	d806      	bhi.n	800839c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800838e:	f7ff f8f5 	bl	800757c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008392:	68f9      	ldr	r1, [r7, #12]
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f7ff ff81 	bl	800829c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800839a:	e024      	b.n	80083e6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d008      	beq.n	80083b4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80083a2:	4b13      	ldr	r3, [pc, #76]	@ (80083f0 <prvProcessTimerOrBlockTask+0x90>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d101      	bne.n	80083b0 <prvProcessTimerOrBlockTask+0x50>
 80083ac:	2301      	movs	r3, #1
 80083ae:	e000      	b.n	80083b2 <prvProcessTimerOrBlockTask+0x52>
 80083b0:	2300      	movs	r3, #0
 80083b2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80083b4:	4b0f      	ldr	r3, [pc, #60]	@ (80083f4 <prvProcessTimerOrBlockTask+0x94>)
 80083b6:	6818      	ldr	r0, [r3, #0]
 80083b8:	687a      	ldr	r2, [r7, #4]
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	1ad3      	subs	r3, r2, r3
 80083be:	683a      	ldr	r2, [r7, #0]
 80083c0:	4619      	mov	r1, r3
 80083c2:	f7fe fe35 	bl	8007030 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80083c6:	f7ff f8d9 	bl	800757c <xTaskResumeAll>
 80083ca:	4603      	mov	r3, r0
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d10a      	bne.n	80083e6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80083d0:	4b09      	ldr	r3, [pc, #36]	@ (80083f8 <prvProcessTimerOrBlockTask+0x98>)
 80083d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083d6:	601a      	str	r2, [r3, #0]
 80083d8:	f3bf 8f4f 	dsb	sy
 80083dc:	f3bf 8f6f 	isb	sy
}
 80083e0:	e001      	b.n	80083e6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80083e2:	f7ff f8cb 	bl	800757c <xTaskResumeAll>
}
 80083e6:	bf00      	nop
 80083e8:	3710      	adds	r7, #16
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}
 80083ee:	bf00      	nop
 80083f0:	24002154 	.word	0x24002154
 80083f4:	24002158 	.word	0x24002158
 80083f8:	e000ed04 	.word	0xe000ed04

080083fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80083fc:	b480      	push	{r7}
 80083fe:	b085      	sub	sp, #20
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008404:	4b0e      	ldr	r3, [pc, #56]	@ (8008440 <prvGetNextExpireTime+0x44>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d101      	bne.n	8008412 <prvGetNextExpireTime+0x16>
 800840e:	2201      	movs	r2, #1
 8008410:	e000      	b.n	8008414 <prvGetNextExpireTime+0x18>
 8008412:	2200      	movs	r2, #0
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d105      	bne.n	800842c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008420:	4b07      	ldr	r3, [pc, #28]	@ (8008440 <prvGetNextExpireTime+0x44>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	68db      	ldr	r3, [r3, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	60fb      	str	r3, [r7, #12]
 800842a:	e001      	b.n	8008430 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800842c:	2300      	movs	r3, #0
 800842e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008430:	68fb      	ldr	r3, [r7, #12]
}
 8008432:	4618      	mov	r0, r3
 8008434:	3714      	adds	r7, #20
 8008436:	46bd      	mov	sp, r7
 8008438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843c:	4770      	bx	lr
 800843e:	bf00      	nop
 8008440:	24002150 	.word	0x24002150

08008444 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b084      	sub	sp, #16
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800844c:	f7ff f934 	bl	80076b8 <xTaskGetTickCount>
 8008450:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008452:	4b0b      	ldr	r3, [pc, #44]	@ (8008480 <prvSampleTimeNow+0x3c>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	68fa      	ldr	r2, [r7, #12]
 8008458:	429a      	cmp	r2, r3
 800845a:	d205      	bcs.n	8008468 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800845c:	f000 f93a 	bl	80086d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2201      	movs	r2, #1
 8008464:	601a      	str	r2, [r3, #0]
 8008466:	e002      	b.n	800846e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2200      	movs	r2, #0
 800846c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800846e:	4a04      	ldr	r2, [pc, #16]	@ (8008480 <prvSampleTimeNow+0x3c>)
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008474:	68fb      	ldr	r3, [r7, #12]
}
 8008476:	4618      	mov	r0, r3
 8008478:	3710      	adds	r7, #16
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}
 800847e:	bf00      	nop
 8008480:	24002160 	.word	0x24002160

08008484 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b086      	sub	sp, #24
 8008488:	af00      	add	r7, sp, #0
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	60b9      	str	r1, [r7, #8]
 800848e:	607a      	str	r2, [r7, #4]
 8008490:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008492:	2300      	movs	r3, #0
 8008494:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	68ba      	ldr	r2, [r7, #8]
 800849a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	68fa      	ldr	r2, [r7, #12]
 80084a0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80084a2:	68ba      	ldr	r2, [r7, #8]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d812      	bhi.n	80084d0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	1ad2      	subs	r2, r2, r3
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	699b      	ldr	r3, [r3, #24]
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d302      	bcc.n	80084be <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80084b8:	2301      	movs	r3, #1
 80084ba:	617b      	str	r3, [r7, #20]
 80084bc:	e01b      	b.n	80084f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80084be:	4b10      	ldr	r3, [pc, #64]	@ (8008500 <prvInsertTimerInActiveList+0x7c>)
 80084c0:	681a      	ldr	r2, [r3, #0]
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	3304      	adds	r3, #4
 80084c6:	4619      	mov	r1, r3
 80084c8:	4610      	mov	r0, r2
 80084ca:	f7fd fc9e 	bl	8005e0a <vListInsert>
 80084ce:	e012      	b.n	80084f6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	429a      	cmp	r2, r3
 80084d6:	d206      	bcs.n	80084e6 <prvInsertTimerInActiveList+0x62>
 80084d8:	68ba      	ldr	r2, [r7, #8]
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	429a      	cmp	r2, r3
 80084de:	d302      	bcc.n	80084e6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80084e0:	2301      	movs	r3, #1
 80084e2:	617b      	str	r3, [r7, #20]
 80084e4:	e007      	b.n	80084f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80084e6:	4b07      	ldr	r3, [pc, #28]	@ (8008504 <prvInsertTimerInActiveList+0x80>)
 80084e8:	681a      	ldr	r2, [r3, #0]
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	3304      	adds	r3, #4
 80084ee:	4619      	mov	r1, r3
 80084f0:	4610      	mov	r0, r2
 80084f2:	f7fd fc8a 	bl	8005e0a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80084f6:	697b      	ldr	r3, [r7, #20]
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3718      	adds	r7, #24
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}
 8008500:	24002154 	.word	0x24002154
 8008504:	24002150 	.word	0x24002150

08008508 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b08e      	sub	sp, #56	@ 0x38
 800850c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800850e:	e0ce      	b.n	80086ae <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2b00      	cmp	r3, #0
 8008514:	da19      	bge.n	800854a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008516:	1d3b      	adds	r3, r7, #4
 8008518:	3304      	adds	r3, #4
 800851a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800851c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800851e:	2b00      	cmp	r3, #0
 8008520:	d10b      	bne.n	800853a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008526:	f383 8811 	msr	BASEPRI, r3
 800852a:	f3bf 8f6f 	isb	sy
 800852e:	f3bf 8f4f 	dsb	sy
 8008532:	61fb      	str	r3, [r7, #28]
}
 8008534:	bf00      	nop
 8008536:	bf00      	nop
 8008538:	e7fd      	b.n	8008536 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800853a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008540:	6850      	ldr	r0, [r2, #4]
 8008542:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008544:	6892      	ldr	r2, [r2, #8]
 8008546:	4611      	mov	r1, r2
 8008548:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2b00      	cmp	r3, #0
 800854e:	f2c0 80ae 	blt.w	80086ae <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008558:	695b      	ldr	r3, [r3, #20]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d004      	beq.n	8008568 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800855e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008560:	3304      	adds	r3, #4
 8008562:	4618      	mov	r0, r3
 8008564:	f7fd fc8a 	bl	8005e7c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008568:	463b      	mov	r3, r7
 800856a:	4618      	mov	r0, r3
 800856c:	f7ff ff6a 	bl	8008444 <prvSampleTimeNow>
 8008570:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2b09      	cmp	r3, #9
 8008576:	f200 8097 	bhi.w	80086a8 <prvProcessReceivedCommands+0x1a0>
 800857a:	a201      	add	r2, pc, #4	@ (adr r2, 8008580 <prvProcessReceivedCommands+0x78>)
 800857c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008580:	080085a9 	.word	0x080085a9
 8008584:	080085a9 	.word	0x080085a9
 8008588:	080085a9 	.word	0x080085a9
 800858c:	0800861f 	.word	0x0800861f
 8008590:	08008633 	.word	0x08008633
 8008594:	0800867f 	.word	0x0800867f
 8008598:	080085a9 	.word	0x080085a9
 800859c:	080085a9 	.word	0x080085a9
 80085a0:	0800861f 	.word	0x0800861f
 80085a4:	08008633 	.word	0x08008633
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80085a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80085ae:	f043 0301 	orr.w	r3, r3, #1
 80085b2:	b2da      	uxtb	r2, r3
 80085b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80085ba:	68ba      	ldr	r2, [r7, #8]
 80085bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085be:	699b      	ldr	r3, [r3, #24]
 80085c0:	18d1      	adds	r1, r2, r3
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085c8:	f7ff ff5c 	bl	8008484 <prvInsertTimerInActiveList>
 80085cc:	4603      	mov	r3, r0
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d06c      	beq.n	80086ac <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80085d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085d4:	6a1b      	ldr	r3, [r3, #32]
 80085d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085d8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80085da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80085e0:	f003 0304 	and.w	r3, r3, #4
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d061      	beq.n	80086ac <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80085e8:	68ba      	ldr	r2, [r7, #8]
 80085ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085ec:	699b      	ldr	r3, [r3, #24]
 80085ee:	441a      	add	r2, r3
 80085f0:	2300      	movs	r3, #0
 80085f2:	9300      	str	r3, [sp, #0]
 80085f4:	2300      	movs	r3, #0
 80085f6:	2100      	movs	r1, #0
 80085f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085fa:	f7ff fe01 	bl	8008200 <xTimerGenericCommand>
 80085fe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008600:	6a3b      	ldr	r3, [r7, #32]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d152      	bne.n	80086ac <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800860a:	f383 8811 	msr	BASEPRI, r3
 800860e:	f3bf 8f6f 	isb	sy
 8008612:	f3bf 8f4f 	dsb	sy
 8008616:	61bb      	str	r3, [r7, #24]
}
 8008618:	bf00      	nop
 800861a:	bf00      	nop
 800861c:	e7fd      	b.n	800861a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800861e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008620:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008624:	f023 0301 	bic.w	r3, r3, #1
 8008628:	b2da      	uxtb	r2, r3
 800862a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800862c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008630:	e03d      	b.n	80086ae <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008634:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008638:	f043 0301 	orr.w	r3, r3, #1
 800863c:	b2da      	uxtb	r2, r3
 800863e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008640:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008644:	68ba      	ldr	r2, [r7, #8]
 8008646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008648:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800864a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800864c:	699b      	ldr	r3, [r3, #24]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d10b      	bne.n	800866a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008656:	f383 8811 	msr	BASEPRI, r3
 800865a:	f3bf 8f6f 	isb	sy
 800865e:	f3bf 8f4f 	dsb	sy
 8008662:	617b      	str	r3, [r7, #20]
}
 8008664:	bf00      	nop
 8008666:	bf00      	nop
 8008668:	e7fd      	b.n	8008666 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800866a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800866c:	699a      	ldr	r2, [r3, #24]
 800866e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008670:	18d1      	adds	r1, r2, r3
 8008672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008674:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008676:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008678:	f7ff ff04 	bl	8008484 <prvInsertTimerInActiveList>
					break;
 800867c:	e017      	b.n	80086ae <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800867e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008680:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008684:	f003 0302 	and.w	r3, r3, #2
 8008688:	2b00      	cmp	r3, #0
 800868a:	d103      	bne.n	8008694 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800868c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800868e:	f000 fbeb 	bl	8008e68 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008692:	e00c      	b.n	80086ae <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008696:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800869a:	f023 0301 	bic.w	r3, r3, #1
 800869e:	b2da      	uxtb	r2, r3
 80086a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80086a6:	e002      	b.n	80086ae <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80086a8:	bf00      	nop
 80086aa:	e000      	b.n	80086ae <prvProcessReceivedCommands+0x1a6>
					break;
 80086ac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80086ae:	4b08      	ldr	r3, [pc, #32]	@ (80086d0 <prvProcessReceivedCommands+0x1c8>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	1d39      	adds	r1, r7, #4
 80086b4:	2200      	movs	r2, #0
 80086b6:	4618      	mov	r0, r3
 80086b8:	f7fe f8a6 	bl	8006808 <xQueueReceive>
 80086bc:	4603      	mov	r3, r0
 80086be:	2b00      	cmp	r3, #0
 80086c0:	f47f af26 	bne.w	8008510 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80086c4:	bf00      	nop
 80086c6:	bf00      	nop
 80086c8:	3730      	adds	r7, #48	@ 0x30
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
 80086ce:	bf00      	nop
 80086d0:	24002158 	.word	0x24002158

080086d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b088      	sub	sp, #32
 80086d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80086da:	e049      	b.n	8008770 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80086dc:	4b2e      	ldr	r3, [pc, #184]	@ (8008798 <prvSwitchTimerLists+0xc4>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	68db      	ldr	r3, [r3, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086e6:	4b2c      	ldr	r3, [pc, #176]	@ (8008798 <prvSwitchTimerLists+0xc4>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	68db      	ldr	r3, [r3, #12]
 80086ec:	68db      	ldr	r3, [r3, #12]
 80086ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	3304      	adds	r3, #4
 80086f4:	4618      	mov	r0, r3
 80086f6:	f7fd fbc1 	bl	8005e7c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	6a1b      	ldr	r3, [r3, #32]
 80086fe:	68f8      	ldr	r0, [r7, #12]
 8008700:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008708:	f003 0304 	and.w	r3, r3, #4
 800870c:	2b00      	cmp	r3, #0
 800870e:	d02f      	beq.n	8008770 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	699b      	ldr	r3, [r3, #24]
 8008714:	693a      	ldr	r2, [r7, #16]
 8008716:	4413      	add	r3, r2
 8008718:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800871a:	68ba      	ldr	r2, [r7, #8]
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	429a      	cmp	r2, r3
 8008720:	d90e      	bls.n	8008740 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	68ba      	ldr	r2, [r7, #8]
 8008726:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	68fa      	ldr	r2, [r7, #12]
 800872c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800872e:	4b1a      	ldr	r3, [pc, #104]	@ (8008798 <prvSwitchTimerLists+0xc4>)
 8008730:	681a      	ldr	r2, [r3, #0]
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	3304      	adds	r3, #4
 8008736:	4619      	mov	r1, r3
 8008738:	4610      	mov	r0, r2
 800873a:	f7fd fb66 	bl	8005e0a <vListInsert>
 800873e:	e017      	b.n	8008770 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008740:	2300      	movs	r3, #0
 8008742:	9300      	str	r3, [sp, #0]
 8008744:	2300      	movs	r3, #0
 8008746:	693a      	ldr	r2, [r7, #16]
 8008748:	2100      	movs	r1, #0
 800874a:	68f8      	ldr	r0, [r7, #12]
 800874c:	f7ff fd58 	bl	8008200 <xTimerGenericCommand>
 8008750:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d10b      	bne.n	8008770 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800875c:	f383 8811 	msr	BASEPRI, r3
 8008760:	f3bf 8f6f 	isb	sy
 8008764:	f3bf 8f4f 	dsb	sy
 8008768:	603b      	str	r3, [r7, #0]
}
 800876a:	bf00      	nop
 800876c:	bf00      	nop
 800876e:	e7fd      	b.n	800876c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008770:	4b09      	ldr	r3, [pc, #36]	@ (8008798 <prvSwitchTimerLists+0xc4>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d1b0      	bne.n	80086dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800877a:	4b07      	ldr	r3, [pc, #28]	@ (8008798 <prvSwitchTimerLists+0xc4>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008780:	4b06      	ldr	r3, [pc, #24]	@ (800879c <prvSwitchTimerLists+0xc8>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a04      	ldr	r2, [pc, #16]	@ (8008798 <prvSwitchTimerLists+0xc4>)
 8008786:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008788:	4a04      	ldr	r2, [pc, #16]	@ (800879c <prvSwitchTimerLists+0xc8>)
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	6013      	str	r3, [r2, #0]
}
 800878e:	bf00      	nop
 8008790:	3718      	adds	r7, #24
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}
 8008796:	bf00      	nop
 8008798:	24002150 	.word	0x24002150
 800879c:	24002154 	.word	0x24002154

080087a0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b082      	sub	sp, #8
 80087a4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80087a6:	f000 f96f 	bl	8008a88 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80087aa:	4b15      	ldr	r3, [pc, #84]	@ (8008800 <prvCheckForValidListAndQueue+0x60>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d120      	bne.n	80087f4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80087b2:	4814      	ldr	r0, [pc, #80]	@ (8008804 <prvCheckForValidListAndQueue+0x64>)
 80087b4:	f7fd fad8 	bl	8005d68 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80087b8:	4813      	ldr	r0, [pc, #76]	@ (8008808 <prvCheckForValidListAndQueue+0x68>)
 80087ba:	f7fd fad5 	bl	8005d68 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80087be:	4b13      	ldr	r3, [pc, #76]	@ (800880c <prvCheckForValidListAndQueue+0x6c>)
 80087c0:	4a10      	ldr	r2, [pc, #64]	@ (8008804 <prvCheckForValidListAndQueue+0x64>)
 80087c2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80087c4:	4b12      	ldr	r3, [pc, #72]	@ (8008810 <prvCheckForValidListAndQueue+0x70>)
 80087c6:	4a10      	ldr	r2, [pc, #64]	@ (8008808 <prvCheckForValidListAndQueue+0x68>)
 80087c8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80087ca:	2300      	movs	r3, #0
 80087cc:	9300      	str	r3, [sp, #0]
 80087ce:	4b11      	ldr	r3, [pc, #68]	@ (8008814 <prvCheckForValidListAndQueue+0x74>)
 80087d0:	4a11      	ldr	r2, [pc, #68]	@ (8008818 <prvCheckForValidListAndQueue+0x78>)
 80087d2:	2110      	movs	r1, #16
 80087d4:	200a      	movs	r0, #10
 80087d6:	f7fd fbe5 	bl	8005fa4 <xQueueGenericCreateStatic>
 80087da:	4603      	mov	r3, r0
 80087dc:	4a08      	ldr	r2, [pc, #32]	@ (8008800 <prvCheckForValidListAndQueue+0x60>)
 80087de:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80087e0:	4b07      	ldr	r3, [pc, #28]	@ (8008800 <prvCheckForValidListAndQueue+0x60>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d005      	beq.n	80087f4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80087e8:	4b05      	ldr	r3, [pc, #20]	@ (8008800 <prvCheckForValidListAndQueue+0x60>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	490b      	ldr	r1, [pc, #44]	@ (800881c <prvCheckForValidListAndQueue+0x7c>)
 80087ee:	4618      	mov	r0, r3
 80087f0:	f7fe fbca 	bl	8006f88 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80087f4:	f000 f97a 	bl	8008aec <vPortExitCritical>
}
 80087f8:	bf00      	nop
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}
 80087fe:	bf00      	nop
 8008800:	24002158 	.word	0x24002158
 8008804:	24002128 	.word	0x24002128
 8008808:	2400213c 	.word	0x2400213c
 800880c:	24002150 	.word	0x24002150
 8008810:	24002154 	.word	0x24002154
 8008814:	24002204 	.word	0x24002204
 8008818:	24002164 	.word	0x24002164
 800881c:	08014574 	.word	0x08014574

08008820 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008820:	b480      	push	{r7}
 8008822:	b085      	sub	sp, #20
 8008824:	af00      	add	r7, sp, #0
 8008826:	60f8      	str	r0, [r7, #12]
 8008828:	60b9      	str	r1, [r7, #8]
 800882a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	3b04      	subs	r3, #4
 8008830:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008838:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	3b04      	subs	r3, #4
 800883e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	f023 0201 	bic.w	r2, r3, #1
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	3b04      	subs	r3, #4
 800884e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008850:	4a0c      	ldr	r2, [pc, #48]	@ (8008884 <pxPortInitialiseStack+0x64>)
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	3b14      	subs	r3, #20
 800885a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800885c:	687a      	ldr	r2, [r7, #4]
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	3b04      	subs	r3, #4
 8008866:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f06f 0202 	mvn.w	r2, #2
 800886e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	3b20      	subs	r3, #32
 8008874:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008876:	68fb      	ldr	r3, [r7, #12]
}
 8008878:	4618      	mov	r0, r3
 800887a:	3714      	adds	r7, #20
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr
 8008884:	08008889 	.word	0x08008889

08008888 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008888:	b480      	push	{r7}
 800888a:	b085      	sub	sp, #20
 800888c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800888e:	2300      	movs	r3, #0
 8008890:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008892:	4b13      	ldr	r3, [pc, #76]	@ (80088e0 <prvTaskExitError+0x58>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800889a:	d00b      	beq.n	80088b4 <prvTaskExitError+0x2c>
	__asm volatile
 800889c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088a0:	f383 8811 	msr	BASEPRI, r3
 80088a4:	f3bf 8f6f 	isb	sy
 80088a8:	f3bf 8f4f 	dsb	sy
 80088ac:	60fb      	str	r3, [r7, #12]
}
 80088ae:	bf00      	nop
 80088b0:	bf00      	nop
 80088b2:	e7fd      	b.n	80088b0 <prvTaskExitError+0x28>
	__asm volatile
 80088b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088b8:	f383 8811 	msr	BASEPRI, r3
 80088bc:	f3bf 8f6f 	isb	sy
 80088c0:	f3bf 8f4f 	dsb	sy
 80088c4:	60bb      	str	r3, [r7, #8]
}
 80088c6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80088c8:	bf00      	nop
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d0fc      	beq.n	80088ca <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80088d0:	bf00      	nop
 80088d2:	bf00      	nop
 80088d4:	3714      	adds	r7, #20
 80088d6:	46bd      	mov	sp, r7
 80088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088dc:	4770      	bx	lr
 80088de:	bf00      	nop
 80088e0:	24000024 	.word	0x24000024
	...

080088f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80088f0:	4b07      	ldr	r3, [pc, #28]	@ (8008910 <pxCurrentTCBConst2>)
 80088f2:	6819      	ldr	r1, [r3, #0]
 80088f4:	6808      	ldr	r0, [r1, #0]
 80088f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088fa:	f380 8809 	msr	PSP, r0
 80088fe:	f3bf 8f6f 	isb	sy
 8008902:	f04f 0000 	mov.w	r0, #0
 8008906:	f380 8811 	msr	BASEPRI, r0
 800890a:	4770      	bx	lr
 800890c:	f3af 8000 	nop.w

08008910 <pxCurrentTCBConst2>:
 8008910:	24001c28 	.word	0x24001c28
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008914:	bf00      	nop
 8008916:	bf00      	nop

08008918 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008918:	4808      	ldr	r0, [pc, #32]	@ (800893c <prvPortStartFirstTask+0x24>)
 800891a:	6800      	ldr	r0, [r0, #0]
 800891c:	6800      	ldr	r0, [r0, #0]
 800891e:	f380 8808 	msr	MSP, r0
 8008922:	f04f 0000 	mov.w	r0, #0
 8008926:	f380 8814 	msr	CONTROL, r0
 800892a:	b662      	cpsie	i
 800892c:	b661      	cpsie	f
 800892e:	f3bf 8f4f 	dsb	sy
 8008932:	f3bf 8f6f 	isb	sy
 8008936:	df00      	svc	0
 8008938:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800893a:	bf00      	nop
 800893c:	e000ed08 	.word	0xe000ed08

08008940 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b086      	sub	sp, #24
 8008944:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008946:	4b47      	ldr	r3, [pc, #284]	@ (8008a64 <xPortStartScheduler+0x124>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4a47      	ldr	r2, [pc, #284]	@ (8008a68 <xPortStartScheduler+0x128>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d10b      	bne.n	8008968 <xPortStartScheduler+0x28>
	__asm volatile
 8008950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008954:	f383 8811 	msr	BASEPRI, r3
 8008958:	f3bf 8f6f 	isb	sy
 800895c:	f3bf 8f4f 	dsb	sy
 8008960:	613b      	str	r3, [r7, #16]
}
 8008962:	bf00      	nop
 8008964:	bf00      	nop
 8008966:	e7fd      	b.n	8008964 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008968:	4b3e      	ldr	r3, [pc, #248]	@ (8008a64 <xPortStartScheduler+0x124>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a3f      	ldr	r2, [pc, #252]	@ (8008a6c <xPortStartScheduler+0x12c>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d10b      	bne.n	800898a <xPortStartScheduler+0x4a>
	__asm volatile
 8008972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008976:	f383 8811 	msr	BASEPRI, r3
 800897a:	f3bf 8f6f 	isb	sy
 800897e:	f3bf 8f4f 	dsb	sy
 8008982:	60fb      	str	r3, [r7, #12]
}
 8008984:	bf00      	nop
 8008986:	bf00      	nop
 8008988:	e7fd      	b.n	8008986 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800898a:	4b39      	ldr	r3, [pc, #228]	@ (8008a70 <xPortStartScheduler+0x130>)
 800898c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	b2db      	uxtb	r3, r3
 8008994:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	22ff      	movs	r2, #255	@ 0xff
 800899a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	781b      	ldrb	r3, [r3, #0]
 80089a0:	b2db      	uxtb	r3, r3
 80089a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80089a4:	78fb      	ldrb	r3, [r7, #3]
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80089ac:	b2da      	uxtb	r2, r3
 80089ae:	4b31      	ldr	r3, [pc, #196]	@ (8008a74 <xPortStartScheduler+0x134>)
 80089b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80089b2:	4b31      	ldr	r3, [pc, #196]	@ (8008a78 <xPortStartScheduler+0x138>)
 80089b4:	2207      	movs	r2, #7
 80089b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80089b8:	e009      	b.n	80089ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80089ba:	4b2f      	ldr	r3, [pc, #188]	@ (8008a78 <xPortStartScheduler+0x138>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	3b01      	subs	r3, #1
 80089c0:	4a2d      	ldr	r2, [pc, #180]	@ (8008a78 <xPortStartScheduler+0x138>)
 80089c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80089c4:	78fb      	ldrb	r3, [r7, #3]
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	005b      	lsls	r3, r3, #1
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80089ce:	78fb      	ldrb	r3, [r7, #3]
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089d6:	2b80      	cmp	r3, #128	@ 0x80
 80089d8:	d0ef      	beq.n	80089ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80089da:	4b27      	ldr	r3, [pc, #156]	@ (8008a78 <xPortStartScheduler+0x138>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f1c3 0307 	rsb	r3, r3, #7
 80089e2:	2b04      	cmp	r3, #4
 80089e4:	d00b      	beq.n	80089fe <xPortStartScheduler+0xbe>
	__asm volatile
 80089e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089ea:	f383 8811 	msr	BASEPRI, r3
 80089ee:	f3bf 8f6f 	isb	sy
 80089f2:	f3bf 8f4f 	dsb	sy
 80089f6:	60bb      	str	r3, [r7, #8]
}
 80089f8:	bf00      	nop
 80089fa:	bf00      	nop
 80089fc:	e7fd      	b.n	80089fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80089fe:	4b1e      	ldr	r3, [pc, #120]	@ (8008a78 <xPortStartScheduler+0x138>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	021b      	lsls	r3, r3, #8
 8008a04:	4a1c      	ldr	r2, [pc, #112]	@ (8008a78 <xPortStartScheduler+0x138>)
 8008a06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008a08:	4b1b      	ldr	r3, [pc, #108]	@ (8008a78 <xPortStartScheduler+0x138>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008a10:	4a19      	ldr	r2, [pc, #100]	@ (8008a78 <xPortStartScheduler+0x138>)
 8008a12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	b2da      	uxtb	r2, r3
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008a1c:	4b17      	ldr	r3, [pc, #92]	@ (8008a7c <xPortStartScheduler+0x13c>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a16      	ldr	r2, [pc, #88]	@ (8008a7c <xPortStartScheduler+0x13c>)
 8008a22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008a26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008a28:	4b14      	ldr	r3, [pc, #80]	@ (8008a7c <xPortStartScheduler+0x13c>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a13      	ldr	r2, [pc, #76]	@ (8008a7c <xPortStartScheduler+0x13c>)
 8008a2e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008a32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008a34:	f000 f8da 	bl	8008bec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008a38:	4b11      	ldr	r3, [pc, #68]	@ (8008a80 <xPortStartScheduler+0x140>)
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008a3e:	f000 f8f9 	bl	8008c34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008a42:	4b10      	ldr	r3, [pc, #64]	@ (8008a84 <xPortStartScheduler+0x144>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4a0f      	ldr	r2, [pc, #60]	@ (8008a84 <xPortStartScheduler+0x144>)
 8008a48:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008a4c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008a4e:	f7ff ff63 	bl	8008918 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008a52:	f7fe ff0d 	bl	8007870 <vTaskSwitchContext>
	prvTaskExitError();
 8008a56:	f7ff ff17 	bl	8008888 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008a5a:	2300      	movs	r3, #0
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3718      	adds	r7, #24
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}
 8008a64:	e000ed00 	.word	0xe000ed00
 8008a68:	410fc271 	.word	0x410fc271
 8008a6c:	410fc270 	.word	0x410fc270
 8008a70:	e000e400 	.word	0xe000e400
 8008a74:	24002254 	.word	0x24002254
 8008a78:	24002258 	.word	0x24002258
 8008a7c:	e000ed20 	.word	0xe000ed20
 8008a80:	24000024 	.word	0x24000024
 8008a84:	e000ef34 	.word	0xe000ef34

08008a88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b083      	sub	sp, #12
 8008a8c:	af00      	add	r7, sp, #0
	__asm volatile
 8008a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a92:	f383 8811 	msr	BASEPRI, r3
 8008a96:	f3bf 8f6f 	isb	sy
 8008a9a:	f3bf 8f4f 	dsb	sy
 8008a9e:	607b      	str	r3, [r7, #4]
}
 8008aa0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008aa2:	4b10      	ldr	r3, [pc, #64]	@ (8008ae4 <vPortEnterCritical+0x5c>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	3301      	adds	r3, #1
 8008aa8:	4a0e      	ldr	r2, [pc, #56]	@ (8008ae4 <vPortEnterCritical+0x5c>)
 8008aaa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008aac:	4b0d      	ldr	r3, [pc, #52]	@ (8008ae4 <vPortEnterCritical+0x5c>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d110      	bne.n	8008ad6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8008ae8 <vPortEnterCritical+0x60>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	b2db      	uxtb	r3, r3
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d00b      	beq.n	8008ad6 <vPortEnterCritical+0x4e>
	__asm volatile
 8008abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ac2:	f383 8811 	msr	BASEPRI, r3
 8008ac6:	f3bf 8f6f 	isb	sy
 8008aca:	f3bf 8f4f 	dsb	sy
 8008ace:	603b      	str	r3, [r7, #0]
}
 8008ad0:	bf00      	nop
 8008ad2:	bf00      	nop
 8008ad4:	e7fd      	b.n	8008ad2 <vPortEnterCritical+0x4a>
	}
}
 8008ad6:	bf00      	nop
 8008ad8:	370c      	adds	r7, #12
 8008ada:	46bd      	mov	sp, r7
 8008adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae0:	4770      	bx	lr
 8008ae2:	bf00      	nop
 8008ae4:	24000024 	.word	0x24000024
 8008ae8:	e000ed04 	.word	0xe000ed04

08008aec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008aec:	b480      	push	{r7}
 8008aee:	b083      	sub	sp, #12
 8008af0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008af2:	4b12      	ldr	r3, [pc, #72]	@ (8008b3c <vPortExitCritical+0x50>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d10b      	bne.n	8008b12 <vPortExitCritical+0x26>
	__asm volatile
 8008afa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008afe:	f383 8811 	msr	BASEPRI, r3
 8008b02:	f3bf 8f6f 	isb	sy
 8008b06:	f3bf 8f4f 	dsb	sy
 8008b0a:	607b      	str	r3, [r7, #4]
}
 8008b0c:	bf00      	nop
 8008b0e:	bf00      	nop
 8008b10:	e7fd      	b.n	8008b0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008b12:	4b0a      	ldr	r3, [pc, #40]	@ (8008b3c <vPortExitCritical+0x50>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	3b01      	subs	r3, #1
 8008b18:	4a08      	ldr	r2, [pc, #32]	@ (8008b3c <vPortExitCritical+0x50>)
 8008b1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008b1c:	4b07      	ldr	r3, [pc, #28]	@ (8008b3c <vPortExitCritical+0x50>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d105      	bne.n	8008b30 <vPortExitCritical+0x44>
 8008b24:	2300      	movs	r3, #0
 8008b26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	f383 8811 	msr	BASEPRI, r3
}
 8008b2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008b30:	bf00      	nop
 8008b32:	370c      	adds	r7, #12
 8008b34:	46bd      	mov	sp, r7
 8008b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3a:	4770      	bx	lr
 8008b3c:	24000024 	.word	0x24000024

08008b40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008b40:	f3ef 8009 	mrs	r0, PSP
 8008b44:	f3bf 8f6f 	isb	sy
 8008b48:	4b15      	ldr	r3, [pc, #84]	@ (8008ba0 <pxCurrentTCBConst>)
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	f01e 0f10 	tst.w	lr, #16
 8008b50:	bf08      	it	eq
 8008b52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008b56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b5a:	6010      	str	r0, [r2, #0]
 8008b5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008b60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008b64:	f380 8811 	msr	BASEPRI, r0
 8008b68:	f3bf 8f4f 	dsb	sy
 8008b6c:	f3bf 8f6f 	isb	sy
 8008b70:	f7fe fe7e 	bl	8007870 <vTaskSwitchContext>
 8008b74:	f04f 0000 	mov.w	r0, #0
 8008b78:	f380 8811 	msr	BASEPRI, r0
 8008b7c:	bc09      	pop	{r0, r3}
 8008b7e:	6819      	ldr	r1, [r3, #0]
 8008b80:	6808      	ldr	r0, [r1, #0]
 8008b82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b86:	f01e 0f10 	tst.w	lr, #16
 8008b8a:	bf08      	it	eq
 8008b8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008b90:	f380 8809 	msr	PSP, r0
 8008b94:	f3bf 8f6f 	isb	sy
 8008b98:	4770      	bx	lr
 8008b9a:	bf00      	nop
 8008b9c:	f3af 8000 	nop.w

08008ba0 <pxCurrentTCBConst>:
 8008ba0:	24001c28 	.word	0x24001c28
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008ba4:	bf00      	nop
 8008ba6:	bf00      	nop

08008ba8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b082      	sub	sp, #8
 8008bac:	af00      	add	r7, sp, #0
	__asm volatile
 8008bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bb2:	f383 8811 	msr	BASEPRI, r3
 8008bb6:	f3bf 8f6f 	isb	sy
 8008bba:	f3bf 8f4f 	dsb	sy
 8008bbe:	607b      	str	r3, [r7, #4]
}
 8008bc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008bc2:	f7fe fd9b 	bl	80076fc <xTaskIncrementTick>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d003      	beq.n	8008bd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008bcc:	4b06      	ldr	r3, [pc, #24]	@ (8008be8 <xPortSysTickHandler+0x40>)
 8008bce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bd2:	601a      	str	r2, [r3, #0]
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	f383 8811 	msr	BASEPRI, r3
}
 8008bde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008be0:	bf00      	nop
 8008be2:	3708      	adds	r7, #8
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}
 8008be8:	e000ed04 	.word	0xe000ed04

08008bec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008bec:	b480      	push	{r7}
 8008bee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8008c20 <vPortSetupTimerInterrupt+0x34>)
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8008c24 <vPortSetupTimerInterrupt+0x38>)
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8008c28 <vPortSetupTimerInterrupt+0x3c>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4a0a      	ldr	r2, [pc, #40]	@ (8008c2c <vPortSetupTimerInterrupt+0x40>)
 8008c02:	fba2 2303 	umull	r2, r3, r2, r3
 8008c06:	099b      	lsrs	r3, r3, #6
 8008c08:	4a09      	ldr	r2, [pc, #36]	@ (8008c30 <vPortSetupTimerInterrupt+0x44>)
 8008c0a:	3b01      	subs	r3, #1
 8008c0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008c0e:	4b04      	ldr	r3, [pc, #16]	@ (8008c20 <vPortSetupTimerInterrupt+0x34>)
 8008c10:	2207      	movs	r2, #7
 8008c12:	601a      	str	r2, [r3, #0]
}
 8008c14:	bf00      	nop
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr
 8008c1e:	bf00      	nop
 8008c20:	e000e010 	.word	0xe000e010
 8008c24:	e000e018 	.word	0xe000e018
 8008c28:	24000000 	.word	0x24000000
 8008c2c:	10624dd3 	.word	0x10624dd3
 8008c30:	e000e014 	.word	0xe000e014

08008c34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008c34:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008c44 <vPortEnableVFP+0x10>
 8008c38:	6801      	ldr	r1, [r0, #0]
 8008c3a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008c3e:	6001      	str	r1, [r0, #0]
 8008c40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008c42:	bf00      	nop
 8008c44:	e000ed88 	.word	0xe000ed88

08008c48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008c48:	b480      	push	{r7}
 8008c4a:	b085      	sub	sp, #20
 8008c4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008c4e:	f3ef 8305 	mrs	r3, IPSR
 8008c52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2b0f      	cmp	r3, #15
 8008c58:	d915      	bls.n	8008c86 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008c5a:	4a18      	ldr	r2, [pc, #96]	@ (8008cbc <vPortValidateInterruptPriority+0x74>)
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	4413      	add	r3, r2
 8008c60:	781b      	ldrb	r3, [r3, #0]
 8008c62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008c64:	4b16      	ldr	r3, [pc, #88]	@ (8008cc0 <vPortValidateInterruptPriority+0x78>)
 8008c66:	781b      	ldrb	r3, [r3, #0]
 8008c68:	7afa      	ldrb	r2, [r7, #11]
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d20b      	bcs.n	8008c86 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c72:	f383 8811 	msr	BASEPRI, r3
 8008c76:	f3bf 8f6f 	isb	sy
 8008c7a:	f3bf 8f4f 	dsb	sy
 8008c7e:	607b      	str	r3, [r7, #4]
}
 8008c80:	bf00      	nop
 8008c82:	bf00      	nop
 8008c84:	e7fd      	b.n	8008c82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008c86:	4b0f      	ldr	r3, [pc, #60]	@ (8008cc4 <vPortValidateInterruptPriority+0x7c>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8008cc8 <vPortValidateInterruptPriority+0x80>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d90b      	bls.n	8008cae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c9a:	f383 8811 	msr	BASEPRI, r3
 8008c9e:	f3bf 8f6f 	isb	sy
 8008ca2:	f3bf 8f4f 	dsb	sy
 8008ca6:	603b      	str	r3, [r7, #0]
}
 8008ca8:	bf00      	nop
 8008caa:	bf00      	nop
 8008cac:	e7fd      	b.n	8008caa <vPortValidateInterruptPriority+0x62>
	}
 8008cae:	bf00      	nop
 8008cb0:	3714      	adds	r7, #20
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb8:	4770      	bx	lr
 8008cba:	bf00      	nop
 8008cbc:	e000e3f0 	.word	0xe000e3f0
 8008cc0:	24002254 	.word	0x24002254
 8008cc4:	e000ed0c 	.word	0xe000ed0c
 8008cc8:	24002258 	.word	0x24002258

08008ccc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b08a      	sub	sp, #40	@ 0x28
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008cd8:	f7fe fc42 	bl	8007560 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008cdc:	4b5c      	ldr	r3, [pc, #368]	@ (8008e50 <pvPortMalloc+0x184>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d101      	bne.n	8008ce8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008ce4:	f000 f924 	bl	8008f30 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008ce8:	4b5a      	ldr	r3, [pc, #360]	@ (8008e54 <pvPortMalloc+0x188>)
 8008cea:	681a      	ldr	r2, [r3, #0]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	4013      	ands	r3, r2
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	f040 8095 	bne.w	8008e20 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d01e      	beq.n	8008d3a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008cfc:	2208      	movs	r2, #8
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	4413      	add	r3, r2
 8008d02:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f003 0307 	and.w	r3, r3, #7
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d015      	beq.n	8008d3a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f023 0307 	bic.w	r3, r3, #7
 8008d14:	3308      	adds	r3, #8
 8008d16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f003 0307 	and.w	r3, r3, #7
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d00b      	beq.n	8008d3a <pvPortMalloc+0x6e>
	__asm volatile
 8008d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d26:	f383 8811 	msr	BASEPRI, r3
 8008d2a:	f3bf 8f6f 	isb	sy
 8008d2e:	f3bf 8f4f 	dsb	sy
 8008d32:	617b      	str	r3, [r7, #20]
}
 8008d34:	bf00      	nop
 8008d36:	bf00      	nop
 8008d38:	e7fd      	b.n	8008d36 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d06f      	beq.n	8008e20 <pvPortMalloc+0x154>
 8008d40:	4b45      	ldr	r3, [pc, #276]	@ (8008e58 <pvPortMalloc+0x18c>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	687a      	ldr	r2, [r7, #4]
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d86a      	bhi.n	8008e20 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008d4a:	4b44      	ldr	r3, [pc, #272]	@ (8008e5c <pvPortMalloc+0x190>)
 8008d4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008d4e:	4b43      	ldr	r3, [pc, #268]	@ (8008e5c <pvPortMalloc+0x190>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d54:	e004      	b.n	8008d60 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	687a      	ldr	r2, [r7, #4]
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d903      	bls.n	8008d72 <pvPortMalloc+0xa6>
 8008d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d1f1      	bne.n	8008d56 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008d72:	4b37      	ldr	r3, [pc, #220]	@ (8008e50 <pvPortMalloc+0x184>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d051      	beq.n	8008e20 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008d7c:	6a3b      	ldr	r3, [r7, #32]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	2208      	movs	r2, #8
 8008d82:	4413      	add	r3, r2
 8008d84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d88:	681a      	ldr	r2, [r3, #0]
 8008d8a:	6a3b      	ldr	r3, [r7, #32]
 8008d8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d90:	685a      	ldr	r2, [r3, #4]
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	1ad2      	subs	r2, r2, r3
 8008d96:	2308      	movs	r3, #8
 8008d98:	005b      	lsls	r3, r3, #1
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d920      	bls.n	8008de0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008d9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	4413      	add	r3, r2
 8008da4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008da6:	69bb      	ldr	r3, [r7, #24]
 8008da8:	f003 0307 	and.w	r3, r3, #7
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d00b      	beq.n	8008dc8 <pvPortMalloc+0xfc>
	__asm volatile
 8008db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008db4:	f383 8811 	msr	BASEPRI, r3
 8008db8:	f3bf 8f6f 	isb	sy
 8008dbc:	f3bf 8f4f 	dsb	sy
 8008dc0:	613b      	str	r3, [r7, #16]
}
 8008dc2:	bf00      	nop
 8008dc4:	bf00      	nop
 8008dc6:	e7fd      	b.n	8008dc4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dca:	685a      	ldr	r2, [r3, #4]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	1ad2      	subs	r2, r2, r3
 8008dd0:	69bb      	ldr	r3, [r7, #24]
 8008dd2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dd6:	687a      	ldr	r2, [r7, #4]
 8008dd8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008dda:	69b8      	ldr	r0, [r7, #24]
 8008ddc:	f000 f90a 	bl	8008ff4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008de0:	4b1d      	ldr	r3, [pc, #116]	@ (8008e58 <pvPortMalloc+0x18c>)
 8008de2:	681a      	ldr	r2, [r3, #0]
 8008de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008de6:	685b      	ldr	r3, [r3, #4]
 8008de8:	1ad3      	subs	r3, r2, r3
 8008dea:	4a1b      	ldr	r2, [pc, #108]	@ (8008e58 <pvPortMalloc+0x18c>)
 8008dec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008dee:	4b1a      	ldr	r3, [pc, #104]	@ (8008e58 <pvPortMalloc+0x18c>)
 8008df0:	681a      	ldr	r2, [r3, #0]
 8008df2:	4b1b      	ldr	r3, [pc, #108]	@ (8008e60 <pvPortMalloc+0x194>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d203      	bcs.n	8008e02 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008dfa:	4b17      	ldr	r3, [pc, #92]	@ (8008e58 <pvPortMalloc+0x18c>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4a18      	ldr	r2, [pc, #96]	@ (8008e60 <pvPortMalloc+0x194>)
 8008e00:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e04:	685a      	ldr	r2, [r3, #4]
 8008e06:	4b13      	ldr	r3, [pc, #76]	@ (8008e54 <pvPortMalloc+0x188>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	431a      	orrs	r2, r3
 8008e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e0e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e12:	2200      	movs	r2, #0
 8008e14:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008e16:	4b13      	ldr	r3, [pc, #76]	@ (8008e64 <pvPortMalloc+0x198>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	3301      	adds	r3, #1
 8008e1c:	4a11      	ldr	r2, [pc, #68]	@ (8008e64 <pvPortMalloc+0x198>)
 8008e1e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008e20:	f7fe fbac 	bl	800757c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e24:	69fb      	ldr	r3, [r7, #28]
 8008e26:	f003 0307 	and.w	r3, r3, #7
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d00b      	beq.n	8008e46 <pvPortMalloc+0x17a>
	__asm volatile
 8008e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e32:	f383 8811 	msr	BASEPRI, r3
 8008e36:	f3bf 8f6f 	isb	sy
 8008e3a:	f3bf 8f4f 	dsb	sy
 8008e3e:	60fb      	str	r3, [r7, #12]
}
 8008e40:	bf00      	nop
 8008e42:	bf00      	nop
 8008e44:	e7fd      	b.n	8008e42 <pvPortMalloc+0x176>
	return pvReturn;
 8008e46:	69fb      	ldr	r3, [r7, #28]
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3728      	adds	r7, #40	@ 0x28
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}
 8008e50:	24009a64 	.word	0x24009a64
 8008e54:	24009a78 	.word	0x24009a78
 8008e58:	24009a68 	.word	0x24009a68
 8008e5c:	24009a5c 	.word	0x24009a5c
 8008e60:	24009a6c 	.word	0x24009a6c
 8008e64:	24009a70 	.word	0x24009a70

08008e68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b086      	sub	sp, #24
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d04f      	beq.n	8008f1a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008e7a:	2308      	movs	r3, #8
 8008e7c:	425b      	negs	r3, r3
 8008e7e:	697a      	ldr	r2, [r7, #20]
 8008e80:	4413      	add	r3, r2
 8008e82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	685a      	ldr	r2, [r3, #4]
 8008e8c:	4b25      	ldr	r3, [pc, #148]	@ (8008f24 <vPortFree+0xbc>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4013      	ands	r3, r2
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d10b      	bne.n	8008eae <vPortFree+0x46>
	__asm volatile
 8008e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e9a:	f383 8811 	msr	BASEPRI, r3
 8008e9e:	f3bf 8f6f 	isb	sy
 8008ea2:	f3bf 8f4f 	dsb	sy
 8008ea6:	60fb      	str	r3, [r7, #12]
}
 8008ea8:	bf00      	nop
 8008eaa:	bf00      	nop
 8008eac:	e7fd      	b.n	8008eaa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d00b      	beq.n	8008ece <vPortFree+0x66>
	__asm volatile
 8008eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eba:	f383 8811 	msr	BASEPRI, r3
 8008ebe:	f3bf 8f6f 	isb	sy
 8008ec2:	f3bf 8f4f 	dsb	sy
 8008ec6:	60bb      	str	r3, [r7, #8]
}
 8008ec8:	bf00      	nop
 8008eca:	bf00      	nop
 8008ecc:	e7fd      	b.n	8008eca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	685a      	ldr	r2, [r3, #4]
 8008ed2:	4b14      	ldr	r3, [pc, #80]	@ (8008f24 <vPortFree+0xbc>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4013      	ands	r3, r2
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d01e      	beq.n	8008f1a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d11a      	bne.n	8008f1a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	685a      	ldr	r2, [r3, #4]
 8008ee8:	4b0e      	ldr	r3, [pc, #56]	@ (8008f24 <vPortFree+0xbc>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	43db      	mvns	r3, r3
 8008eee:	401a      	ands	r2, r3
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008ef4:	f7fe fb34 	bl	8007560 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	685a      	ldr	r2, [r3, #4]
 8008efc:	4b0a      	ldr	r3, [pc, #40]	@ (8008f28 <vPortFree+0xc0>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4413      	add	r3, r2
 8008f02:	4a09      	ldr	r2, [pc, #36]	@ (8008f28 <vPortFree+0xc0>)
 8008f04:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008f06:	6938      	ldr	r0, [r7, #16]
 8008f08:	f000 f874 	bl	8008ff4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008f0c:	4b07      	ldr	r3, [pc, #28]	@ (8008f2c <vPortFree+0xc4>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	3301      	adds	r3, #1
 8008f12:	4a06      	ldr	r2, [pc, #24]	@ (8008f2c <vPortFree+0xc4>)
 8008f14:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008f16:	f7fe fb31 	bl	800757c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008f1a:	bf00      	nop
 8008f1c:	3718      	adds	r7, #24
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}
 8008f22:	bf00      	nop
 8008f24:	24009a78 	.word	0x24009a78
 8008f28:	24009a68 	.word	0x24009a68
 8008f2c:	24009a74 	.word	0x24009a74

08008f30 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008f30:	b480      	push	{r7}
 8008f32:	b085      	sub	sp, #20
 8008f34:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008f36:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 8008f3a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008f3c:	4b27      	ldr	r3, [pc, #156]	@ (8008fdc <prvHeapInit+0xac>)
 8008f3e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f003 0307 	and.w	r3, r3, #7
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d00c      	beq.n	8008f64 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	3307      	adds	r3, #7
 8008f4e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f023 0307 	bic.w	r3, r3, #7
 8008f56:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008f58:	68ba      	ldr	r2, [r7, #8]
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	1ad3      	subs	r3, r2, r3
 8008f5e:	4a1f      	ldr	r2, [pc, #124]	@ (8008fdc <prvHeapInit+0xac>)
 8008f60:	4413      	add	r3, r2
 8008f62:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008f68:	4a1d      	ldr	r2, [pc, #116]	@ (8008fe0 <prvHeapInit+0xb0>)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008f6e:	4b1c      	ldr	r3, [pc, #112]	@ (8008fe0 <prvHeapInit+0xb0>)
 8008f70:	2200      	movs	r2, #0
 8008f72:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	68ba      	ldr	r2, [r7, #8]
 8008f78:	4413      	add	r3, r2
 8008f7a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008f7c:	2208      	movs	r2, #8
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	1a9b      	subs	r3, r3, r2
 8008f82:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	f023 0307 	bic.w	r3, r3, #7
 8008f8a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	4a15      	ldr	r2, [pc, #84]	@ (8008fe4 <prvHeapInit+0xb4>)
 8008f90:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008f92:	4b14      	ldr	r3, [pc, #80]	@ (8008fe4 <prvHeapInit+0xb4>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	2200      	movs	r2, #0
 8008f98:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008f9a:	4b12      	ldr	r3, [pc, #72]	@ (8008fe4 <prvHeapInit+0xb4>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	68fa      	ldr	r2, [r7, #12]
 8008faa:	1ad2      	subs	r2, r2, r3
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8008fe4 <prvHeapInit+0xb4>)
 8008fb2:	681a      	ldr	r2, [r3, #0]
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	4a0a      	ldr	r2, [pc, #40]	@ (8008fe8 <prvHeapInit+0xb8>)
 8008fbe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	4a09      	ldr	r2, [pc, #36]	@ (8008fec <prvHeapInit+0xbc>)
 8008fc6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008fc8:	4b09      	ldr	r3, [pc, #36]	@ (8008ff0 <prvHeapInit+0xc0>)
 8008fca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008fce:	601a      	str	r2, [r3, #0]
}
 8008fd0:	bf00      	nop
 8008fd2:	3714      	adds	r7, #20
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr
 8008fdc:	2400225c 	.word	0x2400225c
 8008fe0:	24009a5c 	.word	0x24009a5c
 8008fe4:	24009a64 	.word	0x24009a64
 8008fe8:	24009a6c 	.word	0x24009a6c
 8008fec:	24009a68 	.word	0x24009a68
 8008ff0:	24009a78 	.word	0x24009a78

08008ff4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b085      	sub	sp, #20
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008ffc:	4b28      	ldr	r3, [pc, #160]	@ (80090a0 <prvInsertBlockIntoFreeList+0xac>)
 8008ffe:	60fb      	str	r3, [r7, #12]
 8009000:	e002      	b.n	8009008 <prvInsertBlockIntoFreeList+0x14>
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	60fb      	str	r3, [r7, #12]
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	429a      	cmp	r2, r3
 8009010:	d8f7      	bhi.n	8009002 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	685b      	ldr	r3, [r3, #4]
 800901a:	68ba      	ldr	r2, [r7, #8]
 800901c:	4413      	add	r3, r2
 800901e:	687a      	ldr	r2, [r7, #4]
 8009020:	429a      	cmp	r2, r3
 8009022:	d108      	bne.n	8009036 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	685a      	ldr	r2, [r3, #4]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	441a      	add	r2, r3
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	68ba      	ldr	r2, [r7, #8]
 8009040:	441a      	add	r2, r3
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	429a      	cmp	r2, r3
 8009048:	d118      	bne.n	800907c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681a      	ldr	r2, [r3, #0]
 800904e:	4b15      	ldr	r3, [pc, #84]	@ (80090a4 <prvInsertBlockIntoFreeList+0xb0>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	429a      	cmp	r2, r3
 8009054:	d00d      	beq.n	8009072 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	685a      	ldr	r2, [r3, #4]
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	441a      	add	r2, r3
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	681a      	ldr	r2, [r3, #0]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	601a      	str	r2, [r3, #0]
 8009070:	e008      	b.n	8009084 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009072:	4b0c      	ldr	r3, [pc, #48]	@ (80090a4 <prvInsertBlockIntoFreeList+0xb0>)
 8009074:	681a      	ldr	r2, [r3, #0]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	601a      	str	r2, [r3, #0]
 800907a:	e003      	b.n	8009084 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681a      	ldr	r2, [r3, #0]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009084:	68fa      	ldr	r2, [r7, #12]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	429a      	cmp	r2, r3
 800908a:	d002      	beq.n	8009092 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	687a      	ldr	r2, [r7, #4]
 8009090:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009092:	bf00      	nop
 8009094:	3714      	adds	r7, #20
 8009096:	46bd      	mov	sp, r7
 8009098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909c:	4770      	bx	lr
 800909e:	bf00      	nop
 80090a0:	24009a5c 	.word	0x24009a5c
 80090a4:	24009a64 	.word	0x24009a64

080090a8 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b084      	sub	sp, #16
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();
 80090b2:	f7fc f921 	bl	80052f8 <sys_check_core_locking>

  sleeptime = sys_timeouts_sleeptime();
 80090b6:	f007 fbab 	bl	8010810 <sys_timeouts_sleeptime>
 80090ba:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090c2:	d109      	bne.n	80090d8 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 80090c4:	f7fc f90a 	bl	80052dc <sys_unlock_tcpip_core>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80090c8:	2200      	movs	r2, #0
 80090ca:	6839      	ldr	r1, [r7, #0]
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f00a f8c1 	bl	8013254 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80090d2:	f7fc f8f3 	bl	80052bc <sys_lock_tcpip_core>
    return;
 80090d6:	e016      	b.n	8009106 <tcpip_timeouts_mbox_fetch+0x5e>
  } else if (sleeptime == 0) {
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d102      	bne.n	80090e4 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 80090de:	f007 fb5b 	bl	8010798 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80090e2:	e7e6      	b.n	80090b2 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 80090e4:	f7fc f8fa 	bl	80052dc <sys_unlock_tcpip_core>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80090e8:	68fa      	ldr	r2, [r7, #12]
 80090ea:	6839      	ldr	r1, [r7, #0]
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f00a f8b1 	bl	8013254 <sys_arch_mbox_fetch>
 80090f2:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 80090f4:	f7fc f8e2 	bl	80052bc <sys_lock_tcpip_core>
  if (res == SYS_ARCH_TIMEOUT) {
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090fe:	d102      	bne.n	8009106 <tcpip_timeouts_mbox_fetch+0x5e>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8009100:	f007 fb4a 	bl	8010798 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009104:	e7d5      	b.n	80090b2 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8009106:	3710      	adds	r7, #16
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}

0800910c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b084      	sub	sp, #16
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();
 8009114:	f7fc f92c 	bl	8005370 <sys_mark_tcpip_thread>

  LOCK_TCPIP_CORE();
 8009118:	f7fc f8d0 	bl	80052bc <sys_lock_tcpip_core>
  if (tcpip_init_done != NULL) {
 800911c:	4b0f      	ldr	r3, [pc, #60]	@ (800915c <tcpip_thread+0x50>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d005      	beq.n	8009130 <tcpip_thread+0x24>
    tcpip_init_done(tcpip_init_done_arg);
 8009124:	4b0d      	ldr	r3, [pc, #52]	@ (800915c <tcpip_thread+0x50>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4a0d      	ldr	r2, [pc, #52]	@ (8009160 <tcpip_thread+0x54>)
 800912a:	6812      	ldr	r2, [r2, #0]
 800912c:	4610      	mov	r0, r2
 800912e:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009130:	f107 030c 	add.w	r3, r7, #12
 8009134:	4619      	mov	r1, r3
 8009136:	480b      	ldr	r0, [pc, #44]	@ (8009164 <tcpip_thread+0x58>)
 8009138:	f7ff ffb6 	bl	80090a8 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d106      	bne.n	8009150 <tcpip_thread+0x44>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009142:	4b09      	ldr	r3, [pc, #36]	@ (8009168 <tcpip_thread+0x5c>)
 8009144:	2291      	movs	r2, #145	@ 0x91
 8009146:	4909      	ldr	r1, [pc, #36]	@ (800916c <tcpip_thread+0x60>)
 8009148:	4809      	ldr	r0, [pc, #36]	@ (8009170 <tcpip_thread+0x64>)
 800914a:	f00a fa41 	bl	80135d0 <iprintf>
      continue;
 800914e:	e003      	b.n	8009158 <tcpip_thread+0x4c>
    }
    tcpip_thread_handle_msg(msg);
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	4618      	mov	r0, r3
 8009154:	f000 f80e 	bl	8009174 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009158:	e7ea      	b.n	8009130 <tcpip_thread+0x24>
 800915a:	bf00      	nop
 800915c:	24009a7c 	.word	0x24009a7c
 8009160:	24009a80 	.word	0x24009a80
 8009164:	24009a84 	.word	0x24009a84
 8009168:	0801457c 	.word	0x0801457c
 800916c:	080145ac 	.word	0x080145ac
 8009170:	080145cc 	.word	0x080145cc

08009174 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b082      	sub	sp, #8
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	781b      	ldrb	r3, [r3, #0]
 8009180:	2b02      	cmp	r3, #2
 8009182:	d026      	beq.n	80091d2 <tcpip_thread_handle_msg+0x5e>
 8009184:	2b02      	cmp	r3, #2
 8009186:	dc2b      	bgt.n	80091e0 <tcpip_thread_handle_msg+0x6c>
 8009188:	2b00      	cmp	r3, #0
 800918a:	d002      	beq.n	8009192 <tcpip_thread_handle_msg+0x1e>
 800918c:	2b01      	cmp	r3, #1
 800918e:	d015      	beq.n	80091bc <tcpip_thread_handle_msg+0x48>
 8009190:	e026      	b.n	80091e0 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	68db      	ldr	r3, [r3, #12]
 8009196:	687a      	ldr	r2, [r7, #4]
 8009198:	6850      	ldr	r0, [r2, #4]
 800919a:	687a      	ldr	r2, [r7, #4]
 800919c:	6892      	ldr	r2, [r2, #8]
 800919e:	4611      	mov	r1, r2
 80091a0:	4798      	blx	r3
 80091a2:	4603      	mov	r3, r0
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d004      	beq.n	80091b2 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	685b      	ldr	r3, [r3, #4]
 80091ac:	4618      	mov	r0, r3
 80091ae:	f001 fde3 	bl	800ad78 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80091b2:	6879      	ldr	r1, [r7, #4]
 80091b4:	2009      	movs	r0, #9
 80091b6:	f000 ff2b 	bl	800a010 <memp_free>
      break;
 80091ba:	e018      	b.n	80091ee <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	685b      	ldr	r3, [r3, #4]
 80091c0:	687a      	ldr	r2, [r7, #4]
 80091c2:	6892      	ldr	r2, [r2, #8]
 80091c4:	4610      	mov	r0, r2
 80091c6:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80091c8:	6879      	ldr	r1, [r7, #4]
 80091ca:	2008      	movs	r0, #8
 80091cc:	f000 ff20 	bl	800a010 <memp_free>
      break;
 80091d0:	e00d      	b.n	80091ee <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	685b      	ldr	r3, [r3, #4]
 80091d6:	687a      	ldr	r2, [r7, #4]
 80091d8:	6892      	ldr	r2, [r2, #8]
 80091da:	4610      	mov	r0, r2
 80091dc:	4798      	blx	r3
      break;
 80091de:	e006      	b.n	80091ee <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80091e0:	4b05      	ldr	r3, [pc, #20]	@ (80091f8 <tcpip_thread_handle_msg+0x84>)
 80091e2:	22cf      	movs	r2, #207	@ 0xcf
 80091e4:	4905      	ldr	r1, [pc, #20]	@ (80091fc <tcpip_thread_handle_msg+0x88>)
 80091e6:	4806      	ldr	r0, [pc, #24]	@ (8009200 <tcpip_thread_handle_msg+0x8c>)
 80091e8:	f00a f9f2 	bl	80135d0 <iprintf>
      break;
 80091ec:	bf00      	nop
  }
}
 80091ee:	bf00      	nop
 80091f0:	3708      	adds	r7, #8
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
 80091f6:	bf00      	nop
 80091f8:	0801457c 	.word	0x0801457c
 80091fc:	080145ac 	.word	0x080145ac
 8009200:	080145cc 	.word	0x080145cc

08009204 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b086      	sub	sp, #24
 8009208:	af00      	add	r7, sp, #0
 800920a:	60f8      	str	r0, [r7, #12]
 800920c:	60b9      	str	r1, [r7, #8]
 800920e:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009210:	481a      	ldr	r0, [pc, #104]	@ (800927c <tcpip_inpkt+0x78>)
 8009212:	f00a f850 	bl	80132b6 <sys_mbox_valid>
 8009216:	4603      	mov	r3, r0
 8009218:	2b00      	cmp	r3, #0
 800921a:	d105      	bne.n	8009228 <tcpip_inpkt+0x24>
 800921c:	4b18      	ldr	r3, [pc, #96]	@ (8009280 <tcpip_inpkt+0x7c>)
 800921e:	22fc      	movs	r2, #252	@ 0xfc
 8009220:	4918      	ldr	r1, [pc, #96]	@ (8009284 <tcpip_inpkt+0x80>)
 8009222:	4819      	ldr	r0, [pc, #100]	@ (8009288 <tcpip_inpkt+0x84>)
 8009224:	f00a f9d4 	bl	80135d0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8009228:	2009      	movs	r0, #9
 800922a:	f000 fe7b 	bl	8009f24 <memp_malloc>
 800922e:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d102      	bne.n	800923c <tcpip_inpkt+0x38>
    return ERR_MEM;
 8009236:	f04f 33ff 	mov.w	r3, #4294967295
 800923a:	e01a      	b.n	8009272 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	2200      	movs	r2, #0
 8009240:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	68fa      	ldr	r2, [r7, #12]
 8009246:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	68ba      	ldr	r2, [r7, #8]
 800924c:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	687a      	ldr	r2, [r7, #4]
 8009252:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009254:	6979      	ldr	r1, [r7, #20]
 8009256:	4809      	ldr	r0, [pc, #36]	@ (800927c <tcpip_inpkt+0x78>)
 8009258:	f009 ffe2 	bl	8013220 <sys_mbox_trypost>
 800925c:	4603      	mov	r3, r0
 800925e:	2b00      	cmp	r3, #0
 8009260:	d006      	beq.n	8009270 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009262:	6979      	ldr	r1, [r7, #20]
 8009264:	2009      	movs	r0, #9
 8009266:	f000 fed3 	bl	800a010 <memp_free>
    return ERR_MEM;
 800926a:	f04f 33ff 	mov.w	r3, #4294967295
 800926e:	e000      	b.n	8009272 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8009270:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8009272:	4618      	mov	r0, r3
 8009274:	3718      	adds	r7, #24
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}
 800927a:	bf00      	nop
 800927c:	24009a84 	.word	0x24009a84
 8009280:	0801457c 	.word	0x0801457c
 8009284:	080145f4 	.word	0x080145f4
 8009288:	080145cc 	.word	0x080145cc

0800928c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b082      	sub	sp, #8
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800929c:	f003 0318 	and.w	r3, r3, #24
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d006      	beq.n	80092b2 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 80092a4:	4a08      	ldr	r2, [pc, #32]	@ (80092c8 <tcpip_input+0x3c>)
 80092a6:	6839      	ldr	r1, [r7, #0]
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f7ff ffab 	bl	8009204 <tcpip_inpkt>
 80092ae:	4603      	mov	r3, r0
 80092b0:	e005      	b.n	80092be <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 80092b2:	4a06      	ldr	r2, [pc, #24]	@ (80092cc <tcpip_input+0x40>)
 80092b4:	6839      	ldr	r1, [r7, #0]
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f7ff ffa4 	bl	8009204 <tcpip_inpkt>
 80092bc:	4603      	mov	r3, r0
}
 80092be:	4618      	mov	r0, r3
 80092c0:	3708      	adds	r7, #8
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}
 80092c6:	bf00      	nop
 80092c8:	08013039 	.word	0x08013039
 80092cc:	08011f39 	.word	0x08011f39

080092d0 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b084      	sub	sp, #16
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80092da:	4819      	ldr	r0, [pc, #100]	@ (8009340 <tcpip_try_callback+0x70>)
 80092dc:	f009 ffeb 	bl	80132b6 <sys_mbox_valid>
 80092e0:	4603      	mov	r3, r0
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d106      	bne.n	80092f4 <tcpip_try_callback+0x24>
 80092e6:	4b17      	ldr	r3, [pc, #92]	@ (8009344 <tcpip_try_callback+0x74>)
 80092e8:	f240 125d 	movw	r2, #349	@ 0x15d
 80092ec:	4916      	ldr	r1, [pc, #88]	@ (8009348 <tcpip_try_callback+0x78>)
 80092ee:	4817      	ldr	r0, [pc, #92]	@ (800934c <tcpip_try_callback+0x7c>)
 80092f0:	f00a f96e 	bl	80135d0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80092f4:	2008      	movs	r0, #8
 80092f6:	f000 fe15 	bl	8009f24 <memp_malloc>
 80092fa:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d102      	bne.n	8009308 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8009302:	f04f 33ff 	mov.w	r3, #4294967295
 8009306:	e017      	b.n	8009338 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	2201      	movs	r2, #1
 800930c:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	687a      	ldr	r2, [r7, #4]
 8009312:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	683a      	ldr	r2, [r7, #0]
 8009318:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800931a:	68f9      	ldr	r1, [r7, #12]
 800931c:	4808      	ldr	r0, [pc, #32]	@ (8009340 <tcpip_try_callback+0x70>)
 800931e:	f009 ff7f 	bl	8013220 <sys_mbox_trypost>
 8009322:	4603      	mov	r3, r0
 8009324:	2b00      	cmp	r3, #0
 8009326:	d006      	beq.n	8009336 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8009328:	68f9      	ldr	r1, [r7, #12]
 800932a:	2008      	movs	r0, #8
 800932c:	f000 fe70 	bl	800a010 <memp_free>
    return ERR_MEM;
 8009330:	f04f 33ff 	mov.w	r3, #4294967295
 8009334:	e000      	b.n	8009338 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8009336:	2300      	movs	r3, #0
}
 8009338:	4618      	mov	r0, r3
 800933a:	3710      	adds	r7, #16
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}
 8009340:	24009a84 	.word	0x24009a84
 8009344:	0801457c 	.word	0x0801457c
 8009348:	080145f4 	.word	0x080145f4
 800934c:	080145cc 	.word	0x080145cc

08009350 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b084      	sub	sp, #16
 8009354:	af02      	add	r7, sp, #8
 8009356:	6078      	str	r0, [r7, #4]
 8009358:	6039      	str	r1, [r7, #0]
  lwip_init();
 800935a:	f000 f92d 	bl	80095b8 <lwip_init>

  tcpip_init_done = initfunc;
 800935e:	4a17      	ldr	r2, [pc, #92]	@ (80093bc <tcpip_init+0x6c>)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8009364:	4a16      	ldr	r2, [pc, #88]	@ (80093c0 <tcpip_init+0x70>)
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800936a:	2106      	movs	r1, #6
 800936c:	4815      	ldr	r0, [pc, #84]	@ (80093c4 <tcpip_init+0x74>)
 800936e:	f009 ff3d 	bl	80131ec <sys_mbox_new>
 8009372:	4603      	mov	r3, r0
 8009374:	2b00      	cmp	r3, #0
 8009376:	d006      	beq.n	8009386 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8009378:	4b13      	ldr	r3, [pc, #76]	@ (80093c8 <tcpip_init+0x78>)
 800937a:	f240 2261 	movw	r2, #609	@ 0x261
 800937e:	4913      	ldr	r1, [pc, #76]	@ (80093cc <tcpip_init+0x7c>)
 8009380:	4813      	ldr	r0, [pc, #76]	@ (80093d0 <tcpip_init+0x80>)
 8009382:	f00a f925 	bl	80135d0 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8009386:	4813      	ldr	r0, [pc, #76]	@ (80093d4 <tcpip_init+0x84>)
 8009388:	f009 ffb2 	bl	80132f0 <sys_mutex_new>
 800938c:	4603      	mov	r3, r0
 800938e:	2b00      	cmp	r3, #0
 8009390:	d006      	beq.n	80093a0 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8009392:	4b0d      	ldr	r3, [pc, #52]	@ (80093c8 <tcpip_init+0x78>)
 8009394:	f240 2265 	movw	r2, #613	@ 0x265
 8009398:	490f      	ldr	r1, [pc, #60]	@ (80093d8 <tcpip_init+0x88>)
 800939a:	480d      	ldr	r0, [pc, #52]	@ (80093d0 <tcpip_init+0x80>)
 800939c:	f00a f918 	bl	80135d0 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80093a0:	2318      	movs	r3, #24
 80093a2:	9300      	str	r3, [sp, #0]
 80093a4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80093a8:	2200      	movs	r2, #0
 80093aa:	490c      	ldr	r1, [pc, #48]	@ (80093dc <tcpip_init+0x8c>)
 80093ac:	480c      	ldr	r0, [pc, #48]	@ (80093e0 <tcpip_init+0x90>)
 80093ae:	f009 ffd1 	bl	8013354 <sys_thread_new>
}
 80093b2:	bf00      	nop
 80093b4:	3708      	adds	r7, #8
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
 80093ba:	bf00      	nop
 80093bc:	24009a7c 	.word	0x24009a7c
 80093c0:	24009a80 	.word	0x24009a80
 80093c4:	24009a84 	.word	0x24009a84
 80093c8:	0801457c 	.word	0x0801457c
 80093cc:	08014604 	.word	0x08014604
 80093d0:	080145cc 	.word	0x080145cc
 80093d4:	24009a88 	.word	0x24009a88
 80093d8:	08014628 	.word	0x08014628
 80093dc:	0800910d 	.word	0x0800910d
 80093e0:	0801464c 	.word	0x0801464c

080093e4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b083      	sub	sp, #12
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	4603      	mov	r3, r0
 80093ec:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80093ee:	88fb      	ldrh	r3, [r7, #6]
 80093f0:	021b      	lsls	r3, r3, #8
 80093f2:	b21a      	sxth	r2, r3
 80093f4:	88fb      	ldrh	r3, [r7, #6]
 80093f6:	0a1b      	lsrs	r3, r3, #8
 80093f8:	b29b      	uxth	r3, r3
 80093fa:	b21b      	sxth	r3, r3
 80093fc:	4313      	orrs	r3, r2
 80093fe:	b21b      	sxth	r3, r3
 8009400:	b29b      	uxth	r3, r3
}
 8009402:	4618      	mov	r0, r3
 8009404:	370c      	adds	r7, #12
 8009406:	46bd      	mov	sp, r7
 8009408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940c:	4770      	bx	lr

0800940e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800940e:	b480      	push	{r7}
 8009410:	b083      	sub	sp, #12
 8009412:	af00      	add	r7, sp, #0
 8009414:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	061a      	lsls	r2, r3, #24
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	021b      	lsls	r3, r3, #8
 800941e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009422:	431a      	orrs	r2, r3
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	0a1b      	lsrs	r3, r3, #8
 8009428:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800942c:	431a      	orrs	r2, r3
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	0e1b      	lsrs	r3, r3, #24
 8009432:	4313      	orrs	r3, r2
}
 8009434:	4618      	mov	r0, r3
 8009436:	370c      	adds	r7, #12
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr

08009440 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8009440:	b480      	push	{r7}
 8009442:	b089      	sub	sp, #36	@ 0x24
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800944e:	2300      	movs	r3, #0
 8009450:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8009452:	2300      	movs	r3, #0
 8009454:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8009456:	69fb      	ldr	r3, [r7, #28]
 8009458:	f003 0301 	and.w	r3, r3, #1
 800945c:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d00d      	beq.n	8009480 <lwip_standard_chksum+0x40>
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	2b00      	cmp	r3, #0
 8009468:	dd0a      	ble.n	8009480 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800946a:	69fa      	ldr	r2, [r7, #28]
 800946c:	1c53      	adds	r3, r2, #1
 800946e:	61fb      	str	r3, [r7, #28]
 8009470:	f107 030e 	add.w	r3, r7, #14
 8009474:	3301      	adds	r3, #1
 8009476:	7812      	ldrb	r2, [r2, #0]
 8009478:	701a      	strb	r2, [r3, #0]
    len--;
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	3b01      	subs	r3, #1
 800947e:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8009480:	69fb      	ldr	r3, [r7, #28]
 8009482:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8009484:	e00a      	b.n	800949c <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8009486:	69bb      	ldr	r3, [r7, #24]
 8009488:	1c9a      	adds	r2, r3, #2
 800948a:	61ba      	str	r2, [r7, #24]
 800948c:	881b      	ldrh	r3, [r3, #0]
 800948e:	461a      	mov	r2, r3
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	4413      	add	r3, r2
 8009494:	617b      	str	r3, [r7, #20]
    len -= 2;
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	3b02      	subs	r3, #2
 800949a:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	2b01      	cmp	r3, #1
 80094a0:	dcf1      	bgt.n	8009486 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	dd04      	ble.n	80094b2 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 80094a8:	f107 030e 	add.w	r3, r7, #14
 80094ac:	69ba      	ldr	r2, [r7, #24]
 80094ae:	7812      	ldrb	r2, [r2, #0]
 80094b0:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 80094b2:	89fb      	ldrh	r3, [r7, #14]
 80094b4:	461a      	mov	r2, r3
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	4413      	add	r3, r2
 80094ba:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 80094bc:	697b      	ldr	r3, [r7, #20]
 80094be:	0c1a      	lsrs	r2, r3, #16
 80094c0:	697b      	ldr	r3, [r7, #20]
 80094c2:	b29b      	uxth	r3, r3
 80094c4:	4413      	add	r3, r2
 80094c6:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	0c1a      	lsrs	r2, r3, #16
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	b29b      	uxth	r3, r3
 80094d0:	4413      	add	r3, r2
 80094d2:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d007      	beq.n	80094ea <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	021b      	lsls	r3, r3, #8
 80094de:	b29a      	uxth	r2, r3
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	0a1b      	lsrs	r3, r3, #8
 80094e4:	b2db      	uxtb	r3, r3
 80094e6:	4313      	orrs	r3, r2
 80094e8:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	b29b      	uxth	r3, r3
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3724      	adds	r7, #36	@ 0x24
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr

080094fa <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 80094fa:	b580      	push	{r7, lr}
 80094fc:	b082      	sub	sp, #8
 80094fe:	af00      	add	r7, sp, #0
 8009500:	6078      	str	r0, [r7, #4]
 8009502:	460b      	mov	r3, r1
 8009504:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8009506:	887b      	ldrh	r3, [r7, #2]
 8009508:	4619      	mov	r1, r3
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f7ff ff98 	bl	8009440 <lwip_standard_chksum>
 8009510:	4603      	mov	r3, r0
 8009512:	43db      	mvns	r3, r3
 8009514:	b29b      	uxth	r3, r3
}
 8009516:	4618      	mov	r0, r3
 8009518:	3708      	adds	r7, #8
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}

0800951e <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800951e:	b580      	push	{r7, lr}
 8009520:	b086      	sub	sp, #24
 8009522:	af00      	add	r7, sp, #0
 8009524:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8009526:	2300      	movs	r3, #0
 8009528:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800952a:	2300      	movs	r3, #0
 800952c:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	613b      	str	r3, [r7, #16]
 8009532:	e02b      	b.n	800958c <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	685a      	ldr	r2, [r3, #4]
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	895b      	ldrh	r3, [r3, #10]
 800953c:	4619      	mov	r1, r3
 800953e:	4610      	mov	r0, r2
 8009540:	f7ff ff7e 	bl	8009440 <lwip_standard_chksum>
 8009544:	4603      	mov	r3, r0
 8009546:	461a      	mov	r2, r3
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	4413      	add	r3, r2
 800954c:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	0c1a      	lsrs	r2, r3, #16
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	b29b      	uxth	r3, r3
 8009556:	4413      	add	r3, r2
 8009558:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	895b      	ldrh	r3, [r3, #10]
 800955e:	f003 0301 	and.w	r3, r3, #1
 8009562:	b29b      	uxth	r3, r3
 8009564:	2b00      	cmp	r3, #0
 8009566:	d00e      	beq.n	8009586 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	2b00      	cmp	r3, #0
 800956c:	bf0c      	ite	eq
 800956e:	2301      	moveq	r3, #1
 8009570:	2300      	movne	r3, #0
 8009572:	b2db      	uxtb	r3, r3
 8009574:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	021b      	lsls	r3, r3, #8
 800957a:	b29a      	uxth	r2, r3
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	0a1b      	lsrs	r3, r3, #8
 8009580:	b2db      	uxtb	r3, r3
 8009582:	4313      	orrs	r3, r2
 8009584:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	613b      	str	r3, [r7, #16]
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d1d0      	bne.n	8009534 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d007      	beq.n	80095a8 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	021b      	lsls	r3, r3, #8
 800959c:	b29a      	uxth	r2, r3
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	0a1b      	lsrs	r3, r3, #8
 80095a2:	b2db      	uxtb	r3, r3
 80095a4:	4313      	orrs	r3, r2
 80095a6:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	b29b      	uxth	r3, r3
 80095ac:	43db      	mvns	r3, r3
 80095ae:	b29b      	uxth	r3, r3
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3718      	adds	r7, #24
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b082      	sub	sp, #8
 80095bc:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80095be:	2300      	movs	r3, #0
 80095c0:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80095c2:	f009 fe89 	bl	80132d8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80095c6:	f000 f8d9 	bl	800977c <mem_init>
  memp_init();
 80095ca:	f000 fc3d 	bl	8009e48 <memp_init>
  pbuf_init();
  netif_init();
 80095ce:	f000 fd49 	bl	800a064 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80095d2:	f007 f957 	bl	8010884 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80095d6:	f001 fe69 	bl	800b2ac <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80095da:	f007 f893 	bl	8010704 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80095de:	bf00      	nop
 80095e0:	3708      	adds	r7, #8
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
	...

080095e8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b083      	sub	sp, #12
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	4603      	mov	r3, r0
 80095f0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80095f2:	4b05      	ldr	r3, [pc, #20]	@ (8009608 <ptr_to_mem+0x20>)
 80095f4:	681a      	ldr	r2, [r3, #0]
 80095f6:	88fb      	ldrh	r3, [r7, #6]
 80095f8:	4413      	add	r3, r2
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	370c      	adds	r7, #12
 80095fe:	46bd      	mov	sp, r7
 8009600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009604:	4770      	bx	lr
 8009606:	bf00      	nop
 8009608:	24009aa4 	.word	0x24009aa4

0800960c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800960c:	b480      	push	{r7}
 800960e:	b083      	sub	sp, #12
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8009614:	4b05      	ldr	r3, [pc, #20]	@ (800962c <mem_to_ptr+0x20>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	687a      	ldr	r2, [r7, #4]
 800961a:	1ad3      	subs	r3, r2, r3
 800961c:	b29b      	uxth	r3, r3
}
 800961e:	4618      	mov	r0, r3
 8009620:	370c      	adds	r7, #12
 8009622:	46bd      	mov	sp, r7
 8009624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009628:	4770      	bx	lr
 800962a:	bf00      	nop
 800962c:	24009aa4 	.word	0x24009aa4

08009630 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8009630:	b590      	push	{r4, r7, lr}
 8009632:	b085      	sub	sp, #20
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8009638:	4b47      	ldr	r3, [pc, #284]	@ (8009758 <plug_holes+0x128>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	687a      	ldr	r2, [r7, #4]
 800963e:	429a      	cmp	r2, r3
 8009640:	d206      	bcs.n	8009650 <plug_holes+0x20>
 8009642:	4b46      	ldr	r3, [pc, #280]	@ (800975c <plug_holes+0x12c>)
 8009644:	f240 12df 	movw	r2, #479	@ 0x1df
 8009648:	4945      	ldr	r1, [pc, #276]	@ (8009760 <plug_holes+0x130>)
 800964a:	4846      	ldr	r0, [pc, #280]	@ (8009764 <plug_holes+0x134>)
 800964c:	f009 ffc0 	bl	80135d0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8009650:	4b45      	ldr	r3, [pc, #276]	@ (8009768 <plug_holes+0x138>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	687a      	ldr	r2, [r7, #4]
 8009656:	429a      	cmp	r2, r3
 8009658:	d306      	bcc.n	8009668 <plug_holes+0x38>
 800965a:	4b40      	ldr	r3, [pc, #256]	@ (800975c <plug_holes+0x12c>)
 800965c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8009660:	4942      	ldr	r1, [pc, #264]	@ (800976c <plug_holes+0x13c>)
 8009662:	4840      	ldr	r0, [pc, #256]	@ (8009764 <plug_holes+0x134>)
 8009664:	f009 ffb4 	bl	80135d0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	791b      	ldrb	r3, [r3, #4]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d006      	beq.n	800967e <plug_holes+0x4e>
 8009670:	4b3a      	ldr	r3, [pc, #232]	@ (800975c <plug_holes+0x12c>)
 8009672:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8009676:	493e      	ldr	r1, [pc, #248]	@ (8009770 <plug_holes+0x140>)
 8009678:	483a      	ldr	r0, [pc, #232]	@ (8009764 <plug_holes+0x134>)
 800967a:	f009 ffa9 	bl	80135d0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	881b      	ldrh	r3, [r3, #0]
 8009682:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 8009686:	4293      	cmp	r3, r2
 8009688:	d906      	bls.n	8009698 <plug_holes+0x68>
 800968a:	4b34      	ldr	r3, [pc, #208]	@ (800975c <plug_holes+0x12c>)
 800968c:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8009690:	4938      	ldr	r1, [pc, #224]	@ (8009774 <plug_holes+0x144>)
 8009692:	4834      	ldr	r0, [pc, #208]	@ (8009764 <plug_holes+0x134>)
 8009694:	f009 ff9c 	bl	80135d0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	881b      	ldrh	r3, [r3, #0]
 800969c:	4618      	mov	r0, r3
 800969e:	f7ff ffa3 	bl	80095e8 <ptr_to_mem>
 80096a2:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80096a4:	687a      	ldr	r2, [r7, #4]
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d025      	beq.n	80096f8 <plug_holes+0xc8>
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	791b      	ldrb	r3, [r3, #4]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d121      	bne.n	80096f8 <plug_holes+0xc8>
 80096b4:	4b2c      	ldr	r3, [pc, #176]	@ (8009768 <plug_holes+0x138>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	68fa      	ldr	r2, [r7, #12]
 80096ba:	429a      	cmp	r2, r3
 80096bc:	d01c      	beq.n	80096f8 <plug_holes+0xc8>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80096be:	4b2e      	ldr	r3, [pc, #184]	@ (8009778 <plug_holes+0x148>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	68fa      	ldr	r2, [r7, #12]
 80096c4:	429a      	cmp	r2, r3
 80096c6:	d102      	bne.n	80096ce <plug_holes+0x9e>
      lfree = mem;
 80096c8:	4a2b      	ldr	r2, [pc, #172]	@ (8009778 <plug_holes+0x148>)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	881a      	ldrh	r2, [r3, #0]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	881b      	ldrh	r3, [r3, #0]
 80096da:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 80096de:	4293      	cmp	r3, r2
 80096e0:	d00a      	beq.n	80096f8 <plug_holes+0xc8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	881b      	ldrh	r3, [r3, #0]
 80096e6:	4618      	mov	r0, r3
 80096e8:	f7ff ff7e 	bl	80095e8 <ptr_to_mem>
 80096ec:	4604      	mov	r4, r0
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f7ff ff8c 	bl	800960c <mem_to_ptr>
 80096f4:	4603      	mov	r3, r0
 80096f6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	885b      	ldrh	r3, [r3, #2]
 80096fc:	4618      	mov	r0, r3
 80096fe:	f7ff ff73 	bl	80095e8 <ptr_to_mem>
 8009702:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8009704:	68ba      	ldr	r2, [r7, #8]
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	429a      	cmp	r2, r3
 800970a:	d020      	beq.n	800974e <plug_holes+0x11e>
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	791b      	ldrb	r3, [r3, #4]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d11c      	bne.n	800974e <plug_holes+0x11e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8009714:	4b18      	ldr	r3, [pc, #96]	@ (8009778 <plug_holes+0x148>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	687a      	ldr	r2, [r7, #4]
 800971a:	429a      	cmp	r2, r3
 800971c:	d102      	bne.n	8009724 <plug_holes+0xf4>
      lfree = pmem;
 800971e:	4a16      	ldr	r2, [pc, #88]	@ (8009778 <plug_holes+0x148>)
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	881a      	ldrh	r2, [r3, #0]
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	881b      	ldrh	r3, [r3, #0]
 8009730:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 8009734:	4293      	cmp	r3, r2
 8009736:	d00a      	beq.n	800974e <plug_holes+0x11e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	881b      	ldrh	r3, [r3, #0]
 800973c:	4618      	mov	r0, r3
 800973e:	f7ff ff53 	bl	80095e8 <ptr_to_mem>
 8009742:	4604      	mov	r4, r0
 8009744:	68b8      	ldr	r0, [r7, #8]
 8009746:	f7ff ff61 	bl	800960c <mem_to_ptr>
 800974a:	4603      	mov	r3, r0
 800974c:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800974e:	bf00      	nop
 8009750:	3714      	adds	r7, #20
 8009752:	46bd      	mov	sp, r7
 8009754:	bd90      	pop	{r4, r7, pc}
 8009756:	bf00      	nop
 8009758:	24009aa4 	.word	0x24009aa4
 800975c:	0801465c 	.word	0x0801465c
 8009760:	0801468c 	.word	0x0801468c
 8009764:	080146a4 	.word	0x080146a4
 8009768:	24009aa8 	.word	0x24009aa8
 800976c:	080146cc 	.word	0x080146cc
 8009770:	080146e8 	.word	0x080146e8
 8009774:	08014704 	.word	0x08014704
 8009778:	24009ab0 	.word	0x24009ab0

0800977c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b082      	sub	sp, #8
 8009780:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8009782:	4b1d      	ldr	r3, [pc, #116]	@ (80097f8 <mem_init+0x7c>)
 8009784:	4a1d      	ldr	r2, [pc, #116]	@ (80097fc <mem_init+0x80>)
 8009786:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8009788:	4b1b      	ldr	r3, [pc, #108]	@ (80097f8 <mem_init+0x7c>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 8009794:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2200      	movs	r2, #0
 800979a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2200      	movs	r2, #0
 80097a0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80097a2:	f647 50e8 	movw	r0, #32232	@ 0x7de8
 80097a6:	f7ff ff1f 	bl	80095e8 <ptr_to_mem>
 80097aa:	4603      	mov	r3, r0
 80097ac:	4a14      	ldr	r2, [pc, #80]	@ (8009800 <mem_init+0x84>)
 80097ae:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80097b0:	4b13      	ldr	r3, [pc, #76]	@ (8009800 <mem_init+0x84>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	2201      	movs	r2, #1
 80097b6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80097b8:	4b11      	ldr	r3, [pc, #68]	@ (8009800 <mem_init+0x84>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 80097c0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80097c2:	4b0f      	ldr	r3, [pc, #60]	@ (8009800 <mem_init+0x84>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 80097ca:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80097cc:	4b0a      	ldr	r3, [pc, #40]	@ (80097f8 <mem_init+0x7c>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4a0c      	ldr	r2, [pc, #48]	@ (8009804 <mem_init+0x88>)
 80097d2:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80097d4:	480c      	ldr	r0, [pc, #48]	@ (8009808 <mem_init+0x8c>)
 80097d6:	f009 fd8b 	bl	80132f0 <sys_mutex_new>
 80097da:	4603      	mov	r3, r0
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d006      	beq.n	80097ee <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80097e0:	4b0a      	ldr	r3, [pc, #40]	@ (800980c <mem_init+0x90>)
 80097e2:	f240 221f 	movw	r2, #543	@ 0x21f
 80097e6:	490a      	ldr	r1, [pc, #40]	@ (8009810 <mem_init+0x94>)
 80097e8:	480a      	ldr	r0, [pc, #40]	@ (8009814 <mem_init+0x98>)
 80097ea:	f009 fef1 	bl	80135d0 <iprintf>
  }
}
 80097ee:	bf00      	nop
 80097f0:	3708      	adds	r7, #8
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}
 80097f6:	bf00      	nop
 80097f8:	24009aa4 	.word	0x24009aa4
 80097fc:	30000200 	.word	0x30000200
 8009800:	24009aa8 	.word	0x24009aa8
 8009804:	24009ab0 	.word	0x24009ab0
 8009808:	24009aac 	.word	0x24009aac
 800980c:	0801465c 	.word	0x0801465c
 8009810:	08014730 	.word	0x08014730
 8009814:	080146a4 	.word	0x080146a4

08009818 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b086      	sub	sp, #24
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f7ff fef3 	bl	800960c <mem_to_ptr>
 8009826:	4603      	mov	r3, r0
 8009828:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	881b      	ldrh	r3, [r3, #0]
 800982e:	4618      	mov	r0, r3
 8009830:	f7ff feda 	bl	80095e8 <ptr_to_mem>
 8009834:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	885b      	ldrh	r3, [r3, #2]
 800983a:	4618      	mov	r0, r3
 800983c:	f7ff fed4 	bl	80095e8 <ptr_to_mem>
 8009840:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	881b      	ldrh	r3, [r3, #0]
 8009846:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800984a:	4293      	cmp	r3, r2
 800984c:	d819      	bhi.n	8009882 <mem_link_valid+0x6a>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	885b      	ldrh	r3, [r3, #2]
 8009852:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 8009856:	4293      	cmp	r3, r2
 8009858:	d813      	bhi.n	8009882 <mem_link_valid+0x6a>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800985e:	8afa      	ldrh	r2, [r7, #22]
 8009860:	429a      	cmp	r2, r3
 8009862:	d004      	beq.n	800986e <mem_link_valid+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	881b      	ldrh	r3, [r3, #0]
 8009868:	8afa      	ldrh	r2, [r7, #22]
 800986a:	429a      	cmp	r2, r3
 800986c:	d109      	bne.n	8009882 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800986e:	4b08      	ldr	r3, [pc, #32]	@ (8009890 <mem_link_valid+0x78>)
 8009870:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009872:	693a      	ldr	r2, [r7, #16]
 8009874:	429a      	cmp	r2, r3
 8009876:	d006      	beq.n	8009886 <mem_link_valid+0x6e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	885b      	ldrh	r3, [r3, #2]
 800987c:	8afa      	ldrh	r2, [r7, #22]
 800987e:	429a      	cmp	r2, r3
 8009880:	d001      	beq.n	8009886 <mem_link_valid+0x6e>
    return 0;
 8009882:	2300      	movs	r3, #0
 8009884:	e000      	b.n	8009888 <mem_link_valid+0x70>
  }
  return 1;
 8009886:	2301      	movs	r3, #1
}
 8009888:	4618      	mov	r0, r3
 800988a:	3718      	adds	r7, #24
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}
 8009890:	24009aa8 	.word	0x24009aa8

08009894 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b088      	sub	sp, #32
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d070      	beq.n	8009984 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f003 0303 	and.w	r3, r3, #3
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d00d      	beq.n	80098c8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80098ac:	4b37      	ldr	r3, [pc, #220]	@ (800998c <mem_free+0xf8>)
 80098ae:	f240 2273 	movw	r2, #627	@ 0x273
 80098b2:	4937      	ldr	r1, [pc, #220]	@ (8009990 <mem_free+0xfc>)
 80098b4:	4837      	ldr	r0, [pc, #220]	@ (8009994 <mem_free+0x100>)
 80098b6:	f009 fe8b 	bl	80135d0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80098ba:	f009 fd6b 	bl	8013394 <sys_arch_protect>
 80098be:	60f8      	str	r0, [r7, #12]
 80098c0:	68f8      	ldr	r0, [r7, #12]
 80098c2:	f009 fd75 	bl	80133b0 <sys_arch_unprotect>
    return;
 80098c6:	e05e      	b.n	8009986 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	3b08      	subs	r3, #8
 80098cc:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80098ce:	4b32      	ldr	r3, [pc, #200]	@ (8009998 <mem_free+0x104>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	69fa      	ldr	r2, [r7, #28]
 80098d4:	429a      	cmp	r2, r3
 80098d6:	d306      	bcc.n	80098e6 <mem_free+0x52>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f103 020c 	add.w	r2, r3, #12
 80098de:	4b2f      	ldr	r3, [pc, #188]	@ (800999c <mem_free+0x108>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	429a      	cmp	r2, r3
 80098e4:	d90d      	bls.n	8009902 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80098e6:	4b29      	ldr	r3, [pc, #164]	@ (800998c <mem_free+0xf8>)
 80098e8:	f240 227f 	movw	r2, #639	@ 0x27f
 80098ec:	492c      	ldr	r1, [pc, #176]	@ (80099a0 <mem_free+0x10c>)
 80098ee:	4829      	ldr	r0, [pc, #164]	@ (8009994 <mem_free+0x100>)
 80098f0:	f009 fe6e 	bl	80135d0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80098f4:	f009 fd4e 	bl	8013394 <sys_arch_protect>
 80098f8:	6138      	str	r0, [r7, #16]
 80098fa:	6938      	ldr	r0, [r7, #16]
 80098fc:	f009 fd58 	bl	80133b0 <sys_arch_unprotect>
    return;
 8009900:	e041      	b.n	8009986 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8009902:	4828      	ldr	r0, [pc, #160]	@ (80099a4 <mem_free+0x110>)
 8009904:	f009 fd0a 	bl	801331c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8009908:	69fb      	ldr	r3, [r7, #28]
 800990a:	791b      	ldrb	r3, [r3, #4]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d110      	bne.n	8009932 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8009910:	4b1e      	ldr	r3, [pc, #120]	@ (800998c <mem_free+0xf8>)
 8009912:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8009916:	4924      	ldr	r1, [pc, #144]	@ (80099a8 <mem_free+0x114>)
 8009918:	481e      	ldr	r0, [pc, #120]	@ (8009994 <mem_free+0x100>)
 800991a:	f009 fe59 	bl	80135d0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800991e:	4821      	ldr	r0, [pc, #132]	@ (80099a4 <mem_free+0x110>)
 8009920:	f009 fd0b 	bl	801333a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009924:	f009 fd36 	bl	8013394 <sys_arch_protect>
 8009928:	6178      	str	r0, [r7, #20]
 800992a:	6978      	ldr	r0, [r7, #20]
 800992c:	f009 fd40 	bl	80133b0 <sys_arch_unprotect>
    return;
 8009930:	e029      	b.n	8009986 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8009932:	69f8      	ldr	r0, [r7, #28]
 8009934:	f7ff ff70 	bl	8009818 <mem_link_valid>
 8009938:	4603      	mov	r3, r0
 800993a:	2b00      	cmp	r3, #0
 800993c:	d110      	bne.n	8009960 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800993e:	4b13      	ldr	r3, [pc, #76]	@ (800998c <mem_free+0xf8>)
 8009940:	f240 2295 	movw	r2, #661	@ 0x295
 8009944:	4919      	ldr	r1, [pc, #100]	@ (80099ac <mem_free+0x118>)
 8009946:	4813      	ldr	r0, [pc, #76]	@ (8009994 <mem_free+0x100>)
 8009948:	f009 fe42 	bl	80135d0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800994c:	4815      	ldr	r0, [pc, #84]	@ (80099a4 <mem_free+0x110>)
 800994e:	f009 fcf4 	bl	801333a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009952:	f009 fd1f 	bl	8013394 <sys_arch_protect>
 8009956:	61b8      	str	r0, [r7, #24]
 8009958:	69b8      	ldr	r0, [r7, #24]
 800995a:	f009 fd29 	bl	80133b0 <sys_arch_unprotect>
    return;
 800995e:	e012      	b.n	8009986 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8009960:	69fb      	ldr	r3, [r7, #28]
 8009962:	2200      	movs	r2, #0
 8009964:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8009966:	4b12      	ldr	r3, [pc, #72]	@ (80099b0 <mem_free+0x11c>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	69fa      	ldr	r2, [r7, #28]
 800996c:	429a      	cmp	r2, r3
 800996e:	d202      	bcs.n	8009976 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8009970:	4a0f      	ldr	r2, [pc, #60]	@ (80099b0 <mem_free+0x11c>)
 8009972:	69fb      	ldr	r3, [r7, #28]
 8009974:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8009976:	69f8      	ldr	r0, [r7, #28]
 8009978:	f7ff fe5a 	bl	8009630 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800997c:	4809      	ldr	r0, [pc, #36]	@ (80099a4 <mem_free+0x110>)
 800997e:	f009 fcdc 	bl	801333a <sys_mutex_unlock>
 8009982:	e000      	b.n	8009986 <mem_free+0xf2>
    return;
 8009984:	bf00      	nop
}
 8009986:	3720      	adds	r7, #32
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}
 800998c:	0801465c 	.word	0x0801465c
 8009990:	0801474c 	.word	0x0801474c
 8009994:	080146a4 	.word	0x080146a4
 8009998:	24009aa4 	.word	0x24009aa4
 800999c:	24009aa8 	.word	0x24009aa8
 80099a0:	08014770 	.word	0x08014770
 80099a4:	24009aac 	.word	0x24009aac
 80099a8:	0801478c 	.word	0x0801478c
 80099ac:	080147b4 	.word	0x080147b4
 80099b0:	24009ab0 	.word	0x24009ab0

080099b4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b088      	sub	sp, #32
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
 80099bc:	460b      	mov	r3, r1
 80099be:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80099c0:	887b      	ldrh	r3, [r7, #2]
 80099c2:	3303      	adds	r3, #3
 80099c4:	b29b      	uxth	r3, r3
 80099c6:	f023 0303 	bic.w	r3, r3, #3
 80099ca:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80099cc:	8bfb      	ldrh	r3, [r7, #30]
 80099ce:	2b0b      	cmp	r3, #11
 80099d0:	d801      	bhi.n	80099d6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80099d2:	230c      	movs	r3, #12
 80099d4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80099d6:	8bfb      	ldrh	r3, [r7, #30]
 80099d8:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 80099dc:	4293      	cmp	r3, r2
 80099de:	d803      	bhi.n	80099e8 <mem_trim+0x34>
 80099e0:	8bfa      	ldrh	r2, [r7, #30]
 80099e2:	887b      	ldrh	r3, [r7, #2]
 80099e4:	429a      	cmp	r2, r3
 80099e6:	d201      	bcs.n	80099ec <mem_trim+0x38>
    return NULL;
 80099e8:	2300      	movs	r3, #0
 80099ea:	e0dc      	b.n	8009ba6 <mem_trim+0x1f2>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80099ec:	4b70      	ldr	r3, [pc, #448]	@ (8009bb0 <mem_trim+0x1fc>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	687a      	ldr	r2, [r7, #4]
 80099f2:	429a      	cmp	r2, r3
 80099f4:	d304      	bcc.n	8009a00 <mem_trim+0x4c>
 80099f6:	4b6f      	ldr	r3, [pc, #444]	@ (8009bb4 <mem_trim+0x200>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	687a      	ldr	r2, [r7, #4]
 80099fc:	429a      	cmp	r2, r3
 80099fe:	d306      	bcc.n	8009a0e <mem_trim+0x5a>
 8009a00:	4b6d      	ldr	r3, [pc, #436]	@ (8009bb8 <mem_trim+0x204>)
 8009a02:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8009a06:	496d      	ldr	r1, [pc, #436]	@ (8009bbc <mem_trim+0x208>)
 8009a08:	486d      	ldr	r0, [pc, #436]	@ (8009bc0 <mem_trim+0x20c>)
 8009a0a:	f009 fde1 	bl	80135d0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8009a0e:	4b68      	ldr	r3, [pc, #416]	@ (8009bb0 <mem_trim+0x1fc>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	687a      	ldr	r2, [r7, #4]
 8009a14:	429a      	cmp	r2, r3
 8009a16:	d304      	bcc.n	8009a22 <mem_trim+0x6e>
 8009a18:	4b66      	ldr	r3, [pc, #408]	@ (8009bb4 <mem_trim+0x200>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	429a      	cmp	r2, r3
 8009a20:	d307      	bcc.n	8009a32 <mem_trim+0x7e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009a22:	f009 fcb7 	bl	8013394 <sys_arch_protect>
 8009a26:	60b8      	str	r0, [r7, #8]
 8009a28:	68b8      	ldr	r0, [r7, #8]
 8009a2a:	f009 fcc1 	bl	80133b0 <sys_arch_unprotect>
    return rmem;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	e0b9      	b.n	8009ba6 <mem_trim+0x1f2>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	3b08      	subs	r3, #8
 8009a36:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8009a38:	69b8      	ldr	r0, [r7, #24]
 8009a3a:	f7ff fde7 	bl	800960c <mem_to_ptr>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8009a42:	69bb      	ldr	r3, [r7, #24]
 8009a44:	881a      	ldrh	r2, [r3, #0]
 8009a46:	8afb      	ldrh	r3, [r7, #22]
 8009a48:	1ad3      	subs	r3, r2, r3
 8009a4a:	b29b      	uxth	r3, r3
 8009a4c:	3b08      	subs	r3, #8
 8009a4e:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8009a50:	8bfa      	ldrh	r2, [r7, #30]
 8009a52:	8abb      	ldrh	r3, [r7, #20]
 8009a54:	429a      	cmp	r2, r3
 8009a56:	d906      	bls.n	8009a66 <mem_trim+0xb2>
 8009a58:	4b57      	ldr	r3, [pc, #348]	@ (8009bb8 <mem_trim+0x204>)
 8009a5a:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8009a5e:	4959      	ldr	r1, [pc, #356]	@ (8009bc4 <mem_trim+0x210>)
 8009a60:	4857      	ldr	r0, [pc, #348]	@ (8009bc0 <mem_trim+0x20c>)
 8009a62:	f009 fdb5 	bl	80135d0 <iprintf>
  if (newsize > size) {
 8009a66:	8bfa      	ldrh	r2, [r7, #30]
 8009a68:	8abb      	ldrh	r3, [r7, #20]
 8009a6a:	429a      	cmp	r2, r3
 8009a6c:	d901      	bls.n	8009a72 <mem_trim+0xbe>
    /* not supported */
    return NULL;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	e099      	b.n	8009ba6 <mem_trim+0x1f2>
  }
  if (newsize == size) {
 8009a72:	8bfa      	ldrh	r2, [r7, #30]
 8009a74:	8abb      	ldrh	r3, [r7, #20]
 8009a76:	429a      	cmp	r2, r3
 8009a78:	d101      	bne.n	8009a7e <mem_trim+0xca>
    /* No change in size, simply return */
    return rmem;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	e093      	b.n	8009ba6 <mem_trim+0x1f2>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8009a7e:	4852      	ldr	r0, [pc, #328]	@ (8009bc8 <mem_trim+0x214>)
 8009a80:	f009 fc4c 	bl	801331c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8009a84:	69bb      	ldr	r3, [r7, #24]
 8009a86:	881b      	ldrh	r3, [r3, #0]
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f7ff fdad 	bl	80095e8 <ptr_to_mem>
 8009a8e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	791b      	ldrb	r3, [r3, #4]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d141      	bne.n	8009b1c <mem_trim+0x168>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009a98:	69bb      	ldr	r3, [r7, #24]
 8009a9a:	881b      	ldrh	r3, [r3, #0]
 8009a9c:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d106      	bne.n	8009ab2 <mem_trim+0xfe>
 8009aa4:	4b44      	ldr	r3, [pc, #272]	@ (8009bb8 <mem_trim+0x204>)
 8009aa6:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8009aaa:	4948      	ldr	r1, [pc, #288]	@ (8009bcc <mem_trim+0x218>)
 8009aac:	4844      	ldr	r0, [pc, #272]	@ (8009bc0 <mem_trim+0x20c>)
 8009aae:	f009 fd8f 	bl	80135d0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	881b      	ldrh	r3, [r3, #0]
 8009ab6:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009ab8:	8afa      	ldrh	r2, [r7, #22]
 8009aba:	8bfb      	ldrh	r3, [r7, #30]
 8009abc:	4413      	add	r3, r2
 8009abe:	b29b      	uxth	r3, r3
 8009ac0:	3308      	adds	r3, #8
 8009ac2:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8009ac4:	4b42      	ldr	r3, [pc, #264]	@ (8009bd0 <mem_trim+0x21c>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	693a      	ldr	r2, [r7, #16]
 8009aca:	429a      	cmp	r2, r3
 8009acc:	d106      	bne.n	8009adc <mem_trim+0x128>
      lfree = ptr_to_mem(ptr2);
 8009ace:	89fb      	ldrh	r3, [r7, #14]
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f7ff fd89 	bl	80095e8 <ptr_to_mem>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	4a3d      	ldr	r2, [pc, #244]	@ (8009bd0 <mem_trim+0x21c>)
 8009ada:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8009adc:	89fb      	ldrh	r3, [r7, #14]
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f7ff fd82 	bl	80095e8 <ptr_to_mem>
 8009ae4:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	89ba      	ldrh	r2, [r7, #12]
 8009af0:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	8afa      	ldrh	r2, [r7, #22]
 8009af6:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8009af8:	69bb      	ldr	r3, [r7, #24]
 8009afa:	89fa      	ldrh	r2, [r7, #14]
 8009afc:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	881b      	ldrh	r3, [r3, #0]
 8009b02:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d049      	beq.n	8009b9e <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009b0a:	693b      	ldr	r3, [r7, #16]
 8009b0c:	881b      	ldrh	r3, [r3, #0]
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f7ff fd6a 	bl	80095e8 <ptr_to_mem>
 8009b14:	4602      	mov	r2, r0
 8009b16:	89fb      	ldrh	r3, [r7, #14]
 8009b18:	8053      	strh	r3, [r2, #2]
 8009b1a:	e040      	b.n	8009b9e <mem_trim+0x1ea>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8009b1c:	8bfb      	ldrh	r3, [r7, #30]
 8009b1e:	f103 0214 	add.w	r2, r3, #20
 8009b22:	8abb      	ldrh	r3, [r7, #20]
 8009b24:	429a      	cmp	r2, r3
 8009b26:	d83a      	bhi.n	8009b9e <mem_trim+0x1ea>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009b28:	8afa      	ldrh	r2, [r7, #22]
 8009b2a:	8bfb      	ldrh	r3, [r7, #30]
 8009b2c:	4413      	add	r3, r2
 8009b2e:	b29b      	uxth	r3, r3
 8009b30:	3308      	adds	r3, #8
 8009b32:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009b34:	69bb      	ldr	r3, [r7, #24]
 8009b36:	881b      	ldrh	r3, [r3, #0]
 8009b38:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d106      	bne.n	8009b4e <mem_trim+0x19a>
 8009b40:	4b1d      	ldr	r3, [pc, #116]	@ (8009bb8 <mem_trim+0x204>)
 8009b42:	f240 3216 	movw	r2, #790	@ 0x316
 8009b46:	4921      	ldr	r1, [pc, #132]	@ (8009bcc <mem_trim+0x218>)
 8009b48:	481d      	ldr	r0, [pc, #116]	@ (8009bc0 <mem_trim+0x20c>)
 8009b4a:	f009 fd41 	bl	80135d0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8009b4e:	89fb      	ldrh	r3, [r7, #14]
 8009b50:	4618      	mov	r0, r3
 8009b52:	f7ff fd49 	bl	80095e8 <ptr_to_mem>
 8009b56:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8009b58:	4b1d      	ldr	r3, [pc, #116]	@ (8009bd0 <mem_trim+0x21c>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	693a      	ldr	r2, [r7, #16]
 8009b5e:	429a      	cmp	r2, r3
 8009b60:	d202      	bcs.n	8009b68 <mem_trim+0x1b4>
      lfree = mem2;
 8009b62:	4a1b      	ldr	r2, [pc, #108]	@ (8009bd0 <mem_trim+0x21c>)
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8009b6e:	69bb      	ldr	r3, [r7, #24]
 8009b70:	881a      	ldrh	r2, [r3, #0]
 8009b72:	693b      	ldr	r3, [r7, #16]
 8009b74:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8009b76:	693b      	ldr	r3, [r7, #16]
 8009b78:	8afa      	ldrh	r2, [r7, #22]
 8009b7a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8009b7c:	69bb      	ldr	r3, [r7, #24]
 8009b7e:	89fa      	ldrh	r2, [r7, #14]
 8009b80:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	881b      	ldrh	r3, [r3, #0]
 8009b86:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d007      	beq.n	8009b9e <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	881b      	ldrh	r3, [r3, #0]
 8009b92:	4618      	mov	r0, r3
 8009b94:	f7ff fd28 	bl	80095e8 <ptr_to_mem>
 8009b98:	4602      	mov	r2, r0
 8009b9a:	89fb      	ldrh	r3, [r7, #14]
 8009b9c:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8009b9e:	480a      	ldr	r0, [pc, #40]	@ (8009bc8 <mem_trim+0x214>)
 8009ba0:	f009 fbcb 	bl	801333a <sys_mutex_unlock>
  return rmem;
 8009ba4:	687b      	ldr	r3, [r7, #4]
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3720      	adds	r7, #32
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}
 8009bae:	bf00      	nop
 8009bb0:	24009aa4 	.word	0x24009aa4
 8009bb4:	24009aa8 	.word	0x24009aa8
 8009bb8:	0801465c 	.word	0x0801465c
 8009bbc:	080147e8 	.word	0x080147e8
 8009bc0:	080146a4 	.word	0x080146a4
 8009bc4:	08014800 	.word	0x08014800
 8009bc8:	24009aac 	.word	0x24009aac
 8009bcc:	08014820 	.word	0x08014820
 8009bd0:	24009ab0 	.word	0x24009ab0

08009bd4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b088      	sub	sp, #32
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	4603      	mov	r3, r0
 8009bdc:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8009bde:	88fb      	ldrh	r3, [r7, #6]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d101      	bne.n	8009be8 <mem_malloc+0x14>
    return NULL;
 8009be4:	2300      	movs	r3, #0
 8009be6:	e0e6      	b.n	8009db6 <mem_malloc+0x1e2>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8009be8:	88fb      	ldrh	r3, [r7, #6]
 8009bea:	3303      	adds	r3, #3
 8009bec:	b29b      	uxth	r3, r3
 8009bee:	f023 0303 	bic.w	r3, r3, #3
 8009bf2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8009bf4:	8bbb      	ldrh	r3, [r7, #28]
 8009bf6:	2b0b      	cmp	r3, #11
 8009bf8:	d801      	bhi.n	8009bfe <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8009bfa:	230c      	movs	r3, #12
 8009bfc:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8009bfe:	8bbb      	ldrh	r3, [r7, #28]
 8009c00:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d803      	bhi.n	8009c10 <mem_malloc+0x3c>
 8009c08:	8bba      	ldrh	r2, [r7, #28]
 8009c0a:	88fb      	ldrh	r3, [r7, #6]
 8009c0c:	429a      	cmp	r2, r3
 8009c0e:	d201      	bcs.n	8009c14 <mem_malloc+0x40>
    return NULL;
 8009c10:	2300      	movs	r3, #0
 8009c12:	e0d0      	b.n	8009db6 <mem_malloc+0x1e2>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8009c14:	486a      	ldr	r0, [pc, #424]	@ (8009dc0 <mem_malloc+0x1ec>)
 8009c16:	f009 fb81 	bl	801331c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009c1a:	4b6a      	ldr	r3, [pc, #424]	@ (8009dc4 <mem_malloc+0x1f0>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f7ff fcf4 	bl	800960c <mem_to_ptr>
 8009c24:	4603      	mov	r3, r0
 8009c26:	83fb      	strh	r3, [r7, #30]
 8009c28:	e0b9      	b.n	8009d9e <mem_malloc+0x1ca>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8009c2a:	8bfb      	ldrh	r3, [r7, #30]
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	f7ff fcdb 	bl	80095e8 <ptr_to_mem>
 8009c32:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	791b      	ldrb	r3, [r3, #4]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	f040 80a9 	bne.w	8009d90 <mem_malloc+0x1bc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	881b      	ldrh	r3, [r3, #0]
 8009c42:	461a      	mov	r2, r3
 8009c44:	8bfb      	ldrh	r3, [r7, #30]
 8009c46:	1ad3      	subs	r3, r2, r3
 8009c48:	f1a3 0208 	sub.w	r2, r3, #8
 8009c4c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8009c4e:	429a      	cmp	r2, r3
 8009c50:	f0c0 809e 	bcc.w	8009d90 <mem_malloc+0x1bc>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8009c54:	697b      	ldr	r3, [r7, #20]
 8009c56:	881b      	ldrh	r3, [r3, #0]
 8009c58:	461a      	mov	r2, r3
 8009c5a:	8bfb      	ldrh	r3, [r7, #30]
 8009c5c:	1ad3      	subs	r3, r2, r3
 8009c5e:	f1a3 0208 	sub.w	r2, r3, #8
 8009c62:	8bbb      	ldrh	r3, [r7, #28]
 8009c64:	3314      	adds	r3, #20
 8009c66:	429a      	cmp	r2, r3
 8009c68:	d335      	bcc.n	8009cd6 <mem_malloc+0x102>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8009c6a:	8bfa      	ldrh	r2, [r7, #30]
 8009c6c:	8bbb      	ldrh	r3, [r7, #28]
 8009c6e:	4413      	add	r3, r2
 8009c70:	b29b      	uxth	r3, r3
 8009c72:	3308      	adds	r3, #8
 8009c74:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8009c76:	8a7b      	ldrh	r3, [r7, #18]
 8009c78:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d106      	bne.n	8009c8e <mem_malloc+0xba>
 8009c80:	4b51      	ldr	r3, [pc, #324]	@ (8009dc8 <mem_malloc+0x1f4>)
 8009c82:	f240 3287 	movw	r2, #903	@ 0x387
 8009c86:	4951      	ldr	r1, [pc, #324]	@ (8009dcc <mem_malloc+0x1f8>)
 8009c88:	4851      	ldr	r0, [pc, #324]	@ (8009dd0 <mem_malloc+0x1fc>)
 8009c8a:	f009 fca1 	bl	80135d0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8009c8e:	8a7b      	ldrh	r3, [r7, #18]
 8009c90:	4618      	mov	r0, r3
 8009c92:	f7ff fca9 	bl	80095e8 <ptr_to_mem>
 8009c96:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	881a      	ldrh	r2, [r3, #0]
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	8bfa      	ldrh	r2, [r7, #30]
 8009caa:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	8a7a      	ldrh	r2, [r7, #18]
 8009cb0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	2201      	movs	r2, #1
 8009cb6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	881b      	ldrh	r3, [r3, #0]
 8009cbc:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	d00b      	beq.n	8009cdc <mem_malloc+0x108>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	881b      	ldrh	r3, [r3, #0]
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f7ff fc8d 	bl	80095e8 <ptr_to_mem>
 8009cce:	4602      	mov	r2, r0
 8009cd0:	8a7b      	ldrh	r3, [r7, #18]
 8009cd2:	8053      	strh	r3, [r2, #2]
 8009cd4:	e002      	b.n	8009cdc <mem_malloc+0x108>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	2201      	movs	r2, #1
 8009cda:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8009cdc:	4b39      	ldr	r3, [pc, #228]	@ (8009dc4 <mem_malloc+0x1f0>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	697a      	ldr	r2, [r7, #20]
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	d127      	bne.n	8009d36 <mem_malloc+0x162>
          struct mem *cur = lfree;
 8009ce6:	4b37      	ldr	r3, [pc, #220]	@ (8009dc4 <mem_malloc+0x1f0>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8009cec:	e005      	b.n	8009cfa <mem_malloc+0x126>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8009cee:	69bb      	ldr	r3, [r7, #24]
 8009cf0:	881b      	ldrh	r3, [r3, #0]
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f7ff fc78 	bl	80095e8 <ptr_to_mem>
 8009cf8:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8009cfa:	69bb      	ldr	r3, [r7, #24]
 8009cfc:	791b      	ldrb	r3, [r3, #4]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d004      	beq.n	8009d0c <mem_malloc+0x138>
 8009d02:	4b34      	ldr	r3, [pc, #208]	@ (8009dd4 <mem_malloc+0x200>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	69ba      	ldr	r2, [r7, #24]
 8009d08:	429a      	cmp	r2, r3
 8009d0a:	d1f0      	bne.n	8009cee <mem_malloc+0x11a>
          }
          lfree = cur;
 8009d0c:	4a2d      	ldr	r2, [pc, #180]	@ (8009dc4 <mem_malloc+0x1f0>)
 8009d0e:	69bb      	ldr	r3, [r7, #24]
 8009d10:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8009d12:	4b2c      	ldr	r3, [pc, #176]	@ (8009dc4 <mem_malloc+0x1f0>)
 8009d14:	681a      	ldr	r2, [r3, #0]
 8009d16:	4b2f      	ldr	r3, [pc, #188]	@ (8009dd4 <mem_malloc+0x200>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	429a      	cmp	r2, r3
 8009d1c:	d00b      	beq.n	8009d36 <mem_malloc+0x162>
 8009d1e:	4b29      	ldr	r3, [pc, #164]	@ (8009dc4 <mem_malloc+0x1f0>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	791b      	ldrb	r3, [r3, #4]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d006      	beq.n	8009d36 <mem_malloc+0x162>
 8009d28:	4b27      	ldr	r3, [pc, #156]	@ (8009dc8 <mem_malloc+0x1f4>)
 8009d2a:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8009d2e:	492a      	ldr	r1, [pc, #168]	@ (8009dd8 <mem_malloc+0x204>)
 8009d30:	4827      	ldr	r0, [pc, #156]	@ (8009dd0 <mem_malloc+0x1fc>)
 8009d32:	f009 fc4d 	bl	80135d0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8009d36:	4822      	ldr	r0, [pc, #136]	@ (8009dc0 <mem_malloc+0x1ec>)
 8009d38:	f009 faff 	bl	801333a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8009d3c:	8bba      	ldrh	r2, [r7, #28]
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	4413      	add	r3, r2
 8009d42:	3308      	adds	r3, #8
 8009d44:	4a23      	ldr	r2, [pc, #140]	@ (8009dd4 <mem_malloc+0x200>)
 8009d46:	6812      	ldr	r2, [r2, #0]
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d906      	bls.n	8009d5a <mem_malloc+0x186>
 8009d4c:	4b1e      	ldr	r3, [pc, #120]	@ (8009dc8 <mem_malloc+0x1f4>)
 8009d4e:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8009d52:	4922      	ldr	r1, [pc, #136]	@ (8009ddc <mem_malloc+0x208>)
 8009d54:	481e      	ldr	r0, [pc, #120]	@ (8009dd0 <mem_malloc+0x1fc>)
 8009d56:	f009 fc3b 	bl	80135d0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	f003 0303 	and.w	r3, r3, #3
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d006      	beq.n	8009d72 <mem_malloc+0x19e>
 8009d64:	4b18      	ldr	r3, [pc, #96]	@ (8009dc8 <mem_malloc+0x1f4>)
 8009d66:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8009d6a:	491d      	ldr	r1, [pc, #116]	@ (8009de0 <mem_malloc+0x20c>)
 8009d6c:	4818      	ldr	r0, [pc, #96]	@ (8009dd0 <mem_malloc+0x1fc>)
 8009d6e:	f009 fc2f 	bl	80135d0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	f003 0303 	and.w	r3, r3, #3
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d006      	beq.n	8009d8a <mem_malloc+0x1b6>
 8009d7c:	4b12      	ldr	r3, [pc, #72]	@ (8009dc8 <mem_malloc+0x1f4>)
 8009d7e:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8009d82:	4918      	ldr	r1, [pc, #96]	@ (8009de4 <mem_malloc+0x210>)
 8009d84:	4812      	ldr	r0, [pc, #72]	@ (8009dd0 <mem_malloc+0x1fc>)
 8009d86:	f009 fc23 	bl	80135d0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	3308      	adds	r3, #8
 8009d8e:	e012      	b.n	8009db6 <mem_malloc+0x1e2>
         ptr = ptr_to_mem(ptr)->next) {
 8009d90:	8bfb      	ldrh	r3, [r7, #30]
 8009d92:	4618      	mov	r0, r3
 8009d94:	f7ff fc28 	bl	80095e8 <ptr_to_mem>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	881b      	ldrh	r3, [r3, #0]
 8009d9c:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009d9e:	8bfa      	ldrh	r2, [r7, #30]
 8009da0:	8bb9      	ldrh	r1, [r7, #28]
 8009da2:	f647 53e8 	movw	r3, #32232	@ 0x7de8
 8009da6:	1a5b      	subs	r3, r3, r1
 8009da8:	429a      	cmp	r2, r3
 8009daa:	f4ff af3e 	bcc.w	8009c2a <mem_malloc+0x56>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8009dae:	4804      	ldr	r0, [pc, #16]	@ (8009dc0 <mem_malloc+0x1ec>)
 8009db0:	f009 fac3 	bl	801333a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8009db4:	2300      	movs	r3, #0
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	3720      	adds	r7, #32
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}
 8009dbe:	bf00      	nop
 8009dc0:	24009aac 	.word	0x24009aac
 8009dc4:	24009ab0 	.word	0x24009ab0
 8009dc8:	0801465c 	.word	0x0801465c
 8009dcc:	08014820 	.word	0x08014820
 8009dd0:	080146a4 	.word	0x080146a4
 8009dd4:	24009aa8 	.word	0x24009aa8
 8009dd8:	08014834 	.word	0x08014834
 8009ddc:	08014850 	.word	0x08014850
 8009de0:	08014880 	.word	0x08014880
 8009de4:	080148b0 	.word	0x080148b0

08009de8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b085      	sub	sp, #20
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	689b      	ldr	r3, [r3, #8]
 8009df4:	2200      	movs	r2, #0
 8009df6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	685b      	ldr	r3, [r3, #4]
 8009dfc:	3303      	adds	r3, #3
 8009dfe:	f023 0303 	bic.w	r3, r3, #3
 8009e02:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8009e04:	2300      	movs	r3, #0
 8009e06:	60fb      	str	r3, [r7, #12]
 8009e08:	e011      	b.n	8009e2e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	689b      	ldr	r3, [r3, #8]
 8009e0e:	681a      	ldr	r2, [r3, #0]
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	689b      	ldr	r3, [r3, #8]
 8009e18:	68ba      	ldr	r2, [r7, #8]
 8009e1a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	881b      	ldrh	r3, [r3, #0]
 8009e20:	461a      	mov	r2, r3
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	4413      	add	r3, r2
 8009e26:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	3301      	adds	r3, #1
 8009e2c:	60fb      	str	r3, [r7, #12]
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	885b      	ldrh	r3, [r3, #2]
 8009e32:	461a      	mov	r2, r3
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	4293      	cmp	r3, r2
 8009e38:	dbe7      	blt.n	8009e0a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8009e3a:	bf00      	nop
 8009e3c:	bf00      	nop
 8009e3e:	3714      	adds	r7, #20
 8009e40:	46bd      	mov	sp, r7
 8009e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e46:	4770      	bx	lr

08009e48 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b082      	sub	sp, #8
 8009e4c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009e4e:	2300      	movs	r3, #0
 8009e50:	80fb      	strh	r3, [r7, #6]
 8009e52:	e009      	b.n	8009e68 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8009e54:	88fb      	ldrh	r3, [r7, #6]
 8009e56:	4a08      	ldr	r2, [pc, #32]	@ (8009e78 <memp_init+0x30>)
 8009e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	f7ff ffc3 	bl	8009de8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009e62:	88fb      	ldrh	r3, [r7, #6]
 8009e64:	3301      	adds	r3, #1
 8009e66:	80fb      	strh	r3, [r7, #6]
 8009e68:	88fb      	ldrh	r3, [r7, #6]
 8009e6a:	2b0c      	cmp	r3, #12
 8009e6c:	d9f2      	bls.n	8009e54 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8009e6e:	bf00      	nop
 8009e70:	bf00      	nop
 8009e72:	3708      	adds	r7, #8
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}
 8009e78:	080170e0 	.word	0x080170e0

08009e7c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b084      	sub	sp, #16
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8009e84:	f009 fa86 	bl	8013394 <sys_arch_protect>
 8009e88:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	689b      	ldr	r3, [r3, #8]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d015      	beq.n	8009ec4 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	689b      	ldr	r3, [r3, #8]
 8009e9c:	68ba      	ldr	r2, [r7, #8]
 8009e9e:	6812      	ldr	r2, [r2, #0]
 8009ea0:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	f003 0303 	and.w	r3, r3, #3
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d006      	beq.n	8009eba <do_memp_malloc_pool+0x3e>
 8009eac:	4b09      	ldr	r3, [pc, #36]	@ (8009ed4 <do_memp_malloc_pool+0x58>)
 8009eae:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8009eb2:	4909      	ldr	r1, [pc, #36]	@ (8009ed8 <do_memp_malloc_pool+0x5c>)
 8009eb4:	4809      	ldr	r0, [pc, #36]	@ (8009edc <do_memp_malloc_pool+0x60>)
 8009eb6:	f009 fb8b 	bl	80135d0 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8009eba:	68f8      	ldr	r0, [r7, #12]
 8009ebc:	f009 fa78 	bl	80133b0 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	e003      	b.n	8009ecc <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8009ec4:	68f8      	ldr	r0, [r7, #12]
 8009ec6:	f009 fa73 	bl	80133b0 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8009eca:	2300      	movs	r3, #0
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3710      	adds	r7, #16
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}
 8009ed4:	080148d4 	.word	0x080148d4
 8009ed8:	08014904 	.word	0x08014904
 8009edc:	08014928 	.word	0x08014928

08009ee0 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b082      	sub	sp, #8
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d106      	bne.n	8009efc <memp_malloc_pool+0x1c>
 8009eee:	4b0a      	ldr	r3, [pc, #40]	@ (8009f18 <memp_malloc_pool+0x38>)
 8009ef0:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8009ef4:	4909      	ldr	r1, [pc, #36]	@ (8009f1c <memp_malloc_pool+0x3c>)
 8009ef6:	480a      	ldr	r0, [pc, #40]	@ (8009f20 <memp_malloc_pool+0x40>)
 8009ef8:	f009 fb6a 	bl	80135d0 <iprintf>
  if (desc == NULL) {
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d101      	bne.n	8009f06 <memp_malloc_pool+0x26>
    return NULL;
 8009f02:	2300      	movs	r3, #0
 8009f04:	e003      	b.n	8009f0e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f7ff ffb8 	bl	8009e7c <do_memp_malloc_pool>
 8009f0c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3708      	adds	r7, #8
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}
 8009f16:	bf00      	nop
 8009f18:	080148d4 	.word	0x080148d4
 8009f1c:	08014950 	.word	0x08014950
 8009f20:	08014928 	.word	0x08014928

08009f24 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b084      	sub	sp, #16
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8009f2e:	79fb      	ldrb	r3, [r7, #7]
 8009f30:	2b0c      	cmp	r3, #12
 8009f32:	d908      	bls.n	8009f46 <memp_malloc+0x22>
 8009f34:	4b0a      	ldr	r3, [pc, #40]	@ (8009f60 <memp_malloc+0x3c>)
 8009f36:	f240 1257 	movw	r2, #343	@ 0x157
 8009f3a:	490a      	ldr	r1, [pc, #40]	@ (8009f64 <memp_malloc+0x40>)
 8009f3c:	480a      	ldr	r0, [pc, #40]	@ (8009f68 <memp_malloc+0x44>)
 8009f3e:	f009 fb47 	bl	80135d0 <iprintf>
 8009f42:	2300      	movs	r3, #0
 8009f44:	e008      	b.n	8009f58 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8009f46:	79fb      	ldrb	r3, [r7, #7]
 8009f48:	4a08      	ldr	r2, [pc, #32]	@ (8009f6c <memp_malloc+0x48>)
 8009f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f7ff ff94 	bl	8009e7c <do_memp_malloc_pool>
 8009f54:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8009f56:	68fb      	ldr	r3, [r7, #12]
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3710      	adds	r7, #16
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}
 8009f60:	080148d4 	.word	0x080148d4
 8009f64:	08014964 	.word	0x08014964
 8009f68:	08014928 	.word	0x08014928
 8009f6c:	080170e0 	.word	0x080170e0

08009f70 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b084      	sub	sp, #16
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
 8009f78:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	f003 0303 	and.w	r3, r3, #3
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d006      	beq.n	8009f92 <do_memp_free_pool+0x22>
 8009f84:	4b0d      	ldr	r3, [pc, #52]	@ (8009fbc <do_memp_free_pool+0x4c>)
 8009f86:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8009f8a:	490d      	ldr	r1, [pc, #52]	@ (8009fc0 <do_memp_free_pool+0x50>)
 8009f8c:	480d      	ldr	r0, [pc, #52]	@ (8009fc4 <do_memp_free_pool+0x54>)
 8009f8e:	f009 fb1f 	bl	80135d0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8009f96:	f009 f9fd 	bl	8013394 <sys_arch_protect>
 8009f9a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	689b      	ldr	r3, [r3, #8]
 8009fa0:	681a      	ldr	r2, [r3, #0]
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	689b      	ldr	r3, [r3, #8]
 8009faa:	68fa      	ldr	r2, [r7, #12]
 8009fac:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8009fae:	68b8      	ldr	r0, [r7, #8]
 8009fb0:	f009 f9fe 	bl	80133b0 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8009fb4:	bf00      	nop
 8009fb6:	3710      	adds	r7, #16
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}
 8009fbc:	080148d4 	.word	0x080148d4
 8009fc0:	08014984 	.word	0x08014984
 8009fc4:	08014928 	.word	0x08014928

08009fc8 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b082      	sub	sp, #8
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
 8009fd0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d106      	bne.n	8009fe6 <memp_free_pool+0x1e>
 8009fd8:	4b0a      	ldr	r3, [pc, #40]	@ (800a004 <memp_free_pool+0x3c>)
 8009fda:	f240 1295 	movw	r2, #405	@ 0x195
 8009fde:	490a      	ldr	r1, [pc, #40]	@ (800a008 <memp_free_pool+0x40>)
 8009fe0:	480a      	ldr	r0, [pc, #40]	@ (800a00c <memp_free_pool+0x44>)
 8009fe2:	f009 faf5 	bl	80135d0 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d007      	beq.n	8009ffc <memp_free_pool+0x34>
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d004      	beq.n	8009ffc <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8009ff2:	6839      	ldr	r1, [r7, #0]
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f7ff ffbb 	bl	8009f70 <do_memp_free_pool>
 8009ffa:	e000      	b.n	8009ffe <memp_free_pool+0x36>
    return;
 8009ffc:	bf00      	nop
}
 8009ffe:	3708      	adds	r7, #8
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}
 800a004:	080148d4 	.word	0x080148d4
 800a008:	08014950 	.word	0x08014950
 800a00c:	08014928 	.word	0x08014928

0800a010 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b082      	sub	sp, #8
 800a014:	af00      	add	r7, sp, #0
 800a016:	4603      	mov	r3, r0
 800a018:	6039      	str	r1, [r7, #0]
 800a01a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800a01c:	79fb      	ldrb	r3, [r7, #7]
 800a01e:	2b0c      	cmp	r3, #12
 800a020:	d907      	bls.n	800a032 <memp_free+0x22>
 800a022:	4b0c      	ldr	r3, [pc, #48]	@ (800a054 <memp_free+0x44>)
 800a024:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800a028:	490b      	ldr	r1, [pc, #44]	@ (800a058 <memp_free+0x48>)
 800a02a:	480c      	ldr	r0, [pc, #48]	@ (800a05c <memp_free+0x4c>)
 800a02c:	f009 fad0 	bl	80135d0 <iprintf>
 800a030:	e00c      	b.n	800a04c <memp_free+0x3c>

  if (mem == NULL) {
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d008      	beq.n	800a04a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800a038:	79fb      	ldrb	r3, [r7, #7]
 800a03a:	4a09      	ldr	r2, [pc, #36]	@ (800a060 <memp_free+0x50>)
 800a03c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a040:	6839      	ldr	r1, [r7, #0]
 800a042:	4618      	mov	r0, r3
 800a044:	f7ff ff94 	bl	8009f70 <do_memp_free_pool>
 800a048:	e000      	b.n	800a04c <memp_free+0x3c>
    return;
 800a04a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800a04c:	3708      	adds	r7, #8
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}
 800a052:	bf00      	nop
 800a054:	080148d4 	.word	0x080148d4
 800a058:	080149a4 	.word	0x080149a4
 800a05c:	08014928 	.word	0x08014928
 800a060:	080170e0 	.word	0x080170e0

0800a064 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800a064:	b480      	push	{r7}
 800a066:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800a068:	bf00      	nop
 800a06a:	46bd      	mov	sp, r7
 800a06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a070:	4770      	bx	lr
	...

0800a074 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b086      	sub	sp, #24
 800a078:	af00      	add	r7, sp, #0
 800a07a:	60f8      	str	r0, [r7, #12]
 800a07c:	60b9      	str	r1, [r7, #8]
 800a07e:	607a      	str	r2, [r7, #4]
 800a080:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT_CORE_LOCKED();
 800a082:	f7fb f939 	bl	80052f8 <sys_check_core_locking>
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d108      	bne.n	800a09e <netif_add+0x2a>
 800a08c:	4b57      	ldr	r3, [pc, #348]	@ (800a1ec <netif_add+0x178>)
 800a08e:	f240 1227 	movw	r2, #295	@ 0x127
 800a092:	4957      	ldr	r1, [pc, #348]	@ (800a1f0 <netif_add+0x17c>)
 800a094:	4857      	ldr	r0, [pc, #348]	@ (800a1f4 <netif_add+0x180>)
 800a096:	f009 fa9b 	bl	80135d0 <iprintf>
 800a09a:	2300      	movs	r3, #0
 800a09c:	e0a2      	b.n	800a1e4 <netif_add+0x170>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800a09e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d108      	bne.n	800a0b6 <netif_add+0x42>
 800a0a4:	4b51      	ldr	r3, [pc, #324]	@ (800a1ec <netif_add+0x178>)
 800a0a6:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800a0aa:	4953      	ldr	r1, [pc, #332]	@ (800a1f8 <netif_add+0x184>)
 800a0ac:	4851      	ldr	r0, [pc, #324]	@ (800a1f4 <netif_add+0x180>)
 800a0ae:	f009 fa8f 	bl	80135d0 <iprintf>
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	e096      	b.n	800a1e4 <netif_add+0x170>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d101      	bne.n	800a0c0 <netif_add+0x4c>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800a0bc:	4b4f      	ldr	r3, [pc, #316]	@ (800a1fc <netif_add+0x188>)
 800a0be:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d101      	bne.n	800a0ca <netif_add+0x56>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800a0c6:	4b4d      	ldr	r3, [pc, #308]	@ (800a1fc <netif_add+0x188>)
 800a0c8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d101      	bne.n	800a0d4 <netif_add+0x60>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800a0d0:	4b4a      	ldr	r3, [pc, #296]	@ (800a1fc <netif_add+0x188>)
 800a0d2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	4a45      	ldr	r2, [pc, #276]	@ (800a200 <netif_add+0x18c>)
 800a0ea:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	6a3a      	ldr	r2, [r7, #32]
 800a104:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800a106:	4b3f      	ldr	r3, [pc, #252]	@ (800a204 <netif_add+0x190>)
 800a108:	781a      	ldrb	r2, [r3, #0]
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a114:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	687a      	ldr	r2, [r7, #4]
 800a11a:	68b9      	ldr	r1, [r7, #8]
 800a11c:	68f8      	ldr	r0, [r7, #12]
 800a11e:	f000 f913 	bl	800a348 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800a122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a124:	68f8      	ldr	r0, [r7, #12]
 800a126:	4798      	blx	r3
 800a128:	4603      	mov	r3, r0
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d001      	beq.n	800a132 <netif_add+0xbe>
    return NULL;
 800a12e:	2300      	movs	r3, #0
 800a130:	e058      	b.n	800a1e4 <netif_add+0x170>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a138:	2bff      	cmp	r3, #255	@ 0xff
 800a13a:	d103      	bne.n	800a144 <netif_add+0xd0>
        netif->num = 0;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	2200      	movs	r2, #0
 800a140:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800a144:	2300      	movs	r3, #0
 800a146:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a148:	4b2f      	ldr	r3, [pc, #188]	@ (800a208 <netif_add+0x194>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	617b      	str	r3, [r7, #20]
 800a14e:	e02b      	b.n	800a1a8 <netif_add+0x134>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800a150:	697a      	ldr	r2, [r7, #20]
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	429a      	cmp	r2, r3
 800a156:	d106      	bne.n	800a166 <netif_add+0xf2>
 800a158:	4b24      	ldr	r3, [pc, #144]	@ (800a1ec <netif_add+0x178>)
 800a15a:	f240 128b 	movw	r2, #395	@ 0x18b
 800a15e:	492b      	ldr	r1, [pc, #172]	@ (800a20c <netif_add+0x198>)
 800a160:	4824      	ldr	r0, [pc, #144]	@ (800a1f4 <netif_add+0x180>)
 800a162:	f009 fa35 	bl	80135d0 <iprintf>
        num_netifs++;
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	3301      	adds	r3, #1
 800a16a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	2bff      	cmp	r3, #255	@ 0xff
 800a170:	dd06      	ble.n	800a180 <netif_add+0x10c>
 800a172:	4b1e      	ldr	r3, [pc, #120]	@ (800a1ec <netif_add+0x178>)
 800a174:	f240 128d 	movw	r2, #397	@ 0x18d
 800a178:	4925      	ldr	r1, [pc, #148]	@ (800a210 <netif_add+0x19c>)
 800a17a:	481e      	ldr	r0, [pc, #120]	@ (800a1f4 <netif_add+0x180>)
 800a17c:	f009 fa28 	bl	80135d0 <iprintf>
        if (netif2->num == netif->num) {
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a18c:	429a      	cmp	r2, r3
 800a18e:	d108      	bne.n	800a1a2 <netif_add+0x12e>
          netif->num++;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a196:	3301      	adds	r3, #1
 800a198:	b2da      	uxtb	r2, r3
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800a1a0:	e005      	b.n	800a1ae <netif_add+0x13a>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a1a2:	697b      	ldr	r3, [r7, #20]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	617b      	str	r3, [r7, #20]
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d1d0      	bne.n	800a150 <netif_add+0xdc>
        }
      }
    } while (netif2 != NULL);
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d1be      	bne.n	800a132 <netif_add+0xbe>
  }
  if (netif->num == 254) {
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a1ba:	2bfe      	cmp	r3, #254	@ 0xfe
 800a1bc:	d103      	bne.n	800a1c6 <netif_add+0x152>
    netif_num = 0;
 800a1be:	4b11      	ldr	r3, [pc, #68]	@ (800a204 <netif_add+0x190>)
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	701a      	strb	r2, [r3, #0]
 800a1c4:	e006      	b.n	800a1d4 <netif_add+0x160>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a1cc:	3301      	adds	r3, #1
 800a1ce:	b2da      	uxtb	r2, r3
 800a1d0:	4b0c      	ldr	r3, [pc, #48]	@ (800a204 <netif_add+0x190>)
 800a1d2:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800a1d4:	4b0c      	ldr	r3, [pc, #48]	@ (800a208 <netif_add+0x194>)
 800a1d6:	681a      	ldr	r2, [r3, #0]
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800a1dc:	4a0a      	ldr	r2, [pc, #40]	@ (800a208 <netif_add+0x194>)
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3718      	adds	r7, #24
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}
 800a1ec:	080149c0 	.word	0x080149c0
 800a1f0:	08014a54 	.word	0x08014a54
 800a1f4:	08014a10 	.word	0x08014a10
 800a1f8:	08014a70 	.word	0x08014a70
 800a1fc:	08017154 	.word	0x08017154
 800a200:	0800a637 	.word	0x0800a637
 800a204:	24010548 	.word	0x24010548
 800a208:	24010540 	.word	0x24010540
 800a20c:	08014a94 	.word	0x08014a94
 800a210:	08014aa8 	.word	0x08014aa8

0800a214 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b082      	sub	sp, #8
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
 800a21c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800a21e:	6839      	ldr	r1, [r7, #0]
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f002 fb99 	bl	800c958 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800a226:	6839      	ldr	r1, [r7, #0]
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f006 fcb7 	bl	8010b9c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800a22e:	bf00      	nop
 800a230:	3708      	adds	r7, #8
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
	...

0800a238 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b086      	sub	sp, #24
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	60f8      	str	r0, [r7, #12]
 800a240:	60b9      	str	r1, [r7, #8]
 800a242:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d106      	bne.n	800a258 <netif_do_set_ipaddr+0x20>
 800a24a:	4b1d      	ldr	r3, [pc, #116]	@ (800a2c0 <netif_do_set_ipaddr+0x88>)
 800a24c:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800a250:	491c      	ldr	r1, [pc, #112]	@ (800a2c4 <netif_do_set_ipaddr+0x8c>)
 800a252:	481d      	ldr	r0, [pc, #116]	@ (800a2c8 <netif_do_set_ipaddr+0x90>)
 800a254:	f009 f9bc 	bl	80135d0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d106      	bne.n	800a26c <netif_do_set_ipaddr+0x34>
 800a25e:	4b18      	ldr	r3, [pc, #96]	@ (800a2c0 <netif_do_set_ipaddr+0x88>)
 800a260:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800a264:	4917      	ldr	r1, [pc, #92]	@ (800a2c4 <netif_do_set_ipaddr+0x8c>)
 800a266:	4818      	ldr	r0, [pc, #96]	@ (800a2c8 <netif_do_set_ipaddr+0x90>)
 800a268:	f009 f9b2 	bl	80135d0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	681a      	ldr	r2, [r3, #0]
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	3304      	adds	r3, #4
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	429a      	cmp	r2, r3
 800a278:	d01c      	beq.n	800a2b4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	3304      	adds	r3, #4
 800a284:	681a      	ldr	r2, [r3, #0]
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800a28a:	f107 0314 	add.w	r3, r7, #20
 800a28e:	4619      	mov	r1, r3
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f7ff ffbf 	bl	800a214 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d002      	beq.n	800a2a2 <netif_do_set_ipaddr+0x6a>
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	e000      	b.n	800a2a4 <netif_do_set_ipaddr+0x6c>
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	68fa      	ldr	r2, [r7, #12]
 800a2a6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800a2a8:	2101      	movs	r1, #1
 800a2aa:	68f8      	ldr	r0, [r7, #12]
 800a2ac:	f000 f8d6 	bl	800a45c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	e000      	b.n	800a2b6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800a2b4:	2300      	movs	r3, #0
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3718      	adds	r7, #24
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
 800a2be:	bf00      	nop
 800a2c0:	080149c0 	.word	0x080149c0
 800a2c4:	08014ad8 	.word	0x08014ad8
 800a2c8:	08014a10 	.word	0x08014a10

0800a2cc <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b085      	sub	sp, #20
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	60f8      	str	r0, [r7, #12]
 800a2d4:	60b9      	str	r1, [r7, #8]
 800a2d6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	681a      	ldr	r2, [r3, #0]
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	3308      	adds	r3, #8
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	429a      	cmp	r2, r3
 800a2e4:	d00a      	beq.n	800a2fc <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d002      	beq.n	800a2f2 <netif_do_set_netmask+0x26>
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	e000      	b.n	800a2f4 <netif_do_set_netmask+0x28>
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	68fa      	ldr	r2, [r7, #12]
 800a2f6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	e000      	b.n	800a2fe <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800a2fc:	2300      	movs	r3, #0
}
 800a2fe:	4618      	mov	r0, r3
 800a300:	3714      	adds	r7, #20
 800a302:	46bd      	mov	sp, r7
 800a304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a308:	4770      	bx	lr

0800a30a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800a30a:	b480      	push	{r7}
 800a30c:	b085      	sub	sp, #20
 800a30e:	af00      	add	r7, sp, #0
 800a310:	60f8      	str	r0, [r7, #12]
 800a312:	60b9      	str	r1, [r7, #8]
 800a314:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	681a      	ldr	r2, [r3, #0]
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	330c      	adds	r3, #12
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	429a      	cmp	r2, r3
 800a322:	d00a      	beq.n	800a33a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d002      	beq.n	800a330 <netif_do_set_gw+0x26>
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	e000      	b.n	800a332 <netif_do_set_gw+0x28>
 800a330:	2300      	movs	r3, #0
 800a332:	68fa      	ldr	r2, [r7, #12]
 800a334:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800a336:	2301      	movs	r3, #1
 800a338:	e000      	b.n	800a33c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800a33a:	2300      	movs	r3, #0
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	3714      	adds	r7, #20
 800a340:	46bd      	mov	sp, r7
 800a342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a346:	4770      	bx	lr

0800a348 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b088      	sub	sp, #32
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	60f8      	str	r0, [r7, #12]
 800a350:	60b9      	str	r1, [r7, #8]
 800a352:	607a      	str	r2, [r7, #4]
 800a354:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800a356:	2300      	movs	r3, #0
 800a358:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800a35a:	2300      	movs	r3, #0
 800a35c:	61bb      	str	r3, [r7, #24]
#endif
  ip_addr_t old_addr;
  int remove;

  LWIP_ASSERT_CORE_LOCKED();
 800a35e:	f7fa ffcb 	bl	80052f8 <sys_check_core_locking>

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d101      	bne.n	800a36c <netif_set_addr+0x24>
    ipaddr = IP4_ADDR_ANY4;
 800a368:	4b1c      	ldr	r3, [pc, #112]	@ (800a3dc <netif_set_addr+0x94>)
 800a36a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d101      	bne.n	800a376 <netif_set_addr+0x2e>
    netmask = IP4_ADDR_ANY4;
 800a372:	4b1a      	ldr	r3, [pc, #104]	@ (800a3dc <netif_set_addr+0x94>)
 800a374:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d101      	bne.n	800a380 <netif_set_addr+0x38>
    gw = IP4_ADDR_ANY4;
 800a37c:	4b17      	ldr	r3, [pc, #92]	@ (800a3dc <netif_set_addr+0x94>)
 800a37e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d003      	beq.n	800a38e <netif_set_addr+0x46>
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d101      	bne.n	800a392 <netif_set_addr+0x4a>
 800a38e:	2301      	movs	r3, #1
 800a390:	e000      	b.n	800a394 <netif_set_addr+0x4c>
 800a392:	2300      	movs	r3, #0
 800a394:	617b      	str	r3, [r7, #20]
  if (remove) {
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d006      	beq.n	800a3aa <netif_set_addr+0x62>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a39c:	f107 0310 	add.w	r3, r7, #16
 800a3a0:	461a      	mov	r2, r3
 800a3a2:	68b9      	ldr	r1, [r7, #8]
 800a3a4:	68f8      	ldr	r0, [r7, #12]
 800a3a6:	f7ff ff47 	bl	800a238 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800a3aa:	69fa      	ldr	r2, [r7, #28]
 800a3ac:	6879      	ldr	r1, [r7, #4]
 800a3ae:	68f8      	ldr	r0, [r7, #12]
 800a3b0:	f7ff ff8c 	bl	800a2cc <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800a3b4:	69ba      	ldr	r2, [r7, #24]
 800a3b6:	6839      	ldr	r1, [r7, #0]
 800a3b8:	68f8      	ldr	r0, [r7, #12]
 800a3ba:	f7ff ffa6 	bl	800a30a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800a3be:	697b      	ldr	r3, [r7, #20]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d106      	bne.n	800a3d2 <netif_set_addr+0x8a>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a3c4:	f107 0310 	add.w	r3, r7, #16
 800a3c8:	461a      	mov	r2, r3
 800a3ca:	68b9      	ldr	r1, [r7, #8]
 800a3cc:	68f8      	ldr	r0, [r7, #12]
 800a3ce:	f7ff ff33 	bl	800a238 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800a3d2:	bf00      	nop
 800a3d4:	3720      	adds	r7, #32
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd80      	pop	{r7, pc}
 800a3da:	bf00      	nop
 800a3dc:	08017154 	.word	0x08017154

0800a3e0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b082      	sub	sp, #8
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 800a3e8:	f7fa ff86 	bl	80052f8 <sys_check_core_locking>
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800a3ec:	4a03      	ldr	r2, [pc, #12]	@ (800a3fc <netif_set_default+0x1c>)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800a3f2:	bf00      	nop
 800a3f4:	3708      	adds	r7, #8
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}
 800a3fa:	bf00      	nop
 800a3fc:	24010544 	.word	0x24010544

0800a400 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b082      	sub	sp, #8
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 800a408:	f7fa ff76 	bl	80052f8 <sys_check_core_locking>

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d107      	bne.n	800a422 <netif_set_up+0x22>
 800a412:	4b0f      	ldr	r3, [pc, #60]	@ (800a450 <netif_set_up+0x50>)
 800a414:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800a418:	490e      	ldr	r1, [pc, #56]	@ (800a454 <netif_set_up+0x54>)
 800a41a:	480f      	ldr	r0, [pc, #60]	@ (800a458 <netif_set_up+0x58>)
 800a41c:	f009 f8d8 	bl	80135d0 <iprintf>
 800a420:	e013      	b.n	800a44a <netif_set_up+0x4a>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a428:	f003 0301 	and.w	r3, r3, #1
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d10c      	bne.n	800a44a <netif_set_up+0x4a>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a436:	f043 0301 	orr.w	r3, r3, #1
 800a43a:	b2da      	uxtb	r2, r3
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a442:	2103      	movs	r1, #3
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f000 f809 	bl	800a45c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800a44a:	3708      	adds	r7, #8
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}
 800a450:	080149c0 	.word	0x080149c0
 800a454:	08014b48 	.word	0x08014b48
 800a458:	08014a10 	.word	0x08014a10

0800a45c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b082      	sub	sp, #8
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
 800a464:	460b      	mov	r3, r1
 800a466:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d106      	bne.n	800a47c <netif_issue_reports+0x20>
 800a46e:	4b18      	ldr	r3, [pc, #96]	@ (800a4d0 <netif_issue_reports+0x74>)
 800a470:	f240 326d 	movw	r2, #877	@ 0x36d
 800a474:	4917      	ldr	r1, [pc, #92]	@ (800a4d4 <netif_issue_reports+0x78>)
 800a476:	4818      	ldr	r0, [pc, #96]	@ (800a4d8 <netif_issue_reports+0x7c>)
 800a478:	f009 f8aa 	bl	80135d0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a482:	f003 0304 	and.w	r3, r3, #4
 800a486:	2b00      	cmp	r3, #0
 800a488:	d01e      	beq.n	800a4c8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a490:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800a494:	2b00      	cmp	r3, #0
 800a496:	d017      	beq.n	800a4c8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a498:	78fb      	ldrb	r3, [r7, #3]
 800a49a:	f003 0301 	and.w	r3, r3, #1
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d013      	beq.n	800a4ca <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	3304      	adds	r3, #4
 800a4a6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d00e      	beq.n	800a4ca <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a4b2:	f003 0308 	and.w	r3, r3, #8
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d007      	beq.n	800a4ca <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	3304      	adds	r3, #4
 800a4be:	4619      	mov	r1, r3
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f007 fad9 	bl	8011a78 <etharp_request>
 800a4c6:	e000      	b.n	800a4ca <netif_issue_reports+0x6e>
    return;
 800a4c8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800a4ca:	3708      	adds	r7, #8
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}
 800a4d0:	080149c0 	.word	0x080149c0
 800a4d4:	08014b64 	.word	0x08014b64
 800a4d8:	08014a10 	.word	0x08014a10

0800a4dc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b082      	sub	sp, #8
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 800a4e4:	f7fa ff08 	bl	80052f8 <sys_check_core_locking>

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d107      	bne.n	800a4fe <netif_set_down+0x22>
 800a4ee:	4b12      	ldr	r3, [pc, #72]	@ (800a538 <netif_set_down+0x5c>)
 800a4f0:	f240 329b 	movw	r2, #923	@ 0x39b
 800a4f4:	4911      	ldr	r1, [pc, #68]	@ (800a53c <netif_set_down+0x60>)
 800a4f6:	4812      	ldr	r0, [pc, #72]	@ (800a540 <netif_set_down+0x64>)
 800a4f8:	f009 f86a 	bl	80135d0 <iprintf>
 800a4fc:	e019      	b.n	800a532 <netif_set_down+0x56>

  if (netif->flags & NETIF_FLAG_UP) {
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a504:	f003 0301 	and.w	r3, r3, #1
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d012      	beq.n	800a532 <netif_set_down+0x56>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a512:	f023 0301 	bic.w	r3, r3, #1
 800a516:	b2da      	uxtb	r2, r3
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a524:	f003 0308 	and.w	r3, r3, #8
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d002      	beq.n	800a532 <netif_set_down+0x56>
      etharp_cleanup_netif(netif);
 800a52c:	6878      	ldr	r0, [r7, #4]
 800a52e:	f006 fe5d 	bl	80111ec <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800a532:	3708      	adds	r7, #8
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}
 800a538:	080149c0 	.word	0x080149c0
 800a53c:	08014b88 	.word	0x08014b88
 800a540:	08014a10 	.word	0x08014a10

0800a544 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b082      	sub	sp, #8
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 800a54c:	f7fa fed4 	bl	80052f8 <sys_check_core_locking>

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d107      	bne.n	800a566 <netif_set_link_up+0x22>
 800a556:	4b13      	ldr	r3, [pc, #76]	@ (800a5a4 <netif_set_link_up+0x60>)
 800a558:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800a55c:	4912      	ldr	r1, [pc, #72]	@ (800a5a8 <netif_set_link_up+0x64>)
 800a55e:	4813      	ldr	r0, [pc, #76]	@ (800a5ac <netif_set_link_up+0x68>)
 800a560:	f009 f836 	bl	80135d0 <iprintf>
 800a564:	e01b      	b.n	800a59e <netif_set_link_up+0x5a>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a56c:	f003 0304 	and.w	r3, r3, #4
 800a570:	2b00      	cmp	r3, #0
 800a572:	d114      	bne.n	800a59e <netif_set_link_up+0x5a>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a57a:	f043 0304 	orr.w	r3, r3, #4
 800a57e:	b2da      	uxtb	r2, r3
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a586:	2103      	movs	r1, #3
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f7ff ff67 	bl	800a45c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	69db      	ldr	r3, [r3, #28]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d003      	beq.n	800a59e <netif_set_link_up+0x5a>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	69db      	ldr	r3, [r3, #28]
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800a59e:	3708      	adds	r7, #8
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}
 800a5a4:	080149c0 	.word	0x080149c0
 800a5a8:	08014ba8 	.word	0x08014ba8
 800a5ac:	08014a10 	.word	0x08014a10

0800a5b0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b082      	sub	sp, #8
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 800a5b8:	f7fa fe9e 	bl	80052f8 <sys_check_core_locking>

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d107      	bne.n	800a5d2 <netif_set_link_down+0x22>
 800a5c2:	4b11      	ldr	r3, [pc, #68]	@ (800a608 <netif_set_link_down+0x58>)
 800a5c4:	f240 4206 	movw	r2, #1030	@ 0x406
 800a5c8:	4910      	ldr	r1, [pc, #64]	@ (800a60c <netif_set_link_down+0x5c>)
 800a5ca:	4811      	ldr	r0, [pc, #68]	@ (800a610 <netif_set_link_down+0x60>)
 800a5cc:	f009 f800 	bl	80135d0 <iprintf>
 800a5d0:	e017      	b.n	800a602 <netif_set_link_down+0x52>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a5d8:	f003 0304 	and.w	r3, r3, #4
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d010      	beq.n	800a602 <netif_set_link_down+0x52>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a5e6:	f023 0304 	bic.w	r3, r3, #4
 800a5ea:	b2da      	uxtb	r2, r3
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	69db      	ldr	r3, [r3, #28]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d003      	beq.n	800a602 <netif_set_link_down+0x52>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	69db      	ldr	r3, [r3, #28]
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800a602:	3708      	adds	r7, #8
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}
 800a608:	080149c0 	.word	0x080149c0
 800a60c:	08014bcc 	.word	0x08014bcc
 800a610:	08014a10 	.word	0x08014a10

0800a614 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b082      	sub	sp, #8
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
 800a61c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
 800a61e:	f7fa fe6b 	bl	80052f8 <sys_check_core_locking>

  if (netif) {
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d002      	beq.n	800a62e <netif_set_link_callback+0x1a>
    netif->link_callback = link_callback;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	683a      	ldr	r2, [r7, #0]
 800a62c:	61da      	str	r2, [r3, #28]
  }
}
 800a62e:	bf00      	nop
 800a630:	3708      	adds	r7, #8
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}

0800a636 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800a636:	b480      	push	{r7}
 800a638:	b085      	sub	sp, #20
 800a63a:	af00      	add	r7, sp, #0
 800a63c:	60f8      	str	r0, [r7, #12]
 800a63e:	60b9      	str	r1, [r7, #8]
 800a640:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800a642:	f06f 030b 	mvn.w	r3, #11
}
 800a646:	4618      	mov	r0, r3
 800a648:	3714      	adds	r7, #20
 800a64a:	46bd      	mov	sp, r7
 800a64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a650:	4770      	bx	lr
	...

0800a654 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b084      	sub	sp, #16
 800a658:	af00      	add	r7, sp, #0
 800a65a:	4603      	mov	r3, r0
 800a65c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();
 800a65e:	f7fa fe4b 	bl	80052f8 <sys_check_core_locking>

  if (idx != NETIF_NO_INDEX) {
 800a662:	79fb      	ldrb	r3, [r7, #7]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d013      	beq.n	800a690 <netif_get_by_index+0x3c>
    NETIF_FOREACH(netif) {
 800a668:	4b0c      	ldr	r3, [pc, #48]	@ (800a69c <netif_get_by_index+0x48>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	60fb      	str	r3, [r7, #12]
 800a66e:	e00c      	b.n	800a68a <netif_get_by_index+0x36>
      if (idx == netif_get_index(netif)) {
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a676:	3301      	adds	r3, #1
 800a678:	b2db      	uxtb	r3, r3
 800a67a:	79fa      	ldrb	r2, [r7, #7]
 800a67c:	429a      	cmp	r2, r3
 800a67e:	d101      	bne.n	800a684 <netif_get_by_index+0x30>
        return netif; /* found! */
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	e006      	b.n	800a692 <netif_get_by_index+0x3e>
    NETIF_FOREACH(netif) {
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	60fb      	str	r3, [r7, #12]
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d1ef      	bne.n	800a670 <netif_get_by_index+0x1c>
      }
    }
  }

  return NULL;
 800a690:	2300      	movs	r3, #0
}
 800a692:	4618      	mov	r0, r3
 800a694:	3710      	adds	r7, #16
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}
 800a69a:	bf00      	nop
 800a69c:	24010540 	.word	0x24010540

0800a6a0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b082      	sub	sp, #8
 800a6a4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800a6a6:	f008 fe75 	bl	8013394 <sys_arch_protect>
 800a6aa:	6038      	str	r0, [r7, #0]
 800a6ac:	4b0d      	ldr	r3, [pc, #52]	@ (800a6e4 <pbuf_free_ooseq+0x44>)
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	701a      	strb	r2, [r3, #0]
 800a6b2:	6838      	ldr	r0, [r7, #0]
 800a6b4:	f008 fe7c 	bl	80133b0 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800a6b8:	4b0b      	ldr	r3, [pc, #44]	@ (800a6e8 <pbuf_free_ooseq+0x48>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	607b      	str	r3, [r7, #4]
 800a6be:	e00a      	b.n	800a6d6 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d003      	beq.n	800a6d0 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	f002 f983 	bl	800c9d4 <tcp_free_ooseq>
      return;
 800a6ce:	e005      	b.n	800a6dc <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	68db      	ldr	r3, [r3, #12]
 800a6d4:	607b      	str	r3, [r7, #4]
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d1f1      	bne.n	800a6c0 <pbuf_free_ooseq+0x20>
    }
  }
}
 800a6dc:	3708      	adds	r7, #8
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}
 800a6e2:	bf00      	nop
 800a6e4:	24010549 	.word	0x24010549
 800a6e8:	24010558 	.word	0x24010558

0800a6ec <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b082      	sub	sp, #8
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800a6f4:	f7ff ffd4 	bl	800a6a0 <pbuf_free_ooseq>
}
 800a6f8:	bf00      	nop
 800a6fa:	3708      	adds	r7, #8
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}

0800a700 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b082      	sub	sp, #8
 800a704:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800a706:	f008 fe45 	bl	8013394 <sys_arch_protect>
 800a70a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800a70c:	4b0f      	ldr	r3, [pc, #60]	@ (800a74c <pbuf_pool_is_empty+0x4c>)
 800a70e:	781b      	ldrb	r3, [r3, #0]
 800a710:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800a712:	4b0e      	ldr	r3, [pc, #56]	@ (800a74c <pbuf_pool_is_empty+0x4c>)
 800a714:	2201      	movs	r2, #1
 800a716:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f008 fe49 	bl	80133b0 <sys_arch_unprotect>

  if (!queued) {
 800a71e:	78fb      	ldrb	r3, [r7, #3]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d10f      	bne.n	800a744 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800a724:	2100      	movs	r1, #0
 800a726:	480a      	ldr	r0, [pc, #40]	@ (800a750 <pbuf_pool_is_empty+0x50>)
 800a728:	f7fe fdd2 	bl	80092d0 <tcpip_try_callback>
 800a72c:	4603      	mov	r3, r0
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d008      	beq.n	800a744 <pbuf_pool_is_empty+0x44>
 800a732:	f008 fe2f 	bl	8013394 <sys_arch_protect>
 800a736:	6078      	str	r0, [r7, #4]
 800a738:	4b04      	ldr	r3, [pc, #16]	@ (800a74c <pbuf_pool_is_empty+0x4c>)
 800a73a:	2200      	movs	r2, #0
 800a73c:	701a      	strb	r2, [r3, #0]
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f008 fe36 	bl	80133b0 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800a744:	bf00      	nop
 800a746:	3708      	adds	r7, #8
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}
 800a74c:	24010549 	.word	0x24010549
 800a750:	0800a6ed 	.word	0x0800a6ed

0800a754 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800a754:	b480      	push	{r7}
 800a756:	b085      	sub	sp, #20
 800a758:	af00      	add	r7, sp, #0
 800a75a:	60f8      	str	r0, [r7, #12]
 800a75c:	60b9      	str	r1, [r7, #8]
 800a75e:	4611      	mov	r1, r2
 800a760:	461a      	mov	r2, r3
 800a762:	460b      	mov	r3, r1
 800a764:	80fb      	strh	r3, [r7, #6]
 800a766:	4613      	mov	r3, r2
 800a768:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	2200      	movs	r2, #0
 800a76e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	68ba      	ldr	r2, [r7, #8]
 800a774:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	88fa      	ldrh	r2, [r7, #6]
 800a77a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	88ba      	ldrh	r2, [r7, #4]
 800a780:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800a782:	8b3b      	ldrh	r3, [r7, #24]
 800a784:	b2da      	uxtb	r2, r3
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	7f3a      	ldrb	r2, [r7, #28]
 800a78e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2201      	movs	r2, #1
 800a794:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	2200      	movs	r2, #0
 800a79a:	73da      	strb	r2, [r3, #15]
}
 800a79c:	bf00      	nop
 800a79e:	3714      	adds	r7, #20
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a6:	4770      	bx	lr

0800a7a8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b08c      	sub	sp, #48	@ 0x30
 800a7ac:	af02      	add	r7, sp, #8
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	71fb      	strb	r3, [r7, #7]
 800a7b2:	460b      	mov	r3, r1
 800a7b4:	80bb      	strh	r3, [r7, #4]
 800a7b6:	4613      	mov	r3, r2
 800a7b8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800a7ba:	79fb      	ldrb	r3, [r7, #7]
 800a7bc:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800a7be:	887b      	ldrh	r3, [r7, #2]
 800a7c0:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800a7c4:	f000 8082 	beq.w	800a8cc <pbuf_alloc+0x124>
 800a7c8:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800a7cc:	f300 80ca 	bgt.w	800a964 <pbuf_alloc+0x1bc>
 800a7d0:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800a7d4:	d010      	beq.n	800a7f8 <pbuf_alloc+0x50>
 800a7d6:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800a7da:	f300 80c3 	bgt.w	800a964 <pbuf_alloc+0x1bc>
 800a7de:	2b01      	cmp	r3, #1
 800a7e0:	d002      	beq.n	800a7e8 <pbuf_alloc+0x40>
 800a7e2:	2b41      	cmp	r3, #65	@ 0x41
 800a7e4:	f040 80be 	bne.w	800a964 <pbuf_alloc+0x1bc>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800a7e8:	887a      	ldrh	r2, [r7, #2]
 800a7ea:	88bb      	ldrh	r3, [r7, #4]
 800a7ec:	4619      	mov	r1, r3
 800a7ee:	2000      	movs	r0, #0
 800a7f0:	f000 f8d4 	bl	800a99c <pbuf_alloc_reference>
 800a7f4:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800a7f6:	e0bf      	b.n	800a978 <pbuf_alloc+0x1d0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800a800:	88bb      	ldrh	r3, [r7, #4]
 800a802:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800a804:	200c      	movs	r0, #12
 800a806:	f7ff fb8d 	bl	8009f24 <memp_malloc>
 800a80a:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800a80c:	693b      	ldr	r3, [r7, #16]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d109      	bne.n	800a826 <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 800a812:	f7ff ff75 	bl	800a700 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800a816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d002      	beq.n	800a822 <pbuf_alloc+0x7a>
            pbuf_free(p);
 800a81c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a81e:	f000 faab 	bl	800ad78 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800a822:	2300      	movs	r3, #0
 800a824:	e0a9      	b.n	800a97a <pbuf_alloc+0x1d2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a826:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a828:	3303      	adds	r3, #3
 800a82a:	b29b      	uxth	r3, r3
 800a82c:	f023 0303 	bic.w	r3, r3, #3
 800a830:	b29a      	uxth	r2, r3
 800a832:	f240 53ec 	movw	r3, #1516	@ 0x5ec
 800a836:	1a9b      	subs	r3, r3, r2
 800a838:	b29b      	uxth	r3, r3
 800a83a:	8b7a      	ldrh	r2, [r7, #26]
 800a83c:	4293      	cmp	r3, r2
 800a83e:	bf28      	it	cs
 800a840:	4613      	movcs	r3, r2
 800a842:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800a844:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a846:	3310      	adds	r3, #16
 800a848:	693a      	ldr	r2, [r7, #16]
 800a84a:	4413      	add	r3, r2
 800a84c:	3303      	adds	r3, #3
 800a84e:	f023 0303 	bic.w	r3, r3, #3
 800a852:	4618      	mov	r0, r3
 800a854:	89f9      	ldrh	r1, [r7, #14]
 800a856:	8b7a      	ldrh	r2, [r7, #26]
 800a858:	2300      	movs	r3, #0
 800a85a:	9301      	str	r3, [sp, #4]
 800a85c:	887b      	ldrh	r3, [r7, #2]
 800a85e:	9300      	str	r3, [sp, #0]
 800a860:	460b      	mov	r3, r1
 800a862:	4601      	mov	r1, r0
 800a864:	6938      	ldr	r0, [r7, #16]
 800a866:	f7ff ff75 	bl	800a754 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800a86a:	693b      	ldr	r3, [r7, #16]
 800a86c:	685b      	ldr	r3, [r3, #4]
 800a86e:	f003 0303 	and.w	r3, r3, #3
 800a872:	2b00      	cmp	r3, #0
 800a874:	d006      	beq.n	800a884 <pbuf_alloc+0xdc>
 800a876:	4b43      	ldr	r3, [pc, #268]	@ (800a984 <pbuf_alloc+0x1dc>)
 800a878:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a87c:	4942      	ldr	r1, [pc, #264]	@ (800a988 <pbuf_alloc+0x1e0>)
 800a87e:	4843      	ldr	r0, [pc, #268]	@ (800a98c <pbuf_alloc+0x1e4>)
 800a880:	f008 fea6 	bl	80135d0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800a884:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a886:	3303      	adds	r3, #3
 800a888:	f023 0303 	bic.w	r3, r3, #3
 800a88c:	f240 52ec 	movw	r2, #1516	@ 0x5ec
 800a890:	4293      	cmp	r3, r2
 800a892:	d106      	bne.n	800a8a2 <pbuf_alloc+0xfa>
 800a894:	4b3b      	ldr	r3, [pc, #236]	@ (800a984 <pbuf_alloc+0x1dc>)
 800a896:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800a89a:	493d      	ldr	r1, [pc, #244]	@ (800a990 <pbuf_alloc+0x1e8>)
 800a89c:	483b      	ldr	r0, [pc, #236]	@ (800a98c <pbuf_alloc+0x1e4>)
 800a89e:	f008 fe97 	bl	80135d0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800a8a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d102      	bne.n	800a8ae <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800a8a8:	693b      	ldr	r3, [r7, #16]
 800a8aa:	627b      	str	r3, [r7, #36]	@ 0x24
 800a8ac:	e002      	b.n	800a8b4 <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800a8ae:	69fb      	ldr	r3, [r7, #28]
 800a8b0:	693a      	ldr	r2, [r7, #16]
 800a8b2:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800a8b8:	8b7a      	ldrh	r2, [r7, #26]
 800a8ba:	89fb      	ldrh	r3, [r7, #14]
 800a8bc:	1ad3      	subs	r3, r2, r3
 800a8be:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800a8c4:	8b7b      	ldrh	r3, [r7, #26]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d19c      	bne.n	800a804 <pbuf_alloc+0x5c>
      break;
 800a8ca:	e055      	b.n	800a978 <pbuf_alloc+0x1d0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800a8cc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a8ce:	3303      	adds	r3, #3
 800a8d0:	b29b      	uxth	r3, r3
 800a8d2:	f023 0303 	bic.w	r3, r3, #3
 800a8d6:	b29a      	uxth	r2, r3
 800a8d8:	88bb      	ldrh	r3, [r7, #4]
 800a8da:	3303      	adds	r3, #3
 800a8dc:	b29b      	uxth	r3, r3
 800a8de:	f023 0303 	bic.w	r3, r3, #3
 800a8e2:	b29b      	uxth	r3, r3
 800a8e4:	4413      	add	r3, r2
 800a8e6:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800a8e8:	8b3b      	ldrh	r3, [r7, #24]
 800a8ea:	3310      	adds	r3, #16
 800a8ec:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a8ee:	8b3a      	ldrh	r2, [r7, #24]
 800a8f0:	88bb      	ldrh	r3, [r7, #4]
 800a8f2:	3303      	adds	r3, #3
 800a8f4:	f023 0303 	bic.w	r3, r3, #3
 800a8f8:	429a      	cmp	r2, r3
 800a8fa:	d306      	bcc.n	800a90a <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800a8fc:	8afa      	ldrh	r2, [r7, #22]
 800a8fe:	88bb      	ldrh	r3, [r7, #4]
 800a900:	3303      	adds	r3, #3
 800a902:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a906:	429a      	cmp	r2, r3
 800a908:	d201      	bcs.n	800a90e <pbuf_alloc+0x166>
        return NULL;
 800a90a:	2300      	movs	r3, #0
 800a90c:	e035      	b.n	800a97a <pbuf_alloc+0x1d2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800a90e:	8afb      	ldrh	r3, [r7, #22]
 800a910:	4618      	mov	r0, r3
 800a912:	f7ff f95f 	bl	8009bd4 <mem_malloc>
 800a916:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800a918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d101      	bne.n	800a922 <pbuf_alloc+0x17a>
        return NULL;
 800a91e:	2300      	movs	r3, #0
 800a920:	e02b      	b.n	800a97a <pbuf_alloc+0x1d2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800a922:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a924:	3310      	adds	r3, #16
 800a926:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a928:	4413      	add	r3, r2
 800a92a:	3303      	adds	r3, #3
 800a92c:	f023 0303 	bic.w	r3, r3, #3
 800a930:	4618      	mov	r0, r3
 800a932:	88b9      	ldrh	r1, [r7, #4]
 800a934:	88ba      	ldrh	r2, [r7, #4]
 800a936:	2300      	movs	r3, #0
 800a938:	9301      	str	r3, [sp, #4]
 800a93a:	887b      	ldrh	r3, [r7, #2]
 800a93c:	9300      	str	r3, [sp, #0]
 800a93e:	460b      	mov	r3, r1
 800a940:	4601      	mov	r1, r0
 800a942:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a944:	f7ff ff06 	bl	800a754 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800a948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a94a:	685b      	ldr	r3, [r3, #4]
 800a94c:	f003 0303 	and.w	r3, r3, #3
 800a950:	2b00      	cmp	r3, #0
 800a952:	d010      	beq.n	800a976 <pbuf_alloc+0x1ce>
 800a954:	4b0b      	ldr	r3, [pc, #44]	@ (800a984 <pbuf_alloc+0x1dc>)
 800a956:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800a95a:	490e      	ldr	r1, [pc, #56]	@ (800a994 <pbuf_alloc+0x1ec>)
 800a95c:	480b      	ldr	r0, [pc, #44]	@ (800a98c <pbuf_alloc+0x1e4>)
 800a95e:	f008 fe37 	bl	80135d0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800a962:	e008      	b.n	800a976 <pbuf_alloc+0x1ce>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800a964:	4b07      	ldr	r3, [pc, #28]	@ (800a984 <pbuf_alloc+0x1dc>)
 800a966:	f240 1227 	movw	r2, #295	@ 0x127
 800a96a:	490b      	ldr	r1, [pc, #44]	@ (800a998 <pbuf_alloc+0x1f0>)
 800a96c:	4807      	ldr	r0, [pc, #28]	@ (800a98c <pbuf_alloc+0x1e4>)
 800a96e:	f008 fe2f 	bl	80135d0 <iprintf>
      return NULL;
 800a972:	2300      	movs	r3, #0
 800a974:	e001      	b.n	800a97a <pbuf_alloc+0x1d2>
      break;
 800a976:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800a978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3728      	adds	r7, #40	@ 0x28
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}
 800a982:	bf00      	nop
 800a984:	08014bf0 	.word	0x08014bf0
 800a988:	08014c20 	.word	0x08014c20
 800a98c:	08014c50 	.word	0x08014c50
 800a990:	08014c78 	.word	0x08014c78
 800a994:	08014cac 	.word	0x08014cac
 800a998:	08014cd8 	.word	0x08014cd8

0800a99c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b086      	sub	sp, #24
 800a9a0:	af02      	add	r7, sp, #8
 800a9a2:	6078      	str	r0, [r7, #4]
 800a9a4:	460b      	mov	r3, r1
 800a9a6:	807b      	strh	r3, [r7, #2]
 800a9a8:	4613      	mov	r3, r2
 800a9aa:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800a9ac:	883b      	ldrh	r3, [r7, #0]
 800a9ae:	2b41      	cmp	r3, #65	@ 0x41
 800a9b0:	d009      	beq.n	800a9c6 <pbuf_alloc_reference+0x2a>
 800a9b2:	883b      	ldrh	r3, [r7, #0]
 800a9b4:	2b01      	cmp	r3, #1
 800a9b6:	d006      	beq.n	800a9c6 <pbuf_alloc_reference+0x2a>
 800a9b8:	4b0f      	ldr	r3, [pc, #60]	@ (800a9f8 <pbuf_alloc_reference+0x5c>)
 800a9ba:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800a9be:	490f      	ldr	r1, [pc, #60]	@ (800a9fc <pbuf_alloc_reference+0x60>)
 800a9c0:	480f      	ldr	r0, [pc, #60]	@ (800aa00 <pbuf_alloc_reference+0x64>)
 800a9c2:	f008 fe05 	bl	80135d0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800a9c6:	200b      	movs	r0, #11
 800a9c8:	f7ff faac 	bl	8009f24 <memp_malloc>
 800a9cc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d101      	bne.n	800a9d8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	e00b      	b.n	800a9f0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800a9d8:	8879      	ldrh	r1, [r7, #2]
 800a9da:	887a      	ldrh	r2, [r7, #2]
 800a9dc:	2300      	movs	r3, #0
 800a9de:	9301      	str	r3, [sp, #4]
 800a9e0:	883b      	ldrh	r3, [r7, #0]
 800a9e2:	9300      	str	r3, [sp, #0]
 800a9e4:	460b      	mov	r3, r1
 800a9e6:	6879      	ldr	r1, [r7, #4]
 800a9e8:	68f8      	ldr	r0, [r7, #12]
 800a9ea:	f7ff feb3 	bl	800a754 <pbuf_init_alloced_pbuf>
  return p;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	3710      	adds	r7, #16
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}
 800a9f8:	08014bf0 	.word	0x08014bf0
 800a9fc:	08014cf4 	.word	0x08014cf4
 800aa00:	08014c50 	.word	0x08014c50

0800aa04 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b088      	sub	sp, #32
 800aa08:	af02      	add	r7, sp, #8
 800aa0a:	607b      	str	r3, [r7, #4]
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	73fb      	strb	r3, [r7, #15]
 800aa10:	460b      	mov	r3, r1
 800aa12:	81bb      	strh	r3, [r7, #12]
 800aa14:	4613      	mov	r3, r2
 800aa16:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800aa18:	7bfb      	ldrb	r3, [r7, #15]
 800aa1a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800aa1c:	8a7b      	ldrh	r3, [r7, #18]
 800aa1e:	3303      	adds	r3, #3
 800aa20:	f023 0203 	bic.w	r2, r3, #3
 800aa24:	89bb      	ldrh	r3, [r7, #12]
 800aa26:	441a      	add	r2, r3
 800aa28:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	d901      	bls.n	800aa32 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	e018      	b.n	800aa64 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800aa32:	6a3b      	ldr	r3, [r7, #32]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d007      	beq.n	800aa48 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800aa38:	8a7b      	ldrh	r3, [r7, #18]
 800aa3a:	3303      	adds	r3, #3
 800aa3c:	f023 0303 	bic.w	r3, r3, #3
 800aa40:	6a3a      	ldr	r2, [r7, #32]
 800aa42:	4413      	add	r3, r2
 800aa44:	617b      	str	r3, [r7, #20]
 800aa46:	e001      	b.n	800aa4c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800aa48:	2300      	movs	r3, #0
 800aa4a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	89b9      	ldrh	r1, [r7, #12]
 800aa50:	89ba      	ldrh	r2, [r7, #12]
 800aa52:	2302      	movs	r3, #2
 800aa54:	9301      	str	r3, [sp, #4]
 800aa56:	897b      	ldrh	r3, [r7, #10]
 800aa58:	9300      	str	r3, [sp, #0]
 800aa5a:	460b      	mov	r3, r1
 800aa5c:	6979      	ldr	r1, [r7, #20]
 800aa5e:	f7ff fe79 	bl	800a754 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800aa62:	687b      	ldr	r3, [r7, #4]
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	3718      	adds	r7, #24
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}

0800aa6c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b084      	sub	sp, #16
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
 800aa74:	460b      	mov	r3, r1
 800aa76:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d106      	bne.n	800aa8c <pbuf_realloc+0x20>
 800aa7e:	4b3a      	ldr	r3, [pc, #232]	@ (800ab68 <pbuf_realloc+0xfc>)
 800aa80:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800aa84:	4939      	ldr	r1, [pc, #228]	@ (800ab6c <pbuf_realloc+0x100>)
 800aa86:	483a      	ldr	r0, [pc, #232]	@ (800ab70 <pbuf_realloc+0x104>)
 800aa88:	f008 fda2 	bl	80135d0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	891b      	ldrh	r3, [r3, #8]
 800aa90:	887a      	ldrh	r2, [r7, #2]
 800aa92:	429a      	cmp	r2, r3
 800aa94:	d263      	bcs.n	800ab5e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	891a      	ldrh	r2, [r3, #8]
 800aa9a:	887b      	ldrh	r3, [r7, #2]
 800aa9c:	1ad3      	subs	r3, r2, r3
 800aa9e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800aaa0:	887b      	ldrh	r3, [r7, #2]
 800aaa2:	817b      	strh	r3, [r7, #10]
  q = p;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800aaa8:	e018      	b.n	800aadc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	895b      	ldrh	r3, [r3, #10]
 800aaae:	897a      	ldrh	r2, [r7, #10]
 800aab0:	1ad3      	subs	r3, r2, r3
 800aab2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	891a      	ldrh	r2, [r3, #8]
 800aab8:	893b      	ldrh	r3, [r7, #8]
 800aaba:	1ad3      	subs	r3, r2, r3
 800aabc:	b29a      	uxth	r2, r3
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d106      	bne.n	800aadc <pbuf_realloc+0x70>
 800aace:	4b26      	ldr	r3, [pc, #152]	@ (800ab68 <pbuf_realloc+0xfc>)
 800aad0:	f240 12af 	movw	r2, #431	@ 0x1af
 800aad4:	4927      	ldr	r1, [pc, #156]	@ (800ab74 <pbuf_realloc+0x108>)
 800aad6:	4826      	ldr	r0, [pc, #152]	@ (800ab70 <pbuf_realloc+0x104>)
 800aad8:	f008 fd7a 	bl	80135d0 <iprintf>
  while (rem_len > q->len) {
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	895b      	ldrh	r3, [r3, #10]
 800aae0:	897a      	ldrh	r2, [r7, #10]
 800aae2:	429a      	cmp	r2, r3
 800aae4:	d8e1      	bhi.n	800aaaa <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	7b1b      	ldrb	r3, [r3, #12]
 800aaea:	f003 030f 	and.w	r3, r3, #15
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d121      	bne.n	800ab36 <pbuf_realloc+0xca>
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	895b      	ldrh	r3, [r3, #10]
 800aaf6:	897a      	ldrh	r2, [r7, #10]
 800aaf8:	429a      	cmp	r2, r3
 800aafa:	d01c      	beq.n	800ab36 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	7b5b      	ldrb	r3, [r3, #13]
 800ab00:	f003 0302 	and.w	r3, r3, #2
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d116      	bne.n	800ab36 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	685a      	ldr	r2, [r3, #4]
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	1ad3      	subs	r3, r2, r3
 800ab10:	b29a      	uxth	r2, r3
 800ab12:	897b      	ldrh	r3, [r7, #10]
 800ab14:	4413      	add	r3, r2
 800ab16:	b29b      	uxth	r3, r3
 800ab18:	4619      	mov	r1, r3
 800ab1a:	68f8      	ldr	r0, [r7, #12]
 800ab1c:	f7fe ff4a 	bl	80099b4 <mem_trim>
 800ab20:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d106      	bne.n	800ab36 <pbuf_realloc+0xca>
 800ab28:	4b0f      	ldr	r3, [pc, #60]	@ (800ab68 <pbuf_realloc+0xfc>)
 800ab2a:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800ab2e:	4912      	ldr	r1, [pc, #72]	@ (800ab78 <pbuf_realloc+0x10c>)
 800ab30:	480f      	ldr	r0, [pc, #60]	@ (800ab70 <pbuf_realloc+0x104>)
 800ab32:	f008 fd4d 	bl	80135d0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	897a      	ldrh	r2, [r7, #10]
 800ab3a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	895a      	ldrh	r2, [r3, #10]
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d004      	beq.n	800ab56 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	4618      	mov	r0, r3
 800ab52:	f000 f911 	bl	800ad78 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	601a      	str	r2, [r3, #0]
 800ab5c:	e000      	b.n	800ab60 <pbuf_realloc+0xf4>
    return;
 800ab5e:	bf00      	nop

}
 800ab60:	3710      	adds	r7, #16
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}
 800ab66:	bf00      	nop
 800ab68:	08014bf0 	.word	0x08014bf0
 800ab6c:	08014d08 	.word	0x08014d08
 800ab70:	08014c50 	.word	0x08014c50
 800ab74:	08014d20 	.word	0x08014d20
 800ab78:	08014d38 	.word	0x08014d38

0800ab7c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b086      	sub	sp, #24
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	60f8      	str	r0, [r7, #12]
 800ab84:	60b9      	str	r1, [r7, #8]
 800ab86:	4613      	mov	r3, r2
 800ab88:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d106      	bne.n	800ab9e <pbuf_add_header_impl+0x22>
 800ab90:	4b2b      	ldr	r3, [pc, #172]	@ (800ac40 <pbuf_add_header_impl+0xc4>)
 800ab92:	f240 12df 	movw	r2, #479	@ 0x1df
 800ab96:	492b      	ldr	r1, [pc, #172]	@ (800ac44 <pbuf_add_header_impl+0xc8>)
 800ab98:	482b      	ldr	r0, [pc, #172]	@ (800ac48 <pbuf_add_header_impl+0xcc>)
 800ab9a:	f008 fd19 	bl	80135d0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d003      	beq.n	800abac <pbuf_add_header_impl+0x30>
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800abaa:	d301      	bcc.n	800abb0 <pbuf_add_header_impl+0x34>
    return 1;
 800abac:	2301      	movs	r3, #1
 800abae:	e043      	b.n	800ac38 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d101      	bne.n	800abba <pbuf_add_header_impl+0x3e>
    return 0;
 800abb6:	2300      	movs	r3, #0
 800abb8:	e03e      	b.n	800ac38 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	891a      	ldrh	r2, [r3, #8]
 800abc2:	8a7b      	ldrh	r3, [r7, #18]
 800abc4:	4413      	add	r3, r2
 800abc6:	b29b      	uxth	r3, r3
 800abc8:	8a7a      	ldrh	r2, [r7, #18]
 800abca:	429a      	cmp	r2, r3
 800abcc:	d901      	bls.n	800abd2 <pbuf_add_header_impl+0x56>
    return 1;
 800abce:	2301      	movs	r3, #1
 800abd0:	e032      	b.n	800ac38 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	7b1b      	ldrb	r3, [r3, #12]
 800abd6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800abd8:	8a3b      	ldrh	r3, [r7, #16]
 800abda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d00c      	beq.n	800abfc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	685a      	ldr	r2, [r3, #4]
 800abe6:	68bb      	ldr	r3, [r7, #8]
 800abe8:	425b      	negs	r3, r3
 800abea:	4413      	add	r3, r2
 800abec:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	3310      	adds	r3, #16
 800abf2:	697a      	ldr	r2, [r7, #20]
 800abf4:	429a      	cmp	r2, r3
 800abf6:	d20d      	bcs.n	800ac14 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800abf8:	2301      	movs	r3, #1
 800abfa:	e01d      	b.n	800ac38 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800abfc:	79fb      	ldrb	r3, [r7, #7]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d006      	beq.n	800ac10 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	685a      	ldr	r2, [r3, #4]
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	425b      	negs	r3, r3
 800ac0a:	4413      	add	r3, r2
 800ac0c:	617b      	str	r3, [r7, #20]
 800ac0e:	e001      	b.n	800ac14 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800ac10:	2301      	movs	r3, #1
 800ac12:	e011      	b.n	800ac38 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	697a      	ldr	r2, [r7, #20]
 800ac18:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	895a      	ldrh	r2, [r3, #10]
 800ac1e:	8a7b      	ldrh	r3, [r7, #18]
 800ac20:	4413      	add	r3, r2
 800ac22:	b29a      	uxth	r2, r3
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	891a      	ldrh	r2, [r3, #8]
 800ac2c:	8a7b      	ldrh	r3, [r7, #18]
 800ac2e:	4413      	add	r3, r2
 800ac30:	b29a      	uxth	r2, r3
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	811a      	strh	r2, [r3, #8]


  return 0;
 800ac36:	2300      	movs	r3, #0
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3718      	adds	r7, #24
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}
 800ac40:	08014bf0 	.word	0x08014bf0
 800ac44:	08014d54 	.word	0x08014d54
 800ac48:	08014c50 	.word	0x08014c50

0800ac4c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b082      	sub	sp, #8
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
 800ac54:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800ac56:	2200      	movs	r2, #0
 800ac58:	6839      	ldr	r1, [r7, #0]
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f7ff ff8e 	bl	800ab7c <pbuf_add_header_impl>
 800ac60:	4603      	mov	r3, r0
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	3708      	adds	r7, #8
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}
	...

0800ac6c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b084      	sub	sp, #16
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
 800ac74:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d106      	bne.n	800ac8a <pbuf_remove_header+0x1e>
 800ac7c:	4b20      	ldr	r3, [pc, #128]	@ (800ad00 <pbuf_remove_header+0x94>)
 800ac7e:	f240 224b 	movw	r2, #587	@ 0x24b
 800ac82:	4920      	ldr	r1, [pc, #128]	@ (800ad04 <pbuf_remove_header+0x98>)
 800ac84:	4820      	ldr	r0, [pc, #128]	@ (800ad08 <pbuf_remove_header+0x9c>)
 800ac86:	f008 fca3 	bl	80135d0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d003      	beq.n	800ac98 <pbuf_remove_header+0x2c>
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac96:	d301      	bcc.n	800ac9c <pbuf_remove_header+0x30>
    return 1;
 800ac98:	2301      	movs	r3, #1
 800ac9a:	e02c      	b.n	800acf6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d101      	bne.n	800aca6 <pbuf_remove_header+0x3a>
    return 0;
 800aca2:	2300      	movs	r3, #0
 800aca4:	e027      	b.n	800acf6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	895b      	ldrh	r3, [r3, #10]
 800acae:	89fa      	ldrh	r2, [r7, #14]
 800acb0:	429a      	cmp	r2, r3
 800acb2:	d908      	bls.n	800acc6 <pbuf_remove_header+0x5a>
 800acb4:	4b12      	ldr	r3, [pc, #72]	@ (800ad00 <pbuf_remove_header+0x94>)
 800acb6:	f240 2255 	movw	r2, #597	@ 0x255
 800acba:	4914      	ldr	r1, [pc, #80]	@ (800ad0c <pbuf_remove_header+0xa0>)
 800acbc:	4812      	ldr	r0, [pc, #72]	@ (800ad08 <pbuf_remove_header+0x9c>)
 800acbe:	f008 fc87 	bl	80135d0 <iprintf>
 800acc2:	2301      	movs	r3, #1
 800acc4:	e017      	b.n	800acf6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	685b      	ldr	r3, [r3, #4]
 800acca:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	685a      	ldr	r2, [r3, #4]
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	441a      	add	r2, r3
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	895a      	ldrh	r2, [r3, #10]
 800acdc:	89fb      	ldrh	r3, [r7, #14]
 800acde:	1ad3      	subs	r3, r2, r3
 800ace0:	b29a      	uxth	r2, r3
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	891a      	ldrh	r2, [r3, #8]
 800acea:	89fb      	ldrh	r3, [r7, #14]
 800acec:	1ad3      	subs	r3, r2, r3
 800acee:	b29a      	uxth	r2, r3
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800acf4:	2300      	movs	r3, #0
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3710      	adds	r7, #16
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}
 800acfe:	bf00      	nop
 800ad00:	08014bf0 	.word	0x08014bf0
 800ad04:	08014d54 	.word	0x08014d54
 800ad08:	08014c50 	.word	0x08014c50
 800ad0c:	08014d60 	.word	0x08014d60

0800ad10 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b082      	sub	sp, #8
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
 800ad18:	460b      	mov	r3, r1
 800ad1a:	807b      	strh	r3, [r7, #2]
 800ad1c:	4613      	mov	r3, r2
 800ad1e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800ad20:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	da08      	bge.n	800ad3a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800ad28:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ad2c:	425b      	negs	r3, r3
 800ad2e:	4619      	mov	r1, r3
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f7ff ff9b 	bl	800ac6c <pbuf_remove_header>
 800ad36:	4603      	mov	r3, r0
 800ad38:	e007      	b.n	800ad4a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800ad3a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ad3e:	787a      	ldrb	r2, [r7, #1]
 800ad40:	4619      	mov	r1, r3
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f7ff ff1a 	bl	800ab7c <pbuf_add_header_impl>
 800ad48:	4603      	mov	r3, r0
  }
}
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	3708      	adds	r7, #8
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}

0800ad52 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800ad52:	b580      	push	{r7, lr}
 800ad54:	b082      	sub	sp, #8
 800ad56:	af00      	add	r7, sp, #0
 800ad58:	6078      	str	r0, [r7, #4]
 800ad5a:	460b      	mov	r3, r1
 800ad5c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800ad5e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ad62:	2201      	movs	r2, #1
 800ad64:	4619      	mov	r1, r3
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f7ff ffd2 	bl	800ad10 <pbuf_header_impl>
 800ad6c:	4603      	mov	r3, r0
}
 800ad6e:	4618      	mov	r0, r3
 800ad70:	3708      	adds	r7, #8
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd80      	pop	{r7, pc}
	...

0800ad78 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b088      	sub	sp, #32
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d10b      	bne.n	800ad9e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d106      	bne.n	800ad9a <pbuf_free+0x22>
 800ad8c:	4b3b      	ldr	r3, [pc, #236]	@ (800ae7c <pbuf_free+0x104>)
 800ad8e:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800ad92:	493b      	ldr	r1, [pc, #236]	@ (800ae80 <pbuf_free+0x108>)
 800ad94:	483b      	ldr	r0, [pc, #236]	@ (800ae84 <pbuf_free+0x10c>)
 800ad96:	f008 fc1b 	bl	80135d0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	e069      	b.n	800ae72 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800ada2:	e062      	b.n	800ae6a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800ada4:	f008 faf6 	bl	8013394 <sys_arch_protect>
 800ada8:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	7b9b      	ldrb	r3, [r3, #14]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d106      	bne.n	800adc0 <pbuf_free+0x48>
 800adb2:	4b32      	ldr	r3, [pc, #200]	@ (800ae7c <pbuf_free+0x104>)
 800adb4:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800adb8:	4933      	ldr	r1, [pc, #204]	@ (800ae88 <pbuf_free+0x110>)
 800adba:	4832      	ldr	r0, [pc, #200]	@ (800ae84 <pbuf_free+0x10c>)
 800adbc:	f008 fc08 	bl	80135d0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	7b9b      	ldrb	r3, [r3, #14]
 800adc4:	3b01      	subs	r3, #1
 800adc6:	b2da      	uxtb	r2, r3
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	739a      	strb	r2, [r3, #14]
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	7b9b      	ldrb	r3, [r3, #14]
 800add0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800add2:	69b8      	ldr	r0, [r7, #24]
 800add4:	f008 faec 	bl	80133b0 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800add8:	7dfb      	ldrb	r3, [r7, #23]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d143      	bne.n	800ae66 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	7b1b      	ldrb	r3, [r3, #12]
 800ade8:	f003 030f 	and.w	r3, r3, #15
 800adec:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	7b5b      	ldrb	r3, [r3, #13]
 800adf2:	f003 0302 	and.w	r3, r3, #2
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d011      	beq.n	800ae1e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	691b      	ldr	r3, [r3, #16]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d106      	bne.n	800ae14 <pbuf_free+0x9c>
 800ae06:	4b1d      	ldr	r3, [pc, #116]	@ (800ae7c <pbuf_free+0x104>)
 800ae08:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800ae0c:	491f      	ldr	r1, [pc, #124]	@ (800ae8c <pbuf_free+0x114>)
 800ae0e:	481d      	ldr	r0, [pc, #116]	@ (800ae84 <pbuf_free+0x10c>)
 800ae10:	f008 fbde 	bl	80135d0 <iprintf>
        pc->custom_free_function(p);
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	691b      	ldr	r3, [r3, #16]
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	4798      	blx	r3
 800ae1c:	e01d      	b.n	800ae5a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800ae1e:	7bfb      	ldrb	r3, [r7, #15]
 800ae20:	2b02      	cmp	r3, #2
 800ae22:	d104      	bne.n	800ae2e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800ae24:	6879      	ldr	r1, [r7, #4]
 800ae26:	200c      	movs	r0, #12
 800ae28:	f7ff f8f2 	bl	800a010 <memp_free>
 800ae2c:	e015      	b.n	800ae5a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800ae2e:	7bfb      	ldrb	r3, [r7, #15]
 800ae30:	2b01      	cmp	r3, #1
 800ae32:	d104      	bne.n	800ae3e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800ae34:	6879      	ldr	r1, [r7, #4]
 800ae36:	200b      	movs	r0, #11
 800ae38:	f7ff f8ea 	bl	800a010 <memp_free>
 800ae3c:	e00d      	b.n	800ae5a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800ae3e:	7bfb      	ldrb	r3, [r7, #15]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d103      	bne.n	800ae4c <pbuf_free+0xd4>
          mem_free(p);
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f7fe fd25 	bl	8009894 <mem_free>
 800ae4a:	e006      	b.n	800ae5a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800ae4c:	4b0b      	ldr	r3, [pc, #44]	@ (800ae7c <pbuf_free+0x104>)
 800ae4e:	f240 320f 	movw	r2, #783	@ 0x30f
 800ae52:	490f      	ldr	r1, [pc, #60]	@ (800ae90 <pbuf_free+0x118>)
 800ae54:	480b      	ldr	r0, [pc, #44]	@ (800ae84 <pbuf_free+0x10c>)
 800ae56:	f008 fbbb 	bl	80135d0 <iprintf>
        }
      }
      count++;
 800ae5a:	7ffb      	ldrb	r3, [r7, #31]
 800ae5c:	3301      	adds	r3, #1
 800ae5e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800ae60:	693b      	ldr	r3, [r7, #16]
 800ae62:	607b      	str	r3, [r7, #4]
 800ae64:	e001      	b.n	800ae6a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800ae66:	2300      	movs	r3, #0
 800ae68:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d199      	bne.n	800ada4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800ae70:	7ffb      	ldrb	r3, [r7, #31]
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	3720      	adds	r7, #32
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}
 800ae7a:	bf00      	nop
 800ae7c:	08014bf0 	.word	0x08014bf0
 800ae80:	08014d54 	.word	0x08014d54
 800ae84:	08014c50 	.word	0x08014c50
 800ae88:	08014d80 	.word	0x08014d80
 800ae8c:	08014d98 	.word	0x08014d98
 800ae90:	08014dbc 	.word	0x08014dbc

0800ae94 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800ae94:	b480      	push	{r7}
 800ae96:	b085      	sub	sp, #20
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800aea0:	e005      	b.n	800aeae <pbuf_clen+0x1a>
    ++len;
 800aea2:	89fb      	ldrh	r3, [r7, #14]
 800aea4:	3301      	adds	r3, #1
 800aea6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d1f6      	bne.n	800aea2 <pbuf_clen+0xe>
  }
  return len;
 800aeb4:	89fb      	ldrh	r3, [r7, #14]
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3714      	adds	r7, #20
 800aeba:	46bd      	mov	sp, r7
 800aebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec0:	4770      	bx	lr
	...

0800aec4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b084      	sub	sp, #16
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d016      	beq.n	800af00 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800aed2:	f008 fa5f 	bl	8013394 <sys_arch_protect>
 800aed6:	60f8      	str	r0, [r7, #12]
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	7b9b      	ldrb	r3, [r3, #14]
 800aedc:	3301      	adds	r3, #1
 800aede:	b2da      	uxtb	r2, r3
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	739a      	strb	r2, [r3, #14]
 800aee4:	68f8      	ldr	r0, [r7, #12]
 800aee6:	f008 fa63 	bl	80133b0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	7b9b      	ldrb	r3, [r3, #14]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d106      	bne.n	800af00 <pbuf_ref+0x3c>
 800aef2:	4b05      	ldr	r3, [pc, #20]	@ (800af08 <pbuf_ref+0x44>)
 800aef4:	f240 3242 	movw	r2, #834	@ 0x342
 800aef8:	4904      	ldr	r1, [pc, #16]	@ (800af0c <pbuf_ref+0x48>)
 800aefa:	4805      	ldr	r0, [pc, #20]	@ (800af10 <pbuf_ref+0x4c>)
 800aefc:	f008 fb68 	bl	80135d0 <iprintf>
  }
}
 800af00:	bf00      	nop
 800af02:	3710      	adds	r7, #16
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}
 800af08:	08014bf0 	.word	0x08014bf0
 800af0c:	08014dd0 	.word	0x08014dd0
 800af10:	08014c50 	.word	0x08014c50

0800af14 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b084      	sub	sp, #16
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
 800af1c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d002      	beq.n	800af2a <pbuf_cat+0x16>
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d107      	bne.n	800af3a <pbuf_cat+0x26>
 800af2a:	4b20      	ldr	r3, [pc, #128]	@ (800afac <pbuf_cat+0x98>)
 800af2c:	f240 3259 	movw	r2, #857	@ 0x359
 800af30:	491f      	ldr	r1, [pc, #124]	@ (800afb0 <pbuf_cat+0x9c>)
 800af32:	4820      	ldr	r0, [pc, #128]	@ (800afb4 <pbuf_cat+0xa0>)
 800af34:	f008 fb4c 	bl	80135d0 <iprintf>
 800af38:	e034      	b.n	800afa4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	60fb      	str	r3, [r7, #12]
 800af3e:	e00a      	b.n	800af56 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	891a      	ldrh	r2, [r3, #8]
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	891b      	ldrh	r3, [r3, #8]
 800af48:	4413      	add	r3, r2
 800af4a:	b29a      	uxth	r2, r3
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	60fb      	str	r3, [r7, #12]
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d1f0      	bne.n	800af40 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	891a      	ldrh	r2, [r3, #8]
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	895b      	ldrh	r3, [r3, #10]
 800af66:	429a      	cmp	r2, r3
 800af68:	d006      	beq.n	800af78 <pbuf_cat+0x64>
 800af6a:	4b10      	ldr	r3, [pc, #64]	@ (800afac <pbuf_cat+0x98>)
 800af6c:	f240 3262 	movw	r2, #866	@ 0x362
 800af70:	4911      	ldr	r1, [pc, #68]	@ (800afb8 <pbuf_cat+0xa4>)
 800af72:	4810      	ldr	r0, [pc, #64]	@ (800afb4 <pbuf_cat+0xa0>)
 800af74:	f008 fb2c 	bl	80135d0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d006      	beq.n	800af8e <pbuf_cat+0x7a>
 800af80:	4b0a      	ldr	r3, [pc, #40]	@ (800afac <pbuf_cat+0x98>)
 800af82:	f240 3263 	movw	r2, #867	@ 0x363
 800af86:	490d      	ldr	r1, [pc, #52]	@ (800afbc <pbuf_cat+0xa8>)
 800af88:	480a      	ldr	r0, [pc, #40]	@ (800afb4 <pbuf_cat+0xa0>)
 800af8a:	f008 fb21 	bl	80135d0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	891a      	ldrh	r2, [r3, #8]
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	891b      	ldrh	r3, [r3, #8]
 800af96:	4413      	add	r3, r2
 800af98:	b29a      	uxth	r2, r3
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	683a      	ldr	r2, [r7, #0]
 800afa2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800afa4:	3710      	adds	r7, #16
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}
 800afaa:	bf00      	nop
 800afac:	08014bf0 	.word	0x08014bf0
 800afb0:	08014de4 	.word	0x08014de4
 800afb4:	08014c50 	.word	0x08014c50
 800afb8:	08014e1c 	.word	0x08014e1c
 800afbc:	08014e4c 	.word	0x08014e4c

0800afc0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b086      	sub	sp, #24
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
 800afc8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800afca:	2300      	movs	r3, #0
 800afcc:	617b      	str	r3, [r7, #20]
 800afce:	2300      	movs	r3, #0
 800afd0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d008      	beq.n	800afea <pbuf_copy+0x2a>
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d005      	beq.n	800afea <pbuf_copy+0x2a>
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	891a      	ldrh	r2, [r3, #8]
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	891b      	ldrh	r3, [r3, #8]
 800afe6:	429a      	cmp	r2, r3
 800afe8:	d209      	bcs.n	800affe <pbuf_copy+0x3e>
 800afea:	4b57      	ldr	r3, [pc, #348]	@ (800b148 <pbuf_copy+0x188>)
 800afec:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800aff0:	4956      	ldr	r1, [pc, #344]	@ (800b14c <pbuf_copy+0x18c>)
 800aff2:	4857      	ldr	r0, [pc, #348]	@ (800b150 <pbuf_copy+0x190>)
 800aff4:	f008 faec 	bl	80135d0 <iprintf>
 800aff8:	f06f 030f 	mvn.w	r3, #15
 800affc:	e09f      	b.n	800b13e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	895b      	ldrh	r3, [r3, #10]
 800b002:	461a      	mov	r2, r3
 800b004:	697b      	ldr	r3, [r7, #20]
 800b006:	1ad2      	subs	r2, r2, r3
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	895b      	ldrh	r3, [r3, #10]
 800b00c:	4619      	mov	r1, r3
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	1acb      	subs	r3, r1, r3
 800b012:	429a      	cmp	r2, r3
 800b014:	d306      	bcc.n	800b024 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	895b      	ldrh	r3, [r3, #10]
 800b01a:	461a      	mov	r2, r3
 800b01c:	693b      	ldr	r3, [r7, #16]
 800b01e:	1ad3      	subs	r3, r2, r3
 800b020:	60fb      	str	r3, [r7, #12]
 800b022:	e005      	b.n	800b030 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	895b      	ldrh	r3, [r3, #10]
 800b028:	461a      	mov	r2, r3
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	1ad3      	subs	r3, r2, r3
 800b02e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	685a      	ldr	r2, [r3, #4]
 800b034:	697b      	ldr	r3, [r7, #20]
 800b036:	18d0      	adds	r0, r2, r3
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	685a      	ldr	r2, [r3, #4]
 800b03c:	693b      	ldr	r3, [r7, #16]
 800b03e:	4413      	add	r3, r2
 800b040:	68fa      	ldr	r2, [r7, #12]
 800b042:	4619      	mov	r1, r3
 800b044:	f008 fbf5 	bl	8013832 <memcpy>
    offset_to += len;
 800b048:	697a      	ldr	r2, [r7, #20]
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	4413      	add	r3, r2
 800b04e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800b050:	693a      	ldr	r2, [r7, #16]
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	4413      	add	r3, r2
 800b056:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	895b      	ldrh	r3, [r3, #10]
 800b05c:	461a      	mov	r2, r3
 800b05e:	697b      	ldr	r3, [r7, #20]
 800b060:	4293      	cmp	r3, r2
 800b062:	d906      	bls.n	800b072 <pbuf_copy+0xb2>
 800b064:	4b38      	ldr	r3, [pc, #224]	@ (800b148 <pbuf_copy+0x188>)
 800b066:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800b06a:	493a      	ldr	r1, [pc, #232]	@ (800b154 <pbuf_copy+0x194>)
 800b06c:	4838      	ldr	r0, [pc, #224]	@ (800b150 <pbuf_copy+0x190>)
 800b06e:	f008 faaf 	bl	80135d0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	895b      	ldrh	r3, [r3, #10]
 800b076:	461a      	mov	r2, r3
 800b078:	693b      	ldr	r3, [r7, #16]
 800b07a:	4293      	cmp	r3, r2
 800b07c:	d906      	bls.n	800b08c <pbuf_copy+0xcc>
 800b07e:	4b32      	ldr	r3, [pc, #200]	@ (800b148 <pbuf_copy+0x188>)
 800b080:	f240 32da 	movw	r2, #986	@ 0x3da
 800b084:	4934      	ldr	r1, [pc, #208]	@ (800b158 <pbuf_copy+0x198>)
 800b086:	4832      	ldr	r0, [pc, #200]	@ (800b150 <pbuf_copy+0x190>)
 800b088:	f008 faa2 	bl	80135d0 <iprintf>
    if (offset_from >= p_from->len) {
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	895b      	ldrh	r3, [r3, #10]
 800b090:	461a      	mov	r2, r3
 800b092:	693b      	ldr	r3, [r7, #16]
 800b094:	4293      	cmp	r3, r2
 800b096:	d304      	bcc.n	800b0a2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800b098:	2300      	movs	r3, #0
 800b09a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	895b      	ldrh	r3, [r3, #10]
 800b0a6:	461a      	mov	r2, r3
 800b0a8:	697b      	ldr	r3, [r7, #20]
 800b0aa:	4293      	cmp	r3, r2
 800b0ac:	d114      	bne.n	800b0d8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d10c      	bne.n	800b0d8 <pbuf_copy+0x118>
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d009      	beq.n	800b0d8 <pbuf_copy+0x118>
 800b0c4:	4b20      	ldr	r3, [pc, #128]	@ (800b148 <pbuf_copy+0x188>)
 800b0c6:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800b0ca:	4924      	ldr	r1, [pc, #144]	@ (800b15c <pbuf_copy+0x19c>)
 800b0cc:	4820      	ldr	r0, [pc, #128]	@ (800b150 <pbuf_copy+0x190>)
 800b0ce:	f008 fa7f 	bl	80135d0 <iprintf>
 800b0d2:	f06f 030f 	mvn.w	r3, #15
 800b0d6:	e032      	b.n	800b13e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d013      	beq.n	800b106 <pbuf_copy+0x146>
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	895a      	ldrh	r2, [r3, #10]
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	891b      	ldrh	r3, [r3, #8]
 800b0e6:	429a      	cmp	r2, r3
 800b0e8:	d10d      	bne.n	800b106 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d009      	beq.n	800b106 <pbuf_copy+0x146>
 800b0f2:	4b15      	ldr	r3, [pc, #84]	@ (800b148 <pbuf_copy+0x188>)
 800b0f4:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800b0f8:	4919      	ldr	r1, [pc, #100]	@ (800b160 <pbuf_copy+0x1a0>)
 800b0fa:	4815      	ldr	r0, [pc, #84]	@ (800b150 <pbuf_copy+0x190>)
 800b0fc:	f008 fa68 	bl	80135d0 <iprintf>
 800b100:	f06f 0305 	mvn.w	r3, #5
 800b104:	e01b      	b.n	800b13e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d013      	beq.n	800b134 <pbuf_copy+0x174>
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	895a      	ldrh	r2, [r3, #10]
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	891b      	ldrh	r3, [r3, #8]
 800b114:	429a      	cmp	r2, r3
 800b116:	d10d      	bne.n	800b134 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d009      	beq.n	800b134 <pbuf_copy+0x174>
 800b120:	4b09      	ldr	r3, [pc, #36]	@ (800b148 <pbuf_copy+0x188>)
 800b122:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800b126:	490e      	ldr	r1, [pc, #56]	@ (800b160 <pbuf_copy+0x1a0>)
 800b128:	4809      	ldr	r0, [pc, #36]	@ (800b150 <pbuf_copy+0x190>)
 800b12a:	f008 fa51 	bl	80135d0 <iprintf>
 800b12e:	f06f 0305 	mvn.w	r3, #5
 800b132:	e004      	b.n	800b13e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	2b00      	cmp	r3, #0
 800b138:	f47f af61 	bne.w	800affe <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800b13c:	2300      	movs	r3, #0
}
 800b13e:	4618      	mov	r0, r3
 800b140:	3718      	adds	r7, #24
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}
 800b146:	bf00      	nop
 800b148:	08014bf0 	.word	0x08014bf0
 800b14c:	08014e98 	.word	0x08014e98
 800b150:	08014c50 	.word	0x08014c50
 800b154:	08014ec8 	.word	0x08014ec8
 800b158:	08014ee0 	.word	0x08014ee0
 800b15c:	08014efc 	.word	0x08014efc
 800b160:	08014f0c 	.word	0x08014f0c

0800b164 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b088      	sub	sp, #32
 800b168:	af00      	add	r7, sp, #0
 800b16a:	60f8      	str	r0, [r7, #12]
 800b16c:	60b9      	str	r1, [r7, #8]
 800b16e:	4611      	mov	r1, r2
 800b170:	461a      	mov	r2, r3
 800b172:	460b      	mov	r3, r1
 800b174:	80fb      	strh	r3, [r7, #6]
 800b176:	4613      	mov	r3, r2
 800b178:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800b17a:	2300      	movs	r3, #0
 800b17c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800b17e:	2300      	movs	r3, #0
 800b180:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d108      	bne.n	800b19a <pbuf_copy_partial+0x36>
 800b188:	4b2b      	ldr	r3, [pc, #172]	@ (800b238 <pbuf_copy_partial+0xd4>)
 800b18a:	f240 420a 	movw	r2, #1034	@ 0x40a
 800b18e:	492b      	ldr	r1, [pc, #172]	@ (800b23c <pbuf_copy_partial+0xd8>)
 800b190:	482b      	ldr	r0, [pc, #172]	@ (800b240 <pbuf_copy_partial+0xdc>)
 800b192:	f008 fa1d 	bl	80135d0 <iprintf>
 800b196:	2300      	movs	r3, #0
 800b198:	e04a      	b.n	800b230 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d108      	bne.n	800b1b2 <pbuf_copy_partial+0x4e>
 800b1a0:	4b25      	ldr	r3, [pc, #148]	@ (800b238 <pbuf_copy_partial+0xd4>)
 800b1a2:	f240 420b 	movw	r2, #1035	@ 0x40b
 800b1a6:	4927      	ldr	r1, [pc, #156]	@ (800b244 <pbuf_copy_partial+0xe0>)
 800b1a8:	4825      	ldr	r0, [pc, #148]	@ (800b240 <pbuf_copy_partial+0xdc>)
 800b1aa:	f008 fa11 	bl	80135d0 <iprintf>
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	e03e      	b.n	800b230 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	61fb      	str	r3, [r7, #28]
 800b1b6:	e034      	b.n	800b222 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800b1b8:	88bb      	ldrh	r3, [r7, #4]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d00a      	beq.n	800b1d4 <pbuf_copy_partial+0x70>
 800b1be:	69fb      	ldr	r3, [r7, #28]
 800b1c0:	895b      	ldrh	r3, [r3, #10]
 800b1c2:	88ba      	ldrh	r2, [r7, #4]
 800b1c4:	429a      	cmp	r2, r3
 800b1c6:	d305      	bcc.n	800b1d4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800b1c8:	69fb      	ldr	r3, [r7, #28]
 800b1ca:	895b      	ldrh	r3, [r3, #10]
 800b1cc:	88ba      	ldrh	r2, [r7, #4]
 800b1ce:	1ad3      	subs	r3, r2, r3
 800b1d0:	80bb      	strh	r3, [r7, #4]
 800b1d2:	e023      	b.n	800b21c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800b1d4:	69fb      	ldr	r3, [r7, #28]
 800b1d6:	895a      	ldrh	r2, [r3, #10]
 800b1d8:	88bb      	ldrh	r3, [r7, #4]
 800b1da:	1ad3      	subs	r3, r2, r3
 800b1dc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800b1de:	8b3a      	ldrh	r2, [r7, #24]
 800b1e0:	88fb      	ldrh	r3, [r7, #6]
 800b1e2:	429a      	cmp	r2, r3
 800b1e4:	d901      	bls.n	800b1ea <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800b1e6:	88fb      	ldrh	r3, [r7, #6]
 800b1e8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800b1ea:	8b7b      	ldrh	r3, [r7, #26]
 800b1ec:	68ba      	ldr	r2, [r7, #8]
 800b1ee:	18d0      	adds	r0, r2, r3
 800b1f0:	69fb      	ldr	r3, [r7, #28]
 800b1f2:	685a      	ldr	r2, [r3, #4]
 800b1f4:	88bb      	ldrh	r3, [r7, #4]
 800b1f6:	4413      	add	r3, r2
 800b1f8:	8b3a      	ldrh	r2, [r7, #24]
 800b1fa:	4619      	mov	r1, r3
 800b1fc:	f008 fb19 	bl	8013832 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800b200:	8afa      	ldrh	r2, [r7, #22]
 800b202:	8b3b      	ldrh	r3, [r7, #24]
 800b204:	4413      	add	r3, r2
 800b206:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800b208:	8b7a      	ldrh	r2, [r7, #26]
 800b20a:	8b3b      	ldrh	r3, [r7, #24]
 800b20c:	4413      	add	r3, r2
 800b20e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800b210:	88fa      	ldrh	r2, [r7, #6]
 800b212:	8b3b      	ldrh	r3, [r7, #24]
 800b214:	1ad3      	subs	r3, r2, r3
 800b216:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800b218:	2300      	movs	r3, #0
 800b21a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b21c:	69fb      	ldr	r3, [r7, #28]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	61fb      	str	r3, [r7, #28]
 800b222:	88fb      	ldrh	r3, [r7, #6]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d002      	beq.n	800b22e <pbuf_copy_partial+0xca>
 800b228:	69fb      	ldr	r3, [r7, #28]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d1c4      	bne.n	800b1b8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800b22e:	8afb      	ldrh	r3, [r7, #22]
}
 800b230:	4618      	mov	r0, r3
 800b232:	3720      	adds	r7, #32
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}
 800b238:	08014bf0 	.word	0x08014bf0
 800b23c:	08014f38 	.word	0x08014f38
 800b240:	08014c50 	.word	0x08014c50
 800b244:	08014f58 	.word	0x08014f58

0800b248 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b084      	sub	sp, #16
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	4603      	mov	r3, r0
 800b250:	603a      	str	r2, [r7, #0]
 800b252:	71fb      	strb	r3, [r7, #7]
 800b254:	460b      	mov	r3, r1
 800b256:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	8919      	ldrh	r1, [r3, #8]
 800b25c:	88ba      	ldrh	r2, [r7, #4]
 800b25e:	79fb      	ldrb	r3, [r7, #7]
 800b260:	4618      	mov	r0, r3
 800b262:	f7ff faa1 	bl	800a7a8 <pbuf_alloc>
 800b266:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d101      	bne.n	800b272 <pbuf_clone+0x2a>
    return NULL;
 800b26e:	2300      	movs	r3, #0
 800b270:	e011      	b.n	800b296 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800b272:	6839      	ldr	r1, [r7, #0]
 800b274:	68f8      	ldr	r0, [r7, #12]
 800b276:	f7ff fea3 	bl	800afc0 <pbuf_copy>
 800b27a:	4603      	mov	r3, r0
 800b27c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800b27e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d006      	beq.n	800b294 <pbuf_clone+0x4c>
 800b286:	4b06      	ldr	r3, [pc, #24]	@ (800b2a0 <pbuf_clone+0x58>)
 800b288:	f240 5224 	movw	r2, #1316	@ 0x524
 800b28c:	4905      	ldr	r1, [pc, #20]	@ (800b2a4 <pbuf_clone+0x5c>)
 800b28e:	4806      	ldr	r0, [pc, #24]	@ (800b2a8 <pbuf_clone+0x60>)
 800b290:	f008 f99e 	bl	80135d0 <iprintf>
  return q;
 800b294:	68fb      	ldr	r3, [r7, #12]
}
 800b296:	4618      	mov	r0, r3
 800b298:	3710      	adds	r7, #16
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd80      	pop	{r7, pc}
 800b29e:	bf00      	nop
 800b2a0:	08014bf0 	.word	0x08014bf0
 800b2a4:	08015064 	.word	0x08015064
 800b2a8:	08014c50 	.word	0x08014c50

0800b2ac <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800b2b0:	f008 f88e 	bl	80133d0 <rand>
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	b29b      	uxth	r3, r3
 800b2b8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b2bc:	b29b      	uxth	r3, r3
 800b2be:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800b2c2:	b29a      	uxth	r2, r3
 800b2c4:	4b01      	ldr	r3, [pc, #4]	@ (800b2cc <tcp_init+0x20>)
 800b2c6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800b2c8:	bf00      	nop
 800b2ca:	bd80      	pop	{r7, pc}
 800b2cc:	24000028 	.word	0x24000028

0800b2d0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b082      	sub	sp, #8
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	7d1b      	ldrb	r3, [r3, #20]
 800b2dc:	2b01      	cmp	r3, #1
 800b2de:	d105      	bne.n	800b2ec <tcp_free+0x1c>
 800b2e0:	4b06      	ldr	r3, [pc, #24]	@ (800b2fc <tcp_free+0x2c>)
 800b2e2:	22d4      	movs	r2, #212	@ 0xd4
 800b2e4:	4906      	ldr	r1, [pc, #24]	@ (800b300 <tcp_free+0x30>)
 800b2e6:	4807      	ldr	r0, [pc, #28]	@ (800b304 <tcp_free+0x34>)
 800b2e8:	f008 f972 	bl	80135d0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800b2ec:	6879      	ldr	r1, [r7, #4]
 800b2ee:	2001      	movs	r0, #1
 800b2f0:	f7fe fe8e 	bl	800a010 <memp_free>
}
 800b2f4:	bf00      	nop
 800b2f6:	3708      	adds	r7, #8
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}
 800b2fc:	080150f0 	.word	0x080150f0
 800b300:	08015120 	.word	0x08015120
 800b304:	08015134 	.word	0x08015134

0800b308 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b082      	sub	sp, #8
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	7d1b      	ldrb	r3, [r3, #20]
 800b314:	2b01      	cmp	r3, #1
 800b316:	d105      	bne.n	800b324 <tcp_free_listen+0x1c>
 800b318:	4b06      	ldr	r3, [pc, #24]	@ (800b334 <tcp_free_listen+0x2c>)
 800b31a:	22df      	movs	r2, #223	@ 0xdf
 800b31c:	4906      	ldr	r1, [pc, #24]	@ (800b338 <tcp_free_listen+0x30>)
 800b31e:	4807      	ldr	r0, [pc, #28]	@ (800b33c <tcp_free_listen+0x34>)
 800b320:	f008 f956 	bl	80135d0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800b324:	6879      	ldr	r1, [r7, #4]
 800b326:	2002      	movs	r0, #2
 800b328:	f7fe fe72 	bl	800a010 <memp_free>
}
 800b32c:	bf00      	nop
 800b32e:	3708      	adds	r7, #8
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}
 800b334:	080150f0 	.word	0x080150f0
 800b338:	0801515c 	.word	0x0801515c
 800b33c:	08015134 	.word	0x08015134

0800b340 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800b344:	f000 feac 	bl	800c0a0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800b348:	4b07      	ldr	r3, [pc, #28]	@ (800b368 <tcp_tmr+0x28>)
 800b34a:	781b      	ldrb	r3, [r3, #0]
 800b34c:	3301      	adds	r3, #1
 800b34e:	b2da      	uxtb	r2, r3
 800b350:	4b05      	ldr	r3, [pc, #20]	@ (800b368 <tcp_tmr+0x28>)
 800b352:	701a      	strb	r2, [r3, #0]
 800b354:	4b04      	ldr	r3, [pc, #16]	@ (800b368 <tcp_tmr+0x28>)
 800b356:	781b      	ldrb	r3, [r3, #0]
 800b358:	f003 0301 	and.w	r3, r3, #1
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d001      	beq.n	800b364 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800b360:	f000 fb5c 	bl	800ba1c <tcp_slowtmr>
  }
}
 800b364:	bf00      	nop
 800b366:	bd80      	pop	{r7, pc}
 800b368:	24010561 	.word	0x24010561

0800b36c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b084      	sub	sp, #16
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
 800b374:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d105      	bne.n	800b388 <tcp_remove_listener+0x1c>
 800b37c:	4b0d      	ldr	r3, [pc, #52]	@ (800b3b4 <tcp_remove_listener+0x48>)
 800b37e:	22ff      	movs	r2, #255	@ 0xff
 800b380:	490d      	ldr	r1, [pc, #52]	@ (800b3b8 <tcp_remove_listener+0x4c>)
 800b382:	480e      	ldr	r0, [pc, #56]	@ (800b3bc <tcp_remove_listener+0x50>)
 800b384:	f008 f924 	bl	80135d0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	60fb      	str	r3, [r7, #12]
 800b38c:	e00a      	b.n	800b3a4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b392:	683a      	ldr	r2, [r7, #0]
 800b394:	429a      	cmp	r2, r3
 800b396:	d102      	bne.n	800b39e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	2200      	movs	r2, #0
 800b39c:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	68db      	ldr	r3, [r3, #12]
 800b3a2:	60fb      	str	r3, [r7, #12]
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d1f1      	bne.n	800b38e <tcp_remove_listener+0x22>
    }
  }
}
 800b3aa:	bf00      	nop
 800b3ac:	bf00      	nop
 800b3ae:	3710      	adds	r7, #16
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd80      	pop	{r7, pc}
 800b3b4:	080150f0 	.word	0x080150f0
 800b3b8:	08015178 	.word	0x08015178
 800b3bc:	08015134 	.word	0x08015134

0800b3c0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b084      	sub	sp, #16
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d106      	bne.n	800b3dc <tcp_listen_closed+0x1c>
 800b3ce:	4b14      	ldr	r3, [pc, #80]	@ (800b420 <tcp_listen_closed+0x60>)
 800b3d0:	f240 1211 	movw	r2, #273	@ 0x111
 800b3d4:	4913      	ldr	r1, [pc, #76]	@ (800b424 <tcp_listen_closed+0x64>)
 800b3d6:	4814      	ldr	r0, [pc, #80]	@ (800b428 <tcp_listen_closed+0x68>)
 800b3d8:	f008 f8fa 	bl	80135d0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	7d1b      	ldrb	r3, [r3, #20]
 800b3e0:	2b01      	cmp	r3, #1
 800b3e2:	d006      	beq.n	800b3f2 <tcp_listen_closed+0x32>
 800b3e4:	4b0e      	ldr	r3, [pc, #56]	@ (800b420 <tcp_listen_closed+0x60>)
 800b3e6:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800b3ea:	4910      	ldr	r1, [pc, #64]	@ (800b42c <tcp_listen_closed+0x6c>)
 800b3ec:	480e      	ldr	r0, [pc, #56]	@ (800b428 <tcp_listen_closed+0x68>)
 800b3ee:	f008 f8ef 	bl	80135d0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b3f2:	2301      	movs	r3, #1
 800b3f4:	60fb      	str	r3, [r7, #12]
 800b3f6:	e00b      	b.n	800b410 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800b3f8:	4a0d      	ldr	r2, [pc, #52]	@ (800b430 <tcp_listen_closed+0x70>)
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	6879      	ldr	r1, [r7, #4]
 800b404:	4618      	mov	r0, r3
 800b406:	f7ff ffb1 	bl	800b36c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	3301      	adds	r3, #1
 800b40e:	60fb      	str	r3, [r7, #12]
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	2b03      	cmp	r3, #3
 800b414:	d9f0      	bls.n	800b3f8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800b416:	bf00      	nop
 800b418:	bf00      	nop
 800b41a:	3710      	adds	r7, #16
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}
 800b420:	080150f0 	.word	0x080150f0
 800b424:	080151a0 	.word	0x080151a0
 800b428:	08015134 	.word	0x08015134
 800b42c:	080151ac 	.word	0x080151ac
 800b430:	0801712c 	.word	0x0801712c

0800b434 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800b434:	b5b0      	push	{r4, r5, r7, lr}
 800b436:	b088      	sub	sp, #32
 800b438:	af04      	add	r7, sp, #16
 800b43a:	6078      	str	r0, [r7, #4]
 800b43c:	460b      	mov	r3, r1
 800b43e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d106      	bne.n	800b454 <tcp_close_shutdown+0x20>
 800b446:	4b63      	ldr	r3, [pc, #396]	@ (800b5d4 <tcp_close_shutdown+0x1a0>)
 800b448:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800b44c:	4962      	ldr	r1, [pc, #392]	@ (800b5d8 <tcp_close_shutdown+0x1a4>)
 800b44e:	4863      	ldr	r0, [pc, #396]	@ (800b5dc <tcp_close_shutdown+0x1a8>)
 800b450:	f008 f8be 	bl	80135d0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800b454:	78fb      	ldrb	r3, [r7, #3]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d067      	beq.n	800b52a <tcp_close_shutdown+0xf6>
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	7d1b      	ldrb	r3, [r3, #20]
 800b45e:	2b04      	cmp	r3, #4
 800b460:	d003      	beq.n	800b46a <tcp_close_shutdown+0x36>
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	7d1b      	ldrb	r3, [r3, #20]
 800b466:	2b07      	cmp	r3, #7
 800b468:	d15f      	bne.n	800b52a <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d105      	bne.n	800b47e <tcp_close_shutdown+0x4a>
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b476:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800b47a:	4293      	cmp	r3, r2
 800b47c:	d055      	beq.n	800b52a <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	8b5b      	ldrh	r3, [r3, #26]
 800b482:	f003 0310 	and.w	r3, r3, #16
 800b486:	2b00      	cmp	r3, #0
 800b488:	d106      	bne.n	800b498 <tcp_close_shutdown+0x64>
 800b48a:	4b52      	ldr	r3, [pc, #328]	@ (800b5d4 <tcp_close_shutdown+0x1a0>)
 800b48c:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800b490:	4953      	ldr	r1, [pc, #332]	@ (800b5e0 <tcp_close_shutdown+0x1ac>)
 800b492:	4852      	ldr	r0, [pc, #328]	@ (800b5dc <tcp_close_shutdown+0x1a8>)
 800b494:	f008 f89c 	bl	80135d0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800b4a0:	687d      	ldr	r5, [r7, #4]
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	3304      	adds	r3, #4
 800b4a6:	687a      	ldr	r2, [r7, #4]
 800b4a8:	8ad2      	ldrh	r2, [r2, #22]
 800b4aa:	6879      	ldr	r1, [r7, #4]
 800b4ac:	8b09      	ldrh	r1, [r1, #24]
 800b4ae:	9102      	str	r1, [sp, #8]
 800b4b0:	9201      	str	r2, [sp, #4]
 800b4b2:	9300      	str	r3, [sp, #0]
 800b4b4:	462b      	mov	r3, r5
 800b4b6:	4622      	mov	r2, r4
 800b4b8:	4601      	mov	r1, r0
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f004 fe9e 	bl	80101fc <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800b4c0:	6878      	ldr	r0, [r7, #4]
 800b4c2:	f001 f8d3 	bl	800c66c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800b4c6:	4b47      	ldr	r3, [pc, #284]	@ (800b5e4 <tcp_close_shutdown+0x1b0>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	687a      	ldr	r2, [r7, #4]
 800b4cc:	429a      	cmp	r2, r3
 800b4ce:	d105      	bne.n	800b4dc <tcp_close_shutdown+0xa8>
 800b4d0:	4b44      	ldr	r3, [pc, #272]	@ (800b5e4 <tcp_close_shutdown+0x1b0>)
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	68db      	ldr	r3, [r3, #12]
 800b4d6:	4a43      	ldr	r2, [pc, #268]	@ (800b5e4 <tcp_close_shutdown+0x1b0>)
 800b4d8:	6013      	str	r3, [r2, #0]
 800b4da:	e013      	b.n	800b504 <tcp_close_shutdown+0xd0>
 800b4dc:	4b41      	ldr	r3, [pc, #260]	@ (800b5e4 <tcp_close_shutdown+0x1b0>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	60fb      	str	r3, [r7, #12]
 800b4e2:	e00c      	b.n	800b4fe <tcp_close_shutdown+0xca>
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	68db      	ldr	r3, [r3, #12]
 800b4e8:	687a      	ldr	r2, [r7, #4]
 800b4ea:	429a      	cmp	r2, r3
 800b4ec:	d104      	bne.n	800b4f8 <tcp_close_shutdown+0xc4>
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	68da      	ldr	r2, [r3, #12]
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	60da      	str	r2, [r3, #12]
 800b4f6:	e005      	b.n	800b504 <tcp_close_shutdown+0xd0>
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	68db      	ldr	r3, [r3, #12]
 800b4fc:	60fb      	str	r3, [r7, #12]
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d1ef      	bne.n	800b4e4 <tcp_close_shutdown+0xb0>
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2200      	movs	r2, #0
 800b508:	60da      	str	r2, [r3, #12]
 800b50a:	4b37      	ldr	r3, [pc, #220]	@ (800b5e8 <tcp_close_shutdown+0x1b4>)
 800b50c:	2201      	movs	r2, #1
 800b50e:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800b510:	4b36      	ldr	r3, [pc, #216]	@ (800b5ec <tcp_close_shutdown+0x1b8>)
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	687a      	ldr	r2, [r7, #4]
 800b516:	429a      	cmp	r2, r3
 800b518:	d102      	bne.n	800b520 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800b51a:	f003 fd6b 	bl	800eff4 <tcp_trigger_input_pcb_close>
 800b51e:	e002      	b.n	800b526 <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 800b520:	6878      	ldr	r0, [r7, #4]
 800b522:	f7ff fed5 	bl	800b2d0 <tcp_free>
      }
      return ERR_OK;
 800b526:	2300      	movs	r3, #0
 800b528:	e050      	b.n	800b5cc <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	7d1b      	ldrb	r3, [r3, #20]
 800b52e:	2b02      	cmp	r3, #2
 800b530:	d03b      	beq.n	800b5aa <tcp_close_shutdown+0x176>
 800b532:	2b02      	cmp	r3, #2
 800b534:	dc44      	bgt.n	800b5c0 <tcp_close_shutdown+0x18c>
 800b536:	2b00      	cmp	r3, #0
 800b538:	d002      	beq.n	800b540 <tcp_close_shutdown+0x10c>
 800b53a:	2b01      	cmp	r3, #1
 800b53c:	d02a      	beq.n	800b594 <tcp_close_shutdown+0x160>
 800b53e:	e03f      	b.n	800b5c0 <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	8adb      	ldrh	r3, [r3, #22]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d021      	beq.n	800b58c <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b548:	4b29      	ldr	r3, [pc, #164]	@ (800b5f0 <tcp_close_shutdown+0x1bc>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	687a      	ldr	r2, [r7, #4]
 800b54e:	429a      	cmp	r2, r3
 800b550:	d105      	bne.n	800b55e <tcp_close_shutdown+0x12a>
 800b552:	4b27      	ldr	r3, [pc, #156]	@ (800b5f0 <tcp_close_shutdown+0x1bc>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	68db      	ldr	r3, [r3, #12]
 800b558:	4a25      	ldr	r2, [pc, #148]	@ (800b5f0 <tcp_close_shutdown+0x1bc>)
 800b55a:	6013      	str	r3, [r2, #0]
 800b55c:	e013      	b.n	800b586 <tcp_close_shutdown+0x152>
 800b55e:	4b24      	ldr	r3, [pc, #144]	@ (800b5f0 <tcp_close_shutdown+0x1bc>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	60bb      	str	r3, [r7, #8]
 800b564:	e00c      	b.n	800b580 <tcp_close_shutdown+0x14c>
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	68db      	ldr	r3, [r3, #12]
 800b56a:	687a      	ldr	r2, [r7, #4]
 800b56c:	429a      	cmp	r2, r3
 800b56e:	d104      	bne.n	800b57a <tcp_close_shutdown+0x146>
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	68da      	ldr	r2, [r3, #12]
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	60da      	str	r2, [r3, #12]
 800b578:	e005      	b.n	800b586 <tcp_close_shutdown+0x152>
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	68db      	ldr	r3, [r3, #12]
 800b57e:	60bb      	str	r3, [r7, #8]
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d1ef      	bne.n	800b566 <tcp_close_shutdown+0x132>
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	2200      	movs	r2, #0
 800b58a:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800b58c:	6878      	ldr	r0, [r7, #4]
 800b58e:	f7ff fe9f 	bl	800b2d0 <tcp_free>
      break;
 800b592:	e01a      	b.n	800b5ca <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	f7ff ff13 	bl	800b3c0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800b59a:	6879      	ldr	r1, [r7, #4]
 800b59c:	4815      	ldr	r0, [pc, #84]	@ (800b5f4 <tcp_close_shutdown+0x1c0>)
 800b59e:	f001 f8b5 	bl	800c70c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800b5a2:	6878      	ldr	r0, [r7, #4]
 800b5a4:	f7ff feb0 	bl	800b308 <tcp_free_listen>
      break;
 800b5a8:	e00f      	b.n	800b5ca <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b5aa:	6879      	ldr	r1, [r7, #4]
 800b5ac:	480d      	ldr	r0, [pc, #52]	@ (800b5e4 <tcp_close_shutdown+0x1b0>)
 800b5ae:	f001 f8ad 	bl	800c70c <tcp_pcb_remove>
 800b5b2:	4b0d      	ldr	r3, [pc, #52]	@ (800b5e8 <tcp_close_shutdown+0x1b4>)
 800b5b4:	2201      	movs	r2, #1
 800b5b6:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f7ff fe89 	bl	800b2d0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800b5be:	e004      	b.n	800b5ca <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f000 f819 	bl	800b5f8 <tcp_close_shutdown_fin>
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	e000      	b.n	800b5cc <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 800b5ca:	2300      	movs	r3, #0
}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	3710      	adds	r7, #16
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bdb0      	pop	{r4, r5, r7, pc}
 800b5d4:	080150f0 	.word	0x080150f0
 800b5d8:	080151c4 	.word	0x080151c4
 800b5dc:	08015134 	.word	0x08015134
 800b5e0:	080151e4 	.word	0x080151e4
 800b5e4:	24010558 	.word	0x24010558
 800b5e8:	24010560 	.word	0x24010560
 800b5ec:	24010598 	.word	0x24010598
 800b5f0:	24010550 	.word	0x24010550
 800b5f4:	24010554 	.word	0x24010554

0800b5f8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b084      	sub	sp, #16
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d106      	bne.n	800b614 <tcp_close_shutdown_fin+0x1c>
 800b606:	4b2e      	ldr	r3, [pc, #184]	@ (800b6c0 <tcp_close_shutdown_fin+0xc8>)
 800b608:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800b60c:	492d      	ldr	r1, [pc, #180]	@ (800b6c4 <tcp_close_shutdown_fin+0xcc>)
 800b60e:	482e      	ldr	r0, [pc, #184]	@ (800b6c8 <tcp_close_shutdown_fin+0xd0>)
 800b610:	f007 ffde 	bl	80135d0 <iprintf>

  switch (pcb->state) {
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	7d1b      	ldrb	r3, [r3, #20]
 800b618:	2b07      	cmp	r3, #7
 800b61a:	d020      	beq.n	800b65e <tcp_close_shutdown_fin+0x66>
 800b61c:	2b07      	cmp	r3, #7
 800b61e:	dc2b      	bgt.n	800b678 <tcp_close_shutdown_fin+0x80>
 800b620:	2b03      	cmp	r3, #3
 800b622:	d002      	beq.n	800b62a <tcp_close_shutdown_fin+0x32>
 800b624:	2b04      	cmp	r3, #4
 800b626:	d00d      	beq.n	800b644 <tcp_close_shutdown_fin+0x4c>
 800b628:	e026      	b.n	800b678 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800b62a:	6878      	ldr	r0, [r7, #4]
 800b62c:	f003 fef2 	bl	800f414 <tcp_send_fin>
 800b630:	4603      	mov	r3, r0
 800b632:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b634:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d11f      	bne.n	800b67c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2205      	movs	r2, #5
 800b640:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b642:	e01b      	b.n	800b67c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f003 fee5 	bl	800f414 <tcp_send_fin>
 800b64a:	4603      	mov	r3, r0
 800b64c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b64e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d114      	bne.n	800b680 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2205      	movs	r2, #5
 800b65a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b65c:	e010      	b.n	800b680 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800b65e:	6878      	ldr	r0, [r7, #4]
 800b660:	f003 fed8 	bl	800f414 <tcp_send_fin>
 800b664:	4603      	mov	r3, r0
 800b666:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b668:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d109      	bne.n	800b684 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2209      	movs	r2, #9
 800b674:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b676:	e005      	b.n	800b684 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800b678:	2300      	movs	r3, #0
 800b67a:	e01c      	b.n	800b6b6 <tcp_close_shutdown_fin+0xbe>
      break;
 800b67c:	bf00      	nop
 800b67e:	e002      	b.n	800b686 <tcp_close_shutdown_fin+0x8e>
      break;
 800b680:	bf00      	nop
 800b682:	e000      	b.n	800b686 <tcp_close_shutdown_fin+0x8e>
      break;
 800b684:	bf00      	nop
  }

  if (err == ERR_OK) {
 800b686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d103      	bne.n	800b696 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f003 fffe 	bl	800f690 <tcp_output>
 800b694:	e00d      	b.n	800b6b2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800b696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b69a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b69e:	d108      	bne.n	800b6b2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	8b5b      	ldrh	r3, [r3, #26]
 800b6a4:	f043 0308 	orr.w	r3, r3, #8
 800b6a8:	b29a      	uxth	r2, r3
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	e001      	b.n	800b6b6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800b6b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3710      	adds	r7, #16
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}
 800b6be:	bf00      	nop
 800b6c0:	080150f0 	.word	0x080150f0
 800b6c4:	080151a0 	.word	0x080151a0
 800b6c8:	08015134 	.word	0x08015134

0800b6cc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b082      	sub	sp, #8
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 800b6d4:	f7f9 fe10 	bl	80052f8 <sys_check_core_locking>

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d109      	bne.n	800b6f2 <tcp_close+0x26>
 800b6de:	4b0f      	ldr	r3, [pc, #60]	@ (800b71c <tcp_close+0x50>)
 800b6e0:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800b6e4:	490e      	ldr	r1, [pc, #56]	@ (800b720 <tcp_close+0x54>)
 800b6e6:	480f      	ldr	r0, [pc, #60]	@ (800b724 <tcp_close+0x58>)
 800b6e8:	f007 ff72 	bl	80135d0 <iprintf>
 800b6ec:	f06f 030f 	mvn.w	r3, #15
 800b6f0:	e00f      	b.n	800b712 <tcp_close+0x46>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	7d1b      	ldrb	r3, [r3, #20]
 800b6f6:	2b01      	cmp	r3, #1
 800b6f8:	d006      	beq.n	800b708 <tcp_close+0x3c>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	8b5b      	ldrh	r3, [r3, #26]
 800b6fe:	f043 0310 	orr.w	r3, r3, #16
 800b702:	b29a      	uxth	r2, r3
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800b708:	2101      	movs	r1, #1
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f7ff fe92 	bl	800b434 <tcp_close_shutdown>
 800b710:	4603      	mov	r3, r0
}
 800b712:	4618      	mov	r0, r3
 800b714:	3708      	adds	r7, #8
 800b716:	46bd      	mov	sp, r7
 800b718:	bd80      	pop	{r7, pc}
 800b71a:	bf00      	nop
 800b71c:	080150f0 	.word	0x080150f0
 800b720:	08015200 	.word	0x08015200
 800b724:	08015134 	.word	0x08015134

0800b728 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b08e      	sub	sp, #56	@ 0x38
 800b72c:	af04      	add	r7, sp, #16
 800b72e:	6078      	str	r0, [r7, #4]
 800b730:	6039      	str	r1, [r7, #0]
#if LWIP_CALLBACK_API
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();
 800b732:	f7f9 fde1 	bl	80052f8 <sys_check_core_locking>

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d107      	bne.n	800b74c <tcp_abandon+0x24>
 800b73c:	4b52      	ldr	r3, [pc, #328]	@ (800b888 <tcp_abandon+0x160>)
 800b73e:	f240 223d 	movw	r2, #573	@ 0x23d
 800b742:	4952      	ldr	r1, [pc, #328]	@ (800b88c <tcp_abandon+0x164>)
 800b744:	4852      	ldr	r0, [pc, #328]	@ (800b890 <tcp_abandon+0x168>)
 800b746:	f007 ff43 	bl	80135d0 <iprintf>
 800b74a:	e099      	b.n	800b880 <tcp_abandon+0x158>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	7d1b      	ldrb	r3, [r3, #20]
 800b750:	2b01      	cmp	r3, #1
 800b752:	d106      	bne.n	800b762 <tcp_abandon+0x3a>
 800b754:	4b4c      	ldr	r3, [pc, #304]	@ (800b888 <tcp_abandon+0x160>)
 800b756:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800b75a:	494e      	ldr	r1, [pc, #312]	@ (800b894 <tcp_abandon+0x16c>)
 800b75c:	484c      	ldr	r0, [pc, #304]	@ (800b890 <tcp_abandon+0x168>)
 800b75e:	f007 ff37 	bl	80135d0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	7d1b      	ldrb	r3, [r3, #20]
 800b766:	2b0a      	cmp	r3, #10
 800b768:	d107      	bne.n	800b77a <tcp_abandon+0x52>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800b76a:	6879      	ldr	r1, [r7, #4]
 800b76c:	484a      	ldr	r0, [pc, #296]	@ (800b898 <tcp_abandon+0x170>)
 800b76e:	f000 ffcd 	bl	800c70c <tcp_pcb_remove>
    tcp_free(pcb);
 800b772:	6878      	ldr	r0, [r7, #4]
 800b774:	f7ff fdac 	bl	800b2d0 <tcp_free>
 800b778:	e082      	b.n	800b880 <tcp_abandon+0x158>
  } else {
    int send_rst = 0;
 800b77a:	2300      	movs	r3, #0
 800b77c:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800b77e:	2300      	movs	r3, #0
 800b780:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b786:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b78c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b794:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	691b      	ldr	r3, [r3, #16]
 800b79a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	7d1b      	ldrb	r3, [r3, #20]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d126      	bne.n	800b7f2 <tcp_abandon+0xca>
      if (pcb->local_port != 0) {
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	8adb      	ldrh	r3, [r3, #22]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d02e      	beq.n	800b80a <tcp_abandon+0xe2>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b7ac:	4b3b      	ldr	r3, [pc, #236]	@ (800b89c <tcp_abandon+0x174>)
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	687a      	ldr	r2, [r7, #4]
 800b7b2:	429a      	cmp	r2, r3
 800b7b4:	d105      	bne.n	800b7c2 <tcp_abandon+0x9a>
 800b7b6:	4b39      	ldr	r3, [pc, #228]	@ (800b89c <tcp_abandon+0x174>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	68db      	ldr	r3, [r3, #12]
 800b7bc:	4a37      	ldr	r2, [pc, #220]	@ (800b89c <tcp_abandon+0x174>)
 800b7be:	6013      	str	r3, [r2, #0]
 800b7c0:	e013      	b.n	800b7ea <tcp_abandon+0xc2>
 800b7c2:	4b36      	ldr	r3, [pc, #216]	@ (800b89c <tcp_abandon+0x174>)
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	61fb      	str	r3, [r7, #28]
 800b7c8:	e00c      	b.n	800b7e4 <tcp_abandon+0xbc>
 800b7ca:	69fb      	ldr	r3, [r7, #28]
 800b7cc:	68db      	ldr	r3, [r3, #12]
 800b7ce:	687a      	ldr	r2, [r7, #4]
 800b7d0:	429a      	cmp	r2, r3
 800b7d2:	d104      	bne.n	800b7de <tcp_abandon+0xb6>
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	68da      	ldr	r2, [r3, #12]
 800b7d8:	69fb      	ldr	r3, [r7, #28]
 800b7da:	60da      	str	r2, [r3, #12]
 800b7dc:	e005      	b.n	800b7ea <tcp_abandon+0xc2>
 800b7de:	69fb      	ldr	r3, [r7, #28]
 800b7e0:	68db      	ldr	r3, [r3, #12]
 800b7e2:	61fb      	str	r3, [r7, #28]
 800b7e4:	69fb      	ldr	r3, [r7, #28]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d1ef      	bne.n	800b7ca <tcp_abandon+0xa2>
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	60da      	str	r2, [r3, #12]
 800b7f0:	e00b      	b.n	800b80a <tcp_abandon+0xe2>
      }
    } else {
      send_rst = reset;
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	8adb      	ldrh	r3, [r3, #22]
 800b7fa:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b7fc:	6879      	ldr	r1, [r7, #4]
 800b7fe:	4828      	ldr	r0, [pc, #160]	@ (800b8a0 <tcp_abandon+0x178>)
 800b800:	f000 ff84 	bl	800c70c <tcp_pcb_remove>
 800b804:	4b27      	ldr	r3, [pc, #156]	@ (800b8a4 <tcp_abandon+0x17c>)
 800b806:	2201      	movs	r2, #1
 800b808:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d004      	beq.n	800b81c <tcp_abandon+0xf4>
      tcp_segs_free(pcb->unacked);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b816:	4618      	mov	r0, r3
 800b818:	f000 fd24 	bl	800c264 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b820:	2b00      	cmp	r3, #0
 800b822:	d004      	beq.n	800b82e <tcp_abandon+0x106>
      tcp_segs_free(pcb->unsent);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b828:	4618      	mov	r0, r3
 800b82a:	f000 fd1b 	bl	800c264 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b832:	2b00      	cmp	r3, #0
 800b834:	d004      	beq.n	800b840 <tcp_abandon+0x118>
      tcp_segs_free(pcb->ooseq);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b83a:	4618      	mov	r0, r3
 800b83c:	f000 fd12 	bl	800c264 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800b840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b842:	2b00      	cmp	r3, #0
 800b844:	d00e      	beq.n	800b864 <tcp_abandon+0x13c>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800b846:	6879      	ldr	r1, [r7, #4]
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	3304      	adds	r3, #4
 800b84c:	687a      	ldr	r2, [r7, #4]
 800b84e:	8b12      	ldrh	r2, [r2, #24]
 800b850:	9202      	str	r2, [sp, #8]
 800b852:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800b854:	9201      	str	r2, [sp, #4]
 800b856:	9300      	str	r3, [sp, #0]
 800b858:	460b      	mov	r3, r1
 800b85a:	697a      	ldr	r2, [r7, #20]
 800b85c:	69b9      	ldr	r1, [r7, #24]
 800b85e:	6878      	ldr	r0, [r7, #4]
 800b860:	f004 fccc 	bl	80101fc <tcp_rst>
    }
    last_state = pcb->state;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	7d1b      	ldrb	r3, [r3, #20]
 800b868:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800b86a:	6878      	ldr	r0, [r7, #4]
 800b86c:	f7ff fd30 	bl	800b2d0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800b870:	693b      	ldr	r3, [r7, #16]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d004      	beq.n	800b880 <tcp_abandon+0x158>
 800b876:	693b      	ldr	r3, [r7, #16]
 800b878:	f06f 010c 	mvn.w	r1, #12
 800b87c:	68f8      	ldr	r0, [r7, #12]
 800b87e:	4798      	blx	r3
  }
}
 800b880:	3728      	adds	r7, #40	@ 0x28
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}
 800b886:	bf00      	nop
 800b888:	080150f0 	.word	0x080150f0
 800b88c:	08015234 	.word	0x08015234
 800b890:	08015134 	.word	0x08015134
 800b894:	08015250 	.word	0x08015250
 800b898:	2401055c 	.word	0x2401055c
 800b89c:	24010550 	.word	0x24010550
 800b8a0:	24010558 	.word	0x24010558
 800b8a4:	24010560 	.word	0x24010560

0800b8a8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b082      	sub	sp, #8
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800b8b0:	2101      	movs	r1, #1
 800b8b2:	6878      	ldr	r0, [r7, #4]
 800b8b4:	f7ff ff38 	bl	800b728 <tcp_abandon>
}
 800b8b8:	bf00      	nop
 800b8ba:	3708      	adds	r7, #8
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}

0800b8c0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b084      	sub	sp, #16
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d106      	bne.n	800b8dc <tcp_update_rcv_ann_wnd+0x1c>
 800b8ce:	4b25      	ldr	r3, [pc, #148]	@ (800b964 <tcp_update_rcv_ann_wnd+0xa4>)
 800b8d0:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800b8d4:	4924      	ldr	r1, [pc, #144]	@ (800b968 <tcp_update_rcv_ann_wnd+0xa8>)
 800b8d6:	4825      	ldr	r0, [pc, #148]	@ (800b96c <tcp_update_rcv_ann_wnd+0xac>)
 800b8d8:	f007 fe7a 	bl	80135d0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8e0:	687a      	ldr	r2, [r7, #4]
 800b8e2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800b8e4:	4413      	add	r3, r2
 800b8e6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8ec:	687a      	ldr	r2, [r7, #4]
 800b8ee:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800b8f0:	f640 3168 	movw	r1, #2920	@ 0xb68
 800b8f4:	428a      	cmp	r2, r1
 800b8f6:	bf28      	it	cs
 800b8f8:	460a      	movcs	r2, r1
 800b8fa:	b292      	uxth	r2, r2
 800b8fc:	4413      	add	r3, r2
 800b8fe:	68fa      	ldr	r2, [r7, #12]
 800b900:	1ad3      	subs	r3, r2, r3
 800b902:	2b00      	cmp	r3, #0
 800b904:	db08      	blt.n	800b918 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b912:	68fa      	ldr	r2, [r7, #12]
 800b914:	1ad3      	subs	r3, r2, r3
 800b916:	e020      	b.n	800b95a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b920:	1ad3      	subs	r3, r2, r3
 800b922:	2b00      	cmp	r3, #0
 800b924:	dd03      	ble.n	800b92e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2200      	movs	r2, #0
 800b92a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b92c:	e014      	b.n	800b958 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b936:	1ad3      	subs	r3, r2, r3
 800b938:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800b93a:	68bb      	ldr	r3, [r7, #8]
 800b93c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b940:	d306      	bcc.n	800b950 <tcp_update_rcv_ann_wnd+0x90>
 800b942:	4b08      	ldr	r3, [pc, #32]	@ (800b964 <tcp_update_rcv_ann_wnd+0xa4>)
 800b944:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800b948:	4909      	ldr	r1, [pc, #36]	@ (800b970 <tcp_update_rcv_ann_wnd+0xb0>)
 800b94a:	4808      	ldr	r0, [pc, #32]	@ (800b96c <tcp_update_rcv_ann_wnd+0xac>)
 800b94c:	f007 fe40 	bl	80135d0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	b29a      	uxth	r2, r3
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800b958:	2300      	movs	r3, #0
  }
}
 800b95a:	4618      	mov	r0, r3
 800b95c:	3710      	adds	r7, #16
 800b95e:	46bd      	mov	sp, r7
 800b960:	bd80      	pop	{r7, pc}
 800b962:	bf00      	nop
 800b964:	080150f0 	.word	0x080150f0
 800b968:	0801534c 	.word	0x0801534c
 800b96c:	08015134 	.word	0x08015134
 800b970:	08015370 	.word	0x08015370

0800b974 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b084      	sub	sp, #16
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
 800b97c:	460b      	mov	r3, r1
 800b97e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();
 800b980:	f7f9 fcba 	bl	80052f8 <sys_check_core_locking>

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d107      	bne.n	800b99a <tcp_recved+0x26>
 800b98a:	4b20      	ldr	r3, [pc, #128]	@ (800ba0c <tcp_recved+0x98>)
 800b98c:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800b990:	491f      	ldr	r1, [pc, #124]	@ (800ba10 <tcp_recved+0x9c>)
 800b992:	4820      	ldr	r0, [pc, #128]	@ (800ba14 <tcp_recved+0xa0>)
 800b994:	f007 fe1c 	bl	80135d0 <iprintf>
 800b998:	e034      	b.n	800ba04 <tcp_recved+0x90>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	7d1b      	ldrb	r3, [r3, #20]
 800b99e:	2b01      	cmp	r3, #1
 800b9a0:	d106      	bne.n	800b9b0 <tcp_recved+0x3c>
 800b9a2:	4b1a      	ldr	r3, [pc, #104]	@ (800ba0c <tcp_recved+0x98>)
 800b9a4:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800b9a8:	491b      	ldr	r1, [pc, #108]	@ (800ba18 <tcp_recved+0xa4>)
 800b9aa:	481a      	ldr	r0, [pc, #104]	@ (800ba14 <tcp_recved+0xa0>)
 800b9ac:	f007 fe10 	bl	80135d0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b9b4:	887b      	ldrh	r3, [r7, #2]
 800b9b6:	4413      	add	r3, r2
 800b9b8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800b9ba:	89fb      	ldrh	r3, [r7, #14]
 800b9bc:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800b9c0:	4293      	cmp	r3, r2
 800b9c2:	d804      	bhi.n	800b9ce <tcp_recved+0x5a>
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b9c8:	89fa      	ldrh	r2, [r7, #14]
 800b9ca:	429a      	cmp	r2, r3
 800b9cc:	d204      	bcs.n	800b9d8 <tcp_recved+0x64>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800b9d4:	851a      	strh	r2, [r3, #40]	@ 0x28
 800b9d6:	e002      	b.n	800b9de <tcp_recved+0x6a>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	89fa      	ldrh	r2, [r7, #14]
 800b9dc:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800b9de:	6878      	ldr	r0, [r7, #4]
 800b9e0:	f7ff ff6e 	bl	800b8c0 <tcp_update_rcv_ann_wnd>
 800b9e4:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800b9e6:	68bb      	ldr	r3, [r7, #8]
 800b9e8:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800b9ec:	4293      	cmp	r3, r2
 800b9ee:	d909      	bls.n	800ba04 <tcp_recved+0x90>
    tcp_ack_now(pcb);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	8b5b      	ldrh	r3, [r3, #26]
 800b9f4:	f043 0302 	orr.w	r3, r3, #2
 800b9f8:	b29a      	uxth	r2, r3
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	f003 fe46 	bl	800f690 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800ba04:	3710      	adds	r7, #16
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}
 800ba0a:	bf00      	nop
 800ba0c:	080150f0 	.word	0x080150f0
 800ba10:	0801538c 	.word	0x0801538c
 800ba14:	08015134 	.word	0x08015134
 800ba18:	080153a4 	.word	0x080153a4

0800ba1c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800ba1c:	b5b0      	push	{r4, r5, r7, lr}
 800ba1e:	b090      	sub	sp, #64	@ 0x40
 800ba20:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800ba22:	2300      	movs	r3, #0
 800ba24:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800ba28:	4b95      	ldr	r3, [pc, #596]	@ (800bc80 <tcp_slowtmr+0x264>)
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	3301      	adds	r3, #1
 800ba2e:	4a94      	ldr	r2, [pc, #592]	@ (800bc80 <tcp_slowtmr+0x264>)
 800ba30:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800ba32:	4b94      	ldr	r3, [pc, #592]	@ (800bc84 <tcp_slowtmr+0x268>)
 800ba34:	781b      	ldrb	r3, [r3, #0]
 800ba36:	3301      	adds	r3, #1
 800ba38:	b2da      	uxtb	r2, r3
 800ba3a:	4b92      	ldr	r3, [pc, #584]	@ (800bc84 <tcp_slowtmr+0x268>)
 800ba3c:	701a      	strb	r2, [r3, #0]
 800ba3e:	e000      	b.n	800ba42 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800ba40:	bf00      	nop
  prev = NULL;
 800ba42:	2300      	movs	r3, #0
 800ba44:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800ba46:	4b90      	ldr	r3, [pc, #576]	@ (800bc88 <tcp_slowtmr+0x26c>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800ba4c:	e29d      	b.n	800bf8a <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800ba4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba50:	7d1b      	ldrb	r3, [r3, #20]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d106      	bne.n	800ba64 <tcp_slowtmr+0x48>
 800ba56:	4b8d      	ldr	r3, [pc, #564]	@ (800bc8c <tcp_slowtmr+0x270>)
 800ba58:	f240 42be 	movw	r2, #1214	@ 0x4be
 800ba5c:	498c      	ldr	r1, [pc, #560]	@ (800bc90 <tcp_slowtmr+0x274>)
 800ba5e:	488d      	ldr	r0, [pc, #564]	@ (800bc94 <tcp_slowtmr+0x278>)
 800ba60:	f007 fdb6 	bl	80135d0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800ba64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba66:	7d1b      	ldrb	r3, [r3, #20]
 800ba68:	2b01      	cmp	r3, #1
 800ba6a:	d106      	bne.n	800ba7a <tcp_slowtmr+0x5e>
 800ba6c:	4b87      	ldr	r3, [pc, #540]	@ (800bc8c <tcp_slowtmr+0x270>)
 800ba6e:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800ba72:	4989      	ldr	r1, [pc, #548]	@ (800bc98 <tcp_slowtmr+0x27c>)
 800ba74:	4887      	ldr	r0, [pc, #540]	@ (800bc94 <tcp_slowtmr+0x278>)
 800ba76:	f007 fdab 	bl	80135d0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800ba7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba7c:	7d1b      	ldrb	r3, [r3, #20]
 800ba7e:	2b0a      	cmp	r3, #10
 800ba80:	d106      	bne.n	800ba90 <tcp_slowtmr+0x74>
 800ba82:	4b82      	ldr	r3, [pc, #520]	@ (800bc8c <tcp_slowtmr+0x270>)
 800ba84:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800ba88:	4984      	ldr	r1, [pc, #528]	@ (800bc9c <tcp_slowtmr+0x280>)
 800ba8a:	4882      	ldr	r0, [pc, #520]	@ (800bc94 <tcp_slowtmr+0x278>)
 800ba8c:	f007 fda0 	bl	80135d0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800ba90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba92:	7f9a      	ldrb	r2, [r3, #30]
 800ba94:	4b7b      	ldr	r3, [pc, #492]	@ (800bc84 <tcp_slowtmr+0x268>)
 800ba96:	781b      	ldrb	r3, [r3, #0]
 800ba98:	429a      	cmp	r2, r3
 800ba9a:	d105      	bne.n	800baa8 <tcp_slowtmr+0x8c>
      prev = pcb;
 800ba9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba9e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800baa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baa2:	68db      	ldr	r3, [r3, #12]
 800baa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800baa6:	e270      	b.n	800bf8a <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 800baa8:	4b76      	ldr	r3, [pc, #472]	@ (800bc84 <tcp_slowtmr+0x268>)
 800baaa:	781a      	ldrb	r2, [r3, #0]
 800baac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baae:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800bab0:	2300      	movs	r3, #0
 800bab2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800bab6:	2300      	movs	r3, #0
 800bab8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800babc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800babe:	7d1b      	ldrb	r3, [r3, #20]
 800bac0:	2b02      	cmp	r3, #2
 800bac2:	d10a      	bne.n	800bada <tcp_slowtmr+0xbe>
 800bac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bac6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800baca:	2b05      	cmp	r3, #5
 800bacc:	d905      	bls.n	800bada <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800bace:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bad2:	3301      	adds	r3, #1
 800bad4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bad8:	e11e      	b.n	800bd18 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800bada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800badc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bae0:	2b0b      	cmp	r3, #11
 800bae2:	d905      	bls.n	800baf0 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800bae4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bae8:	3301      	adds	r3, #1
 800baea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800baee:	e113      	b.n	800bd18 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800baf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baf2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d075      	beq.n	800bbe6 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800bafa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bafc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d006      	beq.n	800bb10 <tcp_slowtmr+0xf4>
 800bb02:	4b62      	ldr	r3, [pc, #392]	@ (800bc8c <tcp_slowtmr+0x270>)
 800bb04:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800bb08:	4965      	ldr	r1, [pc, #404]	@ (800bca0 <tcp_slowtmr+0x284>)
 800bb0a:	4862      	ldr	r0, [pc, #392]	@ (800bc94 <tcp_slowtmr+0x278>)
 800bb0c:	f007 fd60 	bl	80135d0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800bb10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d106      	bne.n	800bb26 <tcp_slowtmr+0x10a>
 800bb18:	4b5c      	ldr	r3, [pc, #368]	@ (800bc8c <tcp_slowtmr+0x270>)
 800bb1a:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800bb1e:	4961      	ldr	r1, [pc, #388]	@ (800bca4 <tcp_slowtmr+0x288>)
 800bb20:	485c      	ldr	r0, [pc, #368]	@ (800bc94 <tcp_slowtmr+0x278>)
 800bb22:	f007 fd55 	bl	80135d0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800bb26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb28:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800bb2c:	2b0b      	cmp	r3, #11
 800bb2e:	d905      	bls.n	800bb3c <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800bb30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bb34:	3301      	adds	r3, #1
 800bb36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bb3a:	e0ed      	b.n	800bd18 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800bb3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb3e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800bb42:	3b01      	subs	r3, #1
 800bb44:	4a58      	ldr	r2, [pc, #352]	@ (800bca8 <tcp_slowtmr+0x28c>)
 800bb46:	5cd3      	ldrb	r3, [r2, r3]
 800bb48:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800bb4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb4c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800bb50:	7c7a      	ldrb	r2, [r7, #17]
 800bb52:	429a      	cmp	r2, r3
 800bb54:	d907      	bls.n	800bb66 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800bb56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb58:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800bb5c:	3301      	adds	r3, #1
 800bb5e:	b2da      	uxtb	r2, r3
 800bb60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb62:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800bb66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb68:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800bb6c:	7c7a      	ldrb	r2, [r7, #17]
 800bb6e:	429a      	cmp	r2, r3
 800bb70:	f200 80d2 	bhi.w	800bd18 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800bb74:	2301      	movs	r3, #1
 800bb76:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800bb78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb7a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d108      	bne.n	800bb94 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800bb82:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bb84:	f004 fc2e 	bl	80103e4 <tcp_zero_window_probe>
 800bb88:	4603      	mov	r3, r0
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d014      	beq.n	800bbb8 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800bb8e:	2300      	movs	r3, #0
 800bb90:	623b      	str	r3, [r7, #32]
 800bb92:	e011      	b.n	800bbb8 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800bb94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb96:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bb9a:	4619      	mov	r1, r3
 800bb9c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bb9e:	f003 faf1 	bl	800f184 <tcp_split_unsent_seg>
 800bba2:	4603      	mov	r3, r0
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d107      	bne.n	800bbb8 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800bba8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bbaa:	f003 fd71 	bl	800f690 <tcp_output>
 800bbae:	4603      	mov	r3, r0
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d101      	bne.n	800bbb8 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800bbb8:	6a3b      	ldr	r3, [r7, #32]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	f000 80ac 	beq.w	800bd18 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800bbc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800bbc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbca:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800bbce:	2b06      	cmp	r3, #6
 800bbd0:	f200 80a2 	bhi.w	800bd18 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800bbd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbd6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800bbda:	3301      	adds	r3, #1
 800bbdc:	b2da      	uxtb	r2, r3
 800bbde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbe0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800bbe4:	e098      	b.n	800bd18 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800bbe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbe8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	db0f      	blt.n	800bc10 <tcp_slowtmr+0x1f4>
 800bbf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbf2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800bbf6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800bbfa:	4293      	cmp	r3, r2
 800bbfc:	d008      	beq.n	800bc10 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800bbfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc00:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800bc04:	b29b      	uxth	r3, r3
 800bc06:	3301      	adds	r3, #1
 800bc08:	b29b      	uxth	r3, r3
 800bc0a:	b21a      	sxth	r2, r3
 800bc0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc0e:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800bc10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc12:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800bc16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc18:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800bc1c:	429a      	cmp	r2, r3
 800bc1e:	db7b      	blt.n	800bd18 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800bc20:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bc22:	f004 f82b 	bl	800fc7c <tcp_rexmit_rto_prepare>
 800bc26:	4603      	mov	r3, r0
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d007      	beq.n	800bc3c <tcp_slowtmr+0x220>
 800bc2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d171      	bne.n	800bd18 <tcp_slowtmr+0x2fc>
 800bc34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d06d      	beq.n	800bd18 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800bc3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc3e:	7d1b      	ldrb	r3, [r3, #20]
 800bc40:	2b02      	cmp	r3, #2
 800bc42:	d03a      	beq.n	800bcba <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800bc44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc46:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bc4a:	2b0c      	cmp	r3, #12
 800bc4c:	bf28      	it	cs
 800bc4e:	230c      	movcs	r3, #12
 800bc50:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800bc52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc54:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800bc58:	10db      	asrs	r3, r3, #3
 800bc5a:	b21b      	sxth	r3, r3
 800bc5c:	461a      	mov	r2, r3
 800bc5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc60:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800bc64:	4413      	add	r3, r2
 800bc66:	7efa      	ldrb	r2, [r7, #27]
 800bc68:	4910      	ldr	r1, [pc, #64]	@ (800bcac <tcp_slowtmr+0x290>)
 800bc6a:	5c8a      	ldrb	r2, [r1, r2]
 800bc6c:	4093      	lsls	r3, r2
 800bc6e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800bc70:	697b      	ldr	r3, [r7, #20]
 800bc72:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800bc76:	4293      	cmp	r3, r2
 800bc78:	dc1a      	bgt.n	800bcb0 <tcp_slowtmr+0x294>
 800bc7a:	697b      	ldr	r3, [r7, #20]
 800bc7c:	b21a      	sxth	r2, r3
 800bc7e:	e019      	b.n	800bcb4 <tcp_slowtmr+0x298>
 800bc80:	2401054c 	.word	0x2401054c
 800bc84:	24010562 	.word	0x24010562
 800bc88:	24010558 	.word	0x24010558
 800bc8c:	080150f0 	.word	0x080150f0
 800bc90:	08015434 	.word	0x08015434
 800bc94:	08015134 	.word	0x08015134
 800bc98:	08015460 	.word	0x08015460
 800bc9c:	0801548c 	.word	0x0801548c
 800bca0:	080154bc 	.word	0x080154bc
 800bca4:	080154f0 	.word	0x080154f0
 800bca8:	08017124 	.word	0x08017124
 800bcac:	08017114 	.word	0x08017114
 800bcb0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800bcb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcb6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800bcba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800bcc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcc2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800bcc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcc8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800bccc:	4293      	cmp	r3, r2
 800bcce:	bf28      	it	cs
 800bcd0:	4613      	movcs	r3, r2
 800bcd2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800bcd4:	8a7b      	ldrh	r3, [r7, #18]
 800bcd6:	085b      	lsrs	r3, r3, #1
 800bcd8:	b29a      	uxth	r2, r3
 800bcda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcdc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800bce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bce2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800bce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bce8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bcea:	005b      	lsls	r3, r3, #1
 800bcec:	b29b      	uxth	r3, r3
 800bcee:	429a      	cmp	r2, r3
 800bcf0:	d206      	bcs.n	800bd00 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800bcf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcf4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bcf6:	005b      	lsls	r3, r3, #1
 800bcf8:	b29a      	uxth	r2, r3
 800bcfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcfc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800bd00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd02:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800bd04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd06:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800bd0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800bd12:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bd14:	f004 f822 	bl	800fd5c <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800bd18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd1a:	7d1b      	ldrb	r3, [r3, #20]
 800bd1c:	2b06      	cmp	r3, #6
 800bd1e:	d111      	bne.n	800bd44 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800bd20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd22:	8b5b      	ldrh	r3, [r3, #26]
 800bd24:	f003 0310 	and.w	r3, r3, #16
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d00b      	beq.n	800bd44 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bd2c:	4b9c      	ldr	r3, [pc, #624]	@ (800bfa0 <tcp_slowtmr+0x584>)
 800bd2e:	681a      	ldr	r2, [r3, #0]
 800bd30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd32:	6a1b      	ldr	r3, [r3, #32]
 800bd34:	1ad3      	subs	r3, r2, r3
 800bd36:	2b28      	cmp	r3, #40	@ 0x28
 800bd38:	d904      	bls.n	800bd44 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800bd3a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bd3e:	3301      	adds	r3, #1
 800bd40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800bd44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd46:	7a5b      	ldrb	r3, [r3, #9]
 800bd48:	f003 0308 	and.w	r3, r3, #8
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d04a      	beq.n	800bde6 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800bd50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd52:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800bd54:	2b04      	cmp	r3, #4
 800bd56:	d003      	beq.n	800bd60 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800bd58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd5a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800bd5c:	2b07      	cmp	r3, #7
 800bd5e:	d142      	bne.n	800bde6 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bd60:	4b8f      	ldr	r3, [pc, #572]	@ (800bfa0 <tcp_slowtmr+0x584>)
 800bd62:	681a      	ldr	r2, [r3, #0]
 800bd64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd66:	6a1b      	ldr	r3, [r3, #32]
 800bd68:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800bd6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd6c:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800bd70:	4b8c      	ldr	r3, [pc, #560]	@ (800bfa4 <tcp_slowtmr+0x588>)
 800bd72:	440b      	add	r3, r1
 800bd74:	498c      	ldr	r1, [pc, #560]	@ (800bfa8 <tcp_slowtmr+0x58c>)
 800bd76:	fba1 1303 	umull	r1, r3, r1, r3
 800bd7a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bd7c:	429a      	cmp	r2, r3
 800bd7e:	d90a      	bls.n	800bd96 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 800bd80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bd84:	3301      	adds	r3, #1
 800bd86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800bd8a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bd8e:	3301      	adds	r3, #1
 800bd90:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800bd94:	e027      	b.n	800bde6 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bd96:	4b82      	ldr	r3, [pc, #520]	@ (800bfa0 <tcp_slowtmr+0x584>)
 800bd98:	681a      	ldr	r2, [r3, #0]
 800bd9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd9c:	6a1b      	ldr	r3, [r3, #32]
 800bd9e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800bda0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bda2:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800bda6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bda8:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800bdac:	4618      	mov	r0, r3
 800bdae:	4b7f      	ldr	r3, [pc, #508]	@ (800bfac <tcp_slowtmr+0x590>)
 800bdb0:	fb00 f303 	mul.w	r3, r0, r3
 800bdb4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800bdb6:	497c      	ldr	r1, [pc, #496]	@ (800bfa8 <tcp_slowtmr+0x58c>)
 800bdb8:	fba1 1303 	umull	r1, r3, r1, r3
 800bdbc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bdbe:	429a      	cmp	r2, r3
 800bdc0:	d911      	bls.n	800bde6 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800bdc2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bdc4:	f004 face 	bl	8010364 <tcp_keepalive>
 800bdc8:	4603      	mov	r3, r0
 800bdca:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800bdce:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d107      	bne.n	800bde6 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800bdd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdd8:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800bddc:	3301      	adds	r3, #1
 800bdde:	b2da      	uxtb	r2, r3
 800bde0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bde2:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800bde6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bde8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d011      	beq.n	800be12 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800bdee:	4b6c      	ldr	r3, [pc, #432]	@ (800bfa0 <tcp_slowtmr+0x584>)
 800bdf0:	681a      	ldr	r2, [r3, #0]
 800bdf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdf4:	6a1b      	ldr	r3, [r3, #32]
 800bdf6:	1ad2      	subs	r2, r2, r3
 800bdf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdfa:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800bdfe:	4619      	mov	r1, r3
 800be00:	460b      	mov	r3, r1
 800be02:	005b      	lsls	r3, r3, #1
 800be04:	440b      	add	r3, r1
 800be06:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800be08:	429a      	cmp	r2, r3
 800be0a:	d302      	bcc.n	800be12 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 800be0c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800be0e:	f000 fde1 	bl	800c9d4 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800be12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be14:	7d1b      	ldrb	r3, [r3, #20]
 800be16:	2b03      	cmp	r3, #3
 800be18:	d10b      	bne.n	800be32 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800be1a:	4b61      	ldr	r3, [pc, #388]	@ (800bfa0 <tcp_slowtmr+0x584>)
 800be1c:	681a      	ldr	r2, [r3, #0]
 800be1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be20:	6a1b      	ldr	r3, [r3, #32]
 800be22:	1ad3      	subs	r3, r2, r3
 800be24:	2b28      	cmp	r3, #40	@ 0x28
 800be26:	d904      	bls.n	800be32 <tcp_slowtmr+0x416>
        ++pcb_remove;
 800be28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800be2c:	3301      	adds	r3, #1
 800be2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800be32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be34:	7d1b      	ldrb	r3, [r3, #20]
 800be36:	2b09      	cmp	r3, #9
 800be38:	d10b      	bne.n	800be52 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800be3a:	4b59      	ldr	r3, [pc, #356]	@ (800bfa0 <tcp_slowtmr+0x584>)
 800be3c:	681a      	ldr	r2, [r3, #0]
 800be3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be40:	6a1b      	ldr	r3, [r3, #32]
 800be42:	1ad3      	subs	r3, r2, r3
 800be44:	2bf0      	cmp	r3, #240	@ 0xf0
 800be46:	d904      	bls.n	800be52 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800be48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800be4c:	3301      	adds	r3, #1
 800be4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800be52:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800be56:	2b00      	cmp	r3, #0
 800be58:	d060      	beq.n	800bf1c <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 800be5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800be60:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800be62:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800be64:	f000 fc02 	bl	800c66c <tcp_pcb_purge>
      if (prev != NULL) {
 800be68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d010      	beq.n	800be90 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800be6e:	4b50      	ldr	r3, [pc, #320]	@ (800bfb0 <tcp_slowtmr+0x594>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800be74:	429a      	cmp	r2, r3
 800be76:	d106      	bne.n	800be86 <tcp_slowtmr+0x46a>
 800be78:	4b4e      	ldr	r3, [pc, #312]	@ (800bfb4 <tcp_slowtmr+0x598>)
 800be7a:	f240 526d 	movw	r2, #1389	@ 0x56d
 800be7e:	494e      	ldr	r1, [pc, #312]	@ (800bfb8 <tcp_slowtmr+0x59c>)
 800be80:	484e      	ldr	r0, [pc, #312]	@ (800bfbc <tcp_slowtmr+0x5a0>)
 800be82:	f007 fba5 	bl	80135d0 <iprintf>
        prev->next = pcb->next;
 800be86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be88:	68da      	ldr	r2, [r3, #12]
 800be8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be8c:	60da      	str	r2, [r3, #12]
 800be8e:	e00f      	b.n	800beb0 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800be90:	4b47      	ldr	r3, [pc, #284]	@ (800bfb0 <tcp_slowtmr+0x594>)
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800be96:	429a      	cmp	r2, r3
 800be98:	d006      	beq.n	800bea8 <tcp_slowtmr+0x48c>
 800be9a:	4b46      	ldr	r3, [pc, #280]	@ (800bfb4 <tcp_slowtmr+0x598>)
 800be9c:	f240 5271 	movw	r2, #1393	@ 0x571
 800bea0:	4947      	ldr	r1, [pc, #284]	@ (800bfc0 <tcp_slowtmr+0x5a4>)
 800bea2:	4846      	ldr	r0, [pc, #280]	@ (800bfbc <tcp_slowtmr+0x5a0>)
 800bea4:	f007 fb94 	bl	80135d0 <iprintf>
        tcp_active_pcbs = pcb->next;
 800bea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800beaa:	68db      	ldr	r3, [r3, #12]
 800beac:	4a40      	ldr	r2, [pc, #256]	@ (800bfb0 <tcp_slowtmr+0x594>)
 800beae:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800beb0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d013      	beq.n	800bee0 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800beb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800beba:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800bebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bebe:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800bec0:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800bec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bec4:	3304      	adds	r3, #4
 800bec6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bec8:	8ad2      	ldrh	r2, [r2, #22]
 800beca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800becc:	8b09      	ldrh	r1, [r1, #24]
 800bece:	9102      	str	r1, [sp, #8]
 800bed0:	9201      	str	r2, [sp, #4]
 800bed2:	9300      	str	r3, [sp, #0]
 800bed4:	462b      	mov	r3, r5
 800bed6:	4622      	mov	r2, r4
 800bed8:	4601      	mov	r1, r0
 800beda:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bedc:	f004 f98e 	bl	80101fc <tcp_rst>
      err_arg = pcb->callback_arg;
 800bee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bee2:	691b      	ldr	r3, [r3, #16]
 800bee4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800bee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bee8:	7d1b      	ldrb	r3, [r3, #20]
 800beea:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800beec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800beee:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800bef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bef2:	68db      	ldr	r3, [r3, #12]
 800bef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800bef6:	6838      	ldr	r0, [r7, #0]
 800bef8:	f7ff f9ea 	bl	800b2d0 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800befc:	4b31      	ldr	r3, [pc, #196]	@ (800bfc4 <tcp_slowtmr+0x5a8>)
 800befe:	2200      	movs	r2, #0
 800bf00:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d004      	beq.n	800bf12 <tcp_slowtmr+0x4f6>
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	f06f 010c 	mvn.w	r1, #12
 800bf0e:	68b8      	ldr	r0, [r7, #8]
 800bf10:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800bf12:	4b2c      	ldr	r3, [pc, #176]	@ (800bfc4 <tcp_slowtmr+0x5a8>)
 800bf14:	781b      	ldrb	r3, [r3, #0]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d037      	beq.n	800bf8a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800bf1a:	e592      	b.n	800ba42 <tcp_slowtmr+0x26>
      prev = pcb;
 800bf1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf1e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800bf20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf22:	68db      	ldr	r3, [r3, #12]
 800bf24:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800bf26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf28:	7f1b      	ldrb	r3, [r3, #28]
 800bf2a:	3301      	adds	r3, #1
 800bf2c:	b2da      	uxtb	r2, r3
 800bf2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf30:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800bf32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf34:	7f1a      	ldrb	r2, [r3, #28]
 800bf36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf38:	7f5b      	ldrb	r3, [r3, #29]
 800bf3a:	429a      	cmp	r2, r3
 800bf3c:	d325      	bcc.n	800bf8a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800bf3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf40:	2200      	movs	r2, #0
 800bf42:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800bf44:	4b1f      	ldr	r3, [pc, #124]	@ (800bfc4 <tcp_slowtmr+0x5a8>)
 800bf46:	2200      	movs	r2, #0
 800bf48:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800bf4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d00b      	beq.n	800bf6c <tcp_slowtmr+0x550>
 800bf54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bf5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bf5c:	6912      	ldr	r2, [r2, #16]
 800bf5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bf60:	4610      	mov	r0, r2
 800bf62:	4798      	blx	r3
 800bf64:	4603      	mov	r3, r0
 800bf66:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800bf6a:	e002      	b.n	800bf72 <tcp_slowtmr+0x556>
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800bf72:	4b14      	ldr	r3, [pc, #80]	@ (800bfc4 <tcp_slowtmr+0x5a8>)
 800bf74:	781b      	ldrb	r3, [r3, #0]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	f47f ad62 	bne.w	800ba40 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800bf7c:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d102      	bne.n	800bf8a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800bf84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bf86:	f003 fb83 	bl	800f690 <tcp_output>
  while (pcb != NULL) {
 800bf8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	f47f ad5e 	bne.w	800ba4e <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800bf92:	2300      	movs	r3, #0
 800bf94:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800bf96:	4b0c      	ldr	r3, [pc, #48]	@ (800bfc8 <tcp_slowtmr+0x5ac>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800bf9c:	e069      	b.n	800c072 <tcp_slowtmr+0x656>
 800bf9e:	bf00      	nop
 800bfa0:	2401054c 	.word	0x2401054c
 800bfa4:	000a4cb8 	.word	0x000a4cb8
 800bfa8:	10624dd3 	.word	0x10624dd3
 800bfac:	000124f8 	.word	0x000124f8
 800bfb0:	24010558 	.word	0x24010558
 800bfb4:	080150f0 	.word	0x080150f0
 800bfb8:	08015528 	.word	0x08015528
 800bfbc:	08015134 	.word	0x08015134
 800bfc0:	08015554 	.word	0x08015554
 800bfc4:	24010560 	.word	0x24010560
 800bfc8:	2401055c 	.word	0x2401055c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800bfcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfce:	7d1b      	ldrb	r3, [r3, #20]
 800bfd0:	2b0a      	cmp	r3, #10
 800bfd2:	d006      	beq.n	800bfe2 <tcp_slowtmr+0x5c6>
 800bfd4:	4b2b      	ldr	r3, [pc, #172]	@ (800c084 <tcp_slowtmr+0x668>)
 800bfd6:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800bfda:	492b      	ldr	r1, [pc, #172]	@ (800c088 <tcp_slowtmr+0x66c>)
 800bfdc:	482b      	ldr	r0, [pc, #172]	@ (800c08c <tcp_slowtmr+0x670>)
 800bfde:	f007 faf7 	bl	80135d0 <iprintf>
    pcb_remove = 0;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800bfe8:	4b29      	ldr	r3, [pc, #164]	@ (800c090 <tcp_slowtmr+0x674>)
 800bfea:	681a      	ldr	r2, [r3, #0]
 800bfec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfee:	6a1b      	ldr	r3, [r3, #32]
 800bff0:	1ad3      	subs	r3, r2, r3
 800bff2:	2bf0      	cmp	r3, #240	@ 0xf0
 800bff4:	d904      	bls.n	800c000 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800bff6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bffa:	3301      	adds	r3, #1
 800bffc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c000:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c004:	2b00      	cmp	r3, #0
 800c006:	d02f      	beq.n	800c068 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800c008:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c00a:	f000 fb2f 	bl	800c66c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800c00e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c010:	2b00      	cmp	r3, #0
 800c012:	d010      	beq.n	800c036 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800c014:	4b1f      	ldr	r3, [pc, #124]	@ (800c094 <tcp_slowtmr+0x678>)
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c01a:	429a      	cmp	r2, r3
 800c01c:	d106      	bne.n	800c02c <tcp_slowtmr+0x610>
 800c01e:	4b19      	ldr	r3, [pc, #100]	@ (800c084 <tcp_slowtmr+0x668>)
 800c020:	f240 52af 	movw	r2, #1455	@ 0x5af
 800c024:	491c      	ldr	r1, [pc, #112]	@ (800c098 <tcp_slowtmr+0x67c>)
 800c026:	4819      	ldr	r0, [pc, #100]	@ (800c08c <tcp_slowtmr+0x670>)
 800c028:	f007 fad2 	bl	80135d0 <iprintf>
        prev->next = pcb->next;
 800c02c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c02e:	68da      	ldr	r2, [r3, #12]
 800c030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c032:	60da      	str	r2, [r3, #12]
 800c034:	e00f      	b.n	800c056 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800c036:	4b17      	ldr	r3, [pc, #92]	@ (800c094 <tcp_slowtmr+0x678>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c03c:	429a      	cmp	r2, r3
 800c03e:	d006      	beq.n	800c04e <tcp_slowtmr+0x632>
 800c040:	4b10      	ldr	r3, [pc, #64]	@ (800c084 <tcp_slowtmr+0x668>)
 800c042:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800c046:	4915      	ldr	r1, [pc, #84]	@ (800c09c <tcp_slowtmr+0x680>)
 800c048:	4810      	ldr	r0, [pc, #64]	@ (800c08c <tcp_slowtmr+0x670>)
 800c04a:	f007 fac1 	bl	80135d0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800c04e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c050:	68db      	ldr	r3, [r3, #12]
 800c052:	4a10      	ldr	r2, [pc, #64]	@ (800c094 <tcp_slowtmr+0x678>)
 800c054:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800c056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c058:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800c05a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c05c:	68db      	ldr	r3, [r3, #12]
 800c05e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800c060:	69f8      	ldr	r0, [r7, #28]
 800c062:	f7ff f935 	bl	800b2d0 <tcp_free>
 800c066:	e004      	b.n	800c072 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800c068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c06a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800c06c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c06e:	68db      	ldr	r3, [r3, #12]
 800c070:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800c072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c074:	2b00      	cmp	r3, #0
 800c076:	d1a9      	bne.n	800bfcc <tcp_slowtmr+0x5b0>
    }
  }
}
 800c078:	bf00      	nop
 800c07a:	bf00      	nop
 800c07c:	3730      	adds	r7, #48	@ 0x30
 800c07e:	46bd      	mov	sp, r7
 800c080:	bdb0      	pop	{r4, r5, r7, pc}
 800c082:	bf00      	nop
 800c084:	080150f0 	.word	0x080150f0
 800c088:	08015580 	.word	0x08015580
 800c08c:	08015134 	.word	0x08015134
 800c090:	2401054c 	.word	0x2401054c
 800c094:	2401055c 	.word	0x2401055c
 800c098:	080155b0 	.word	0x080155b0
 800c09c:	080155d8 	.word	0x080155d8

0800c0a0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b082      	sub	sp, #8
 800c0a4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800c0a6:	4b2d      	ldr	r3, [pc, #180]	@ (800c15c <tcp_fasttmr+0xbc>)
 800c0a8:	781b      	ldrb	r3, [r3, #0]
 800c0aa:	3301      	adds	r3, #1
 800c0ac:	b2da      	uxtb	r2, r3
 800c0ae:	4b2b      	ldr	r3, [pc, #172]	@ (800c15c <tcp_fasttmr+0xbc>)
 800c0b0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800c0b2:	4b2b      	ldr	r3, [pc, #172]	@ (800c160 <tcp_fasttmr+0xc0>)
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800c0b8:	e048      	b.n	800c14c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	7f9a      	ldrb	r2, [r3, #30]
 800c0be:	4b27      	ldr	r3, [pc, #156]	@ (800c15c <tcp_fasttmr+0xbc>)
 800c0c0:	781b      	ldrb	r3, [r3, #0]
 800c0c2:	429a      	cmp	r2, r3
 800c0c4:	d03f      	beq.n	800c146 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800c0c6:	4b25      	ldr	r3, [pc, #148]	@ (800c15c <tcp_fasttmr+0xbc>)
 800c0c8:	781a      	ldrb	r2, [r3, #0]
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	8b5b      	ldrh	r3, [r3, #26]
 800c0d2:	f003 0301 	and.w	r3, r3, #1
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d010      	beq.n	800c0fc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	8b5b      	ldrh	r3, [r3, #26]
 800c0de:	f043 0302 	orr.w	r3, r3, #2
 800c0e2:	b29a      	uxth	r2, r3
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800c0e8:	6878      	ldr	r0, [r7, #4]
 800c0ea:	f003 fad1 	bl	800f690 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	8b5b      	ldrh	r3, [r3, #26]
 800c0f2:	f023 0303 	bic.w	r3, r3, #3
 800c0f6:	b29a      	uxth	r2, r3
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	8b5b      	ldrh	r3, [r3, #26]
 800c100:	f003 0308 	and.w	r3, r3, #8
 800c104:	2b00      	cmp	r3, #0
 800c106:	d009      	beq.n	800c11c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	8b5b      	ldrh	r3, [r3, #26]
 800c10c:	f023 0308 	bic.w	r3, r3, #8
 800c110:	b29a      	uxth	r2, r3
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	f7ff fa6e 	bl	800b5f8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	68db      	ldr	r3, [r3, #12]
 800c120:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c126:	2b00      	cmp	r3, #0
 800c128:	d00a      	beq.n	800c140 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800c12a:	4b0e      	ldr	r3, [pc, #56]	@ (800c164 <tcp_fasttmr+0xc4>)
 800c12c:	2200      	movs	r2, #0
 800c12e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800c130:	6878      	ldr	r0, [r7, #4]
 800c132:	f000 f819 	bl	800c168 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800c136:	4b0b      	ldr	r3, [pc, #44]	@ (800c164 <tcp_fasttmr+0xc4>)
 800c138:	781b      	ldrb	r3, [r3, #0]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d000      	beq.n	800c140 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800c13e:	e7b8      	b.n	800c0b2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	607b      	str	r3, [r7, #4]
 800c144:	e002      	b.n	800c14c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	68db      	ldr	r3, [r3, #12]
 800c14a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d1b3      	bne.n	800c0ba <tcp_fasttmr+0x1a>
    }
  }
}
 800c152:	bf00      	nop
 800c154:	bf00      	nop
 800c156:	3708      	adds	r7, #8
 800c158:	46bd      	mov	sp, r7
 800c15a:	bd80      	pop	{r7, pc}
 800c15c:	24010562 	.word	0x24010562
 800c160:	24010558 	.word	0x24010558
 800c164:	24010560 	.word	0x24010560

0800c168 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800c168:	b590      	push	{r4, r7, lr}
 800c16a:	b085      	sub	sp, #20
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d109      	bne.n	800c18a <tcp_process_refused_data+0x22>
 800c176:	4b38      	ldr	r3, [pc, #224]	@ (800c258 <tcp_process_refused_data+0xf0>)
 800c178:	f240 6209 	movw	r2, #1545	@ 0x609
 800c17c:	4937      	ldr	r1, [pc, #220]	@ (800c25c <tcp_process_refused_data+0xf4>)
 800c17e:	4838      	ldr	r0, [pc, #224]	@ (800c260 <tcp_process_refused_data+0xf8>)
 800c180:	f007 fa26 	bl	80135d0 <iprintf>
 800c184:	f06f 030f 	mvn.w	r3, #15
 800c188:	e061      	b.n	800c24e <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c18e:	7b5b      	ldrb	r3, [r3, #13]
 800c190:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c196:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2200      	movs	r2, #0
 800c19c:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d00b      	beq.n	800c1c0 <tcp_process_refused_data+0x58>
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	6918      	ldr	r0, [r3, #16]
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	68ba      	ldr	r2, [r7, #8]
 800c1b6:	6879      	ldr	r1, [r7, #4]
 800c1b8:	47a0      	blx	r4
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	73fb      	strb	r3, [r7, #15]
 800c1be:	e007      	b.n	800c1d0 <tcp_process_refused_data+0x68>
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	68ba      	ldr	r2, [r7, #8]
 800c1c4:	6879      	ldr	r1, [r7, #4]
 800c1c6:	2000      	movs	r0, #0
 800c1c8:	f000 f8a6 	bl	800c318 <tcp_recv_null>
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800c1d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d12b      	bne.n	800c230 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800c1d8:	7bbb      	ldrb	r3, [r7, #14]
 800c1da:	f003 0320 	and.w	r3, r3, #32
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d034      	beq.n	800c24c <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c1e6:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800c1ea:	4293      	cmp	r3, r2
 800c1ec:	d005      	beq.n	800c1fa <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c1f2:	3301      	adds	r3, #1
 800c1f4:	b29a      	uxth	r2, r3
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c200:	2b00      	cmp	r3, #0
 800c202:	d00b      	beq.n	800c21c <tcp_process_refused_data+0xb4>
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	6918      	ldr	r0, [r3, #16]
 800c20e:	2300      	movs	r3, #0
 800c210:	2200      	movs	r2, #0
 800c212:	6879      	ldr	r1, [r7, #4]
 800c214:	47a0      	blx	r4
 800c216:	4603      	mov	r3, r0
 800c218:	73fb      	strb	r3, [r7, #15]
 800c21a:	e001      	b.n	800c220 <tcp_process_refused_data+0xb8>
 800c21c:	2300      	movs	r3, #0
 800c21e:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800c220:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c224:	f113 0f0d 	cmn.w	r3, #13
 800c228:	d110      	bne.n	800c24c <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 800c22a:	f06f 030c 	mvn.w	r3, #12
 800c22e:	e00e      	b.n	800c24e <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 800c230:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c234:	f113 0f0d 	cmn.w	r3, #13
 800c238:	d102      	bne.n	800c240 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800c23a:	f06f 030c 	mvn.w	r3, #12
 800c23e:	e006      	b.n	800c24e <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	68ba      	ldr	r2, [r7, #8]
 800c244:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800c246:	f06f 0304 	mvn.w	r3, #4
 800c24a:	e000      	b.n	800c24e <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 800c24c:	2300      	movs	r3, #0
}
 800c24e:	4618      	mov	r0, r3
 800c250:	3714      	adds	r7, #20
 800c252:	46bd      	mov	sp, r7
 800c254:	bd90      	pop	{r4, r7, pc}
 800c256:	bf00      	nop
 800c258:	080150f0 	.word	0x080150f0
 800c25c:	08015600 	.word	0x08015600
 800c260:	08015134 	.word	0x08015134

0800c264 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b084      	sub	sp, #16
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800c26c:	e007      	b.n	800c27e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800c274:	6878      	ldr	r0, [r7, #4]
 800c276:	f000 f80a 	bl	800c28e <tcp_seg_free>
    seg = next;
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d1f4      	bne.n	800c26e <tcp_segs_free+0xa>
  }
}
 800c284:	bf00      	nop
 800c286:	bf00      	nop
 800c288:	3710      	adds	r7, #16
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bd80      	pop	{r7, pc}

0800c28e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800c28e:	b580      	push	{r7, lr}
 800c290:	b082      	sub	sp, #8
 800c292:	af00      	add	r7, sp, #0
 800c294:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d00c      	beq.n	800c2b6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	685b      	ldr	r3, [r3, #4]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d004      	beq.n	800c2ae <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	685b      	ldr	r3, [r3, #4]
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	f7fe fd65 	bl	800ad78 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800c2ae:	6879      	ldr	r1, [r7, #4]
 800c2b0:	2003      	movs	r0, #3
 800c2b2:	f7fd fead 	bl	800a010 <memp_free>
  }
}
 800c2b6:	bf00      	nop
 800c2b8:	3708      	adds	r7, #8
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	bd80      	pop	{r7, pc}
	...

0800c2c0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b084      	sub	sp, #16
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d106      	bne.n	800c2dc <tcp_seg_copy+0x1c>
 800c2ce:	4b0f      	ldr	r3, [pc, #60]	@ (800c30c <tcp_seg_copy+0x4c>)
 800c2d0:	f240 6282 	movw	r2, #1666	@ 0x682
 800c2d4:	490e      	ldr	r1, [pc, #56]	@ (800c310 <tcp_seg_copy+0x50>)
 800c2d6:	480f      	ldr	r0, [pc, #60]	@ (800c314 <tcp_seg_copy+0x54>)
 800c2d8:	f007 f97a 	bl	80135d0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800c2dc:	2003      	movs	r0, #3
 800c2de:	f7fd fe21 	bl	8009f24 <memp_malloc>
 800c2e2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d101      	bne.n	800c2ee <tcp_seg_copy+0x2e>
    return NULL;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	e00a      	b.n	800c304 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800c2ee:	2210      	movs	r2, #16
 800c2f0:	6879      	ldr	r1, [r7, #4]
 800c2f2:	68f8      	ldr	r0, [r7, #12]
 800c2f4:	f007 fa9d 	bl	8013832 <memcpy>
  pbuf_ref(cseg->p);
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	685b      	ldr	r3, [r3, #4]
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	f7fe fde1 	bl	800aec4 <pbuf_ref>
  return cseg;
 800c302:	68fb      	ldr	r3, [r7, #12]
}
 800c304:	4618      	mov	r0, r3
 800c306:	3710      	adds	r7, #16
 800c308:	46bd      	mov	sp, r7
 800c30a:	bd80      	pop	{r7, pc}
 800c30c:	080150f0 	.word	0x080150f0
 800c310:	08015644 	.word	0x08015644
 800c314:	08015134 	.word	0x08015134

0800c318 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b084      	sub	sp, #16
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	60f8      	str	r0, [r7, #12]
 800c320:	60b9      	str	r1, [r7, #8]
 800c322:	607a      	str	r2, [r7, #4]
 800c324:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800c326:	68bb      	ldr	r3, [r7, #8]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d109      	bne.n	800c340 <tcp_recv_null+0x28>
 800c32c:	4b12      	ldr	r3, [pc, #72]	@ (800c378 <tcp_recv_null+0x60>)
 800c32e:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800c332:	4912      	ldr	r1, [pc, #72]	@ (800c37c <tcp_recv_null+0x64>)
 800c334:	4812      	ldr	r0, [pc, #72]	@ (800c380 <tcp_recv_null+0x68>)
 800c336:	f007 f94b 	bl	80135d0 <iprintf>
 800c33a:	f06f 030f 	mvn.w	r3, #15
 800c33e:	e016      	b.n	800c36e <tcp_recv_null+0x56>

  if (p != NULL) {
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d009      	beq.n	800c35a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	891b      	ldrh	r3, [r3, #8]
 800c34a:	4619      	mov	r1, r3
 800c34c:	68b8      	ldr	r0, [r7, #8]
 800c34e:	f7ff fb11 	bl	800b974 <tcp_recved>
    pbuf_free(p);
 800c352:	6878      	ldr	r0, [r7, #4]
 800c354:	f7fe fd10 	bl	800ad78 <pbuf_free>
 800c358:	e008      	b.n	800c36c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800c35a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d104      	bne.n	800c36c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800c362:	68b8      	ldr	r0, [r7, #8]
 800c364:	f7ff f9b2 	bl	800b6cc <tcp_close>
 800c368:	4603      	mov	r3, r0
 800c36a:	e000      	b.n	800c36e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800c36c:	2300      	movs	r3, #0
}
 800c36e:	4618      	mov	r0, r3
 800c370:	3710      	adds	r7, #16
 800c372:	46bd      	mov	sp, r7
 800c374:	bd80      	pop	{r7, pc}
 800c376:	bf00      	nop
 800c378:	080150f0 	.word	0x080150f0
 800c37c:	08015660 	.word	0x08015660
 800c380:	08015134 	.word	0x08015134

0800c384 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b086      	sub	sp, #24
 800c388:	af00      	add	r7, sp, #0
 800c38a:	4603      	mov	r3, r0
 800c38c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800c38e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c392:	2b00      	cmp	r3, #0
 800c394:	db01      	blt.n	800c39a <tcp_kill_prio+0x16>
 800c396:	79fb      	ldrb	r3, [r7, #7]
 800c398:	e000      	b.n	800c39c <tcp_kill_prio+0x18>
 800c39a:	237f      	movs	r3, #127	@ 0x7f
 800c39c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800c39e:	7afb      	ldrb	r3, [r7, #11]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d034      	beq.n	800c40e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800c3a4:	7afb      	ldrb	r3, [r7, #11]
 800c3a6:	3b01      	subs	r3, #1
 800c3a8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c3b2:	4b19      	ldr	r3, [pc, #100]	@ (800c418 <tcp_kill_prio+0x94>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	617b      	str	r3, [r7, #20]
 800c3b8:	e01f      	b.n	800c3fa <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800c3ba:	697b      	ldr	r3, [r7, #20]
 800c3bc:	7d5b      	ldrb	r3, [r3, #21]
 800c3be:	7afa      	ldrb	r2, [r7, #11]
 800c3c0:	429a      	cmp	r2, r3
 800c3c2:	d80c      	bhi.n	800c3de <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800c3c4:	697b      	ldr	r3, [r7, #20]
 800c3c6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800c3c8:	7afa      	ldrb	r2, [r7, #11]
 800c3ca:	429a      	cmp	r2, r3
 800c3cc:	d112      	bne.n	800c3f4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800c3ce:	4b13      	ldr	r3, [pc, #76]	@ (800c41c <tcp_kill_prio+0x98>)
 800c3d0:	681a      	ldr	r2, [r3, #0]
 800c3d2:	697b      	ldr	r3, [r7, #20]
 800c3d4:	6a1b      	ldr	r3, [r3, #32]
 800c3d6:	1ad3      	subs	r3, r2, r3
 800c3d8:	68fa      	ldr	r2, [r7, #12]
 800c3da:	429a      	cmp	r2, r3
 800c3dc:	d80a      	bhi.n	800c3f4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800c3de:	4b0f      	ldr	r3, [pc, #60]	@ (800c41c <tcp_kill_prio+0x98>)
 800c3e0:	681a      	ldr	r2, [r3, #0]
 800c3e2:	697b      	ldr	r3, [r7, #20]
 800c3e4:	6a1b      	ldr	r3, [r3, #32]
 800c3e6:	1ad3      	subs	r3, r2, r3
 800c3e8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800c3ea:	697b      	ldr	r3, [r7, #20]
 800c3ec:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800c3ee:	697b      	ldr	r3, [r7, #20]
 800c3f0:	7d5b      	ldrb	r3, [r3, #21]
 800c3f2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c3f4:	697b      	ldr	r3, [r7, #20]
 800c3f6:	68db      	ldr	r3, [r3, #12]
 800c3f8:	617b      	str	r3, [r7, #20]
 800c3fa:	697b      	ldr	r3, [r7, #20]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d1dc      	bne.n	800c3ba <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800c400:	693b      	ldr	r3, [r7, #16]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d004      	beq.n	800c410 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800c406:	6938      	ldr	r0, [r7, #16]
 800c408:	f7ff fa4e 	bl	800b8a8 <tcp_abort>
 800c40c:	e000      	b.n	800c410 <tcp_kill_prio+0x8c>
    return;
 800c40e:	bf00      	nop
  }
}
 800c410:	3718      	adds	r7, #24
 800c412:	46bd      	mov	sp, r7
 800c414:	bd80      	pop	{r7, pc}
 800c416:	bf00      	nop
 800c418:	24010558 	.word	0x24010558
 800c41c:	2401054c 	.word	0x2401054c

0800c420 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b086      	sub	sp, #24
 800c424:	af00      	add	r7, sp, #0
 800c426:	4603      	mov	r3, r0
 800c428:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800c42a:	79fb      	ldrb	r3, [r7, #7]
 800c42c:	2b08      	cmp	r3, #8
 800c42e:	d009      	beq.n	800c444 <tcp_kill_state+0x24>
 800c430:	79fb      	ldrb	r3, [r7, #7]
 800c432:	2b09      	cmp	r3, #9
 800c434:	d006      	beq.n	800c444 <tcp_kill_state+0x24>
 800c436:	4b1a      	ldr	r3, [pc, #104]	@ (800c4a0 <tcp_kill_state+0x80>)
 800c438:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800c43c:	4919      	ldr	r1, [pc, #100]	@ (800c4a4 <tcp_kill_state+0x84>)
 800c43e:	481a      	ldr	r0, [pc, #104]	@ (800c4a8 <tcp_kill_state+0x88>)
 800c440:	f007 f8c6 	bl	80135d0 <iprintf>

  inactivity = 0;
 800c444:	2300      	movs	r3, #0
 800c446:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800c448:	2300      	movs	r3, #0
 800c44a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c44c:	4b17      	ldr	r3, [pc, #92]	@ (800c4ac <tcp_kill_state+0x8c>)
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	617b      	str	r3, [r7, #20]
 800c452:	e017      	b.n	800c484 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800c454:	697b      	ldr	r3, [r7, #20]
 800c456:	7d1b      	ldrb	r3, [r3, #20]
 800c458:	79fa      	ldrb	r2, [r7, #7]
 800c45a:	429a      	cmp	r2, r3
 800c45c:	d10f      	bne.n	800c47e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c45e:	4b14      	ldr	r3, [pc, #80]	@ (800c4b0 <tcp_kill_state+0x90>)
 800c460:	681a      	ldr	r2, [r3, #0]
 800c462:	697b      	ldr	r3, [r7, #20]
 800c464:	6a1b      	ldr	r3, [r3, #32]
 800c466:	1ad3      	subs	r3, r2, r3
 800c468:	68fa      	ldr	r2, [r7, #12]
 800c46a:	429a      	cmp	r2, r3
 800c46c:	d807      	bhi.n	800c47e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800c46e:	4b10      	ldr	r3, [pc, #64]	@ (800c4b0 <tcp_kill_state+0x90>)
 800c470:	681a      	ldr	r2, [r3, #0]
 800c472:	697b      	ldr	r3, [r7, #20]
 800c474:	6a1b      	ldr	r3, [r3, #32]
 800c476:	1ad3      	subs	r3, r2, r3
 800c478:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800c47a:	697b      	ldr	r3, [r7, #20]
 800c47c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c47e:	697b      	ldr	r3, [r7, #20]
 800c480:	68db      	ldr	r3, [r3, #12]
 800c482:	617b      	str	r3, [r7, #20]
 800c484:	697b      	ldr	r3, [r7, #20]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d1e4      	bne.n	800c454 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800c48a:	693b      	ldr	r3, [r7, #16]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d003      	beq.n	800c498 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800c490:	2100      	movs	r1, #0
 800c492:	6938      	ldr	r0, [r7, #16]
 800c494:	f7ff f948 	bl	800b728 <tcp_abandon>
  }
}
 800c498:	bf00      	nop
 800c49a:	3718      	adds	r7, #24
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bd80      	pop	{r7, pc}
 800c4a0:	080150f0 	.word	0x080150f0
 800c4a4:	0801567c 	.word	0x0801567c
 800c4a8:	08015134 	.word	0x08015134
 800c4ac:	24010558 	.word	0x24010558
 800c4b0:	2401054c 	.word	0x2401054c

0800c4b4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b084      	sub	sp, #16
 800c4b8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800c4be:	2300      	movs	r3, #0
 800c4c0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c4c2:	4b12      	ldr	r3, [pc, #72]	@ (800c50c <tcp_kill_timewait+0x58>)
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	60fb      	str	r3, [r7, #12]
 800c4c8:	e012      	b.n	800c4f0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c4ca:	4b11      	ldr	r3, [pc, #68]	@ (800c510 <tcp_kill_timewait+0x5c>)
 800c4cc:	681a      	ldr	r2, [r3, #0]
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	6a1b      	ldr	r3, [r3, #32]
 800c4d2:	1ad3      	subs	r3, r2, r3
 800c4d4:	687a      	ldr	r2, [r7, #4]
 800c4d6:	429a      	cmp	r2, r3
 800c4d8:	d807      	bhi.n	800c4ea <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800c4da:	4b0d      	ldr	r3, [pc, #52]	@ (800c510 <tcp_kill_timewait+0x5c>)
 800c4dc:	681a      	ldr	r2, [r3, #0]
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	6a1b      	ldr	r3, [r3, #32]
 800c4e2:	1ad3      	subs	r3, r2, r3
 800c4e4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	68db      	ldr	r3, [r3, #12]
 800c4ee:	60fb      	str	r3, [r7, #12]
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d1e9      	bne.n	800c4ca <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800c4f6:	68bb      	ldr	r3, [r7, #8]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d002      	beq.n	800c502 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800c4fc:	68b8      	ldr	r0, [r7, #8]
 800c4fe:	f7ff f9d3 	bl	800b8a8 <tcp_abort>
  }
}
 800c502:	bf00      	nop
 800c504:	3710      	adds	r7, #16
 800c506:	46bd      	mov	sp, r7
 800c508:	bd80      	pop	{r7, pc}
 800c50a:	bf00      	nop
 800c50c:	2401055c 	.word	0x2401055c
 800c510:	2401054c 	.word	0x2401054c

0800c514 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b082      	sub	sp, #8
 800c518:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800c51a:	4b10      	ldr	r3, [pc, #64]	@ (800c55c <tcp_handle_closepend+0x48>)
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800c520:	e014      	b.n	800c54c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	68db      	ldr	r3, [r3, #12]
 800c526:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	8b5b      	ldrh	r3, [r3, #26]
 800c52c:	f003 0308 	and.w	r3, r3, #8
 800c530:	2b00      	cmp	r3, #0
 800c532:	d009      	beq.n	800c548 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	8b5b      	ldrh	r3, [r3, #26]
 800c538:	f023 0308 	bic.w	r3, r3, #8
 800c53c:	b29a      	uxth	r2, r3
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800c542:	6878      	ldr	r0, [r7, #4]
 800c544:	f7ff f858 	bl	800b5f8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d1e7      	bne.n	800c522 <tcp_handle_closepend+0xe>
  }
}
 800c552:	bf00      	nop
 800c554:	bf00      	nop
 800c556:	3708      	adds	r7, #8
 800c558:	46bd      	mov	sp, r7
 800c55a:	bd80      	pop	{r7, pc}
 800c55c:	24010558 	.word	0x24010558

0800c560 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b084      	sub	sp, #16
 800c564:	af00      	add	r7, sp, #0
 800c566:	4603      	mov	r3, r0
 800c568:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();
 800c56a:	f7f8 fec5 	bl	80052f8 <sys_check_core_locking>

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c56e:	2001      	movs	r0, #1
 800c570:	f7fd fcd8 	bl	8009f24 <memp_malloc>
 800c574:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d126      	bne.n	800c5ca <tcp_alloc+0x6a>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800c57c:	f7ff ffca 	bl	800c514 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800c580:	f7ff ff98 	bl	800c4b4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c584:	2001      	movs	r0, #1
 800c586:	f7fd fccd 	bl	8009f24 <memp_malloc>
 800c58a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d11b      	bne.n	800c5ca <tcp_alloc+0x6a>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800c592:	2009      	movs	r0, #9
 800c594:	f7ff ff44 	bl	800c420 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c598:	2001      	movs	r0, #1
 800c59a:	f7fd fcc3 	bl	8009f24 <memp_malloc>
 800c59e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d111      	bne.n	800c5ca <tcp_alloc+0x6a>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800c5a6:	2008      	movs	r0, #8
 800c5a8:	f7ff ff3a 	bl	800c420 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c5ac:	2001      	movs	r0, #1
 800c5ae:	f7fd fcb9 	bl	8009f24 <memp_malloc>
 800c5b2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d107      	bne.n	800c5ca <tcp_alloc+0x6a>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800c5ba:	79fb      	ldrb	r3, [r7, #7]
 800c5bc:	4618      	mov	r0, r3
 800c5be:	f7ff fee1 	bl	800c384 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c5c2:	2001      	movs	r0, #1
 800c5c4:	f7fd fcae 	bl	8009f24 <memp_malloc>
 800c5c8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d03f      	beq.n	800c650 <tcp_alloc+0xf0>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800c5d0:	229c      	movs	r2, #156	@ 0x9c
 800c5d2:	2100      	movs	r1, #0
 800c5d4:	68f8      	ldr	r0, [r7, #12]
 800c5d6:	f007 f860 	bl	801369a <memset>
    pcb->prio = prio;
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	79fa      	ldrb	r2, [r7, #7]
 800c5de:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800c5e6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800c5f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	22ff      	movs	r2, #255	@ 0xff
 800c5fe:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800c606:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	2206      	movs	r2, #6
 800c60c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	2206      	movs	r2, #6
 800c614:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c61c:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	2201      	movs	r2, #1
 800c622:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800c626:	4b0d      	ldr	r3, [pc, #52]	@ (800c65c <tcp_alloc+0xfc>)
 800c628:	681a      	ldr	r2, [r3, #0]
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800c62e:	4b0c      	ldr	r3, [pc, #48]	@ (800c660 <tcp_alloc+0x100>)
 800c630:	781a      	ldrb	r2, [r3, #0]
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800c63c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	4a08      	ldr	r2, [pc, #32]	@ (800c664 <tcp_alloc+0x104>)
 800c644:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	4a07      	ldr	r2, [pc, #28]	@ (800c668 <tcp_alloc+0x108>)
 800c64c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800c650:	68fb      	ldr	r3, [r7, #12]
}
 800c652:	4618      	mov	r0, r3
 800c654:	3710      	adds	r7, #16
 800c656:	46bd      	mov	sp, r7
 800c658:	bd80      	pop	{r7, pc}
 800c65a:	bf00      	nop
 800c65c:	2401054c 	.word	0x2401054c
 800c660:	24010562 	.word	0x24010562
 800c664:	0800c319 	.word	0x0800c319
 800c668:	006ddd00 	.word	0x006ddd00

0800c66c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b082      	sub	sp, #8
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d107      	bne.n	800c68a <tcp_pcb_purge+0x1e>
 800c67a:	4b21      	ldr	r3, [pc, #132]	@ (800c700 <tcp_pcb_purge+0x94>)
 800c67c:	f640 0251 	movw	r2, #2129	@ 0x851
 800c680:	4920      	ldr	r1, [pc, #128]	@ (800c704 <tcp_pcb_purge+0x98>)
 800c682:	4821      	ldr	r0, [pc, #132]	@ (800c708 <tcp_pcb_purge+0x9c>)
 800c684:	f006 ffa4 	bl	80135d0 <iprintf>
 800c688:	e037      	b.n	800c6fa <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	7d1b      	ldrb	r3, [r3, #20]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d033      	beq.n	800c6fa <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800c696:	2b0a      	cmp	r3, #10
 800c698:	d02f      	beq.n	800c6fa <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800c69e:	2b01      	cmp	r3, #1
 800c6a0:	d02b      	beq.n	800c6fa <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d007      	beq.n	800c6ba <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f7fe fb62 	bl	800ad78 <pbuf_free>
      pcb->refused_data = NULL;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d002      	beq.n	800c6c8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800c6c2:	6878      	ldr	r0, [r7, #4]
 800c6c4:	f000 f986 	bl	800c9d4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c6ce:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	f7ff fdc5 	bl	800c264 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c6de:	4618      	mov	r0, r3
 800c6e0:	f7ff fdc0 	bl	800c264 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	66da      	str	r2, [r3, #108]	@ 0x6c
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800c6fa:	3708      	adds	r7, #8
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	bd80      	pop	{r7, pc}
 800c700:	080150f0 	.word	0x080150f0
 800c704:	0801573c 	.word	0x0801573c
 800c708:	08015134 	.word	0x08015134

0800c70c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b084      	sub	sp, #16
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
 800c714:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800c716:	683b      	ldr	r3, [r7, #0]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d106      	bne.n	800c72a <tcp_pcb_remove+0x1e>
 800c71c:	4b3e      	ldr	r3, [pc, #248]	@ (800c818 <tcp_pcb_remove+0x10c>)
 800c71e:	f640 0283 	movw	r2, #2179	@ 0x883
 800c722:	493e      	ldr	r1, [pc, #248]	@ (800c81c <tcp_pcb_remove+0x110>)
 800c724:	483e      	ldr	r0, [pc, #248]	@ (800c820 <tcp_pcb_remove+0x114>)
 800c726:	f006 ff53 	bl	80135d0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d106      	bne.n	800c73e <tcp_pcb_remove+0x32>
 800c730:	4b39      	ldr	r3, [pc, #228]	@ (800c818 <tcp_pcb_remove+0x10c>)
 800c732:	f640 0284 	movw	r2, #2180	@ 0x884
 800c736:	493b      	ldr	r1, [pc, #236]	@ (800c824 <tcp_pcb_remove+0x118>)
 800c738:	4839      	ldr	r0, [pc, #228]	@ (800c820 <tcp_pcb_remove+0x114>)
 800c73a:	f006 ff49 	bl	80135d0 <iprintf>

  TCP_RMV(pcblist, pcb);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	683a      	ldr	r2, [r7, #0]
 800c744:	429a      	cmp	r2, r3
 800c746:	d105      	bne.n	800c754 <tcp_pcb_remove+0x48>
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	68da      	ldr	r2, [r3, #12]
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	601a      	str	r2, [r3, #0]
 800c752:	e013      	b.n	800c77c <tcp_pcb_remove+0x70>
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	60fb      	str	r3, [r7, #12]
 800c75a:	e00c      	b.n	800c776 <tcp_pcb_remove+0x6a>
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	68db      	ldr	r3, [r3, #12]
 800c760:	683a      	ldr	r2, [r7, #0]
 800c762:	429a      	cmp	r2, r3
 800c764:	d104      	bne.n	800c770 <tcp_pcb_remove+0x64>
 800c766:	683b      	ldr	r3, [r7, #0]
 800c768:	68da      	ldr	r2, [r3, #12]
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	60da      	str	r2, [r3, #12]
 800c76e:	e005      	b.n	800c77c <tcp_pcb_remove+0x70>
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	68db      	ldr	r3, [r3, #12]
 800c774:	60fb      	str	r3, [r7, #12]
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d1ef      	bne.n	800c75c <tcp_pcb_remove+0x50>
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	2200      	movs	r2, #0
 800c780:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800c782:	6838      	ldr	r0, [r7, #0]
 800c784:	f7ff ff72 	bl	800c66c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	7d1b      	ldrb	r3, [r3, #20]
 800c78c:	2b0a      	cmp	r3, #10
 800c78e:	d013      	beq.n	800c7b8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800c794:	2b01      	cmp	r3, #1
 800c796:	d00f      	beq.n	800c7b8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	8b5b      	ldrh	r3, [r3, #26]
 800c79c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d009      	beq.n	800c7b8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	8b5b      	ldrh	r3, [r3, #26]
 800c7a8:	f043 0302 	orr.w	r3, r3, #2
 800c7ac:	b29a      	uxth	r2, r3
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c7b2:	6838      	ldr	r0, [r7, #0]
 800c7b4:	f002 ff6c 	bl	800f690 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800c7b8:	683b      	ldr	r3, [r7, #0]
 800c7ba:	7d1b      	ldrb	r3, [r3, #20]
 800c7bc:	2b01      	cmp	r3, #1
 800c7be:	d020      	beq.n	800c802 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800c7c0:	683b      	ldr	r3, [r7, #0]
 800c7c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d006      	beq.n	800c7d6 <tcp_pcb_remove+0xca>
 800c7c8:	4b13      	ldr	r3, [pc, #76]	@ (800c818 <tcp_pcb_remove+0x10c>)
 800c7ca:	f640 0293 	movw	r2, #2195	@ 0x893
 800c7ce:	4916      	ldr	r1, [pc, #88]	@ (800c828 <tcp_pcb_remove+0x11c>)
 800c7d0:	4813      	ldr	r0, [pc, #76]	@ (800c820 <tcp_pcb_remove+0x114>)
 800c7d2:	f006 fefd 	bl	80135d0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d006      	beq.n	800c7ec <tcp_pcb_remove+0xe0>
 800c7de:	4b0e      	ldr	r3, [pc, #56]	@ (800c818 <tcp_pcb_remove+0x10c>)
 800c7e0:	f640 0294 	movw	r2, #2196	@ 0x894
 800c7e4:	4911      	ldr	r1, [pc, #68]	@ (800c82c <tcp_pcb_remove+0x120>)
 800c7e6:	480e      	ldr	r0, [pc, #56]	@ (800c820 <tcp_pcb_remove+0x114>)
 800c7e8:	f006 fef2 	bl	80135d0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800c7ec:	683b      	ldr	r3, [r7, #0]
 800c7ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d006      	beq.n	800c802 <tcp_pcb_remove+0xf6>
 800c7f4:	4b08      	ldr	r3, [pc, #32]	@ (800c818 <tcp_pcb_remove+0x10c>)
 800c7f6:	f640 0296 	movw	r2, #2198	@ 0x896
 800c7fa:	490d      	ldr	r1, [pc, #52]	@ (800c830 <tcp_pcb_remove+0x124>)
 800c7fc:	4808      	ldr	r0, [pc, #32]	@ (800c820 <tcp_pcb_remove+0x114>)
 800c7fe:	f006 fee7 	bl	80135d0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800c802:	683b      	ldr	r3, [r7, #0]
 800c804:	2200      	movs	r2, #0
 800c806:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800c808:	683b      	ldr	r3, [r7, #0]
 800c80a:	2200      	movs	r2, #0
 800c80c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800c80e:	bf00      	nop
 800c810:	3710      	adds	r7, #16
 800c812:	46bd      	mov	sp, r7
 800c814:	bd80      	pop	{r7, pc}
 800c816:	bf00      	nop
 800c818:	080150f0 	.word	0x080150f0
 800c81c:	08015758 	.word	0x08015758
 800c820:	08015134 	.word	0x08015134
 800c824:	08015774 	.word	0x08015774
 800c828:	08015794 	.word	0x08015794
 800c82c:	080157ac 	.word	0x080157ac
 800c830:	080157c8 	.word	0x080157c8

0800c834 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800c834:	b580      	push	{r7, lr}
 800c836:	b082      	sub	sp, #8
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d106      	bne.n	800c850 <tcp_next_iss+0x1c>
 800c842:	4b0a      	ldr	r3, [pc, #40]	@ (800c86c <tcp_next_iss+0x38>)
 800c844:	f640 02af 	movw	r2, #2223	@ 0x8af
 800c848:	4909      	ldr	r1, [pc, #36]	@ (800c870 <tcp_next_iss+0x3c>)
 800c84a:	480a      	ldr	r0, [pc, #40]	@ (800c874 <tcp_next_iss+0x40>)
 800c84c:	f006 fec0 	bl	80135d0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800c850:	4b09      	ldr	r3, [pc, #36]	@ (800c878 <tcp_next_iss+0x44>)
 800c852:	681a      	ldr	r2, [r3, #0]
 800c854:	4b09      	ldr	r3, [pc, #36]	@ (800c87c <tcp_next_iss+0x48>)
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	4413      	add	r3, r2
 800c85a:	4a07      	ldr	r2, [pc, #28]	@ (800c878 <tcp_next_iss+0x44>)
 800c85c:	6013      	str	r3, [r2, #0]
  return iss;
 800c85e:	4b06      	ldr	r3, [pc, #24]	@ (800c878 <tcp_next_iss+0x44>)
 800c860:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800c862:	4618      	mov	r0, r3
 800c864:	3708      	adds	r7, #8
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}
 800c86a:	bf00      	nop
 800c86c:	080150f0 	.word	0x080150f0
 800c870:	080157e0 	.word	0x080157e0
 800c874:	08015134 	.word	0x08015134
 800c878:	2400002c 	.word	0x2400002c
 800c87c:	2401054c 	.word	0x2401054c

0800c880 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b086      	sub	sp, #24
 800c884:	af00      	add	r7, sp, #0
 800c886:	4603      	mov	r3, r0
 800c888:	60b9      	str	r1, [r7, #8]
 800c88a:	607a      	str	r2, [r7, #4]
 800c88c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d106      	bne.n	800c8a2 <tcp_eff_send_mss_netif+0x22>
 800c894:	4b14      	ldr	r3, [pc, #80]	@ (800c8e8 <tcp_eff_send_mss_netif+0x68>)
 800c896:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800c89a:	4914      	ldr	r1, [pc, #80]	@ (800c8ec <tcp_eff_send_mss_netif+0x6c>)
 800c89c:	4814      	ldr	r0, [pc, #80]	@ (800c8f0 <tcp_eff_send_mss_netif+0x70>)
 800c89e:	f006 fe97 	bl	80135d0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800c8a2:	68bb      	ldr	r3, [r7, #8]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d101      	bne.n	800c8ac <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800c8a8:	89fb      	ldrh	r3, [r7, #14]
 800c8aa:	e019      	b.n	800c8e0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800c8ac:	68bb      	ldr	r3, [r7, #8]
 800c8ae:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800c8b0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800c8b2:	8afb      	ldrh	r3, [r7, #22]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d012      	beq.n	800c8de <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800c8b8:	2328      	movs	r3, #40	@ 0x28
 800c8ba:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800c8bc:	8afa      	ldrh	r2, [r7, #22]
 800c8be:	8abb      	ldrh	r3, [r7, #20]
 800c8c0:	429a      	cmp	r2, r3
 800c8c2:	d904      	bls.n	800c8ce <tcp_eff_send_mss_netif+0x4e>
 800c8c4:	8afa      	ldrh	r2, [r7, #22]
 800c8c6:	8abb      	ldrh	r3, [r7, #20]
 800c8c8:	1ad3      	subs	r3, r2, r3
 800c8ca:	b29b      	uxth	r3, r3
 800c8cc:	e000      	b.n	800c8d0 <tcp_eff_send_mss_netif+0x50>
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800c8d2:	8a7a      	ldrh	r2, [r7, #18]
 800c8d4:	89fb      	ldrh	r3, [r7, #14]
 800c8d6:	4293      	cmp	r3, r2
 800c8d8:	bf28      	it	cs
 800c8da:	4613      	movcs	r3, r2
 800c8dc:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800c8de:	89fb      	ldrh	r3, [r7, #14]
}
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	3718      	adds	r7, #24
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	bd80      	pop	{r7, pc}
 800c8e8:	080150f0 	.word	0x080150f0
 800c8ec:	080157fc 	.word	0x080157fc
 800c8f0:	08015134 	.word	0x08015134

0800c8f4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b084      	sub	sp, #16
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
 800c8fc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d119      	bne.n	800c93c <tcp_netif_ip_addr_changed_pcblist+0x48>
 800c908:	4b10      	ldr	r3, [pc, #64]	@ (800c94c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800c90a:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800c90e:	4910      	ldr	r1, [pc, #64]	@ (800c950 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800c910:	4810      	ldr	r0, [pc, #64]	@ (800c954 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800c912:	f006 fe5d 	bl	80135d0 <iprintf>

  while (pcb != NULL) {
 800c916:	e011      	b.n	800c93c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	681a      	ldr	r2, [r3, #0]
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	429a      	cmp	r2, r3
 800c922:	d108      	bne.n	800c936 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	68db      	ldr	r3, [r3, #12]
 800c928:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800c92a:	68f8      	ldr	r0, [r7, #12]
 800c92c:	f7fe ffbc 	bl	800b8a8 <tcp_abort>
      pcb = next;
 800c930:	68bb      	ldr	r3, [r7, #8]
 800c932:	60fb      	str	r3, [r7, #12]
 800c934:	e002      	b.n	800c93c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	68db      	ldr	r3, [r3, #12]
 800c93a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d1ea      	bne.n	800c918 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800c942:	bf00      	nop
 800c944:	bf00      	nop
 800c946:	3710      	adds	r7, #16
 800c948:	46bd      	mov	sp, r7
 800c94a:	bd80      	pop	{r7, pc}
 800c94c:	080150f0 	.word	0x080150f0
 800c950:	08015824 	.word	0x08015824
 800c954:	08015134 	.word	0x08015134

0800c958 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b084      	sub	sp, #16
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
 800c960:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d02a      	beq.n	800c9be <tcp_netif_ip_addr_changed+0x66>
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d026      	beq.n	800c9be <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800c970:	4b15      	ldr	r3, [pc, #84]	@ (800c9c8 <tcp_netif_ip_addr_changed+0x70>)
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	4619      	mov	r1, r3
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f7ff ffbc 	bl	800c8f4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800c97c:	4b13      	ldr	r3, [pc, #76]	@ (800c9cc <tcp_netif_ip_addr_changed+0x74>)
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	4619      	mov	r1, r3
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	f7ff ffb6 	bl	800c8f4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d017      	beq.n	800c9be <tcp_netif_ip_addr_changed+0x66>
 800c98e:	683b      	ldr	r3, [r7, #0]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d013      	beq.n	800c9be <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c996:	4b0e      	ldr	r3, [pc, #56]	@ (800c9d0 <tcp_netif_ip_addr_changed+0x78>)
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	60fb      	str	r3, [r7, #12]
 800c99c:	e00c      	b.n	800c9b8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	681a      	ldr	r2, [r3, #0]
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	429a      	cmp	r2, r3
 800c9a8:	d103      	bne.n	800c9b2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	681a      	ldr	r2, [r3, #0]
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	68db      	ldr	r3, [r3, #12]
 800c9b6:	60fb      	str	r3, [r7, #12]
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d1ef      	bne.n	800c99e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800c9be:	bf00      	nop
 800c9c0:	3710      	adds	r7, #16
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	bd80      	pop	{r7, pc}
 800c9c6:	bf00      	nop
 800c9c8:	24010558 	.word	0x24010558
 800c9cc:	24010550 	.word	0x24010550
 800c9d0:	24010554 	.word	0x24010554

0800c9d4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b082      	sub	sp, #8
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d007      	beq.n	800c9f4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	f7ff fc3b 	bl	800c264 <tcp_segs_free>
    pcb->ooseq = NULL;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800c9f4:	bf00      	nop
 800c9f6:	3708      	adds	r7, #8
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	bd80      	pop	{r7, pc}

0800c9fc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800c9fc:	b590      	push	{r4, r7, lr}
 800c9fe:	b08d      	sub	sp, #52	@ 0x34
 800ca00:	af04      	add	r7, sp, #16
 800ca02:	6078      	str	r0, [r7, #4]
 800ca04:	6039      	str	r1, [r7, #0]
#endif /* SO_REUSE */
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
 800ca06:	f7f8 fc77 	bl	80052f8 <sys_check_core_locking>
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d105      	bne.n	800ca1c <tcp_input+0x20>
 800ca10:	4b9b      	ldr	r3, [pc, #620]	@ (800cc80 <tcp_input+0x284>)
 800ca12:	2283      	movs	r2, #131	@ 0x83
 800ca14:	499b      	ldr	r1, [pc, #620]	@ (800cc84 <tcp_input+0x288>)
 800ca16:	489c      	ldr	r0, [pc, #624]	@ (800cc88 <tcp_input+0x28c>)
 800ca18:	f006 fdda 	bl	80135d0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	685b      	ldr	r3, [r3, #4]
 800ca20:	4a9a      	ldr	r2, [pc, #616]	@ (800cc8c <tcp_input+0x290>)
 800ca22:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	895b      	ldrh	r3, [r3, #10]
 800ca28:	2b13      	cmp	r3, #19
 800ca2a:	f240 83d1 	bls.w	800d1d0 <tcp_input+0x7d4>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ca2e:	4b98      	ldr	r3, [pc, #608]	@ (800cc90 <tcp_input+0x294>)
 800ca30:	695b      	ldr	r3, [r3, #20]
 800ca32:	4a97      	ldr	r2, [pc, #604]	@ (800cc90 <tcp_input+0x294>)
 800ca34:	6812      	ldr	r2, [r2, #0]
 800ca36:	4611      	mov	r1, r2
 800ca38:	4618      	mov	r0, r3
 800ca3a:	f005 fc7d 	bl	8012338 <ip4_addr_isbroadcast_u32>
 800ca3e:	4603      	mov	r3, r0
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	f040 83c7 	bne.w	800d1d4 <tcp_input+0x7d8>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800ca46:	4b92      	ldr	r3, [pc, #584]	@ (800cc90 <tcp_input+0x294>)
 800ca48:	695b      	ldr	r3, [r3, #20]
 800ca4a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ca4e:	2be0      	cmp	r3, #224	@ 0xe0
 800ca50:	f000 83c0 	beq.w	800d1d4 <tcp_input+0x7d8>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800ca54:	4b8d      	ldr	r3, [pc, #564]	@ (800cc8c <tcp_input+0x290>)
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	899b      	ldrh	r3, [r3, #12]
 800ca5a:	b29b      	uxth	r3, r3
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	f7fc fcc1 	bl	80093e4 <lwip_htons>
 800ca62:	4603      	mov	r3, r0
 800ca64:	0b1b      	lsrs	r3, r3, #12
 800ca66:	b29b      	uxth	r3, r3
 800ca68:	b2db      	uxtb	r3, r3
 800ca6a:	009b      	lsls	r3, r3, #2
 800ca6c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800ca6e:	7cbb      	ldrb	r3, [r7, #18]
 800ca70:	2b13      	cmp	r3, #19
 800ca72:	f240 83b1 	bls.w	800d1d8 <tcp_input+0x7dc>
 800ca76:	7cbb      	ldrb	r3, [r7, #18]
 800ca78:	b29a      	uxth	r2, r3
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	891b      	ldrh	r3, [r3, #8]
 800ca7e:	429a      	cmp	r2, r3
 800ca80:	f200 83aa 	bhi.w	800d1d8 <tcp_input+0x7dc>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800ca84:	7cbb      	ldrb	r3, [r7, #18]
 800ca86:	b29b      	uxth	r3, r3
 800ca88:	3b14      	subs	r3, #20
 800ca8a:	b29a      	uxth	r2, r3
 800ca8c:	4b81      	ldr	r3, [pc, #516]	@ (800cc94 <tcp_input+0x298>)
 800ca8e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800ca90:	4b81      	ldr	r3, [pc, #516]	@ (800cc98 <tcp_input+0x29c>)
 800ca92:	2200      	movs	r2, #0
 800ca94:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	895a      	ldrh	r2, [r3, #10]
 800ca9a:	7cbb      	ldrb	r3, [r7, #18]
 800ca9c:	b29b      	uxth	r3, r3
 800ca9e:	429a      	cmp	r2, r3
 800caa0:	d309      	bcc.n	800cab6 <tcp_input+0xba>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800caa2:	4b7c      	ldr	r3, [pc, #496]	@ (800cc94 <tcp_input+0x298>)
 800caa4:	881a      	ldrh	r2, [r3, #0]
 800caa6:	4b7d      	ldr	r3, [pc, #500]	@ (800cc9c <tcp_input+0x2a0>)
 800caa8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800caaa:	7cbb      	ldrb	r3, [r7, #18]
 800caac:	4619      	mov	r1, r3
 800caae:	6878      	ldr	r0, [r7, #4]
 800cab0:	f7fe f8dc 	bl	800ac6c <pbuf_remove_header>
 800cab4:	e04e      	b.n	800cb54 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d105      	bne.n	800caca <tcp_input+0xce>
 800cabe:	4b70      	ldr	r3, [pc, #448]	@ (800cc80 <tcp_input+0x284>)
 800cac0:	22c2      	movs	r2, #194	@ 0xc2
 800cac2:	4977      	ldr	r1, [pc, #476]	@ (800cca0 <tcp_input+0x2a4>)
 800cac4:	4870      	ldr	r0, [pc, #448]	@ (800cc88 <tcp_input+0x28c>)
 800cac6:	f006 fd83 	bl	80135d0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800caca:	2114      	movs	r1, #20
 800cacc:	6878      	ldr	r0, [r7, #4]
 800cace:	f7fe f8cd 	bl	800ac6c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	895a      	ldrh	r2, [r3, #10]
 800cad6:	4b71      	ldr	r3, [pc, #452]	@ (800cc9c <tcp_input+0x2a0>)
 800cad8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800cada:	4b6e      	ldr	r3, [pc, #440]	@ (800cc94 <tcp_input+0x298>)
 800cadc:	881a      	ldrh	r2, [r3, #0]
 800cade:	4b6f      	ldr	r3, [pc, #444]	@ (800cc9c <tcp_input+0x2a0>)
 800cae0:	881b      	ldrh	r3, [r3, #0]
 800cae2:	1ad3      	subs	r3, r2, r3
 800cae4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800cae6:	4b6d      	ldr	r3, [pc, #436]	@ (800cc9c <tcp_input+0x2a0>)
 800cae8:	881b      	ldrh	r3, [r3, #0]
 800caea:	4619      	mov	r1, r3
 800caec:	6878      	ldr	r0, [r7, #4]
 800caee:	f7fe f8bd 	bl	800ac6c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	895b      	ldrh	r3, [r3, #10]
 800caf8:	8a3a      	ldrh	r2, [r7, #16]
 800cafa:	429a      	cmp	r2, r3
 800cafc:	f200 836e 	bhi.w	800d1dc <tcp_input+0x7e0>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	685b      	ldr	r3, [r3, #4]
 800cb06:	4a64      	ldr	r2, [pc, #400]	@ (800cc98 <tcp_input+0x29c>)
 800cb08:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	8a3a      	ldrh	r2, [r7, #16]
 800cb10:	4611      	mov	r1, r2
 800cb12:	4618      	mov	r0, r3
 800cb14:	f7fe f8aa 	bl	800ac6c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	891a      	ldrh	r2, [r3, #8]
 800cb1c:	8a3b      	ldrh	r3, [r7, #16]
 800cb1e:	1ad3      	subs	r3, r2, r3
 800cb20:	b29a      	uxth	r2, r3
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	895b      	ldrh	r3, [r3, #10]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d005      	beq.n	800cb3a <tcp_input+0x13e>
 800cb2e:	4b54      	ldr	r3, [pc, #336]	@ (800cc80 <tcp_input+0x284>)
 800cb30:	22df      	movs	r2, #223	@ 0xdf
 800cb32:	495c      	ldr	r1, [pc, #368]	@ (800cca4 <tcp_input+0x2a8>)
 800cb34:	4854      	ldr	r0, [pc, #336]	@ (800cc88 <tcp_input+0x28c>)
 800cb36:	f006 fd4b 	bl	80135d0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	891a      	ldrh	r2, [r3, #8]
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	891b      	ldrh	r3, [r3, #8]
 800cb44:	429a      	cmp	r2, r3
 800cb46:	d005      	beq.n	800cb54 <tcp_input+0x158>
 800cb48:	4b4d      	ldr	r3, [pc, #308]	@ (800cc80 <tcp_input+0x284>)
 800cb4a:	22e0      	movs	r2, #224	@ 0xe0
 800cb4c:	4956      	ldr	r1, [pc, #344]	@ (800cca8 <tcp_input+0x2ac>)
 800cb4e:	484e      	ldr	r0, [pc, #312]	@ (800cc88 <tcp_input+0x28c>)
 800cb50:	f006 fd3e 	bl	80135d0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800cb54:	4b4d      	ldr	r3, [pc, #308]	@ (800cc8c <tcp_input+0x290>)
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	881b      	ldrh	r3, [r3, #0]
 800cb5a:	b29b      	uxth	r3, r3
 800cb5c:	4a4b      	ldr	r2, [pc, #300]	@ (800cc8c <tcp_input+0x290>)
 800cb5e:	6814      	ldr	r4, [r2, #0]
 800cb60:	4618      	mov	r0, r3
 800cb62:	f7fc fc3f 	bl	80093e4 <lwip_htons>
 800cb66:	4603      	mov	r3, r0
 800cb68:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800cb6a:	4b48      	ldr	r3, [pc, #288]	@ (800cc8c <tcp_input+0x290>)
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	885b      	ldrh	r3, [r3, #2]
 800cb70:	b29b      	uxth	r3, r3
 800cb72:	4a46      	ldr	r2, [pc, #280]	@ (800cc8c <tcp_input+0x290>)
 800cb74:	6814      	ldr	r4, [r2, #0]
 800cb76:	4618      	mov	r0, r3
 800cb78:	f7fc fc34 	bl	80093e4 <lwip_htons>
 800cb7c:	4603      	mov	r3, r0
 800cb7e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800cb80:	4b42      	ldr	r3, [pc, #264]	@ (800cc8c <tcp_input+0x290>)
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	685b      	ldr	r3, [r3, #4]
 800cb86:	4a41      	ldr	r2, [pc, #260]	@ (800cc8c <tcp_input+0x290>)
 800cb88:	6814      	ldr	r4, [r2, #0]
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	f7fc fc3f 	bl	800940e <lwip_htonl>
 800cb90:	4603      	mov	r3, r0
 800cb92:	6063      	str	r3, [r4, #4]
 800cb94:	6863      	ldr	r3, [r4, #4]
 800cb96:	4a45      	ldr	r2, [pc, #276]	@ (800ccac <tcp_input+0x2b0>)
 800cb98:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800cb9a:	4b3c      	ldr	r3, [pc, #240]	@ (800cc8c <tcp_input+0x290>)
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	689b      	ldr	r3, [r3, #8]
 800cba0:	4a3a      	ldr	r2, [pc, #232]	@ (800cc8c <tcp_input+0x290>)
 800cba2:	6814      	ldr	r4, [r2, #0]
 800cba4:	4618      	mov	r0, r3
 800cba6:	f7fc fc32 	bl	800940e <lwip_htonl>
 800cbaa:	4603      	mov	r3, r0
 800cbac:	60a3      	str	r3, [r4, #8]
 800cbae:	68a3      	ldr	r3, [r4, #8]
 800cbb0:	4a3f      	ldr	r2, [pc, #252]	@ (800ccb0 <tcp_input+0x2b4>)
 800cbb2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800cbb4:	4b35      	ldr	r3, [pc, #212]	@ (800cc8c <tcp_input+0x290>)
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	89db      	ldrh	r3, [r3, #14]
 800cbba:	b29b      	uxth	r3, r3
 800cbbc:	4a33      	ldr	r2, [pc, #204]	@ (800cc8c <tcp_input+0x290>)
 800cbbe:	6814      	ldr	r4, [r2, #0]
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	f7fc fc0f 	bl	80093e4 <lwip_htons>
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800cbca:	4b30      	ldr	r3, [pc, #192]	@ (800cc8c <tcp_input+0x290>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	899b      	ldrh	r3, [r3, #12]
 800cbd0:	b29b      	uxth	r3, r3
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	f7fc fc06 	bl	80093e4 <lwip_htons>
 800cbd8:	4603      	mov	r3, r0
 800cbda:	b2db      	uxtb	r3, r3
 800cbdc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cbe0:	b2da      	uxtb	r2, r3
 800cbe2:	4b34      	ldr	r3, [pc, #208]	@ (800ccb4 <tcp_input+0x2b8>)
 800cbe4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	891a      	ldrh	r2, [r3, #8]
 800cbea:	4b33      	ldr	r3, [pc, #204]	@ (800ccb8 <tcp_input+0x2bc>)
 800cbec:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800cbee:	4b31      	ldr	r3, [pc, #196]	@ (800ccb4 <tcp_input+0x2b8>)
 800cbf0:	781b      	ldrb	r3, [r3, #0]
 800cbf2:	f003 0303 	and.w	r3, r3, #3
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d00c      	beq.n	800cc14 <tcp_input+0x218>
    tcplen++;
 800cbfa:	4b2f      	ldr	r3, [pc, #188]	@ (800ccb8 <tcp_input+0x2bc>)
 800cbfc:	881b      	ldrh	r3, [r3, #0]
 800cbfe:	3301      	adds	r3, #1
 800cc00:	b29a      	uxth	r2, r3
 800cc02:	4b2d      	ldr	r3, [pc, #180]	@ (800ccb8 <tcp_input+0x2bc>)
 800cc04:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	891a      	ldrh	r2, [r3, #8]
 800cc0a:	4b2b      	ldr	r3, [pc, #172]	@ (800ccb8 <tcp_input+0x2bc>)
 800cc0c:	881b      	ldrh	r3, [r3, #0]
 800cc0e:	429a      	cmp	r2, r3
 800cc10:	f200 82e6 	bhi.w	800d1e0 <tcp_input+0x7e4>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800cc14:	2300      	movs	r3, #0
 800cc16:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cc18:	4b28      	ldr	r3, [pc, #160]	@ (800ccbc <tcp_input+0x2c0>)
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	61fb      	str	r3, [r7, #28]
 800cc1e:	e09d      	b.n	800cd5c <tcp_input+0x360>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800cc20:	69fb      	ldr	r3, [r7, #28]
 800cc22:	7d1b      	ldrb	r3, [r3, #20]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d105      	bne.n	800cc34 <tcp_input+0x238>
 800cc28:	4b15      	ldr	r3, [pc, #84]	@ (800cc80 <tcp_input+0x284>)
 800cc2a:	22fb      	movs	r2, #251	@ 0xfb
 800cc2c:	4924      	ldr	r1, [pc, #144]	@ (800ccc0 <tcp_input+0x2c4>)
 800cc2e:	4816      	ldr	r0, [pc, #88]	@ (800cc88 <tcp_input+0x28c>)
 800cc30:	f006 fcce 	bl	80135d0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800cc34:	69fb      	ldr	r3, [r7, #28]
 800cc36:	7d1b      	ldrb	r3, [r3, #20]
 800cc38:	2b0a      	cmp	r3, #10
 800cc3a:	d105      	bne.n	800cc48 <tcp_input+0x24c>
 800cc3c:	4b10      	ldr	r3, [pc, #64]	@ (800cc80 <tcp_input+0x284>)
 800cc3e:	22fc      	movs	r2, #252	@ 0xfc
 800cc40:	4920      	ldr	r1, [pc, #128]	@ (800ccc4 <tcp_input+0x2c8>)
 800cc42:	4811      	ldr	r0, [pc, #68]	@ (800cc88 <tcp_input+0x28c>)
 800cc44:	f006 fcc4 	bl	80135d0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800cc48:	69fb      	ldr	r3, [r7, #28]
 800cc4a:	7d1b      	ldrb	r3, [r3, #20]
 800cc4c:	2b01      	cmp	r3, #1
 800cc4e:	d105      	bne.n	800cc5c <tcp_input+0x260>
 800cc50:	4b0b      	ldr	r3, [pc, #44]	@ (800cc80 <tcp_input+0x284>)
 800cc52:	22fd      	movs	r2, #253	@ 0xfd
 800cc54:	491c      	ldr	r1, [pc, #112]	@ (800ccc8 <tcp_input+0x2cc>)
 800cc56:	480c      	ldr	r0, [pc, #48]	@ (800cc88 <tcp_input+0x28c>)
 800cc58:	f006 fcba 	bl	80135d0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cc5c:	69fb      	ldr	r3, [r7, #28]
 800cc5e:	7a1b      	ldrb	r3, [r3, #8]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d033      	beq.n	800cccc <tcp_input+0x2d0>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800cc64:	69fb      	ldr	r3, [r7, #28]
 800cc66:	7a1a      	ldrb	r2, [r3, #8]
 800cc68:	4b09      	ldr	r3, [pc, #36]	@ (800cc90 <tcp_input+0x294>)
 800cc6a:	685b      	ldr	r3, [r3, #4]
 800cc6c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cc70:	3301      	adds	r3, #1
 800cc72:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cc74:	429a      	cmp	r2, r3
 800cc76:	d029      	beq.n	800cccc <tcp_input+0x2d0>
      prev = pcb;
 800cc78:	69fb      	ldr	r3, [r7, #28]
 800cc7a:	61bb      	str	r3, [r7, #24]
      continue;
 800cc7c:	e06b      	b.n	800cd56 <tcp_input+0x35a>
 800cc7e:	bf00      	nop
 800cc80:	08015858 	.word	0x08015858
 800cc84:	0801588c 	.word	0x0801588c
 800cc88:	080158a4 	.word	0x080158a4
 800cc8c:	24010574 	.word	0x24010574
 800cc90:	24009a8c 	.word	0x24009a8c
 800cc94:	24010578 	.word	0x24010578
 800cc98:	2401057c 	.word	0x2401057c
 800cc9c:	2401057a 	.word	0x2401057a
 800cca0:	080158cc 	.word	0x080158cc
 800cca4:	080158dc 	.word	0x080158dc
 800cca8:	080158e8 	.word	0x080158e8
 800ccac:	24010584 	.word	0x24010584
 800ccb0:	24010588 	.word	0x24010588
 800ccb4:	24010590 	.word	0x24010590
 800ccb8:	2401058e 	.word	0x2401058e
 800ccbc:	24010558 	.word	0x24010558
 800ccc0:	08015908 	.word	0x08015908
 800ccc4:	08015930 	.word	0x08015930
 800ccc8:	0801595c 	.word	0x0801595c
    }

    if (pcb->remote_port == tcphdr->src &&
 800cccc:	69fb      	ldr	r3, [r7, #28]
 800ccce:	8b1a      	ldrh	r2, [r3, #24]
 800ccd0:	4b72      	ldr	r3, [pc, #456]	@ (800ce9c <tcp_input+0x4a0>)
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	881b      	ldrh	r3, [r3, #0]
 800ccd6:	b29b      	uxth	r3, r3
 800ccd8:	429a      	cmp	r2, r3
 800ccda:	d13a      	bne.n	800cd52 <tcp_input+0x356>
        pcb->local_port == tcphdr->dest &&
 800ccdc:	69fb      	ldr	r3, [r7, #28]
 800ccde:	8ada      	ldrh	r2, [r3, #22]
 800cce0:	4b6e      	ldr	r3, [pc, #440]	@ (800ce9c <tcp_input+0x4a0>)
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	885b      	ldrh	r3, [r3, #2]
 800cce6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800cce8:	429a      	cmp	r2, r3
 800ccea:	d132      	bne.n	800cd52 <tcp_input+0x356>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ccec:	69fb      	ldr	r3, [r7, #28]
 800ccee:	685a      	ldr	r2, [r3, #4]
 800ccf0:	4b6b      	ldr	r3, [pc, #428]	@ (800cea0 <tcp_input+0x4a4>)
 800ccf2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800ccf4:	429a      	cmp	r2, r3
 800ccf6:	d12c      	bne.n	800cd52 <tcp_input+0x356>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ccf8:	69fb      	ldr	r3, [r7, #28]
 800ccfa:	681a      	ldr	r2, [r3, #0]
 800ccfc:	4b68      	ldr	r3, [pc, #416]	@ (800cea0 <tcp_input+0x4a4>)
 800ccfe:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800cd00:	429a      	cmp	r2, r3
 800cd02:	d126      	bne.n	800cd52 <tcp_input+0x356>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800cd04:	69fb      	ldr	r3, [r7, #28]
 800cd06:	68db      	ldr	r3, [r3, #12]
 800cd08:	69fa      	ldr	r2, [r7, #28]
 800cd0a:	429a      	cmp	r2, r3
 800cd0c:	d106      	bne.n	800cd1c <tcp_input+0x320>
 800cd0e:	4b65      	ldr	r3, [pc, #404]	@ (800cea4 <tcp_input+0x4a8>)
 800cd10:	f240 120d 	movw	r2, #269	@ 0x10d
 800cd14:	4964      	ldr	r1, [pc, #400]	@ (800cea8 <tcp_input+0x4ac>)
 800cd16:	4865      	ldr	r0, [pc, #404]	@ (800ceac <tcp_input+0x4b0>)
 800cd18:	f006 fc5a 	bl	80135d0 <iprintf>
      if (prev != NULL) {
 800cd1c:	69bb      	ldr	r3, [r7, #24]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d00a      	beq.n	800cd38 <tcp_input+0x33c>
        prev->next = pcb->next;
 800cd22:	69fb      	ldr	r3, [r7, #28]
 800cd24:	68da      	ldr	r2, [r3, #12]
 800cd26:	69bb      	ldr	r3, [r7, #24]
 800cd28:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800cd2a:	4b61      	ldr	r3, [pc, #388]	@ (800ceb0 <tcp_input+0x4b4>)
 800cd2c:	681a      	ldr	r2, [r3, #0]
 800cd2e:	69fb      	ldr	r3, [r7, #28]
 800cd30:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800cd32:	4a5f      	ldr	r2, [pc, #380]	@ (800ceb0 <tcp_input+0x4b4>)
 800cd34:	69fb      	ldr	r3, [r7, #28]
 800cd36:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800cd38:	69fb      	ldr	r3, [r7, #28]
 800cd3a:	68db      	ldr	r3, [r3, #12]
 800cd3c:	69fa      	ldr	r2, [r7, #28]
 800cd3e:	429a      	cmp	r2, r3
 800cd40:	d111      	bne.n	800cd66 <tcp_input+0x36a>
 800cd42:	4b58      	ldr	r3, [pc, #352]	@ (800cea4 <tcp_input+0x4a8>)
 800cd44:	f240 1215 	movw	r2, #277	@ 0x115
 800cd48:	495a      	ldr	r1, [pc, #360]	@ (800ceb4 <tcp_input+0x4b8>)
 800cd4a:	4858      	ldr	r0, [pc, #352]	@ (800ceac <tcp_input+0x4b0>)
 800cd4c:	f006 fc40 	bl	80135d0 <iprintf>
      break;
 800cd50:	e009      	b.n	800cd66 <tcp_input+0x36a>
    }
    prev = pcb;
 800cd52:	69fb      	ldr	r3, [r7, #28]
 800cd54:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cd56:	69fb      	ldr	r3, [r7, #28]
 800cd58:	68db      	ldr	r3, [r3, #12]
 800cd5a:	61fb      	str	r3, [r7, #28]
 800cd5c:	69fb      	ldr	r3, [r7, #28]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	f47f af5e 	bne.w	800cc20 <tcp_input+0x224>
 800cd64:	e000      	b.n	800cd68 <tcp_input+0x36c>
      break;
 800cd66:	bf00      	nop
  }

  if (pcb == NULL) {
 800cd68:	69fb      	ldr	r3, [r7, #28]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	f040 80aa 	bne.w	800cec4 <tcp_input+0x4c8>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cd70:	4b51      	ldr	r3, [pc, #324]	@ (800ceb8 <tcp_input+0x4bc>)
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	61fb      	str	r3, [r7, #28]
 800cd76:	e03f      	b.n	800cdf8 <tcp_input+0x3fc>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800cd78:	69fb      	ldr	r3, [r7, #28]
 800cd7a:	7d1b      	ldrb	r3, [r3, #20]
 800cd7c:	2b0a      	cmp	r3, #10
 800cd7e:	d006      	beq.n	800cd8e <tcp_input+0x392>
 800cd80:	4b48      	ldr	r3, [pc, #288]	@ (800cea4 <tcp_input+0x4a8>)
 800cd82:	f240 121f 	movw	r2, #287	@ 0x11f
 800cd86:	494d      	ldr	r1, [pc, #308]	@ (800cebc <tcp_input+0x4c0>)
 800cd88:	4848      	ldr	r0, [pc, #288]	@ (800ceac <tcp_input+0x4b0>)
 800cd8a:	f006 fc21 	bl	80135d0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cd8e:	69fb      	ldr	r3, [r7, #28]
 800cd90:	7a1b      	ldrb	r3, [r3, #8]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d009      	beq.n	800cdaa <tcp_input+0x3ae>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800cd96:	69fb      	ldr	r3, [r7, #28]
 800cd98:	7a1a      	ldrb	r2, [r3, #8]
 800cd9a:	4b41      	ldr	r3, [pc, #260]	@ (800cea0 <tcp_input+0x4a4>)
 800cd9c:	685b      	ldr	r3, [r3, #4]
 800cd9e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cda2:	3301      	adds	r3, #1
 800cda4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cda6:	429a      	cmp	r2, r3
 800cda8:	d122      	bne.n	800cdf0 <tcp_input+0x3f4>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800cdaa:	69fb      	ldr	r3, [r7, #28]
 800cdac:	8b1a      	ldrh	r2, [r3, #24]
 800cdae:	4b3b      	ldr	r3, [pc, #236]	@ (800ce9c <tcp_input+0x4a0>)
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	881b      	ldrh	r3, [r3, #0]
 800cdb4:	b29b      	uxth	r3, r3
 800cdb6:	429a      	cmp	r2, r3
 800cdb8:	d11b      	bne.n	800cdf2 <tcp_input+0x3f6>
          pcb->local_port == tcphdr->dest &&
 800cdba:	69fb      	ldr	r3, [r7, #28]
 800cdbc:	8ada      	ldrh	r2, [r3, #22]
 800cdbe:	4b37      	ldr	r3, [pc, #220]	@ (800ce9c <tcp_input+0x4a0>)
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	885b      	ldrh	r3, [r3, #2]
 800cdc4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800cdc6:	429a      	cmp	r2, r3
 800cdc8:	d113      	bne.n	800cdf2 <tcp_input+0x3f6>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800cdca:	69fb      	ldr	r3, [r7, #28]
 800cdcc:	685a      	ldr	r2, [r3, #4]
 800cdce:	4b34      	ldr	r3, [pc, #208]	@ (800cea0 <tcp_input+0x4a4>)
 800cdd0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800cdd2:	429a      	cmp	r2, r3
 800cdd4:	d10d      	bne.n	800cdf2 <tcp_input+0x3f6>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800cdd6:	69fb      	ldr	r3, [r7, #28]
 800cdd8:	681a      	ldr	r2, [r3, #0]
 800cdda:	4b31      	ldr	r3, [pc, #196]	@ (800cea0 <tcp_input+0x4a4>)
 800cddc:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800cdde:	429a      	cmp	r2, r3
 800cde0:	d107      	bne.n	800cdf2 <tcp_input+0x3f6>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800cde2:	69f8      	ldr	r0, [r7, #28]
 800cde4:	f000 fb56 	bl	800d494 <tcp_timewait_input>
        }
        pbuf_free(p);
 800cde8:	6878      	ldr	r0, [r7, #4]
 800cdea:	f7fd ffc5 	bl	800ad78 <pbuf_free>
        return;
 800cdee:	e1fd      	b.n	800d1ec <tcp_input+0x7f0>
        continue;
 800cdf0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cdf2:	69fb      	ldr	r3, [r7, #28]
 800cdf4:	68db      	ldr	r3, [r3, #12]
 800cdf6:	61fb      	str	r3, [r7, #28]
 800cdf8:	69fb      	ldr	r3, [r7, #28]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d1bc      	bne.n	800cd78 <tcp_input+0x37c>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800cdfe:	2300      	movs	r3, #0
 800ce00:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ce02:	4b2f      	ldr	r3, [pc, #188]	@ (800cec0 <tcp_input+0x4c4>)
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	617b      	str	r3, [r7, #20]
 800ce08:	e02a      	b.n	800ce60 <tcp_input+0x464>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800ce0a:	697b      	ldr	r3, [r7, #20]
 800ce0c:	7a1b      	ldrb	r3, [r3, #8]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d00c      	beq.n	800ce2c <tcp_input+0x430>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ce12:	697b      	ldr	r3, [r7, #20]
 800ce14:	7a1a      	ldrb	r2, [r3, #8]
 800ce16:	4b22      	ldr	r3, [pc, #136]	@ (800cea0 <tcp_input+0x4a4>)
 800ce18:	685b      	ldr	r3, [r3, #4]
 800ce1a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ce1e:	3301      	adds	r3, #1
 800ce20:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800ce22:	429a      	cmp	r2, r3
 800ce24:	d002      	beq.n	800ce2c <tcp_input+0x430>
        prev = (struct tcp_pcb *)lpcb;
 800ce26:	697b      	ldr	r3, [r7, #20]
 800ce28:	61bb      	str	r3, [r7, #24]
        continue;
 800ce2a:	e016      	b.n	800ce5a <tcp_input+0x45e>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800ce2c:	697b      	ldr	r3, [r7, #20]
 800ce2e:	8ada      	ldrh	r2, [r3, #22]
 800ce30:	4b1a      	ldr	r3, [pc, #104]	@ (800ce9c <tcp_input+0x4a0>)
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	885b      	ldrh	r3, [r3, #2]
 800ce36:	b29b      	uxth	r3, r3
 800ce38:	429a      	cmp	r2, r3
 800ce3a:	d10c      	bne.n	800ce56 <tcp_input+0x45a>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800ce3c:	697b      	ldr	r3, [r7, #20]
 800ce3e:	681a      	ldr	r2, [r3, #0]
 800ce40:	4b17      	ldr	r3, [pc, #92]	@ (800cea0 <tcp_input+0x4a4>)
 800ce42:	695b      	ldr	r3, [r3, #20]
 800ce44:	429a      	cmp	r2, r3
 800ce46:	d00f      	beq.n	800ce68 <tcp_input+0x46c>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800ce48:	697b      	ldr	r3, [r7, #20]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d00d      	beq.n	800ce6a <tcp_input+0x46e>
 800ce4e:	697b      	ldr	r3, [r7, #20]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d009      	beq.n	800ce6a <tcp_input+0x46e>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800ce56:	697b      	ldr	r3, [r7, #20]
 800ce58:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ce5a:	697b      	ldr	r3, [r7, #20]
 800ce5c:	68db      	ldr	r3, [r3, #12]
 800ce5e:	617b      	str	r3, [r7, #20]
 800ce60:	697b      	ldr	r3, [r7, #20]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d1d1      	bne.n	800ce0a <tcp_input+0x40e>
 800ce66:	e000      	b.n	800ce6a <tcp_input+0x46e>
            break;
 800ce68:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800ce6a:	697b      	ldr	r3, [r7, #20]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d029      	beq.n	800cec4 <tcp_input+0x4c8>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800ce70:	69bb      	ldr	r3, [r7, #24]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d00a      	beq.n	800ce8c <tcp_input+0x490>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800ce76:	697b      	ldr	r3, [r7, #20]
 800ce78:	68da      	ldr	r2, [r3, #12]
 800ce7a:	69bb      	ldr	r3, [r7, #24]
 800ce7c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800ce7e:	4b10      	ldr	r3, [pc, #64]	@ (800cec0 <tcp_input+0x4c4>)
 800ce80:	681a      	ldr	r2, [r3, #0]
 800ce82:	697b      	ldr	r3, [r7, #20]
 800ce84:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800ce86:	4a0e      	ldr	r2, [pc, #56]	@ (800cec0 <tcp_input+0x4c4>)
 800ce88:	697b      	ldr	r3, [r7, #20]
 800ce8a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800ce8c:	6978      	ldr	r0, [r7, #20]
 800ce8e:	f000 fa03 	bl	800d298 <tcp_listen_input>
      }
      pbuf_free(p);
 800ce92:	6878      	ldr	r0, [r7, #4]
 800ce94:	f7fd ff70 	bl	800ad78 <pbuf_free>
      return;
 800ce98:	e1a8      	b.n	800d1ec <tcp_input+0x7f0>
 800ce9a:	bf00      	nop
 800ce9c:	24010574 	.word	0x24010574
 800cea0:	24009a8c 	.word	0x24009a8c
 800cea4:	08015858 	.word	0x08015858
 800cea8:	08015984 	.word	0x08015984
 800ceac:	080158a4 	.word	0x080158a4
 800ceb0:	24010558 	.word	0x24010558
 800ceb4:	080159b0 	.word	0x080159b0
 800ceb8:	2401055c 	.word	0x2401055c
 800cebc:	080159dc 	.word	0x080159dc
 800cec0:	24010554 	.word	0x24010554
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800cec4:	69fb      	ldr	r3, [r7, #28]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	f000 8158 	beq.w	800d17c <tcp_input+0x780>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800cecc:	4b95      	ldr	r3, [pc, #596]	@ (800d124 <tcp_input+0x728>)
 800cece:	2200      	movs	r2, #0
 800ced0:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	891a      	ldrh	r2, [r3, #8]
 800ced6:	4b93      	ldr	r3, [pc, #588]	@ (800d124 <tcp_input+0x728>)
 800ced8:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800ceda:	4a92      	ldr	r2, [pc, #584]	@ (800d124 <tcp_input+0x728>)
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800cee0:	4b91      	ldr	r3, [pc, #580]	@ (800d128 <tcp_input+0x72c>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	4a8f      	ldr	r2, [pc, #572]	@ (800d124 <tcp_input+0x728>)
 800cee6:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800cee8:	4b90      	ldr	r3, [pc, #576]	@ (800d12c <tcp_input+0x730>)
 800ceea:	2200      	movs	r2, #0
 800ceec:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800ceee:	4b90      	ldr	r3, [pc, #576]	@ (800d130 <tcp_input+0x734>)
 800cef0:	2200      	movs	r2, #0
 800cef2:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800cef4:	4b8f      	ldr	r3, [pc, #572]	@ (800d134 <tcp_input+0x738>)
 800cef6:	2200      	movs	r2, #0
 800cef8:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800cefa:	4b8f      	ldr	r3, [pc, #572]	@ (800d138 <tcp_input+0x73c>)
 800cefc:	781b      	ldrb	r3, [r3, #0]
 800cefe:	f003 0308 	and.w	r3, r3, #8
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d006      	beq.n	800cf14 <tcp_input+0x518>
      p->flags |= PBUF_FLAG_PUSH;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	7b5b      	ldrb	r3, [r3, #13]
 800cf0a:	f043 0301 	orr.w	r3, r3, #1
 800cf0e:	b2da      	uxtb	r2, r3
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800cf14:	69fb      	ldr	r3, [r7, #28]
 800cf16:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d017      	beq.n	800cf4c <tcp_input+0x550>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800cf1c:	69f8      	ldr	r0, [r7, #28]
 800cf1e:	f7ff f923 	bl	800c168 <tcp_process_refused_data>
 800cf22:	4603      	mov	r3, r0
 800cf24:	f113 0f0d 	cmn.w	r3, #13
 800cf28:	d007      	beq.n	800cf3a <tcp_input+0x53e>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800cf2a:	69fb      	ldr	r3, [r7, #28]
 800cf2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d00c      	beq.n	800cf4c <tcp_input+0x550>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800cf32:	4b82      	ldr	r3, [pc, #520]	@ (800d13c <tcp_input+0x740>)
 800cf34:	881b      	ldrh	r3, [r3, #0]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d008      	beq.n	800cf4c <tcp_input+0x550>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800cf3a:	69fb      	ldr	r3, [r7, #28]
 800cf3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	f040 80e4 	bne.w	800d10c <tcp_input+0x710>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800cf44:	69f8      	ldr	r0, [r7, #28]
 800cf46:	f003 f9ab 	bl	80102a0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800cf4a:	e0df      	b.n	800d10c <tcp_input+0x710>
      }
    }
    tcp_input_pcb = pcb;
 800cf4c:	4a7c      	ldr	r2, [pc, #496]	@ (800d140 <tcp_input+0x744>)
 800cf4e:	69fb      	ldr	r3, [r7, #28]
 800cf50:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800cf52:	69f8      	ldr	r0, [r7, #28]
 800cf54:	f000 fb18 	bl	800d588 <tcp_process>
 800cf58:	4603      	mov	r3, r0
 800cf5a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800cf5c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cf60:	f113 0f0d 	cmn.w	r3, #13
 800cf64:	f000 80d4 	beq.w	800d110 <tcp_input+0x714>
      if (recv_flags & TF_RESET) {
 800cf68:	4b71      	ldr	r3, [pc, #452]	@ (800d130 <tcp_input+0x734>)
 800cf6a:	781b      	ldrb	r3, [r3, #0]
 800cf6c:	f003 0308 	and.w	r3, r3, #8
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d015      	beq.n	800cfa0 <tcp_input+0x5a4>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800cf74:	69fb      	ldr	r3, [r7, #28]
 800cf76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d008      	beq.n	800cf90 <tcp_input+0x594>
 800cf7e:	69fb      	ldr	r3, [r7, #28]
 800cf80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf84:	69fa      	ldr	r2, [r7, #28]
 800cf86:	6912      	ldr	r2, [r2, #16]
 800cf88:	f06f 010d 	mvn.w	r1, #13
 800cf8c:	4610      	mov	r0, r2
 800cf8e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800cf90:	69f9      	ldr	r1, [r7, #28]
 800cf92:	486c      	ldr	r0, [pc, #432]	@ (800d144 <tcp_input+0x748>)
 800cf94:	f7ff fbba 	bl	800c70c <tcp_pcb_remove>
        tcp_free(pcb);
 800cf98:	69f8      	ldr	r0, [r7, #28]
 800cf9a:	f7fe f999 	bl	800b2d0 <tcp_free>
 800cf9e:	e0da      	b.n	800d156 <tcp_input+0x75a>
      } else {
        err = ERR_OK;
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800cfa4:	4b63      	ldr	r3, [pc, #396]	@ (800d134 <tcp_input+0x738>)
 800cfa6:	881b      	ldrh	r3, [r3, #0]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d01d      	beq.n	800cfe8 <tcp_input+0x5ec>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800cfac:	4b61      	ldr	r3, [pc, #388]	@ (800d134 <tcp_input+0x738>)
 800cfae:	881b      	ldrh	r3, [r3, #0]
 800cfb0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800cfb2:	69fb      	ldr	r3, [r7, #28]
 800cfb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d00a      	beq.n	800cfd2 <tcp_input+0x5d6>
 800cfbc:	69fb      	ldr	r3, [r7, #28]
 800cfbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cfc2:	69fa      	ldr	r2, [r7, #28]
 800cfc4:	6910      	ldr	r0, [r2, #16]
 800cfc6:	89fa      	ldrh	r2, [r7, #14]
 800cfc8:	69f9      	ldr	r1, [r7, #28]
 800cfca:	4798      	blx	r3
 800cfcc:	4603      	mov	r3, r0
 800cfce:	74fb      	strb	r3, [r7, #19]
 800cfd0:	e001      	b.n	800cfd6 <tcp_input+0x5da>
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800cfd6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cfda:	f113 0f0d 	cmn.w	r3, #13
 800cfde:	f000 8099 	beq.w	800d114 <tcp_input+0x718>
              goto aborted;
            }
          }
          recv_acked = 0;
 800cfe2:	4b54      	ldr	r3, [pc, #336]	@ (800d134 <tcp_input+0x738>)
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800cfe8:	69f8      	ldr	r0, [r7, #28]
 800cfea:	f000 f915 	bl	800d218 <tcp_input_delayed_close>
 800cfee:	4603      	mov	r3, r0
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	f040 8091 	bne.w	800d118 <tcp_input+0x71c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800cff6:	4b4d      	ldr	r3, [pc, #308]	@ (800d12c <tcp_input+0x730>)
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d041      	beq.n	800d082 <tcp_input+0x686>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800cffe:	69fb      	ldr	r3, [r7, #28]
 800d000:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d002:	2b00      	cmp	r3, #0
 800d004:	d006      	beq.n	800d014 <tcp_input+0x618>
 800d006:	4b50      	ldr	r3, [pc, #320]	@ (800d148 <tcp_input+0x74c>)
 800d008:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800d00c:	494f      	ldr	r1, [pc, #316]	@ (800d14c <tcp_input+0x750>)
 800d00e:	4850      	ldr	r0, [pc, #320]	@ (800d150 <tcp_input+0x754>)
 800d010:	f006 fade 	bl	80135d0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800d014:	69fb      	ldr	r3, [r7, #28]
 800d016:	8b5b      	ldrh	r3, [r3, #26]
 800d018:	f003 0310 	and.w	r3, r3, #16
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d008      	beq.n	800d032 <tcp_input+0x636>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800d020:	4b42      	ldr	r3, [pc, #264]	@ (800d12c <tcp_input+0x730>)
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	4618      	mov	r0, r3
 800d026:	f7fd fea7 	bl	800ad78 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800d02a:	69f8      	ldr	r0, [r7, #28]
 800d02c:	f7fe fc3c 	bl	800b8a8 <tcp_abort>
            goto aborted;
 800d030:	e091      	b.n	800d156 <tcp_input+0x75a>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800d032:	69fb      	ldr	r3, [r7, #28]
 800d034:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d00c      	beq.n	800d056 <tcp_input+0x65a>
 800d03c:	69fb      	ldr	r3, [r7, #28]
 800d03e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800d042:	69fb      	ldr	r3, [r7, #28]
 800d044:	6918      	ldr	r0, [r3, #16]
 800d046:	4b39      	ldr	r3, [pc, #228]	@ (800d12c <tcp_input+0x730>)
 800d048:	681a      	ldr	r2, [r3, #0]
 800d04a:	2300      	movs	r3, #0
 800d04c:	69f9      	ldr	r1, [r7, #28]
 800d04e:	47a0      	blx	r4
 800d050:	4603      	mov	r3, r0
 800d052:	74fb      	strb	r3, [r7, #19]
 800d054:	e008      	b.n	800d068 <tcp_input+0x66c>
 800d056:	4b35      	ldr	r3, [pc, #212]	@ (800d12c <tcp_input+0x730>)
 800d058:	681a      	ldr	r2, [r3, #0]
 800d05a:	2300      	movs	r3, #0
 800d05c:	69f9      	ldr	r1, [r7, #28]
 800d05e:	2000      	movs	r0, #0
 800d060:	f7ff f95a 	bl	800c318 <tcp_recv_null>
 800d064:	4603      	mov	r3, r0
 800d066:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800d068:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d06c:	f113 0f0d 	cmn.w	r3, #13
 800d070:	d054      	beq.n	800d11c <tcp_input+0x720>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800d072:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d003      	beq.n	800d082 <tcp_input+0x686>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800d07a:	4b2c      	ldr	r3, [pc, #176]	@ (800d12c <tcp_input+0x730>)
 800d07c:	681a      	ldr	r2, [r3, #0]
 800d07e:	69fb      	ldr	r3, [r7, #28]
 800d080:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800d082:	4b2b      	ldr	r3, [pc, #172]	@ (800d130 <tcp_input+0x734>)
 800d084:	781b      	ldrb	r3, [r3, #0]
 800d086:	f003 0320 	and.w	r3, r3, #32
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d031      	beq.n	800d0f2 <tcp_input+0x6f6>
          if (pcb->refused_data != NULL) {
 800d08e:	69fb      	ldr	r3, [r7, #28]
 800d090:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d092:	2b00      	cmp	r3, #0
 800d094:	d009      	beq.n	800d0aa <tcp_input+0x6ae>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800d096:	69fb      	ldr	r3, [r7, #28]
 800d098:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d09a:	7b5a      	ldrb	r2, [r3, #13]
 800d09c:	69fb      	ldr	r3, [r7, #28]
 800d09e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d0a0:	f042 0220 	orr.w	r2, r2, #32
 800d0a4:	b2d2      	uxtb	r2, r2
 800d0a6:	735a      	strb	r2, [r3, #13]
 800d0a8:	e023      	b.n	800d0f2 <tcp_input+0x6f6>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d0aa:	69fb      	ldr	r3, [r7, #28]
 800d0ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d0ae:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800d0b2:	4293      	cmp	r3, r2
 800d0b4:	d005      	beq.n	800d0c2 <tcp_input+0x6c6>
              pcb->rcv_wnd++;
 800d0b6:	69fb      	ldr	r3, [r7, #28]
 800d0b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d0ba:	3301      	adds	r3, #1
 800d0bc:	b29a      	uxth	r2, r3
 800d0be:	69fb      	ldr	r3, [r7, #28]
 800d0c0:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800d0c2:	69fb      	ldr	r3, [r7, #28]
 800d0c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d00b      	beq.n	800d0e4 <tcp_input+0x6e8>
 800d0cc:	69fb      	ldr	r3, [r7, #28]
 800d0ce:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800d0d2:	69fb      	ldr	r3, [r7, #28]
 800d0d4:	6918      	ldr	r0, [r3, #16]
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	2200      	movs	r2, #0
 800d0da:	69f9      	ldr	r1, [r7, #28]
 800d0dc:	47a0      	blx	r4
 800d0de:	4603      	mov	r3, r0
 800d0e0:	74fb      	strb	r3, [r7, #19]
 800d0e2:	e001      	b.n	800d0e8 <tcp_input+0x6ec>
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d0e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d0ec:	f113 0f0d 	cmn.w	r3, #13
 800d0f0:	d016      	beq.n	800d120 <tcp_input+0x724>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800d0f2:	4b13      	ldr	r3, [pc, #76]	@ (800d140 <tcp_input+0x744>)
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800d0f8:	69f8      	ldr	r0, [r7, #28]
 800d0fa:	f000 f88d 	bl	800d218 <tcp_input_delayed_close>
 800d0fe:	4603      	mov	r3, r0
 800d100:	2b00      	cmp	r3, #0
 800d102:	d127      	bne.n	800d154 <tcp_input+0x758>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800d104:	69f8      	ldr	r0, [r7, #28]
 800d106:	f002 fac3 	bl	800f690 <tcp_output>
 800d10a:	e024      	b.n	800d156 <tcp_input+0x75a>
        goto aborted;
 800d10c:	bf00      	nop
 800d10e:	e022      	b.n	800d156 <tcp_input+0x75a>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800d110:	bf00      	nop
 800d112:	e020      	b.n	800d156 <tcp_input+0x75a>
              goto aborted;
 800d114:	bf00      	nop
 800d116:	e01e      	b.n	800d156 <tcp_input+0x75a>
          goto aborted;
 800d118:	bf00      	nop
 800d11a:	e01c      	b.n	800d156 <tcp_input+0x75a>
            goto aborted;
 800d11c:	bf00      	nop
 800d11e:	e01a      	b.n	800d156 <tcp_input+0x75a>
              goto aborted;
 800d120:	bf00      	nop
 800d122:	e018      	b.n	800d156 <tcp_input+0x75a>
 800d124:	24010564 	.word	0x24010564
 800d128:	24010574 	.word	0x24010574
 800d12c:	24010594 	.word	0x24010594
 800d130:	24010591 	.word	0x24010591
 800d134:	2401058c 	.word	0x2401058c
 800d138:	24010590 	.word	0x24010590
 800d13c:	2401058e 	.word	0x2401058e
 800d140:	24010598 	.word	0x24010598
 800d144:	24010558 	.word	0x24010558
 800d148:	08015858 	.word	0x08015858
 800d14c:	08015a0c 	.word	0x08015a0c
 800d150:	080158a4 	.word	0x080158a4
          goto aborted;
 800d154:	bf00      	nop
    tcp_input_pcb = NULL;
 800d156:	4b27      	ldr	r3, [pc, #156]	@ (800d1f4 <tcp_input+0x7f8>)
 800d158:	2200      	movs	r2, #0
 800d15a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800d15c:	4b26      	ldr	r3, [pc, #152]	@ (800d1f8 <tcp_input+0x7fc>)
 800d15e:	2200      	movs	r2, #0
 800d160:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800d162:	4b26      	ldr	r3, [pc, #152]	@ (800d1fc <tcp_input+0x800>)
 800d164:	685b      	ldr	r3, [r3, #4]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d03f      	beq.n	800d1ea <tcp_input+0x7ee>
      pbuf_free(inseg.p);
 800d16a:	4b24      	ldr	r3, [pc, #144]	@ (800d1fc <tcp_input+0x800>)
 800d16c:	685b      	ldr	r3, [r3, #4]
 800d16e:	4618      	mov	r0, r3
 800d170:	f7fd fe02 	bl	800ad78 <pbuf_free>
      inseg.p = NULL;
 800d174:	4b21      	ldr	r3, [pc, #132]	@ (800d1fc <tcp_input+0x800>)
 800d176:	2200      	movs	r2, #0
 800d178:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800d17a:	e036      	b.n	800d1ea <tcp_input+0x7ee>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800d17c:	4b20      	ldr	r3, [pc, #128]	@ (800d200 <tcp_input+0x804>)
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	899b      	ldrh	r3, [r3, #12]
 800d182:	b29b      	uxth	r3, r3
 800d184:	4618      	mov	r0, r3
 800d186:	f7fc f92d 	bl	80093e4 <lwip_htons>
 800d18a:	4603      	mov	r3, r0
 800d18c:	b2db      	uxtb	r3, r3
 800d18e:	f003 0304 	and.w	r3, r3, #4
 800d192:	2b00      	cmp	r3, #0
 800d194:	d118      	bne.n	800d1c8 <tcp_input+0x7cc>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d196:	4b1b      	ldr	r3, [pc, #108]	@ (800d204 <tcp_input+0x808>)
 800d198:	6819      	ldr	r1, [r3, #0]
 800d19a:	4b1b      	ldr	r3, [pc, #108]	@ (800d208 <tcp_input+0x80c>)
 800d19c:	881b      	ldrh	r3, [r3, #0]
 800d19e:	461a      	mov	r2, r3
 800d1a0:	4b1a      	ldr	r3, [pc, #104]	@ (800d20c <tcp_input+0x810>)
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d1a6:	4b16      	ldr	r3, [pc, #88]	@ (800d200 <tcp_input+0x804>)
 800d1a8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d1aa:	885b      	ldrh	r3, [r3, #2]
 800d1ac:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d1ae:	4a14      	ldr	r2, [pc, #80]	@ (800d200 <tcp_input+0x804>)
 800d1b0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d1b2:	8812      	ldrh	r2, [r2, #0]
 800d1b4:	b292      	uxth	r2, r2
 800d1b6:	9202      	str	r2, [sp, #8]
 800d1b8:	9301      	str	r3, [sp, #4]
 800d1ba:	4b15      	ldr	r3, [pc, #84]	@ (800d210 <tcp_input+0x814>)
 800d1bc:	9300      	str	r3, [sp, #0]
 800d1be:	4b15      	ldr	r3, [pc, #84]	@ (800d214 <tcp_input+0x818>)
 800d1c0:	4602      	mov	r2, r0
 800d1c2:	2000      	movs	r0, #0
 800d1c4:	f003 f81a 	bl	80101fc <tcp_rst>
    pbuf_free(p);
 800d1c8:	6878      	ldr	r0, [r7, #4]
 800d1ca:	f7fd fdd5 	bl	800ad78 <pbuf_free>
  return;
 800d1ce:	e00c      	b.n	800d1ea <tcp_input+0x7ee>
    goto dropped;
 800d1d0:	bf00      	nop
 800d1d2:	e006      	b.n	800d1e2 <tcp_input+0x7e6>
    goto dropped;
 800d1d4:	bf00      	nop
 800d1d6:	e004      	b.n	800d1e2 <tcp_input+0x7e6>
    goto dropped;
 800d1d8:	bf00      	nop
 800d1da:	e002      	b.n	800d1e2 <tcp_input+0x7e6>
      goto dropped;
 800d1dc:	bf00      	nop
 800d1de:	e000      	b.n	800d1e2 <tcp_input+0x7e6>
      goto dropped;
 800d1e0:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800d1e2:	6878      	ldr	r0, [r7, #4]
 800d1e4:	f7fd fdc8 	bl	800ad78 <pbuf_free>
 800d1e8:	e000      	b.n	800d1ec <tcp_input+0x7f0>
  return;
 800d1ea:	bf00      	nop
}
 800d1ec:	3724      	adds	r7, #36	@ 0x24
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	bd90      	pop	{r4, r7, pc}
 800d1f2:	bf00      	nop
 800d1f4:	24010598 	.word	0x24010598
 800d1f8:	24010594 	.word	0x24010594
 800d1fc:	24010564 	.word	0x24010564
 800d200:	24010574 	.word	0x24010574
 800d204:	24010588 	.word	0x24010588
 800d208:	2401058e 	.word	0x2401058e
 800d20c:	24010584 	.word	0x24010584
 800d210:	24009a9c 	.word	0x24009a9c
 800d214:	24009aa0 	.word	0x24009aa0

0800d218 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b082      	sub	sp, #8
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d106      	bne.n	800d234 <tcp_input_delayed_close+0x1c>
 800d226:	4b17      	ldr	r3, [pc, #92]	@ (800d284 <tcp_input_delayed_close+0x6c>)
 800d228:	f240 225a 	movw	r2, #602	@ 0x25a
 800d22c:	4916      	ldr	r1, [pc, #88]	@ (800d288 <tcp_input_delayed_close+0x70>)
 800d22e:	4817      	ldr	r0, [pc, #92]	@ (800d28c <tcp_input_delayed_close+0x74>)
 800d230:	f006 f9ce 	bl	80135d0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800d234:	4b16      	ldr	r3, [pc, #88]	@ (800d290 <tcp_input_delayed_close+0x78>)
 800d236:	781b      	ldrb	r3, [r3, #0]
 800d238:	f003 0310 	and.w	r3, r3, #16
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d01c      	beq.n	800d27a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	8b5b      	ldrh	r3, [r3, #26]
 800d244:	f003 0310 	and.w	r3, r3, #16
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d10d      	bne.n	800d268 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d252:	2b00      	cmp	r3, #0
 800d254:	d008      	beq.n	800d268 <tcp_input_delayed_close+0x50>
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d25c:	687a      	ldr	r2, [r7, #4]
 800d25e:	6912      	ldr	r2, [r2, #16]
 800d260:	f06f 010e 	mvn.w	r1, #14
 800d264:	4610      	mov	r0, r2
 800d266:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d268:	6879      	ldr	r1, [r7, #4]
 800d26a:	480a      	ldr	r0, [pc, #40]	@ (800d294 <tcp_input_delayed_close+0x7c>)
 800d26c:	f7ff fa4e 	bl	800c70c <tcp_pcb_remove>
    tcp_free(pcb);
 800d270:	6878      	ldr	r0, [r7, #4]
 800d272:	f7fe f82d 	bl	800b2d0 <tcp_free>
    return 1;
 800d276:	2301      	movs	r3, #1
 800d278:	e000      	b.n	800d27c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800d27a:	2300      	movs	r3, #0
}
 800d27c:	4618      	mov	r0, r3
 800d27e:	3708      	adds	r7, #8
 800d280:	46bd      	mov	sp, r7
 800d282:	bd80      	pop	{r7, pc}
 800d284:	08015858 	.word	0x08015858
 800d288:	08015a28 	.word	0x08015a28
 800d28c:	080158a4 	.word	0x080158a4
 800d290:	24010591 	.word	0x24010591
 800d294:	24010558 	.word	0x24010558

0800d298 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800d298:	b590      	push	{r4, r7, lr}
 800d29a:	b08b      	sub	sp, #44	@ 0x2c
 800d29c:	af04      	add	r7, sp, #16
 800d29e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800d2a0:	4b6f      	ldr	r3, [pc, #444]	@ (800d460 <tcp_listen_input+0x1c8>)
 800d2a2:	781b      	ldrb	r3, [r3, #0]
 800d2a4:	f003 0304 	and.w	r3, r3, #4
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	f040 80d2 	bne.w	800d452 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d106      	bne.n	800d2c2 <tcp_listen_input+0x2a>
 800d2b4:	4b6b      	ldr	r3, [pc, #428]	@ (800d464 <tcp_listen_input+0x1cc>)
 800d2b6:	f240 2281 	movw	r2, #641	@ 0x281
 800d2ba:	496b      	ldr	r1, [pc, #428]	@ (800d468 <tcp_listen_input+0x1d0>)
 800d2bc:	486b      	ldr	r0, [pc, #428]	@ (800d46c <tcp_listen_input+0x1d4>)
 800d2be:	f006 f987 	bl	80135d0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800d2c2:	4b67      	ldr	r3, [pc, #412]	@ (800d460 <tcp_listen_input+0x1c8>)
 800d2c4:	781b      	ldrb	r3, [r3, #0]
 800d2c6:	f003 0310 	and.w	r3, r3, #16
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d019      	beq.n	800d302 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d2ce:	4b68      	ldr	r3, [pc, #416]	@ (800d470 <tcp_listen_input+0x1d8>)
 800d2d0:	6819      	ldr	r1, [r3, #0]
 800d2d2:	4b68      	ldr	r3, [pc, #416]	@ (800d474 <tcp_listen_input+0x1dc>)
 800d2d4:	881b      	ldrh	r3, [r3, #0]
 800d2d6:	461a      	mov	r2, r3
 800d2d8:	4b67      	ldr	r3, [pc, #412]	@ (800d478 <tcp_listen_input+0x1e0>)
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d2de:	4b67      	ldr	r3, [pc, #412]	@ (800d47c <tcp_listen_input+0x1e4>)
 800d2e0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d2e2:	885b      	ldrh	r3, [r3, #2]
 800d2e4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d2e6:	4a65      	ldr	r2, [pc, #404]	@ (800d47c <tcp_listen_input+0x1e4>)
 800d2e8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d2ea:	8812      	ldrh	r2, [r2, #0]
 800d2ec:	b292      	uxth	r2, r2
 800d2ee:	9202      	str	r2, [sp, #8]
 800d2f0:	9301      	str	r3, [sp, #4]
 800d2f2:	4b63      	ldr	r3, [pc, #396]	@ (800d480 <tcp_listen_input+0x1e8>)
 800d2f4:	9300      	str	r3, [sp, #0]
 800d2f6:	4b63      	ldr	r3, [pc, #396]	@ (800d484 <tcp_listen_input+0x1ec>)
 800d2f8:	4602      	mov	r2, r0
 800d2fa:	6878      	ldr	r0, [r7, #4]
 800d2fc:	f002 ff7e 	bl	80101fc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800d300:	e0a9      	b.n	800d456 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800d302:	4b57      	ldr	r3, [pc, #348]	@ (800d460 <tcp_listen_input+0x1c8>)
 800d304:	781b      	ldrb	r3, [r3, #0]
 800d306:	f003 0302 	and.w	r3, r3, #2
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	f000 80a3 	beq.w	800d456 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	7d5b      	ldrb	r3, [r3, #21]
 800d314:	4618      	mov	r0, r3
 800d316:	f7ff f923 	bl	800c560 <tcp_alloc>
 800d31a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800d31c:	697b      	ldr	r3, [r7, #20]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d111      	bne.n	800d346 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	699b      	ldr	r3, [r3, #24]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d00a      	beq.n	800d340 <tcp_listen_input+0xa8>
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	699b      	ldr	r3, [r3, #24]
 800d32e:	687a      	ldr	r2, [r7, #4]
 800d330:	6910      	ldr	r0, [r2, #16]
 800d332:	f04f 32ff 	mov.w	r2, #4294967295
 800d336:	2100      	movs	r1, #0
 800d338:	4798      	blx	r3
 800d33a:	4603      	mov	r3, r0
 800d33c:	73bb      	strb	r3, [r7, #14]
      return;
 800d33e:	e08b      	b.n	800d458 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d340:	23f0      	movs	r3, #240	@ 0xf0
 800d342:	73bb      	strb	r3, [r7, #14]
      return;
 800d344:	e088      	b.n	800d458 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800d346:	4b50      	ldr	r3, [pc, #320]	@ (800d488 <tcp_listen_input+0x1f0>)
 800d348:	695a      	ldr	r2, [r3, #20]
 800d34a:	697b      	ldr	r3, [r7, #20]
 800d34c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800d34e:	4b4e      	ldr	r3, [pc, #312]	@ (800d488 <tcp_listen_input+0x1f0>)
 800d350:	691a      	ldr	r2, [r3, #16]
 800d352:	697b      	ldr	r3, [r7, #20]
 800d354:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	8ada      	ldrh	r2, [r3, #22]
 800d35a:	697b      	ldr	r3, [r7, #20]
 800d35c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800d35e:	4b47      	ldr	r3, [pc, #284]	@ (800d47c <tcp_listen_input+0x1e4>)
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	881b      	ldrh	r3, [r3, #0]
 800d364:	b29a      	uxth	r2, r3
 800d366:	697b      	ldr	r3, [r7, #20]
 800d368:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800d36a:	697b      	ldr	r3, [r7, #20]
 800d36c:	2203      	movs	r2, #3
 800d36e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800d370:	4b41      	ldr	r3, [pc, #260]	@ (800d478 <tcp_listen_input+0x1e0>)
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	1c5a      	adds	r2, r3, #1
 800d376:	697b      	ldr	r3, [r7, #20]
 800d378:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800d37a:	697b      	ldr	r3, [r7, #20]
 800d37c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d37e:	697b      	ldr	r3, [r7, #20]
 800d380:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800d382:	6978      	ldr	r0, [r7, #20]
 800d384:	f7ff fa56 	bl	800c834 <tcp_next_iss>
 800d388:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800d38a:	697b      	ldr	r3, [r7, #20]
 800d38c:	693a      	ldr	r2, [r7, #16]
 800d38e:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800d390:	697b      	ldr	r3, [r7, #20]
 800d392:	693a      	ldr	r2, [r7, #16]
 800d394:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800d396:	697b      	ldr	r3, [r7, #20]
 800d398:	693a      	ldr	r2, [r7, #16]
 800d39a:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800d39c:	697b      	ldr	r3, [r7, #20]
 800d39e:	693a      	ldr	r2, [r7, #16]
 800d3a0:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800d3a2:	4b35      	ldr	r3, [pc, #212]	@ (800d478 <tcp_listen_input+0x1e0>)
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	1e5a      	subs	r2, r3, #1
 800d3a8:	697b      	ldr	r3, [r7, #20]
 800d3aa:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	691a      	ldr	r2, [r3, #16]
 800d3b0:	697b      	ldr	r3, [r7, #20]
 800d3b2:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800d3b4:	697b      	ldr	r3, [r7, #20]
 800d3b6:	687a      	ldr	r2, [r7, #4]
 800d3b8:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	7a5b      	ldrb	r3, [r3, #9]
 800d3be:	f003 030c 	and.w	r3, r3, #12
 800d3c2:	b2da      	uxtb	r2, r3
 800d3c4:	697b      	ldr	r3, [r7, #20]
 800d3c6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	7a1a      	ldrb	r2, [r3, #8]
 800d3cc:	697b      	ldr	r3, [r7, #20]
 800d3ce:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800d3d0:	4b2e      	ldr	r3, [pc, #184]	@ (800d48c <tcp_listen_input+0x1f4>)
 800d3d2:	681a      	ldr	r2, [r3, #0]
 800d3d4:	697b      	ldr	r3, [r7, #20]
 800d3d6:	60da      	str	r2, [r3, #12]
 800d3d8:	4a2c      	ldr	r2, [pc, #176]	@ (800d48c <tcp_listen_input+0x1f4>)
 800d3da:	697b      	ldr	r3, [r7, #20]
 800d3dc:	6013      	str	r3, [r2, #0]
 800d3de:	f003 f8cf 	bl	8010580 <tcp_timer_needed>
 800d3e2:	4b2b      	ldr	r3, [pc, #172]	@ (800d490 <tcp_listen_input+0x1f8>)
 800d3e4:	2201      	movs	r2, #1
 800d3e6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800d3e8:	6978      	ldr	r0, [r7, #20]
 800d3ea:	f001 fd8b 	bl	800ef04 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800d3ee:	4b23      	ldr	r3, [pc, #140]	@ (800d47c <tcp_listen_input+0x1e4>)
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	89db      	ldrh	r3, [r3, #14]
 800d3f4:	b29a      	uxth	r2, r3
 800d3f6:	697b      	ldr	r3, [r7, #20]
 800d3f8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800d3fc:	697b      	ldr	r3, [r7, #20]
 800d3fe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800d402:	697b      	ldr	r3, [r7, #20]
 800d404:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800d408:	697b      	ldr	r3, [r7, #20]
 800d40a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800d40c:	697b      	ldr	r3, [r7, #20]
 800d40e:	3304      	adds	r3, #4
 800d410:	4618      	mov	r0, r3
 800d412:	f004 fcf7 	bl	8011e04 <ip4_route>
 800d416:	4601      	mov	r1, r0
 800d418:	697b      	ldr	r3, [r7, #20]
 800d41a:	3304      	adds	r3, #4
 800d41c:	461a      	mov	r2, r3
 800d41e:	4620      	mov	r0, r4
 800d420:	f7ff fa2e 	bl	800c880 <tcp_eff_send_mss_netif>
 800d424:	4603      	mov	r3, r0
 800d426:	461a      	mov	r2, r3
 800d428:	697b      	ldr	r3, [r7, #20]
 800d42a:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800d42c:	2112      	movs	r1, #18
 800d42e:	6978      	ldr	r0, [r7, #20]
 800d430:	f002 f840 	bl	800f4b4 <tcp_enqueue_flags>
 800d434:	4603      	mov	r3, r0
 800d436:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800d438:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d004      	beq.n	800d44a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800d440:	2100      	movs	r1, #0
 800d442:	6978      	ldr	r0, [r7, #20]
 800d444:	f7fe f970 	bl	800b728 <tcp_abandon>
      return;
 800d448:	e006      	b.n	800d458 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800d44a:	6978      	ldr	r0, [r7, #20]
 800d44c:	f002 f920 	bl	800f690 <tcp_output>
  return;
 800d450:	e001      	b.n	800d456 <tcp_listen_input+0x1be>
    return;
 800d452:	bf00      	nop
 800d454:	e000      	b.n	800d458 <tcp_listen_input+0x1c0>
  return;
 800d456:	bf00      	nop
}
 800d458:	371c      	adds	r7, #28
 800d45a:	46bd      	mov	sp, r7
 800d45c:	bd90      	pop	{r4, r7, pc}
 800d45e:	bf00      	nop
 800d460:	24010590 	.word	0x24010590
 800d464:	08015858 	.word	0x08015858
 800d468:	08015a50 	.word	0x08015a50
 800d46c:	080158a4 	.word	0x080158a4
 800d470:	24010588 	.word	0x24010588
 800d474:	2401058e 	.word	0x2401058e
 800d478:	24010584 	.word	0x24010584
 800d47c:	24010574 	.word	0x24010574
 800d480:	24009a9c 	.word	0x24009a9c
 800d484:	24009aa0 	.word	0x24009aa0
 800d488:	24009a8c 	.word	0x24009a8c
 800d48c:	24010558 	.word	0x24010558
 800d490:	24010560 	.word	0x24010560

0800d494 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b086      	sub	sp, #24
 800d498:	af04      	add	r7, sp, #16
 800d49a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800d49c:	4b2f      	ldr	r3, [pc, #188]	@ (800d55c <tcp_timewait_input+0xc8>)
 800d49e:	781b      	ldrb	r3, [r3, #0]
 800d4a0:	f003 0304 	and.w	r3, r3, #4
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d153      	bne.n	800d550 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d106      	bne.n	800d4bc <tcp_timewait_input+0x28>
 800d4ae:	4b2c      	ldr	r3, [pc, #176]	@ (800d560 <tcp_timewait_input+0xcc>)
 800d4b0:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800d4b4:	492b      	ldr	r1, [pc, #172]	@ (800d564 <tcp_timewait_input+0xd0>)
 800d4b6:	482c      	ldr	r0, [pc, #176]	@ (800d568 <tcp_timewait_input+0xd4>)
 800d4b8:	f006 f88a 	bl	80135d0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800d4bc:	4b27      	ldr	r3, [pc, #156]	@ (800d55c <tcp_timewait_input+0xc8>)
 800d4be:	781b      	ldrb	r3, [r3, #0]
 800d4c0:	f003 0302 	and.w	r3, r3, #2
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d02a      	beq.n	800d51e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800d4c8:	4b28      	ldr	r3, [pc, #160]	@ (800d56c <tcp_timewait_input+0xd8>)
 800d4ca:	681a      	ldr	r2, [r3, #0]
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4d0:	1ad3      	subs	r3, r2, r3
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	db2d      	blt.n	800d532 <tcp_timewait_input+0x9e>
 800d4d6:	4b25      	ldr	r3, [pc, #148]	@ (800d56c <tcp_timewait_input+0xd8>)
 800d4d8:	681a      	ldr	r2, [r3, #0]
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4de:	6879      	ldr	r1, [r7, #4]
 800d4e0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800d4e2:	440b      	add	r3, r1
 800d4e4:	1ad3      	subs	r3, r2, r3
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	dc23      	bgt.n	800d532 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d4ea:	4b21      	ldr	r3, [pc, #132]	@ (800d570 <tcp_timewait_input+0xdc>)
 800d4ec:	6819      	ldr	r1, [r3, #0]
 800d4ee:	4b21      	ldr	r3, [pc, #132]	@ (800d574 <tcp_timewait_input+0xe0>)
 800d4f0:	881b      	ldrh	r3, [r3, #0]
 800d4f2:	461a      	mov	r2, r3
 800d4f4:	4b1d      	ldr	r3, [pc, #116]	@ (800d56c <tcp_timewait_input+0xd8>)
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d4fa:	4b1f      	ldr	r3, [pc, #124]	@ (800d578 <tcp_timewait_input+0xe4>)
 800d4fc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d4fe:	885b      	ldrh	r3, [r3, #2]
 800d500:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d502:	4a1d      	ldr	r2, [pc, #116]	@ (800d578 <tcp_timewait_input+0xe4>)
 800d504:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d506:	8812      	ldrh	r2, [r2, #0]
 800d508:	b292      	uxth	r2, r2
 800d50a:	9202      	str	r2, [sp, #8]
 800d50c:	9301      	str	r3, [sp, #4]
 800d50e:	4b1b      	ldr	r3, [pc, #108]	@ (800d57c <tcp_timewait_input+0xe8>)
 800d510:	9300      	str	r3, [sp, #0]
 800d512:	4b1b      	ldr	r3, [pc, #108]	@ (800d580 <tcp_timewait_input+0xec>)
 800d514:	4602      	mov	r2, r0
 800d516:	6878      	ldr	r0, [r7, #4]
 800d518:	f002 fe70 	bl	80101fc <tcp_rst>
      return;
 800d51c:	e01b      	b.n	800d556 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800d51e:	4b0f      	ldr	r3, [pc, #60]	@ (800d55c <tcp_timewait_input+0xc8>)
 800d520:	781b      	ldrb	r3, [r3, #0]
 800d522:	f003 0301 	and.w	r3, r3, #1
 800d526:	2b00      	cmp	r3, #0
 800d528:	d003      	beq.n	800d532 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800d52a:	4b16      	ldr	r3, [pc, #88]	@ (800d584 <tcp_timewait_input+0xf0>)
 800d52c:	681a      	ldr	r2, [r3, #0]
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800d532:	4b10      	ldr	r3, [pc, #64]	@ (800d574 <tcp_timewait_input+0xe0>)
 800d534:	881b      	ldrh	r3, [r3, #0]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d00c      	beq.n	800d554 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	8b5b      	ldrh	r3, [r3, #26]
 800d53e:	f043 0302 	orr.w	r3, r3, #2
 800d542:	b29a      	uxth	r2, r3
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d548:	6878      	ldr	r0, [r7, #4]
 800d54a:	f002 f8a1 	bl	800f690 <tcp_output>
  }
  return;
 800d54e:	e001      	b.n	800d554 <tcp_timewait_input+0xc0>
    return;
 800d550:	bf00      	nop
 800d552:	e000      	b.n	800d556 <tcp_timewait_input+0xc2>
  return;
 800d554:	bf00      	nop
}
 800d556:	3708      	adds	r7, #8
 800d558:	46bd      	mov	sp, r7
 800d55a:	bd80      	pop	{r7, pc}
 800d55c:	24010590 	.word	0x24010590
 800d560:	08015858 	.word	0x08015858
 800d564:	08015a70 	.word	0x08015a70
 800d568:	080158a4 	.word	0x080158a4
 800d56c:	24010584 	.word	0x24010584
 800d570:	24010588 	.word	0x24010588
 800d574:	2401058e 	.word	0x2401058e
 800d578:	24010574 	.word	0x24010574
 800d57c:	24009a9c 	.word	0x24009a9c
 800d580:	24009aa0 	.word	0x24009aa0
 800d584:	2401054c 	.word	0x2401054c

0800d588 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800d588:	b590      	push	{r4, r7, lr}
 800d58a:	b08d      	sub	sp, #52	@ 0x34
 800d58c:	af04      	add	r7, sp, #16
 800d58e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800d590:	2300      	movs	r3, #0
 800d592:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800d594:	2300      	movs	r3, #0
 800d596:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d106      	bne.n	800d5ac <tcp_process+0x24>
 800d59e:	4b9d      	ldr	r3, [pc, #628]	@ (800d814 <tcp_process+0x28c>)
 800d5a0:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800d5a4:	499c      	ldr	r1, [pc, #624]	@ (800d818 <tcp_process+0x290>)
 800d5a6:	489d      	ldr	r0, [pc, #628]	@ (800d81c <tcp_process+0x294>)
 800d5a8:	f006 f812 	bl	80135d0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800d5ac:	4b9c      	ldr	r3, [pc, #624]	@ (800d820 <tcp_process+0x298>)
 800d5ae:	781b      	ldrb	r3, [r3, #0]
 800d5b0:	f003 0304 	and.w	r3, r3, #4
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d04e      	beq.n	800d656 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	7d1b      	ldrb	r3, [r3, #20]
 800d5bc:	2b02      	cmp	r3, #2
 800d5be:	d108      	bne.n	800d5d2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d5c4:	4b97      	ldr	r3, [pc, #604]	@ (800d824 <tcp_process+0x29c>)
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	429a      	cmp	r2, r3
 800d5ca:	d123      	bne.n	800d614 <tcp_process+0x8c>
        acceptable = 1;
 800d5cc:	2301      	movs	r3, #1
 800d5ce:	76fb      	strb	r3, [r7, #27]
 800d5d0:	e020      	b.n	800d614 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d5d6:	4b94      	ldr	r3, [pc, #592]	@ (800d828 <tcp_process+0x2a0>)
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	429a      	cmp	r2, r3
 800d5dc:	d102      	bne.n	800d5e4 <tcp_process+0x5c>
        acceptable = 1;
 800d5de:	2301      	movs	r3, #1
 800d5e0:	76fb      	strb	r3, [r7, #27]
 800d5e2:	e017      	b.n	800d614 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d5e4:	4b90      	ldr	r3, [pc, #576]	@ (800d828 <tcp_process+0x2a0>)
 800d5e6:	681a      	ldr	r2, [r3, #0]
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5ec:	1ad3      	subs	r3, r2, r3
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	db10      	blt.n	800d614 <tcp_process+0x8c>
 800d5f2:	4b8d      	ldr	r3, [pc, #564]	@ (800d828 <tcp_process+0x2a0>)
 800d5f4:	681a      	ldr	r2, [r3, #0]
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5fa:	6879      	ldr	r1, [r7, #4]
 800d5fc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800d5fe:	440b      	add	r3, r1
 800d600:	1ad3      	subs	r3, r2, r3
 800d602:	2b00      	cmp	r3, #0
 800d604:	dc06      	bgt.n	800d614 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	8b5b      	ldrh	r3, [r3, #26]
 800d60a:	f043 0302 	orr.w	r3, r3, #2
 800d60e:	b29a      	uxth	r2, r3
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800d614:	7efb      	ldrb	r3, [r7, #27]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d01b      	beq.n	800d652 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	7d1b      	ldrb	r3, [r3, #20]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d106      	bne.n	800d630 <tcp_process+0xa8>
 800d622:	4b7c      	ldr	r3, [pc, #496]	@ (800d814 <tcp_process+0x28c>)
 800d624:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800d628:	4980      	ldr	r1, [pc, #512]	@ (800d82c <tcp_process+0x2a4>)
 800d62a:	487c      	ldr	r0, [pc, #496]	@ (800d81c <tcp_process+0x294>)
 800d62c:	f005 ffd0 	bl	80135d0 <iprintf>
      recv_flags |= TF_RESET;
 800d630:	4b7f      	ldr	r3, [pc, #508]	@ (800d830 <tcp_process+0x2a8>)
 800d632:	781b      	ldrb	r3, [r3, #0]
 800d634:	f043 0308 	orr.w	r3, r3, #8
 800d638:	b2da      	uxtb	r2, r3
 800d63a:	4b7d      	ldr	r3, [pc, #500]	@ (800d830 <tcp_process+0x2a8>)
 800d63c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	8b5b      	ldrh	r3, [r3, #26]
 800d642:	f023 0301 	bic.w	r3, r3, #1
 800d646:	b29a      	uxth	r2, r3
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800d64c:	f06f 030d 	mvn.w	r3, #13
 800d650:	e37a      	b.n	800dd48 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800d652:	2300      	movs	r3, #0
 800d654:	e378      	b.n	800dd48 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800d656:	4b72      	ldr	r3, [pc, #456]	@ (800d820 <tcp_process+0x298>)
 800d658:	781b      	ldrb	r3, [r3, #0]
 800d65a:	f003 0302 	and.w	r3, r3, #2
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d010      	beq.n	800d684 <tcp_process+0xfc>
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	7d1b      	ldrb	r3, [r3, #20]
 800d666:	2b02      	cmp	r3, #2
 800d668:	d00c      	beq.n	800d684 <tcp_process+0xfc>
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	7d1b      	ldrb	r3, [r3, #20]
 800d66e:	2b03      	cmp	r3, #3
 800d670:	d008      	beq.n	800d684 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	8b5b      	ldrh	r3, [r3, #26]
 800d676:	f043 0302 	orr.w	r3, r3, #2
 800d67a:	b29a      	uxth	r2, r3
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800d680:	2300      	movs	r3, #0
 800d682:	e361      	b.n	800dd48 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	8b5b      	ldrh	r3, [r3, #26]
 800d688:	f003 0310 	and.w	r3, r3, #16
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d103      	bne.n	800d698 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800d690:	4b68      	ldr	r3, [pc, #416]	@ (800d834 <tcp_process+0x2ac>)
 800d692:	681a      	ldr	r2, [r3, #0]
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	2200      	movs	r2, #0
 800d69c:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800d6a8:	6878      	ldr	r0, [r7, #4]
 800d6aa:	f001 fc2b 	bl	800ef04 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	7d1b      	ldrb	r3, [r3, #20]
 800d6b2:	3b02      	subs	r3, #2
 800d6b4:	2b07      	cmp	r3, #7
 800d6b6:	f200 8337 	bhi.w	800dd28 <tcp_process+0x7a0>
 800d6ba:	a201      	add	r2, pc, #4	@ (adr r2, 800d6c0 <tcp_process+0x138>)
 800d6bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6c0:	0800d6e1 	.word	0x0800d6e1
 800d6c4:	0800d911 	.word	0x0800d911
 800d6c8:	0800da89 	.word	0x0800da89
 800d6cc:	0800dab3 	.word	0x0800dab3
 800d6d0:	0800dbd7 	.word	0x0800dbd7
 800d6d4:	0800da89 	.word	0x0800da89
 800d6d8:	0800dc63 	.word	0x0800dc63
 800d6dc:	0800dcf3 	.word	0x0800dcf3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800d6e0:	4b4f      	ldr	r3, [pc, #316]	@ (800d820 <tcp_process+0x298>)
 800d6e2:	781b      	ldrb	r3, [r3, #0]
 800d6e4:	f003 0310 	and.w	r3, r3, #16
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	f000 80e4 	beq.w	800d8b6 <tcp_process+0x32e>
 800d6ee:	4b4c      	ldr	r3, [pc, #304]	@ (800d820 <tcp_process+0x298>)
 800d6f0:	781b      	ldrb	r3, [r3, #0]
 800d6f2:	f003 0302 	and.w	r3, r3, #2
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	f000 80dd 	beq.w	800d8b6 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d700:	1c5a      	adds	r2, r3, #1
 800d702:	4b48      	ldr	r3, [pc, #288]	@ (800d824 <tcp_process+0x29c>)
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	429a      	cmp	r2, r3
 800d708:	f040 80d5 	bne.w	800d8b6 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800d70c:	4b46      	ldr	r3, [pc, #280]	@ (800d828 <tcp_process+0x2a0>)
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	1c5a      	adds	r2, r3, #1
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800d71e:	4b41      	ldr	r3, [pc, #260]	@ (800d824 <tcp_process+0x29c>)
 800d720:	681a      	ldr	r2, [r3, #0]
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800d726:	4b44      	ldr	r3, [pc, #272]	@ (800d838 <tcp_process+0x2b0>)
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	89db      	ldrh	r3, [r3, #14]
 800d72c:	b29a      	uxth	r2, r3
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800d740:	4b39      	ldr	r3, [pc, #228]	@ (800d828 <tcp_process+0x2a0>)
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	1e5a      	subs	r2, r3, #1
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	2204      	movs	r2, #4
 800d74e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	3304      	adds	r3, #4
 800d758:	4618      	mov	r0, r3
 800d75a:	f004 fb53 	bl	8011e04 <ip4_route>
 800d75e:	4601      	mov	r1, r0
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	3304      	adds	r3, #4
 800d764:	461a      	mov	r2, r3
 800d766:	4620      	mov	r0, r4
 800d768:	f7ff f88a 	bl	800c880 <tcp_eff_send_mss_netif>
 800d76c:	4603      	mov	r3, r0
 800d76e:	461a      	mov	r2, r3
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d778:	009a      	lsls	r2, r3, #2
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d77e:	005b      	lsls	r3, r3, #1
 800d780:	f241 111c 	movw	r1, #4380	@ 0x111c
 800d784:	428b      	cmp	r3, r1
 800d786:	bf38      	it	cc
 800d788:	460b      	movcc	r3, r1
 800d78a:	429a      	cmp	r2, r3
 800d78c:	d204      	bcs.n	800d798 <tcp_process+0x210>
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d792:	009b      	lsls	r3, r3, #2
 800d794:	b29b      	uxth	r3, r3
 800d796:	e00d      	b.n	800d7b4 <tcp_process+0x22c>
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d79c:	005b      	lsls	r3, r3, #1
 800d79e:	f241 121c 	movw	r2, #4380	@ 0x111c
 800d7a2:	4293      	cmp	r3, r2
 800d7a4:	d904      	bls.n	800d7b0 <tcp_process+0x228>
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d7aa:	005b      	lsls	r3, r3, #1
 800d7ac:	b29b      	uxth	r3, r3
 800d7ae:	e001      	b.n	800d7b4 <tcp_process+0x22c>
 800d7b0:	f241 131c 	movw	r3, #4380	@ 0x111c
 800d7b4:	687a      	ldr	r2, [r7, #4]
 800d7b6:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d106      	bne.n	800d7d2 <tcp_process+0x24a>
 800d7c4:	4b13      	ldr	r3, [pc, #76]	@ (800d814 <tcp_process+0x28c>)
 800d7c6:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800d7ca:	491c      	ldr	r1, [pc, #112]	@ (800d83c <tcp_process+0x2b4>)
 800d7cc:	4813      	ldr	r0, [pc, #76]	@ (800d81c <tcp_process+0x294>)
 800d7ce:	f005 feff 	bl	80135d0 <iprintf>
        --pcb->snd_queuelen;
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d7d8:	3b01      	subs	r3, #1
 800d7da:	b29a      	uxth	r2, r3
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d7e6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800d7e8:	69fb      	ldr	r3, [r7, #28]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d12a      	bne.n	800d844 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d7f2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800d7f4:	69fb      	ldr	r3, [r7, #28]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d106      	bne.n	800d808 <tcp_process+0x280>
 800d7fa:	4b06      	ldr	r3, [pc, #24]	@ (800d814 <tcp_process+0x28c>)
 800d7fc:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800d800:	490f      	ldr	r1, [pc, #60]	@ (800d840 <tcp_process+0x2b8>)
 800d802:	4806      	ldr	r0, [pc, #24]	@ (800d81c <tcp_process+0x294>)
 800d804:	f005 fee4 	bl	80135d0 <iprintf>
          pcb->unsent = rseg->next;
 800d808:	69fb      	ldr	r3, [r7, #28]
 800d80a:	681a      	ldr	r2, [r3, #0]
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	66da      	str	r2, [r3, #108]	@ 0x6c
 800d810:	e01c      	b.n	800d84c <tcp_process+0x2c4>
 800d812:	bf00      	nop
 800d814:	08015858 	.word	0x08015858
 800d818:	08015a90 	.word	0x08015a90
 800d81c:	080158a4 	.word	0x080158a4
 800d820:	24010590 	.word	0x24010590
 800d824:	24010588 	.word	0x24010588
 800d828:	24010584 	.word	0x24010584
 800d82c:	08015aac 	.word	0x08015aac
 800d830:	24010591 	.word	0x24010591
 800d834:	2401054c 	.word	0x2401054c
 800d838:	24010574 	.word	0x24010574
 800d83c:	08015acc 	.word	0x08015acc
 800d840:	08015ae4 	.word	0x08015ae4
        } else {
          pcb->unacked = rseg->next;
 800d844:	69fb      	ldr	r3, [r7, #28]
 800d846:	681a      	ldr	r2, [r3, #0]
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800d84c:	69f8      	ldr	r0, [r7, #28]
 800d84e:	f7fe fd1e 	bl	800c28e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d856:	2b00      	cmp	r3, #0
 800d858:	d104      	bne.n	800d864 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d860:	861a      	strh	r2, [r3, #48]	@ 0x30
 800d862:	e006      	b.n	800d872 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	2200      	movs	r2, #0
 800d868:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	2200      	movs	r2, #0
 800d86e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d00a      	beq.n	800d892 <tcp_process+0x30a>
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d882:	687a      	ldr	r2, [r7, #4]
 800d884:	6910      	ldr	r0, [r2, #16]
 800d886:	2200      	movs	r2, #0
 800d888:	6879      	ldr	r1, [r7, #4]
 800d88a:	4798      	blx	r3
 800d88c:	4603      	mov	r3, r0
 800d88e:	76bb      	strb	r3, [r7, #26]
 800d890:	e001      	b.n	800d896 <tcp_process+0x30e>
 800d892:	2300      	movs	r3, #0
 800d894:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800d896:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d89a:	f113 0f0d 	cmn.w	r3, #13
 800d89e:	d102      	bne.n	800d8a6 <tcp_process+0x31e>
          return ERR_ABRT;
 800d8a0:	f06f 030c 	mvn.w	r3, #12
 800d8a4:	e250      	b.n	800dd48 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	8b5b      	ldrh	r3, [r3, #26]
 800d8aa:	f043 0302 	orr.w	r3, r3, #2
 800d8ae:	b29a      	uxth	r2, r3
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800d8b4:	e23a      	b.n	800dd2c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800d8b6:	4b98      	ldr	r3, [pc, #608]	@ (800db18 <tcp_process+0x590>)
 800d8b8:	781b      	ldrb	r3, [r3, #0]
 800d8ba:	f003 0310 	and.w	r3, r3, #16
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	f000 8234 	beq.w	800dd2c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d8c4:	4b95      	ldr	r3, [pc, #596]	@ (800db1c <tcp_process+0x594>)
 800d8c6:	6819      	ldr	r1, [r3, #0]
 800d8c8:	4b95      	ldr	r3, [pc, #596]	@ (800db20 <tcp_process+0x598>)
 800d8ca:	881b      	ldrh	r3, [r3, #0]
 800d8cc:	461a      	mov	r2, r3
 800d8ce:	4b95      	ldr	r3, [pc, #596]	@ (800db24 <tcp_process+0x59c>)
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d8d4:	4b94      	ldr	r3, [pc, #592]	@ (800db28 <tcp_process+0x5a0>)
 800d8d6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d8d8:	885b      	ldrh	r3, [r3, #2]
 800d8da:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d8dc:	4a92      	ldr	r2, [pc, #584]	@ (800db28 <tcp_process+0x5a0>)
 800d8de:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d8e0:	8812      	ldrh	r2, [r2, #0]
 800d8e2:	b292      	uxth	r2, r2
 800d8e4:	9202      	str	r2, [sp, #8]
 800d8e6:	9301      	str	r3, [sp, #4]
 800d8e8:	4b90      	ldr	r3, [pc, #576]	@ (800db2c <tcp_process+0x5a4>)
 800d8ea:	9300      	str	r3, [sp, #0]
 800d8ec:	4b90      	ldr	r3, [pc, #576]	@ (800db30 <tcp_process+0x5a8>)
 800d8ee:	4602      	mov	r2, r0
 800d8f0:	6878      	ldr	r0, [r7, #4]
 800d8f2:	f002 fc83 	bl	80101fc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d8fc:	2b05      	cmp	r3, #5
 800d8fe:	f200 8215 	bhi.w	800dd2c <tcp_process+0x7a4>
          pcb->rtime = 0;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	2200      	movs	r2, #0
 800d906:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800d908:	6878      	ldr	r0, [r7, #4]
 800d90a:	f002 fa4f 	bl	800fdac <tcp_rexmit_rto>
      break;
 800d90e:	e20d      	b.n	800dd2c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800d910:	4b81      	ldr	r3, [pc, #516]	@ (800db18 <tcp_process+0x590>)
 800d912:	781b      	ldrb	r3, [r3, #0]
 800d914:	f003 0310 	and.w	r3, r3, #16
 800d918:	2b00      	cmp	r3, #0
 800d91a:	f000 80a1 	beq.w	800da60 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d91e:	4b7f      	ldr	r3, [pc, #508]	@ (800db1c <tcp_process+0x594>)
 800d920:	681a      	ldr	r2, [r3, #0]
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d926:	1ad3      	subs	r3, r2, r3
 800d928:	3b01      	subs	r3, #1
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	db7e      	blt.n	800da2c <tcp_process+0x4a4>
 800d92e:	4b7b      	ldr	r3, [pc, #492]	@ (800db1c <tcp_process+0x594>)
 800d930:	681a      	ldr	r2, [r3, #0]
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d936:	1ad3      	subs	r3, r2, r3
 800d938:	2b00      	cmp	r3, #0
 800d93a:	dc77      	bgt.n	800da2c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	2204      	movs	r2, #4
 800d940:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d946:	2b00      	cmp	r3, #0
 800d948:	d102      	bne.n	800d950 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800d94a:	23fa      	movs	r3, #250	@ 0xfa
 800d94c:	76bb      	strb	r3, [r7, #26]
 800d94e:	e01d      	b.n	800d98c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d954:	699b      	ldr	r3, [r3, #24]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d106      	bne.n	800d968 <tcp_process+0x3e0>
 800d95a:	4b76      	ldr	r3, [pc, #472]	@ (800db34 <tcp_process+0x5ac>)
 800d95c:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800d960:	4975      	ldr	r1, [pc, #468]	@ (800db38 <tcp_process+0x5b0>)
 800d962:	4876      	ldr	r0, [pc, #472]	@ (800db3c <tcp_process+0x5b4>)
 800d964:	f005 fe34 	bl	80135d0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d96c:	699b      	ldr	r3, [r3, #24]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d00a      	beq.n	800d988 <tcp_process+0x400>
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d976:	699b      	ldr	r3, [r3, #24]
 800d978:	687a      	ldr	r2, [r7, #4]
 800d97a:	6910      	ldr	r0, [r2, #16]
 800d97c:	2200      	movs	r2, #0
 800d97e:	6879      	ldr	r1, [r7, #4]
 800d980:	4798      	blx	r3
 800d982:	4603      	mov	r3, r0
 800d984:	76bb      	strb	r3, [r7, #26]
 800d986:	e001      	b.n	800d98c <tcp_process+0x404>
 800d988:	23f0      	movs	r3, #240	@ 0xf0
 800d98a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800d98c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d00a      	beq.n	800d9aa <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800d994:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d998:	f113 0f0d 	cmn.w	r3, #13
 800d99c:	d002      	beq.n	800d9a4 <tcp_process+0x41c>
              tcp_abort(pcb);
 800d99e:	6878      	ldr	r0, [r7, #4]
 800d9a0:	f7fd ff82 	bl	800b8a8 <tcp_abort>
            }
            return ERR_ABRT;
 800d9a4:	f06f 030c 	mvn.w	r3, #12
 800d9a8:	e1ce      	b.n	800dd48 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800d9aa:	6878      	ldr	r0, [r7, #4]
 800d9ac:	f000 fae0 	bl	800df70 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800d9b0:	4b63      	ldr	r3, [pc, #396]	@ (800db40 <tcp_process+0x5b8>)
 800d9b2:	881b      	ldrh	r3, [r3, #0]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d005      	beq.n	800d9c4 <tcp_process+0x43c>
            recv_acked--;
 800d9b8:	4b61      	ldr	r3, [pc, #388]	@ (800db40 <tcp_process+0x5b8>)
 800d9ba:	881b      	ldrh	r3, [r3, #0]
 800d9bc:	3b01      	subs	r3, #1
 800d9be:	b29a      	uxth	r2, r3
 800d9c0:	4b5f      	ldr	r3, [pc, #380]	@ (800db40 <tcp_process+0x5b8>)
 800d9c2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d9c8:	009a      	lsls	r2, r3, #2
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d9ce:	005b      	lsls	r3, r3, #1
 800d9d0:	f241 111c 	movw	r1, #4380	@ 0x111c
 800d9d4:	428b      	cmp	r3, r1
 800d9d6:	bf38      	it	cc
 800d9d8:	460b      	movcc	r3, r1
 800d9da:	429a      	cmp	r2, r3
 800d9dc:	d204      	bcs.n	800d9e8 <tcp_process+0x460>
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d9e2:	009b      	lsls	r3, r3, #2
 800d9e4:	b29b      	uxth	r3, r3
 800d9e6:	e00d      	b.n	800da04 <tcp_process+0x47c>
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d9ec:	005b      	lsls	r3, r3, #1
 800d9ee:	f241 121c 	movw	r2, #4380	@ 0x111c
 800d9f2:	4293      	cmp	r3, r2
 800d9f4:	d904      	bls.n	800da00 <tcp_process+0x478>
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d9fa:	005b      	lsls	r3, r3, #1
 800d9fc:	b29b      	uxth	r3, r3
 800d9fe:	e001      	b.n	800da04 <tcp_process+0x47c>
 800da00:	f241 131c 	movw	r3, #4380	@ 0x111c
 800da04:	687a      	ldr	r2, [r7, #4]
 800da06:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800da0a:	4b4e      	ldr	r3, [pc, #312]	@ (800db44 <tcp_process+0x5bc>)
 800da0c:	781b      	ldrb	r3, [r3, #0]
 800da0e:	f003 0320 	and.w	r3, r3, #32
 800da12:	2b00      	cmp	r3, #0
 800da14:	d037      	beq.n	800da86 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	8b5b      	ldrh	r3, [r3, #26]
 800da1a:	f043 0302 	orr.w	r3, r3, #2
 800da1e:	b29a      	uxth	r2, r3
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2207      	movs	r2, #7
 800da28:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800da2a:	e02c      	b.n	800da86 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800da2c:	4b3b      	ldr	r3, [pc, #236]	@ (800db1c <tcp_process+0x594>)
 800da2e:	6819      	ldr	r1, [r3, #0]
 800da30:	4b3b      	ldr	r3, [pc, #236]	@ (800db20 <tcp_process+0x598>)
 800da32:	881b      	ldrh	r3, [r3, #0]
 800da34:	461a      	mov	r2, r3
 800da36:	4b3b      	ldr	r3, [pc, #236]	@ (800db24 <tcp_process+0x59c>)
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800da3c:	4b3a      	ldr	r3, [pc, #232]	@ (800db28 <tcp_process+0x5a0>)
 800da3e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800da40:	885b      	ldrh	r3, [r3, #2]
 800da42:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800da44:	4a38      	ldr	r2, [pc, #224]	@ (800db28 <tcp_process+0x5a0>)
 800da46:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800da48:	8812      	ldrh	r2, [r2, #0]
 800da4a:	b292      	uxth	r2, r2
 800da4c:	9202      	str	r2, [sp, #8]
 800da4e:	9301      	str	r3, [sp, #4]
 800da50:	4b36      	ldr	r3, [pc, #216]	@ (800db2c <tcp_process+0x5a4>)
 800da52:	9300      	str	r3, [sp, #0]
 800da54:	4b36      	ldr	r3, [pc, #216]	@ (800db30 <tcp_process+0x5a8>)
 800da56:	4602      	mov	r2, r0
 800da58:	6878      	ldr	r0, [r7, #4]
 800da5a:	f002 fbcf 	bl	80101fc <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800da5e:	e167      	b.n	800dd30 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800da60:	4b2d      	ldr	r3, [pc, #180]	@ (800db18 <tcp_process+0x590>)
 800da62:	781b      	ldrb	r3, [r3, #0]
 800da64:	f003 0302 	and.w	r3, r3, #2
 800da68:	2b00      	cmp	r3, #0
 800da6a:	f000 8161 	beq.w	800dd30 <tcp_process+0x7a8>
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da72:	1e5a      	subs	r2, r3, #1
 800da74:	4b2b      	ldr	r3, [pc, #172]	@ (800db24 <tcp_process+0x59c>)
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	429a      	cmp	r2, r3
 800da7a:	f040 8159 	bne.w	800dd30 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800da7e:	6878      	ldr	r0, [r7, #4]
 800da80:	f002 f9b6 	bl	800fdf0 <tcp_rexmit>
      break;
 800da84:	e154      	b.n	800dd30 <tcp_process+0x7a8>
 800da86:	e153      	b.n	800dd30 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800da88:	6878      	ldr	r0, [r7, #4]
 800da8a:	f000 fa71 	bl	800df70 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800da8e:	4b2d      	ldr	r3, [pc, #180]	@ (800db44 <tcp_process+0x5bc>)
 800da90:	781b      	ldrb	r3, [r3, #0]
 800da92:	f003 0320 	and.w	r3, r3, #32
 800da96:	2b00      	cmp	r3, #0
 800da98:	f000 814c 	beq.w	800dd34 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	8b5b      	ldrh	r3, [r3, #26]
 800daa0:	f043 0302 	orr.w	r3, r3, #2
 800daa4:	b29a      	uxth	r2, r3
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	2207      	movs	r2, #7
 800daae:	751a      	strb	r2, [r3, #20]
      }
      break;
 800dab0:	e140      	b.n	800dd34 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800dab2:	6878      	ldr	r0, [r7, #4]
 800dab4:	f000 fa5c 	bl	800df70 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800dab8:	4b22      	ldr	r3, [pc, #136]	@ (800db44 <tcp_process+0x5bc>)
 800daba:	781b      	ldrb	r3, [r3, #0]
 800dabc:	f003 0320 	and.w	r3, r3, #32
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d071      	beq.n	800dba8 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800dac4:	4b14      	ldr	r3, [pc, #80]	@ (800db18 <tcp_process+0x590>)
 800dac6:	781b      	ldrb	r3, [r3, #0]
 800dac8:	f003 0310 	and.w	r3, r3, #16
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d060      	beq.n	800db92 <tcp_process+0x60a>
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dad4:	4b11      	ldr	r3, [pc, #68]	@ (800db1c <tcp_process+0x594>)
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	429a      	cmp	r2, r3
 800dada:	d15a      	bne.n	800db92 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d156      	bne.n	800db92 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	8b5b      	ldrh	r3, [r3, #26]
 800dae8:	f043 0302 	orr.w	r3, r3, #2
 800daec:	b29a      	uxth	r2, r3
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800daf2:	6878      	ldr	r0, [r7, #4]
 800daf4:	f7fe fdba 	bl	800c66c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800daf8:	4b13      	ldr	r3, [pc, #76]	@ (800db48 <tcp_process+0x5c0>)
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	687a      	ldr	r2, [r7, #4]
 800dafe:	429a      	cmp	r2, r3
 800db00:	d105      	bne.n	800db0e <tcp_process+0x586>
 800db02:	4b11      	ldr	r3, [pc, #68]	@ (800db48 <tcp_process+0x5c0>)
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	68db      	ldr	r3, [r3, #12]
 800db08:	4a0f      	ldr	r2, [pc, #60]	@ (800db48 <tcp_process+0x5c0>)
 800db0a:	6013      	str	r3, [r2, #0]
 800db0c:	e02e      	b.n	800db6c <tcp_process+0x5e4>
 800db0e:	4b0e      	ldr	r3, [pc, #56]	@ (800db48 <tcp_process+0x5c0>)
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	617b      	str	r3, [r7, #20]
 800db14:	e027      	b.n	800db66 <tcp_process+0x5de>
 800db16:	bf00      	nop
 800db18:	24010590 	.word	0x24010590
 800db1c:	24010588 	.word	0x24010588
 800db20:	2401058e 	.word	0x2401058e
 800db24:	24010584 	.word	0x24010584
 800db28:	24010574 	.word	0x24010574
 800db2c:	24009a9c 	.word	0x24009a9c
 800db30:	24009aa0 	.word	0x24009aa0
 800db34:	08015858 	.word	0x08015858
 800db38:	08015af8 	.word	0x08015af8
 800db3c:	080158a4 	.word	0x080158a4
 800db40:	2401058c 	.word	0x2401058c
 800db44:	24010591 	.word	0x24010591
 800db48:	24010558 	.word	0x24010558
 800db4c:	697b      	ldr	r3, [r7, #20]
 800db4e:	68db      	ldr	r3, [r3, #12]
 800db50:	687a      	ldr	r2, [r7, #4]
 800db52:	429a      	cmp	r2, r3
 800db54:	d104      	bne.n	800db60 <tcp_process+0x5d8>
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	68da      	ldr	r2, [r3, #12]
 800db5a:	697b      	ldr	r3, [r7, #20]
 800db5c:	60da      	str	r2, [r3, #12]
 800db5e:	e005      	b.n	800db6c <tcp_process+0x5e4>
 800db60:	697b      	ldr	r3, [r7, #20]
 800db62:	68db      	ldr	r3, [r3, #12]
 800db64:	617b      	str	r3, [r7, #20]
 800db66:	697b      	ldr	r3, [r7, #20]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d1ef      	bne.n	800db4c <tcp_process+0x5c4>
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2200      	movs	r2, #0
 800db70:	60da      	str	r2, [r3, #12]
 800db72:	4b77      	ldr	r3, [pc, #476]	@ (800dd50 <tcp_process+0x7c8>)
 800db74:	2201      	movs	r2, #1
 800db76:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	220a      	movs	r2, #10
 800db7c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800db7e:	4b75      	ldr	r3, [pc, #468]	@ (800dd54 <tcp_process+0x7cc>)
 800db80:	681a      	ldr	r2, [r3, #0]
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	60da      	str	r2, [r3, #12]
 800db86:	4a73      	ldr	r2, [pc, #460]	@ (800dd54 <tcp_process+0x7cc>)
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	6013      	str	r3, [r2, #0]
 800db8c:	f002 fcf8 	bl	8010580 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800db90:	e0d2      	b.n	800dd38 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	8b5b      	ldrh	r3, [r3, #26]
 800db96:	f043 0302 	orr.w	r3, r3, #2
 800db9a:	b29a      	uxth	r2, r3
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	2208      	movs	r2, #8
 800dba4:	751a      	strb	r2, [r3, #20]
      break;
 800dba6:	e0c7      	b.n	800dd38 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800dba8:	4b6b      	ldr	r3, [pc, #428]	@ (800dd58 <tcp_process+0x7d0>)
 800dbaa:	781b      	ldrb	r3, [r3, #0]
 800dbac:	f003 0310 	and.w	r3, r3, #16
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	f000 80c1 	beq.w	800dd38 <tcp_process+0x7b0>
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dbba:	4b68      	ldr	r3, [pc, #416]	@ (800dd5c <tcp_process+0x7d4>)
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	429a      	cmp	r2, r3
 800dbc0:	f040 80ba 	bne.w	800dd38 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	f040 80b5 	bne.w	800dd38 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	2206      	movs	r2, #6
 800dbd2:	751a      	strb	r2, [r3, #20]
      break;
 800dbd4:	e0b0      	b.n	800dd38 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800dbd6:	6878      	ldr	r0, [r7, #4]
 800dbd8:	f000 f9ca 	bl	800df70 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800dbdc:	4b60      	ldr	r3, [pc, #384]	@ (800dd60 <tcp_process+0x7d8>)
 800dbde:	781b      	ldrb	r3, [r3, #0]
 800dbe0:	f003 0320 	and.w	r3, r3, #32
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	f000 80a9 	beq.w	800dd3c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	8b5b      	ldrh	r3, [r3, #26]
 800dbee:	f043 0302 	orr.w	r3, r3, #2
 800dbf2:	b29a      	uxth	r2, r3
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800dbf8:	6878      	ldr	r0, [r7, #4]
 800dbfa:	f7fe fd37 	bl	800c66c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800dbfe:	4b59      	ldr	r3, [pc, #356]	@ (800dd64 <tcp_process+0x7dc>)
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	687a      	ldr	r2, [r7, #4]
 800dc04:	429a      	cmp	r2, r3
 800dc06:	d105      	bne.n	800dc14 <tcp_process+0x68c>
 800dc08:	4b56      	ldr	r3, [pc, #344]	@ (800dd64 <tcp_process+0x7dc>)
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	68db      	ldr	r3, [r3, #12]
 800dc0e:	4a55      	ldr	r2, [pc, #340]	@ (800dd64 <tcp_process+0x7dc>)
 800dc10:	6013      	str	r3, [r2, #0]
 800dc12:	e013      	b.n	800dc3c <tcp_process+0x6b4>
 800dc14:	4b53      	ldr	r3, [pc, #332]	@ (800dd64 <tcp_process+0x7dc>)
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	613b      	str	r3, [r7, #16]
 800dc1a:	e00c      	b.n	800dc36 <tcp_process+0x6ae>
 800dc1c:	693b      	ldr	r3, [r7, #16]
 800dc1e:	68db      	ldr	r3, [r3, #12]
 800dc20:	687a      	ldr	r2, [r7, #4]
 800dc22:	429a      	cmp	r2, r3
 800dc24:	d104      	bne.n	800dc30 <tcp_process+0x6a8>
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	68da      	ldr	r2, [r3, #12]
 800dc2a:	693b      	ldr	r3, [r7, #16]
 800dc2c:	60da      	str	r2, [r3, #12]
 800dc2e:	e005      	b.n	800dc3c <tcp_process+0x6b4>
 800dc30:	693b      	ldr	r3, [r7, #16]
 800dc32:	68db      	ldr	r3, [r3, #12]
 800dc34:	613b      	str	r3, [r7, #16]
 800dc36:	693b      	ldr	r3, [r7, #16]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d1ef      	bne.n	800dc1c <tcp_process+0x694>
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	2200      	movs	r2, #0
 800dc40:	60da      	str	r2, [r3, #12]
 800dc42:	4b43      	ldr	r3, [pc, #268]	@ (800dd50 <tcp_process+0x7c8>)
 800dc44:	2201      	movs	r2, #1
 800dc46:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	220a      	movs	r2, #10
 800dc4c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800dc4e:	4b41      	ldr	r3, [pc, #260]	@ (800dd54 <tcp_process+0x7cc>)
 800dc50:	681a      	ldr	r2, [r3, #0]
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	60da      	str	r2, [r3, #12]
 800dc56:	4a3f      	ldr	r2, [pc, #252]	@ (800dd54 <tcp_process+0x7cc>)
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	6013      	str	r3, [r2, #0]
 800dc5c:	f002 fc90 	bl	8010580 <tcp_timer_needed>
      }
      break;
 800dc60:	e06c      	b.n	800dd3c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800dc62:	6878      	ldr	r0, [r7, #4]
 800dc64:	f000 f984 	bl	800df70 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800dc68:	4b3b      	ldr	r3, [pc, #236]	@ (800dd58 <tcp_process+0x7d0>)
 800dc6a:	781b      	ldrb	r3, [r3, #0]
 800dc6c:	f003 0310 	and.w	r3, r3, #16
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d065      	beq.n	800dd40 <tcp_process+0x7b8>
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dc78:	4b38      	ldr	r3, [pc, #224]	@ (800dd5c <tcp_process+0x7d4>)
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	429a      	cmp	r2, r3
 800dc7e:	d15f      	bne.n	800dd40 <tcp_process+0x7b8>
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d15b      	bne.n	800dd40 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800dc88:	6878      	ldr	r0, [r7, #4]
 800dc8a:	f7fe fcef 	bl	800c66c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800dc8e:	4b35      	ldr	r3, [pc, #212]	@ (800dd64 <tcp_process+0x7dc>)
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	687a      	ldr	r2, [r7, #4]
 800dc94:	429a      	cmp	r2, r3
 800dc96:	d105      	bne.n	800dca4 <tcp_process+0x71c>
 800dc98:	4b32      	ldr	r3, [pc, #200]	@ (800dd64 <tcp_process+0x7dc>)
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	68db      	ldr	r3, [r3, #12]
 800dc9e:	4a31      	ldr	r2, [pc, #196]	@ (800dd64 <tcp_process+0x7dc>)
 800dca0:	6013      	str	r3, [r2, #0]
 800dca2:	e013      	b.n	800dccc <tcp_process+0x744>
 800dca4:	4b2f      	ldr	r3, [pc, #188]	@ (800dd64 <tcp_process+0x7dc>)
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	60fb      	str	r3, [r7, #12]
 800dcaa:	e00c      	b.n	800dcc6 <tcp_process+0x73e>
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	68db      	ldr	r3, [r3, #12]
 800dcb0:	687a      	ldr	r2, [r7, #4]
 800dcb2:	429a      	cmp	r2, r3
 800dcb4:	d104      	bne.n	800dcc0 <tcp_process+0x738>
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	68da      	ldr	r2, [r3, #12]
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	60da      	str	r2, [r3, #12]
 800dcbe:	e005      	b.n	800dccc <tcp_process+0x744>
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	68db      	ldr	r3, [r3, #12]
 800dcc4:	60fb      	str	r3, [r7, #12]
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d1ef      	bne.n	800dcac <tcp_process+0x724>
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	2200      	movs	r2, #0
 800dcd0:	60da      	str	r2, [r3, #12]
 800dcd2:	4b1f      	ldr	r3, [pc, #124]	@ (800dd50 <tcp_process+0x7c8>)
 800dcd4:	2201      	movs	r2, #1
 800dcd6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	220a      	movs	r2, #10
 800dcdc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800dcde:	4b1d      	ldr	r3, [pc, #116]	@ (800dd54 <tcp_process+0x7cc>)
 800dce0:	681a      	ldr	r2, [r3, #0]
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	60da      	str	r2, [r3, #12]
 800dce6:	4a1b      	ldr	r2, [pc, #108]	@ (800dd54 <tcp_process+0x7cc>)
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	6013      	str	r3, [r2, #0]
 800dcec:	f002 fc48 	bl	8010580 <tcp_timer_needed>
      }
      break;
 800dcf0:	e026      	b.n	800dd40 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800dcf2:	6878      	ldr	r0, [r7, #4]
 800dcf4:	f000 f93c 	bl	800df70 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800dcf8:	4b17      	ldr	r3, [pc, #92]	@ (800dd58 <tcp_process+0x7d0>)
 800dcfa:	781b      	ldrb	r3, [r3, #0]
 800dcfc:	f003 0310 	and.w	r3, r3, #16
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d01f      	beq.n	800dd44 <tcp_process+0x7bc>
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dd08:	4b14      	ldr	r3, [pc, #80]	@ (800dd5c <tcp_process+0x7d4>)
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	429a      	cmp	r2, r3
 800dd0e:	d119      	bne.n	800dd44 <tcp_process+0x7bc>
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d115      	bne.n	800dd44 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800dd18:	4b11      	ldr	r3, [pc, #68]	@ (800dd60 <tcp_process+0x7d8>)
 800dd1a:	781b      	ldrb	r3, [r3, #0]
 800dd1c:	f043 0310 	orr.w	r3, r3, #16
 800dd20:	b2da      	uxtb	r2, r3
 800dd22:	4b0f      	ldr	r3, [pc, #60]	@ (800dd60 <tcp_process+0x7d8>)
 800dd24:	701a      	strb	r2, [r3, #0]
      }
      break;
 800dd26:	e00d      	b.n	800dd44 <tcp_process+0x7bc>
    default:
      break;
 800dd28:	bf00      	nop
 800dd2a:	e00c      	b.n	800dd46 <tcp_process+0x7be>
      break;
 800dd2c:	bf00      	nop
 800dd2e:	e00a      	b.n	800dd46 <tcp_process+0x7be>
      break;
 800dd30:	bf00      	nop
 800dd32:	e008      	b.n	800dd46 <tcp_process+0x7be>
      break;
 800dd34:	bf00      	nop
 800dd36:	e006      	b.n	800dd46 <tcp_process+0x7be>
      break;
 800dd38:	bf00      	nop
 800dd3a:	e004      	b.n	800dd46 <tcp_process+0x7be>
      break;
 800dd3c:	bf00      	nop
 800dd3e:	e002      	b.n	800dd46 <tcp_process+0x7be>
      break;
 800dd40:	bf00      	nop
 800dd42:	e000      	b.n	800dd46 <tcp_process+0x7be>
      break;
 800dd44:	bf00      	nop
  }
  return ERR_OK;
 800dd46:	2300      	movs	r3, #0
}
 800dd48:	4618      	mov	r0, r3
 800dd4a:	3724      	adds	r7, #36	@ 0x24
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	bd90      	pop	{r4, r7, pc}
 800dd50:	24010560 	.word	0x24010560
 800dd54:	2401055c 	.word	0x2401055c
 800dd58:	24010590 	.word	0x24010590
 800dd5c:	24010588 	.word	0x24010588
 800dd60:	24010591 	.word	0x24010591
 800dd64:	24010558 	.word	0x24010558

0800dd68 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800dd68:	b590      	push	{r4, r7, lr}
 800dd6a:	b085      	sub	sp, #20
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
 800dd70:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d106      	bne.n	800dd86 <tcp_oos_insert_segment+0x1e>
 800dd78:	4b3b      	ldr	r3, [pc, #236]	@ (800de68 <tcp_oos_insert_segment+0x100>)
 800dd7a:	f240 421f 	movw	r2, #1055	@ 0x41f
 800dd7e:	493b      	ldr	r1, [pc, #236]	@ (800de6c <tcp_oos_insert_segment+0x104>)
 800dd80:	483b      	ldr	r0, [pc, #236]	@ (800de70 <tcp_oos_insert_segment+0x108>)
 800dd82:	f005 fc25 	bl	80135d0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	68db      	ldr	r3, [r3, #12]
 800dd8a:	899b      	ldrh	r3, [r3, #12]
 800dd8c:	b29b      	uxth	r3, r3
 800dd8e:	4618      	mov	r0, r3
 800dd90:	f7fb fb28 	bl	80093e4 <lwip_htons>
 800dd94:	4603      	mov	r3, r0
 800dd96:	b2db      	uxtb	r3, r3
 800dd98:	f003 0301 	and.w	r3, r3, #1
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d028      	beq.n	800ddf2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800dda0:	6838      	ldr	r0, [r7, #0]
 800dda2:	f7fe fa5f 	bl	800c264 <tcp_segs_free>
    next = NULL;
 800dda6:	2300      	movs	r3, #0
 800dda8:	603b      	str	r3, [r7, #0]
 800ddaa:	e056      	b.n	800de5a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ddac:	683b      	ldr	r3, [r7, #0]
 800ddae:	68db      	ldr	r3, [r3, #12]
 800ddb0:	899b      	ldrh	r3, [r3, #12]
 800ddb2:	b29b      	uxth	r3, r3
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	f7fb fb15 	bl	80093e4 <lwip_htons>
 800ddba:	4603      	mov	r3, r0
 800ddbc:	b2db      	uxtb	r3, r3
 800ddbe:	f003 0301 	and.w	r3, r3, #1
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d00d      	beq.n	800dde2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	68db      	ldr	r3, [r3, #12]
 800ddca:	899b      	ldrh	r3, [r3, #12]
 800ddcc:	b29c      	uxth	r4, r3
 800ddce:	2001      	movs	r0, #1
 800ddd0:	f7fb fb08 	bl	80093e4 <lwip_htons>
 800ddd4:	4603      	mov	r3, r0
 800ddd6:	461a      	mov	r2, r3
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	68db      	ldr	r3, [r3, #12]
 800dddc:	4322      	orrs	r2, r4
 800ddde:	b292      	uxth	r2, r2
 800dde0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800dde2:	683b      	ldr	r3, [r7, #0]
 800dde4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800dde6:	683b      	ldr	r3, [r7, #0]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800ddec:	68f8      	ldr	r0, [r7, #12]
 800ddee:	f7fe fa4e 	bl	800c28e <tcp_seg_free>
    while (next &&
 800ddf2:	683b      	ldr	r3, [r7, #0]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d00e      	beq.n	800de16 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	891b      	ldrh	r3, [r3, #8]
 800ddfc:	461a      	mov	r2, r3
 800ddfe:	4b1d      	ldr	r3, [pc, #116]	@ (800de74 <tcp_oos_insert_segment+0x10c>)
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	441a      	add	r2, r3
 800de04:	683b      	ldr	r3, [r7, #0]
 800de06:	68db      	ldr	r3, [r3, #12]
 800de08:	685b      	ldr	r3, [r3, #4]
 800de0a:	6839      	ldr	r1, [r7, #0]
 800de0c:	8909      	ldrh	r1, [r1, #8]
 800de0e:	440b      	add	r3, r1
 800de10:	1ad3      	subs	r3, r2, r3
    while (next &&
 800de12:	2b00      	cmp	r3, #0
 800de14:	daca      	bge.n	800ddac <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800de16:	683b      	ldr	r3, [r7, #0]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d01e      	beq.n	800de5a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	891b      	ldrh	r3, [r3, #8]
 800de20:	461a      	mov	r2, r3
 800de22:	4b14      	ldr	r3, [pc, #80]	@ (800de74 <tcp_oos_insert_segment+0x10c>)
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	441a      	add	r2, r3
 800de28:	683b      	ldr	r3, [r7, #0]
 800de2a:	68db      	ldr	r3, [r3, #12]
 800de2c:	685b      	ldr	r3, [r3, #4]
 800de2e:	1ad3      	subs	r3, r2, r3
    if (next &&
 800de30:	2b00      	cmp	r3, #0
 800de32:	dd12      	ble.n	800de5a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800de34:	683b      	ldr	r3, [r7, #0]
 800de36:	68db      	ldr	r3, [r3, #12]
 800de38:	685b      	ldr	r3, [r3, #4]
 800de3a:	b29a      	uxth	r2, r3
 800de3c:	4b0d      	ldr	r3, [pc, #52]	@ (800de74 <tcp_oos_insert_segment+0x10c>)
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	b29b      	uxth	r3, r3
 800de42:	1ad3      	subs	r3, r2, r3
 800de44:	b29a      	uxth	r2, r3
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	685a      	ldr	r2, [r3, #4]
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	891b      	ldrh	r3, [r3, #8]
 800de52:	4619      	mov	r1, r3
 800de54:	4610      	mov	r0, r2
 800de56:	f7fc fe09 	bl	800aa6c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	683a      	ldr	r2, [r7, #0]
 800de5e:	601a      	str	r2, [r3, #0]
}
 800de60:	bf00      	nop
 800de62:	3714      	adds	r7, #20
 800de64:	46bd      	mov	sp, r7
 800de66:	bd90      	pop	{r4, r7, pc}
 800de68:	08015858 	.word	0x08015858
 800de6c:	08015b18 	.word	0x08015b18
 800de70:	080158a4 	.word	0x080158a4
 800de74:	24010584 	.word	0x24010584

0800de78 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800de78:	b5b0      	push	{r4, r5, r7, lr}
 800de7a:	b086      	sub	sp, #24
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	60f8      	str	r0, [r7, #12]
 800de80:	60b9      	str	r1, [r7, #8]
 800de82:	607a      	str	r2, [r7, #4]
 800de84:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800de86:	e03e      	b.n	800df06 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800de88:	68bb      	ldr	r3, [r7, #8]
 800de8a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800de8c:	68bb      	ldr	r3, [r7, #8]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800de92:	697b      	ldr	r3, [r7, #20]
 800de94:	685b      	ldr	r3, [r3, #4]
 800de96:	4618      	mov	r0, r3
 800de98:	f7fc fffc 	bl	800ae94 <pbuf_clen>
 800de9c:	4603      	mov	r3, r0
 800de9e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800dea6:	8a7a      	ldrh	r2, [r7, #18]
 800dea8:	429a      	cmp	r2, r3
 800deaa:	d906      	bls.n	800deba <tcp_free_acked_segments+0x42>
 800deac:	4b2a      	ldr	r3, [pc, #168]	@ (800df58 <tcp_free_acked_segments+0xe0>)
 800deae:	f240 4257 	movw	r2, #1111	@ 0x457
 800deb2:	492a      	ldr	r1, [pc, #168]	@ (800df5c <tcp_free_acked_segments+0xe4>)
 800deb4:	482a      	ldr	r0, [pc, #168]	@ (800df60 <tcp_free_acked_segments+0xe8>)
 800deb6:	f005 fb8b 	bl	80135d0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800dec0:	8a7b      	ldrh	r3, [r7, #18]
 800dec2:	1ad3      	subs	r3, r2, r3
 800dec4:	b29a      	uxth	r2, r3
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800decc:	697b      	ldr	r3, [r7, #20]
 800dece:	891a      	ldrh	r2, [r3, #8]
 800ded0:	4b24      	ldr	r3, [pc, #144]	@ (800df64 <tcp_free_acked_segments+0xec>)
 800ded2:	881b      	ldrh	r3, [r3, #0]
 800ded4:	4413      	add	r3, r2
 800ded6:	b29a      	uxth	r2, r3
 800ded8:	4b22      	ldr	r3, [pc, #136]	@ (800df64 <tcp_free_acked_segments+0xec>)
 800deda:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800dedc:	6978      	ldr	r0, [r7, #20]
 800dede:	f7fe f9d6 	bl	800c28e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d00c      	beq.n	800df06 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800deec:	68bb      	ldr	r3, [r7, #8]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d109      	bne.n	800df06 <tcp_free_acked_segments+0x8e>
 800def2:	683b      	ldr	r3, [r7, #0]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d106      	bne.n	800df06 <tcp_free_acked_segments+0x8e>
 800def8:	4b17      	ldr	r3, [pc, #92]	@ (800df58 <tcp_free_acked_segments+0xe0>)
 800defa:	f240 4261 	movw	r2, #1121	@ 0x461
 800defe:	491a      	ldr	r1, [pc, #104]	@ (800df68 <tcp_free_acked_segments+0xf0>)
 800df00:	4817      	ldr	r0, [pc, #92]	@ (800df60 <tcp_free_acked_segments+0xe8>)
 800df02:	f005 fb65 	bl	80135d0 <iprintf>
  while (seg_list != NULL &&
 800df06:	68bb      	ldr	r3, [r7, #8]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d020      	beq.n	800df4e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800df0c:	68bb      	ldr	r3, [r7, #8]
 800df0e:	68db      	ldr	r3, [r3, #12]
 800df10:	685b      	ldr	r3, [r3, #4]
 800df12:	4618      	mov	r0, r3
 800df14:	f7fb fa7b 	bl	800940e <lwip_htonl>
 800df18:	4604      	mov	r4, r0
 800df1a:	68bb      	ldr	r3, [r7, #8]
 800df1c:	891b      	ldrh	r3, [r3, #8]
 800df1e:	461d      	mov	r5, r3
 800df20:	68bb      	ldr	r3, [r7, #8]
 800df22:	68db      	ldr	r3, [r3, #12]
 800df24:	899b      	ldrh	r3, [r3, #12]
 800df26:	b29b      	uxth	r3, r3
 800df28:	4618      	mov	r0, r3
 800df2a:	f7fb fa5b 	bl	80093e4 <lwip_htons>
 800df2e:	4603      	mov	r3, r0
 800df30:	b2db      	uxtb	r3, r3
 800df32:	f003 0303 	and.w	r3, r3, #3
 800df36:	2b00      	cmp	r3, #0
 800df38:	d001      	beq.n	800df3e <tcp_free_acked_segments+0xc6>
 800df3a:	2301      	movs	r3, #1
 800df3c:	e000      	b.n	800df40 <tcp_free_acked_segments+0xc8>
 800df3e:	2300      	movs	r3, #0
 800df40:	442b      	add	r3, r5
 800df42:	18e2      	adds	r2, r4, r3
 800df44:	4b09      	ldr	r3, [pc, #36]	@ (800df6c <tcp_free_acked_segments+0xf4>)
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	dd9c      	ble.n	800de88 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800df4e:	68bb      	ldr	r3, [r7, #8]
}
 800df50:	4618      	mov	r0, r3
 800df52:	3718      	adds	r7, #24
 800df54:	46bd      	mov	sp, r7
 800df56:	bdb0      	pop	{r4, r5, r7, pc}
 800df58:	08015858 	.word	0x08015858
 800df5c:	08015b40 	.word	0x08015b40
 800df60:	080158a4 	.word	0x080158a4
 800df64:	2401058c 	.word	0x2401058c
 800df68:	08015b68 	.word	0x08015b68
 800df6c:	24010588 	.word	0x24010588

0800df70 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800df70:	b5b0      	push	{r4, r5, r7, lr}
 800df72:	b094      	sub	sp, #80	@ 0x50
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800df78:	2300      	movs	r3, #0
 800df7a:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d106      	bne.n	800df90 <tcp_receive+0x20>
 800df82:	4b91      	ldr	r3, [pc, #580]	@ (800e1c8 <tcp_receive+0x258>)
 800df84:	f240 427b 	movw	r2, #1147	@ 0x47b
 800df88:	4990      	ldr	r1, [pc, #576]	@ (800e1cc <tcp_receive+0x25c>)
 800df8a:	4891      	ldr	r0, [pc, #580]	@ (800e1d0 <tcp_receive+0x260>)
 800df8c:	f005 fb20 	bl	80135d0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	7d1b      	ldrb	r3, [r3, #20]
 800df94:	2b03      	cmp	r3, #3
 800df96:	d806      	bhi.n	800dfa6 <tcp_receive+0x36>
 800df98:	4b8b      	ldr	r3, [pc, #556]	@ (800e1c8 <tcp_receive+0x258>)
 800df9a:	f240 427c 	movw	r2, #1148	@ 0x47c
 800df9e:	498d      	ldr	r1, [pc, #564]	@ (800e1d4 <tcp_receive+0x264>)
 800dfa0:	488b      	ldr	r0, [pc, #556]	@ (800e1d0 <tcp_receive+0x260>)
 800dfa2:	f005 fb15 	bl	80135d0 <iprintf>

  if (flags & TCP_ACK) {
 800dfa6:	4b8c      	ldr	r3, [pc, #560]	@ (800e1d8 <tcp_receive+0x268>)
 800dfa8:	781b      	ldrb	r3, [r3, #0]
 800dfaa:	f003 0310 	and.w	r3, r3, #16
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	f000 8264 	beq.w	800e47c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800dfba:	461a      	mov	r2, r3
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dfc0:	4413      	add	r3, r2
 800dfc2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dfc8:	4b84      	ldr	r3, [pc, #528]	@ (800e1dc <tcp_receive+0x26c>)
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	1ad3      	subs	r3, r2, r3
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	db1b      	blt.n	800e00a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dfd6:	4b81      	ldr	r3, [pc, #516]	@ (800e1dc <tcp_receive+0x26c>)
 800dfd8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800dfda:	429a      	cmp	r2, r3
 800dfdc:	d106      	bne.n	800dfec <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800dfe2:	4b7f      	ldr	r3, [pc, #508]	@ (800e1e0 <tcp_receive+0x270>)
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	1ad3      	subs	r3, r2, r3
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	db0e      	blt.n	800e00a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800dff0:	4b7b      	ldr	r3, [pc, #492]	@ (800e1e0 <tcp_receive+0x270>)
 800dff2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800dff4:	429a      	cmp	r2, r3
 800dff6:	d125      	bne.n	800e044 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800dff8:	4b7a      	ldr	r3, [pc, #488]	@ (800e1e4 <tcp_receive+0x274>)
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	89db      	ldrh	r3, [r3, #14]
 800dffe:	b29a      	uxth	r2, r3
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e006:	429a      	cmp	r2, r3
 800e008:	d91c      	bls.n	800e044 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800e00a:	4b76      	ldr	r3, [pc, #472]	@ (800e1e4 <tcp_receive+0x274>)
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	89db      	ldrh	r3, [r3, #14]
 800e010:	b29a      	uxth	r2, r3
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e024:	429a      	cmp	r2, r3
 800e026:	d205      	bcs.n	800e034 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800e034:	4b69      	ldr	r3, [pc, #420]	@ (800e1dc <tcp_receive+0x26c>)
 800e036:	681a      	ldr	r2, [r3, #0]
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800e03c:	4b68      	ldr	r3, [pc, #416]	@ (800e1e0 <tcp_receive+0x270>)
 800e03e:	681a      	ldr	r2, [r3, #0]
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800e044:	4b66      	ldr	r3, [pc, #408]	@ (800e1e0 <tcp_receive+0x270>)
 800e046:	681a      	ldr	r2, [r3, #0]
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e04c:	1ad3      	subs	r3, r2, r3
 800e04e:	2b00      	cmp	r3, #0
 800e050:	dc58      	bgt.n	800e104 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800e052:	4b65      	ldr	r3, [pc, #404]	@ (800e1e8 <tcp_receive+0x278>)
 800e054:	881b      	ldrh	r3, [r3, #0]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d14b      	bne.n	800e0f2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e05e:	687a      	ldr	r2, [r7, #4]
 800e060:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800e064:	4413      	add	r3, r2
 800e066:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e068:	429a      	cmp	r2, r3
 800e06a:	d142      	bne.n	800e0f2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800e072:	2b00      	cmp	r3, #0
 800e074:	db3d      	blt.n	800e0f2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e07a:	4b59      	ldr	r3, [pc, #356]	@ (800e1e0 <tcp_receive+0x270>)
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	429a      	cmp	r2, r3
 800e080:	d137      	bne.n	800e0f2 <tcp_receive+0x182>
              found_dupack = 1;
 800e082:	2301      	movs	r3, #1
 800e084:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800e08c:	2bff      	cmp	r3, #255	@ 0xff
 800e08e:	d007      	beq.n	800e0a0 <tcp_receive+0x130>
                ++pcb->dupacks;
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800e096:	3301      	adds	r3, #1
 800e098:	b2da      	uxtb	r2, r3
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800e0a6:	2b03      	cmp	r3, #3
 800e0a8:	d91b      	bls.n	800e0e2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e0b4:	4413      	add	r3, r2
 800e0b6:	b29a      	uxth	r2, r3
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800e0be:	429a      	cmp	r2, r3
 800e0c0:	d30a      	bcc.n	800e0d8 <tcp_receive+0x168>
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e0cc:	4413      	add	r3, r2
 800e0ce:	b29a      	uxth	r2, r3
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800e0d6:	e004      	b.n	800e0e2 <tcp_receive+0x172>
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e0de:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800e0e8:	2b02      	cmp	r3, #2
 800e0ea:	d902      	bls.n	800e0f2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800e0ec:	6878      	ldr	r0, [r7, #4]
 800e0ee:	f001 feeb 	bl	800fec8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800e0f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	f040 8161 	bne.w	800e3bc <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e102:	e15b      	b.n	800e3bc <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e104:	4b36      	ldr	r3, [pc, #216]	@ (800e1e0 <tcp_receive+0x270>)
 800e106:	681a      	ldr	r2, [r3, #0]
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e10c:	1ad3      	subs	r3, r2, r3
 800e10e:	3b01      	subs	r3, #1
 800e110:	2b00      	cmp	r3, #0
 800e112:	f2c0 814e 	blt.w	800e3b2 <tcp_receive+0x442>
 800e116:	4b32      	ldr	r3, [pc, #200]	@ (800e1e0 <tcp_receive+0x270>)
 800e118:	681a      	ldr	r2, [r3, #0]
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e11e:	1ad3      	subs	r3, r2, r3
 800e120:	2b00      	cmp	r3, #0
 800e122:	f300 8146 	bgt.w	800e3b2 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	8b5b      	ldrh	r3, [r3, #26]
 800e12a:	f003 0304 	and.w	r3, r3, #4
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d010      	beq.n	800e154 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	8b5b      	ldrh	r3, [r3, #26]
 800e136:	f023 0304 	bic.w	r3, r3, #4
 800e13a:	b29a      	uxth	r2, r3
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	2200      	movs	r2, #0
 800e150:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	2200      	movs	r2, #0
 800e158:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800e162:	10db      	asrs	r3, r3, #3
 800e164:	b21b      	sxth	r3, r3
 800e166:	b29a      	uxth	r2, r3
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800e16e:	b29b      	uxth	r3, r3
 800e170:	4413      	add	r3, r2
 800e172:	b29b      	uxth	r3, r3
 800e174:	b21a      	sxth	r2, r3
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800e17c:	4b18      	ldr	r3, [pc, #96]	@ (800e1e0 <tcp_receive+0x270>)
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	b29a      	uxth	r2, r3
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e186:	b29b      	uxth	r3, r3
 800e188:	1ad3      	subs	r3, r2, r3
 800e18a:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	2200      	movs	r2, #0
 800e190:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800e194:	4b12      	ldr	r3, [pc, #72]	@ (800e1e0 <tcp_receive+0x270>)
 800e196:	681a      	ldr	r2, [r3, #0]
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	7d1b      	ldrb	r3, [r3, #20]
 800e1a0:	2b03      	cmp	r3, #3
 800e1a2:	f240 8097 	bls.w	800e2d4 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800e1b2:	429a      	cmp	r2, r3
 800e1b4:	d245      	bcs.n	800e242 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	8b5b      	ldrh	r3, [r3, #26]
 800e1ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d014      	beq.n	800e1ec <tcp_receive+0x27c>
 800e1c2:	2301      	movs	r3, #1
 800e1c4:	e013      	b.n	800e1ee <tcp_receive+0x27e>
 800e1c6:	bf00      	nop
 800e1c8:	08015858 	.word	0x08015858
 800e1cc:	08015b88 	.word	0x08015b88
 800e1d0:	080158a4 	.word	0x080158a4
 800e1d4:	08015ba4 	.word	0x08015ba4
 800e1d8:	24010590 	.word	0x24010590
 800e1dc:	24010584 	.word	0x24010584
 800e1e0:	24010588 	.word	0x24010588
 800e1e4:	24010574 	.word	0x24010574
 800e1e8:	2401058e 	.word	0x2401058e
 800e1ec:	2302      	movs	r3, #2
 800e1ee:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800e1f2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800e1f6:	b29a      	uxth	r2, r3
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e1fc:	fb12 f303 	smulbb	r3, r2, r3
 800e200:	b29b      	uxth	r3, r3
 800e202:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e204:	4293      	cmp	r3, r2
 800e206:	bf28      	it	cs
 800e208:	4613      	movcs	r3, r2
 800e20a:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800e212:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e214:	4413      	add	r3, r2
 800e216:	b29a      	uxth	r2, r3
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800e21e:	429a      	cmp	r2, r3
 800e220:	d309      	bcc.n	800e236 <tcp_receive+0x2c6>
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800e228:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e22a:	4413      	add	r3, r2
 800e22c:	b29a      	uxth	r2, r3
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800e234:	e04e      	b.n	800e2d4 <tcp_receive+0x364>
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e23c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800e240:	e048      	b.n	800e2d4 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800e248:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800e24a:	4413      	add	r3, r2
 800e24c:	b29a      	uxth	r2, r3
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e254:	429a      	cmp	r2, r3
 800e256:	d309      	bcc.n	800e26c <tcp_receive+0x2fc>
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800e25e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800e260:	4413      	add	r3, r2
 800e262:	b29a      	uxth	r2, r3
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800e26a:	e004      	b.n	800e276 <tcp_receive+0x306>
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e272:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800e282:	429a      	cmp	r2, r3
 800e284:	d326      	bcc.n	800e2d4 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800e292:	1ad3      	subs	r3, r2, r3
 800e294:	b29a      	uxth	r2, r3
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e2a6:	4413      	add	r3, r2
 800e2a8:	b29a      	uxth	r2, r3
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800e2b0:	429a      	cmp	r2, r3
 800e2b2:	d30a      	bcc.n	800e2ca <tcp_receive+0x35a>
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e2be:	4413      	add	r3, r2
 800e2c0:	b29a      	uxth	r2, r3
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800e2c8:	e004      	b.n	800e2d4 <tcp_receive+0x364>
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e2d0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e2dc:	4a98      	ldr	r2, [pc, #608]	@ (800e540 <tcp_receive+0x5d0>)
 800e2de:	6878      	ldr	r0, [r7, #4]
 800e2e0:	f7ff fdca 	bl	800de78 <tcp_free_acked_segments>
 800e2e4:	4602      	mov	r2, r0
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e2f2:	4a94      	ldr	r2, [pc, #592]	@ (800e544 <tcp_receive+0x5d4>)
 800e2f4:	6878      	ldr	r0, [r7, #4]
 800e2f6:	f7ff fdbf 	bl	800de78 <tcp_free_acked_segments>
 800e2fa:	4602      	mov	r2, r0
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e304:	2b00      	cmp	r3, #0
 800e306:	d104      	bne.n	800e312 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e30e:	861a      	strh	r2, [r3, #48]	@ 0x30
 800e310:	e002      	b.n	800e318 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	2200      	movs	r2, #0
 800e316:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	2200      	movs	r2, #0
 800e31c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e322:	2b00      	cmp	r3, #0
 800e324:	d103      	bne.n	800e32e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	2200      	movs	r2, #0
 800e32a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800e334:	4b84      	ldr	r3, [pc, #528]	@ (800e548 <tcp_receive+0x5d8>)
 800e336:	881b      	ldrh	r3, [r3, #0]
 800e338:	4413      	add	r3, r2
 800e33a:	b29a      	uxth	r2, r3
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	8b5b      	ldrh	r3, [r3, #26]
 800e346:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d035      	beq.n	800e3ba <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e352:	2b00      	cmp	r3, #0
 800e354:	d118      	bne.n	800e388 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d00c      	beq.n	800e378 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e366:	68db      	ldr	r3, [r3, #12]
 800e368:	685b      	ldr	r3, [r3, #4]
 800e36a:	4618      	mov	r0, r3
 800e36c:	f7fb f84f 	bl	800940e <lwip_htonl>
 800e370:	4603      	mov	r3, r0
 800e372:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800e374:	2b00      	cmp	r3, #0
 800e376:	dc20      	bgt.n	800e3ba <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	8b5b      	ldrh	r3, [r3, #26]
 800e37c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e380:	b29a      	uxth	r2, r3
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e386:	e018      	b.n	800e3ba <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e390:	68db      	ldr	r3, [r3, #12]
 800e392:	685b      	ldr	r3, [r3, #4]
 800e394:	4618      	mov	r0, r3
 800e396:	f7fb f83a 	bl	800940e <lwip_htonl>
 800e39a:	4603      	mov	r3, r0
 800e39c:	1ae3      	subs	r3, r4, r3
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	dc0b      	bgt.n	800e3ba <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	8b5b      	ldrh	r3, [r3, #26]
 800e3a6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e3aa:	b29a      	uxth	r2, r3
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e3b0:	e003      	b.n	800e3ba <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800e3b2:	6878      	ldr	r0, [r7, #4]
 800e3b4:	f001 ff74 	bl	80102a0 <tcp_send_empty_ack>
 800e3b8:	e000      	b.n	800e3bc <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e3ba:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d05b      	beq.n	800e47c <tcp_receive+0x50c>
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e3c8:	4b60      	ldr	r3, [pc, #384]	@ (800e54c <tcp_receive+0x5dc>)
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	1ad3      	subs	r3, r2, r3
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	da54      	bge.n	800e47c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800e3d2:	4b5f      	ldr	r3, [pc, #380]	@ (800e550 <tcp_receive+0x5e0>)
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	b29a      	uxth	r2, r3
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e3dc:	b29b      	uxth	r3, r3
 800e3de:	1ad3      	subs	r3, r2, r3
 800e3e0:	b29b      	uxth	r3, r3
 800e3e2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800e3e6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800e3f0:	10db      	asrs	r3, r3, #3
 800e3f2:	b21b      	sxth	r3, r3
 800e3f4:	b29b      	uxth	r3, r3
 800e3f6:	1ad3      	subs	r3, r2, r3
 800e3f8:	b29b      	uxth	r3, r3
 800e3fa:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800e404:	b29a      	uxth	r2, r3
 800e406:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800e40a:	4413      	add	r3, r2
 800e40c:	b29b      	uxth	r3, r3
 800e40e:	b21a      	sxth	r2, r3
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800e414:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800e418:	2b00      	cmp	r3, #0
 800e41a:	da05      	bge.n	800e428 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800e41c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800e420:	425b      	negs	r3, r3
 800e422:	b29b      	uxth	r3, r3
 800e424:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800e428:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800e432:	109b      	asrs	r3, r3, #2
 800e434:	b21b      	sxth	r3, r3
 800e436:	b29b      	uxth	r3, r3
 800e438:	1ad3      	subs	r3, r2, r3
 800e43a:	b29b      	uxth	r3, r3
 800e43c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800e446:	b29a      	uxth	r2, r3
 800e448:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800e44c:	4413      	add	r3, r2
 800e44e:	b29b      	uxth	r3, r3
 800e450:	b21a      	sxth	r2, r3
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800e45c:	10db      	asrs	r3, r3, #3
 800e45e:	b21b      	sxth	r3, r3
 800e460:	b29a      	uxth	r2, r3
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800e468:	b29b      	uxth	r3, r3
 800e46a:	4413      	add	r3, r2
 800e46c:	b29b      	uxth	r3, r3
 800e46e:	b21a      	sxth	r2, r3
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	2200      	movs	r2, #0
 800e47a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800e47c:	4b35      	ldr	r3, [pc, #212]	@ (800e554 <tcp_receive+0x5e4>)
 800e47e:	881b      	ldrh	r3, [r3, #0]
 800e480:	2b00      	cmp	r3, #0
 800e482:	f000 84df 	beq.w	800ee44 <tcp_receive+0xed4>
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	7d1b      	ldrb	r3, [r3, #20]
 800e48a:	2b06      	cmp	r3, #6
 800e48c:	f200 84da 	bhi.w	800ee44 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e494:	4b30      	ldr	r3, [pc, #192]	@ (800e558 <tcp_receive+0x5e8>)
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	1ad3      	subs	r3, r2, r3
 800e49a:	3b01      	subs	r3, #1
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	f2c0 808f 	blt.w	800e5c0 <tcp_receive+0x650>
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e4a6:	4b2b      	ldr	r3, [pc, #172]	@ (800e554 <tcp_receive+0x5e4>)
 800e4a8:	881b      	ldrh	r3, [r3, #0]
 800e4aa:	4619      	mov	r1, r3
 800e4ac:	4b2a      	ldr	r3, [pc, #168]	@ (800e558 <tcp_receive+0x5e8>)
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	440b      	add	r3, r1
 800e4b2:	1ad3      	subs	r3, r2, r3
 800e4b4:	3301      	adds	r3, #1
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	f300 8082 	bgt.w	800e5c0 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800e4bc:	4b27      	ldr	r3, [pc, #156]	@ (800e55c <tcp_receive+0x5ec>)
 800e4be:	685b      	ldr	r3, [r3, #4]
 800e4c0:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e4c6:	4b24      	ldr	r3, [pc, #144]	@ (800e558 <tcp_receive+0x5e8>)
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	1ad3      	subs	r3, r2, r3
 800e4cc:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800e4ce:	4b23      	ldr	r3, [pc, #140]	@ (800e55c <tcp_receive+0x5ec>)
 800e4d0:	685b      	ldr	r3, [r3, #4]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d106      	bne.n	800e4e4 <tcp_receive+0x574>
 800e4d6:	4b22      	ldr	r3, [pc, #136]	@ (800e560 <tcp_receive+0x5f0>)
 800e4d8:	f240 5294 	movw	r2, #1428	@ 0x594
 800e4dc:	4921      	ldr	r1, [pc, #132]	@ (800e564 <tcp_receive+0x5f4>)
 800e4de:	4822      	ldr	r0, [pc, #136]	@ (800e568 <tcp_receive+0x5f8>)
 800e4e0:	f005 f876 	bl	80135d0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800e4e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4e6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800e4ea:	4293      	cmp	r3, r2
 800e4ec:	d906      	bls.n	800e4fc <tcp_receive+0x58c>
 800e4ee:	4b1c      	ldr	r3, [pc, #112]	@ (800e560 <tcp_receive+0x5f0>)
 800e4f0:	f240 5295 	movw	r2, #1429	@ 0x595
 800e4f4:	491d      	ldr	r1, [pc, #116]	@ (800e56c <tcp_receive+0x5fc>)
 800e4f6:	481c      	ldr	r0, [pc, #112]	@ (800e568 <tcp_receive+0x5f8>)
 800e4f8:	f005 f86a 	bl	80135d0 <iprintf>
      off = (u16_t)off32;
 800e4fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4fe:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800e502:	4b16      	ldr	r3, [pc, #88]	@ (800e55c <tcp_receive+0x5ec>)
 800e504:	685b      	ldr	r3, [r3, #4]
 800e506:	891b      	ldrh	r3, [r3, #8]
 800e508:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800e50c:	429a      	cmp	r2, r3
 800e50e:	d906      	bls.n	800e51e <tcp_receive+0x5ae>
 800e510:	4b13      	ldr	r3, [pc, #76]	@ (800e560 <tcp_receive+0x5f0>)
 800e512:	f240 5297 	movw	r2, #1431	@ 0x597
 800e516:	4916      	ldr	r1, [pc, #88]	@ (800e570 <tcp_receive+0x600>)
 800e518:	4813      	ldr	r0, [pc, #76]	@ (800e568 <tcp_receive+0x5f8>)
 800e51a:	f005 f859 	bl	80135d0 <iprintf>
      inseg.len -= off;
 800e51e:	4b0f      	ldr	r3, [pc, #60]	@ (800e55c <tcp_receive+0x5ec>)
 800e520:	891a      	ldrh	r2, [r3, #8]
 800e522:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800e526:	1ad3      	subs	r3, r2, r3
 800e528:	b29a      	uxth	r2, r3
 800e52a:	4b0c      	ldr	r3, [pc, #48]	@ (800e55c <tcp_receive+0x5ec>)
 800e52c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800e52e:	4b0b      	ldr	r3, [pc, #44]	@ (800e55c <tcp_receive+0x5ec>)
 800e530:	685b      	ldr	r3, [r3, #4]
 800e532:	891a      	ldrh	r2, [r3, #8]
 800e534:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800e538:	1ad3      	subs	r3, r2, r3
 800e53a:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800e53c:	e02a      	b.n	800e594 <tcp_receive+0x624>
 800e53e:	bf00      	nop
 800e540:	08015bc0 	.word	0x08015bc0
 800e544:	08015bc8 	.word	0x08015bc8
 800e548:	2401058c 	.word	0x2401058c
 800e54c:	24010588 	.word	0x24010588
 800e550:	2401054c 	.word	0x2401054c
 800e554:	2401058e 	.word	0x2401058e
 800e558:	24010584 	.word	0x24010584
 800e55c:	24010564 	.word	0x24010564
 800e560:	08015858 	.word	0x08015858
 800e564:	08015bd0 	.word	0x08015bd0
 800e568:	080158a4 	.word	0x080158a4
 800e56c:	08015be0 	.word	0x08015be0
 800e570:	08015bf0 	.word	0x08015bf0
        off -= p->len;
 800e574:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e576:	895b      	ldrh	r3, [r3, #10]
 800e578:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800e57c:	1ad3      	subs	r3, r2, r3
 800e57e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800e582:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e584:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800e586:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800e588:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e58a:	2200      	movs	r2, #0
 800e58c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800e58e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800e594:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e596:	895b      	ldrh	r3, [r3, #10]
 800e598:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800e59c:	429a      	cmp	r2, r3
 800e59e:	d8e9      	bhi.n	800e574 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800e5a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800e5a4:	4619      	mov	r1, r3
 800e5a6:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800e5a8:	f7fc fb60 	bl	800ac6c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5b0:	4a90      	ldr	r2, [pc, #576]	@ (800e7f4 <tcp_receive+0x884>)
 800e5b2:	6013      	str	r3, [r2, #0]
 800e5b4:	4b90      	ldr	r3, [pc, #576]	@ (800e7f8 <tcp_receive+0x888>)
 800e5b6:	68db      	ldr	r3, [r3, #12]
 800e5b8:	4a8e      	ldr	r2, [pc, #568]	@ (800e7f4 <tcp_receive+0x884>)
 800e5ba:	6812      	ldr	r2, [r2, #0]
 800e5bc:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800e5be:	e00d      	b.n	800e5dc <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800e5c0:	4b8c      	ldr	r3, [pc, #560]	@ (800e7f4 <tcp_receive+0x884>)
 800e5c2:	681a      	ldr	r2, [r3, #0]
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5c8:	1ad3      	subs	r3, r2, r3
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	da06      	bge.n	800e5dc <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	8b5b      	ldrh	r3, [r3, #26]
 800e5d2:	f043 0302 	orr.w	r3, r3, #2
 800e5d6:	b29a      	uxth	r2, r3
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e5dc:	4b85      	ldr	r3, [pc, #532]	@ (800e7f4 <tcp_receive+0x884>)
 800e5de:	681a      	ldr	r2, [r3, #0]
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5e4:	1ad3      	subs	r3, r2, r3
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	f2c0 8427 	blt.w	800ee3a <tcp_receive+0xeca>
 800e5ec:	4b81      	ldr	r3, [pc, #516]	@ (800e7f4 <tcp_receive+0x884>)
 800e5ee:	681a      	ldr	r2, [r3, #0]
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5f4:	6879      	ldr	r1, [r7, #4]
 800e5f6:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800e5f8:	440b      	add	r3, r1
 800e5fa:	1ad3      	subs	r3, r2, r3
 800e5fc:	3301      	adds	r3, #1
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	f300 841b 	bgt.w	800ee3a <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e608:	4b7a      	ldr	r3, [pc, #488]	@ (800e7f4 <tcp_receive+0x884>)
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	429a      	cmp	r2, r3
 800e60e:	f040 8298 	bne.w	800eb42 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800e612:	4b79      	ldr	r3, [pc, #484]	@ (800e7f8 <tcp_receive+0x888>)
 800e614:	891c      	ldrh	r4, [r3, #8]
 800e616:	4b78      	ldr	r3, [pc, #480]	@ (800e7f8 <tcp_receive+0x888>)
 800e618:	68db      	ldr	r3, [r3, #12]
 800e61a:	899b      	ldrh	r3, [r3, #12]
 800e61c:	b29b      	uxth	r3, r3
 800e61e:	4618      	mov	r0, r3
 800e620:	f7fa fee0 	bl	80093e4 <lwip_htons>
 800e624:	4603      	mov	r3, r0
 800e626:	b2db      	uxtb	r3, r3
 800e628:	f003 0303 	and.w	r3, r3, #3
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d001      	beq.n	800e634 <tcp_receive+0x6c4>
 800e630:	2301      	movs	r3, #1
 800e632:	e000      	b.n	800e636 <tcp_receive+0x6c6>
 800e634:	2300      	movs	r3, #0
 800e636:	4423      	add	r3, r4
 800e638:	b29a      	uxth	r2, r3
 800e63a:	4b70      	ldr	r3, [pc, #448]	@ (800e7fc <tcp_receive+0x88c>)
 800e63c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800e642:	4b6e      	ldr	r3, [pc, #440]	@ (800e7fc <tcp_receive+0x88c>)
 800e644:	881b      	ldrh	r3, [r3, #0]
 800e646:	429a      	cmp	r2, r3
 800e648:	d274      	bcs.n	800e734 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e64a:	4b6b      	ldr	r3, [pc, #428]	@ (800e7f8 <tcp_receive+0x888>)
 800e64c:	68db      	ldr	r3, [r3, #12]
 800e64e:	899b      	ldrh	r3, [r3, #12]
 800e650:	b29b      	uxth	r3, r3
 800e652:	4618      	mov	r0, r3
 800e654:	f7fa fec6 	bl	80093e4 <lwip_htons>
 800e658:	4603      	mov	r3, r0
 800e65a:	b2db      	uxtb	r3, r3
 800e65c:	f003 0301 	and.w	r3, r3, #1
 800e660:	2b00      	cmp	r3, #0
 800e662:	d01e      	beq.n	800e6a2 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800e664:	4b64      	ldr	r3, [pc, #400]	@ (800e7f8 <tcp_receive+0x888>)
 800e666:	68db      	ldr	r3, [r3, #12]
 800e668:	899b      	ldrh	r3, [r3, #12]
 800e66a:	b29b      	uxth	r3, r3
 800e66c:	b21b      	sxth	r3, r3
 800e66e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800e672:	b21c      	sxth	r4, r3
 800e674:	4b60      	ldr	r3, [pc, #384]	@ (800e7f8 <tcp_receive+0x888>)
 800e676:	68db      	ldr	r3, [r3, #12]
 800e678:	899b      	ldrh	r3, [r3, #12]
 800e67a:	b29b      	uxth	r3, r3
 800e67c:	4618      	mov	r0, r3
 800e67e:	f7fa feb1 	bl	80093e4 <lwip_htons>
 800e682:	4603      	mov	r3, r0
 800e684:	b2db      	uxtb	r3, r3
 800e686:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800e68a:	b29b      	uxth	r3, r3
 800e68c:	4618      	mov	r0, r3
 800e68e:	f7fa fea9 	bl	80093e4 <lwip_htons>
 800e692:	4603      	mov	r3, r0
 800e694:	b21b      	sxth	r3, r3
 800e696:	4323      	orrs	r3, r4
 800e698:	b21a      	sxth	r2, r3
 800e69a:	4b57      	ldr	r3, [pc, #348]	@ (800e7f8 <tcp_receive+0x888>)
 800e69c:	68db      	ldr	r3, [r3, #12]
 800e69e:	b292      	uxth	r2, r2
 800e6a0:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800e6a6:	4b54      	ldr	r3, [pc, #336]	@ (800e7f8 <tcp_receive+0x888>)
 800e6a8:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e6aa:	4b53      	ldr	r3, [pc, #332]	@ (800e7f8 <tcp_receive+0x888>)
 800e6ac:	68db      	ldr	r3, [r3, #12]
 800e6ae:	899b      	ldrh	r3, [r3, #12]
 800e6b0:	b29b      	uxth	r3, r3
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	f7fa fe96 	bl	80093e4 <lwip_htons>
 800e6b8:	4603      	mov	r3, r0
 800e6ba:	b2db      	uxtb	r3, r3
 800e6bc:	f003 0302 	and.w	r3, r3, #2
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d005      	beq.n	800e6d0 <tcp_receive+0x760>
            inseg.len -= 1;
 800e6c4:	4b4c      	ldr	r3, [pc, #304]	@ (800e7f8 <tcp_receive+0x888>)
 800e6c6:	891b      	ldrh	r3, [r3, #8]
 800e6c8:	3b01      	subs	r3, #1
 800e6ca:	b29a      	uxth	r2, r3
 800e6cc:	4b4a      	ldr	r3, [pc, #296]	@ (800e7f8 <tcp_receive+0x888>)
 800e6ce:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800e6d0:	4b49      	ldr	r3, [pc, #292]	@ (800e7f8 <tcp_receive+0x888>)
 800e6d2:	685b      	ldr	r3, [r3, #4]
 800e6d4:	4a48      	ldr	r2, [pc, #288]	@ (800e7f8 <tcp_receive+0x888>)
 800e6d6:	8912      	ldrh	r2, [r2, #8]
 800e6d8:	4611      	mov	r1, r2
 800e6da:	4618      	mov	r0, r3
 800e6dc:	f7fc f9c6 	bl	800aa6c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800e6e0:	4b45      	ldr	r3, [pc, #276]	@ (800e7f8 <tcp_receive+0x888>)
 800e6e2:	891c      	ldrh	r4, [r3, #8]
 800e6e4:	4b44      	ldr	r3, [pc, #272]	@ (800e7f8 <tcp_receive+0x888>)
 800e6e6:	68db      	ldr	r3, [r3, #12]
 800e6e8:	899b      	ldrh	r3, [r3, #12]
 800e6ea:	b29b      	uxth	r3, r3
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	f7fa fe79 	bl	80093e4 <lwip_htons>
 800e6f2:	4603      	mov	r3, r0
 800e6f4:	b2db      	uxtb	r3, r3
 800e6f6:	f003 0303 	and.w	r3, r3, #3
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d001      	beq.n	800e702 <tcp_receive+0x792>
 800e6fe:	2301      	movs	r3, #1
 800e700:	e000      	b.n	800e704 <tcp_receive+0x794>
 800e702:	2300      	movs	r3, #0
 800e704:	4423      	add	r3, r4
 800e706:	b29a      	uxth	r2, r3
 800e708:	4b3c      	ldr	r3, [pc, #240]	@ (800e7fc <tcp_receive+0x88c>)
 800e70a:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e70c:	4b3b      	ldr	r3, [pc, #236]	@ (800e7fc <tcp_receive+0x88c>)
 800e70e:	881b      	ldrh	r3, [r3, #0]
 800e710:	461a      	mov	r2, r3
 800e712:	4b38      	ldr	r3, [pc, #224]	@ (800e7f4 <tcp_receive+0x884>)
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	441a      	add	r2, r3
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e71c:	6879      	ldr	r1, [r7, #4]
 800e71e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800e720:	440b      	add	r3, r1
 800e722:	429a      	cmp	r2, r3
 800e724:	d006      	beq.n	800e734 <tcp_receive+0x7c4>
 800e726:	4b36      	ldr	r3, [pc, #216]	@ (800e800 <tcp_receive+0x890>)
 800e728:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800e72c:	4935      	ldr	r1, [pc, #212]	@ (800e804 <tcp_receive+0x894>)
 800e72e:	4836      	ldr	r0, [pc, #216]	@ (800e808 <tcp_receive+0x898>)
 800e730:	f004 ff4e 	bl	80135d0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e738:	2b00      	cmp	r3, #0
 800e73a:	f000 80e6 	beq.w	800e90a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e73e:	4b2e      	ldr	r3, [pc, #184]	@ (800e7f8 <tcp_receive+0x888>)
 800e740:	68db      	ldr	r3, [r3, #12]
 800e742:	899b      	ldrh	r3, [r3, #12]
 800e744:	b29b      	uxth	r3, r3
 800e746:	4618      	mov	r0, r3
 800e748:	f7fa fe4c 	bl	80093e4 <lwip_htons>
 800e74c:	4603      	mov	r3, r0
 800e74e:	b2db      	uxtb	r3, r3
 800e750:	f003 0301 	and.w	r3, r3, #1
 800e754:	2b00      	cmp	r3, #0
 800e756:	d010      	beq.n	800e77a <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800e758:	e00a      	b.n	800e770 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e75e:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e764:	681a      	ldr	r2, [r3, #0]
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800e76a:	68f8      	ldr	r0, [r7, #12]
 800e76c:	f7fd fd8f 	bl	800c28e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e774:	2b00      	cmp	r3, #0
 800e776:	d1f0      	bne.n	800e75a <tcp_receive+0x7ea>
 800e778:	e0c7      	b.n	800e90a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e77e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800e780:	e051      	b.n	800e826 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800e782:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e784:	68db      	ldr	r3, [r3, #12]
 800e786:	899b      	ldrh	r3, [r3, #12]
 800e788:	b29b      	uxth	r3, r3
 800e78a:	4618      	mov	r0, r3
 800e78c:	f7fa fe2a 	bl	80093e4 <lwip_htons>
 800e790:	4603      	mov	r3, r0
 800e792:	b2db      	uxtb	r3, r3
 800e794:	f003 0301 	and.w	r3, r3, #1
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d03c      	beq.n	800e816 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800e79c:	4b16      	ldr	r3, [pc, #88]	@ (800e7f8 <tcp_receive+0x888>)
 800e79e:	68db      	ldr	r3, [r3, #12]
 800e7a0:	899b      	ldrh	r3, [r3, #12]
 800e7a2:	b29b      	uxth	r3, r3
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	f7fa fe1d 	bl	80093e4 <lwip_htons>
 800e7aa:	4603      	mov	r3, r0
 800e7ac:	b2db      	uxtb	r3, r3
 800e7ae:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d12f      	bne.n	800e816 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800e7b6:	4b10      	ldr	r3, [pc, #64]	@ (800e7f8 <tcp_receive+0x888>)
 800e7b8:	68db      	ldr	r3, [r3, #12]
 800e7ba:	899b      	ldrh	r3, [r3, #12]
 800e7bc:	b29c      	uxth	r4, r3
 800e7be:	2001      	movs	r0, #1
 800e7c0:	f7fa fe10 	bl	80093e4 <lwip_htons>
 800e7c4:	4603      	mov	r3, r0
 800e7c6:	461a      	mov	r2, r3
 800e7c8:	4b0b      	ldr	r3, [pc, #44]	@ (800e7f8 <tcp_receive+0x888>)
 800e7ca:	68db      	ldr	r3, [r3, #12]
 800e7cc:	4322      	orrs	r2, r4
 800e7ce:	b292      	uxth	r2, r2
 800e7d0:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800e7d2:	4b09      	ldr	r3, [pc, #36]	@ (800e7f8 <tcp_receive+0x888>)
 800e7d4:	891c      	ldrh	r4, [r3, #8]
 800e7d6:	4b08      	ldr	r3, [pc, #32]	@ (800e7f8 <tcp_receive+0x888>)
 800e7d8:	68db      	ldr	r3, [r3, #12]
 800e7da:	899b      	ldrh	r3, [r3, #12]
 800e7dc:	b29b      	uxth	r3, r3
 800e7de:	4618      	mov	r0, r3
 800e7e0:	f7fa fe00 	bl	80093e4 <lwip_htons>
 800e7e4:	4603      	mov	r3, r0
 800e7e6:	b2db      	uxtb	r3, r3
 800e7e8:	f003 0303 	and.w	r3, r3, #3
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d00d      	beq.n	800e80c <tcp_receive+0x89c>
 800e7f0:	2301      	movs	r3, #1
 800e7f2:	e00c      	b.n	800e80e <tcp_receive+0x89e>
 800e7f4:	24010584 	.word	0x24010584
 800e7f8:	24010564 	.word	0x24010564
 800e7fc:	2401058e 	.word	0x2401058e
 800e800:	08015858 	.word	0x08015858
 800e804:	08015c00 	.word	0x08015c00
 800e808:	080158a4 	.word	0x080158a4
 800e80c:	2300      	movs	r3, #0
 800e80e:	4423      	add	r3, r4
 800e810:	b29a      	uxth	r2, r3
 800e812:	4b98      	ldr	r3, [pc, #608]	@ (800ea74 <tcp_receive+0xb04>)
 800e814:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800e816:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e818:	613b      	str	r3, [r7, #16]
              next = next->next;
 800e81a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800e820:	6938      	ldr	r0, [r7, #16]
 800e822:	f7fd fd34 	bl	800c28e <tcp_seg_free>
            while (next &&
 800e826:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d00e      	beq.n	800e84a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800e82c:	4b91      	ldr	r3, [pc, #580]	@ (800ea74 <tcp_receive+0xb04>)
 800e82e:	881b      	ldrh	r3, [r3, #0]
 800e830:	461a      	mov	r2, r3
 800e832:	4b91      	ldr	r3, [pc, #580]	@ (800ea78 <tcp_receive+0xb08>)
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	441a      	add	r2, r3
 800e838:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e83a:	68db      	ldr	r3, [r3, #12]
 800e83c:	685b      	ldr	r3, [r3, #4]
 800e83e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e840:	8909      	ldrh	r1, [r1, #8]
 800e842:	440b      	add	r3, r1
 800e844:	1ad3      	subs	r3, r2, r3
            while (next &&
 800e846:	2b00      	cmp	r3, #0
 800e848:	da9b      	bge.n	800e782 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800e84a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d059      	beq.n	800e904 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800e850:	4b88      	ldr	r3, [pc, #544]	@ (800ea74 <tcp_receive+0xb04>)
 800e852:	881b      	ldrh	r3, [r3, #0]
 800e854:	461a      	mov	r2, r3
 800e856:	4b88      	ldr	r3, [pc, #544]	@ (800ea78 <tcp_receive+0xb08>)
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	441a      	add	r2, r3
 800e85c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e85e:	68db      	ldr	r3, [r3, #12]
 800e860:	685b      	ldr	r3, [r3, #4]
 800e862:	1ad3      	subs	r3, r2, r3
            if (next &&
 800e864:	2b00      	cmp	r3, #0
 800e866:	dd4d      	ble.n	800e904 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800e868:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e86a:	68db      	ldr	r3, [r3, #12]
 800e86c:	685b      	ldr	r3, [r3, #4]
 800e86e:	b29a      	uxth	r2, r3
 800e870:	4b81      	ldr	r3, [pc, #516]	@ (800ea78 <tcp_receive+0xb08>)
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	b29b      	uxth	r3, r3
 800e876:	1ad3      	subs	r3, r2, r3
 800e878:	b29a      	uxth	r2, r3
 800e87a:	4b80      	ldr	r3, [pc, #512]	@ (800ea7c <tcp_receive+0xb0c>)
 800e87c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e87e:	4b7f      	ldr	r3, [pc, #508]	@ (800ea7c <tcp_receive+0xb0c>)
 800e880:	68db      	ldr	r3, [r3, #12]
 800e882:	899b      	ldrh	r3, [r3, #12]
 800e884:	b29b      	uxth	r3, r3
 800e886:	4618      	mov	r0, r3
 800e888:	f7fa fdac 	bl	80093e4 <lwip_htons>
 800e88c:	4603      	mov	r3, r0
 800e88e:	b2db      	uxtb	r3, r3
 800e890:	f003 0302 	and.w	r3, r3, #2
 800e894:	2b00      	cmp	r3, #0
 800e896:	d005      	beq.n	800e8a4 <tcp_receive+0x934>
                inseg.len -= 1;
 800e898:	4b78      	ldr	r3, [pc, #480]	@ (800ea7c <tcp_receive+0xb0c>)
 800e89a:	891b      	ldrh	r3, [r3, #8]
 800e89c:	3b01      	subs	r3, #1
 800e89e:	b29a      	uxth	r2, r3
 800e8a0:	4b76      	ldr	r3, [pc, #472]	@ (800ea7c <tcp_receive+0xb0c>)
 800e8a2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800e8a4:	4b75      	ldr	r3, [pc, #468]	@ (800ea7c <tcp_receive+0xb0c>)
 800e8a6:	685b      	ldr	r3, [r3, #4]
 800e8a8:	4a74      	ldr	r2, [pc, #464]	@ (800ea7c <tcp_receive+0xb0c>)
 800e8aa:	8912      	ldrh	r2, [r2, #8]
 800e8ac:	4611      	mov	r1, r2
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	f7fc f8dc 	bl	800aa6c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800e8b4:	4b71      	ldr	r3, [pc, #452]	@ (800ea7c <tcp_receive+0xb0c>)
 800e8b6:	891c      	ldrh	r4, [r3, #8]
 800e8b8:	4b70      	ldr	r3, [pc, #448]	@ (800ea7c <tcp_receive+0xb0c>)
 800e8ba:	68db      	ldr	r3, [r3, #12]
 800e8bc:	899b      	ldrh	r3, [r3, #12]
 800e8be:	b29b      	uxth	r3, r3
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	f7fa fd8f 	bl	80093e4 <lwip_htons>
 800e8c6:	4603      	mov	r3, r0
 800e8c8:	b2db      	uxtb	r3, r3
 800e8ca:	f003 0303 	and.w	r3, r3, #3
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d001      	beq.n	800e8d6 <tcp_receive+0x966>
 800e8d2:	2301      	movs	r3, #1
 800e8d4:	e000      	b.n	800e8d8 <tcp_receive+0x968>
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	4423      	add	r3, r4
 800e8da:	b29a      	uxth	r2, r3
 800e8dc:	4b65      	ldr	r3, [pc, #404]	@ (800ea74 <tcp_receive+0xb04>)
 800e8de:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800e8e0:	4b64      	ldr	r3, [pc, #400]	@ (800ea74 <tcp_receive+0xb04>)
 800e8e2:	881b      	ldrh	r3, [r3, #0]
 800e8e4:	461a      	mov	r2, r3
 800e8e6:	4b64      	ldr	r3, [pc, #400]	@ (800ea78 <tcp_receive+0xb08>)
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	441a      	add	r2, r3
 800e8ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e8ee:	68db      	ldr	r3, [r3, #12]
 800e8f0:	685b      	ldr	r3, [r3, #4]
 800e8f2:	429a      	cmp	r2, r3
 800e8f4:	d006      	beq.n	800e904 <tcp_receive+0x994>
 800e8f6:	4b62      	ldr	r3, [pc, #392]	@ (800ea80 <tcp_receive+0xb10>)
 800e8f8:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800e8fc:	4961      	ldr	r1, [pc, #388]	@ (800ea84 <tcp_receive+0xb14>)
 800e8fe:	4862      	ldr	r0, [pc, #392]	@ (800ea88 <tcp_receive+0xb18>)
 800e900:	f004 fe66 	bl	80135d0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e908:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800e90a:	4b5a      	ldr	r3, [pc, #360]	@ (800ea74 <tcp_receive+0xb04>)
 800e90c:	881b      	ldrh	r3, [r3, #0]
 800e90e:	461a      	mov	r2, r3
 800e910:	4b59      	ldr	r3, [pc, #356]	@ (800ea78 <tcp_receive+0xb08>)
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	441a      	add	r2, r3
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800e91e:	4b55      	ldr	r3, [pc, #340]	@ (800ea74 <tcp_receive+0xb04>)
 800e920:	881b      	ldrh	r3, [r3, #0]
 800e922:	429a      	cmp	r2, r3
 800e924:	d206      	bcs.n	800e934 <tcp_receive+0x9c4>
 800e926:	4b56      	ldr	r3, [pc, #344]	@ (800ea80 <tcp_receive+0xb10>)
 800e928:	f240 6207 	movw	r2, #1543	@ 0x607
 800e92c:	4957      	ldr	r1, [pc, #348]	@ (800ea8c <tcp_receive+0xb1c>)
 800e92e:	4856      	ldr	r0, [pc, #344]	@ (800ea88 <tcp_receive+0xb18>)
 800e930:	f004 fe4e 	bl	80135d0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800e938:	4b4e      	ldr	r3, [pc, #312]	@ (800ea74 <tcp_receive+0xb04>)
 800e93a:	881b      	ldrh	r3, [r3, #0]
 800e93c:	1ad3      	subs	r3, r2, r3
 800e93e:	b29a      	uxth	r2, r3
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800e944:	6878      	ldr	r0, [r7, #4]
 800e946:	f7fc ffbb 	bl	800b8c0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800e94a:	4b4c      	ldr	r3, [pc, #304]	@ (800ea7c <tcp_receive+0xb0c>)
 800e94c:	685b      	ldr	r3, [r3, #4]
 800e94e:	891b      	ldrh	r3, [r3, #8]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d006      	beq.n	800e962 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800e954:	4b49      	ldr	r3, [pc, #292]	@ (800ea7c <tcp_receive+0xb0c>)
 800e956:	685b      	ldr	r3, [r3, #4]
 800e958:	4a4d      	ldr	r2, [pc, #308]	@ (800ea90 <tcp_receive+0xb20>)
 800e95a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800e95c:	4b47      	ldr	r3, [pc, #284]	@ (800ea7c <tcp_receive+0xb0c>)
 800e95e:	2200      	movs	r2, #0
 800e960:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e962:	4b46      	ldr	r3, [pc, #280]	@ (800ea7c <tcp_receive+0xb0c>)
 800e964:	68db      	ldr	r3, [r3, #12]
 800e966:	899b      	ldrh	r3, [r3, #12]
 800e968:	b29b      	uxth	r3, r3
 800e96a:	4618      	mov	r0, r3
 800e96c:	f7fa fd3a 	bl	80093e4 <lwip_htons>
 800e970:	4603      	mov	r3, r0
 800e972:	b2db      	uxtb	r3, r3
 800e974:	f003 0301 	and.w	r3, r3, #1
 800e978:	2b00      	cmp	r3, #0
 800e97a:	f000 80b8 	beq.w	800eaee <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800e97e:	4b45      	ldr	r3, [pc, #276]	@ (800ea94 <tcp_receive+0xb24>)
 800e980:	781b      	ldrb	r3, [r3, #0]
 800e982:	f043 0320 	orr.w	r3, r3, #32
 800e986:	b2da      	uxtb	r2, r3
 800e988:	4b42      	ldr	r3, [pc, #264]	@ (800ea94 <tcp_receive+0xb24>)
 800e98a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800e98c:	e0af      	b.n	800eaee <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e992:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e998:	68db      	ldr	r3, [r3, #12]
 800e99a:	685b      	ldr	r3, [r3, #4]
 800e99c:	4a36      	ldr	r2, [pc, #216]	@ (800ea78 <tcp_receive+0xb08>)
 800e99e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800e9a0:	68bb      	ldr	r3, [r7, #8]
 800e9a2:	891b      	ldrh	r3, [r3, #8]
 800e9a4:	461c      	mov	r4, r3
 800e9a6:	68bb      	ldr	r3, [r7, #8]
 800e9a8:	68db      	ldr	r3, [r3, #12]
 800e9aa:	899b      	ldrh	r3, [r3, #12]
 800e9ac:	b29b      	uxth	r3, r3
 800e9ae:	4618      	mov	r0, r3
 800e9b0:	f7fa fd18 	bl	80093e4 <lwip_htons>
 800e9b4:	4603      	mov	r3, r0
 800e9b6:	b2db      	uxtb	r3, r3
 800e9b8:	f003 0303 	and.w	r3, r3, #3
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d001      	beq.n	800e9c4 <tcp_receive+0xa54>
 800e9c0:	2301      	movs	r3, #1
 800e9c2:	e000      	b.n	800e9c6 <tcp_receive+0xa56>
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	191a      	adds	r2, r3, r4
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e9cc:	441a      	add	r2, r3
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e9d6:	461c      	mov	r4, r3
 800e9d8:	68bb      	ldr	r3, [r7, #8]
 800e9da:	891b      	ldrh	r3, [r3, #8]
 800e9dc:	461d      	mov	r5, r3
 800e9de:	68bb      	ldr	r3, [r7, #8]
 800e9e0:	68db      	ldr	r3, [r3, #12]
 800e9e2:	899b      	ldrh	r3, [r3, #12]
 800e9e4:	b29b      	uxth	r3, r3
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	f7fa fcfc 	bl	80093e4 <lwip_htons>
 800e9ec:	4603      	mov	r3, r0
 800e9ee:	b2db      	uxtb	r3, r3
 800e9f0:	f003 0303 	and.w	r3, r3, #3
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d001      	beq.n	800e9fc <tcp_receive+0xa8c>
 800e9f8:	2301      	movs	r3, #1
 800e9fa:	e000      	b.n	800e9fe <tcp_receive+0xa8e>
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	442b      	add	r3, r5
 800ea00:	429c      	cmp	r4, r3
 800ea02:	d206      	bcs.n	800ea12 <tcp_receive+0xaa2>
 800ea04:	4b1e      	ldr	r3, [pc, #120]	@ (800ea80 <tcp_receive+0xb10>)
 800ea06:	f240 622b 	movw	r2, #1579	@ 0x62b
 800ea0a:	4923      	ldr	r1, [pc, #140]	@ (800ea98 <tcp_receive+0xb28>)
 800ea0c:	481e      	ldr	r0, [pc, #120]	@ (800ea88 <tcp_receive+0xb18>)
 800ea0e:	f004 fddf 	bl	80135d0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800ea12:	68bb      	ldr	r3, [r7, #8]
 800ea14:	891b      	ldrh	r3, [r3, #8]
 800ea16:	461c      	mov	r4, r3
 800ea18:	68bb      	ldr	r3, [r7, #8]
 800ea1a:	68db      	ldr	r3, [r3, #12]
 800ea1c:	899b      	ldrh	r3, [r3, #12]
 800ea1e:	b29b      	uxth	r3, r3
 800ea20:	4618      	mov	r0, r3
 800ea22:	f7fa fcdf 	bl	80093e4 <lwip_htons>
 800ea26:	4603      	mov	r3, r0
 800ea28:	b2db      	uxtb	r3, r3
 800ea2a:	f003 0303 	and.w	r3, r3, #3
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d001      	beq.n	800ea36 <tcp_receive+0xac6>
 800ea32:	2301      	movs	r3, #1
 800ea34:	e000      	b.n	800ea38 <tcp_receive+0xac8>
 800ea36:	2300      	movs	r3, #0
 800ea38:	1919      	adds	r1, r3, r4
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ea3e:	b28b      	uxth	r3, r1
 800ea40:	1ad3      	subs	r3, r2, r3
 800ea42:	b29a      	uxth	r2, r3
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800ea48:	6878      	ldr	r0, [r7, #4]
 800ea4a:	f7fc ff39 	bl	800b8c0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800ea4e:	68bb      	ldr	r3, [r7, #8]
 800ea50:	685b      	ldr	r3, [r3, #4]
 800ea52:	891b      	ldrh	r3, [r3, #8]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d028      	beq.n	800eaaa <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800ea58:	4b0d      	ldr	r3, [pc, #52]	@ (800ea90 <tcp_receive+0xb20>)
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d01d      	beq.n	800ea9c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800ea60:	4b0b      	ldr	r3, [pc, #44]	@ (800ea90 <tcp_receive+0xb20>)
 800ea62:	681a      	ldr	r2, [r3, #0]
 800ea64:	68bb      	ldr	r3, [r7, #8]
 800ea66:	685b      	ldr	r3, [r3, #4]
 800ea68:	4619      	mov	r1, r3
 800ea6a:	4610      	mov	r0, r2
 800ea6c:	f7fc fa52 	bl	800af14 <pbuf_cat>
 800ea70:	e018      	b.n	800eaa4 <tcp_receive+0xb34>
 800ea72:	bf00      	nop
 800ea74:	2401058e 	.word	0x2401058e
 800ea78:	24010584 	.word	0x24010584
 800ea7c:	24010564 	.word	0x24010564
 800ea80:	08015858 	.word	0x08015858
 800ea84:	08015c38 	.word	0x08015c38
 800ea88:	080158a4 	.word	0x080158a4
 800ea8c:	08015c74 	.word	0x08015c74
 800ea90:	24010594 	.word	0x24010594
 800ea94:	24010591 	.word	0x24010591
 800ea98:	08015c94 	.word	0x08015c94
            } else {
              recv_data = cseg->p;
 800ea9c:	68bb      	ldr	r3, [r7, #8]
 800ea9e:	685b      	ldr	r3, [r3, #4]
 800eaa0:	4a70      	ldr	r2, [pc, #448]	@ (800ec64 <tcp_receive+0xcf4>)
 800eaa2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800eaa4:	68bb      	ldr	r3, [r7, #8]
 800eaa6:	2200      	movs	r2, #0
 800eaa8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800eaaa:	68bb      	ldr	r3, [r7, #8]
 800eaac:	68db      	ldr	r3, [r3, #12]
 800eaae:	899b      	ldrh	r3, [r3, #12]
 800eab0:	b29b      	uxth	r3, r3
 800eab2:	4618      	mov	r0, r3
 800eab4:	f7fa fc96 	bl	80093e4 <lwip_htons>
 800eab8:	4603      	mov	r3, r0
 800eaba:	b2db      	uxtb	r3, r3
 800eabc:	f003 0301 	and.w	r3, r3, #1
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d00d      	beq.n	800eae0 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800eac4:	4b68      	ldr	r3, [pc, #416]	@ (800ec68 <tcp_receive+0xcf8>)
 800eac6:	781b      	ldrb	r3, [r3, #0]
 800eac8:	f043 0320 	orr.w	r3, r3, #32
 800eacc:	b2da      	uxtb	r2, r3
 800eace:	4b66      	ldr	r3, [pc, #408]	@ (800ec68 <tcp_receive+0xcf8>)
 800ead0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	7d1b      	ldrb	r3, [r3, #20]
 800ead6:	2b04      	cmp	r3, #4
 800ead8:	d102      	bne.n	800eae0 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	2207      	movs	r2, #7
 800eade:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800eae0:	68bb      	ldr	r3, [r7, #8]
 800eae2:	681a      	ldr	r2, [r3, #0]
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800eae8:	68b8      	ldr	r0, [r7, #8]
 800eaea:	f7fd fbd0 	bl	800c28e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d008      	beq.n	800eb08 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eafa:	68db      	ldr	r3, [r3, #12]
 800eafc:	685a      	ldr	r2, [r3, #4]
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800eb02:	429a      	cmp	r2, r3
 800eb04:	f43f af43 	beq.w	800e98e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	8b5b      	ldrh	r3, [r3, #26]
 800eb0c:	f003 0301 	and.w	r3, r3, #1
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d00e      	beq.n	800eb32 <tcp_receive+0xbc2>
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	8b5b      	ldrh	r3, [r3, #26]
 800eb18:	f023 0301 	bic.w	r3, r3, #1
 800eb1c:	b29a      	uxth	r2, r3
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	835a      	strh	r2, [r3, #26]
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	8b5b      	ldrh	r3, [r3, #26]
 800eb26:	f043 0302 	orr.w	r3, r3, #2
 800eb2a:	b29a      	uxth	r2, r3
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800eb30:	e187      	b.n	800ee42 <tcp_receive+0xed2>
        tcp_ack(pcb);
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	8b5b      	ldrh	r3, [r3, #26]
 800eb36:	f043 0301 	orr.w	r3, r3, #1
 800eb3a:	b29a      	uxth	r2, r3
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800eb40:	e17f      	b.n	800ee42 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d106      	bne.n	800eb58 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800eb4a:	4848      	ldr	r0, [pc, #288]	@ (800ec6c <tcp_receive+0xcfc>)
 800eb4c:	f7fd fbb8 	bl	800c2c0 <tcp_seg_copy>
 800eb50:	4602      	mov	r2, r0
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	675a      	str	r2, [r3, #116]	@ 0x74
 800eb56:	e16c      	b.n	800ee32 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800eb58:	2300      	movs	r3, #0
 800eb5a:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eb60:	63bb      	str	r3, [r7, #56]	@ 0x38
 800eb62:	e156      	b.n	800ee12 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800eb64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb66:	68db      	ldr	r3, [r3, #12]
 800eb68:	685a      	ldr	r2, [r3, #4]
 800eb6a:	4b41      	ldr	r3, [pc, #260]	@ (800ec70 <tcp_receive+0xd00>)
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	429a      	cmp	r2, r3
 800eb70:	d11d      	bne.n	800ebae <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800eb72:	4b3e      	ldr	r3, [pc, #248]	@ (800ec6c <tcp_receive+0xcfc>)
 800eb74:	891a      	ldrh	r2, [r3, #8]
 800eb76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb78:	891b      	ldrh	r3, [r3, #8]
 800eb7a:	429a      	cmp	r2, r3
 800eb7c:	f240 814e 	bls.w	800ee1c <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800eb80:	483a      	ldr	r0, [pc, #232]	@ (800ec6c <tcp_receive+0xcfc>)
 800eb82:	f7fd fb9d 	bl	800c2c0 <tcp_seg_copy>
 800eb86:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800eb88:	697b      	ldr	r3, [r7, #20]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	f000 8148 	beq.w	800ee20 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800eb90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d003      	beq.n	800eb9e <tcp_receive+0xc2e>
                    prev->next = cseg;
 800eb96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb98:	697a      	ldr	r2, [r7, #20]
 800eb9a:	601a      	str	r2, [r3, #0]
 800eb9c:	e002      	b.n	800eba4 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	697a      	ldr	r2, [r7, #20]
 800eba2:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800eba4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800eba6:	6978      	ldr	r0, [r7, #20]
 800eba8:	f7ff f8de 	bl	800dd68 <tcp_oos_insert_segment>
                }
                break;
 800ebac:	e138      	b.n	800ee20 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800ebae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d117      	bne.n	800ebe4 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800ebb4:	4b2e      	ldr	r3, [pc, #184]	@ (800ec70 <tcp_receive+0xd00>)
 800ebb6:	681a      	ldr	r2, [r3, #0]
 800ebb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebba:	68db      	ldr	r3, [r3, #12]
 800ebbc:	685b      	ldr	r3, [r3, #4]
 800ebbe:	1ad3      	subs	r3, r2, r3
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	da57      	bge.n	800ec74 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ebc4:	4829      	ldr	r0, [pc, #164]	@ (800ec6c <tcp_receive+0xcfc>)
 800ebc6:	f7fd fb7b 	bl	800c2c0 <tcp_seg_copy>
 800ebca:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800ebcc:	69bb      	ldr	r3, [r7, #24]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	f000 8128 	beq.w	800ee24 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	69ba      	ldr	r2, [r7, #24]
 800ebd8:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800ebda:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ebdc:	69b8      	ldr	r0, [r7, #24]
 800ebde:	f7ff f8c3 	bl	800dd68 <tcp_oos_insert_segment>
                  }
                  break;
 800ebe2:	e11f      	b.n	800ee24 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800ebe4:	4b22      	ldr	r3, [pc, #136]	@ (800ec70 <tcp_receive+0xd00>)
 800ebe6:	681a      	ldr	r2, [r3, #0]
 800ebe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ebea:	68db      	ldr	r3, [r3, #12]
 800ebec:	685b      	ldr	r3, [r3, #4]
 800ebee:	1ad3      	subs	r3, r2, r3
 800ebf0:	3b01      	subs	r3, #1
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	db3e      	blt.n	800ec74 <tcp_receive+0xd04>
 800ebf6:	4b1e      	ldr	r3, [pc, #120]	@ (800ec70 <tcp_receive+0xd00>)
 800ebf8:	681a      	ldr	r2, [r3, #0]
 800ebfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebfc:	68db      	ldr	r3, [r3, #12]
 800ebfe:	685b      	ldr	r3, [r3, #4]
 800ec00:	1ad3      	subs	r3, r2, r3
 800ec02:	3301      	adds	r3, #1
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	dc35      	bgt.n	800ec74 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ec08:	4818      	ldr	r0, [pc, #96]	@ (800ec6c <tcp_receive+0xcfc>)
 800ec0a:	f7fd fb59 	bl	800c2c0 <tcp_seg_copy>
 800ec0e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800ec10:	69fb      	ldr	r3, [r7, #28]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	f000 8108 	beq.w	800ee28 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800ec18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec1a:	68db      	ldr	r3, [r3, #12]
 800ec1c:	685b      	ldr	r3, [r3, #4]
 800ec1e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ec20:	8912      	ldrh	r2, [r2, #8]
 800ec22:	441a      	add	r2, r3
 800ec24:	4b12      	ldr	r3, [pc, #72]	@ (800ec70 <tcp_receive+0xd00>)
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	1ad3      	subs	r3, r2, r3
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	dd12      	ble.n	800ec54 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800ec2e:	4b10      	ldr	r3, [pc, #64]	@ (800ec70 <tcp_receive+0xd00>)
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	b29a      	uxth	r2, r3
 800ec34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec36:	68db      	ldr	r3, [r3, #12]
 800ec38:	685b      	ldr	r3, [r3, #4]
 800ec3a:	b29b      	uxth	r3, r3
 800ec3c:	1ad3      	subs	r3, r2, r3
 800ec3e:	b29a      	uxth	r2, r3
 800ec40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec42:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800ec44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec46:	685a      	ldr	r2, [r3, #4]
 800ec48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec4a:	891b      	ldrh	r3, [r3, #8]
 800ec4c:	4619      	mov	r1, r3
 800ec4e:	4610      	mov	r0, r2
 800ec50:	f7fb ff0c 	bl	800aa6c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800ec54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec56:	69fa      	ldr	r2, [r7, #28]
 800ec58:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800ec5a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ec5c:	69f8      	ldr	r0, [r7, #28]
 800ec5e:	f7ff f883 	bl	800dd68 <tcp_oos_insert_segment>
                  }
                  break;
 800ec62:	e0e1      	b.n	800ee28 <tcp_receive+0xeb8>
 800ec64:	24010594 	.word	0x24010594
 800ec68:	24010591 	.word	0x24010591
 800ec6c:	24010564 	.word	0x24010564
 800ec70:	24010584 	.word	0x24010584
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800ec74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec76:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800ec78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	f040 80c5 	bne.w	800ee0c <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800ec82:	4b7f      	ldr	r3, [pc, #508]	@ (800ee80 <tcp_receive+0xf10>)
 800ec84:	681a      	ldr	r2, [r3, #0]
 800ec86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec88:	68db      	ldr	r3, [r3, #12]
 800ec8a:	685b      	ldr	r3, [r3, #4]
 800ec8c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	f340 80bc 	ble.w	800ee0c <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ec94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec96:	68db      	ldr	r3, [r3, #12]
 800ec98:	899b      	ldrh	r3, [r3, #12]
 800ec9a:	b29b      	uxth	r3, r3
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	f7fa fba1 	bl	80093e4 <lwip_htons>
 800eca2:	4603      	mov	r3, r0
 800eca4:	b2db      	uxtb	r3, r3
 800eca6:	f003 0301 	and.w	r3, r3, #1
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	f040 80be 	bne.w	800ee2c <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800ecb0:	4874      	ldr	r0, [pc, #464]	@ (800ee84 <tcp_receive+0xf14>)
 800ecb2:	f7fd fb05 	bl	800c2c0 <tcp_seg_copy>
 800ecb6:	4602      	mov	r2, r0
 800ecb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecba:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800ecbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	f000 80b5 	beq.w	800ee30 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800ecc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecc8:	68db      	ldr	r3, [r3, #12]
 800ecca:	685b      	ldr	r3, [r3, #4]
 800eccc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ecce:	8912      	ldrh	r2, [r2, #8]
 800ecd0:	441a      	add	r2, r3
 800ecd2:	4b6b      	ldr	r3, [pc, #428]	@ (800ee80 <tcp_receive+0xf10>)
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	1ad3      	subs	r3, r2, r3
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	dd12      	ble.n	800ed02 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800ecdc:	4b68      	ldr	r3, [pc, #416]	@ (800ee80 <tcp_receive+0xf10>)
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	b29a      	uxth	r2, r3
 800ece2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ece4:	68db      	ldr	r3, [r3, #12]
 800ece6:	685b      	ldr	r3, [r3, #4]
 800ece8:	b29b      	uxth	r3, r3
 800ecea:	1ad3      	subs	r3, r2, r3
 800ecec:	b29a      	uxth	r2, r3
 800ecee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecf0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800ecf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecf4:	685a      	ldr	r2, [r3, #4]
 800ecf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecf8:	891b      	ldrh	r3, [r3, #8]
 800ecfa:	4619      	mov	r1, r3
 800ecfc:	4610      	mov	r0, r2
 800ecfe:	f7fb feb5 	bl	800aa6c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800ed02:	4b61      	ldr	r3, [pc, #388]	@ (800ee88 <tcp_receive+0xf18>)
 800ed04:	881b      	ldrh	r3, [r3, #0]
 800ed06:	461a      	mov	r2, r3
 800ed08:	4b5d      	ldr	r3, [pc, #372]	@ (800ee80 <tcp_receive+0xf10>)
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	441a      	add	r2, r3
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed12:	6879      	ldr	r1, [r7, #4]
 800ed14:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800ed16:	440b      	add	r3, r1
 800ed18:	1ad3      	subs	r3, r2, r3
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	f340 8088 	ble.w	800ee30 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800ed20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	68db      	ldr	r3, [r3, #12]
 800ed26:	899b      	ldrh	r3, [r3, #12]
 800ed28:	b29b      	uxth	r3, r3
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	f7fa fb5a 	bl	80093e4 <lwip_htons>
 800ed30:	4603      	mov	r3, r0
 800ed32:	b2db      	uxtb	r3, r3
 800ed34:	f003 0301 	and.w	r3, r3, #1
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d021      	beq.n	800ed80 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800ed3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	68db      	ldr	r3, [r3, #12]
 800ed42:	899b      	ldrh	r3, [r3, #12]
 800ed44:	b29b      	uxth	r3, r3
 800ed46:	b21b      	sxth	r3, r3
 800ed48:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800ed4c:	b21c      	sxth	r4, r3
 800ed4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	68db      	ldr	r3, [r3, #12]
 800ed54:	899b      	ldrh	r3, [r3, #12]
 800ed56:	b29b      	uxth	r3, r3
 800ed58:	4618      	mov	r0, r3
 800ed5a:	f7fa fb43 	bl	80093e4 <lwip_htons>
 800ed5e:	4603      	mov	r3, r0
 800ed60:	b2db      	uxtb	r3, r3
 800ed62:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800ed66:	b29b      	uxth	r3, r3
 800ed68:	4618      	mov	r0, r3
 800ed6a:	f7fa fb3b 	bl	80093e4 <lwip_htons>
 800ed6e:	4603      	mov	r3, r0
 800ed70:	b21b      	sxth	r3, r3
 800ed72:	4323      	orrs	r3, r4
 800ed74:	b21a      	sxth	r2, r3
 800ed76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	68db      	ldr	r3, [r3, #12]
 800ed7c:	b292      	uxth	r2, r2
 800ed7e:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed84:	b29a      	uxth	r2, r3
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ed8a:	4413      	add	r3, r2
 800ed8c:	b299      	uxth	r1, r3
 800ed8e:	4b3c      	ldr	r3, [pc, #240]	@ (800ee80 <tcp_receive+0xf10>)
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	b29a      	uxth	r2, r3
 800ed94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	1a8a      	subs	r2, r1, r2
 800ed9a:	b292      	uxth	r2, r2
 800ed9c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800ed9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	685a      	ldr	r2, [r3, #4]
 800eda4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	891b      	ldrh	r3, [r3, #8]
 800edaa:	4619      	mov	r1, r3
 800edac:	4610      	mov	r0, r2
 800edae:	f7fb fe5d 	bl	800aa6c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800edb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	891c      	ldrh	r4, [r3, #8]
 800edb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	68db      	ldr	r3, [r3, #12]
 800edbe:	899b      	ldrh	r3, [r3, #12]
 800edc0:	b29b      	uxth	r3, r3
 800edc2:	4618      	mov	r0, r3
 800edc4:	f7fa fb0e 	bl	80093e4 <lwip_htons>
 800edc8:	4603      	mov	r3, r0
 800edca:	b2db      	uxtb	r3, r3
 800edcc:	f003 0303 	and.w	r3, r3, #3
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d001      	beq.n	800edd8 <tcp_receive+0xe68>
 800edd4:	2301      	movs	r3, #1
 800edd6:	e000      	b.n	800edda <tcp_receive+0xe6a>
 800edd8:	2300      	movs	r3, #0
 800edda:	4423      	add	r3, r4
 800eddc:	b29a      	uxth	r2, r3
 800edde:	4b2a      	ldr	r3, [pc, #168]	@ (800ee88 <tcp_receive+0xf18>)
 800ede0:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ede2:	4b29      	ldr	r3, [pc, #164]	@ (800ee88 <tcp_receive+0xf18>)
 800ede4:	881b      	ldrh	r3, [r3, #0]
 800ede6:	461a      	mov	r2, r3
 800ede8:	4b25      	ldr	r3, [pc, #148]	@ (800ee80 <tcp_receive+0xf10>)
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	441a      	add	r2, r3
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800edf2:	6879      	ldr	r1, [r7, #4]
 800edf4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800edf6:	440b      	add	r3, r1
 800edf8:	429a      	cmp	r2, r3
 800edfa:	d019      	beq.n	800ee30 <tcp_receive+0xec0>
 800edfc:	4b23      	ldr	r3, [pc, #140]	@ (800ee8c <tcp_receive+0xf1c>)
 800edfe:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800ee02:	4923      	ldr	r1, [pc, #140]	@ (800ee90 <tcp_receive+0xf20>)
 800ee04:	4823      	ldr	r0, [pc, #140]	@ (800ee94 <tcp_receive+0xf24>)
 800ee06:	f004 fbe3 	bl	80135d0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800ee0a:	e011      	b.n	800ee30 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ee0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ee12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	f47f aea5 	bne.w	800eb64 <tcp_receive+0xbf4>
 800ee1a:	e00a      	b.n	800ee32 <tcp_receive+0xec2>
                break;
 800ee1c:	bf00      	nop
 800ee1e:	e008      	b.n	800ee32 <tcp_receive+0xec2>
                break;
 800ee20:	bf00      	nop
 800ee22:	e006      	b.n	800ee32 <tcp_receive+0xec2>
                  break;
 800ee24:	bf00      	nop
 800ee26:	e004      	b.n	800ee32 <tcp_receive+0xec2>
                  break;
 800ee28:	bf00      	nop
 800ee2a:	e002      	b.n	800ee32 <tcp_receive+0xec2>
                  break;
 800ee2c:	bf00      	nop
 800ee2e:	e000      	b.n	800ee32 <tcp_receive+0xec2>
                break;
 800ee30:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800ee32:	6878      	ldr	r0, [r7, #4]
 800ee34:	f001 fa34 	bl	80102a0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800ee38:	e003      	b.n	800ee42 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800ee3a:	6878      	ldr	r0, [r7, #4]
 800ee3c:	f001 fa30 	bl	80102a0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ee40:	e01a      	b.n	800ee78 <tcp_receive+0xf08>
 800ee42:	e019      	b.n	800ee78 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800ee44:	4b0e      	ldr	r3, [pc, #56]	@ (800ee80 <tcp_receive+0xf10>)
 800ee46:	681a      	ldr	r2, [r3, #0]
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee4c:	1ad3      	subs	r3, r2, r3
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	db0a      	blt.n	800ee68 <tcp_receive+0xef8>
 800ee52:	4b0b      	ldr	r3, [pc, #44]	@ (800ee80 <tcp_receive+0xf10>)
 800ee54:	681a      	ldr	r2, [r3, #0]
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee5a:	6879      	ldr	r1, [r7, #4]
 800ee5c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800ee5e:	440b      	add	r3, r1
 800ee60:	1ad3      	subs	r3, r2, r3
 800ee62:	3301      	adds	r3, #1
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	dd07      	ble.n	800ee78 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	8b5b      	ldrh	r3, [r3, #26]
 800ee6c:	f043 0302 	orr.w	r3, r3, #2
 800ee70:	b29a      	uxth	r2, r3
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800ee76:	e7ff      	b.n	800ee78 <tcp_receive+0xf08>
 800ee78:	bf00      	nop
 800ee7a:	3750      	adds	r7, #80	@ 0x50
 800ee7c:	46bd      	mov	sp, r7
 800ee7e:	bdb0      	pop	{r4, r5, r7, pc}
 800ee80:	24010584 	.word	0x24010584
 800ee84:	24010564 	.word	0x24010564
 800ee88:	2401058e 	.word	0x2401058e
 800ee8c:	08015858 	.word	0x08015858
 800ee90:	08015c00 	.word	0x08015c00
 800ee94:	080158a4 	.word	0x080158a4

0800ee98 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800ee98:	b480      	push	{r7}
 800ee9a:	b083      	sub	sp, #12
 800ee9c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800ee9e:	4b15      	ldr	r3, [pc, #84]	@ (800eef4 <tcp_get_next_optbyte+0x5c>)
 800eea0:	881b      	ldrh	r3, [r3, #0]
 800eea2:	1c5a      	adds	r2, r3, #1
 800eea4:	b291      	uxth	r1, r2
 800eea6:	4a13      	ldr	r2, [pc, #76]	@ (800eef4 <tcp_get_next_optbyte+0x5c>)
 800eea8:	8011      	strh	r1, [r2, #0]
 800eeaa:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800eeac:	4b12      	ldr	r3, [pc, #72]	@ (800eef8 <tcp_get_next_optbyte+0x60>)
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d004      	beq.n	800eebe <tcp_get_next_optbyte+0x26>
 800eeb4:	4b11      	ldr	r3, [pc, #68]	@ (800eefc <tcp_get_next_optbyte+0x64>)
 800eeb6:	881b      	ldrh	r3, [r3, #0]
 800eeb8:	88fa      	ldrh	r2, [r7, #6]
 800eeba:	429a      	cmp	r2, r3
 800eebc:	d208      	bcs.n	800eed0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800eebe:	4b10      	ldr	r3, [pc, #64]	@ (800ef00 <tcp_get_next_optbyte+0x68>)
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	3314      	adds	r3, #20
 800eec4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800eec6:	88fb      	ldrh	r3, [r7, #6]
 800eec8:	683a      	ldr	r2, [r7, #0]
 800eeca:	4413      	add	r3, r2
 800eecc:	781b      	ldrb	r3, [r3, #0]
 800eece:	e00b      	b.n	800eee8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800eed0:	88fb      	ldrh	r3, [r7, #6]
 800eed2:	b2da      	uxtb	r2, r3
 800eed4:	4b09      	ldr	r3, [pc, #36]	@ (800eefc <tcp_get_next_optbyte+0x64>)
 800eed6:	881b      	ldrh	r3, [r3, #0]
 800eed8:	b2db      	uxtb	r3, r3
 800eeda:	1ad3      	subs	r3, r2, r3
 800eedc:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800eede:	4b06      	ldr	r3, [pc, #24]	@ (800eef8 <tcp_get_next_optbyte+0x60>)
 800eee0:	681a      	ldr	r2, [r3, #0]
 800eee2:	797b      	ldrb	r3, [r7, #5]
 800eee4:	4413      	add	r3, r2
 800eee6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800eee8:	4618      	mov	r0, r3
 800eeea:	370c      	adds	r7, #12
 800eeec:	46bd      	mov	sp, r7
 800eeee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef2:	4770      	bx	lr
 800eef4:	24010580 	.word	0x24010580
 800eef8:	2401057c 	.word	0x2401057c
 800eefc:	2401057a 	.word	0x2401057a
 800ef00:	24010574 	.word	0x24010574

0800ef04 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800ef04:	b580      	push	{r7, lr}
 800ef06:	b084      	sub	sp, #16
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d106      	bne.n	800ef20 <tcp_parseopt+0x1c>
 800ef12:	4b33      	ldr	r3, [pc, #204]	@ (800efe0 <tcp_parseopt+0xdc>)
 800ef14:	f240 727d 	movw	r2, #1917	@ 0x77d
 800ef18:	4932      	ldr	r1, [pc, #200]	@ (800efe4 <tcp_parseopt+0xe0>)
 800ef1a:	4833      	ldr	r0, [pc, #204]	@ (800efe8 <tcp_parseopt+0xe4>)
 800ef1c:	f004 fb58 	bl	80135d0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800ef20:	4b32      	ldr	r3, [pc, #200]	@ (800efec <tcp_parseopt+0xe8>)
 800ef22:	881b      	ldrh	r3, [r3, #0]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d057      	beq.n	800efd8 <tcp_parseopt+0xd4>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ef28:	4b31      	ldr	r3, [pc, #196]	@ (800eff0 <tcp_parseopt+0xec>)
 800ef2a:	2200      	movs	r2, #0
 800ef2c:	801a      	strh	r2, [r3, #0]
 800ef2e:	e047      	b.n	800efc0 <tcp_parseopt+0xbc>
      u8_t opt = tcp_get_next_optbyte();
 800ef30:	f7ff ffb2 	bl	800ee98 <tcp_get_next_optbyte>
 800ef34:	4603      	mov	r3, r0
 800ef36:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800ef38:	7bfb      	ldrb	r3, [r7, #15]
 800ef3a:	2b02      	cmp	r3, #2
 800ef3c:	d006      	beq.n	800ef4c <tcp_parseopt+0x48>
 800ef3e:	2b02      	cmp	r3, #2
 800ef40:	dc2b      	bgt.n	800ef9a <tcp_parseopt+0x96>
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d043      	beq.n	800efce <tcp_parseopt+0xca>
 800ef46:	2b01      	cmp	r3, #1
 800ef48:	d039      	beq.n	800efbe <tcp_parseopt+0xba>
 800ef4a:	e026      	b.n	800ef9a <tcp_parseopt+0x96>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800ef4c:	f7ff ffa4 	bl	800ee98 <tcp_get_next_optbyte>
 800ef50:	4603      	mov	r3, r0
 800ef52:	2b04      	cmp	r3, #4
 800ef54:	d13d      	bne.n	800efd2 <tcp_parseopt+0xce>
 800ef56:	4b26      	ldr	r3, [pc, #152]	@ (800eff0 <tcp_parseopt+0xec>)
 800ef58:	881b      	ldrh	r3, [r3, #0]
 800ef5a:	3301      	adds	r3, #1
 800ef5c:	4a23      	ldr	r2, [pc, #140]	@ (800efec <tcp_parseopt+0xe8>)
 800ef5e:	8812      	ldrh	r2, [r2, #0]
 800ef60:	4293      	cmp	r3, r2
 800ef62:	da36      	bge.n	800efd2 <tcp_parseopt+0xce>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800ef64:	f7ff ff98 	bl	800ee98 <tcp_get_next_optbyte>
 800ef68:	4603      	mov	r3, r0
 800ef6a:	021b      	lsls	r3, r3, #8
 800ef6c:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800ef6e:	f7ff ff93 	bl	800ee98 <tcp_get_next_optbyte>
 800ef72:	4603      	mov	r3, r0
 800ef74:	461a      	mov	r2, r3
 800ef76:	89bb      	ldrh	r3, [r7, #12]
 800ef78:	4313      	orrs	r3, r2
 800ef7a:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800ef7c:	89bb      	ldrh	r3, [r7, #12]
 800ef7e:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 800ef82:	4293      	cmp	r3, r2
 800ef84:	d804      	bhi.n	800ef90 <tcp_parseopt+0x8c>
 800ef86:	89bb      	ldrh	r3, [r7, #12]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d001      	beq.n	800ef90 <tcp_parseopt+0x8c>
 800ef8c:	89ba      	ldrh	r2, [r7, #12]
 800ef8e:	e001      	b.n	800ef94 <tcp_parseopt+0x90>
 800ef90:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800ef98:	e012      	b.n	800efc0 <tcp_parseopt+0xbc>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800ef9a:	f7ff ff7d 	bl	800ee98 <tcp_get_next_optbyte>
 800ef9e:	4603      	mov	r3, r0
 800efa0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800efa2:	7afb      	ldrb	r3, [r7, #11]
 800efa4:	2b01      	cmp	r3, #1
 800efa6:	d916      	bls.n	800efd6 <tcp_parseopt+0xd2>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800efa8:	7afb      	ldrb	r3, [r7, #11]
 800efaa:	b29a      	uxth	r2, r3
 800efac:	4b10      	ldr	r3, [pc, #64]	@ (800eff0 <tcp_parseopt+0xec>)
 800efae:	881b      	ldrh	r3, [r3, #0]
 800efb0:	4413      	add	r3, r2
 800efb2:	b29b      	uxth	r3, r3
 800efb4:	3b02      	subs	r3, #2
 800efb6:	b29a      	uxth	r2, r3
 800efb8:	4b0d      	ldr	r3, [pc, #52]	@ (800eff0 <tcp_parseopt+0xec>)
 800efba:	801a      	strh	r2, [r3, #0]
 800efbc:	e000      	b.n	800efc0 <tcp_parseopt+0xbc>
          break;
 800efbe:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800efc0:	4b0b      	ldr	r3, [pc, #44]	@ (800eff0 <tcp_parseopt+0xec>)
 800efc2:	881a      	ldrh	r2, [r3, #0]
 800efc4:	4b09      	ldr	r3, [pc, #36]	@ (800efec <tcp_parseopt+0xe8>)
 800efc6:	881b      	ldrh	r3, [r3, #0]
 800efc8:	429a      	cmp	r2, r3
 800efca:	d3b1      	bcc.n	800ef30 <tcp_parseopt+0x2c>
 800efcc:	e004      	b.n	800efd8 <tcp_parseopt+0xd4>
          return;
 800efce:	bf00      	nop
 800efd0:	e002      	b.n	800efd8 <tcp_parseopt+0xd4>
            return;
 800efd2:	bf00      	nop
 800efd4:	e000      	b.n	800efd8 <tcp_parseopt+0xd4>
            return;
 800efd6:	bf00      	nop
      }
    }
  }
}
 800efd8:	3710      	adds	r7, #16
 800efda:	46bd      	mov	sp, r7
 800efdc:	bd80      	pop	{r7, pc}
 800efde:	bf00      	nop
 800efe0:	08015858 	.word	0x08015858
 800efe4:	08015cbc 	.word	0x08015cbc
 800efe8:	080158a4 	.word	0x080158a4
 800efec:	24010578 	.word	0x24010578
 800eff0:	24010580 	.word	0x24010580

0800eff4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800eff4:	b480      	push	{r7}
 800eff6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800eff8:	4b05      	ldr	r3, [pc, #20]	@ (800f010 <tcp_trigger_input_pcb_close+0x1c>)
 800effa:	781b      	ldrb	r3, [r3, #0]
 800effc:	f043 0310 	orr.w	r3, r3, #16
 800f000:	b2da      	uxtb	r2, r3
 800f002:	4b03      	ldr	r3, [pc, #12]	@ (800f010 <tcp_trigger_input_pcb_close+0x1c>)
 800f004:	701a      	strb	r2, [r3, #0]
}
 800f006:	bf00      	nop
 800f008:	46bd      	mov	sp, r7
 800f00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f00e:	4770      	bx	lr
 800f010:	24010591 	.word	0x24010591

0800f014 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800f014:	b580      	push	{r7, lr}
 800f016:	b084      	sub	sp, #16
 800f018:	af00      	add	r7, sp, #0
 800f01a:	60f8      	str	r0, [r7, #12]
 800f01c:	60b9      	str	r1, [r7, #8]
 800f01e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d00a      	beq.n	800f03c <tcp_route+0x28>
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	7a1b      	ldrb	r3, [r3, #8]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d006      	beq.n	800f03c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	7a1b      	ldrb	r3, [r3, #8]
 800f032:	4618      	mov	r0, r3
 800f034:	f7fb fb0e 	bl	800a654 <netif_get_by_index>
 800f038:	4603      	mov	r3, r0
 800f03a:	e003      	b.n	800f044 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800f03c:	6878      	ldr	r0, [r7, #4]
 800f03e:	f002 fee1 	bl	8011e04 <ip4_route>
 800f042:	4603      	mov	r3, r0
  }
}
 800f044:	4618      	mov	r0, r3
 800f046:	3710      	adds	r7, #16
 800f048:	46bd      	mov	sp, r7
 800f04a:	bd80      	pop	{r7, pc}

0800f04c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800f04c:	b590      	push	{r4, r7, lr}
 800f04e:	b087      	sub	sp, #28
 800f050:	af00      	add	r7, sp, #0
 800f052:	60f8      	str	r0, [r7, #12]
 800f054:	60b9      	str	r1, [r7, #8]
 800f056:	603b      	str	r3, [r7, #0]
 800f058:	4613      	mov	r3, r2
 800f05a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d105      	bne.n	800f06e <tcp_create_segment+0x22>
 800f062:	4b43      	ldr	r3, [pc, #268]	@ (800f170 <tcp_create_segment+0x124>)
 800f064:	22a3      	movs	r2, #163	@ 0xa3
 800f066:	4943      	ldr	r1, [pc, #268]	@ (800f174 <tcp_create_segment+0x128>)
 800f068:	4843      	ldr	r0, [pc, #268]	@ (800f178 <tcp_create_segment+0x12c>)
 800f06a:	f004 fab1 	bl	80135d0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800f06e:	68bb      	ldr	r3, [r7, #8]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d105      	bne.n	800f080 <tcp_create_segment+0x34>
 800f074:	4b3e      	ldr	r3, [pc, #248]	@ (800f170 <tcp_create_segment+0x124>)
 800f076:	22a4      	movs	r2, #164	@ 0xa4
 800f078:	4940      	ldr	r1, [pc, #256]	@ (800f17c <tcp_create_segment+0x130>)
 800f07a:	483f      	ldr	r0, [pc, #252]	@ (800f178 <tcp_create_segment+0x12c>)
 800f07c:	f004 faa8 	bl	80135d0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f080:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800f084:	009b      	lsls	r3, r3, #2
 800f086:	b2db      	uxtb	r3, r3
 800f088:	f003 0304 	and.w	r3, r3, #4
 800f08c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800f08e:	2003      	movs	r0, #3
 800f090:	f7fa ff48 	bl	8009f24 <memp_malloc>
 800f094:	6138      	str	r0, [r7, #16]
 800f096:	693b      	ldr	r3, [r7, #16]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d104      	bne.n	800f0a6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800f09c:	68b8      	ldr	r0, [r7, #8]
 800f09e:	f7fb fe6b 	bl	800ad78 <pbuf_free>
    return NULL;
 800f0a2:	2300      	movs	r3, #0
 800f0a4:	e060      	b.n	800f168 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800f0a6:	693b      	ldr	r3, [r7, #16]
 800f0a8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800f0ac:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800f0ae:	693b      	ldr	r3, [r7, #16]
 800f0b0:	2200      	movs	r2, #0
 800f0b2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800f0b4:	693b      	ldr	r3, [r7, #16]
 800f0b6:	68ba      	ldr	r2, [r7, #8]
 800f0b8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800f0ba:	68bb      	ldr	r3, [r7, #8]
 800f0bc:	891a      	ldrh	r2, [r3, #8]
 800f0be:	7dfb      	ldrb	r3, [r7, #23]
 800f0c0:	b29b      	uxth	r3, r3
 800f0c2:	429a      	cmp	r2, r3
 800f0c4:	d205      	bcs.n	800f0d2 <tcp_create_segment+0x86>
 800f0c6:	4b2a      	ldr	r3, [pc, #168]	@ (800f170 <tcp_create_segment+0x124>)
 800f0c8:	22b0      	movs	r2, #176	@ 0xb0
 800f0ca:	492d      	ldr	r1, [pc, #180]	@ (800f180 <tcp_create_segment+0x134>)
 800f0cc:	482a      	ldr	r0, [pc, #168]	@ (800f178 <tcp_create_segment+0x12c>)
 800f0ce:	f004 fa7f 	bl	80135d0 <iprintf>
  seg->len = p->tot_len - optlen;
 800f0d2:	68bb      	ldr	r3, [r7, #8]
 800f0d4:	891a      	ldrh	r2, [r3, #8]
 800f0d6:	7dfb      	ldrb	r3, [r7, #23]
 800f0d8:	b29b      	uxth	r3, r3
 800f0da:	1ad3      	subs	r3, r2, r3
 800f0dc:	b29a      	uxth	r2, r3
 800f0de:	693b      	ldr	r3, [r7, #16]
 800f0e0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800f0e2:	2114      	movs	r1, #20
 800f0e4:	68b8      	ldr	r0, [r7, #8]
 800f0e6:	f7fb fdb1 	bl	800ac4c <pbuf_add_header>
 800f0ea:	4603      	mov	r3, r0
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d004      	beq.n	800f0fa <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800f0f0:	6938      	ldr	r0, [r7, #16]
 800f0f2:	f7fd f8cc 	bl	800c28e <tcp_seg_free>
    return NULL;
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	e036      	b.n	800f168 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800f0fa:	693b      	ldr	r3, [r7, #16]
 800f0fc:	685b      	ldr	r3, [r3, #4]
 800f0fe:	685a      	ldr	r2, [r3, #4]
 800f100:	693b      	ldr	r3, [r7, #16]
 800f102:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	8ada      	ldrh	r2, [r3, #22]
 800f108:	693b      	ldr	r3, [r7, #16]
 800f10a:	68dc      	ldr	r4, [r3, #12]
 800f10c:	4610      	mov	r0, r2
 800f10e:	f7fa f969 	bl	80093e4 <lwip_htons>
 800f112:	4603      	mov	r3, r0
 800f114:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	8b1a      	ldrh	r2, [r3, #24]
 800f11a:	693b      	ldr	r3, [r7, #16]
 800f11c:	68dc      	ldr	r4, [r3, #12]
 800f11e:	4610      	mov	r0, r2
 800f120:	f7fa f960 	bl	80093e4 <lwip_htons>
 800f124:	4603      	mov	r3, r0
 800f126:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800f128:	693b      	ldr	r3, [r7, #16]
 800f12a:	68dc      	ldr	r4, [r3, #12]
 800f12c:	6838      	ldr	r0, [r7, #0]
 800f12e:	f7fa f96e 	bl	800940e <lwip_htonl>
 800f132:	4603      	mov	r3, r0
 800f134:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800f136:	7dfb      	ldrb	r3, [r7, #23]
 800f138:	089b      	lsrs	r3, r3, #2
 800f13a:	b2db      	uxtb	r3, r3
 800f13c:	3305      	adds	r3, #5
 800f13e:	b29b      	uxth	r3, r3
 800f140:	031b      	lsls	r3, r3, #12
 800f142:	b29a      	uxth	r2, r3
 800f144:	79fb      	ldrb	r3, [r7, #7]
 800f146:	b29b      	uxth	r3, r3
 800f148:	4313      	orrs	r3, r2
 800f14a:	b29a      	uxth	r2, r3
 800f14c:	693b      	ldr	r3, [r7, #16]
 800f14e:	68dc      	ldr	r4, [r3, #12]
 800f150:	4610      	mov	r0, r2
 800f152:	f7fa f947 	bl	80093e4 <lwip_htons>
 800f156:	4603      	mov	r3, r0
 800f158:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800f15a:	693b      	ldr	r3, [r7, #16]
 800f15c:	68db      	ldr	r3, [r3, #12]
 800f15e:	2200      	movs	r2, #0
 800f160:	749a      	strb	r2, [r3, #18]
 800f162:	2200      	movs	r2, #0
 800f164:	74da      	strb	r2, [r3, #19]
  return seg;
 800f166:	693b      	ldr	r3, [r7, #16]
}
 800f168:	4618      	mov	r0, r3
 800f16a:	371c      	adds	r7, #28
 800f16c:	46bd      	mov	sp, r7
 800f16e:	bd90      	pop	{r4, r7, pc}
 800f170:	08015cd8 	.word	0x08015cd8
 800f174:	08015d0c 	.word	0x08015d0c
 800f178:	08015d2c 	.word	0x08015d2c
 800f17c:	08015d54 	.word	0x08015d54
 800f180:	08015d78 	.word	0x08015d78

0800f184 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800f184:	b590      	push	{r4, r7, lr}
 800f186:	b08b      	sub	sp, #44	@ 0x2c
 800f188:	af02      	add	r7, sp, #8
 800f18a:	6078      	str	r0, [r7, #4]
 800f18c:	460b      	mov	r3, r1
 800f18e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800f190:	2300      	movs	r3, #0
 800f192:	61fb      	str	r3, [r7, #28]
 800f194:	2300      	movs	r3, #0
 800f196:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800f198:	2300      	movs	r3, #0
 800f19a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d106      	bne.n	800f1b0 <tcp_split_unsent_seg+0x2c>
 800f1a2:	4b95      	ldr	r3, [pc, #596]	@ (800f3f8 <tcp_split_unsent_seg+0x274>)
 800f1a4:	f240 324b 	movw	r2, #843	@ 0x34b
 800f1a8:	4994      	ldr	r1, [pc, #592]	@ (800f3fc <tcp_split_unsent_seg+0x278>)
 800f1aa:	4895      	ldr	r0, [pc, #596]	@ (800f400 <tcp_split_unsent_seg+0x27c>)
 800f1ac:	f004 fa10 	bl	80135d0 <iprintf>

  useg = pcb->unsent;
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f1b4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800f1b6:	697b      	ldr	r3, [r7, #20]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d102      	bne.n	800f1c2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800f1bc:	f04f 33ff 	mov.w	r3, #4294967295
 800f1c0:	e116      	b.n	800f3f0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800f1c2:	887b      	ldrh	r3, [r7, #2]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d109      	bne.n	800f1dc <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800f1c8:	4b8b      	ldr	r3, [pc, #556]	@ (800f3f8 <tcp_split_unsent_seg+0x274>)
 800f1ca:	f240 3253 	movw	r2, #851	@ 0x353
 800f1ce:	498d      	ldr	r1, [pc, #564]	@ (800f404 <tcp_split_unsent_seg+0x280>)
 800f1d0:	488b      	ldr	r0, [pc, #556]	@ (800f400 <tcp_split_unsent_seg+0x27c>)
 800f1d2:	f004 f9fd 	bl	80135d0 <iprintf>
    return ERR_VAL;
 800f1d6:	f06f 0305 	mvn.w	r3, #5
 800f1da:	e109      	b.n	800f3f0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800f1dc:	697b      	ldr	r3, [r7, #20]
 800f1de:	891b      	ldrh	r3, [r3, #8]
 800f1e0:	887a      	ldrh	r2, [r7, #2]
 800f1e2:	429a      	cmp	r2, r3
 800f1e4:	d301      	bcc.n	800f1ea <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	e102      	b.n	800f3f0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f1ee:	887a      	ldrh	r2, [r7, #2]
 800f1f0:	429a      	cmp	r2, r3
 800f1f2:	d906      	bls.n	800f202 <tcp_split_unsent_seg+0x7e>
 800f1f4:	4b80      	ldr	r3, [pc, #512]	@ (800f3f8 <tcp_split_unsent_seg+0x274>)
 800f1f6:	f240 325b 	movw	r2, #859	@ 0x35b
 800f1fa:	4983      	ldr	r1, [pc, #524]	@ (800f408 <tcp_split_unsent_seg+0x284>)
 800f1fc:	4880      	ldr	r0, [pc, #512]	@ (800f400 <tcp_split_unsent_seg+0x27c>)
 800f1fe:	f004 f9e7 	bl	80135d0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800f202:	697b      	ldr	r3, [r7, #20]
 800f204:	891b      	ldrh	r3, [r3, #8]
 800f206:	2b00      	cmp	r3, #0
 800f208:	d106      	bne.n	800f218 <tcp_split_unsent_seg+0x94>
 800f20a:	4b7b      	ldr	r3, [pc, #492]	@ (800f3f8 <tcp_split_unsent_seg+0x274>)
 800f20c:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800f210:	497e      	ldr	r1, [pc, #504]	@ (800f40c <tcp_split_unsent_seg+0x288>)
 800f212:	487b      	ldr	r0, [pc, #492]	@ (800f400 <tcp_split_unsent_seg+0x27c>)
 800f214:	f004 f9dc 	bl	80135d0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800f218:	697b      	ldr	r3, [r7, #20]
 800f21a:	7a9b      	ldrb	r3, [r3, #10]
 800f21c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800f21e:	7bfb      	ldrb	r3, [r7, #15]
 800f220:	009b      	lsls	r3, r3, #2
 800f222:	b2db      	uxtb	r3, r3
 800f224:	f003 0304 	and.w	r3, r3, #4
 800f228:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800f22a:	697b      	ldr	r3, [r7, #20]
 800f22c:	891a      	ldrh	r2, [r3, #8]
 800f22e:	887b      	ldrh	r3, [r7, #2]
 800f230:	1ad3      	subs	r3, r2, r3
 800f232:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800f234:	7bbb      	ldrb	r3, [r7, #14]
 800f236:	b29a      	uxth	r2, r3
 800f238:	89bb      	ldrh	r3, [r7, #12]
 800f23a:	4413      	add	r3, r2
 800f23c:	b29b      	uxth	r3, r3
 800f23e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f242:	4619      	mov	r1, r3
 800f244:	2036      	movs	r0, #54	@ 0x36
 800f246:	f7fb faaf 	bl	800a7a8 <pbuf_alloc>
 800f24a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f24c:	693b      	ldr	r3, [r7, #16]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	f000 80b7 	beq.w	800f3c2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800f254:	697b      	ldr	r3, [r7, #20]
 800f256:	685b      	ldr	r3, [r3, #4]
 800f258:	891a      	ldrh	r2, [r3, #8]
 800f25a:	697b      	ldr	r3, [r7, #20]
 800f25c:	891b      	ldrh	r3, [r3, #8]
 800f25e:	1ad3      	subs	r3, r2, r3
 800f260:	b29a      	uxth	r2, r3
 800f262:	887b      	ldrh	r3, [r7, #2]
 800f264:	4413      	add	r3, r2
 800f266:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800f268:	697b      	ldr	r3, [r7, #20]
 800f26a:	6858      	ldr	r0, [r3, #4]
 800f26c:	693b      	ldr	r3, [r7, #16]
 800f26e:	685a      	ldr	r2, [r3, #4]
 800f270:	7bbb      	ldrb	r3, [r7, #14]
 800f272:	18d1      	adds	r1, r2, r3
 800f274:	897b      	ldrh	r3, [r7, #10]
 800f276:	89ba      	ldrh	r2, [r7, #12]
 800f278:	f7fb ff74 	bl	800b164 <pbuf_copy_partial>
 800f27c:	4603      	mov	r3, r0
 800f27e:	461a      	mov	r2, r3
 800f280:	89bb      	ldrh	r3, [r7, #12]
 800f282:	4293      	cmp	r3, r2
 800f284:	f040 809f 	bne.w	800f3c6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800f288:	697b      	ldr	r3, [r7, #20]
 800f28a:	68db      	ldr	r3, [r3, #12]
 800f28c:	899b      	ldrh	r3, [r3, #12]
 800f28e:	b29b      	uxth	r3, r3
 800f290:	4618      	mov	r0, r3
 800f292:	f7fa f8a7 	bl	80093e4 <lwip_htons>
 800f296:	4603      	mov	r3, r0
 800f298:	b2db      	uxtb	r3, r3
 800f29a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f29e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800f2a0:	2300      	movs	r3, #0
 800f2a2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800f2a4:	7efb      	ldrb	r3, [r7, #27]
 800f2a6:	f003 0308 	and.w	r3, r3, #8
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d007      	beq.n	800f2be <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800f2ae:	7efb      	ldrb	r3, [r7, #27]
 800f2b0:	f023 0308 	bic.w	r3, r3, #8
 800f2b4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800f2b6:	7ebb      	ldrb	r3, [r7, #26]
 800f2b8:	f043 0308 	orr.w	r3, r3, #8
 800f2bc:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800f2be:	7efb      	ldrb	r3, [r7, #27]
 800f2c0:	f003 0301 	and.w	r3, r3, #1
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d007      	beq.n	800f2d8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800f2c8:	7efb      	ldrb	r3, [r7, #27]
 800f2ca:	f023 0301 	bic.w	r3, r3, #1
 800f2ce:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800f2d0:	7ebb      	ldrb	r3, [r7, #26]
 800f2d2:	f043 0301 	orr.w	r3, r3, #1
 800f2d6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800f2d8:	697b      	ldr	r3, [r7, #20]
 800f2da:	68db      	ldr	r3, [r3, #12]
 800f2dc:	685b      	ldr	r3, [r3, #4]
 800f2de:	4618      	mov	r0, r3
 800f2e0:	f7fa f895 	bl	800940e <lwip_htonl>
 800f2e4:	4602      	mov	r2, r0
 800f2e6:	887b      	ldrh	r3, [r7, #2]
 800f2e8:	18d1      	adds	r1, r2, r3
 800f2ea:	7eba      	ldrb	r2, [r7, #26]
 800f2ec:	7bfb      	ldrb	r3, [r7, #15]
 800f2ee:	9300      	str	r3, [sp, #0]
 800f2f0:	460b      	mov	r3, r1
 800f2f2:	6939      	ldr	r1, [r7, #16]
 800f2f4:	6878      	ldr	r0, [r7, #4]
 800f2f6:	f7ff fea9 	bl	800f04c <tcp_create_segment>
 800f2fa:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800f2fc:	69fb      	ldr	r3, [r7, #28]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d063      	beq.n	800f3ca <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800f302:	697b      	ldr	r3, [r7, #20]
 800f304:	685b      	ldr	r3, [r3, #4]
 800f306:	4618      	mov	r0, r3
 800f308:	f7fb fdc4 	bl	800ae94 <pbuf_clen>
 800f30c:	4603      	mov	r3, r0
 800f30e:	461a      	mov	r2, r3
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f316:	1a9b      	subs	r3, r3, r2
 800f318:	b29a      	uxth	r2, r3
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800f320:	697b      	ldr	r3, [r7, #20]
 800f322:	6858      	ldr	r0, [r3, #4]
 800f324:	697b      	ldr	r3, [r7, #20]
 800f326:	685b      	ldr	r3, [r3, #4]
 800f328:	891a      	ldrh	r2, [r3, #8]
 800f32a:	89bb      	ldrh	r3, [r7, #12]
 800f32c:	1ad3      	subs	r3, r2, r3
 800f32e:	b29b      	uxth	r3, r3
 800f330:	4619      	mov	r1, r3
 800f332:	f7fb fb9b 	bl	800aa6c <pbuf_realloc>
  useg->len -= remainder;
 800f336:	697b      	ldr	r3, [r7, #20]
 800f338:	891a      	ldrh	r2, [r3, #8]
 800f33a:	89bb      	ldrh	r3, [r7, #12]
 800f33c:	1ad3      	subs	r3, r2, r3
 800f33e:	b29a      	uxth	r2, r3
 800f340:	697b      	ldr	r3, [r7, #20]
 800f342:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800f344:	697b      	ldr	r3, [r7, #20]
 800f346:	68db      	ldr	r3, [r3, #12]
 800f348:	899b      	ldrh	r3, [r3, #12]
 800f34a:	b29c      	uxth	r4, r3
 800f34c:	7efb      	ldrb	r3, [r7, #27]
 800f34e:	b29b      	uxth	r3, r3
 800f350:	4618      	mov	r0, r3
 800f352:	f7fa f847 	bl	80093e4 <lwip_htons>
 800f356:	4603      	mov	r3, r0
 800f358:	461a      	mov	r2, r3
 800f35a:	697b      	ldr	r3, [r7, #20]
 800f35c:	68db      	ldr	r3, [r3, #12]
 800f35e:	4322      	orrs	r2, r4
 800f360:	b292      	uxth	r2, r2
 800f362:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800f364:	697b      	ldr	r3, [r7, #20]
 800f366:	685b      	ldr	r3, [r3, #4]
 800f368:	4618      	mov	r0, r3
 800f36a:	f7fb fd93 	bl	800ae94 <pbuf_clen>
 800f36e:	4603      	mov	r3, r0
 800f370:	461a      	mov	r2, r3
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f378:	4413      	add	r3, r2
 800f37a:	b29a      	uxth	r2, r3
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f382:	69fb      	ldr	r3, [r7, #28]
 800f384:	685b      	ldr	r3, [r3, #4]
 800f386:	4618      	mov	r0, r3
 800f388:	f7fb fd84 	bl	800ae94 <pbuf_clen>
 800f38c:	4603      	mov	r3, r0
 800f38e:	461a      	mov	r2, r3
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f396:	4413      	add	r3, r2
 800f398:	b29a      	uxth	r2, r3
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800f3a0:	697b      	ldr	r3, [r7, #20]
 800f3a2:	681a      	ldr	r2, [r3, #0]
 800f3a4:	69fb      	ldr	r3, [r7, #28]
 800f3a6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800f3a8:	697b      	ldr	r3, [r7, #20]
 800f3aa:	69fa      	ldr	r2, [r7, #28]
 800f3ac:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800f3ae:	69fb      	ldr	r3, [r7, #28]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d103      	bne.n	800f3be <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	2200      	movs	r2, #0
 800f3ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800f3be:	2300      	movs	r3, #0
 800f3c0:	e016      	b.n	800f3f0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800f3c2:	bf00      	nop
 800f3c4:	e002      	b.n	800f3cc <tcp_split_unsent_seg+0x248>
    goto memerr;
 800f3c6:	bf00      	nop
 800f3c8:	e000      	b.n	800f3cc <tcp_split_unsent_seg+0x248>
    goto memerr;
 800f3ca:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800f3cc:	69fb      	ldr	r3, [r7, #28]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d006      	beq.n	800f3e0 <tcp_split_unsent_seg+0x25c>
 800f3d2:	4b09      	ldr	r3, [pc, #36]	@ (800f3f8 <tcp_split_unsent_seg+0x274>)
 800f3d4:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800f3d8:	490d      	ldr	r1, [pc, #52]	@ (800f410 <tcp_split_unsent_seg+0x28c>)
 800f3da:	4809      	ldr	r0, [pc, #36]	@ (800f400 <tcp_split_unsent_seg+0x27c>)
 800f3dc:	f004 f8f8 	bl	80135d0 <iprintf>
  if (p != NULL) {
 800f3e0:	693b      	ldr	r3, [r7, #16]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d002      	beq.n	800f3ec <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800f3e6:	6938      	ldr	r0, [r7, #16]
 800f3e8:	f7fb fcc6 	bl	800ad78 <pbuf_free>
  }

  return ERR_MEM;
 800f3ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f3f0:	4618      	mov	r0, r3
 800f3f2:	3724      	adds	r7, #36	@ 0x24
 800f3f4:	46bd      	mov	sp, r7
 800f3f6:	bd90      	pop	{r4, r7, pc}
 800f3f8:	08015cd8 	.word	0x08015cd8
 800f3fc:	0801606c 	.word	0x0801606c
 800f400:	08015d2c 	.word	0x08015d2c
 800f404:	08016090 	.word	0x08016090
 800f408:	080160b4 	.word	0x080160b4
 800f40c:	080160c4 	.word	0x080160c4
 800f410:	080160d4 	.word	0x080160d4

0800f414 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800f414:	b590      	push	{r4, r7, lr}
 800f416:	b085      	sub	sp, #20
 800f418:	af00      	add	r7, sp, #0
 800f41a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d106      	bne.n	800f430 <tcp_send_fin+0x1c>
 800f422:	4b21      	ldr	r3, [pc, #132]	@ (800f4a8 <tcp_send_fin+0x94>)
 800f424:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800f428:	4920      	ldr	r1, [pc, #128]	@ (800f4ac <tcp_send_fin+0x98>)
 800f42a:	4821      	ldr	r0, [pc, #132]	@ (800f4b0 <tcp_send_fin+0x9c>)
 800f42c:	f004 f8d0 	bl	80135d0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f434:	2b00      	cmp	r3, #0
 800f436:	d02e      	beq.n	800f496 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f43c:	60fb      	str	r3, [r7, #12]
 800f43e:	e002      	b.n	800f446 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d1f8      	bne.n	800f440 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	68db      	ldr	r3, [r3, #12]
 800f452:	899b      	ldrh	r3, [r3, #12]
 800f454:	b29b      	uxth	r3, r3
 800f456:	4618      	mov	r0, r3
 800f458:	f7f9 ffc4 	bl	80093e4 <lwip_htons>
 800f45c:	4603      	mov	r3, r0
 800f45e:	b2db      	uxtb	r3, r3
 800f460:	f003 0307 	and.w	r3, r3, #7
 800f464:	2b00      	cmp	r3, #0
 800f466:	d116      	bne.n	800f496 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	68db      	ldr	r3, [r3, #12]
 800f46c:	899b      	ldrh	r3, [r3, #12]
 800f46e:	b29c      	uxth	r4, r3
 800f470:	2001      	movs	r0, #1
 800f472:	f7f9 ffb7 	bl	80093e4 <lwip_htons>
 800f476:	4603      	mov	r3, r0
 800f478:	461a      	mov	r2, r3
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	68db      	ldr	r3, [r3, #12]
 800f47e:	4322      	orrs	r2, r4
 800f480:	b292      	uxth	r2, r2
 800f482:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	8b5b      	ldrh	r3, [r3, #26]
 800f488:	f043 0320 	orr.w	r3, r3, #32
 800f48c:	b29a      	uxth	r2, r3
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800f492:	2300      	movs	r3, #0
 800f494:	e004      	b.n	800f4a0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800f496:	2101      	movs	r1, #1
 800f498:	6878      	ldr	r0, [r7, #4]
 800f49a:	f000 f80b 	bl	800f4b4 <tcp_enqueue_flags>
 800f49e:	4603      	mov	r3, r0
}
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	3714      	adds	r7, #20
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	bd90      	pop	{r4, r7, pc}
 800f4a8:	08015cd8 	.word	0x08015cd8
 800f4ac:	080160e0 	.word	0x080160e0
 800f4b0:	08015d2c 	.word	0x08015d2c

0800f4b4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800f4b4:	b580      	push	{r7, lr}
 800f4b6:	b08a      	sub	sp, #40	@ 0x28
 800f4b8:	af02      	add	r7, sp, #8
 800f4ba:	6078      	str	r0, [r7, #4]
 800f4bc:	460b      	mov	r3, r1
 800f4be:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800f4c0:	2300      	movs	r3, #0
 800f4c2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800f4c8:	78fb      	ldrb	r3, [r7, #3]
 800f4ca:	f003 0303 	and.w	r3, r3, #3
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d106      	bne.n	800f4e0 <tcp_enqueue_flags+0x2c>
 800f4d2:	4b67      	ldr	r3, [pc, #412]	@ (800f670 <tcp_enqueue_flags+0x1bc>)
 800f4d4:	f240 4211 	movw	r2, #1041	@ 0x411
 800f4d8:	4966      	ldr	r1, [pc, #408]	@ (800f674 <tcp_enqueue_flags+0x1c0>)
 800f4da:	4867      	ldr	r0, [pc, #412]	@ (800f678 <tcp_enqueue_flags+0x1c4>)
 800f4dc:	f004 f878 	bl	80135d0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d106      	bne.n	800f4f4 <tcp_enqueue_flags+0x40>
 800f4e6:	4b62      	ldr	r3, [pc, #392]	@ (800f670 <tcp_enqueue_flags+0x1bc>)
 800f4e8:	f240 4213 	movw	r2, #1043	@ 0x413
 800f4ec:	4963      	ldr	r1, [pc, #396]	@ (800f67c <tcp_enqueue_flags+0x1c8>)
 800f4ee:	4862      	ldr	r0, [pc, #392]	@ (800f678 <tcp_enqueue_flags+0x1c4>)
 800f4f0:	f004 f86e 	bl	80135d0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800f4f4:	78fb      	ldrb	r3, [r7, #3]
 800f4f6:	f003 0302 	and.w	r3, r3, #2
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d001      	beq.n	800f502 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800f4fe:	2301      	movs	r3, #1
 800f500:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f502:	7ffb      	ldrb	r3, [r7, #31]
 800f504:	009b      	lsls	r3, r3, #2
 800f506:	b2db      	uxtb	r3, r3
 800f508:	f003 0304 	and.w	r3, r3, #4
 800f50c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800f50e:	7dfb      	ldrb	r3, [r7, #23]
 800f510:	b29b      	uxth	r3, r3
 800f512:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f516:	4619      	mov	r1, r3
 800f518:	2036      	movs	r0, #54	@ 0x36
 800f51a:	f7fb f945 	bl	800a7a8 <pbuf_alloc>
 800f51e:	6138      	str	r0, [r7, #16]
 800f520:	693b      	ldr	r3, [r7, #16]
 800f522:	2b00      	cmp	r3, #0
 800f524:	d109      	bne.n	800f53a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	8b5b      	ldrh	r3, [r3, #26]
 800f52a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f52e:	b29a      	uxth	r2, r3
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800f534:	f04f 33ff 	mov.w	r3, #4294967295
 800f538:	e095      	b.n	800f666 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800f53a:	693b      	ldr	r3, [r7, #16]
 800f53c:	895a      	ldrh	r2, [r3, #10]
 800f53e:	7dfb      	ldrb	r3, [r7, #23]
 800f540:	b29b      	uxth	r3, r3
 800f542:	429a      	cmp	r2, r3
 800f544:	d206      	bcs.n	800f554 <tcp_enqueue_flags+0xa0>
 800f546:	4b4a      	ldr	r3, [pc, #296]	@ (800f670 <tcp_enqueue_flags+0x1bc>)
 800f548:	f240 4239 	movw	r2, #1081	@ 0x439
 800f54c:	494c      	ldr	r1, [pc, #304]	@ (800f680 <tcp_enqueue_flags+0x1cc>)
 800f54e:	484a      	ldr	r0, [pc, #296]	@ (800f678 <tcp_enqueue_flags+0x1c4>)
 800f550:	f004 f83e 	bl	80135d0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800f558:	78fa      	ldrb	r2, [r7, #3]
 800f55a:	7ffb      	ldrb	r3, [r7, #31]
 800f55c:	9300      	str	r3, [sp, #0]
 800f55e:	460b      	mov	r3, r1
 800f560:	6939      	ldr	r1, [r7, #16]
 800f562:	6878      	ldr	r0, [r7, #4]
 800f564:	f7ff fd72 	bl	800f04c <tcp_create_segment>
 800f568:	60f8      	str	r0, [r7, #12]
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d109      	bne.n	800f584 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	8b5b      	ldrh	r3, [r3, #26]
 800f574:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f578:	b29a      	uxth	r2, r3
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800f57e:	f04f 33ff 	mov.w	r3, #4294967295
 800f582:	e070      	b.n	800f666 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	68db      	ldr	r3, [r3, #12]
 800f588:	f003 0303 	and.w	r3, r3, #3
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d006      	beq.n	800f59e <tcp_enqueue_flags+0xea>
 800f590:	4b37      	ldr	r3, [pc, #220]	@ (800f670 <tcp_enqueue_flags+0x1bc>)
 800f592:	f240 4242 	movw	r2, #1090	@ 0x442
 800f596:	493b      	ldr	r1, [pc, #236]	@ (800f684 <tcp_enqueue_flags+0x1d0>)
 800f598:	4837      	ldr	r0, [pc, #220]	@ (800f678 <tcp_enqueue_flags+0x1c4>)
 800f59a:	f004 f819 	bl	80135d0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	891b      	ldrh	r3, [r3, #8]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d006      	beq.n	800f5b4 <tcp_enqueue_flags+0x100>
 800f5a6:	4b32      	ldr	r3, [pc, #200]	@ (800f670 <tcp_enqueue_flags+0x1bc>)
 800f5a8:	f240 4243 	movw	r2, #1091	@ 0x443
 800f5ac:	4936      	ldr	r1, [pc, #216]	@ (800f688 <tcp_enqueue_flags+0x1d4>)
 800f5ae:	4832      	ldr	r0, [pc, #200]	@ (800f678 <tcp_enqueue_flags+0x1c4>)
 800f5b0:	f004 f80e 	bl	80135d0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d103      	bne.n	800f5c4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	68fa      	ldr	r2, [r7, #12]
 800f5c0:	66da      	str	r2, [r3, #108]	@ 0x6c
 800f5c2:	e00d      	b.n	800f5e0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f5c8:	61bb      	str	r3, [r7, #24]
 800f5ca:	e002      	b.n	800f5d2 <tcp_enqueue_flags+0x11e>
 800f5cc:	69bb      	ldr	r3, [r7, #24]
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	61bb      	str	r3, [r7, #24]
 800f5d2:	69bb      	ldr	r3, [r7, #24]
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d1f8      	bne.n	800f5cc <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800f5da:	69bb      	ldr	r3, [r7, #24]
 800f5dc:	68fa      	ldr	r2, [r7, #12]
 800f5de:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	2200      	movs	r2, #0
 800f5e4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800f5e8:	78fb      	ldrb	r3, [r7, #3]
 800f5ea:	f003 0302 	and.w	r3, r3, #2
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d104      	bne.n	800f5fc <tcp_enqueue_flags+0x148>
 800f5f2:	78fb      	ldrb	r3, [r7, #3]
 800f5f4:	f003 0301 	and.w	r3, r3, #1
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d004      	beq.n	800f606 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f600:	1c5a      	adds	r2, r3, #1
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800f606:	78fb      	ldrb	r3, [r7, #3]
 800f608:	f003 0301 	and.w	r3, r3, #1
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d006      	beq.n	800f61e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	8b5b      	ldrh	r3, [r3, #26]
 800f614:	f043 0320 	orr.w	r3, r3, #32
 800f618:	b29a      	uxth	r2, r3
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	685b      	ldr	r3, [r3, #4]
 800f622:	4618      	mov	r0, r3
 800f624:	f7fb fc36 	bl	800ae94 <pbuf_clen>
 800f628:	4603      	mov	r3, r0
 800f62a:	461a      	mov	r2, r3
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f632:	4413      	add	r3, r2
 800f634:	b29a      	uxth	r2, r3
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f642:	2b00      	cmp	r3, #0
 800f644:	d00e      	beq.n	800f664 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d10a      	bne.n	800f664 <tcp_enqueue_flags+0x1b0>
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f652:	2b00      	cmp	r3, #0
 800f654:	d106      	bne.n	800f664 <tcp_enqueue_flags+0x1b0>
 800f656:	4b06      	ldr	r3, [pc, #24]	@ (800f670 <tcp_enqueue_flags+0x1bc>)
 800f658:	f240 4265 	movw	r2, #1125	@ 0x465
 800f65c:	490b      	ldr	r1, [pc, #44]	@ (800f68c <tcp_enqueue_flags+0x1d8>)
 800f65e:	4806      	ldr	r0, [pc, #24]	@ (800f678 <tcp_enqueue_flags+0x1c4>)
 800f660:	f003 ffb6 	bl	80135d0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800f664:	2300      	movs	r3, #0
}
 800f666:	4618      	mov	r0, r3
 800f668:	3720      	adds	r7, #32
 800f66a:	46bd      	mov	sp, r7
 800f66c:	bd80      	pop	{r7, pc}
 800f66e:	bf00      	nop
 800f670:	08015cd8 	.word	0x08015cd8
 800f674:	080160fc 	.word	0x080160fc
 800f678:	08015d2c 	.word	0x08015d2c
 800f67c:	08016154 	.word	0x08016154
 800f680:	08016174 	.word	0x08016174
 800f684:	080161b0 	.word	0x080161b0
 800f688:	080161c8 	.word	0x080161c8
 800f68c:	080161f4 	.word	0x080161f4

0800f690 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800f690:	b5b0      	push	{r4, r5, r7, lr}
 800f692:	b08a      	sub	sp, #40	@ 0x28
 800f694:	af00      	add	r7, sp, #0
 800f696:	6078      	str	r0, [r7, #4]
  struct netif *netif;
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();
 800f698:	f7f5 fe2e 	bl	80052f8 <sys_check_core_locking>

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d106      	bne.n	800f6b0 <tcp_output+0x20>
 800f6a2:	4b8a      	ldr	r3, [pc, #552]	@ (800f8cc <tcp_output+0x23c>)
 800f6a4:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800f6a8:	4989      	ldr	r1, [pc, #548]	@ (800f8d0 <tcp_output+0x240>)
 800f6aa:	488a      	ldr	r0, [pc, #552]	@ (800f8d4 <tcp_output+0x244>)
 800f6ac:	f003 ff90 	bl	80135d0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	7d1b      	ldrb	r3, [r3, #20]
 800f6b4:	2b01      	cmp	r3, #1
 800f6b6:	d106      	bne.n	800f6c6 <tcp_output+0x36>
 800f6b8:	4b84      	ldr	r3, [pc, #528]	@ (800f8cc <tcp_output+0x23c>)
 800f6ba:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800f6be:	4986      	ldr	r1, [pc, #536]	@ (800f8d8 <tcp_output+0x248>)
 800f6c0:	4884      	ldr	r0, [pc, #528]	@ (800f8d4 <tcp_output+0x244>)
 800f6c2:	f003 ff85 	bl	80135d0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800f6c6:	4b85      	ldr	r3, [pc, #532]	@ (800f8dc <tcp_output+0x24c>)
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	687a      	ldr	r2, [r7, #4]
 800f6cc:	429a      	cmp	r2, r3
 800f6ce:	d101      	bne.n	800f6d4 <tcp_output+0x44>
    return ERR_OK;
 800f6d0:	2300      	movs	r3, #0
 800f6d2:	e1ce      	b.n	800fa72 <tcp_output+0x3e2>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f6e0:	4293      	cmp	r3, r2
 800f6e2:	bf28      	it	cs
 800f6e4:	4613      	movcs	r3, r2
 800f6e6:	b29b      	uxth	r3, r3
 800f6e8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f6ee:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800f6f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d10b      	bne.n	800f70e <tcp_output+0x7e>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	8b5b      	ldrh	r3, [r3, #26]
 800f6fa:	f003 0302 	and.w	r3, r3, #2
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	f000 81aa 	beq.w	800fa58 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800f704:	6878      	ldr	r0, [r7, #4]
 800f706:	f000 fdcb 	bl	80102a0 <tcp_send_empty_ack>
 800f70a:	4603      	mov	r3, r0
 800f70c:	e1b1      	b.n	800fa72 <tcp_output+0x3e2>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800f70e:	6879      	ldr	r1, [r7, #4]
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	3304      	adds	r3, #4
 800f714:	461a      	mov	r2, r3
 800f716:	6878      	ldr	r0, [r7, #4]
 800f718:	f7ff fc7c 	bl	800f014 <tcp_route>
 800f71c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800f71e:	697b      	ldr	r3, [r7, #20]
 800f720:	2b00      	cmp	r3, #0
 800f722:	d102      	bne.n	800f72a <tcp_output+0x9a>
    return ERR_RTE;
 800f724:	f06f 0303 	mvn.w	r3, #3
 800f728:	e1a3      	b.n	800fa72 <tcp_output+0x3e2>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d003      	beq.n	800f738 <tcp_output+0xa8>
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	2b00      	cmp	r3, #0
 800f736:	d111      	bne.n	800f75c <tcp_output+0xcc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800f738:	697b      	ldr	r3, [r7, #20]
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d002      	beq.n	800f744 <tcp_output+0xb4>
 800f73e:	697b      	ldr	r3, [r7, #20]
 800f740:	3304      	adds	r3, #4
 800f742:	e000      	b.n	800f746 <tcp_output+0xb6>
 800f744:	2300      	movs	r3, #0
 800f746:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800f748:	693b      	ldr	r3, [r7, #16]
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d102      	bne.n	800f754 <tcp_output+0xc4>
      return ERR_RTE;
 800f74e:	f06f 0303 	mvn.w	r3, #3
 800f752:	e18e      	b.n	800fa72 <tcp_output+0x3e2>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800f754:	693b      	ldr	r3, [r7, #16]
 800f756:	681a      	ldr	r2, [r3, #0]
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800f75c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f75e:	68db      	ldr	r3, [r3, #12]
 800f760:	685b      	ldr	r3, [r3, #4]
 800f762:	4618      	mov	r0, r3
 800f764:	f7f9 fe53 	bl	800940e <lwip_htonl>
 800f768:	4602      	mov	r2, r0
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f76e:	1ad3      	subs	r3, r2, r3
 800f770:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f772:	8912      	ldrh	r2, [r2, #8]
 800f774:	4413      	add	r3, r2
 800f776:	69ba      	ldr	r2, [r7, #24]
 800f778:	429a      	cmp	r2, r3
 800f77a:	d227      	bcs.n	800f7cc <tcp_output+0x13c>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f782:	461a      	mov	r2, r3
 800f784:	69bb      	ldr	r3, [r7, #24]
 800f786:	4293      	cmp	r3, r2
 800f788:	d114      	bne.n	800f7b4 <tcp_output+0x124>
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d110      	bne.n	800f7b4 <tcp_output+0x124>
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d10b      	bne.n	800f7b4 <tcp_output+0x124>
      pcb->persist_cnt = 0;
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	2200      	movs	r2, #0
 800f7a0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	2201      	movs	r2, #1
 800f7a8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	2200      	movs	r2, #0
 800f7b0:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	8b5b      	ldrh	r3, [r3, #26]
 800f7b8:	f003 0302 	and.w	r3, r3, #2
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	f000 814d 	beq.w	800fa5c <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 800f7c2:	6878      	ldr	r0, [r7, #4]
 800f7c4:	f000 fd6c 	bl	80102a0 <tcp_send_empty_ack>
 800f7c8:	4603      	mov	r3, r0
 800f7ca:	e152      	b.n	800fa72 <tcp_output+0x3e2>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	2200      	movs	r2, #0
 800f7d0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f7d8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800f7da:	6a3b      	ldr	r3, [r7, #32]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	f000 811c 	beq.w	800fa1a <tcp_output+0x38a>
    for (; useg->next != NULL; useg = useg->next);
 800f7e2:	e002      	b.n	800f7ea <tcp_output+0x15a>
 800f7e4:	6a3b      	ldr	r3, [r7, #32]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	623b      	str	r3, [r7, #32]
 800f7ea:	6a3b      	ldr	r3, [r7, #32]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d1f8      	bne.n	800f7e4 <tcp_output+0x154>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800f7f2:	e112      	b.n	800fa1a <tcp_output+0x38a>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800f7f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7f6:	68db      	ldr	r3, [r3, #12]
 800f7f8:	899b      	ldrh	r3, [r3, #12]
 800f7fa:	b29b      	uxth	r3, r3
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	f7f9 fdf1 	bl	80093e4 <lwip_htons>
 800f802:	4603      	mov	r3, r0
 800f804:	b2db      	uxtb	r3, r3
 800f806:	f003 0304 	and.w	r3, r3, #4
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d006      	beq.n	800f81c <tcp_output+0x18c>
 800f80e:	4b2f      	ldr	r3, [pc, #188]	@ (800f8cc <tcp_output+0x23c>)
 800f810:	f240 5236 	movw	r2, #1334	@ 0x536
 800f814:	4932      	ldr	r1, [pc, #200]	@ (800f8e0 <tcp_output+0x250>)
 800f816:	482f      	ldr	r0, [pc, #188]	@ (800f8d4 <tcp_output+0x244>)
 800f818:	f003 feda 	bl	80135d0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f820:	2b00      	cmp	r3, #0
 800f822:	d01f      	beq.n	800f864 <tcp_output+0x1d4>
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	8b5b      	ldrh	r3, [r3, #26]
 800f828:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d119      	bne.n	800f864 <tcp_output+0x1d4>
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f834:	2b00      	cmp	r3, #0
 800f836:	d00b      	beq.n	800f850 <tcp_output+0x1c0>
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d110      	bne.n	800f864 <tcp_output+0x1d4>
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f846:	891a      	ldrh	r2, [r3, #8]
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f84c:	429a      	cmp	r2, r3
 800f84e:	d209      	bcs.n	800f864 <tcp_output+0x1d4>
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800f856:	2b00      	cmp	r3, #0
 800f858:	d004      	beq.n	800f864 <tcp_output+0x1d4>
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f860:	2b0f      	cmp	r3, #15
 800f862:	d901      	bls.n	800f868 <tcp_output+0x1d8>
 800f864:	2301      	movs	r3, #1
 800f866:	e000      	b.n	800f86a <tcp_output+0x1da>
 800f868:	2300      	movs	r3, #0
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d106      	bne.n	800f87c <tcp_output+0x1ec>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	8b5b      	ldrh	r3, [r3, #26]
 800f872:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f876:	2b00      	cmp	r3, #0
 800f878:	f000 80e4 	beq.w	800fa44 <tcp_output+0x3b4>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	7d1b      	ldrb	r3, [r3, #20]
 800f880:	2b02      	cmp	r3, #2
 800f882:	d00d      	beq.n	800f8a0 <tcp_output+0x210>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800f884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f886:	68db      	ldr	r3, [r3, #12]
 800f888:	899b      	ldrh	r3, [r3, #12]
 800f88a:	b29c      	uxth	r4, r3
 800f88c:	2010      	movs	r0, #16
 800f88e:	f7f9 fda9 	bl	80093e4 <lwip_htons>
 800f892:	4603      	mov	r3, r0
 800f894:	461a      	mov	r2, r3
 800f896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f898:	68db      	ldr	r3, [r3, #12]
 800f89a:	4322      	orrs	r2, r4
 800f89c:	b292      	uxth	r2, r2
 800f89e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800f8a0:	697a      	ldr	r2, [r7, #20]
 800f8a2:	6879      	ldr	r1, [r7, #4]
 800f8a4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f8a6:	f000 f909 	bl	800fabc <tcp_output_segment>
 800f8aa:	4603      	mov	r3, r0
 800f8ac:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800f8ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d016      	beq.n	800f8e4 <tcp_output+0x254>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	8b5b      	ldrh	r3, [r3, #26]
 800f8ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f8be:	b29a      	uxth	r2, r3
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	835a      	strh	r2, [r3, #26]
      return err;
 800f8c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f8c8:	e0d3      	b.n	800fa72 <tcp_output+0x3e2>
 800f8ca:	bf00      	nop
 800f8cc:	08015cd8 	.word	0x08015cd8
 800f8d0:	0801621c 	.word	0x0801621c
 800f8d4:	08015d2c 	.word	0x08015d2c
 800f8d8:	08016234 	.word	0x08016234
 800f8dc:	24010598 	.word	0x24010598
 800f8e0:	0801625c 	.word	0x0801625c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800f8e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8e6:	681a      	ldr	r2, [r3, #0]
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	7d1b      	ldrb	r3, [r3, #20]
 800f8f0:	2b02      	cmp	r3, #2
 800f8f2:	d006      	beq.n	800f902 <tcp_output+0x272>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	8b5b      	ldrh	r3, [r3, #26]
 800f8f8:	f023 0303 	bic.w	r3, r3, #3
 800f8fc:	b29a      	uxth	r2, r3
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800f902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f904:	68db      	ldr	r3, [r3, #12]
 800f906:	685b      	ldr	r3, [r3, #4]
 800f908:	4618      	mov	r0, r3
 800f90a:	f7f9 fd80 	bl	800940e <lwip_htonl>
 800f90e:	4604      	mov	r4, r0
 800f910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f912:	891b      	ldrh	r3, [r3, #8]
 800f914:	461d      	mov	r5, r3
 800f916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f918:	68db      	ldr	r3, [r3, #12]
 800f91a:	899b      	ldrh	r3, [r3, #12]
 800f91c:	b29b      	uxth	r3, r3
 800f91e:	4618      	mov	r0, r3
 800f920:	f7f9 fd60 	bl	80093e4 <lwip_htons>
 800f924:	4603      	mov	r3, r0
 800f926:	b2db      	uxtb	r3, r3
 800f928:	f003 0303 	and.w	r3, r3, #3
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d001      	beq.n	800f934 <tcp_output+0x2a4>
 800f930:	2301      	movs	r3, #1
 800f932:	e000      	b.n	800f936 <tcp_output+0x2a6>
 800f934:	2300      	movs	r3, #0
 800f936:	442b      	add	r3, r5
 800f938:	4423      	add	r3, r4
 800f93a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f940:	68bb      	ldr	r3, [r7, #8]
 800f942:	1ad3      	subs	r3, r2, r3
 800f944:	2b00      	cmp	r3, #0
 800f946:	da02      	bge.n	800f94e <tcp_output+0x2be>
      pcb->snd_nxt = snd_nxt;
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	68ba      	ldr	r2, [r7, #8]
 800f94c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800f94e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f950:	891b      	ldrh	r3, [r3, #8]
 800f952:	461c      	mov	r4, r3
 800f954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f956:	68db      	ldr	r3, [r3, #12]
 800f958:	899b      	ldrh	r3, [r3, #12]
 800f95a:	b29b      	uxth	r3, r3
 800f95c:	4618      	mov	r0, r3
 800f95e:	f7f9 fd41 	bl	80093e4 <lwip_htons>
 800f962:	4603      	mov	r3, r0
 800f964:	b2db      	uxtb	r3, r3
 800f966:	f003 0303 	and.w	r3, r3, #3
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d001      	beq.n	800f972 <tcp_output+0x2e2>
 800f96e:	2301      	movs	r3, #1
 800f970:	e000      	b.n	800f974 <tcp_output+0x2e4>
 800f972:	2300      	movs	r3, #0
 800f974:	4423      	add	r3, r4
 800f976:	2b00      	cmp	r3, #0
 800f978:	d049      	beq.n	800fa0e <tcp_output+0x37e>
      seg->next = NULL;
 800f97a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f97c:	2200      	movs	r2, #0
 800f97e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f984:	2b00      	cmp	r3, #0
 800f986:	d105      	bne.n	800f994 <tcp_output+0x304>
        pcb->unacked = seg;
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f98c:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800f98e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f990:	623b      	str	r3, [r7, #32]
 800f992:	e03f      	b.n	800fa14 <tcp_output+0x384>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800f994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f996:	68db      	ldr	r3, [r3, #12]
 800f998:	685b      	ldr	r3, [r3, #4]
 800f99a:	4618      	mov	r0, r3
 800f99c:	f7f9 fd37 	bl	800940e <lwip_htonl>
 800f9a0:	4604      	mov	r4, r0
 800f9a2:	6a3b      	ldr	r3, [r7, #32]
 800f9a4:	68db      	ldr	r3, [r3, #12]
 800f9a6:	685b      	ldr	r3, [r3, #4]
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	f7f9 fd30 	bl	800940e <lwip_htonl>
 800f9ae:	4603      	mov	r3, r0
 800f9b0:	1ae3      	subs	r3, r4, r3
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	da24      	bge.n	800fa00 <tcp_output+0x370>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	3370      	adds	r3, #112	@ 0x70
 800f9ba:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f9bc:	e002      	b.n	800f9c4 <tcp_output+0x334>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800f9be:	69fb      	ldr	r3, [r7, #28]
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f9c4:	69fb      	ldr	r3, [r7, #28]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d011      	beq.n	800f9f0 <tcp_output+0x360>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800f9cc:	69fb      	ldr	r3, [r7, #28]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	68db      	ldr	r3, [r3, #12]
 800f9d2:	685b      	ldr	r3, [r3, #4]
 800f9d4:	4618      	mov	r0, r3
 800f9d6:	f7f9 fd1a 	bl	800940e <lwip_htonl>
 800f9da:	4604      	mov	r4, r0
 800f9dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9de:	68db      	ldr	r3, [r3, #12]
 800f9e0:	685b      	ldr	r3, [r3, #4]
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	f7f9 fd13 	bl	800940e <lwip_htonl>
 800f9e8:	4603      	mov	r3, r0
 800f9ea:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	dbe6      	blt.n	800f9be <tcp_output+0x32e>
          }
          seg->next = (*cur_seg);
 800f9f0:	69fb      	ldr	r3, [r7, #28]
 800f9f2:	681a      	ldr	r2, [r3, #0]
 800f9f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9f6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800f9f8:	69fb      	ldr	r3, [r7, #28]
 800f9fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f9fc:	601a      	str	r2, [r3, #0]
 800f9fe:	e009      	b.n	800fa14 <tcp_output+0x384>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800fa00:	6a3b      	ldr	r3, [r7, #32]
 800fa02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fa04:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800fa06:	6a3b      	ldr	r3, [r7, #32]
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	623b      	str	r3, [r7, #32]
 800fa0c:	e002      	b.n	800fa14 <tcp_output+0x384>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800fa0e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fa10:	f7fc fc3d 	bl	800c28e <tcp_seg_free>
    }
    seg = pcb->unsent;
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fa18:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800fa1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d012      	beq.n	800fa46 <tcp_output+0x3b6>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800fa20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa22:	68db      	ldr	r3, [r3, #12]
 800fa24:	685b      	ldr	r3, [r3, #4]
 800fa26:	4618      	mov	r0, r3
 800fa28:	f7f9 fcf1 	bl	800940e <lwip_htonl>
 800fa2c:	4602      	mov	r2, r0
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fa32:	1ad3      	subs	r3, r2, r3
 800fa34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fa36:	8912      	ldrh	r2, [r2, #8]
 800fa38:	4413      	add	r3, r2
  while (seg != NULL &&
 800fa3a:	69ba      	ldr	r2, [r7, #24]
 800fa3c:	429a      	cmp	r2, r3
 800fa3e:	f4bf aed9 	bcs.w	800f7f4 <tcp_output+0x164>
 800fa42:	e000      	b.n	800fa46 <tcp_output+0x3b6>
      break;
 800fa44:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d108      	bne.n	800fa60 <tcp_output+0x3d0>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	2200      	movs	r2, #0
 800fa52:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800fa56:	e004      	b.n	800fa62 <tcp_output+0x3d2>
    goto output_done;
 800fa58:	bf00      	nop
 800fa5a:	e002      	b.n	800fa62 <tcp_output+0x3d2>
    goto output_done;
 800fa5c:	bf00      	nop
 800fa5e:	e000      	b.n	800fa62 <tcp_output+0x3d2>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800fa60:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	8b5b      	ldrh	r3, [r3, #26]
 800fa66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fa6a:	b29a      	uxth	r2, r3
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800fa70:	2300      	movs	r3, #0
}
 800fa72:	4618      	mov	r0, r3
 800fa74:	3728      	adds	r7, #40	@ 0x28
 800fa76:	46bd      	mov	sp, r7
 800fa78:	bdb0      	pop	{r4, r5, r7, pc}
 800fa7a:	bf00      	nop

0800fa7c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800fa7c:	b580      	push	{r7, lr}
 800fa7e:	b082      	sub	sp, #8
 800fa80:	af00      	add	r7, sp, #0
 800fa82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d106      	bne.n	800fa98 <tcp_output_segment_busy+0x1c>
 800fa8a:	4b09      	ldr	r3, [pc, #36]	@ (800fab0 <tcp_output_segment_busy+0x34>)
 800fa8c:	f240 529a 	movw	r2, #1434	@ 0x59a
 800fa90:	4908      	ldr	r1, [pc, #32]	@ (800fab4 <tcp_output_segment_busy+0x38>)
 800fa92:	4809      	ldr	r0, [pc, #36]	@ (800fab8 <tcp_output_segment_busy+0x3c>)
 800fa94:	f003 fd9c 	bl	80135d0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	685b      	ldr	r3, [r3, #4]
 800fa9c:	7b9b      	ldrb	r3, [r3, #14]
 800fa9e:	2b01      	cmp	r3, #1
 800faa0:	d001      	beq.n	800faa6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800faa2:	2301      	movs	r3, #1
 800faa4:	e000      	b.n	800faa8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800faa6:	2300      	movs	r3, #0
}
 800faa8:	4618      	mov	r0, r3
 800faaa:	3708      	adds	r7, #8
 800faac:	46bd      	mov	sp, r7
 800faae:	bd80      	pop	{r7, pc}
 800fab0:	08015cd8 	.word	0x08015cd8
 800fab4:	08016274 	.word	0x08016274
 800fab8:	08015d2c 	.word	0x08015d2c

0800fabc <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800fabc:	b5b0      	push	{r4, r5, r7, lr}
 800fabe:	b08c      	sub	sp, #48	@ 0x30
 800fac0:	af04      	add	r7, sp, #16
 800fac2:	60f8      	str	r0, [r7, #12]
 800fac4:	60b9      	str	r1, [r7, #8]
 800fac6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	2b00      	cmp	r3, #0
 800facc:	d106      	bne.n	800fadc <tcp_output_segment+0x20>
 800face:	4b64      	ldr	r3, [pc, #400]	@ (800fc60 <tcp_output_segment+0x1a4>)
 800fad0:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800fad4:	4963      	ldr	r1, [pc, #396]	@ (800fc64 <tcp_output_segment+0x1a8>)
 800fad6:	4864      	ldr	r0, [pc, #400]	@ (800fc68 <tcp_output_segment+0x1ac>)
 800fad8:	f003 fd7a 	bl	80135d0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800fadc:	68bb      	ldr	r3, [r7, #8]
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d106      	bne.n	800faf0 <tcp_output_segment+0x34>
 800fae2:	4b5f      	ldr	r3, [pc, #380]	@ (800fc60 <tcp_output_segment+0x1a4>)
 800fae4:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800fae8:	4960      	ldr	r1, [pc, #384]	@ (800fc6c <tcp_output_segment+0x1b0>)
 800faea:	485f      	ldr	r0, [pc, #380]	@ (800fc68 <tcp_output_segment+0x1ac>)
 800faec:	f003 fd70 	bl	80135d0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d106      	bne.n	800fb04 <tcp_output_segment+0x48>
 800faf6:	4b5a      	ldr	r3, [pc, #360]	@ (800fc60 <tcp_output_segment+0x1a4>)
 800faf8:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800fafc:	495c      	ldr	r1, [pc, #368]	@ (800fc70 <tcp_output_segment+0x1b4>)
 800fafe:	485a      	ldr	r0, [pc, #360]	@ (800fc68 <tcp_output_segment+0x1ac>)
 800fb00:	f003 fd66 	bl	80135d0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800fb04:	68f8      	ldr	r0, [r7, #12]
 800fb06:	f7ff ffb9 	bl	800fa7c <tcp_output_segment_busy>
 800fb0a:	4603      	mov	r3, r0
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d001      	beq.n	800fb14 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800fb10:	2300      	movs	r3, #0
 800fb12:	e0a1      	b.n	800fc58 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800fb14:	68bb      	ldr	r3, [r7, #8]
 800fb16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	68dc      	ldr	r4, [r3, #12]
 800fb1c:	4610      	mov	r0, r2
 800fb1e:	f7f9 fc76 	bl	800940e <lwip_htonl>
 800fb22:	4603      	mov	r3, r0
 800fb24:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800fb26:	68bb      	ldr	r3, [r7, #8]
 800fb28:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	68dc      	ldr	r4, [r3, #12]
 800fb2e:	4610      	mov	r0, r2
 800fb30:	f7f9 fc58 	bl	80093e4 <lwip_htons>
 800fb34:	4603      	mov	r3, r0
 800fb36:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800fb38:	68bb      	ldr	r3, [r7, #8]
 800fb3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb3c:	68ba      	ldr	r2, [r7, #8]
 800fb3e:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800fb40:	441a      	add	r2, r3
 800fb42:	68bb      	ldr	r3, [r7, #8]
 800fb44:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	68db      	ldr	r3, [r3, #12]
 800fb4a:	3314      	adds	r3, #20
 800fb4c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	7a9b      	ldrb	r3, [r3, #10]
 800fb52:	f003 0301 	and.w	r3, r3, #1
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d015      	beq.n	800fb86 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800fb5a:	68bb      	ldr	r3, [r7, #8]
 800fb5c:	3304      	adds	r3, #4
 800fb5e:	461a      	mov	r2, r3
 800fb60:	6879      	ldr	r1, [r7, #4]
 800fb62:	f240 50b4 	movw	r0, #1460	@ 0x5b4
 800fb66:	f7fc fe8b 	bl	800c880 <tcp_eff_send_mss_netif>
 800fb6a:	4603      	mov	r3, r0
 800fb6c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800fb6e:	8b7b      	ldrh	r3, [r7, #26]
 800fb70:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800fb74:	4618      	mov	r0, r3
 800fb76:	f7f9 fc4a 	bl	800940e <lwip_htonl>
 800fb7a:	4602      	mov	r2, r0
 800fb7c:	69fb      	ldr	r3, [r7, #28]
 800fb7e:	601a      	str	r2, [r3, #0]
    opts += 1;
 800fb80:	69fb      	ldr	r3, [r7, #28]
 800fb82:	3304      	adds	r3, #4
 800fb84:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800fb86:	68bb      	ldr	r3, [r7, #8]
 800fb88:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	da02      	bge.n	800fb96 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800fb90:	68bb      	ldr	r3, [r7, #8]
 800fb92:	2200      	movs	r2, #0
 800fb94:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800fb96:	68bb      	ldr	r3, [r7, #8]
 800fb98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d10c      	bne.n	800fbb8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800fb9e:	4b35      	ldr	r3, [pc, #212]	@ (800fc74 <tcp_output_segment+0x1b8>)
 800fba0:	681a      	ldr	r2, [r3, #0]
 800fba2:	68bb      	ldr	r3, [r7, #8]
 800fba4:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	68db      	ldr	r3, [r3, #12]
 800fbaa:	685b      	ldr	r3, [r3, #4]
 800fbac:	4618      	mov	r0, r3
 800fbae:	f7f9 fc2e 	bl	800940e <lwip_htonl>
 800fbb2:	4602      	mov	r2, r0
 800fbb4:	68bb      	ldr	r3, [r7, #8]
 800fbb6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	68da      	ldr	r2, [r3, #12]
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	685b      	ldr	r3, [r3, #4]
 800fbc0:	685b      	ldr	r3, [r3, #4]
 800fbc2:	1ad3      	subs	r3, r2, r3
 800fbc4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	685b      	ldr	r3, [r3, #4]
 800fbca:	8959      	ldrh	r1, [r3, #10]
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	685b      	ldr	r3, [r3, #4]
 800fbd0:	8b3a      	ldrh	r2, [r7, #24]
 800fbd2:	1a8a      	subs	r2, r1, r2
 800fbd4:	b292      	uxth	r2, r2
 800fbd6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	685b      	ldr	r3, [r3, #4]
 800fbdc:	8919      	ldrh	r1, [r3, #8]
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	685b      	ldr	r3, [r3, #4]
 800fbe2:	8b3a      	ldrh	r2, [r7, #24]
 800fbe4:	1a8a      	subs	r2, r1, r2
 800fbe6:	b292      	uxth	r2, r2
 800fbe8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	685b      	ldr	r3, [r3, #4]
 800fbee:	68fa      	ldr	r2, [r7, #12]
 800fbf0:	68d2      	ldr	r2, [r2, #12]
 800fbf2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	68db      	ldr	r3, [r3, #12]
 800fbf8:	2200      	movs	r2, #0
 800fbfa:	741a      	strb	r2, [r3, #16]
 800fbfc:	2200      	movs	r2, #0
 800fbfe:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	68da      	ldr	r2, [r3, #12]
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	7a9b      	ldrb	r3, [r3, #10]
 800fc08:	f003 0301 	and.w	r3, r3, #1
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d001      	beq.n	800fc14 <tcp_output_segment+0x158>
 800fc10:	2318      	movs	r3, #24
 800fc12:	e000      	b.n	800fc16 <tcp_output_segment+0x15a>
 800fc14:	2314      	movs	r3, #20
 800fc16:	4413      	add	r3, r2
 800fc18:	69fa      	ldr	r2, [r7, #28]
 800fc1a:	429a      	cmp	r2, r3
 800fc1c:	d006      	beq.n	800fc2c <tcp_output_segment+0x170>
 800fc1e:	4b10      	ldr	r3, [pc, #64]	@ (800fc60 <tcp_output_segment+0x1a4>)
 800fc20:	f240 621c 	movw	r2, #1564	@ 0x61c
 800fc24:	4914      	ldr	r1, [pc, #80]	@ (800fc78 <tcp_output_segment+0x1bc>)
 800fc26:	4810      	ldr	r0, [pc, #64]	@ (800fc68 <tcp_output_segment+0x1ac>)
 800fc28:	f003 fcd2 	bl	80135d0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	6858      	ldr	r0, [r3, #4]
 800fc30:	68b9      	ldr	r1, [r7, #8]
 800fc32:	68bb      	ldr	r3, [r7, #8]
 800fc34:	1d1c      	adds	r4, r3, #4
 800fc36:	68bb      	ldr	r3, [r7, #8]
 800fc38:	7add      	ldrb	r5, [r3, #11]
 800fc3a:	68bb      	ldr	r3, [r7, #8]
 800fc3c:	7a9b      	ldrb	r3, [r3, #10]
 800fc3e:	687a      	ldr	r2, [r7, #4]
 800fc40:	9202      	str	r2, [sp, #8]
 800fc42:	2206      	movs	r2, #6
 800fc44:	9201      	str	r2, [sp, #4]
 800fc46:	9300      	str	r3, [sp, #0]
 800fc48:	462b      	mov	r3, r5
 800fc4a:	4622      	mov	r2, r4
 800fc4c:	f002 fa9a 	bl	8012184 <ip4_output_if>
 800fc50:	4603      	mov	r3, r0
 800fc52:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800fc54:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fc58:	4618      	mov	r0, r3
 800fc5a:	3720      	adds	r7, #32
 800fc5c:	46bd      	mov	sp, r7
 800fc5e:	bdb0      	pop	{r4, r5, r7, pc}
 800fc60:	08015cd8 	.word	0x08015cd8
 800fc64:	0801629c 	.word	0x0801629c
 800fc68:	08015d2c 	.word	0x08015d2c
 800fc6c:	080162bc 	.word	0x080162bc
 800fc70:	080162dc 	.word	0x080162dc
 800fc74:	2401054c 	.word	0x2401054c
 800fc78:	08016300 	.word	0x08016300

0800fc7c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800fc7c:	b5b0      	push	{r4, r5, r7, lr}
 800fc7e:	b084      	sub	sp, #16
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d106      	bne.n	800fc98 <tcp_rexmit_rto_prepare+0x1c>
 800fc8a:	4b31      	ldr	r3, [pc, #196]	@ (800fd50 <tcp_rexmit_rto_prepare+0xd4>)
 800fc8c:	f240 6263 	movw	r2, #1635	@ 0x663
 800fc90:	4930      	ldr	r1, [pc, #192]	@ (800fd54 <tcp_rexmit_rto_prepare+0xd8>)
 800fc92:	4831      	ldr	r0, [pc, #196]	@ (800fd58 <tcp_rexmit_rto_prepare+0xdc>)
 800fc94:	f003 fc9c 	bl	80135d0 <iprintf>

  if (pcb->unacked == NULL) {
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d102      	bne.n	800fca6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800fca0:	f06f 0305 	mvn.w	r3, #5
 800fca4:	e050      	b.n	800fd48 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fcaa:	60fb      	str	r3, [r7, #12]
 800fcac:	e00b      	b.n	800fcc6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800fcae:	68f8      	ldr	r0, [r7, #12]
 800fcb0:	f7ff fee4 	bl	800fa7c <tcp_output_segment_busy>
 800fcb4:	4603      	mov	r3, r0
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d002      	beq.n	800fcc0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800fcba:	f06f 0305 	mvn.w	r3, #5
 800fcbe:	e043      	b.n	800fd48 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	60fb      	str	r3, [r7, #12]
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d1ef      	bne.n	800fcae <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800fcce:	68f8      	ldr	r0, [r7, #12]
 800fcd0:	f7ff fed4 	bl	800fa7c <tcp_output_segment_busy>
 800fcd4:	4603      	mov	r3, r0
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d002      	beq.n	800fce0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800fcda:	f06f 0305 	mvn.w	r3, #5
 800fcde:	e033      	b.n	800fd48 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	2200      	movs	r2, #0
 800fcf4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	8b5b      	ldrh	r3, [r3, #26]
 800fcfa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800fcfe:	b29a      	uxth	r2, r3
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	68db      	ldr	r3, [r3, #12]
 800fd08:	685b      	ldr	r3, [r3, #4]
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	f7f9 fb7f 	bl	800940e <lwip_htonl>
 800fd10:	4604      	mov	r4, r0
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	891b      	ldrh	r3, [r3, #8]
 800fd16:	461d      	mov	r5, r3
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	68db      	ldr	r3, [r3, #12]
 800fd1c:	899b      	ldrh	r3, [r3, #12]
 800fd1e:	b29b      	uxth	r3, r3
 800fd20:	4618      	mov	r0, r3
 800fd22:	f7f9 fb5f 	bl	80093e4 <lwip_htons>
 800fd26:	4603      	mov	r3, r0
 800fd28:	b2db      	uxtb	r3, r3
 800fd2a:	f003 0303 	and.w	r3, r3, #3
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d001      	beq.n	800fd36 <tcp_rexmit_rto_prepare+0xba>
 800fd32:	2301      	movs	r3, #1
 800fd34:	e000      	b.n	800fd38 <tcp_rexmit_rto_prepare+0xbc>
 800fd36:	2300      	movs	r3, #0
 800fd38:	442b      	add	r3, r5
 800fd3a:	18e2      	adds	r2, r4, r3
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	2200      	movs	r2, #0
 800fd44:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800fd46:	2300      	movs	r3, #0
}
 800fd48:	4618      	mov	r0, r3
 800fd4a:	3710      	adds	r7, #16
 800fd4c:	46bd      	mov	sp, r7
 800fd4e:	bdb0      	pop	{r4, r5, r7, pc}
 800fd50:	08015cd8 	.word	0x08015cd8
 800fd54:	08016314 	.word	0x08016314
 800fd58:	08015d2c 	.word	0x08015d2c

0800fd5c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800fd5c:	b580      	push	{r7, lr}
 800fd5e:	b082      	sub	sp, #8
 800fd60:	af00      	add	r7, sp, #0
 800fd62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d106      	bne.n	800fd78 <tcp_rexmit_rto_commit+0x1c>
 800fd6a:	4b0d      	ldr	r3, [pc, #52]	@ (800fda0 <tcp_rexmit_rto_commit+0x44>)
 800fd6c:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800fd70:	490c      	ldr	r1, [pc, #48]	@ (800fda4 <tcp_rexmit_rto_commit+0x48>)
 800fd72:	480d      	ldr	r0, [pc, #52]	@ (800fda8 <tcp_rexmit_rto_commit+0x4c>)
 800fd74:	f003 fc2c 	bl	80135d0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fd7e:	2bff      	cmp	r3, #255	@ 0xff
 800fd80:	d007      	beq.n	800fd92 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fd88:	3301      	adds	r3, #1
 800fd8a:	b2da      	uxtb	r2, r3
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800fd92:	6878      	ldr	r0, [r7, #4]
 800fd94:	f7ff fc7c 	bl	800f690 <tcp_output>
}
 800fd98:	bf00      	nop
 800fd9a:	3708      	adds	r7, #8
 800fd9c:	46bd      	mov	sp, r7
 800fd9e:	bd80      	pop	{r7, pc}
 800fda0:	08015cd8 	.word	0x08015cd8
 800fda4:	08016338 	.word	0x08016338
 800fda8:	08015d2c 	.word	0x08015d2c

0800fdac <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800fdac:	b580      	push	{r7, lr}
 800fdae:	b082      	sub	sp, #8
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d106      	bne.n	800fdc8 <tcp_rexmit_rto+0x1c>
 800fdba:	4b0a      	ldr	r3, [pc, #40]	@ (800fde4 <tcp_rexmit_rto+0x38>)
 800fdbc:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800fdc0:	4909      	ldr	r1, [pc, #36]	@ (800fde8 <tcp_rexmit_rto+0x3c>)
 800fdc2:	480a      	ldr	r0, [pc, #40]	@ (800fdec <tcp_rexmit_rto+0x40>)
 800fdc4:	f003 fc04 	bl	80135d0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800fdc8:	6878      	ldr	r0, [r7, #4]
 800fdca:	f7ff ff57 	bl	800fc7c <tcp_rexmit_rto_prepare>
 800fdce:	4603      	mov	r3, r0
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d102      	bne.n	800fdda <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800fdd4:	6878      	ldr	r0, [r7, #4]
 800fdd6:	f7ff ffc1 	bl	800fd5c <tcp_rexmit_rto_commit>
  }
}
 800fdda:	bf00      	nop
 800fddc:	3708      	adds	r7, #8
 800fdde:	46bd      	mov	sp, r7
 800fde0:	bd80      	pop	{r7, pc}
 800fde2:	bf00      	nop
 800fde4:	08015cd8 	.word	0x08015cd8
 800fde8:	0801635c 	.word	0x0801635c
 800fdec:	08015d2c 	.word	0x08015d2c

0800fdf0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800fdf0:	b590      	push	{r4, r7, lr}
 800fdf2:	b085      	sub	sp, #20
 800fdf4:	af00      	add	r7, sp, #0
 800fdf6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d106      	bne.n	800fe0c <tcp_rexmit+0x1c>
 800fdfe:	4b2f      	ldr	r3, [pc, #188]	@ (800febc <tcp_rexmit+0xcc>)
 800fe00:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800fe04:	492e      	ldr	r1, [pc, #184]	@ (800fec0 <tcp_rexmit+0xd0>)
 800fe06:	482f      	ldr	r0, [pc, #188]	@ (800fec4 <tcp_rexmit+0xd4>)
 800fe08:	f003 fbe2 	bl	80135d0 <iprintf>

  if (pcb->unacked == NULL) {
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d102      	bne.n	800fe1a <tcp_rexmit+0x2a>
    return ERR_VAL;
 800fe14:	f06f 0305 	mvn.w	r3, #5
 800fe18:	e04c      	b.n	800feb4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fe1e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800fe20:	68b8      	ldr	r0, [r7, #8]
 800fe22:	f7ff fe2b 	bl	800fa7c <tcp_output_segment_busy>
 800fe26:	4603      	mov	r3, r0
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d002      	beq.n	800fe32 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800fe2c:	f06f 0305 	mvn.w	r3, #5
 800fe30:	e040      	b.n	800feb4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800fe32:	68bb      	ldr	r3, [r7, #8]
 800fe34:	681a      	ldr	r2, [r3, #0]
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	336c      	adds	r3, #108	@ 0x6c
 800fe3e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800fe40:	e002      	b.n	800fe48 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d011      	beq.n	800fe74 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	68db      	ldr	r3, [r3, #12]
 800fe56:	685b      	ldr	r3, [r3, #4]
 800fe58:	4618      	mov	r0, r3
 800fe5a:	f7f9 fad8 	bl	800940e <lwip_htonl>
 800fe5e:	4604      	mov	r4, r0
 800fe60:	68bb      	ldr	r3, [r7, #8]
 800fe62:	68db      	ldr	r3, [r3, #12]
 800fe64:	685b      	ldr	r3, [r3, #4]
 800fe66:	4618      	mov	r0, r3
 800fe68:	f7f9 fad1 	bl	800940e <lwip_htonl>
 800fe6c:	4603      	mov	r3, r0
 800fe6e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	dbe6      	blt.n	800fe42 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	681a      	ldr	r2, [r3, #0]
 800fe78:	68bb      	ldr	r3, [r7, #8]
 800fe7a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	68ba      	ldr	r2, [r7, #8]
 800fe80:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800fe82:	68bb      	ldr	r3, [r7, #8]
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d103      	bne.n	800fe92 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	2200      	movs	r2, #0
 800fe8e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fe98:	2bff      	cmp	r3, #255	@ 0xff
 800fe9a:	d007      	beq.n	800feac <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fea2:	3301      	adds	r3, #1
 800fea4:	b2da      	uxtb	r2, r3
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	2200      	movs	r2, #0
 800feb0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800feb2:	2300      	movs	r3, #0
}
 800feb4:	4618      	mov	r0, r3
 800feb6:	3714      	adds	r7, #20
 800feb8:	46bd      	mov	sp, r7
 800feba:	bd90      	pop	{r4, r7, pc}
 800febc:	08015cd8 	.word	0x08015cd8
 800fec0:	08016378 	.word	0x08016378
 800fec4:	08015d2c 	.word	0x08015d2c

0800fec8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800fec8:	b580      	push	{r7, lr}
 800feca:	b082      	sub	sp, #8
 800fecc:	af00      	add	r7, sp, #0
 800fece:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d106      	bne.n	800fee4 <tcp_rexmit_fast+0x1c>
 800fed6:	4b2a      	ldr	r3, [pc, #168]	@ (800ff80 <tcp_rexmit_fast+0xb8>)
 800fed8:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800fedc:	4929      	ldr	r1, [pc, #164]	@ (800ff84 <tcp_rexmit_fast+0xbc>)
 800fede:	482a      	ldr	r0, [pc, #168]	@ (800ff88 <tcp_rexmit_fast+0xc0>)
 800fee0:	f003 fb76 	bl	80135d0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d045      	beq.n	800ff78 <tcp_rexmit_fast+0xb0>
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	8b5b      	ldrh	r3, [r3, #26]
 800fef0:	f003 0304 	and.w	r3, r3, #4
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d13f      	bne.n	800ff78 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800fef8:	6878      	ldr	r0, [r7, #4]
 800fefa:	f7ff ff79 	bl	800fdf0 <tcp_rexmit>
 800fefe:	4603      	mov	r3, r0
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d139      	bne.n	800ff78 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ff10:	4293      	cmp	r3, r2
 800ff12:	bf28      	it	cs
 800ff14:	4613      	movcs	r3, r2
 800ff16:	b29b      	uxth	r3, r3
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	da00      	bge.n	800ff1e <tcp_rexmit_fast+0x56>
 800ff1c:	3301      	adds	r3, #1
 800ff1e:	105b      	asrs	r3, r3, #1
 800ff20:	b29a      	uxth	r2, r3
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800ff2e:	461a      	mov	r2, r3
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ff34:	005b      	lsls	r3, r3, #1
 800ff36:	429a      	cmp	r2, r3
 800ff38:	d206      	bcs.n	800ff48 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ff3e:	005b      	lsls	r3, r3, #1
 800ff40:	b29a      	uxth	r2, r3
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ff52:	4619      	mov	r1, r3
 800ff54:	0049      	lsls	r1, r1, #1
 800ff56:	440b      	add	r3, r1
 800ff58:	b29b      	uxth	r3, r3
 800ff5a:	4413      	add	r3, r2
 800ff5c:	b29a      	uxth	r2, r3
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	8b5b      	ldrh	r3, [r3, #26]
 800ff68:	f043 0304 	orr.w	r3, r3, #4
 800ff6c:	b29a      	uxth	r2, r3
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	2200      	movs	r2, #0
 800ff76:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800ff78:	bf00      	nop
 800ff7a:	3708      	adds	r7, #8
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	bd80      	pop	{r7, pc}
 800ff80:	08015cd8 	.word	0x08015cd8
 800ff84:	08016390 	.word	0x08016390
 800ff88:	08015d2c 	.word	0x08015d2c

0800ff8c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800ff8c:	b580      	push	{r7, lr}
 800ff8e:	b086      	sub	sp, #24
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	60f8      	str	r0, [r7, #12]
 800ff94:	607b      	str	r3, [r7, #4]
 800ff96:	460b      	mov	r3, r1
 800ff98:	817b      	strh	r3, [r7, #10]
 800ff9a:	4613      	mov	r3, r2
 800ff9c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800ff9e:	897a      	ldrh	r2, [r7, #10]
 800ffa0:	893b      	ldrh	r3, [r7, #8]
 800ffa2:	4413      	add	r3, r2
 800ffa4:	b29b      	uxth	r3, r3
 800ffa6:	3314      	adds	r3, #20
 800ffa8:	b29b      	uxth	r3, r3
 800ffaa:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800ffae:	4619      	mov	r1, r3
 800ffb0:	2022      	movs	r0, #34	@ 0x22
 800ffb2:	f7fa fbf9 	bl	800a7a8 <pbuf_alloc>
 800ffb6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800ffb8:	697b      	ldr	r3, [r7, #20]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d04d      	beq.n	801005a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800ffbe:	897b      	ldrh	r3, [r7, #10]
 800ffc0:	3313      	adds	r3, #19
 800ffc2:	697a      	ldr	r2, [r7, #20]
 800ffc4:	8952      	ldrh	r2, [r2, #10]
 800ffc6:	4293      	cmp	r3, r2
 800ffc8:	db06      	blt.n	800ffd8 <tcp_output_alloc_header_common+0x4c>
 800ffca:	4b26      	ldr	r3, [pc, #152]	@ (8010064 <tcp_output_alloc_header_common+0xd8>)
 800ffcc:	f240 7223 	movw	r2, #1827	@ 0x723
 800ffd0:	4925      	ldr	r1, [pc, #148]	@ (8010068 <tcp_output_alloc_header_common+0xdc>)
 800ffd2:	4826      	ldr	r0, [pc, #152]	@ (801006c <tcp_output_alloc_header_common+0xe0>)
 800ffd4:	f003 fafc 	bl	80135d0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800ffd8:	697b      	ldr	r3, [r7, #20]
 800ffda:	685b      	ldr	r3, [r3, #4]
 800ffdc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800ffde:	8c3b      	ldrh	r3, [r7, #32]
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	f7f9 f9ff 	bl	80093e4 <lwip_htons>
 800ffe6:	4603      	mov	r3, r0
 800ffe8:	461a      	mov	r2, r3
 800ffea:	693b      	ldr	r3, [r7, #16]
 800ffec:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800ffee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fff0:	4618      	mov	r0, r3
 800fff2:	f7f9 f9f7 	bl	80093e4 <lwip_htons>
 800fff6:	4603      	mov	r3, r0
 800fff8:	461a      	mov	r2, r3
 800fffa:	693b      	ldr	r3, [r7, #16]
 800fffc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800fffe:	693b      	ldr	r3, [r7, #16]
 8010000:	687a      	ldr	r2, [r7, #4]
 8010002:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8010004:	68f8      	ldr	r0, [r7, #12]
 8010006:	f7f9 fa02 	bl	800940e <lwip_htonl>
 801000a:	4602      	mov	r2, r0
 801000c:	693b      	ldr	r3, [r7, #16]
 801000e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8010010:	897b      	ldrh	r3, [r7, #10]
 8010012:	089b      	lsrs	r3, r3, #2
 8010014:	b29b      	uxth	r3, r3
 8010016:	3305      	adds	r3, #5
 8010018:	b29b      	uxth	r3, r3
 801001a:	031b      	lsls	r3, r3, #12
 801001c:	b29a      	uxth	r2, r3
 801001e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010022:	b29b      	uxth	r3, r3
 8010024:	4313      	orrs	r3, r2
 8010026:	b29b      	uxth	r3, r3
 8010028:	4618      	mov	r0, r3
 801002a:	f7f9 f9db 	bl	80093e4 <lwip_htons>
 801002e:	4603      	mov	r3, r0
 8010030:	461a      	mov	r2, r3
 8010032:	693b      	ldr	r3, [r7, #16]
 8010034:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8010036:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8010038:	4618      	mov	r0, r3
 801003a:	f7f9 f9d3 	bl	80093e4 <lwip_htons>
 801003e:	4603      	mov	r3, r0
 8010040:	461a      	mov	r2, r3
 8010042:	693b      	ldr	r3, [r7, #16]
 8010044:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8010046:	693b      	ldr	r3, [r7, #16]
 8010048:	2200      	movs	r2, #0
 801004a:	741a      	strb	r2, [r3, #16]
 801004c:	2200      	movs	r2, #0
 801004e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8010050:	693b      	ldr	r3, [r7, #16]
 8010052:	2200      	movs	r2, #0
 8010054:	749a      	strb	r2, [r3, #18]
 8010056:	2200      	movs	r2, #0
 8010058:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801005a:	697b      	ldr	r3, [r7, #20]
}
 801005c:	4618      	mov	r0, r3
 801005e:	3718      	adds	r7, #24
 8010060:	46bd      	mov	sp, r7
 8010062:	bd80      	pop	{r7, pc}
 8010064:	08015cd8 	.word	0x08015cd8
 8010068:	080163b0 	.word	0x080163b0
 801006c:	08015d2c 	.word	0x08015d2c

08010070 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8010070:	b5b0      	push	{r4, r5, r7, lr}
 8010072:	b08a      	sub	sp, #40	@ 0x28
 8010074:	af04      	add	r7, sp, #16
 8010076:	60f8      	str	r0, [r7, #12]
 8010078:	607b      	str	r3, [r7, #4]
 801007a:	460b      	mov	r3, r1
 801007c:	817b      	strh	r3, [r7, #10]
 801007e:	4613      	mov	r3, r2
 8010080:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	2b00      	cmp	r3, #0
 8010086:	d106      	bne.n	8010096 <tcp_output_alloc_header+0x26>
 8010088:	4b15      	ldr	r3, [pc, #84]	@ (80100e0 <tcp_output_alloc_header+0x70>)
 801008a:	f240 7242 	movw	r2, #1858	@ 0x742
 801008e:	4915      	ldr	r1, [pc, #84]	@ (80100e4 <tcp_output_alloc_header+0x74>)
 8010090:	4815      	ldr	r0, [pc, #84]	@ (80100e8 <tcp_output_alloc_header+0x78>)
 8010092:	f003 fa9d 	bl	80135d0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	8adb      	ldrh	r3, [r3, #22]
 801009e:	68fa      	ldr	r2, [r7, #12]
 80100a0:	8b12      	ldrh	r2, [r2, #24]
 80100a2:	68f9      	ldr	r1, [r7, #12]
 80100a4:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 80100a6:	893d      	ldrh	r5, [r7, #8]
 80100a8:	897c      	ldrh	r4, [r7, #10]
 80100aa:	9103      	str	r1, [sp, #12]
 80100ac:	2110      	movs	r1, #16
 80100ae:	9102      	str	r1, [sp, #8]
 80100b0:	9201      	str	r2, [sp, #4]
 80100b2:	9300      	str	r3, [sp, #0]
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	462a      	mov	r2, r5
 80100b8:	4621      	mov	r1, r4
 80100ba:	f7ff ff67 	bl	800ff8c <tcp_output_alloc_header_common>
 80100be:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80100c0:	697b      	ldr	r3, [r7, #20]
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d006      	beq.n	80100d4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100ca:	68fa      	ldr	r2, [r7, #12]
 80100cc:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80100ce:	441a      	add	r2, r3
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 80100d4:	697b      	ldr	r3, [r7, #20]
}
 80100d6:	4618      	mov	r0, r3
 80100d8:	3718      	adds	r7, #24
 80100da:	46bd      	mov	sp, r7
 80100dc:	bdb0      	pop	{r4, r5, r7, pc}
 80100de:	bf00      	nop
 80100e0:	08015cd8 	.word	0x08015cd8
 80100e4:	080163e0 	.word	0x080163e0
 80100e8:	08015d2c 	.word	0x08015d2c

080100ec <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80100ec:	b580      	push	{r7, lr}
 80100ee:	b088      	sub	sp, #32
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	60f8      	str	r0, [r7, #12]
 80100f4:	60b9      	str	r1, [r7, #8]
 80100f6:	4611      	mov	r1, r2
 80100f8:	461a      	mov	r2, r3
 80100fa:	460b      	mov	r3, r1
 80100fc:	71fb      	strb	r3, [r7, #7]
 80100fe:	4613      	mov	r3, r2
 8010100:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8010102:	2300      	movs	r3, #0
 8010104:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8010106:	68bb      	ldr	r3, [r7, #8]
 8010108:	2b00      	cmp	r3, #0
 801010a:	d106      	bne.n	801011a <tcp_output_fill_options+0x2e>
 801010c:	4b12      	ldr	r3, [pc, #72]	@ (8010158 <tcp_output_fill_options+0x6c>)
 801010e:	f240 7256 	movw	r2, #1878	@ 0x756
 8010112:	4912      	ldr	r1, [pc, #72]	@ (801015c <tcp_output_fill_options+0x70>)
 8010114:	4812      	ldr	r0, [pc, #72]	@ (8010160 <tcp_output_fill_options+0x74>)
 8010116:	f003 fa5b 	bl	80135d0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801011a:	68bb      	ldr	r3, [r7, #8]
 801011c:	685b      	ldr	r3, [r3, #4]
 801011e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8010120:	69bb      	ldr	r3, [r7, #24]
 8010122:	3314      	adds	r3, #20
 8010124:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8010126:	8bfb      	ldrh	r3, [r7, #30]
 8010128:	009b      	lsls	r3, r3, #2
 801012a:	461a      	mov	r2, r3
 801012c:	79fb      	ldrb	r3, [r7, #7]
 801012e:	009b      	lsls	r3, r3, #2
 8010130:	f003 0304 	and.w	r3, r3, #4
 8010134:	4413      	add	r3, r2
 8010136:	3314      	adds	r3, #20
 8010138:	69ba      	ldr	r2, [r7, #24]
 801013a:	4413      	add	r3, r2
 801013c:	697a      	ldr	r2, [r7, #20]
 801013e:	429a      	cmp	r2, r3
 8010140:	d006      	beq.n	8010150 <tcp_output_fill_options+0x64>
 8010142:	4b05      	ldr	r3, [pc, #20]	@ (8010158 <tcp_output_fill_options+0x6c>)
 8010144:	f240 7275 	movw	r2, #1909	@ 0x775
 8010148:	4906      	ldr	r1, [pc, #24]	@ (8010164 <tcp_output_fill_options+0x78>)
 801014a:	4805      	ldr	r0, [pc, #20]	@ (8010160 <tcp_output_fill_options+0x74>)
 801014c:	f003 fa40 	bl	80135d0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8010150:	bf00      	nop
 8010152:	3720      	adds	r7, #32
 8010154:	46bd      	mov	sp, r7
 8010156:	bd80      	pop	{r7, pc}
 8010158:	08015cd8 	.word	0x08015cd8
 801015c:	08016408 	.word	0x08016408
 8010160:	08015d2c 	.word	0x08015d2c
 8010164:	08016300 	.word	0x08016300

08010168 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8010168:	b580      	push	{r7, lr}
 801016a:	b08a      	sub	sp, #40	@ 0x28
 801016c:	af04      	add	r7, sp, #16
 801016e:	60f8      	str	r0, [r7, #12]
 8010170:	60b9      	str	r1, [r7, #8]
 8010172:	607a      	str	r2, [r7, #4]
 8010174:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8010176:	68bb      	ldr	r3, [r7, #8]
 8010178:	2b00      	cmp	r3, #0
 801017a:	d106      	bne.n	801018a <tcp_output_control_segment+0x22>
 801017c:	4b1c      	ldr	r3, [pc, #112]	@ (80101f0 <tcp_output_control_segment+0x88>)
 801017e:	f240 7287 	movw	r2, #1927	@ 0x787
 8010182:	491c      	ldr	r1, [pc, #112]	@ (80101f4 <tcp_output_control_segment+0x8c>)
 8010184:	481c      	ldr	r0, [pc, #112]	@ (80101f8 <tcp_output_control_segment+0x90>)
 8010186:	f003 fa23 	bl	80135d0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801018a:	683a      	ldr	r2, [r7, #0]
 801018c:	6879      	ldr	r1, [r7, #4]
 801018e:	68f8      	ldr	r0, [r7, #12]
 8010190:	f7fe ff40 	bl	800f014 <tcp_route>
 8010194:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8010196:	693b      	ldr	r3, [r7, #16]
 8010198:	2b00      	cmp	r3, #0
 801019a:	d102      	bne.n	80101a2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801019c:	23fc      	movs	r3, #252	@ 0xfc
 801019e:	75fb      	strb	r3, [r7, #23]
 80101a0:	e01c      	b.n	80101dc <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d006      	beq.n	80101b6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	7adb      	ldrb	r3, [r3, #11]
 80101ac:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	7a9b      	ldrb	r3, [r3, #10]
 80101b2:	757b      	strb	r3, [r7, #21]
 80101b4:	e003      	b.n	80101be <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80101b6:	23ff      	movs	r3, #255	@ 0xff
 80101b8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80101ba:	2300      	movs	r3, #0
 80101bc:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80101be:	7dba      	ldrb	r2, [r7, #22]
 80101c0:	693b      	ldr	r3, [r7, #16]
 80101c2:	9302      	str	r3, [sp, #8]
 80101c4:	2306      	movs	r3, #6
 80101c6:	9301      	str	r3, [sp, #4]
 80101c8:	7d7b      	ldrb	r3, [r7, #21]
 80101ca:	9300      	str	r3, [sp, #0]
 80101cc:	4613      	mov	r3, r2
 80101ce:	683a      	ldr	r2, [r7, #0]
 80101d0:	6879      	ldr	r1, [r7, #4]
 80101d2:	68b8      	ldr	r0, [r7, #8]
 80101d4:	f001 ffd6 	bl	8012184 <ip4_output_if>
 80101d8:	4603      	mov	r3, r0
 80101da:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80101dc:	68b8      	ldr	r0, [r7, #8]
 80101de:	f7fa fdcb 	bl	800ad78 <pbuf_free>
  return err;
 80101e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80101e6:	4618      	mov	r0, r3
 80101e8:	3718      	adds	r7, #24
 80101ea:	46bd      	mov	sp, r7
 80101ec:	bd80      	pop	{r7, pc}
 80101ee:	bf00      	nop
 80101f0:	08015cd8 	.word	0x08015cd8
 80101f4:	08016430 	.word	0x08016430
 80101f8:	08015d2c 	.word	0x08015d2c

080101fc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80101fc:	b590      	push	{r4, r7, lr}
 80101fe:	b08b      	sub	sp, #44	@ 0x2c
 8010200:	af04      	add	r7, sp, #16
 8010202:	60f8      	str	r0, [r7, #12]
 8010204:	60b9      	str	r1, [r7, #8]
 8010206:	607a      	str	r2, [r7, #4]
 8010208:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801020a:	683b      	ldr	r3, [r7, #0]
 801020c:	2b00      	cmp	r3, #0
 801020e:	d106      	bne.n	801021e <tcp_rst+0x22>
 8010210:	4b1f      	ldr	r3, [pc, #124]	@ (8010290 <tcp_rst+0x94>)
 8010212:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8010216:	491f      	ldr	r1, [pc, #124]	@ (8010294 <tcp_rst+0x98>)
 8010218:	481f      	ldr	r0, [pc, #124]	@ (8010298 <tcp_rst+0x9c>)
 801021a:	f003 f9d9 	bl	80135d0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801021e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010220:	2b00      	cmp	r3, #0
 8010222:	d106      	bne.n	8010232 <tcp_rst+0x36>
 8010224:	4b1a      	ldr	r3, [pc, #104]	@ (8010290 <tcp_rst+0x94>)
 8010226:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 801022a:	491c      	ldr	r1, [pc, #112]	@ (801029c <tcp_rst+0xa0>)
 801022c:	481a      	ldr	r0, [pc, #104]	@ (8010298 <tcp_rst+0x9c>)
 801022e:	f003 f9cf 	bl	80135d0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010232:	2300      	movs	r3, #0
 8010234:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8010236:	f24d 0316 	movw	r3, #53270	@ 0xd016
 801023a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801023c:	7dfb      	ldrb	r3, [r7, #23]
 801023e:	b29c      	uxth	r4, r3
 8010240:	68b8      	ldr	r0, [r7, #8]
 8010242:	f7f9 f8e4 	bl	800940e <lwip_htonl>
 8010246:	4602      	mov	r2, r0
 8010248:	8abb      	ldrh	r3, [r7, #20]
 801024a:	9303      	str	r3, [sp, #12]
 801024c:	2314      	movs	r3, #20
 801024e:	9302      	str	r3, [sp, #8]
 8010250:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8010252:	9301      	str	r3, [sp, #4]
 8010254:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8010256:	9300      	str	r3, [sp, #0]
 8010258:	4613      	mov	r3, r2
 801025a:	2200      	movs	r2, #0
 801025c:	4621      	mov	r1, r4
 801025e:	6878      	ldr	r0, [r7, #4]
 8010260:	f7ff fe94 	bl	800ff8c <tcp_output_alloc_header_common>
 8010264:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8010266:	693b      	ldr	r3, [r7, #16]
 8010268:	2b00      	cmp	r3, #0
 801026a:	d00c      	beq.n	8010286 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801026c:	7dfb      	ldrb	r3, [r7, #23]
 801026e:	2200      	movs	r2, #0
 8010270:	6939      	ldr	r1, [r7, #16]
 8010272:	68f8      	ldr	r0, [r7, #12]
 8010274:	f7ff ff3a 	bl	80100ec <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8010278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801027a:	683a      	ldr	r2, [r7, #0]
 801027c:	6939      	ldr	r1, [r7, #16]
 801027e:	68f8      	ldr	r0, [r7, #12]
 8010280:	f7ff ff72 	bl	8010168 <tcp_output_control_segment>
 8010284:	e000      	b.n	8010288 <tcp_rst+0x8c>
    return;
 8010286:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8010288:	371c      	adds	r7, #28
 801028a:	46bd      	mov	sp, r7
 801028c:	bd90      	pop	{r4, r7, pc}
 801028e:	bf00      	nop
 8010290:	08015cd8 	.word	0x08015cd8
 8010294:	0801645c 	.word	0x0801645c
 8010298:	08015d2c 	.word	0x08015d2c
 801029c:	08016478 	.word	0x08016478

080102a0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80102a0:	b590      	push	{r4, r7, lr}
 80102a2:	b087      	sub	sp, #28
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80102a8:	2300      	movs	r3, #0
 80102aa:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80102ac:	2300      	movs	r3, #0
 80102ae:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d106      	bne.n	80102c4 <tcp_send_empty_ack+0x24>
 80102b6:	4b28      	ldr	r3, [pc, #160]	@ (8010358 <tcp_send_empty_ack+0xb8>)
 80102b8:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 80102bc:	4927      	ldr	r1, [pc, #156]	@ (801035c <tcp_send_empty_ack+0xbc>)
 80102be:	4828      	ldr	r0, [pc, #160]	@ (8010360 <tcp_send_empty_ack+0xc0>)
 80102c0:	f003 f986 	bl	80135d0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80102c4:	7dfb      	ldrb	r3, [r7, #23]
 80102c6:	009b      	lsls	r3, r3, #2
 80102c8:	b2db      	uxtb	r3, r3
 80102ca:	f003 0304 	and.w	r3, r3, #4
 80102ce:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80102d0:	7d7b      	ldrb	r3, [r7, #21]
 80102d2:	b29c      	uxth	r4, r3
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80102d8:	4618      	mov	r0, r3
 80102da:	f7f9 f898 	bl	800940e <lwip_htonl>
 80102de:	4603      	mov	r3, r0
 80102e0:	2200      	movs	r2, #0
 80102e2:	4621      	mov	r1, r4
 80102e4:	6878      	ldr	r0, [r7, #4]
 80102e6:	f7ff fec3 	bl	8010070 <tcp_output_alloc_header>
 80102ea:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80102ec:	693b      	ldr	r3, [r7, #16]
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d109      	bne.n	8010306 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	8b5b      	ldrh	r3, [r3, #26]
 80102f6:	f043 0303 	orr.w	r3, r3, #3
 80102fa:	b29a      	uxth	r2, r3
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8010300:	f06f 0301 	mvn.w	r3, #1
 8010304:	e023      	b.n	801034e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8010306:	7dbb      	ldrb	r3, [r7, #22]
 8010308:	7dfa      	ldrb	r2, [r7, #23]
 801030a:	6939      	ldr	r1, [r7, #16]
 801030c:	6878      	ldr	r0, [r7, #4]
 801030e:	f7ff feed 	bl	80100ec <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010312:	687a      	ldr	r2, [r7, #4]
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	3304      	adds	r3, #4
 8010318:	6939      	ldr	r1, [r7, #16]
 801031a:	6878      	ldr	r0, [r7, #4]
 801031c:	f7ff ff24 	bl	8010168 <tcp_output_control_segment>
 8010320:	4603      	mov	r3, r0
 8010322:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8010324:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010328:	2b00      	cmp	r3, #0
 801032a:	d007      	beq.n	801033c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	8b5b      	ldrh	r3, [r3, #26]
 8010330:	f043 0303 	orr.w	r3, r3, #3
 8010334:	b29a      	uxth	r2, r3
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	835a      	strh	r2, [r3, #26]
 801033a:	e006      	b.n	801034a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	8b5b      	ldrh	r3, [r3, #26]
 8010340:	f023 0303 	bic.w	r3, r3, #3
 8010344:	b29a      	uxth	r2, r3
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801034a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801034e:	4618      	mov	r0, r3
 8010350:	371c      	adds	r7, #28
 8010352:	46bd      	mov	sp, r7
 8010354:	bd90      	pop	{r4, r7, pc}
 8010356:	bf00      	nop
 8010358:	08015cd8 	.word	0x08015cd8
 801035c:	08016494 	.word	0x08016494
 8010360:	08015d2c 	.word	0x08015d2c

08010364 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8010364:	b590      	push	{r4, r7, lr}
 8010366:	b087      	sub	sp, #28
 8010368:	af00      	add	r7, sp, #0
 801036a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801036c:	2300      	movs	r3, #0
 801036e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	2b00      	cmp	r3, #0
 8010374:	d106      	bne.n	8010384 <tcp_keepalive+0x20>
 8010376:	4b18      	ldr	r3, [pc, #96]	@ (80103d8 <tcp_keepalive+0x74>)
 8010378:	f640 0224 	movw	r2, #2084	@ 0x824
 801037c:	4917      	ldr	r1, [pc, #92]	@ (80103dc <tcp_keepalive+0x78>)
 801037e:	4818      	ldr	r0, [pc, #96]	@ (80103e0 <tcp_keepalive+0x7c>)
 8010380:	f003 f926 	bl	80135d0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8010384:	7dfb      	ldrb	r3, [r7, #23]
 8010386:	b29c      	uxth	r4, r3
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801038c:	3b01      	subs	r3, #1
 801038e:	4618      	mov	r0, r3
 8010390:	f7f9 f83d 	bl	800940e <lwip_htonl>
 8010394:	4603      	mov	r3, r0
 8010396:	2200      	movs	r2, #0
 8010398:	4621      	mov	r1, r4
 801039a:	6878      	ldr	r0, [r7, #4]
 801039c:	f7ff fe68 	bl	8010070 <tcp_output_alloc_header>
 80103a0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80103a2:	693b      	ldr	r3, [r7, #16]
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d102      	bne.n	80103ae <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80103a8:	f04f 33ff 	mov.w	r3, #4294967295
 80103ac:	e010      	b.n	80103d0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80103ae:	7dfb      	ldrb	r3, [r7, #23]
 80103b0:	2200      	movs	r2, #0
 80103b2:	6939      	ldr	r1, [r7, #16]
 80103b4:	6878      	ldr	r0, [r7, #4]
 80103b6:	f7ff fe99 	bl	80100ec <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80103ba:	687a      	ldr	r2, [r7, #4]
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	3304      	adds	r3, #4
 80103c0:	6939      	ldr	r1, [r7, #16]
 80103c2:	6878      	ldr	r0, [r7, #4]
 80103c4:	f7ff fed0 	bl	8010168 <tcp_output_control_segment>
 80103c8:	4603      	mov	r3, r0
 80103ca:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80103cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80103d0:	4618      	mov	r0, r3
 80103d2:	371c      	adds	r7, #28
 80103d4:	46bd      	mov	sp, r7
 80103d6:	bd90      	pop	{r4, r7, pc}
 80103d8:	08015cd8 	.word	0x08015cd8
 80103dc:	080164b4 	.word	0x080164b4
 80103e0:	08015d2c 	.word	0x08015d2c

080103e4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80103e4:	b590      	push	{r4, r7, lr}
 80103e6:	b08b      	sub	sp, #44	@ 0x2c
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80103ec:	2300      	movs	r3, #0
 80103ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d106      	bne.n	8010406 <tcp_zero_window_probe+0x22>
 80103f8:	4b4c      	ldr	r3, [pc, #304]	@ (801052c <tcp_zero_window_probe+0x148>)
 80103fa:	f640 024f 	movw	r2, #2127	@ 0x84f
 80103fe:	494c      	ldr	r1, [pc, #304]	@ (8010530 <tcp_zero_window_probe+0x14c>)
 8010400:	484c      	ldr	r0, [pc, #304]	@ (8010534 <tcp_zero_window_probe+0x150>)
 8010402:	f003 f8e5 	bl	80135d0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801040a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801040c:	6a3b      	ldr	r3, [r7, #32]
 801040e:	2b00      	cmp	r3, #0
 8010410:	d101      	bne.n	8010416 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8010412:	2300      	movs	r3, #0
 8010414:	e086      	b.n	8010524 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801041c:	2bff      	cmp	r3, #255	@ 0xff
 801041e:	d007      	beq.n	8010430 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8010426:	3301      	adds	r3, #1
 8010428:	b2da      	uxtb	r2, r3
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8010430:	6a3b      	ldr	r3, [r7, #32]
 8010432:	68db      	ldr	r3, [r3, #12]
 8010434:	899b      	ldrh	r3, [r3, #12]
 8010436:	b29b      	uxth	r3, r3
 8010438:	4618      	mov	r0, r3
 801043a:	f7f8 ffd3 	bl	80093e4 <lwip_htons>
 801043e:	4603      	mov	r3, r0
 8010440:	b2db      	uxtb	r3, r3
 8010442:	f003 0301 	and.w	r3, r3, #1
 8010446:	2b00      	cmp	r3, #0
 8010448:	d005      	beq.n	8010456 <tcp_zero_window_probe+0x72>
 801044a:	6a3b      	ldr	r3, [r7, #32]
 801044c:	891b      	ldrh	r3, [r3, #8]
 801044e:	2b00      	cmp	r3, #0
 8010450:	d101      	bne.n	8010456 <tcp_zero_window_probe+0x72>
 8010452:	2301      	movs	r3, #1
 8010454:	e000      	b.n	8010458 <tcp_zero_window_probe+0x74>
 8010456:	2300      	movs	r3, #0
 8010458:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801045a:	7ffb      	ldrb	r3, [r7, #31]
 801045c:	2b00      	cmp	r3, #0
 801045e:	bf0c      	ite	eq
 8010460:	2301      	moveq	r3, #1
 8010462:	2300      	movne	r3, #0
 8010464:	b2db      	uxtb	r3, r3
 8010466:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8010468:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801046c:	b299      	uxth	r1, r3
 801046e:	6a3b      	ldr	r3, [r7, #32]
 8010470:	68db      	ldr	r3, [r3, #12]
 8010472:	685b      	ldr	r3, [r3, #4]
 8010474:	8bba      	ldrh	r2, [r7, #28]
 8010476:	6878      	ldr	r0, [r7, #4]
 8010478:	f7ff fdfa 	bl	8010070 <tcp_output_alloc_header>
 801047c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801047e:	69bb      	ldr	r3, [r7, #24]
 8010480:	2b00      	cmp	r3, #0
 8010482:	d102      	bne.n	801048a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8010484:	f04f 33ff 	mov.w	r3, #4294967295
 8010488:	e04c      	b.n	8010524 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801048a:	69bb      	ldr	r3, [r7, #24]
 801048c:	685b      	ldr	r3, [r3, #4]
 801048e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8010490:	7ffb      	ldrb	r3, [r7, #31]
 8010492:	2b00      	cmp	r3, #0
 8010494:	d011      	beq.n	80104ba <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8010496:	697b      	ldr	r3, [r7, #20]
 8010498:	899b      	ldrh	r3, [r3, #12]
 801049a:	b29b      	uxth	r3, r3
 801049c:	b21b      	sxth	r3, r3
 801049e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80104a2:	b21c      	sxth	r4, r3
 80104a4:	2011      	movs	r0, #17
 80104a6:	f7f8 ff9d 	bl	80093e4 <lwip_htons>
 80104aa:	4603      	mov	r3, r0
 80104ac:	b21b      	sxth	r3, r3
 80104ae:	4323      	orrs	r3, r4
 80104b0:	b21b      	sxth	r3, r3
 80104b2:	b29a      	uxth	r2, r3
 80104b4:	697b      	ldr	r3, [r7, #20]
 80104b6:	819a      	strh	r2, [r3, #12]
 80104b8:	e010      	b.n	80104dc <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80104ba:	69bb      	ldr	r3, [r7, #24]
 80104bc:	685b      	ldr	r3, [r3, #4]
 80104be:	3314      	adds	r3, #20
 80104c0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80104c2:	6a3b      	ldr	r3, [r7, #32]
 80104c4:	6858      	ldr	r0, [r3, #4]
 80104c6:	6a3b      	ldr	r3, [r7, #32]
 80104c8:	685b      	ldr	r3, [r3, #4]
 80104ca:	891a      	ldrh	r2, [r3, #8]
 80104cc:	6a3b      	ldr	r3, [r7, #32]
 80104ce:	891b      	ldrh	r3, [r3, #8]
 80104d0:	1ad3      	subs	r3, r2, r3
 80104d2:	b29b      	uxth	r3, r3
 80104d4:	2201      	movs	r2, #1
 80104d6:	6939      	ldr	r1, [r7, #16]
 80104d8:	f7fa fe44 	bl	800b164 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80104dc:	6a3b      	ldr	r3, [r7, #32]
 80104de:	68db      	ldr	r3, [r3, #12]
 80104e0:	685b      	ldr	r3, [r3, #4]
 80104e2:	4618      	mov	r0, r3
 80104e4:	f7f8 ff93 	bl	800940e <lwip_htonl>
 80104e8:	4603      	mov	r3, r0
 80104ea:	3301      	adds	r3, #1
 80104ec:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	1ad3      	subs	r3, r2, r3
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	da02      	bge.n	8010500 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	68fa      	ldr	r2, [r7, #12]
 80104fe:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010500:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010504:	2200      	movs	r2, #0
 8010506:	69b9      	ldr	r1, [r7, #24]
 8010508:	6878      	ldr	r0, [r7, #4]
 801050a:	f7ff fdef 	bl	80100ec <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801050e:	687a      	ldr	r2, [r7, #4]
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	3304      	adds	r3, #4
 8010514:	69b9      	ldr	r1, [r7, #24]
 8010516:	6878      	ldr	r0, [r7, #4]
 8010518:	f7ff fe26 	bl	8010168 <tcp_output_control_segment>
 801051c:	4603      	mov	r3, r0
 801051e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8010520:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8010524:	4618      	mov	r0, r3
 8010526:	372c      	adds	r7, #44	@ 0x2c
 8010528:	46bd      	mov	sp, r7
 801052a:	bd90      	pop	{r4, r7, pc}
 801052c:	08015cd8 	.word	0x08015cd8
 8010530:	080164d0 	.word	0x080164d0
 8010534:	08015d2c 	.word	0x08015d2c

08010538 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8010538:	b580      	push	{r7, lr}
 801053a:	b082      	sub	sp, #8
 801053c:	af00      	add	r7, sp, #0
 801053e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8010540:	f7fa fefe 	bl	800b340 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8010544:	4b0a      	ldr	r3, [pc, #40]	@ (8010570 <tcpip_tcp_timer+0x38>)
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	2b00      	cmp	r3, #0
 801054a:	d103      	bne.n	8010554 <tcpip_tcp_timer+0x1c>
 801054c:	4b09      	ldr	r3, [pc, #36]	@ (8010574 <tcpip_tcp_timer+0x3c>)
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	2b00      	cmp	r3, #0
 8010552:	d005      	beq.n	8010560 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010554:	2200      	movs	r2, #0
 8010556:	4908      	ldr	r1, [pc, #32]	@ (8010578 <tcpip_tcp_timer+0x40>)
 8010558:	20fa      	movs	r0, #250	@ 0xfa
 801055a:	f000 f8f5 	bl	8010748 <sys_timeout>
 801055e:	e003      	b.n	8010568 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8010560:	4b06      	ldr	r3, [pc, #24]	@ (801057c <tcpip_tcp_timer+0x44>)
 8010562:	2200      	movs	r2, #0
 8010564:	601a      	str	r2, [r3, #0]
  }
}
 8010566:	bf00      	nop
 8010568:	bf00      	nop
 801056a:	3708      	adds	r7, #8
 801056c:	46bd      	mov	sp, r7
 801056e:	bd80      	pop	{r7, pc}
 8010570:	24010558 	.word	0x24010558
 8010574:	2401055c 	.word	0x2401055c
 8010578:	08010539 	.word	0x08010539
 801057c:	240105a4 	.word	0x240105a4

08010580 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8010580:	b580      	push	{r7, lr}
 8010582:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();
 8010584:	f7f4 feb8 	bl	80052f8 <sys_check_core_locking>

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8010588:	4b0a      	ldr	r3, [pc, #40]	@ (80105b4 <tcp_timer_needed+0x34>)
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	2b00      	cmp	r3, #0
 801058e:	d10f      	bne.n	80105b0 <tcp_timer_needed+0x30>
 8010590:	4b09      	ldr	r3, [pc, #36]	@ (80105b8 <tcp_timer_needed+0x38>)
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	2b00      	cmp	r3, #0
 8010596:	d103      	bne.n	80105a0 <tcp_timer_needed+0x20>
 8010598:	4b08      	ldr	r3, [pc, #32]	@ (80105bc <tcp_timer_needed+0x3c>)
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	2b00      	cmp	r3, #0
 801059e:	d007      	beq.n	80105b0 <tcp_timer_needed+0x30>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80105a0:	4b04      	ldr	r3, [pc, #16]	@ (80105b4 <tcp_timer_needed+0x34>)
 80105a2:	2201      	movs	r2, #1
 80105a4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80105a6:	2200      	movs	r2, #0
 80105a8:	4905      	ldr	r1, [pc, #20]	@ (80105c0 <tcp_timer_needed+0x40>)
 80105aa:	20fa      	movs	r0, #250	@ 0xfa
 80105ac:	f000 f8cc 	bl	8010748 <sys_timeout>
  }
}
 80105b0:	bf00      	nop
 80105b2:	bd80      	pop	{r7, pc}
 80105b4:	240105a4 	.word	0x240105a4
 80105b8:	24010558 	.word	0x24010558
 80105bc:	2401055c 	.word	0x2401055c
 80105c0:	08010539 	.word	0x08010539

080105c4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80105c4:	b580      	push	{r7, lr}
 80105c6:	b086      	sub	sp, #24
 80105c8:	af00      	add	r7, sp, #0
 80105ca:	60f8      	str	r0, [r7, #12]
 80105cc:	60b9      	str	r1, [r7, #8]
 80105ce:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80105d0:	200a      	movs	r0, #10
 80105d2:	f7f9 fca7 	bl	8009f24 <memp_malloc>
 80105d6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80105d8:	693b      	ldr	r3, [r7, #16]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d109      	bne.n	80105f2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80105de:	693b      	ldr	r3, [r7, #16]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d151      	bne.n	8010688 <sys_timeout_abs+0xc4>
 80105e4:	4b2a      	ldr	r3, [pc, #168]	@ (8010690 <sys_timeout_abs+0xcc>)
 80105e6:	22be      	movs	r2, #190	@ 0xbe
 80105e8:	492a      	ldr	r1, [pc, #168]	@ (8010694 <sys_timeout_abs+0xd0>)
 80105ea:	482b      	ldr	r0, [pc, #172]	@ (8010698 <sys_timeout_abs+0xd4>)
 80105ec:	f002 fff0 	bl	80135d0 <iprintf>
    return;
 80105f0:	e04a      	b.n	8010688 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80105f2:	693b      	ldr	r3, [r7, #16]
 80105f4:	2200      	movs	r2, #0
 80105f6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80105f8:	693b      	ldr	r3, [r7, #16]
 80105fa:	68ba      	ldr	r2, [r7, #8]
 80105fc:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80105fe:	693b      	ldr	r3, [r7, #16]
 8010600:	687a      	ldr	r2, [r7, #4]
 8010602:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8010604:	693b      	ldr	r3, [r7, #16]
 8010606:	68fa      	ldr	r2, [r7, #12]
 8010608:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801060a:	4b24      	ldr	r3, [pc, #144]	@ (801069c <sys_timeout_abs+0xd8>)
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	2b00      	cmp	r3, #0
 8010610:	d103      	bne.n	801061a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8010612:	4a22      	ldr	r2, [pc, #136]	@ (801069c <sys_timeout_abs+0xd8>)
 8010614:	693b      	ldr	r3, [r7, #16]
 8010616:	6013      	str	r3, [r2, #0]
    return;
 8010618:	e037      	b.n	801068a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801061a:	693b      	ldr	r3, [r7, #16]
 801061c:	685a      	ldr	r2, [r3, #4]
 801061e:	4b1f      	ldr	r3, [pc, #124]	@ (801069c <sys_timeout_abs+0xd8>)
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	685b      	ldr	r3, [r3, #4]
 8010624:	1ad3      	subs	r3, r2, r3
 8010626:	0fdb      	lsrs	r3, r3, #31
 8010628:	f003 0301 	and.w	r3, r3, #1
 801062c:	b2db      	uxtb	r3, r3
 801062e:	2b00      	cmp	r3, #0
 8010630:	d007      	beq.n	8010642 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8010632:	4b1a      	ldr	r3, [pc, #104]	@ (801069c <sys_timeout_abs+0xd8>)
 8010634:	681a      	ldr	r2, [r3, #0]
 8010636:	693b      	ldr	r3, [r7, #16]
 8010638:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801063a:	4a18      	ldr	r2, [pc, #96]	@ (801069c <sys_timeout_abs+0xd8>)
 801063c:	693b      	ldr	r3, [r7, #16]
 801063e:	6013      	str	r3, [r2, #0]
 8010640:	e023      	b.n	801068a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8010642:	4b16      	ldr	r3, [pc, #88]	@ (801069c <sys_timeout_abs+0xd8>)
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	617b      	str	r3, [r7, #20]
 8010648:	e01a      	b.n	8010680 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801064a:	697b      	ldr	r3, [r7, #20]
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	2b00      	cmp	r3, #0
 8010650:	d00b      	beq.n	801066a <sys_timeout_abs+0xa6>
 8010652:	693b      	ldr	r3, [r7, #16]
 8010654:	685a      	ldr	r2, [r3, #4]
 8010656:	697b      	ldr	r3, [r7, #20]
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	685b      	ldr	r3, [r3, #4]
 801065c:	1ad3      	subs	r3, r2, r3
 801065e:	0fdb      	lsrs	r3, r3, #31
 8010660:	f003 0301 	and.w	r3, r3, #1
 8010664:	b2db      	uxtb	r3, r3
 8010666:	2b00      	cmp	r3, #0
 8010668:	d007      	beq.n	801067a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801066a:	697b      	ldr	r3, [r7, #20]
 801066c:	681a      	ldr	r2, [r3, #0]
 801066e:	693b      	ldr	r3, [r7, #16]
 8010670:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8010672:	697b      	ldr	r3, [r7, #20]
 8010674:	693a      	ldr	r2, [r7, #16]
 8010676:	601a      	str	r2, [r3, #0]
        break;
 8010678:	e007      	b.n	801068a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801067a:	697b      	ldr	r3, [r7, #20]
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	617b      	str	r3, [r7, #20]
 8010680:	697b      	ldr	r3, [r7, #20]
 8010682:	2b00      	cmp	r3, #0
 8010684:	d1e1      	bne.n	801064a <sys_timeout_abs+0x86>
 8010686:	e000      	b.n	801068a <sys_timeout_abs+0xc6>
    return;
 8010688:	bf00      	nop
      }
    }
  }
}
 801068a:	3718      	adds	r7, #24
 801068c:	46bd      	mov	sp, r7
 801068e:	bd80      	pop	{r7, pc}
 8010690:	080164f4 	.word	0x080164f4
 8010694:	08016528 	.word	0x08016528
 8010698:	08016568 	.word	0x08016568
 801069c:	2401059c 	.word	0x2401059c

080106a0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80106a0:	b580      	push	{r7, lr}
 80106a2:	b086      	sub	sp, #24
 80106a4:	af00      	add	r7, sp, #0
 80106a6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80106ac:	697b      	ldr	r3, [r7, #20]
 80106ae:	685b      	ldr	r3, [r3, #4]
 80106b0:	4798      	blx	r3

  now = sys_now();
 80106b2:	f7f4 fba1 	bl	8004df8 <sys_now>
 80106b6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80106b8:	697b      	ldr	r3, [r7, #20]
 80106ba:	681a      	ldr	r2, [r3, #0]
 80106bc:	4b0f      	ldr	r3, [pc, #60]	@ (80106fc <lwip_cyclic_timer+0x5c>)
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	4413      	add	r3, r2
 80106c2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80106c4:	68fa      	ldr	r2, [r7, #12]
 80106c6:	693b      	ldr	r3, [r7, #16]
 80106c8:	1ad3      	subs	r3, r2, r3
 80106ca:	0fdb      	lsrs	r3, r3, #31
 80106cc:	f003 0301 	and.w	r3, r3, #1
 80106d0:	b2db      	uxtb	r3, r3
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d009      	beq.n	80106ea <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80106d6:	697b      	ldr	r3, [r7, #20]
 80106d8:	681a      	ldr	r2, [r3, #0]
 80106da:	693b      	ldr	r3, [r7, #16]
 80106dc:	4413      	add	r3, r2
 80106de:	687a      	ldr	r2, [r7, #4]
 80106e0:	4907      	ldr	r1, [pc, #28]	@ (8010700 <lwip_cyclic_timer+0x60>)
 80106e2:	4618      	mov	r0, r3
 80106e4:	f7ff ff6e 	bl	80105c4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80106e8:	e004      	b.n	80106f4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80106ea:	687a      	ldr	r2, [r7, #4]
 80106ec:	4904      	ldr	r1, [pc, #16]	@ (8010700 <lwip_cyclic_timer+0x60>)
 80106ee:	68f8      	ldr	r0, [r7, #12]
 80106f0:	f7ff ff68 	bl	80105c4 <sys_timeout_abs>
}
 80106f4:	bf00      	nop
 80106f6:	3718      	adds	r7, #24
 80106f8:	46bd      	mov	sp, r7
 80106fa:	bd80      	pop	{r7, pc}
 80106fc:	240105a0 	.word	0x240105a0
 8010700:	080106a1 	.word	0x080106a1

08010704 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8010704:	b580      	push	{r7, lr}
 8010706:	b082      	sub	sp, #8
 8010708:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801070a:	2301      	movs	r3, #1
 801070c:	607b      	str	r3, [r7, #4]
 801070e:	e00e      	b.n	801072e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8010710:	4a0b      	ldr	r2, [pc, #44]	@ (8010740 <sys_timeouts_init+0x3c>)
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	00db      	lsls	r3, r3, #3
 801071c:	4a08      	ldr	r2, [pc, #32]	@ (8010740 <sys_timeouts_init+0x3c>)
 801071e:	4413      	add	r3, r2
 8010720:	461a      	mov	r2, r3
 8010722:	4908      	ldr	r1, [pc, #32]	@ (8010744 <sys_timeouts_init+0x40>)
 8010724:	f000 f810 	bl	8010748 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	3301      	adds	r3, #1
 801072c:	607b      	str	r3, [r7, #4]
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	2b02      	cmp	r3, #2
 8010732:	d9ed      	bls.n	8010710 <sys_timeouts_init+0xc>
  }
}
 8010734:	bf00      	nop
 8010736:	bf00      	nop
 8010738:	3708      	adds	r7, #8
 801073a:	46bd      	mov	sp, r7
 801073c:	bd80      	pop	{r7, pc}
 801073e:	bf00      	nop
 8010740:	0801713c 	.word	0x0801713c
 8010744:	080106a1 	.word	0x080106a1

08010748 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8010748:	b580      	push	{r7, lr}
 801074a:	b086      	sub	sp, #24
 801074c:	af00      	add	r7, sp, #0
 801074e:	60f8      	str	r0, [r7, #12]
 8010750:	60b9      	str	r1, [r7, #8]
 8010752:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();
 8010754:	f7f4 fdd0 	bl	80052f8 <sys_check_core_locking>

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801075e:	d306      	bcc.n	801076e <sys_timeout+0x26>
 8010760:	4b0a      	ldr	r3, [pc, #40]	@ (801078c <sys_timeout+0x44>)
 8010762:	f240 1229 	movw	r2, #297	@ 0x129
 8010766:	490a      	ldr	r1, [pc, #40]	@ (8010790 <sys_timeout+0x48>)
 8010768:	480a      	ldr	r0, [pc, #40]	@ (8010794 <sys_timeout+0x4c>)
 801076a:	f002 ff31 	bl	80135d0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801076e:	f7f4 fb43 	bl	8004df8 <sys_now>
 8010772:	4602      	mov	r2, r0
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	4413      	add	r3, r2
 8010778:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801077a:	687a      	ldr	r2, [r7, #4]
 801077c:	68b9      	ldr	r1, [r7, #8]
 801077e:	6978      	ldr	r0, [r7, #20]
 8010780:	f7ff ff20 	bl	80105c4 <sys_timeout_abs>
#endif
}
 8010784:	bf00      	nop
 8010786:	3718      	adds	r7, #24
 8010788:	46bd      	mov	sp, r7
 801078a:	bd80      	pop	{r7, pc}
 801078c:	080164f4 	.word	0x080164f4
 8010790:	08016590 	.word	0x08016590
 8010794:	08016568 	.word	0x08016568

08010798 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8010798:	b580      	push	{r7, lr}
 801079a:	b084      	sub	sp, #16
 801079c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();
 801079e:	f7f4 fdab 	bl	80052f8 <sys_check_core_locking>

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80107a2:	f7f4 fb29 	bl	8004df8 <sys_now>
 80107a6:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80107a8:	4b17      	ldr	r3, [pc, #92]	@ (8010808 <sys_check_timeouts+0x70>)
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80107ae:	68bb      	ldr	r3, [r7, #8]
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d022      	beq.n	80107fa <sys_check_timeouts+0x62>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80107b4:	68bb      	ldr	r3, [r7, #8]
 80107b6:	685b      	ldr	r3, [r3, #4]
 80107b8:	68fa      	ldr	r2, [r7, #12]
 80107ba:	1ad3      	subs	r3, r2, r3
 80107bc:	0fdb      	lsrs	r3, r3, #31
 80107be:	f003 0301 	and.w	r3, r3, #1
 80107c2:	b2db      	uxtb	r3, r3
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d11a      	bne.n	80107fe <sys_check_timeouts+0x66>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80107c8:	68bb      	ldr	r3, [r7, #8]
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	4a0e      	ldr	r2, [pc, #56]	@ (8010808 <sys_check_timeouts+0x70>)
 80107ce:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80107d0:	68bb      	ldr	r3, [r7, #8]
 80107d2:	689b      	ldr	r3, [r3, #8]
 80107d4:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80107d6:	68bb      	ldr	r3, [r7, #8]
 80107d8:	68db      	ldr	r3, [r3, #12]
 80107da:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80107dc:	68bb      	ldr	r3, [r7, #8]
 80107de:	685b      	ldr	r3, [r3, #4]
 80107e0:	4a0a      	ldr	r2, [pc, #40]	@ (801080c <sys_check_timeouts+0x74>)
 80107e2:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80107e4:	68b9      	ldr	r1, [r7, #8]
 80107e6:	200a      	movs	r0, #10
 80107e8:	f7f9 fc12 	bl	800a010 <memp_free>
    if (handler != NULL) {
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d0da      	beq.n	80107a8 <sys_check_timeouts+0x10>
      handler(arg);
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	6838      	ldr	r0, [r7, #0]
 80107f6:	4798      	blx	r3
  do {
 80107f8:	e7d6      	b.n	80107a8 <sys_check_timeouts+0x10>
      return;
 80107fa:	bf00      	nop
 80107fc:	e000      	b.n	8010800 <sys_check_timeouts+0x68>
      return;
 80107fe:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8010800:	3710      	adds	r7, #16
 8010802:	46bd      	mov	sp, r7
 8010804:	bd80      	pop	{r7, pc}
 8010806:	bf00      	nop
 8010808:	2401059c 	.word	0x2401059c
 801080c:	240105a0 	.word	0x240105a0

08010810 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8010810:	b580      	push	{r7, lr}
 8010812:	b082      	sub	sp, #8
 8010814:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();
 8010816:	f7f4 fd6f 	bl	80052f8 <sys_check_core_locking>

  if (next_timeout == NULL) {
 801081a:	4b16      	ldr	r3, [pc, #88]	@ (8010874 <sys_timeouts_sleeptime+0x64>)
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	2b00      	cmp	r3, #0
 8010820:	d102      	bne.n	8010828 <sys_timeouts_sleeptime+0x18>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8010822:	f04f 33ff 	mov.w	r3, #4294967295
 8010826:	e020      	b.n	801086a <sys_timeouts_sleeptime+0x5a>
  }
  now = sys_now();
 8010828:	f7f4 fae6 	bl	8004df8 <sys_now>
 801082c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801082e:	4b11      	ldr	r3, [pc, #68]	@ (8010874 <sys_timeouts_sleeptime+0x64>)
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	685a      	ldr	r2, [r3, #4]
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	1ad3      	subs	r3, r2, r3
 8010838:	0fdb      	lsrs	r3, r3, #31
 801083a:	f003 0301 	and.w	r3, r3, #1
 801083e:	b2db      	uxtb	r3, r3
 8010840:	2b00      	cmp	r3, #0
 8010842:	d001      	beq.n	8010848 <sys_timeouts_sleeptime+0x38>
    return 0;
 8010844:	2300      	movs	r3, #0
 8010846:	e010      	b.n	801086a <sys_timeouts_sleeptime+0x5a>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8010848:	4b0a      	ldr	r3, [pc, #40]	@ (8010874 <sys_timeouts_sleeptime+0x64>)
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	685a      	ldr	r2, [r3, #4]
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	1ad3      	subs	r3, r2, r3
 8010852:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8010854:	683b      	ldr	r3, [r7, #0]
 8010856:	2b00      	cmp	r3, #0
 8010858:	da06      	bge.n	8010868 <sys_timeouts_sleeptime+0x58>
 801085a:	4b07      	ldr	r3, [pc, #28]	@ (8010878 <sys_timeouts_sleeptime+0x68>)
 801085c:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8010860:	4906      	ldr	r1, [pc, #24]	@ (801087c <sys_timeouts_sleeptime+0x6c>)
 8010862:	4807      	ldr	r0, [pc, #28]	@ (8010880 <sys_timeouts_sleeptime+0x70>)
 8010864:	f002 feb4 	bl	80135d0 <iprintf>
    return ret;
 8010868:	683b      	ldr	r3, [r7, #0]
  }
}
 801086a:	4618      	mov	r0, r3
 801086c:	3708      	adds	r7, #8
 801086e:	46bd      	mov	sp, r7
 8010870:	bd80      	pop	{r7, pc}
 8010872:	bf00      	nop
 8010874:	2401059c 	.word	0x2401059c
 8010878:	080164f4 	.word	0x080164f4
 801087c:	080165c8 	.word	0x080165c8
 8010880:	08016568 	.word	0x08016568

08010884 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8010884:	b580      	push	{r7, lr}
 8010886:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8010888:	f002 fda2 	bl	80133d0 <rand>
 801088c:	4603      	mov	r3, r0
 801088e:	b29b      	uxth	r3, r3
 8010890:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010894:	b29b      	uxth	r3, r3
 8010896:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 801089a:	b29a      	uxth	r2, r3
 801089c:	4b01      	ldr	r3, [pc, #4]	@ (80108a4 <udp_init+0x20>)
 801089e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80108a0:	bf00      	nop
 80108a2:	bd80      	pop	{r7, pc}
 80108a4:	24000030 	.word	0x24000030

080108a8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80108a8:	b580      	push	{r7, lr}
 80108aa:	b084      	sub	sp, #16
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	60f8      	str	r0, [r7, #12]
 80108b0:	60b9      	str	r1, [r7, #8]
 80108b2:	4613      	mov	r3, r2
 80108b4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d105      	bne.n	80108c8 <udp_input_local_match+0x20>
 80108bc:	4b27      	ldr	r3, [pc, #156]	@ (801095c <udp_input_local_match+0xb4>)
 80108be:	2287      	movs	r2, #135	@ 0x87
 80108c0:	4927      	ldr	r1, [pc, #156]	@ (8010960 <udp_input_local_match+0xb8>)
 80108c2:	4828      	ldr	r0, [pc, #160]	@ (8010964 <udp_input_local_match+0xbc>)
 80108c4:	f002 fe84 	bl	80135d0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80108c8:	68bb      	ldr	r3, [r7, #8]
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d105      	bne.n	80108da <udp_input_local_match+0x32>
 80108ce:	4b23      	ldr	r3, [pc, #140]	@ (801095c <udp_input_local_match+0xb4>)
 80108d0:	2288      	movs	r2, #136	@ 0x88
 80108d2:	4925      	ldr	r1, [pc, #148]	@ (8010968 <udp_input_local_match+0xc0>)
 80108d4:	4823      	ldr	r0, [pc, #140]	@ (8010964 <udp_input_local_match+0xbc>)
 80108d6:	f002 fe7b 	bl	80135d0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	7a1b      	ldrb	r3, [r3, #8]
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d00b      	beq.n	80108fa <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	7a1a      	ldrb	r2, [r3, #8]
 80108e6:	4b21      	ldr	r3, [pc, #132]	@ (801096c <udp_input_local_match+0xc4>)
 80108e8:	685b      	ldr	r3, [r3, #4]
 80108ea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80108ee:	3301      	adds	r3, #1
 80108f0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80108f2:	429a      	cmp	r2, r3
 80108f4:	d001      	beq.n	80108fa <udp_input_local_match+0x52>
    return 0;
 80108f6:	2300      	movs	r3, #0
 80108f8:	e02b      	b.n	8010952 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80108fa:	79fb      	ldrb	r3, [r7, #7]
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d018      	beq.n	8010932 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	2b00      	cmp	r3, #0
 8010904:	d013      	beq.n	801092e <udp_input_local_match+0x86>
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	2b00      	cmp	r3, #0
 801090c:	d00f      	beq.n	801092e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801090e:	4b17      	ldr	r3, [pc, #92]	@ (801096c <udp_input_local_match+0xc4>)
 8010910:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010916:	d00a      	beq.n	801092e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	681a      	ldr	r2, [r3, #0]
 801091c:	4b13      	ldr	r3, [pc, #76]	@ (801096c <udp_input_local_match+0xc4>)
 801091e:	695b      	ldr	r3, [r3, #20]
 8010920:	405a      	eors	r2, r3
 8010922:	68bb      	ldr	r3, [r7, #8]
 8010924:	3308      	adds	r3, #8
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801092a:	2b00      	cmp	r3, #0
 801092c:	d110      	bne.n	8010950 <udp_input_local_match+0xa8>
          return 1;
 801092e:	2301      	movs	r3, #1
 8010930:	e00f      	b.n	8010952 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	2b00      	cmp	r3, #0
 8010936:	d009      	beq.n	801094c <udp_input_local_match+0xa4>
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	2b00      	cmp	r3, #0
 801093e:	d005      	beq.n	801094c <udp_input_local_match+0xa4>
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	681a      	ldr	r2, [r3, #0]
 8010944:	4b09      	ldr	r3, [pc, #36]	@ (801096c <udp_input_local_match+0xc4>)
 8010946:	695b      	ldr	r3, [r3, #20]
 8010948:	429a      	cmp	r2, r3
 801094a:	d101      	bne.n	8010950 <udp_input_local_match+0xa8>
        return 1;
 801094c:	2301      	movs	r3, #1
 801094e:	e000      	b.n	8010952 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8010950:	2300      	movs	r3, #0
}
 8010952:	4618      	mov	r0, r3
 8010954:	3710      	adds	r7, #16
 8010956:	46bd      	mov	sp, r7
 8010958:	bd80      	pop	{r7, pc}
 801095a:	bf00      	nop
 801095c:	080165dc 	.word	0x080165dc
 8010960:	0801660c 	.word	0x0801660c
 8010964:	08016630 	.word	0x08016630
 8010968:	08016658 	.word	0x08016658
 801096c:	24009a8c 	.word	0x24009a8c

08010970 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8010970:	b590      	push	{r4, r7, lr}
 8010972:	b08d      	sub	sp, #52	@ 0x34
 8010974:	af02      	add	r7, sp, #8
 8010976:	6078      	str	r0, [r7, #4]
 8010978:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801097a:	2300      	movs	r3, #0
 801097c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();
 801097e:	f7f4 fcbb 	bl	80052f8 <sys_check_core_locking>

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	2b00      	cmp	r3, #0
 8010986:	d105      	bne.n	8010994 <udp_input+0x24>
 8010988:	4b7c      	ldr	r3, [pc, #496]	@ (8010b7c <udp_input+0x20c>)
 801098a:	22cf      	movs	r2, #207	@ 0xcf
 801098c:	497c      	ldr	r1, [pc, #496]	@ (8010b80 <udp_input+0x210>)
 801098e:	487d      	ldr	r0, [pc, #500]	@ (8010b84 <udp_input+0x214>)
 8010990:	f002 fe1e 	bl	80135d0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8010994:	683b      	ldr	r3, [r7, #0]
 8010996:	2b00      	cmp	r3, #0
 8010998:	d105      	bne.n	80109a6 <udp_input+0x36>
 801099a:	4b78      	ldr	r3, [pc, #480]	@ (8010b7c <udp_input+0x20c>)
 801099c:	22d0      	movs	r2, #208	@ 0xd0
 801099e:	497a      	ldr	r1, [pc, #488]	@ (8010b88 <udp_input+0x218>)
 80109a0:	4878      	ldr	r0, [pc, #480]	@ (8010b84 <udp_input+0x214>)
 80109a2:	f002 fe15 	bl	80135d0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	895b      	ldrh	r3, [r3, #10]
 80109aa:	2b07      	cmp	r3, #7
 80109ac:	d803      	bhi.n	80109b6 <udp_input+0x46>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80109ae:	6878      	ldr	r0, [r7, #4]
 80109b0:	f7fa f9e2 	bl	800ad78 <pbuf_free>
    goto end;
 80109b4:	e0de      	b.n	8010b74 <udp_input+0x204>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	685b      	ldr	r3, [r3, #4]
 80109ba:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80109bc:	4b73      	ldr	r3, [pc, #460]	@ (8010b8c <udp_input+0x21c>)
 80109be:	695b      	ldr	r3, [r3, #20]
 80109c0:	4a72      	ldr	r2, [pc, #456]	@ (8010b8c <udp_input+0x21c>)
 80109c2:	6812      	ldr	r2, [r2, #0]
 80109c4:	4611      	mov	r1, r2
 80109c6:	4618      	mov	r0, r3
 80109c8:	f001 fcb6 	bl	8012338 <ip4_addr_isbroadcast_u32>
 80109cc:	4603      	mov	r3, r0
 80109ce:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80109d0:	697b      	ldr	r3, [r7, #20]
 80109d2:	881b      	ldrh	r3, [r3, #0]
 80109d4:	b29b      	uxth	r3, r3
 80109d6:	4618      	mov	r0, r3
 80109d8:	f7f8 fd04 	bl	80093e4 <lwip_htons>
 80109dc:	4603      	mov	r3, r0
 80109de:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80109e0:	697b      	ldr	r3, [r7, #20]
 80109e2:	885b      	ldrh	r3, [r3, #2]
 80109e4:	b29b      	uxth	r3, r3
 80109e6:	4618      	mov	r0, r3
 80109e8:	f7f8 fcfc 	bl	80093e4 <lwip_htons>
 80109ec:	4603      	mov	r3, r0
 80109ee:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80109f0:	2300      	movs	r3, #0
 80109f2:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 80109f4:	2300      	movs	r3, #0
 80109f6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80109f8:	2300      	movs	r3, #0
 80109fa:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80109fc:	4b64      	ldr	r3, [pc, #400]	@ (8010b90 <udp_input+0x220>)
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	627b      	str	r3, [r7, #36]	@ 0x24
 8010a02:	e054      	b.n	8010aae <udp_input+0x13e>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8010a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a06:	8a5b      	ldrh	r3, [r3, #18]
 8010a08:	89fa      	ldrh	r2, [r7, #14]
 8010a0a:	429a      	cmp	r2, r3
 8010a0c:	d14a      	bne.n	8010aa4 <udp_input+0x134>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8010a0e:	7cfb      	ldrb	r3, [r7, #19]
 8010a10:	461a      	mov	r2, r3
 8010a12:	6839      	ldr	r1, [r7, #0]
 8010a14:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010a16:	f7ff ff47 	bl	80108a8 <udp_input_local_match>
 8010a1a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d041      	beq.n	8010aa4 <udp_input+0x134>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8010a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a22:	7c1b      	ldrb	r3, [r3, #16]
 8010a24:	f003 0304 	and.w	r3, r3, #4
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d11d      	bne.n	8010a68 <udp_input+0xf8>
        if (uncon_pcb == NULL) {
 8010a2c:	69fb      	ldr	r3, [r7, #28]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d102      	bne.n	8010a38 <udp_input+0xc8>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8010a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a34:	61fb      	str	r3, [r7, #28]
 8010a36:	e017      	b.n	8010a68 <udp_input+0xf8>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8010a38:	7cfb      	ldrb	r3, [r7, #19]
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d014      	beq.n	8010a68 <udp_input+0xf8>
 8010a3e:	4b53      	ldr	r3, [pc, #332]	@ (8010b8c <udp_input+0x21c>)
 8010a40:	695b      	ldr	r3, [r3, #20]
 8010a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a46:	d10f      	bne.n	8010a68 <udp_input+0xf8>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8010a48:	69fb      	ldr	r3, [r7, #28]
 8010a4a:	681a      	ldr	r2, [r3, #0]
 8010a4c:	683b      	ldr	r3, [r7, #0]
 8010a4e:	3304      	adds	r3, #4
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	429a      	cmp	r2, r3
 8010a54:	d008      	beq.n	8010a68 <udp_input+0xf8>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8010a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a58:	681a      	ldr	r2, [r3, #0]
 8010a5a:	683b      	ldr	r3, [r7, #0]
 8010a5c:	3304      	adds	r3, #4
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	429a      	cmp	r2, r3
 8010a62:	d101      	bne.n	8010a68 <udp_input+0xf8>
              /* better match */
              uncon_pcb = pcb;
 8010a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a66:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8010a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a6a:	8a9b      	ldrh	r3, [r3, #20]
 8010a6c:	8a3a      	ldrh	r2, [r7, #16]
 8010a6e:	429a      	cmp	r2, r3
 8010a70:	d118      	bne.n	8010aa4 <udp_input+0x134>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8010a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a74:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d005      	beq.n	8010a86 <udp_input+0x116>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8010a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a7c:	685a      	ldr	r2, [r3, #4]
 8010a7e:	4b43      	ldr	r3, [pc, #268]	@ (8010b8c <udp_input+0x21c>)
 8010a80:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8010a82:	429a      	cmp	r2, r3
 8010a84:	d10e      	bne.n	8010aa4 <udp_input+0x134>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8010a86:	6a3b      	ldr	r3, [r7, #32]
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d014      	beq.n	8010ab6 <udp_input+0x146>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8010a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a8e:	68da      	ldr	r2, [r3, #12]
 8010a90:	6a3b      	ldr	r3, [r7, #32]
 8010a92:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8010a94:	4b3e      	ldr	r3, [pc, #248]	@ (8010b90 <udp_input+0x220>)
 8010a96:	681a      	ldr	r2, [r3, #0]
 8010a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a9a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8010a9c:	4a3c      	ldr	r2, [pc, #240]	@ (8010b90 <udp_input+0x220>)
 8010a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010aa0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8010aa2:	e008      	b.n	8010ab6 <udp_input+0x146>
      }
    }

    prev = pcb;
 8010aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010aa6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010aaa:	68db      	ldr	r3, [r3, #12]
 8010aac:	627b      	str	r3, [r7, #36]	@ 0x24
 8010aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d1a7      	bne.n	8010a04 <udp_input+0x94>
 8010ab4:	e000      	b.n	8010ab8 <udp_input+0x148>
        break;
 8010ab6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8010ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d101      	bne.n	8010ac2 <udp_input+0x152>
    pcb = uncon_pcb;
 8010abe:	69fb      	ldr	r3, [r7, #28]
 8010ac0:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8010ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d002      	beq.n	8010ace <udp_input+0x15e>
    for_us = 1;
 8010ac8:	2301      	movs	r3, #1
 8010aca:	76fb      	strb	r3, [r7, #27]
 8010acc:	e00a      	b.n	8010ae4 <udp_input+0x174>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8010ace:	683b      	ldr	r3, [r7, #0]
 8010ad0:	3304      	adds	r3, #4
 8010ad2:	681a      	ldr	r2, [r3, #0]
 8010ad4:	4b2d      	ldr	r3, [pc, #180]	@ (8010b8c <udp_input+0x21c>)
 8010ad6:	695b      	ldr	r3, [r3, #20]
 8010ad8:	429a      	cmp	r2, r3
 8010ada:	bf0c      	ite	eq
 8010adc:	2301      	moveq	r3, #1
 8010ade:	2300      	movne	r3, #0
 8010ae0:	b2db      	uxtb	r3, r3
 8010ae2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8010ae4:	7efb      	ldrb	r3, [r7, #27]
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d041      	beq.n	8010b6e <udp_input+0x1fe>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8010aea:	2108      	movs	r1, #8
 8010aec:	6878      	ldr	r0, [r7, #4]
 8010aee:	f7fa f8bd 	bl	800ac6c <pbuf_remove_header>
 8010af2:	4603      	mov	r3, r0
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d00a      	beq.n	8010b0e <udp_input+0x19e>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8010af8:	4b20      	ldr	r3, [pc, #128]	@ (8010b7c <udp_input+0x20c>)
 8010afa:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8010afe:	4925      	ldr	r1, [pc, #148]	@ (8010b94 <udp_input+0x224>)
 8010b00:	4820      	ldr	r0, [pc, #128]	@ (8010b84 <udp_input+0x214>)
 8010b02:	f002 fd65 	bl	80135d0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8010b06:	6878      	ldr	r0, [r7, #4]
 8010b08:	f7fa f936 	bl	800ad78 <pbuf_free>
      goto end;
 8010b0c:	e032      	b.n	8010b74 <udp_input+0x204>
    }

    if (pcb != NULL) {
 8010b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d012      	beq.n	8010b3a <udp_input+0x1ca>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8010b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b16:	699b      	ldr	r3, [r3, #24]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d00a      	beq.n	8010b32 <udp_input+0x1c2>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8010b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b1e:	699c      	ldr	r4, [r3, #24]
 8010b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b22:	69d8      	ldr	r0, [r3, #28]
 8010b24:	8a3b      	ldrh	r3, [r7, #16]
 8010b26:	9300      	str	r3, [sp, #0]
 8010b28:	4b1b      	ldr	r3, [pc, #108]	@ (8010b98 <udp_input+0x228>)
 8010b2a:	687a      	ldr	r2, [r7, #4]
 8010b2c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010b2e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8010b30:	e021      	b.n	8010b76 <udp_input+0x206>
        pbuf_free(p);
 8010b32:	6878      	ldr	r0, [r7, #4]
 8010b34:	f7fa f920 	bl	800ad78 <pbuf_free>
        goto end;
 8010b38:	e01c      	b.n	8010b74 <udp_input+0x204>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8010b3a:	7cfb      	ldrb	r3, [r7, #19]
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d112      	bne.n	8010b66 <udp_input+0x1f6>
 8010b40:	4b12      	ldr	r3, [pc, #72]	@ (8010b8c <udp_input+0x21c>)
 8010b42:	695b      	ldr	r3, [r3, #20]
 8010b44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010b48:	2be0      	cmp	r3, #224	@ 0xe0
 8010b4a:	d00c      	beq.n	8010b66 <udp_input+0x1f6>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8010b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8010b8c <udp_input+0x21c>)
 8010b4e:	899b      	ldrh	r3, [r3, #12]
 8010b50:	3308      	adds	r3, #8
 8010b52:	b29b      	uxth	r3, r3
 8010b54:	b21b      	sxth	r3, r3
 8010b56:	4619      	mov	r1, r3
 8010b58:	6878      	ldr	r0, [r7, #4]
 8010b5a:	f7fa f8fa 	bl	800ad52 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8010b5e:	2103      	movs	r1, #3
 8010b60:	6878      	ldr	r0, [r7, #4]
 8010b62:	f001 f8bb 	bl	8011cdc <icmp_dest_unreach>
      pbuf_free(p);
 8010b66:	6878      	ldr	r0, [r7, #4]
 8010b68:	f7fa f906 	bl	800ad78 <pbuf_free>
  return;
 8010b6c:	e003      	b.n	8010b76 <udp_input+0x206>
    pbuf_free(p);
 8010b6e:	6878      	ldr	r0, [r7, #4]
 8010b70:	f7fa f902 	bl	800ad78 <pbuf_free>
  return;
 8010b74:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8010b76:	372c      	adds	r7, #44	@ 0x2c
 8010b78:	46bd      	mov	sp, r7
 8010b7a:	bd90      	pop	{r4, r7, pc}
 8010b7c:	080165dc 	.word	0x080165dc
 8010b80:	08016680 	.word	0x08016680
 8010b84:	08016630 	.word	0x08016630
 8010b88:	08016698 	.word	0x08016698
 8010b8c:	24009a8c 	.word	0x24009a8c
 8010b90:	240105a8 	.word	0x240105a8
 8010b94:	080166b4 	.word	0x080166b4
 8010b98:	24009a9c 	.word	0x24009a9c

08010b9c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010b9c:	b480      	push	{r7}
 8010b9e:	b085      	sub	sp, #20
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	6078      	str	r0, [r7, #4]
 8010ba4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d01e      	beq.n	8010bea <udp_netif_ip_addr_changed+0x4e>
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d01a      	beq.n	8010bea <udp_netif_ip_addr_changed+0x4e>
 8010bb4:	683b      	ldr	r3, [r7, #0]
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d017      	beq.n	8010bea <udp_netif_ip_addr_changed+0x4e>
 8010bba:	683b      	ldr	r3, [r7, #0]
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d013      	beq.n	8010bea <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8010bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8010bf8 <udp_netif_ip_addr_changed+0x5c>)
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	60fb      	str	r3, [r7, #12]
 8010bc8:	e00c      	b.n	8010be4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	681a      	ldr	r2, [r3, #0]
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	429a      	cmp	r2, r3
 8010bd4:	d103      	bne.n	8010bde <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8010bd6:	683b      	ldr	r3, [r7, #0]
 8010bd8:	681a      	ldr	r2, [r3, #0]
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	68db      	ldr	r3, [r3, #12]
 8010be2:	60fb      	str	r3, [r7, #12]
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d1ef      	bne.n	8010bca <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8010bea:	bf00      	nop
 8010bec:	3714      	adds	r7, #20
 8010bee:	46bd      	mov	sp, r7
 8010bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bf4:	4770      	bx	lr
 8010bf6:	bf00      	nop
 8010bf8:	240105a8 	.word	0x240105a8

08010bfc <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8010bfc:	b580      	push	{r7, lr}
 8010bfe:	b082      	sub	sp, #8
 8010c00:	af00      	add	r7, sp, #0
 8010c02:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8010c04:	4915      	ldr	r1, [pc, #84]	@ (8010c5c <etharp_free_entry+0x60>)
 8010c06:	687a      	ldr	r2, [r7, #4]
 8010c08:	4613      	mov	r3, r2
 8010c0a:	005b      	lsls	r3, r3, #1
 8010c0c:	4413      	add	r3, r2
 8010c0e:	00db      	lsls	r3, r3, #3
 8010c10:	440b      	add	r3, r1
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d013      	beq.n	8010c40 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8010c18:	4910      	ldr	r1, [pc, #64]	@ (8010c5c <etharp_free_entry+0x60>)
 8010c1a:	687a      	ldr	r2, [r7, #4]
 8010c1c:	4613      	mov	r3, r2
 8010c1e:	005b      	lsls	r3, r3, #1
 8010c20:	4413      	add	r3, r2
 8010c22:	00db      	lsls	r3, r3, #3
 8010c24:	440b      	add	r3, r1
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	4618      	mov	r0, r3
 8010c2a:	f7fa f8a5 	bl	800ad78 <pbuf_free>
    arp_table[i].q = NULL;
 8010c2e:	490b      	ldr	r1, [pc, #44]	@ (8010c5c <etharp_free_entry+0x60>)
 8010c30:	687a      	ldr	r2, [r7, #4]
 8010c32:	4613      	mov	r3, r2
 8010c34:	005b      	lsls	r3, r3, #1
 8010c36:	4413      	add	r3, r2
 8010c38:	00db      	lsls	r3, r3, #3
 8010c3a:	440b      	add	r3, r1
 8010c3c:	2200      	movs	r2, #0
 8010c3e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8010c40:	4906      	ldr	r1, [pc, #24]	@ (8010c5c <etharp_free_entry+0x60>)
 8010c42:	687a      	ldr	r2, [r7, #4]
 8010c44:	4613      	mov	r3, r2
 8010c46:	005b      	lsls	r3, r3, #1
 8010c48:	4413      	add	r3, r2
 8010c4a:	00db      	lsls	r3, r3, #3
 8010c4c:	440b      	add	r3, r1
 8010c4e:	3314      	adds	r3, #20
 8010c50:	2200      	movs	r2, #0
 8010c52:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8010c54:	bf00      	nop
 8010c56:	3708      	adds	r7, #8
 8010c58:	46bd      	mov	sp, r7
 8010c5a:	bd80      	pop	{r7, pc}
 8010c5c:	240105ac 	.word	0x240105ac

08010c60 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8010c60:	b580      	push	{r7, lr}
 8010c62:	b082      	sub	sp, #8
 8010c64:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010c66:	2300      	movs	r3, #0
 8010c68:	607b      	str	r3, [r7, #4]
 8010c6a:	e096      	b.n	8010d9a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8010c6c:	494f      	ldr	r1, [pc, #316]	@ (8010dac <etharp_tmr+0x14c>)
 8010c6e:	687a      	ldr	r2, [r7, #4]
 8010c70:	4613      	mov	r3, r2
 8010c72:	005b      	lsls	r3, r3, #1
 8010c74:	4413      	add	r3, r2
 8010c76:	00db      	lsls	r3, r3, #3
 8010c78:	440b      	add	r3, r1
 8010c7a:	3314      	adds	r3, #20
 8010c7c:	781b      	ldrb	r3, [r3, #0]
 8010c7e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8010c80:	78fb      	ldrb	r3, [r7, #3]
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	f000 8086 	beq.w	8010d94 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8010c88:	4948      	ldr	r1, [pc, #288]	@ (8010dac <etharp_tmr+0x14c>)
 8010c8a:	687a      	ldr	r2, [r7, #4]
 8010c8c:	4613      	mov	r3, r2
 8010c8e:	005b      	lsls	r3, r3, #1
 8010c90:	4413      	add	r3, r2
 8010c92:	00db      	lsls	r3, r3, #3
 8010c94:	440b      	add	r3, r1
 8010c96:	3312      	adds	r3, #18
 8010c98:	881b      	ldrh	r3, [r3, #0]
 8010c9a:	3301      	adds	r3, #1
 8010c9c:	b298      	uxth	r0, r3
 8010c9e:	4943      	ldr	r1, [pc, #268]	@ (8010dac <etharp_tmr+0x14c>)
 8010ca0:	687a      	ldr	r2, [r7, #4]
 8010ca2:	4613      	mov	r3, r2
 8010ca4:	005b      	lsls	r3, r3, #1
 8010ca6:	4413      	add	r3, r2
 8010ca8:	00db      	lsls	r3, r3, #3
 8010caa:	440b      	add	r3, r1
 8010cac:	3312      	adds	r3, #18
 8010cae:	4602      	mov	r2, r0
 8010cb0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010cb2:	493e      	ldr	r1, [pc, #248]	@ (8010dac <etharp_tmr+0x14c>)
 8010cb4:	687a      	ldr	r2, [r7, #4]
 8010cb6:	4613      	mov	r3, r2
 8010cb8:	005b      	lsls	r3, r3, #1
 8010cba:	4413      	add	r3, r2
 8010cbc:	00db      	lsls	r3, r3, #3
 8010cbe:	440b      	add	r3, r1
 8010cc0:	3312      	adds	r3, #18
 8010cc2:	881b      	ldrh	r3, [r3, #0]
 8010cc4:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8010cc8:	d215      	bcs.n	8010cf6 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010cca:	4938      	ldr	r1, [pc, #224]	@ (8010dac <etharp_tmr+0x14c>)
 8010ccc:	687a      	ldr	r2, [r7, #4]
 8010cce:	4613      	mov	r3, r2
 8010cd0:	005b      	lsls	r3, r3, #1
 8010cd2:	4413      	add	r3, r2
 8010cd4:	00db      	lsls	r3, r3, #3
 8010cd6:	440b      	add	r3, r1
 8010cd8:	3314      	adds	r3, #20
 8010cda:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010cdc:	2b01      	cmp	r3, #1
 8010cde:	d10e      	bne.n	8010cfe <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8010ce0:	4932      	ldr	r1, [pc, #200]	@ (8010dac <etharp_tmr+0x14c>)
 8010ce2:	687a      	ldr	r2, [r7, #4]
 8010ce4:	4613      	mov	r3, r2
 8010ce6:	005b      	lsls	r3, r3, #1
 8010ce8:	4413      	add	r3, r2
 8010cea:	00db      	lsls	r3, r3, #3
 8010cec:	440b      	add	r3, r1
 8010cee:	3312      	adds	r3, #18
 8010cf0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010cf2:	2b04      	cmp	r3, #4
 8010cf4:	d903      	bls.n	8010cfe <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8010cf6:	6878      	ldr	r0, [r7, #4]
 8010cf8:	f7ff ff80 	bl	8010bfc <etharp_free_entry>
 8010cfc:	e04a      	b.n	8010d94 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8010cfe:	492b      	ldr	r1, [pc, #172]	@ (8010dac <etharp_tmr+0x14c>)
 8010d00:	687a      	ldr	r2, [r7, #4]
 8010d02:	4613      	mov	r3, r2
 8010d04:	005b      	lsls	r3, r3, #1
 8010d06:	4413      	add	r3, r2
 8010d08:	00db      	lsls	r3, r3, #3
 8010d0a:	440b      	add	r3, r1
 8010d0c:	3314      	adds	r3, #20
 8010d0e:	781b      	ldrb	r3, [r3, #0]
 8010d10:	2b03      	cmp	r3, #3
 8010d12:	d10a      	bne.n	8010d2a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8010d14:	4925      	ldr	r1, [pc, #148]	@ (8010dac <etharp_tmr+0x14c>)
 8010d16:	687a      	ldr	r2, [r7, #4]
 8010d18:	4613      	mov	r3, r2
 8010d1a:	005b      	lsls	r3, r3, #1
 8010d1c:	4413      	add	r3, r2
 8010d1e:	00db      	lsls	r3, r3, #3
 8010d20:	440b      	add	r3, r1
 8010d22:	3314      	adds	r3, #20
 8010d24:	2204      	movs	r2, #4
 8010d26:	701a      	strb	r2, [r3, #0]
 8010d28:	e034      	b.n	8010d94 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8010d2a:	4920      	ldr	r1, [pc, #128]	@ (8010dac <etharp_tmr+0x14c>)
 8010d2c:	687a      	ldr	r2, [r7, #4]
 8010d2e:	4613      	mov	r3, r2
 8010d30:	005b      	lsls	r3, r3, #1
 8010d32:	4413      	add	r3, r2
 8010d34:	00db      	lsls	r3, r3, #3
 8010d36:	440b      	add	r3, r1
 8010d38:	3314      	adds	r3, #20
 8010d3a:	781b      	ldrb	r3, [r3, #0]
 8010d3c:	2b04      	cmp	r3, #4
 8010d3e:	d10a      	bne.n	8010d56 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8010d40:	491a      	ldr	r1, [pc, #104]	@ (8010dac <etharp_tmr+0x14c>)
 8010d42:	687a      	ldr	r2, [r7, #4]
 8010d44:	4613      	mov	r3, r2
 8010d46:	005b      	lsls	r3, r3, #1
 8010d48:	4413      	add	r3, r2
 8010d4a:	00db      	lsls	r3, r3, #3
 8010d4c:	440b      	add	r3, r1
 8010d4e:	3314      	adds	r3, #20
 8010d50:	2202      	movs	r2, #2
 8010d52:	701a      	strb	r2, [r3, #0]
 8010d54:	e01e      	b.n	8010d94 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010d56:	4915      	ldr	r1, [pc, #84]	@ (8010dac <etharp_tmr+0x14c>)
 8010d58:	687a      	ldr	r2, [r7, #4]
 8010d5a:	4613      	mov	r3, r2
 8010d5c:	005b      	lsls	r3, r3, #1
 8010d5e:	4413      	add	r3, r2
 8010d60:	00db      	lsls	r3, r3, #3
 8010d62:	440b      	add	r3, r1
 8010d64:	3314      	adds	r3, #20
 8010d66:	781b      	ldrb	r3, [r3, #0]
 8010d68:	2b01      	cmp	r3, #1
 8010d6a:	d113      	bne.n	8010d94 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8010d6c:	490f      	ldr	r1, [pc, #60]	@ (8010dac <etharp_tmr+0x14c>)
 8010d6e:	687a      	ldr	r2, [r7, #4]
 8010d70:	4613      	mov	r3, r2
 8010d72:	005b      	lsls	r3, r3, #1
 8010d74:	4413      	add	r3, r2
 8010d76:	00db      	lsls	r3, r3, #3
 8010d78:	440b      	add	r3, r1
 8010d7a:	3308      	adds	r3, #8
 8010d7c:	6818      	ldr	r0, [r3, #0]
 8010d7e:	687a      	ldr	r2, [r7, #4]
 8010d80:	4613      	mov	r3, r2
 8010d82:	005b      	lsls	r3, r3, #1
 8010d84:	4413      	add	r3, r2
 8010d86:	00db      	lsls	r3, r3, #3
 8010d88:	4a08      	ldr	r2, [pc, #32]	@ (8010dac <etharp_tmr+0x14c>)
 8010d8a:	4413      	add	r3, r2
 8010d8c:	3304      	adds	r3, #4
 8010d8e:	4619      	mov	r1, r3
 8010d90:	f000 fe72 	bl	8011a78 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	3301      	adds	r3, #1
 8010d98:	607b      	str	r3, [r7, #4]
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	2b09      	cmp	r3, #9
 8010d9e:	f77f af65 	ble.w	8010c6c <etharp_tmr+0xc>
      }
    }
  }
}
 8010da2:	bf00      	nop
 8010da4:	bf00      	nop
 8010da6:	3708      	adds	r7, #8
 8010da8:	46bd      	mov	sp, r7
 8010daa:	bd80      	pop	{r7, pc}
 8010dac:	240105ac 	.word	0x240105ac

08010db0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8010db0:	b580      	push	{r7, lr}
 8010db2:	b08a      	sub	sp, #40	@ 0x28
 8010db4:	af00      	add	r7, sp, #0
 8010db6:	60f8      	str	r0, [r7, #12]
 8010db8:	460b      	mov	r3, r1
 8010dba:	607a      	str	r2, [r7, #4]
 8010dbc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8010dbe:	230a      	movs	r3, #10
 8010dc0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8010dc2:	230a      	movs	r3, #10
 8010dc4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8010dc6:	230a      	movs	r3, #10
 8010dc8:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8010dca:	2300      	movs	r3, #0
 8010dcc:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8010dce:	230a      	movs	r3, #10
 8010dd0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8010dd2:	2300      	movs	r3, #0
 8010dd4:	83bb      	strh	r3, [r7, #28]
 8010dd6:	2300      	movs	r3, #0
 8010dd8:	837b      	strh	r3, [r7, #26]
 8010dda:	2300      	movs	r3, #0
 8010ddc:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010dde:	2300      	movs	r3, #0
 8010de0:	843b      	strh	r3, [r7, #32]
 8010de2:	e0ae      	b.n	8010f42 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8010de4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010de8:	49a6      	ldr	r1, [pc, #664]	@ (8011084 <etharp_find_entry+0x2d4>)
 8010dea:	4613      	mov	r3, r2
 8010dec:	005b      	lsls	r3, r3, #1
 8010dee:	4413      	add	r3, r2
 8010df0:	00db      	lsls	r3, r3, #3
 8010df2:	440b      	add	r3, r1
 8010df4:	3314      	adds	r3, #20
 8010df6:	781b      	ldrb	r3, [r3, #0]
 8010df8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8010dfa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8010dfe:	2b0a      	cmp	r3, #10
 8010e00:	d105      	bne.n	8010e0e <etharp_find_entry+0x5e>
 8010e02:	7dfb      	ldrb	r3, [r7, #23]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d102      	bne.n	8010e0e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8010e08:	8c3b      	ldrh	r3, [r7, #32]
 8010e0a:	847b      	strh	r3, [r7, #34]	@ 0x22
 8010e0c:	e095      	b.n	8010f3a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8010e0e:	7dfb      	ldrb	r3, [r7, #23]
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	f000 8092 	beq.w	8010f3a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8010e16:	7dfb      	ldrb	r3, [r7, #23]
 8010e18:	2b01      	cmp	r3, #1
 8010e1a:	d009      	beq.n	8010e30 <etharp_find_entry+0x80>
 8010e1c:	7dfb      	ldrb	r3, [r7, #23]
 8010e1e:	2b01      	cmp	r3, #1
 8010e20:	d806      	bhi.n	8010e30 <etharp_find_entry+0x80>
 8010e22:	4b99      	ldr	r3, [pc, #612]	@ (8011088 <etharp_find_entry+0x2d8>)
 8010e24:	f240 1223 	movw	r2, #291	@ 0x123
 8010e28:	4998      	ldr	r1, [pc, #608]	@ (801108c <etharp_find_entry+0x2dc>)
 8010e2a:	4899      	ldr	r0, [pc, #612]	@ (8011090 <etharp_find_entry+0x2e0>)
 8010e2c:	f002 fbd0 	bl	80135d0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d020      	beq.n	8010e78 <etharp_find_entry+0xc8>
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	6819      	ldr	r1, [r3, #0]
 8010e3a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010e3e:	4891      	ldr	r0, [pc, #580]	@ (8011084 <etharp_find_entry+0x2d4>)
 8010e40:	4613      	mov	r3, r2
 8010e42:	005b      	lsls	r3, r3, #1
 8010e44:	4413      	add	r3, r2
 8010e46:	00db      	lsls	r3, r3, #3
 8010e48:	4403      	add	r3, r0
 8010e4a:	3304      	adds	r3, #4
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	4299      	cmp	r1, r3
 8010e50:	d112      	bne.n	8010e78 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d00c      	beq.n	8010e72 <etharp_find_entry+0xc2>
 8010e58:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010e5c:	4989      	ldr	r1, [pc, #548]	@ (8011084 <etharp_find_entry+0x2d4>)
 8010e5e:	4613      	mov	r3, r2
 8010e60:	005b      	lsls	r3, r3, #1
 8010e62:	4413      	add	r3, r2
 8010e64:	00db      	lsls	r3, r3, #3
 8010e66:	440b      	add	r3, r1
 8010e68:	3308      	adds	r3, #8
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	687a      	ldr	r2, [r7, #4]
 8010e6e:	429a      	cmp	r2, r3
 8010e70:	d102      	bne.n	8010e78 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8010e72:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010e76:	e100      	b.n	801107a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8010e78:	7dfb      	ldrb	r3, [r7, #23]
 8010e7a:	2b01      	cmp	r3, #1
 8010e7c:	d140      	bne.n	8010f00 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8010e7e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010e82:	4980      	ldr	r1, [pc, #512]	@ (8011084 <etharp_find_entry+0x2d4>)
 8010e84:	4613      	mov	r3, r2
 8010e86:	005b      	lsls	r3, r3, #1
 8010e88:	4413      	add	r3, r2
 8010e8a:	00db      	lsls	r3, r3, #3
 8010e8c:	440b      	add	r3, r1
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d01a      	beq.n	8010eca <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8010e94:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010e98:	497a      	ldr	r1, [pc, #488]	@ (8011084 <etharp_find_entry+0x2d4>)
 8010e9a:	4613      	mov	r3, r2
 8010e9c:	005b      	lsls	r3, r3, #1
 8010e9e:	4413      	add	r3, r2
 8010ea0:	00db      	lsls	r3, r3, #3
 8010ea2:	440b      	add	r3, r1
 8010ea4:	3312      	adds	r3, #18
 8010ea6:	881b      	ldrh	r3, [r3, #0]
 8010ea8:	8bba      	ldrh	r2, [r7, #28]
 8010eaa:	429a      	cmp	r2, r3
 8010eac:	d845      	bhi.n	8010f3a <etharp_find_entry+0x18a>
            old_queue = i;
 8010eae:	8c3b      	ldrh	r3, [r7, #32]
 8010eb0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8010eb2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010eb6:	4973      	ldr	r1, [pc, #460]	@ (8011084 <etharp_find_entry+0x2d4>)
 8010eb8:	4613      	mov	r3, r2
 8010eba:	005b      	lsls	r3, r3, #1
 8010ebc:	4413      	add	r3, r2
 8010ebe:	00db      	lsls	r3, r3, #3
 8010ec0:	440b      	add	r3, r1
 8010ec2:	3312      	adds	r3, #18
 8010ec4:	881b      	ldrh	r3, [r3, #0]
 8010ec6:	83bb      	strh	r3, [r7, #28]
 8010ec8:	e037      	b.n	8010f3a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8010eca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010ece:	496d      	ldr	r1, [pc, #436]	@ (8011084 <etharp_find_entry+0x2d4>)
 8010ed0:	4613      	mov	r3, r2
 8010ed2:	005b      	lsls	r3, r3, #1
 8010ed4:	4413      	add	r3, r2
 8010ed6:	00db      	lsls	r3, r3, #3
 8010ed8:	440b      	add	r3, r1
 8010eda:	3312      	adds	r3, #18
 8010edc:	881b      	ldrh	r3, [r3, #0]
 8010ede:	8b7a      	ldrh	r2, [r7, #26]
 8010ee0:	429a      	cmp	r2, r3
 8010ee2:	d82a      	bhi.n	8010f3a <etharp_find_entry+0x18a>
            old_pending = i;
 8010ee4:	8c3b      	ldrh	r3, [r7, #32]
 8010ee6:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8010ee8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010eec:	4965      	ldr	r1, [pc, #404]	@ (8011084 <etharp_find_entry+0x2d4>)
 8010eee:	4613      	mov	r3, r2
 8010ef0:	005b      	lsls	r3, r3, #1
 8010ef2:	4413      	add	r3, r2
 8010ef4:	00db      	lsls	r3, r3, #3
 8010ef6:	440b      	add	r3, r1
 8010ef8:	3312      	adds	r3, #18
 8010efa:	881b      	ldrh	r3, [r3, #0]
 8010efc:	837b      	strh	r3, [r7, #26]
 8010efe:	e01c      	b.n	8010f3a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8010f00:	7dfb      	ldrb	r3, [r7, #23]
 8010f02:	2b01      	cmp	r3, #1
 8010f04:	d919      	bls.n	8010f3a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8010f06:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010f0a:	495e      	ldr	r1, [pc, #376]	@ (8011084 <etharp_find_entry+0x2d4>)
 8010f0c:	4613      	mov	r3, r2
 8010f0e:	005b      	lsls	r3, r3, #1
 8010f10:	4413      	add	r3, r2
 8010f12:	00db      	lsls	r3, r3, #3
 8010f14:	440b      	add	r3, r1
 8010f16:	3312      	adds	r3, #18
 8010f18:	881b      	ldrh	r3, [r3, #0]
 8010f1a:	8b3a      	ldrh	r2, [r7, #24]
 8010f1c:	429a      	cmp	r2, r3
 8010f1e:	d80c      	bhi.n	8010f3a <etharp_find_entry+0x18a>
            old_stable = i;
 8010f20:	8c3b      	ldrh	r3, [r7, #32]
 8010f22:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8010f24:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010f28:	4956      	ldr	r1, [pc, #344]	@ (8011084 <etharp_find_entry+0x2d4>)
 8010f2a:	4613      	mov	r3, r2
 8010f2c:	005b      	lsls	r3, r3, #1
 8010f2e:	4413      	add	r3, r2
 8010f30:	00db      	lsls	r3, r3, #3
 8010f32:	440b      	add	r3, r1
 8010f34:	3312      	adds	r3, #18
 8010f36:	881b      	ldrh	r3, [r3, #0]
 8010f38:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010f3a:	8c3b      	ldrh	r3, [r7, #32]
 8010f3c:	3301      	adds	r3, #1
 8010f3e:	b29b      	uxth	r3, r3
 8010f40:	843b      	strh	r3, [r7, #32]
 8010f42:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010f46:	2b09      	cmp	r3, #9
 8010f48:	f77f af4c 	ble.w	8010de4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8010f4c:	7afb      	ldrb	r3, [r7, #11]
 8010f4e:	f003 0302 	and.w	r3, r3, #2
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d108      	bne.n	8010f68 <etharp_find_entry+0x1b8>
 8010f56:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8010f5a:	2b0a      	cmp	r3, #10
 8010f5c:	d107      	bne.n	8010f6e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8010f5e:	7afb      	ldrb	r3, [r7, #11]
 8010f60:	f003 0301 	and.w	r3, r3, #1
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d102      	bne.n	8010f6e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8010f68:	f04f 33ff 	mov.w	r3, #4294967295
 8010f6c:	e085      	b.n	801107a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8010f6e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8010f72:	2b09      	cmp	r3, #9
 8010f74:	dc02      	bgt.n	8010f7c <etharp_find_entry+0x1cc>
    i = empty;
 8010f76:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010f78:	843b      	strh	r3, [r7, #32]
 8010f7a:	e039      	b.n	8010ff0 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8010f7c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8010f80:	2b09      	cmp	r3, #9
 8010f82:	dc14      	bgt.n	8010fae <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8010f84:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010f86:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8010f88:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010f8c:	493d      	ldr	r1, [pc, #244]	@ (8011084 <etharp_find_entry+0x2d4>)
 8010f8e:	4613      	mov	r3, r2
 8010f90:	005b      	lsls	r3, r3, #1
 8010f92:	4413      	add	r3, r2
 8010f94:	00db      	lsls	r3, r3, #3
 8010f96:	440b      	add	r3, r1
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d018      	beq.n	8010fd0 <etharp_find_entry+0x220>
 8010f9e:	4b3a      	ldr	r3, [pc, #232]	@ (8011088 <etharp_find_entry+0x2d8>)
 8010fa0:	f240 126d 	movw	r2, #365	@ 0x16d
 8010fa4:	493b      	ldr	r1, [pc, #236]	@ (8011094 <etharp_find_entry+0x2e4>)
 8010fa6:	483a      	ldr	r0, [pc, #232]	@ (8011090 <etharp_find_entry+0x2e0>)
 8010fa8:	f002 fb12 	bl	80135d0 <iprintf>
 8010fac:	e010      	b.n	8010fd0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8010fae:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8010fb2:	2b09      	cmp	r3, #9
 8010fb4:	dc02      	bgt.n	8010fbc <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8010fb6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010fb8:	843b      	strh	r3, [r7, #32]
 8010fba:	e009      	b.n	8010fd0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8010fbc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010fc0:	2b09      	cmp	r3, #9
 8010fc2:	dc02      	bgt.n	8010fca <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8010fc4:	8bfb      	ldrh	r3, [r7, #30]
 8010fc6:	843b      	strh	r3, [r7, #32]
 8010fc8:	e002      	b.n	8010fd0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8010fca:	f04f 33ff 	mov.w	r3, #4294967295
 8010fce:	e054      	b.n	801107a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010fd0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010fd4:	2b09      	cmp	r3, #9
 8010fd6:	dd06      	ble.n	8010fe6 <etharp_find_entry+0x236>
 8010fd8:	4b2b      	ldr	r3, [pc, #172]	@ (8011088 <etharp_find_entry+0x2d8>)
 8010fda:	f240 127f 	movw	r2, #383	@ 0x17f
 8010fde:	492e      	ldr	r1, [pc, #184]	@ (8011098 <etharp_find_entry+0x2e8>)
 8010fe0:	482b      	ldr	r0, [pc, #172]	@ (8011090 <etharp_find_entry+0x2e0>)
 8010fe2:	f002 faf5 	bl	80135d0 <iprintf>
    etharp_free_entry(i);
 8010fe6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010fea:	4618      	mov	r0, r3
 8010fec:	f7ff fe06 	bl	8010bfc <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010ff0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010ff4:	2b09      	cmp	r3, #9
 8010ff6:	dd06      	ble.n	8011006 <etharp_find_entry+0x256>
 8010ff8:	4b23      	ldr	r3, [pc, #140]	@ (8011088 <etharp_find_entry+0x2d8>)
 8010ffa:	f240 1283 	movw	r2, #387	@ 0x183
 8010ffe:	4926      	ldr	r1, [pc, #152]	@ (8011098 <etharp_find_entry+0x2e8>)
 8011000:	4823      	ldr	r0, [pc, #140]	@ (8011090 <etharp_find_entry+0x2e0>)
 8011002:	f002 fae5 	bl	80135d0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8011006:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801100a:	491e      	ldr	r1, [pc, #120]	@ (8011084 <etharp_find_entry+0x2d4>)
 801100c:	4613      	mov	r3, r2
 801100e:	005b      	lsls	r3, r3, #1
 8011010:	4413      	add	r3, r2
 8011012:	00db      	lsls	r3, r3, #3
 8011014:	440b      	add	r3, r1
 8011016:	3314      	adds	r3, #20
 8011018:	781b      	ldrb	r3, [r3, #0]
 801101a:	2b00      	cmp	r3, #0
 801101c:	d006      	beq.n	801102c <etharp_find_entry+0x27c>
 801101e:	4b1a      	ldr	r3, [pc, #104]	@ (8011088 <etharp_find_entry+0x2d8>)
 8011020:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8011024:	491d      	ldr	r1, [pc, #116]	@ (801109c <etharp_find_entry+0x2ec>)
 8011026:	481a      	ldr	r0, [pc, #104]	@ (8011090 <etharp_find_entry+0x2e0>)
 8011028:	f002 fad2 	bl	80135d0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	2b00      	cmp	r3, #0
 8011030:	d00b      	beq.n	801104a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8011032:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	6819      	ldr	r1, [r3, #0]
 801103a:	4812      	ldr	r0, [pc, #72]	@ (8011084 <etharp_find_entry+0x2d4>)
 801103c:	4613      	mov	r3, r2
 801103e:	005b      	lsls	r3, r3, #1
 8011040:	4413      	add	r3, r2
 8011042:	00db      	lsls	r3, r3, #3
 8011044:	4403      	add	r3, r0
 8011046:	3304      	adds	r3, #4
 8011048:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801104a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801104e:	490d      	ldr	r1, [pc, #52]	@ (8011084 <etharp_find_entry+0x2d4>)
 8011050:	4613      	mov	r3, r2
 8011052:	005b      	lsls	r3, r3, #1
 8011054:	4413      	add	r3, r2
 8011056:	00db      	lsls	r3, r3, #3
 8011058:	440b      	add	r3, r1
 801105a:	3312      	adds	r3, #18
 801105c:	2200      	movs	r2, #0
 801105e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8011060:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011064:	4907      	ldr	r1, [pc, #28]	@ (8011084 <etharp_find_entry+0x2d4>)
 8011066:	4613      	mov	r3, r2
 8011068:	005b      	lsls	r3, r3, #1
 801106a:	4413      	add	r3, r2
 801106c:	00db      	lsls	r3, r3, #3
 801106e:	440b      	add	r3, r1
 8011070:	3308      	adds	r3, #8
 8011072:	687a      	ldr	r2, [r7, #4]
 8011074:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8011076:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801107a:	4618      	mov	r0, r3
 801107c:	3728      	adds	r7, #40	@ 0x28
 801107e:	46bd      	mov	sp, r7
 8011080:	bd80      	pop	{r7, pc}
 8011082:	bf00      	nop
 8011084:	240105ac 	.word	0x240105ac
 8011088:	08016940 	.word	0x08016940
 801108c:	08016978 	.word	0x08016978
 8011090:	080169b8 	.word	0x080169b8
 8011094:	080169e0 	.word	0x080169e0
 8011098:	080169f8 	.word	0x080169f8
 801109c:	08016a0c 	.word	0x08016a0c

080110a0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80110a0:	b580      	push	{r7, lr}
 80110a2:	b088      	sub	sp, #32
 80110a4:	af02      	add	r7, sp, #8
 80110a6:	60f8      	str	r0, [r7, #12]
 80110a8:	60b9      	str	r1, [r7, #8]
 80110aa:	607a      	str	r2, [r7, #4]
 80110ac:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80110b4:	2b06      	cmp	r3, #6
 80110b6:	d006      	beq.n	80110c6 <etharp_update_arp_entry+0x26>
 80110b8:	4b48      	ldr	r3, [pc, #288]	@ (80111dc <etharp_update_arp_entry+0x13c>)
 80110ba:	f240 12a9 	movw	r2, #425	@ 0x1a9
 80110be:	4948      	ldr	r1, [pc, #288]	@ (80111e0 <etharp_update_arp_entry+0x140>)
 80110c0:	4848      	ldr	r0, [pc, #288]	@ (80111e4 <etharp_update_arp_entry+0x144>)
 80110c2:	f002 fa85 	bl	80135d0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80110c6:	68bb      	ldr	r3, [r7, #8]
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d012      	beq.n	80110f2 <etharp_update_arp_entry+0x52>
 80110cc:	68bb      	ldr	r3, [r7, #8]
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d00e      	beq.n	80110f2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80110d4:	68bb      	ldr	r3, [r7, #8]
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	68f9      	ldr	r1, [r7, #12]
 80110da:	4618      	mov	r0, r3
 80110dc:	f001 f92c 	bl	8012338 <ip4_addr_isbroadcast_u32>
 80110e0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d105      	bne.n	80110f2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80110e6:	68bb      	ldr	r3, [r7, #8]
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80110ee:	2be0      	cmp	r3, #224	@ 0xe0
 80110f0:	d102      	bne.n	80110f8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80110f2:	f06f 030f 	mvn.w	r3, #15
 80110f6:	e06c      	b.n	80111d2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80110f8:	78fb      	ldrb	r3, [r7, #3]
 80110fa:	68fa      	ldr	r2, [r7, #12]
 80110fc:	4619      	mov	r1, r3
 80110fe:	68b8      	ldr	r0, [r7, #8]
 8011100:	f7ff fe56 	bl	8010db0 <etharp_find_entry>
 8011104:	4603      	mov	r3, r0
 8011106:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8011108:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801110c:	2b00      	cmp	r3, #0
 801110e:	da02      	bge.n	8011116 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8011110:	8afb      	ldrh	r3, [r7, #22]
 8011112:	b25b      	sxtb	r3, r3
 8011114:	e05d      	b.n	80111d2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8011116:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801111a:	4933      	ldr	r1, [pc, #204]	@ (80111e8 <etharp_update_arp_entry+0x148>)
 801111c:	4613      	mov	r3, r2
 801111e:	005b      	lsls	r3, r3, #1
 8011120:	4413      	add	r3, r2
 8011122:	00db      	lsls	r3, r3, #3
 8011124:	440b      	add	r3, r1
 8011126:	3314      	adds	r3, #20
 8011128:	2202      	movs	r2, #2
 801112a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801112c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011130:	492d      	ldr	r1, [pc, #180]	@ (80111e8 <etharp_update_arp_entry+0x148>)
 8011132:	4613      	mov	r3, r2
 8011134:	005b      	lsls	r3, r3, #1
 8011136:	4413      	add	r3, r2
 8011138:	00db      	lsls	r3, r3, #3
 801113a:	440b      	add	r3, r1
 801113c:	3308      	adds	r3, #8
 801113e:	68fa      	ldr	r2, [r7, #12]
 8011140:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8011142:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011146:	4613      	mov	r3, r2
 8011148:	005b      	lsls	r3, r3, #1
 801114a:	4413      	add	r3, r2
 801114c:	00db      	lsls	r3, r3, #3
 801114e:	3308      	adds	r3, #8
 8011150:	4a25      	ldr	r2, [pc, #148]	@ (80111e8 <etharp_update_arp_entry+0x148>)
 8011152:	4413      	add	r3, r2
 8011154:	3304      	adds	r3, #4
 8011156:	2206      	movs	r2, #6
 8011158:	6879      	ldr	r1, [r7, #4]
 801115a:	4618      	mov	r0, r3
 801115c:	f002 fb69 	bl	8013832 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8011160:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011164:	4920      	ldr	r1, [pc, #128]	@ (80111e8 <etharp_update_arp_entry+0x148>)
 8011166:	4613      	mov	r3, r2
 8011168:	005b      	lsls	r3, r3, #1
 801116a:	4413      	add	r3, r2
 801116c:	00db      	lsls	r3, r3, #3
 801116e:	440b      	add	r3, r1
 8011170:	3312      	adds	r3, #18
 8011172:	2200      	movs	r2, #0
 8011174:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8011176:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801117a:	491b      	ldr	r1, [pc, #108]	@ (80111e8 <etharp_update_arp_entry+0x148>)
 801117c:	4613      	mov	r3, r2
 801117e:	005b      	lsls	r3, r3, #1
 8011180:	4413      	add	r3, r2
 8011182:	00db      	lsls	r3, r3, #3
 8011184:	440b      	add	r3, r1
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	2b00      	cmp	r3, #0
 801118a:	d021      	beq.n	80111d0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801118c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011190:	4915      	ldr	r1, [pc, #84]	@ (80111e8 <etharp_update_arp_entry+0x148>)
 8011192:	4613      	mov	r3, r2
 8011194:	005b      	lsls	r3, r3, #1
 8011196:	4413      	add	r3, r2
 8011198:	00db      	lsls	r3, r3, #3
 801119a:	440b      	add	r3, r1
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80111a0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80111a4:	4910      	ldr	r1, [pc, #64]	@ (80111e8 <etharp_update_arp_entry+0x148>)
 80111a6:	4613      	mov	r3, r2
 80111a8:	005b      	lsls	r3, r3, #1
 80111aa:	4413      	add	r3, r2
 80111ac:	00db      	lsls	r3, r3, #3
 80111ae:	440b      	add	r3, r1
 80111b0:	2200      	movs	r2, #0
 80111b2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 80111ba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80111be:	9300      	str	r3, [sp, #0]
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	6939      	ldr	r1, [r7, #16]
 80111c4:	68f8      	ldr	r0, [r7, #12]
 80111c6:	f001 ffc7 	bl	8013158 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80111ca:	6938      	ldr	r0, [r7, #16]
 80111cc:	f7f9 fdd4 	bl	800ad78 <pbuf_free>
  }
  return ERR_OK;
 80111d0:	2300      	movs	r3, #0
}
 80111d2:	4618      	mov	r0, r3
 80111d4:	3718      	adds	r7, #24
 80111d6:	46bd      	mov	sp, r7
 80111d8:	bd80      	pop	{r7, pc}
 80111da:	bf00      	nop
 80111dc:	08016940 	.word	0x08016940
 80111e0:	08016a38 	.word	0x08016a38
 80111e4:	080169b8 	.word	0x080169b8
 80111e8:	240105ac 	.word	0x240105ac

080111ec <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80111ec:	b580      	push	{r7, lr}
 80111ee:	b084      	sub	sp, #16
 80111f0:	af00      	add	r7, sp, #0
 80111f2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80111f4:	2300      	movs	r3, #0
 80111f6:	60fb      	str	r3, [r7, #12]
 80111f8:	e01e      	b.n	8011238 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80111fa:	4913      	ldr	r1, [pc, #76]	@ (8011248 <etharp_cleanup_netif+0x5c>)
 80111fc:	68fa      	ldr	r2, [r7, #12]
 80111fe:	4613      	mov	r3, r2
 8011200:	005b      	lsls	r3, r3, #1
 8011202:	4413      	add	r3, r2
 8011204:	00db      	lsls	r3, r3, #3
 8011206:	440b      	add	r3, r1
 8011208:	3314      	adds	r3, #20
 801120a:	781b      	ldrb	r3, [r3, #0]
 801120c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801120e:	7afb      	ldrb	r3, [r7, #11]
 8011210:	2b00      	cmp	r3, #0
 8011212:	d00e      	beq.n	8011232 <etharp_cleanup_netif+0x46>
 8011214:	490c      	ldr	r1, [pc, #48]	@ (8011248 <etharp_cleanup_netif+0x5c>)
 8011216:	68fa      	ldr	r2, [r7, #12]
 8011218:	4613      	mov	r3, r2
 801121a:	005b      	lsls	r3, r3, #1
 801121c:	4413      	add	r3, r2
 801121e:	00db      	lsls	r3, r3, #3
 8011220:	440b      	add	r3, r1
 8011222:	3308      	adds	r3, #8
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	687a      	ldr	r2, [r7, #4]
 8011228:	429a      	cmp	r2, r3
 801122a:	d102      	bne.n	8011232 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801122c:	68f8      	ldr	r0, [r7, #12]
 801122e:	f7ff fce5 	bl	8010bfc <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	3301      	adds	r3, #1
 8011236:	60fb      	str	r3, [r7, #12]
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	2b09      	cmp	r3, #9
 801123c:	dddd      	ble.n	80111fa <etharp_cleanup_netif+0xe>
    }
  }
}
 801123e:	bf00      	nop
 8011240:	bf00      	nop
 8011242:	3710      	adds	r7, #16
 8011244:	46bd      	mov	sp, r7
 8011246:	bd80      	pop	{r7, pc}
 8011248:	240105ac 	.word	0x240105ac

0801124c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801124c:	b5b0      	push	{r4, r5, r7, lr}
 801124e:	b08a      	sub	sp, #40	@ 0x28
 8011250:	af04      	add	r7, sp, #16
 8011252:	6078      	str	r0, [r7, #4]
 8011254:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();
 8011256:	f7f4 f84f 	bl	80052f8 <sys_check_core_locking>

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801125a:	683b      	ldr	r3, [r7, #0]
 801125c:	2b00      	cmp	r3, #0
 801125e:	d107      	bne.n	8011270 <etharp_input+0x24>
 8011260:	4b3d      	ldr	r3, [pc, #244]	@ (8011358 <etharp_input+0x10c>)
 8011262:	f240 228a 	movw	r2, #650	@ 0x28a
 8011266:	493d      	ldr	r1, [pc, #244]	@ (801135c <etharp_input+0x110>)
 8011268:	483d      	ldr	r0, [pc, #244]	@ (8011360 <etharp_input+0x114>)
 801126a:	f002 f9b1 	bl	80135d0 <iprintf>
 801126e:	e06f      	b.n	8011350 <etharp_input+0x104>

  hdr = (struct etharp_hdr *)p->payload;
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	685b      	ldr	r3, [r3, #4]
 8011274:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011276:	693b      	ldr	r3, [r7, #16]
 8011278:	881b      	ldrh	r3, [r3, #0]
 801127a:	b29b      	uxth	r3, r3
 801127c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011280:	d10c      	bne.n	801129c <etharp_input+0x50>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011282:	693b      	ldr	r3, [r7, #16]
 8011284:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011286:	2b06      	cmp	r3, #6
 8011288:	d108      	bne.n	801129c <etharp_input+0x50>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801128a:	693b      	ldr	r3, [r7, #16]
 801128c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801128e:	2b04      	cmp	r3, #4
 8011290:	d104      	bne.n	801129c <etharp_input+0x50>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8011292:	693b      	ldr	r3, [r7, #16]
 8011294:	885b      	ldrh	r3, [r3, #2]
 8011296:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011298:	2b08      	cmp	r3, #8
 801129a:	d003      	beq.n	80112a4 <etharp_input+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801129c:	6878      	ldr	r0, [r7, #4]
 801129e:	f7f9 fd6b 	bl	800ad78 <pbuf_free>
    return;
 80112a2:	e055      	b.n	8011350 <etharp_input+0x104>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80112a4:	693b      	ldr	r3, [r7, #16]
 80112a6:	330e      	adds	r3, #14
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80112ac:	693b      	ldr	r3, [r7, #16]
 80112ae:	3318      	adds	r3, #24
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80112b4:	683b      	ldr	r3, [r7, #0]
 80112b6:	3304      	adds	r3, #4
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d102      	bne.n	80112c4 <etharp_input+0x78>
    for_us = 0;
 80112be:	2300      	movs	r3, #0
 80112c0:	75fb      	strb	r3, [r7, #23]
 80112c2:	e009      	b.n	80112d8 <etharp_input+0x8c>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80112c4:	68ba      	ldr	r2, [r7, #8]
 80112c6:	683b      	ldr	r3, [r7, #0]
 80112c8:	3304      	adds	r3, #4
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	429a      	cmp	r2, r3
 80112ce:	bf0c      	ite	eq
 80112d0:	2301      	moveq	r3, #1
 80112d2:	2300      	movne	r3, #0
 80112d4:	b2db      	uxtb	r3, r3
 80112d6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80112d8:	693b      	ldr	r3, [r7, #16]
 80112da:	f103 0208 	add.w	r2, r3, #8
 80112de:	7dfb      	ldrb	r3, [r7, #23]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d001      	beq.n	80112e8 <etharp_input+0x9c>
 80112e4:	2301      	movs	r3, #1
 80112e6:	e000      	b.n	80112ea <etharp_input+0x9e>
 80112e8:	2302      	movs	r3, #2
 80112ea:	f107 010c 	add.w	r1, r7, #12
 80112ee:	6838      	ldr	r0, [r7, #0]
 80112f0:	f7ff fed6 	bl	80110a0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80112f4:	693b      	ldr	r3, [r7, #16]
 80112f6:	88db      	ldrh	r3, [r3, #6]
 80112f8:	b29b      	uxth	r3, r3
 80112fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80112fe:	d003      	beq.n	8011308 <etharp_input+0xbc>
 8011300:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011304:	d01e      	beq.n	8011344 <etharp_input+0xf8>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8011306:	e020      	b.n	801134a <etharp_input+0xfe>
      if (for_us) {
 8011308:	7dfb      	ldrb	r3, [r7, #23]
 801130a:	2b00      	cmp	r3, #0
 801130c:	d01c      	beq.n	8011348 <etharp_input+0xfc>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801130e:	683b      	ldr	r3, [r7, #0]
 8011310:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8011314:	693b      	ldr	r3, [r7, #16]
 8011316:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801131a:	683b      	ldr	r3, [r7, #0]
 801131c:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8011320:	683b      	ldr	r3, [r7, #0]
 8011322:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8011324:	693a      	ldr	r2, [r7, #16]
 8011326:	3208      	adds	r2, #8
        etharp_raw(netif,
 8011328:	2102      	movs	r1, #2
 801132a:	9103      	str	r1, [sp, #12]
 801132c:	f107 010c 	add.w	r1, r7, #12
 8011330:	9102      	str	r1, [sp, #8]
 8011332:	9201      	str	r2, [sp, #4]
 8011334:	9300      	str	r3, [sp, #0]
 8011336:	462b      	mov	r3, r5
 8011338:	4622      	mov	r2, r4
 801133a:	4601      	mov	r1, r0
 801133c:	6838      	ldr	r0, [r7, #0]
 801133e:	f000 faed 	bl	801191c <etharp_raw>
      break;
 8011342:	e001      	b.n	8011348 <etharp_input+0xfc>
      break;
 8011344:	bf00      	nop
 8011346:	e000      	b.n	801134a <etharp_input+0xfe>
      break;
 8011348:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801134a:	6878      	ldr	r0, [r7, #4]
 801134c:	f7f9 fd14 	bl	800ad78 <pbuf_free>
}
 8011350:	3718      	adds	r7, #24
 8011352:	46bd      	mov	sp, r7
 8011354:	bdb0      	pop	{r4, r5, r7, pc}
 8011356:	bf00      	nop
 8011358:	08016940 	.word	0x08016940
 801135c:	08016a90 	.word	0x08016a90
 8011360:	080169b8 	.word	0x080169b8

08011364 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8011364:	b580      	push	{r7, lr}
 8011366:	b086      	sub	sp, #24
 8011368:	af02      	add	r7, sp, #8
 801136a:	60f8      	str	r0, [r7, #12]
 801136c:	60b9      	str	r1, [r7, #8]
 801136e:	4613      	mov	r3, r2
 8011370:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8011372:	79fa      	ldrb	r2, [r7, #7]
 8011374:	4944      	ldr	r1, [pc, #272]	@ (8011488 <etharp_output_to_arp_index+0x124>)
 8011376:	4613      	mov	r3, r2
 8011378:	005b      	lsls	r3, r3, #1
 801137a:	4413      	add	r3, r2
 801137c:	00db      	lsls	r3, r3, #3
 801137e:	440b      	add	r3, r1
 8011380:	3314      	adds	r3, #20
 8011382:	781b      	ldrb	r3, [r3, #0]
 8011384:	2b01      	cmp	r3, #1
 8011386:	d806      	bhi.n	8011396 <etharp_output_to_arp_index+0x32>
 8011388:	4b40      	ldr	r3, [pc, #256]	@ (801148c <etharp_output_to_arp_index+0x128>)
 801138a:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801138e:	4940      	ldr	r1, [pc, #256]	@ (8011490 <etharp_output_to_arp_index+0x12c>)
 8011390:	4840      	ldr	r0, [pc, #256]	@ (8011494 <etharp_output_to_arp_index+0x130>)
 8011392:	f002 f91d 	bl	80135d0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8011396:	79fa      	ldrb	r2, [r7, #7]
 8011398:	493b      	ldr	r1, [pc, #236]	@ (8011488 <etharp_output_to_arp_index+0x124>)
 801139a:	4613      	mov	r3, r2
 801139c:	005b      	lsls	r3, r3, #1
 801139e:	4413      	add	r3, r2
 80113a0:	00db      	lsls	r3, r3, #3
 80113a2:	440b      	add	r3, r1
 80113a4:	3314      	adds	r3, #20
 80113a6:	781b      	ldrb	r3, [r3, #0]
 80113a8:	2b02      	cmp	r3, #2
 80113aa:	d153      	bne.n	8011454 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80113ac:	79fa      	ldrb	r2, [r7, #7]
 80113ae:	4936      	ldr	r1, [pc, #216]	@ (8011488 <etharp_output_to_arp_index+0x124>)
 80113b0:	4613      	mov	r3, r2
 80113b2:	005b      	lsls	r3, r3, #1
 80113b4:	4413      	add	r3, r2
 80113b6:	00db      	lsls	r3, r3, #3
 80113b8:	440b      	add	r3, r1
 80113ba:	3312      	adds	r3, #18
 80113bc:	881b      	ldrh	r3, [r3, #0]
 80113be:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 80113c2:	d919      	bls.n	80113f8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80113c4:	79fa      	ldrb	r2, [r7, #7]
 80113c6:	4613      	mov	r3, r2
 80113c8:	005b      	lsls	r3, r3, #1
 80113ca:	4413      	add	r3, r2
 80113cc:	00db      	lsls	r3, r3, #3
 80113ce:	4a2e      	ldr	r2, [pc, #184]	@ (8011488 <etharp_output_to_arp_index+0x124>)
 80113d0:	4413      	add	r3, r2
 80113d2:	3304      	adds	r3, #4
 80113d4:	4619      	mov	r1, r3
 80113d6:	68f8      	ldr	r0, [r7, #12]
 80113d8:	f000 fb4e 	bl	8011a78 <etharp_request>
 80113dc:	4603      	mov	r3, r0
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d138      	bne.n	8011454 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80113e2:	79fa      	ldrb	r2, [r7, #7]
 80113e4:	4928      	ldr	r1, [pc, #160]	@ (8011488 <etharp_output_to_arp_index+0x124>)
 80113e6:	4613      	mov	r3, r2
 80113e8:	005b      	lsls	r3, r3, #1
 80113ea:	4413      	add	r3, r2
 80113ec:	00db      	lsls	r3, r3, #3
 80113ee:	440b      	add	r3, r1
 80113f0:	3314      	adds	r3, #20
 80113f2:	2203      	movs	r2, #3
 80113f4:	701a      	strb	r2, [r3, #0]
 80113f6:	e02d      	b.n	8011454 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80113f8:	79fa      	ldrb	r2, [r7, #7]
 80113fa:	4923      	ldr	r1, [pc, #140]	@ (8011488 <etharp_output_to_arp_index+0x124>)
 80113fc:	4613      	mov	r3, r2
 80113fe:	005b      	lsls	r3, r3, #1
 8011400:	4413      	add	r3, r2
 8011402:	00db      	lsls	r3, r3, #3
 8011404:	440b      	add	r3, r1
 8011406:	3312      	adds	r3, #18
 8011408:	881b      	ldrh	r3, [r3, #0]
 801140a:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801140e:	d321      	bcc.n	8011454 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8011410:	79fa      	ldrb	r2, [r7, #7]
 8011412:	4613      	mov	r3, r2
 8011414:	005b      	lsls	r3, r3, #1
 8011416:	4413      	add	r3, r2
 8011418:	00db      	lsls	r3, r3, #3
 801141a:	4a1b      	ldr	r2, [pc, #108]	@ (8011488 <etharp_output_to_arp_index+0x124>)
 801141c:	4413      	add	r3, r2
 801141e:	1d19      	adds	r1, r3, #4
 8011420:	79fa      	ldrb	r2, [r7, #7]
 8011422:	4613      	mov	r3, r2
 8011424:	005b      	lsls	r3, r3, #1
 8011426:	4413      	add	r3, r2
 8011428:	00db      	lsls	r3, r3, #3
 801142a:	3308      	adds	r3, #8
 801142c:	4a16      	ldr	r2, [pc, #88]	@ (8011488 <etharp_output_to_arp_index+0x124>)
 801142e:	4413      	add	r3, r2
 8011430:	3304      	adds	r3, #4
 8011432:	461a      	mov	r2, r3
 8011434:	68f8      	ldr	r0, [r7, #12]
 8011436:	f000 fafd 	bl	8011a34 <etharp_request_dst>
 801143a:	4603      	mov	r3, r0
 801143c:	2b00      	cmp	r3, #0
 801143e:	d109      	bne.n	8011454 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011440:	79fa      	ldrb	r2, [r7, #7]
 8011442:	4911      	ldr	r1, [pc, #68]	@ (8011488 <etharp_output_to_arp_index+0x124>)
 8011444:	4613      	mov	r3, r2
 8011446:	005b      	lsls	r3, r3, #1
 8011448:	4413      	add	r3, r2
 801144a:	00db      	lsls	r3, r3, #3
 801144c:	440b      	add	r3, r1
 801144e:	3314      	adds	r3, #20
 8011450:	2203      	movs	r2, #3
 8011452:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 801145a:	79fa      	ldrb	r2, [r7, #7]
 801145c:	4613      	mov	r3, r2
 801145e:	005b      	lsls	r3, r3, #1
 8011460:	4413      	add	r3, r2
 8011462:	00db      	lsls	r3, r3, #3
 8011464:	3308      	adds	r3, #8
 8011466:	4a08      	ldr	r2, [pc, #32]	@ (8011488 <etharp_output_to_arp_index+0x124>)
 8011468:	4413      	add	r3, r2
 801146a:	3304      	adds	r3, #4
 801146c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8011470:	9200      	str	r2, [sp, #0]
 8011472:	460a      	mov	r2, r1
 8011474:	68b9      	ldr	r1, [r7, #8]
 8011476:	68f8      	ldr	r0, [r7, #12]
 8011478:	f001 fe6e 	bl	8013158 <ethernet_output>
 801147c:	4603      	mov	r3, r0
}
 801147e:	4618      	mov	r0, r3
 8011480:	3710      	adds	r7, #16
 8011482:	46bd      	mov	sp, r7
 8011484:	bd80      	pop	{r7, pc}
 8011486:	bf00      	nop
 8011488:	240105ac 	.word	0x240105ac
 801148c:	08016940 	.word	0x08016940
 8011490:	08016ab0 	.word	0x08016ab0
 8011494:	080169b8 	.word	0x080169b8

08011498 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8011498:	b580      	push	{r7, lr}
 801149a:	b08a      	sub	sp, #40	@ 0x28
 801149c:	af02      	add	r7, sp, #8
 801149e:	60f8      	str	r0, [r7, #12]
 80114a0:	60b9      	str	r1, [r7, #8]
 80114a2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
 80114a8:	f7f3 ff26 	bl	80052f8 <sys_check_core_locking>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d106      	bne.n	80114c0 <etharp_output+0x28>
 80114b2:	4b73      	ldr	r3, [pc, #460]	@ (8011680 <etharp_output+0x1e8>)
 80114b4:	f240 321e 	movw	r2, #798	@ 0x31e
 80114b8:	4972      	ldr	r1, [pc, #456]	@ (8011684 <etharp_output+0x1ec>)
 80114ba:	4873      	ldr	r0, [pc, #460]	@ (8011688 <etharp_output+0x1f0>)
 80114bc:	f002 f888 	bl	80135d0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80114c0:	68bb      	ldr	r3, [r7, #8]
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d106      	bne.n	80114d4 <etharp_output+0x3c>
 80114c6:	4b6e      	ldr	r3, [pc, #440]	@ (8011680 <etharp_output+0x1e8>)
 80114c8:	f240 321f 	movw	r2, #799	@ 0x31f
 80114cc:	496f      	ldr	r1, [pc, #444]	@ (801168c <etharp_output+0x1f4>)
 80114ce:	486e      	ldr	r0, [pc, #440]	@ (8011688 <etharp_output+0x1f0>)
 80114d0:	f002 f87e 	bl	80135d0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d106      	bne.n	80114e8 <etharp_output+0x50>
 80114da:	4b69      	ldr	r3, [pc, #420]	@ (8011680 <etharp_output+0x1e8>)
 80114dc:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80114e0:	496b      	ldr	r1, [pc, #428]	@ (8011690 <etharp_output+0x1f8>)
 80114e2:	4869      	ldr	r0, [pc, #420]	@ (8011688 <etharp_output+0x1f0>)
 80114e4:	f002 f874 	bl	80135d0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	68f9      	ldr	r1, [r7, #12]
 80114ee:	4618      	mov	r0, r3
 80114f0:	f000 ff22 	bl	8012338 <ip4_addr_isbroadcast_u32>
 80114f4:	4603      	mov	r3, r0
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d002      	beq.n	8011500 <etharp_output+0x68>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80114fa:	4b66      	ldr	r3, [pc, #408]	@ (8011694 <etharp_output+0x1fc>)
 80114fc:	61fb      	str	r3, [r7, #28]
 80114fe:	e0af      	b.n	8011660 <etharp_output+0x1c8>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011508:	2be0      	cmp	r3, #224	@ 0xe0
 801150a:	d118      	bne.n	801153e <etharp_output+0xa6>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801150c:	2301      	movs	r3, #1
 801150e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8011510:	2300      	movs	r3, #0
 8011512:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8011514:	235e      	movs	r3, #94	@ 0x5e
 8011516:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	3301      	adds	r3, #1
 801151c:	781b      	ldrb	r3, [r3, #0]
 801151e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011522:	b2db      	uxtb	r3, r3
 8011524:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	3302      	adds	r3, #2
 801152a:	781b      	ldrb	r3, [r3, #0]
 801152c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	3303      	adds	r3, #3
 8011532:	781b      	ldrb	r3, [r3, #0]
 8011534:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8011536:	f107 0310 	add.w	r3, r7, #16
 801153a:	61fb      	str	r3, [r7, #28]
 801153c:	e090      	b.n	8011660 <etharp_output+0x1c8>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	681a      	ldr	r2, [r3, #0]
 8011542:	68fb      	ldr	r3, [r7, #12]
 8011544:	3304      	adds	r3, #4
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	405a      	eors	r2, r3
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	3308      	adds	r3, #8
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	4013      	ands	r3, r2
 8011552:	2b00      	cmp	r3, #0
 8011554:	d012      	beq.n	801157c <etharp_output+0xe4>
        !ip4_addr_islinklocal(ipaddr)) {
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801155c:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8011560:	4293      	cmp	r3, r2
 8011562:	d00b      	beq.n	801157c <etharp_output+0xe4>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	330c      	adds	r3, #12
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d003      	beq.n	8011576 <etharp_output+0xde>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	330c      	adds	r3, #12
 8011572:	61bb      	str	r3, [r7, #24]
 8011574:	e002      	b.n	801157c <etharp_output+0xe4>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8011576:	f06f 0303 	mvn.w	r3, #3
 801157a:	e07d      	b.n	8011678 <etharp_output+0x1e0>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801157c:	4b46      	ldr	r3, [pc, #280]	@ (8011698 <etharp_output+0x200>)
 801157e:	781b      	ldrb	r3, [r3, #0]
 8011580:	4619      	mov	r1, r3
 8011582:	4a46      	ldr	r2, [pc, #280]	@ (801169c <etharp_output+0x204>)
 8011584:	460b      	mov	r3, r1
 8011586:	005b      	lsls	r3, r3, #1
 8011588:	440b      	add	r3, r1
 801158a:	00db      	lsls	r3, r3, #3
 801158c:	4413      	add	r3, r2
 801158e:	3314      	adds	r3, #20
 8011590:	781b      	ldrb	r3, [r3, #0]
 8011592:	2b01      	cmp	r3, #1
 8011594:	d925      	bls.n	80115e2 <etharp_output+0x14a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8011596:	4b40      	ldr	r3, [pc, #256]	@ (8011698 <etharp_output+0x200>)
 8011598:	781b      	ldrb	r3, [r3, #0]
 801159a:	4619      	mov	r1, r3
 801159c:	4a3f      	ldr	r2, [pc, #252]	@ (801169c <etharp_output+0x204>)
 801159e:	460b      	mov	r3, r1
 80115a0:	005b      	lsls	r3, r3, #1
 80115a2:	440b      	add	r3, r1
 80115a4:	00db      	lsls	r3, r3, #3
 80115a6:	4413      	add	r3, r2
 80115a8:	3308      	adds	r3, #8
 80115aa:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80115ac:	68fa      	ldr	r2, [r7, #12]
 80115ae:	429a      	cmp	r2, r3
 80115b0:	d117      	bne.n	80115e2 <etharp_output+0x14a>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80115b2:	69bb      	ldr	r3, [r7, #24]
 80115b4:	681a      	ldr	r2, [r3, #0]
 80115b6:	4b38      	ldr	r3, [pc, #224]	@ (8011698 <etharp_output+0x200>)
 80115b8:	781b      	ldrb	r3, [r3, #0]
 80115ba:	4618      	mov	r0, r3
 80115bc:	4937      	ldr	r1, [pc, #220]	@ (801169c <etharp_output+0x204>)
 80115be:	4603      	mov	r3, r0
 80115c0:	005b      	lsls	r3, r3, #1
 80115c2:	4403      	add	r3, r0
 80115c4:	00db      	lsls	r3, r3, #3
 80115c6:	440b      	add	r3, r1
 80115c8:	3304      	adds	r3, #4
 80115ca:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80115cc:	429a      	cmp	r2, r3
 80115ce:	d108      	bne.n	80115e2 <etharp_output+0x14a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80115d0:	4b31      	ldr	r3, [pc, #196]	@ (8011698 <etharp_output+0x200>)
 80115d2:	781b      	ldrb	r3, [r3, #0]
 80115d4:	461a      	mov	r2, r3
 80115d6:	68b9      	ldr	r1, [r7, #8]
 80115d8:	68f8      	ldr	r0, [r7, #12]
 80115da:	f7ff fec3 	bl	8011364 <etharp_output_to_arp_index>
 80115de:	4603      	mov	r3, r0
 80115e0:	e04a      	b.n	8011678 <etharp_output+0x1e0>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80115e2:	2300      	movs	r3, #0
 80115e4:	75fb      	strb	r3, [r7, #23]
 80115e6:	e031      	b.n	801164c <etharp_output+0x1b4>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80115e8:	7dfa      	ldrb	r2, [r7, #23]
 80115ea:	492c      	ldr	r1, [pc, #176]	@ (801169c <etharp_output+0x204>)
 80115ec:	4613      	mov	r3, r2
 80115ee:	005b      	lsls	r3, r3, #1
 80115f0:	4413      	add	r3, r2
 80115f2:	00db      	lsls	r3, r3, #3
 80115f4:	440b      	add	r3, r1
 80115f6:	3314      	adds	r3, #20
 80115f8:	781b      	ldrb	r3, [r3, #0]
 80115fa:	2b01      	cmp	r3, #1
 80115fc:	d923      	bls.n	8011646 <etharp_output+0x1ae>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80115fe:	7dfa      	ldrb	r2, [r7, #23]
 8011600:	4926      	ldr	r1, [pc, #152]	@ (801169c <etharp_output+0x204>)
 8011602:	4613      	mov	r3, r2
 8011604:	005b      	lsls	r3, r3, #1
 8011606:	4413      	add	r3, r2
 8011608:	00db      	lsls	r3, r3, #3
 801160a:	440b      	add	r3, r1
 801160c:	3308      	adds	r3, #8
 801160e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011610:	68fa      	ldr	r2, [r7, #12]
 8011612:	429a      	cmp	r2, r3
 8011614:	d117      	bne.n	8011646 <etharp_output+0x1ae>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8011616:	69bb      	ldr	r3, [r7, #24]
 8011618:	6819      	ldr	r1, [r3, #0]
 801161a:	7dfa      	ldrb	r2, [r7, #23]
 801161c:	481f      	ldr	r0, [pc, #124]	@ (801169c <etharp_output+0x204>)
 801161e:	4613      	mov	r3, r2
 8011620:	005b      	lsls	r3, r3, #1
 8011622:	4413      	add	r3, r2
 8011624:	00db      	lsls	r3, r3, #3
 8011626:	4403      	add	r3, r0
 8011628:	3304      	adds	r3, #4
 801162a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801162c:	4299      	cmp	r1, r3
 801162e:	d10a      	bne.n	8011646 <etharp_output+0x1ae>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8011630:	4a19      	ldr	r2, [pc, #100]	@ (8011698 <etharp_output+0x200>)
 8011632:	7dfb      	ldrb	r3, [r7, #23]
 8011634:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8011636:	7dfb      	ldrb	r3, [r7, #23]
 8011638:	461a      	mov	r2, r3
 801163a:	68b9      	ldr	r1, [r7, #8]
 801163c:	68f8      	ldr	r0, [r7, #12]
 801163e:	f7ff fe91 	bl	8011364 <etharp_output_to_arp_index>
 8011642:	4603      	mov	r3, r0
 8011644:	e018      	b.n	8011678 <etharp_output+0x1e0>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8011646:	7dfb      	ldrb	r3, [r7, #23]
 8011648:	3301      	adds	r3, #1
 801164a:	75fb      	strb	r3, [r7, #23]
 801164c:	7dfb      	ldrb	r3, [r7, #23]
 801164e:	2b09      	cmp	r3, #9
 8011650:	d9ca      	bls.n	80115e8 <etharp_output+0x150>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8011652:	68ba      	ldr	r2, [r7, #8]
 8011654:	69b9      	ldr	r1, [r7, #24]
 8011656:	68f8      	ldr	r0, [r7, #12]
 8011658:	f000 f822 	bl	80116a0 <etharp_query>
 801165c:	4603      	mov	r3, r0
 801165e:	e00b      	b.n	8011678 <etharp_output+0x1e0>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8011666:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801166a:	9300      	str	r3, [sp, #0]
 801166c:	69fb      	ldr	r3, [r7, #28]
 801166e:	68b9      	ldr	r1, [r7, #8]
 8011670:	68f8      	ldr	r0, [r7, #12]
 8011672:	f001 fd71 	bl	8013158 <ethernet_output>
 8011676:	4603      	mov	r3, r0
}
 8011678:	4618      	mov	r0, r3
 801167a:	3720      	adds	r7, #32
 801167c:	46bd      	mov	sp, r7
 801167e:	bd80      	pop	{r7, pc}
 8011680:	08016940 	.word	0x08016940
 8011684:	08016a90 	.word	0x08016a90
 8011688:	080169b8 	.word	0x080169b8
 801168c:	08016ae0 	.word	0x08016ae0
 8011690:	08016a80 	.word	0x08016a80
 8011694:	08017158 	.word	0x08017158
 8011698:	2401069c 	.word	0x2401069c
 801169c:	240105ac 	.word	0x240105ac

080116a0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80116a0:	b580      	push	{r7, lr}
 80116a2:	b08c      	sub	sp, #48	@ 0x30
 80116a4:	af02      	add	r7, sp, #8
 80116a6:	60f8      	str	r0, [r7, #12]
 80116a8:	60b9      	str	r1, [r7, #8]
 80116aa:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	3326      	adds	r3, #38	@ 0x26
 80116b0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80116b2:	23ff      	movs	r3, #255	@ 0xff
 80116b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 80116b8:	2300      	movs	r3, #0
 80116ba:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80116bc:	68bb      	ldr	r3, [r7, #8]
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	68f9      	ldr	r1, [r7, #12]
 80116c2:	4618      	mov	r0, r3
 80116c4:	f000 fe38 	bl	8012338 <ip4_addr_isbroadcast_u32>
 80116c8:	4603      	mov	r3, r0
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d10c      	bne.n	80116e8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80116ce:	68bb      	ldr	r3, [r7, #8]
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80116d6:	2be0      	cmp	r3, #224	@ 0xe0
 80116d8:	d006      	beq.n	80116e8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80116da:	68bb      	ldr	r3, [r7, #8]
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d003      	beq.n	80116e8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80116e0:	68bb      	ldr	r3, [r7, #8]
 80116e2:	681b      	ldr	r3, [r3, #0]
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d102      	bne.n	80116ee <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80116e8:	f06f 030f 	mvn.w	r3, #15
 80116ec:	e101      	b.n	80118f2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80116ee:	68fa      	ldr	r2, [r7, #12]
 80116f0:	2101      	movs	r1, #1
 80116f2:	68b8      	ldr	r0, [r7, #8]
 80116f4:	f7ff fb5c 	bl	8010db0 <etharp_find_entry>
 80116f8:	4603      	mov	r3, r0
 80116fa:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80116fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011700:	2b00      	cmp	r3, #0
 8011702:	da02      	bge.n	801170a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8011704:	8a7b      	ldrh	r3, [r7, #18]
 8011706:	b25b      	sxtb	r3, r3
 8011708:	e0f3      	b.n	80118f2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801170a:	8a7b      	ldrh	r3, [r7, #18]
 801170c:	2b7e      	cmp	r3, #126	@ 0x7e
 801170e:	d906      	bls.n	801171e <etharp_query+0x7e>
 8011710:	4b7a      	ldr	r3, [pc, #488]	@ (80118fc <etharp_query+0x25c>)
 8011712:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8011716:	497a      	ldr	r1, [pc, #488]	@ (8011900 <etharp_query+0x260>)
 8011718:	487a      	ldr	r0, [pc, #488]	@ (8011904 <etharp_query+0x264>)
 801171a:	f001 ff59 	bl	80135d0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801171e:	8a7b      	ldrh	r3, [r7, #18]
 8011720:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8011722:	7c7a      	ldrb	r2, [r7, #17]
 8011724:	4978      	ldr	r1, [pc, #480]	@ (8011908 <etharp_query+0x268>)
 8011726:	4613      	mov	r3, r2
 8011728:	005b      	lsls	r3, r3, #1
 801172a:	4413      	add	r3, r2
 801172c:	00db      	lsls	r3, r3, #3
 801172e:	440b      	add	r3, r1
 8011730:	3314      	adds	r3, #20
 8011732:	781b      	ldrb	r3, [r3, #0]
 8011734:	2b00      	cmp	r3, #0
 8011736:	d115      	bne.n	8011764 <etharp_query+0xc4>
    is_new_entry = 1;
 8011738:	2301      	movs	r3, #1
 801173a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801173c:	7c7a      	ldrb	r2, [r7, #17]
 801173e:	4972      	ldr	r1, [pc, #456]	@ (8011908 <etharp_query+0x268>)
 8011740:	4613      	mov	r3, r2
 8011742:	005b      	lsls	r3, r3, #1
 8011744:	4413      	add	r3, r2
 8011746:	00db      	lsls	r3, r3, #3
 8011748:	440b      	add	r3, r1
 801174a:	3314      	adds	r3, #20
 801174c:	2201      	movs	r2, #1
 801174e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8011750:	7c7a      	ldrb	r2, [r7, #17]
 8011752:	496d      	ldr	r1, [pc, #436]	@ (8011908 <etharp_query+0x268>)
 8011754:	4613      	mov	r3, r2
 8011756:	005b      	lsls	r3, r3, #1
 8011758:	4413      	add	r3, r2
 801175a:	00db      	lsls	r3, r3, #3
 801175c:	440b      	add	r3, r1
 801175e:	3308      	adds	r3, #8
 8011760:	68fa      	ldr	r2, [r7, #12]
 8011762:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8011764:	7c7a      	ldrb	r2, [r7, #17]
 8011766:	4968      	ldr	r1, [pc, #416]	@ (8011908 <etharp_query+0x268>)
 8011768:	4613      	mov	r3, r2
 801176a:	005b      	lsls	r3, r3, #1
 801176c:	4413      	add	r3, r2
 801176e:	00db      	lsls	r3, r3, #3
 8011770:	440b      	add	r3, r1
 8011772:	3314      	adds	r3, #20
 8011774:	781b      	ldrb	r3, [r3, #0]
 8011776:	2b01      	cmp	r3, #1
 8011778:	d011      	beq.n	801179e <etharp_query+0xfe>
 801177a:	7c7a      	ldrb	r2, [r7, #17]
 801177c:	4962      	ldr	r1, [pc, #392]	@ (8011908 <etharp_query+0x268>)
 801177e:	4613      	mov	r3, r2
 8011780:	005b      	lsls	r3, r3, #1
 8011782:	4413      	add	r3, r2
 8011784:	00db      	lsls	r3, r3, #3
 8011786:	440b      	add	r3, r1
 8011788:	3314      	adds	r3, #20
 801178a:	781b      	ldrb	r3, [r3, #0]
 801178c:	2b01      	cmp	r3, #1
 801178e:	d806      	bhi.n	801179e <etharp_query+0xfe>
 8011790:	4b5a      	ldr	r3, [pc, #360]	@ (80118fc <etharp_query+0x25c>)
 8011792:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8011796:	495d      	ldr	r1, [pc, #372]	@ (801190c <etharp_query+0x26c>)
 8011798:	485a      	ldr	r0, [pc, #360]	@ (8011904 <etharp_query+0x264>)
 801179a:	f001 ff19 	bl	80135d0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801179e:	6a3b      	ldr	r3, [r7, #32]
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d102      	bne.n	80117aa <etharp_query+0x10a>
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d10c      	bne.n	80117c4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80117aa:	68b9      	ldr	r1, [r7, #8]
 80117ac:	68f8      	ldr	r0, [r7, #12]
 80117ae:	f000 f963 	bl	8011a78 <etharp_request>
 80117b2:	4603      	mov	r3, r0
 80117b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d102      	bne.n	80117c4 <etharp_query+0x124>
      return result;
 80117be:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80117c2:	e096      	b.n	80118f2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d106      	bne.n	80117d8 <etharp_query+0x138>
 80117ca:	4b4c      	ldr	r3, [pc, #304]	@ (80118fc <etharp_query+0x25c>)
 80117cc:	f240 32e1 	movw	r2, #993	@ 0x3e1
 80117d0:	494f      	ldr	r1, [pc, #316]	@ (8011910 <etharp_query+0x270>)
 80117d2:	484c      	ldr	r0, [pc, #304]	@ (8011904 <etharp_query+0x264>)
 80117d4:	f001 fefc 	bl	80135d0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80117d8:	7c7a      	ldrb	r2, [r7, #17]
 80117da:	494b      	ldr	r1, [pc, #300]	@ (8011908 <etharp_query+0x268>)
 80117dc:	4613      	mov	r3, r2
 80117de:	005b      	lsls	r3, r3, #1
 80117e0:	4413      	add	r3, r2
 80117e2:	00db      	lsls	r3, r3, #3
 80117e4:	440b      	add	r3, r1
 80117e6:	3314      	adds	r3, #20
 80117e8:	781b      	ldrb	r3, [r3, #0]
 80117ea:	2b01      	cmp	r3, #1
 80117ec:	d917      	bls.n	801181e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80117ee:	4a49      	ldr	r2, [pc, #292]	@ (8011914 <etharp_query+0x274>)
 80117f0:	7c7b      	ldrb	r3, [r7, #17]
 80117f2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80117f4:	7c7a      	ldrb	r2, [r7, #17]
 80117f6:	4613      	mov	r3, r2
 80117f8:	005b      	lsls	r3, r3, #1
 80117fa:	4413      	add	r3, r2
 80117fc:	00db      	lsls	r3, r3, #3
 80117fe:	3308      	adds	r3, #8
 8011800:	4a41      	ldr	r2, [pc, #260]	@ (8011908 <etharp_query+0x268>)
 8011802:	4413      	add	r3, r2
 8011804:	3304      	adds	r3, #4
 8011806:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801180a:	9200      	str	r2, [sp, #0]
 801180c:	697a      	ldr	r2, [r7, #20]
 801180e:	6879      	ldr	r1, [r7, #4]
 8011810:	68f8      	ldr	r0, [r7, #12]
 8011812:	f001 fca1 	bl	8013158 <ethernet_output>
 8011816:	4603      	mov	r3, r0
 8011818:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801181c:	e067      	b.n	80118ee <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801181e:	7c7a      	ldrb	r2, [r7, #17]
 8011820:	4939      	ldr	r1, [pc, #228]	@ (8011908 <etharp_query+0x268>)
 8011822:	4613      	mov	r3, r2
 8011824:	005b      	lsls	r3, r3, #1
 8011826:	4413      	add	r3, r2
 8011828:	00db      	lsls	r3, r3, #3
 801182a:	440b      	add	r3, r1
 801182c:	3314      	adds	r3, #20
 801182e:	781b      	ldrb	r3, [r3, #0]
 8011830:	2b01      	cmp	r3, #1
 8011832:	d15c      	bne.n	80118ee <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8011834:	2300      	movs	r3, #0
 8011836:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801183c:	e01c      	b.n	8011878 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801183e:	69fb      	ldr	r3, [r7, #28]
 8011840:	895a      	ldrh	r2, [r3, #10]
 8011842:	69fb      	ldr	r3, [r7, #28]
 8011844:	891b      	ldrh	r3, [r3, #8]
 8011846:	429a      	cmp	r2, r3
 8011848:	d10a      	bne.n	8011860 <etharp_query+0x1c0>
 801184a:	69fb      	ldr	r3, [r7, #28]
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	2b00      	cmp	r3, #0
 8011850:	d006      	beq.n	8011860 <etharp_query+0x1c0>
 8011852:	4b2a      	ldr	r3, [pc, #168]	@ (80118fc <etharp_query+0x25c>)
 8011854:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8011858:	492f      	ldr	r1, [pc, #188]	@ (8011918 <etharp_query+0x278>)
 801185a:	482a      	ldr	r0, [pc, #168]	@ (8011904 <etharp_query+0x264>)
 801185c:	f001 feb8 	bl	80135d0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8011860:	69fb      	ldr	r3, [r7, #28]
 8011862:	7b1b      	ldrb	r3, [r3, #12]
 8011864:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011868:	2b00      	cmp	r3, #0
 801186a:	d002      	beq.n	8011872 <etharp_query+0x1d2>
        copy_needed = 1;
 801186c:	2301      	movs	r3, #1
 801186e:	61bb      	str	r3, [r7, #24]
        break;
 8011870:	e005      	b.n	801187e <etharp_query+0x1de>
      }
      p = p->next;
 8011872:	69fb      	ldr	r3, [r7, #28]
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	61fb      	str	r3, [r7, #28]
    while (p) {
 8011878:	69fb      	ldr	r3, [r7, #28]
 801187a:	2b00      	cmp	r3, #0
 801187c:	d1df      	bne.n	801183e <etharp_query+0x19e>
    }
    if (copy_needed) {
 801187e:	69bb      	ldr	r3, [r7, #24]
 8011880:	2b00      	cmp	r3, #0
 8011882:	d007      	beq.n	8011894 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8011884:	687a      	ldr	r2, [r7, #4]
 8011886:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801188a:	200e      	movs	r0, #14
 801188c:	f7f9 fcdc 	bl	800b248 <pbuf_clone>
 8011890:	61f8      	str	r0, [r7, #28]
 8011892:	e004      	b.n	801189e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8011898:	69f8      	ldr	r0, [r7, #28]
 801189a:	f7f9 fb13 	bl	800aec4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801189e:	69fb      	ldr	r3, [r7, #28]
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d021      	beq.n	80118e8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80118a4:	7c7a      	ldrb	r2, [r7, #17]
 80118a6:	4918      	ldr	r1, [pc, #96]	@ (8011908 <etharp_query+0x268>)
 80118a8:	4613      	mov	r3, r2
 80118aa:	005b      	lsls	r3, r3, #1
 80118ac:	4413      	add	r3, r2
 80118ae:	00db      	lsls	r3, r3, #3
 80118b0:	440b      	add	r3, r1
 80118b2:	681b      	ldr	r3, [r3, #0]
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d00a      	beq.n	80118ce <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80118b8:	7c7a      	ldrb	r2, [r7, #17]
 80118ba:	4913      	ldr	r1, [pc, #76]	@ (8011908 <etharp_query+0x268>)
 80118bc:	4613      	mov	r3, r2
 80118be:	005b      	lsls	r3, r3, #1
 80118c0:	4413      	add	r3, r2
 80118c2:	00db      	lsls	r3, r3, #3
 80118c4:	440b      	add	r3, r1
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	4618      	mov	r0, r3
 80118ca:	f7f9 fa55 	bl	800ad78 <pbuf_free>
      }
      arp_table[i].q = p;
 80118ce:	7c7a      	ldrb	r2, [r7, #17]
 80118d0:	490d      	ldr	r1, [pc, #52]	@ (8011908 <etharp_query+0x268>)
 80118d2:	4613      	mov	r3, r2
 80118d4:	005b      	lsls	r3, r3, #1
 80118d6:	4413      	add	r3, r2
 80118d8:	00db      	lsls	r3, r3, #3
 80118da:	440b      	add	r3, r1
 80118dc:	69fa      	ldr	r2, [r7, #28]
 80118de:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80118e0:	2300      	movs	r3, #0
 80118e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80118e6:	e002      	b.n	80118ee <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80118e8:	23ff      	movs	r3, #255	@ 0xff
 80118ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 80118ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80118f2:	4618      	mov	r0, r3
 80118f4:	3728      	adds	r7, #40	@ 0x28
 80118f6:	46bd      	mov	sp, r7
 80118f8:	bd80      	pop	{r7, pc}
 80118fa:	bf00      	nop
 80118fc:	08016940 	.word	0x08016940
 8011900:	08016aec 	.word	0x08016aec
 8011904:	080169b8 	.word	0x080169b8
 8011908:	240105ac 	.word	0x240105ac
 801190c:	08016afc 	.word	0x08016afc
 8011910:	08016ae0 	.word	0x08016ae0
 8011914:	2401069c 	.word	0x2401069c
 8011918:	08016b24 	.word	0x08016b24

0801191c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801191c:	b580      	push	{r7, lr}
 801191e:	b08a      	sub	sp, #40	@ 0x28
 8011920:	af02      	add	r7, sp, #8
 8011922:	60f8      	str	r0, [r7, #12]
 8011924:	60b9      	str	r1, [r7, #8]
 8011926:	607a      	str	r2, [r7, #4]
 8011928:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801192a:	2300      	movs	r3, #0
 801192c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801192e:	68fb      	ldr	r3, [r7, #12]
 8011930:	2b00      	cmp	r3, #0
 8011932:	d106      	bne.n	8011942 <etharp_raw+0x26>
 8011934:	4b3a      	ldr	r3, [pc, #232]	@ (8011a20 <etharp_raw+0x104>)
 8011936:	f240 4257 	movw	r2, #1111	@ 0x457
 801193a:	493a      	ldr	r1, [pc, #232]	@ (8011a24 <etharp_raw+0x108>)
 801193c:	483a      	ldr	r0, [pc, #232]	@ (8011a28 <etharp_raw+0x10c>)
 801193e:	f001 fe47 	bl	80135d0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8011942:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011946:	211c      	movs	r1, #28
 8011948:	200e      	movs	r0, #14
 801194a:	f7f8 ff2d 	bl	800a7a8 <pbuf_alloc>
 801194e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8011950:	69bb      	ldr	r3, [r7, #24]
 8011952:	2b00      	cmp	r3, #0
 8011954:	d102      	bne.n	801195c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8011956:	f04f 33ff 	mov.w	r3, #4294967295
 801195a:	e05d      	b.n	8011a18 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801195c:	69bb      	ldr	r3, [r7, #24]
 801195e:	895b      	ldrh	r3, [r3, #10]
 8011960:	2b1b      	cmp	r3, #27
 8011962:	d806      	bhi.n	8011972 <etharp_raw+0x56>
 8011964:	4b2e      	ldr	r3, [pc, #184]	@ (8011a20 <etharp_raw+0x104>)
 8011966:	f240 4262 	movw	r2, #1122	@ 0x462
 801196a:	4930      	ldr	r1, [pc, #192]	@ (8011a2c <etharp_raw+0x110>)
 801196c:	482e      	ldr	r0, [pc, #184]	@ (8011a28 <etharp_raw+0x10c>)
 801196e:	f001 fe2f 	bl	80135d0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8011972:	69bb      	ldr	r3, [r7, #24]
 8011974:	685b      	ldr	r3, [r3, #4]
 8011976:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8011978:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801197a:	4618      	mov	r0, r3
 801197c:	f7f7 fd32 	bl	80093e4 <lwip_htons>
 8011980:	4603      	mov	r3, r0
 8011982:	461a      	mov	r2, r3
 8011984:	697b      	ldr	r3, [r7, #20]
 8011986:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801198e:	2b06      	cmp	r3, #6
 8011990:	d006      	beq.n	80119a0 <etharp_raw+0x84>
 8011992:	4b23      	ldr	r3, [pc, #140]	@ (8011a20 <etharp_raw+0x104>)
 8011994:	f240 4269 	movw	r2, #1129	@ 0x469
 8011998:	4925      	ldr	r1, [pc, #148]	@ (8011a30 <etharp_raw+0x114>)
 801199a:	4823      	ldr	r0, [pc, #140]	@ (8011a28 <etharp_raw+0x10c>)
 801199c:	f001 fe18 	bl	80135d0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80119a0:	697b      	ldr	r3, [r7, #20]
 80119a2:	3308      	adds	r3, #8
 80119a4:	2206      	movs	r2, #6
 80119a6:	6839      	ldr	r1, [r7, #0]
 80119a8:	4618      	mov	r0, r3
 80119aa:	f001 ff42 	bl	8013832 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80119ae:	697b      	ldr	r3, [r7, #20]
 80119b0:	3312      	adds	r3, #18
 80119b2:	2206      	movs	r2, #6
 80119b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80119b6:	4618      	mov	r0, r3
 80119b8:	f001 ff3b 	bl	8013832 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80119bc:	697b      	ldr	r3, [r7, #20]
 80119be:	330e      	adds	r3, #14
 80119c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80119c2:	6812      	ldr	r2, [r2, #0]
 80119c4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80119c6:	697b      	ldr	r3, [r7, #20]
 80119c8:	3318      	adds	r3, #24
 80119ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80119cc:	6812      	ldr	r2, [r2, #0]
 80119ce:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80119d0:	697b      	ldr	r3, [r7, #20]
 80119d2:	2200      	movs	r2, #0
 80119d4:	701a      	strb	r2, [r3, #0]
 80119d6:	2200      	movs	r2, #0
 80119d8:	f042 0201 	orr.w	r2, r2, #1
 80119dc:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80119de:	697b      	ldr	r3, [r7, #20]
 80119e0:	2200      	movs	r2, #0
 80119e2:	f042 0208 	orr.w	r2, r2, #8
 80119e6:	709a      	strb	r2, [r3, #2]
 80119e8:	2200      	movs	r2, #0
 80119ea:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80119ec:	697b      	ldr	r3, [r7, #20]
 80119ee:	2206      	movs	r2, #6
 80119f0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80119f2:	697b      	ldr	r3, [r7, #20]
 80119f4:	2204      	movs	r2, #4
 80119f6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80119f8:	f640 0306 	movw	r3, #2054	@ 0x806
 80119fc:	9300      	str	r3, [sp, #0]
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	68ba      	ldr	r2, [r7, #8]
 8011a02:	69b9      	ldr	r1, [r7, #24]
 8011a04:	68f8      	ldr	r0, [r7, #12]
 8011a06:	f001 fba7 	bl	8013158 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8011a0a:	69b8      	ldr	r0, [r7, #24]
 8011a0c:	f7f9 f9b4 	bl	800ad78 <pbuf_free>
  p = NULL;
 8011a10:	2300      	movs	r3, #0
 8011a12:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8011a14:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011a18:	4618      	mov	r0, r3
 8011a1a:	3720      	adds	r7, #32
 8011a1c:	46bd      	mov	sp, r7
 8011a1e:	bd80      	pop	{r7, pc}
 8011a20:	08016940 	.word	0x08016940
 8011a24:	08016a90 	.word	0x08016a90
 8011a28:	080169b8 	.word	0x080169b8
 8011a2c:	08016b40 	.word	0x08016b40
 8011a30:	08016b74 	.word	0x08016b74

08011a34 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8011a34:	b580      	push	{r7, lr}
 8011a36:	b088      	sub	sp, #32
 8011a38:	af04      	add	r7, sp, #16
 8011a3a:	60f8      	str	r0, [r7, #12]
 8011a3c:	60b9      	str	r1, [r7, #8]
 8011a3e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8011a46:	68fb      	ldr	r3, [r7, #12]
 8011a48:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011a50:	2201      	movs	r2, #1
 8011a52:	9203      	str	r2, [sp, #12]
 8011a54:	68ba      	ldr	r2, [r7, #8]
 8011a56:	9202      	str	r2, [sp, #8]
 8011a58:	4a06      	ldr	r2, [pc, #24]	@ (8011a74 <etharp_request_dst+0x40>)
 8011a5a:	9201      	str	r2, [sp, #4]
 8011a5c:	9300      	str	r3, [sp, #0]
 8011a5e:	4603      	mov	r3, r0
 8011a60:	687a      	ldr	r2, [r7, #4]
 8011a62:	68f8      	ldr	r0, [r7, #12]
 8011a64:	f7ff ff5a 	bl	801191c <etharp_raw>
 8011a68:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8011a6a:	4618      	mov	r0, r3
 8011a6c:	3710      	adds	r7, #16
 8011a6e:	46bd      	mov	sp, r7
 8011a70:	bd80      	pop	{r7, pc}
 8011a72:	bf00      	nop
 8011a74:	08017160 	.word	0x08017160

08011a78 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8011a78:	b580      	push	{r7, lr}
 8011a7a:	b082      	sub	sp, #8
 8011a7c:	af00      	add	r7, sp, #0
 8011a7e:	6078      	str	r0, [r7, #4]
 8011a80:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8011a82:	4a05      	ldr	r2, [pc, #20]	@ (8011a98 <etharp_request+0x20>)
 8011a84:	6839      	ldr	r1, [r7, #0]
 8011a86:	6878      	ldr	r0, [r7, #4]
 8011a88:	f7ff ffd4 	bl	8011a34 <etharp_request_dst>
 8011a8c:	4603      	mov	r3, r0
}
 8011a8e:	4618      	mov	r0, r3
 8011a90:	3708      	adds	r7, #8
 8011a92:	46bd      	mov	sp, r7
 8011a94:	bd80      	pop	{r7, pc}
 8011a96:	bf00      	nop
 8011a98:	08017158 	.word	0x08017158

08011a9c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8011a9c:	b580      	push	{r7, lr}
 8011a9e:	b08e      	sub	sp, #56	@ 0x38
 8011aa0:	af04      	add	r7, sp, #16
 8011aa2:	6078      	str	r0, [r7, #4]
 8011aa4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8011aa6:	4b87      	ldr	r3, [pc, #540]	@ (8011cc4 <icmp_input+0x228>)
 8011aa8:	689b      	ldr	r3, [r3, #8]
 8011aaa:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8011aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011aae:	781b      	ldrb	r3, [r3, #0]
 8011ab0:	f003 030f 	and.w	r3, r3, #15
 8011ab4:	b2db      	uxtb	r3, r3
 8011ab6:	009b      	lsls	r3, r3, #2
 8011ab8:	b2db      	uxtb	r3, r3
 8011aba:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8011abc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011abe:	2b13      	cmp	r3, #19
 8011ac0:	f240 80e8 	bls.w	8011c94 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	895b      	ldrh	r3, [r3, #10]
 8011ac8:	2b03      	cmp	r3, #3
 8011aca:	f240 80e5 	bls.w	8011c98 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	685b      	ldr	r3, [r3, #4]
 8011ad2:	781b      	ldrb	r3, [r3, #0]
 8011ad4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8011ad8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	f000 80d2 	beq.w	8011c86 <icmp_input+0x1ea>
 8011ae2:	2b08      	cmp	r3, #8
 8011ae4:	f040 80d2 	bne.w	8011c8c <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8011ae8:	4b77      	ldr	r3, [pc, #476]	@ (8011cc8 <icmp_input+0x22c>)
 8011aea:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011aec:	4b75      	ldr	r3, [pc, #468]	@ (8011cc4 <icmp_input+0x228>)
 8011aee:	695b      	ldr	r3, [r3, #20]
 8011af0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011af4:	2be0      	cmp	r3, #224	@ 0xe0
 8011af6:	f000 80d6 	beq.w	8011ca6 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8011afa:	4b72      	ldr	r3, [pc, #456]	@ (8011cc4 <icmp_input+0x228>)
 8011afc:	695b      	ldr	r3, [r3, #20]
 8011afe:	4a71      	ldr	r2, [pc, #452]	@ (8011cc4 <icmp_input+0x228>)
 8011b00:	6812      	ldr	r2, [r2, #0]
 8011b02:	4611      	mov	r1, r2
 8011b04:	4618      	mov	r0, r3
 8011b06:	f000 fc17 	bl	8012338 <ip4_addr_isbroadcast_u32>
 8011b0a:	4603      	mov	r3, r0
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	f040 80cc 	bne.w	8011caa <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	891b      	ldrh	r3, [r3, #8]
 8011b16:	2b07      	cmp	r3, #7
 8011b18:	f240 80c0 	bls.w	8011c9c <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8011b1c:	6878      	ldr	r0, [r7, #4]
 8011b1e:	f7f7 fcfe 	bl	800951e <inet_chksum_pbuf>
 8011b22:	4603      	mov	r3, r0
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d003      	beq.n	8011b30 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8011b28:	6878      	ldr	r0, [r7, #4]
 8011b2a:	f7f9 f925 	bl	800ad78 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8011b2e:	e0c5      	b.n	8011cbc <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011b30:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011b32:	330e      	adds	r3, #14
 8011b34:	4619      	mov	r1, r3
 8011b36:	6878      	ldr	r0, [r7, #4]
 8011b38:	f7f9 f888 	bl	800ac4c <pbuf_add_header>
 8011b3c:	4603      	mov	r3, r0
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d04b      	beq.n	8011bda <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	891a      	ldrh	r2, [r3, #8]
 8011b46:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011b48:	4413      	add	r3, r2
 8011b4a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	891b      	ldrh	r3, [r3, #8]
 8011b50:	8b7a      	ldrh	r2, [r7, #26]
 8011b52:	429a      	cmp	r2, r3
 8011b54:	f0c0 80ab 	bcc.w	8011cae <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8011b58:	8b7b      	ldrh	r3, [r7, #26]
 8011b5a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011b5e:	4619      	mov	r1, r3
 8011b60:	200e      	movs	r0, #14
 8011b62:	f7f8 fe21 	bl	800a7a8 <pbuf_alloc>
 8011b66:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8011b68:	697b      	ldr	r3, [r7, #20]
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	f000 80a1 	beq.w	8011cb2 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8011b70:	697b      	ldr	r3, [r7, #20]
 8011b72:	895b      	ldrh	r3, [r3, #10]
 8011b74:	461a      	mov	r2, r3
 8011b76:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011b78:	3308      	adds	r3, #8
 8011b7a:	429a      	cmp	r2, r3
 8011b7c:	d203      	bcs.n	8011b86 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8011b7e:	6978      	ldr	r0, [r7, #20]
 8011b80:	f7f9 f8fa 	bl	800ad78 <pbuf_free>
          goto icmperr;
 8011b84:	e096      	b.n	8011cb4 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8011b86:	697b      	ldr	r3, [r7, #20]
 8011b88:	685b      	ldr	r3, [r3, #4]
 8011b8a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8011b8c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011b8e:	4618      	mov	r0, r3
 8011b90:	f001 fe4f 	bl	8013832 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8011b94:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011b96:	4619      	mov	r1, r3
 8011b98:	6978      	ldr	r0, [r7, #20]
 8011b9a:	f7f9 f867 	bl	800ac6c <pbuf_remove_header>
 8011b9e:	4603      	mov	r3, r0
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d009      	beq.n	8011bb8 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8011ba4:	4b49      	ldr	r3, [pc, #292]	@ (8011ccc <icmp_input+0x230>)
 8011ba6:	22b6      	movs	r2, #182	@ 0xb6
 8011ba8:	4949      	ldr	r1, [pc, #292]	@ (8011cd0 <icmp_input+0x234>)
 8011baa:	484a      	ldr	r0, [pc, #296]	@ (8011cd4 <icmp_input+0x238>)
 8011bac:	f001 fd10 	bl	80135d0 <iprintf>
          pbuf_free(r);
 8011bb0:	6978      	ldr	r0, [r7, #20]
 8011bb2:	f7f9 f8e1 	bl	800ad78 <pbuf_free>
          goto icmperr;
 8011bb6:	e07d      	b.n	8011cb4 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8011bb8:	6879      	ldr	r1, [r7, #4]
 8011bba:	6978      	ldr	r0, [r7, #20]
 8011bbc:	f7f9 fa00 	bl	800afc0 <pbuf_copy>
 8011bc0:	4603      	mov	r3, r0
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d003      	beq.n	8011bce <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8011bc6:	6978      	ldr	r0, [r7, #20]
 8011bc8:	f7f9 f8d6 	bl	800ad78 <pbuf_free>
          goto icmperr;
 8011bcc:	e072      	b.n	8011cb4 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8011bce:	6878      	ldr	r0, [r7, #4]
 8011bd0:	f7f9 f8d2 	bl	800ad78 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8011bd4:	697b      	ldr	r3, [r7, #20]
 8011bd6:	607b      	str	r3, [r7, #4]
 8011bd8:	e00f      	b.n	8011bfa <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011bda:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011bdc:	330e      	adds	r3, #14
 8011bde:	4619      	mov	r1, r3
 8011be0:	6878      	ldr	r0, [r7, #4]
 8011be2:	f7f9 f843 	bl	800ac6c <pbuf_remove_header>
 8011be6:	4603      	mov	r3, r0
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d006      	beq.n	8011bfa <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8011bec:	4b37      	ldr	r3, [pc, #220]	@ (8011ccc <icmp_input+0x230>)
 8011bee:	22c7      	movs	r2, #199	@ 0xc7
 8011bf0:	4939      	ldr	r1, [pc, #228]	@ (8011cd8 <icmp_input+0x23c>)
 8011bf2:	4838      	ldr	r0, [pc, #224]	@ (8011cd4 <icmp_input+0x238>)
 8011bf4:	f001 fcec 	bl	80135d0 <iprintf>
          goto icmperr;
 8011bf8:	e05c      	b.n	8011cb4 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	685b      	ldr	r3, [r3, #4]
 8011bfe:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8011c00:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011c02:	4619      	mov	r1, r3
 8011c04:	6878      	ldr	r0, [r7, #4]
 8011c06:	f7f9 f821 	bl	800ac4c <pbuf_add_header>
 8011c0a:	4603      	mov	r3, r0
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d13c      	bne.n	8011c8a <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	685b      	ldr	r3, [r3, #4]
 8011c14:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8011c16:	69fb      	ldr	r3, [r7, #28]
 8011c18:	681a      	ldr	r2, [r3, #0]
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8011c1e:	4b29      	ldr	r3, [pc, #164]	@ (8011cc4 <icmp_input+0x228>)
 8011c20:	691a      	ldr	r2, [r3, #16]
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8011c26:	693b      	ldr	r3, [r7, #16]
 8011c28:	2200      	movs	r2, #0
 8011c2a:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8011c2c:	693b      	ldr	r3, [r7, #16]
 8011c2e:	885b      	ldrh	r3, [r3, #2]
 8011c30:	b29b      	uxth	r3, r3
 8011c32:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8011c36:	4293      	cmp	r3, r2
 8011c38:	d907      	bls.n	8011c4a <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8011c3a:	693b      	ldr	r3, [r7, #16]
 8011c3c:	885b      	ldrh	r3, [r3, #2]
 8011c3e:	b29b      	uxth	r3, r3
 8011c40:	3309      	adds	r3, #9
 8011c42:	b29a      	uxth	r2, r3
 8011c44:	693b      	ldr	r3, [r7, #16]
 8011c46:	805a      	strh	r2, [r3, #2]
 8011c48:	e006      	b.n	8011c58 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8011c4a:	693b      	ldr	r3, [r7, #16]
 8011c4c:	885b      	ldrh	r3, [r3, #2]
 8011c4e:	b29b      	uxth	r3, r3
 8011c50:	3308      	adds	r3, #8
 8011c52:	b29a      	uxth	r2, r3
 8011c54:	693b      	ldr	r3, [r7, #16]
 8011c56:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	22ff      	movs	r2, #255	@ 0xff
 8011c5c:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	2200      	movs	r2, #0
 8011c62:	729a      	strb	r2, [r3, #10]
 8011c64:	2200      	movs	r2, #0
 8011c66:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8011c68:	683b      	ldr	r3, [r7, #0]
 8011c6a:	9302      	str	r3, [sp, #8]
 8011c6c:	2301      	movs	r3, #1
 8011c6e:	9301      	str	r3, [sp, #4]
 8011c70:	2300      	movs	r3, #0
 8011c72:	9300      	str	r3, [sp, #0]
 8011c74:	23ff      	movs	r3, #255	@ 0xff
 8011c76:	2200      	movs	r2, #0
 8011c78:	69f9      	ldr	r1, [r7, #28]
 8011c7a:	6878      	ldr	r0, [r7, #4]
 8011c7c:	f000 fa82 	bl	8012184 <ip4_output_if>
 8011c80:	4603      	mov	r3, r0
 8011c82:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8011c84:	e001      	b.n	8011c8a <icmp_input+0x1ee>
      break;
 8011c86:	bf00      	nop
 8011c88:	e000      	b.n	8011c8c <icmp_input+0x1f0>
      break;
 8011c8a:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8011c8c:	6878      	ldr	r0, [r7, #4]
 8011c8e:	f7f9 f873 	bl	800ad78 <pbuf_free>
  return;
 8011c92:	e013      	b.n	8011cbc <icmp_input+0x220>
    goto lenerr;
 8011c94:	bf00      	nop
 8011c96:	e002      	b.n	8011c9e <icmp_input+0x202>
    goto lenerr;
 8011c98:	bf00      	nop
 8011c9a:	e000      	b.n	8011c9e <icmp_input+0x202>
        goto lenerr;
 8011c9c:	bf00      	nop
lenerr:
  pbuf_free(p);
 8011c9e:	6878      	ldr	r0, [r7, #4]
 8011ca0:	f7f9 f86a 	bl	800ad78 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011ca4:	e00a      	b.n	8011cbc <icmp_input+0x220>
        goto icmperr;
 8011ca6:	bf00      	nop
 8011ca8:	e004      	b.n	8011cb4 <icmp_input+0x218>
        goto icmperr;
 8011caa:	bf00      	nop
 8011cac:	e002      	b.n	8011cb4 <icmp_input+0x218>
          goto icmperr;
 8011cae:	bf00      	nop
 8011cb0:	e000      	b.n	8011cb4 <icmp_input+0x218>
          goto icmperr;
 8011cb2:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8011cb4:	6878      	ldr	r0, [r7, #4]
 8011cb6:	f7f9 f85f 	bl	800ad78 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011cba:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8011cbc:	3728      	adds	r7, #40	@ 0x28
 8011cbe:	46bd      	mov	sp, r7
 8011cc0:	bd80      	pop	{r7, pc}
 8011cc2:	bf00      	nop
 8011cc4:	24009a8c 	.word	0x24009a8c
 8011cc8:	24009aa0 	.word	0x24009aa0
 8011ccc:	08016bb8 	.word	0x08016bb8
 8011cd0:	08016bf0 	.word	0x08016bf0
 8011cd4:	08016c28 	.word	0x08016c28
 8011cd8:	08016c50 	.word	0x08016c50

08011cdc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8011cdc:	b580      	push	{r7, lr}
 8011cde:	b082      	sub	sp, #8
 8011ce0:	af00      	add	r7, sp, #0
 8011ce2:	6078      	str	r0, [r7, #4]
 8011ce4:	460b      	mov	r3, r1
 8011ce6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8011ce8:	78fb      	ldrb	r3, [r7, #3]
 8011cea:	461a      	mov	r2, r3
 8011cec:	2103      	movs	r1, #3
 8011cee:	6878      	ldr	r0, [r7, #4]
 8011cf0:	f000 f814 	bl	8011d1c <icmp_send_response>
}
 8011cf4:	bf00      	nop
 8011cf6:	3708      	adds	r7, #8
 8011cf8:	46bd      	mov	sp, r7
 8011cfa:	bd80      	pop	{r7, pc}

08011cfc <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8011cfc:	b580      	push	{r7, lr}
 8011cfe:	b082      	sub	sp, #8
 8011d00:	af00      	add	r7, sp, #0
 8011d02:	6078      	str	r0, [r7, #4]
 8011d04:	460b      	mov	r3, r1
 8011d06:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8011d08:	78fb      	ldrb	r3, [r7, #3]
 8011d0a:	461a      	mov	r2, r3
 8011d0c:	210b      	movs	r1, #11
 8011d0e:	6878      	ldr	r0, [r7, #4]
 8011d10:	f000 f804 	bl	8011d1c <icmp_send_response>
}
 8011d14:	bf00      	nop
 8011d16:	3708      	adds	r7, #8
 8011d18:	46bd      	mov	sp, r7
 8011d1a:	bd80      	pop	{r7, pc}

08011d1c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8011d1c:	b580      	push	{r7, lr}
 8011d1e:	b08c      	sub	sp, #48	@ 0x30
 8011d20:	af04      	add	r7, sp, #16
 8011d22:	6078      	str	r0, [r7, #4]
 8011d24:	460b      	mov	r3, r1
 8011d26:	70fb      	strb	r3, [r7, #3]
 8011d28:	4613      	mov	r3, r2
 8011d2a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8011d2c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011d30:	2124      	movs	r1, #36	@ 0x24
 8011d32:	2022      	movs	r0, #34	@ 0x22
 8011d34:	f7f8 fd38 	bl	800a7a8 <pbuf_alloc>
 8011d38:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8011d3a:	69fb      	ldr	r3, [r7, #28]
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d056      	beq.n	8011dee <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8011d40:	69fb      	ldr	r3, [r7, #28]
 8011d42:	895b      	ldrh	r3, [r3, #10]
 8011d44:	2b23      	cmp	r3, #35	@ 0x23
 8011d46:	d806      	bhi.n	8011d56 <icmp_send_response+0x3a>
 8011d48:	4b2b      	ldr	r3, [pc, #172]	@ (8011df8 <icmp_send_response+0xdc>)
 8011d4a:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8011d4e:	492b      	ldr	r1, [pc, #172]	@ (8011dfc <icmp_send_response+0xe0>)
 8011d50:	482b      	ldr	r0, [pc, #172]	@ (8011e00 <icmp_send_response+0xe4>)
 8011d52:	f001 fc3d 	bl	80135d0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	685b      	ldr	r3, [r3, #4]
 8011d5a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8011d5c:	69fb      	ldr	r3, [r7, #28]
 8011d5e:	685b      	ldr	r3, [r3, #4]
 8011d60:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8011d62:	697b      	ldr	r3, [r7, #20]
 8011d64:	78fa      	ldrb	r2, [r7, #3]
 8011d66:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8011d68:	697b      	ldr	r3, [r7, #20]
 8011d6a:	78ba      	ldrb	r2, [r7, #2]
 8011d6c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8011d6e:	697b      	ldr	r3, [r7, #20]
 8011d70:	2200      	movs	r2, #0
 8011d72:	711a      	strb	r2, [r3, #4]
 8011d74:	2200      	movs	r2, #0
 8011d76:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8011d78:	697b      	ldr	r3, [r7, #20]
 8011d7a:	2200      	movs	r2, #0
 8011d7c:	719a      	strb	r2, [r3, #6]
 8011d7e:	2200      	movs	r2, #0
 8011d80:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8011d82:	69fb      	ldr	r3, [r7, #28]
 8011d84:	685b      	ldr	r3, [r3, #4]
 8011d86:	f103 0008 	add.w	r0, r3, #8
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	685b      	ldr	r3, [r3, #4]
 8011d8e:	221c      	movs	r2, #28
 8011d90:	4619      	mov	r1, r3
 8011d92:	f001 fd4e 	bl	8013832 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8011d96:	69bb      	ldr	r3, [r7, #24]
 8011d98:	68db      	ldr	r3, [r3, #12]
 8011d9a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8011d9c:	f107 030c 	add.w	r3, r7, #12
 8011da0:	4618      	mov	r0, r3
 8011da2:	f000 f82f 	bl	8011e04 <ip4_route>
 8011da6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8011da8:	693b      	ldr	r3, [r7, #16]
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d01b      	beq.n	8011de6 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8011dae:	697b      	ldr	r3, [r7, #20]
 8011db0:	2200      	movs	r2, #0
 8011db2:	709a      	strb	r2, [r3, #2]
 8011db4:	2200      	movs	r2, #0
 8011db6:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8011db8:	69fb      	ldr	r3, [r7, #28]
 8011dba:	895b      	ldrh	r3, [r3, #10]
 8011dbc:	4619      	mov	r1, r3
 8011dbe:	6978      	ldr	r0, [r7, #20]
 8011dc0:	f7f7 fb9b 	bl	80094fa <inet_chksum>
 8011dc4:	4603      	mov	r3, r0
 8011dc6:	461a      	mov	r2, r3
 8011dc8:	697b      	ldr	r3, [r7, #20]
 8011dca:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8011dcc:	f107 020c 	add.w	r2, r7, #12
 8011dd0:	693b      	ldr	r3, [r7, #16]
 8011dd2:	9302      	str	r3, [sp, #8]
 8011dd4:	2301      	movs	r3, #1
 8011dd6:	9301      	str	r3, [sp, #4]
 8011dd8:	2300      	movs	r3, #0
 8011dda:	9300      	str	r3, [sp, #0]
 8011ddc:	23ff      	movs	r3, #255	@ 0xff
 8011dde:	2100      	movs	r1, #0
 8011de0:	69f8      	ldr	r0, [r7, #28]
 8011de2:	f000 f9cf 	bl	8012184 <ip4_output_if>
  }
  pbuf_free(q);
 8011de6:	69f8      	ldr	r0, [r7, #28]
 8011de8:	f7f8 ffc6 	bl	800ad78 <pbuf_free>
 8011dec:	e000      	b.n	8011df0 <icmp_send_response+0xd4>
    return;
 8011dee:	bf00      	nop
}
 8011df0:	3720      	adds	r7, #32
 8011df2:	46bd      	mov	sp, r7
 8011df4:	bd80      	pop	{r7, pc}
 8011df6:	bf00      	nop
 8011df8:	08016bb8 	.word	0x08016bb8
 8011dfc:	08016c84 	.word	0x08016c84
 8011e00:	08016c28 	.word	0x08016c28

08011e04 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8011e04:	b580      	push	{r7, lr}
 8011e06:	b084      	sub	sp, #16
 8011e08:	af00      	add	r7, sp, #0
 8011e0a:	6078      	str	r0, [r7, #4]
#if !LWIP_SINGLE_NETIF
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();
 8011e0c:	f7f3 fa74 	bl	80052f8 <sys_check_core_locking>

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8011e10:	4b32      	ldr	r3, [pc, #200]	@ (8011edc <ip4_route+0xd8>)
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	60fb      	str	r3, [r7, #12]
 8011e16:	e036      	b.n	8011e86 <ip4_route+0x82>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011e18:	68fb      	ldr	r3, [r7, #12]
 8011e1a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011e1e:	f003 0301 	and.w	r3, r3, #1
 8011e22:	b2db      	uxtb	r3, r3
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d02b      	beq.n	8011e80 <ip4_route+0x7c>
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011e2e:	089b      	lsrs	r3, r3, #2
 8011e30:	f003 0301 	and.w	r3, r3, #1
 8011e34:	b2db      	uxtb	r3, r3
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d022      	beq.n	8011e80 <ip4_route+0x7c>
 8011e3a:	68fb      	ldr	r3, [r7, #12]
 8011e3c:	3304      	adds	r3, #4
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d01d      	beq.n	8011e80 <ip4_route+0x7c>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	681a      	ldr	r2, [r3, #0]
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	3304      	adds	r3, #4
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	405a      	eors	r2, r3
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	3308      	adds	r3, #8
 8011e54:	681b      	ldr	r3, [r3, #0]
 8011e56:	4013      	ands	r3, r2
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d101      	bne.n	8011e60 <ip4_route+0x5c>
        /* return netif on which to forward IP packet */
        return netif;
 8011e5c:	68fb      	ldr	r3, [r7, #12]
 8011e5e:	e038      	b.n	8011ed2 <ip4_route+0xce>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011e66:	f003 0302 	and.w	r3, r3, #2
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d108      	bne.n	8011e80 <ip4_route+0x7c>
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	681a      	ldr	r2, [r3, #0]
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	330c      	adds	r3, #12
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	429a      	cmp	r2, r3
 8011e7a:	d101      	bne.n	8011e80 <ip4_route+0x7c>
        /* return netif on which to forward IP packet */
        return netif;
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	e028      	b.n	8011ed2 <ip4_route+0xce>
  NETIF_FOREACH(netif) {
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	60fb      	str	r3, [r7, #12]
 8011e86:	68fb      	ldr	r3, [r7, #12]
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d1c5      	bne.n	8011e18 <ip4_route+0x14>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011e8c:	4b14      	ldr	r3, [pc, #80]	@ (8011ee0 <ip4_route+0xdc>)
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d01a      	beq.n	8011eca <ip4_route+0xc6>
 8011e94:	4b12      	ldr	r3, [pc, #72]	@ (8011ee0 <ip4_route+0xdc>)
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011e9c:	f003 0301 	and.w	r3, r3, #1
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d012      	beq.n	8011eca <ip4_route+0xc6>
 8011ea4:	4b0e      	ldr	r3, [pc, #56]	@ (8011ee0 <ip4_route+0xdc>)
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011eac:	f003 0304 	and.w	r3, r3, #4
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d00a      	beq.n	8011eca <ip4_route+0xc6>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011eb4:	4b0a      	ldr	r3, [pc, #40]	@ (8011ee0 <ip4_route+0xdc>)
 8011eb6:	681b      	ldr	r3, [r3, #0]
 8011eb8:	3304      	adds	r3, #4
 8011eba:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d004      	beq.n	8011eca <ip4_route+0xc6>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	b2db      	uxtb	r3, r3
 8011ec6:	2b7f      	cmp	r3, #127	@ 0x7f
 8011ec8:	d101      	bne.n	8011ece <ip4_route+0xca>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8011eca:	2300      	movs	r3, #0
 8011ecc:	e001      	b.n	8011ed2 <ip4_route+0xce>
  }

  return netif_default;
 8011ece:	4b04      	ldr	r3, [pc, #16]	@ (8011ee0 <ip4_route+0xdc>)
 8011ed0:	681b      	ldr	r3, [r3, #0]
}
 8011ed2:	4618      	mov	r0, r3
 8011ed4:	3710      	adds	r7, #16
 8011ed6:	46bd      	mov	sp, r7
 8011ed8:	bd80      	pop	{r7, pc}
 8011eda:	bf00      	nop
 8011edc:	24010540 	.word	0x24010540
 8011ee0:	24010544 	.word	0x24010544

08011ee4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8011ee4:	b580      	push	{r7, lr}
 8011ee6:	b082      	sub	sp, #8
 8011ee8:	af00      	add	r7, sp, #0
 8011eea:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011ef2:	f003 0301 	and.w	r3, r3, #1
 8011ef6:	b2db      	uxtb	r3, r3
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d016      	beq.n	8011f2a <ip4_input_accept+0x46>
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	3304      	adds	r3, #4
 8011f00:	681b      	ldr	r3, [r3, #0]
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d011      	beq.n	8011f2a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011f06:	4b0b      	ldr	r3, [pc, #44]	@ (8011f34 <ip4_input_accept+0x50>)
 8011f08:	695a      	ldr	r2, [r3, #20]
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	3304      	adds	r3, #4
 8011f0e:	681b      	ldr	r3, [r3, #0]
 8011f10:	429a      	cmp	r2, r3
 8011f12:	d008      	beq.n	8011f26 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8011f14:	4b07      	ldr	r3, [pc, #28]	@ (8011f34 <ip4_input_accept+0x50>)
 8011f16:	695b      	ldr	r3, [r3, #20]
 8011f18:	6879      	ldr	r1, [r7, #4]
 8011f1a:	4618      	mov	r0, r3
 8011f1c:	f000 fa0c 	bl	8012338 <ip4_addr_isbroadcast_u32>
 8011f20:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d001      	beq.n	8011f2a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8011f26:	2301      	movs	r3, #1
 8011f28:	e000      	b.n	8011f2c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8011f2a:	2300      	movs	r3, #0
}
 8011f2c:	4618      	mov	r0, r3
 8011f2e:	3708      	adds	r7, #8
 8011f30:	46bd      	mov	sp, r7
 8011f32:	bd80      	pop	{r7, pc}
 8011f34:	24009a8c 	.word	0x24009a8c

08011f38 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8011f38:	b580      	push	{r7, lr}
 8011f3a:	b086      	sub	sp, #24
 8011f3c:	af00      	add	r7, sp, #0
 8011f3e:	6078      	str	r0, [r7, #4]
 8011f40:	6039      	str	r1, [r7, #0]
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP */
#if LWIP_RAW
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();
 8011f42:	f7f3 f9d9 	bl	80052f8 <sys_check_core_locking>

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	685b      	ldr	r3, [r3, #4]
 8011f4a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8011f4c:	697b      	ldr	r3, [r7, #20]
 8011f4e:	781b      	ldrb	r3, [r3, #0]
 8011f50:	091b      	lsrs	r3, r3, #4
 8011f52:	b2db      	uxtb	r3, r3
 8011f54:	2b04      	cmp	r3, #4
 8011f56:	d004      	beq.n	8011f62 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8011f58:	6878      	ldr	r0, [r7, #4]
 8011f5a:	f7f8 ff0d 	bl	800ad78 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8011f5e:	2300      	movs	r3, #0
 8011f60:	e107      	b.n	8012172 <ip4_input+0x23a>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8011f62:	697b      	ldr	r3, [r7, #20]
 8011f64:	781b      	ldrb	r3, [r3, #0]
 8011f66:	f003 030f 	and.w	r3, r3, #15
 8011f6a:	b2db      	uxtb	r3, r3
 8011f6c:	009b      	lsls	r3, r3, #2
 8011f6e:	b2db      	uxtb	r3, r3
 8011f70:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8011f72:	697b      	ldr	r3, [r7, #20]
 8011f74:	885b      	ldrh	r3, [r3, #2]
 8011f76:	b29b      	uxth	r3, r3
 8011f78:	4618      	mov	r0, r3
 8011f7a:	f7f7 fa33 	bl	80093e4 <lwip_htons>
 8011f7e:	4603      	mov	r3, r0
 8011f80:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	891b      	ldrh	r3, [r3, #8]
 8011f86:	89ba      	ldrh	r2, [r7, #12]
 8011f88:	429a      	cmp	r2, r3
 8011f8a:	d204      	bcs.n	8011f96 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8011f8c:	89bb      	ldrh	r3, [r7, #12]
 8011f8e:	4619      	mov	r1, r3
 8011f90:	6878      	ldr	r0, [r7, #4]
 8011f92:	f7f8 fd6b 	bl	800aa6c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	895b      	ldrh	r3, [r3, #10]
 8011f9a:	89fa      	ldrh	r2, [r7, #14]
 8011f9c:	429a      	cmp	r2, r3
 8011f9e:	d807      	bhi.n	8011fb0 <ip4_input+0x78>
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	891b      	ldrh	r3, [r3, #8]
 8011fa4:	89ba      	ldrh	r2, [r7, #12]
 8011fa6:	429a      	cmp	r2, r3
 8011fa8:	d802      	bhi.n	8011fb0 <ip4_input+0x78>
 8011faa:	89fb      	ldrh	r3, [r7, #14]
 8011fac:	2b13      	cmp	r3, #19
 8011fae:	d804      	bhi.n	8011fba <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8011fb0:	6878      	ldr	r0, [r7, #4]
 8011fb2:	f7f8 fee1 	bl	800ad78 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8011fb6:	2300      	movs	r3, #0
 8011fb8:	e0db      	b.n	8012172 <ip4_input+0x23a>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8011fba:	697b      	ldr	r3, [r7, #20]
 8011fbc:	691b      	ldr	r3, [r3, #16]
 8011fbe:	4a6f      	ldr	r2, [pc, #444]	@ (801217c <ip4_input+0x244>)
 8011fc0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8011fc2:	697b      	ldr	r3, [r7, #20]
 8011fc4:	68db      	ldr	r3, [r3, #12]
 8011fc6:	4a6d      	ldr	r2, [pc, #436]	@ (801217c <ip4_input+0x244>)
 8011fc8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011fca:	4b6c      	ldr	r3, [pc, #432]	@ (801217c <ip4_input+0x244>)
 8011fcc:	695b      	ldr	r3, [r3, #20]
 8011fce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011fd2:	2be0      	cmp	r3, #224	@ 0xe0
 8011fd4:	d112      	bne.n	8011ffc <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8011fd6:	683b      	ldr	r3, [r7, #0]
 8011fd8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011fdc:	f003 0301 	and.w	r3, r3, #1
 8011fe0:	b2db      	uxtb	r3, r3
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d007      	beq.n	8011ff6 <ip4_input+0xbe>
 8011fe6:	683b      	ldr	r3, [r7, #0]
 8011fe8:	3304      	adds	r3, #4
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d002      	beq.n	8011ff6 <ip4_input+0xbe>
      netif = inp;
 8011ff0:	683b      	ldr	r3, [r7, #0]
 8011ff2:	613b      	str	r3, [r7, #16]
 8011ff4:	e02a      	b.n	801204c <ip4_input+0x114>
    } else {
      netif = NULL;
 8011ff6:	2300      	movs	r3, #0
 8011ff8:	613b      	str	r3, [r7, #16]
 8011ffa:	e027      	b.n	801204c <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8011ffc:	6838      	ldr	r0, [r7, #0]
 8011ffe:	f7ff ff71 	bl	8011ee4 <ip4_input_accept>
 8012002:	4603      	mov	r3, r0
 8012004:	2b00      	cmp	r3, #0
 8012006:	d002      	beq.n	801200e <ip4_input+0xd6>
      netif = inp;
 8012008:	683b      	ldr	r3, [r7, #0]
 801200a:	613b      	str	r3, [r7, #16]
 801200c:	e01e      	b.n	801204c <ip4_input+0x114>
    } else {
      netif = NULL;
 801200e:	2300      	movs	r3, #0
 8012010:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8012012:	4b5a      	ldr	r3, [pc, #360]	@ (801217c <ip4_input+0x244>)
 8012014:	695b      	ldr	r3, [r3, #20]
 8012016:	b2db      	uxtb	r3, r3
 8012018:	2b7f      	cmp	r3, #127	@ 0x7f
 801201a:	d017      	beq.n	801204c <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801201c:	4b58      	ldr	r3, [pc, #352]	@ (8012180 <ip4_input+0x248>)
 801201e:	681b      	ldr	r3, [r3, #0]
 8012020:	613b      	str	r3, [r7, #16]
 8012022:	e00e      	b.n	8012042 <ip4_input+0x10a>
          if (netif == inp) {
 8012024:	693a      	ldr	r2, [r7, #16]
 8012026:	683b      	ldr	r3, [r7, #0]
 8012028:	429a      	cmp	r2, r3
 801202a:	d006      	beq.n	801203a <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801202c:	6938      	ldr	r0, [r7, #16]
 801202e:	f7ff ff59 	bl	8011ee4 <ip4_input_accept>
 8012032:	4603      	mov	r3, r0
 8012034:	2b00      	cmp	r3, #0
 8012036:	d108      	bne.n	801204a <ip4_input+0x112>
 8012038:	e000      	b.n	801203c <ip4_input+0x104>
            continue;
 801203a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801203c:	693b      	ldr	r3, [r7, #16]
 801203e:	681b      	ldr	r3, [r3, #0]
 8012040:	613b      	str	r3, [r7, #16]
 8012042:	693b      	ldr	r3, [r7, #16]
 8012044:	2b00      	cmp	r3, #0
 8012046:	d1ed      	bne.n	8012024 <ip4_input+0xec>
 8012048:	e000      	b.n	801204c <ip4_input+0x114>
            break;
 801204a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801204c:	4b4b      	ldr	r3, [pc, #300]	@ (801217c <ip4_input+0x244>)
 801204e:	691b      	ldr	r3, [r3, #16]
 8012050:	6839      	ldr	r1, [r7, #0]
 8012052:	4618      	mov	r0, r3
 8012054:	f000 f970 	bl	8012338 <ip4_addr_isbroadcast_u32>
 8012058:	4603      	mov	r3, r0
 801205a:	2b00      	cmp	r3, #0
 801205c:	d105      	bne.n	801206a <ip4_input+0x132>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801205e:	4b47      	ldr	r3, [pc, #284]	@ (801217c <ip4_input+0x244>)
 8012060:	691b      	ldr	r3, [r3, #16]
 8012062:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012066:	2be0      	cmp	r3, #224	@ 0xe0
 8012068:	d104      	bne.n	8012074 <ip4_input+0x13c>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801206a:	6878      	ldr	r0, [r7, #4]
 801206c:	f7f8 fe84 	bl	800ad78 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8012070:	2300      	movs	r3, #0
 8012072:	e07e      	b.n	8012172 <ip4_input+0x23a>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8012074:	693b      	ldr	r3, [r7, #16]
 8012076:	2b00      	cmp	r3, #0
 8012078:	d104      	bne.n	8012084 <ip4_input+0x14c>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801207a:	6878      	ldr	r0, [r7, #4]
 801207c:	f7f8 fe7c 	bl	800ad78 <pbuf_free>
    return ERR_OK;
 8012080:	2300      	movs	r3, #0
 8012082:	e076      	b.n	8012172 <ip4_input+0x23a>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8012084:	697b      	ldr	r3, [r7, #20]
 8012086:	88db      	ldrh	r3, [r3, #6]
 8012088:	b29b      	uxth	r3, r3
 801208a:	461a      	mov	r2, r3
 801208c:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8012090:	4013      	ands	r3, r2
 8012092:	2b00      	cmp	r3, #0
 8012094:	d00b      	beq.n	80120ae <ip4_input+0x176>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8012096:	6878      	ldr	r0, [r7, #4]
 8012098:	f000 fc94 	bl	80129c4 <ip4_reass>
 801209c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d101      	bne.n	80120a8 <ip4_input+0x170>
      return ERR_OK;
 80120a4:	2300      	movs	r3, #0
 80120a6:	e064      	b.n	8012172 <ip4_input+0x23a>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	685b      	ldr	r3, [r3, #4]
 80120ac:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80120ae:	4a33      	ldr	r2, [pc, #204]	@ (801217c <ip4_input+0x244>)
 80120b0:	693b      	ldr	r3, [r7, #16]
 80120b2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80120b4:	4a31      	ldr	r2, [pc, #196]	@ (801217c <ip4_input+0x244>)
 80120b6:	683b      	ldr	r3, [r7, #0]
 80120b8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80120ba:	4a30      	ldr	r2, [pc, #192]	@ (801217c <ip4_input+0x244>)
 80120bc:	697b      	ldr	r3, [r7, #20]
 80120be:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80120c0:	697b      	ldr	r3, [r7, #20]
 80120c2:	781b      	ldrb	r3, [r3, #0]
 80120c4:	f003 030f 	and.w	r3, r3, #15
 80120c8:	b2db      	uxtb	r3, r3
 80120ca:	009b      	lsls	r3, r3, #2
 80120cc:	b2db      	uxtb	r3, r3
 80120ce:	461a      	mov	r2, r3
 80120d0:	4b2a      	ldr	r3, [pc, #168]	@ (801217c <ip4_input+0x244>)
 80120d2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80120d4:	89fb      	ldrh	r3, [r7, #14]
 80120d6:	4619      	mov	r1, r3
 80120d8:	6878      	ldr	r0, [r7, #4]
 80120da:	f7f8 fdc7 	bl	800ac6c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80120de:	697b      	ldr	r3, [r7, #20]
 80120e0:	7a5b      	ldrb	r3, [r3, #9]
 80120e2:	2b11      	cmp	r3, #17
 80120e4:	d006      	beq.n	80120f4 <ip4_input+0x1bc>
 80120e6:	2b11      	cmp	r3, #17
 80120e8:	dc13      	bgt.n	8012112 <ip4_input+0x1da>
 80120ea:	2b01      	cmp	r3, #1
 80120ec:	d00c      	beq.n	8012108 <ip4_input+0x1d0>
 80120ee:	2b06      	cmp	r3, #6
 80120f0:	d005      	beq.n	80120fe <ip4_input+0x1c6>
 80120f2:	e00e      	b.n	8012112 <ip4_input+0x1da>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80120f4:	6839      	ldr	r1, [r7, #0]
 80120f6:	6878      	ldr	r0, [r7, #4]
 80120f8:	f7fe fc3a 	bl	8010970 <udp_input>
        break;
 80120fc:	e026      	b.n	801214c <ip4_input+0x214>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80120fe:	6839      	ldr	r1, [r7, #0]
 8012100:	6878      	ldr	r0, [r7, #4]
 8012102:	f7fa fc7b 	bl	800c9fc <tcp_input>
        break;
 8012106:	e021      	b.n	801214c <ip4_input+0x214>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8012108:	6839      	ldr	r1, [r7, #0]
 801210a:	6878      	ldr	r0, [r7, #4]
 801210c:	f7ff fcc6 	bl	8011a9c <icmp_input>
        break;
 8012110:	e01c      	b.n	801214c <ip4_input+0x214>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012112:	4b1a      	ldr	r3, [pc, #104]	@ (801217c <ip4_input+0x244>)
 8012114:	695b      	ldr	r3, [r3, #20]
 8012116:	6939      	ldr	r1, [r7, #16]
 8012118:	4618      	mov	r0, r3
 801211a:	f000 f90d 	bl	8012338 <ip4_addr_isbroadcast_u32>
 801211e:	4603      	mov	r3, r0
 8012120:	2b00      	cmp	r3, #0
 8012122:	d10f      	bne.n	8012144 <ip4_input+0x20c>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012124:	4b15      	ldr	r3, [pc, #84]	@ (801217c <ip4_input+0x244>)
 8012126:	695b      	ldr	r3, [r3, #20]
 8012128:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801212c:	2be0      	cmp	r3, #224	@ 0xe0
 801212e:	d009      	beq.n	8012144 <ip4_input+0x20c>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8012130:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012134:	4619      	mov	r1, r3
 8012136:	6878      	ldr	r0, [r7, #4]
 8012138:	f7f8 fe0b 	bl	800ad52 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801213c:	2102      	movs	r1, #2
 801213e:	6878      	ldr	r0, [r7, #4]
 8012140:	f7ff fdcc 	bl	8011cdc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8012144:	6878      	ldr	r0, [r7, #4]
 8012146:	f7f8 fe17 	bl	800ad78 <pbuf_free>
        break;
 801214a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801214c:	4b0b      	ldr	r3, [pc, #44]	@ (801217c <ip4_input+0x244>)
 801214e:	2200      	movs	r2, #0
 8012150:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8012152:	4b0a      	ldr	r3, [pc, #40]	@ (801217c <ip4_input+0x244>)
 8012154:	2200      	movs	r2, #0
 8012156:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8012158:	4b08      	ldr	r3, [pc, #32]	@ (801217c <ip4_input+0x244>)
 801215a:	2200      	movs	r2, #0
 801215c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801215e:	4b07      	ldr	r3, [pc, #28]	@ (801217c <ip4_input+0x244>)
 8012160:	2200      	movs	r2, #0
 8012162:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8012164:	4b05      	ldr	r3, [pc, #20]	@ (801217c <ip4_input+0x244>)
 8012166:	2200      	movs	r2, #0
 8012168:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801216a:	4b04      	ldr	r3, [pc, #16]	@ (801217c <ip4_input+0x244>)
 801216c:	2200      	movs	r2, #0
 801216e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8012170:	2300      	movs	r3, #0
}
 8012172:	4618      	mov	r0, r3
 8012174:	3718      	adds	r7, #24
 8012176:	46bd      	mov	sp, r7
 8012178:	bd80      	pop	{r7, pc}
 801217a:	bf00      	nop
 801217c:	24009a8c 	.word	0x24009a8c
 8012180:	24010540 	.word	0x24010540

08012184 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8012184:	b580      	push	{r7, lr}
 8012186:	b08a      	sub	sp, #40	@ 0x28
 8012188:	af04      	add	r7, sp, #16
 801218a:	60f8      	str	r0, [r7, #12]
 801218c:	60b9      	str	r1, [r7, #8]
 801218e:	607a      	str	r2, [r7, #4]
 8012190:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8012192:	68bb      	ldr	r3, [r7, #8]
 8012194:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	2b00      	cmp	r3, #0
 801219a:	d009      	beq.n	80121b0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801219c:	68bb      	ldr	r3, [r7, #8]
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d003      	beq.n	80121aa <ip4_output_if+0x26>
 80121a2:	68bb      	ldr	r3, [r7, #8]
 80121a4:	681b      	ldr	r3, [r3, #0]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d102      	bne.n	80121b0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80121aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121ac:	3304      	adds	r3, #4
 80121ae:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80121b0:	78fa      	ldrb	r2, [r7, #3]
 80121b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121b4:	9302      	str	r3, [sp, #8]
 80121b6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80121ba:	9301      	str	r3, [sp, #4]
 80121bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80121c0:	9300      	str	r3, [sp, #0]
 80121c2:	4613      	mov	r3, r2
 80121c4:	687a      	ldr	r2, [r7, #4]
 80121c6:	6979      	ldr	r1, [r7, #20]
 80121c8:	68f8      	ldr	r0, [r7, #12]
 80121ca:	f000 f805 	bl	80121d8 <ip4_output_if_src>
 80121ce:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80121d0:	4618      	mov	r0, r3
 80121d2:	3718      	adds	r7, #24
 80121d4:	46bd      	mov	sp, r7
 80121d6:	bd80      	pop	{r7, pc}

080121d8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80121d8:	b580      	push	{r7, lr}
 80121da:	b088      	sub	sp, #32
 80121dc:	af00      	add	r7, sp, #0
 80121de:	60f8      	str	r0, [r7, #12]
 80121e0:	60b9      	str	r1, [r7, #8]
 80121e2:	607a      	str	r2, [r7, #4]
 80121e4:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
 80121e6:	f7f3 f887 	bl	80052f8 <sys_check_core_locking>
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80121ea:	68fb      	ldr	r3, [r7, #12]
 80121ec:	7b9b      	ldrb	r3, [r3, #14]
 80121ee:	2b01      	cmp	r3, #1
 80121f0:	d006      	beq.n	8012200 <ip4_output_if_src+0x28>
 80121f2:	4b4b      	ldr	r3, [pc, #300]	@ (8012320 <ip4_output_if_src+0x148>)
 80121f4:	f44f 7255 	mov.w	r2, #852	@ 0x354
 80121f8:	494a      	ldr	r1, [pc, #296]	@ (8012324 <ip4_output_if_src+0x14c>)
 80121fa:	484b      	ldr	r0, [pc, #300]	@ (8012328 <ip4_output_if_src+0x150>)
 80121fc:	f001 f9e8 	bl	80135d0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	2b00      	cmp	r3, #0
 8012204:	d060      	beq.n	80122c8 <ip4_output_if_src+0xf0>
    u16_t ip_hlen = IP_HLEN;
 8012206:	2314      	movs	r3, #20
 8012208:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801220a:	2114      	movs	r1, #20
 801220c:	68f8      	ldr	r0, [r7, #12]
 801220e:	f7f8 fd1d 	bl	800ac4c <pbuf_add_header>
 8012212:	4603      	mov	r3, r0
 8012214:	2b00      	cmp	r3, #0
 8012216:	d002      	beq.n	801221e <ip4_output_if_src+0x46>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012218:	f06f 0301 	mvn.w	r3, #1
 801221c:	e07c      	b.n	8012318 <ip4_output_if_src+0x140>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	685b      	ldr	r3, [r3, #4]
 8012222:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	895b      	ldrh	r3, [r3, #10]
 8012228:	2b13      	cmp	r3, #19
 801222a:	d806      	bhi.n	801223a <ip4_output_if_src+0x62>
 801222c:	4b3c      	ldr	r3, [pc, #240]	@ (8012320 <ip4_output_if_src+0x148>)
 801222e:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8012232:	493e      	ldr	r1, [pc, #248]	@ (801232c <ip4_output_if_src+0x154>)
 8012234:	483c      	ldr	r0, [pc, #240]	@ (8012328 <ip4_output_if_src+0x150>)
 8012236:	f001 f9cb 	bl	80135d0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801223a:	69fb      	ldr	r3, [r7, #28]
 801223c:	78fa      	ldrb	r2, [r7, #3]
 801223e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8012240:	69fb      	ldr	r3, [r7, #28]
 8012242:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8012246:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	681a      	ldr	r2, [r3, #0]
 801224c:	69fb      	ldr	r3, [r7, #28]
 801224e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8012250:	8b7b      	ldrh	r3, [r7, #26]
 8012252:	089b      	lsrs	r3, r3, #2
 8012254:	b29b      	uxth	r3, r3
 8012256:	b2db      	uxtb	r3, r3
 8012258:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801225c:	b2da      	uxtb	r2, r3
 801225e:	69fb      	ldr	r3, [r7, #28]
 8012260:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8012262:	69fb      	ldr	r3, [r7, #28]
 8012264:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8012268:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801226a:	68fb      	ldr	r3, [r7, #12]
 801226c:	891b      	ldrh	r3, [r3, #8]
 801226e:	4618      	mov	r0, r3
 8012270:	f7f7 f8b8 	bl	80093e4 <lwip_htons>
 8012274:	4603      	mov	r3, r0
 8012276:	461a      	mov	r2, r3
 8012278:	69fb      	ldr	r3, [r7, #28]
 801227a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801227c:	69fb      	ldr	r3, [r7, #28]
 801227e:	2200      	movs	r2, #0
 8012280:	719a      	strb	r2, [r3, #6]
 8012282:	2200      	movs	r2, #0
 8012284:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8012286:	4b2a      	ldr	r3, [pc, #168]	@ (8012330 <ip4_output_if_src+0x158>)
 8012288:	881b      	ldrh	r3, [r3, #0]
 801228a:	4618      	mov	r0, r3
 801228c:	f7f7 f8aa 	bl	80093e4 <lwip_htons>
 8012290:	4603      	mov	r3, r0
 8012292:	461a      	mov	r2, r3
 8012294:	69fb      	ldr	r3, [r7, #28]
 8012296:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8012298:	4b25      	ldr	r3, [pc, #148]	@ (8012330 <ip4_output_if_src+0x158>)
 801229a:	881b      	ldrh	r3, [r3, #0]
 801229c:	3301      	adds	r3, #1
 801229e:	b29a      	uxth	r2, r3
 80122a0:	4b23      	ldr	r3, [pc, #140]	@ (8012330 <ip4_output_if_src+0x158>)
 80122a2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80122a4:	68bb      	ldr	r3, [r7, #8]
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d104      	bne.n	80122b4 <ip4_output_if_src+0xdc>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80122aa:	4b22      	ldr	r3, [pc, #136]	@ (8012334 <ip4_output_if_src+0x15c>)
 80122ac:	681a      	ldr	r2, [r3, #0]
 80122ae:	69fb      	ldr	r3, [r7, #28]
 80122b0:	60da      	str	r2, [r3, #12]
 80122b2:	e003      	b.n	80122bc <ip4_output_if_src+0xe4>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80122b4:	68bb      	ldr	r3, [r7, #8]
 80122b6:	681a      	ldr	r2, [r3, #0]
 80122b8:	69fb      	ldr	r3, [r7, #28]
 80122ba:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80122bc:	69fb      	ldr	r3, [r7, #28]
 80122be:	2200      	movs	r2, #0
 80122c0:	729a      	strb	r2, [r3, #10]
 80122c2:	2200      	movs	r2, #0
 80122c4:	72da      	strb	r2, [r3, #11]
 80122c6:	e00f      	b.n	80122e8 <ip4_output_if_src+0x110>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	895b      	ldrh	r3, [r3, #10]
 80122cc:	2b13      	cmp	r3, #19
 80122ce:	d802      	bhi.n	80122d6 <ip4_output_if_src+0xfe>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80122d0:	f06f 0301 	mvn.w	r3, #1
 80122d4:	e020      	b.n	8012318 <ip4_output_if_src+0x140>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	685b      	ldr	r3, [r3, #4]
 80122da:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80122dc:	69fb      	ldr	r3, [r7, #28]
 80122de:	691b      	ldr	r3, [r3, #16]
 80122e0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80122e2:	f107 0314 	add.w	r3, r7, #20
 80122e6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80122e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122ea:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d00c      	beq.n	801230a <ip4_output_if_src+0x132>
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	891a      	ldrh	r2, [r3, #8]
 80122f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122f6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80122f8:	429a      	cmp	r2, r3
 80122fa:	d906      	bls.n	801230a <ip4_output_if_src+0x132>
    return ip4_frag(p, netif, dest);
 80122fc:	687a      	ldr	r2, [r7, #4]
 80122fe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8012300:	68f8      	ldr	r0, [r7, #12]
 8012302:	f000 fd53 	bl	8012dac <ip4_frag>
 8012306:	4603      	mov	r3, r0
 8012308:	e006      	b.n	8012318 <ip4_output_if_src+0x140>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801230a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801230c:	695b      	ldr	r3, [r3, #20]
 801230e:	687a      	ldr	r2, [r7, #4]
 8012310:	68f9      	ldr	r1, [r7, #12]
 8012312:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012314:	4798      	blx	r3
 8012316:	4603      	mov	r3, r0
}
 8012318:	4618      	mov	r0, r3
 801231a:	3720      	adds	r7, #32
 801231c:	46bd      	mov	sp, r7
 801231e:	bd80      	pop	{r7, pc}
 8012320:	08016cb0 	.word	0x08016cb0
 8012324:	08016ce4 	.word	0x08016ce4
 8012328:	08016cf0 	.word	0x08016cf0
 801232c:	08016d18 	.word	0x08016d18
 8012330:	2401069e 	.word	0x2401069e
 8012334:	08017154 	.word	0x08017154

08012338 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8012338:	b480      	push	{r7}
 801233a:	b085      	sub	sp, #20
 801233c:	af00      	add	r7, sp, #0
 801233e:	6078      	str	r0, [r7, #4]
 8012340:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	f1b3 3fff 	cmp.w	r3, #4294967295
 801234c:	d002      	beq.n	8012354 <ip4_addr_isbroadcast_u32+0x1c>
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	2b00      	cmp	r3, #0
 8012352:	d101      	bne.n	8012358 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8012354:	2301      	movs	r3, #1
 8012356:	e02a      	b.n	80123ae <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8012358:	683b      	ldr	r3, [r7, #0]
 801235a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801235e:	f003 0302 	and.w	r3, r3, #2
 8012362:	2b00      	cmp	r3, #0
 8012364:	d101      	bne.n	801236a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8012366:	2300      	movs	r3, #0
 8012368:	e021      	b.n	80123ae <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801236a:	683b      	ldr	r3, [r7, #0]
 801236c:	3304      	adds	r3, #4
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	687a      	ldr	r2, [r7, #4]
 8012372:	429a      	cmp	r2, r3
 8012374:	d101      	bne.n	801237a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8012376:	2300      	movs	r3, #0
 8012378:	e019      	b.n	80123ae <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801237a:	68fa      	ldr	r2, [r7, #12]
 801237c:	683b      	ldr	r3, [r7, #0]
 801237e:	3304      	adds	r3, #4
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	405a      	eors	r2, r3
 8012384:	683b      	ldr	r3, [r7, #0]
 8012386:	3308      	adds	r3, #8
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	4013      	ands	r3, r2
 801238c:	2b00      	cmp	r3, #0
 801238e:	d10d      	bne.n	80123ac <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012390:	683b      	ldr	r3, [r7, #0]
 8012392:	3308      	adds	r3, #8
 8012394:	681b      	ldr	r3, [r3, #0]
 8012396:	43da      	mvns	r2, r3
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801239c:	683b      	ldr	r3, [r7, #0]
 801239e:	3308      	adds	r3, #8
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80123a4:	429a      	cmp	r2, r3
 80123a6:	d101      	bne.n	80123ac <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80123a8:	2301      	movs	r3, #1
 80123aa:	e000      	b.n	80123ae <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80123ac:	2300      	movs	r3, #0
  }
}
 80123ae:	4618      	mov	r0, r3
 80123b0:	3714      	adds	r7, #20
 80123b2:	46bd      	mov	sp, r7
 80123b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123b8:	4770      	bx	lr
	...

080123bc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80123bc:	b580      	push	{r7, lr}
 80123be:	b084      	sub	sp, #16
 80123c0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80123c2:	2300      	movs	r3, #0
 80123c4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80123c6:	4b12      	ldr	r3, [pc, #72]	@ (8012410 <ip_reass_tmr+0x54>)
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80123cc:	e018      	b.n	8012400 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80123ce:	68fb      	ldr	r3, [r7, #12]
 80123d0:	7fdb      	ldrb	r3, [r3, #31]
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d00b      	beq.n	80123ee <ip_reass_tmr+0x32>
      r->timer--;
 80123d6:	68fb      	ldr	r3, [r7, #12]
 80123d8:	7fdb      	ldrb	r3, [r3, #31]
 80123da:	3b01      	subs	r3, #1
 80123dc:	b2da      	uxtb	r2, r3
 80123de:	68fb      	ldr	r3, [r7, #12]
 80123e0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80123e2:	68fb      	ldr	r3, [r7, #12]
 80123e4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80123e6:	68fb      	ldr	r3, [r7, #12]
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	60fb      	str	r3, [r7, #12]
 80123ec:	e008      	b.n	8012400 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80123ee:	68fb      	ldr	r3, [r7, #12]
 80123f0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80123f8:	68b9      	ldr	r1, [r7, #8]
 80123fa:	6878      	ldr	r0, [r7, #4]
 80123fc:	f000 f80a 	bl	8012414 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8012400:	68fb      	ldr	r3, [r7, #12]
 8012402:	2b00      	cmp	r3, #0
 8012404:	d1e3      	bne.n	80123ce <ip_reass_tmr+0x12>
    }
  }
}
 8012406:	bf00      	nop
 8012408:	bf00      	nop
 801240a:	3710      	adds	r7, #16
 801240c:	46bd      	mov	sp, r7
 801240e:	bd80      	pop	{r7, pc}
 8012410:	240106a0 	.word	0x240106a0

08012414 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012414:	b580      	push	{r7, lr}
 8012416:	b088      	sub	sp, #32
 8012418:	af00      	add	r7, sp, #0
 801241a:	6078      	str	r0, [r7, #4]
 801241c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801241e:	2300      	movs	r3, #0
 8012420:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8012422:	683a      	ldr	r2, [r7, #0]
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	429a      	cmp	r2, r3
 8012428:	d105      	bne.n	8012436 <ip_reass_free_complete_datagram+0x22>
 801242a:	4b45      	ldr	r3, [pc, #276]	@ (8012540 <ip_reass_free_complete_datagram+0x12c>)
 801242c:	22ab      	movs	r2, #171	@ 0xab
 801242e:	4945      	ldr	r1, [pc, #276]	@ (8012544 <ip_reass_free_complete_datagram+0x130>)
 8012430:	4845      	ldr	r0, [pc, #276]	@ (8012548 <ip_reass_free_complete_datagram+0x134>)
 8012432:	f001 f8cd 	bl	80135d0 <iprintf>
  if (prev != NULL) {
 8012436:	683b      	ldr	r3, [r7, #0]
 8012438:	2b00      	cmp	r3, #0
 801243a:	d00a      	beq.n	8012452 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801243c:	683b      	ldr	r3, [r7, #0]
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	687a      	ldr	r2, [r7, #4]
 8012442:	429a      	cmp	r2, r3
 8012444:	d005      	beq.n	8012452 <ip_reass_free_complete_datagram+0x3e>
 8012446:	4b3e      	ldr	r3, [pc, #248]	@ (8012540 <ip_reass_free_complete_datagram+0x12c>)
 8012448:	22ad      	movs	r2, #173	@ 0xad
 801244a:	4940      	ldr	r1, [pc, #256]	@ (801254c <ip_reass_free_complete_datagram+0x138>)
 801244c:	483e      	ldr	r0, [pc, #248]	@ (8012548 <ip_reass_free_complete_datagram+0x134>)
 801244e:	f001 f8bf 	bl	80135d0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	685b      	ldr	r3, [r3, #4]
 8012456:	685b      	ldr	r3, [r3, #4]
 8012458:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801245a:	697b      	ldr	r3, [r7, #20]
 801245c:	889b      	ldrh	r3, [r3, #4]
 801245e:	b29b      	uxth	r3, r3
 8012460:	2b00      	cmp	r3, #0
 8012462:	d12a      	bne.n	80124ba <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	685b      	ldr	r3, [r3, #4]
 8012468:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801246a:	697b      	ldr	r3, [r7, #20]
 801246c:	681a      	ldr	r2, [r3, #0]
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8012472:	69bb      	ldr	r3, [r7, #24]
 8012474:	6858      	ldr	r0, [r3, #4]
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	3308      	adds	r3, #8
 801247a:	2214      	movs	r2, #20
 801247c:	4619      	mov	r1, r3
 801247e:	f001 f9d8 	bl	8013832 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8012482:	2101      	movs	r1, #1
 8012484:	69b8      	ldr	r0, [r7, #24]
 8012486:	f7ff fc39 	bl	8011cfc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801248a:	69b8      	ldr	r0, [r7, #24]
 801248c:	f7f8 fd02 	bl	800ae94 <pbuf_clen>
 8012490:	4603      	mov	r3, r0
 8012492:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012494:	8bfa      	ldrh	r2, [r7, #30]
 8012496:	8a7b      	ldrh	r3, [r7, #18]
 8012498:	4413      	add	r3, r2
 801249a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801249e:	db05      	blt.n	80124ac <ip_reass_free_complete_datagram+0x98>
 80124a0:	4b27      	ldr	r3, [pc, #156]	@ (8012540 <ip_reass_free_complete_datagram+0x12c>)
 80124a2:	22bc      	movs	r2, #188	@ 0xbc
 80124a4:	492a      	ldr	r1, [pc, #168]	@ (8012550 <ip_reass_free_complete_datagram+0x13c>)
 80124a6:	4828      	ldr	r0, [pc, #160]	@ (8012548 <ip_reass_free_complete_datagram+0x134>)
 80124a8:	f001 f892 	bl	80135d0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80124ac:	8bfa      	ldrh	r2, [r7, #30]
 80124ae:	8a7b      	ldrh	r3, [r7, #18]
 80124b0:	4413      	add	r3, r2
 80124b2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80124b4:	69b8      	ldr	r0, [r7, #24]
 80124b6:	f7f8 fc5f 	bl	800ad78 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	685b      	ldr	r3, [r3, #4]
 80124be:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80124c0:	e01f      	b.n	8012502 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80124c2:	69bb      	ldr	r3, [r7, #24]
 80124c4:	685b      	ldr	r3, [r3, #4]
 80124c6:	617b      	str	r3, [r7, #20]
    pcur = p;
 80124c8:	69bb      	ldr	r3, [r7, #24]
 80124ca:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80124cc:	697b      	ldr	r3, [r7, #20]
 80124ce:	681b      	ldr	r3, [r3, #0]
 80124d0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80124d2:	68f8      	ldr	r0, [r7, #12]
 80124d4:	f7f8 fcde 	bl	800ae94 <pbuf_clen>
 80124d8:	4603      	mov	r3, r0
 80124da:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80124dc:	8bfa      	ldrh	r2, [r7, #30]
 80124de:	8a7b      	ldrh	r3, [r7, #18]
 80124e0:	4413      	add	r3, r2
 80124e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80124e6:	db05      	blt.n	80124f4 <ip_reass_free_complete_datagram+0xe0>
 80124e8:	4b15      	ldr	r3, [pc, #84]	@ (8012540 <ip_reass_free_complete_datagram+0x12c>)
 80124ea:	22cc      	movs	r2, #204	@ 0xcc
 80124ec:	4918      	ldr	r1, [pc, #96]	@ (8012550 <ip_reass_free_complete_datagram+0x13c>)
 80124ee:	4816      	ldr	r0, [pc, #88]	@ (8012548 <ip_reass_free_complete_datagram+0x134>)
 80124f0:	f001 f86e 	bl	80135d0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80124f4:	8bfa      	ldrh	r2, [r7, #30]
 80124f6:	8a7b      	ldrh	r3, [r7, #18]
 80124f8:	4413      	add	r3, r2
 80124fa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80124fc:	68f8      	ldr	r0, [r7, #12]
 80124fe:	f7f8 fc3b 	bl	800ad78 <pbuf_free>
  while (p != NULL) {
 8012502:	69bb      	ldr	r3, [r7, #24]
 8012504:	2b00      	cmp	r3, #0
 8012506:	d1dc      	bne.n	80124c2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8012508:	6839      	ldr	r1, [r7, #0]
 801250a:	6878      	ldr	r0, [r7, #4]
 801250c:	f000 f8c2 	bl	8012694 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8012510:	4b10      	ldr	r3, [pc, #64]	@ (8012554 <ip_reass_free_complete_datagram+0x140>)
 8012512:	881b      	ldrh	r3, [r3, #0]
 8012514:	8bfa      	ldrh	r2, [r7, #30]
 8012516:	429a      	cmp	r2, r3
 8012518:	d905      	bls.n	8012526 <ip_reass_free_complete_datagram+0x112>
 801251a:	4b09      	ldr	r3, [pc, #36]	@ (8012540 <ip_reass_free_complete_datagram+0x12c>)
 801251c:	22d2      	movs	r2, #210	@ 0xd2
 801251e:	490e      	ldr	r1, [pc, #56]	@ (8012558 <ip_reass_free_complete_datagram+0x144>)
 8012520:	4809      	ldr	r0, [pc, #36]	@ (8012548 <ip_reass_free_complete_datagram+0x134>)
 8012522:	f001 f855 	bl	80135d0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8012526:	4b0b      	ldr	r3, [pc, #44]	@ (8012554 <ip_reass_free_complete_datagram+0x140>)
 8012528:	881a      	ldrh	r2, [r3, #0]
 801252a:	8bfb      	ldrh	r3, [r7, #30]
 801252c:	1ad3      	subs	r3, r2, r3
 801252e:	b29a      	uxth	r2, r3
 8012530:	4b08      	ldr	r3, [pc, #32]	@ (8012554 <ip_reass_free_complete_datagram+0x140>)
 8012532:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8012534:	8bfb      	ldrh	r3, [r7, #30]
}
 8012536:	4618      	mov	r0, r3
 8012538:	3720      	adds	r7, #32
 801253a:	46bd      	mov	sp, r7
 801253c:	bd80      	pop	{r7, pc}
 801253e:	bf00      	nop
 8012540:	08016d48 	.word	0x08016d48
 8012544:	08016d84 	.word	0x08016d84
 8012548:	08016d90 	.word	0x08016d90
 801254c:	08016db8 	.word	0x08016db8
 8012550:	08016dcc 	.word	0x08016dcc
 8012554:	240106a4 	.word	0x240106a4
 8012558:	08016dec 	.word	0x08016dec

0801255c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801255c:	b580      	push	{r7, lr}
 801255e:	b08a      	sub	sp, #40	@ 0x28
 8012560:	af00      	add	r7, sp, #0
 8012562:	6078      	str	r0, [r7, #4]
 8012564:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8012566:	2300      	movs	r3, #0
 8012568:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801256a:	2300      	movs	r3, #0
 801256c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801256e:	2300      	movs	r3, #0
 8012570:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8012572:	2300      	movs	r3, #0
 8012574:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8012576:	2300      	movs	r3, #0
 8012578:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801257a:	4b28      	ldr	r3, [pc, #160]	@ (801261c <ip_reass_remove_oldest_datagram+0xc0>)
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8012580:	e030      	b.n	80125e4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8012582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012584:	695a      	ldr	r2, [r3, #20]
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	68db      	ldr	r3, [r3, #12]
 801258a:	429a      	cmp	r2, r3
 801258c:	d10c      	bne.n	80125a8 <ip_reass_remove_oldest_datagram+0x4c>
 801258e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012590:	699a      	ldr	r2, [r3, #24]
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	691b      	ldr	r3, [r3, #16]
 8012596:	429a      	cmp	r2, r3
 8012598:	d106      	bne.n	80125a8 <ip_reass_remove_oldest_datagram+0x4c>
 801259a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801259c:	899a      	ldrh	r2, [r3, #12]
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	889b      	ldrh	r3, [r3, #4]
 80125a2:	b29b      	uxth	r3, r3
 80125a4:	429a      	cmp	r2, r3
 80125a6:	d014      	beq.n	80125d2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80125a8:	693b      	ldr	r3, [r7, #16]
 80125aa:	3301      	adds	r3, #1
 80125ac:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80125ae:	6a3b      	ldr	r3, [r7, #32]
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d104      	bne.n	80125be <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80125b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125b6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80125b8:	69fb      	ldr	r3, [r7, #28]
 80125ba:	61bb      	str	r3, [r7, #24]
 80125bc:	e009      	b.n	80125d2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80125be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125c0:	7fda      	ldrb	r2, [r3, #31]
 80125c2:	6a3b      	ldr	r3, [r7, #32]
 80125c4:	7fdb      	ldrb	r3, [r3, #31]
 80125c6:	429a      	cmp	r2, r3
 80125c8:	d803      	bhi.n	80125d2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80125ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125cc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80125ce:	69fb      	ldr	r3, [r7, #28]
 80125d0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80125d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d001      	beq.n	80125de <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80125da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125dc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80125de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80125e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d1cb      	bne.n	8012582 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80125ea:	6a3b      	ldr	r3, [r7, #32]
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d008      	beq.n	8012602 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80125f0:	69b9      	ldr	r1, [r7, #24]
 80125f2:	6a38      	ldr	r0, [r7, #32]
 80125f4:	f7ff ff0e 	bl	8012414 <ip_reass_free_complete_datagram>
 80125f8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80125fa:	697a      	ldr	r2, [r7, #20]
 80125fc:	68fb      	ldr	r3, [r7, #12]
 80125fe:	4413      	add	r3, r2
 8012600:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8012602:	697a      	ldr	r2, [r7, #20]
 8012604:	683b      	ldr	r3, [r7, #0]
 8012606:	429a      	cmp	r2, r3
 8012608:	da02      	bge.n	8012610 <ip_reass_remove_oldest_datagram+0xb4>
 801260a:	693b      	ldr	r3, [r7, #16]
 801260c:	2b01      	cmp	r3, #1
 801260e:	dcac      	bgt.n	801256a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8012610:	697b      	ldr	r3, [r7, #20]
}
 8012612:	4618      	mov	r0, r3
 8012614:	3728      	adds	r7, #40	@ 0x28
 8012616:	46bd      	mov	sp, r7
 8012618:	bd80      	pop	{r7, pc}
 801261a:	bf00      	nop
 801261c:	240106a0 	.word	0x240106a0

08012620 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8012620:	b580      	push	{r7, lr}
 8012622:	b084      	sub	sp, #16
 8012624:	af00      	add	r7, sp, #0
 8012626:	6078      	str	r0, [r7, #4]
 8012628:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801262a:	2004      	movs	r0, #4
 801262c:	f7f7 fc7a 	bl	8009f24 <memp_malloc>
 8012630:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8012632:	68fb      	ldr	r3, [r7, #12]
 8012634:	2b00      	cmp	r3, #0
 8012636:	d110      	bne.n	801265a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8012638:	6839      	ldr	r1, [r7, #0]
 801263a:	6878      	ldr	r0, [r7, #4]
 801263c:	f7ff ff8e 	bl	801255c <ip_reass_remove_oldest_datagram>
 8012640:	4602      	mov	r2, r0
 8012642:	683b      	ldr	r3, [r7, #0]
 8012644:	4293      	cmp	r3, r2
 8012646:	dc03      	bgt.n	8012650 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012648:	2004      	movs	r0, #4
 801264a:	f7f7 fc6b 	bl	8009f24 <memp_malloc>
 801264e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	2b00      	cmp	r3, #0
 8012654:	d101      	bne.n	801265a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8012656:	2300      	movs	r3, #0
 8012658:	e016      	b.n	8012688 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801265a:	2220      	movs	r2, #32
 801265c:	2100      	movs	r1, #0
 801265e:	68f8      	ldr	r0, [r7, #12]
 8012660:	f001 f81b 	bl	801369a <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8012664:	68fb      	ldr	r3, [r7, #12]
 8012666:	220f      	movs	r2, #15
 8012668:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801266a:	4b09      	ldr	r3, [pc, #36]	@ (8012690 <ip_reass_enqueue_new_datagram+0x70>)
 801266c:	681a      	ldr	r2, [r3, #0]
 801266e:	68fb      	ldr	r3, [r7, #12]
 8012670:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8012672:	4a07      	ldr	r2, [pc, #28]	@ (8012690 <ip_reass_enqueue_new_datagram+0x70>)
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8012678:	68fb      	ldr	r3, [r7, #12]
 801267a:	3308      	adds	r3, #8
 801267c:	2214      	movs	r2, #20
 801267e:	6879      	ldr	r1, [r7, #4]
 8012680:	4618      	mov	r0, r3
 8012682:	f001 f8d6 	bl	8013832 <memcpy>
  return ipr;
 8012686:	68fb      	ldr	r3, [r7, #12]
}
 8012688:	4618      	mov	r0, r3
 801268a:	3710      	adds	r7, #16
 801268c:	46bd      	mov	sp, r7
 801268e:	bd80      	pop	{r7, pc}
 8012690:	240106a0 	.word	0x240106a0

08012694 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012694:	b580      	push	{r7, lr}
 8012696:	b082      	sub	sp, #8
 8012698:	af00      	add	r7, sp, #0
 801269a:	6078      	str	r0, [r7, #4]
 801269c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801269e:	4b10      	ldr	r3, [pc, #64]	@ (80126e0 <ip_reass_dequeue_datagram+0x4c>)
 80126a0:	681b      	ldr	r3, [r3, #0]
 80126a2:	687a      	ldr	r2, [r7, #4]
 80126a4:	429a      	cmp	r2, r3
 80126a6:	d104      	bne.n	80126b2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	681b      	ldr	r3, [r3, #0]
 80126ac:	4a0c      	ldr	r2, [pc, #48]	@ (80126e0 <ip_reass_dequeue_datagram+0x4c>)
 80126ae:	6013      	str	r3, [r2, #0]
 80126b0:	e00d      	b.n	80126ce <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80126b2:	683b      	ldr	r3, [r7, #0]
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d106      	bne.n	80126c6 <ip_reass_dequeue_datagram+0x32>
 80126b8:	4b0a      	ldr	r3, [pc, #40]	@ (80126e4 <ip_reass_dequeue_datagram+0x50>)
 80126ba:	f240 1245 	movw	r2, #325	@ 0x145
 80126be:	490a      	ldr	r1, [pc, #40]	@ (80126e8 <ip_reass_dequeue_datagram+0x54>)
 80126c0:	480a      	ldr	r0, [pc, #40]	@ (80126ec <ip_reass_dequeue_datagram+0x58>)
 80126c2:	f000 ff85 	bl	80135d0 <iprintf>
    prev->next = ipr->next;
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	681a      	ldr	r2, [r3, #0]
 80126ca:	683b      	ldr	r3, [r7, #0]
 80126cc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80126ce:	6879      	ldr	r1, [r7, #4]
 80126d0:	2004      	movs	r0, #4
 80126d2:	f7f7 fc9d 	bl	800a010 <memp_free>
}
 80126d6:	bf00      	nop
 80126d8:	3708      	adds	r7, #8
 80126da:	46bd      	mov	sp, r7
 80126dc:	bd80      	pop	{r7, pc}
 80126de:	bf00      	nop
 80126e0:	240106a0 	.word	0x240106a0
 80126e4:	08016d48 	.word	0x08016d48
 80126e8:	08016e10 	.word	0x08016e10
 80126ec:	08016d90 	.word	0x08016d90

080126f0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80126f0:	b580      	push	{r7, lr}
 80126f2:	b08c      	sub	sp, #48	@ 0x30
 80126f4:	af00      	add	r7, sp, #0
 80126f6:	60f8      	str	r0, [r7, #12]
 80126f8:	60b9      	str	r1, [r7, #8]
 80126fa:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80126fc:	2300      	movs	r3, #0
 80126fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8012700:	2301      	movs	r3, #1
 8012702:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8012704:	68bb      	ldr	r3, [r7, #8]
 8012706:	685b      	ldr	r3, [r3, #4]
 8012708:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801270a:	69fb      	ldr	r3, [r7, #28]
 801270c:	885b      	ldrh	r3, [r3, #2]
 801270e:	b29b      	uxth	r3, r3
 8012710:	4618      	mov	r0, r3
 8012712:	f7f6 fe67 	bl	80093e4 <lwip_htons>
 8012716:	4603      	mov	r3, r0
 8012718:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801271a:	69fb      	ldr	r3, [r7, #28]
 801271c:	781b      	ldrb	r3, [r3, #0]
 801271e:	f003 030f 	and.w	r3, r3, #15
 8012722:	b2db      	uxtb	r3, r3
 8012724:	009b      	lsls	r3, r3, #2
 8012726:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8012728:	7e7b      	ldrb	r3, [r7, #25]
 801272a:	b29b      	uxth	r3, r3
 801272c:	8b7a      	ldrh	r2, [r7, #26]
 801272e:	429a      	cmp	r2, r3
 8012730:	d202      	bcs.n	8012738 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012732:	f04f 33ff 	mov.w	r3, #4294967295
 8012736:	e135      	b.n	80129a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8012738:	7e7b      	ldrb	r3, [r7, #25]
 801273a:	b29b      	uxth	r3, r3
 801273c:	8b7a      	ldrh	r2, [r7, #26]
 801273e:	1ad3      	subs	r3, r2, r3
 8012740:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8012742:	69fb      	ldr	r3, [r7, #28]
 8012744:	88db      	ldrh	r3, [r3, #6]
 8012746:	b29b      	uxth	r3, r3
 8012748:	4618      	mov	r0, r3
 801274a:	f7f6 fe4b 	bl	80093e4 <lwip_htons>
 801274e:	4603      	mov	r3, r0
 8012750:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012754:	b29b      	uxth	r3, r3
 8012756:	00db      	lsls	r3, r3, #3
 8012758:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801275a:	68bb      	ldr	r3, [r7, #8]
 801275c:	685b      	ldr	r3, [r3, #4]
 801275e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8012760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012762:	2200      	movs	r2, #0
 8012764:	701a      	strb	r2, [r3, #0]
 8012766:	2200      	movs	r2, #0
 8012768:	705a      	strb	r2, [r3, #1]
 801276a:	2200      	movs	r2, #0
 801276c:	709a      	strb	r2, [r3, #2]
 801276e:	2200      	movs	r2, #0
 8012770:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8012772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012774:	8afa      	ldrh	r2, [r7, #22]
 8012776:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8012778:	8afa      	ldrh	r2, [r7, #22]
 801277a:	8b7b      	ldrh	r3, [r7, #26]
 801277c:	4413      	add	r3, r2
 801277e:	b29a      	uxth	r2, r3
 8012780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012782:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8012784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012786:	88db      	ldrh	r3, [r3, #6]
 8012788:	b29b      	uxth	r3, r3
 801278a:	8afa      	ldrh	r2, [r7, #22]
 801278c:	429a      	cmp	r2, r3
 801278e:	d902      	bls.n	8012796 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012790:	f04f 33ff 	mov.w	r3, #4294967295
 8012794:	e106      	b.n	80129a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8012796:	68fb      	ldr	r3, [r7, #12]
 8012798:	685b      	ldr	r3, [r3, #4]
 801279a:	627b      	str	r3, [r7, #36]	@ 0x24
 801279c:	e068      	b.n	8012870 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801279e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127a0:	685b      	ldr	r3, [r3, #4]
 80127a2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80127a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127a6:	889b      	ldrh	r3, [r3, #4]
 80127a8:	b29a      	uxth	r2, r3
 80127aa:	693b      	ldr	r3, [r7, #16]
 80127ac:	889b      	ldrh	r3, [r3, #4]
 80127ae:	b29b      	uxth	r3, r3
 80127b0:	429a      	cmp	r2, r3
 80127b2:	d235      	bcs.n	8012820 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80127b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80127b8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80127ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d020      	beq.n	8012802 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80127c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127c2:	889b      	ldrh	r3, [r3, #4]
 80127c4:	b29a      	uxth	r2, r3
 80127c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80127c8:	88db      	ldrh	r3, [r3, #6]
 80127ca:	b29b      	uxth	r3, r3
 80127cc:	429a      	cmp	r2, r3
 80127ce:	d307      	bcc.n	80127e0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80127d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127d2:	88db      	ldrh	r3, [r3, #6]
 80127d4:	b29a      	uxth	r2, r3
 80127d6:	693b      	ldr	r3, [r7, #16]
 80127d8:	889b      	ldrh	r3, [r3, #4]
 80127da:	b29b      	uxth	r3, r3
 80127dc:	429a      	cmp	r2, r3
 80127de:	d902      	bls.n	80127e6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80127e0:	f04f 33ff 	mov.w	r3, #4294967295
 80127e4:	e0de      	b.n	80129a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80127e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80127e8:	68ba      	ldr	r2, [r7, #8]
 80127ea:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80127ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80127ee:	88db      	ldrh	r3, [r3, #6]
 80127f0:	b29a      	uxth	r2, r3
 80127f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127f4:	889b      	ldrh	r3, [r3, #4]
 80127f6:	b29b      	uxth	r3, r3
 80127f8:	429a      	cmp	r2, r3
 80127fa:	d03d      	beq.n	8012878 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80127fc:	2300      	movs	r3, #0
 80127fe:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8012800:	e03a      	b.n	8012878 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8012802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012804:	88db      	ldrh	r3, [r3, #6]
 8012806:	b29a      	uxth	r2, r3
 8012808:	693b      	ldr	r3, [r7, #16]
 801280a:	889b      	ldrh	r3, [r3, #4]
 801280c:	b29b      	uxth	r3, r3
 801280e:	429a      	cmp	r2, r3
 8012810:	d902      	bls.n	8012818 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012812:	f04f 33ff 	mov.w	r3, #4294967295
 8012816:	e0c5      	b.n	80129a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	68ba      	ldr	r2, [r7, #8]
 801281c:	605a      	str	r2, [r3, #4]
      break;
 801281e:	e02b      	b.n	8012878 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8012820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012822:	889b      	ldrh	r3, [r3, #4]
 8012824:	b29a      	uxth	r2, r3
 8012826:	693b      	ldr	r3, [r7, #16]
 8012828:	889b      	ldrh	r3, [r3, #4]
 801282a:	b29b      	uxth	r3, r3
 801282c:	429a      	cmp	r2, r3
 801282e:	d102      	bne.n	8012836 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012830:	f04f 33ff 	mov.w	r3, #4294967295
 8012834:	e0b6      	b.n	80129a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8012836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012838:	889b      	ldrh	r3, [r3, #4]
 801283a:	b29a      	uxth	r2, r3
 801283c:	693b      	ldr	r3, [r7, #16]
 801283e:	88db      	ldrh	r3, [r3, #6]
 8012840:	b29b      	uxth	r3, r3
 8012842:	429a      	cmp	r2, r3
 8012844:	d202      	bcs.n	801284c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012846:	f04f 33ff 	mov.w	r3, #4294967295
 801284a:	e0ab      	b.n	80129a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801284c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801284e:	2b00      	cmp	r3, #0
 8012850:	d009      	beq.n	8012866 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8012852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012854:	88db      	ldrh	r3, [r3, #6]
 8012856:	b29a      	uxth	r2, r3
 8012858:	693b      	ldr	r3, [r7, #16]
 801285a:	889b      	ldrh	r3, [r3, #4]
 801285c:	b29b      	uxth	r3, r3
 801285e:	429a      	cmp	r2, r3
 8012860:	d001      	beq.n	8012866 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8012862:	2300      	movs	r3, #0
 8012864:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8012866:	693b      	ldr	r3, [r7, #16]
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801286c:	693b      	ldr	r3, [r7, #16]
 801286e:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8012870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012872:	2b00      	cmp	r3, #0
 8012874:	d193      	bne.n	801279e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8012876:	e000      	b.n	801287a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8012878:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801287a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801287c:	2b00      	cmp	r3, #0
 801287e:	d12d      	bne.n	80128dc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8012880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012882:	2b00      	cmp	r3, #0
 8012884:	d01c      	beq.n	80128c0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8012886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012888:	88db      	ldrh	r3, [r3, #6]
 801288a:	b29a      	uxth	r2, r3
 801288c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801288e:	889b      	ldrh	r3, [r3, #4]
 8012890:	b29b      	uxth	r3, r3
 8012892:	429a      	cmp	r2, r3
 8012894:	d906      	bls.n	80128a4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8012896:	4b45      	ldr	r3, [pc, #276]	@ (80129ac <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012898:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801289c:	4944      	ldr	r1, [pc, #272]	@ (80129b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801289e:	4845      	ldr	r0, [pc, #276]	@ (80129b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80128a0:	f000 fe96 	bl	80135d0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80128a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80128a6:	68ba      	ldr	r2, [r7, #8]
 80128a8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80128aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80128ac:	88db      	ldrh	r3, [r3, #6]
 80128ae:	b29a      	uxth	r2, r3
 80128b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128b2:	889b      	ldrh	r3, [r3, #4]
 80128b4:	b29b      	uxth	r3, r3
 80128b6:	429a      	cmp	r2, r3
 80128b8:	d010      	beq.n	80128dc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80128ba:	2300      	movs	r3, #0
 80128bc:	623b      	str	r3, [r7, #32]
 80128be:	e00d      	b.n	80128dc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80128c0:	68fb      	ldr	r3, [r7, #12]
 80128c2:	685b      	ldr	r3, [r3, #4]
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d006      	beq.n	80128d6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80128c8:	4b38      	ldr	r3, [pc, #224]	@ (80129ac <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80128ca:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 80128ce:	493a      	ldr	r1, [pc, #232]	@ (80129b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80128d0:	4838      	ldr	r0, [pc, #224]	@ (80129b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80128d2:	f000 fe7d 	bl	80135d0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80128d6:	68fb      	ldr	r3, [r7, #12]
 80128d8:	68ba      	ldr	r2, [r7, #8]
 80128da:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d105      	bne.n	80128ee <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80128e2:	68fb      	ldr	r3, [r7, #12]
 80128e4:	7f9b      	ldrb	r3, [r3, #30]
 80128e6:	f003 0301 	and.w	r3, r3, #1
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d059      	beq.n	80129a2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80128ee:	6a3b      	ldr	r3, [r7, #32]
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d04f      	beq.n	8012994 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80128f4:	68fb      	ldr	r3, [r7, #12]
 80128f6:	685b      	ldr	r3, [r3, #4]
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d006      	beq.n	801290a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80128fc:	68fb      	ldr	r3, [r7, #12]
 80128fe:	685b      	ldr	r3, [r3, #4]
 8012900:	685b      	ldr	r3, [r3, #4]
 8012902:	889b      	ldrh	r3, [r3, #4]
 8012904:	b29b      	uxth	r3, r3
 8012906:	2b00      	cmp	r3, #0
 8012908:	d002      	beq.n	8012910 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801290a:	2300      	movs	r3, #0
 801290c:	623b      	str	r3, [r7, #32]
 801290e:	e041      	b.n	8012994 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8012910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012912:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8012914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801291a:	e012      	b.n	8012942 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801291c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801291e:	685b      	ldr	r3, [r3, #4]
 8012920:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8012922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012924:	88db      	ldrh	r3, [r3, #6]
 8012926:	b29a      	uxth	r2, r3
 8012928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801292a:	889b      	ldrh	r3, [r3, #4]
 801292c:	b29b      	uxth	r3, r3
 801292e:	429a      	cmp	r2, r3
 8012930:	d002      	beq.n	8012938 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8012932:	2300      	movs	r3, #0
 8012934:	623b      	str	r3, [r7, #32]
            break;
 8012936:	e007      	b.n	8012948 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8012938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801293a:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801293c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8012942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012944:	2b00      	cmp	r3, #0
 8012946:	d1e9      	bne.n	801291c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8012948:	6a3b      	ldr	r3, [r7, #32]
 801294a:	2b00      	cmp	r3, #0
 801294c:	d022      	beq.n	8012994 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801294e:	68fb      	ldr	r3, [r7, #12]
 8012950:	685b      	ldr	r3, [r3, #4]
 8012952:	2b00      	cmp	r3, #0
 8012954:	d106      	bne.n	8012964 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8012956:	4b15      	ldr	r3, [pc, #84]	@ (80129ac <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012958:	f240 12df 	movw	r2, #479	@ 0x1df
 801295c:	4917      	ldr	r1, [pc, #92]	@ (80129bc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801295e:	4815      	ldr	r0, [pc, #84]	@ (80129b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012960:	f000 fe36 	bl	80135d0 <iprintf>
          LWIP_ASSERT("sanity check",
 8012964:	68fb      	ldr	r3, [r7, #12]
 8012966:	685b      	ldr	r3, [r3, #4]
 8012968:	685b      	ldr	r3, [r3, #4]
 801296a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801296c:	429a      	cmp	r2, r3
 801296e:	d106      	bne.n	801297e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8012970:	4b0e      	ldr	r3, [pc, #56]	@ (80129ac <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012972:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8012976:	4911      	ldr	r1, [pc, #68]	@ (80129bc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8012978:	480e      	ldr	r0, [pc, #56]	@ (80129b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801297a:	f000 fe29 	bl	80135d0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801297e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	2b00      	cmp	r3, #0
 8012984:	d006      	beq.n	8012994 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8012986:	4b09      	ldr	r3, [pc, #36]	@ (80129ac <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012988:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801298c:	490c      	ldr	r1, [pc, #48]	@ (80129c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801298e:	4809      	ldr	r0, [pc, #36]	@ (80129b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012990:	f000 fe1e 	bl	80135d0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8012994:	6a3b      	ldr	r3, [r7, #32]
 8012996:	2b00      	cmp	r3, #0
 8012998:	bf14      	ite	ne
 801299a:	2301      	movne	r3, #1
 801299c:	2300      	moveq	r3, #0
 801299e:	b2db      	uxtb	r3, r3
 80129a0:	e000      	b.n	80129a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80129a2:	2300      	movs	r3, #0
}
 80129a4:	4618      	mov	r0, r3
 80129a6:	3730      	adds	r7, #48	@ 0x30
 80129a8:	46bd      	mov	sp, r7
 80129aa:	bd80      	pop	{r7, pc}
 80129ac:	08016d48 	.word	0x08016d48
 80129b0:	08016e2c 	.word	0x08016e2c
 80129b4:	08016d90 	.word	0x08016d90
 80129b8:	08016e4c 	.word	0x08016e4c
 80129bc:	08016e84 	.word	0x08016e84
 80129c0:	08016e94 	.word	0x08016e94

080129c4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80129c4:	b580      	push	{r7, lr}
 80129c6:	b08e      	sub	sp, #56	@ 0x38
 80129c8:	af00      	add	r7, sp, #0
 80129ca:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	685b      	ldr	r3, [r3, #4]
 80129d0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80129d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80129d4:	781b      	ldrb	r3, [r3, #0]
 80129d6:	f003 030f 	and.w	r3, r3, #15
 80129da:	b2db      	uxtb	r3, r3
 80129dc:	009b      	lsls	r3, r3, #2
 80129de:	b2db      	uxtb	r3, r3
 80129e0:	2b14      	cmp	r3, #20
 80129e2:	f040 8171 	bne.w	8012cc8 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80129e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80129e8:	88db      	ldrh	r3, [r3, #6]
 80129ea:	b29b      	uxth	r3, r3
 80129ec:	4618      	mov	r0, r3
 80129ee:	f7f6 fcf9 	bl	80093e4 <lwip_htons>
 80129f2:	4603      	mov	r3, r0
 80129f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80129f8:	b29b      	uxth	r3, r3
 80129fa:	00db      	lsls	r3, r3, #3
 80129fc:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80129fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a00:	885b      	ldrh	r3, [r3, #2]
 8012a02:	b29b      	uxth	r3, r3
 8012a04:	4618      	mov	r0, r3
 8012a06:	f7f6 fced 	bl	80093e4 <lwip_htons>
 8012a0a:	4603      	mov	r3, r0
 8012a0c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8012a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a10:	781b      	ldrb	r3, [r3, #0]
 8012a12:	f003 030f 	and.w	r3, r3, #15
 8012a16:	b2db      	uxtb	r3, r3
 8012a18:	009b      	lsls	r3, r3, #2
 8012a1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8012a1e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8012a22:	b29b      	uxth	r3, r3
 8012a24:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8012a26:	429a      	cmp	r2, r3
 8012a28:	f0c0 8150 	bcc.w	8012ccc <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8012a2c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8012a30:	b29b      	uxth	r3, r3
 8012a32:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8012a34:	1ad3      	subs	r3, r2, r3
 8012a36:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8012a38:	6878      	ldr	r0, [r7, #4]
 8012a3a:	f7f8 fa2b 	bl	800ae94 <pbuf_clen>
 8012a3e:	4603      	mov	r3, r0
 8012a40:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8012a42:	4b8c      	ldr	r3, [pc, #560]	@ (8012c74 <ip4_reass+0x2b0>)
 8012a44:	881b      	ldrh	r3, [r3, #0]
 8012a46:	461a      	mov	r2, r3
 8012a48:	8c3b      	ldrh	r3, [r7, #32]
 8012a4a:	4413      	add	r3, r2
 8012a4c:	2b0a      	cmp	r3, #10
 8012a4e:	dd10      	ble.n	8012a72 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012a50:	8c3b      	ldrh	r3, [r7, #32]
 8012a52:	4619      	mov	r1, r3
 8012a54:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012a56:	f7ff fd81 	bl	801255c <ip_reass_remove_oldest_datagram>
 8012a5a:	4603      	mov	r3, r0
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	f000 8137 	beq.w	8012cd0 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8012a62:	4b84      	ldr	r3, [pc, #528]	@ (8012c74 <ip4_reass+0x2b0>)
 8012a64:	881b      	ldrh	r3, [r3, #0]
 8012a66:	461a      	mov	r2, r3
 8012a68:	8c3b      	ldrh	r3, [r7, #32]
 8012a6a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012a6c:	2b0a      	cmp	r3, #10
 8012a6e:	f300 812f 	bgt.w	8012cd0 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012a72:	4b81      	ldr	r3, [pc, #516]	@ (8012c78 <ip4_reass+0x2b4>)
 8012a74:	681b      	ldr	r3, [r3, #0]
 8012a76:	633b      	str	r3, [r7, #48]	@ 0x30
 8012a78:	e015      	b.n	8012aa6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8012a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a7c:	695a      	ldr	r2, [r3, #20]
 8012a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a80:	68db      	ldr	r3, [r3, #12]
 8012a82:	429a      	cmp	r2, r3
 8012a84:	d10c      	bne.n	8012aa0 <ip4_reass+0xdc>
 8012a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a88:	699a      	ldr	r2, [r3, #24]
 8012a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a8c:	691b      	ldr	r3, [r3, #16]
 8012a8e:	429a      	cmp	r2, r3
 8012a90:	d106      	bne.n	8012aa0 <ip4_reass+0xdc>
 8012a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a94:	899a      	ldrh	r2, [r3, #12]
 8012a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a98:	889b      	ldrh	r3, [r3, #4]
 8012a9a:	b29b      	uxth	r3, r3
 8012a9c:	429a      	cmp	r2, r3
 8012a9e:	d006      	beq.n	8012aae <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012aa2:	681b      	ldr	r3, [r3, #0]
 8012aa4:	633b      	str	r3, [r7, #48]	@ 0x30
 8012aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d1e6      	bne.n	8012a7a <ip4_reass+0xb6>
 8012aac:	e000      	b.n	8012ab0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8012aae:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8012ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d109      	bne.n	8012aca <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8012ab6:	8c3b      	ldrh	r3, [r7, #32]
 8012ab8:	4619      	mov	r1, r3
 8012aba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012abc:	f7ff fdb0 	bl	8012620 <ip_reass_enqueue_new_datagram>
 8012ac0:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8012ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	d11c      	bne.n	8012b02 <ip4_reass+0x13e>
      goto nullreturn;
 8012ac8:	e105      	b.n	8012cd6 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012acc:	88db      	ldrh	r3, [r3, #6]
 8012ace:	b29b      	uxth	r3, r3
 8012ad0:	4618      	mov	r0, r3
 8012ad2:	f7f6 fc87 	bl	80093e4 <lwip_htons>
 8012ad6:	4603      	mov	r3, r0
 8012ad8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d110      	bne.n	8012b02 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8012ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ae2:	89db      	ldrh	r3, [r3, #14]
 8012ae4:	4618      	mov	r0, r3
 8012ae6:	f7f6 fc7d 	bl	80093e4 <lwip_htons>
 8012aea:	4603      	mov	r3, r0
 8012aec:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d006      	beq.n	8012b02 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8012af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012af6:	3308      	adds	r3, #8
 8012af8:	2214      	movs	r2, #20
 8012afa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012afc:	4618      	mov	r0, r3
 8012afe:	f000 fe98 	bl	8013832 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8012b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b04:	88db      	ldrh	r3, [r3, #6]
 8012b06:	b29b      	uxth	r3, r3
 8012b08:	f003 0320 	and.w	r3, r3, #32
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	bf0c      	ite	eq
 8012b10:	2301      	moveq	r3, #1
 8012b12:	2300      	movne	r3, #0
 8012b14:	b2db      	uxtb	r3, r3
 8012b16:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8012b18:	69fb      	ldr	r3, [r7, #28]
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d00e      	beq.n	8012b3c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8012b1e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8012b20:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012b22:	4413      	add	r3, r2
 8012b24:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8012b26:	8b7a      	ldrh	r2, [r7, #26]
 8012b28:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012b2a:	429a      	cmp	r2, r3
 8012b2c:	f0c0 80a0 	bcc.w	8012c70 <ip4_reass+0x2ac>
 8012b30:	8b7b      	ldrh	r3, [r7, #26]
 8012b32:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8012b36:	4293      	cmp	r3, r2
 8012b38:	f200 809a 	bhi.w	8012c70 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8012b3c:	69fa      	ldr	r2, [r7, #28]
 8012b3e:	6879      	ldr	r1, [r7, #4]
 8012b40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012b42:	f7ff fdd5 	bl	80126f0 <ip_reass_chain_frag_into_datagram_and_validate>
 8012b46:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8012b48:	697b      	ldr	r3, [r7, #20]
 8012b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b4e:	f000 809b 	beq.w	8012c88 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8012b52:	4b48      	ldr	r3, [pc, #288]	@ (8012c74 <ip4_reass+0x2b0>)
 8012b54:	881a      	ldrh	r2, [r3, #0]
 8012b56:	8c3b      	ldrh	r3, [r7, #32]
 8012b58:	4413      	add	r3, r2
 8012b5a:	b29a      	uxth	r2, r3
 8012b5c:	4b45      	ldr	r3, [pc, #276]	@ (8012c74 <ip4_reass+0x2b0>)
 8012b5e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8012b60:	69fb      	ldr	r3, [r7, #28]
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d00d      	beq.n	8012b82 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8012b66:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8012b68:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012b6a:	4413      	add	r3, r2
 8012b6c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8012b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b70:	8a7a      	ldrh	r2, [r7, #18]
 8012b72:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8012b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b76:	7f9b      	ldrb	r3, [r3, #30]
 8012b78:	f043 0301 	orr.w	r3, r3, #1
 8012b7c:	b2da      	uxtb	r2, r3
 8012b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b80:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8012b82:	697b      	ldr	r3, [r7, #20]
 8012b84:	2b01      	cmp	r3, #1
 8012b86:	d171      	bne.n	8012c6c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8012b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b8a:	8b9b      	ldrh	r3, [r3, #28]
 8012b8c:	3314      	adds	r3, #20
 8012b8e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8012b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b92:	685b      	ldr	r3, [r3, #4]
 8012b94:	685b      	ldr	r3, [r3, #4]
 8012b96:	681b      	ldr	r3, [r3, #0]
 8012b98:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8012b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b9c:	685b      	ldr	r3, [r3, #4]
 8012b9e:	685b      	ldr	r3, [r3, #4]
 8012ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8012ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ba4:	3308      	adds	r3, #8
 8012ba6:	2214      	movs	r2, #20
 8012ba8:	4619      	mov	r1, r3
 8012baa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012bac:	f000 fe41 	bl	8013832 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8012bb0:	8a3b      	ldrh	r3, [r7, #16]
 8012bb2:	4618      	mov	r0, r3
 8012bb4:	f7f6 fc16 	bl	80093e4 <lwip_htons>
 8012bb8:	4603      	mov	r3, r0
 8012bba:	461a      	mov	r2, r3
 8012bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012bbe:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8012bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012bc2:	2200      	movs	r2, #0
 8012bc4:	719a      	strb	r2, [r3, #6]
 8012bc6:	2200      	movs	r2, #0
 8012bc8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8012bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012bcc:	2200      	movs	r2, #0
 8012bce:	729a      	strb	r2, [r3, #10]
 8012bd0:	2200      	movs	r2, #0
 8012bd2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8012bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012bd6:	685b      	ldr	r3, [r3, #4]
 8012bd8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8012bda:	e00d      	b.n	8012bf8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8012bdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012bde:	685b      	ldr	r3, [r3, #4]
 8012be0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8012be2:	2114      	movs	r1, #20
 8012be4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8012be6:	f7f8 f841 	bl	800ac6c <pbuf_remove_header>
      pbuf_cat(p, r);
 8012bea:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8012bec:	6878      	ldr	r0, [r7, #4]
 8012bee:	f7f8 f991 	bl	800af14 <pbuf_cat>
      r = iprh->next_pbuf;
 8012bf2:	68fb      	ldr	r3, [r7, #12]
 8012bf4:	681b      	ldr	r3, [r3, #0]
 8012bf6:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8012bf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d1ee      	bne.n	8012bdc <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8012bfe:	4b1e      	ldr	r3, [pc, #120]	@ (8012c78 <ip4_reass+0x2b4>)
 8012c00:	681b      	ldr	r3, [r3, #0]
 8012c02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012c04:	429a      	cmp	r2, r3
 8012c06:	d102      	bne.n	8012c0e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8012c08:	2300      	movs	r3, #0
 8012c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012c0c:	e010      	b.n	8012c30 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012c0e:	4b1a      	ldr	r3, [pc, #104]	@ (8012c78 <ip4_reass+0x2b4>)
 8012c10:	681b      	ldr	r3, [r3, #0]
 8012c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012c14:	e007      	b.n	8012c26 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8012c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c18:	681b      	ldr	r3, [r3, #0]
 8012c1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012c1c:	429a      	cmp	r2, r3
 8012c1e:	d006      	beq.n	8012c2e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d1f4      	bne.n	8012c16 <ip4_reass+0x252>
 8012c2c:	e000      	b.n	8012c30 <ip4_reass+0x26c>
          break;
 8012c2e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8012c30:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012c32:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012c34:	f7ff fd2e 	bl	8012694 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8012c38:	6878      	ldr	r0, [r7, #4]
 8012c3a:	f7f8 f92b 	bl	800ae94 <pbuf_clen>
 8012c3e:	4603      	mov	r3, r0
 8012c40:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8012c42:	4b0c      	ldr	r3, [pc, #48]	@ (8012c74 <ip4_reass+0x2b0>)
 8012c44:	881b      	ldrh	r3, [r3, #0]
 8012c46:	8c3a      	ldrh	r2, [r7, #32]
 8012c48:	429a      	cmp	r2, r3
 8012c4a:	d906      	bls.n	8012c5a <ip4_reass+0x296>
 8012c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8012c7c <ip4_reass+0x2b8>)
 8012c4e:	f240 229b 	movw	r2, #667	@ 0x29b
 8012c52:	490b      	ldr	r1, [pc, #44]	@ (8012c80 <ip4_reass+0x2bc>)
 8012c54:	480b      	ldr	r0, [pc, #44]	@ (8012c84 <ip4_reass+0x2c0>)
 8012c56:	f000 fcbb 	bl	80135d0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8012c5a:	4b06      	ldr	r3, [pc, #24]	@ (8012c74 <ip4_reass+0x2b0>)
 8012c5c:	881a      	ldrh	r2, [r3, #0]
 8012c5e:	8c3b      	ldrh	r3, [r7, #32]
 8012c60:	1ad3      	subs	r3, r2, r3
 8012c62:	b29a      	uxth	r2, r3
 8012c64:	4b03      	ldr	r3, [pc, #12]	@ (8012c74 <ip4_reass+0x2b0>)
 8012c66:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	e038      	b.n	8012cde <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8012c6c:	2300      	movs	r3, #0
 8012c6e:	e036      	b.n	8012cde <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8012c70:	bf00      	nop
 8012c72:	e00a      	b.n	8012c8a <ip4_reass+0x2c6>
 8012c74:	240106a4 	.word	0x240106a4
 8012c78:	240106a0 	.word	0x240106a0
 8012c7c:	08016d48 	.word	0x08016d48
 8012c80:	08016eb8 	.word	0x08016eb8
 8012c84:	08016d90 	.word	0x08016d90
    goto nullreturn_ipr;
 8012c88:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8012c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d106      	bne.n	8012c9e <ip4_reass+0x2da>
 8012c90:	4b15      	ldr	r3, [pc, #84]	@ (8012ce8 <ip4_reass+0x324>)
 8012c92:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8012c96:	4915      	ldr	r1, [pc, #84]	@ (8012cec <ip4_reass+0x328>)
 8012c98:	4815      	ldr	r0, [pc, #84]	@ (8012cf0 <ip4_reass+0x32c>)
 8012c9a:	f000 fc99 	bl	80135d0 <iprintf>
  if (ipr->p == NULL) {
 8012c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ca0:	685b      	ldr	r3, [r3, #4]
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d116      	bne.n	8012cd4 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8012ca6:	4b13      	ldr	r3, [pc, #76]	@ (8012cf4 <ip4_reass+0x330>)
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012cac:	429a      	cmp	r2, r3
 8012cae:	d006      	beq.n	8012cbe <ip4_reass+0x2fa>
 8012cb0:	4b0d      	ldr	r3, [pc, #52]	@ (8012ce8 <ip4_reass+0x324>)
 8012cb2:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8012cb6:	4910      	ldr	r1, [pc, #64]	@ (8012cf8 <ip4_reass+0x334>)
 8012cb8:	480d      	ldr	r0, [pc, #52]	@ (8012cf0 <ip4_reass+0x32c>)
 8012cba:	f000 fc89 	bl	80135d0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8012cbe:	2100      	movs	r1, #0
 8012cc0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012cc2:	f7ff fce7 	bl	8012694 <ip_reass_dequeue_datagram>
 8012cc6:	e006      	b.n	8012cd6 <ip4_reass+0x312>
    goto nullreturn;
 8012cc8:	bf00      	nop
 8012cca:	e004      	b.n	8012cd6 <ip4_reass+0x312>
    goto nullreturn;
 8012ccc:	bf00      	nop
 8012cce:	e002      	b.n	8012cd6 <ip4_reass+0x312>
      goto nullreturn;
 8012cd0:	bf00      	nop
 8012cd2:	e000      	b.n	8012cd6 <ip4_reass+0x312>
  }

nullreturn:
 8012cd4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8012cd6:	6878      	ldr	r0, [r7, #4]
 8012cd8:	f7f8 f84e 	bl	800ad78 <pbuf_free>
  return NULL;
 8012cdc:	2300      	movs	r3, #0
}
 8012cde:	4618      	mov	r0, r3
 8012ce0:	3738      	adds	r7, #56	@ 0x38
 8012ce2:	46bd      	mov	sp, r7
 8012ce4:	bd80      	pop	{r7, pc}
 8012ce6:	bf00      	nop
 8012ce8:	08016d48 	.word	0x08016d48
 8012cec:	08016ed4 	.word	0x08016ed4
 8012cf0:	08016d90 	.word	0x08016d90
 8012cf4:	240106a0 	.word	0x240106a0
 8012cf8:	08016ee0 	.word	0x08016ee0

08012cfc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8012cfc:	b580      	push	{r7, lr}
 8012cfe:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8012d00:	2005      	movs	r0, #5
 8012d02:	f7f7 f90f 	bl	8009f24 <memp_malloc>
 8012d06:	4603      	mov	r3, r0
}
 8012d08:	4618      	mov	r0, r3
 8012d0a:	bd80      	pop	{r7, pc}

08012d0c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8012d0c:	b580      	push	{r7, lr}
 8012d0e:	b082      	sub	sp, #8
 8012d10:	af00      	add	r7, sp, #0
 8012d12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d106      	bne.n	8012d28 <ip_frag_free_pbuf_custom_ref+0x1c>
 8012d1a:	4b07      	ldr	r3, [pc, #28]	@ (8012d38 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8012d1c:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8012d20:	4906      	ldr	r1, [pc, #24]	@ (8012d3c <ip_frag_free_pbuf_custom_ref+0x30>)
 8012d22:	4807      	ldr	r0, [pc, #28]	@ (8012d40 <ip_frag_free_pbuf_custom_ref+0x34>)
 8012d24:	f000 fc54 	bl	80135d0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8012d28:	6879      	ldr	r1, [r7, #4]
 8012d2a:	2005      	movs	r0, #5
 8012d2c:	f7f7 f970 	bl	800a010 <memp_free>
}
 8012d30:	bf00      	nop
 8012d32:	3708      	adds	r7, #8
 8012d34:	46bd      	mov	sp, r7
 8012d36:	bd80      	pop	{r7, pc}
 8012d38:	08016d48 	.word	0x08016d48
 8012d3c:	08016f00 	.word	0x08016f00
 8012d40:	08016d90 	.word	0x08016d90

08012d44 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8012d44:	b580      	push	{r7, lr}
 8012d46:	b084      	sub	sp, #16
 8012d48:	af00      	add	r7, sp, #0
 8012d4a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8012d50:	68fb      	ldr	r3, [r7, #12]
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d106      	bne.n	8012d64 <ipfrag_free_pbuf_custom+0x20>
 8012d56:	4b11      	ldr	r3, [pc, #68]	@ (8012d9c <ipfrag_free_pbuf_custom+0x58>)
 8012d58:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8012d5c:	4910      	ldr	r1, [pc, #64]	@ (8012da0 <ipfrag_free_pbuf_custom+0x5c>)
 8012d5e:	4811      	ldr	r0, [pc, #68]	@ (8012da4 <ipfrag_free_pbuf_custom+0x60>)
 8012d60:	f000 fc36 	bl	80135d0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8012d64:	68fa      	ldr	r2, [r7, #12]
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	429a      	cmp	r2, r3
 8012d6a:	d006      	beq.n	8012d7a <ipfrag_free_pbuf_custom+0x36>
 8012d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8012d9c <ipfrag_free_pbuf_custom+0x58>)
 8012d6e:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8012d72:	490d      	ldr	r1, [pc, #52]	@ (8012da8 <ipfrag_free_pbuf_custom+0x64>)
 8012d74:	480b      	ldr	r0, [pc, #44]	@ (8012da4 <ipfrag_free_pbuf_custom+0x60>)
 8012d76:	f000 fc2b 	bl	80135d0 <iprintf>
  if (pcr->original != NULL) {
 8012d7a:	68fb      	ldr	r3, [r7, #12]
 8012d7c:	695b      	ldr	r3, [r3, #20]
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	d004      	beq.n	8012d8c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	695b      	ldr	r3, [r3, #20]
 8012d86:	4618      	mov	r0, r3
 8012d88:	f7f7 fff6 	bl	800ad78 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8012d8c:	68f8      	ldr	r0, [r7, #12]
 8012d8e:	f7ff ffbd 	bl	8012d0c <ip_frag_free_pbuf_custom_ref>
}
 8012d92:	bf00      	nop
 8012d94:	3710      	adds	r7, #16
 8012d96:	46bd      	mov	sp, r7
 8012d98:	bd80      	pop	{r7, pc}
 8012d9a:	bf00      	nop
 8012d9c:	08016d48 	.word	0x08016d48
 8012da0:	08016f0c 	.word	0x08016f0c
 8012da4:	08016d90 	.word	0x08016d90
 8012da8:	08016f18 	.word	0x08016f18

08012dac <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8012dac:	b580      	push	{r7, lr}
 8012dae:	b094      	sub	sp, #80	@ 0x50
 8012db0:	af02      	add	r7, sp, #8
 8012db2:	60f8      	str	r0, [r7, #12]
 8012db4:	60b9      	str	r1, [r7, #8]
 8012db6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8012db8:	2300      	movs	r3, #0
 8012dba:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8012dbe:	68bb      	ldr	r3, [r7, #8]
 8012dc0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8012dc2:	3b14      	subs	r3, #20
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	da00      	bge.n	8012dca <ip4_frag+0x1e>
 8012dc8:	3307      	adds	r3, #7
 8012dca:	10db      	asrs	r3, r3, #3
 8012dcc:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8012dce:	2314      	movs	r3, #20
 8012dd0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8012dd2:	68fb      	ldr	r3, [r7, #12]
 8012dd4:	685b      	ldr	r3, [r3, #4]
 8012dd6:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8012dd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012dda:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8012ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012dde:	781b      	ldrb	r3, [r3, #0]
 8012de0:	f003 030f 	and.w	r3, r3, #15
 8012de4:	b2db      	uxtb	r3, r3
 8012de6:	009b      	lsls	r3, r3, #2
 8012de8:	b2db      	uxtb	r3, r3
 8012dea:	2b14      	cmp	r3, #20
 8012dec:	d002      	beq.n	8012df4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8012dee:	f06f 0305 	mvn.w	r3, #5
 8012df2:	e110      	b.n	8013016 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8012df4:	68fb      	ldr	r3, [r7, #12]
 8012df6:	895b      	ldrh	r3, [r3, #10]
 8012df8:	2b13      	cmp	r3, #19
 8012dfa:	d809      	bhi.n	8012e10 <ip4_frag+0x64>
 8012dfc:	4b88      	ldr	r3, [pc, #544]	@ (8013020 <ip4_frag+0x274>)
 8012dfe:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8012e02:	4988      	ldr	r1, [pc, #544]	@ (8013024 <ip4_frag+0x278>)
 8012e04:	4888      	ldr	r0, [pc, #544]	@ (8013028 <ip4_frag+0x27c>)
 8012e06:	f000 fbe3 	bl	80135d0 <iprintf>
 8012e0a:	f06f 0305 	mvn.w	r3, #5
 8012e0e:	e102      	b.n	8013016 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8012e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e12:	88db      	ldrh	r3, [r3, #6]
 8012e14:	b29b      	uxth	r3, r3
 8012e16:	4618      	mov	r0, r3
 8012e18:	f7f6 fae4 	bl	80093e4 <lwip_htons>
 8012e1c:	4603      	mov	r3, r0
 8012e1e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8012e20:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8012e22:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012e26:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8012e2a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8012e2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8012e30:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	891b      	ldrh	r3, [r3, #8]
 8012e36:	3b14      	subs	r3, #20
 8012e38:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8012e3c:	e0e1      	b.n	8013002 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8012e3e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8012e40:	00db      	lsls	r3, r3, #3
 8012e42:	b29b      	uxth	r3, r3
 8012e44:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8012e48:	4293      	cmp	r3, r2
 8012e4a:	bf28      	it	cs
 8012e4c:	4613      	movcs	r3, r2
 8012e4e:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8012e50:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012e54:	2114      	movs	r1, #20
 8012e56:	200e      	movs	r0, #14
 8012e58:	f7f7 fca6 	bl	800a7a8 <pbuf_alloc>
 8012e5c:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8012e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	f000 80d5 	beq.w	8013010 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8012e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e68:	895b      	ldrh	r3, [r3, #10]
 8012e6a:	2b13      	cmp	r3, #19
 8012e6c:	d806      	bhi.n	8012e7c <ip4_frag+0xd0>
 8012e6e:	4b6c      	ldr	r3, [pc, #432]	@ (8013020 <ip4_frag+0x274>)
 8012e70:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8012e74:	496d      	ldr	r1, [pc, #436]	@ (801302c <ip4_frag+0x280>)
 8012e76:	486c      	ldr	r0, [pc, #432]	@ (8013028 <ip4_frag+0x27c>)
 8012e78:	f000 fbaa 	bl	80135d0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8012e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e7e:	685b      	ldr	r3, [r3, #4]
 8012e80:	2214      	movs	r2, #20
 8012e82:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8012e84:	4618      	mov	r0, r3
 8012e86:	f000 fcd4 	bl	8013832 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8012e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e8c:	685b      	ldr	r3, [r3, #4]
 8012e8e:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8012e90:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8012e92:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8012e96:	e064      	b.n	8012f62 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8012e98:	68fb      	ldr	r3, [r7, #12]
 8012e9a:	895a      	ldrh	r2, [r3, #10]
 8012e9c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012e9e:	1ad3      	subs	r3, r2, r3
 8012ea0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8012ea2:	68fb      	ldr	r3, [r7, #12]
 8012ea4:	895b      	ldrh	r3, [r3, #10]
 8012ea6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8012ea8:	429a      	cmp	r2, r3
 8012eaa:	d906      	bls.n	8012eba <ip4_frag+0x10e>
 8012eac:	4b5c      	ldr	r3, [pc, #368]	@ (8013020 <ip4_frag+0x274>)
 8012eae:	f240 322d 	movw	r2, #813	@ 0x32d
 8012eb2:	495f      	ldr	r1, [pc, #380]	@ (8013030 <ip4_frag+0x284>)
 8012eb4:	485c      	ldr	r0, [pc, #368]	@ (8013028 <ip4_frag+0x27c>)
 8012eb6:	f000 fb8b 	bl	80135d0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8012eba:	8bfa      	ldrh	r2, [r7, #30]
 8012ebc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8012ec0:	4293      	cmp	r3, r2
 8012ec2:	bf28      	it	cs
 8012ec4:	4613      	movcs	r3, r2
 8012ec6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8012eca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d105      	bne.n	8012ede <ip4_frag+0x132>
        poff = 0;
 8012ed2:	2300      	movs	r3, #0
 8012ed4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8012ed6:	68fb      	ldr	r3, [r7, #12]
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	60fb      	str	r3, [r7, #12]
        continue;
 8012edc:	e041      	b.n	8012f62 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8012ede:	f7ff ff0d 	bl	8012cfc <ip_frag_alloc_pbuf_custom_ref>
 8012ee2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8012ee4:	69bb      	ldr	r3, [r7, #24]
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d103      	bne.n	8012ef2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8012eea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012eec:	f7f7 ff44 	bl	800ad78 <pbuf_free>
        goto memerr;
 8012ef0:	e08f      	b.n	8013012 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012ef2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8012ef4:	68fb      	ldr	r3, [r7, #12]
 8012ef6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012ef8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012efa:	4413      	add	r3, r2
 8012efc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8012f00:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8012f04:	9201      	str	r2, [sp, #4]
 8012f06:	9300      	str	r3, [sp, #0]
 8012f08:	4603      	mov	r3, r0
 8012f0a:	2241      	movs	r2, #65	@ 0x41
 8012f0c:	2000      	movs	r0, #0
 8012f0e:	f7f7 fd79 	bl	800aa04 <pbuf_alloced_custom>
 8012f12:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8012f14:	697b      	ldr	r3, [r7, #20]
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d106      	bne.n	8012f28 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8012f1a:	69b8      	ldr	r0, [r7, #24]
 8012f1c:	f7ff fef6 	bl	8012d0c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8012f20:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012f22:	f7f7 ff29 	bl	800ad78 <pbuf_free>
        goto memerr;
 8012f26:	e074      	b.n	8013012 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8012f28:	68f8      	ldr	r0, [r7, #12]
 8012f2a:	f7f7 ffcb 	bl	800aec4 <pbuf_ref>
      pcr->original = p;
 8012f2e:	69bb      	ldr	r3, [r7, #24]
 8012f30:	68fa      	ldr	r2, [r7, #12]
 8012f32:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8012f34:	69bb      	ldr	r3, [r7, #24]
 8012f36:	4a3f      	ldr	r2, [pc, #252]	@ (8013034 <ip4_frag+0x288>)
 8012f38:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8012f3a:	6979      	ldr	r1, [r7, #20]
 8012f3c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012f3e:	f7f7 ffe9 	bl	800af14 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8012f42:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8012f46:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012f4a:	1ad3      	subs	r3, r2, r3
 8012f4c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8012f50:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d004      	beq.n	8012f62 <ip4_frag+0x1b6>
        poff = 0;
 8012f58:	2300      	movs	r3, #0
 8012f5a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8012f5c:	68fb      	ldr	r3, [r7, #12]
 8012f5e:	681b      	ldr	r3, [r3, #0]
 8012f60:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8012f62:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d196      	bne.n	8012e98 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8012f6a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8012f6c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012f70:	4413      	add	r3, r2
 8012f72:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8012f74:	68bb      	ldr	r3, [r7, #8]
 8012f76:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8012f78:	f1a3 0213 	sub.w	r2, r3, #19
 8012f7c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012f80:	429a      	cmp	r2, r3
 8012f82:	bfcc      	ite	gt
 8012f84:	2301      	movgt	r3, #1
 8012f86:	2300      	movle	r3, #0
 8012f88:	b2db      	uxtb	r3, r3
 8012f8a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8012f8c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8012f90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012f94:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8012f96:	6a3b      	ldr	r3, [r7, #32]
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d002      	beq.n	8012fa2 <ip4_frag+0x1f6>
 8012f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d003      	beq.n	8012faa <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8012fa2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8012fa4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8012fa8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8012faa:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8012fac:	4618      	mov	r0, r3
 8012fae:	f7f6 fa19 	bl	80093e4 <lwip_htons>
 8012fb2:	4603      	mov	r3, r0
 8012fb4:	461a      	mov	r2, r3
 8012fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012fb8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8012fba:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8012fbc:	3314      	adds	r3, #20
 8012fbe:	b29b      	uxth	r3, r3
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	f7f6 fa0f 	bl	80093e4 <lwip_htons>
 8012fc6:	4603      	mov	r3, r0
 8012fc8:	461a      	mov	r2, r3
 8012fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012fcc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8012fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012fd0:	2200      	movs	r2, #0
 8012fd2:	729a      	strb	r2, [r3, #10]
 8012fd4:	2200      	movs	r2, #0
 8012fd6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8012fd8:	68bb      	ldr	r3, [r7, #8]
 8012fda:	695b      	ldr	r3, [r3, #20]
 8012fdc:	687a      	ldr	r2, [r7, #4]
 8012fde:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012fe0:	68b8      	ldr	r0, [r7, #8]
 8012fe2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8012fe4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012fe6:	f7f7 fec7 	bl	800ad78 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8012fea:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8012fee:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8012ff0:	1ad3      	subs	r3, r2, r3
 8012ff2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8012ff6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8012ffa:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8012ffc:	4413      	add	r3, r2
 8012ffe:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8013002:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013006:	2b00      	cmp	r3, #0
 8013008:	f47f af19 	bne.w	8012e3e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801300c:	2300      	movs	r3, #0
 801300e:	e002      	b.n	8013016 <ip4_frag+0x26a>
      goto memerr;
 8013010:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8013012:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013016:	4618      	mov	r0, r3
 8013018:	3748      	adds	r7, #72	@ 0x48
 801301a:	46bd      	mov	sp, r7
 801301c:	bd80      	pop	{r7, pc}
 801301e:	bf00      	nop
 8013020:	08016d48 	.word	0x08016d48
 8013024:	08016f24 	.word	0x08016f24
 8013028:	08016d90 	.word	0x08016d90
 801302c:	08016f40 	.word	0x08016f40
 8013030:	08016f60 	.word	0x08016f60
 8013034:	08012d45 	.word	0x08012d45

08013038 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8013038:	b580      	push	{r7, lr}
 801303a:	b086      	sub	sp, #24
 801303c:	af00      	add	r7, sp, #0
 801303e:	6078      	str	r0, [r7, #4]
 8013040:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8013042:	230e      	movs	r3, #14
 8013044:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();
 8013046:	f7f2 f957 	bl	80052f8 <sys_check_core_locking>

  if (p->len <= SIZEOF_ETH_HDR) {
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	895b      	ldrh	r3, [r3, #10]
 801304e:	2b0e      	cmp	r3, #14
 8013050:	d96e      	bls.n	8013130 <ethernet_input+0xf8>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	7bdb      	ldrb	r3, [r3, #15]
 8013056:	2b00      	cmp	r3, #0
 8013058:	d106      	bne.n	8013068 <ethernet_input+0x30>
    p->if_idx = netif_get_index(netif);
 801305a:	683b      	ldr	r3, [r7, #0]
 801305c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013060:	3301      	adds	r3, #1
 8013062:	b2da      	uxtb	r2, r3
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	685b      	ldr	r3, [r3, #4]
 801306c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801306e:	693b      	ldr	r3, [r7, #16]
 8013070:	7b1a      	ldrb	r2, [r3, #12]
 8013072:	7b5b      	ldrb	r3, [r3, #13]
 8013074:	021b      	lsls	r3, r3, #8
 8013076:	4313      	orrs	r3, r2
 8013078:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801307a:	693b      	ldr	r3, [r7, #16]
 801307c:	781b      	ldrb	r3, [r3, #0]
 801307e:	f003 0301 	and.w	r3, r3, #1
 8013082:	2b00      	cmp	r3, #0
 8013084:	d023      	beq.n	80130ce <ethernet_input+0x96>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8013086:	693b      	ldr	r3, [r7, #16]
 8013088:	781b      	ldrb	r3, [r3, #0]
 801308a:	2b01      	cmp	r3, #1
 801308c:	d10f      	bne.n	80130ae <ethernet_input+0x76>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801308e:	693b      	ldr	r3, [r7, #16]
 8013090:	785b      	ldrb	r3, [r3, #1]
 8013092:	2b00      	cmp	r3, #0
 8013094:	d11b      	bne.n	80130ce <ethernet_input+0x96>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8013096:	693b      	ldr	r3, [r7, #16]
 8013098:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801309a:	2b5e      	cmp	r3, #94	@ 0x5e
 801309c:	d117      	bne.n	80130ce <ethernet_input+0x96>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	7b5b      	ldrb	r3, [r3, #13]
 80130a2:	f043 0310 	orr.w	r3, r3, #16
 80130a6:	b2da      	uxtb	r2, r3
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	735a      	strb	r2, [r3, #13]
 80130ac:	e00f      	b.n	80130ce <ethernet_input+0x96>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80130ae:	693b      	ldr	r3, [r7, #16]
 80130b0:	2206      	movs	r2, #6
 80130b2:	4928      	ldr	r1, [pc, #160]	@ (8013154 <ethernet_input+0x11c>)
 80130b4:	4618      	mov	r0, r3
 80130b6:	f000 fae0 	bl	801367a <memcmp>
 80130ba:	4603      	mov	r3, r0
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d106      	bne.n	80130ce <ethernet_input+0x96>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	7b5b      	ldrb	r3, [r3, #13]
 80130c4:	f043 0308 	orr.w	r3, r3, #8
 80130c8:	b2da      	uxtb	r2, r3
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80130ce:	89fb      	ldrh	r3, [r7, #14]
 80130d0:	2b08      	cmp	r3, #8
 80130d2:	d003      	beq.n	80130dc <ethernet_input+0xa4>
 80130d4:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 80130d8:	d014      	beq.n	8013104 <ethernet_input+0xcc>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80130da:	e032      	b.n	8013142 <ethernet_input+0x10a>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80130dc:	683b      	ldr	r3, [r7, #0]
 80130de:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80130e2:	f003 0308 	and.w	r3, r3, #8
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d024      	beq.n	8013134 <ethernet_input+0xfc>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80130ea:	8afb      	ldrh	r3, [r7, #22]
 80130ec:	4619      	mov	r1, r3
 80130ee:	6878      	ldr	r0, [r7, #4]
 80130f0:	f7f7 fdbc 	bl	800ac6c <pbuf_remove_header>
 80130f4:	4603      	mov	r3, r0
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d11e      	bne.n	8013138 <ethernet_input+0x100>
        ip4_input(p, netif);
 80130fa:	6839      	ldr	r1, [r7, #0]
 80130fc:	6878      	ldr	r0, [r7, #4]
 80130fe:	f7fe ff1b 	bl	8011f38 <ip4_input>
      break;
 8013102:	e013      	b.n	801312c <ethernet_input+0xf4>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013104:	683b      	ldr	r3, [r7, #0]
 8013106:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801310a:	f003 0308 	and.w	r3, r3, #8
 801310e:	2b00      	cmp	r3, #0
 8013110:	d014      	beq.n	801313c <ethernet_input+0x104>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013112:	8afb      	ldrh	r3, [r7, #22]
 8013114:	4619      	mov	r1, r3
 8013116:	6878      	ldr	r0, [r7, #4]
 8013118:	f7f7 fda8 	bl	800ac6c <pbuf_remove_header>
 801311c:	4603      	mov	r3, r0
 801311e:	2b00      	cmp	r3, #0
 8013120:	d10e      	bne.n	8013140 <ethernet_input+0x108>
        etharp_input(p, netif);
 8013122:	6839      	ldr	r1, [r7, #0]
 8013124:	6878      	ldr	r0, [r7, #4]
 8013126:	f7fe f891 	bl	801124c <etharp_input>
      break;
 801312a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801312c:	2300      	movs	r3, #0
 801312e:	e00c      	b.n	801314a <ethernet_input+0x112>
    goto free_and_return;
 8013130:	bf00      	nop
 8013132:	e006      	b.n	8013142 <ethernet_input+0x10a>
        goto free_and_return;
 8013134:	bf00      	nop
 8013136:	e004      	b.n	8013142 <ethernet_input+0x10a>
        goto free_and_return;
 8013138:	bf00      	nop
 801313a:	e002      	b.n	8013142 <ethernet_input+0x10a>
        goto free_and_return;
 801313c:	bf00      	nop
 801313e:	e000      	b.n	8013142 <ethernet_input+0x10a>
        goto free_and_return;
 8013140:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8013142:	6878      	ldr	r0, [r7, #4]
 8013144:	f7f7 fe18 	bl	800ad78 <pbuf_free>
  return ERR_OK;
 8013148:	2300      	movs	r3, #0
}
 801314a:	4618      	mov	r0, r3
 801314c:	3718      	adds	r7, #24
 801314e:	46bd      	mov	sp, r7
 8013150:	bd80      	pop	{r7, pc}
 8013152:	bf00      	nop
 8013154:	08017158 	.word	0x08017158

08013158 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8013158:	b580      	push	{r7, lr}
 801315a:	b086      	sub	sp, #24
 801315c:	af00      	add	r7, sp, #0
 801315e:	60f8      	str	r0, [r7, #12]
 8013160:	60b9      	str	r1, [r7, #8]
 8013162:	607a      	str	r2, [r7, #4]
 8013164:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8013166:	8c3b      	ldrh	r3, [r7, #32]
 8013168:	4618      	mov	r0, r3
 801316a:	f7f6 f93b 	bl	80093e4 <lwip_htons>
 801316e:	4603      	mov	r3, r0
 8013170:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8013172:	210e      	movs	r1, #14
 8013174:	68b8      	ldr	r0, [r7, #8]
 8013176:	f7f7 fd69 	bl	800ac4c <pbuf_add_header>
 801317a:	4603      	mov	r3, r0
 801317c:	2b00      	cmp	r3, #0
 801317e:	d127      	bne.n	80131d0 <ethernet_output+0x78>
      goto pbuf_header_failed;
    }
  }

  LWIP_ASSERT_CORE_LOCKED();
 8013180:	f7f2 f8ba 	bl	80052f8 <sys_check_core_locking>

  ethhdr = (struct eth_hdr *)p->payload;
 8013184:	68bb      	ldr	r3, [r7, #8]
 8013186:	685b      	ldr	r3, [r3, #4]
 8013188:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801318a:	693b      	ldr	r3, [r7, #16]
 801318c:	8afa      	ldrh	r2, [r7, #22]
 801318e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8013190:	693b      	ldr	r3, [r7, #16]
 8013192:	2206      	movs	r2, #6
 8013194:	6839      	ldr	r1, [r7, #0]
 8013196:	4618      	mov	r0, r3
 8013198:	f000 fb4b 	bl	8013832 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801319c:	693b      	ldr	r3, [r7, #16]
 801319e:	3306      	adds	r3, #6
 80131a0:	2206      	movs	r2, #6
 80131a2:	6879      	ldr	r1, [r7, #4]
 80131a4:	4618      	mov	r0, r3
 80131a6:	f000 fb44 	bl	8013832 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80131aa:	68fb      	ldr	r3, [r7, #12]
 80131ac:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80131b0:	2b06      	cmp	r3, #6
 80131b2:	d006      	beq.n	80131c2 <ethernet_output+0x6a>
 80131b4:	4b0a      	ldr	r3, [pc, #40]	@ (80131e0 <ethernet_output+0x88>)
 80131b6:	f44f 7299 	mov.w	r2, #306	@ 0x132
 80131ba:	490a      	ldr	r1, [pc, #40]	@ (80131e4 <ethernet_output+0x8c>)
 80131bc:	480a      	ldr	r0, [pc, #40]	@ (80131e8 <ethernet_output+0x90>)
 80131be:	f000 fa07 	bl	80135d0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	699b      	ldr	r3, [r3, #24]
 80131c6:	68b9      	ldr	r1, [r7, #8]
 80131c8:	68f8      	ldr	r0, [r7, #12]
 80131ca:	4798      	blx	r3
 80131cc:	4603      	mov	r3, r0
 80131ce:	e002      	b.n	80131d6 <ethernet_output+0x7e>
      goto pbuf_header_failed;
 80131d0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80131d2:	f06f 0301 	mvn.w	r3, #1
}
 80131d6:	4618      	mov	r0, r3
 80131d8:	3718      	adds	r7, #24
 80131da:	46bd      	mov	sp, r7
 80131dc:	bd80      	pop	{r7, pc}
 80131de:	bf00      	nop
 80131e0:	08016f70 	.word	0x08016f70
 80131e4:	08016fa8 	.word	0x08016fa8
 80131e8:	08016fdc 	.word	0x08016fdc

080131ec <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80131ec:	b580      	push	{r7, lr}
 80131ee:	b082      	sub	sp, #8
 80131f0:	af00      	add	r7, sp, #0
 80131f2:	6078      	str	r0, [r7, #4]
 80131f4:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 80131f6:	683b      	ldr	r3, [r7, #0]
 80131f8:	2200      	movs	r2, #0
 80131fa:	2104      	movs	r1, #4
 80131fc:	4618      	mov	r0, r3
 80131fe:	f7f2 fc4d 	bl	8005a9c <osMessageQueueNew>
 8013202:	4602      	mov	r2, r0
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	2b00      	cmp	r3, #0
 801320e:	d102      	bne.n	8013216 <sys_mbox_new+0x2a>
    return ERR_MEM;
 8013210:	f04f 33ff 	mov.w	r3, #4294967295
 8013214:	e000      	b.n	8013218 <sys_mbox_new+0x2c>

  return ERR_OK;
 8013216:	2300      	movs	r3, #0
}
 8013218:	4618      	mov	r0, r3
 801321a:	3708      	adds	r7, #8
 801321c:	46bd      	mov	sp, r7
 801321e:	bd80      	pop	{r7, pc}

08013220 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8013220:	b580      	push	{r7, lr}
 8013222:	b084      	sub	sp, #16
 8013224:	af00      	add	r7, sp, #0
 8013226:	6078      	str	r0, [r7, #4]
 8013228:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	6818      	ldr	r0, [r3, #0]
 801322e:	4639      	mov	r1, r7
 8013230:	2300      	movs	r3, #0
 8013232:	2200      	movs	r2, #0
 8013234:	f7f2 fca6 	bl	8005b84 <osMessageQueuePut>
 8013238:	4603      	mov	r3, r0
 801323a:	2b00      	cmp	r3, #0
 801323c:	d102      	bne.n	8013244 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801323e:	2300      	movs	r3, #0
 8013240:	73fb      	strb	r3, [r7, #15]
 8013242:	e001      	b.n	8013248 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8013244:	23ff      	movs	r3, #255	@ 0xff
 8013246:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8013248:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801324c:	4618      	mov	r0, r3
 801324e:	3710      	adds	r7, #16
 8013250:	46bd      	mov	sp, r7
 8013252:	bd80      	pop	{r7, pc}

08013254 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8013254:	b580      	push	{r7, lr}
 8013256:	b086      	sub	sp, #24
 8013258:	af00      	add	r7, sp, #0
 801325a:	60f8      	str	r0, [r7, #12]
 801325c:	60b9      	str	r1, [r7, #8]
 801325e:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8013260:	f7f2 f920 	bl	80054a4 <osKernelGetTickCount>
 8013264:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	2b00      	cmp	r3, #0
 801326a:	d013      	beq.n	8013294 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801326c:	68fb      	ldr	r3, [r7, #12]
 801326e:	6818      	ldr	r0, [r3, #0]
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	2200      	movs	r2, #0
 8013274:	68b9      	ldr	r1, [r7, #8]
 8013276:	f7f2 fce5 	bl	8005c44 <osMessageQueueGet>
 801327a:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801327c:	693b      	ldr	r3, [r7, #16]
 801327e:	2b00      	cmp	r3, #0
 8013280:	d105      	bne.n	801328e <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8013282:	f7f2 f90f 	bl	80054a4 <osKernelGetTickCount>
 8013286:	4602      	mov	r2, r0
 8013288:	697b      	ldr	r3, [r7, #20]
 801328a:	1ad3      	subs	r3, r2, r3
 801328c:	e00f      	b.n	80132ae <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801328e:	f04f 33ff 	mov.w	r3, #4294967295
 8013292:	e00c      	b.n	80132ae <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8013294:	68fb      	ldr	r3, [r7, #12]
 8013296:	6818      	ldr	r0, [r3, #0]
 8013298:	f04f 33ff 	mov.w	r3, #4294967295
 801329c:	2200      	movs	r2, #0
 801329e:	68b9      	ldr	r1, [r7, #8]
 80132a0:	f7f2 fcd0 	bl	8005c44 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 80132a4:	f7f2 f8fe 	bl	80054a4 <osKernelGetTickCount>
 80132a8:	4602      	mov	r2, r0
 80132aa:	697b      	ldr	r3, [r7, #20]
 80132ac:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 80132ae:	4618      	mov	r0, r3
 80132b0:	3718      	adds	r7, #24
 80132b2:	46bd      	mov	sp, r7
 80132b4:	bd80      	pop	{r7, pc}

080132b6 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80132b6:	b480      	push	{r7}
 80132b8:	b083      	sub	sp, #12
 80132ba:	af00      	add	r7, sp, #0
 80132bc:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	681b      	ldr	r3, [r3, #0]
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d101      	bne.n	80132ca <sys_mbox_valid+0x14>
    return 0;
 80132c6:	2300      	movs	r3, #0
 80132c8:	e000      	b.n	80132cc <sys_mbox_valid+0x16>
  else
    return 1;
 80132ca:	2301      	movs	r3, #1
}
 80132cc:	4618      	mov	r0, r3
 80132ce:	370c      	adds	r7, #12
 80132d0:	46bd      	mov	sp, r7
 80132d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132d6:	4770      	bx	lr

080132d8 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80132d8:	b580      	push	{r7, lr}
 80132da:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 80132dc:	2000      	movs	r0, #0
 80132de:	f7f2 f9af 	bl	8005640 <osMutexNew>
 80132e2:	4603      	mov	r3, r0
 80132e4:	4a01      	ldr	r2, [pc, #4]	@ (80132ec <sys_init+0x14>)
 80132e6:	6013      	str	r3, [r2, #0]
#endif
}
 80132e8:	bf00      	nop
 80132ea:	bd80      	pop	{r7, pc}
 80132ec:	240106a8 	.word	0x240106a8

080132f0 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80132f0:	b580      	push	{r7, lr}
 80132f2:	b082      	sub	sp, #8
 80132f4:	af00      	add	r7, sp, #0
 80132f6:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 80132f8:	2000      	movs	r0, #0
 80132fa:	f7f2 f9a1 	bl	8005640 <osMutexNew>
 80132fe:	4602      	mov	r2, r0
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	681b      	ldr	r3, [r3, #0]
 8013308:	2b00      	cmp	r3, #0
 801330a:	d102      	bne.n	8013312 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801330c:	f04f 33ff 	mov.w	r3, #4294967295
 8013310:	e000      	b.n	8013314 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8013312:	2300      	movs	r3, #0
}
 8013314:	4618      	mov	r0, r3
 8013316:	3708      	adds	r7, #8
 8013318:	46bd      	mov	sp, r7
 801331a:	bd80      	pop	{r7, pc}

0801331c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801331c:	b580      	push	{r7, lr}
 801331e:	b082      	sub	sp, #8
 8013320:	af00      	add	r7, sp, #0
 8013322:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	f04f 31ff 	mov.w	r1, #4294967295
 801332c:	4618      	mov	r0, r3
 801332e:	f7f2 fa0d 	bl	800574c <osMutexAcquire>
#endif
}
 8013332:	bf00      	nop
 8013334:	3708      	adds	r7, #8
 8013336:	46bd      	mov	sp, r7
 8013338:	bd80      	pop	{r7, pc}

0801333a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801333a:	b580      	push	{r7, lr}
 801333c:	b082      	sub	sp, #8
 801333e:	af00      	add	r7, sp, #0
 8013340:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	681b      	ldr	r3, [r3, #0]
 8013346:	4618      	mov	r0, r3
 8013348:	f7f2 fa4b 	bl	80057e2 <osMutexRelease>
}
 801334c:	bf00      	nop
 801334e:	3708      	adds	r7, #8
 8013350:	46bd      	mov	sp, r7
 8013352:	bd80      	pop	{r7, pc}

08013354 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8013354:	b580      	push	{r7, lr}
 8013356:	b08e      	sub	sp, #56	@ 0x38
 8013358:	af00      	add	r7, sp, #0
 801335a:	60f8      	str	r0, [r7, #12]
 801335c:	60b9      	str	r1, [r7, #8]
 801335e:	607a      	str	r2, [r7, #4]
 8013360:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8013362:	f107 0314 	add.w	r3, r7, #20
 8013366:	2224      	movs	r2, #36	@ 0x24
 8013368:	2100      	movs	r1, #0
 801336a:	4618      	mov	r0, r3
 801336c:	f000 f995 	bl	801369a <memset>
 8013370:	68fb      	ldr	r3, [r7, #12]
 8013372:	617b      	str	r3, [r7, #20]
 8013374:	683b      	ldr	r3, [r7, #0]
 8013376:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013378:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801337a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801337c:	f107 0314 	add.w	r3, r7, #20
 8013380:	461a      	mov	r2, r3
 8013382:	6879      	ldr	r1, [r7, #4]
 8013384:	68b8      	ldr	r0, [r7, #8]
 8013386:	f7f2 f8a2 	bl	80054ce <osThreadNew>
 801338a:	4603      	mov	r3, r0
#endif
}
 801338c:	4618      	mov	r0, r3
 801338e:	3738      	adds	r7, #56	@ 0x38
 8013390:	46bd      	mov	sp, r7
 8013392:	bd80      	pop	{r7, pc}

08013394 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8013394:	b580      	push	{r7, lr}
 8013396:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8013398:	4b04      	ldr	r3, [pc, #16]	@ (80133ac <sys_arch_protect+0x18>)
 801339a:	681b      	ldr	r3, [r3, #0]
 801339c:	f04f 31ff 	mov.w	r1, #4294967295
 80133a0:	4618      	mov	r0, r3
 80133a2:	f7f2 f9d3 	bl	800574c <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 80133a6:	2301      	movs	r3, #1
}
 80133a8:	4618      	mov	r0, r3
 80133aa:	bd80      	pop	{r7, pc}
 80133ac:	240106a8 	.word	0x240106a8

080133b0 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80133b0:	b580      	push	{r7, lr}
 80133b2:	b082      	sub	sp, #8
 80133b4:	af00      	add	r7, sp, #0
 80133b6:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80133b8:	4b04      	ldr	r3, [pc, #16]	@ (80133cc <sys_arch_unprotect+0x1c>)
 80133ba:	681b      	ldr	r3, [r3, #0]
 80133bc:	4618      	mov	r0, r3
 80133be:	f7f2 fa10 	bl	80057e2 <osMutexRelease>
}
 80133c2:	bf00      	nop
 80133c4:	3708      	adds	r7, #8
 80133c6:	46bd      	mov	sp, r7
 80133c8:	bd80      	pop	{r7, pc}
 80133ca:	bf00      	nop
 80133cc:	240106a8 	.word	0x240106a8

080133d0 <rand>:
 80133d0:	4b16      	ldr	r3, [pc, #88]	@ (801342c <rand+0x5c>)
 80133d2:	b510      	push	{r4, lr}
 80133d4:	681c      	ldr	r4, [r3, #0]
 80133d6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80133d8:	b9b3      	cbnz	r3, 8013408 <rand+0x38>
 80133da:	2018      	movs	r0, #24
 80133dc:	f000 faa0 	bl	8013920 <malloc>
 80133e0:	4602      	mov	r2, r0
 80133e2:	6320      	str	r0, [r4, #48]	@ 0x30
 80133e4:	b920      	cbnz	r0, 80133f0 <rand+0x20>
 80133e6:	4b12      	ldr	r3, [pc, #72]	@ (8013430 <rand+0x60>)
 80133e8:	4812      	ldr	r0, [pc, #72]	@ (8013434 <rand+0x64>)
 80133ea:	2152      	movs	r1, #82	@ 0x52
 80133ec:	f000 fa30 	bl	8013850 <__assert_func>
 80133f0:	4911      	ldr	r1, [pc, #68]	@ (8013438 <rand+0x68>)
 80133f2:	4b12      	ldr	r3, [pc, #72]	@ (801343c <rand+0x6c>)
 80133f4:	e9c0 1300 	strd	r1, r3, [r0]
 80133f8:	4b11      	ldr	r3, [pc, #68]	@ (8013440 <rand+0x70>)
 80133fa:	6083      	str	r3, [r0, #8]
 80133fc:	230b      	movs	r3, #11
 80133fe:	8183      	strh	r3, [r0, #12]
 8013400:	2100      	movs	r1, #0
 8013402:	2001      	movs	r0, #1
 8013404:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8013408:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801340a:	480e      	ldr	r0, [pc, #56]	@ (8013444 <rand+0x74>)
 801340c:	690b      	ldr	r3, [r1, #16]
 801340e:	694c      	ldr	r4, [r1, #20]
 8013410:	4a0d      	ldr	r2, [pc, #52]	@ (8013448 <rand+0x78>)
 8013412:	4358      	muls	r0, r3
 8013414:	fb02 0004 	mla	r0, r2, r4, r0
 8013418:	fba3 3202 	umull	r3, r2, r3, r2
 801341c:	3301      	adds	r3, #1
 801341e:	eb40 0002 	adc.w	r0, r0, r2
 8013422:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8013426:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801342a:	bd10      	pop	{r4, pc}
 801342c:	24000040 	.word	0x24000040
 8013430:	08017166 	.word	0x08017166
 8013434:	0801717d 	.word	0x0801717d
 8013438:	abcd330e 	.word	0xabcd330e
 801343c:	e66d1234 	.word	0xe66d1234
 8013440:	0005deec 	.word	0x0005deec
 8013444:	5851f42d 	.word	0x5851f42d
 8013448:	4c957f2d 	.word	0x4c957f2d

0801344c <std>:
 801344c:	2300      	movs	r3, #0
 801344e:	b510      	push	{r4, lr}
 8013450:	4604      	mov	r4, r0
 8013452:	e9c0 3300 	strd	r3, r3, [r0]
 8013456:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801345a:	6083      	str	r3, [r0, #8]
 801345c:	8181      	strh	r1, [r0, #12]
 801345e:	6643      	str	r3, [r0, #100]	@ 0x64
 8013460:	81c2      	strh	r2, [r0, #14]
 8013462:	6183      	str	r3, [r0, #24]
 8013464:	4619      	mov	r1, r3
 8013466:	2208      	movs	r2, #8
 8013468:	305c      	adds	r0, #92	@ 0x5c
 801346a:	f000 f916 	bl	801369a <memset>
 801346e:	4b0d      	ldr	r3, [pc, #52]	@ (80134a4 <std+0x58>)
 8013470:	6263      	str	r3, [r4, #36]	@ 0x24
 8013472:	4b0d      	ldr	r3, [pc, #52]	@ (80134a8 <std+0x5c>)
 8013474:	62a3      	str	r3, [r4, #40]	@ 0x28
 8013476:	4b0d      	ldr	r3, [pc, #52]	@ (80134ac <std+0x60>)
 8013478:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801347a:	4b0d      	ldr	r3, [pc, #52]	@ (80134b0 <std+0x64>)
 801347c:	6323      	str	r3, [r4, #48]	@ 0x30
 801347e:	4b0d      	ldr	r3, [pc, #52]	@ (80134b4 <std+0x68>)
 8013480:	6224      	str	r4, [r4, #32]
 8013482:	429c      	cmp	r4, r3
 8013484:	d006      	beq.n	8013494 <std+0x48>
 8013486:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801348a:	4294      	cmp	r4, r2
 801348c:	d002      	beq.n	8013494 <std+0x48>
 801348e:	33d0      	adds	r3, #208	@ 0xd0
 8013490:	429c      	cmp	r4, r3
 8013492:	d105      	bne.n	80134a0 <std+0x54>
 8013494:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8013498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801349c:	f000 b9c6 	b.w	801382c <__retarget_lock_init_recursive>
 80134a0:	bd10      	pop	{r4, pc}
 80134a2:	bf00      	nop
 80134a4:	080135f5 	.word	0x080135f5
 80134a8:	08013617 	.word	0x08013617
 80134ac:	0801364f 	.word	0x0801364f
 80134b0:	08013673 	.word	0x08013673
 80134b4:	240106ac 	.word	0x240106ac

080134b8 <stdio_exit_handler>:
 80134b8:	4a02      	ldr	r2, [pc, #8]	@ (80134c4 <stdio_exit_handler+0xc>)
 80134ba:	4903      	ldr	r1, [pc, #12]	@ (80134c8 <stdio_exit_handler+0x10>)
 80134bc:	4803      	ldr	r0, [pc, #12]	@ (80134cc <stdio_exit_handler+0x14>)
 80134be:	f000 b869 	b.w	8013594 <_fwalk_sglue>
 80134c2:	bf00      	nop
 80134c4:	24000034 	.word	0x24000034
 80134c8:	08014135 	.word	0x08014135
 80134cc:	24000044 	.word	0x24000044

080134d0 <cleanup_stdio>:
 80134d0:	6841      	ldr	r1, [r0, #4]
 80134d2:	4b0c      	ldr	r3, [pc, #48]	@ (8013504 <cleanup_stdio+0x34>)
 80134d4:	4299      	cmp	r1, r3
 80134d6:	b510      	push	{r4, lr}
 80134d8:	4604      	mov	r4, r0
 80134da:	d001      	beq.n	80134e0 <cleanup_stdio+0x10>
 80134dc:	f000 fe2a 	bl	8014134 <_fflush_r>
 80134e0:	68a1      	ldr	r1, [r4, #8]
 80134e2:	4b09      	ldr	r3, [pc, #36]	@ (8013508 <cleanup_stdio+0x38>)
 80134e4:	4299      	cmp	r1, r3
 80134e6:	d002      	beq.n	80134ee <cleanup_stdio+0x1e>
 80134e8:	4620      	mov	r0, r4
 80134ea:	f000 fe23 	bl	8014134 <_fflush_r>
 80134ee:	68e1      	ldr	r1, [r4, #12]
 80134f0:	4b06      	ldr	r3, [pc, #24]	@ (801350c <cleanup_stdio+0x3c>)
 80134f2:	4299      	cmp	r1, r3
 80134f4:	d004      	beq.n	8013500 <cleanup_stdio+0x30>
 80134f6:	4620      	mov	r0, r4
 80134f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80134fc:	f000 be1a 	b.w	8014134 <_fflush_r>
 8013500:	bd10      	pop	{r4, pc}
 8013502:	bf00      	nop
 8013504:	240106ac 	.word	0x240106ac
 8013508:	24010714 	.word	0x24010714
 801350c:	2401077c 	.word	0x2401077c

08013510 <global_stdio_init.part.0>:
 8013510:	b510      	push	{r4, lr}
 8013512:	4b0b      	ldr	r3, [pc, #44]	@ (8013540 <global_stdio_init.part.0+0x30>)
 8013514:	4c0b      	ldr	r4, [pc, #44]	@ (8013544 <global_stdio_init.part.0+0x34>)
 8013516:	4a0c      	ldr	r2, [pc, #48]	@ (8013548 <global_stdio_init.part.0+0x38>)
 8013518:	601a      	str	r2, [r3, #0]
 801351a:	4620      	mov	r0, r4
 801351c:	2200      	movs	r2, #0
 801351e:	2104      	movs	r1, #4
 8013520:	f7ff ff94 	bl	801344c <std>
 8013524:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8013528:	2201      	movs	r2, #1
 801352a:	2109      	movs	r1, #9
 801352c:	f7ff ff8e 	bl	801344c <std>
 8013530:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8013534:	2202      	movs	r2, #2
 8013536:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801353a:	2112      	movs	r1, #18
 801353c:	f7ff bf86 	b.w	801344c <std>
 8013540:	240107e4 	.word	0x240107e4
 8013544:	240106ac 	.word	0x240106ac
 8013548:	080134b9 	.word	0x080134b9

0801354c <__sfp_lock_acquire>:
 801354c:	4801      	ldr	r0, [pc, #4]	@ (8013554 <__sfp_lock_acquire+0x8>)
 801354e:	f000 b96e 	b.w	801382e <__retarget_lock_acquire_recursive>
 8013552:	bf00      	nop
 8013554:	240107ed 	.word	0x240107ed

08013558 <__sfp_lock_release>:
 8013558:	4801      	ldr	r0, [pc, #4]	@ (8013560 <__sfp_lock_release+0x8>)
 801355a:	f000 b969 	b.w	8013830 <__retarget_lock_release_recursive>
 801355e:	bf00      	nop
 8013560:	240107ed 	.word	0x240107ed

08013564 <__sinit>:
 8013564:	b510      	push	{r4, lr}
 8013566:	4604      	mov	r4, r0
 8013568:	f7ff fff0 	bl	801354c <__sfp_lock_acquire>
 801356c:	6a23      	ldr	r3, [r4, #32]
 801356e:	b11b      	cbz	r3, 8013578 <__sinit+0x14>
 8013570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013574:	f7ff bff0 	b.w	8013558 <__sfp_lock_release>
 8013578:	4b04      	ldr	r3, [pc, #16]	@ (801358c <__sinit+0x28>)
 801357a:	6223      	str	r3, [r4, #32]
 801357c:	4b04      	ldr	r3, [pc, #16]	@ (8013590 <__sinit+0x2c>)
 801357e:	681b      	ldr	r3, [r3, #0]
 8013580:	2b00      	cmp	r3, #0
 8013582:	d1f5      	bne.n	8013570 <__sinit+0xc>
 8013584:	f7ff ffc4 	bl	8013510 <global_stdio_init.part.0>
 8013588:	e7f2      	b.n	8013570 <__sinit+0xc>
 801358a:	bf00      	nop
 801358c:	080134d1 	.word	0x080134d1
 8013590:	240107e4 	.word	0x240107e4

08013594 <_fwalk_sglue>:
 8013594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013598:	4607      	mov	r7, r0
 801359a:	4688      	mov	r8, r1
 801359c:	4614      	mov	r4, r2
 801359e:	2600      	movs	r6, #0
 80135a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80135a4:	f1b9 0901 	subs.w	r9, r9, #1
 80135a8:	d505      	bpl.n	80135b6 <_fwalk_sglue+0x22>
 80135aa:	6824      	ldr	r4, [r4, #0]
 80135ac:	2c00      	cmp	r4, #0
 80135ae:	d1f7      	bne.n	80135a0 <_fwalk_sglue+0xc>
 80135b0:	4630      	mov	r0, r6
 80135b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80135b6:	89ab      	ldrh	r3, [r5, #12]
 80135b8:	2b01      	cmp	r3, #1
 80135ba:	d907      	bls.n	80135cc <_fwalk_sglue+0x38>
 80135bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80135c0:	3301      	adds	r3, #1
 80135c2:	d003      	beq.n	80135cc <_fwalk_sglue+0x38>
 80135c4:	4629      	mov	r1, r5
 80135c6:	4638      	mov	r0, r7
 80135c8:	47c0      	blx	r8
 80135ca:	4306      	orrs	r6, r0
 80135cc:	3568      	adds	r5, #104	@ 0x68
 80135ce:	e7e9      	b.n	80135a4 <_fwalk_sglue+0x10>

080135d0 <iprintf>:
 80135d0:	b40f      	push	{r0, r1, r2, r3}
 80135d2:	b507      	push	{r0, r1, r2, lr}
 80135d4:	4906      	ldr	r1, [pc, #24]	@ (80135f0 <iprintf+0x20>)
 80135d6:	ab04      	add	r3, sp, #16
 80135d8:	6808      	ldr	r0, [r1, #0]
 80135da:	f853 2b04 	ldr.w	r2, [r3], #4
 80135de:	6881      	ldr	r1, [r0, #8]
 80135e0:	9301      	str	r3, [sp, #4]
 80135e2:	f000 fa7d 	bl	8013ae0 <_vfiprintf_r>
 80135e6:	b003      	add	sp, #12
 80135e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80135ec:	b004      	add	sp, #16
 80135ee:	4770      	bx	lr
 80135f0:	24000040 	.word	0x24000040

080135f4 <__sread>:
 80135f4:	b510      	push	{r4, lr}
 80135f6:	460c      	mov	r4, r1
 80135f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80135fc:	f000 f8ce 	bl	801379c <_read_r>
 8013600:	2800      	cmp	r0, #0
 8013602:	bfab      	itete	ge
 8013604:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8013606:	89a3      	ldrhlt	r3, [r4, #12]
 8013608:	181b      	addge	r3, r3, r0
 801360a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801360e:	bfac      	ite	ge
 8013610:	6563      	strge	r3, [r4, #84]	@ 0x54
 8013612:	81a3      	strhlt	r3, [r4, #12]
 8013614:	bd10      	pop	{r4, pc}

08013616 <__swrite>:
 8013616:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801361a:	461f      	mov	r7, r3
 801361c:	898b      	ldrh	r3, [r1, #12]
 801361e:	05db      	lsls	r3, r3, #23
 8013620:	4605      	mov	r5, r0
 8013622:	460c      	mov	r4, r1
 8013624:	4616      	mov	r6, r2
 8013626:	d505      	bpl.n	8013634 <__swrite+0x1e>
 8013628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801362c:	2302      	movs	r3, #2
 801362e:	2200      	movs	r2, #0
 8013630:	f000 f8a2 	bl	8013778 <_lseek_r>
 8013634:	89a3      	ldrh	r3, [r4, #12]
 8013636:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801363a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801363e:	81a3      	strh	r3, [r4, #12]
 8013640:	4632      	mov	r2, r6
 8013642:	463b      	mov	r3, r7
 8013644:	4628      	mov	r0, r5
 8013646:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801364a:	f000 b8b9 	b.w	80137c0 <_write_r>

0801364e <__sseek>:
 801364e:	b510      	push	{r4, lr}
 8013650:	460c      	mov	r4, r1
 8013652:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013656:	f000 f88f 	bl	8013778 <_lseek_r>
 801365a:	1c43      	adds	r3, r0, #1
 801365c:	89a3      	ldrh	r3, [r4, #12]
 801365e:	bf15      	itete	ne
 8013660:	6560      	strne	r0, [r4, #84]	@ 0x54
 8013662:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8013666:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801366a:	81a3      	strheq	r3, [r4, #12]
 801366c:	bf18      	it	ne
 801366e:	81a3      	strhne	r3, [r4, #12]
 8013670:	bd10      	pop	{r4, pc}

08013672 <__sclose>:
 8013672:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013676:	f000 b819 	b.w	80136ac <_close_r>

0801367a <memcmp>:
 801367a:	b510      	push	{r4, lr}
 801367c:	3901      	subs	r1, #1
 801367e:	4402      	add	r2, r0
 8013680:	4290      	cmp	r0, r2
 8013682:	d101      	bne.n	8013688 <memcmp+0xe>
 8013684:	2000      	movs	r0, #0
 8013686:	e005      	b.n	8013694 <memcmp+0x1a>
 8013688:	7803      	ldrb	r3, [r0, #0]
 801368a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801368e:	42a3      	cmp	r3, r4
 8013690:	d001      	beq.n	8013696 <memcmp+0x1c>
 8013692:	1b18      	subs	r0, r3, r4
 8013694:	bd10      	pop	{r4, pc}
 8013696:	3001      	adds	r0, #1
 8013698:	e7f2      	b.n	8013680 <memcmp+0x6>

0801369a <memset>:
 801369a:	4402      	add	r2, r0
 801369c:	4603      	mov	r3, r0
 801369e:	4293      	cmp	r3, r2
 80136a0:	d100      	bne.n	80136a4 <memset+0xa>
 80136a2:	4770      	bx	lr
 80136a4:	f803 1b01 	strb.w	r1, [r3], #1
 80136a8:	e7f9      	b.n	801369e <memset+0x4>
	...

080136ac <_close_r>:
 80136ac:	b538      	push	{r3, r4, r5, lr}
 80136ae:	4d06      	ldr	r5, [pc, #24]	@ (80136c8 <_close_r+0x1c>)
 80136b0:	2300      	movs	r3, #0
 80136b2:	4604      	mov	r4, r0
 80136b4:	4608      	mov	r0, r1
 80136b6:	602b      	str	r3, [r5, #0]
 80136b8:	f7ed f990 	bl	80009dc <_close>
 80136bc:	1c43      	adds	r3, r0, #1
 80136be:	d102      	bne.n	80136c6 <_close_r+0x1a>
 80136c0:	682b      	ldr	r3, [r5, #0]
 80136c2:	b103      	cbz	r3, 80136c6 <_close_r+0x1a>
 80136c4:	6023      	str	r3, [r4, #0]
 80136c6:	bd38      	pop	{r3, r4, r5, pc}
 80136c8:	240107e8 	.word	0x240107e8

080136cc <_reclaim_reent>:
 80136cc:	4b29      	ldr	r3, [pc, #164]	@ (8013774 <_reclaim_reent+0xa8>)
 80136ce:	681b      	ldr	r3, [r3, #0]
 80136d0:	4283      	cmp	r3, r0
 80136d2:	b570      	push	{r4, r5, r6, lr}
 80136d4:	4604      	mov	r4, r0
 80136d6:	d04b      	beq.n	8013770 <_reclaim_reent+0xa4>
 80136d8:	69c3      	ldr	r3, [r0, #28]
 80136da:	b1ab      	cbz	r3, 8013708 <_reclaim_reent+0x3c>
 80136dc:	68db      	ldr	r3, [r3, #12]
 80136de:	b16b      	cbz	r3, 80136fc <_reclaim_reent+0x30>
 80136e0:	2500      	movs	r5, #0
 80136e2:	69e3      	ldr	r3, [r4, #28]
 80136e4:	68db      	ldr	r3, [r3, #12]
 80136e6:	5959      	ldr	r1, [r3, r5]
 80136e8:	2900      	cmp	r1, #0
 80136ea:	d13b      	bne.n	8013764 <_reclaim_reent+0x98>
 80136ec:	3504      	adds	r5, #4
 80136ee:	2d80      	cmp	r5, #128	@ 0x80
 80136f0:	d1f7      	bne.n	80136e2 <_reclaim_reent+0x16>
 80136f2:	69e3      	ldr	r3, [r4, #28]
 80136f4:	4620      	mov	r0, r4
 80136f6:	68d9      	ldr	r1, [r3, #12]
 80136f8:	f000 f8c8 	bl	801388c <_free_r>
 80136fc:	69e3      	ldr	r3, [r4, #28]
 80136fe:	6819      	ldr	r1, [r3, #0]
 8013700:	b111      	cbz	r1, 8013708 <_reclaim_reent+0x3c>
 8013702:	4620      	mov	r0, r4
 8013704:	f000 f8c2 	bl	801388c <_free_r>
 8013708:	6961      	ldr	r1, [r4, #20]
 801370a:	b111      	cbz	r1, 8013712 <_reclaim_reent+0x46>
 801370c:	4620      	mov	r0, r4
 801370e:	f000 f8bd 	bl	801388c <_free_r>
 8013712:	69e1      	ldr	r1, [r4, #28]
 8013714:	b111      	cbz	r1, 801371c <_reclaim_reent+0x50>
 8013716:	4620      	mov	r0, r4
 8013718:	f000 f8b8 	bl	801388c <_free_r>
 801371c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801371e:	b111      	cbz	r1, 8013726 <_reclaim_reent+0x5a>
 8013720:	4620      	mov	r0, r4
 8013722:	f000 f8b3 	bl	801388c <_free_r>
 8013726:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013728:	b111      	cbz	r1, 8013730 <_reclaim_reent+0x64>
 801372a:	4620      	mov	r0, r4
 801372c:	f000 f8ae 	bl	801388c <_free_r>
 8013730:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8013732:	b111      	cbz	r1, 801373a <_reclaim_reent+0x6e>
 8013734:	4620      	mov	r0, r4
 8013736:	f000 f8a9 	bl	801388c <_free_r>
 801373a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801373c:	b111      	cbz	r1, 8013744 <_reclaim_reent+0x78>
 801373e:	4620      	mov	r0, r4
 8013740:	f000 f8a4 	bl	801388c <_free_r>
 8013744:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8013746:	b111      	cbz	r1, 801374e <_reclaim_reent+0x82>
 8013748:	4620      	mov	r0, r4
 801374a:	f000 f89f 	bl	801388c <_free_r>
 801374e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8013750:	b111      	cbz	r1, 8013758 <_reclaim_reent+0x8c>
 8013752:	4620      	mov	r0, r4
 8013754:	f000 f89a 	bl	801388c <_free_r>
 8013758:	6a23      	ldr	r3, [r4, #32]
 801375a:	b14b      	cbz	r3, 8013770 <_reclaim_reent+0xa4>
 801375c:	4620      	mov	r0, r4
 801375e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013762:	4718      	bx	r3
 8013764:	680e      	ldr	r6, [r1, #0]
 8013766:	4620      	mov	r0, r4
 8013768:	f000 f890 	bl	801388c <_free_r>
 801376c:	4631      	mov	r1, r6
 801376e:	e7bb      	b.n	80136e8 <_reclaim_reent+0x1c>
 8013770:	bd70      	pop	{r4, r5, r6, pc}
 8013772:	bf00      	nop
 8013774:	24000040 	.word	0x24000040

08013778 <_lseek_r>:
 8013778:	b538      	push	{r3, r4, r5, lr}
 801377a:	4d07      	ldr	r5, [pc, #28]	@ (8013798 <_lseek_r+0x20>)
 801377c:	4604      	mov	r4, r0
 801377e:	4608      	mov	r0, r1
 8013780:	4611      	mov	r1, r2
 8013782:	2200      	movs	r2, #0
 8013784:	602a      	str	r2, [r5, #0]
 8013786:	461a      	mov	r2, r3
 8013788:	f7ed f94f 	bl	8000a2a <_lseek>
 801378c:	1c43      	adds	r3, r0, #1
 801378e:	d102      	bne.n	8013796 <_lseek_r+0x1e>
 8013790:	682b      	ldr	r3, [r5, #0]
 8013792:	b103      	cbz	r3, 8013796 <_lseek_r+0x1e>
 8013794:	6023      	str	r3, [r4, #0]
 8013796:	bd38      	pop	{r3, r4, r5, pc}
 8013798:	240107e8 	.word	0x240107e8

0801379c <_read_r>:
 801379c:	b538      	push	{r3, r4, r5, lr}
 801379e:	4d07      	ldr	r5, [pc, #28]	@ (80137bc <_read_r+0x20>)
 80137a0:	4604      	mov	r4, r0
 80137a2:	4608      	mov	r0, r1
 80137a4:	4611      	mov	r1, r2
 80137a6:	2200      	movs	r2, #0
 80137a8:	602a      	str	r2, [r5, #0]
 80137aa:	461a      	mov	r2, r3
 80137ac:	f7ed f8dd 	bl	800096a <_read>
 80137b0:	1c43      	adds	r3, r0, #1
 80137b2:	d102      	bne.n	80137ba <_read_r+0x1e>
 80137b4:	682b      	ldr	r3, [r5, #0]
 80137b6:	b103      	cbz	r3, 80137ba <_read_r+0x1e>
 80137b8:	6023      	str	r3, [r4, #0]
 80137ba:	bd38      	pop	{r3, r4, r5, pc}
 80137bc:	240107e8 	.word	0x240107e8

080137c0 <_write_r>:
 80137c0:	b538      	push	{r3, r4, r5, lr}
 80137c2:	4d07      	ldr	r5, [pc, #28]	@ (80137e0 <_write_r+0x20>)
 80137c4:	4604      	mov	r4, r0
 80137c6:	4608      	mov	r0, r1
 80137c8:	4611      	mov	r1, r2
 80137ca:	2200      	movs	r2, #0
 80137cc:	602a      	str	r2, [r5, #0]
 80137ce:	461a      	mov	r2, r3
 80137d0:	f7ed f8e8 	bl	80009a4 <_write>
 80137d4:	1c43      	adds	r3, r0, #1
 80137d6:	d102      	bne.n	80137de <_write_r+0x1e>
 80137d8:	682b      	ldr	r3, [r5, #0]
 80137da:	b103      	cbz	r3, 80137de <_write_r+0x1e>
 80137dc:	6023      	str	r3, [r4, #0]
 80137de:	bd38      	pop	{r3, r4, r5, pc}
 80137e0:	240107e8 	.word	0x240107e8

080137e4 <__libc_init_array>:
 80137e4:	b570      	push	{r4, r5, r6, lr}
 80137e6:	4d0d      	ldr	r5, [pc, #52]	@ (801381c <__libc_init_array+0x38>)
 80137e8:	4c0d      	ldr	r4, [pc, #52]	@ (8013820 <__libc_init_array+0x3c>)
 80137ea:	1b64      	subs	r4, r4, r5
 80137ec:	10a4      	asrs	r4, r4, #2
 80137ee:	2600      	movs	r6, #0
 80137f0:	42a6      	cmp	r6, r4
 80137f2:	d109      	bne.n	8013808 <__libc_init_array+0x24>
 80137f4:	4d0b      	ldr	r5, [pc, #44]	@ (8013824 <__libc_init_array+0x40>)
 80137f6:	4c0c      	ldr	r4, [pc, #48]	@ (8013828 <__libc_init_array+0x44>)
 80137f8:	f000 fe4a 	bl	8014490 <_init>
 80137fc:	1b64      	subs	r4, r4, r5
 80137fe:	10a4      	asrs	r4, r4, #2
 8013800:	2600      	movs	r6, #0
 8013802:	42a6      	cmp	r6, r4
 8013804:	d105      	bne.n	8013812 <__libc_init_array+0x2e>
 8013806:	bd70      	pop	{r4, r5, r6, pc}
 8013808:	f855 3b04 	ldr.w	r3, [r5], #4
 801380c:	4798      	blx	r3
 801380e:	3601      	adds	r6, #1
 8013810:	e7ee      	b.n	80137f0 <__libc_init_array+0xc>
 8013812:	f855 3b04 	ldr.w	r3, [r5], #4
 8013816:	4798      	blx	r3
 8013818:	3601      	adds	r6, #1
 801381a:	e7f2      	b.n	8013802 <__libc_init_array+0x1e>
 801381c:	0801724c 	.word	0x0801724c
 8013820:	0801724c 	.word	0x0801724c
 8013824:	0801724c 	.word	0x0801724c
 8013828:	08017250 	.word	0x08017250

0801382c <__retarget_lock_init_recursive>:
 801382c:	4770      	bx	lr

0801382e <__retarget_lock_acquire_recursive>:
 801382e:	4770      	bx	lr

08013830 <__retarget_lock_release_recursive>:
 8013830:	4770      	bx	lr

08013832 <memcpy>:
 8013832:	440a      	add	r2, r1
 8013834:	4291      	cmp	r1, r2
 8013836:	f100 33ff 	add.w	r3, r0, #4294967295
 801383a:	d100      	bne.n	801383e <memcpy+0xc>
 801383c:	4770      	bx	lr
 801383e:	b510      	push	{r4, lr}
 8013840:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013844:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013848:	4291      	cmp	r1, r2
 801384a:	d1f9      	bne.n	8013840 <memcpy+0xe>
 801384c:	bd10      	pop	{r4, pc}
	...

08013850 <__assert_func>:
 8013850:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013852:	4614      	mov	r4, r2
 8013854:	461a      	mov	r2, r3
 8013856:	4b09      	ldr	r3, [pc, #36]	@ (801387c <__assert_func+0x2c>)
 8013858:	681b      	ldr	r3, [r3, #0]
 801385a:	4605      	mov	r5, r0
 801385c:	68d8      	ldr	r0, [r3, #12]
 801385e:	b954      	cbnz	r4, 8013876 <__assert_func+0x26>
 8013860:	4b07      	ldr	r3, [pc, #28]	@ (8013880 <__assert_func+0x30>)
 8013862:	461c      	mov	r4, r3
 8013864:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013868:	9100      	str	r1, [sp, #0]
 801386a:	462b      	mov	r3, r5
 801386c:	4905      	ldr	r1, [pc, #20]	@ (8013884 <__assert_func+0x34>)
 801386e:	f000 fc89 	bl	8014184 <fiprintf>
 8013872:	f000 fd3d 	bl	80142f0 <abort>
 8013876:	4b04      	ldr	r3, [pc, #16]	@ (8013888 <__assert_func+0x38>)
 8013878:	e7f4      	b.n	8013864 <__assert_func+0x14>
 801387a:	bf00      	nop
 801387c:	24000040 	.word	0x24000040
 8013880:	08017210 	.word	0x08017210
 8013884:	080171e2 	.word	0x080171e2
 8013888:	080171d5 	.word	0x080171d5

0801388c <_free_r>:
 801388c:	b538      	push	{r3, r4, r5, lr}
 801388e:	4605      	mov	r5, r0
 8013890:	2900      	cmp	r1, #0
 8013892:	d041      	beq.n	8013918 <_free_r+0x8c>
 8013894:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013898:	1f0c      	subs	r4, r1, #4
 801389a:	2b00      	cmp	r3, #0
 801389c:	bfb8      	it	lt
 801389e:	18e4      	addlt	r4, r4, r3
 80138a0:	f000 f8e8 	bl	8013a74 <__malloc_lock>
 80138a4:	4a1d      	ldr	r2, [pc, #116]	@ (801391c <_free_r+0x90>)
 80138a6:	6813      	ldr	r3, [r2, #0]
 80138a8:	b933      	cbnz	r3, 80138b8 <_free_r+0x2c>
 80138aa:	6063      	str	r3, [r4, #4]
 80138ac:	6014      	str	r4, [r2, #0]
 80138ae:	4628      	mov	r0, r5
 80138b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80138b4:	f000 b8e4 	b.w	8013a80 <__malloc_unlock>
 80138b8:	42a3      	cmp	r3, r4
 80138ba:	d908      	bls.n	80138ce <_free_r+0x42>
 80138bc:	6820      	ldr	r0, [r4, #0]
 80138be:	1821      	adds	r1, r4, r0
 80138c0:	428b      	cmp	r3, r1
 80138c2:	bf01      	itttt	eq
 80138c4:	6819      	ldreq	r1, [r3, #0]
 80138c6:	685b      	ldreq	r3, [r3, #4]
 80138c8:	1809      	addeq	r1, r1, r0
 80138ca:	6021      	streq	r1, [r4, #0]
 80138cc:	e7ed      	b.n	80138aa <_free_r+0x1e>
 80138ce:	461a      	mov	r2, r3
 80138d0:	685b      	ldr	r3, [r3, #4]
 80138d2:	b10b      	cbz	r3, 80138d8 <_free_r+0x4c>
 80138d4:	42a3      	cmp	r3, r4
 80138d6:	d9fa      	bls.n	80138ce <_free_r+0x42>
 80138d8:	6811      	ldr	r1, [r2, #0]
 80138da:	1850      	adds	r0, r2, r1
 80138dc:	42a0      	cmp	r0, r4
 80138de:	d10b      	bne.n	80138f8 <_free_r+0x6c>
 80138e0:	6820      	ldr	r0, [r4, #0]
 80138e2:	4401      	add	r1, r0
 80138e4:	1850      	adds	r0, r2, r1
 80138e6:	4283      	cmp	r3, r0
 80138e8:	6011      	str	r1, [r2, #0]
 80138ea:	d1e0      	bne.n	80138ae <_free_r+0x22>
 80138ec:	6818      	ldr	r0, [r3, #0]
 80138ee:	685b      	ldr	r3, [r3, #4]
 80138f0:	6053      	str	r3, [r2, #4]
 80138f2:	4408      	add	r0, r1
 80138f4:	6010      	str	r0, [r2, #0]
 80138f6:	e7da      	b.n	80138ae <_free_r+0x22>
 80138f8:	d902      	bls.n	8013900 <_free_r+0x74>
 80138fa:	230c      	movs	r3, #12
 80138fc:	602b      	str	r3, [r5, #0]
 80138fe:	e7d6      	b.n	80138ae <_free_r+0x22>
 8013900:	6820      	ldr	r0, [r4, #0]
 8013902:	1821      	adds	r1, r4, r0
 8013904:	428b      	cmp	r3, r1
 8013906:	bf04      	itt	eq
 8013908:	6819      	ldreq	r1, [r3, #0]
 801390a:	685b      	ldreq	r3, [r3, #4]
 801390c:	6063      	str	r3, [r4, #4]
 801390e:	bf04      	itt	eq
 8013910:	1809      	addeq	r1, r1, r0
 8013912:	6021      	streq	r1, [r4, #0]
 8013914:	6054      	str	r4, [r2, #4]
 8013916:	e7ca      	b.n	80138ae <_free_r+0x22>
 8013918:	bd38      	pop	{r3, r4, r5, pc}
 801391a:	bf00      	nop
 801391c:	240107f4 	.word	0x240107f4

08013920 <malloc>:
 8013920:	4b02      	ldr	r3, [pc, #8]	@ (801392c <malloc+0xc>)
 8013922:	4601      	mov	r1, r0
 8013924:	6818      	ldr	r0, [r3, #0]
 8013926:	f000 b825 	b.w	8013974 <_malloc_r>
 801392a:	bf00      	nop
 801392c:	24000040 	.word	0x24000040

08013930 <sbrk_aligned>:
 8013930:	b570      	push	{r4, r5, r6, lr}
 8013932:	4e0f      	ldr	r6, [pc, #60]	@ (8013970 <sbrk_aligned+0x40>)
 8013934:	460c      	mov	r4, r1
 8013936:	6831      	ldr	r1, [r6, #0]
 8013938:	4605      	mov	r5, r0
 801393a:	b911      	cbnz	r1, 8013942 <sbrk_aligned+0x12>
 801393c:	f000 fcc8 	bl	80142d0 <_sbrk_r>
 8013940:	6030      	str	r0, [r6, #0]
 8013942:	4621      	mov	r1, r4
 8013944:	4628      	mov	r0, r5
 8013946:	f000 fcc3 	bl	80142d0 <_sbrk_r>
 801394a:	1c43      	adds	r3, r0, #1
 801394c:	d103      	bne.n	8013956 <sbrk_aligned+0x26>
 801394e:	f04f 34ff 	mov.w	r4, #4294967295
 8013952:	4620      	mov	r0, r4
 8013954:	bd70      	pop	{r4, r5, r6, pc}
 8013956:	1cc4      	adds	r4, r0, #3
 8013958:	f024 0403 	bic.w	r4, r4, #3
 801395c:	42a0      	cmp	r0, r4
 801395e:	d0f8      	beq.n	8013952 <sbrk_aligned+0x22>
 8013960:	1a21      	subs	r1, r4, r0
 8013962:	4628      	mov	r0, r5
 8013964:	f000 fcb4 	bl	80142d0 <_sbrk_r>
 8013968:	3001      	adds	r0, #1
 801396a:	d1f2      	bne.n	8013952 <sbrk_aligned+0x22>
 801396c:	e7ef      	b.n	801394e <sbrk_aligned+0x1e>
 801396e:	bf00      	nop
 8013970:	240107f0 	.word	0x240107f0

08013974 <_malloc_r>:
 8013974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013978:	1ccd      	adds	r5, r1, #3
 801397a:	f025 0503 	bic.w	r5, r5, #3
 801397e:	3508      	adds	r5, #8
 8013980:	2d0c      	cmp	r5, #12
 8013982:	bf38      	it	cc
 8013984:	250c      	movcc	r5, #12
 8013986:	2d00      	cmp	r5, #0
 8013988:	4606      	mov	r6, r0
 801398a:	db01      	blt.n	8013990 <_malloc_r+0x1c>
 801398c:	42a9      	cmp	r1, r5
 801398e:	d904      	bls.n	801399a <_malloc_r+0x26>
 8013990:	230c      	movs	r3, #12
 8013992:	6033      	str	r3, [r6, #0]
 8013994:	2000      	movs	r0, #0
 8013996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801399a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013a70 <_malloc_r+0xfc>
 801399e:	f000 f869 	bl	8013a74 <__malloc_lock>
 80139a2:	f8d8 3000 	ldr.w	r3, [r8]
 80139a6:	461c      	mov	r4, r3
 80139a8:	bb44      	cbnz	r4, 80139fc <_malloc_r+0x88>
 80139aa:	4629      	mov	r1, r5
 80139ac:	4630      	mov	r0, r6
 80139ae:	f7ff ffbf 	bl	8013930 <sbrk_aligned>
 80139b2:	1c43      	adds	r3, r0, #1
 80139b4:	4604      	mov	r4, r0
 80139b6:	d158      	bne.n	8013a6a <_malloc_r+0xf6>
 80139b8:	f8d8 4000 	ldr.w	r4, [r8]
 80139bc:	4627      	mov	r7, r4
 80139be:	2f00      	cmp	r7, #0
 80139c0:	d143      	bne.n	8013a4a <_malloc_r+0xd6>
 80139c2:	2c00      	cmp	r4, #0
 80139c4:	d04b      	beq.n	8013a5e <_malloc_r+0xea>
 80139c6:	6823      	ldr	r3, [r4, #0]
 80139c8:	4639      	mov	r1, r7
 80139ca:	4630      	mov	r0, r6
 80139cc:	eb04 0903 	add.w	r9, r4, r3
 80139d0:	f000 fc7e 	bl	80142d0 <_sbrk_r>
 80139d4:	4581      	cmp	r9, r0
 80139d6:	d142      	bne.n	8013a5e <_malloc_r+0xea>
 80139d8:	6821      	ldr	r1, [r4, #0]
 80139da:	1a6d      	subs	r5, r5, r1
 80139dc:	4629      	mov	r1, r5
 80139de:	4630      	mov	r0, r6
 80139e0:	f7ff ffa6 	bl	8013930 <sbrk_aligned>
 80139e4:	3001      	adds	r0, #1
 80139e6:	d03a      	beq.n	8013a5e <_malloc_r+0xea>
 80139e8:	6823      	ldr	r3, [r4, #0]
 80139ea:	442b      	add	r3, r5
 80139ec:	6023      	str	r3, [r4, #0]
 80139ee:	f8d8 3000 	ldr.w	r3, [r8]
 80139f2:	685a      	ldr	r2, [r3, #4]
 80139f4:	bb62      	cbnz	r2, 8013a50 <_malloc_r+0xdc>
 80139f6:	f8c8 7000 	str.w	r7, [r8]
 80139fa:	e00f      	b.n	8013a1c <_malloc_r+0xa8>
 80139fc:	6822      	ldr	r2, [r4, #0]
 80139fe:	1b52      	subs	r2, r2, r5
 8013a00:	d420      	bmi.n	8013a44 <_malloc_r+0xd0>
 8013a02:	2a0b      	cmp	r2, #11
 8013a04:	d917      	bls.n	8013a36 <_malloc_r+0xc2>
 8013a06:	1961      	adds	r1, r4, r5
 8013a08:	42a3      	cmp	r3, r4
 8013a0a:	6025      	str	r5, [r4, #0]
 8013a0c:	bf18      	it	ne
 8013a0e:	6059      	strne	r1, [r3, #4]
 8013a10:	6863      	ldr	r3, [r4, #4]
 8013a12:	bf08      	it	eq
 8013a14:	f8c8 1000 	streq.w	r1, [r8]
 8013a18:	5162      	str	r2, [r4, r5]
 8013a1a:	604b      	str	r3, [r1, #4]
 8013a1c:	4630      	mov	r0, r6
 8013a1e:	f000 f82f 	bl	8013a80 <__malloc_unlock>
 8013a22:	f104 000b 	add.w	r0, r4, #11
 8013a26:	1d23      	adds	r3, r4, #4
 8013a28:	f020 0007 	bic.w	r0, r0, #7
 8013a2c:	1ac2      	subs	r2, r0, r3
 8013a2e:	bf1c      	itt	ne
 8013a30:	1a1b      	subne	r3, r3, r0
 8013a32:	50a3      	strne	r3, [r4, r2]
 8013a34:	e7af      	b.n	8013996 <_malloc_r+0x22>
 8013a36:	6862      	ldr	r2, [r4, #4]
 8013a38:	42a3      	cmp	r3, r4
 8013a3a:	bf0c      	ite	eq
 8013a3c:	f8c8 2000 	streq.w	r2, [r8]
 8013a40:	605a      	strne	r2, [r3, #4]
 8013a42:	e7eb      	b.n	8013a1c <_malloc_r+0xa8>
 8013a44:	4623      	mov	r3, r4
 8013a46:	6864      	ldr	r4, [r4, #4]
 8013a48:	e7ae      	b.n	80139a8 <_malloc_r+0x34>
 8013a4a:	463c      	mov	r4, r7
 8013a4c:	687f      	ldr	r7, [r7, #4]
 8013a4e:	e7b6      	b.n	80139be <_malloc_r+0x4a>
 8013a50:	461a      	mov	r2, r3
 8013a52:	685b      	ldr	r3, [r3, #4]
 8013a54:	42a3      	cmp	r3, r4
 8013a56:	d1fb      	bne.n	8013a50 <_malloc_r+0xdc>
 8013a58:	2300      	movs	r3, #0
 8013a5a:	6053      	str	r3, [r2, #4]
 8013a5c:	e7de      	b.n	8013a1c <_malloc_r+0xa8>
 8013a5e:	230c      	movs	r3, #12
 8013a60:	6033      	str	r3, [r6, #0]
 8013a62:	4630      	mov	r0, r6
 8013a64:	f000 f80c 	bl	8013a80 <__malloc_unlock>
 8013a68:	e794      	b.n	8013994 <_malloc_r+0x20>
 8013a6a:	6005      	str	r5, [r0, #0]
 8013a6c:	e7d6      	b.n	8013a1c <_malloc_r+0xa8>
 8013a6e:	bf00      	nop
 8013a70:	240107f4 	.word	0x240107f4

08013a74 <__malloc_lock>:
 8013a74:	4801      	ldr	r0, [pc, #4]	@ (8013a7c <__malloc_lock+0x8>)
 8013a76:	f7ff beda 	b.w	801382e <__retarget_lock_acquire_recursive>
 8013a7a:	bf00      	nop
 8013a7c:	240107ec 	.word	0x240107ec

08013a80 <__malloc_unlock>:
 8013a80:	4801      	ldr	r0, [pc, #4]	@ (8013a88 <__malloc_unlock+0x8>)
 8013a82:	f7ff bed5 	b.w	8013830 <__retarget_lock_release_recursive>
 8013a86:	bf00      	nop
 8013a88:	240107ec 	.word	0x240107ec

08013a8c <__sfputc_r>:
 8013a8c:	6893      	ldr	r3, [r2, #8]
 8013a8e:	3b01      	subs	r3, #1
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	b410      	push	{r4}
 8013a94:	6093      	str	r3, [r2, #8]
 8013a96:	da08      	bge.n	8013aaa <__sfputc_r+0x1e>
 8013a98:	6994      	ldr	r4, [r2, #24]
 8013a9a:	42a3      	cmp	r3, r4
 8013a9c:	db01      	blt.n	8013aa2 <__sfputc_r+0x16>
 8013a9e:	290a      	cmp	r1, #10
 8013aa0:	d103      	bne.n	8013aaa <__sfputc_r+0x1e>
 8013aa2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013aa6:	f000 bb7f 	b.w	80141a8 <__swbuf_r>
 8013aaa:	6813      	ldr	r3, [r2, #0]
 8013aac:	1c58      	adds	r0, r3, #1
 8013aae:	6010      	str	r0, [r2, #0]
 8013ab0:	7019      	strb	r1, [r3, #0]
 8013ab2:	4608      	mov	r0, r1
 8013ab4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013ab8:	4770      	bx	lr

08013aba <__sfputs_r>:
 8013aba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013abc:	4606      	mov	r6, r0
 8013abe:	460f      	mov	r7, r1
 8013ac0:	4614      	mov	r4, r2
 8013ac2:	18d5      	adds	r5, r2, r3
 8013ac4:	42ac      	cmp	r4, r5
 8013ac6:	d101      	bne.n	8013acc <__sfputs_r+0x12>
 8013ac8:	2000      	movs	r0, #0
 8013aca:	e007      	b.n	8013adc <__sfputs_r+0x22>
 8013acc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013ad0:	463a      	mov	r2, r7
 8013ad2:	4630      	mov	r0, r6
 8013ad4:	f7ff ffda 	bl	8013a8c <__sfputc_r>
 8013ad8:	1c43      	adds	r3, r0, #1
 8013ada:	d1f3      	bne.n	8013ac4 <__sfputs_r+0xa>
 8013adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013ae0 <_vfiprintf_r>:
 8013ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ae4:	460d      	mov	r5, r1
 8013ae6:	b09d      	sub	sp, #116	@ 0x74
 8013ae8:	4614      	mov	r4, r2
 8013aea:	4698      	mov	r8, r3
 8013aec:	4606      	mov	r6, r0
 8013aee:	b118      	cbz	r0, 8013af8 <_vfiprintf_r+0x18>
 8013af0:	6a03      	ldr	r3, [r0, #32]
 8013af2:	b90b      	cbnz	r3, 8013af8 <_vfiprintf_r+0x18>
 8013af4:	f7ff fd36 	bl	8013564 <__sinit>
 8013af8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013afa:	07d9      	lsls	r1, r3, #31
 8013afc:	d405      	bmi.n	8013b0a <_vfiprintf_r+0x2a>
 8013afe:	89ab      	ldrh	r3, [r5, #12]
 8013b00:	059a      	lsls	r2, r3, #22
 8013b02:	d402      	bmi.n	8013b0a <_vfiprintf_r+0x2a>
 8013b04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013b06:	f7ff fe92 	bl	801382e <__retarget_lock_acquire_recursive>
 8013b0a:	89ab      	ldrh	r3, [r5, #12]
 8013b0c:	071b      	lsls	r3, r3, #28
 8013b0e:	d501      	bpl.n	8013b14 <_vfiprintf_r+0x34>
 8013b10:	692b      	ldr	r3, [r5, #16]
 8013b12:	b99b      	cbnz	r3, 8013b3c <_vfiprintf_r+0x5c>
 8013b14:	4629      	mov	r1, r5
 8013b16:	4630      	mov	r0, r6
 8013b18:	f000 fb84 	bl	8014224 <__swsetup_r>
 8013b1c:	b170      	cbz	r0, 8013b3c <_vfiprintf_r+0x5c>
 8013b1e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013b20:	07dc      	lsls	r4, r3, #31
 8013b22:	d504      	bpl.n	8013b2e <_vfiprintf_r+0x4e>
 8013b24:	f04f 30ff 	mov.w	r0, #4294967295
 8013b28:	b01d      	add	sp, #116	@ 0x74
 8013b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b2e:	89ab      	ldrh	r3, [r5, #12]
 8013b30:	0598      	lsls	r0, r3, #22
 8013b32:	d4f7      	bmi.n	8013b24 <_vfiprintf_r+0x44>
 8013b34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013b36:	f7ff fe7b 	bl	8013830 <__retarget_lock_release_recursive>
 8013b3a:	e7f3      	b.n	8013b24 <_vfiprintf_r+0x44>
 8013b3c:	2300      	movs	r3, #0
 8013b3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8013b40:	2320      	movs	r3, #32
 8013b42:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013b46:	f8cd 800c 	str.w	r8, [sp, #12]
 8013b4a:	2330      	movs	r3, #48	@ 0x30
 8013b4c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013cfc <_vfiprintf_r+0x21c>
 8013b50:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013b54:	f04f 0901 	mov.w	r9, #1
 8013b58:	4623      	mov	r3, r4
 8013b5a:	469a      	mov	sl, r3
 8013b5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013b60:	b10a      	cbz	r2, 8013b66 <_vfiprintf_r+0x86>
 8013b62:	2a25      	cmp	r2, #37	@ 0x25
 8013b64:	d1f9      	bne.n	8013b5a <_vfiprintf_r+0x7a>
 8013b66:	ebba 0b04 	subs.w	fp, sl, r4
 8013b6a:	d00b      	beq.n	8013b84 <_vfiprintf_r+0xa4>
 8013b6c:	465b      	mov	r3, fp
 8013b6e:	4622      	mov	r2, r4
 8013b70:	4629      	mov	r1, r5
 8013b72:	4630      	mov	r0, r6
 8013b74:	f7ff ffa1 	bl	8013aba <__sfputs_r>
 8013b78:	3001      	adds	r0, #1
 8013b7a:	f000 80a7 	beq.w	8013ccc <_vfiprintf_r+0x1ec>
 8013b7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013b80:	445a      	add	r2, fp
 8013b82:	9209      	str	r2, [sp, #36]	@ 0x24
 8013b84:	f89a 3000 	ldrb.w	r3, [sl]
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	f000 809f 	beq.w	8013ccc <_vfiprintf_r+0x1ec>
 8013b8e:	2300      	movs	r3, #0
 8013b90:	f04f 32ff 	mov.w	r2, #4294967295
 8013b94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013b98:	f10a 0a01 	add.w	sl, sl, #1
 8013b9c:	9304      	str	r3, [sp, #16]
 8013b9e:	9307      	str	r3, [sp, #28]
 8013ba0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013ba4:	931a      	str	r3, [sp, #104]	@ 0x68
 8013ba6:	4654      	mov	r4, sl
 8013ba8:	2205      	movs	r2, #5
 8013baa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013bae:	4853      	ldr	r0, [pc, #332]	@ (8013cfc <_vfiprintf_r+0x21c>)
 8013bb0:	f7ec fbae 	bl	8000310 <memchr>
 8013bb4:	9a04      	ldr	r2, [sp, #16]
 8013bb6:	b9d8      	cbnz	r0, 8013bf0 <_vfiprintf_r+0x110>
 8013bb8:	06d1      	lsls	r1, r2, #27
 8013bba:	bf44      	itt	mi
 8013bbc:	2320      	movmi	r3, #32
 8013bbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013bc2:	0713      	lsls	r3, r2, #28
 8013bc4:	bf44      	itt	mi
 8013bc6:	232b      	movmi	r3, #43	@ 0x2b
 8013bc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013bcc:	f89a 3000 	ldrb.w	r3, [sl]
 8013bd0:	2b2a      	cmp	r3, #42	@ 0x2a
 8013bd2:	d015      	beq.n	8013c00 <_vfiprintf_r+0x120>
 8013bd4:	9a07      	ldr	r2, [sp, #28]
 8013bd6:	4654      	mov	r4, sl
 8013bd8:	2000      	movs	r0, #0
 8013bda:	f04f 0c0a 	mov.w	ip, #10
 8013bde:	4621      	mov	r1, r4
 8013be0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013be4:	3b30      	subs	r3, #48	@ 0x30
 8013be6:	2b09      	cmp	r3, #9
 8013be8:	d94b      	bls.n	8013c82 <_vfiprintf_r+0x1a2>
 8013bea:	b1b0      	cbz	r0, 8013c1a <_vfiprintf_r+0x13a>
 8013bec:	9207      	str	r2, [sp, #28]
 8013bee:	e014      	b.n	8013c1a <_vfiprintf_r+0x13a>
 8013bf0:	eba0 0308 	sub.w	r3, r0, r8
 8013bf4:	fa09 f303 	lsl.w	r3, r9, r3
 8013bf8:	4313      	orrs	r3, r2
 8013bfa:	9304      	str	r3, [sp, #16]
 8013bfc:	46a2      	mov	sl, r4
 8013bfe:	e7d2      	b.n	8013ba6 <_vfiprintf_r+0xc6>
 8013c00:	9b03      	ldr	r3, [sp, #12]
 8013c02:	1d19      	adds	r1, r3, #4
 8013c04:	681b      	ldr	r3, [r3, #0]
 8013c06:	9103      	str	r1, [sp, #12]
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	bfbb      	ittet	lt
 8013c0c:	425b      	neglt	r3, r3
 8013c0e:	f042 0202 	orrlt.w	r2, r2, #2
 8013c12:	9307      	strge	r3, [sp, #28]
 8013c14:	9307      	strlt	r3, [sp, #28]
 8013c16:	bfb8      	it	lt
 8013c18:	9204      	strlt	r2, [sp, #16]
 8013c1a:	7823      	ldrb	r3, [r4, #0]
 8013c1c:	2b2e      	cmp	r3, #46	@ 0x2e
 8013c1e:	d10a      	bne.n	8013c36 <_vfiprintf_r+0x156>
 8013c20:	7863      	ldrb	r3, [r4, #1]
 8013c22:	2b2a      	cmp	r3, #42	@ 0x2a
 8013c24:	d132      	bne.n	8013c8c <_vfiprintf_r+0x1ac>
 8013c26:	9b03      	ldr	r3, [sp, #12]
 8013c28:	1d1a      	adds	r2, r3, #4
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	9203      	str	r2, [sp, #12]
 8013c2e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013c32:	3402      	adds	r4, #2
 8013c34:	9305      	str	r3, [sp, #20]
 8013c36:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013d0c <_vfiprintf_r+0x22c>
 8013c3a:	7821      	ldrb	r1, [r4, #0]
 8013c3c:	2203      	movs	r2, #3
 8013c3e:	4650      	mov	r0, sl
 8013c40:	f7ec fb66 	bl	8000310 <memchr>
 8013c44:	b138      	cbz	r0, 8013c56 <_vfiprintf_r+0x176>
 8013c46:	9b04      	ldr	r3, [sp, #16]
 8013c48:	eba0 000a 	sub.w	r0, r0, sl
 8013c4c:	2240      	movs	r2, #64	@ 0x40
 8013c4e:	4082      	lsls	r2, r0
 8013c50:	4313      	orrs	r3, r2
 8013c52:	3401      	adds	r4, #1
 8013c54:	9304      	str	r3, [sp, #16]
 8013c56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c5a:	4829      	ldr	r0, [pc, #164]	@ (8013d00 <_vfiprintf_r+0x220>)
 8013c5c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013c60:	2206      	movs	r2, #6
 8013c62:	f7ec fb55 	bl	8000310 <memchr>
 8013c66:	2800      	cmp	r0, #0
 8013c68:	d03f      	beq.n	8013cea <_vfiprintf_r+0x20a>
 8013c6a:	4b26      	ldr	r3, [pc, #152]	@ (8013d04 <_vfiprintf_r+0x224>)
 8013c6c:	bb1b      	cbnz	r3, 8013cb6 <_vfiprintf_r+0x1d6>
 8013c6e:	9b03      	ldr	r3, [sp, #12]
 8013c70:	3307      	adds	r3, #7
 8013c72:	f023 0307 	bic.w	r3, r3, #7
 8013c76:	3308      	adds	r3, #8
 8013c78:	9303      	str	r3, [sp, #12]
 8013c7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013c7c:	443b      	add	r3, r7
 8013c7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8013c80:	e76a      	b.n	8013b58 <_vfiprintf_r+0x78>
 8013c82:	fb0c 3202 	mla	r2, ip, r2, r3
 8013c86:	460c      	mov	r4, r1
 8013c88:	2001      	movs	r0, #1
 8013c8a:	e7a8      	b.n	8013bde <_vfiprintf_r+0xfe>
 8013c8c:	2300      	movs	r3, #0
 8013c8e:	3401      	adds	r4, #1
 8013c90:	9305      	str	r3, [sp, #20]
 8013c92:	4619      	mov	r1, r3
 8013c94:	f04f 0c0a 	mov.w	ip, #10
 8013c98:	4620      	mov	r0, r4
 8013c9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013c9e:	3a30      	subs	r2, #48	@ 0x30
 8013ca0:	2a09      	cmp	r2, #9
 8013ca2:	d903      	bls.n	8013cac <_vfiprintf_r+0x1cc>
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d0c6      	beq.n	8013c36 <_vfiprintf_r+0x156>
 8013ca8:	9105      	str	r1, [sp, #20]
 8013caa:	e7c4      	b.n	8013c36 <_vfiprintf_r+0x156>
 8013cac:	fb0c 2101 	mla	r1, ip, r1, r2
 8013cb0:	4604      	mov	r4, r0
 8013cb2:	2301      	movs	r3, #1
 8013cb4:	e7f0      	b.n	8013c98 <_vfiprintf_r+0x1b8>
 8013cb6:	ab03      	add	r3, sp, #12
 8013cb8:	9300      	str	r3, [sp, #0]
 8013cba:	462a      	mov	r2, r5
 8013cbc:	4b12      	ldr	r3, [pc, #72]	@ (8013d08 <_vfiprintf_r+0x228>)
 8013cbe:	a904      	add	r1, sp, #16
 8013cc0:	4630      	mov	r0, r6
 8013cc2:	f3af 8000 	nop.w
 8013cc6:	4607      	mov	r7, r0
 8013cc8:	1c78      	adds	r0, r7, #1
 8013cca:	d1d6      	bne.n	8013c7a <_vfiprintf_r+0x19a>
 8013ccc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013cce:	07d9      	lsls	r1, r3, #31
 8013cd0:	d405      	bmi.n	8013cde <_vfiprintf_r+0x1fe>
 8013cd2:	89ab      	ldrh	r3, [r5, #12]
 8013cd4:	059a      	lsls	r2, r3, #22
 8013cd6:	d402      	bmi.n	8013cde <_vfiprintf_r+0x1fe>
 8013cd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013cda:	f7ff fda9 	bl	8013830 <__retarget_lock_release_recursive>
 8013cde:	89ab      	ldrh	r3, [r5, #12]
 8013ce0:	065b      	lsls	r3, r3, #25
 8013ce2:	f53f af1f 	bmi.w	8013b24 <_vfiprintf_r+0x44>
 8013ce6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013ce8:	e71e      	b.n	8013b28 <_vfiprintf_r+0x48>
 8013cea:	ab03      	add	r3, sp, #12
 8013cec:	9300      	str	r3, [sp, #0]
 8013cee:	462a      	mov	r2, r5
 8013cf0:	4b05      	ldr	r3, [pc, #20]	@ (8013d08 <_vfiprintf_r+0x228>)
 8013cf2:	a904      	add	r1, sp, #16
 8013cf4:	4630      	mov	r0, r6
 8013cf6:	f000 f879 	bl	8013dec <_printf_i>
 8013cfa:	e7e4      	b.n	8013cc6 <_vfiprintf_r+0x1e6>
 8013cfc:	08017211 	.word	0x08017211
 8013d00:	0801721b 	.word	0x0801721b
 8013d04:	00000000 	.word	0x00000000
 8013d08:	08013abb 	.word	0x08013abb
 8013d0c:	08017217 	.word	0x08017217

08013d10 <_printf_common>:
 8013d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d14:	4616      	mov	r6, r2
 8013d16:	4698      	mov	r8, r3
 8013d18:	688a      	ldr	r2, [r1, #8]
 8013d1a:	690b      	ldr	r3, [r1, #16]
 8013d1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013d20:	4293      	cmp	r3, r2
 8013d22:	bfb8      	it	lt
 8013d24:	4613      	movlt	r3, r2
 8013d26:	6033      	str	r3, [r6, #0]
 8013d28:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013d2c:	4607      	mov	r7, r0
 8013d2e:	460c      	mov	r4, r1
 8013d30:	b10a      	cbz	r2, 8013d36 <_printf_common+0x26>
 8013d32:	3301      	adds	r3, #1
 8013d34:	6033      	str	r3, [r6, #0]
 8013d36:	6823      	ldr	r3, [r4, #0]
 8013d38:	0699      	lsls	r1, r3, #26
 8013d3a:	bf42      	ittt	mi
 8013d3c:	6833      	ldrmi	r3, [r6, #0]
 8013d3e:	3302      	addmi	r3, #2
 8013d40:	6033      	strmi	r3, [r6, #0]
 8013d42:	6825      	ldr	r5, [r4, #0]
 8013d44:	f015 0506 	ands.w	r5, r5, #6
 8013d48:	d106      	bne.n	8013d58 <_printf_common+0x48>
 8013d4a:	f104 0a19 	add.w	sl, r4, #25
 8013d4e:	68e3      	ldr	r3, [r4, #12]
 8013d50:	6832      	ldr	r2, [r6, #0]
 8013d52:	1a9b      	subs	r3, r3, r2
 8013d54:	42ab      	cmp	r3, r5
 8013d56:	dc26      	bgt.n	8013da6 <_printf_common+0x96>
 8013d58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013d5c:	6822      	ldr	r2, [r4, #0]
 8013d5e:	3b00      	subs	r3, #0
 8013d60:	bf18      	it	ne
 8013d62:	2301      	movne	r3, #1
 8013d64:	0692      	lsls	r2, r2, #26
 8013d66:	d42b      	bmi.n	8013dc0 <_printf_common+0xb0>
 8013d68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013d6c:	4641      	mov	r1, r8
 8013d6e:	4638      	mov	r0, r7
 8013d70:	47c8      	blx	r9
 8013d72:	3001      	adds	r0, #1
 8013d74:	d01e      	beq.n	8013db4 <_printf_common+0xa4>
 8013d76:	6823      	ldr	r3, [r4, #0]
 8013d78:	6922      	ldr	r2, [r4, #16]
 8013d7a:	f003 0306 	and.w	r3, r3, #6
 8013d7e:	2b04      	cmp	r3, #4
 8013d80:	bf02      	ittt	eq
 8013d82:	68e5      	ldreq	r5, [r4, #12]
 8013d84:	6833      	ldreq	r3, [r6, #0]
 8013d86:	1aed      	subeq	r5, r5, r3
 8013d88:	68a3      	ldr	r3, [r4, #8]
 8013d8a:	bf0c      	ite	eq
 8013d8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013d90:	2500      	movne	r5, #0
 8013d92:	4293      	cmp	r3, r2
 8013d94:	bfc4      	itt	gt
 8013d96:	1a9b      	subgt	r3, r3, r2
 8013d98:	18ed      	addgt	r5, r5, r3
 8013d9a:	2600      	movs	r6, #0
 8013d9c:	341a      	adds	r4, #26
 8013d9e:	42b5      	cmp	r5, r6
 8013da0:	d11a      	bne.n	8013dd8 <_printf_common+0xc8>
 8013da2:	2000      	movs	r0, #0
 8013da4:	e008      	b.n	8013db8 <_printf_common+0xa8>
 8013da6:	2301      	movs	r3, #1
 8013da8:	4652      	mov	r2, sl
 8013daa:	4641      	mov	r1, r8
 8013dac:	4638      	mov	r0, r7
 8013dae:	47c8      	blx	r9
 8013db0:	3001      	adds	r0, #1
 8013db2:	d103      	bne.n	8013dbc <_printf_common+0xac>
 8013db4:	f04f 30ff 	mov.w	r0, #4294967295
 8013db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013dbc:	3501      	adds	r5, #1
 8013dbe:	e7c6      	b.n	8013d4e <_printf_common+0x3e>
 8013dc0:	18e1      	adds	r1, r4, r3
 8013dc2:	1c5a      	adds	r2, r3, #1
 8013dc4:	2030      	movs	r0, #48	@ 0x30
 8013dc6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013dca:	4422      	add	r2, r4
 8013dcc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013dd0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013dd4:	3302      	adds	r3, #2
 8013dd6:	e7c7      	b.n	8013d68 <_printf_common+0x58>
 8013dd8:	2301      	movs	r3, #1
 8013dda:	4622      	mov	r2, r4
 8013ddc:	4641      	mov	r1, r8
 8013dde:	4638      	mov	r0, r7
 8013de0:	47c8      	blx	r9
 8013de2:	3001      	adds	r0, #1
 8013de4:	d0e6      	beq.n	8013db4 <_printf_common+0xa4>
 8013de6:	3601      	adds	r6, #1
 8013de8:	e7d9      	b.n	8013d9e <_printf_common+0x8e>
	...

08013dec <_printf_i>:
 8013dec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013df0:	7e0f      	ldrb	r7, [r1, #24]
 8013df2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013df4:	2f78      	cmp	r7, #120	@ 0x78
 8013df6:	4691      	mov	r9, r2
 8013df8:	4680      	mov	r8, r0
 8013dfa:	460c      	mov	r4, r1
 8013dfc:	469a      	mov	sl, r3
 8013dfe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8013e02:	d807      	bhi.n	8013e14 <_printf_i+0x28>
 8013e04:	2f62      	cmp	r7, #98	@ 0x62
 8013e06:	d80a      	bhi.n	8013e1e <_printf_i+0x32>
 8013e08:	2f00      	cmp	r7, #0
 8013e0a:	f000 80d2 	beq.w	8013fb2 <_printf_i+0x1c6>
 8013e0e:	2f58      	cmp	r7, #88	@ 0x58
 8013e10:	f000 80b9 	beq.w	8013f86 <_printf_i+0x19a>
 8013e14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013e18:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013e1c:	e03a      	b.n	8013e94 <_printf_i+0xa8>
 8013e1e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8013e22:	2b15      	cmp	r3, #21
 8013e24:	d8f6      	bhi.n	8013e14 <_printf_i+0x28>
 8013e26:	a101      	add	r1, pc, #4	@ (adr r1, 8013e2c <_printf_i+0x40>)
 8013e28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013e2c:	08013e85 	.word	0x08013e85
 8013e30:	08013e99 	.word	0x08013e99
 8013e34:	08013e15 	.word	0x08013e15
 8013e38:	08013e15 	.word	0x08013e15
 8013e3c:	08013e15 	.word	0x08013e15
 8013e40:	08013e15 	.word	0x08013e15
 8013e44:	08013e99 	.word	0x08013e99
 8013e48:	08013e15 	.word	0x08013e15
 8013e4c:	08013e15 	.word	0x08013e15
 8013e50:	08013e15 	.word	0x08013e15
 8013e54:	08013e15 	.word	0x08013e15
 8013e58:	08013f99 	.word	0x08013f99
 8013e5c:	08013ec3 	.word	0x08013ec3
 8013e60:	08013f53 	.word	0x08013f53
 8013e64:	08013e15 	.word	0x08013e15
 8013e68:	08013e15 	.word	0x08013e15
 8013e6c:	08013fbb 	.word	0x08013fbb
 8013e70:	08013e15 	.word	0x08013e15
 8013e74:	08013ec3 	.word	0x08013ec3
 8013e78:	08013e15 	.word	0x08013e15
 8013e7c:	08013e15 	.word	0x08013e15
 8013e80:	08013f5b 	.word	0x08013f5b
 8013e84:	6833      	ldr	r3, [r6, #0]
 8013e86:	1d1a      	adds	r2, r3, #4
 8013e88:	681b      	ldr	r3, [r3, #0]
 8013e8a:	6032      	str	r2, [r6, #0]
 8013e8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013e90:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013e94:	2301      	movs	r3, #1
 8013e96:	e09d      	b.n	8013fd4 <_printf_i+0x1e8>
 8013e98:	6833      	ldr	r3, [r6, #0]
 8013e9a:	6820      	ldr	r0, [r4, #0]
 8013e9c:	1d19      	adds	r1, r3, #4
 8013e9e:	6031      	str	r1, [r6, #0]
 8013ea0:	0606      	lsls	r6, r0, #24
 8013ea2:	d501      	bpl.n	8013ea8 <_printf_i+0xbc>
 8013ea4:	681d      	ldr	r5, [r3, #0]
 8013ea6:	e003      	b.n	8013eb0 <_printf_i+0xc4>
 8013ea8:	0645      	lsls	r5, r0, #25
 8013eaa:	d5fb      	bpl.n	8013ea4 <_printf_i+0xb8>
 8013eac:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013eb0:	2d00      	cmp	r5, #0
 8013eb2:	da03      	bge.n	8013ebc <_printf_i+0xd0>
 8013eb4:	232d      	movs	r3, #45	@ 0x2d
 8013eb6:	426d      	negs	r5, r5
 8013eb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013ebc:	4859      	ldr	r0, [pc, #356]	@ (8014024 <_printf_i+0x238>)
 8013ebe:	230a      	movs	r3, #10
 8013ec0:	e011      	b.n	8013ee6 <_printf_i+0xfa>
 8013ec2:	6821      	ldr	r1, [r4, #0]
 8013ec4:	6833      	ldr	r3, [r6, #0]
 8013ec6:	0608      	lsls	r0, r1, #24
 8013ec8:	f853 5b04 	ldr.w	r5, [r3], #4
 8013ecc:	d402      	bmi.n	8013ed4 <_printf_i+0xe8>
 8013ece:	0649      	lsls	r1, r1, #25
 8013ed0:	bf48      	it	mi
 8013ed2:	b2ad      	uxthmi	r5, r5
 8013ed4:	2f6f      	cmp	r7, #111	@ 0x6f
 8013ed6:	4853      	ldr	r0, [pc, #332]	@ (8014024 <_printf_i+0x238>)
 8013ed8:	6033      	str	r3, [r6, #0]
 8013eda:	bf14      	ite	ne
 8013edc:	230a      	movne	r3, #10
 8013ede:	2308      	moveq	r3, #8
 8013ee0:	2100      	movs	r1, #0
 8013ee2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013ee6:	6866      	ldr	r6, [r4, #4]
 8013ee8:	60a6      	str	r6, [r4, #8]
 8013eea:	2e00      	cmp	r6, #0
 8013eec:	bfa2      	ittt	ge
 8013eee:	6821      	ldrge	r1, [r4, #0]
 8013ef0:	f021 0104 	bicge.w	r1, r1, #4
 8013ef4:	6021      	strge	r1, [r4, #0]
 8013ef6:	b90d      	cbnz	r5, 8013efc <_printf_i+0x110>
 8013ef8:	2e00      	cmp	r6, #0
 8013efa:	d04b      	beq.n	8013f94 <_printf_i+0x1a8>
 8013efc:	4616      	mov	r6, r2
 8013efe:	fbb5 f1f3 	udiv	r1, r5, r3
 8013f02:	fb03 5711 	mls	r7, r3, r1, r5
 8013f06:	5dc7      	ldrb	r7, [r0, r7]
 8013f08:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013f0c:	462f      	mov	r7, r5
 8013f0e:	42bb      	cmp	r3, r7
 8013f10:	460d      	mov	r5, r1
 8013f12:	d9f4      	bls.n	8013efe <_printf_i+0x112>
 8013f14:	2b08      	cmp	r3, #8
 8013f16:	d10b      	bne.n	8013f30 <_printf_i+0x144>
 8013f18:	6823      	ldr	r3, [r4, #0]
 8013f1a:	07df      	lsls	r7, r3, #31
 8013f1c:	d508      	bpl.n	8013f30 <_printf_i+0x144>
 8013f1e:	6923      	ldr	r3, [r4, #16]
 8013f20:	6861      	ldr	r1, [r4, #4]
 8013f22:	4299      	cmp	r1, r3
 8013f24:	bfde      	ittt	le
 8013f26:	2330      	movle	r3, #48	@ 0x30
 8013f28:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013f2c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013f30:	1b92      	subs	r2, r2, r6
 8013f32:	6122      	str	r2, [r4, #16]
 8013f34:	f8cd a000 	str.w	sl, [sp]
 8013f38:	464b      	mov	r3, r9
 8013f3a:	aa03      	add	r2, sp, #12
 8013f3c:	4621      	mov	r1, r4
 8013f3e:	4640      	mov	r0, r8
 8013f40:	f7ff fee6 	bl	8013d10 <_printf_common>
 8013f44:	3001      	adds	r0, #1
 8013f46:	d14a      	bne.n	8013fde <_printf_i+0x1f2>
 8013f48:	f04f 30ff 	mov.w	r0, #4294967295
 8013f4c:	b004      	add	sp, #16
 8013f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f52:	6823      	ldr	r3, [r4, #0]
 8013f54:	f043 0320 	orr.w	r3, r3, #32
 8013f58:	6023      	str	r3, [r4, #0]
 8013f5a:	4833      	ldr	r0, [pc, #204]	@ (8014028 <_printf_i+0x23c>)
 8013f5c:	2778      	movs	r7, #120	@ 0x78
 8013f5e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013f62:	6823      	ldr	r3, [r4, #0]
 8013f64:	6831      	ldr	r1, [r6, #0]
 8013f66:	061f      	lsls	r7, r3, #24
 8013f68:	f851 5b04 	ldr.w	r5, [r1], #4
 8013f6c:	d402      	bmi.n	8013f74 <_printf_i+0x188>
 8013f6e:	065f      	lsls	r7, r3, #25
 8013f70:	bf48      	it	mi
 8013f72:	b2ad      	uxthmi	r5, r5
 8013f74:	6031      	str	r1, [r6, #0]
 8013f76:	07d9      	lsls	r1, r3, #31
 8013f78:	bf44      	itt	mi
 8013f7a:	f043 0320 	orrmi.w	r3, r3, #32
 8013f7e:	6023      	strmi	r3, [r4, #0]
 8013f80:	b11d      	cbz	r5, 8013f8a <_printf_i+0x19e>
 8013f82:	2310      	movs	r3, #16
 8013f84:	e7ac      	b.n	8013ee0 <_printf_i+0xf4>
 8013f86:	4827      	ldr	r0, [pc, #156]	@ (8014024 <_printf_i+0x238>)
 8013f88:	e7e9      	b.n	8013f5e <_printf_i+0x172>
 8013f8a:	6823      	ldr	r3, [r4, #0]
 8013f8c:	f023 0320 	bic.w	r3, r3, #32
 8013f90:	6023      	str	r3, [r4, #0]
 8013f92:	e7f6      	b.n	8013f82 <_printf_i+0x196>
 8013f94:	4616      	mov	r6, r2
 8013f96:	e7bd      	b.n	8013f14 <_printf_i+0x128>
 8013f98:	6833      	ldr	r3, [r6, #0]
 8013f9a:	6825      	ldr	r5, [r4, #0]
 8013f9c:	6961      	ldr	r1, [r4, #20]
 8013f9e:	1d18      	adds	r0, r3, #4
 8013fa0:	6030      	str	r0, [r6, #0]
 8013fa2:	062e      	lsls	r6, r5, #24
 8013fa4:	681b      	ldr	r3, [r3, #0]
 8013fa6:	d501      	bpl.n	8013fac <_printf_i+0x1c0>
 8013fa8:	6019      	str	r1, [r3, #0]
 8013faa:	e002      	b.n	8013fb2 <_printf_i+0x1c6>
 8013fac:	0668      	lsls	r0, r5, #25
 8013fae:	d5fb      	bpl.n	8013fa8 <_printf_i+0x1bc>
 8013fb0:	8019      	strh	r1, [r3, #0]
 8013fb2:	2300      	movs	r3, #0
 8013fb4:	6123      	str	r3, [r4, #16]
 8013fb6:	4616      	mov	r6, r2
 8013fb8:	e7bc      	b.n	8013f34 <_printf_i+0x148>
 8013fba:	6833      	ldr	r3, [r6, #0]
 8013fbc:	1d1a      	adds	r2, r3, #4
 8013fbe:	6032      	str	r2, [r6, #0]
 8013fc0:	681e      	ldr	r6, [r3, #0]
 8013fc2:	6862      	ldr	r2, [r4, #4]
 8013fc4:	2100      	movs	r1, #0
 8013fc6:	4630      	mov	r0, r6
 8013fc8:	f7ec f9a2 	bl	8000310 <memchr>
 8013fcc:	b108      	cbz	r0, 8013fd2 <_printf_i+0x1e6>
 8013fce:	1b80      	subs	r0, r0, r6
 8013fd0:	6060      	str	r0, [r4, #4]
 8013fd2:	6863      	ldr	r3, [r4, #4]
 8013fd4:	6123      	str	r3, [r4, #16]
 8013fd6:	2300      	movs	r3, #0
 8013fd8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013fdc:	e7aa      	b.n	8013f34 <_printf_i+0x148>
 8013fde:	6923      	ldr	r3, [r4, #16]
 8013fe0:	4632      	mov	r2, r6
 8013fe2:	4649      	mov	r1, r9
 8013fe4:	4640      	mov	r0, r8
 8013fe6:	47d0      	blx	sl
 8013fe8:	3001      	adds	r0, #1
 8013fea:	d0ad      	beq.n	8013f48 <_printf_i+0x15c>
 8013fec:	6823      	ldr	r3, [r4, #0]
 8013fee:	079b      	lsls	r3, r3, #30
 8013ff0:	d413      	bmi.n	801401a <_printf_i+0x22e>
 8013ff2:	68e0      	ldr	r0, [r4, #12]
 8013ff4:	9b03      	ldr	r3, [sp, #12]
 8013ff6:	4298      	cmp	r0, r3
 8013ff8:	bfb8      	it	lt
 8013ffa:	4618      	movlt	r0, r3
 8013ffc:	e7a6      	b.n	8013f4c <_printf_i+0x160>
 8013ffe:	2301      	movs	r3, #1
 8014000:	4632      	mov	r2, r6
 8014002:	4649      	mov	r1, r9
 8014004:	4640      	mov	r0, r8
 8014006:	47d0      	blx	sl
 8014008:	3001      	adds	r0, #1
 801400a:	d09d      	beq.n	8013f48 <_printf_i+0x15c>
 801400c:	3501      	adds	r5, #1
 801400e:	68e3      	ldr	r3, [r4, #12]
 8014010:	9903      	ldr	r1, [sp, #12]
 8014012:	1a5b      	subs	r3, r3, r1
 8014014:	42ab      	cmp	r3, r5
 8014016:	dcf2      	bgt.n	8013ffe <_printf_i+0x212>
 8014018:	e7eb      	b.n	8013ff2 <_printf_i+0x206>
 801401a:	2500      	movs	r5, #0
 801401c:	f104 0619 	add.w	r6, r4, #25
 8014020:	e7f5      	b.n	801400e <_printf_i+0x222>
 8014022:	bf00      	nop
 8014024:	08017222 	.word	0x08017222
 8014028:	08017233 	.word	0x08017233

0801402c <__sflush_r>:
 801402c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014034:	0716      	lsls	r6, r2, #28
 8014036:	4605      	mov	r5, r0
 8014038:	460c      	mov	r4, r1
 801403a:	d454      	bmi.n	80140e6 <__sflush_r+0xba>
 801403c:	684b      	ldr	r3, [r1, #4]
 801403e:	2b00      	cmp	r3, #0
 8014040:	dc02      	bgt.n	8014048 <__sflush_r+0x1c>
 8014042:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014044:	2b00      	cmp	r3, #0
 8014046:	dd48      	ble.n	80140da <__sflush_r+0xae>
 8014048:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801404a:	2e00      	cmp	r6, #0
 801404c:	d045      	beq.n	80140da <__sflush_r+0xae>
 801404e:	2300      	movs	r3, #0
 8014050:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014054:	682f      	ldr	r7, [r5, #0]
 8014056:	6a21      	ldr	r1, [r4, #32]
 8014058:	602b      	str	r3, [r5, #0]
 801405a:	d030      	beq.n	80140be <__sflush_r+0x92>
 801405c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801405e:	89a3      	ldrh	r3, [r4, #12]
 8014060:	0759      	lsls	r1, r3, #29
 8014062:	d505      	bpl.n	8014070 <__sflush_r+0x44>
 8014064:	6863      	ldr	r3, [r4, #4]
 8014066:	1ad2      	subs	r2, r2, r3
 8014068:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801406a:	b10b      	cbz	r3, 8014070 <__sflush_r+0x44>
 801406c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801406e:	1ad2      	subs	r2, r2, r3
 8014070:	2300      	movs	r3, #0
 8014072:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014074:	6a21      	ldr	r1, [r4, #32]
 8014076:	4628      	mov	r0, r5
 8014078:	47b0      	blx	r6
 801407a:	1c43      	adds	r3, r0, #1
 801407c:	89a3      	ldrh	r3, [r4, #12]
 801407e:	d106      	bne.n	801408e <__sflush_r+0x62>
 8014080:	6829      	ldr	r1, [r5, #0]
 8014082:	291d      	cmp	r1, #29
 8014084:	d82b      	bhi.n	80140de <__sflush_r+0xb2>
 8014086:	4a2a      	ldr	r2, [pc, #168]	@ (8014130 <__sflush_r+0x104>)
 8014088:	410a      	asrs	r2, r1
 801408a:	07d6      	lsls	r6, r2, #31
 801408c:	d427      	bmi.n	80140de <__sflush_r+0xb2>
 801408e:	2200      	movs	r2, #0
 8014090:	6062      	str	r2, [r4, #4]
 8014092:	04d9      	lsls	r1, r3, #19
 8014094:	6922      	ldr	r2, [r4, #16]
 8014096:	6022      	str	r2, [r4, #0]
 8014098:	d504      	bpl.n	80140a4 <__sflush_r+0x78>
 801409a:	1c42      	adds	r2, r0, #1
 801409c:	d101      	bne.n	80140a2 <__sflush_r+0x76>
 801409e:	682b      	ldr	r3, [r5, #0]
 80140a0:	b903      	cbnz	r3, 80140a4 <__sflush_r+0x78>
 80140a2:	6560      	str	r0, [r4, #84]	@ 0x54
 80140a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80140a6:	602f      	str	r7, [r5, #0]
 80140a8:	b1b9      	cbz	r1, 80140da <__sflush_r+0xae>
 80140aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80140ae:	4299      	cmp	r1, r3
 80140b0:	d002      	beq.n	80140b8 <__sflush_r+0x8c>
 80140b2:	4628      	mov	r0, r5
 80140b4:	f7ff fbea 	bl	801388c <_free_r>
 80140b8:	2300      	movs	r3, #0
 80140ba:	6363      	str	r3, [r4, #52]	@ 0x34
 80140bc:	e00d      	b.n	80140da <__sflush_r+0xae>
 80140be:	2301      	movs	r3, #1
 80140c0:	4628      	mov	r0, r5
 80140c2:	47b0      	blx	r6
 80140c4:	4602      	mov	r2, r0
 80140c6:	1c50      	adds	r0, r2, #1
 80140c8:	d1c9      	bne.n	801405e <__sflush_r+0x32>
 80140ca:	682b      	ldr	r3, [r5, #0]
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d0c6      	beq.n	801405e <__sflush_r+0x32>
 80140d0:	2b1d      	cmp	r3, #29
 80140d2:	d001      	beq.n	80140d8 <__sflush_r+0xac>
 80140d4:	2b16      	cmp	r3, #22
 80140d6:	d11e      	bne.n	8014116 <__sflush_r+0xea>
 80140d8:	602f      	str	r7, [r5, #0]
 80140da:	2000      	movs	r0, #0
 80140dc:	e022      	b.n	8014124 <__sflush_r+0xf8>
 80140de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80140e2:	b21b      	sxth	r3, r3
 80140e4:	e01b      	b.n	801411e <__sflush_r+0xf2>
 80140e6:	690f      	ldr	r7, [r1, #16]
 80140e8:	2f00      	cmp	r7, #0
 80140ea:	d0f6      	beq.n	80140da <__sflush_r+0xae>
 80140ec:	0793      	lsls	r3, r2, #30
 80140ee:	680e      	ldr	r6, [r1, #0]
 80140f0:	bf08      	it	eq
 80140f2:	694b      	ldreq	r3, [r1, #20]
 80140f4:	600f      	str	r7, [r1, #0]
 80140f6:	bf18      	it	ne
 80140f8:	2300      	movne	r3, #0
 80140fa:	eba6 0807 	sub.w	r8, r6, r7
 80140fe:	608b      	str	r3, [r1, #8]
 8014100:	f1b8 0f00 	cmp.w	r8, #0
 8014104:	dde9      	ble.n	80140da <__sflush_r+0xae>
 8014106:	6a21      	ldr	r1, [r4, #32]
 8014108:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801410a:	4643      	mov	r3, r8
 801410c:	463a      	mov	r2, r7
 801410e:	4628      	mov	r0, r5
 8014110:	47b0      	blx	r6
 8014112:	2800      	cmp	r0, #0
 8014114:	dc08      	bgt.n	8014128 <__sflush_r+0xfc>
 8014116:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801411a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801411e:	81a3      	strh	r3, [r4, #12]
 8014120:	f04f 30ff 	mov.w	r0, #4294967295
 8014124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014128:	4407      	add	r7, r0
 801412a:	eba8 0800 	sub.w	r8, r8, r0
 801412e:	e7e7      	b.n	8014100 <__sflush_r+0xd4>
 8014130:	dfbffffe 	.word	0xdfbffffe

08014134 <_fflush_r>:
 8014134:	b538      	push	{r3, r4, r5, lr}
 8014136:	690b      	ldr	r3, [r1, #16]
 8014138:	4605      	mov	r5, r0
 801413a:	460c      	mov	r4, r1
 801413c:	b913      	cbnz	r3, 8014144 <_fflush_r+0x10>
 801413e:	2500      	movs	r5, #0
 8014140:	4628      	mov	r0, r5
 8014142:	bd38      	pop	{r3, r4, r5, pc}
 8014144:	b118      	cbz	r0, 801414e <_fflush_r+0x1a>
 8014146:	6a03      	ldr	r3, [r0, #32]
 8014148:	b90b      	cbnz	r3, 801414e <_fflush_r+0x1a>
 801414a:	f7ff fa0b 	bl	8013564 <__sinit>
 801414e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014152:	2b00      	cmp	r3, #0
 8014154:	d0f3      	beq.n	801413e <_fflush_r+0xa>
 8014156:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014158:	07d0      	lsls	r0, r2, #31
 801415a:	d404      	bmi.n	8014166 <_fflush_r+0x32>
 801415c:	0599      	lsls	r1, r3, #22
 801415e:	d402      	bmi.n	8014166 <_fflush_r+0x32>
 8014160:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014162:	f7ff fb64 	bl	801382e <__retarget_lock_acquire_recursive>
 8014166:	4628      	mov	r0, r5
 8014168:	4621      	mov	r1, r4
 801416a:	f7ff ff5f 	bl	801402c <__sflush_r>
 801416e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014170:	07da      	lsls	r2, r3, #31
 8014172:	4605      	mov	r5, r0
 8014174:	d4e4      	bmi.n	8014140 <_fflush_r+0xc>
 8014176:	89a3      	ldrh	r3, [r4, #12]
 8014178:	059b      	lsls	r3, r3, #22
 801417a:	d4e1      	bmi.n	8014140 <_fflush_r+0xc>
 801417c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801417e:	f7ff fb57 	bl	8013830 <__retarget_lock_release_recursive>
 8014182:	e7dd      	b.n	8014140 <_fflush_r+0xc>

08014184 <fiprintf>:
 8014184:	b40e      	push	{r1, r2, r3}
 8014186:	b503      	push	{r0, r1, lr}
 8014188:	4601      	mov	r1, r0
 801418a:	ab03      	add	r3, sp, #12
 801418c:	4805      	ldr	r0, [pc, #20]	@ (80141a4 <fiprintf+0x20>)
 801418e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014192:	6800      	ldr	r0, [r0, #0]
 8014194:	9301      	str	r3, [sp, #4]
 8014196:	f7ff fca3 	bl	8013ae0 <_vfiprintf_r>
 801419a:	b002      	add	sp, #8
 801419c:	f85d eb04 	ldr.w	lr, [sp], #4
 80141a0:	b003      	add	sp, #12
 80141a2:	4770      	bx	lr
 80141a4:	24000040 	.word	0x24000040

080141a8 <__swbuf_r>:
 80141a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141aa:	460e      	mov	r6, r1
 80141ac:	4614      	mov	r4, r2
 80141ae:	4605      	mov	r5, r0
 80141b0:	b118      	cbz	r0, 80141ba <__swbuf_r+0x12>
 80141b2:	6a03      	ldr	r3, [r0, #32]
 80141b4:	b90b      	cbnz	r3, 80141ba <__swbuf_r+0x12>
 80141b6:	f7ff f9d5 	bl	8013564 <__sinit>
 80141ba:	69a3      	ldr	r3, [r4, #24]
 80141bc:	60a3      	str	r3, [r4, #8]
 80141be:	89a3      	ldrh	r3, [r4, #12]
 80141c0:	071a      	lsls	r2, r3, #28
 80141c2:	d501      	bpl.n	80141c8 <__swbuf_r+0x20>
 80141c4:	6923      	ldr	r3, [r4, #16]
 80141c6:	b943      	cbnz	r3, 80141da <__swbuf_r+0x32>
 80141c8:	4621      	mov	r1, r4
 80141ca:	4628      	mov	r0, r5
 80141cc:	f000 f82a 	bl	8014224 <__swsetup_r>
 80141d0:	b118      	cbz	r0, 80141da <__swbuf_r+0x32>
 80141d2:	f04f 37ff 	mov.w	r7, #4294967295
 80141d6:	4638      	mov	r0, r7
 80141d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80141da:	6823      	ldr	r3, [r4, #0]
 80141dc:	6922      	ldr	r2, [r4, #16]
 80141de:	1a98      	subs	r0, r3, r2
 80141e0:	6963      	ldr	r3, [r4, #20]
 80141e2:	b2f6      	uxtb	r6, r6
 80141e4:	4283      	cmp	r3, r0
 80141e6:	4637      	mov	r7, r6
 80141e8:	dc05      	bgt.n	80141f6 <__swbuf_r+0x4e>
 80141ea:	4621      	mov	r1, r4
 80141ec:	4628      	mov	r0, r5
 80141ee:	f7ff ffa1 	bl	8014134 <_fflush_r>
 80141f2:	2800      	cmp	r0, #0
 80141f4:	d1ed      	bne.n	80141d2 <__swbuf_r+0x2a>
 80141f6:	68a3      	ldr	r3, [r4, #8]
 80141f8:	3b01      	subs	r3, #1
 80141fa:	60a3      	str	r3, [r4, #8]
 80141fc:	6823      	ldr	r3, [r4, #0]
 80141fe:	1c5a      	adds	r2, r3, #1
 8014200:	6022      	str	r2, [r4, #0]
 8014202:	701e      	strb	r6, [r3, #0]
 8014204:	6962      	ldr	r2, [r4, #20]
 8014206:	1c43      	adds	r3, r0, #1
 8014208:	429a      	cmp	r2, r3
 801420a:	d004      	beq.n	8014216 <__swbuf_r+0x6e>
 801420c:	89a3      	ldrh	r3, [r4, #12]
 801420e:	07db      	lsls	r3, r3, #31
 8014210:	d5e1      	bpl.n	80141d6 <__swbuf_r+0x2e>
 8014212:	2e0a      	cmp	r6, #10
 8014214:	d1df      	bne.n	80141d6 <__swbuf_r+0x2e>
 8014216:	4621      	mov	r1, r4
 8014218:	4628      	mov	r0, r5
 801421a:	f7ff ff8b 	bl	8014134 <_fflush_r>
 801421e:	2800      	cmp	r0, #0
 8014220:	d0d9      	beq.n	80141d6 <__swbuf_r+0x2e>
 8014222:	e7d6      	b.n	80141d2 <__swbuf_r+0x2a>

08014224 <__swsetup_r>:
 8014224:	b538      	push	{r3, r4, r5, lr}
 8014226:	4b29      	ldr	r3, [pc, #164]	@ (80142cc <__swsetup_r+0xa8>)
 8014228:	4605      	mov	r5, r0
 801422a:	6818      	ldr	r0, [r3, #0]
 801422c:	460c      	mov	r4, r1
 801422e:	b118      	cbz	r0, 8014238 <__swsetup_r+0x14>
 8014230:	6a03      	ldr	r3, [r0, #32]
 8014232:	b90b      	cbnz	r3, 8014238 <__swsetup_r+0x14>
 8014234:	f7ff f996 	bl	8013564 <__sinit>
 8014238:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801423c:	0719      	lsls	r1, r3, #28
 801423e:	d422      	bmi.n	8014286 <__swsetup_r+0x62>
 8014240:	06da      	lsls	r2, r3, #27
 8014242:	d407      	bmi.n	8014254 <__swsetup_r+0x30>
 8014244:	2209      	movs	r2, #9
 8014246:	602a      	str	r2, [r5, #0]
 8014248:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801424c:	81a3      	strh	r3, [r4, #12]
 801424e:	f04f 30ff 	mov.w	r0, #4294967295
 8014252:	e033      	b.n	80142bc <__swsetup_r+0x98>
 8014254:	0758      	lsls	r0, r3, #29
 8014256:	d512      	bpl.n	801427e <__swsetup_r+0x5a>
 8014258:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801425a:	b141      	cbz	r1, 801426e <__swsetup_r+0x4a>
 801425c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014260:	4299      	cmp	r1, r3
 8014262:	d002      	beq.n	801426a <__swsetup_r+0x46>
 8014264:	4628      	mov	r0, r5
 8014266:	f7ff fb11 	bl	801388c <_free_r>
 801426a:	2300      	movs	r3, #0
 801426c:	6363      	str	r3, [r4, #52]	@ 0x34
 801426e:	89a3      	ldrh	r3, [r4, #12]
 8014270:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014274:	81a3      	strh	r3, [r4, #12]
 8014276:	2300      	movs	r3, #0
 8014278:	6063      	str	r3, [r4, #4]
 801427a:	6923      	ldr	r3, [r4, #16]
 801427c:	6023      	str	r3, [r4, #0]
 801427e:	89a3      	ldrh	r3, [r4, #12]
 8014280:	f043 0308 	orr.w	r3, r3, #8
 8014284:	81a3      	strh	r3, [r4, #12]
 8014286:	6923      	ldr	r3, [r4, #16]
 8014288:	b94b      	cbnz	r3, 801429e <__swsetup_r+0x7a>
 801428a:	89a3      	ldrh	r3, [r4, #12]
 801428c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014290:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014294:	d003      	beq.n	801429e <__swsetup_r+0x7a>
 8014296:	4621      	mov	r1, r4
 8014298:	4628      	mov	r0, r5
 801429a:	f000 f856 	bl	801434a <__smakebuf_r>
 801429e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80142a2:	f013 0201 	ands.w	r2, r3, #1
 80142a6:	d00a      	beq.n	80142be <__swsetup_r+0x9a>
 80142a8:	2200      	movs	r2, #0
 80142aa:	60a2      	str	r2, [r4, #8]
 80142ac:	6962      	ldr	r2, [r4, #20]
 80142ae:	4252      	negs	r2, r2
 80142b0:	61a2      	str	r2, [r4, #24]
 80142b2:	6922      	ldr	r2, [r4, #16]
 80142b4:	b942      	cbnz	r2, 80142c8 <__swsetup_r+0xa4>
 80142b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80142ba:	d1c5      	bne.n	8014248 <__swsetup_r+0x24>
 80142bc:	bd38      	pop	{r3, r4, r5, pc}
 80142be:	0799      	lsls	r1, r3, #30
 80142c0:	bf58      	it	pl
 80142c2:	6962      	ldrpl	r2, [r4, #20]
 80142c4:	60a2      	str	r2, [r4, #8]
 80142c6:	e7f4      	b.n	80142b2 <__swsetup_r+0x8e>
 80142c8:	2000      	movs	r0, #0
 80142ca:	e7f7      	b.n	80142bc <__swsetup_r+0x98>
 80142cc:	24000040 	.word	0x24000040

080142d0 <_sbrk_r>:
 80142d0:	b538      	push	{r3, r4, r5, lr}
 80142d2:	4d06      	ldr	r5, [pc, #24]	@ (80142ec <_sbrk_r+0x1c>)
 80142d4:	2300      	movs	r3, #0
 80142d6:	4604      	mov	r4, r0
 80142d8:	4608      	mov	r0, r1
 80142da:	602b      	str	r3, [r5, #0]
 80142dc:	f7ec fbb2 	bl	8000a44 <_sbrk>
 80142e0:	1c43      	adds	r3, r0, #1
 80142e2:	d102      	bne.n	80142ea <_sbrk_r+0x1a>
 80142e4:	682b      	ldr	r3, [r5, #0]
 80142e6:	b103      	cbz	r3, 80142ea <_sbrk_r+0x1a>
 80142e8:	6023      	str	r3, [r4, #0]
 80142ea:	bd38      	pop	{r3, r4, r5, pc}
 80142ec:	240107e8 	.word	0x240107e8

080142f0 <abort>:
 80142f0:	b508      	push	{r3, lr}
 80142f2:	2006      	movs	r0, #6
 80142f4:	f000 f88e 	bl	8014414 <raise>
 80142f8:	2001      	movs	r0, #1
 80142fa:	f7ec fb2b 	bl	8000954 <_exit>

080142fe <__swhatbuf_r>:
 80142fe:	b570      	push	{r4, r5, r6, lr}
 8014300:	460c      	mov	r4, r1
 8014302:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014306:	2900      	cmp	r1, #0
 8014308:	b096      	sub	sp, #88	@ 0x58
 801430a:	4615      	mov	r5, r2
 801430c:	461e      	mov	r6, r3
 801430e:	da0d      	bge.n	801432c <__swhatbuf_r+0x2e>
 8014310:	89a3      	ldrh	r3, [r4, #12]
 8014312:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014316:	f04f 0100 	mov.w	r1, #0
 801431a:	bf14      	ite	ne
 801431c:	2340      	movne	r3, #64	@ 0x40
 801431e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014322:	2000      	movs	r0, #0
 8014324:	6031      	str	r1, [r6, #0]
 8014326:	602b      	str	r3, [r5, #0]
 8014328:	b016      	add	sp, #88	@ 0x58
 801432a:	bd70      	pop	{r4, r5, r6, pc}
 801432c:	466a      	mov	r2, sp
 801432e:	f000 f879 	bl	8014424 <_fstat_r>
 8014332:	2800      	cmp	r0, #0
 8014334:	dbec      	blt.n	8014310 <__swhatbuf_r+0x12>
 8014336:	9901      	ldr	r1, [sp, #4]
 8014338:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801433c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014340:	4259      	negs	r1, r3
 8014342:	4159      	adcs	r1, r3
 8014344:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014348:	e7eb      	b.n	8014322 <__swhatbuf_r+0x24>

0801434a <__smakebuf_r>:
 801434a:	898b      	ldrh	r3, [r1, #12]
 801434c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801434e:	079d      	lsls	r5, r3, #30
 8014350:	4606      	mov	r6, r0
 8014352:	460c      	mov	r4, r1
 8014354:	d507      	bpl.n	8014366 <__smakebuf_r+0x1c>
 8014356:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801435a:	6023      	str	r3, [r4, #0]
 801435c:	6123      	str	r3, [r4, #16]
 801435e:	2301      	movs	r3, #1
 8014360:	6163      	str	r3, [r4, #20]
 8014362:	b003      	add	sp, #12
 8014364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014366:	ab01      	add	r3, sp, #4
 8014368:	466a      	mov	r2, sp
 801436a:	f7ff ffc8 	bl	80142fe <__swhatbuf_r>
 801436e:	9f00      	ldr	r7, [sp, #0]
 8014370:	4605      	mov	r5, r0
 8014372:	4639      	mov	r1, r7
 8014374:	4630      	mov	r0, r6
 8014376:	f7ff fafd 	bl	8013974 <_malloc_r>
 801437a:	b948      	cbnz	r0, 8014390 <__smakebuf_r+0x46>
 801437c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014380:	059a      	lsls	r2, r3, #22
 8014382:	d4ee      	bmi.n	8014362 <__smakebuf_r+0x18>
 8014384:	f023 0303 	bic.w	r3, r3, #3
 8014388:	f043 0302 	orr.w	r3, r3, #2
 801438c:	81a3      	strh	r3, [r4, #12]
 801438e:	e7e2      	b.n	8014356 <__smakebuf_r+0xc>
 8014390:	89a3      	ldrh	r3, [r4, #12]
 8014392:	6020      	str	r0, [r4, #0]
 8014394:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014398:	81a3      	strh	r3, [r4, #12]
 801439a:	9b01      	ldr	r3, [sp, #4]
 801439c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80143a0:	b15b      	cbz	r3, 80143ba <__smakebuf_r+0x70>
 80143a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80143a6:	4630      	mov	r0, r6
 80143a8:	f000 f84e 	bl	8014448 <_isatty_r>
 80143ac:	b128      	cbz	r0, 80143ba <__smakebuf_r+0x70>
 80143ae:	89a3      	ldrh	r3, [r4, #12]
 80143b0:	f023 0303 	bic.w	r3, r3, #3
 80143b4:	f043 0301 	orr.w	r3, r3, #1
 80143b8:	81a3      	strh	r3, [r4, #12]
 80143ba:	89a3      	ldrh	r3, [r4, #12]
 80143bc:	431d      	orrs	r5, r3
 80143be:	81a5      	strh	r5, [r4, #12]
 80143c0:	e7cf      	b.n	8014362 <__smakebuf_r+0x18>

080143c2 <_raise_r>:
 80143c2:	291f      	cmp	r1, #31
 80143c4:	b538      	push	{r3, r4, r5, lr}
 80143c6:	4605      	mov	r5, r0
 80143c8:	460c      	mov	r4, r1
 80143ca:	d904      	bls.n	80143d6 <_raise_r+0x14>
 80143cc:	2316      	movs	r3, #22
 80143ce:	6003      	str	r3, [r0, #0]
 80143d0:	f04f 30ff 	mov.w	r0, #4294967295
 80143d4:	bd38      	pop	{r3, r4, r5, pc}
 80143d6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80143d8:	b112      	cbz	r2, 80143e0 <_raise_r+0x1e>
 80143da:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80143de:	b94b      	cbnz	r3, 80143f4 <_raise_r+0x32>
 80143e0:	4628      	mov	r0, r5
 80143e2:	f000 f853 	bl	801448c <_getpid_r>
 80143e6:	4622      	mov	r2, r4
 80143e8:	4601      	mov	r1, r0
 80143ea:	4628      	mov	r0, r5
 80143ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80143f0:	f000 b83a 	b.w	8014468 <_kill_r>
 80143f4:	2b01      	cmp	r3, #1
 80143f6:	d00a      	beq.n	801440e <_raise_r+0x4c>
 80143f8:	1c59      	adds	r1, r3, #1
 80143fa:	d103      	bne.n	8014404 <_raise_r+0x42>
 80143fc:	2316      	movs	r3, #22
 80143fe:	6003      	str	r3, [r0, #0]
 8014400:	2001      	movs	r0, #1
 8014402:	e7e7      	b.n	80143d4 <_raise_r+0x12>
 8014404:	2100      	movs	r1, #0
 8014406:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801440a:	4620      	mov	r0, r4
 801440c:	4798      	blx	r3
 801440e:	2000      	movs	r0, #0
 8014410:	e7e0      	b.n	80143d4 <_raise_r+0x12>
	...

08014414 <raise>:
 8014414:	4b02      	ldr	r3, [pc, #8]	@ (8014420 <raise+0xc>)
 8014416:	4601      	mov	r1, r0
 8014418:	6818      	ldr	r0, [r3, #0]
 801441a:	f7ff bfd2 	b.w	80143c2 <_raise_r>
 801441e:	bf00      	nop
 8014420:	24000040 	.word	0x24000040

08014424 <_fstat_r>:
 8014424:	b538      	push	{r3, r4, r5, lr}
 8014426:	4d07      	ldr	r5, [pc, #28]	@ (8014444 <_fstat_r+0x20>)
 8014428:	2300      	movs	r3, #0
 801442a:	4604      	mov	r4, r0
 801442c:	4608      	mov	r0, r1
 801442e:	4611      	mov	r1, r2
 8014430:	602b      	str	r3, [r5, #0]
 8014432:	f7ec fadf 	bl	80009f4 <_fstat>
 8014436:	1c43      	adds	r3, r0, #1
 8014438:	d102      	bne.n	8014440 <_fstat_r+0x1c>
 801443a:	682b      	ldr	r3, [r5, #0]
 801443c:	b103      	cbz	r3, 8014440 <_fstat_r+0x1c>
 801443e:	6023      	str	r3, [r4, #0]
 8014440:	bd38      	pop	{r3, r4, r5, pc}
 8014442:	bf00      	nop
 8014444:	240107e8 	.word	0x240107e8

08014448 <_isatty_r>:
 8014448:	b538      	push	{r3, r4, r5, lr}
 801444a:	4d06      	ldr	r5, [pc, #24]	@ (8014464 <_isatty_r+0x1c>)
 801444c:	2300      	movs	r3, #0
 801444e:	4604      	mov	r4, r0
 8014450:	4608      	mov	r0, r1
 8014452:	602b      	str	r3, [r5, #0]
 8014454:	f7ec fade 	bl	8000a14 <_isatty>
 8014458:	1c43      	adds	r3, r0, #1
 801445a:	d102      	bne.n	8014462 <_isatty_r+0x1a>
 801445c:	682b      	ldr	r3, [r5, #0]
 801445e:	b103      	cbz	r3, 8014462 <_isatty_r+0x1a>
 8014460:	6023      	str	r3, [r4, #0]
 8014462:	bd38      	pop	{r3, r4, r5, pc}
 8014464:	240107e8 	.word	0x240107e8

08014468 <_kill_r>:
 8014468:	b538      	push	{r3, r4, r5, lr}
 801446a:	4d07      	ldr	r5, [pc, #28]	@ (8014488 <_kill_r+0x20>)
 801446c:	2300      	movs	r3, #0
 801446e:	4604      	mov	r4, r0
 8014470:	4608      	mov	r0, r1
 8014472:	4611      	mov	r1, r2
 8014474:	602b      	str	r3, [r5, #0]
 8014476:	f7ec fa5b 	bl	8000930 <_kill>
 801447a:	1c43      	adds	r3, r0, #1
 801447c:	d102      	bne.n	8014484 <_kill_r+0x1c>
 801447e:	682b      	ldr	r3, [r5, #0]
 8014480:	b103      	cbz	r3, 8014484 <_kill_r+0x1c>
 8014482:	6023      	str	r3, [r4, #0]
 8014484:	bd38      	pop	{r3, r4, r5, pc}
 8014486:	bf00      	nop
 8014488:	240107e8 	.word	0x240107e8

0801448c <_getpid_r>:
 801448c:	f7ec ba48 	b.w	8000920 <_getpid>

08014490 <_init>:
 8014490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014492:	bf00      	nop
 8014494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014496:	bc08      	pop	{r3}
 8014498:	469e      	mov	lr, r3
 801449a:	4770      	bx	lr

0801449c <_fini>:
 801449c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801449e:	bf00      	nop
 80144a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80144a2:	bc08      	pop	{r3}
 80144a4:	469e      	mov	lr, r3
 80144a6:	4770      	bx	lr
