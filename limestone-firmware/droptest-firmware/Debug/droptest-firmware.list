
droptest-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cac  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08009f7c  08009f7c  00019f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009ff4  08009ff4  00019ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009ffc  08009ffc  00019ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a000  0800a000  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  24000000  0800a004  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004218  24000014  0800a018  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400422c  0800a018  0002422c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001c485  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00003937  00000000  00000000  0003c50a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001628  00000000  00000000  0003fe48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000111f  00000000  00000000  00041470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00034bc1  00000000  00000000  0004258f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001ce71  00000000  00000000  00077150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0014f1dc  00000000  00000000  00093fc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00005ce4  00000000  00000000  001e31a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007e  00000000  00000000  001e8e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000014 	.word	0x24000014
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08009f64 	.word	0x08009f64

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000018 	.word	0x24000018
 800030c:	08009f64 	.word	0x08009f64

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b970 	b.w	8000608 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9e08      	ldr	r6, [sp, #32]
 8000346:	460d      	mov	r5, r1
 8000348:	4604      	mov	r4, r0
 800034a:	460f      	mov	r7, r1
 800034c:	2b00      	cmp	r3, #0
 800034e:	d14a      	bne.n	80003e6 <__udivmoddi4+0xa6>
 8000350:	428a      	cmp	r2, r1
 8000352:	4694      	mov	ip, r2
 8000354:	d965      	bls.n	8000422 <__udivmoddi4+0xe2>
 8000356:	fab2 f382 	clz	r3, r2
 800035a:	b143      	cbz	r3, 800036e <__udivmoddi4+0x2e>
 800035c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000360:	f1c3 0220 	rsb	r2, r3, #32
 8000364:	409f      	lsls	r7, r3
 8000366:	fa20 f202 	lsr.w	r2, r0, r2
 800036a:	4317      	orrs	r7, r2
 800036c:	409c      	lsls	r4, r3
 800036e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000372:	fa1f f58c 	uxth.w	r5, ip
 8000376:	fbb7 f1fe 	udiv	r1, r7, lr
 800037a:	0c22      	lsrs	r2, r4, #16
 800037c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000380:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000384:	fb01 f005 	mul.w	r0, r1, r5
 8000388:	4290      	cmp	r0, r2
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x62>
 800038c:	eb1c 0202 	adds.w	r2, ip, r2
 8000390:	f101 37ff 	add.w	r7, r1, #4294967295
 8000394:	f080 811c 	bcs.w	80005d0 <__udivmoddi4+0x290>
 8000398:	4290      	cmp	r0, r2
 800039a:	f240 8119 	bls.w	80005d0 <__udivmoddi4+0x290>
 800039e:	3902      	subs	r1, #2
 80003a0:	4462      	add	r2, ip
 80003a2:	1a12      	subs	r2, r2, r0
 80003a4:	b2a4      	uxth	r4, r4
 80003a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003b2:	fb00 f505 	mul.w	r5, r0, r5
 80003b6:	42a5      	cmp	r5, r4
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x90>
 80003ba:	eb1c 0404 	adds.w	r4, ip, r4
 80003be:	f100 32ff 	add.w	r2, r0, #4294967295
 80003c2:	f080 8107 	bcs.w	80005d4 <__udivmoddi4+0x294>
 80003c6:	42a5      	cmp	r5, r4
 80003c8:	f240 8104 	bls.w	80005d4 <__udivmoddi4+0x294>
 80003cc:	4464      	add	r4, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d4:	1b64      	subs	r4, r4, r5
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11e      	cbz	r6, 80003e2 <__udivmoddi4+0xa2>
 80003da:	40dc      	lsrs	r4, r3
 80003dc:	2300      	movs	r3, #0
 80003de:	e9c6 4300 	strd	r4, r3, [r6]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0xbc>
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	f000 80ed 	beq.w	80005ca <__udivmoddi4+0x28a>
 80003f0:	2100      	movs	r1, #0
 80003f2:	e9c6 0500 	strd	r0, r5, [r6]
 80003f6:	4608      	mov	r0, r1
 80003f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fc:	fab3 f183 	clz	r1, r3
 8000400:	2900      	cmp	r1, #0
 8000402:	d149      	bne.n	8000498 <__udivmoddi4+0x158>
 8000404:	42ab      	cmp	r3, r5
 8000406:	d302      	bcc.n	800040e <__udivmoddi4+0xce>
 8000408:	4282      	cmp	r2, r0
 800040a:	f200 80f8 	bhi.w	80005fe <__udivmoddi4+0x2be>
 800040e:	1a84      	subs	r4, r0, r2
 8000410:	eb65 0203 	sbc.w	r2, r5, r3
 8000414:	2001      	movs	r0, #1
 8000416:	4617      	mov	r7, r2
 8000418:	2e00      	cmp	r6, #0
 800041a:	d0e2      	beq.n	80003e2 <__udivmoddi4+0xa2>
 800041c:	e9c6 4700 	strd	r4, r7, [r6]
 8000420:	e7df      	b.n	80003e2 <__udivmoddi4+0xa2>
 8000422:	b902      	cbnz	r2, 8000426 <__udivmoddi4+0xe6>
 8000424:	deff      	udf	#255	; 0xff
 8000426:	fab2 f382 	clz	r3, r2
 800042a:	2b00      	cmp	r3, #0
 800042c:	f040 8090 	bne.w	8000550 <__udivmoddi4+0x210>
 8000430:	1a8a      	subs	r2, r1, r2
 8000432:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000436:	fa1f fe8c 	uxth.w	lr, ip
 800043a:	2101      	movs	r1, #1
 800043c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000440:	fb07 2015 	mls	r0, r7, r5, r2
 8000444:	0c22      	lsrs	r2, r4, #16
 8000446:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800044a:	fb0e f005 	mul.w	r0, lr, r5
 800044e:	4290      	cmp	r0, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x124>
 8000452:	eb1c 0202 	adds.w	r2, ip, r2
 8000456:	f105 38ff 	add.w	r8, r5, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x122>
 800045c:	4290      	cmp	r0, r2
 800045e:	f200 80cb 	bhi.w	80005f8 <__udivmoddi4+0x2b8>
 8000462:	4645      	mov	r5, r8
 8000464:	1a12      	subs	r2, r2, r0
 8000466:	b2a4      	uxth	r4, r4
 8000468:	fbb2 f0f7 	udiv	r0, r2, r7
 800046c:	fb07 2210 	mls	r2, r7, r0, r2
 8000470:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000474:	fb0e fe00 	mul.w	lr, lr, r0
 8000478:	45a6      	cmp	lr, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x14e>
 800047c:	eb1c 0404 	adds.w	r4, ip, r4
 8000480:	f100 32ff 	add.w	r2, r0, #4294967295
 8000484:	d202      	bcs.n	800048c <__udivmoddi4+0x14c>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f200 80bb 	bhi.w	8000602 <__udivmoddi4+0x2c2>
 800048c:	4610      	mov	r0, r2
 800048e:	eba4 040e 	sub.w	r4, r4, lr
 8000492:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000496:	e79f      	b.n	80003d8 <__udivmoddi4+0x98>
 8000498:	f1c1 0720 	rsb	r7, r1, #32
 800049c:	408b      	lsls	r3, r1
 800049e:	fa22 fc07 	lsr.w	ip, r2, r7
 80004a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004a6:	fa05 f401 	lsl.w	r4, r5, r1
 80004aa:	fa20 f307 	lsr.w	r3, r0, r7
 80004ae:	40fd      	lsrs	r5, r7
 80004b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004b4:	4323      	orrs	r3, r4
 80004b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80004ba:	fa1f fe8c 	uxth.w	lr, ip
 80004be:	fb09 5518 	mls	r5, r9, r8, r5
 80004c2:	0c1c      	lsrs	r4, r3, #16
 80004c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004c8:	fb08 f50e 	mul.w	r5, r8, lr
 80004cc:	42a5      	cmp	r5, r4
 80004ce:	fa02 f201 	lsl.w	r2, r2, r1
 80004d2:	fa00 f001 	lsl.w	r0, r0, r1
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b0>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e0:	f080 8088 	bcs.w	80005f4 <__udivmoddi4+0x2b4>
 80004e4:	42a5      	cmp	r5, r4
 80004e6:	f240 8085 	bls.w	80005f4 <__udivmoddi4+0x2b4>
 80004ea:	f1a8 0802 	sub.w	r8, r8, #2
 80004ee:	4464      	add	r4, ip
 80004f0:	1b64      	subs	r4, r4, r5
 80004f2:	b29d      	uxth	r5, r3
 80004f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004f8:	fb09 4413 	mls	r4, r9, r3, r4
 80004fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000500:	fb03 fe0e 	mul.w	lr, r3, lr
 8000504:	45a6      	cmp	lr, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1da>
 8000508:	eb1c 0404 	adds.w	r4, ip, r4
 800050c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000510:	d26c      	bcs.n	80005ec <__udivmoddi4+0x2ac>
 8000512:	45a6      	cmp	lr, r4
 8000514:	d96a      	bls.n	80005ec <__udivmoddi4+0x2ac>
 8000516:	3b02      	subs	r3, #2
 8000518:	4464      	add	r4, ip
 800051a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800051e:	fba3 9502 	umull	r9, r5, r3, r2
 8000522:	eba4 040e 	sub.w	r4, r4, lr
 8000526:	42ac      	cmp	r4, r5
 8000528:	46c8      	mov	r8, r9
 800052a:	46ae      	mov	lr, r5
 800052c:	d356      	bcc.n	80005dc <__udivmoddi4+0x29c>
 800052e:	d053      	beq.n	80005d8 <__udivmoddi4+0x298>
 8000530:	b156      	cbz	r6, 8000548 <__udivmoddi4+0x208>
 8000532:	ebb0 0208 	subs.w	r2, r0, r8
 8000536:	eb64 040e 	sbc.w	r4, r4, lr
 800053a:	fa04 f707 	lsl.w	r7, r4, r7
 800053e:	40ca      	lsrs	r2, r1
 8000540:	40cc      	lsrs	r4, r1
 8000542:	4317      	orrs	r7, r2
 8000544:	e9c6 7400 	strd	r7, r4, [r6]
 8000548:	4618      	mov	r0, r3
 800054a:	2100      	movs	r1, #0
 800054c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000550:	f1c3 0120 	rsb	r1, r3, #32
 8000554:	fa02 fc03 	lsl.w	ip, r2, r3
 8000558:	fa20 f201 	lsr.w	r2, r0, r1
 800055c:	fa25 f101 	lsr.w	r1, r5, r1
 8000560:	409d      	lsls	r5, r3
 8000562:	432a      	orrs	r2, r5
 8000564:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000568:	fa1f fe8c 	uxth.w	lr, ip
 800056c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000570:	fb07 1510 	mls	r5, r7, r0, r1
 8000574:	0c11      	lsrs	r1, r2, #16
 8000576:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800057a:	fb00 f50e 	mul.w	r5, r0, lr
 800057e:	428d      	cmp	r5, r1
 8000580:	fa04 f403 	lsl.w	r4, r4, r3
 8000584:	d908      	bls.n	8000598 <__udivmoddi4+0x258>
 8000586:	eb1c 0101 	adds.w	r1, ip, r1
 800058a:	f100 38ff 	add.w	r8, r0, #4294967295
 800058e:	d22f      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 8000590:	428d      	cmp	r5, r1
 8000592:	d92d      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 8000594:	3802      	subs	r0, #2
 8000596:	4461      	add	r1, ip
 8000598:	1b49      	subs	r1, r1, r5
 800059a:	b292      	uxth	r2, r2
 800059c:	fbb1 f5f7 	udiv	r5, r1, r7
 80005a0:	fb07 1115 	mls	r1, r7, r5, r1
 80005a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005a8:	fb05 f10e 	mul.w	r1, r5, lr
 80005ac:	4291      	cmp	r1, r2
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0x282>
 80005b0:	eb1c 0202 	adds.w	r2, ip, r2
 80005b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80005b8:	d216      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 80005ba:	4291      	cmp	r1, r2
 80005bc:	d914      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 80005be:	3d02      	subs	r5, #2
 80005c0:	4462      	add	r2, ip
 80005c2:	1a52      	subs	r2, r2, r1
 80005c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005c8:	e738      	b.n	800043c <__udivmoddi4+0xfc>
 80005ca:	4631      	mov	r1, r6
 80005cc:	4630      	mov	r0, r6
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xa2>
 80005d0:	4639      	mov	r1, r7
 80005d2:	e6e6      	b.n	80003a2 <__udivmoddi4+0x62>
 80005d4:	4610      	mov	r0, r2
 80005d6:	e6fb      	b.n	80003d0 <__udivmoddi4+0x90>
 80005d8:	4548      	cmp	r0, r9
 80005da:	d2a9      	bcs.n	8000530 <__udivmoddi4+0x1f0>
 80005dc:	ebb9 0802 	subs.w	r8, r9, r2
 80005e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005e4:	3b01      	subs	r3, #1
 80005e6:	e7a3      	b.n	8000530 <__udivmoddi4+0x1f0>
 80005e8:	4645      	mov	r5, r8
 80005ea:	e7ea      	b.n	80005c2 <__udivmoddi4+0x282>
 80005ec:	462b      	mov	r3, r5
 80005ee:	e794      	b.n	800051a <__udivmoddi4+0x1da>
 80005f0:	4640      	mov	r0, r8
 80005f2:	e7d1      	b.n	8000598 <__udivmoddi4+0x258>
 80005f4:	46d0      	mov	r8, sl
 80005f6:	e77b      	b.n	80004f0 <__udivmoddi4+0x1b0>
 80005f8:	3d02      	subs	r5, #2
 80005fa:	4462      	add	r2, ip
 80005fc:	e732      	b.n	8000464 <__udivmoddi4+0x124>
 80005fe:	4608      	mov	r0, r1
 8000600:	e70a      	b.n	8000418 <__udivmoddi4+0xd8>
 8000602:	4464      	add	r4, ip
 8000604:	3802      	subs	r0, #2
 8000606:	e742      	b.n	800048e <__udivmoddi4+0x14e>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <BAR_presConvert>:
 */

#include "LPS22HBTR.h"

//Pressure convert
float BAR_presConvert(uint8_t XL_Byte, uint8_t L_Byte, uint8_t H_Byte) {
 800060c:	b480      	push	{r7}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	71fb      	strb	r3, [r7, #7]
 8000616:	460b      	mov	r3, r1
 8000618:	71bb      	strb	r3, [r7, #6]
 800061a:	4613      	mov	r3, r2
 800061c:	717b      	strb	r3, [r7, #5]
    //Cast to 24 bit int with 2s compliment
    int32_t pres_raw = (H_Byte << 16) | (L_Byte << 8) | (XL_Byte);
 800061e:	797b      	ldrb	r3, [r7, #5]
 8000620:	041a      	lsls	r2, r3, #16
 8000622:	79bb      	ldrb	r3, [r7, #6]
 8000624:	021b      	lsls	r3, r3, #8
 8000626:	431a      	orrs	r2, r3
 8000628:	79fb      	ldrb	r3, [r7, #7]
 800062a:	4313      	orrs	r3, r2
 800062c:	60fb      	str	r3, [r7, #12]
    float pres = (float)(pres_raw / (float)BAR_PRES_SCALING_FACTOR); // Convert the 24 bit number to a pressure in hPa
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	ee07 3a90 	vmov	s15, r3
 8000634:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000638:	eddf 6a07 	vldr	s13, [pc, #28]	; 8000658 <BAR_presConvert+0x4c>
 800063c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000640:	edc7 7a02 	vstr	s15, [r7, #8]
    return pres;
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	ee07 3a90 	vmov	s15, r3
}
 800064a:	eeb0 0a67 	vmov.f32	s0, s15
 800064e:	3714      	adds	r7, #20
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr
 8000658:	45800000 	.word	0x45800000

0800065c <BAR_tempConvert>:
    float alt = (1 - pow(pres / BAR_SEA_LEVEL_PRESS, 0.1903)) * 145366.45 * 0.3048; // Convert to meters above sea level
    return alt;
}

//Temperature convert
float BAR_tempConvert(uint8_t L_Byte, uint8_t H_Byte) {
 800065c:	b480      	push	{r7}
 800065e:	b085      	sub	sp, #20
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	460a      	mov	r2, r1
 8000666:	71fb      	strb	r3, [r7, #7]
 8000668:	4613      	mov	r3, r2
 800066a:	71bb      	strb	r3, [r7, #6]
    int16_t temp_raw = (int16_t)(H_Byte << 8) | L_Byte; // Combine the two bytes into one 16 bit number. This is already formatted for an int16_t
 800066c:	79bb      	ldrb	r3, [r7, #6]
 800066e:	021b      	lsls	r3, r3, #8
 8000670:	b21a      	sxth	r2, r3
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	b21b      	sxth	r3, r3
 8000676:	4313      	orrs	r3, r2
 8000678:	81fb      	strh	r3, [r7, #14]

    float temp = (float)temp_raw / (float)BAR_TEMP_SCALING_FACTOR; // Convert to degrees C
 800067a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800067e:	ee07 3a90 	vmov	s15, r3
 8000682:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000686:	eddf 6a08 	vldr	s13, [pc, #32]	; 80006a8 <BAR_tempConvert+0x4c>
 800068a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800068e:	edc7 7a02 	vstr	s15, [r7, #8]

    return temp;
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	ee07 3a90 	vmov	s15, r3
}
 8000698:	eeb0 0a67 	vmov.f32	s0, s15
 800069c:	3714      	adds	r7, #20
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	42c80000 	.word	0x42c80000

080006ac <BAR_chipSelect>:

//Chip select
void BAR_chipSelect(BAR* BAR) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BAR->CS_GPIO_Port, BAR->CS_GPIO_Pin, 0); //CS pin
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	6898      	ldr	r0, [r3, #8]
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	899b      	ldrh	r3, [r3, #12]
 80006bc:	2200      	movs	r2, #0
 80006be:	4619      	mov	r1, r3
 80006c0:	f002 fd12 	bl	80030e8 <HAL_GPIO_WritePin>
}
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <BAR_chipRelease>:

//Chip release
void BAR_chipRelease(BAR* BAR) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BAR->CS_GPIO_Port, BAR->CS_GPIO_Pin, 1); //CS pin
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	6898      	ldr	r0, [r3, #8]
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	899b      	ldrh	r3, [r3, #12]
 80006dc:	2201      	movs	r2, #1
 80006de:	4619      	mov	r1, r3
 80006e0:	f002 fd02 	bl	80030e8 <HAL_GPIO_WritePin>
}
 80006e4:	bf00      	nop
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <BAR_read>:

//Read register from barometer
HAL_StatusTypeDef BAR_read(BAR* BAR, uint8_t reg_addr, uint8_t* rx_buffer, uint8_t num_bytes) {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	607a      	str	r2, [r7, #4]
 80006f6:	461a      	mov	r2, r3
 80006f8:	460b      	mov	r3, r1
 80006fa:	72fb      	strb	r3, [r7, #11]
 80006fc:	4613      	mov	r3, r2
 80006fe:	72bb      	strb	r3, [r7, #10]
	uint8_t reg_buffer[1] = {reg_addr | 0x80};  // Set register for reading
 8000700:	7afb      	ldrb	r3, [r7, #11]
 8000702:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000706:	b2db      	uxtb	r3, r3
 8000708:	753b      	strb	r3, [r7, #20]

	HAL_StatusTypeDef status;

	taskENTER_CRITICAL();
 800070a:	f009 f933 	bl	8009974 <vPortEnterCritical>

	BAR_chipSelect(BAR);
 800070e:	68f8      	ldr	r0, [r7, #12]
 8000710:	f7ff ffcc 	bl	80006ac <BAR_chipSelect>
	HAL_SPI_Transmit(BAR->hspi, (uint8_t *)reg_buffer, 1, BAR->SPI_TIMEOUT);
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	6818      	ldr	r0, [r3, #0]
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	889b      	ldrh	r3, [r3, #4]
 800071c:	f107 0114 	add.w	r1, r7, #20
 8000720:	2201      	movs	r2, #1
 8000722:	f006 f989 	bl	8006a38 <HAL_SPI_Transmit>
	status = HAL_SPI_Receive(BAR->hspi, (uint8_t *)rx_buffer, num_bytes, BAR->SPI_TIMEOUT);
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	6818      	ldr	r0, [r3, #0]
 800072a:	7abb      	ldrb	r3, [r7, #10]
 800072c:	b29a      	uxth	r2, r3
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	889b      	ldrh	r3, [r3, #4]
 8000732:	6879      	ldr	r1, [r7, #4]
 8000734:	f006 fb6e 	bl	8006e14 <HAL_SPI_Receive>
 8000738:	4603      	mov	r3, r0
 800073a:	75fb      	strb	r3, [r7, #23]
	BAR_chipRelease(BAR);
 800073c:	68f8      	ldr	r0, [r7, #12]
 800073e:	f7ff ffc5 	bl	80006cc <BAR_chipRelease>

	taskEXIT_CRITICAL();
 8000742:	f009 f947 	bl	80099d4 <vPortExitCritical>
	return status;
 8000746:	7dfb      	ldrb	r3, [r7, #23]
}
 8000748:	4618      	mov	r0, r3
 800074a:	3718      	adds	r7, #24
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <BAR_write>:

//Write register from barometer
HAL_StatusTypeDef BAR_write(BAR* BAR, uint8_t* tx_buffer, uint8_t num_bytes) {
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af00      	add	r7, sp, #0
 8000756:	60f8      	str	r0, [r7, #12]
 8000758:	60b9      	str	r1, [r7, #8]
 800075a:	4613      	mov	r3, r2
 800075c:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status;

	taskENTER_CRITICAL();
 800075e:	f009 f909 	bl	8009974 <vPortEnterCritical>

	BAR_chipSelect(BAR);
 8000762:	68f8      	ldr	r0, [r7, #12]
 8000764:	f7ff ffa2 	bl	80006ac <BAR_chipSelect>
	status = HAL_SPI_Transmit(BAR->hspi, (uint8_t *)tx_buffer, num_bytes + 1, BAR->SPI_TIMEOUT);
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	6818      	ldr	r0, [r3, #0]
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	b29b      	uxth	r3, r3
 8000770:	3301      	adds	r3, #1
 8000772:	b29a      	uxth	r2, r3
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	889b      	ldrh	r3, [r3, #4]
 8000778:	68b9      	ldr	r1, [r7, #8]
 800077a:	f006 f95d 	bl	8006a38 <HAL_SPI_Transmit>
 800077e:	4603      	mov	r3, r0
 8000780:	75fb      	strb	r3, [r7, #23]
	BAR_chipRelease(BAR);
 8000782:	68f8      	ldr	r0, [r7, #12]
 8000784:	f7ff ffa2 	bl	80006cc <BAR_chipRelease>

	taskEXIT_CRITICAL();
 8000788:	f009 f924 	bl	80099d4 <vPortExitCritical>
	return status;
 800078c:	7dfb      	ldrb	r3, [r7, #23]
}
 800078e:	4618      	mov	r0, r3
 8000790:	3718      	adds	r7, #24
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <BAR_init>:

//Initialize barometer with default settings
int BAR_init(BAR* BAR) {
 8000796:	b580      	push	{r7, lr}
 8000798:	b082      	sub	sp, #8
 800079a:	af00      	add	r7, sp, #0
 800079c:	6078      	str	r0, [r7, #4]
    BAR_chipRelease(BAR); // Make sure the chip is not selected
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	f7ff ff94 	bl	80006cc <BAR_chipRelease>
	BAR_Reset(BAR); // Reset the barometer, built-in delay for reboot
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f000 f8d4 	bl	8000952 <BAR_Reset>

    // Set default configs
    BAR_send(BAR, BAR_CTRL1_C, BAR_DEFAULT_CONF_CTRL1_C);
 80007aa:	223a      	movs	r2, #58	; 0x3a
 80007ac:	2110      	movs	r1, #16
 80007ae:	6878      	ldr	r0, [r7, #4]
 80007b0:	f000 f862 	bl	8000878 <BAR_send>
    BAR_send(BAR, BAR_CTRL2_C, BAR_DEFAULT_CONF_CTRL2_C);
 80007b4:	2210      	movs	r2, #16
 80007b6:	2111      	movs	r1, #17
 80007b8:	6878      	ldr	r0, [r7, #4]
 80007ba:	f000 f85d 	bl	8000878 <BAR_send>

    return BAR_whoami(BAR);
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f000 f881 	bl	80008c6 <BAR_whoami>
 80007c4:	4603      	mov	r3, r0
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
	...

080007d0 <BAR_getPres>:

//Get pressure from barometer
int BAR_getPres(BAR* BAR, float* pres) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	6039      	str	r1, [r7, #0]
    uint8_t buffer[3] = {0,0,0};
 80007da:	4a11      	ldr	r2, [pc, #68]	; (8000820 <BAR_getPres+0x50>)
 80007dc:	f107 030c 	add.w	r3, r7, #12
 80007e0:	6812      	ldr	r2, [r2, #0]
 80007e2:	4611      	mov	r1, r2
 80007e4:	8019      	strh	r1, [r3, #0]
 80007e6:	3302      	adds	r3, #2
 80007e8:	0c12      	lsrs	r2, r2, #16
 80007ea:	701a      	strb	r2, [r3, #0]
    //Wait for pressure data to be ready
    BAR_waitForPres(BAR); // Blocks until the pressure data is ready
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f000 f882 	bl	80008f6 <BAR_waitForPres>

    //Read pressure data
    BAR_read(BAR, BAR_PRESS_OUT_XL, buffer, 3);
 80007f2:	f107 020c 	add.w	r2, r7, #12
 80007f6:	2303      	movs	r3, #3
 80007f8:	2128      	movs	r1, #40	; 0x28
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f7ff ff76 	bl	80006ec <BAR_read>
    *pres = BAR_presConvert(buffer[0], buffer[1], buffer[2]);
 8000800:	7b3b      	ldrb	r3, [r7, #12]
 8000802:	7b79      	ldrb	r1, [r7, #13]
 8000804:	7bba      	ldrb	r2, [r7, #14]
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff ff00 	bl	800060c <BAR_presConvert>
 800080c:	eef0 7a40 	vmov.f32	s15, s0
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	edc3 7a00 	vstr	s15, [r3]
    return 0;
 8000816:	2300      	movs	r3, #0
}
 8000818:	4618      	mov	r0, r3
 800081a:	3710      	adds	r7, #16
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	08009f7c 	.word	0x08009f7c

08000824 <BAR_getTemp>:
    BAR_read(BAR, BAR_PRESS_OUT_XL, buffer, 3);
    *alt = BAR_altConvert(buffer[0], buffer[1], buffer[2], BAR_SEA_LEVEL_PRESS);
    return 0;
}

int BAR_getTemp(BAR* BAR, float* temp) {
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	6039      	str	r1, [r7, #0]
    uint8_t buffer[3] = {0,0};
 800082e:	4a11      	ldr	r2, [pc, #68]	; (8000874 <BAR_getTemp+0x50>)
 8000830:	f107 030c 	add.w	r3, r7, #12
 8000834:	6812      	ldr	r2, [r2, #0]
 8000836:	4611      	mov	r1, r2
 8000838:	8019      	strh	r1, [r3, #0]
 800083a:	3302      	adds	r3, #2
 800083c:	0c12      	lsrs	r2, r2, #16
 800083e:	701a      	strb	r2, [r3, #0]

    //Wait for temperature data to be ready
    BAR_waitForTemp(BAR); // Blocks until the temperature data is ready
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f000 f86f 	bl	8000924 <BAR_waitForTemp>

    //Read temperature data
    BAR_read(BAR, BAR_TEMP_OUT_L, buffer, 2);
 8000846:	f107 020c 	add.w	r2, r7, #12
 800084a:	2302      	movs	r3, #2
 800084c:	212b      	movs	r1, #43	; 0x2b
 800084e:	6878      	ldr	r0, [r7, #4]
 8000850:	f7ff ff4c 	bl	80006ec <BAR_read>
    *temp = BAR_tempConvert(buffer[0], buffer[1]);
 8000854:	7b3b      	ldrb	r3, [r7, #12]
 8000856:	7b7a      	ldrb	r2, [r7, #13]
 8000858:	4611      	mov	r1, r2
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff fefe 	bl	800065c <BAR_tempConvert>
 8000860:	eef0 7a40 	vmov.f32	s15, s0
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	edc3 7a00 	vstr	s15, [r3]
    return 0;
 800086a:	2300      	movs	r3, #0
}
 800086c:	4618      	mov	r0, r3
 800086e:	3710      	adds	r7, #16
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	08009f7c 	.word	0x08009f7c

08000878 <BAR_send>:

//Send command to barometer
int BAR_send(BAR* BAR, uint8_t cmd, uint8_t value) {
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	460b      	mov	r3, r1
 8000882:	70fb      	strb	r3, [r7, #3]
 8000884:	4613      	mov	r3, r2
 8000886:	70bb      	strb	r3, [r7, #2]
	uint8_t buffer[2] = {0,0};
 8000888:	2300      	movs	r3, #0
 800088a:	81bb      	strh	r3, [r7, #12]
	//Send command
	buffer[0] = cmd;
 800088c:	78fb      	ldrb	r3, [r7, #3]
 800088e:	733b      	strb	r3, [r7, #12]
	buffer[1] = value;
 8000890:	78bb      	ldrb	r3, [r7, #2]
 8000892:	737b      	strb	r3, [r7, #13]
	BAR_write(BAR, buffer, 1);
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	2201      	movs	r2, #1
 800089a:	4619      	mov	r1, r3
 800089c:	6878      	ldr	r0, [r7, #4]
 800089e:	f7ff ff57 	bl	8000750 <BAR_write>
	//Check that it wrote successfully
	BAR_read(BAR, cmd, &buffer[0], 1);
 80008a2:	f107 020c 	add.w	r2, r7, #12
 80008a6:	78f9      	ldrb	r1, [r7, #3]
 80008a8:	2301      	movs	r3, #1
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f7ff ff1e 	bl	80006ec <BAR_read>
    if (buffer[0]!=value) {
 80008b0:	7b3b      	ldrb	r3, [r7, #12]
 80008b2:	78ba      	ldrb	r2, [r7, #2]
 80008b4:	429a      	cmp	r2, r3
 80008b6:	d001      	beq.n	80008bc <BAR_send+0x44>
        return 1; //Error
 80008b8:	2301      	movs	r3, #1
 80008ba:	e000      	b.n	80008be <BAR_send+0x46>
    }

	return 0;
 80008bc:	2300      	movs	r3, #0
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3710      	adds	r7, #16
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <BAR_whoami>:

//Return 0 is WHO_AM_I register can be read, 1 otherwise
int BAR_whoami(BAR* BAR) {
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b084      	sub	sp, #16
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
	uint8_t buffer = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	73fb      	strb	r3, [r7, #15]
	//Read WHO_AM_I register
	BAR_read(BAR, BAR_WHO_AM_I_REG_ADDR, &buffer, 1);
 80008d2:	f107 020f 	add.w	r2, r7, #15
 80008d6:	2301      	movs	r3, #1
 80008d8:	210f      	movs	r1, #15
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f7ff ff06 	bl	80006ec <BAR_read>
	//Check if WHO_AM_I register is correct
	if (buffer != BAR_WHO_AM_I_REG_VAL) {
 80008e0:	7bfb      	ldrb	r3, [r7, #15]
 80008e2:	2bb1      	cmp	r3, #177	; 0xb1
 80008e4:	d002      	beq.n	80008ec <BAR_whoami+0x26>
		return -1;
 80008e6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ea:	e000      	b.n	80008ee <BAR_whoami+0x28>
	}
	return 0;
 80008ec:	2300      	movs	r3, #0
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3710      	adds	r7, #16
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <BAR_waitForPres>:

//Waits / blocks for the pressure data to be ready
int BAR_waitForPres(BAR* BAR) {
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b084      	sub	sp, #16
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	6078      	str	r0, [r7, #4]
    uint8_t status = 0;
 80008fe:	2300      	movs	r3, #0
 8000900:	73fb      	strb	r3, [r7, #15]
    do {
    	BAR_read(BAR, BAR_STATUS_REG, &status, 1);
 8000902:	f107 020f 	add.w	r2, r7, #15
 8000906:	2301      	movs	r3, #1
 8000908:	2127      	movs	r1, #39	; 0x27
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f7ff feee 	bl	80006ec <BAR_read>
    } while (!(status & 0x2));
 8000910:	7bfb      	ldrb	r3, [r7, #15]
 8000912:	f003 0302 	and.w	r3, r3, #2
 8000916:	2b00      	cmp	r3, #0
 8000918:	d0f3      	beq.n	8000902 <BAR_waitForPres+0xc>
    return 0;
 800091a:	2300      	movs	r3, #0
}
 800091c:	4618      	mov	r0, r3
 800091e:	3710      	adds	r7, #16
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}

08000924 <BAR_waitForTemp>:

//Waits / blocks for the temperature data to be ready
int BAR_waitForTemp(BAR* BAR) {
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	73fb      	strb	r3, [r7, #15]
    do {
    	BAR_read(BAR, BAR_STATUS_REG, &status, 1);
 8000930:	f107 020f 	add.w	r2, r7, #15
 8000934:	2301      	movs	r3, #1
 8000936:	2127      	movs	r1, #39	; 0x27
 8000938:	6878      	ldr	r0, [r7, #4]
 800093a:	f7ff fed7 	bl	80006ec <BAR_read>
    } while (!(status & 0x1));
 800093e:	7bfb      	ldrb	r3, [r7, #15]
 8000940:	f003 0301 	and.w	r3, r3, #1
 8000944:	2b00      	cmp	r3, #0
 8000946:	d0f3      	beq.n	8000930 <BAR_waitForTemp+0xc>
    return 0;
 8000948:	2300      	movs	r3, #0
}
 800094a:	4618      	mov	r0, r3
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}

08000952 <BAR_Reset>:

// Software and memory reset
int BAR_Reset(BAR* BAR) {
 8000952:	b580      	push	{r7, lr}
 8000954:	b082      	sub	sp, #8
 8000956:	af00      	add	r7, sp, #0
 8000958:	6078      	str	r0, [r7, #4]
    BAR_send(BAR, BAR_CTRL2_C, BAR_SW_RESET);
 800095a:	2284      	movs	r2, #132	; 0x84
 800095c:	2111      	movs	r1, #17
 800095e:	6878      	ldr	r0, [r7, #4]
 8000960:	f7ff ff8a 	bl	8000878 <BAR_send>

    HAL_Delay(50); // Ensure the reset is complete
 8000964:	2032      	movs	r0, #50	; 0x32
 8000966:	f002 f8f7 	bl	8002b58 <HAL_Delay>
    return 0;
 800096a:	2300      	movs	r3, #0
}
 800096c:	4618      	mov	r0, r3
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}

08000974 <IMU_accelConvert>:

    return temp;
}

//IMU convert
float IMU_accelConvert(uint8_t H_Byte, uint8_t L_Byte) {
 8000974:	b480      	push	{r7}
 8000976:	b085      	sub	sp, #20
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	460a      	mov	r2, r1
 800097e:	71fb      	strb	r3, [r7, #7]
 8000980:	4613      	mov	r3, r2
 8000982:	71bb      	strb	r3, [r7, #6]
	int16_t accel_raw = (int16_t)(H_Byte << 8) + L_Byte; // Combine the two bytes into one 16 bit number. This is already formatted for an int16_t
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	021b      	lsls	r3, r3, #8
 8000988:	b29a      	uxth	r2, r3
 800098a:	79bb      	ldrb	r3, [r7, #6]
 800098c:	b29b      	uxth	r3, r3
 800098e:	4413      	add	r3, r2
 8000990:	b29b      	uxth	r3, r3
 8000992:	81fb      	strh	r3, [r7, #14]

	float accel = (accel_raw*IMU_SCALING_FACTOR_ACCEL)*IMU_g; // Convert to m/s^2
 8000994:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000998:	ee07 3a90 	vmov	s15, r3
 800099c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009a0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80009a4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80009a8:	eddf 6a09 	vldr	s13, [pc, #36]	; 80009d0 <IMU_accelConvert+0x5c>
 80009ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009b0:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80009d4 <IMU_accelConvert+0x60>
 80009b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009b8:	edc7 7a02 	vstr	s15, [r7, #8]

	return accel;
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	ee07 3a90 	vmov	s15, r3
}
 80009c2:	eeb0 0a67 	vmov.f32	s0, s15
 80009c6:	3714      	adds	r7, #20
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	46fffe00 	.word	0x46fffe00
 80009d4:	411ce80a 	.word	0x411ce80a

080009d8 <IMU_gyroConvert>:

//Gyro convert
float IMU_gyroConvert(uint8_t H_Byte, uint8_t L_Byte) {
 80009d8:	b480      	push	{r7}
 80009da:	b085      	sub	sp, #20
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	460a      	mov	r2, r1
 80009e2:	71fb      	strb	r3, [r7, #7]
 80009e4:	4613      	mov	r3, r2
 80009e6:	71bb      	strb	r3, [r7, #6]
	int16_t gyro_raw = (int16_t)(H_Byte << 8) + L_Byte; // Combine the two bytes into one 16 bit number. This is already formatted for an int16_t
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	021b      	lsls	r3, r3, #8
 80009ec:	b29a      	uxth	r2, r3
 80009ee:	79bb      	ldrb	r3, [r7, #6]
 80009f0:	b29b      	uxth	r3, r3
 80009f2:	4413      	add	r3, r2
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	81fb      	strh	r3, [r7, #14]

	float gyro = gyro_raw*IMU_SCALING_FACTOR_GYRO; // Convert to dps
 80009f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80009fc:	ee07 3a90 	vmov	s15, r3
 8000a00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a04:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8000a2c <IMU_gyroConvert+0x54>
 8000a08:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000a0c:	eddf 6a08 	vldr	s13, [pc, #32]	; 8000a30 <IMU_gyroConvert+0x58>
 8000a10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a14:	edc7 7a02 	vstr	s15, [r7, #8]

	return gyro;
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	ee07 3a90 	vmov	s15, r3
}
 8000a1e:	eeb0 0a67 	vmov.f32	s0, s15
 8000a22:	3714      	adds	r7, #20
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	44fa0000 	.word	0x44fa0000
 8000a30:	46fffe00 	.word	0x46fffe00

08000a34 <IMU_read>:

//Read register from IMU
HAL_StatusTypeDef IMU_read(IMU* IMU, uint8_t reg_addr, uint8_t* rx_buffer, uint8_t num_bytes) {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b088      	sub	sp, #32
 8000a38:	af02      	add	r7, sp, #8
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	607a      	str	r2, [r7, #4]
 8000a3e:	461a      	mov	r2, r3
 8000a40:	460b      	mov	r3, r1
 8000a42:	72fb      	strb	r3, [r7, #11]
 8000a44:	4613      	mov	r3, r2
 8000a46:	72bb      	strb	r3, [r7, #10]
	HAL_StatusTypeDef status;

	taskENTER_CRITICAL();
 8000a48:	f008 ff94 	bl	8009974 <vPortEnterCritical>

	HAL_I2C_Master_Transmit(IMU->hi2c, IMU_I2C_ADDR, &reg_addr, 1, IMU->I2C_TIMEOUT);
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	6818      	ldr	r0, [r3, #0]
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	889b      	ldrh	r3, [r3, #4]
 8000a54:	f107 020b 	add.w	r2, r7, #11
 8000a58:	9300      	str	r3, [sp, #0]
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	21d4      	movs	r1, #212	; 0xd4
 8000a5e:	f002 fbf9 	bl	8003254 <HAL_I2C_Master_Transmit>
	status = HAL_I2C_Master_Receive(IMU->hi2c, IMU_I2C_ADDR, (uint8_t *)rx_buffer, num_bytes, IMU->I2C_TIMEOUT);
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	6818      	ldr	r0, [r3, #0]
 8000a66:	7abb      	ldrb	r3, [r7, #10]
 8000a68:	b29a      	uxth	r2, r3
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	889b      	ldrh	r3, [r3, #4]
 8000a6e:	9300      	str	r3, [sp, #0]
 8000a70:	4613      	mov	r3, r2
 8000a72:	687a      	ldr	r2, [r7, #4]
 8000a74:	21d4      	movs	r1, #212	; 0xd4
 8000a76:	f002 fd05 	bl	8003484 <HAL_I2C_Master_Receive>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	75fb      	strb	r3, [r7, #23]

	taskEXIT_CRITICAL();
 8000a7e:	f008 ffa9 	bl	80099d4 <vPortExitCritical>
	return status;
 8000a82:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3718      	adds	r7, #24
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <IMU_write>:

//Write register from IMU
HAL_StatusTypeDef IMU_write(IMU* IMU, uint8_t* tx_buffer, uint8_t num_bytes) {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b088      	sub	sp, #32
 8000a90:	af02      	add	r7, sp, #8
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	60b9      	str	r1, [r7, #8]
 8000a96:	4613      	mov	r3, r2
 8000a98:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status;

	taskENTER_CRITICAL();
 8000a9a:	f008 ff6b 	bl	8009974 <vPortEnterCritical>

	status = HAL_I2C_Master_Transmit(IMU->hi2c, IMU_I2C_ADDR, (uint8_t *)tx_buffer, num_bytes + 1, IMU->I2C_TIMEOUT);
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	6818      	ldr	r0, [r3, #0]
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	b29a      	uxth	r2, r3
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	889b      	ldrh	r3, [r3, #4]
 8000aae:	9300      	str	r3, [sp, #0]
 8000ab0:	4613      	mov	r3, r2
 8000ab2:	68ba      	ldr	r2, [r7, #8]
 8000ab4:	21d4      	movs	r1, #212	; 0xd4
 8000ab6:	f002 fbcd 	bl	8003254 <HAL_I2C_Master_Transmit>
 8000aba:	4603      	mov	r3, r0
 8000abc:	75fb      	strb	r3, [r7, #23]

	taskEXIT_CRITICAL();
 8000abe:	f008 ff89 	bl	80099d4 <vPortExitCritical>
	return status;
 8000ac2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3718      	adds	r7, #24
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <IMU_init>:

//Initialize IMU
int IMU_init(IMU* IMU) {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
	uint8_t buffer[12];

	//Main control register
	//This needs to be set first because this determines how
	//future register controls work
	buffer[0] = IMU_CTRL3_C;
 8000ad4:	2312      	movs	r3, #18
 8000ad6:	733b      	strb	r3, [r7, #12]
	buffer[1] = IMU_DEFAULT_CONF_CTRL3_C;
 8000ad8:	2304      	movs	r3, #4
 8000ada:	737b      	strb	r3, [r7, #13]
	IMU_write(IMU, buffer, 1);
 8000adc:	f107 030c 	add.w	r3, r7, #12
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	6878      	ldr	r0, [r7, #4]
 8000ae6:	f7ff ffd1 	bl	8000a8c <IMU_write>

	//Read WHO_AM_I register
	IMU_read(IMU, IMU_WHO_AM_I_REG_ADDR, buffer, 1);
 8000aea:	f107 020c 	add.w	r2, r7, #12
 8000aee:	2301      	movs	r3, #1
 8000af0:	210f      	movs	r1, #15
 8000af2:	6878      	ldr	r0, [r7, #4]
 8000af4:	f7ff ff9e 	bl	8000a34 <IMU_read>
	//Check if WHO_AM_I register is correct
	if (buffer[0] != IMU_WHO_AM_I_REG_VAL) {
 8000af8:	7b3b      	ldrb	r3, [r7, #12]
 8000afa:	2b6c      	cmp	r3, #108	; 0x6c
 8000afc:	d002      	beq.n	8000b04 <IMU_init+0x38>
		return -1;
 8000afe:	f04f 33ff 	mov.w	r3, #4294967295
 8000b02:	e016      	b.n	8000b32 <IMU_init+0x66>
	}

	//Set up accelerometer
	buffer[0] = IMU_CTRL1_XL;
 8000b04:	2310      	movs	r3, #16
 8000b06:	733b      	strb	r3, [r7, #12]
	buffer[1] = IMU_DEFAULT_CONF_ACCEL; // 01010000 208hz, + or - 4g range
 8000b08:	2350      	movs	r3, #80	; 0x50
 8000b0a:	737b      	strb	r3, [r7, #13]
	IMU_write(IMU, buffer, 1);
 8000b0c:	f107 030c 	add.w	r3, r7, #12
 8000b10:	2201      	movs	r2, #1
 8000b12:	4619      	mov	r1, r3
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f7ff ffb9 	bl	8000a8c <IMU_write>

	//Set up gyroscope
	buffer[0] = IMU_CTRL2_G;
 8000b1a:	2311      	movs	r3, #17
 8000b1c:	733b      	strb	r3, [r7, #12]
	buffer[1] = IMU_DEFAULT_CONF_GYRO; // 01011100 208hz, + or - 2000dps range
 8000b1e:	235c      	movs	r3, #92	; 0x5c
 8000b20:	737b      	strb	r3, [r7, #13]
	IMU_write(IMU, buffer, 1);
 8000b22:	f107 030c 	add.w	r3, r7, #12
 8000b26:	2201      	movs	r2, #1
 8000b28:	4619      	mov	r1, r3
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f7ff ffae 	bl	8000a8c <IMU_write>
	buffer[0] = IMU_CTRL10_C;
	buffer[1] = IMU_DEFAULT_CONF_CTRL10_C;
	IMU_write(IMU, buffer, 1);
	*/

	return 0;
 8000b30:	2300      	movs	r3, #0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3718      	adds	r7, #24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <IMU_getAccel>:

//Get acceleration from IMU
int IMU_getAccel(IMU* IMU, Accel* accel) {
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b084      	sub	sp, #16
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
 8000b42:	6039      	str	r1, [r7, #0]
	uint8_t buf[6];

	IMU_read(IMU, IMU_OUTX_L_A, buf, 6);
 8000b44:	f107 0208 	add.w	r2, r7, #8
 8000b48:	2306      	movs	r3, #6
 8000b4a:	2128      	movs	r1, #40	; 0x28
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f7ff ff71 	bl	8000a34 <IMU_read>
	//We are able to do a single read because when doing multiple reads, it will automatically increment the register address
	//This is good not only for code duplication, but also reduces overhead
	//The option to disable this is in the datasheet under CTRL3_C
	accel->XL_x = IMU_accelConvert(buf[1], buf[0]) + IMU->XL_x_offset;
 8000b52:	7a7b      	ldrb	r3, [r7, #9]
 8000b54:	7a3a      	ldrb	r2, [r7, #8]
 8000b56:	4611      	mov	r1, r2
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff ff0b 	bl	8000974 <IMU_accelConvert>
 8000b5e:	eeb0 7a40 	vmov.f32	s14, s0
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	edd3 7a02 	vldr	s15, [r3, #8]
 8000b68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	edc3 7a00 	vstr	s15, [r3]
	accel->XL_y = IMU_accelConvert(buf[3], buf[2]) + IMU->XL_y_offset;
 8000b72:	7afb      	ldrb	r3, [r7, #11]
 8000b74:	7aba      	ldrb	r2, [r7, #10]
 8000b76:	4611      	mov	r1, r2
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff fefb 	bl	8000974 <IMU_accelConvert>
 8000b7e:	eeb0 7a40 	vmov.f32	s14, s0
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	edd3 7a03 	vldr	s15, [r3, #12]
 8000b88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	edc3 7a01 	vstr	s15, [r3, #4]
	accel->XL_z = IMU_accelConvert(buf[5], buf[4]) + IMU->XL_z_offset;
 8000b92:	7b7b      	ldrb	r3, [r7, #13]
 8000b94:	7b3a      	ldrb	r2, [r7, #12]
 8000b96:	4611      	mov	r1, r2
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff feeb 	bl	8000974 <IMU_accelConvert>
 8000b9e:	eeb0 7a40 	vmov.f32	s14, s0
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	edd3 7a04 	vldr	s15, [r3, #16]
 8000ba8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	edc3 7a02 	vstr	s15, [r3, #8]

	return 0;
 8000bb2:	2300      	movs	r3, #0
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3710      	adds	r7, #16
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <IMU_getAngRate>:

//Get angular rate from IMU
int IMU_getAngRate(IMU* IMU, AngRate* AngRate) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	6039      	str	r1, [r7, #0]
	uint8_t buf[6];

	IMU_read(IMU, IMU_OUTX_L_G, buf, 6);
 8000bc6:	f107 0208 	add.w	r2, r7, #8
 8000bca:	2306      	movs	r3, #6
 8000bcc:	2122      	movs	r1, #34	; 0x22
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f7ff ff30 	bl	8000a34 <IMU_read>
	//Same as before, we can do a single read
	AngRate->G_x = IMU_gyroConvert(buf[1], buf[0])+IMU->G_x_offset;
 8000bd4:	7a7b      	ldrb	r3, [r7, #9]
 8000bd6:	7a3a      	ldrb	r2, [r7, #8]
 8000bd8:	4611      	mov	r1, r2
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff fefc 	bl	80009d8 <IMU_gyroConvert>
 8000be0:	eeb0 7a40 	vmov.f32	s14, s0
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	edd3 7a05 	vldr	s15, [r3, #20]
 8000bea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	edc3 7a00 	vstr	s15, [r3]
	AngRate->G_y = IMU_gyroConvert(buf[3], buf[2])+IMU->G_y_offset;
 8000bf4:	7afb      	ldrb	r3, [r7, #11]
 8000bf6:	7aba      	ldrb	r2, [r7, #10]
 8000bf8:	4611      	mov	r1, r2
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff feec 	bl	80009d8 <IMU_gyroConvert>
 8000c00:	eeb0 7a40 	vmov.f32	s14, s0
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	edd3 7a06 	vldr	s15, [r3, #24]
 8000c0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	edc3 7a01 	vstr	s15, [r3, #4]
	AngRate->G_z = IMU_gyroConvert(buf[5], buf[4])+IMU->G_z_offset;
 8000c14:	7b7b      	ldrb	r3, [r7, #13]
 8000c16:	7b3a      	ldrb	r2, [r7, #12]
 8000c18:	4611      	mov	r1, r2
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff fedc 	bl	80009d8 <IMU_gyroConvert>
 8000c20:	eeb0 7a40 	vmov.f32	s14, s0
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	edd3 7a07 	vldr	s15, [r3, #28]
 8000c2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	edc3 7a02 	vstr	s15, [r3, #8]

	return 0;
 8000c34:	2300      	movs	r3, #0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3710      	adds	r7, #16
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <spi_transmit>:
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param tx         <uint8_t*>           Data buffer to transmit
 * @param size       <uint16_t>           Number of bytes to transmit
 */
static void spi_transmit(W25N01GV_Flash *flash, uint8_t *tx, uint16_t size) {
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b084      	sub	sp, #16
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	60f8      	str	r0, [r7, #12]
 8000c46:	60b9      	str	r1, [r7, #8]
 8000c48:	4613      	mov	r3, r2
 8000c4a:	80fb      	strh	r3, [r7, #6]

	taskENTER_CRITICAL();
 8000c4c:	f008 fe92 	bl	8009974 <vPortEnterCritical>
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_ACTIVE);  // Select chip
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	4619      	mov	r1, r3
 8000c60:	f002 fa42 	bl	80030e8 <HAL_GPIO_WritePin>
	// Transmit data and store the status code
	flash->last_HAL_status = HAL_SPI_Transmit(flash->SPI_bus, tx, size, W25N01GV_SPI_TIMEOUT);
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8000c6a:	88fa      	ldrh	r2, [r7, #6]
 8000c6c:	23ff      	movs	r3, #255	; 0xff
 8000c6e:	68b9      	ldr	r1, [r7, #8]
 8000c70:	f005 fee2 	bl	8006a38 <HAL_SPI_Transmit>
 8000c74:	4603      	mov	r3, r0
 8000c76:	461a      	mov	r2, r3
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_INACTIVE);  // Release chip
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	f002 fa2b 	bl	80030e8 <HAL_GPIO_WritePin>
	taskEXIT_CRITICAL();
 8000c92:	f008 fe9f 	bl	80099d4 <vPortExitCritical>

}
 8000c96:	bf00      	nop
 8000c98:	3710      	adds	r7, #16
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <spi_transmit_receive>:
 * @param tx_size    <uint16_t>           Number of bytes to transmit
 * @param rx         <uint8_t*>           Buffer to receive data
 * @param rx_size    <uint16_t>           Number of bytes to receive
 */
static void spi_transmit_receive(W25N01GV_Flash *flash, uint8_t *tx,
		uint16_t tx_size,	uint8_t *rx, uint16_t rx_size) {
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b084      	sub	sp, #16
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	60f8      	str	r0, [r7, #12]
 8000ca6:	60b9      	str	r1, [r7, #8]
 8000ca8:	603b      	str	r3, [r7, #0]
 8000caa:	4613      	mov	r3, r2
 8000cac:	80fb      	strh	r3, [r7, #6]

	taskENTER_CRITICAL();
 8000cae:	f008 fe61 	bl	8009974 <vPortEnterCritical>
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_ACTIVE);  // Select chip
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	f002 fa11 	bl	80030e8 <HAL_GPIO_WritePin>
	// Transmit/receive, and store the status code
	flash->last_HAL_status = HAL_SPI_Transmit(flash->SPI_bus, tx, tx_size, W25N01GV_SPI_TIMEOUT);
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8000ccc:	88fa      	ldrh	r2, [r7, #6]
 8000cce:	23ff      	movs	r3, #255	; 0xff
 8000cd0:	68b9      	ldr	r1, [r7, #8]
 8000cd2:	f005 feb1 	bl	8006a38 <HAL_SPI_Transmit>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	461a      	mov	r2, r3
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	flash->last_HAL_status = HAL_SPI_Receive(flash->SPI_bus, rx, rx_size, W25N01GV_SPI_TIMEOUT);
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8000ce6:	8b3a      	ldrh	r2, [r7, #24]
 8000ce8:	23ff      	movs	r3, #255	; 0xff
 8000cea:	6839      	ldr	r1, [r7, #0]
 8000cec:	f006 f892 	bl	8006e14 <HAL_SPI_Receive>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	// TODO the Transmit status will get lost, should it still be stored like this?
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_INACTIVE);  // Release chip
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 8000d06:	2201      	movs	r2, #1
 8000d08:	4619      	mov	r1, r3
 8000d0a:	f002 f9ed 	bl	80030e8 <HAL_GPIO_WritePin>
	taskEXIT_CRITICAL();
 8000d0e:	f008 fe61 	bl	80099d4 <vPortExitCritical>

}
 8000d12:	bf00      	nop
 8000d14:	3710      	adds	r7, #16
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <read_status_register>:
 *
 * @param flash        <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param register_adr <uint8_t>            The address of the status register to be read
 * @retval The contents of the 8 bit status register specified by the user
 */
static uint8_t read_status_register(W25N01GV_Flash *flash, uint8_t register_adr) {
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b086      	sub	sp, #24
 8000d1e:	af02      	add	r7, sp, #8
 8000d20:	6078      	str	r0, [r7, #4]
 8000d22:	460b      	mov	r3, r1
 8000d24:	70fb      	strb	r3, [r7, #3]
	uint8_t tx[2] = {W25N01GV_READ_STATUS_REGISTER, register_adr};
 8000d26:	230f      	movs	r3, #15
 8000d28:	733b      	strb	r3, [r7, #12]
 8000d2a:	78fb      	ldrb	r3, [r7, #3]
 8000d2c:	737b      	strb	r3, [r7, #13]
	uint8_t rx[1];

	spi_transmit_receive(flash, tx, 2, rx, 1);
 8000d2e:	f107 0308 	add.w	r3, r7, #8
 8000d32:	f107 010c 	add.w	r1, r7, #12
 8000d36:	2201      	movs	r2, #1
 8000d38:	9200      	str	r2, [sp, #0]
 8000d3a:	2202      	movs	r2, #2
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f7ff ffae 	bl	8000c9e <spi_transmit_receive>

	return *rx;
 8000d42:	7a3b      	ldrb	r3, [r7, #8]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3710      	adds	r7, #16
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <flash_is_busy>:
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @retval 0 if the device is busy,  nonzero integer (1) if it's not.
 *
 * TODO: make sure if flash is broken/not plugged in it doens't return the wrong value/cause infinite loops
 */
static uint8_t flash_is_busy(W25N01GV_Flash *flash) {
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
	uint8_t status_register = read_status_register(flash, W25N01GV_SR3_STATUS_REG_ADR);
 8000d54:	21c0      	movs	r1, #192	; 0xc0
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f7ff ffdf 	bl	8000d1a <read_status_register>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	73fb      	strb	r3, [r7, #15]
	return status_register & W25N01GV_SR3_OPERATION_IN_PROGRESS;
 8000d60:	7bfb      	ldrb	r3, [r7, #15]
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	b2db      	uxtb	r3, r3
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3710      	adds	r7, #16
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <wait_for_operation>:
 * right now it's a duct tape solution
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param timeout    <uint32_t>           Maximum time to wait in nanoseconds.
 */
static void wait_for_operation(W25N01GV_Flash *flash, uint32_t timeout) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	6039      	str	r1, [r7, #0]
	uint32_t count = 0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
	while (flash_is_busy(flash) && count < 6*timeout) {
 8000d7e:	e002      	b.n	8000d86 <wait_for_operation+0x16>
		++count;
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	3301      	adds	r3, #1
 8000d84:	60fb      	str	r3, [r7, #12]
	while (flash_is_busy(flash) && count < 6*timeout) {
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f7ff ffe0 	bl	8000d4c <flash_is_busy>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d008      	beq.n	8000da4 <wait_for_operation+0x34>
 8000d92:	683a      	ldr	r2, [r7, #0]
 8000d94:	4613      	mov	r3, r2
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	4413      	add	r3, r2
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d3ed      	bcc.n	8000d80 <wait_for_operation+0x10>
	}
}
 8000da4:	bf00      	nop
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <write_status_register>:
 * @param register_adr       <uint8_t>            The address of the status register to be written to
 * @param register_write_val <uint8_t>            The 8bit value to write to the status register
 * 	Note: this will overwrite all values in the register
 */
static void write_status_register(W25N01GV_Flash *flash, uint8_t register_adr,
		uint8_t register_write_val) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	460b      	mov	r3, r1
 8000db6:	70fb      	strb	r3, [r7, #3]
 8000db8:	4613      	mov	r3, r2
 8000dba:	70bb      	strb	r3, [r7, #2]
	uint8_t tx[3] = {W25N01GV_WRITE_STATUS_REGISTER, register_adr, register_write_val};
 8000dbc:	231f      	movs	r3, #31
 8000dbe:	733b      	strb	r3, [r7, #12]
 8000dc0:	78fb      	ldrb	r3, [r7, #3]
 8000dc2:	737b      	strb	r3, [r7, #13]
 8000dc4:	78bb      	ldrb	r3, [r7, #2]
 8000dc6:	73bb      	strb	r3, [r7, #14]

	spi_transmit(flash, tx, 3);
 8000dc8:	f107 030c 	add.w	r3, r7, #12
 8000dcc:	2203      	movs	r2, #3
 8000dce:	4619      	mov	r1, r3
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f7ff ff34 	bl	8000c3e <spi_transmit>

	wait_for_operation(flash, W25N01GV_WRITE_STATUS_REGISTER_TIME_NS);
 8000dd6:	2132      	movs	r1, #50	; 0x32
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f7ff ffc9 	bl	8000d70 <wait_for_operation>
}
 8000dde:	bf00      	nop
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <load_page>:
 * datasheet pg 38
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param page_num   <uint16_t>           Page number of data to load to the device's buffer
 */
static void load_page(W25N01GV_Flash *flash, uint16_t page_num) {
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b084      	sub	sp, #16
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
 8000dee:	460b      	mov	r3, r1
 8000df0:	807b      	strh	r3, [r7, #2]
	uint8_t page_num_8bit_array[2] = W25N01GV_UNPACK_UINT16_TO_2_BYTES(page_num);
 8000df2:	887b      	ldrh	r3, [r7, #2]
 8000df4:	0a1b      	lsrs	r3, r3, #8
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	733b      	strb	r3, [r7, #12]
 8000dfc:	887b      	ldrh	r3, [r7, #2]
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	737b      	strb	r3, [r7, #13]
	uint8_t tx[4] = {W25N01GV_PAGE_DATA_READ, 0, page_num_8bit_array[0], page_num_8bit_array[1]};  // 2nd byte is unused
 8000e02:	2313      	movs	r3, #19
 8000e04:	723b      	strb	r3, [r7, #8]
 8000e06:	2300      	movs	r3, #0
 8000e08:	727b      	strb	r3, [r7, #9]
 8000e0a:	7b3b      	ldrb	r3, [r7, #12]
 8000e0c:	72bb      	strb	r3, [r7, #10]
 8000e0e:	7b7b      	ldrb	r3, [r7, #13]
 8000e10:	72fb      	strb	r3, [r7, #11]

	spi_transmit(flash, tx, 4);
 8000e12:	f107 0308 	add.w	r3, r7, #8
 8000e16:	2204      	movs	r2, #4
 8000e18:	4619      	mov	r1, r3
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f7ff ff0f 	bl	8000c3e <spi_transmit>

	// TODO currently assumes ECC is always on, but needs to be more flexible
  wait_for_operation(flash, W25N01GV_READ_PAGE_DATA_ECC_ON_MAX_TIME_US * 1000);  // Wait for the page to load
 8000e20:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f7ff ffa3 	bl	8000d70 <wait_for_operation>
}
 8000e2a:	bf00      	nop
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <unlock_flash>:
 *
 * datasheet pg 15, 21
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void unlock_flash(W25N01GV_Flash *flash) {
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b084      	sub	sp, #16
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
	// Read the current contents of the protection register
	uint8_t protection_register = read_status_register(flash, W25N01GV_SR1_PROTECTION_REG_ADR);
 8000e3a:	21a0      	movs	r1, #160	; 0xa0
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f7ff ff6c 	bl	8000d1a <read_status_register>
 8000e42:	4603      	mov	r3, r0
 8000e44:	73fb      	strb	r3, [r7, #15]

	// Remove the block protect bits, and only keep the 3 non-protect bits, if they're already enabled.
	uint8_t unlocked_protection_register = protection_register & ~(W25N01GV_SR1_BLOCK_PROTECT_BP3
 8000e46:	7bfb      	ldrb	r3, [r7, #15]
 8000e48:	f023 037c 	bic.w	r3, r3, #124	; 0x7c
 8000e4c:	73bb      	strb	r3, [r7, #14]
			| W25N01GV_SR1_BLOCK_PROTECT_BP1
			| W25N01GV_SR1_BLOCK_PROTECT_BP0
			| W25N01GV_SR1_BLOCK_PROTECT_TB);

	// Write the new value of the status register block protect bits off
	write_status_register(flash, W25N01GV_SR1_PROTECTION_REG_ADR, unlocked_protection_register);
 8000e4e:	7bbb      	ldrb	r3, [r7, #14]
 8000e50:	461a      	mov	r2, r3
 8000e52:	21a0      	movs	r1, #160	; 0xa0
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f7ff ffa9 	bl	8000dac <write_status_register>
}
 8000e5a:	bf00      	nop
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <lock_flash>:
 *
 * datasheet pg 15, 21
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void lock_flash(W25N01GV_Flash *flash) {
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b084      	sub	sp, #16
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
	// Read the current contents of the protection register
	uint8_t protection_register = read_status_register(flash, W25N01GV_SR1_PROTECTION_REG_ADR);
 8000e6a:	21a0      	movs	r1, #160	; 0xa0
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f7ff ff54 	bl	8000d1a <read_status_register>
 8000e72:	4603      	mov	r3, r0
 8000e74:	73fb      	strb	r3, [r7, #15]

	// Enabling bits BP3 and BP2 and disabling the others will lock the entire 128MB memory array
	// First remove all protection bits
	uint8_t locked_protection_register = protection_register & ~(W25N01GV_SR1_BLOCK_PROTECT_BP3
 8000e76:	7bfb      	ldrb	r3, [r7, #15]
 8000e78:	f023 037c 	bic.w	r3, r3, #124	; 0x7c
 8000e7c:	73bb      	strb	r3, [r7, #14]
			| W25N01GV_SR1_BLOCK_PROTECT_BP1
			| W25N01GV_SR1_BLOCK_PROTECT_BP0
			| W25N01GV_SR1_BLOCK_PROTECT_TB);

	// Then add on the bits that are needed to lock flash
	locked_protection_register = protection_register
 8000e7e:	7bfb      	ldrb	r3, [r7, #15]
 8000e80:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000e84:	73bb      	strb	r3, [r7, #14]
			| (W25N01GV_SR1_BLOCK_PROTECT_BP3 | W25N01GV_SR1_BLOCK_PROTECT_BP2);

	write_status_register(flash, W25N01GV_SR1_PROTECTION_REG_ADR, locked_protection_register);
 8000e86:	7bbb      	ldrb	r3, [r7, #14]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	21a0      	movs	r1, #160	; 0xa0
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f7ff ff8d 	bl	8000dac <write_status_register>
}
 8000e92:	bf00      	nop
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <enable_write>:
 *
 * datasheet pg 30
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void enable_write(W25N01GV_Flash *flash) {
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b084      	sub	sp, #16
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
	uint8_t tx[1] = { W25N01GV_WRITE_ENABLE };
 8000ea2:	2306      	movs	r3, #6
 8000ea4:	733b      	strb	r3, [r7, #12]
	spi_transmit(flash, tx, 1);
 8000ea6:	f107 030c 	add.w	r3, r7, #12
 8000eaa:	2201      	movs	r2, #1
 8000eac:	4619      	mov	r1, r3
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f7ff fec5 	bl	8000c3e <spi_transmit>
}
 8000eb4:	bf00      	nop
 8000eb6:	3710      	adds	r7, #16
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <disable_write>:
 *
 * datasheet pg 30
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void disable_write(W25N01GV_Flash *flash) {
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
	uint8_t tx[1] = { W25N01GV_WRITE_DISABLE };
 8000ec4:	2304      	movs	r3, #4
 8000ec6:	733b      	strb	r3, [r7, #12]
	spi_transmit(flash, tx, 1);
 8000ec8:	f107 030c 	add.w	r3, r7, #12
 8000ecc:	2201      	movs	r2, #1
 8000ece:	4619      	mov	r1, r3
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f7ff feb4 	bl	8000c3e <spi_transmit>
}
 8000ed6:	bf00      	nop
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <write_page_to_buffer>:
 * @param data       <uint8_t*>           Data array containing data to write to flash
 * @param num_bytes  <uint16_t>           Number of bytes to write
 * @param column_adr <uint16_t>           Byte in buffer to start writing at
 */
static void write_page_to_buffer(W25N01GV_Flash *flash, uint8_t *data,
		uint16_t num_bytes, uint16_t column_adr) {
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b086      	sub	sp, #24
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	60f8      	str	r0, [r7, #12]
 8000ee6:	60b9      	str	r1, [r7, #8]
 8000ee8:	4611      	mov	r1, r2
 8000eea:	461a      	mov	r2, r3
 8000eec:	460b      	mov	r3, r1
 8000eee:	80fb      	strh	r3, [r7, #6]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	80bb      	strh	r3, [r7, #4]

	uint8_t column_adr_8bit_array[2] = W25N01GV_UNPACK_UINT16_TO_2_BYTES(column_adr);
 8000ef4:	88bb      	ldrh	r3, [r7, #4]
 8000ef6:	0a1b      	lsrs	r3, r3, #8
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	753b      	strb	r3, [r7, #20]
 8000efe:	88bb      	ldrh	r3, [r7, #4]
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	757b      	strb	r3, [r7, #21]
	uint8_t tx1[3] = {W25N01GV_LOAD_PROGRAM_DATA, column_adr_8bit_array[0], column_adr_8bit_array[1]};
 8000f04:	2302      	movs	r3, #2
 8000f06:	743b      	strb	r3, [r7, #16]
 8000f08:	7d3b      	ldrb	r3, [r7, #20]
 8000f0a:	747b      	strb	r3, [r7, #17]
 8000f0c:	7d7b      	ldrb	r3, [r7, #21]
 8000f0e:	74bb      	strb	r3, [r7, #18]

	// Ignore all data that would be written to column 2048 and after.
	// You don't want to overwrite the extra memory at the end of the page.
	// (If the onboard ECC is turned on, this happens automatically, but just in case)
	if (num_bytes > W25N01GV_BYTES_PER_PAGE)
 8000f10:	88fb      	ldrh	r3, [r7, #6]
 8000f12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000f16:	d902      	bls.n	8000f1e <write_page_to_buffer+0x40>
		num_bytes = W25N01GV_BYTES_PER_PAGE;
 8000f18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f1c:	80fb      	strh	r3, [r7, #6]

	// Not using spi_transmit() because I didn't want to mess with combining the tx arrays
	taskENTER_CRITICAL();
 8000f1e:	f008 fd29 	bl	8009974 <vPortEnterCritical>
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_ACTIVE);
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 8000f2e:	2200      	movs	r2, #0
 8000f30:	4619      	mov	r1, r3
 8000f32:	f002 f8d9 	bl	80030e8 <HAL_GPIO_WritePin>
	flash->last_HAL_status = HAL_SPI_Transmit(flash->SPI_bus, tx1, 3, W25N01GV_SPI_TIMEOUT);
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8000f3c:	f107 0110 	add.w	r1, r7, #16
 8000f40:	23ff      	movs	r3, #255	; 0xff
 8000f42:	2203      	movs	r2, #3
 8000f44:	f005 fd78 	bl	8006a38 <HAL_SPI_Transmit>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	flash->last_HAL_status = HAL_SPI_Transmit(flash->SPI_bus, data, num_bytes, W25N01GV_SPI_TIMEOUT);
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8000f58:	88fa      	ldrh	r2, [r7, #6]
 8000f5a:	23ff      	movs	r3, #255	; 0xff
 8000f5c:	68b9      	ldr	r1, [r7, #8]
 8000f5e:	f005 fd6b 	bl	8006a38 <HAL_SPI_Transmit>
 8000f62:	4603      	mov	r3, r0
 8000f64:	461a      	mov	r2, r3
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_INACTIVE);
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 8000f78:	2201      	movs	r2, #1
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	f002 f8b4 	bl	80030e8 <HAL_GPIO_WritePin>
	taskEXIT_CRITICAL();
 8000f80:	f008 fd28 	bl	80099d4 <vPortExitCritical>
}
 8000f84:	bf00      	nop
 8000f86:	3718      	adds	r7, #24
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <program_buffer_to_memory>:
 * datasheet pg 37
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param page_adr   <uint16_t>           The page for the buffer to be written to.
 */
static void program_buffer_to_memory(W25N01GV_Flash *flash, uint16_t page_adr) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	460b      	mov	r3, r1
 8000f96:	807b      	strh	r3, [r7, #2]
	uint8_t page_adr_8bit_array[2] = W25N01GV_UNPACK_UINT16_TO_2_BYTES(page_adr);
 8000f98:	887b      	ldrh	r3, [r7, #2]
 8000f9a:	0a1b      	lsrs	r3, r3, #8
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	733b      	strb	r3, [r7, #12]
 8000fa2:	887b      	ldrh	r3, [r7, #2]
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	737b      	strb	r3, [r7, #13]
	uint8_t tx[4] = {W25N01GV_PROGRAM_EXECUTE, 0, page_adr_8bit_array[0], page_adr_8bit_array[1]};  // 2nd byte unused
 8000fa8:	2310      	movs	r3, #16
 8000faa:	723b      	strb	r3, [r7, #8]
 8000fac:	2300      	movs	r3, #0
 8000fae:	727b      	strb	r3, [r7, #9]
 8000fb0:	7b3b      	ldrb	r3, [r7, #12]
 8000fb2:	72bb      	strb	r3, [r7, #10]
 8000fb4:	7b7b      	ldrb	r3, [r7, #13]
 8000fb6:	72fb      	strb	r3, [r7, #11]

	spi_transmit(flash, tx, 4);
 8000fb8:	f107 0308 	add.w	r3, r7, #8
 8000fbc:	2204      	movs	r2, #4
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f7ff fe3c 	bl	8000c3e <spi_transmit>
	wait_for_operation(flash, W25N01GV_PAGE_PROGRAM_MAX_TIME_US * 1000);	 // Wait for the data to be written to memory
 8000fc6:	4904      	ldr	r1, [pc, #16]	; (8000fd8 <program_buffer_to_memory+0x4c>)
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f7ff fed1 	bl	8000d70 <wait_for_operation>
}
 8000fce:	bf00      	nop
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	000aae60 	.word	0x000aae60

08000fdc <get_write_failure_status>:
 * datasheet pg 20
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @retval 0x08 if it detects a write failure, 0 if no write failures were detected
 */
static uint8_t get_write_failure_status(W25N01GV_Flash *flash) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	// If it can't read from flash, it will automatically return a write failure
	if (ping_flash(flash)) {
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f000 fb0d 	bl	8001604 <ping_flash>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d00d      	beq.n	800100c <get_write_failure_status+0x30>
		uint8_t status_register = read_status_register(flash, W25N01GV_SR3_STATUS_REG_ADR);
 8000ff0:	21c0      	movs	r1, #192	; 0xc0
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f7ff fe91 	bl	8000d1a <read_status_register>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	73fb      	strb	r3, [r7, #15]
		flash->last_write_failure_status = status_register & W25N01GV_SR3_PROGRAM_FAILURE;
 8000ffc:	7bfb      	ldrb	r3, [r7, #15]
 8000ffe:	f003 0308 	and.w	r3, r3, #8
 8001002:	b2da      	uxtb	r2, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
 800100a:	e003      	b.n	8001014 <get_write_failure_status+0x38>
	}
	else {
		flash->last_write_failure_status = W25N01GV_SR3_PROGRAM_FAILURE;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2208      	movs	r2, #8
 8001010:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
	}

	return flash->last_write_failure_status;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f893 3216 	ldrb.w	r3, [r3, #534]	; 0x216
}
 800101a:	4618      	mov	r0, r3
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <get_erase_failure_status>:
 * datasheet pg 20
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @retval 0x04 if it detects an erase failure, 0 if no erase failures were detected
 */
static uint8_t get_erase_failure_status(W25N01GV_Flash *flash) {
 8001022:	b580      	push	{r7, lr}
 8001024:	b084      	sub	sp, #16
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
	// If it can't read from flash, it will automatically return an erase failure
	if (ping_flash(flash)) {
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f000 faea 	bl	8001604 <ping_flash>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d00d      	beq.n	8001052 <get_erase_failure_status+0x30>
		uint8_t status_register = read_status_register(flash, W25N01GV_SR3_STATUS_REG_ADR);
 8001036:	21c0      	movs	r1, #192	; 0xc0
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f7ff fe6e 	bl	8000d1a <read_status_register>
 800103e:	4603      	mov	r3, r0
 8001040:	73fb      	strb	r3, [r7, #15]
		flash->last_erase_failure_status = status_register & W25N01GV_SR3_ERASE_FAILURE;
 8001042:	7bfb      	ldrb	r3, [r7, #15]
 8001044:	f003 0304 	and.w	r3, r3, #4
 8001048:	b2da      	uxtb	r2, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217
 8001050:	e003      	b.n	800105a <get_erase_failure_status+0x38>
	}
	else {
		flash->last_erase_failure_status = W25N01GV_SR3_ERASE_FAILURE;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2204      	movs	r2, #4
 8001056:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217
	}

	return flash->last_erase_failure_status;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f893 3217 	ldrb.w	r3, [r3, #535]	; 0x217

}
 8001060:	4618      	mov	r0, r3
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <erase_block>:
 * erase (between 0 and W25N01GV_NUM_PAGES-1), not the block number (0 to 1023).
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param page_adr   <uint16_t>           Address of the page whose block should be erased
 */
static void erase_block(W25N01GV_Flash *flash, uint16_t page_adr) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	460b      	mov	r3, r1
 8001072:	807b      	strh	r3, [r7, #2]
	enable_write(flash);	// Set WEL bit high, it will automatically be set back to 0 after the command executes
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f7ff ff10 	bl	8000e9a <enable_write>

	uint8_t page_adr_8bit_array[2] = W25N01GV_UNPACK_UINT16_TO_2_BYTES(page_adr);
 800107a:	887b      	ldrh	r3, [r7, #2]
 800107c:	0a1b      	lsrs	r3, r3, #8
 800107e:	b29b      	uxth	r3, r3
 8001080:	b2db      	uxtb	r3, r3
 8001082:	733b      	strb	r3, [r7, #12]
 8001084:	887b      	ldrh	r3, [r7, #2]
 8001086:	b2db      	uxtb	r3, r3
 8001088:	737b      	strb	r3, [r7, #13]
	uint8_t tx[4] = {W25N01GV_ERASE_BLOCK, 0, page_adr_8bit_array[0], page_adr_8bit_array[1]};	// 2nd byte unused
 800108a:	23d8      	movs	r3, #216	; 0xd8
 800108c:	723b      	strb	r3, [r7, #8]
 800108e:	2300      	movs	r3, #0
 8001090:	727b      	strb	r3, [r7, #9]
 8001092:	7b3b      	ldrb	r3, [r7, #12]
 8001094:	72bb      	strb	r3, [r7, #10]
 8001096:	7b7b      	ldrb	r3, [r7, #13]
 8001098:	72fb      	strb	r3, [r7, #11]
	spi_transmit(flash, tx, 4);
 800109a:	f107 0308 	add.w	r3, r7, #8
 800109e:	2204      	movs	r2, #4
 80010a0:	4619      	mov	r1, r3
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f7ff fdcb 	bl	8000c3e <spi_transmit>

	disable_write(flash);	// Disable WEL just in case the erase block command doens't execute
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff ff07 	bl	8000ebc <disable_write>

	wait_for_operation(flash, W25N01GV_BLOCK_ERASE_MAX_TIME_MS * 1000000);  // Wait for it to finish erasing
 80010ae:	4905      	ldr	r1, [pc, #20]	; (80010c4 <erase_block+0x5c>)
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f7ff fe5d 	bl	8000d70 <wait_for_operation>

	get_erase_failure_status(flash);
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f7ff ffb3 	bl	8001022 <get_erase_failure_status>
}
 80010bc:	bf00      	nop
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	003d0900 	.word	0x003d0900

080010c8 <get_ECC_status>:
 *
 * datasheet pg 20
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void get_ECC_status(W25N01GV_Flash *flash) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]

	// If it can read from flash properly, check the ECC bits as normal
	if (ping_flash(flash)) {
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f000 fa97 	bl	8001604 <ping_flash>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d033      	beq.n	8001144 <get_ECC_status+0x7c>
		uint8_t status_register, ECC1, ECC0;

		status_register = read_status_register(flash, W25N01GV_SR3_STATUS_REG_ADR);
 80010dc:	21c0      	movs	r1, #192	; 0xc0
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff fe1b 	bl	8000d1a <read_status_register>
 80010e4:	4603      	mov	r3, r0
 80010e6:	73fb      	strb	r3, [r7, #15]
		ECC1 = status_register & W25N01GV_SR3_ECC_STATUS_BIT_1;
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
 80010ea:	f003 0320 	and.w	r3, r3, #32
 80010ee:	73bb      	strb	r3, [r7, #14]
		ECC0 = status_register & W25N01GV_SR3_ECC_STATUS_BIT_0;
 80010f0:	7bfb      	ldrb	r3, [r7, #15]
 80010f2:	f003 0310 	and.w	r3, r3, #16
 80010f6:	737b      	strb	r3, [r7, #13]

		// Return status according to table on datasheet pg 20
		if (!ECC1 && !ECC0)
 80010f8:	7bbb      	ldrb	r3, [r7, #14]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d107      	bne.n	800110e <get_ECC_status+0x46>
 80010fe:	7b7b      	ldrb	r3, [r7, #13]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d104      	bne.n	800110e <get_ECC_status+0x46>
			flash->last_read_ECC_status = SUCCESS_NO_CORRECTIONS;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
 800110c:	e01f      	b.n	800114e <get_ECC_status+0x86>
		else if (!ECC1 && ECC0)
 800110e:	7bbb      	ldrb	r3, [r7, #14]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d107      	bne.n	8001124 <get_ECC_status+0x5c>
 8001114:	7b7b      	ldrb	r3, [r7, #13]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d004      	beq.n	8001124 <get_ECC_status+0x5c>
			flash->last_read_ECC_status = SUCCESS_WITH_CORRECTIONS;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2201      	movs	r2, #1
 800111e:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
 8001122:	e014      	b.n	800114e <get_ECC_status+0x86>
		else if (ECC1 && !ECC0)
 8001124:	7bbb      	ldrb	r3, [r7, #14]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d007      	beq.n	800113a <get_ECC_status+0x72>
 800112a:	7b7b      	ldrb	r3, [r7, #13]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d104      	bne.n	800113a <get_ECC_status+0x72>
			flash->last_read_ECC_status = ERROR_ONE_PAGE;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2202      	movs	r2, #2
 8001134:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
 8001138:	e009      	b.n	800114e <get_ECC_status+0x86>
		else  // else if (ECC1 && ECC0)
			flash->last_read_ECC_status = ERROR_MULTIPLE_PAGES;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2203      	movs	r2, #3
 800113e:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215

	}
	else {  // Otherwise record the read error
		flash->last_read_ECC_status = READ_ERROR_NO_ECC_STATUS;
	}
}
 8001142:	e004      	b.n	800114e <get_ECC_status+0x86>
		flash->last_read_ECC_status = READ_ERROR_NO_ECC_STATUS;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2204      	movs	r2, #4
 8001148:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
}
 800114c:	e7ff      	b.n	800114e <get_ECC_status+0x86>
 800114e:	bf00      	nop
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <read_flash_buffer>:
 * @param buffer      <uint8_t*>           Array to read the contents of the device's buffer into
 * @param num_bytes   <uint16_t>           Number of bytes to read into buffer
 * @param column_adr  <uint16_t>           Starting column address of the data to be read in
 */
static void read_flash_buffer(W25N01GV_Flash *flash, uint8_t *buffer,
		uint16_t num_bytes, uint16_t column_adr) {
 8001156:	b580      	push	{r7, lr}
 8001158:	b088      	sub	sp, #32
 800115a:	af02      	add	r7, sp, #8
 800115c:	60f8      	str	r0, [r7, #12]
 800115e:	60b9      	str	r1, [r7, #8]
 8001160:	4611      	mov	r1, r2
 8001162:	461a      	mov	r2, r3
 8001164:	460b      	mov	r3, r1
 8001166:	80fb      	strh	r3, [r7, #6]
 8001168:	4613      	mov	r3, r2
 800116a:	80bb      	strh	r3, [r7, #4]

	uint8_t column_adr_8bit_array[2] = W25N01GV_UNPACK_UINT16_TO_2_BYTES(column_adr);
 800116c:	88bb      	ldrh	r3, [r7, #4]
 800116e:	0a1b      	lsrs	r3, r3, #8
 8001170:	b29b      	uxth	r3, r3
 8001172:	b2db      	uxtb	r3, r3
 8001174:	753b      	strb	r3, [r7, #20]
 8001176:	88bb      	ldrh	r3, [r7, #4]
 8001178:	b2db      	uxtb	r3, r3
 800117a:	757b      	strb	r3, [r7, #21]
	uint8_t tx[4] = {W25N01GV_READ_DATA, column_adr_8bit_array[0], column_adr_8bit_array[1], 0};  // last byte is unused
 800117c:	2303      	movs	r3, #3
 800117e:	743b      	strb	r3, [r7, #16]
 8001180:	7d3b      	ldrb	r3, [r7, #20]
 8001182:	747b      	strb	r3, [r7, #17]
 8001184:	7d7b      	ldrb	r3, [r7, #21]
 8001186:	74bb      	strb	r3, [r7, #18]
 8001188:	2300      	movs	r3, #0
 800118a:	74fb      	strb	r3, [r7, #19]

	spi_transmit_receive(flash, tx, 4, buffer, num_bytes);
 800118c:	f107 0110 	add.w	r1, r7, #16
 8001190:	88fb      	ldrh	r3, [r7, #6]
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	2204      	movs	r2, #4
 8001198:	68f8      	ldr	r0, [r7, #12]
 800119a:	f7ff fd80 	bl	8000c9e <spi_transmit_receive>
}
 800119e:	bf00      	nop
 80011a0:	3718      	adds	r7, #24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <read_bytes_from_page>:
 * @param num_bytes  <uint16_t>           Number of bytes to read in (see note on range)
 * @param page_adr   <uint16_t>           The page to read data from
 * @param column_adr <uint16_t>           The column to start reading data from
 */
static void read_bytes_from_page(W25N01GV_Flash *flash, uint8_t *buffer, uint16_t num_bytes,
		uint16_t page_adr, uint16_t column_adr) {
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b084      	sub	sp, #16
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	60f8      	str	r0, [r7, #12]
 80011ae:	60b9      	str	r1, [r7, #8]
 80011b0:	4611      	mov	r1, r2
 80011b2:	461a      	mov	r2, r3
 80011b4:	460b      	mov	r3, r1
 80011b6:	80fb      	strh	r3, [r7, #6]
 80011b8:	4613      	mov	r3, r2
 80011ba:	80bb      	strh	r3, [r7, #4]

	load_page(flash, page_adr);  // Load the page into flash's buffer
 80011bc:	88bb      	ldrh	r3, [r7, #4]
 80011be:	4619      	mov	r1, r3
 80011c0:	68f8      	ldr	r0, [r7, #12]
 80011c2:	f7ff fe10 	bl	8000de6 <load_page>
	read_flash_buffer(flash, buffer, num_bytes, column_adr);
 80011c6:	8b3b      	ldrh	r3, [r7, #24]
 80011c8:	88fa      	ldrh	r2, [r7, #6]
 80011ca:	68b9      	ldr	r1, [r7, #8]
 80011cc:	68f8      	ldr	r0, [r7, #12]
 80011ce:	f7ff ffc2 	bl	8001156 <read_flash_buffer>

	get_ECC_status(flash);
 80011d2:	68f8      	ldr	r0, [r7, #12]
 80011d4:	f7ff ff78 	bl	80010c8 <get_ECC_status>
}
 80011d8:	bf00      	nop
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <write_bytes_to_page>:
 * @param num_bytes  <uint16_t>           Number of bytes to write to flash
 * @param page_adr   <uint16_t>           Page to write data to
 * @param column_adr <uint16_t>           Column of page to start writing data at
 */
static void write_bytes_to_page(W25N01GV_Flash *flash, uint8_t *data, uint16_t num_bytes,
		uint16_t page_adr, uint16_t column_adr) {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	4611      	mov	r1, r2
 80011ec:	461a      	mov	r2, r3
 80011ee:	460b      	mov	r3, r1
 80011f0:	80fb      	strh	r3, [r7, #6]
 80011f2:	4613      	mov	r3, r2
 80011f4:	80bb      	strh	r3, [r7, #4]

	enable_write(flash);
 80011f6:	68f8      	ldr	r0, [r7, #12]
 80011f8:	f7ff fe4f 	bl	8000e9a <enable_write>

	write_page_to_buffer(flash, data, num_bytes, column_adr);
 80011fc:	8b3b      	ldrh	r3, [r7, #24]
 80011fe:	88fa      	ldrh	r2, [r7, #6]
 8001200:	68b9      	ldr	r1, [r7, #8]
 8001202:	68f8      	ldr	r0, [r7, #12]
 8001204:	f7ff fe6b 	bl	8000ede <write_page_to_buffer>
	program_buffer_to_memory(flash, page_adr);
 8001208:	88bb      	ldrh	r3, [r7, #4]
 800120a:	4619      	mov	r1, r3
 800120c:	68f8      	ldr	r0, [r7, #12]
 800120e:	f7ff febd 	bl	8000f8c <program_buffer_to_memory>

	// This will happen automatically if program_buffer_to_memory() succeeds, but just in case it fails ;)
	disable_write(flash);
 8001212:	68f8      	ldr	r0, [r7, #12]
 8001214:	f7ff fe52 	bl	8000ebc <disable_write>

	get_write_failure_status(flash);
 8001218:	68f8      	ldr	r0, [r7, #12]
 800121a:	f7ff fedf 	bl	8000fdc <get_write_failure_status>
}
 800121e:	bf00      	nop
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <enable_ECC>:
 *
 * datasheet pg 18
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void enable_ECC(W25N01GV_Flash *flash) {
 8001226:	b580      	push	{r7, lr}
 8001228:	b084      	sub	sp, #16
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
	uint8_t config_reg_read = read_status_register(flash, W25N01GV_SR2_CONFIG_REG_ADR);
 800122e:	21b0      	movs	r1, #176	; 0xb0
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f7ff fd72 	bl	8000d1a <read_status_register>
 8001236:	4603      	mov	r3, r0
 8001238:	73fb      	strb	r3, [r7, #15]
	uint8_t ECC_enabled_register = config_reg_read | W25N01GV_SR2_ECC_ENABLE;	 // OR: turn bit on
 800123a:	7bfb      	ldrb	r3, [r7, #15]
 800123c:	f043 0310 	orr.w	r3, r3, #16
 8001240:	73bb      	strb	r3, [r7, #14]

	if (ECC_enabled_register != config_reg_read)
 8001242:	7bba      	ldrb	r2, [r7, #14]
 8001244:	7bfb      	ldrb	r3, [r7, #15]
 8001246:	429a      	cmp	r2, r3
 8001248:	d005      	beq.n	8001256 <enable_ECC+0x30>
		write_status_register(flash, W25N01GV_SR2_CONFIG_REG_ADR, ECC_enabled_register);
 800124a:	7bbb      	ldrb	r3, [r7, #14]
 800124c:	461a      	mov	r2, r3
 800124e:	21b0      	movs	r1, #176	; 0xb0
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff fdab 	bl	8000dac <write_status_register>
}
 8001256:	bf00      	nop
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <enable_buffer_mode>:
 *
 * datasheet pg 18
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void enable_buffer_mode(W25N01GV_Flash *flash) {
 800125e:	b580      	push	{r7, lr}
 8001260:	b084      	sub	sp, #16
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
	uint8_t config_reg_read = read_status_register(flash, W25N01GV_SR2_CONFIG_REG_ADR);
 8001266:	21b0      	movs	r1, #176	; 0xb0
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff fd56 	bl	8000d1a <read_status_register>
 800126e:	4603      	mov	r3, r0
 8001270:	73fb      	strb	r3, [r7, #15]
	uint8_t buffer_enabled_register = config_reg_read | W25N01GV_SR2_BUFFER_READ_MODE;	// OR: turn bit on
 8001272:	7bfb      	ldrb	r3, [r7, #15]
 8001274:	f043 0308 	orr.w	r3, r3, #8
 8001278:	73bb      	strb	r3, [r7, #14]
	if (buffer_enabled_register != config_reg_read)
 800127a:	7bba      	ldrb	r2, [r7, #14]
 800127c:	7bfb      	ldrb	r3, [r7, #15]
 800127e:	429a      	cmp	r2, r3
 8001280:	d005      	beq.n	800128e <enable_buffer_mode+0x30>
		write_status_register(flash, W25N01GV_SR2_CONFIG_REG_ADR, buffer_enabled_register);
 8001282:	7bbb      	ldrb	r3, [r7, #14]
 8001284:	461a      	mov	r2, r3
 8001286:	21b0      	movs	r1, #176	; 0xb0
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f7ff fd8f 	bl	8000dac <write_status_register>
}
 800128e:	bf00      	nop
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <find_write_ptr>:
 * flash->next_free_column can also be 2048).
 * See various comments about flash->write_buffer for explanation.
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void find_write_ptr(W25N01GV_Flash *flash) {
 8001296:	b580      	push	{r7, lr}
 8001298:	f6ad 0d28 	subw	sp, sp, #2088	; 0x828
 800129c:	af02      	add	r7, sp, #8
 800129e:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 80012a2:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 80012a6:	6018      	str	r0, [r3, #0]
	uint8_t read_buffer[2048];

	// First check page 0 for if flash has already been erased.
	// Checking this case first because it's probably pretty common.
	read_bytes_from_page(flash, read_buffer, 2048, 0, 0);
 80012a8:	f107 0108 	add.w	r1, r7, #8
 80012ac:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 80012b0:	f6a3 001c 	subw	r0, r3, #2076	; 0x81c
 80012b4:	2300      	movs	r3, #0
 80012b6:	9300      	str	r3, [sp, #0]
 80012b8:	2300      	movs	r3, #0
 80012ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012be:	6800      	ldr	r0, [r0, #0]
 80012c0:	f7ff ff71 	bl	80011a6 <read_bytes_from_page>
	uint8_t first_page_empty = 1;
 80012c4:	2301      	movs	r3, #1
 80012c6:	f887 381f 	strb.w	r3, [r7, #2079]	; 0x81f
	for (uint16_t b = 0; b < 2048; b++) {
 80012ca:	2300      	movs	r3, #0
 80012cc:	f8a7 381c 	strh.w	r3, [r7, #2076]	; 0x81c
 80012d0:	e010      	b.n	80012f4 <find_write_ptr+0x5e>
		if (read_buffer[b] != 0xFF) {
 80012d2:	f8b7 381c 	ldrh.w	r3, [r7, #2076]	; 0x81c
 80012d6:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 80012da:	f6a2 0218 	subw	r2, r2, #2072	; 0x818
 80012de:	5cd3      	ldrb	r3, [r2, r3]
 80012e0:	2bff      	cmp	r3, #255	; 0xff
 80012e2:	d002      	beq.n	80012ea <find_write_ptr+0x54>
			first_page_empty = 0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	f887 381f 	strb.w	r3, [r7, #2079]	; 0x81f
	for (uint16_t b = 0; b < 2048; b++) {
 80012ea:	f8b7 381c 	ldrh.w	r3, [r7, #2076]	; 0x81c
 80012ee:	3301      	adds	r3, #1
 80012f0:	f8a7 381c 	strh.w	r3, [r7, #2076]	; 0x81c
 80012f4:	f8b7 381c 	ldrh.w	r3, [r7, #2076]	; 0x81c
 80012f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80012fc:	d3e9      	bcc.n	80012d2 <find_write_ptr+0x3c>
		}
	}
	if (first_page_empty) {
 80012fe:	f897 381f 	ldrb.w	r3, [r7, #2079]	; 0x81f
 8001302:	2b00      	cmp	r3, #0
 8001304:	d010      	beq.n	8001328 <find_write_ptr+0x92>
		flash->current_page = 0;
 8001306:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800130a:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2200      	movs	r2, #0
 8001312:	f8a3 2210 	strh.w	r2, [r3, #528]	; 0x210
		flash->next_free_column = 0;
 8001316:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800131a:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2200      	movs	r2, #0
 8001322:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
		return;
 8001326:	e132      	b.n	800158e <find_write_ptr+0x2f8>
	}

	// Binary search on all of flash to find the last page written to.

	// min and max declared as 32bit because W25N01GV_NUM_PAGES > largest uint16_t
	uint32_t min = 0;  // inclusive
 8001328:	2300      	movs	r3, #0
 800132a:	f8c7 3818 	str.w	r3, [r7, #2072]	; 0x818
	uint32_t max = W25N01GV_NUM_PAGES;  // exclusive
 800132e:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8001332:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
	uint16_t cur_search_page;

	while (max - min > 1) {  // Keep looping until you narrow range down a single page
 8001336:	e046      	b.n	80013c6 <find_write_ptr+0x130>
		cur_search_page = min + (max-min) / 2;
 8001338:	f8d7 2814 	ldr.w	r2, [r7, #2068]	; 0x814
 800133c:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	085b      	lsrs	r3, r3, #1
 8001344:	b29a      	uxth	r2, r3
 8001346:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 800134a:	b29b      	uxth	r3, r3
 800134c:	4413      	add	r3, r2
 800134e:	f8a7 380a 	strh.w	r3, [r7, #2058]	; 0x80a

		// Read cur_search_page and check if it's empty
		read_bytes_from_page(flash, read_buffer, 2048, cur_search_page, 0);
 8001352:	f8b7 380a 	ldrh.w	r3, [r7, #2058]	; 0x80a
 8001356:	f107 0108 	add.w	r1, r7, #8
 800135a:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 800135e:	f6a2 001c 	subw	r0, r2, #2076	; 0x81c
 8001362:	2200      	movs	r2, #0
 8001364:	9200      	str	r2, [sp, #0]
 8001366:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800136a:	6800      	ldr	r0, [r0, #0]
 800136c:	f7ff ff1b 	bl	80011a6 <read_bytes_from_page>
		uint8_t cur_page_empty = 1;
 8001370:	2301      	movs	r3, #1
 8001372:	f887 3813 	strb.w	r3, [r7, #2067]	; 0x813
		for (uint16_t b = 0; b < 2048; b++) {
 8001376:	2300      	movs	r3, #0
 8001378:	f8a7 3810 	strh.w	r3, [r7, #2064]	; 0x810
 800137c:	e011      	b.n	80013a2 <find_write_ptr+0x10c>
			if (read_buffer[b] != 0xFF) {
 800137e:	f8b7 3810 	ldrh.w	r3, [r7, #2064]	; 0x810
 8001382:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 8001386:	f6a2 0218 	subw	r2, r2, #2072	; 0x818
 800138a:	5cd3      	ldrb	r3, [r2, r3]
 800138c:	2bff      	cmp	r3, #255	; 0xff
 800138e:	d003      	beq.n	8001398 <find_write_ptr+0x102>
				cur_page_empty = 0;
 8001390:	2300      	movs	r3, #0
 8001392:	f887 3813 	strb.w	r3, [r7, #2067]	; 0x813
				break;
 8001396:	e009      	b.n	80013ac <find_write_ptr+0x116>
		for (uint16_t b = 0; b < 2048; b++) {
 8001398:	f8b7 3810 	ldrh.w	r3, [r7, #2064]	; 0x810
 800139c:	3301      	adds	r3, #1
 800139e:	f8a7 3810 	strh.w	r3, [r7, #2064]	; 0x810
 80013a2:	f8b7 3810 	ldrh.w	r3, [r7, #2064]	; 0x810
 80013a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80013aa:	d3e8      	bcc.n	800137e <find_write_ptr+0xe8>
			}
		}

		if (cur_page_empty)  // Found an empty page - move to the left sector
 80013ac:	f897 3813 	ldrb.w	r3, [r7, #2067]	; 0x813
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d004      	beq.n	80013be <find_write_ptr+0x128>
			max = cur_search_page;
 80013b4:	f8b7 380a 	ldrh.w	r3, [r7, #2058]	; 0x80a
 80013b8:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
 80013bc:	e003      	b.n	80013c6 <find_write_ptr+0x130>
		else  // Found a non-empty page - move to the right sector
			min = cur_search_page;  // Don't completely exclude it from range
 80013be:	f8b7 380a 	ldrh.w	r3, [r7, #2058]	; 0x80a
 80013c2:	f8c7 3818 	str.w	r3, [r7, #2072]	; 0x818
	while (max - min > 1) {  // Keep looping until you narrow range down a single page
 80013c6:	f8d7 2814 	ldr.w	r2, [r7, #2068]	; 0x814
 80013ca:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d8b1      	bhi.n	8001338 <find_write_ptr+0xa2>
	}
	// Breaks out of the loop when range is narrowed down to [min, min+1),
	flash->current_page = min;
 80013d4:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 80013d8:	b29a      	uxth	r2, r3
 80013da:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 80013de:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f8a3 2210 	strh.w	r2, [r3, #528]	; 0x210

	// After finding flash->current_page, do a linear search on that page
	// to find flash->next_free_address
	read_bytes_from_page(flash, read_buffer, 2048, flash->current_page, 0);
 80013e8:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 80013ec:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 80013f6:	f107 0108 	add.w	r1, r7, #8
 80013fa:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 80013fe:	f6a2 001c 	subw	r0, r2, #2076	; 0x81c
 8001402:	2200      	movs	r2, #0
 8001404:	9200      	str	r2, [sp, #0]
 8001406:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800140a:	6800      	ldr	r0, [r0, #0]
 800140c:	f7ff fecb 	bl	80011a6 <read_bytes_from_page>
	// (last byte is non-0xFF) then the write pointer should actually be the
	// first byte of the next page (breaking out of the while loop guaranteed
	// that page min+1 is empty).	If that is the last page in flash, handle
	// accordingly to make get_bytes_remaining() return 0.

	if (read_buffer[2047] != 0xFF) {  // aforementioned edge case
 8001410:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 8001414:	f6a3 0318 	subw	r3, r3, #2072	; 0x818
 8001418:	f893 37ff 	ldrb.w	r3, [r3, #2047]	; 0x7ff
 800141c:	2bff      	cmp	r3, #255	; 0xff
 800141e:	d02d      	beq.n	800147c <find_write_ptr+0x1e6>
		if (flash->current_page == W25N01GV_NUM_PAGES-1) {  // no room left in flash
 8001420:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 8001424:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 800142e:	f64f 72bf 	movw	r2, #65471	; 0xffbf
 8001432:	4293      	cmp	r3, r2
 8001434:	d109      	bne.n	800144a <find_write_ptr+0x1b4>
			flash->next_free_column = 2048;
 8001436:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800143a:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001444:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
		else {  // go to start of next page
			flash->current_page++;
			flash->next_free_column = 0;
		}

		return;
 8001448:	e0a1      	b.n	800158e <find_write_ptr+0x2f8>
			flash->current_page++;
 800144a:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800144e:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 8001458:	3301      	adds	r3, #1
 800145a:	b29a      	uxth	r2, r3
 800145c:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 8001460:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f8a3 2210 	strh.w	r2, [r3, #528]	; 0x210
			flash->next_free_column = 0;
 800146a:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800146e:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2200      	movs	r2, #0
 8001476:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
		return;
 800147a:	e088      	b.n	800158e <find_write_ptr+0x2f8>
	}
	else {  // normal linear search
		// Start at the end and search backwards for the first non-empty byte
		uint8_t page_empty = 1;
 800147c:	2301      	movs	r3, #1
 800147e:	f887 380d 	strb.w	r3, [r7, #2061]	; 0x80d
		for (int16_t b = 2047; b >= 0; b--) {
 8001482:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001486:	f8a7 380e 	strh.w	r3, [r7, #2062]	; 0x80e
 800148a:	e01e      	b.n	80014ca <find_write_ptr+0x234>
			if (read_buffer[b] != 0xFF) {
 800148c:	f9b7 380e 	ldrsh.w	r3, [r7, #2062]	; 0x80e
 8001490:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 8001494:	f6a2 0218 	subw	r2, r2, #2072	; 0x818
 8001498:	5cd3      	ldrb	r3, [r2, r3]
 800149a:	2bff      	cmp	r3, #255	; 0xff
 800149c:	d00e      	beq.n	80014bc <find_write_ptr+0x226>
				flash->next_free_column = b+1;
 800149e:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	; 0x80e
 80014a2:	3301      	adds	r3, #1
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 80014aa:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
				page_empty = 0;
 80014b4:	2300      	movs	r3, #0
 80014b6:	f887 380d 	strb.w	r3, [r7, #2061]	; 0x80d
				break;
 80014ba:	e00a      	b.n	80014d2 <find_write_ptr+0x23c>
		for (int16_t b = 2047; b >= 0; b--) {
 80014bc:	f9b7 380e 	ldrsh.w	r3, [r7, #2062]	; 0x80e
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	3b01      	subs	r3, #1
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	f8a7 380e 	strh.w	r3, [r7, #2062]	; 0x80e
 80014ca:	f9b7 380e 	ldrsh.w	r3, [r7, #2062]	; 0x80e
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	dadc      	bge.n	800148c <find_write_ptr+0x1f6>

	// flash->next_free_column should only ever be at the beginning of one of the sectors on a page.
	// If the user's last byte(s) written are 0xFF, then the previous loop will treat it as empty memory.
	// This if block maintains the 512 byte framing.
	// At this point in the code, flash->current_page is not empty and flash is not completely full.
	if (flash->next_free_column <= 512)
 80014d2:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 80014d6:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 80014e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014e4:	d809      	bhi.n	80014fa <find_write_ptr+0x264>
		flash->next_free_column = 512;
 80014e6:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 80014ea:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014f4:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
 80014f8:	e049      	b.n	800158e <find_write_ptr+0x2f8>
	else if (flash->next_free_column <= 1024)
 80014fa:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 80014fe:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 8001508:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800150c:	d809      	bhi.n	8001522 <find_write_ptr+0x28c>
		flash->next_free_column = 1024;
 800150e:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 8001512:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800151c:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
 8001520:	e035      	b.n	800158e <find_write_ptr+0x2f8>
	else if (flash->next_free_column <= 1536)
 8001522:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 8001526:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 8001530:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001534:	d809      	bhi.n	800154a <find_write_ptr+0x2b4>
		flash->next_free_column = 1536;
 8001536:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800153a:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001544:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
 8001548:	e021      	b.n	800158e <find_write_ptr+0x2f8>
	else if (flash->next_free_column < 2048) {  // Increment to next page
 800154a:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800154e:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 8001558:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800155c:	d217      	bcs.n	800158e <find_write_ptr+0x2f8>
		flash->next_free_column = 0;
 800155e:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 8001562:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2200      	movs	r2, #0
 800156a:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
		flash->current_page++;
 800156e:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 8001572:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 800157c:	3301      	adds	r3, #1
 800157e:	b29a      	uxth	r2, r3
 8001580:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 8001584:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f8a3 2210 	strh.w	r2, [r3, #528]	; 0x210
	}
}
 800158e:	f507 6702 	add.w	r7, r7, #2080	; 0x820
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <init_flash>:


/* Public function definitions */

void init_flash(W25N01GV_Flash *flash, SPI_HandleTypeDef *SPI_bus_in,
		GPIO_TypeDef *cs_base_in,	uint16_t cs_pin_in) {
 8001596:	b580      	push	{r7, lr}
 8001598:	b084      	sub	sp, #16
 800159a:	af00      	add	r7, sp, #0
 800159c:	60f8      	str	r0, [r7, #12]
 800159e:	60b9      	str	r1, [r7, #8]
 80015a0:	607a      	str	r2, [r7, #4]
 80015a2:	807b      	strh	r3, [r7, #2]
	flash->SPI_bus = SPI_bus_in;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	68ba      	ldr	r2, [r7, #8]
 80015a8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	flash->cs_base = cs_base_in;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	flash->cs_pin = cs_pin_in;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	887a      	ldrh	r2, [r7, #2]
 80015b8:	f8a3 220c 	strh.w	r2, [r3, #524]	; 0x20c
	flash->next_page_to_read = 0;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2200      	movs	r2, #0
 80015c0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	flash->last_HAL_status = HAL_OK;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2200      	movs	r2, #0
 80015c8:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
	flash->last_read_ECC_status = SUCCESS_NO_CORRECTIONS;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2200      	movs	r2, #0
 80015d0:	f883 2215 	strb.w	r2, [r3, #533]	; 0x215
	flash->last_write_failure_status = 0;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	2200      	movs	r2, #0
 80015d8:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
	flash->last_erase_failure_status = 0;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2200      	movs	r2, #0
 80015e0:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217

	reset_flash(flash);
 80015e4:	68f8      	ldr	r0, [r7, #12]
 80015e6:	f000 f837 	bl	8001658 <reset_flash>

	enable_ECC(flash);  // Should be enabled by default, but enable ECC just in case
 80015ea:	68f8      	ldr	r0, [r7, #12]
 80015ec:	f7ff fe1b 	bl	8001226 <enable_ECC>
	enable_buffer_mode(flash);  // -IG models start with buffer mode by default, -IT models don't
 80015f0:	68f8      	ldr	r0, [r7, #12]
 80015f2:	f7ff fe34 	bl	800125e <enable_buffer_mode>
	// As of the time of writing this, MASA uses the -IG model.

	find_write_ptr(flash);
 80015f6:	68f8      	ldr	r0, [r7, #12]
 80015f8:	f7ff fe4d 	bl	8001296 <find_write_ptr>
}
 80015fc:	bf00      	nop
 80015fe:	3710      	adds	r7, #16
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <ping_flash>:

uint8_t ping_flash(W25N01GV_Flash *flash) {
 8001604:	b580      	push	{r7, lr}
 8001606:	b088      	sub	sp, #32
 8001608:	af02      	add	r7, sp, #8
 800160a:	6078      	str	r0, [r7, #4]

	uint8_t tx[2] = {W25N01GV_READ_JEDEC_ID, 0};	// Second byte is unused
 800160c:	239f      	movs	r3, #159	; 0x9f
 800160e:	823b      	strh	r3, [r7, #16]
	uint8_t rx[3];

	spi_transmit_receive(flash, tx, 2, rx, 3);
 8001610:	f107 030c 	add.w	r3, r7, #12
 8001614:	f107 0110 	add.w	r1, r7, #16
 8001618:	2203      	movs	r2, #3
 800161a:	9200      	str	r2, [sp, #0]
 800161c:	2202      	movs	r2, #2
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7ff fb3d 	bl	8000c9e <spi_transmit_receive>
	uint8_t manufacturer_ID = rx[0];
 8001624:	7b3b      	ldrb	r3, [r7, #12]
 8001626:	75fb      	strb	r3, [r7, #23]
	uint16_t device_ID = W25N01GV_PACK_2_BYTES_TO_UINT16(rx+1);
 8001628:	7b7b      	ldrb	r3, [r7, #13]
 800162a:	b29b      	uxth	r3, r3
 800162c:	021b      	lsls	r3, r3, #8
 800162e:	b29a      	uxth	r2, r3
 8001630:	7bbb      	ldrb	r3, [r7, #14]
 8001632:	b29b      	uxth	r3, r3
 8001634:	4413      	add	r3, r2
 8001636:	82bb      	strh	r3, [r7, #20]

	if (manufacturer_ID == W25N01GV_MANUFACTURER_ID && device_ID == W25N01GV_DEVICE_ID)
 8001638:	7dfb      	ldrb	r3, [r7, #23]
 800163a:	2bef      	cmp	r3, #239	; 0xef
 800163c:	d106      	bne.n	800164c <ping_flash+0x48>
 800163e:	8abb      	ldrh	r3, [r7, #20]
 8001640:	f64a 2221 	movw	r2, #43553	; 0xaa21
 8001644:	4293      	cmp	r3, r2
 8001646:	d101      	bne.n	800164c <ping_flash+0x48>
		return 1;
 8001648:	2301      	movs	r3, #1
 800164a:	e000      	b.n	800164e <ping_flash+0x4a>
	else
		return 0;
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	3718      	adds	r7, #24
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
	...

08001658 <reset_flash>:

uint8_t reset_flash(W25N01GV_Flash *flash) {
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
	// The reset command will corrupt data if given while another
	// operation is taking place, so just return in that case
	if (flash_is_busy(flash))  // TODO: replace with wait_for_operation? idk honestly
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f7ff fb73 	bl	8000d4c <flash_is_busy>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <reset_flash+0x18>
		return 0;
 800166c:	2300      	movs	r3, #0
 800166e:	e00d      	b.n	800168c <reset_flash+0x34>

	// Otherwise send the reset command
	uint8_t tx[1] = { W25N01GV_DEVICE_RESET };
 8001670:	23ff      	movs	r3, #255	; 0xff
 8001672:	733b      	strb	r3, [r7, #12]
	spi_transmit(flash, tx, 1);
 8001674:	f107 030c 	add.w	r3, r7, #12
 8001678:	2201      	movs	r2, #1
 800167a:	4619      	mov	r1, r3
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f7ff fade 	bl	8000c3e <spi_transmit>

	// Wait for it to reset
	wait_for_operation(flash, W25N01GV_RESET_MAX_TIME_US * 1000);
 8001682:	4904      	ldr	r1, [pc, #16]	; (8001694 <reset_flash+0x3c>)
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7ff fb73 	bl	8000d70 <wait_for_operation>

	return 1;
 800168a:	2301      	movs	r3, #1
}
 800168c:	4618      	mov	r0, r3
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	0007a120 	.word	0x0007a120

08001698 <write_to_flash_contiguous>:
 * data can fit in flash's remaining space.
 * flash->write_buffer is not full == flash->write_buffer_size < W25N01GV_SECTOR_SIZE.
 * Flash is unlocked.
 *
 */
static uint16_t write_to_flash_contiguous(W25N01GV_Flash *flash, uint8_t *data, uint32_t num_bytes) {
 8001698:	b580      	push	{r7, lr}
 800169a:	b088      	sub	sp, #32
 800169c:	af02      	add	r7, sp, #8
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
	if (num_bytes % 512 != 0) {
		asm("nop");
	}
	*/

	uint32_t write_counter = 0;  // Track how many bytes have been written so far
 80016a4:	2300      	movs	r3, #0
 80016a6:	617b      	str	r3, [r7, #20]
	uint16_t write_failures = 0;  // Track write errors
 80016a8:	2300      	movs	r3, #0
 80016aa:	827b      	strh	r3, [r7, #18]

	while (write_counter < num_bytes) {
 80016ac:	e05a      	b.n	8001764 <write_to_flash_contiguous+0xcc>

		// If there's not enough space on the page, only write as much as will fit
		uint16_t num_bytes_to_write_on_page = num_bytes - write_counter;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	b29a      	uxth	r2, r3
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	823b      	strh	r3, [r7, #16]
		if (num_bytes_to_write_on_page > W25N01GV_BYTES_PER_PAGE - flash->next_free_column)
 80016ba:	8a3a      	ldrh	r2, [r7, #16]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 80016c2:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80016c6:	429a      	cmp	r2, r3
 80016c8:	dd05      	ble.n	80016d6 <write_to_flash_contiguous+0x3e>
			num_bytes_to_write_on_page = W25N01GV_BYTES_PER_PAGE - flash->next_free_column;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 80016d0:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80016d4:	823b      	strh	r3, [r7, #16]

		// Write the array (or a part of it if it's too long for one page) to flash
		write_bytes_to_page(flash, data + write_counter, num_bytes_to_write_on_page,
 80016d6:	68ba      	ldr	r2, [r7, #8]
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	18d1      	adds	r1, r2, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f8b3 0210 	ldrh.w	r0, [r3, #528]	; 0x210
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 80016e8:	8a3a      	ldrh	r2, [r7, #16]
 80016ea:	9300      	str	r3, [sp, #0]
 80016ec:	4603      	mov	r3, r0
 80016ee:	68f8      	ldr	r0, [r7, #12]
 80016f0:	f7ff fd76 	bl	80011e0 <write_bytes_to_page>
				flash->current_page, flash->next_free_column);

		// Check if the page was written to correctly
		if (flash->last_write_failure_status)
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f893 3216 	ldrb.w	r3, [r3, #534]	; 0x216
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d002      	beq.n	8001704 <write_to_flash_contiguous+0x6c>
			write_failures++;
 80016fe:	8a7b      	ldrh	r3, [r7, #18]
 8001700:	3301      	adds	r3, #1
 8001702:	827b      	strh	r3, [r7, #18]

		write_counter += num_bytes_to_write_on_page;
 8001704:	8a3b      	ldrh	r3, [r7, #16]
 8001706:	697a      	ldr	r2, [r7, #20]
 8001708:	4413      	add	r3, r2
 800170a:	617b      	str	r3, [r7, #20]

		// If there's room left over at the end of the page,
		// increment the column counter and leave the page counter the same
		if (flash->next_free_column + num_bytes_to_write_on_page < W25N01GV_BYTES_PER_PAGE)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f8b3 3212 	ldrh.w	r3, [r3, #530]	; 0x212
 8001712:	461a      	mov	r2, r3
 8001714:	8a3b      	ldrh	r3, [r7, #16]
 8001716:	4413      	add	r3, r2
 8001718:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800171c:	da09      	bge.n	8001732 <write_to_flash_contiguous+0x9a>
			flash->next_free_column += num_bytes_to_write_on_page;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f8b3 2212 	ldrh.w	r2, [r3, #530]	; 0x212
 8001724:	8a3b      	ldrh	r3, [r7, #16]
 8001726:	4413      	add	r3, r2
 8001728:	b29a      	uxth	r2, r3
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
 8001730:	e018      	b.n	8001764 <write_to_flash_contiguous+0xcc>

		// If it fills the current page and runs out of pages, set the column counter over
		// the limit so it can't write again (will make get_bytes_remaining() return 0)
		else if (flash->current_page == W25N01GV_NUM_PAGES-1)
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 8001738:	f64f 72bf 	movw	r2, #65471	; 0xffbf
 800173c:	4293      	cmp	r3, r2
 800173e:	d105      	bne.n	800174c <write_to_flash_contiguous+0xb4>
			flash->next_free_column = W25N01GV_BYTES_PER_PAGE;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001746:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
 800174a:	e00b      	b.n	8001764 <write_to_flash_contiguous+0xcc>

		// Otherwise if there's more pages left, bring the address counter to the next page
		// and reset the column counter
		else {
			flash->next_free_column = 0;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2200      	movs	r2, #0
 8001750:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
			flash->current_page++;  // This function can assume it won't run out of pages
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 800175a:	3301      	adds	r3, #1
 800175c:	b29a      	uxth	r2, r3
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f8a3 2210 	strh.w	r2, [r3, #528]	; 0x210
	while (write_counter < num_bytes) {
 8001764:	697a      	ldr	r2, [r7, #20]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	429a      	cmp	r2, r3
 800176a:	d3a0      	bcc.n	80016ae <write_to_flash_contiguous+0x16>
			|| flash->next_free_column == 2048)) {
		asm("nop");
	}
	*/

	return write_failures;
 800176c:	8a7b      	ldrh	r3, [r7, #18]
}
 800176e:	4618      	mov	r0, r3
 8001770:	3718      	adds	r7, #24
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
	...

08001778 <write_to_flash>:

uint16_t write_to_flash(W25N01GV_Flash *flash, uint8_t *data, uint32_t num_bytes) {
 8001778:	b580      	push	{r7, lr}
 800177a:	b08c      	sub	sp, #48	; 0x30
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]

	// If there's not enough space, truncate the data
	uint32_t bytes_remaining = get_bytes_remaining(flash);
 8001784:	68f8      	ldr	r0, [r7, #12]
 8001786:	f000 f923 	bl	80019d0 <get_bytes_remaining>
 800178a:	6238      	str	r0, [r7, #32]
	if (num_bytes > bytes_remaining)
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	6a3b      	ldr	r3, [r7, #32]
 8001790:	429a      	cmp	r2, r3
 8001792:	d901      	bls.n	8001798 <write_to_flash+0x20>
		num_bytes = bytes_remaining;
 8001794:	6a3b      	ldr	r3, [r7, #32]
 8001796:	607b      	str	r3, [r7, #4]

	uint16_t write_failures = 0;  // Track write failures
 8001798:	2300      	movs	r3, #0
 800179a:	85fb      	strh	r3, [r7, #46]	; 0x2e

	// Copy the front end into the write_buffer
	uint8_t buffer_full = 0;  // Used to decide whether or not to write buffer contents to flash
 800179c:	2300      	movs	r3, #0
 800179e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

	// If write_buffer is not empty and data fills it completely
	if (flash->write_buffer_size > 0 && flash->write_buffer_size + num_bytes >= W25N01GV_SECTOR_SIZE) {
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d035      	beq.n	8001818 <write_to_flash+0xa0>
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80017b2:	461a      	mov	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4413      	add	r3, r2
 80017b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017bc:	d32c      	bcc.n	8001818 <write_to_flash+0xa0>
		// Copy data into write_buffer until it's full,
		uint16_t num_bytes_to_copy = W25N01GV_SECTOR_SIZE - flash->write_buffer_size;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80017c4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80017c8:	83fb      	strh	r3, [r7, #30]
		for (uint16_t i = 0; i < num_bytes_to_copy; ++i) {
 80017ca:	2300      	movs	r3, #0
 80017cc:	857b      	strh	r3, [r7, #42]	; 0x2a
 80017ce:	e00e      	b.n	80017ee <write_to_flash+0x76>
			flash->write_buffer[flash->write_buffer_size + i] = data[i];
 80017d0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80017d2:	68ba      	ldr	r2, [r7, #8]
 80017d4:	441a      	add	r2, r3
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80017dc:	4619      	mov	r1, r3
 80017de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80017e0:	440b      	add	r3, r1
 80017e2:	7811      	ldrb	r1, [r2, #0]
 80017e4:	68fa      	ldr	r2, [r7, #12]
 80017e6:	54d1      	strb	r1, [r2, r3]
		for (uint16_t i = 0; i < num_bytes_to_copy; ++i) {
 80017e8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80017ea:	3301      	adds	r3, #1
 80017ec:	857b      	strh	r3, [r7, #42]	; 0x2a
 80017ee:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80017f0:	8bfb      	ldrh	r3, [r7, #30]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d3ec      	bcc.n	80017d0 <write_to_flash+0x58>
		}
		flash->write_buffer_size = W25N01GV_SECTOR_SIZE;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017fc:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
		buffer_full = 1;
 8001800:	2301      	movs	r3, #1
 8001802:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		// Adjust data and num_bytes to reflect the front end being chopped off
		data += num_bytes_to_copy;
 8001806:	8bfb      	ldrh	r3, [r7, #30]
 8001808:	68ba      	ldr	r2, [r7, #8]
 800180a:	4413      	add	r3, r2
 800180c:	60bb      	str	r3, [r7, #8]
		num_bytes -= num_bytes_to_copy;
 800180e:	8bfb      	ldrh	r3, [r7, #30]
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	607b      	str	r3, [r7, #4]
	if (flash->write_buffer_size > 0 && flash->write_buffer_size + num_bytes >= W25N01GV_SECTOR_SIZE) {
 8001816:	e02a      	b.n	800186e <write_to_flash+0xf6>
	}
	// If data doesn't fill write_buffer completely
	else if (flash->write_buffer_size + num_bytes < W25N01GV_SECTOR_SIZE) {
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800181e:	461a      	mov	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4413      	add	r3, r2
 8001824:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001828:	d221      	bcs.n	800186e <write_to_flash+0xf6>
		// Copy all data into write_buffer and return
		for (uint16_t i = 0; i < num_bytes; ++i) {
 800182a:	2300      	movs	r3, #0
 800182c:	853b      	strh	r3, [r7, #40]	; 0x28
 800182e:	e00e      	b.n	800184e <write_to_flash+0xd6>
			flash->write_buffer[flash->write_buffer_size + i] = data[i];
 8001830:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001832:	68ba      	ldr	r2, [r7, #8]
 8001834:	441a      	add	r2, r3
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800183c:	4619      	mov	r1, r3
 800183e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001840:	440b      	add	r3, r1
 8001842:	7811      	ldrb	r1, [r2, #0]
 8001844:	68fa      	ldr	r2, [r7, #12]
 8001846:	54d1      	strb	r1, [r2, r3]
		for (uint16_t i = 0; i < num_bytes; ++i) {
 8001848:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800184a:	3301      	adds	r3, #1
 800184c:	853b      	strh	r3, [r7, #40]	; 0x28
 800184e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	429a      	cmp	r2, r3
 8001854:	d8ec      	bhi.n	8001830 <write_to_flash+0xb8>
		}
		flash->write_buffer_size += num_bytes;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f8b3 220e 	ldrh.w	r2, [r3, #526]	; 0x20e
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	b29b      	uxth	r3, r3
 8001860:	4413      	add	r3, r2
 8001862:	b29a      	uxth	r2, r3
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e

		return 0;
 800186a:	2300      	movs	r3, #0
 800186c:	e049      	b.n	8001902 <write_to_flash+0x18a>

	// At this point, data and num_bytes should be adjusted so it starts at a multiple address.
	// Use integer division to find out where the last unit is.
	// If there are less than W25N01GV_SECTOR_SIZE, then end_size == num_bytes and end_arr == data,
	// so anything in data that doesn't get written in this function will get stored in write_buffer
	uint32_t new_data_size = (num_bytes / W25N01GV_SECTOR_SIZE) * W25N01GV_SECTOR_SIZE;
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	4b26      	ldr	r3, [pc, #152]	; (800190c <write_to_flash+0x194>)
 8001872:	4013      	ands	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]
	uint16_t end_size = num_bytes % W25N01GV_SECTOR_SIZE;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	b29b      	uxth	r3, r3
 800187a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800187e:	82fb      	strh	r3, [r7, #22]
	uint8_t* end_arr = data + new_data_size;
 8001880:	68ba      	ldr	r2, [r7, #8]
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	4413      	add	r3, r2
 8001886:	613b      	str	r3, [r7, #16]

	unlock_flash(flash);
 8001888:	68f8      	ldr	r0, [r7, #12]
 800188a:	f7ff fad2 	bl	8000e32 <unlock_flash>

	// If the buffer got filled, write the buffer to flash using write_to_flash_contiguous()
	if (buffer_full) {
 800188e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001892:	2b00      	cmp	r3, #0
 8001894:	d00f      	beq.n	80018b6 <write_to_flash+0x13e>
		write_failures += write_to_flash_contiguous(flash, flash->write_buffer, W25N01GV_SECTOR_SIZE);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f44f 7200 	mov.w	r2, #512	; 0x200
 800189c:	4619      	mov	r1, r3
 800189e:	68f8      	ldr	r0, [r7, #12]
 80018a0:	f7ff fefa 	bl	8001698 <write_to_flash_contiguous>
 80018a4:	4603      	mov	r3, r0
 80018a6:	461a      	mov	r2, r3
 80018a8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80018aa:	4413      	add	r3, r2
 80018ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
		flash->write_buffer_size = 0;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2200      	movs	r2, #0
 80018b2:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
	}

	// Write the processed array into flash using write_to_flash_contiguous()
	if (new_data_size > 0) {
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d009      	beq.n	80018d0 <write_to_flash+0x158>
		write_failures += write_to_flash_contiguous(flash, data, new_data_size);
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	68b9      	ldr	r1, [r7, #8]
 80018c0:	68f8      	ldr	r0, [r7, #12]
 80018c2:	f7ff fee9 	bl	8001698 <write_to_flash_contiguous>
 80018c6:	4603      	mov	r3, r0
 80018c8:	461a      	mov	r2, r3
 80018ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80018cc:	4413      	add	r3, r2
 80018ce:	85fb      	strh	r3, [r7, #46]	; 0x2e
	}

	lock_flash(flash);
 80018d0:	68f8      	ldr	r0, [r7, #12]
 80018d2:	f7ff fac6 	bl	8000e62 <lock_flash>

	// Copy the remaining data, if any, into write_buffer
	for (uint16_t i = 0; i < end_size; ++i) {
 80018d6:	2300      	movs	r3, #0
 80018d8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80018da:	e009      	b.n	80018f0 <write_to_flash+0x178>
		flash->write_buffer[i] = end_arr[i];
 80018dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	441a      	add	r2, r3
 80018e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80018e4:	7811      	ldrb	r1, [r2, #0]
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i = 0; i < end_size; ++i) {
 80018ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80018ec:	3301      	adds	r3, #1
 80018ee:	84fb      	strh	r3, [r7, #38]	; 0x26
 80018f0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80018f2:	8afb      	ldrh	r3, [r7, #22]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d3f1      	bcc.n	80018dc <write_to_flash+0x164>
	}
	flash->write_buffer_size = end_size;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	8afa      	ldrh	r2, [r7, #22]
 80018fc:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e

	return write_failures;
 8001900:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e

}
 8001902:	4618      	mov	r0, r3
 8001904:	3730      	adds	r7, #48	; 0x30
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	fffffe00 	.word	0xfffffe00

08001910 <reset_flash_read_pointer>:
	lock_flash(flash);

	return write_failures;
}

void reset_flash_read_pointer(W25N01GV_Flash *flash) {
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
	flash->next_page_to_read = 0;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <read_next_2KB_from_flash>:

void read_next_2KB_from_flash(W25N01GV_Flash *flash, uint8_t *buffer) {
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af02      	add	r7, sp, #8
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
	read_bytes_from_page(flash, buffer,	W25N01GV_BYTES_PER_PAGE, flash->next_page_to_read, 0);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800193c:	b29b      	uxth	r3, r3
 800193e:	2200      	movs	r2, #0
 8001940:	9200      	str	r2, [sp, #0]
 8001942:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001946:	6839      	ldr	r1, [r7, #0]
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f7ff fc2c 	bl	80011a6 <read_bytes_from_page>
	flash->next_page_to_read++;  // Increment the page read counter
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001954:	1c5a      	adds	r2, r3, #1
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	get_ECC_status(flash);
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f7ff fbb3 	bl	80010c8 <get_ECC_status>
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <erase_flash>:

uint16_t erase_flash(W25N01GV_Flash *flash) {
 800196a:	b580      	push	{r7, lr}
 800196c:	b084      	sub	sp, #16
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
	uint16_t erase_failures = 0;
 8001972:	2300      	movs	r3, #0
 8001974:	81fb      	strh	r3, [r7, #14]

	unlock_flash(flash);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f7ff fa5b 	bl	8000e32 <unlock_flash>

	// Loop through every block to erase them one by one
	// Ignore the last block, which is reserved for pseudo-eeprom functionality
	for (uint16_t block_count = 0; block_count < W25N01GV_NUM_BLOCKS-1; block_count++) {
 800197c:	2300      	movs	r3, #0
 800197e:	81bb      	strh	r3, [r7, #12]
 8001980:	e011      	b.n	80019a6 <erase_flash+0x3c>
		erase_block(flash, block_count * W25N01GV_PAGES_PER_BLOCK);  // Address of first page in each block
 8001982:	89bb      	ldrh	r3, [r7, #12]
 8001984:	019b      	lsls	r3, r3, #6
 8001986:	b29b      	uxth	r3, r3
 8001988:	4619      	mov	r1, r3
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f7ff fb6c 	bl	8001068 <erase_block>

		// Check if the erase failed
		if (flash->last_erase_failure_status)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f893 3217 	ldrb.w	r3, [r3, #535]	; 0x217
 8001996:	2b00      	cmp	r3, #0
 8001998:	d002      	beq.n	80019a0 <erase_flash+0x36>
			erase_failures++;
 800199a:	89fb      	ldrh	r3, [r7, #14]
 800199c:	3301      	adds	r3, #1
 800199e:	81fb      	strh	r3, [r7, #14]
	for (uint16_t block_count = 0; block_count < W25N01GV_NUM_BLOCKS-1; block_count++) {
 80019a0:	89bb      	ldrh	r3, [r7, #12]
 80019a2:	3301      	adds	r3, #1
 80019a4:	81bb      	strh	r3, [r7, #12]
 80019a6:	89bb      	ldrh	r3, [r7, #12]
 80019a8:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d9e8      	bls.n	8001982 <erase_flash+0x18>
	}

	lock_flash(flash);
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f7ff fa56 	bl	8000e62 <lock_flash>

	// Reset the address pointer after erasing
	find_write_ptr(flash);  // Don't manually set addr pointers to ensure it actually erases
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7ff fc6d 	bl	8001296 <find_write_ptr>
	flash->write_buffer_size = 0;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e

	return erase_failures;
 80019c4:	89fb      	ldrh	r3, [r7, #14]
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
	...

080019d0 <get_bytes_remaining>:

uint32_t get_bytes_remaining(W25N01GV_Flash *flash) {
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
	return ((W25N01GV_NUM_BLOCKS-1) * W25N01GV_PAGES_PER_BLOCK * W25N01GV_BYTES_PER_PAGE)
			- (flash->current_page * W25N01GV_BYTES_PER_PAGE + flash->next_free_column)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 80019de:	02db      	lsls	r3, r3, #11
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	f8b2 2212 	ldrh.w	r2, [r2, #530]	; 0x212
 80019e6:	441a      	add	r2, r3
 80019e8:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <get_bytes_remaining+0x30>)
 80019ea:	1a9b      	subs	r3, r3, r2
			- flash->write_buffer_size;
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	f8b2 220e 	ldrh.w	r2, [r2, #526]	; 0x20e
 80019f2:	1a9b      	subs	r3, r3, r2

	// write_buffer hasn't been written to flash yet, but its size needs to be counted
	// to get an accurate count for the user.
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	07fe0000 	.word	0x07fe0000

08001a04 <add_test_delimiter>:
	}

	return num_bad_blocks;
}

void add_test_delimiter(W25N01GV_Flash *flash) {
 8001a04:	b580      	push	{r7, lr}
 8001a06:	f6ad 0d08 	subw	sp, sp, #2056	; 0x808
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8001a10:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 8001a14:	6018      	str	r0, [r3, #0]
	// This is kind of dumb but it works
	uint8_t delimiter_arr[W25N01GV_BYTES_PER_PAGE] = { 0 };
 8001a16:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8001a1a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	3304      	adds	r3, #4
 8001a24:	f240 72fc 	movw	r2, #2044	; 0x7fc
 8001a28:	2100      	movs	r1, #0
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f008 fa6e 	bl	8009f0c <memset>

	// Fill an entire page worth of bytes with 0's
	write_to_flash(flash, delimiter_arr, W25N01GV_BYTES_PER_PAGE);
 8001a30:	f107 0108 	add.w	r1, r7, #8
 8001a34:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8001a38:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 8001a3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a40:	6818      	ldr	r0, [r3, #0]
 8001a42:	f7ff fe99 	bl	8001778 <write_to_flash>
}
 8001a46:	bf00      	nop
 8001a48:	f607 0708 	addw	r7, r7, #2056	; 0x808
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	4a07      	ldr	r2, [pc, #28]	; (8001a7c <vApplicationGetIdleTaskMemory+0x2c>)
 8001a60:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	4a06      	ldr	r2, [pc, #24]	; (8001a80 <vApplicationGetIdleTaskMemory+0x30>)
 8001a66:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2280      	movs	r2, #128	; 0x80
 8001a6c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001a6e:	bf00      	nop
 8001a70:	3714      	adds	r7, #20
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	24000030 	.word	0x24000030
 8001a80:	24000084 	.word	0x24000084

08001a84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a84:	b5b0      	push	{r4, r5, r7, lr}
 8001a86:	b088      	sub	sp, #32
 8001a88:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a8a:	f000 ffd3 	bl	8002a34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a8e:	f000 f825 	bl	8001adc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a92:	f000 fa0b 	bl	8001eac <MX_GPIO_Init>
  MX_I2C1_Init();
 8001a96:	f000 f891 	bl	8001bbc <MX_I2C1_Init>
  MX_SPI1_Init();
 8001a9a:	f000 f90f 	bl	8001cbc <MX_SPI1_Init>
  MX_I2C5_Init();
 8001a9e:	f000 f8cd 	bl	8001c3c <MX_I2C5_Init>
  MX_SPI6_Init();
 8001aa2:	f000 f961 	bl	8001d68 <MX_SPI6_Init>
  MX_USART3_UART_Init();
 8001aa6:	f000 f9b5 	bl	8001e14 <MX_USART3_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 3072);
 8001aaa:	4b0a      	ldr	r3, [pc, #40]	; (8001ad4 <main+0x50>)
 8001aac:	1d3c      	adds	r4, r7, #4
 8001aae:	461d      	mov	r5, r3
 8001ab0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ab2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ab4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ab8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001abc:	1d3b      	adds	r3, r7, #4
 8001abe:	2100      	movs	r1, #0
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f006 ff90 	bl	80089e6 <osThreadCreate>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	4a03      	ldr	r2, [pc, #12]	; (8001ad8 <main+0x54>)
 8001aca:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001acc:	f006 ff84 	bl	80089d8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ad0:	e7fe      	b.n	8001ad0 <main+0x4c>
 8001ad2:	bf00      	nop
 8001ad4:	08009f8c 	.word	0x08009f8c
 8001ad8:	240004d0 	.word	0x240004d0

08001adc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b09c      	sub	sp, #112	; 0x70
 8001ae0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ae2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ae6:	224c      	movs	r2, #76	; 0x4c
 8001ae8:	2100      	movs	r1, #0
 8001aea:	4618      	mov	r0, r3
 8001aec:	f008 fa0e 	bl	8009f0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001af0:	1d3b      	adds	r3, r7, #4
 8001af2:	2220      	movs	r2, #32
 8001af4:	2100      	movs	r1, #0
 8001af6:	4618      	mov	r0, r3
 8001af8:	f008 fa08 	bl	8009f0c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001afc:	2004      	movs	r0, #4
 8001afe:	f002 f8f5 	bl	8003cec <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001b02:	2300      	movs	r3, #0
 8001b04:	603b      	str	r3, [r7, #0]
 8001b06:	4b2c      	ldr	r3, [pc, #176]	; (8001bb8 <SystemClock_Config+0xdc>)
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001b0e:	4a2a      	ldr	r2, [pc, #168]	; (8001bb8 <SystemClock_Config+0xdc>)
 8001b10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b14:	6193      	str	r3, [r2, #24]
 8001b16:	4b28      	ldr	r3, [pc, #160]	; (8001bb8 <SystemClock_Config+0xdc>)
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b1e:	603b      	str	r3, [r7, #0]
 8001b20:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001b22:	bf00      	nop
 8001b24:	4b24      	ldr	r3, [pc, #144]	; (8001bb8 <SystemClock_Config+0xdc>)
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b30:	d1f8      	bne.n	8001b24 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b32:	2302      	movs	r3, #2
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001b36:	2301      	movs	r3, #1
 8001b38:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001b3a:	2340      	movs	r3, #64	; 0x40
 8001b3c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b42:	2300      	movs	r3, #0
 8001b44:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b46:	2304      	movs	r3, #4
 8001b48:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001b4a:	230c      	movs	r3, #12
 8001b4c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001b52:	2303      	movs	r3, #3
 8001b54:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001b56:	2302      	movs	r3, #2
 8001b58:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001b5a:	230c      	movs	r3, #12
 8001b5c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001b62:	2300      	movs	r3, #0
 8001b64:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f002 f918 	bl	8003da0 <HAL_RCC_OscConfig>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001b76:	f000 fc71 	bl	800245c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b7a:	233f      	movs	r3, #63	; 0x3f
 8001b7c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001b82:	2300      	movs	r3, #0
 8001b84:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001b86:	2300      	movs	r3, #0
 8001b88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001b8e:	2340      	movs	r3, #64	; 0x40
 8001b90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001b92:	2300      	movs	r3, #0
 8001b94:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001b96:	2300      	movs	r3, #0
 8001b98:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b9a:	1d3b      	adds	r3, r7, #4
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f002 fcd8 	bl	8004554 <HAL_RCC_ClockConfig>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001baa:	f000 fc57 	bl	800245c <Error_Handler>
  }
}
 8001bae:	bf00      	nop
 8001bb0:	3770      	adds	r7, #112	; 0x70
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	58024800 	.word	0x58024800

08001bbc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001bc0:	4b1b      	ldr	r3, [pc, #108]	; (8001c30 <MX_I2C1_Init+0x74>)
 8001bc2:	4a1c      	ldr	r2, [pc, #112]	; (8001c34 <MX_I2C1_Init+0x78>)
 8001bc4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8001bc6:	4b1a      	ldr	r3, [pc, #104]	; (8001c30 <MX_I2C1_Init+0x74>)
 8001bc8:	4a1b      	ldr	r2, [pc, #108]	; (8001c38 <MX_I2C1_Init+0x7c>)
 8001bca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001bcc:	4b18      	ldr	r3, [pc, #96]	; (8001c30 <MX_I2C1_Init+0x74>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bd2:	4b17      	ldr	r3, [pc, #92]	; (8001c30 <MX_I2C1_Init+0x74>)
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bd8:	4b15      	ldr	r3, [pc, #84]	; (8001c30 <MX_I2C1_Init+0x74>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001bde:	4b14      	ldr	r3, [pc, #80]	; (8001c30 <MX_I2C1_Init+0x74>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001be4:	4b12      	ldr	r3, [pc, #72]	; (8001c30 <MX_I2C1_Init+0x74>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bea:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <MX_I2C1_Init+0x74>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bf0:	4b0f      	ldr	r3, [pc, #60]	; (8001c30 <MX_I2C1_Init+0x74>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bf6:	480e      	ldr	r0, [pc, #56]	; (8001c30 <MX_I2C1_Init+0x74>)
 8001bf8:	f001 fa90 	bl	800311c <HAL_I2C_Init>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001c02:	f000 fc2b 	bl	800245c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c06:	2100      	movs	r1, #0
 8001c08:	4809      	ldr	r0, [pc, #36]	; (8001c30 <MX_I2C1_Init+0x74>)
 8001c0a:	f001 ffd7 	bl	8003bbc <HAL_I2CEx_ConfigAnalogFilter>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001c14:	f000 fc22 	bl	800245c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001c18:	2100      	movs	r1, #0
 8001c1a:	4805      	ldr	r0, [pc, #20]	; (8001c30 <MX_I2C1_Init+0x74>)
 8001c1c:	f002 f819 	bl	8003c52 <HAL_I2CEx_ConfigDigitalFilter>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001c26:	f000 fc19 	bl	800245c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	24000284 	.word	0x24000284
 8001c34:	40005400 	.word	0x40005400
 8001c38:	00707cbb 	.word	0x00707cbb

08001c3c <MX_I2C5_Init>:
  * @brief I2C5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C5_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C5_Init 0 */

  /* USER CODE BEGIN I2C5_Init 1 */

  /* USER CODE END I2C5_Init 1 */
  hi2c5.Instance = I2C5;
 8001c40:	4b1b      	ldr	r3, [pc, #108]	; (8001cb0 <MX_I2C5_Init+0x74>)
 8001c42:	4a1c      	ldr	r2, [pc, #112]	; (8001cb4 <MX_I2C5_Init+0x78>)
 8001c44:	601a      	str	r2, [r3, #0]
  hi2c5.Init.Timing = 0x00707CBB;
 8001c46:	4b1a      	ldr	r3, [pc, #104]	; (8001cb0 <MX_I2C5_Init+0x74>)
 8001c48:	4a1b      	ldr	r2, [pc, #108]	; (8001cb8 <MX_I2C5_Init+0x7c>)
 8001c4a:	605a      	str	r2, [r3, #4]
  hi2c5.Init.OwnAddress1 = 0;
 8001c4c:	4b18      	ldr	r3, [pc, #96]	; (8001cb0 <MX_I2C5_Init+0x74>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	609a      	str	r2, [r3, #8]
  hi2c5.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c52:	4b17      	ldr	r3, [pc, #92]	; (8001cb0 <MX_I2C5_Init+0x74>)
 8001c54:	2201      	movs	r2, #1
 8001c56:	60da      	str	r2, [r3, #12]
  hi2c5.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c58:	4b15      	ldr	r3, [pc, #84]	; (8001cb0 <MX_I2C5_Init+0x74>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	611a      	str	r2, [r3, #16]
  hi2c5.Init.OwnAddress2 = 0;
 8001c5e:	4b14      	ldr	r3, [pc, #80]	; (8001cb0 <MX_I2C5_Init+0x74>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	615a      	str	r2, [r3, #20]
  hi2c5.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c64:	4b12      	ldr	r3, [pc, #72]	; (8001cb0 <MX_I2C5_Init+0x74>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	619a      	str	r2, [r3, #24]
  hi2c5.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c6a:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <MX_I2C5_Init+0x74>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	61da      	str	r2, [r3, #28]
  hi2c5.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c70:	4b0f      	ldr	r3, [pc, #60]	; (8001cb0 <MX_I2C5_Init+0x74>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c5) != HAL_OK)
 8001c76:	480e      	ldr	r0, [pc, #56]	; (8001cb0 <MX_I2C5_Init+0x74>)
 8001c78:	f001 fa50 	bl	800311c <HAL_I2C_Init>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <MX_I2C5_Init+0x4a>
  {
    Error_Handler();
 8001c82:	f000 fbeb 	bl	800245c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c5, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c86:	2100      	movs	r1, #0
 8001c88:	4809      	ldr	r0, [pc, #36]	; (8001cb0 <MX_I2C5_Init+0x74>)
 8001c8a:	f001 ff97 	bl	8003bbc <HAL_I2CEx_ConfigAnalogFilter>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <MX_I2C5_Init+0x5c>
  {
    Error_Handler();
 8001c94:	f000 fbe2 	bl	800245c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c5, 0) != HAL_OK)
 8001c98:	2100      	movs	r1, #0
 8001c9a:	4805      	ldr	r0, [pc, #20]	; (8001cb0 <MX_I2C5_Init+0x74>)
 8001c9c:	f001 ffd9 	bl	8003c52 <HAL_I2CEx_ConfigDigitalFilter>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <MX_I2C5_Init+0x6e>
  {
    Error_Handler();
 8001ca6:	f000 fbd9 	bl	800245c <Error_Handler>
  }
  /* USER CODE BEGIN I2C5_Init 2 */

  /* USER CODE END I2C5_Init 2 */

}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	240002d8 	.word	0x240002d8
 8001cb4:	40006400 	.word	0x40006400
 8001cb8:	00707cbb 	.word	0x00707cbb

08001cbc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001cc0:	4b27      	ldr	r3, [pc, #156]	; (8001d60 <MX_SPI1_Init+0xa4>)
 8001cc2:	4a28      	ldr	r2, [pc, #160]	; (8001d64 <MX_SPI1_Init+0xa8>)
 8001cc4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cc6:	4b26      	ldr	r3, [pc, #152]	; (8001d60 <MX_SPI1_Init+0xa4>)
 8001cc8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001ccc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cce:	4b24      	ldr	r3, [pc, #144]	; (8001d60 <MX_SPI1_Init+0xa4>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cd4:	4b22      	ldr	r3, [pc, #136]	; (8001d60 <MX_SPI1_Init+0xa4>)
 8001cd6:	2207      	movs	r2, #7
 8001cd8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cda:	4b21      	ldr	r3, [pc, #132]	; (8001d60 <MX_SPI1_Init+0xa4>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ce0:	4b1f      	ldr	r3, [pc, #124]	; (8001d60 <MX_SPI1_Init+0xa4>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ce6:	4b1e      	ldr	r3, [pc, #120]	; (8001d60 <MX_SPI1_Init+0xa4>)
 8001ce8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001cec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001cee:	4b1c      	ldr	r3, [pc, #112]	; (8001d60 <MX_SPI1_Init+0xa4>)
 8001cf0:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001cf4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cf6:	4b1a      	ldr	r3, [pc, #104]	; (8001d60 <MX_SPI1_Init+0xa4>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cfc:	4b18      	ldr	r3, [pc, #96]	; (8001d60 <MX_SPI1_Init+0xa4>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d02:	4b17      	ldr	r3, [pc, #92]	; (8001d60 <MX_SPI1_Init+0xa4>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001d08:	4b15      	ldr	r3, [pc, #84]	; (8001d60 <MX_SPI1_Init+0xa4>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d0e:	4b14      	ldr	r3, [pc, #80]	; (8001d60 <MX_SPI1_Init+0xa4>)
 8001d10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d14:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001d16:	4b12      	ldr	r3, [pc, #72]	; (8001d60 <MX_SPI1_Init+0xa4>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001d1c:	4b10      	ldr	r3, [pc, #64]	; (8001d60 <MX_SPI1_Init+0xa4>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001d22:	4b0f      	ldr	r3, [pc, #60]	; (8001d60 <MX_SPI1_Init+0xa4>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001d28:	4b0d      	ldr	r3, [pc, #52]	; (8001d60 <MX_SPI1_Init+0xa4>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001d2e:	4b0c      	ldr	r3, [pc, #48]	; (8001d60 <MX_SPI1_Init+0xa4>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001d34:	4b0a      	ldr	r3, [pc, #40]	; (8001d60 <MX_SPI1_Init+0xa4>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001d3a:	4b09      	ldr	r3, [pc, #36]	; (8001d60 <MX_SPI1_Init+0xa4>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001d40:	4b07      	ldr	r3, [pc, #28]	; (8001d60 <MX_SPI1_Init+0xa4>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001d46:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <MX_SPI1_Init+0xa4>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d4c:	4804      	ldr	r0, [pc, #16]	; (8001d60 <MX_SPI1_Init+0xa4>)
 8001d4e:	f004 fd4f 	bl	80067f0 <HAL_SPI_Init>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001d58:	f000 fb80 	bl	800245c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d5c:	bf00      	nop
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	2400032c 	.word	0x2400032c
 8001d64:	40013000 	.word	0x40013000

08001d68 <MX_SPI6_Init>:
  * @brief SPI6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI6_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  /* SPI6 parameter configuration*/
  hspi6.Instance = SPI6;
 8001d6c:	4b27      	ldr	r3, [pc, #156]	; (8001e0c <MX_SPI6_Init+0xa4>)
 8001d6e:	4a28      	ldr	r2, [pc, #160]	; (8001e10 <MX_SPI6_Init+0xa8>)
 8001d70:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 8001d72:	4b26      	ldr	r3, [pc, #152]	; (8001e0c <MX_SPI6_Init+0xa4>)
 8001d74:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001d78:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 8001d7a:	4b24      	ldr	r3, [pc, #144]	; (8001e0c <MX_SPI6_Init+0xa4>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d80:	4b22      	ldr	r3, [pc, #136]	; (8001e0c <MX_SPI6_Init+0xa4>)
 8001d82:	2207      	movs	r2, #7
 8001d84:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d86:	4b21      	ldr	r3, [pc, #132]	; (8001e0c <MX_SPI6_Init+0xa4>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d8c:	4b1f      	ldr	r3, [pc, #124]	; (8001e0c <MX_SPI6_Init+0xa4>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 8001d92:	4b1e      	ldr	r3, [pc, #120]	; (8001e0c <MX_SPI6_Init+0xa4>)
 8001d94:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001d98:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001d9a:	4b1c      	ldr	r3, [pc, #112]	; (8001e0c <MX_SPI6_Init+0xa4>)
 8001d9c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001da0:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001da2:	4b1a      	ldr	r3, [pc, #104]	; (8001e0c <MX_SPI6_Init+0xa4>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8001da8:	4b18      	ldr	r3, [pc, #96]	; (8001e0c <MX_SPI6_Init+0xa4>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dae:	4b17      	ldr	r3, [pc, #92]	; (8001e0c <MX_SPI6_Init+0xa4>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi6.Init.CRCPolynomial = 0x0;
 8001db4:	4b15      	ldr	r3, [pc, #84]	; (8001e0c <MX_SPI6_Init+0xa4>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001dba:	4b14      	ldr	r3, [pc, #80]	; (8001e0c <MX_SPI6_Init+0xa4>)
 8001dbc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dc0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001dc2:	4b12      	ldr	r3, [pc, #72]	; (8001e0c <MX_SPI6_Init+0xa4>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001dc8:	4b10      	ldr	r3, [pc, #64]	; (8001e0c <MX_SPI6_Init+0xa4>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001dce:	4b0f      	ldr	r3, [pc, #60]	; (8001e0c <MX_SPI6_Init+0xa4>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001dd4:	4b0d      	ldr	r3, [pc, #52]	; (8001e0c <MX_SPI6_Init+0xa4>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001dda:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <MX_SPI6_Init+0xa4>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	649a      	str	r2, [r3, #72]	; 0x48
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001de0:	4b0a      	ldr	r3, [pc, #40]	; (8001e0c <MX_SPI6_Init+0xa4>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001de6:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <MX_SPI6_Init+0xa4>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	651a      	str	r2, [r3, #80]	; 0x50
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001dec:	4b07      	ldr	r3, [pc, #28]	; (8001e0c <MX_SPI6_Init+0xa4>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001df2:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <MX_SPI6_Init+0xa4>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 8001df8:	4804      	ldr	r0, [pc, #16]	; (8001e0c <MX_SPI6_Init+0xa4>)
 8001dfa:	f004 fcf9 	bl	80067f0 <HAL_SPI_Init>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_SPI6_Init+0xa0>
  {
    Error_Handler();
 8001e04:	f000 fb2a 	bl	800245c <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 8001e08:	bf00      	nop
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	240003b4 	.word	0x240003b4
 8001e10:	58001400 	.word	0x58001400

08001e14 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e18:	4b22      	ldr	r3, [pc, #136]	; (8001ea4 <MX_USART3_UART_Init+0x90>)
 8001e1a:	4a23      	ldr	r2, [pc, #140]	; (8001ea8 <MX_USART3_UART_Init+0x94>)
 8001e1c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001e1e:	4b21      	ldr	r3, [pc, #132]	; (8001ea4 <MX_USART3_UART_Init+0x90>)
 8001e20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e24:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e26:	4b1f      	ldr	r3, [pc, #124]	; (8001ea4 <MX_USART3_UART_Init+0x90>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e2c:	4b1d      	ldr	r3, [pc, #116]	; (8001ea4 <MX_USART3_UART_Init+0x90>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e32:	4b1c      	ldr	r3, [pc, #112]	; (8001ea4 <MX_USART3_UART_Init+0x90>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e38:	4b1a      	ldr	r3, [pc, #104]	; (8001ea4 <MX_USART3_UART_Init+0x90>)
 8001e3a:	220c      	movs	r2, #12
 8001e3c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e3e:	4b19      	ldr	r3, [pc, #100]	; (8001ea4 <MX_USART3_UART_Init+0x90>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e44:	4b17      	ldr	r3, [pc, #92]	; (8001ea4 <MX_USART3_UART_Init+0x90>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e4a:	4b16      	ldr	r3, [pc, #88]	; (8001ea4 <MX_USART3_UART_Init+0x90>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e50:	4b14      	ldr	r3, [pc, #80]	; (8001ea4 <MX_USART3_UART_Init+0x90>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e56:	4b13      	ldr	r3, [pc, #76]	; (8001ea4 <MX_USART3_UART_Init+0x90>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e5c:	4811      	ldr	r0, [pc, #68]	; (8001ea4 <MX_USART3_UART_Init+0x90>)
 8001e5e:	f005 fb34 	bl	80074ca <HAL_UART_Init>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001e68:	f000 faf8 	bl	800245c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	480d      	ldr	r0, [pc, #52]	; (8001ea4 <MX_USART3_UART_Init+0x90>)
 8001e70:	f006 fccf 	bl	8008812 <HAL_UARTEx_SetTxFifoThreshold>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001e7a:	f000 faef 	bl	800245c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e7e:	2100      	movs	r1, #0
 8001e80:	4808      	ldr	r0, [pc, #32]	; (8001ea4 <MX_USART3_UART_Init+0x90>)
 8001e82:	f006 fd04 	bl	800888e <HAL_UARTEx_SetRxFifoThreshold>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001e8c:	f000 fae6 	bl	800245c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001e90:	4804      	ldr	r0, [pc, #16]	; (8001ea4 <MX_USART3_UART_Init+0x90>)
 8001e92:	f006 fc85 	bl	80087a0 <HAL_UARTEx_DisableFifoMode>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001e9c:	f000 fade 	bl	800245c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ea0:	bf00      	nop
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	2400043c 	.word	0x2400043c
 8001ea8:	40004800 	.word	0x40004800

08001eac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b08c      	sub	sp, #48	; 0x30
 8001eb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb2:	f107 031c 	add.w	r3, r7, #28
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	605a      	str	r2, [r3, #4]
 8001ebc:	609a      	str	r2, [r3, #8]
 8001ebe:	60da      	str	r2, [r3, #12]
 8001ec0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ec2:	4b7e      	ldr	r3, [pc, #504]	; (80020bc <MX_GPIO_Init+0x210>)
 8001ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ec8:	4a7c      	ldr	r2, [pc, #496]	; (80020bc <MX_GPIO_Init+0x210>)
 8001eca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ece:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ed2:	4b7a      	ldr	r3, [pc, #488]	; (80020bc <MX_GPIO_Init+0x210>)
 8001ed4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001edc:	61bb      	str	r3, [r7, #24]
 8001ede:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ee0:	4b76      	ldr	r3, [pc, #472]	; (80020bc <MX_GPIO_Init+0x210>)
 8001ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ee6:	4a75      	ldr	r2, [pc, #468]	; (80020bc <MX_GPIO_Init+0x210>)
 8001ee8:	f043 0304 	orr.w	r3, r3, #4
 8001eec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ef0:	4b72      	ldr	r3, [pc, #456]	; (80020bc <MX_GPIO_Init+0x210>)
 8001ef2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ef6:	f003 0304 	and.w	r3, r3, #4
 8001efa:	617b      	str	r3, [r7, #20]
 8001efc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001efe:	4b6f      	ldr	r3, [pc, #444]	; (80020bc <MX_GPIO_Init+0x210>)
 8001f00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f04:	4a6d      	ldr	r2, [pc, #436]	; (80020bc <MX_GPIO_Init+0x210>)
 8001f06:	f043 0301 	orr.w	r3, r3, #1
 8001f0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f0e:	4b6b      	ldr	r3, [pc, #428]	; (80020bc <MX_GPIO_Init+0x210>)
 8001f10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f14:	f003 0301 	and.w	r3, r3, #1
 8001f18:	613b      	str	r3, [r7, #16]
 8001f1a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f1c:	4b67      	ldr	r3, [pc, #412]	; (80020bc <MX_GPIO_Init+0x210>)
 8001f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f22:	4a66      	ldr	r2, [pc, #408]	; (80020bc <MX_GPIO_Init+0x210>)
 8001f24:	f043 0310 	orr.w	r3, r3, #16
 8001f28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f2c:	4b63      	ldr	r3, [pc, #396]	; (80020bc <MX_GPIO_Init+0x210>)
 8001f2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f32:	f003 0310 	and.w	r3, r3, #16
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f3a:	4b60      	ldr	r3, [pc, #384]	; (80020bc <MX_GPIO_Init+0x210>)
 8001f3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f40:	4a5e      	ldr	r2, [pc, #376]	; (80020bc <MX_GPIO_Init+0x210>)
 8001f42:	f043 0308 	orr.w	r3, r3, #8
 8001f46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f4a:	4b5c      	ldr	r3, [pc, #368]	; (80020bc <MX_GPIO_Init+0x210>)
 8001f4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f50:	f003 0308 	and.w	r3, r3, #8
 8001f54:	60bb      	str	r3, [r7, #8]
 8001f56:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f58:	4b58      	ldr	r3, [pc, #352]	; (80020bc <MX_GPIO_Init+0x210>)
 8001f5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f5e:	4a57      	ldr	r2, [pc, #348]	; (80020bc <MX_GPIO_Init+0x210>)
 8001f60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f68:	4b54      	ldr	r3, [pc, #336]	; (80020bc <MX_GPIO_Init+0x210>)
 8001f6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f72:	607b      	str	r3, [r7, #4]
 8001f74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f76:	4b51      	ldr	r3, [pc, #324]	; (80020bc <MX_GPIO_Init+0x210>)
 8001f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f7c:	4a4f      	ldr	r2, [pc, #316]	; (80020bc <MX_GPIO_Init+0x210>)
 8001f7e:	f043 0302 	orr.w	r3, r3, #2
 8001f82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f86:	4b4d      	ldr	r3, [pc, #308]	; (80020bc <MX_GPIO_Init+0x210>)
 8001f88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	603b      	str	r3, [r7, #0]
 8001f92:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI6_CS_GPIO_Port, SPI6_CS_Pin, GPIO_PIN_RESET);
 8001f94:	2200      	movs	r2, #0
 8001f96:	2110      	movs	r1, #16
 8001f98:	4849      	ldr	r0, [pc, #292]	; (80020c0 <MX_GPIO_Init+0x214>)
 8001f9a:	f001 f8a5 	bl	80030e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_DIO3_GPIO_Port, MCU_DIO3_Pin, GPIO_PIN_RESET);
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fa4:	4847      	ldr	r0, [pc, #284]	; (80020c4 <MX_GPIO_Init+0x218>)
 8001fa6:	f001 f89f 	bl	80030e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, MCU_DIO2_Pin|MCU_DIO1_Pin|SPI1_CS_Pin|EEPROM_WC_Pin, GPIO_PIN_RESET);
 8001faa:	2200      	movs	r2, #0
 8001fac:	f44f 614c 	mov.w	r1, #3264	; 0xcc0
 8001fb0:	4845      	ldr	r0, [pc, #276]	; (80020c8 <MX_GPIO_Init+0x21c>)
 8001fb2:	f001 f899 	bl	80030e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_LED_R_GPIO_Port, MCU_LED_R_Pin, GPIO_PIN_RESET);
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fbc:	4843      	ldr	r0, [pc, #268]	; (80020cc <MX_GPIO_Init+0x220>)
 8001fbe:	f001 f893 	bl	80030e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, MCU_LED_G_Pin|MCU_LED_B_Pin, GPIO_PIN_RESET);
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	2103      	movs	r1, #3
 8001fc6:	4842      	ldr	r0, [pc, #264]	; (80020d0 <MX_GPIO_Init+0x224>)
 8001fc8:	f001 f88e 	bl	80030e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MODE_SWITCH_Pin */
  GPIO_InitStruct.Pin = MODE_SWITCH_Pin;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MODE_SWITCH_GPIO_Port, &GPIO_InitStruct);
 8001fd8:	f107 031c 	add.w	r3, r7, #28
 8001fdc:	4619      	mov	r1, r3
 8001fde:	483d      	ldr	r0, [pc, #244]	; (80020d4 <MX_GPIO_Init+0x228>)
 8001fe0:	f000 fec2 	bl	8002d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI6_CS_Pin */
  GPIO_InitStruct.Pin = SPI6_CS_Pin;
 8001fe4:	2310      	movs	r3, #16
 8001fe6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fec:	2300      	movs	r3, #0
 8001fee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI6_CS_GPIO_Port, &GPIO_InitStruct);
 8001ff4:	f107 031c 	add.w	r3, r7, #28
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4831      	ldr	r0, [pc, #196]	; (80020c0 <MX_GPIO_Init+0x214>)
 8001ffc:	f000 feb4 	bl	8002d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE11 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002000:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002004:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002006:	2302      	movs	r3, #2
 8002008:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200a:	2300      	movs	r3, #0
 800200c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200e:	2300      	movs	r3, #0
 8002010:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002012:	2305      	movs	r3, #5
 8002014:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002016:	f107 031c 	add.w	r3, r7, #28
 800201a:	4619      	mov	r1, r3
 800201c:	482c      	ldr	r0, [pc, #176]	; (80020d0 <MX_GPIO_Init+0x224>)
 800201e:	f000 fea3 	bl	8002d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_DIO3_Pin */
  GPIO_InitStruct.Pin = MCU_DIO3_Pin;
 8002022:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002026:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002028:	2301      	movs	r3, #1
 800202a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202c:	2300      	movs	r3, #0
 800202e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002030:	2300      	movs	r3, #0
 8002032:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(MCU_DIO3_GPIO_Port, &GPIO_InitStruct);
 8002034:	f107 031c 	add.w	r3, r7, #28
 8002038:	4619      	mov	r1, r3
 800203a:	4822      	ldr	r0, [pc, #136]	; (80020c4 <MX_GPIO_Init+0x218>)
 800203c:	f000 fe94 	bl	8002d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_DIO2_Pin MCU_DIO1_Pin SPI1_CS_Pin EEPROM_WC_Pin */
  GPIO_InitStruct.Pin = MCU_DIO2_Pin|MCU_DIO1_Pin|SPI1_CS_Pin|EEPROM_WC_Pin;
 8002040:	f44f 634c 	mov.w	r3, #3264	; 0xcc0
 8002044:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002046:	2301      	movs	r3, #1
 8002048:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204a:	2300      	movs	r3, #0
 800204c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204e:	2300      	movs	r3, #0
 8002050:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002052:	f107 031c 	add.w	r3, r7, #28
 8002056:	4619      	mov	r1, r3
 8002058:	481b      	ldr	r0, [pc, #108]	; (80020c8 <MX_GPIO_Init+0x21c>)
 800205a:	f000 fe85 	bl	8002d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800205e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002062:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002064:	2303      	movs	r3, #3
 8002066:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002068:	2300      	movs	r3, #0
 800206a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800206c:	f107 031c 	add.w	r3, r7, #28
 8002070:	4619      	mov	r1, r3
 8002072:	4816      	ldr	r0, [pc, #88]	; (80020cc <MX_GPIO_Init+0x220>)
 8002074:	f000 fe78 	bl	8002d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_LED_R_Pin */
  GPIO_InitStruct.Pin = MCU_LED_R_Pin;
 8002078:	f44f 7300 	mov.w	r3, #512	; 0x200
 800207c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800207e:	2301      	movs	r3, #1
 8002080:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002082:	2300      	movs	r3, #0
 8002084:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002086:	2300      	movs	r3, #0
 8002088:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(MCU_LED_R_GPIO_Port, &GPIO_InitStruct);
 800208a:	f107 031c 	add.w	r3, r7, #28
 800208e:	4619      	mov	r1, r3
 8002090:	480e      	ldr	r0, [pc, #56]	; (80020cc <MX_GPIO_Init+0x220>)
 8002092:	f000 fe69 	bl	8002d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_LED_G_Pin MCU_LED_B_Pin */
  GPIO_InitStruct.Pin = MCU_LED_G_Pin|MCU_LED_B_Pin;
 8002096:	2303      	movs	r3, #3
 8002098:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800209a:	2301      	movs	r3, #1
 800209c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a2:	2300      	movs	r3, #0
 80020a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020a6:	f107 031c 	add.w	r3, r7, #28
 80020aa:	4619      	mov	r1, r3
 80020ac:	4808      	ldr	r0, [pc, #32]	; (80020d0 <MX_GPIO_Init+0x224>)
 80020ae:	f000 fe5b 	bl	8002d68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80020b2:	bf00      	nop
 80020b4:	3730      	adds	r7, #48	; 0x30
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	58024400 	.word	0x58024400
 80020c0:	58020000 	.word	0x58020000
 80020c4:	58020c00 	.word	0x58020c00
 80020c8:	58021800 	.word	0x58021800
 80020cc:	58020400 	.word	0x58020400
 80020d0:	58021000 	.word	0x58021000
 80020d4:	58020800 	.word	0x58020800

080020d8 <getTimestamp>:
        float accel[3];
        float gyro[3];
    } values;
};

uint64_t getTimestamp(void) {
 80020d8:	b5b0      	push	{r4, r5, r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
	uint32_t timestamp = HAL_GetTick();
 80020de:	f000 fd2f 	bl	8002b40 <HAL_GetTick>
 80020e2:	6078      	str	r0, [r7, #4]
	return (uint64_t)timestamp;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	461c      	mov	r4, r3
 80020ea:	4615      	mov	r5, r2
 80020ec:	4622      	mov	r2, r4
 80020ee:	462b      	mov	r3, r5
}
 80020f0:	4610      	mov	r0, r2
 80020f2:	4619      	mov	r1, r3
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080020fc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	f5ad 5d93 	sub.w	sp, sp, #4704	; 0x1260
 8002102:	af00      	add	r7, sp, #0
 8002104:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002108:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800210c:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  TickType_t xLastWakeTime;
  const TickType_t xFrequency = 100; //Milliseconds
 800210e:	2364      	movs	r3, #100	; 0x64
 8002110:	f241 225c 	movw	r2, #4700	; 0x125c
 8002114:	443a      	add	r2, r7
 8002116:	6013      	str	r3, [r2, #0]
  xLastWakeTime = xTaskGetTickCount();
 8002118:	f007 f880 	bl	800921c <xTaskGetTickCount>
 800211c:	4603      	mov	r3, r0
 800211e:	f241 2254 	movw	r2, #4692	; 0x1254
 8002122:	443a      	add	r2, r7
 8002124:	6013      	str	r3, [r2, #0]
  float pres = 0.0;
 8002126:	f04f 0300 	mov.w	r3, #0
 800212a:	f241 2250 	movw	r2, #4688	; 0x1250
 800212e:	443a      	add	r2, r7
 8002130:	6013      	str	r3, [r2, #0]
  float temp = 0.0;
 8002132:	f04f 0300 	mov.w	r3, #0
 8002136:	f241 224c 	movw	r2, #4684	; 0x124c
 800213a:	443a      	add	r2, r7
 800213c:	6013      	str	r3, [r2, #0]
  #define block_offset (uint16_t)100*40
  Accel accel = {0};
 800213e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]
 8002146:	605a      	str	r2, [r3, #4]
 8002148:	609a      	str	r2, [r3, #8]
  AngRate gyro = {0};
 800214a:	f241 2334 	movw	r3, #4660	; 0x1234
 800214e:	443b      	add	r3, r7
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	605a      	str	r2, [r3, #4]
 8002156:	609a      	str	r2, [r3, #8]

  IMU IMU1 = {0};
 8002158:	f241 2314 	movw	r3, #4628	; 0x1214
 800215c:	443b      	add	r3, r7
 800215e:	2220      	movs	r2, #32
 8002160:	2100      	movs	r1, #0
 8002162:	4618      	mov	r0, r3
 8002164:	f007 fed2 	bl	8009f0c <memset>
  IMU1.hi2c = &hi2c5;
 8002168:	4bb3      	ldr	r3, [pc, #716]	; (8002438 <StartDefaultTask+0x33c>)
 800216a:	f241 2214 	movw	r2, #4628	; 0x1214
 800216e:	443a      	add	r2, r7
 8002170:	6013      	str	r3, [r2, #0]
  IMU1.I2C_TIMEOUT = 1000;
 8002172:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002176:	f241 2218 	movw	r2, #4632	; 0x1218
 800217a:	443a      	add	r2, r7
 800217c:	8013      	strh	r3, [r2, #0]
  IMU1.G_x_offset = 0;
 800217e:	f04f 0300 	mov.w	r3, #0
 8002182:	f241 2228 	movw	r2, #4648	; 0x1228
 8002186:	443a      	add	r2, r7
 8002188:	6013      	str	r3, [r2, #0]
  IMU1.G_y_offset = 0;
 800218a:	f04f 0300 	mov.w	r3, #0
 800218e:	f241 222c 	movw	r2, #4652	; 0x122c
 8002192:	443a      	add	r2, r7
 8002194:	6013      	str	r3, [r2, #0]
  IMU1.G_z_offset = 0;
 8002196:	f04f 0300 	mov.w	r3, #0
 800219a:	f241 2230 	movw	r2, #4656	; 0x1230
 800219e:	443a      	add	r2, r7
 80021a0:	6013      	str	r3, [r2, #0]
  IMU1.XL_x_offset = 0;
 80021a2:	f04f 0300 	mov.w	r3, #0
 80021a6:	f241 221c 	movw	r2, #4636	; 0x121c
 80021aa:	443a      	add	r2, r7
 80021ac:	6013      	str	r3, [r2, #0]
  IMU1.XL_y_offset = 0;
 80021ae:	f04f 0300 	mov.w	r3, #0
 80021b2:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 80021b6:	6013      	str	r3, [r2, #0]
  IMU1.XL_z_offset = 0;
 80021b8:	f04f 0300 	mov.w	r3, #0
 80021bc:	f241 2224 	movw	r2, #4644	; 0x1224
 80021c0:	443a      	add	r2, r7
 80021c2:	6013      	str	r3, [r2, #0]

  BAR BAR1 = {0};
 80021c4:	f241 13fc 	movw	r3, #4604	; 0x11fc
 80021c8:	443b      	add	r3, r7
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]
 80021ce:	605a      	str	r2, [r3, #4]
 80021d0:	609a      	str	r2, [r3, #8]
 80021d2:	60da      	str	r2, [r3, #12]
 80021d4:	611a      	str	r2, [r3, #16]
 80021d6:	615a      	str	r2, [r3, #20]
  BAR1.hspi = &hspi6;
 80021d8:	4b98      	ldr	r3, [pc, #608]	; (800243c <StartDefaultTask+0x340>)
 80021da:	f241 12fc 	movw	r2, #4604	; 0x11fc
 80021de:	443a      	add	r2, r7
 80021e0:	6013      	str	r3, [r2, #0]
  BAR1.SPI_TIMEOUT = 1000;
 80021e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021e6:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 80021ea:	8013      	strh	r3, [r2, #0]
  BAR1.CS_GPIO_Port = GPIOA;
 80021ec:	4b94      	ldr	r3, [pc, #592]	; (8002440 <StartDefaultTask+0x344>)
 80021ee:	f241 2204 	movw	r2, #4612	; 0x1204
 80021f2:	443a      	add	r2, r7
 80021f4:	6013      	str	r3, [r2, #0]
  BAR1.CS_GPIO_Pin = GPIO_PIN_4;
 80021f6:	2310      	movs	r3, #16
 80021f8:	f241 2208 	movw	r2, #4616	; 0x1208
 80021fc:	443a      	add	r2, r7
 80021fe:	8013      	strh	r3, [r2, #0]
  BAR1.pres_offset = 0;
 8002200:	f04f 0300 	mov.w	r3, #0
 8002204:	f241 220c 	movw	r2, #4620	; 0x120c
 8002208:	443a      	add	r2, r7
 800220a:	6013      	str	r3, [r2, #0]
  BAR1.alt_offset = 0;
 800220c:	f04f 0300 	mov.w	r3, #0
 8002210:	f241 2210 	movw	r2, #4624	; 0x1210
 8002214:	443a      	add	r2, r7
 8002216:	6013      	str	r3, [r2, #0]

  union Data data;

  W25N01GV_Flash flash;
  init_flash(&flash, &hspi1, GPIOG, GPIO_PIN_10);
 8002218:	f607 70b8 	addw	r0, r7, #4024	; 0xfb8
 800221c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002220:	4a88      	ldr	r2, [pc, #544]	; (8002444 <StartDefaultTask+0x348>)
 8002222:	4989      	ldr	r1, [pc, #548]	; (8002448 <StartDefaultTask+0x34c>)
 8002224:	f7ff f9b7 	bl	8001596 <init_flash>

  if (IMU_init(&IMU1)) {
 8002228:	f241 2314 	movw	r3, #4628	; 0x1214
 800222c:	443b      	add	r3, r7
 800222e:	4618      	mov	r0, r3
 8002230:	f7fe fc4c 	bl	8000acc <IMU_init>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <StartDefaultTask+0x142>
  	Error_Handler(); //We have not read the who am I register, so something is probably wrong
 800223a:	f000 f90f 	bl	800245c <Error_Handler>
  }

  if (BAR_init(&BAR1)) {
 800223e:	f241 13fc 	movw	r3, #4604	; 0x11fc
 8002242:	443b      	add	r3, r7
 8002244:	4618      	mov	r0, r3
 8002246:	f7fe faa6 	bl	8000796 <BAR_init>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <StartDefaultTask+0x158>
	  Error_Handler(); //We have not read the who am I register, so something is probably wrong
 8002250:	f000 f904 	bl	800245c <Error_Handler>
  }

  // Detect if the jumper is on read or write mode
  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0)) { // Read mode
 8002254:	2101      	movs	r1, #1
 8002256:	487d      	ldr	r0, [pc, #500]	; (800244c <StartDefaultTask+0x350>)
 8002258:	f000 ff2e 	bl	80030b8 <HAL_GPIO_ReadPin>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d031      	beq.n	80022c6 <StartDefaultTask+0x1ca>

	  //finish_flash_write(&flash); // Finish writing, if we haven't already
	  HAL_Delay(10000); // 10 second delay so that the client can setup
 8002262:	f242 7010 	movw	r0, #10000	; 0x2710
 8002266:	f000 fc77 	bl	8002b58 <HAL_Delay>
	  uint32_t page = 0;
 800226a:	2300      	movs	r3, #0
 800226c:	f241 2258 	movw	r2, #4696	; 0x1258
 8002270:	443a      	add	r2, r7
 8002272:	6013      	str	r3, [r2, #0]
	  uint8_t read_buffer[W25N01GV_BYTES_PER_PAGE];  // W25N01GV_BYTES_PER_PAGE == 2048 == 2KB
	  reset_flash_read_pointer(&flash);
 8002274:	f607 73b8 	addw	r3, r7, #4024	; 0xfb8
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff fb49 	bl	8001910 <reset_flash_read_pointer>

	  while (page < flash.current_page) {
 800227e:	e014      	b.n	80022aa <StartDefaultTask+0x1ae>
		  read_next_2KB_from_flash(&flash, read_buffer);
 8002280:	4b73      	ldr	r3, [pc, #460]	; (8002450 <StartDefaultTask+0x354>)
 8002282:	f503 5393 	add.w	r3, r3, #4704	; 0x1260
 8002286:	443b      	add	r3, r7
 8002288:	f607 72b8 	addw	r2, r7, #4024	; 0xfb8
 800228c:	4619      	mov	r1, r3
 800228e:	4610      	mov	r0, r2
 8002290:	f7ff fb4c 	bl	800192c <read_next_2KB_from_flash>
		  HAL_UART_Transmit(&huart3, read_buffer, sizeof(read_buffer), 1000);
 8002294:	496e      	ldr	r1, [pc, #440]	; (8002450 <StartDefaultTask+0x354>)
 8002296:	f501 5393 	add.w	r3, r1, #4704	; 0x1260
 800229a:	19d9      	adds	r1, r3, r7
 800229c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022a4:	486b      	ldr	r0, [pc, #428]	; (8002454 <StartDefaultTask+0x358>)
 80022a6:	f005 f960 	bl	800756a <HAL_UART_Transmit>
	  while (page < flash.current_page) {
 80022aa:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 80022ae:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 80022b2:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 80022b6:	461a      	mov	r2, r3
 80022b8:	f241 2358 	movw	r3, #4696	; 0x1258
 80022bc:	443b      	add	r3, r7
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d3dd      	bcc.n	8002280 <StartDefaultTask+0x184>
		  write_to_flash(&flash, data.bytes, 40);
	  }
	  finish_flash_write(&flash);
  }
  /* USER CODE END 5 */
}
 80022c4:	e0b3      	b.n	800242e <StartDefaultTask+0x332>
	  erase_flash(&flash);
 80022c6:	f607 73b8 	addw	r3, r7, #4024	; 0xfb8
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7ff fb4d 	bl	800196a <erase_flash>
	  add_test_delimiter(&flash);
 80022d0:	f607 73b8 	addw	r3, r7, #4024	; 0xfb8
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff fb95 	bl	8001a04 <add_test_delimiter>
	  uint8_t flash_offset[block_offset] = {0x00};
 80022da:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80022de:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	3304      	adds	r3, #4
 80022e8:	f640 729c 	movw	r2, #3996	; 0xf9c
 80022ec:	2100      	movs	r1, #0
 80022ee:	4618      	mov	r0, r3
 80022f0:	f007 fe0c 	bl	8009f0c <memset>
	  write_to_flash(&flash, flash_offset, block_offset);
 80022f4:	4b56      	ldr	r3, [pc, #344]	; (8002450 <StartDefaultTask+0x354>)
 80022f6:	f503 5393 	add.w	r3, r3, #4704	; 0x1260
 80022fa:	443b      	add	r3, r7
 80022fc:	f607 70b8 	addw	r0, r7, #4024	; 0xfb8
 8002300:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002304:	4619      	mov	r1, r3
 8002306:	f7ff fa37 	bl	8001778 <write_to_flash>
	  uint8_t data_start_header[10] = {0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00};
 800230a:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800230e:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8002312:	4a51      	ldr	r2, [pc, #324]	; (8002458 <StartDefaultTask+0x35c>)
 8002314:	ca07      	ldmia	r2, {r0, r1, r2}
 8002316:	c303      	stmia	r3!, {r0, r1}
 8002318:	801a      	strh	r2, [r3, #0]
	  write_to_flash(&flash, data_start_header, 10);
 800231a:	f607 71ac 	addw	r1, r7, #4012	; 0xfac
 800231e:	f607 73b8 	addw	r3, r7, #4024	; 0xfb8
 8002322:	220a      	movs	r2, #10
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff fa27 	bl	8001778 <write_to_flash>
		  vTaskDelayUntil(&xLastWakeTime, xFrequency);
 800232a:	f241 2354 	movw	r3, #4692	; 0x1254
 800232e:	443b      	add	r3, r7
 8002330:	f241 225c 	movw	r2, #4700	; 0x125c
 8002334:	443a      	add	r2, r7
 8002336:	6811      	ldr	r1, [r2, #0]
 8002338:	4618      	mov	r0, r3
 800233a:	f006 fde7 	bl	8008f0c <vTaskDelayUntil>
		  BAR_getPres(&BAR1, &pres);
 800233e:	f241 2250 	movw	r2, #4688	; 0x1250
 8002342:	443a      	add	r2, r7
 8002344:	f241 13fc 	movw	r3, #4604	; 0x11fc
 8002348:	443b      	add	r3, r7
 800234a:	4611      	mov	r1, r2
 800234c:	4618      	mov	r0, r3
 800234e:	f7fe fa3f 	bl	80007d0 <BAR_getPres>
		  BAR_getTemp(&BAR1, &temp);
 8002352:	f241 224c 	movw	r2, #4684	; 0x124c
 8002356:	443a      	add	r2, r7
 8002358:	f241 13fc 	movw	r3, #4604	; 0x11fc
 800235c:	443b      	add	r3, r7
 800235e:	4611      	mov	r1, r2
 8002360:	4618      	mov	r0, r3
 8002362:	f7fe fa5f 	bl	8000824 <BAR_getTemp>
		  IMU_getAccel(&IMU1, &accel);
 8002366:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 800236a:	f241 2314 	movw	r3, #4628	; 0x1214
 800236e:	443b      	add	r3, r7
 8002370:	4611      	mov	r1, r2
 8002372:	4618      	mov	r0, r3
 8002374:	f7fe fbe1 	bl	8000b3a <IMU_getAccel>
		  IMU_getAngRate(&IMU1, &gyro);
 8002378:	f241 2234 	movw	r2, #4660	; 0x1234
 800237c:	443a      	add	r2, r7
 800237e:	f241 2314 	movw	r3, #4628	; 0x1214
 8002382:	443b      	add	r3, r7
 8002384:	4611      	mov	r1, r2
 8002386:	4618      	mov	r0, r3
 8002388:	f7fe fc18 	bl	8000bbc <IMU_getAngRate>
		  data.values.timestamp = getTimestamp();
 800238c:	f7ff fea4 	bl	80020d8 <getTimestamp>
 8002390:	4602      	mov	r2, r0
 8002392:	460b      	mov	r3, r1
 8002394:	f241 11d0 	movw	r1, #4560	; 0x11d0
 8002398:	4439      	add	r1, r7
 800239a:	e9c1 2300 	strd	r2, r3, [r1]
		  data.values.pressure = pres;
 800239e:	f241 2350 	movw	r3, #4688	; 0x1250
 80023a2:	443b      	add	r3, r7
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f241 12d8 	movw	r2, #4568	; 0x11d8
 80023aa:	443a      	add	r2, r7
 80023ac:	6013      	str	r3, [r2, #0]
		  data.values.temperature = temp;
 80023ae:	f241 234c 	movw	r3, #4684	; 0x124c
 80023b2:	443b      	add	r3, r7
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f241 12dc 	movw	r2, #4572	; 0x11dc
 80023ba:	443a      	add	r2, r7
 80023bc:	6013      	str	r3, [r2, #0]
		  data.values.accel[0] = accel.XL_x;
 80023be:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 80023c8:	6013      	str	r3, [r2, #0]
		  data.values.accel[1] = accel.XL_y;
 80023ca:	f241 2344 	movw	r3, #4676	; 0x1244
 80023ce:	443b      	add	r3, r7
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f241 12e4 	movw	r2, #4580	; 0x11e4
 80023d6:	443a      	add	r2, r7
 80023d8:	6013      	str	r3, [r2, #0]
		  data.values.accel[2] = accel.XL_z;
 80023da:	f241 2348 	movw	r3, #4680	; 0x1248
 80023de:	443b      	add	r3, r7
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f241 12e8 	movw	r2, #4584	; 0x11e8
 80023e6:	443a      	add	r2, r7
 80023e8:	6013      	str	r3, [r2, #0]
		  data.values.gyro[0] = gyro.G_x;
 80023ea:	f241 2334 	movw	r3, #4660	; 0x1234
 80023ee:	443b      	add	r3, r7
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f241 12ec 	movw	r2, #4588	; 0x11ec
 80023f6:	443a      	add	r2, r7
 80023f8:	6013      	str	r3, [r2, #0]
		  data.values.gyro[1] = gyro.G_y;
 80023fa:	f241 2338 	movw	r3, #4664	; 0x1238
 80023fe:	443b      	add	r3, r7
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f241 12f0 	movw	r2, #4592	; 0x11f0
 8002406:	443a      	add	r2, r7
 8002408:	6013      	str	r3, [r2, #0]
		  data.values.gyro[2] = gyro.G_z;
 800240a:	f241 233c 	movw	r3, #4668	; 0x123c
 800240e:	443b      	add	r3, r7
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f241 12f4 	movw	r2, #4596	; 0x11f4
 8002416:	443a      	add	r2, r7
 8002418:	6013      	str	r3, [r2, #0]
		  write_to_flash(&flash, data.bytes, 40);
 800241a:	f241 11d0 	movw	r1, #4560	; 0x11d0
 800241e:	4439      	add	r1, r7
 8002420:	f607 73b8 	addw	r3, r7, #4024	; 0xfb8
 8002424:	2228      	movs	r2, #40	; 0x28
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff f9a6 	bl	8001778 <write_to_flash>
		  vTaskDelayUntil(&xLastWakeTime, xFrequency);
 800242c:	e77d      	b.n	800232a <StartDefaultTask+0x22e>
}
 800242e:	f507 5793 	add.w	r7, r7, #4704	; 0x1260
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	240002d8 	.word	0x240002d8
 800243c:	240003b4 	.word	0x240003b4
 8002440:	58020000 	.word	0x58020000
 8002444:	58021800 	.word	0x58021800
 8002448:	2400032c 	.word	0x2400032c
 800244c:	58020800 	.word	0x58020800
 8002450:	ffffedac 	.word	0xffffedac
 8002454:	2400043c 	.word	0x2400043c
 8002458:	08009fa8 	.word	0x08009fa8

0800245c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002460:	b672      	cpsid	i
}
 8002462:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002464:	e7fe      	b.n	8002464 <Error_Handler+0x8>
	...

08002468 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800246e:	4b0c      	ldr	r3, [pc, #48]	; (80024a0 <HAL_MspInit+0x38>)
 8002470:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002474:	4a0a      	ldr	r2, [pc, #40]	; (80024a0 <HAL_MspInit+0x38>)
 8002476:	f043 0302 	orr.w	r3, r3, #2
 800247a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800247e:	4b08      	ldr	r3, [pc, #32]	; (80024a0 <HAL_MspInit+0x38>)
 8002480:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	607b      	str	r3, [r7, #4]
 800248a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800248c:	2200      	movs	r2, #0
 800248e:	210f      	movs	r1, #15
 8002490:	f06f 0001 	mvn.w	r0, #1
 8002494:	f000 fc41 	bl	8002d1a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002498:	bf00      	nop
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	58024400 	.word	0x58024400

080024a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b0ba      	sub	sp, #232	; 0xe8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ac:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	609a      	str	r2, [r3, #8]
 80024b8:	60da      	str	r2, [r3, #12]
 80024ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024bc:	f107 0318 	add.w	r3, r7, #24
 80024c0:	22b8      	movs	r2, #184	; 0xb8
 80024c2:	2100      	movs	r1, #0
 80024c4:	4618      	mov	r0, r3
 80024c6:	f007 fd21 	bl	8009f0c <memset>
  if(hi2c->Instance==I2C1)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a4d      	ldr	r2, [pc, #308]	; (8002604 <HAL_I2C_MspInit+0x160>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d146      	bne.n	8002562 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80024d4:	f04f 0208 	mov.w	r2, #8
 80024d8:	f04f 0300 	mov.w	r3, #0
 80024dc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 80024e0:	2300      	movs	r3, #0
 80024e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024e6:	f107 0318 	add.w	r3, r7, #24
 80024ea:	4618      	mov	r0, r3
 80024ec:	f002 fbbe 	bl	8004c6c <HAL_RCCEx_PeriphCLKConfig>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80024f6:	f7ff ffb1 	bl	800245c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024fa:	4b43      	ldr	r3, [pc, #268]	; (8002608 <HAL_I2C_MspInit+0x164>)
 80024fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002500:	4a41      	ldr	r2, [pc, #260]	; (8002608 <HAL_I2C_MspInit+0x164>)
 8002502:	f043 0302 	orr.w	r3, r3, #2
 8002506:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800250a:	4b3f      	ldr	r3, [pc, #252]	; (8002608 <HAL_I2C_MspInit+0x164>)
 800250c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	617b      	str	r3, [r7, #20]
 8002516:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002518:	23c0      	movs	r3, #192	; 0xc0
 800251a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800251e:	2312      	movs	r3, #18
 8002520:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002524:	2300      	movs	r3, #0
 8002526:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800252a:	2300      	movs	r3, #0
 800252c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002530:	2304      	movs	r3, #4
 8002532:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002536:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800253a:	4619      	mov	r1, r3
 800253c:	4833      	ldr	r0, [pc, #204]	; (800260c <HAL_I2C_MspInit+0x168>)
 800253e:	f000 fc13 	bl	8002d68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002542:	4b31      	ldr	r3, [pc, #196]	; (8002608 <HAL_I2C_MspInit+0x164>)
 8002544:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002548:	4a2f      	ldr	r2, [pc, #188]	; (8002608 <HAL_I2C_MspInit+0x164>)
 800254a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800254e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002552:	4b2d      	ldr	r3, [pc, #180]	; (8002608 <HAL_I2C_MspInit+0x164>)
 8002554:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002558:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800255c:	613b      	str	r3, [r7, #16]
 800255e:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C5_MspInit 1 */

  /* USER CODE END I2C5_MspInit 1 */
  }

}
 8002560:	e04b      	b.n	80025fa <HAL_I2C_MspInit+0x156>
  else if(hi2c->Instance==I2C5)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a2a      	ldr	r2, [pc, #168]	; (8002610 <HAL_I2C_MspInit+0x16c>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d146      	bne.n	80025fa <HAL_I2C_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C5;
 800256c:	f04f 0208 	mov.w	r2, #8
 8002570:	f04f 0300 	mov.w	r3, #0
 8002574:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002578:	2300      	movs	r3, #0
 800257a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800257e:	f107 0318 	add.w	r3, r7, #24
 8002582:	4618      	mov	r0, r3
 8002584:	f002 fb72 	bl	8004c6c <HAL_RCCEx_PeriphCLKConfig>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <HAL_I2C_MspInit+0xee>
      Error_Handler();
 800258e:	f7ff ff65 	bl	800245c <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002592:	4b1d      	ldr	r3, [pc, #116]	; (8002608 <HAL_I2C_MspInit+0x164>)
 8002594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002598:	4a1b      	ldr	r2, [pc, #108]	; (8002608 <HAL_I2C_MspInit+0x164>)
 800259a:	f043 0304 	orr.w	r3, r3, #4
 800259e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025a2:	4b19      	ldr	r3, [pc, #100]	; (8002608 <HAL_I2C_MspInit+0x164>)
 80025a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025a8:	f003 0304 	and.w	r3, r3, #4
 80025ac:	60fb      	str	r3, [r7, #12]
 80025ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80025b0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80025b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025b8:	2312      	movs	r3, #18
 80025ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025be:	2301      	movs	r3, #1
 80025c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025c4:	2303      	movs	r3, #3
 80025c6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C5;
 80025ca:	2304      	movs	r3, #4
 80025cc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025d0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80025d4:	4619      	mov	r1, r3
 80025d6:	480f      	ldr	r0, [pc, #60]	; (8002614 <HAL_I2C_MspInit+0x170>)
 80025d8:	f000 fbc6 	bl	8002d68 <HAL_GPIO_Init>
    __HAL_RCC_I2C5_CLK_ENABLE();
 80025dc:	4b0a      	ldr	r3, [pc, #40]	; (8002608 <HAL_I2C_MspInit+0x164>)
 80025de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025e2:	4a09      	ldr	r2, [pc, #36]	; (8002608 <HAL_I2C_MspInit+0x164>)
 80025e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025e8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80025ec:	4b06      	ldr	r3, [pc, #24]	; (8002608 <HAL_I2C_MspInit+0x164>)
 80025ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f6:	60bb      	str	r3, [r7, #8]
 80025f8:	68bb      	ldr	r3, [r7, #8]
}
 80025fa:	bf00      	nop
 80025fc:	37e8      	adds	r7, #232	; 0xe8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	40005400 	.word	0x40005400
 8002608:	58024400 	.word	0x58024400
 800260c:	58020400 	.word	0x58020400
 8002610:	40006400 	.word	0x40006400
 8002614:	58020800 	.word	0x58020800

08002618 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b0bc      	sub	sp, #240	; 0xf0
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002620:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	605a      	str	r2, [r3, #4]
 800262a:	609a      	str	r2, [r3, #8]
 800262c:	60da      	str	r2, [r3, #12]
 800262e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002630:	f107 0320 	add.w	r3, r7, #32
 8002634:	22b8      	movs	r2, #184	; 0xb8
 8002636:	2100      	movs	r1, #0
 8002638:	4618      	mov	r0, r3
 800263a:	f007 fc67 	bl	8009f0c <memset>
  if(hspi->Instance==SPI1)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a5e      	ldr	r2, [pc, #376]	; (80027bc <HAL_SPI_MspInit+0x1a4>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d145      	bne.n	80026d4 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002648:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800264c:	f04f 0300 	mov.w	r3, #0
 8002650:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002654:	2300      	movs	r3, #0
 8002656:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002658:	f107 0320 	add.w	r3, r7, #32
 800265c:	4618      	mov	r0, r3
 800265e:	f002 fb05 	bl	8004c6c <HAL_RCCEx_PeriphCLKConfig>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002668:	f7ff fef8 	bl	800245c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800266c:	4b54      	ldr	r3, [pc, #336]	; (80027c0 <HAL_SPI_MspInit+0x1a8>)
 800266e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002672:	4a53      	ldr	r2, [pc, #332]	; (80027c0 <HAL_SPI_MspInit+0x1a8>)
 8002674:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002678:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800267c:	4b50      	ldr	r3, [pc, #320]	; (80027c0 <HAL_SPI_MspInit+0x1a8>)
 800267e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002682:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002686:	61fb      	str	r3, [r7, #28]
 8002688:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800268a:	4b4d      	ldr	r3, [pc, #308]	; (80027c0 <HAL_SPI_MspInit+0x1a8>)
 800268c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002690:	4a4b      	ldr	r2, [pc, #300]	; (80027c0 <HAL_SPI_MspInit+0x1a8>)
 8002692:	f043 0302 	orr.w	r3, r3, #2
 8002696:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800269a:	4b49      	ldr	r3, [pc, #292]	; (80027c0 <HAL_SPI_MspInit+0x1a8>)
 800269c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	61bb      	str	r3, [r7, #24]
 80026a6:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PB3(JTDO/TRACESWO)     ------> SPI1_SCK
    PB4(NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80026a8:	2338      	movs	r3, #56	; 0x38
 80026aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ae:	2302      	movs	r3, #2
 80026b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b4:	2300      	movs	r3, #0
 80026b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ba:	2300      	movs	r3, #0
 80026bc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80026c0:	2305      	movs	r3, #5
 80026c2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026c6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80026ca:	4619      	mov	r1, r3
 80026cc:	483d      	ldr	r0, [pc, #244]	; (80027c4 <HAL_SPI_MspInit+0x1ac>)
 80026ce:	f000 fb4b 	bl	8002d68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }

}
 80026d2:	e06f      	b.n	80027b4 <HAL_SPI_MspInit+0x19c>
  else if(hspi->Instance==SPI6)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a3b      	ldr	r2, [pc, #236]	; (80027c8 <HAL_SPI_MspInit+0x1b0>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d16a      	bne.n	80027b4 <HAL_SPI_MspInit+0x19c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
 80026de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80026e2:	f04f 0300 	mov.w	r3, #0
 80026e6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_D3PCLK1;
 80026ea:	2300      	movs	r3, #0
 80026ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026f0:	f107 0320 	add.w	r3, r7, #32
 80026f4:	4618      	mov	r0, r3
 80026f6:	f002 fab9 	bl	8004c6c <HAL_RCCEx_PeriphCLKConfig>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <HAL_SPI_MspInit+0xec>
      Error_Handler();
 8002700:	f7ff feac 	bl	800245c <Error_Handler>
    __HAL_RCC_SPI6_CLK_ENABLE();
 8002704:	4b2e      	ldr	r3, [pc, #184]	; (80027c0 <HAL_SPI_MspInit+0x1a8>)
 8002706:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800270a:	4a2d      	ldr	r2, [pc, #180]	; (80027c0 <HAL_SPI_MspInit+0x1a8>)
 800270c:	f043 0320 	orr.w	r3, r3, #32
 8002710:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002714:	4b2a      	ldr	r3, [pc, #168]	; (80027c0 <HAL_SPI_MspInit+0x1a8>)
 8002716:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800271a:	f003 0320 	and.w	r3, r3, #32
 800271e:	617b      	str	r3, [r7, #20]
 8002720:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002722:	4b27      	ldr	r3, [pc, #156]	; (80027c0 <HAL_SPI_MspInit+0x1a8>)
 8002724:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002728:	4a25      	ldr	r2, [pc, #148]	; (80027c0 <HAL_SPI_MspInit+0x1a8>)
 800272a:	f043 0301 	orr.w	r3, r3, #1
 800272e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002732:	4b23      	ldr	r3, [pc, #140]	; (80027c0 <HAL_SPI_MspInit+0x1a8>)
 8002734:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002738:	f003 0301 	and.w	r3, r3, #1
 800273c:	613b      	str	r3, [r7, #16]
 800273e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002740:	4b1f      	ldr	r3, [pc, #124]	; (80027c0 <HAL_SPI_MspInit+0x1a8>)
 8002742:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002746:	4a1e      	ldr	r2, [pc, #120]	; (80027c0 <HAL_SPI_MspInit+0x1a8>)
 8002748:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800274c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002750:	4b1b      	ldr	r3, [pc, #108]	; (80027c0 <HAL_SPI_MspInit+0x1a8>)
 8002752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800275a:	60fb      	str	r3, [r7, #12]
 800275c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800275e:	2360      	movs	r3, #96	; 0x60
 8002760:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002764:	2302      	movs	r3, #2
 8002766:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276a:	2300      	movs	r3, #0
 800276c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002770:	2300      	movs	r3, #0
 8002772:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 8002776:	2308      	movs	r3, #8
 8002778:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800277c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002780:	4619      	mov	r1, r3
 8002782:	4812      	ldr	r0, [pc, #72]	; (80027cc <HAL_SPI_MspInit+0x1b4>)
 8002784:	f000 faf0 	bl	8002d68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002788:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800278c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002790:	2302      	movs	r3, #2
 8002792:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002796:	2300      	movs	r3, #0
 8002798:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800279c:	2300      	movs	r3, #0
 800279e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 80027a2:	2305      	movs	r3, #5
 80027a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80027a8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80027ac:	4619      	mov	r1, r3
 80027ae:	4808      	ldr	r0, [pc, #32]	; (80027d0 <HAL_SPI_MspInit+0x1b8>)
 80027b0:	f000 fada 	bl	8002d68 <HAL_GPIO_Init>
}
 80027b4:	bf00      	nop
 80027b6:	37f0      	adds	r7, #240	; 0xf0
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40013000 	.word	0x40013000
 80027c0:	58024400 	.word	0x58024400
 80027c4:	58020400 	.word	0x58020400
 80027c8:	58001400 	.word	0x58001400
 80027cc:	58020000 	.word	0x58020000
 80027d0:	58021800 	.word	0x58021800

080027d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b0b8      	sub	sp, #224	; 0xe0
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027dc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	605a      	str	r2, [r3, #4]
 80027e6:	609a      	str	r2, [r3, #8]
 80027e8:	60da      	str	r2, [r3, #12]
 80027ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027ec:	f107 0310 	add.w	r3, r7, #16
 80027f0:	22b8      	movs	r2, #184	; 0xb8
 80027f2:	2100      	movs	r1, #0
 80027f4:	4618      	mov	r0, r3
 80027f6:	f007 fb89 	bl	8009f0c <memset>
  if(huart->Instance==USART3)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a27      	ldr	r2, [pc, #156]	; (800289c <HAL_UART_MspInit+0xc8>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d146      	bne.n	8002892 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002804:	f04f 0202 	mov.w	r2, #2
 8002808:	f04f 0300 	mov.w	r3, #0
 800280c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002810:	2300      	movs	r3, #0
 8002812:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002816:	f107 0310 	add.w	r3, r7, #16
 800281a:	4618      	mov	r0, r3
 800281c:	f002 fa26 	bl	8004c6c <HAL_RCCEx_PeriphCLKConfig>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002826:	f7ff fe19 	bl	800245c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800282a:	4b1d      	ldr	r3, [pc, #116]	; (80028a0 <HAL_UART_MspInit+0xcc>)
 800282c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002830:	4a1b      	ldr	r2, [pc, #108]	; (80028a0 <HAL_UART_MspInit+0xcc>)
 8002832:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002836:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800283a:	4b19      	ldr	r3, [pc, #100]	; (80028a0 <HAL_UART_MspInit+0xcc>)
 800283c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002840:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002844:	60fb      	str	r3, [r7, #12]
 8002846:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002848:	4b15      	ldr	r3, [pc, #84]	; (80028a0 <HAL_UART_MspInit+0xcc>)
 800284a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800284e:	4a14      	ldr	r2, [pc, #80]	; (80028a0 <HAL_UART_MspInit+0xcc>)
 8002850:	f043 0308 	orr.w	r3, r3, #8
 8002854:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002858:	4b11      	ldr	r3, [pc, #68]	; (80028a0 <HAL_UART_MspInit+0xcc>)
 800285a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800285e:	f003 0308 	and.w	r3, r3, #8
 8002862:	60bb      	str	r3, [r7, #8]
 8002864:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002866:	f44f 7340 	mov.w	r3, #768	; 0x300
 800286a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286e:	2302      	movs	r3, #2
 8002870:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002874:	2300      	movs	r3, #0
 8002876:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800287a:	2300      	movs	r3, #0
 800287c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002880:	2307      	movs	r3, #7
 8002882:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002886:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800288a:	4619      	mov	r1, r3
 800288c:	4805      	ldr	r0, [pc, #20]	; (80028a4 <HAL_UART_MspInit+0xd0>)
 800288e:	f000 fa6b 	bl	8002d68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002892:	bf00      	nop
 8002894:	37e0      	adds	r7, #224	; 0xe0
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	40004800 	.word	0x40004800
 80028a0:	58024400 	.word	0x58024400
 80028a4:	58020c00 	.word	0x58020c00

080028a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028ac:	e7fe      	b.n	80028ac <NMI_Handler+0x4>

080028ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028ae:	b480      	push	{r7}
 80028b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028b2:	e7fe      	b.n	80028b2 <HardFault_Handler+0x4>

080028b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028b8:	e7fe      	b.n	80028b8 <MemManage_Handler+0x4>

080028ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028ba:	b480      	push	{r7}
 80028bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028be:	e7fe      	b.n	80028be <BusFault_Handler+0x4>

080028c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028c4:	e7fe      	b.n	80028c4 <UsageFault_Handler+0x4>

080028c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028c6:	b480      	push	{r7}
 80028c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028ca:	bf00      	nop
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028d8:	f000 f91e 	bl	8002b18 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80028dc:	f006 fe98 	bl	8009610 <xTaskGetSchedulerState>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d001      	beq.n	80028ea <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80028e6:	f007 f8d7 	bl	8009a98 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028ea:	bf00      	nop
 80028ec:	bd80      	pop	{r7, pc}
	...

080028f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80028f4:	4b32      	ldr	r3, [pc, #200]	; (80029c0 <SystemInit+0xd0>)
 80028f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028fa:	4a31      	ldr	r2, [pc, #196]	; (80029c0 <SystemInit+0xd0>)
 80028fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002900:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002904:	4b2f      	ldr	r3, [pc, #188]	; (80029c4 <SystemInit+0xd4>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 030f 	and.w	r3, r3, #15
 800290c:	2b06      	cmp	r3, #6
 800290e:	d807      	bhi.n	8002920 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002910:	4b2c      	ldr	r3, [pc, #176]	; (80029c4 <SystemInit+0xd4>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f023 030f 	bic.w	r3, r3, #15
 8002918:	4a2a      	ldr	r2, [pc, #168]	; (80029c4 <SystemInit+0xd4>)
 800291a:	f043 0307 	orr.w	r3, r3, #7
 800291e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002920:	4b29      	ldr	r3, [pc, #164]	; (80029c8 <SystemInit+0xd8>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a28      	ldr	r2, [pc, #160]	; (80029c8 <SystemInit+0xd8>)
 8002926:	f043 0301 	orr.w	r3, r3, #1
 800292a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800292c:	4b26      	ldr	r3, [pc, #152]	; (80029c8 <SystemInit+0xd8>)
 800292e:	2200      	movs	r2, #0
 8002930:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002932:	4b25      	ldr	r3, [pc, #148]	; (80029c8 <SystemInit+0xd8>)
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	4924      	ldr	r1, [pc, #144]	; (80029c8 <SystemInit+0xd8>)
 8002938:	4b24      	ldr	r3, [pc, #144]	; (80029cc <SystemInit+0xdc>)
 800293a:	4013      	ands	r3, r2
 800293c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800293e:	4b21      	ldr	r3, [pc, #132]	; (80029c4 <SystemInit+0xd4>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0308 	and.w	r3, r3, #8
 8002946:	2b00      	cmp	r3, #0
 8002948:	d007      	beq.n	800295a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800294a:	4b1e      	ldr	r3, [pc, #120]	; (80029c4 <SystemInit+0xd4>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f023 030f 	bic.w	r3, r3, #15
 8002952:	4a1c      	ldr	r2, [pc, #112]	; (80029c4 <SystemInit+0xd4>)
 8002954:	f043 0307 	orr.w	r3, r3, #7
 8002958:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800295a:	4b1b      	ldr	r3, [pc, #108]	; (80029c8 <SystemInit+0xd8>)
 800295c:	2200      	movs	r2, #0
 800295e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002960:	4b19      	ldr	r3, [pc, #100]	; (80029c8 <SystemInit+0xd8>)
 8002962:	2200      	movs	r2, #0
 8002964:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002966:	4b18      	ldr	r3, [pc, #96]	; (80029c8 <SystemInit+0xd8>)
 8002968:	2200      	movs	r2, #0
 800296a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800296c:	4b16      	ldr	r3, [pc, #88]	; (80029c8 <SystemInit+0xd8>)
 800296e:	4a18      	ldr	r2, [pc, #96]	; (80029d0 <SystemInit+0xe0>)
 8002970:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002972:	4b15      	ldr	r3, [pc, #84]	; (80029c8 <SystemInit+0xd8>)
 8002974:	4a17      	ldr	r2, [pc, #92]	; (80029d4 <SystemInit+0xe4>)
 8002976:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002978:	4b13      	ldr	r3, [pc, #76]	; (80029c8 <SystemInit+0xd8>)
 800297a:	4a17      	ldr	r2, [pc, #92]	; (80029d8 <SystemInit+0xe8>)
 800297c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800297e:	4b12      	ldr	r3, [pc, #72]	; (80029c8 <SystemInit+0xd8>)
 8002980:	2200      	movs	r2, #0
 8002982:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002984:	4b10      	ldr	r3, [pc, #64]	; (80029c8 <SystemInit+0xd8>)
 8002986:	4a14      	ldr	r2, [pc, #80]	; (80029d8 <SystemInit+0xe8>)
 8002988:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800298a:	4b0f      	ldr	r3, [pc, #60]	; (80029c8 <SystemInit+0xd8>)
 800298c:	2200      	movs	r2, #0
 800298e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002990:	4b0d      	ldr	r3, [pc, #52]	; (80029c8 <SystemInit+0xd8>)
 8002992:	4a11      	ldr	r2, [pc, #68]	; (80029d8 <SystemInit+0xe8>)
 8002994:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002996:	4b0c      	ldr	r3, [pc, #48]	; (80029c8 <SystemInit+0xd8>)
 8002998:	2200      	movs	r2, #0
 800299a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800299c:	4b0a      	ldr	r3, [pc, #40]	; (80029c8 <SystemInit+0xd8>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a09      	ldr	r2, [pc, #36]	; (80029c8 <SystemInit+0xd8>)
 80029a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029a6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80029a8:	4b07      	ldr	r3, [pc, #28]	; (80029c8 <SystemInit+0xd8>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80029ae:	4b0b      	ldr	r3, [pc, #44]	; (80029dc <SystemInit+0xec>)
 80029b0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80029b4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80029b6:	bf00      	nop
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	e000ed00 	.word	0xe000ed00
 80029c4:	52002000 	.word	0x52002000
 80029c8:	58024400 	.word	0x58024400
 80029cc:	eaf6ed7f 	.word	0xeaf6ed7f
 80029d0:	02020200 	.word	0x02020200
 80029d4:	01ff0000 	.word	0x01ff0000
 80029d8:	01010280 	.word	0x01010280
 80029dc:	52004000 	.word	0x52004000

080029e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80029e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a18 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80029e4:	f7ff ff84 	bl	80028f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029e8:	480c      	ldr	r0, [pc, #48]	; (8002a1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80029ea:	490d      	ldr	r1, [pc, #52]	; (8002a20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80029ec:	4a0d      	ldr	r2, [pc, #52]	; (8002a24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80029ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029f0:	e002      	b.n	80029f8 <LoopCopyDataInit>

080029f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029f6:	3304      	adds	r3, #4

080029f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029fc:	d3f9      	bcc.n	80029f2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029fe:	4a0a      	ldr	r2, [pc, #40]	; (8002a28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a00:	4c0a      	ldr	r4, [pc, #40]	; (8002a2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a04:	e001      	b.n	8002a0a <LoopFillZerobss>

08002a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a08:	3204      	adds	r2, #4

08002a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a0c:	d3fb      	bcc.n	8002a06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a0e:	f007 fa85 	bl	8009f1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a12:	f7ff f837 	bl	8001a84 <main>
  bx  lr
 8002a16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a18:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002a1c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002a20:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8002a24:	0800a004 	.word	0x0800a004
  ldr r2, =_sbss
 8002a28:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 8002a2c:	2400422c 	.word	0x2400422c

08002a30 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a30:	e7fe      	b.n	8002a30 <ADC3_IRQHandler>
	...

08002a34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a3a:	2003      	movs	r0, #3
 8002a3c:	f000 f962 	bl	8002d04 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002a40:	f001 ff3e 	bl	80048c0 <HAL_RCC_GetSysClockFreq>
 8002a44:	4602      	mov	r2, r0
 8002a46:	4b15      	ldr	r3, [pc, #84]	; (8002a9c <HAL_Init+0x68>)
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	0a1b      	lsrs	r3, r3, #8
 8002a4c:	f003 030f 	and.w	r3, r3, #15
 8002a50:	4913      	ldr	r1, [pc, #76]	; (8002aa0 <HAL_Init+0x6c>)
 8002a52:	5ccb      	ldrb	r3, [r1, r3]
 8002a54:	f003 031f 	and.w	r3, r3, #31
 8002a58:	fa22 f303 	lsr.w	r3, r2, r3
 8002a5c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a5e:	4b0f      	ldr	r3, [pc, #60]	; (8002a9c <HAL_Init+0x68>)
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	f003 030f 	and.w	r3, r3, #15
 8002a66:	4a0e      	ldr	r2, [pc, #56]	; (8002aa0 <HAL_Init+0x6c>)
 8002a68:	5cd3      	ldrb	r3, [r2, r3]
 8002a6a:	f003 031f 	and.w	r3, r3, #31
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	fa22 f303 	lsr.w	r3, r2, r3
 8002a74:	4a0b      	ldr	r2, [pc, #44]	; (8002aa4 <HAL_Init+0x70>)
 8002a76:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a78:	4a0b      	ldr	r2, [pc, #44]	; (8002aa8 <HAL_Init+0x74>)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a7e:	200f      	movs	r0, #15
 8002a80:	f000 f814 	bl	8002aac <HAL_InitTick>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e002      	b.n	8002a94 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002a8e:	f7ff fceb 	bl	8002468 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3708      	adds	r7, #8
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	58024400 	.word	0x58024400
 8002aa0:	08009fbc 	.word	0x08009fbc
 8002aa4:	24000004 	.word	0x24000004
 8002aa8:	24000000 	.word	0x24000000

08002aac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002ab4:	4b15      	ldr	r3, [pc, #84]	; (8002b0c <HAL_InitTick+0x60>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d101      	bne.n	8002ac0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e021      	b.n	8002b04 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002ac0:	4b13      	ldr	r3, [pc, #76]	; (8002b10 <HAL_InitTick+0x64>)
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	4b11      	ldr	r3, [pc, #68]	; (8002b0c <HAL_InitTick+0x60>)
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	4619      	mov	r1, r3
 8002aca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ace:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f000 f939 	bl	8002d4e <HAL_SYSTICK_Config>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e00e      	b.n	8002b04 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2b0f      	cmp	r3, #15
 8002aea:	d80a      	bhi.n	8002b02 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002aec:	2200      	movs	r2, #0
 8002aee:	6879      	ldr	r1, [r7, #4]
 8002af0:	f04f 30ff 	mov.w	r0, #4294967295
 8002af4:	f000 f911 	bl	8002d1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002af8:	4a06      	ldr	r2, [pc, #24]	; (8002b14 <HAL_InitTick+0x68>)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
 8002b00:	e000      	b.n	8002b04 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3708      	adds	r7, #8
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	2400000c 	.word	0x2400000c
 8002b10:	24000000 	.word	0x24000000
 8002b14:	24000008 	.word	0x24000008

08002b18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b1c:	4b06      	ldr	r3, [pc, #24]	; (8002b38 <HAL_IncTick+0x20>)
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	461a      	mov	r2, r3
 8002b22:	4b06      	ldr	r3, [pc, #24]	; (8002b3c <HAL_IncTick+0x24>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4413      	add	r3, r2
 8002b28:	4a04      	ldr	r2, [pc, #16]	; (8002b3c <HAL_IncTick+0x24>)
 8002b2a:	6013      	str	r3, [r2, #0]
}
 8002b2c:	bf00      	nop
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	2400000c 	.word	0x2400000c
 8002b3c:	240004d4 	.word	0x240004d4

08002b40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  return uwTick;
 8002b44:	4b03      	ldr	r3, [pc, #12]	; (8002b54 <HAL_GetTick+0x14>)
 8002b46:	681b      	ldr	r3, [r3, #0]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	240004d4 	.word	0x240004d4

08002b58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b60:	f7ff ffee 	bl	8002b40 <HAL_GetTick>
 8002b64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b70:	d005      	beq.n	8002b7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b72:	4b0a      	ldr	r3, [pc, #40]	; (8002b9c <HAL_Delay+0x44>)
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	461a      	mov	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b7e:	bf00      	nop
 8002b80:	f7ff ffde 	bl	8002b40 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d8f7      	bhi.n	8002b80 <HAL_Delay+0x28>
  {
  }
}
 8002b90:	bf00      	nop
 8002b92:	bf00      	nop
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	2400000c 	.word	0x2400000c

08002ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f003 0307 	and.w	r3, r3, #7
 8002bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bb0:	4b0b      	ldr	r3, [pc, #44]	; (8002be0 <__NVIC_SetPriorityGrouping+0x40>)
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bb6:	68ba      	ldr	r2, [r7, #8]
 8002bb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002bc8:	4b06      	ldr	r3, [pc, #24]	; (8002be4 <__NVIC_SetPriorityGrouping+0x44>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bce:	4a04      	ldr	r2, [pc, #16]	; (8002be0 <__NVIC_SetPriorityGrouping+0x40>)
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	60d3      	str	r3, [r2, #12]
}
 8002bd4:	bf00      	nop
 8002bd6:	3714      	adds	r7, #20
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr
 8002be0:	e000ed00 	.word	0xe000ed00
 8002be4:	05fa0000 	.word	0x05fa0000

08002be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bec:	4b04      	ldr	r3, [pc, #16]	; (8002c00 <__NVIC_GetPriorityGrouping+0x18>)
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	0a1b      	lsrs	r3, r3, #8
 8002bf2:	f003 0307 	and.w	r3, r3, #7
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr
 8002c00:	e000ed00 	.word	0xe000ed00

08002c04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	6039      	str	r1, [r7, #0]
 8002c0e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002c10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	db0a      	blt.n	8002c2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	b2da      	uxtb	r2, r3
 8002c1c:	490c      	ldr	r1, [pc, #48]	; (8002c50 <__NVIC_SetPriority+0x4c>)
 8002c1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c22:	0112      	lsls	r2, r2, #4
 8002c24:	b2d2      	uxtb	r2, r2
 8002c26:	440b      	add	r3, r1
 8002c28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c2c:	e00a      	b.n	8002c44 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	b2da      	uxtb	r2, r3
 8002c32:	4908      	ldr	r1, [pc, #32]	; (8002c54 <__NVIC_SetPriority+0x50>)
 8002c34:	88fb      	ldrh	r3, [r7, #6]
 8002c36:	f003 030f 	and.w	r3, r3, #15
 8002c3a:	3b04      	subs	r3, #4
 8002c3c:	0112      	lsls	r2, r2, #4
 8002c3e:	b2d2      	uxtb	r2, r2
 8002c40:	440b      	add	r3, r1
 8002c42:	761a      	strb	r2, [r3, #24]
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr
 8002c50:	e000e100 	.word	0xe000e100
 8002c54:	e000ed00 	.word	0xe000ed00

08002c58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b089      	sub	sp, #36	; 0x24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f003 0307 	and.w	r3, r3, #7
 8002c6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	f1c3 0307 	rsb	r3, r3, #7
 8002c72:	2b04      	cmp	r3, #4
 8002c74:	bf28      	it	cs
 8002c76:	2304      	movcs	r3, #4
 8002c78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	3304      	adds	r3, #4
 8002c7e:	2b06      	cmp	r3, #6
 8002c80:	d902      	bls.n	8002c88 <NVIC_EncodePriority+0x30>
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	3b03      	subs	r3, #3
 8002c86:	e000      	b.n	8002c8a <NVIC_EncodePriority+0x32>
 8002c88:	2300      	movs	r3, #0
 8002c8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	43da      	mvns	r2, r3
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	401a      	ands	r2, r3
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8002caa:	43d9      	mvns	r1, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cb0:	4313      	orrs	r3, r2
         );
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3724      	adds	r7, #36	; 0x24
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
	...

08002cc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cd0:	d301      	bcc.n	8002cd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e00f      	b.n	8002cf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cd6:	4a0a      	ldr	r2, [pc, #40]	; (8002d00 <SysTick_Config+0x40>)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cde:	210f      	movs	r1, #15
 8002ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ce4:	f7ff ff8e 	bl	8002c04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ce8:	4b05      	ldr	r3, [pc, #20]	; (8002d00 <SysTick_Config+0x40>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cee:	4b04      	ldr	r3, [pc, #16]	; (8002d00 <SysTick_Config+0x40>)
 8002cf0:	2207      	movs	r2, #7
 8002cf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	e000e010 	.word	0xe000e010

08002d04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f7ff ff47 	bl	8002ba0 <__NVIC_SetPriorityGrouping>
}
 8002d12:	bf00      	nop
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b086      	sub	sp, #24
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	4603      	mov	r3, r0
 8002d22:	60b9      	str	r1, [r7, #8]
 8002d24:	607a      	str	r2, [r7, #4]
 8002d26:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d28:	f7ff ff5e 	bl	8002be8 <__NVIC_GetPriorityGrouping>
 8002d2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	68b9      	ldr	r1, [r7, #8]
 8002d32:	6978      	ldr	r0, [r7, #20]
 8002d34:	f7ff ff90 	bl	8002c58 <NVIC_EncodePriority>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d3e:	4611      	mov	r1, r2
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7ff ff5f 	bl	8002c04 <__NVIC_SetPriority>
}
 8002d46:	bf00      	nop
 8002d48:	3718      	adds	r7, #24
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b082      	sub	sp, #8
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f7ff ffb2 	bl	8002cc0 <SysTick_Config>
 8002d5c:	4603      	mov	r3, r0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
	...

08002d68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b089      	sub	sp, #36	; 0x24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002d72:	2300      	movs	r3, #0
 8002d74:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002d76:	4b86      	ldr	r3, [pc, #536]	; (8002f90 <HAL_GPIO_Init+0x228>)
 8002d78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002d7a:	e18c      	b.n	8003096 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	2101      	movs	r1, #1
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	fa01 f303 	lsl.w	r3, r1, r3
 8002d88:	4013      	ands	r3, r2
 8002d8a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f000 817e 	beq.w	8003090 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f003 0303 	and.w	r3, r3, #3
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d005      	beq.n	8002dac <HAL_GPIO_Init+0x44>
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f003 0303 	and.w	r3, r3, #3
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d130      	bne.n	8002e0e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	2203      	movs	r2, #3
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	43db      	mvns	r3, r3
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	68da      	ldr	r2, [r3, #12]
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002de2:	2201      	movs	r2, #1
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dea:	43db      	mvns	r3, r3
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	4013      	ands	r3, r2
 8002df0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	091b      	lsrs	r3, r3, #4
 8002df8:	f003 0201 	and.w	r2, r3, #1
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f003 0303 	and.w	r3, r3, #3
 8002e16:	2b03      	cmp	r3, #3
 8002e18:	d017      	beq.n	8002e4a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	2203      	movs	r2, #3
 8002e26:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	689a      	ldr	r2, [r3, #8]
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f003 0303 	and.w	r3, r3, #3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d123      	bne.n	8002e9e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	08da      	lsrs	r2, r3, #3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	3208      	adds	r2, #8
 8002e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	f003 0307 	and.w	r3, r3, #7
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	220f      	movs	r2, #15
 8002e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e72:	43db      	mvns	r3, r3
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	4013      	ands	r3, r2
 8002e78:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	691a      	ldr	r2, [r3, #16]
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	f003 0307 	and.w	r3, r3, #7
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	08da      	lsrs	r2, r3, #3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	3208      	adds	r2, #8
 8002e98:	69b9      	ldr	r1, [r7, #24]
 8002e9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	2203      	movs	r2, #3
 8002eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002eae:	43db      	mvns	r3, r3
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f003 0203 	and.w	r2, r3, #3
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f000 80d8 	beq.w	8003090 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ee0:	4b2c      	ldr	r3, [pc, #176]	; (8002f94 <HAL_GPIO_Init+0x22c>)
 8002ee2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002ee6:	4a2b      	ldr	r2, [pc, #172]	; (8002f94 <HAL_GPIO_Init+0x22c>)
 8002ee8:	f043 0302 	orr.w	r3, r3, #2
 8002eec:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002ef0:	4b28      	ldr	r3, [pc, #160]	; (8002f94 <HAL_GPIO_Init+0x22c>)
 8002ef2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	60fb      	str	r3, [r7, #12]
 8002efc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002efe:	4a26      	ldr	r2, [pc, #152]	; (8002f98 <HAL_GPIO_Init+0x230>)
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	089b      	lsrs	r3, r3, #2
 8002f04:	3302      	adds	r3, #2
 8002f06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	f003 0303 	and.w	r3, r3, #3
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	220f      	movs	r2, #15
 8002f16:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1a:	43db      	mvns	r3, r3
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	4013      	ands	r3, r2
 8002f20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a1d      	ldr	r2, [pc, #116]	; (8002f9c <HAL_GPIO_Init+0x234>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d04a      	beq.n	8002fc0 <HAL_GPIO_Init+0x258>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a1c      	ldr	r2, [pc, #112]	; (8002fa0 <HAL_GPIO_Init+0x238>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d02b      	beq.n	8002f8a <HAL_GPIO_Init+0x222>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a1b      	ldr	r2, [pc, #108]	; (8002fa4 <HAL_GPIO_Init+0x23c>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d025      	beq.n	8002f86 <HAL_GPIO_Init+0x21e>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a1a      	ldr	r2, [pc, #104]	; (8002fa8 <HAL_GPIO_Init+0x240>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d01f      	beq.n	8002f82 <HAL_GPIO_Init+0x21a>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a19      	ldr	r2, [pc, #100]	; (8002fac <HAL_GPIO_Init+0x244>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d019      	beq.n	8002f7e <HAL_GPIO_Init+0x216>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a18      	ldr	r2, [pc, #96]	; (8002fb0 <HAL_GPIO_Init+0x248>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d013      	beq.n	8002f7a <HAL_GPIO_Init+0x212>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a17      	ldr	r2, [pc, #92]	; (8002fb4 <HAL_GPIO_Init+0x24c>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d00d      	beq.n	8002f76 <HAL_GPIO_Init+0x20e>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a16      	ldr	r2, [pc, #88]	; (8002fb8 <HAL_GPIO_Init+0x250>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d007      	beq.n	8002f72 <HAL_GPIO_Init+0x20a>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a15      	ldr	r2, [pc, #84]	; (8002fbc <HAL_GPIO_Init+0x254>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d101      	bne.n	8002f6e <HAL_GPIO_Init+0x206>
 8002f6a:	2309      	movs	r3, #9
 8002f6c:	e029      	b.n	8002fc2 <HAL_GPIO_Init+0x25a>
 8002f6e:	230a      	movs	r3, #10
 8002f70:	e027      	b.n	8002fc2 <HAL_GPIO_Init+0x25a>
 8002f72:	2307      	movs	r3, #7
 8002f74:	e025      	b.n	8002fc2 <HAL_GPIO_Init+0x25a>
 8002f76:	2306      	movs	r3, #6
 8002f78:	e023      	b.n	8002fc2 <HAL_GPIO_Init+0x25a>
 8002f7a:	2305      	movs	r3, #5
 8002f7c:	e021      	b.n	8002fc2 <HAL_GPIO_Init+0x25a>
 8002f7e:	2304      	movs	r3, #4
 8002f80:	e01f      	b.n	8002fc2 <HAL_GPIO_Init+0x25a>
 8002f82:	2303      	movs	r3, #3
 8002f84:	e01d      	b.n	8002fc2 <HAL_GPIO_Init+0x25a>
 8002f86:	2302      	movs	r3, #2
 8002f88:	e01b      	b.n	8002fc2 <HAL_GPIO_Init+0x25a>
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e019      	b.n	8002fc2 <HAL_GPIO_Init+0x25a>
 8002f8e:	bf00      	nop
 8002f90:	58000080 	.word	0x58000080
 8002f94:	58024400 	.word	0x58024400
 8002f98:	58000400 	.word	0x58000400
 8002f9c:	58020000 	.word	0x58020000
 8002fa0:	58020400 	.word	0x58020400
 8002fa4:	58020800 	.word	0x58020800
 8002fa8:	58020c00 	.word	0x58020c00
 8002fac:	58021000 	.word	0x58021000
 8002fb0:	58021400 	.word	0x58021400
 8002fb4:	58021800 	.word	0x58021800
 8002fb8:	58021c00 	.word	0x58021c00
 8002fbc:	58022400 	.word	0x58022400
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	69fa      	ldr	r2, [r7, #28]
 8002fc4:	f002 0203 	and.w	r2, r2, #3
 8002fc8:	0092      	lsls	r2, r2, #2
 8002fca:	4093      	lsls	r3, r2
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fd2:	4938      	ldr	r1, [pc, #224]	; (80030b4 <HAL_GPIO_Init+0x34c>)
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	089b      	lsrs	r3, r3, #2
 8002fd8:	3302      	adds	r3, #2
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	43db      	mvns	r3, r3
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d003      	beq.n	8003006 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	4313      	orrs	r3, r2
 8003004:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003006:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800300e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	43db      	mvns	r3, r3
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	4013      	ands	r3, r2
 800301e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d003      	beq.n	8003034 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	4313      	orrs	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003034:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	43db      	mvns	r3, r3
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	4013      	ands	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d003      	beq.n	8003060 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	4313      	orrs	r3, r2
 800305e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	43db      	mvns	r3, r3
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	4013      	ands	r3, r2
 8003074:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	4313      	orrs	r3, r2
 8003088:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	3301      	adds	r3, #1
 8003094:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	fa22 f303 	lsr.w	r3, r2, r3
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f47f ae6b 	bne.w	8002d7c <HAL_GPIO_Init+0x14>
  }
}
 80030a6:	bf00      	nop
 80030a8:	bf00      	nop
 80030aa:	3724      	adds	r7, #36	; 0x24
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr
 80030b4:	58000400 	.word	0x58000400

080030b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	460b      	mov	r3, r1
 80030c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	691a      	ldr	r2, [r3, #16]
 80030c8:	887b      	ldrh	r3, [r7, #2]
 80030ca:	4013      	ands	r3, r2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d002      	beq.n	80030d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80030d0:	2301      	movs	r3, #1
 80030d2:	73fb      	strb	r3, [r7, #15]
 80030d4:	e001      	b.n	80030da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80030d6:	2300      	movs	r3, #0
 80030d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80030da:	7bfb      	ldrb	r3, [r7, #15]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3714      	adds	r7, #20
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	460b      	mov	r3, r1
 80030f2:	807b      	strh	r3, [r7, #2]
 80030f4:	4613      	mov	r3, r2
 80030f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030f8:	787b      	ldrb	r3, [r7, #1]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030fe:	887a      	ldrh	r2, [r7, #2]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003104:	e003      	b.n	800310e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003106:	887b      	ldrh	r3, [r7, #2]
 8003108:	041a      	lsls	r2, r3, #16
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	619a      	str	r2, [r3, #24]
}
 800310e:	bf00      	nop
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
	...

0800311c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e08b      	b.n	8003246 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d106      	bne.n	8003148 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f7ff f9ae 	bl	80024a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2224      	movs	r2, #36	; 0x24
 800314c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f022 0201 	bic.w	r2, r2, #1
 800315e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800316c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689a      	ldr	r2, [r3, #8]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800317c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d107      	bne.n	8003196 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	689a      	ldr	r2, [r3, #8]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003192:	609a      	str	r2, [r3, #8]
 8003194:	e006      	b.n	80031a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	689a      	ldr	r2, [r3, #8]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80031a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d108      	bne.n	80031be <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031ba:	605a      	str	r2, [r3, #4]
 80031bc:	e007      	b.n	80031ce <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	685a      	ldr	r2, [r3, #4]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	6859      	ldr	r1, [r3, #4]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	4b1d      	ldr	r3, [pc, #116]	; (8003250 <HAL_I2C_Init+0x134>)
 80031da:	430b      	orrs	r3, r1
 80031dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68da      	ldr	r2, [r3, #12]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	691a      	ldr	r2, [r3, #16]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	430a      	orrs	r2, r1
 8003206:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	69d9      	ldr	r1, [r3, #28]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a1a      	ldr	r2, [r3, #32]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	430a      	orrs	r2, r1
 8003216:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f042 0201 	orr.w	r2, r2, #1
 8003226:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2220      	movs	r2, #32
 8003232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	02008000 	.word	0x02008000

08003254 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b088      	sub	sp, #32
 8003258:	af02      	add	r7, sp, #8
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	607a      	str	r2, [r7, #4]
 800325e:	461a      	mov	r2, r3
 8003260:	460b      	mov	r3, r1
 8003262:	817b      	strh	r3, [r7, #10]
 8003264:	4613      	mov	r3, r2
 8003266:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b20      	cmp	r3, #32
 8003272:	f040 80fd 	bne.w	8003470 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800327c:	2b01      	cmp	r3, #1
 800327e:	d101      	bne.n	8003284 <HAL_I2C_Master_Transmit+0x30>
 8003280:	2302      	movs	r3, #2
 8003282:	e0f6      	b.n	8003472 <HAL_I2C_Master_Transmit+0x21e>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800328c:	f7ff fc58 	bl	8002b40 <HAL_GetTick>
 8003290:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	9300      	str	r3, [sp, #0]
 8003296:	2319      	movs	r3, #25
 8003298:	2201      	movs	r2, #1
 800329a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f000 fa0a 	bl	80036b8 <I2C_WaitOnFlagUntilTimeout>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d001      	beq.n	80032ae <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e0e1      	b.n	8003472 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2221      	movs	r2, #33	; 0x21
 80032b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2210      	movs	r2, #16
 80032ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2200      	movs	r2, #0
 80032c2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	893a      	ldrh	r2, [r7, #8]
 80032ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032da:	b29b      	uxth	r3, r3
 80032dc:	2bff      	cmp	r3, #255	; 0xff
 80032de:	d906      	bls.n	80032ee <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	22ff      	movs	r2, #255	; 0xff
 80032e4:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80032e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032ea:	617b      	str	r3, [r7, #20]
 80032ec:	e007      	b.n	80032fe <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80032f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032fc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003302:	2b00      	cmp	r3, #0
 8003304:	d024      	beq.n	8003350 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330a:	781a      	ldrb	r2, [r3, #0]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003316:	1c5a      	adds	r2, r3, #1
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003320:	b29b      	uxth	r3, r3
 8003322:	3b01      	subs	r3, #1
 8003324:	b29a      	uxth	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800332e:	3b01      	subs	r3, #1
 8003330:	b29a      	uxth	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800333a:	b2db      	uxtb	r3, r3
 800333c:	3301      	adds	r3, #1
 800333e:	b2da      	uxtb	r2, r3
 8003340:	8979      	ldrh	r1, [r7, #10]
 8003342:	4b4e      	ldr	r3, [pc, #312]	; (800347c <HAL_I2C_Master_Transmit+0x228>)
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	f000 fc05 	bl	8003b58 <I2C_TransferConfig>
 800334e:	e066      	b.n	800341e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003354:	b2da      	uxtb	r2, r3
 8003356:	8979      	ldrh	r1, [r7, #10]
 8003358:	4b48      	ldr	r3, [pc, #288]	; (800347c <HAL_I2C_Master_Transmit+0x228>)
 800335a:	9300      	str	r3, [sp, #0]
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	68f8      	ldr	r0, [r7, #12]
 8003360:	f000 fbfa 	bl	8003b58 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003364:	e05b      	b.n	800341e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	6a39      	ldr	r1, [r7, #32]
 800336a:	68f8      	ldr	r0, [r7, #12]
 800336c:	f000 f9fd 	bl	800376a <I2C_WaitOnTXISFlagUntilTimeout>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e07b      	b.n	8003472 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337e:	781a      	ldrb	r2, [r3, #0]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338a:	1c5a      	adds	r2, r3, #1
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003394:	b29b      	uxth	r3, r3
 8003396:	3b01      	subs	r3, #1
 8003398:	b29a      	uxth	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a2:	3b01      	subs	r3, #1
 80033a4:	b29a      	uxth	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d034      	beq.n	800341e <HAL_I2C_Master_Transmit+0x1ca>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d130      	bne.n	800341e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	9300      	str	r3, [sp, #0]
 80033c0:	6a3b      	ldr	r3, [r7, #32]
 80033c2:	2200      	movs	r2, #0
 80033c4:	2180      	movs	r1, #128	; 0x80
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f000 f976 	bl	80036b8 <I2C_WaitOnFlagUntilTimeout>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e04d      	b.n	8003472 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033da:	b29b      	uxth	r3, r3
 80033dc:	2bff      	cmp	r3, #255	; 0xff
 80033de:	d90e      	bls.n	80033fe <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	22ff      	movs	r2, #255	; 0xff
 80033e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ea:	b2da      	uxtb	r2, r3
 80033ec:	8979      	ldrh	r1, [r7, #10]
 80033ee:	2300      	movs	r3, #0
 80033f0:	9300      	str	r3, [sp, #0]
 80033f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f000 fbae 	bl	8003b58 <I2C_TransferConfig>
 80033fc:	e00f      	b.n	800341e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003402:	b29a      	uxth	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800340c:	b2da      	uxtb	r2, r3
 800340e:	8979      	ldrh	r1, [r7, #10]
 8003410:	2300      	movs	r3, #0
 8003412:	9300      	str	r3, [sp, #0]
 8003414:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f000 fb9d 	bl	8003b58 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003422:	b29b      	uxth	r3, r3
 8003424:	2b00      	cmp	r3, #0
 8003426:	d19e      	bne.n	8003366 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	6a39      	ldr	r1, [r7, #32]
 800342c:	68f8      	ldr	r0, [r7, #12]
 800342e:	f000 f9e3 	bl	80037f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d001      	beq.n	800343c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e01a      	b.n	8003472 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2220      	movs	r2, #32
 8003442:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6859      	ldr	r1, [r3, #4]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	4b0c      	ldr	r3, [pc, #48]	; (8003480 <HAL_I2C_Master_Transmit+0x22c>)
 8003450:	400b      	ands	r3, r1
 8003452:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2220      	movs	r2, #32
 8003458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800346c:	2300      	movs	r3, #0
 800346e:	e000      	b.n	8003472 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003470:	2302      	movs	r3, #2
  }
}
 8003472:	4618      	mov	r0, r3
 8003474:	3718      	adds	r7, #24
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	80002000 	.word	0x80002000
 8003480:	fe00e800 	.word	0xfe00e800

08003484 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b088      	sub	sp, #32
 8003488:	af02      	add	r7, sp, #8
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	607a      	str	r2, [r7, #4]
 800348e:	461a      	mov	r2, r3
 8003490:	460b      	mov	r3, r1
 8003492:	817b      	strh	r3, [r7, #10]
 8003494:	4613      	mov	r3, r2
 8003496:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b20      	cmp	r3, #32
 80034a2:	f040 80db 	bne.w	800365c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d101      	bne.n	80034b4 <HAL_I2C_Master_Receive+0x30>
 80034b0:	2302      	movs	r3, #2
 80034b2:	e0d4      	b.n	800365e <HAL_I2C_Master_Receive+0x1da>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80034bc:	f7ff fb40 	bl	8002b40 <HAL_GetTick>
 80034c0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	9300      	str	r3, [sp, #0]
 80034c6:	2319      	movs	r3, #25
 80034c8:	2201      	movs	r2, #1
 80034ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80034ce:	68f8      	ldr	r0, [r7, #12]
 80034d0:	f000 f8f2 	bl	80036b8 <I2C_WaitOnFlagUntilTimeout>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d001      	beq.n	80034de <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e0bf      	b.n	800365e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2222      	movs	r2, #34	; 0x22
 80034e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2210      	movs	r2, #16
 80034ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	893a      	ldrh	r2, [r7, #8]
 80034fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800350a:	b29b      	uxth	r3, r3
 800350c:	2bff      	cmp	r3, #255	; 0xff
 800350e:	d90e      	bls.n	800352e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	22ff      	movs	r2, #255	; 0xff
 8003514:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800351a:	b2da      	uxtb	r2, r3
 800351c:	8979      	ldrh	r1, [r7, #10]
 800351e:	4b52      	ldr	r3, [pc, #328]	; (8003668 <HAL_I2C_Master_Receive+0x1e4>)
 8003520:	9300      	str	r3, [sp, #0]
 8003522:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	f000 fb16 	bl	8003b58 <I2C_TransferConfig>
 800352c:	e06d      	b.n	800360a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003532:	b29a      	uxth	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800353c:	b2da      	uxtb	r2, r3
 800353e:	8979      	ldrh	r1, [r7, #10]
 8003540:	4b49      	ldr	r3, [pc, #292]	; (8003668 <HAL_I2C_Master_Receive+0x1e4>)
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003548:	68f8      	ldr	r0, [r7, #12]
 800354a:	f000 fb05 	bl	8003b58 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800354e:	e05c      	b.n	800360a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003550:	697a      	ldr	r2, [r7, #20]
 8003552:	6a39      	ldr	r1, [r7, #32]
 8003554:	68f8      	ldr	r0, [r7, #12]
 8003556:	f000 f993 	bl	8003880 <I2C_WaitOnRXNEFlagUntilTimeout>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e07c      	b.n	800365e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356e:	b2d2      	uxtb	r2, r2
 8003570:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003576:	1c5a      	adds	r2, r3, #1
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003580:	3b01      	subs	r3, #1
 8003582:	b29a      	uxth	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800358c:	b29b      	uxth	r3, r3
 800358e:	3b01      	subs	r3, #1
 8003590:	b29a      	uxth	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800359a:	b29b      	uxth	r3, r3
 800359c:	2b00      	cmp	r3, #0
 800359e:	d034      	beq.n	800360a <HAL_I2C_Master_Receive+0x186>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d130      	bne.n	800360a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	9300      	str	r3, [sp, #0]
 80035ac:	6a3b      	ldr	r3, [r7, #32]
 80035ae:	2200      	movs	r2, #0
 80035b0:	2180      	movs	r1, #128	; 0x80
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f000 f880 	bl	80036b8 <I2C_WaitOnFlagUntilTimeout>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e04d      	b.n	800365e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	2bff      	cmp	r3, #255	; 0xff
 80035ca:	d90e      	bls.n	80035ea <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	22ff      	movs	r2, #255	; 0xff
 80035d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035d6:	b2da      	uxtb	r2, r3
 80035d8:	8979      	ldrh	r1, [r7, #10]
 80035da:	2300      	movs	r3, #0
 80035dc:	9300      	str	r3, [sp, #0]
 80035de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	f000 fab8 	bl	8003b58 <I2C_TransferConfig>
 80035e8:	e00f      	b.n	800360a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f8:	b2da      	uxtb	r2, r3
 80035fa:	8979      	ldrh	r1, [r7, #10]
 80035fc:	2300      	movs	r3, #0
 80035fe:	9300      	str	r3, [sp, #0]
 8003600:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	f000 faa7 	bl	8003b58 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800360e:	b29b      	uxth	r3, r3
 8003610:	2b00      	cmp	r3, #0
 8003612:	d19d      	bne.n	8003550 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	6a39      	ldr	r1, [r7, #32]
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f000 f8ed 	bl	80037f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d001      	beq.n	8003628 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e01a      	b.n	800365e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2220      	movs	r2, #32
 800362e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	6859      	ldr	r1, [r3, #4]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	4b0c      	ldr	r3, [pc, #48]	; (800366c <HAL_I2C_Master_Receive+0x1e8>)
 800363c:	400b      	ands	r3, r1
 800363e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2220      	movs	r2, #32
 8003644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003658:	2300      	movs	r3, #0
 800365a:	e000      	b.n	800365e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800365c:	2302      	movs	r3, #2
  }
}
 800365e:	4618      	mov	r0, r3
 8003660:	3718      	adds	r7, #24
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	80002400 	.word	0x80002400
 800366c:	fe00e800 	.word	0xfe00e800

08003670 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b02      	cmp	r3, #2
 8003684:	d103      	bne.n	800368e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2200      	movs	r2, #0
 800368c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	2b01      	cmp	r3, #1
 800369a:	d007      	beq.n	80036ac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	699a      	ldr	r2, [r3, #24]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f042 0201 	orr.w	r2, r2, #1
 80036aa:	619a      	str	r2, [r3, #24]
  }
}
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	603b      	str	r3, [r7, #0]
 80036c4:	4613      	mov	r3, r2
 80036c6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036c8:	e03b      	b.n	8003742 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	6839      	ldr	r1, [r7, #0]
 80036ce:	68f8      	ldr	r0, [r7, #12]
 80036d0:	f000 f962 	bl	8003998 <I2C_IsErrorOccurred>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e041      	b.n	8003762 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e4:	d02d      	beq.n	8003742 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036e6:	f7ff fa2b 	bl	8002b40 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	683a      	ldr	r2, [r7, #0]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d302      	bcc.n	80036fc <I2C_WaitOnFlagUntilTimeout+0x44>
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d122      	bne.n	8003742 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	699a      	ldr	r2, [r3, #24]
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	4013      	ands	r3, r2
 8003706:	68ba      	ldr	r2, [r7, #8]
 8003708:	429a      	cmp	r2, r3
 800370a:	bf0c      	ite	eq
 800370c:	2301      	moveq	r3, #1
 800370e:	2300      	movne	r3, #0
 8003710:	b2db      	uxtb	r3, r3
 8003712:	461a      	mov	r2, r3
 8003714:	79fb      	ldrb	r3, [r7, #7]
 8003716:	429a      	cmp	r2, r3
 8003718:	d113      	bne.n	8003742 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371e:	f043 0220 	orr.w	r2, r3, #32
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2220      	movs	r2, #32
 800372a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e00f      	b.n	8003762 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	699a      	ldr	r2, [r3, #24]
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	4013      	ands	r3, r2
 800374c:	68ba      	ldr	r2, [r7, #8]
 800374e:	429a      	cmp	r2, r3
 8003750:	bf0c      	ite	eq
 8003752:	2301      	moveq	r3, #1
 8003754:	2300      	movne	r3, #0
 8003756:	b2db      	uxtb	r3, r3
 8003758:	461a      	mov	r2, r3
 800375a:	79fb      	ldrb	r3, [r7, #7]
 800375c:	429a      	cmp	r2, r3
 800375e:	d0b4      	beq.n	80036ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b084      	sub	sp, #16
 800376e:	af00      	add	r7, sp, #0
 8003770:	60f8      	str	r0, [r7, #12]
 8003772:	60b9      	str	r1, [r7, #8]
 8003774:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003776:	e033      	b.n	80037e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	68b9      	ldr	r1, [r7, #8]
 800377c:	68f8      	ldr	r0, [r7, #12]
 800377e:	f000 f90b 	bl	8003998 <I2C_IsErrorOccurred>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d001      	beq.n	800378c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e031      	b.n	80037f0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003792:	d025      	beq.n	80037e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003794:	f7ff f9d4 	bl	8002b40 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	68ba      	ldr	r2, [r7, #8]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d302      	bcc.n	80037aa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d11a      	bne.n	80037e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d013      	beq.n	80037e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037bc:	f043 0220 	orr.w	r2, r3, #32
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2220      	movs	r2, #32
 80037c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e007      	b.n	80037f0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d1c4      	bne.n	8003778 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3710      	adds	r7, #16
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003804:	e02f      	b.n	8003866 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	68b9      	ldr	r1, [r7, #8]
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f000 f8c4 	bl	8003998 <I2C_IsErrorOccurred>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e02d      	b.n	8003876 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800381a:	f7ff f991 	bl	8002b40 <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	68ba      	ldr	r2, [r7, #8]
 8003826:	429a      	cmp	r2, r3
 8003828:	d302      	bcc.n	8003830 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d11a      	bne.n	8003866 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	f003 0320 	and.w	r3, r3, #32
 800383a:	2b20      	cmp	r3, #32
 800383c:	d013      	beq.n	8003866 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003842:	f043 0220 	orr.w	r2, r3, #32
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2220      	movs	r2, #32
 800384e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e007      	b.n	8003876 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	f003 0320 	and.w	r3, r3, #32
 8003870:	2b20      	cmp	r3, #32
 8003872:	d1c8      	bne.n	8003806 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
	...

08003880 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800388c:	2300      	movs	r3, #0
 800388e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003890:	e071      	b.n	8003976 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	68b9      	ldr	r1, [r7, #8]
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f000 f87e 	bl	8003998 <I2C_IsErrorOccurred>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	f003 0320 	and.w	r3, r3, #32
 80038b0:	2b20      	cmp	r3, #32
 80038b2:	d13b      	bne.n	800392c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80038b4:	7dfb      	ldrb	r3, [r7, #23]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d138      	bne.n	800392c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	f003 0304 	and.w	r3, r3, #4
 80038c4:	2b04      	cmp	r3, #4
 80038c6:	d105      	bne.n	80038d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d001      	beq.n	80038d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80038d0:	2300      	movs	r3, #0
 80038d2:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	f003 0310 	and.w	r3, r3, #16
 80038de:	2b10      	cmp	r3, #16
 80038e0:	d121      	bne.n	8003926 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2210      	movs	r2, #16
 80038e8:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2204      	movs	r2, #4
 80038ee:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2220      	movs	r2, #32
 80038f6:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	6859      	ldr	r1, [r3, #4]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	4b24      	ldr	r3, [pc, #144]	; (8003994 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8003904:	400b      	ands	r3, r1
 8003906:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2220      	movs	r2, #32
 800390c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	75fb      	strb	r3, [r7, #23]
 8003924:	e002      	b.n	800392c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800392c:	f7ff f908 	bl	8002b40 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	68ba      	ldr	r2, [r7, #8]
 8003938:	429a      	cmp	r2, r3
 800393a:	d302      	bcc.n	8003942 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d119      	bne.n	8003976 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8003942:	7dfb      	ldrb	r3, [r7, #23]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d116      	bne.n	8003976 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	f003 0304 	and.w	r3, r3, #4
 8003952:	2b04      	cmp	r3, #4
 8003954:	d00f      	beq.n	8003976 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395a:	f043 0220 	orr.w	r2, r3, #32
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2220      	movs	r2, #32
 8003966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	f003 0304 	and.w	r3, r3, #4
 8003980:	2b04      	cmp	r3, #4
 8003982:	d002      	beq.n	800398a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8003984:	7dfb      	ldrb	r3, [r7, #23]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d083      	beq.n	8003892 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800398a:	7dfb      	ldrb	r3, [r7, #23]
}
 800398c:	4618      	mov	r0, r3
 800398e:	3718      	adds	r7, #24
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	fe00e800 	.word	0xfe00e800

08003998 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b08a      	sub	sp, #40	; 0x28
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039a4:	2300      	movs	r3, #0
 80039a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80039b2:	2300      	movs	r3, #0
 80039b4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	f003 0310 	and.w	r3, r3, #16
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d068      	beq.n	8003a96 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2210      	movs	r2, #16
 80039ca:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80039cc:	e049      	b.n	8003a62 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d4:	d045      	beq.n	8003a62 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80039d6:	f7ff f8b3 	bl	8002b40 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	68ba      	ldr	r2, [r7, #8]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d302      	bcc.n	80039ec <I2C_IsErrorOccurred+0x54>
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d13a      	bne.n	8003a62 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039f6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80039fe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a0e:	d121      	bne.n	8003a54 <I2C_IsErrorOccurred+0xbc>
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a16:	d01d      	beq.n	8003a54 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003a18:	7cfb      	ldrb	r3, [r7, #19]
 8003a1a:	2b20      	cmp	r3, #32
 8003a1c:	d01a      	beq.n	8003a54 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	685a      	ldr	r2, [r3, #4]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a2c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003a2e:	f7ff f887 	bl	8002b40 <HAL_GetTick>
 8003a32:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a34:	e00e      	b.n	8003a54 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003a36:	f7ff f883 	bl	8002b40 <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	2b19      	cmp	r3, #25
 8003a42:	d907      	bls.n	8003a54 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003a44:	6a3b      	ldr	r3, [r7, #32]
 8003a46:	f043 0320 	orr.w	r3, r3, #32
 8003a4a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003a52:	e006      	b.n	8003a62 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	f003 0320 	and.w	r3, r3, #32
 8003a5e:	2b20      	cmp	r3, #32
 8003a60:	d1e9      	bne.n	8003a36 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	699b      	ldr	r3, [r3, #24]
 8003a68:	f003 0320 	and.w	r3, r3, #32
 8003a6c:	2b20      	cmp	r3, #32
 8003a6e:	d003      	beq.n	8003a78 <I2C_IsErrorOccurred+0xe0>
 8003a70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d0aa      	beq.n	80039ce <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003a78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d103      	bne.n	8003a88 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2220      	movs	r2, #32
 8003a86:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003a88:	6a3b      	ldr	r3, [r7, #32]
 8003a8a:	f043 0304 	orr.w	r3, r3, #4
 8003a8e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00b      	beq.n	8003ac0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003aa8:	6a3b      	ldr	r3, [r7, #32]
 8003aaa:	f043 0301 	orr.w	r3, r3, #1
 8003aae:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ab8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00b      	beq.n	8003ae2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003aca:	6a3b      	ldr	r3, [r7, #32]
 8003acc:	f043 0308 	orr.w	r3, r3, #8
 8003ad0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ada:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00b      	beq.n	8003b04 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003aec:	6a3b      	ldr	r3, [r7, #32]
 8003aee:	f043 0302 	orr.w	r3, r3, #2
 8003af2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003afc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003b04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d01c      	beq.n	8003b46 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	f7ff fdaf 	bl	8003670 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	6859      	ldr	r1, [r3, #4]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	4b0d      	ldr	r3, [pc, #52]	; (8003b54 <I2C_IsErrorOccurred+0x1bc>)
 8003b1e:	400b      	ands	r3, r1
 8003b20:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b26:	6a3b      	ldr	r3, [r7, #32]
 8003b28:	431a      	orrs	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2220      	movs	r2, #32
 8003b32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003b46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3728      	adds	r7, #40	; 0x28
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	fe00e800 	.word	0xfe00e800

08003b58 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b087      	sub	sp, #28
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	607b      	str	r3, [r7, #4]
 8003b62:	460b      	mov	r3, r1
 8003b64:	817b      	strh	r3, [r7, #10]
 8003b66:	4613      	mov	r3, r2
 8003b68:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b6a:	897b      	ldrh	r3, [r7, #10]
 8003b6c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b70:	7a7b      	ldrb	r3, [r7, #9]
 8003b72:	041b      	lsls	r3, r3, #16
 8003b74:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b78:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b7e:	6a3b      	ldr	r3, [r7, #32]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b86:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	685a      	ldr	r2, [r3, #4]
 8003b8e:	6a3b      	ldr	r3, [r7, #32]
 8003b90:	0d5b      	lsrs	r3, r3, #21
 8003b92:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003b96:	4b08      	ldr	r3, [pc, #32]	; (8003bb8 <I2C_TransferConfig+0x60>)
 8003b98:	430b      	orrs	r3, r1
 8003b9a:	43db      	mvns	r3, r3
 8003b9c:	ea02 0103 	and.w	r1, r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003baa:	bf00      	nop
 8003bac:	371c      	adds	r7, #28
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	03ff63ff 	.word	0x03ff63ff

08003bbc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	2b20      	cmp	r3, #32
 8003bd0:	d138      	bne.n	8003c44 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d101      	bne.n	8003be0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003bdc:	2302      	movs	r3, #2
 8003bde:	e032      	b.n	8003c46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2224      	movs	r2, #36	; 0x24
 8003bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f022 0201 	bic.w	r2, r2, #1
 8003bfe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c0e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6819      	ldr	r1, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f042 0201 	orr.w	r2, r2, #1
 8003c2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2220      	movs	r2, #32
 8003c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c40:	2300      	movs	r3, #0
 8003c42:	e000      	b.n	8003c46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c44:	2302      	movs	r3, #2
  }
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c52:	b480      	push	{r7}
 8003c54:	b085      	sub	sp, #20
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
 8003c5a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	2b20      	cmp	r3, #32
 8003c66:	d139      	bne.n	8003cdc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d101      	bne.n	8003c76 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c72:	2302      	movs	r3, #2
 8003c74:	e033      	b.n	8003cde <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2224      	movs	r2, #36	; 0x24
 8003c82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f022 0201 	bic.w	r2, r2, #1
 8003c94:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ca4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	021b      	lsls	r3, r3, #8
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f042 0201 	orr.w	r2, r2, #1
 8003cc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2220      	movs	r2, #32
 8003ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	e000      	b.n	8003cde <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003cdc:	2302      	movs	r3, #2
  }
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3714      	adds	r7, #20
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
	...

08003cec <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003cf4:	4b29      	ldr	r3, [pc, #164]	; (8003d9c <HAL_PWREx_ConfigSupply+0xb0>)
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	f003 0307 	and.w	r3, r3, #7
 8003cfc:	2b06      	cmp	r3, #6
 8003cfe:	d00a      	beq.n	8003d16 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003d00:	4b26      	ldr	r3, [pc, #152]	; (8003d9c <HAL_PWREx_ConfigSupply+0xb0>)
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d001      	beq.n	8003d12 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e03f      	b.n	8003d92 <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003d12:	2300      	movs	r3, #0
 8003d14:	e03d      	b.n	8003d92 <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003d16:	4b21      	ldr	r3, [pc, #132]	; (8003d9c <HAL_PWREx_ConfigSupply+0xb0>)
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003d1e:	491f      	ldr	r1, [pc, #124]	; (8003d9c <HAL_PWREx_ConfigSupply+0xb0>)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003d26:	f7fe ff0b 	bl	8002b40 <HAL_GetTick>
 8003d2a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003d2c:	e009      	b.n	8003d42 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003d2e:	f7fe ff07 	bl	8002b40 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d3c:	d901      	bls.n	8003d42 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e027      	b.n	8003d92 <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003d42:	4b16      	ldr	r3, [pc, #88]	; (8003d9c <HAL_PWREx_ConfigSupply+0xb0>)
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d4e:	d1ee      	bne.n	8003d2e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b1e      	cmp	r3, #30
 8003d54:	d008      	beq.n	8003d68 <HAL_PWREx_ConfigSupply+0x7c>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2b2e      	cmp	r3, #46	; 0x2e
 8003d5a:	d005      	beq.n	8003d68 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b1d      	cmp	r3, #29
 8003d60:	d002      	beq.n	8003d68 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2b2d      	cmp	r3, #45	; 0x2d
 8003d66:	d113      	bne.n	8003d90 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003d68:	f7fe feea 	bl	8002b40 <HAL_GetTick>
 8003d6c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003d6e:	e009      	b.n	8003d84 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003d70:	f7fe fee6 	bl	8002b40 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d7e:	d901      	bls.n	8003d84 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e006      	b.n	8003d92 <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003d84:	4b05      	ldr	r3, [pc, #20]	; (8003d9c <HAL_PWREx_ConfigSupply+0xb0>)
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	f003 0311 	and.w	r3, r3, #17
 8003d8c:	2b11      	cmp	r3, #17
 8003d8e:	d1ef      	bne.n	8003d70 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3710      	adds	r7, #16
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	58024800 	.word	0x58024800

08003da0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b08c      	sub	sp, #48	; 0x30
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e3c8      	b.n	8004544 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0301 	and.w	r3, r3, #1
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	f000 8087 	beq.w	8003ece <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dc0:	4b88      	ldr	r3, [pc, #544]	; (8003fe4 <HAL_RCC_OscConfig+0x244>)
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003dca:	4b86      	ldr	r3, [pc, #536]	; (8003fe4 <HAL_RCC_OscConfig+0x244>)
 8003dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dce:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd2:	2b10      	cmp	r3, #16
 8003dd4:	d007      	beq.n	8003de6 <HAL_RCC_OscConfig+0x46>
 8003dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd8:	2b18      	cmp	r3, #24
 8003dda:	d110      	bne.n	8003dfe <HAL_RCC_OscConfig+0x5e>
 8003ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dde:	f003 0303 	and.w	r3, r3, #3
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d10b      	bne.n	8003dfe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003de6:	4b7f      	ldr	r3, [pc, #508]	; (8003fe4 <HAL_RCC_OscConfig+0x244>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d06c      	beq.n	8003ecc <HAL_RCC_OscConfig+0x12c>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d168      	bne.n	8003ecc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e3a2      	b.n	8004544 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e06:	d106      	bne.n	8003e16 <HAL_RCC_OscConfig+0x76>
 8003e08:	4b76      	ldr	r3, [pc, #472]	; (8003fe4 <HAL_RCC_OscConfig+0x244>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a75      	ldr	r2, [pc, #468]	; (8003fe4 <HAL_RCC_OscConfig+0x244>)
 8003e0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e12:	6013      	str	r3, [r2, #0]
 8003e14:	e02e      	b.n	8003e74 <HAL_RCC_OscConfig+0xd4>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10c      	bne.n	8003e38 <HAL_RCC_OscConfig+0x98>
 8003e1e:	4b71      	ldr	r3, [pc, #452]	; (8003fe4 <HAL_RCC_OscConfig+0x244>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a70      	ldr	r2, [pc, #448]	; (8003fe4 <HAL_RCC_OscConfig+0x244>)
 8003e24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e28:	6013      	str	r3, [r2, #0]
 8003e2a:	4b6e      	ldr	r3, [pc, #440]	; (8003fe4 <HAL_RCC_OscConfig+0x244>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a6d      	ldr	r2, [pc, #436]	; (8003fe4 <HAL_RCC_OscConfig+0x244>)
 8003e30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e34:	6013      	str	r3, [r2, #0]
 8003e36:	e01d      	b.n	8003e74 <HAL_RCC_OscConfig+0xd4>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e40:	d10c      	bne.n	8003e5c <HAL_RCC_OscConfig+0xbc>
 8003e42:	4b68      	ldr	r3, [pc, #416]	; (8003fe4 <HAL_RCC_OscConfig+0x244>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a67      	ldr	r2, [pc, #412]	; (8003fe4 <HAL_RCC_OscConfig+0x244>)
 8003e48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e4c:	6013      	str	r3, [r2, #0]
 8003e4e:	4b65      	ldr	r3, [pc, #404]	; (8003fe4 <HAL_RCC_OscConfig+0x244>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a64      	ldr	r2, [pc, #400]	; (8003fe4 <HAL_RCC_OscConfig+0x244>)
 8003e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e58:	6013      	str	r3, [r2, #0]
 8003e5a:	e00b      	b.n	8003e74 <HAL_RCC_OscConfig+0xd4>
 8003e5c:	4b61      	ldr	r3, [pc, #388]	; (8003fe4 <HAL_RCC_OscConfig+0x244>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a60      	ldr	r2, [pc, #384]	; (8003fe4 <HAL_RCC_OscConfig+0x244>)
 8003e62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e66:	6013      	str	r3, [r2, #0]
 8003e68:	4b5e      	ldr	r3, [pc, #376]	; (8003fe4 <HAL_RCC_OscConfig+0x244>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a5d      	ldr	r2, [pc, #372]	; (8003fe4 <HAL_RCC_OscConfig+0x244>)
 8003e6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d013      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e7c:	f7fe fe60 	bl	8002b40 <HAL_GetTick>
 8003e80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e82:	e008      	b.n	8003e96 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e84:	f7fe fe5c 	bl	8002b40 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b64      	cmp	r3, #100	; 0x64
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e356      	b.n	8004544 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e96:	4b53      	ldr	r3, [pc, #332]	; (8003fe4 <HAL_RCC_OscConfig+0x244>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d0f0      	beq.n	8003e84 <HAL_RCC_OscConfig+0xe4>
 8003ea2:	e014      	b.n	8003ece <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea4:	f7fe fe4c 	bl	8002b40 <HAL_GetTick>
 8003ea8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003eaa:	e008      	b.n	8003ebe <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003eac:	f7fe fe48 	bl	8002b40 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b64      	cmp	r3, #100	; 0x64
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e342      	b.n	8004544 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003ebe:	4b49      	ldr	r3, [pc, #292]	; (8003fe4 <HAL_RCC_OscConfig+0x244>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1f0      	bne.n	8003eac <HAL_RCC_OscConfig+0x10c>
 8003eca:	e000      	b.n	8003ece <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ecc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f000 808c 	beq.w	8003ff4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003edc:	4b41      	ldr	r3, [pc, #260]	; (8003fe4 <HAL_RCC_OscConfig+0x244>)
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ee4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ee6:	4b3f      	ldr	r3, [pc, #252]	; (8003fe4 <HAL_RCC_OscConfig+0x244>)
 8003ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eea:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003eec:	6a3b      	ldr	r3, [r7, #32]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d007      	beq.n	8003f02 <HAL_RCC_OscConfig+0x162>
 8003ef2:	6a3b      	ldr	r3, [r7, #32]
 8003ef4:	2b18      	cmp	r3, #24
 8003ef6:	d137      	bne.n	8003f68 <HAL_RCC_OscConfig+0x1c8>
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	f003 0303 	and.w	r3, r3, #3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d132      	bne.n	8003f68 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f02:	4b38      	ldr	r3, [pc, #224]	; (8003fe4 <HAL_RCC_OscConfig+0x244>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0304 	and.w	r3, r3, #4
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d005      	beq.n	8003f1a <HAL_RCC_OscConfig+0x17a>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d101      	bne.n	8003f1a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e314      	b.n	8004544 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003f1a:	4b32      	ldr	r3, [pc, #200]	; (8003fe4 <HAL_RCC_OscConfig+0x244>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f023 0219 	bic.w	r2, r3, #25
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	492f      	ldr	r1, [pc, #188]	; (8003fe4 <HAL_RCC_OscConfig+0x244>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f2c:	f7fe fe08 	bl	8002b40 <HAL_GetTick>
 8003f30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f32:	e008      	b.n	8003f46 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f34:	f7fe fe04 	bl	8002b40 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e2fe      	b.n	8004544 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f46:	4b27      	ldr	r3, [pc, #156]	; (8003fe4 <HAL_RCC_OscConfig+0x244>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0304 	and.w	r3, r3, #4
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d0f0      	beq.n	8003f34 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f52:	4b24      	ldr	r3, [pc, #144]	; (8003fe4 <HAL_RCC_OscConfig+0x244>)
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	061b      	lsls	r3, r3, #24
 8003f60:	4920      	ldr	r1, [pc, #128]	; (8003fe4 <HAL_RCC_OscConfig+0x244>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f66:	e045      	b.n	8003ff4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d026      	beq.n	8003fbe <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003f70:	4b1c      	ldr	r3, [pc, #112]	; (8003fe4 <HAL_RCC_OscConfig+0x244>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f023 0219 	bic.w	r2, r3, #25
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	4919      	ldr	r1, [pc, #100]	; (8003fe4 <HAL_RCC_OscConfig+0x244>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f82:	f7fe fddd 	bl	8002b40 <HAL_GetTick>
 8003f86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f88:	e008      	b.n	8003f9c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f8a:	f7fe fdd9 	bl	8002b40 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d901      	bls.n	8003f9c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e2d3      	b.n	8004544 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f9c:	4b11      	ldr	r3, [pc, #68]	; (8003fe4 <HAL_RCC_OscConfig+0x244>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0304 	and.w	r3, r3, #4
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d0f0      	beq.n	8003f8a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fa8:	4b0e      	ldr	r3, [pc, #56]	; (8003fe4 <HAL_RCC_OscConfig+0x244>)
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	061b      	lsls	r3, r3, #24
 8003fb6:	490b      	ldr	r1, [pc, #44]	; (8003fe4 <HAL_RCC_OscConfig+0x244>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	604b      	str	r3, [r1, #4]
 8003fbc:	e01a      	b.n	8003ff4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fbe:	4b09      	ldr	r3, [pc, #36]	; (8003fe4 <HAL_RCC_OscConfig+0x244>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a08      	ldr	r2, [pc, #32]	; (8003fe4 <HAL_RCC_OscConfig+0x244>)
 8003fc4:	f023 0301 	bic.w	r3, r3, #1
 8003fc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fca:	f7fe fdb9 	bl	8002b40 <HAL_GetTick>
 8003fce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003fd0:	e00a      	b.n	8003fe8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fd2:	f7fe fdb5 	bl	8002b40 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d903      	bls.n	8003fe8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e2af      	b.n	8004544 <HAL_RCC_OscConfig+0x7a4>
 8003fe4:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003fe8:	4b96      	ldr	r3, [pc, #600]	; (8004244 <HAL_RCC_OscConfig+0x4a4>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0304 	and.w	r3, r3, #4
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1ee      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0310 	and.w	r3, r3, #16
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d06a      	beq.n	80040d6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004000:	4b90      	ldr	r3, [pc, #576]	; (8004244 <HAL_RCC_OscConfig+0x4a4>)
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004008:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800400a:	4b8e      	ldr	r3, [pc, #568]	; (8004244 <HAL_RCC_OscConfig+0x4a4>)
 800400c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	2b08      	cmp	r3, #8
 8004014:	d007      	beq.n	8004026 <HAL_RCC_OscConfig+0x286>
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	2b18      	cmp	r3, #24
 800401a:	d11b      	bne.n	8004054 <HAL_RCC_OscConfig+0x2b4>
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	f003 0303 	and.w	r3, r3, #3
 8004022:	2b01      	cmp	r3, #1
 8004024:	d116      	bne.n	8004054 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004026:	4b87      	ldr	r3, [pc, #540]	; (8004244 <HAL_RCC_OscConfig+0x4a4>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800402e:	2b00      	cmp	r3, #0
 8004030:	d005      	beq.n	800403e <HAL_RCC_OscConfig+0x29e>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	69db      	ldr	r3, [r3, #28]
 8004036:	2b80      	cmp	r3, #128	; 0x80
 8004038:	d001      	beq.n	800403e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e282      	b.n	8004544 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800403e:	4b81      	ldr	r3, [pc, #516]	; (8004244 <HAL_RCC_OscConfig+0x4a4>)
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a1b      	ldr	r3, [r3, #32]
 800404a:	061b      	lsls	r3, r3, #24
 800404c:	497d      	ldr	r1, [pc, #500]	; (8004244 <HAL_RCC_OscConfig+0x4a4>)
 800404e:	4313      	orrs	r3, r2
 8004050:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004052:	e040      	b.n	80040d6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	69db      	ldr	r3, [r3, #28]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d023      	beq.n	80040a4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800405c:	4b79      	ldr	r3, [pc, #484]	; (8004244 <HAL_RCC_OscConfig+0x4a4>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a78      	ldr	r2, [pc, #480]	; (8004244 <HAL_RCC_OscConfig+0x4a4>)
 8004062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004066:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004068:	f7fe fd6a 	bl	8002b40 <HAL_GetTick>
 800406c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800406e:	e008      	b.n	8004082 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004070:	f7fe fd66 	bl	8002b40 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b02      	cmp	r3, #2
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e260      	b.n	8004544 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004082:	4b70      	ldr	r3, [pc, #448]	; (8004244 <HAL_RCC_OscConfig+0x4a4>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800408a:	2b00      	cmp	r3, #0
 800408c:	d0f0      	beq.n	8004070 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800408e:	4b6d      	ldr	r3, [pc, #436]	; (8004244 <HAL_RCC_OscConfig+0x4a4>)
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	061b      	lsls	r3, r3, #24
 800409c:	4969      	ldr	r1, [pc, #420]	; (8004244 <HAL_RCC_OscConfig+0x4a4>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	60cb      	str	r3, [r1, #12]
 80040a2:	e018      	b.n	80040d6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80040a4:	4b67      	ldr	r3, [pc, #412]	; (8004244 <HAL_RCC_OscConfig+0x4a4>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a66      	ldr	r2, [pc, #408]	; (8004244 <HAL_RCC_OscConfig+0x4a4>)
 80040aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b0:	f7fe fd46 	bl	8002b40 <HAL_GetTick>
 80040b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80040b6:	e008      	b.n	80040ca <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80040b8:	f7fe fd42 	bl	8002b40 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e23c      	b.n	8004544 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80040ca:	4b5e      	ldr	r3, [pc, #376]	; (8004244 <HAL_RCC_OscConfig+0x4a4>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1f0      	bne.n	80040b8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0308 	and.w	r3, r3, #8
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d036      	beq.n	8004150 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d019      	beq.n	800411e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040ea:	4b56      	ldr	r3, [pc, #344]	; (8004244 <HAL_RCC_OscConfig+0x4a4>)
 80040ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040ee:	4a55      	ldr	r2, [pc, #340]	; (8004244 <HAL_RCC_OscConfig+0x4a4>)
 80040f0:	f043 0301 	orr.w	r3, r3, #1
 80040f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f6:	f7fe fd23 	bl	8002b40 <HAL_GetTick>
 80040fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80040fc:	e008      	b.n	8004110 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040fe:	f7fe fd1f 	bl	8002b40 <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	2b02      	cmp	r3, #2
 800410a:	d901      	bls.n	8004110 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e219      	b.n	8004544 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004110:	4b4c      	ldr	r3, [pc, #304]	; (8004244 <HAL_RCC_OscConfig+0x4a4>)
 8004112:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004114:	f003 0302 	and.w	r3, r3, #2
 8004118:	2b00      	cmp	r3, #0
 800411a:	d0f0      	beq.n	80040fe <HAL_RCC_OscConfig+0x35e>
 800411c:	e018      	b.n	8004150 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800411e:	4b49      	ldr	r3, [pc, #292]	; (8004244 <HAL_RCC_OscConfig+0x4a4>)
 8004120:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004122:	4a48      	ldr	r2, [pc, #288]	; (8004244 <HAL_RCC_OscConfig+0x4a4>)
 8004124:	f023 0301 	bic.w	r3, r3, #1
 8004128:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800412a:	f7fe fd09 	bl	8002b40 <HAL_GetTick>
 800412e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004130:	e008      	b.n	8004144 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004132:	f7fe fd05 	bl	8002b40 <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	2b02      	cmp	r3, #2
 800413e:	d901      	bls.n	8004144 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e1ff      	b.n	8004544 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004144:	4b3f      	ldr	r3, [pc, #252]	; (8004244 <HAL_RCC_OscConfig+0x4a4>)
 8004146:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004148:	f003 0302 	and.w	r3, r3, #2
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1f0      	bne.n	8004132 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0320 	and.w	r3, r3, #32
 8004158:	2b00      	cmp	r3, #0
 800415a:	d036      	beq.n	80041ca <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d019      	beq.n	8004198 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004164:	4b37      	ldr	r3, [pc, #220]	; (8004244 <HAL_RCC_OscConfig+0x4a4>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a36      	ldr	r2, [pc, #216]	; (8004244 <HAL_RCC_OscConfig+0x4a4>)
 800416a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800416e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004170:	f7fe fce6 	bl	8002b40 <HAL_GetTick>
 8004174:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004176:	e008      	b.n	800418a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004178:	f7fe fce2 	bl	8002b40 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b02      	cmp	r3, #2
 8004184:	d901      	bls.n	800418a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e1dc      	b.n	8004544 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800418a:	4b2e      	ldr	r3, [pc, #184]	; (8004244 <HAL_RCC_OscConfig+0x4a4>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d0f0      	beq.n	8004178 <HAL_RCC_OscConfig+0x3d8>
 8004196:	e018      	b.n	80041ca <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004198:	4b2a      	ldr	r3, [pc, #168]	; (8004244 <HAL_RCC_OscConfig+0x4a4>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a29      	ldr	r2, [pc, #164]	; (8004244 <HAL_RCC_OscConfig+0x4a4>)
 800419e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041a2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80041a4:	f7fe fccc 	bl	8002b40 <HAL_GetTick>
 80041a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80041aa:	e008      	b.n	80041be <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041ac:	f7fe fcc8 	bl	8002b40 <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d901      	bls.n	80041be <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e1c2      	b.n	8004544 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80041be:	4b21      	ldr	r3, [pc, #132]	; (8004244 <HAL_RCC_OscConfig+0x4a4>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1f0      	bne.n	80041ac <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0304 	and.w	r3, r3, #4
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	f000 8086 	beq.w	80042e4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80041d8:	4b1b      	ldr	r3, [pc, #108]	; (8004248 <HAL_RCC_OscConfig+0x4a8>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a1a      	ldr	r2, [pc, #104]	; (8004248 <HAL_RCC_OscConfig+0x4a8>)
 80041de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041e4:	f7fe fcac 	bl	8002b40 <HAL_GetTick>
 80041e8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041ea:	e008      	b.n	80041fe <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041ec:	f7fe fca8 	bl	8002b40 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b64      	cmp	r3, #100	; 0x64
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e1a2      	b.n	8004544 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041fe:	4b12      	ldr	r3, [pc, #72]	; (8004248 <HAL_RCC_OscConfig+0x4a8>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004206:	2b00      	cmp	r3, #0
 8004208:	d0f0      	beq.n	80041ec <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d106      	bne.n	8004220 <HAL_RCC_OscConfig+0x480>
 8004212:	4b0c      	ldr	r3, [pc, #48]	; (8004244 <HAL_RCC_OscConfig+0x4a4>)
 8004214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004216:	4a0b      	ldr	r2, [pc, #44]	; (8004244 <HAL_RCC_OscConfig+0x4a4>)
 8004218:	f043 0301 	orr.w	r3, r3, #1
 800421c:	6713      	str	r3, [r2, #112]	; 0x70
 800421e:	e032      	b.n	8004286 <HAL_RCC_OscConfig+0x4e6>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d111      	bne.n	800424c <HAL_RCC_OscConfig+0x4ac>
 8004228:	4b06      	ldr	r3, [pc, #24]	; (8004244 <HAL_RCC_OscConfig+0x4a4>)
 800422a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422c:	4a05      	ldr	r2, [pc, #20]	; (8004244 <HAL_RCC_OscConfig+0x4a4>)
 800422e:	f023 0301 	bic.w	r3, r3, #1
 8004232:	6713      	str	r3, [r2, #112]	; 0x70
 8004234:	4b03      	ldr	r3, [pc, #12]	; (8004244 <HAL_RCC_OscConfig+0x4a4>)
 8004236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004238:	4a02      	ldr	r2, [pc, #8]	; (8004244 <HAL_RCC_OscConfig+0x4a4>)
 800423a:	f023 0304 	bic.w	r3, r3, #4
 800423e:	6713      	str	r3, [r2, #112]	; 0x70
 8004240:	e021      	b.n	8004286 <HAL_RCC_OscConfig+0x4e6>
 8004242:	bf00      	nop
 8004244:	58024400 	.word	0x58024400
 8004248:	58024800 	.word	0x58024800
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	2b05      	cmp	r3, #5
 8004252:	d10c      	bne.n	800426e <HAL_RCC_OscConfig+0x4ce>
 8004254:	4b83      	ldr	r3, [pc, #524]	; (8004464 <HAL_RCC_OscConfig+0x6c4>)
 8004256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004258:	4a82      	ldr	r2, [pc, #520]	; (8004464 <HAL_RCC_OscConfig+0x6c4>)
 800425a:	f043 0304 	orr.w	r3, r3, #4
 800425e:	6713      	str	r3, [r2, #112]	; 0x70
 8004260:	4b80      	ldr	r3, [pc, #512]	; (8004464 <HAL_RCC_OscConfig+0x6c4>)
 8004262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004264:	4a7f      	ldr	r2, [pc, #508]	; (8004464 <HAL_RCC_OscConfig+0x6c4>)
 8004266:	f043 0301 	orr.w	r3, r3, #1
 800426a:	6713      	str	r3, [r2, #112]	; 0x70
 800426c:	e00b      	b.n	8004286 <HAL_RCC_OscConfig+0x4e6>
 800426e:	4b7d      	ldr	r3, [pc, #500]	; (8004464 <HAL_RCC_OscConfig+0x6c4>)
 8004270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004272:	4a7c      	ldr	r2, [pc, #496]	; (8004464 <HAL_RCC_OscConfig+0x6c4>)
 8004274:	f023 0301 	bic.w	r3, r3, #1
 8004278:	6713      	str	r3, [r2, #112]	; 0x70
 800427a:	4b7a      	ldr	r3, [pc, #488]	; (8004464 <HAL_RCC_OscConfig+0x6c4>)
 800427c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427e:	4a79      	ldr	r2, [pc, #484]	; (8004464 <HAL_RCC_OscConfig+0x6c4>)
 8004280:	f023 0304 	bic.w	r3, r3, #4
 8004284:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d015      	beq.n	80042ba <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800428e:	f7fe fc57 	bl	8002b40 <HAL_GetTick>
 8004292:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004294:	e00a      	b.n	80042ac <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004296:	f7fe fc53 	bl	8002b40 <HAL_GetTick>
 800429a:	4602      	mov	r2, r0
 800429c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d901      	bls.n	80042ac <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e14b      	b.n	8004544 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042ac:	4b6d      	ldr	r3, [pc, #436]	; (8004464 <HAL_RCC_OscConfig+0x6c4>)
 80042ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b0:	f003 0302 	and.w	r3, r3, #2
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d0ee      	beq.n	8004296 <HAL_RCC_OscConfig+0x4f6>
 80042b8:	e014      	b.n	80042e4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ba:	f7fe fc41 	bl	8002b40 <HAL_GetTick>
 80042be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80042c0:	e00a      	b.n	80042d8 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042c2:	f7fe fc3d 	bl	8002b40 <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d901      	bls.n	80042d8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e135      	b.n	8004544 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80042d8:	4b62      	ldr	r3, [pc, #392]	; (8004464 <HAL_RCC_OscConfig+0x6c4>)
 80042da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042dc:	f003 0302 	and.w	r3, r3, #2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d1ee      	bne.n	80042c2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f000 812a 	beq.w	8004542 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80042ee:	4b5d      	ldr	r3, [pc, #372]	; (8004464 <HAL_RCC_OscConfig+0x6c4>)
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042f6:	2b18      	cmp	r3, #24
 80042f8:	f000 80ba 	beq.w	8004470 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004300:	2b02      	cmp	r3, #2
 8004302:	f040 8095 	bne.w	8004430 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004306:	4b57      	ldr	r3, [pc, #348]	; (8004464 <HAL_RCC_OscConfig+0x6c4>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a56      	ldr	r2, [pc, #344]	; (8004464 <HAL_RCC_OscConfig+0x6c4>)
 800430c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004310:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004312:	f7fe fc15 	bl	8002b40 <HAL_GetTick>
 8004316:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004318:	e008      	b.n	800432c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800431a:	f7fe fc11 	bl	8002b40 <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	2b02      	cmp	r3, #2
 8004326:	d901      	bls.n	800432c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e10b      	b.n	8004544 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800432c:	4b4d      	ldr	r3, [pc, #308]	; (8004464 <HAL_RCC_OscConfig+0x6c4>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d1f0      	bne.n	800431a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004338:	4b4a      	ldr	r3, [pc, #296]	; (8004464 <HAL_RCC_OscConfig+0x6c4>)
 800433a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800433c:	4b4a      	ldr	r3, [pc, #296]	; (8004468 <HAL_RCC_OscConfig+0x6c8>)
 800433e:	4013      	ands	r3, r2
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004348:	0112      	lsls	r2, r2, #4
 800434a:	430a      	orrs	r2, r1
 800434c:	4945      	ldr	r1, [pc, #276]	; (8004464 <HAL_RCC_OscConfig+0x6c4>)
 800434e:	4313      	orrs	r3, r2
 8004350:	628b      	str	r3, [r1, #40]	; 0x28
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004356:	3b01      	subs	r3, #1
 8004358:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004360:	3b01      	subs	r3, #1
 8004362:	025b      	lsls	r3, r3, #9
 8004364:	b29b      	uxth	r3, r3
 8004366:	431a      	orrs	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436c:	3b01      	subs	r3, #1
 800436e:	041b      	lsls	r3, r3, #16
 8004370:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004374:	431a      	orrs	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800437a:	3b01      	subs	r3, #1
 800437c:	061b      	lsls	r3, r3, #24
 800437e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004382:	4938      	ldr	r1, [pc, #224]	; (8004464 <HAL_RCC_OscConfig+0x6c4>)
 8004384:	4313      	orrs	r3, r2
 8004386:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004388:	4b36      	ldr	r3, [pc, #216]	; (8004464 <HAL_RCC_OscConfig+0x6c4>)
 800438a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438c:	4a35      	ldr	r2, [pc, #212]	; (8004464 <HAL_RCC_OscConfig+0x6c4>)
 800438e:	f023 0301 	bic.w	r3, r3, #1
 8004392:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004394:	4b33      	ldr	r3, [pc, #204]	; (8004464 <HAL_RCC_OscConfig+0x6c4>)
 8004396:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004398:	4b34      	ldr	r3, [pc, #208]	; (800446c <HAL_RCC_OscConfig+0x6cc>)
 800439a:	4013      	ands	r3, r2
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80043a0:	00d2      	lsls	r2, r2, #3
 80043a2:	4930      	ldr	r1, [pc, #192]	; (8004464 <HAL_RCC_OscConfig+0x6c4>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80043a8:	4b2e      	ldr	r3, [pc, #184]	; (8004464 <HAL_RCC_OscConfig+0x6c4>)
 80043aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ac:	f023 020c 	bic.w	r2, r3, #12
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b4:	492b      	ldr	r1, [pc, #172]	; (8004464 <HAL_RCC_OscConfig+0x6c4>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80043ba:	4b2a      	ldr	r3, [pc, #168]	; (8004464 <HAL_RCC_OscConfig+0x6c4>)
 80043bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043be:	f023 0202 	bic.w	r2, r3, #2
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c6:	4927      	ldr	r1, [pc, #156]	; (8004464 <HAL_RCC_OscConfig+0x6c4>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80043cc:	4b25      	ldr	r3, [pc, #148]	; (8004464 <HAL_RCC_OscConfig+0x6c4>)
 80043ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d0:	4a24      	ldr	r2, [pc, #144]	; (8004464 <HAL_RCC_OscConfig+0x6c4>)
 80043d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043d8:	4b22      	ldr	r3, [pc, #136]	; (8004464 <HAL_RCC_OscConfig+0x6c4>)
 80043da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043dc:	4a21      	ldr	r2, [pc, #132]	; (8004464 <HAL_RCC_OscConfig+0x6c4>)
 80043de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80043e4:	4b1f      	ldr	r3, [pc, #124]	; (8004464 <HAL_RCC_OscConfig+0x6c4>)
 80043e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e8:	4a1e      	ldr	r2, [pc, #120]	; (8004464 <HAL_RCC_OscConfig+0x6c4>)
 80043ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80043f0:	4b1c      	ldr	r3, [pc, #112]	; (8004464 <HAL_RCC_OscConfig+0x6c4>)
 80043f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f4:	4a1b      	ldr	r2, [pc, #108]	; (8004464 <HAL_RCC_OscConfig+0x6c4>)
 80043f6:	f043 0301 	orr.w	r3, r3, #1
 80043fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043fc:	4b19      	ldr	r3, [pc, #100]	; (8004464 <HAL_RCC_OscConfig+0x6c4>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a18      	ldr	r2, [pc, #96]	; (8004464 <HAL_RCC_OscConfig+0x6c4>)
 8004402:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004406:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004408:	f7fe fb9a 	bl	8002b40 <HAL_GetTick>
 800440c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800440e:	e008      	b.n	8004422 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004410:	f7fe fb96 	bl	8002b40 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b02      	cmp	r3, #2
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e090      	b.n	8004544 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004422:	4b10      	ldr	r3, [pc, #64]	; (8004464 <HAL_RCC_OscConfig+0x6c4>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d0f0      	beq.n	8004410 <HAL_RCC_OscConfig+0x670>
 800442e:	e088      	b.n	8004542 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004430:	4b0c      	ldr	r3, [pc, #48]	; (8004464 <HAL_RCC_OscConfig+0x6c4>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a0b      	ldr	r2, [pc, #44]	; (8004464 <HAL_RCC_OscConfig+0x6c4>)
 8004436:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800443a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800443c:	f7fe fb80 	bl	8002b40 <HAL_GetTick>
 8004440:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004442:	e008      	b.n	8004456 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004444:	f7fe fb7c 	bl	8002b40 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b02      	cmp	r3, #2
 8004450:	d901      	bls.n	8004456 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e076      	b.n	8004544 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004456:	4b03      	ldr	r3, [pc, #12]	; (8004464 <HAL_RCC_OscConfig+0x6c4>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1f0      	bne.n	8004444 <HAL_RCC_OscConfig+0x6a4>
 8004462:	e06e      	b.n	8004542 <HAL_RCC_OscConfig+0x7a2>
 8004464:	58024400 	.word	0x58024400
 8004468:	fffffc0c 	.word	0xfffffc0c
 800446c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004470:	4b36      	ldr	r3, [pc, #216]	; (800454c <HAL_RCC_OscConfig+0x7ac>)
 8004472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004474:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004476:	4b35      	ldr	r3, [pc, #212]	; (800454c <HAL_RCC_OscConfig+0x7ac>)
 8004478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004480:	2b01      	cmp	r3, #1
 8004482:	d031      	beq.n	80044e8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	f003 0203 	and.w	r2, r3, #3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800448e:	429a      	cmp	r2, r3
 8004490:	d12a      	bne.n	80044e8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	091b      	lsrs	r3, r3, #4
 8004496:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800449e:	429a      	cmp	r2, r3
 80044a0:	d122      	bne.n	80044e8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ac:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d11a      	bne.n	80044e8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	0a5b      	lsrs	r3, r3, #9
 80044b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044be:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d111      	bne.n	80044e8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	0c1b      	lsrs	r3, r3, #16
 80044c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d108      	bne.n	80044e8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	0e1b      	lsrs	r3, r3, #24
 80044da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d001      	beq.n	80044ec <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e02b      	b.n	8004544 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80044ec:	4b17      	ldr	r3, [pc, #92]	; (800454c <HAL_RCC_OscConfig+0x7ac>)
 80044ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044f0:	08db      	lsrs	r3, r3, #3
 80044f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80044f6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	429a      	cmp	r2, r3
 8004500:	d01f      	beq.n	8004542 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004502:	4b12      	ldr	r3, [pc, #72]	; (800454c <HAL_RCC_OscConfig+0x7ac>)
 8004504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004506:	4a11      	ldr	r2, [pc, #68]	; (800454c <HAL_RCC_OscConfig+0x7ac>)
 8004508:	f023 0301 	bic.w	r3, r3, #1
 800450c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800450e:	f7fe fb17 	bl	8002b40 <HAL_GetTick>
 8004512:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004514:	bf00      	nop
 8004516:	f7fe fb13 	bl	8002b40 <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451e:	4293      	cmp	r3, r2
 8004520:	d0f9      	beq.n	8004516 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004522:	4b0a      	ldr	r3, [pc, #40]	; (800454c <HAL_RCC_OscConfig+0x7ac>)
 8004524:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004526:	4b0a      	ldr	r3, [pc, #40]	; (8004550 <HAL_RCC_OscConfig+0x7b0>)
 8004528:	4013      	ands	r3, r2
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800452e:	00d2      	lsls	r2, r2, #3
 8004530:	4906      	ldr	r1, [pc, #24]	; (800454c <HAL_RCC_OscConfig+0x7ac>)
 8004532:	4313      	orrs	r3, r2
 8004534:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004536:	4b05      	ldr	r3, [pc, #20]	; (800454c <HAL_RCC_OscConfig+0x7ac>)
 8004538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453a:	4a04      	ldr	r2, [pc, #16]	; (800454c <HAL_RCC_OscConfig+0x7ac>)
 800453c:	f043 0301 	orr.w	r3, r3, #1
 8004540:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	3730      	adds	r7, #48	; 0x30
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	58024400 	.word	0x58024400
 8004550:	ffff0007 	.word	0xffff0007

08004554 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b086      	sub	sp, #24
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d101      	bne.n	8004568 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e19c      	b.n	80048a2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004568:	4b8a      	ldr	r3, [pc, #552]	; (8004794 <HAL_RCC_ClockConfig+0x240>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 030f 	and.w	r3, r3, #15
 8004570:	683a      	ldr	r2, [r7, #0]
 8004572:	429a      	cmp	r2, r3
 8004574:	d910      	bls.n	8004598 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004576:	4b87      	ldr	r3, [pc, #540]	; (8004794 <HAL_RCC_ClockConfig+0x240>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f023 020f 	bic.w	r2, r3, #15
 800457e:	4985      	ldr	r1, [pc, #532]	; (8004794 <HAL_RCC_ClockConfig+0x240>)
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	4313      	orrs	r3, r2
 8004584:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004586:	4b83      	ldr	r3, [pc, #524]	; (8004794 <HAL_RCC_ClockConfig+0x240>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 030f 	and.w	r3, r3, #15
 800458e:	683a      	ldr	r2, [r7, #0]
 8004590:	429a      	cmp	r2, r3
 8004592:	d001      	beq.n	8004598 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e184      	b.n	80048a2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0304 	and.w	r3, r3, #4
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d010      	beq.n	80045c6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	691a      	ldr	r2, [r3, #16]
 80045a8:	4b7b      	ldr	r3, [pc, #492]	; (8004798 <HAL_RCC_ClockConfig+0x244>)
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d908      	bls.n	80045c6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80045b4:	4b78      	ldr	r3, [pc, #480]	; (8004798 <HAL_RCC_ClockConfig+0x244>)
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	4975      	ldr	r1, [pc, #468]	; (8004798 <HAL_RCC_ClockConfig+0x244>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0308 	and.w	r3, r3, #8
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d010      	beq.n	80045f4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	695a      	ldr	r2, [r3, #20]
 80045d6:	4b70      	ldr	r3, [pc, #448]	; (8004798 <HAL_RCC_ClockConfig+0x244>)
 80045d8:	69db      	ldr	r3, [r3, #28]
 80045da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80045de:	429a      	cmp	r2, r3
 80045e0:	d908      	bls.n	80045f4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80045e2:	4b6d      	ldr	r3, [pc, #436]	; (8004798 <HAL_RCC_ClockConfig+0x244>)
 80045e4:	69db      	ldr	r3, [r3, #28]
 80045e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	496a      	ldr	r1, [pc, #424]	; (8004798 <HAL_RCC_ClockConfig+0x244>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0310 	and.w	r3, r3, #16
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d010      	beq.n	8004622 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	699a      	ldr	r2, [r3, #24]
 8004604:	4b64      	ldr	r3, [pc, #400]	; (8004798 <HAL_RCC_ClockConfig+0x244>)
 8004606:	69db      	ldr	r3, [r3, #28]
 8004608:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800460c:	429a      	cmp	r2, r3
 800460e:	d908      	bls.n	8004622 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004610:	4b61      	ldr	r3, [pc, #388]	; (8004798 <HAL_RCC_ClockConfig+0x244>)
 8004612:	69db      	ldr	r3, [r3, #28]
 8004614:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	699b      	ldr	r3, [r3, #24]
 800461c:	495e      	ldr	r1, [pc, #376]	; (8004798 <HAL_RCC_ClockConfig+0x244>)
 800461e:	4313      	orrs	r3, r2
 8004620:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0320 	and.w	r3, r3, #32
 800462a:	2b00      	cmp	r3, #0
 800462c:	d010      	beq.n	8004650 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	69da      	ldr	r2, [r3, #28]
 8004632:	4b59      	ldr	r3, [pc, #356]	; (8004798 <HAL_RCC_ClockConfig+0x244>)
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800463a:	429a      	cmp	r2, r3
 800463c:	d908      	bls.n	8004650 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800463e:	4b56      	ldr	r3, [pc, #344]	; (8004798 <HAL_RCC_ClockConfig+0x244>)
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	69db      	ldr	r3, [r3, #28]
 800464a:	4953      	ldr	r1, [pc, #332]	; (8004798 <HAL_RCC_ClockConfig+0x244>)
 800464c:	4313      	orrs	r3, r2
 800464e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0302 	and.w	r3, r3, #2
 8004658:	2b00      	cmp	r3, #0
 800465a:	d010      	beq.n	800467e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	68da      	ldr	r2, [r3, #12]
 8004660:	4b4d      	ldr	r3, [pc, #308]	; (8004798 <HAL_RCC_ClockConfig+0x244>)
 8004662:	699b      	ldr	r3, [r3, #24]
 8004664:	f003 030f 	and.w	r3, r3, #15
 8004668:	429a      	cmp	r2, r3
 800466a:	d908      	bls.n	800467e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800466c:	4b4a      	ldr	r3, [pc, #296]	; (8004798 <HAL_RCC_ClockConfig+0x244>)
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	f023 020f 	bic.w	r2, r3, #15
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	4947      	ldr	r1, [pc, #284]	; (8004798 <HAL_RCC_ClockConfig+0x244>)
 800467a:	4313      	orrs	r3, r2
 800467c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b00      	cmp	r3, #0
 8004688:	d055      	beq.n	8004736 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800468a:	4b43      	ldr	r3, [pc, #268]	; (8004798 <HAL_RCC_ClockConfig+0x244>)
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	4940      	ldr	r1, [pc, #256]	; (8004798 <HAL_RCC_ClockConfig+0x244>)
 8004698:	4313      	orrs	r3, r2
 800469a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d107      	bne.n	80046b4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80046a4:	4b3c      	ldr	r3, [pc, #240]	; (8004798 <HAL_RCC_ClockConfig+0x244>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d121      	bne.n	80046f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e0f6      	b.n	80048a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	2b03      	cmp	r3, #3
 80046ba:	d107      	bne.n	80046cc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80046bc:	4b36      	ldr	r3, [pc, #216]	; (8004798 <HAL_RCC_ClockConfig+0x244>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d115      	bne.n	80046f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e0ea      	b.n	80048a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d107      	bne.n	80046e4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80046d4:	4b30      	ldr	r3, [pc, #192]	; (8004798 <HAL_RCC_ClockConfig+0x244>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d109      	bne.n	80046f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e0de      	b.n	80048a2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046e4:	4b2c      	ldr	r3, [pc, #176]	; (8004798 <HAL_RCC_ClockConfig+0x244>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0304 	and.w	r3, r3, #4
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d101      	bne.n	80046f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e0d6      	b.n	80048a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80046f4:	4b28      	ldr	r3, [pc, #160]	; (8004798 <HAL_RCC_ClockConfig+0x244>)
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	f023 0207 	bic.w	r2, r3, #7
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	4925      	ldr	r1, [pc, #148]	; (8004798 <HAL_RCC_ClockConfig+0x244>)
 8004702:	4313      	orrs	r3, r2
 8004704:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004706:	f7fe fa1b 	bl	8002b40 <HAL_GetTick>
 800470a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800470c:	e00a      	b.n	8004724 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800470e:	f7fe fa17 	bl	8002b40 <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	f241 3288 	movw	r2, #5000	; 0x1388
 800471c:	4293      	cmp	r3, r2
 800471e:	d901      	bls.n	8004724 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e0be      	b.n	80048a2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004724:	4b1c      	ldr	r3, [pc, #112]	; (8004798 <HAL_RCC_ClockConfig+0x244>)
 8004726:	691b      	ldr	r3, [r3, #16]
 8004728:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	00db      	lsls	r3, r3, #3
 8004732:	429a      	cmp	r2, r3
 8004734:	d1eb      	bne.n	800470e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d010      	beq.n	8004764 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	68da      	ldr	r2, [r3, #12]
 8004746:	4b14      	ldr	r3, [pc, #80]	; (8004798 <HAL_RCC_ClockConfig+0x244>)
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	f003 030f 	and.w	r3, r3, #15
 800474e:	429a      	cmp	r2, r3
 8004750:	d208      	bcs.n	8004764 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004752:	4b11      	ldr	r3, [pc, #68]	; (8004798 <HAL_RCC_ClockConfig+0x244>)
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	f023 020f 	bic.w	r2, r3, #15
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	490e      	ldr	r1, [pc, #56]	; (8004798 <HAL_RCC_ClockConfig+0x244>)
 8004760:	4313      	orrs	r3, r2
 8004762:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004764:	4b0b      	ldr	r3, [pc, #44]	; (8004794 <HAL_RCC_ClockConfig+0x240>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 030f 	and.w	r3, r3, #15
 800476c:	683a      	ldr	r2, [r7, #0]
 800476e:	429a      	cmp	r2, r3
 8004770:	d214      	bcs.n	800479c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004772:	4b08      	ldr	r3, [pc, #32]	; (8004794 <HAL_RCC_ClockConfig+0x240>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f023 020f 	bic.w	r2, r3, #15
 800477a:	4906      	ldr	r1, [pc, #24]	; (8004794 <HAL_RCC_ClockConfig+0x240>)
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	4313      	orrs	r3, r2
 8004780:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004782:	4b04      	ldr	r3, [pc, #16]	; (8004794 <HAL_RCC_ClockConfig+0x240>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 030f 	and.w	r3, r3, #15
 800478a:	683a      	ldr	r2, [r7, #0]
 800478c:	429a      	cmp	r2, r3
 800478e:	d005      	beq.n	800479c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e086      	b.n	80048a2 <HAL_RCC_ClockConfig+0x34e>
 8004794:	52002000 	.word	0x52002000
 8004798:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0304 	and.w	r3, r3, #4
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d010      	beq.n	80047ca <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	691a      	ldr	r2, [r3, #16]
 80047ac:	4b3f      	ldr	r3, [pc, #252]	; (80048ac <HAL_RCC_ClockConfig+0x358>)
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d208      	bcs.n	80047ca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80047b8:	4b3c      	ldr	r3, [pc, #240]	; (80048ac <HAL_RCC_ClockConfig+0x358>)
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	4939      	ldr	r1, [pc, #228]	; (80048ac <HAL_RCC_ClockConfig+0x358>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0308 	and.w	r3, r3, #8
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d010      	beq.n	80047f8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	695a      	ldr	r2, [r3, #20]
 80047da:	4b34      	ldr	r3, [pc, #208]	; (80048ac <HAL_RCC_ClockConfig+0x358>)
 80047dc:	69db      	ldr	r3, [r3, #28]
 80047de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d208      	bcs.n	80047f8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80047e6:	4b31      	ldr	r3, [pc, #196]	; (80048ac <HAL_RCC_ClockConfig+0x358>)
 80047e8:	69db      	ldr	r3, [r3, #28]
 80047ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	695b      	ldr	r3, [r3, #20]
 80047f2:	492e      	ldr	r1, [pc, #184]	; (80048ac <HAL_RCC_ClockConfig+0x358>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0310 	and.w	r3, r3, #16
 8004800:	2b00      	cmp	r3, #0
 8004802:	d010      	beq.n	8004826 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	699a      	ldr	r2, [r3, #24]
 8004808:	4b28      	ldr	r3, [pc, #160]	; (80048ac <HAL_RCC_ClockConfig+0x358>)
 800480a:	69db      	ldr	r3, [r3, #28]
 800480c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004810:	429a      	cmp	r2, r3
 8004812:	d208      	bcs.n	8004826 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004814:	4b25      	ldr	r3, [pc, #148]	; (80048ac <HAL_RCC_ClockConfig+0x358>)
 8004816:	69db      	ldr	r3, [r3, #28]
 8004818:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	4922      	ldr	r1, [pc, #136]	; (80048ac <HAL_RCC_ClockConfig+0x358>)
 8004822:	4313      	orrs	r3, r2
 8004824:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0320 	and.w	r3, r3, #32
 800482e:	2b00      	cmp	r3, #0
 8004830:	d010      	beq.n	8004854 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	69da      	ldr	r2, [r3, #28]
 8004836:	4b1d      	ldr	r3, [pc, #116]	; (80048ac <HAL_RCC_ClockConfig+0x358>)
 8004838:	6a1b      	ldr	r3, [r3, #32]
 800483a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800483e:	429a      	cmp	r2, r3
 8004840:	d208      	bcs.n	8004854 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004842:	4b1a      	ldr	r3, [pc, #104]	; (80048ac <HAL_RCC_ClockConfig+0x358>)
 8004844:	6a1b      	ldr	r3, [r3, #32]
 8004846:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	4917      	ldr	r1, [pc, #92]	; (80048ac <HAL_RCC_ClockConfig+0x358>)
 8004850:	4313      	orrs	r3, r2
 8004852:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004854:	f000 f834 	bl	80048c0 <HAL_RCC_GetSysClockFreq>
 8004858:	4602      	mov	r2, r0
 800485a:	4b14      	ldr	r3, [pc, #80]	; (80048ac <HAL_RCC_ClockConfig+0x358>)
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	0a1b      	lsrs	r3, r3, #8
 8004860:	f003 030f 	and.w	r3, r3, #15
 8004864:	4912      	ldr	r1, [pc, #72]	; (80048b0 <HAL_RCC_ClockConfig+0x35c>)
 8004866:	5ccb      	ldrb	r3, [r1, r3]
 8004868:	f003 031f 	and.w	r3, r3, #31
 800486c:	fa22 f303 	lsr.w	r3, r2, r3
 8004870:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004872:	4b0e      	ldr	r3, [pc, #56]	; (80048ac <HAL_RCC_ClockConfig+0x358>)
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	f003 030f 	and.w	r3, r3, #15
 800487a:	4a0d      	ldr	r2, [pc, #52]	; (80048b0 <HAL_RCC_ClockConfig+0x35c>)
 800487c:	5cd3      	ldrb	r3, [r2, r3]
 800487e:	f003 031f 	and.w	r3, r3, #31
 8004882:	693a      	ldr	r2, [r7, #16]
 8004884:	fa22 f303 	lsr.w	r3, r2, r3
 8004888:	4a0a      	ldr	r2, [pc, #40]	; (80048b4 <HAL_RCC_ClockConfig+0x360>)
 800488a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800488c:	4a0a      	ldr	r2, [pc, #40]	; (80048b8 <HAL_RCC_ClockConfig+0x364>)
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004892:	4b0a      	ldr	r3, [pc, #40]	; (80048bc <HAL_RCC_ClockConfig+0x368>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4618      	mov	r0, r3
 8004898:	f7fe f908 	bl	8002aac <HAL_InitTick>
 800489c:	4603      	mov	r3, r0
 800489e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80048a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3718      	adds	r7, #24
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	58024400 	.word	0x58024400
 80048b0:	08009fbc 	.word	0x08009fbc
 80048b4:	24000004 	.word	0x24000004
 80048b8:	24000000 	.word	0x24000000
 80048bc:	24000008 	.word	0x24000008

080048c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b089      	sub	sp, #36	; 0x24
 80048c4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048c6:	4bb3      	ldr	r3, [pc, #716]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048ce:	2b18      	cmp	r3, #24
 80048d0:	f200 8155 	bhi.w	8004b7e <HAL_RCC_GetSysClockFreq+0x2be>
 80048d4:	a201      	add	r2, pc, #4	; (adr r2, 80048dc <HAL_RCC_GetSysClockFreq+0x1c>)
 80048d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048da:	bf00      	nop
 80048dc:	08004941 	.word	0x08004941
 80048e0:	08004b7f 	.word	0x08004b7f
 80048e4:	08004b7f 	.word	0x08004b7f
 80048e8:	08004b7f 	.word	0x08004b7f
 80048ec:	08004b7f 	.word	0x08004b7f
 80048f0:	08004b7f 	.word	0x08004b7f
 80048f4:	08004b7f 	.word	0x08004b7f
 80048f8:	08004b7f 	.word	0x08004b7f
 80048fc:	08004967 	.word	0x08004967
 8004900:	08004b7f 	.word	0x08004b7f
 8004904:	08004b7f 	.word	0x08004b7f
 8004908:	08004b7f 	.word	0x08004b7f
 800490c:	08004b7f 	.word	0x08004b7f
 8004910:	08004b7f 	.word	0x08004b7f
 8004914:	08004b7f 	.word	0x08004b7f
 8004918:	08004b7f 	.word	0x08004b7f
 800491c:	0800496d 	.word	0x0800496d
 8004920:	08004b7f 	.word	0x08004b7f
 8004924:	08004b7f 	.word	0x08004b7f
 8004928:	08004b7f 	.word	0x08004b7f
 800492c:	08004b7f 	.word	0x08004b7f
 8004930:	08004b7f 	.word	0x08004b7f
 8004934:	08004b7f 	.word	0x08004b7f
 8004938:	08004b7f 	.word	0x08004b7f
 800493c:	08004973 	.word	0x08004973
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004940:	4b94      	ldr	r3, [pc, #592]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0320 	and.w	r3, r3, #32
 8004948:	2b00      	cmp	r3, #0
 800494a:	d009      	beq.n	8004960 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800494c:	4b91      	ldr	r3, [pc, #580]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	08db      	lsrs	r3, r3, #3
 8004952:	f003 0303 	and.w	r3, r3, #3
 8004956:	4a90      	ldr	r2, [pc, #576]	; (8004b98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004958:	fa22 f303 	lsr.w	r3, r2, r3
 800495c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800495e:	e111      	b.n	8004b84 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004960:	4b8d      	ldr	r3, [pc, #564]	; (8004b98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004962:	61bb      	str	r3, [r7, #24]
      break;
 8004964:	e10e      	b.n	8004b84 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004966:	4b8d      	ldr	r3, [pc, #564]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004968:	61bb      	str	r3, [r7, #24]
      break;
 800496a:	e10b      	b.n	8004b84 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800496c:	4b8c      	ldr	r3, [pc, #560]	; (8004ba0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800496e:	61bb      	str	r3, [r7, #24]
      break;
 8004970:	e108      	b.n	8004b84 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004972:	4b88      	ldr	r3, [pc, #544]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004976:	f003 0303 	and.w	r3, r3, #3
 800497a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800497c:	4b85      	ldr	r3, [pc, #532]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800497e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004980:	091b      	lsrs	r3, r3, #4
 8004982:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004986:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004988:	4b82      	ldr	r3, [pc, #520]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800498a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498c:	f003 0301 	and.w	r3, r3, #1
 8004990:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004992:	4b80      	ldr	r3, [pc, #512]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004996:	08db      	lsrs	r3, r3, #3
 8004998:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	fb02 f303 	mul.w	r3, r2, r3
 80049a2:	ee07 3a90 	vmov	s15, r3
 80049a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049aa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	f000 80e1 	beq.w	8004b78 <HAL_RCC_GetSysClockFreq+0x2b8>
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	f000 8083 	beq.w	8004ac4 <HAL_RCC_GetSysClockFreq+0x204>
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	f200 80a1 	bhi.w	8004b08 <HAL_RCC_GetSysClockFreq+0x248>
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d003      	beq.n	80049d4 <HAL_RCC_GetSysClockFreq+0x114>
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d056      	beq.n	8004a80 <HAL_RCC_GetSysClockFreq+0x1c0>
 80049d2:	e099      	b.n	8004b08 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049d4:	4b6f      	ldr	r3, [pc, #444]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0320 	and.w	r3, r3, #32
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d02d      	beq.n	8004a3c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80049e0:	4b6c      	ldr	r3, [pc, #432]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	08db      	lsrs	r3, r3, #3
 80049e6:	f003 0303 	and.w	r3, r3, #3
 80049ea:	4a6b      	ldr	r2, [pc, #428]	; (8004b98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80049ec:	fa22 f303 	lsr.w	r3, r2, r3
 80049f0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	ee07 3a90 	vmov	s15, r3
 80049f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	ee07 3a90 	vmov	s15, r3
 8004a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a0a:	4b62      	ldr	r3, [pc, #392]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a12:	ee07 3a90 	vmov	s15, r3
 8004a16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a1e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004ba4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a36:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004a3a:	e087      	b.n	8004b4c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	ee07 3a90 	vmov	s15, r3
 8004a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a46:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004ba8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004a4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a4e:	4b51      	ldr	r3, [pc, #324]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a56:	ee07 3a90 	vmov	s15, r3
 8004a5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a62:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004ba4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004a7e:	e065      	b.n	8004b4c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	ee07 3a90 	vmov	s15, r3
 8004a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a8a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004bac <HAL_RCC_GetSysClockFreq+0x2ec>
 8004a8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a92:	4b40      	ldr	r3, [pc, #256]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a9a:	ee07 3a90 	vmov	s15, r3
 8004a9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aa2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004aa6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004ba4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004aaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ab2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004abe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004ac2:	e043      	b.n	8004b4c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	ee07 3a90 	vmov	s15, r3
 8004aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ace:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004bb0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004ad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ad6:	4b2f      	ldr	r3, [pc, #188]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ade:	ee07 3a90 	vmov	s15, r3
 8004ae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ae6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004aea:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004ba4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004aee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004af2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004af6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004afa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004b06:	e021      	b.n	8004b4c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	ee07 3a90 	vmov	s15, r3
 8004b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b12:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004bac <HAL_RCC_GetSysClockFreq+0x2ec>
 8004b16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b1a:	4b1e      	ldr	r3, [pc, #120]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b22:	ee07 3a90 	vmov	s15, r3
 8004b26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b2e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004ba4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004b4a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004b4c:	4b11      	ldr	r3, [pc, #68]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b50:	0a5b      	lsrs	r3, r3, #9
 8004b52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b56:	3301      	adds	r3, #1
 8004b58:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	ee07 3a90 	vmov	s15, r3
 8004b60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004b64:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b70:	ee17 3a90 	vmov	r3, s15
 8004b74:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004b76:	e005      	b.n	8004b84 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	61bb      	str	r3, [r7, #24]
      break;
 8004b7c:	e002      	b.n	8004b84 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004b7e:	4b07      	ldr	r3, [pc, #28]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004b80:	61bb      	str	r3, [r7, #24]
      break;
 8004b82:	bf00      	nop
  }

  return sysclockfreq;
 8004b84:	69bb      	ldr	r3, [r7, #24]
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3724      	adds	r7, #36	; 0x24
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	58024400 	.word	0x58024400
 8004b98:	03d09000 	.word	0x03d09000
 8004b9c:	003d0900 	.word	0x003d0900
 8004ba0:	017d7840 	.word	0x017d7840
 8004ba4:	46000000 	.word	0x46000000
 8004ba8:	4c742400 	.word	0x4c742400
 8004bac:	4a742400 	.word	0x4a742400
 8004bb0:	4bbebc20 	.word	0x4bbebc20

08004bb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004bba:	f7ff fe81 	bl	80048c0 <HAL_RCC_GetSysClockFreq>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	4b10      	ldr	r3, [pc, #64]	; (8004c04 <HAL_RCC_GetHCLKFreq+0x50>)
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	0a1b      	lsrs	r3, r3, #8
 8004bc6:	f003 030f 	and.w	r3, r3, #15
 8004bca:	490f      	ldr	r1, [pc, #60]	; (8004c08 <HAL_RCC_GetHCLKFreq+0x54>)
 8004bcc:	5ccb      	ldrb	r3, [r1, r3]
 8004bce:	f003 031f 	and.w	r3, r3, #31
 8004bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8004bd6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004bd8:	4b0a      	ldr	r3, [pc, #40]	; (8004c04 <HAL_RCC_GetHCLKFreq+0x50>)
 8004bda:	699b      	ldr	r3, [r3, #24]
 8004bdc:	f003 030f 	and.w	r3, r3, #15
 8004be0:	4a09      	ldr	r2, [pc, #36]	; (8004c08 <HAL_RCC_GetHCLKFreq+0x54>)
 8004be2:	5cd3      	ldrb	r3, [r2, r3]
 8004be4:	f003 031f 	and.w	r3, r3, #31
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	fa22 f303 	lsr.w	r3, r2, r3
 8004bee:	4a07      	ldr	r2, [pc, #28]	; (8004c0c <HAL_RCC_GetHCLKFreq+0x58>)
 8004bf0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004bf2:	4a07      	ldr	r2, [pc, #28]	; (8004c10 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004bf8:	4b04      	ldr	r3, [pc, #16]	; (8004c0c <HAL_RCC_GetHCLKFreq+0x58>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3708      	adds	r7, #8
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	58024400 	.word	0x58024400
 8004c08:	08009fbc 	.word	0x08009fbc
 8004c0c:	24000004 	.word	0x24000004
 8004c10:	24000000 	.word	0x24000000

08004c14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004c18:	f7ff ffcc 	bl	8004bb4 <HAL_RCC_GetHCLKFreq>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	4b06      	ldr	r3, [pc, #24]	; (8004c38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c20:	69db      	ldr	r3, [r3, #28]
 8004c22:	091b      	lsrs	r3, r3, #4
 8004c24:	f003 0307 	and.w	r3, r3, #7
 8004c28:	4904      	ldr	r1, [pc, #16]	; (8004c3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c2a:	5ccb      	ldrb	r3, [r1, r3]
 8004c2c:	f003 031f 	and.w	r3, r3, #31
 8004c30:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	58024400 	.word	0x58024400
 8004c3c:	08009fbc 	.word	0x08009fbc

08004c40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004c44:	f7ff ffb6 	bl	8004bb4 <HAL_RCC_GetHCLKFreq>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	4b06      	ldr	r3, [pc, #24]	; (8004c64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c4c:	69db      	ldr	r3, [r3, #28]
 8004c4e:	0a1b      	lsrs	r3, r3, #8
 8004c50:	f003 0307 	and.w	r3, r3, #7
 8004c54:	4904      	ldr	r1, [pc, #16]	; (8004c68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c56:	5ccb      	ldrb	r3, [r1, r3]
 8004c58:	f003 031f 	and.w	r3, r3, #31
 8004c5c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	58024400 	.word	0x58024400
 8004c68:	08009fbc 	.word	0x08009fbc

08004c6c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c70:	b0c6      	sub	sp, #280	; 0x118
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c78:	2300      	movs	r3, #0
 8004c7a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c7e:	2300      	movs	r3, #0
 8004c80:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c8c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8004c90:	2500      	movs	r5, #0
 8004c92:	ea54 0305 	orrs.w	r3, r4, r5
 8004c96:	d049      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004c98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c9e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ca2:	d02f      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004ca4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ca8:	d828      	bhi.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004caa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004cae:	d01a      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004cb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004cb4:	d822      	bhi.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d003      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004cba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cbe:	d007      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004cc0:	e01c      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cc2:	4bab      	ldr	r3, [pc, #684]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc6:	4aaa      	ldr	r2, [pc, #680]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004cc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ccc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004cce:	e01a      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004cd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cd4:	3308      	adds	r3, #8
 8004cd6:	2102      	movs	r1, #2
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f001 fc25 	bl	8006528 <RCCEx_PLL2_Config>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004ce4:	e00f      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cea:	3328      	adds	r3, #40	; 0x28
 8004cec:	2102      	movs	r1, #2
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f001 fccc 	bl	800668c <RCCEx_PLL3_Config>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004cfa:	e004      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004d02:	e000      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004d04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d06:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d10a      	bne.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004d0e:	4b98      	ldr	r3, [pc, #608]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004d10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d12:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004d16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d1c:	4a94      	ldr	r2, [pc, #592]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004d1e:	430b      	orrs	r3, r1
 8004d20:	6513      	str	r3, [r2, #80]	; 0x50
 8004d22:	e003      	b.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d24:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004d28:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d34:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8004d38:	f04f 0900 	mov.w	r9, #0
 8004d3c:	ea58 0309 	orrs.w	r3, r8, r9
 8004d40:	d047      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004d42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d48:	2b04      	cmp	r3, #4
 8004d4a:	d82a      	bhi.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004d4c:	a201      	add	r2, pc, #4	; (adr r2, 8004d54 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d52:	bf00      	nop
 8004d54:	08004d69 	.word	0x08004d69
 8004d58:	08004d77 	.word	0x08004d77
 8004d5c:	08004d8d 	.word	0x08004d8d
 8004d60:	08004dab 	.word	0x08004dab
 8004d64:	08004dab 	.word	0x08004dab
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d68:	4b81      	ldr	r3, [pc, #516]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6c:	4a80      	ldr	r2, [pc, #512]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004d6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004d74:	e01a      	b.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d7a:	3308      	adds	r3, #8
 8004d7c:	2100      	movs	r1, #0
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f001 fbd2 	bl	8006528 <RCCEx_PLL2_Config>
 8004d84:	4603      	mov	r3, r0
 8004d86:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004d8a:	e00f      	b.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d90:	3328      	adds	r3, #40	; 0x28
 8004d92:	2100      	movs	r1, #0
 8004d94:	4618      	mov	r0, r3
 8004d96:	f001 fc79 	bl	800668c <RCCEx_PLL3_Config>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004da0:	e004      	b.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004da8:	e000      	b.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004daa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d10a      	bne.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004db4:	4b6e      	ldr	r3, [pc, #440]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004db8:	f023 0107 	bic.w	r1, r3, #7
 8004dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dc2:	4a6b      	ldr	r2, [pc, #428]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004dc4:	430b      	orrs	r3, r1
 8004dc6:	6513      	str	r3, [r2, #80]	; 0x50
 8004dc8:	e003      	b.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004dce:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dda:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8004dde:	f04f 0b00 	mov.w	fp, #0
 8004de2:	ea5a 030b 	orrs.w	r3, sl, fp
 8004de6:	d05b      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004df0:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004df4:	d03b      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8004df6:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004dfa:	d834      	bhi.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004dfc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e00:	d037      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004e02:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e06:	d82e      	bhi.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004e08:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004e0c:	d033      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004e0e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004e12:	d828      	bhi.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004e14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e18:	d01a      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8004e1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e1e:	d822      	bhi.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d003      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8004e24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e28:	d007      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004e2a:	e01c      	b.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e2c:	4b50      	ldr	r3, [pc, #320]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e30:	4a4f      	ldr	r2, [pc, #316]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004e32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004e38:	e01e      	b.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e3e:	3308      	adds	r3, #8
 8004e40:	2100      	movs	r1, #0
 8004e42:	4618      	mov	r0, r3
 8004e44:	f001 fb70 	bl	8006528 <RCCEx_PLL2_Config>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004e4e:	e013      	b.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004e50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e54:	3328      	adds	r3, #40	; 0x28
 8004e56:	2100      	movs	r1, #0
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f001 fc17 	bl	800668c <RCCEx_PLL3_Config>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004e64:	e008      	b.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004e6c:	e004      	b.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004e6e:	bf00      	nop
 8004e70:	e002      	b.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004e72:	bf00      	nop
 8004e74:	e000      	b.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004e76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e78:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10b      	bne.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004e80:	4b3b      	ldr	r3, [pc, #236]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e84:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8004e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e8c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004e90:	4a37      	ldr	r2, [pc, #220]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004e92:	430b      	orrs	r3, r1
 8004e94:	6593      	str	r3, [r2, #88]	; 0x58
 8004e96:	e003      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e98:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004e9c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004ea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea8:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004eac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004eb6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8004eba:	460b      	mov	r3, r1
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	d05d      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004ec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ec4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004ec8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004ecc:	d03b      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004ece:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004ed2:	d834      	bhi.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004ed4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ed8:	d037      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8004eda:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ede:	d82e      	bhi.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004ee0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004ee4:	d033      	beq.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8004ee6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004eea:	d828      	bhi.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004eec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ef0:	d01a      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8004ef2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ef6:	d822      	bhi.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d003      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004efc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f00:	d007      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004f02:	e01c      	b.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f04:	4b1a      	ldr	r3, [pc, #104]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f08:	4a19      	ldr	r2, [pc, #100]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004f10:	e01e      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f16:	3308      	adds	r3, #8
 8004f18:	2100      	movs	r1, #0
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f001 fb04 	bl	8006528 <RCCEx_PLL2_Config>
 8004f20:	4603      	mov	r3, r0
 8004f22:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004f26:	e013      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f2c:	3328      	adds	r3, #40	; 0x28
 8004f2e:	2100      	movs	r1, #0
 8004f30:	4618      	mov	r0, r3
 8004f32:	f001 fbab 	bl	800668c <RCCEx_PLL3_Config>
 8004f36:	4603      	mov	r3, r0
 8004f38:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004f3c:	e008      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004f44:	e004      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004f46:	bf00      	nop
 8004f48:	e002      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004f4a:	bf00      	nop
 8004f4c:	e000      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004f4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f50:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d10d      	bne.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004f58:	4b05      	ldr	r3, [pc, #20]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f5c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f64:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004f68:	4a01      	ldr	r2, [pc, #4]	; (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f6a:	430b      	orrs	r3, r1
 8004f6c:	6593      	str	r3, [r2, #88]	; 0x58
 8004f6e:	e005      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004f70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f74:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004f78:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f84:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004f88:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004f92:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004f96:	460b      	mov	r3, r1
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	d03a      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004f9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fa2:	2b30      	cmp	r3, #48	; 0x30
 8004fa4:	d01f      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8004fa6:	2b30      	cmp	r3, #48	; 0x30
 8004fa8:	d819      	bhi.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004faa:	2b20      	cmp	r3, #32
 8004fac:	d00c      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004fae:	2b20      	cmp	r3, #32
 8004fb0:	d815      	bhi.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d019      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004fb6:	2b10      	cmp	r3, #16
 8004fb8:	d111      	bne.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fba:	4baa      	ldr	r3, [pc, #680]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fbe:	4aa9      	ldr	r2, [pc, #676]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004fc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fc4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004fc6:	e011      	b.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fcc:	3308      	adds	r3, #8
 8004fce:	2102      	movs	r1, #2
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f001 faa9 	bl	8006528 <RCCEx_PLL2_Config>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004fdc:	e006      	b.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004fe4:	e002      	b.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004fe6:	bf00      	nop
 8004fe8:	e000      	b.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004fea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d10a      	bne.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004ff4:	4b9b      	ldr	r3, [pc, #620]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004ff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ff8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004ffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005002:	4a98      	ldr	r2, [pc, #608]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005004:	430b      	orrs	r3, r1
 8005006:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005008:	e003      	b.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800500a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800500e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005012:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800501a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800501e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005022:	2300      	movs	r3, #0
 8005024:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005028:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800502c:	460b      	mov	r3, r1
 800502e:	4313      	orrs	r3, r2
 8005030:	d051      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005032:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005038:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800503c:	d035      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800503e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005042:	d82e      	bhi.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005044:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005048:	d031      	beq.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x442>
 800504a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800504e:	d828      	bhi.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005050:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005054:	d01a      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005056:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800505a:	d822      	bhi.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800505c:	2b00      	cmp	r3, #0
 800505e:	d003      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005060:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005064:	d007      	beq.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8005066:	e01c      	b.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005068:	4b7e      	ldr	r3, [pc, #504]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800506a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800506c:	4a7d      	ldr	r2, [pc, #500]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800506e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005072:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005074:	e01c      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005076:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800507a:	3308      	adds	r3, #8
 800507c:	2100      	movs	r1, #0
 800507e:	4618      	mov	r0, r3
 8005080:	f001 fa52 	bl	8006528 <RCCEx_PLL2_Config>
 8005084:	4603      	mov	r3, r0
 8005086:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800508a:	e011      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800508c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005090:	3328      	adds	r3, #40	; 0x28
 8005092:	2100      	movs	r1, #0
 8005094:	4618      	mov	r0, r3
 8005096:	f001 faf9 	bl	800668c <RCCEx_PLL3_Config>
 800509a:	4603      	mov	r3, r0
 800509c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80050a0:	e006      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80050a8:	e002      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80050aa:	bf00      	nop
 80050ac:	e000      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80050ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d10a      	bne.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80050b8:	4b6a      	ldr	r3, [pc, #424]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80050ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050bc:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80050c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050c6:	4a67      	ldr	r2, [pc, #412]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80050c8:	430b      	orrs	r3, r1
 80050ca:	6513      	str	r3, [r2, #80]	; 0x50
 80050cc:	e003      	b.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050ce:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80050d2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80050d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050de:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80050e2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80050e6:	2300      	movs	r3, #0
 80050e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80050ec:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80050f0:	460b      	mov	r3, r1
 80050f2:	4313      	orrs	r3, r2
 80050f4:	d053      	beq.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80050f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005100:	d033      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8005102:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005106:	d82c      	bhi.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005108:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800510c:	d02f      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x502>
 800510e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005112:	d826      	bhi.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005114:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005118:	d02b      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800511a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800511e:	d820      	bhi.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005120:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005124:	d012      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8005126:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800512a:	d81a      	bhi.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800512c:	2b00      	cmp	r3, #0
 800512e:	d022      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8005130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005134:	d115      	bne.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005136:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800513a:	3308      	adds	r3, #8
 800513c:	2101      	movs	r1, #1
 800513e:	4618      	mov	r0, r3
 8005140:	f001 f9f2 	bl	8006528 <RCCEx_PLL2_Config>
 8005144:	4603      	mov	r3, r0
 8005146:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800514a:	e015      	b.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800514c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005150:	3328      	adds	r3, #40	; 0x28
 8005152:	2101      	movs	r1, #1
 8005154:	4618      	mov	r0, r3
 8005156:	f001 fa99 	bl	800668c <RCCEx_PLL3_Config>
 800515a:	4603      	mov	r3, r0
 800515c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005160:	e00a      	b.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005168:	e006      	b.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800516a:	bf00      	nop
 800516c:	e004      	b.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800516e:	bf00      	nop
 8005170:	e002      	b.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005172:	bf00      	nop
 8005174:	e000      	b.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005176:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005178:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800517c:	2b00      	cmp	r3, #0
 800517e:	d10a      	bne.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005180:	4b38      	ldr	r3, [pc, #224]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005182:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005184:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005188:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800518c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800518e:	4a35      	ldr	r2, [pc, #212]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005190:	430b      	orrs	r3, r1
 8005192:	6513      	str	r3, [r2, #80]	; 0x50
 8005194:	e003      	b.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005196:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800519a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800519e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a6:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80051aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80051ae:	2300      	movs	r3, #0
 80051b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80051b4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80051b8:	460b      	mov	r3, r1
 80051ba:	4313      	orrs	r3, r2
 80051bc:	d058      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80051be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80051c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051ca:	d033      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80051cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051d0:	d82c      	bhi.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80051d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051d6:	d02f      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80051d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051dc:	d826      	bhi.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80051de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80051e2:	d02b      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80051e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80051e8:	d820      	bhi.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80051ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051ee:	d012      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80051f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051f4:	d81a      	bhi.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d022      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80051fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051fe:	d115      	bne.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005200:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005204:	3308      	adds	r3, #8
 8005206:	2101      	movs	r1, #1
 8005208:	4618      	mov	r0, r3
 800520a:	f001 f98d 	bl	8006528 <RCCEx_PLL2_Config>
 800520e:	4603      	mov	r3, r0
 8005210:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005214:	e015      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005216:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800521a:	3328      	adds	r3, #40	; 0x28
 800521c:	2101      	movs	r1, #1
 800521e:	4618      	mov	r0, r3
 8005220:	f001 fa34 	bl	800668c <RCCEx_PLL3_Config>
 8005224:	4603      	mov	r3, r0
 8005226:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800522a:	e00a      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005232:	e006      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005234:	bf00      	nop
 8005236:	e004      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005238:	bf00      	nop
 800523a:	e002      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800523c:	bf00      	nop
 800523e:	e000      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005240:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005242:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005246:	2b00      	cmp	r3, #0
 8005248:	d10e      	bne.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800524a:	4b06      	ldr	r3, [pc, #24]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800524c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800524e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005252:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005256:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800525a:	4a02      	ldr	r2, [pc, #8]	; (8005264 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800525c:	430b      	orrs	r3, r1
 800525e:	6593      	str	r3, [r2, #88]	; 0x58
 8005260:	e006      	b.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8005262:	bf00      	nop
 8005264:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005268:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800526c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005270:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005278:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800527c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005280:	2300      	movs	r3, #0
 8005282:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005286:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800528a:	460b      	mov	r3, r1
 800528c:	4313      	orrs	r3, r2
 800528e:	d037      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005290:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005294:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005296:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800529a:	d00e      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800529c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052a0:	d816      	bhi.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d018      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80052a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052aa:	d111      	bne.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052ac:	4bc4      	ldr	r3, [pc, #784]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80052ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b0:	4ac3      	ldr	r2, [pc, #780]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80052b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80052b8:	e00f      	b.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80052ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052be:	3308      	adds	r3, #8
 80052c0:	2101      	movs	r1, #1
 80052c2:	4618      	mov	r0, r3
 80052c4:	f001 f930 	bl	8006528 <RCCEx_PLL2_Config>
 80052c8:	4603      	mov	r3, r0
 80052ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80052ce:	e004      	b.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80052d6:	e000      	b.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80052d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052da:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d10a      	bne.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80052e2:	4bb7      	ldr	r3, [pc, #732]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80052e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052e6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80052ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052f0:	4ab3      	ldr	r2, [pc, #716]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80052f2:	430b      	orrs	r3, r1
 80052f4:	6513      	str	r3, [r2, #80]	; 0x50
 80052f6:	e003      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80052fc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005300:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005308:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800530c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005310:	2300      	movs	r3, #0
 8005312:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005316:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800531a:	460b      	mov	r3, r1
 800531c:	4313      	orrs	r3, r2
 800531e:	d039      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005320:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005324:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005326:	2b03      	cmp	r3, #3
 8005328:	d81c      	bhi.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800532a:	a201      	add	r2, pc, #4	; (adr r2, 8005330 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800532c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005330:	0800536d 	.word	0x0800536d
 8005334:	08005341 	.word	0x08005341
 8005338:	0800534f 	.word	0x0800534f
 800533c:	0800536d 	.word	0x0800536d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005340:	4b9f      	ldr	r3, [pc, #636]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005344:	4a9e      	ldr	r2, [pc, #632]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005346:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800534a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800534c:	e00f      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800534e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005352:	3308      	adds	r3, #8
 8005354:	2102      	movs	r1, #2
 8005356:	4618      	mov	r0, r3
 8005358:	f001 f8e6 	bl	8006528 <RCCEx_PLL2_Config>
 800535c:	4603      	mov	r3, r0
 800535e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005362:	e004      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800536a:	e000      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800536c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800536e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005372:	2b00      	cmp	r3, #0
 8005374:	d10a      	bne.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005376:	4b92      	ldr	r3, [pc, #584]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800537a:	f023 0103 	bic.w	r1, r3, #3
 800537e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005382:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005384:	4a8e      	ldr	r2, [pc, #568]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005386:	430b      	orrs	r3, r1
 8005388:	64d3      	str	r3, [r2, #76]	; 0x4c
 800538a:	e003      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800538c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005390:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005394:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800539c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80053a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053a4:	2300      	movs	r3, #0
 80053a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80053aa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80053ae:	460b      	mov	r3, r1
 80053b0:	4313      	orrs	r3, r2
 80053b2:	f000 8099 	beq.w	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053b6:	4b83      	ldr	r3, [pc, #524]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a82      	ldr	r2, [pc, #520]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80053bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053c0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80053c2:	f7fd fbbd 	bl	8002b40 <HAL_GetTick>
 80053c6:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053ca:	e00b      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053cc:	f7fd fbb8 	bl	8002b40 <HAL_GetTick>
 80053d0:	4602      	mov	r2, r0
 80053d2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	2b64      	cmp	r3, #100	; 0x64
 80053da:	d903      	bls.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80053dc:	2303      	movs	r3, #3
 80053de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80053e2:	e005      	b.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053e4:	4b77      	ldr	r3, [pc, #476]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d0ed      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80053f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d173      	bne.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80053f8:	4b71      	ldr	r3, [pc, #452]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80053fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80053fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005400:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005404:	4053      	eors	r3, r2
 8005406:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800540a:	2b00      	cmp	r3, #0
 800540c:	d015      	beq.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800540e:	4b6c      	ldr	r3, [pc, #432]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005412:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005416:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800541a:	4b69      	ldr	r3, [pc, #420]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800541c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800541e:	4a68      	ldr	r2, [pc, #416]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005424:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005426:	4b66      	ldr	r3, [pc, #408]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800542a:	4a65      	ldr	r2, [pc, #404]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800542c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005430:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005432:	4a63      	ldr	r2, [pc, #396]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005434:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005438:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800543a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800543e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005442:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005446:	d118      	bne.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005448:	f7fd fb7a 	bl	8002b40 <HAL_GetTick>
 800544c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005450:	e00d      	b.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005452:	f7fd fb75 	bl	8002b40 <HAL_GetTick>
 8005456:	4602      	mov	r2, r0
 8005458:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800545c:	1ad2      	subs	r2, r2, r3
 800545e:	f241 3388 	movw	r3, #5000	; 0x1388
 8005462:	429a      	cmp	r2, r3
 8005464:	d903      	bls.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800546c:	e005      	b.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800546e:	4b54      	ldr	r3, [pc, #336]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005472:	f003 0302 	and.w	r3, r3, #2
 8005476:	2b00      	cmp	r3, #0
 8005478:	d0eb      	beq.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800547a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800547e:	2b00      	cmp	r3, #0
 8005480:	d129      	bne.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005482:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005486:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800548a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800548e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005492:	d10e      	bne.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005494:	4b4a      	ldr	r3, [pc, #296]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800549c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80054a4:	091a      	lsrs	r2, r3, #4
 80054a6:	4b48      	ldr	r3, [pc, #288]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80054a8:	4013      	ands	r3, r2
 80054aa:	4a45      	ldr	r2, [pc, #276]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80054ac:	430b      	orrs	r3, r1
 80054ae:	6113      	str	r3, [r2, #16]
 80054b0:	e005      	b.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x852>
 80054b2:	4b43      	ldr	r3, [pc, #268]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	4a42      	ldr	r2, [pc, #264]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80054b8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80054bc:	6113      	str	r3, [r2, #16]
 80054be:	4b40      	ldr	r3, [pc, #256]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80054c0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80054c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80054ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054ce:	4a3c      	ldr	r2, [pc, #240]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80054d0:	430b      	orrs	r3, r1
 80054d2:	6713      	str	r3, [r2, #112]	; 0x70
 80054d4:	e008      	b.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80054d6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80054da:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 80054de:	e003      	b.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80054e4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80054e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f0:	f002 0301 	and.w	r3, r2, #1
 80054f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80054f8:	2300      	movs	r3, #0
 80054fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80054fe:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005502:	460b      	mov	r3, r1
 8005504:	4313      	orrs	r3, r2
 8005506:	f000 808f 	beq.w	8005628 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800550a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800550e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005510:	2b28      	cmp	r3, #40	; 0x28
 8005512:	d871      	bhi.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8005514:	a201      	add	r2, pc, #4	; (adr r2, 800551c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8005516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800551a:	bf00      	nop
 800551c:	08005601 	.word	0x08005601
 8005520:	080055f9 	.word	0x080055f9
 8005524:	080055f9 	.word	0x080055f9
 8005528:	080055f9 	.word	0x080055f9
 800552c:	080055f9 	.word	0x080055f9
 8005530:	080055f9 	.word	0x080055f9
 8005534:	080055f9 	.word	0x080055f9
 8005538:	080055f9 	.word	0x080055f9
 800553c:	080055cd 	.word	0x080055cd
 8005540:	080055f9 	.word	0x080055f9
 8005544:	080055f9 	.word	0x080055f9
 8005548:	080055f9 	.word	0x080055f9
 800554c:	080055f9 	.word	0x080055f9
 8005550:	080055f9 	.word	0x080055f9
 8005554:	080055f9 	.word	0x080055f9
 8005558:	080055f9 	.word	0x080055f9
 800555c:	080055e3 	.word	0x080055e3
 8005560:	080055f9 	.word	0x080055f9
 8005564:	080055f9 	.word	0x080055f9
 8005568:	080055f9 	.word	0x080055f9
 800556c:	080055f9 	.word	0x080055f9
 8005570:	080055f9 	.word	0x080055f9
 8005574:	080055f9 	.word	0x080055f9
 8005578:	080055f9 	.word	0x080055f9
 800557c:	08005601 	.word	0x08005601
 8005580:	080055f9 	.word	0x080055f9
 8005584:	080055f9 	.word	0x080055f9
 8005588:	080055f9 	.word	0x080055f9
 800558c:	080055f9 	.word	0x080055f9
 8005590:	080055f9 	.word	0x080055f9
 8005594:	080055f9 	.word	0x080055f9
 8005598:	080055f9 	.word	0x080055f9
 800559c:	08005601 	.word	0x08005601
 80055a0:	080055f9 	.word	0x080055f9
 80055a4:	080055f9 	.word	0x080055f9
 80055a8:	080055f9 	.word	0x080055f9
 80055ac:	080055f9 	.word	0x080055f9
 80055b0:	080055f9 	.word	0x080055f9
 80055b4:	080055f9 	.word	0x080055f9
 80055b8:	080055f9 	.word	0x080055f9
 80055bc:	08005601 	.word	0x08005601
 80055c0:	58024400 	.word	0x58024400
 80055c4:	58024800 	.word	0x58024800
 80055c8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80055cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055d0:	3308      	adds	r3, #8
 80055d2:	2101      	movs	r1, #1
 80055d4:	4618      	mov	r0, r3
 80055d6:	f000 ffa7 	bl	8006528 <RCCEx_PLL2_Config>
 80055da:	4603      	mov	r3, r0
 80055dc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80055e0:	e00f      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80055e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055e6:	3328      	adds	r3, #40	; 0x28
 80055e8:	2101      	movs	r1, #1
 80055ea:	4618      	mov	r0, r3
 80055ec:	f001 f84e 	bl	800668c <RCCEx_PLL3_Config>
 80055f0:	4603      	mov	r3, r0
 80055f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80055f6:	e004      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80055fe:	e000      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005600:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005602:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005606:	2b00      	cmp	r3, #0
 8005608:	d10a      	bne.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800560a:	4bbf      	ldr	r3, [pc, #764]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800560c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800560e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005612:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005616:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005618:	4abb      	ldr	r2, [pc, #748]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800561a:	430b      	orrs	r3, r1
 800561c:	6553      	str	r3, [r2, #84]	; 0x54
 800561e:	e003      	b.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005620:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005624:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005628:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800562c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005630:	f002 0302 	and.w	r3, r2, #2
 8005634:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005638:	2300      	movs	r3, #0
 800563a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800563e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005642:	460b      	mov	r3, r1
 8005644:	4313      	orrs	r3, r2
 8005646:	d041      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005648:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800564c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800564e:	2b05      	cmp	r3, #5
 8005650:	d824      	bhi.n	800569c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8005652:	a201      	add	r2, pc, #4	; (adr r2, 8005658 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8005654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005658:	080056a5 	.word	0x080056a5
 800565c:	08005671 	.word	0x08005671
 8005660:	08005687 	.word	0x08005687
 8005664:	080056a5 	.word	0x080056a5
 8005668:	080056a5 	.word	0x080056a5
 800566c:	080056a5 	.word	0x080056a5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005670:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005674:	3308      	adds	r3, #8
 8005676:	2101      	movs	r1, #1
 8005678:	4618      	mov	r0, r3
 800567a:	f000 ff55 	bl	8006528 <RCCEx_PLL2_Config>
 800567e:	4603      	mov	r3, r0
 8005680:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005684:	e00f      	b.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005686:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800568a:	3328      	adds	r3, #40	; 0x28
 800568c:	2101      	movs	r1, #1
 800568e:	4618      	mov	r0, r3
 8005690:	f000 fffc 	bl	800668c <RCCEx_PLL3_Config>
 8005694:	4603      	mov	r3, r0
 8005696:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800569a:	e004      	b.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80056a2:	e000      	b.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80056a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056a6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d10a      	bne.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80056ae:	4b96      	ldr	r3, [pc, #600]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80056b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056b2:	f023 0107 	bic.w	r1, r3, #7
 80056b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056bc:	4a92      	ldr	r2, [pc, #584]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80056be:	430b      	orrs	r3, r1
 80056c0:	6553      	str	r3, [r2, #84]	; 0x54
 80056c2:	e003      	b.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056c4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80056c8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80056cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d4:	f002 0304 	and.w	r3, r2, #4
 80056d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80056dc:	2300      	movs	r3, #0
 80056de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80056e2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80056e6:	460b      	mov	r3, r1
 80056e8:	4313      	orrs	r3, r2
 80056ea:	d044      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80056ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056f4:	2b05      	cmp	r3, #5
 80056f6:	d825      	bhi.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80056f8:	a201      	add	r2, pc, #4	; (adr r2, 8005700 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80056fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056fe:	bf00      	nop
 8005700:	0800574d 	.word	0x0800574d
 8005704:	08005719 	.word	0x08005719
 8005708:	0800572f 	.word	0x0800572f
 800570c:	0800574d 	.word	0x0800574d
 8005710:	0800574d 	.word	0x0800574d
 8005714:	0800574d 	.word	0x0800574d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005718:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800571c:	3308      	adds	r3, #8
 800571e:	2101      	movs	r1, #1
 8005720:	4618      	mov	r0, r3
 8005722:	f000 ff01 	bl	8006528 <RCCEx_PLL2_Config>
 8005726:	4603      	mov	r3, r0
 8005728:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800572c:	e00f      	b.n	800574e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800572e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005732:	3328      	adds	r3, #40	; 0x28
 8005734:	2101      	movs	r1, #1
 8005736:	4618      	mov	r0, r3
 8005738:	f000 ffa8 	bl	800668c <RCCEx_PLL3_Config>
 800573c:	4603      	mov	r3, r0
 800573e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005742:	e004      	b.n	800574e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800574a:	e000      	b.n	800574e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800574c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800574e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005752:	2b00      	cmp	r3, #0
 8005754:	d10b      	bne.n	800576e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005756:	4b6c      	ldr	r3, [pc, #432]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800575a:	f023 0107 	bic.w	r1, r3, #7
 800575e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005766:	4a68      	ldr	r2, [pc, #416]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005768:	430b      	orrs	r3, r1
 800576a:	6593      	str	r3, [r2, #88]	; 0x58
 800576c:	e003      	b.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800576e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005772:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005776:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800577a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800577e:	f002 0320 	and.w	r3, r2, #32
 8005782:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005786:	2300      	movs	r3, #0
 8005788:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800578c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005790:	460b      	mov	r3, r1
 8005792:	4313      	orrs	r3, r2
 8005794:	d055      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005796:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800579a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800579e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80057a2:	d033      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80057a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80057a8:	d82c      	bhi.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80057aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057ae:	d02f      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80057b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057b4:	d826      	bhi.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80057b6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80057ba:	d02b      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80057bc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80057c0:	d820      	bhi.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80057c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057c6:	d012      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80057c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057cc:	d81a      	bhi.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d022      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80057d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057d6:	d115      	bne.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057dc:	3308      	adds	r3, #8
 80057de:	2100      	movs	r1, #0
 80057e0:	4618      	mov	r0, r3
 80057e2:	f000 fea1 	bl	8006528 <RCCEx_PLL2_Config>
 80057e6:	4603      	mov	r3, r0
 80057e8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80057ec:	e015      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80057ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057f2:	3328      	adds	r3, #40	; 0x28
 80057f4:	2102      	movs	r1, #2
 80057f6:	4618      	mov	r0, r3
 80057f8:	f000 ff48 	bl	800668c <RCCEx_PLL3_Config>
 80057fc:	4603      	mov	r3, r0
 80057fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005802:	e00a      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800580a:	e006      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800580c:	bf00      	nop
 800580e:	e004      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005810:	bf00      	nop
 8005812:	e002      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005814:	bf00      	nop
 8005816:	e000      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005818:	bf00      	nop
    }

    if (ret == HAL_OK)
 800581a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800581e:	2b00      	cmp	r3, #0
 8005820:	d10b      	bne.n	800583a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005822:	4b39      	ldr	r3, [pc, #228]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005826:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800582a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800582e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005832:	4a35      	ldr	r2, [pc, #212]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005834:	430b      	orrs	r3, r1
 8005836:	6553      	str	r3, [r2, #84]	; 0x54
 8005838:	e003      	b.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800583a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800583e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005842:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800584a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800584e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005852:	2300      	movs	r3, #0
 8005854:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005858:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800585c:	460b      	mov	r3, r1
 800585e:	4313      	orrs	r3, r2
 8005860:	d058      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005862:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005866:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800586a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800586e:	d033      	beq.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8005870:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005874:	d82c      	bhi.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800587a:	d02f      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800587c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005880:	d826      	bhi.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005882:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005886:	d02b      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005888:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800588c:	d820      	bhi.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800588e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005892:	d012      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8005894:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005898:	d81a      	bhi.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800589a:	2b00      	cmp	r3, #0
 800589c:	d022      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800589e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058a2:	d115      	bne.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058a8:	3308      	adds	r3, #8
 80058aa:	2100      	movs	r1, #0
 80058ac:	4618      	mov	r0, r3
 80058ae:	f000 fe3b 	bl	8006528 <RCCEx_PLL2_Config>
 80058b2:	4603      	mov	r3, r0
 80058b4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80058b8:	e015      	b.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80058ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058be:	3328      	adds	r3, #40	; 0x28
 80058c0:	2102      	movs	r1, #2
 80058c2:	4618      	mov	r0, r3
 80058c4:	f000 fee2 	bl	800668c <RCCEx_PLL3_Config>
 80058c8:	4603      	mov	r3, r0
 80058ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80058ce:	e00a      	b.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80058d6:	e006      	b.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80058d8:	bf00      	nop
 80058da:	e004      	b.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80058dc:	bf00      	nop
 80058de:	e002      	b.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80058e0:	bf00      	nop
 80058e2:	e000      	b.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80058e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058e6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d10e      	bne.n	800590c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80058ee:	4b06      	ldr	r3, [pc, #24]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80058f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058f2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80058f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80058fe:	4a02      	ldr	r2, [pc, #8]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005900:	430b      	orrs	r3, r1
 8005902:	6593      	str	r3, [r2, #88]	; 0x58
 8005904:	e006      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8005906:	bf00      	nop
 8005908:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800590c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005910:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005914:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800591c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005920:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005924:	2300      	movs	r3, #0
 8005926:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800592a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800592e:	460b      	mov	r3, r1
 8005930:	4313      	orrs	r3, r2
 8005932:	d055      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005934:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005938:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800593c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005940:	d033      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8005942:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005946:	d82c      	bhi.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005948:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800594c:	d02f      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800594e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005952:	d826      	bhi.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005954:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005958:	d02b      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800595a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800595e:	d820      	bhi.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005960:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005964:	d012      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8005966:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800596a:	d81a      	bhi.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800596c:	2b00      	cmp	r3, #0
 800596e:	d022      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005970:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005974:	d115      	bne.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005976:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800597a:	3308      	adds	r3, #8
 800597c:	2100      	movs	r1, #0
 800597e:	4618      	mov	r0, r3
 8005980:	f000 fdd2 	bl	8006528 <RCCEx_PLL2_Config>
 8005984:	4603      	mov	r3, r0
 8005986:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800598a:	e015      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800598c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005990:	3328      	adds	r3, #40	; 0x28
 8005992:	2102      	movs	r1, #2
 8005994:	4618      	mov	r0, r3
 8005996:	f000 fe79 	bl	800668c <RCCEx_PLL3_Config>
 800599a:	4603      	mov	r3, r0
 800599c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80059a0:	e00a      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80059a8:	e006      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80059aa:	bf00      	nop
 80059ac:	e004      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80059ae:	bf00      	nop
 80059b0:	e002      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80059b2:	bf00      	nop
 80059b4:	e000      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80059b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059b8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d10b      	bne.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80059c0:	4ba0      	ldr	r3, [pc, #640]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80059c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059c4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80059c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80059d0:	4a9c      	ldr	r2, [pc, #624]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80059d2:	430b      	orrs	r3, r1
 80059d4:	6593      	str	r3, [r2, #88]	; 0x58
 80059d6:	e003      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80059dc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80059e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e8:	f002 0308 	and.w	r3, r2, #8
 80059ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80059f0:	2300      	movs	r3, #0
 80059f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80059f6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80059fa:	460b      	mov	r3, r1
 80059fc:	4313      	orrs	r3, r2
 80059fe:	d01e      	beq.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8005a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a0c:	d10c      	bne.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005a0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a12:	3328      	adds	r3, #40	; 0x28
 8005a14:	2102      	movs	r1, #2
 8005a16:	4618      	mov	r0, r3
 8005a18:	f000 fe38 	bl	800668c <RCCEx_PLL3_Config>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d002      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8005a28:	4b86      	ldr	r3, [pc, #536]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a2c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a38:	4a82      	ldr	r2, [pc, #520]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005a3a:	430b      	orrs	r3, r1
 8005a3c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005a3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a46:	f002 0310 	and.w	r3, r2, #16
 8005a4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a4e:	2300      	movs	r3, #0
 8005a50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005a54:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8005a58:	460b      	mov	r3, r1
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	d01e      	beq.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005a5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a6a:	d10c      	bne.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005a6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a70:	3328      	adds	r3, #40	; 0x28
 8005a72:	2102      	movs	r1, #2
 8005a74:	4618      	mov	r0, r3
 8005a76:	f000 fe09 	bl	800668c <RCCEx_PLL3_Config>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d002      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005a86:	4b6f      	ldr	r3, [pc, #444]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a8a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005a8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a96:	4a6b      	ldr	r2, [pc, #428]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005a98:	430b      	orrs	r3, r1
 8005a9a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005aa8:	67bb      	str	r3, [r7, #120]	; 0x78
 8005aaa:	2300      	movs	r3, #0
 8005aac:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005aae:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	d03e      	beq.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005ab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005abc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005ac0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ac4:	d022      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8005ac6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005aca:	d81b      	bhi.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d003      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8005ad0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ad4:	d00b      	beq.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8005ad6:	e015      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005adc:	3308      	adds	r3, #8
 8005ade:	2100      	movs	r1, #0
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f000 fd21 	bl	8006528 <RCCEx_PLL2_Config>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005aec:	e00f      	b.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005aee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005af2:	3328      	adds	r3, #40	; 0x28
 8005af4:	2102      	movs	r1, #2
 8005af6:	4618      	mov	r0, r3
 8005af8:	f000 fdc8 	bl	800668c <RCCEx_PLL3_Config>
 8005afc:	4603      	mov	r3, r0
 8005afe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005b02:	e004      	b.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005b0a:	e000      	b.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8005b0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b0e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d10b      	bne.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b16:	4b4b      	ldr	r3, [pc, #300]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b1a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005b1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b22:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005b26:	4a47      	ldr	r2, [pc, #284]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005b28:	430b      	orrs	r3, r1
 8005b2a:	6593      	str	r3, [r2, #88]	; 0x58
 8005b2c:	e003      	b.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b2e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005b32:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005b36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005b42:	673b      	str	r3, [r7, #112]	; 0x70
 8005b44:	2300      	movs	r3, #0
 8005b46:	677b      	str	r3, [r7, #116]	; 0x74
 8005b48:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	d03b      	beq.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005b52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b5a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005b5e:	d01f      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8005b60:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005b64:	d818      	bhi.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8005b66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b6a:	d003      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8005b6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b70:	d007      	beq.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8005b72:	e011      	b.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b74:	4b33      	ldr	r3, [pc, #204]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b78:	4a32      	ldr	r2, [pc, #200]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005b7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005b80:	e00f      	b.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b86:	3328      	adds	r3, #40	; 0x28
 8005b88:	2101      	movs	r1, #1
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f000 fd7e 	bl	800668c <RCCEx_PLL3_Config>
 8005b90:	4603      	mov	r3, r0
 8005b92:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8005b96:	e004      	b.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005b9e:	e000      	b.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8005ba0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ba2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d10b      	bne.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005baa:	4b26      	ldr	r3, [pc, #152]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bae:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bba:	4a22      	ldr	r2, [pc, #136]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005bbc:	430b      	orrs	r3, r1
 8005bbe:	6553      	str	r3, [r2, #84]	; 0x54
 8005bc0:	e003      	b.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bc2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005bc6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005bca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005bd6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005bd8:	2300      	movs	r3, #0
 8005bda:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005bdc:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005be0:	460b      	mov	r3, r1
 8005be2:	4313      	orrs	r3, r2
 8005be4:	d034      	beq.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d003      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8005bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bf4:	d007      	beq.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8005bf6:	e011      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bf8:	4b12      	ldr	r3, [pc, #72]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfc:	4a11      	ldr	r2, [pc, #68]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005bfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005c04:	e00e      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c0a:	3308      	adds	r3, #8
 8005c0c:	2102      	movs	r1, #2
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f000 fc8a 	bl	8006528 <RCCEx_PLL2_Config>
 8005c14:	4603      	mov	r3, r0
 8005c16:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005c1a:	e003      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005c22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c24:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d10d      	bne.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005c2c:	4b05      	ldr	r3, [pc, #20]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005c34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c3a:	4a02      	ldr	r2, [pc, #8]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005c3c:	430b      	orrs	r3, r1
 8005c3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005c40:	e006      	b.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8005c42:	bf00      	nop
 8005c44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c48:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005c4c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c58:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005c5c:	663b      	str	r3, [r7, #96]	; 0x60
 8005c5e:	2300      	movs	r3, #0
 8005c60:	667b      	str	r3, [r7, #100]	; 0x64
 8005c62:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005c66:	460b      	mov	r3, r1
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	d00c      	beq.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c70:	3328      	adds	r3, #40	; 0x28
 8005c72:	2102      	movs	r1, #2
 8005c74:	4618      	mov	r0, r3
 8005c76:	f000 fd09 	bl	800668c <RCCEx_PLL3_Config>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d002      	beq.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005c86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c8e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8005c92:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c94:	2300      	movs	r3, #0
 8005c96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c98:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	d036      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005ca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ca6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ca8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cac:	d018      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8005cae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cb2:	d811      	bhi.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005cb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cb8:	d014      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8005cba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cbe:	d80b      	bhi.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d011      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005cc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cc8:	d106      	bne.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cca:	4bb7      	ldr	r3, [pc, #732]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cce:	4ab6      	ldr	r2, [pc, #728]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cd4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005cd6:	e008      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005cde:	e004      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005ce0:	bf00      	nop
 8005ce2:	e002      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005ce4:	bf00      	nop
 8005ce6:	e000      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005ce8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d10a      	bne.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005cf2:	4bad      	ldr	r3, [pc, #692]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cf6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d00:	4aa9      	ldr	r2, [pc, #676]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005d02:	430b      	orrs	r3, r1
 8005d04:	6553      	str	r3, [r2, #84]	; 0x54
 8005d06:	e003      	b.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005d0c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d18:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005d1c:	653b      	str	r3, [r7, #80]	; 0x50
 8005d1e:	2300      	movs	r3, #0
 8005d20:	657b      	str	r3, [r7, #84]	; 0x54
 8005d22:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005d26:	460b      	mov	r3, r1
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	d009      	beq.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005d2c:	4b9e      	ldr	r3, [pc, #632]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d30:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005d34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d3a:	4a9b      	ldr	r2, [pc, #620]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005d3c:	430b      	orrs	r3, r1
 8005d3e:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005d40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d48:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005d4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d4e:	2300      	movs	r3, #0
 8005d50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d52:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005d56:	460b      	mov	r3, r1
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	d009      	beq.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005d5c:	4b92      	ldr	r3, [pc, #584]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005d5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d60:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8005d64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d6a:	4a8f      	ldr	r2, [pc, #572]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005d6c:	430b      	orrs	r3, r1
 8005d6e:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d78:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8005d7c:	643b      	str	r3, [r7, #64]	; 0x40
 8005d7e:	2300      	movs	r3, #0
 8005d80:	647b      	str	r3, [r7, #68]	; 0x44
 8005d82:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005d86:	460b      	mov	r3, r1
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	d00e      	beq.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005d8c:	4b86      	ldr	r3, [pc, #536]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	4a85      	ldr	r2, [pc, #532]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005d92:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d96:	6113      	str	r3, [r2, #16]
 8005d98:	4b83      	ldr	r3, [pc, #524]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005d9a:	6919      	ldr	r1, [r3, #16]
 8005d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005da0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005da4:	4a80      	ldr	r2, [pc, #512]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005da6:	430b      	orrs	r3, r1
 8005da8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005daa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db2:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005db6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005db8:	2300      	movs	r3, #0
 8005dba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dbc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	d009      	beq.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005dc6:	4b78      	ldr	r3, [pc, #480]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dca:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005dce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dd4:	4a74      	ldr	r2, [pc, #464]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005dd6:	430b      	orrs	r3, r1
 8005dd8:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005dda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de2:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005de6:	633b      	str	r3, [r7, #48]	; 0x30
 8005de8:	2300      	movs	r3, #0
 8005dea:	637b      	str	r3, [r7, #52]	; 0x34
 8005dec:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005df0:	460b      	mov	r3, r1
 8005df2:	4313      	orrs	r3, r2
 8005df4:	d00a      	beq.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005df6:	4b6c      	ldr	r3, [pc, #432]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dfa:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8005dfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e06:	4a68      	ldr	r2, [pc, #416]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005e08:	430b      	orrs	r3, r1
 8005e0a:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e14:	2100      	movs	r1, #0
 8005e16:	62b9      	str	r1, [r7, #40]	; 0x28
 8005e18:	f003 0301 	and.w	r3, r3, #1
 8005e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e1e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005e22:	460b      	mov	r3, r1
 8005e24:	4313      	orrs	r3, r2
 8005e26:	d011      	beq.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e2c:	3308      	adds	r3, #8
 8005e2e:	2100      	movs	r1, #0
 8005e30:	4618      	mov	r0, r3
 8005e32:	f000 fb79 	bl	8006528 <RCCEx_PLL2_Config>
 8005e36:	4603      	mov	r3, r0
 8005e38:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8005e3c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d003      	beq.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e44:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005e48:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e54:	2100      	movs	r1, #0
 8005e56:	6239      	str	r1, [r7, #32]
 8005e58:	f003 0302 	and.w	r3, r3, #2
 8005e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8005e5e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005e62:	460b      	mov	r3, r1
 8005e64:	4313      	orrs	r3, r2
 8005e66:	d011      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e6c:	3308      	adds	r3, #8
 8005e6e:	2101      	movs	r1, #1
 8005e70:	4618      	mov	r0, r3
 8005e72:	f000 fb59 	bl	8006528 <RCCEx_PLL2_Config>
 8005e76:	4603      	mov	r3, r0
 8005e78:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8005e7c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d003      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e84:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005e88:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005e8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e94:	2100      	movs	r1, #0
 8005e96:	61b9      	str	r1, [r7, #24]
 8005e98:	f003 0304 	and.w	r3, r3, #4
 8005e9c:	61fb      	str	r3, [r7, #28]
 8005e9e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005ea2:	460b      	mov	r3, r1
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	d011      	beq.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005ea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eac:	3308      	adds	r3, #8
 8005eae:	2102      	movs	r1, #2
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f000 fb39 	bl	8006528 <RCCEx_PLL2_Config>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8005ebc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d003      	beq.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ec4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005ec8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005ecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed4:	2100      	movs	r1, #0
 8005ed6:	6139      	str	r1, [r7, #16]
 8005ed8:	f003 0308 	and.w	r3, r3, #8
 8005edc:	617b      	str	r3, [r7, #20]
 8005ede:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005ee2:	460b      	mov	r3, r1
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	d011      	beq.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eec:	3328      	adds	r3, #40	; 0x28
 8005eee:	2100      	movs	r1, #0
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f000 fbcb 	bl	800668c <RCCEx_PLL3_Config>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8005efc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d003      	beq.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f04:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005f08:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005f0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f14:	2100      	movs	r1, #0
 8005f16:	60b9      	str	r1, [r7, #8]
 8005f18:	f003 0310 	and.w	r3, r3, #16
 8005f1c:	60fb      	str	r3, [r7, #12]
 8005f1e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005f22:	460b      	mov	r3, r1
 8005f24:	4313      	orrs	r3, r2
 8005f26:	d011      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f2c:	3328      	adds	r3, #40	; 0x28
 8005f2e:	2101      	movs	r1, #1
 8005f30:	4618      	mov	r0, r3
 8005f32:	f000 fbab 	bl	800668c <RCCEx_PLL3_Config>
 8005f36:	4603      	mov	r3, r0
 8005f38:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8005f3c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d003      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f44:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005f48:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005f4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f54:	2100      	movs	r1, #0
 8005f56:	6039      	str	r1, [r7, #0]
 8005f58:	f003 0320 	and.w	r3, r3, #32
 8005f5c:	607b      	str	r3, [r7, #4]
 8005f5e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005f62:	460b      	mov	r3, r1
 8005f64:	4313      	orrs	r3, r2
 8005f66:	d011      	beq.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f6c:	3328      	adds	r3, #40	; 0x28
 8005f6e:	2102      	movs	r1, #2
 8005f70:	4618      	mov	r0, r3
 8005f72:	f000 fb8b 	bl	800668c <RCCEx_PLL3_Config>
 8005f76:	4603      	mov	r3, r0
 8005f78:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8005f7c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d003      	beq.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f84:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005f88:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8005f8c:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d101      	bne.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8005f94:	2300      	movs	r3, #0
 8005f96:	e000      	b.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fa6:	bf00      	nop
 8005fa8:	58024400 	.word	0x58024400

08005fac <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005fb0:	f7fe fe00 	bl	8004bb4 <HAL_RCC_GetHCLKFreq>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	4b06      	ldr	r3, [pc, #24]	; (8005fd0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005fb8:	6a1b      	ldr	r3, [r3, #32]
 8005fba:	091b      	lsrs	r3, r3, #4
 8005fbc:	f003 0307 	and.w	r3, r3, #7
 8005fc0:	4904      	ldr	r1, [pc, #16]	; (8005fd4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005fc2:	5ccb      	ldrb	r3, [r1, r3]
 8005fc4:	f003 031f 	and.w	r3, r3, #31
 8005fc8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	58024400 	.word	0x58024400
 8005fd4:	08009fbc 	.word	0x08009fbc

08005fd8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b089      	sub	sp, #36	; 0x24
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005fe0:	4ba1      	ldr	r3, [pc, #644]	; (8006268 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fe4:	f003 0303 	and.w	r3, r3, #3
 8005fe8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005fea:	4b9f      	ldr	r3, [pc, #636]	; (8006268 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fee:	0b1b      	lsrs	r3, r3, #12
 8005ff0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ff4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005ff6:	4b9c      	ldr	r3, [pc, #624]	; (8006268 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ffa:	091b      	lsrs	r3, r3, #4
 8005ffc:	f003 0301 	and.w	r3, r3, #1
 8006000:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006002:	4b99      	ldr	r3, [pc, #612]	; (8006268 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006006:	08db      	lsrs	r3, r3, #3
 8006008:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800600c:	693a      	ldr	r2, [r7, #16]
 800600e:	fb02 f303 	mul.w	r3, r2, r3
 8006012:	ee07 3a90 	vmov	s15, r3
 8006016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800601a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	2b00      	cmp	r3, #0
 8006022:	f000 8111 	beq.w	8006248 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	2b02      	cmp	r3, #2
 800602a:	f000 8083 	beq.w	8006134 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	2b02      	cmp	r3, #2
 8006032:	f200 80a1 	bhi.w	8006178 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d003      	beq.n	8006044 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	2b01      	cmp	r3, #1
 8006040:	d056      	beq.n	80060f0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006042:	e099      	b.n	8006178 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006044:	4b88      	ldr	r3, [pc, #544]	; (8006268 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 0320 	and.w	r3, r3, #32
 800604c:	2b00      	cmp	r3, #0
 800604e:	d02d      	beq.n	80060ac <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006050:	4b85      	ldr	r3, [pc, #532]	; (8006268 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	08db      	lsrs	r3, r3, #3
 8006056:	f003 0303 	and.w	r3, r3, #3
 800605a:	4a84      	ldr	r2, [pc, #528]	; (800626c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800605c:	fa22 f303 	lsr.w	r3, r2, r3
 8006060:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	ee07 3a90 	vmov	s15, r3
 8006068:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	ee07 3a90 	vmov	s15, r3
 8006072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006076:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800607a:	4b7b      	ldr	r3, [pc, #492]	; (8006268 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800607c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800607e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006082:	ee07 3a90 	vmov	s15, r3
 8006086:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800608a:	ed97 6a03 	vldr	s12, [r7, #12]
 800608e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006270 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006092:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006096:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800609a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800609e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060a6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80060aa:	e087      	b.n	80061bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	ee07 3a90 	vmov	s15, r3
 80060b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060b6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006274 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80060ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060be:	4b6a      	ldr	r3, [pc, #424]	; (8006268 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060c6:	ee07 3a90 	vmov	s15, r3
 80060ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80060d2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006270 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80060d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060ee:	e065      	b.n	80061bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	ee07 3a90 	vmov	s15, r3
 80060f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060fa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006278 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80060fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006102:	4b59      	ldr	r3, [pc, #356]	; (8006268 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800610a:	ee07 3a90 	vmov	s15, r3
 800610e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006112:	ed97 6a03 	vldr	s12, [r7, #12]
 8006116:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006270 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800611a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800611e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006122:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006126:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800612a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800612e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006132:	e043      	b.n	80061bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	ee07 3a90 	vmov	s15, r3
 800613a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800613e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800627c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006146:	4b48      	ldr	r3, [pc, #288]	; (8006268 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800614e:	ee07 3a90 	vmov	s15, r3
 8006152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006156:	ed97 6a03 	vldr	s12, [r7, #12]
 800615a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006270 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800615e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006166:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800616a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800616e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006172:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006176:	e021      	b.n	80061bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	ee07 3a90 	vmov	s15, r3
 800617e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006182:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006278 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800618a:	4b37      	ldr	r3, [pc, #220]	; (8006268 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800618c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800618e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006192:	ee07 3a90 	vmov	s15, r3
 8006196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800619a:	ed97 6a03 	vldr	s12, [r7, #12]
 800619e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006270 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80061a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061ba:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80061bc:	4b2a      	ldr	r3, [pc, #168]	; (8006268 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c0:	0a5b      	lsrs	r3, r3, #9
 80061c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061c6:	ee07 3a90 	vmov	s15, r3
 80061ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80061da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061e2:	ee17 2a90 	vmov	r2, s15
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80061ea:	4b1f      	ldr	r3, [pc, #124]	; (8006268 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ee:	0c1b      	lsrs	r3, r3, #16
 80061f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061f4:	ee07 3a90 	vmov	s15, r3
 80061f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006200:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006204:	edd7 6a07 	vldr	s13, [r7, #28]
 8006208:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800620c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006210:	ee17 2a90 	vmov	r2, s15
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006218:	4b13      	ldr	r3, [pc, #76]	; (8006268 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800621a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800621c:	0e1b      	lsrs	r3, r3, #24
 800621e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006222:	ee07 3a90 	vmov	s15, r3
 8006226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800622a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800622e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006232:	edd7 6a07 	vldr	s13, [r7, #28]
 8006236:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800623a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800623e:	ee17 2a90 	vmov	r2, s15
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006246:	e008      	b.n	800625a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	609a      	str	r2, [r3, #8]
}
 800625a:	bf00      	nop
 800625c:	3724      	adds	r7, #36	; 0x24
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr
 8006266:	bf00      	nop
 8006268:	58024400 	.word	0x58024400
 800626c:	03d09000 	.word	0x03d09000
 8006270:	46000000 	.word	0x46000000
 8006274:	4c742400 	.word	0x4c742400
 8006278:	4a742400 	.word	0x4a742400
 800627c:	4bbebc20 	.word	0x4bbebc20

08006280 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006280:	b480      	push	{r7}
 8006282:	b089      	sub	sp, #36	; 0x24
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006288:	4ba1      	ldr	r3, [pc, #644]	; (8006510 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800628a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800628c:	f003 0303 	and.w	r3, r3, #3
 8006290:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006292:	4b9f      	ldr	r3, [pc, #636]	; (8006510 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006296:	0d1b      	lsrs	r3, r3, #20
 8006298:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800629c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800629e:	4b9c      	ldr	r3, [pc, #624]	; (8006510 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a2:	0a1b      	lsrs	r3, r3, #8
 80062a4:	f003 0301 	and.w	r3, r3, #1
 80062a8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80062aa:	4b99      	ldr	r3, [pc, #612]	; (8006510 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ae:	08db      	lsrs	r3, r3, #3
 80062b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80062b4:	693a      	ldr	r2, [r7, #16]
 80062b6:	fb02 f303 	mul.w	r3, r2, r3
 80062ba:	ee07 3a90 	vmov	s15, r3
 80062be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	f000 8111 	beq.w	80064f0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	2b02      	cmp	r3, #2
 80062d2:	f000 8083 	beq.w	80063dc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	2b02      	cmp	r3, #2
 80062da:	f200 80a1 	bhi.w	8006420 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d003      	beq.n	80062ec <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d056      	beq.n	8006398 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80062ea:	e099      	b.n	8006420 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062ec:	4b88      	ldr	r3, [pc, #544]	; (8006510 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 0320 	and.w	r3, r3, #32
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d02d      	beq.n	8006354 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80062f8:	4b85      	ldr	r3, [pc, #532]	; (8006510 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	08db      	lsrs	r3, r3, #3
 80062fe:	f003 0303 	and.w	r3, r3, #3
 8006302:	4a84      	ldr	r2, [pc, #528]	; (8006514 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006304:	fa22 f303 	lsr.w	r3, r2, r3
 8006308:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	ee07 3a90 	vmov	s15, r3
 8006310:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	ee07 3a90 	vmov	s15, r3
 800631a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800631e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006322:	4b7b      	ldr	r3, [pc, #492]	; (8006510 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800632a:	ee07 3a90 	vmov	s15, r3
 800632e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006332:	ed97 6a03 	vldr	s12, [r7, #12]
 8006336:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006518 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800633a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800633e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006342:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006346:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800634a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800634e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006352:	e087      	b.n	8006464 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	ee07 3a90 	vmov	s15, r3
 800635a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800635e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800651c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006362:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006366:	4b6a      	ldr	r3, [pc, #424]	; (8006510 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800636e:	ee07 3a90 	vmov	s15, r3
 8006372:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006376:	ed97 6a03 	vldr	s12, [r7, #12]
 800637a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006518 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800637e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006382:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006386:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800638a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800638e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006392:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006396:	e065      	b.n	8006464 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	ee07 3a90 	vmov	s15, r3
 800639e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063a2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006520 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80063a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063aa:	4b59      	ldr	r3, [pc, #356]	; (8006510 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063b2:	ee07 3a90 	vmov	s15, r3
 80063b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80063be:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006518 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80063c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063da:	e043      	b.n	8006464 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	ee07 3a90 	vmov	s15, r3
 80063e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063e6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006524 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80063ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063ee:	4b48      	ldr	r3, [pc, #288]	; (8006510 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063f6:	ee07 3a90 	vmov	s15, r3
 80063fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006402:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006518 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006406:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800640a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800640e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006412:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800641a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800641e:	e021      	b.n	8006464 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	ee07 3a90 	vmov	s15, r3
 8006426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800642a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006520 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800642e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006432:	4b37      	ldr	r3, [pc, #220]	; (8006510 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800643a:	ee07 3a90 	vmov	s15, r3
 800643e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006442:	ed97 6a03 	vldr	s12, [r7, #12]
 8006446:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006518 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800644a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800644e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006452:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800645a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800645e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006462:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006464:	4b2a      	ldr	r3, [pc, #168]	; (8006510 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006468:	0a5b      	lsrs	r3, r3, #9
 800646a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800646e:	ee07 3a90 	vmov	s15, r3
 8006472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006476:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800647a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800647e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006482:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006486:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800648a:	ee17 2a90 	vmov	r2, s15
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006492:	4b1f      	ldr	r3, [pc, #124]	; (8006510 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006496:	0c1b      	lsrs	r3, r3, #16
 8006498:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800649c:	ee07 3a90 	vmov	s15, r3
 80064a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80064a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80064b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064b8:	ee17 2a90 	vmov	r2, s15
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80064c0:	4b13      	ldr	r3, [pc, #76]	; (8006510 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c4:	0e1b      	lsrs	r3, r3, #24
 80064c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064ca:	ee07 3a90 	vmov	s15, r3
 80064ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80064d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064da:	edd7 6a07 	vldr	s13, [r7, #28]
 80064de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064e6:	ee17 2a90 	vmov	r2, s15
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80064ee:	e008      	b.n	8006502 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2200      	movs	r2, #0
 80064fa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	609a      	str	r2, [r3, #8]
}
 8006502:	bf00      	nop
 8006504:	3724      	adds	r7, #36	; 0x24
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr
 800650e:	bf00      	nop
 8006510:	58024400 	.word	0x58024400
 8006514:	03d09000 	.word	0x03d09000
 8006518:	46000000 	.word	0x46000000
 800651c:	4c742400 	.word	0x4c742400
 8006520:	4a742400 	.word	0x4a742400
 8006524:	4bbebc20 	.word	0x4bbebc20

08006528 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006532:	2300      	movs	r3, #0
 8006534:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006536:	4b53      	ldr	r3, [pc, #332]	; (8006684 <RCCEx_PLL2_Config+0x15c>)
 8006538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800653a:	f003 0303 	and.w	r3, r3, #3
 800653e:	2b03      	cmp	r3, #3
 8006540:	d101      	bne.n	8006546 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e099      	b.n	800667a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006546:	4b4f      	ldr	r3, [pc, #316]	; (8006684 <RCCEx_PLL2_Config+0x15c>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a4e      	ldr	r2, [pc, #312]	; (8006684 <RCCEx_PLL2_Config+0x15c>)
 800654c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006550:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006552:	f7fc faf5 	bl	8002b40 <HAL_GetTick>
 8006556:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006558:	e008      	b.n	800656c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800655a:	f7fc faf1 	bl	8002b40 <HAL_GetTick>
 800655e:	4602      	mov	r2, r0
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	1ad3      	subs	r3, r2, r3
 8006564:	2b02      	cmp	r3, #2
 8006566:	d901      	bls.n	800656c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006568:	2303      	movs	r3, #3
 800656a:	e086      	b.n	800667a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800656c:	4b45      	ldr	r3, [pc, #276]	; (8006684 <RCCEx_PLL2_Config+0x15c>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006574:	2b00      	cmp	r3, #0
 8006576:	d1f0      	bne.n	800655a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006578:	4b42      	ldr	r3, [pc, #264]	; (8006684 <RCCEx_PLL2_Config+0x15c>)
 800657a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800657c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	031b      	lsls	r3, r3, #12
 8006586:	493f      	ldr	r1, [pc, #252]	; (8006684 <RCCEx_PLL2_Config+0x15c>)
 8006588:	4313      	orrs	r3, r2
 800658a:	628b      	str	r3, [r1, #40]	; 0x28
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	3b01      	subs	r3, #1
 8006592:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	3b01      	subs	r3, #1
 800659c:	025b      	lsls	r3, r3, #9
 800659e:	b29b      	uxth	r3, r3
 80065a0:	431a      	orrs	r2, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	3b01      	subs	r3, #1
 80065a8:	041b      	lsls	r3, r3, #16
 80065aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80065ae:	431a      	orrs	r2, r3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	691b      	ldr	r3, [r3, #16]
 80065b4:	3b01      	subs	r3, #1
 80065b6:	061b      	lsls	r3, r3, #24
 80065b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80065bc:	4931      	ldr	r1, [pc, #196]	; (8006684 <RCCEx_PLL2_Config+0x15c>)
 80065be:	4313      	orrs	r3, r2
 80065c0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80065c2:	4b30      	ldr	r3, [pc, #192]	; (8006684 <RCCEx_PLL2_Config+0x15c>)
 80065c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	695b      	ldr	r3, [r3, #20]
 80065ce:	492d      	ldr	r1, [pc, #180]	; (8006684 <RCCEx_PLL2_Config+0x15c>)
 80065d0:	4313      	orrs	r3, r2
 80065d2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80065d4:	4b2b      	ldr	r3, [pc, #172]	; (8006684 <RCCEx_PLL2_Config+0x15c>)
 80065d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d8:	f023 0220 	bic.w	r2, r3, #32
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	699b      	ldr	r3, [r3, #24]
 80065e0:	4928      	ldr	r1, [pc, #160]	; (8006684 <RCCEx_PLL2_Config+0x15c>)
 80065e2:	4313      	orrs	r3, r2
 80065e4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80065e6:	4b27      	ldr	r3, [pc, #156]	; (8006684 <RCCEx_PLL2_Config+0x15c>)
 80065e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ea:	4a26      	ldr	r2, [pc, #152]	; (8006684 <RCCEx_PLL2_Config+0x15c>)
 80065ec:	f023 0310 	bic.w	r3, r3, #16
 80065f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80065f2:	4b24      	ldr	r3, [pc, #144]	; (8006684 <RCCEx_PLL2_Config+0x15c>)
 80065f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065f6:	4b24      	ldr	r3, [pc, #144]	; (8006688 <RCCEx_PLL2_Config+0x160>)
 80065f8:	4013      	ands	r3, r2
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	69d2      	ldr	r2, [r2, #28]
 80065fe:	00d2      	lsls	r2, r2, #3
 8006600:	4920      	ldr	r1, [pc, #128]	; (8006684 <RCCEx_PLL2_Config+0x15c>)
 8006602:	4313      	orrs	r3, r2
 8006604:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006606:	4b1f      	ldr	r3, [pc, #124]	; (8006684 <RCCEx_PLL2_Config+0x15c>)
 8006608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800660a:	4a1e      	ldr	r2, [pc, #120]	; (8006684 <RCCEx_PLL2_Config+0x15c>)
 800660c:	f043 0310 	orr.w	r3, r3, #16
 8006610:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d106      	bne.n	8006626 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006618:	4b1a      	ldr	r3, [pc, #104]	; (8006684 <RCCEx_PLL2_Config+0x15c>)
 800661a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800661c:	4a19      	ldr	r2, [pc, #100]	; (8006684 <RCCEx_PLL2_Config+0x15c>)
 800661e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006622:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006624:	e00f      	b.n	8006646 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	2b01      	cmp	r3, #1
 800662a:	d106      	bne.n	800663a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800662c:	4b15      	ldr	r3, [pc, #84]	; (8006684 <RCCEx_PLL2_Config+0x15c>)
 800662e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006630:	4a14      	ldr	r2, [pc, #80]	; (8006684 <RCCEx_PLL2_Config+0x15c>)
 8006632:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006636:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006638:	e005      	b.n	8006646 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800663a:	4b12      	ldr	r3, [pc, #72]	; (8006684 <RCCEx_PLL2_Config+0x15c>)
 800663c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800663e:	4a11      	ldr	r2, [pc, #68]	; (8006684 <RCCEx_PLL2_Config+0x15c>)
 8006640:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006644:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006646:	4b0f      	ldr	r3, [pc, #60]	; (8006684 <RCCEx_PLL2_Config+0x15c>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a0e      	ldr	r2, [pc, #56]	; (8006684 <RCCEx_PLL2_Config+0x15c>)
 800664c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006650:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006652:	f7fc fa75 	bl	8002b40 <HAL_GetTick>
 8006656:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006658:	e008      	b.n	800666c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800665a:	f7fc fa71 	bl	8002b40 <HAL_GetTick>
 800665e:	4602      	mov	r2, r0
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	1ad3      	subs	r3, r2, r3
 8006664:	2b02      	cmp	r3, #2
 8006666:	d901      	bls.n	800666c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006668:	2303      	movs	r3, #3
 800666a:	e006      	b.n	800667a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800666c:	4b05      	ldr	r3, [pc, #20]	; (8006684 <RCCEx_PLL2_Config+0x15c>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006674:	2b00      	cmp	r3, #0
 8006676:	d0f0      	beq.n	800665a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006678:	7bfb      	ldrb	r3, [r7, #15]
}
 800667a:	4618      	mov	r0, r3
 800667c:	3710      	adds	r7, #16
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
 8006682:	bf00      	nop
 8006684:	58024400 	.word	0x58024400
 8006688:	ffff0007 	.word	0xffff0007

0800668c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006696:	2300      	movs	r3, #0
 8006698:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800669a:	4b53      	ldr	r3, [pc, #332]	; (80067e8 <RCCEx_PLL3_Config+0x15c>)
 800669c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800669e:	f003 0303 	and.w	r3, r3, #3
 80066a2:	2b03      	cmp	r3, #3
 80066a4:	d101      	bne.n	80066aa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	e099      	b.n	80067de <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80066aa:	4b4f      	ldr	r3, [pc, #316]	; (80067e8 <RCCEx_PLL3_Config+0x15c>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a4e      	ldr	r2, [pc, #312]	; (80067e8 <RCCEx_PLL3_Config+0x15c>)
 80066b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066b6:	f7fc fa43 	bl	8002b40 <HAL_GetTick>
 80066ba:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80066bc:	e008      	b.n	80066d0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80066be:	f7fc fa3f 	bl	8002b40 <HAL_GetTick>
 80066c2:	4602      	mov	r2, r0
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	1ad3      	subs	r3, r2, r3
 80066c8:	2b02      	cmp	r3, #2
 80066ca:	d901      	bls.n	80066d0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80066cc:	2303      	movs	r3, #3
 80066ce:	e086      	b.n	80067de <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80066d0:	4b45      	ldr	r3, [pc, #276]	; (80067e8 <RCCEx_PLL3_Config+0x15c>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d1f0      	bne.n	80066be <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80066dc:	4b42      	ldr	r3, [pc, #264]	; (80067e8 <RCCEx_PLL3_Config+0x15c>)
 80066de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	051b      	lsls	r3, r3, #20
 80066ea:	493f      	ldr	r1, [pc, #252]	; (80067e8 <RCCEx_PLL3_Config+0x15c>)
 80066ec:	4313      	orrs	r3, r2
 80066ee:	628b      	str	r3, [r1, #40]	; 0x28
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	3b01      	subs	r3, #1
 80066f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	3b01      	subs	r3, #1
 8006700:	025b      	lsls	r3, r3, #9
 8006702:	b29b      	uxth	r3, r3
 8006704:	431a      	orrs	r2, r3
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	3b01      	subs	r3, #1
 800670c:	041b      	lsls	r3, r3, #16
 800670e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006712:	431a      	orrs	r2, r3
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	3b01      	subs	r3, #1
 800671a:	061b      	lsls	r3, r3, #24
 800671c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006720:	4931      	ldr	r1, [pc, #196]	; (80067e8 <RCCEx_PLL3_Config+0x15c>)
 8006722:	4313      	orrs	r3, r2
 8006724:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006726:	4b30      	ldr	r3, [pc, #192]	; (80067e8 <RCCEx_PLL3_Config+0x15c>)
 8006728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800672a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	695b      	ldr	r3, [r3, #20]
 8006732:	492d      	ldr	r1, [pc, #180]	; (80067e8 <RCCEx_PLL3_Config+0x15c>)
 8006734:	4313      	orrs	r3, r2
 8006736:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006738:	4b2b      	ldr	r3, [pc, #172]	; (80067e8 <RCCEx_PLL3_Config+0x15c>)
 800673a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800673c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	699b      	ldr	r3, [r3, #24]
 8006744:	4928      	ldr	r1, [pc, #160]	; (80067e8 <RCCEx_PLL3_Config+0x15c>)
 8006746:	4313      	orrs	r3, r2
 8006748:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800674a:	4b27      	ldr	r3, [pc, #156]	; (80067e8 <RCCEx_PLL3_Config+0x15c>)
 800674c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800674e:	4a26      	ldr	r2, [pc, #152]	; (80067e8 <RCCEx_PLL3_Config+0x15c>)
 8006750:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006754:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006756:	4b24      	ldr	r3, [pc, #144]	; (80067e8 <RCCEx_PLL3_Config+0x15c>)
 8006758:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800675a:	4b24      	ldr	r3, [pc, #144]	; (80067ec <RCCEx_PLL3_Config+0x160>)
 800675c:	4013      	ands	r3, r2
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	69d2      	ldr	r2, [r2, #28]
 8006762:	00d2      	lsls	r2, r2, #3
 8006764:	4920      	ldr	r1, [pc, #128]	; (80067e8 <RCCEx_PLL3_Config+0x15c>)
 8006766:	4313      	orrs	r3, r2
 8006768:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800676a:	4b1f      	ldr	r3, [pc, #124]	; (80067e8 <RCCEx_PLL3_Config+0x15c>)
 800676c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676e:	4a1e      	ldr	r2, [pc, #120]	; (80067e8 <RCCEx_PLL3_Config+0x15c>)
 8006770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006774:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d106      	bne.n	800678a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800677c:	4b1a      	ldr	r3, [pc, #104]	; (80067e8 <RCCEx_PLL3_Config+0x15c>)
 800677e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006780:	4a19      	ldr	r2, [pc, #100]	; (80067e8 <RCCEx_PLL3_Config+0x15c>)
 8006782:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006786:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006788:	e00f      	b.n	80067aa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	2b01      	cmp	r3, #1
 800678e:	d106      	bne.n	800679e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006790:	4b15      	ldr	r3, [pc, #84]	; (80067e8 <RCCEx_PLL3_Config+0x15c>)
 8006792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006794:	4a14      	ldr	r2, [pc, #80]	; (80067e8 <RCCEx_PLL3_Config+0x15c>)
 8006796:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800679a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800679c:	e005      	b.n	80067aa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800679e:	4b12      	ldr	r3, [pc, #72]	; (80067e8 <RCCEx_PLL3_Config+0x15c>)
 80067a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a2:	4a11      	ldr	r2, [pc, #68]	; (80067e8 <RCCEx_PLL3_Config+0x15c>)
 80067a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80067a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80067aa:	4b0f      	ldr	r3, [pc, #60]	; (80067e8 <RCCEx_PLL3_Config+0x15c>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a0e      	ldr	r2, [pc, #56]	; (80067e8 <RCCEx_PLL3_Config+0x15c>)
 80067b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067b6:	f7fc f9c3 	bl	8002b40 <HAL_GetTick>
 80067ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80067bc:	e008      	b.n	80067d0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80067be:	f7fc f9bf 	bl	8002b40 <HAL_GetTick>
 80067c2:	4602      	mov	r2, r0
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	1ad3      	subs	r3, r2, r3
 80067c8:	2b02      	cmp	r3, #2
 80067ca:	d901      	bls.n	80067d0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80067cc:	2303      	movs	r3, #3
 80067ce:	e006      	b.n	80067de <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80067d0:	4b05      	ldr	r3, [pc, #20]	; (80067e8 <RCCEx_PLL3_Config+0x15c>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d0f0      	beq.n	80067be <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80067dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3710      	adds	r7, #16
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	58024400 	.word	0x58024400
 80067ec:	ffff0007 	.word	0xffff0007

080067f0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d101      	bne.n	8006802 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	e10f      	b.n	8006a22 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a87      	ldr	r2, [pc, #540]	; (8006a2c <HAL_SPI_Init+0x23c>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d00f      	beq.n	8006832 <HAL_SPI_Init+0x42>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a86      	ldr	r2, [pc, #536]	; (8006a30 <HAL_SPI_Init+0x240>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d00a      	beq.n	8006832 <HAL_SPI_Init+0x42>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a84      	ldr	r2, [pc, #528]	; (8006a34 <HAL_SPI_Init+0x244>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d005      	beq.n	8006832 <HAL_SPI_Init+0x42>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	2b0f      	cmp	r3, #15
 800682c:	d901      	bls.n	8006832 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	e0f7      	b.n	8006a22 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 fe2e 	bl	8007494 <SPI_GetPacketSize>
 8006838:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a7b      	ldr	r2, [pc, #492]	; (8006a2c <HAL_SPI_Init+0x23c>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d00c      	beq.n	800685e <HAL_SPI_Init+0x6e>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a79      	ldr	r2, [pc, #484]	; (8006a30 <HAL_SPI_Init+0x240>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d007      	beq.n	800685e <HAL_SPI_Init+0x6e>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a78      	ldr	r2, [pc, #480]	; (8006a34 <HAL_SPI_Init+0x244>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d002      	beq.n	800685e <HAL_SPI_Init+0x6e>
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2b08      	cmp	r3, #8
 800685c:	d811      	bhi.n	8006882 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006862:	4a72      	ldr	r2, [pc, #456]	; (8006a2c <HAL_SPI_Init+0x23c>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d009      	beq.n	800687c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a70      	ldr	r2, [pc, #448]	; (8006a30 <HAL_SPI_Init+0x240>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d004      	beq.n	800687c <HAL_SPI_Init+0x8c>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a6f      	ldr	r2, [pc, #444]	; (8006a34 <HAL_SPI_Init+0x244>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d104      	bne.n	8006886 <HAL_SPI_Init+0x96>
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2b10      	cmp	r3, #16
 8006880:	d901      	bls.n	8006886 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e0cd      	b.n	8006a22 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800688c:	b2db      	uxtb	r3, r3
 800688e:	2b00      	cmp	r3, #0
 8006890:	d106      	bne.n	80068a0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f7fb febc 	bl	8002618 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2202      	movs	r2, #2
 80068a4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f022 0201 	bic.w	r2, r2, #1
 80068b6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80068c2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	699b      	ldr	r3, [r3, #24]
 80068c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80068cc:	d119      	bne.n	8006902 <HAL_SPI_Init+0x112>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068d6:	d103      	bne.n	80068e0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d008      	beq.n	80068f2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d10c      	bne.n	8006902 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80068ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80068f0:	d107      	bne.n	8006902 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006900:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800690a:	2b00      	cmp	r3, #0
 800690c:	d00f      	beq.n	800692e <HAL_SPI_Init+0x13e>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	68db      	ldr	r3, [r3, #12]
 8006912:	2b06      	cmp	r3, #6
 8006914:	d90b      	bls.n	800692e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	430a      	orrs	r2, r1
 800692a:	601a      	str	r2, [r3, #0]
 800692c:	e007      	b.n	800693e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800693c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	69da      	ldr	r2, [r3, #28]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006946:	431a      	orrs	r2, r3
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	431a      	orrs	r2, r3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006950:	ea42 0103 	orr.w	r1, r2, r3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	68da      	ldr	r2, [r3, #12]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	430a      	orrs	r2, r1
 800695e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006968:	431a      	orrs	r2, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800696e:	431a      	orrs	r2, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	699b      	ldr	r3, [r3, #24]
 8006974:	431a      	orrs	r2, r3
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	431a      	orrs	r2, r3
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	695b      	ldr	r3, [r3, #20]
 8006980:	431a      	orrs	r2, r3
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a1b      	ldr	r3, [r3, #32]
 8006986:	431a      	orrs	r2, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	431a      	orrs	r2, r3
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006992:	431a      	orrs	r2, r3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	431a      	orrs	r2, r3
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800699e:	ea42 0103 	orr.w	r1, r2, r3
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	430a      	orrs	r2, r1
 80069ac:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d113      	bne.n	80069de <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069c8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80069dc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f022 0201 	bic.w	r2, r2, #1
 80069ec:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00a      	beq.n	8006a10 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	430a      	orrs	r2, r1
 8006a0e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3710      	adds	r7, #16
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	40013000 	.word	0x40013000
 8006a30:	40003800 	.word	0x40003800
 8006a34:	40003c00 	.word	0x40003c00

08006a38 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b088      	sub	sp, #32
 8006a3c:	af02      	add	r7, sp, #8
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	603b      	str	r3, [r7, #0]
 8006a44:	4613      	mov	r3, r2
 8006a46:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	3320      	adds	r3, #32
 8006a4e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a50:	f7fc f876 	bl	8002b40 <HAL_GetTick>
 8006a54:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d001      	beq.n	8006a66 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8006a62:	2302      	movs	r3, #2
 8006a64:	e1d1      	b.n	8006e0a <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d002      	beq.n	8006a72 <HAL_SPI_Transmit+0x3a>
 8006a6c:	88fb      	ldrh	r3, [r7, #6]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d101      	bne.n	8006a76 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	e1c9      	b.n	8006e0a <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d101      	bne.n	8006a84 <HAL_SPI_Transmit+0x4c>
 8006a80:	2302      	movs	r3, #2
 8006a82:	e1c2      	b.n	8006e0a <HAL_SPI_Transmit+0x3d2>
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2203      	movs	r2, #3
 8006a90:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2200      	movs	r2, #0
 8006a98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	68ba      	ldr	r2, [r7, #8]
 8006aa0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	88fa      	ldrh	r2, [r7, #6]
 8006aa6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	88fa      	ldrh	r2, [r7, #6]
 8006aae:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2200      	movs	r2, #0
 8006abc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2200      	movs	r2, #0
 8006acc:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8006adc:	d108      	bne.n	8006af0 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006aec:	601a      	str	r2, [r3, #0]
 8006aee:	e009      	b.n	8006b04 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	68db      	ldr	r3, [r3, #12]
 8006af6:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006b02:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	685a      	ldr	r2, [r3, #4]
 8006b0a:	4b96      	ldr	r3, [pc, #600]	; (8006d64 <HAL_SPI_Transmit+0x32c>)
 8006b0c:	4013      	ands	r3, r2
 8006b0e:	88f9      	ldrh	r1, [r7, #6]
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	6812      	ldr	r2, [r2, #0]
 8006b14:	430b      	orrs	r3, r1
 8006b16:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f042 0201 	orr.w	r2, r2, #1
 8006b26:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b30:	d107      	bne.n	8006b42 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b40:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	68db      	ldr	r3, [r3, #12]
 8006b46:	2b0f      	cmp	r3, #15
 8006b48:	d947      	bls.n	8006bda <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006b4a:	e03f      	b.n	8006bcc <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	695b      	ldr	r3, [r3, #20]
 8006b52:	f003 0302 	and.w	r3, r3, #2
 8006b56:	2b02      	cmp	r3, #2
 8006b58:	d114      	bne.n	8006b84 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	6812      	ldr	r2, [r2, #0]
 8006b64:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b6a:	1d1a      	adds	r2, r3, #4
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	3b01      	subs	r3, #1
 8006b7a:	b29a      	uxth	r2, r3
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006b82:	e023      	b.n	8006bcc <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b84:	f7fb ffdc 	bl	8002b40 <HAL_GetTick>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	1ad3      	subs	r3, r2, r3
 8006b8e:	683a      	ldr	r2, [r7, #0]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d803      	bhi.n	8006b9c <HAL_SPI_Transmit+0x164>
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b9a:	d102      	bne.n	8006ba2 <HAL_SPI_Transmit+0x16a>
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d114      	bne.n	8006bcc <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006ba2:	68f8      	ldr	r0, [r7, #12]
 8006ba4:	f000 fba8 	bl	80072f8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006bc8:	2303      	movs	r3, #3
 8006bca:	e11e      	b.n	8006e0a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d1b9      	bne.n	8006b4c <HAL_SPI_Transmit+0x114>
 8006bd8:	e0f1      	b.n	8006dbe <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	2b07      	cmp	r3, #7
 8006be0:	f240 80e6 	bls.w	8006db0 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006be4:	e05d      	b.n	8006ca2 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	695b      	ldr	r3, [r3, #20]
 8006bec:	f003 0302 	and.w	r3, r3, #2
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d132      	bne.n	8006c5a <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d918      	bls.n	8006c32 <HAL_SPI_Transmit+0x1fa>
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d014      	beq.n	8006c32 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	6812      	ldr	r2, [r2, #0]
 8006c12:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c18:	1d1a      	adds	r2, r3, #4
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	3b02      	subs	r3, #2
 8006c28:	b29a      	uxth	r2, r3
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006c30:	e037      	b.n	8006ca2 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c36:	881a      	ldrh	r2, [r3, #0]
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c40:	1c9a      	adds	r2, r3, #2
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	3b01      	subs	r3, #1
 8006c50:	b29a      	uxth	r2, r3
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006c58:	e023      	b.n	8006ca2 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c5a:	f7fb ff71 	bl	8002b40 <HAL_GetTick>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	1ad3      	subs	r3, r2, r3
 8006c64:	683a      	ldr	r2, [r7, #0]
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d803      	bhi.n	8006c72 <HAL_SPI_Transmit+0x23a>
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c70:	d102      	bne.n	8006c78 <HAL_SPI_Transmit+0x240>
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d114      	bne.n	8006ca2 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006c78:	68f8      	ldr	r0, [r7, #12]
 8006c7a:	f000 fb3d 	bl	80072f8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c84:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2201      	movs	r2, #1
 8006c92:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006c9e:	2303      	movs	r3, #3
 8006ca0:	e0b3      	b.n	8006e0a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d19b      	bne.n	8006be6 <HAL_SPI_Transmit+0x1ae>
 8006cae:	e086      	b.n	8006dbe <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	695b      	ldr	r3, [r3, #20]
 8006cb6:	f003 0302 	and.w	r3, r3, #2
 8006cba:	2b02      	cmp	r3, #2
 8006cbc:	d154      	bne.n	8006d68 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	2b03      	cmp	r3, #3
 8006cc8:	d918      	bls.n	8006cfc <HAL_SPI_Transmit+0x2c4>
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cce:	2b40      	cmp	r3, #64	; 0x40
 8006cd0:	d914      	bls.n	8006cfc <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	6812      	ldr	r2, [r2, #0]
 8006cdc:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ce2:	1d1a      	adds	r2, r3, #4
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	3b04      	subs	r3, #4
 8006cf2:	b29a      	uxth	r2, r3
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006cfa:	e059      	b.n	8006db0 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d917      	bls.n	8006d38 <HAL_SPI_Transmit+0x300>
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d013      	beq.n	8006d38 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d14:	881a      	ldrh	r2, [r3, #0]
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d1e:	1c9a      	adds	r2, r3, #2
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	3b02      	subs	r3, #2
 8006d2e:	b29a      	uxth	r2, r3
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006d36:	e03b      	b.n	8006db0 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	3320      	adds	r3, #32
 8006d42:	7812      	ldrb	r2, [r2, #0]
 8006d44:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d4a:	1c5a      	adds	r2, r3, #1
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	3b01      	subs	r3, #1
 8006d5a:	b29a      	uxth	r2, r3
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006d62:	e025      	b.n	8006db0 <HAL_SPI_Transmit+0x378>
 8006d64:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d68:	f7fb feea 	bl	8002b40 <HAL_GetTick>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	683a      	ldr	r2, [r7, #0]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d803      	bhi.n	8006d80 <HAL_SPI_Transmit+0x348>
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d7e:	d102      	bne.n	8006d86 <HAL_SPI_Transmit+0x34e>
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d114      	bne.n	8006db0 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006d86:	68f8      	ldr	r0, [r7, #12]
 8006d88:	f000 fab6 	bl	80072f8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d92:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2200      	movs	r2, #0
 8006da8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006dac:	2303      	movs	r3, #3
 8006dae:	e02c      	b.n	8006e0a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	f47f af79 	bne.w	8006cb0 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	9300      	str	r3, [sp, #0]
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	2108      	movs	r1, #8
 8006dc8:	68f8      	ldr	r0, [r7, #12]
 8006dca:	f000 fb35 	bl	8007438 <SPI_WaitOnFlagUntilTimeout>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d007      	beq.n	8006de4 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dda:	f043 0220 	orr.w	r2, r3, #32
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006de4:	68f8      	ldr	r0, [r7, #12]
 8006de6:	f000 fa87 	bl	80072f8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2201      	movs	r2, #1
 8006dee:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2200      	movs	r2, #0
 8006df6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d001      	beq.n	8006e08 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	e000      	b.n	8006e0a <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8006e08:	2300      	movs	r3, #0
  }
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3718      	adds	r7, #24
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop

08006e14 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b088      	sub	sp, #32
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	60b9      	str	r1, [r7, #8]
 8006e1e:	603b      	str	r3, [r7, #0]
 8006e20:	4613      	mov	r3, r2
 8006e22:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e28:	095b      	lsrs	r3, r3, #5
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	3330      	adds	r3, #48	; 0x30
 8006e36:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e38:	f7fb fe82 	bl	8002b40 <HAL_GetTick>
 8006e3c:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d001      	beq.n	8006e4e <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8006e4a:	2302      	movs	r3, #2
 8006e4c:	e250      	b.n	80072f0 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d002      	beq.n	8006e5a <HAL_SPI_Receive+0x46>
 8006e54:	88fb      	ldrh	r3, [r7, #6]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d101      	bne.n	8006e5e <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e248      	b.n	80072f0 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d101      	bne.n	8006e6c <HAL_SPI_Receive+0x58>
 8006e68:	2302      	movs	r3, #2
 8006e6a:	e241      	b.n	80072f0 <HAL_SPI_Receive+0x4dc>
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2204      	movs	r2, #4
 8006e78:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	68ba      	ldr	r2, [r7, #8]
 8006e88:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	88fa      	ldrh	r2, [r7, #6]
 8006e8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	88fa      	ldrh	r2, [r7, #6]
 8006e96:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8006ec4:	d108      	bne.n	8006ed8 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ed4:	601a      	str	r2, [r3, #0]
 8006ed6:	e009      	b.n	8006eec <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006eea:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	685a      	ldr	r2, [r3, #4]
 8006ef2:	4b95      	ldr	r3, [pc, #596]	; (8007148 <HAL_SPI_Receive+0x334>)
 8006ef4:	4013      	ands	r3, r2
 8006ef6:	88f9      	ldrh	r1, [r7, #6]
 8006ef8:	68fa      	ldr	r2, [r7, #12]
 8006efa:	6812      	ldr	r2, [r2, #0]
 8006efc:	430b      	orrs	r3, r1
 8006efe:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f042 0201 	orr.w	r2, r2, #1
 8006f0e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f18:	d107      	bne.n	8006f2a <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f28:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	68db      	ldr	r3, [r3, #12]
 8006f2e:	2b0f      	cmp	r3, #15
 8006f30:	d96c      	bls.n	800700c <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006f32:	e064      	b.n	8006ffe <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	695b      	ldr	r3, [r3, #20]
 8006f3a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	695b      	ldr	r3, [r3, #20]
 8006f42:	f003 0301 	and.w	r3, r3, #1
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d114      	bne.n	8006f74 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f52:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006f54:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f5a:	1d1a      	adds	r2, r3, #4
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	3b01      	subs	r3, #1
 8006f6a:	b29a      	uxth	r2, r3
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8006f72:	e044      	b.n	8006ffe <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	8bfa      	ldrh	r2, [r7, #30]
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d919      	bls.n	8006fb6 <HAL_SPI_Receive+0x1a2>
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d014      	beq.n	8006fb6 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f94:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006f96:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f9c:	1d1a      	adds	r2, r3, #4
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	3b01      	subs	r3, #1
 8006fac:	b29a      	uxth	r2, r3
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8006fb4:	e023      	b.n	8006ffe <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006fb6:	f7fb fdc3 	bl	8002b40 <HAL_GetTick>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	1ad3      	subs	r3, r2, r3
 8006fc0:	683a      	ldr	r2, [r7, #0]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d803      	bhi.n	8006fce <HAL_SPI_Receive+0x1ba>
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fcc:	d102      	bne.n	8006fd4 <HAL_SPI_Receive+0x1c0>
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d114      	bne.n	8006ffe <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006fd4:	68f8      	ldr	r0, [r7, #12]
 8006fd6:	f000 f98f 	bl	80072f8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fe0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2201      	movs	r2, #1
 8006fee:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	e178      	b.n	80072f0 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007004:	b29b      	uxth	r3, r3
 8007006:	2b00      	cmp	r3, #0
 8007008:	d194      	bne.n	8006f34 <HAL_SPI_Receive+0x120>
 800700a:	e15e      	b.n	80072ca <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	2b07      	cmp	r3, #7
 8007012:	f240 8153 	bls.w	80072bc <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8007016:	e08f      	b.n	8007138 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	695b      	ldr	r3, [r3, #20]
 800701e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	695b      	ldr	r3, [r3, #20]
 8007026:	f003 0301 	and.w	r3, r3, #1
 800702a:	2b01      	cmp	r3, #1
 800702c:	d114      	bne.n	8007058 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007032:	69ba      	ldr	r2, [r7, #24]
 8007034:	8812      	ldrh	r2, [r2, #0]
 8007036:	b292      	uxth	r2, r2
 8007038:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800703e:	1c9a      	adds	r2, r3, #2
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800704a:	b29b      	uxth	r3, r3
 800704c:	3b01      	subs	r3, #1
 800704e:	b29a      	uxth	r2, r3
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8007056:	e06f      	b.n	8007138 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800705e:	b29b      	uxth	r3, r3
 8007060:	8bfa      	ldrh	r2, [r7, #30]
 8007062:	429a      	cmp	r2, r3
 8007064:	d924      	bls.n	80070b0 <HAL_SPI_Receive+0x29c>
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800706c:	2b00      	cmp	r3, #0
 800706e:	d01f      	beq.n	80070b0 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007074:	69ba      	ldr	r2, [r7, #24]
 8007076:	8812      	ldrh	r2, [r2, #0]
 8007078:	b292      	uxth	r2, r2
 800707a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007080:	1c9a      	adds	r2, r3, #2
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800708a:	69ba      	ldr	r2, [r7, #24]
 800708c:	8812      	ldrh	r2, [r2, #0]
 800708e:	b292      	uxth	r2, r2
 8007090:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007096:	1c9a      	adds	r2, r3, #2
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	3b02      	subs	r3, #2
 80070a6:	b29a      	uxth	r2, r3
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80070ae:	e043      	b.n	8007138 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d119      	bne.n	80070f0 <HAL_SPI_Receive+0x2dc>
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d014      	beq.n	80070f0 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070ca:	69ba      	ldr	r2, [r7, #24]
 80070cc:	8812      	ldrh	r2, [r2, #0]
 80070ce:	b292      	uxth	r2, r2
 80070d0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070d6:	1c9a      	adds	r2, r3, #2
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	3b01      	subs	r3, #1
 80070e6:	b29a      	uxth	r2, r3
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80070ee:	e023      	b.n	8007138 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070f0:	f7fb fd26 	bl	8002b40 <HAL_GetTick>
 80070f4:	4602      	mov	r2, r0
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	1ad3      	subs	r3, r2, r3
 80070fa:	683a      	ldr	r2, [r7, #0]
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d803      	bhi.n	8007108 <HAL_SPI_Receive+0x2f4>
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007106:	d102      	bne.n	800710e <HAL_SPI_Receive+0x2fa>
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d114      	bne.n	8007138 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800710e:	68f8      	ldr	r0, [r7, #12]
 8007110:	f000 f8f2 	bl	80072f8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800711a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2200      	movs	r2, #0
 8007130:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007134:	2303      	movs	r3, #3
 8007136:	e0db      	b.n	80072f0 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800713e:	b29b      	uxth	r3, r3
 8007140:	2b00      	cmp	r3, #0
 8007142:	f47f af69 	bne.w	8007018 <HAL_SPI_Receive+0x204>
 8007146:	e0c0      	b.n	80072ca <HAL_SPI_Receive+0x4b6>
 8007148:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	695b      	ldr	r3, [r3, #20]
 8007152:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	695b      	ldr	r3, [r3, #20]
 800715a:	f003 0301 	and.w	r3, r3, #1
 800715e:	2b01      	cmp	r3, #1
 8007160:	d117      	bne.n	8007192 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800716e:	7812      	ldrb	r2, [r2, #0]
 8007170:	b2d2      	uxtb	r2, r2
 8007172:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007178:	1c5a      	adds	r2, r3, #1
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007184:	b29b      	uxth	r3, r3
 8007186:	3b01      	subs	r3, #1
 8007188:	b29a      	uxth	r2, r3
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8007190:	e094      	b.n	80072bc <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007198:	b29b      	uxth	r3, r3
 800719a:	8bfa      	ldrh	r2, [r7, #30]
 800719c:	429a      	cmp	r2, r3
 800719e:	d946      	bls.n	800722e <HAL_SPI_Receive+0x41a>
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d041      	beq.n	800722e <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071b6:	7812      	ldrb	r2, [r2, #0]
 80071b8:	b2d2      	uxtb	r2, r2
 80071ba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071c0:	1c5a      	adds	r2, r3, #1
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071d2:	7812      	ldrb	r2, [r2, #0]
 80071d4:	b2d2      	uxtb	r2, r2
 80071d6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071dc:	1c5a      	adds	r2, r3, #1
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071ee:	7812      	ldrb	r2, [r2, #0]
 80071f0:	b2d2      	uxtb	r2, r2
 80071f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071f8:	1c5a      	adds	r2, r3, #1
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800720a:	7812      	ldrb	r2, [r2, #0]
 800720c:	b2d2      	uxtb	r2, r2
 800720e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007214:	1c5a      	adds	r2, r3, #1
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007220:	b29b      	uxth	r3, r3
 8007222:	3b04      	subs	r3, #4
 8007224:	b29a      	uxth	r2, r3
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800722c:	e046      	b.n	80072bc <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007234:	b29b      	uxth	r3, r3
 8007236:	2b03      	cmp	r3, #3
 8007238:	d81c      	bhi.n	8007274 <HAL_SPI_Receive+0x460>
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8007240:	2b00      	cmp	r3, #0
 8007242:	d017      	beq.n	8007274 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007250:	7812      	ldrb	r2, [r2, #0]
 8007252:	b2d2      	uxtb	r2, r2
 8007254:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800725a:	1c5a      	adds	r2, r3, #1
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007266:	b29b      	uxth	r3, r3
 8007268:	3b01      	subs	r3, #1
 800726a:	b29a      	uxth	r2, r3
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8007272:	e023      	b.n	80072bc <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007274:	f7fb fc64 	bl	8002b40 <HAL_GetTick>
 8007278:	4602      	mov	r2, r0
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	1ad3      	subs	r3, r2, r3
 800727e:	683a      	ldr	r2, [r7, #0]
 8007280:	429a      	cmp	r2, r3
 8007282:	d803      	bhi.n	800728c <HAL_SPI_Receive+0x478>
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800728a:	d102      	bne.n	8007292 <HAL_SPI_Receive+0x47e>
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d114      	bne.n	80072bc <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007292:	68f8      	ldr	r0, [r7, #12]
 8007294:	f000 f830 	bl	80072f8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800729e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2201      	movs	r2, #1
 80072ac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2200      	movs	r2, #0
 80072b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80072b8:	2303      	movs	r3, #3
 80072ba:	e019      	b.n	80072f0 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	f47f af41 	bne.w	800714c <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80072ca:	68f8      	ldr	r0, [r7, #12]
 80072cc:	f000 f814 	bl	80072f8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2201      	movs	r2, #1
 80072d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2200      	movs	r2, #0
 80072dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d001      	beq.n	80072ee <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 80072ea:	2301      	movs	r3, #1
 80072ec:	e000      	b.n	80072f0 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 80072ee:	2300      	movs	r3, #0
  }
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3720      	adds	r7, #32
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b085      	sub	sp, #20
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	695b      	ldr	r3, [r3, #20]
 8007306:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	699a      	ldr	r2, [r3, #24]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f042 0208 	orr.w	r2, r2, #8
 8007316:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	699a      	ldr	r2, [r3, #24]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f042 0210 	orr.w	r2, r2, #16
 8007326:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f022 0201 	bic.w	r2, r2, #1
 8007336:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	6919      	ldr	r1, [r3, #16]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	4b3c      	ldr	r3, [pc, #240]	; (8007434 <SPI_CloseTransfer+0x13c>)
 8007344:	400b      	ands	r3, r1
 8007346:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	689a      	ldr	r2, [r3, #8]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007356:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800735e:	b2db      	uxtb	r3, r3
 8007360:	2b04      	cmp	r3, #4
 8007362:	d014      	beq.n	800738e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f003 0320 	and.w	r3, r3, #32
 800736a:	2b00      	cmp	r3, #0
 800736c:	d00f      	beq.n	800738e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007374:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	699a      	ldr	r2, [r3, #24]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f042 0220 	orr.w	r2, r2, #32
 800738c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007394:	b2db      	uxtb	r3, r3
 8007396:	2b03      	cmp	r3, #3
 8007398:	d014      	beq.n	80073c4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d00f      	beq.n	80073c4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073aa:	f043 0204 	orr.w	r2, r3, #4
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	699a      	ldr	r2, [r3, #24]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073c2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d00f      	beq.n	80073ee <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073d4:	f043 0201 	orr.w	r2, r3, #1
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	699a      	ldr	r2, [r3, #24]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073ec:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d00f      	beq.n	8007418 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073fe:	f043 0208 	orr.w	r2, r3, #8
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	699a      	ldr	r2, [r3, #24]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007416:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2200      	movs	r2, #0
 800741c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8007428:	bf00      	nop
 800742a:	3714      	adds	r7, #20
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr
 8007434:	fffffc90 	.word	0xfffffc90

08007438 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
 800743e:	60f8      	str	r0, [r7, #12]
 8007440:	60b9      	str	r1, [r7, #8]
 8007442:	603b      	str	r3, [r7, #0]
 8007444:	4613      	mov	r3, r2
 8007446:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007448:	e010      	b.n	800746c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800744a:	f7fb fb79 	bl	8002b40 <HAL_GetTick>
 800744e:	4602      	mov	r2, r0
 8007450:	69bb      	ldr	r3, [r7, #24]
 8007452:	1ad3      	subs	r3, r2, r3
 8007454:	683a      	ldr	r2, [r7, #0]
 8007456:	429a      	cmp	r2, r3
 8007458:	d803      	bhi.n	8007462 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007460:	d102      	bne.n	8007468 <SPI_WaitOnFlagUntilTimeout+0x30>
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d101      	bne.n	800746c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007468:	2303      	movs	r3, #3
 800746a:	e00f      	b.n	800748c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	695a      	ldr	r2, [r3, #20]
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	4013      	ands	r3, r2
 8007476:	68ba      	ldr	r2, [r7, #8]
 8007478:	429a      	cmp	r2, r3
 800747a:	bf0c      	ite	eq
 800747c:	2301      	moveq	r3, #1
 800747e:	2300      	movne	r3, #0
 8007480:	b2db      	uxtb	r3, r3
 8007482:	461a      	mov	r2, r3
 8007484:	79fb      	ldrb	r3, [r7, #7]
 8007486:	429a      	cmp	r2, r3
 8007488:	d0df      	beq.n	800744a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800748a:	2300      	movs	r3, #0
}
 800748c:	4618      	mov	r0, r3
 800748e:	3710      	adds	r7, #16
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007494:	b480      	push	{r7}
 8007496:	b085      	sub	sp, #20
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074a0:	095b      	lsrs	r3, r3, #5
 80074a2:	3301      	adds	r3, #1
 80074a4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	3301      	adds	r3, #1
 80074ac:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	3307      	adds	r3, #7
 80074b2:	08db      	lsrs	r3, r3, #3
 80074b4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	68fa      	ldr	r2, [r7, #12]
 80074ba:	fb02 f303 	mul.w	r3, r2, r3
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3714      	adds	r7, #20
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr

080074ca <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80074ca:	b580      	push	{r7, lr}
 80074cc:	b082      	sub	sp, #8
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d101      	bne.n	80074dc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	e042      	b.n	8007562 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d106      	bne.n	80074f4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f7fb f970 	bl	80027d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2224      	movs	r2, #36	; 0x24
 80074f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f022 0201 	bic.w	r2, r2, #1
 800750a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007510:	2b00      	cmp	r3, #0
 8007512:	d002      	beq.n	800751a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f000 ff23 	bl	8008360 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 f8b4 	bl	8007688 <UART_SetConfig>
 8007520:	4603      	mov	r3, r0
 8007522:	2b01      	cmp	r3, #1
 8007524:	d101      	bne.n	800752a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	e01b      	b.n	8007562 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	685a      	ldr	r2, [r3, #4]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007538:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	689a      	ldr	r2, [r3, #8]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007548:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f042 0201 	orr.w	r2, r2, #1
 8007558:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 ffa2 	bl	80084a4 <UART_CheckIdleState>
 8007560:	4603      	mov	r3, r0
}
 8007562:	4618      	mov	r0, r3
 8007564:	3708      	adds	r7, #8
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}

0800756a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800756a:	b580      	push	{r7, lr}
 800756c:	b08a      	sub	sp, #40	; 0x28
 800756e:	af02      	add	r7, sp, #8
 8007570:	60f8      	str	r0, [r7, #12]
 8007572:	60b9      	str	r1, [r7, #8]
 8007574:	603b      	str	r3, [r7, #0]
 8007576:	4613      	mov	r3, r2
 8007578:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007580:	2b20      	cmp	r3, #32
 8007582:	d17b      	bne.n	800767c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d002      	beq.n	8007590 <HAL_UART_Transmit+0x26>
 800758a:	88fb      	ldrh	r3, [r7, #6]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d101      	bne.n	8007594 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	e074      	b.n	800767e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2200      	movs	r2, #0
 8007598:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2221      	movs	r2, #33	; 0x21
 80075a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80075a4:	f7fb facc 	bl	8002b40 <HAL_GetTick>
 80075a8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	88fa      	ldrh	r2, [r7, #6]
 80075ae:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	88fa      	ldrh	r2, [r7, #6]
 80075b6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075c2:	d108      	bne.n	80075d6 <HAL_UART_Transmit+0x6c>
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	691b      	ldr	r3, [r3, #16]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d104      	bne.n	80075d6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80075cc:	2300      	movs	r3, #0
 80075ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	61bb      	str	r3, [r7, #24]
 80075d4:	e003      	b.n	80075de <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80075da:	2300      	movs	r3, #0
 80075dc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80075de:	e030      	b.n	8007642 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	9300      	str	r3, [sp, #0]
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	2200      	movs	r2, #0
 80075e8:	2180      	movs	r1, #128	; 0x80
 80075ea:	68f8      	ldr	r0, [r7, #12]
 80075ec:	f001 f804 	bl	80085f8 <UART_WaitOnFlagUntilTimeout>
 80075f0:	4603      	mov	r3, r0
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d005      	beq.n	8007602 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2220      	movs	r2, #32
 80075fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80075fe:	2303      	movs	r3, #3
 8007600:	e03d      	b.n	800767e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007602:	69fb      	ldr	r3, [r7, #28]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d10b      	bne.n	8007620 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007608:	69bb      	ldr	r3, [r7, #24]
 800760a:	881b      	ldrh	r3, [r3, #0]
 800760c:	461a      	mov	r2, r3
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007616:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007618:	69bb      	ldr	r3, [r7, #24]
 800761a:	3302      	adds	r3, #2
 800761c:	61bb      	str	r3, [r7, #24]
 800761e:	e007      	b.n	8007630 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	781a      	ldrb	r2, [r3, #0]
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800762a:	69fb      	ldr	r3, [r7, #28]
 800762c:	3301      	adds	r3, #1
 800762e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007636:	b29b      	uxth	r3, r3
 8007638:	3b01      	subs	r3, #1
 800763a:	b29a      	uxth	r2, r3
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007648:	b29b      	uxth	r3, r3
 800764a:	2b00      	cmp	r3, #0
 800764c:	d1c8      	bne.n	80075e0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	9300      	str	r3, [sp, #0]
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	2200      	movs	r2, #0
 8007656:	2140      	movs	r1, #64	; 0x40
 8007658:	68f8      	ldr	r0, [r7, #12]
 800765a:	f000 ffcd 	bl	80085f8 <UART_WaitOnFlagUntilTimeout>
 800765e:	4603      	mov	r3, r0
 8007660:	2b00      	cmp	r3, #0
 8007662:	d005      	beq.n	8007670 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2220      	movs	r2, #32
 8007668:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800766c:	2303      	movs	r3, #3
 800766e:	e006      	b.n	800767e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2220      	movs	r2, #32
 8007674:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007678:	2300      	movs	r3, #0
 800767a:	e000      	b.n	800767e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800767c:	2302      	movs	r3, #2
  }
}
 800767e:	4618      	mov	r0, r3
 8007680:	3720      	adds	r7, #32
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
	...

08007688 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007688:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800768c:	b092      	sub	sp, #72	; 0x48
 800768e:	af00      	add	r7, sp, #0
 8007690:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007692:	2300      	movs	r3, #0
 8007694:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	689a      	ldr	r2, [r3, #8]
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	691b      	ldr	r3, [r3, #16]
 80076a0:	431a      	orrs	r2, r3
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	695b      	ldr	r3, [r3, #20]
 80076a6:	431a      	orrs	r2, r3
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	69db      	ldr	r3, [r3, #28]
 80076ac:	4313      	orrs	r3, r2
 80076ae:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	4bbe      	ldr	r3, [pc, #760]	; (80079b0 <UART_SetConfig+0x328>)
 80076b8:	4013      	ands	r3, r2
 80076ba:	697a      	ldr	r2, [r7, #20]
 80076bc:	6812      	ldr	r2, [r2, #0]
 80076be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80076c0:	430b      	orrs	r3, r1
 80076c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	68da      	ldr	r2, [r3, #12]
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	430a      	orrs	r2, r1
 80076d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	699b      	ldr	r3, [r3, #24]
 80076de:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4ab3      	ldr	r2, [pc, #716]	; (80079b4 <UART_SetConfig+0x32c>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d004      	beq.n	80076f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	6a1b      	ldr	r3, [r3, #32]
 80076ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80076f0:	4313      	orrs	r3, r2
 80076f2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	689a      	ldr	r2, [r3, #8]
 80076fa:	4baf      	ldr	r3, [pc, #700]	; (80079b8 <UART_SetConfig+0x330>)
 80076fc:	4013      	ands	r3, r2
 80076fe:	697a      	ldr	r2, [r7, #20]
 8007700:	6812      	ldr	r2, [r2, #0]
 8007702:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007704:	430b      	orrs	r3, r1
 8007706:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800770e:	f023 010f 	bic.w	r1, r3, #15
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	430a      	orrs	r2, r1
 800771c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4aa6      	ldr	r2, [pc, #664]	; (80079bc <UART_SetConfig+0x334>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d177      	bne.n	8007818 <UART_SetConfig+0x190>
 8007728:	4ba5      	ldr	r3, [pc, #660]	; (80079c0 <UART_SetConfig+0x338>)
 800772a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800772c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007730:	2b28      	cmp	r3, #40	; 0x28
 8007732:	d86d      	bhi.n	8007810 <UART_SetConfig+0x188>
 8007734:	a201      	add	r2, pc, #4	; (adr r2, 800773c <UART_SetConfig+0xb4>)
 8007736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800773a:	bf00      	nop
 800773c:	080077e1 	.word	0x080077e1
 8007740:	08007811 	.word	0x08007811
 8007744:	08007811 	.word	0x08007811
 8007748:	08007811 	.word	0x08007811
 800774c:	08007811 	.word	0x08007811
 8007750:	08007811 	.word	0x08007811
 8007754:	08007811 	.word	0x08007811
 8007758:	08007811 	.word	0x08007811
 800775c:	080077e9 	.word	0x080077e9
 8007760:	08007811 	.word	0x08007811
 8007764:	08007811 	.word	0x08007811
 8007768:	08007811 	.word	0x08007811
 800776c:	08007811 	.word	0x08007811
 8007770:	08007811 	.word	0x08007811
 8007774:	08007811 	.word	0x08007811
 8007778:	08007811 	.word	0x08007811
 800777c:	080077f1 	.word	0x080077f1
 8007780:	08007811 	.word	0x08007811
 8007784:	08007811 	.word	0x08007811
 8007788:	08007811 	.word	0x08007811
 800778c:	08007811 	.word	0x08007811
 8007790:	08007811 	.word	0x08007811
 8007794:	08007811 	.word	0x08007811
 8007798:	08007811 	.word	0x08007811
 800779c:	080077f9 	.word	0x080077f9
 80077a0:	08007811 	.word	0x08007811
 80077a4:	08007811 	.word	0x08007811
 80077a8:	08007811 	.word	0x08007811
 80077ac:	08007811 	.word	0x08007811
 80077b0:	08007811 	.word	0x08007811
 80077b4:	08007811 	.word	0x08007811
 80077b8:	08007811 	.word	0x08007811
 80077bc:	08007801 	.word	0x08007801
 80077c0:	08007811 	.word	0x08007811
 80077c4:	08007811 	.word	0x08007811
 80077c8:	08007811 	.word	0x08007811
 80077cc:	08007811 	.word	0x08007811
 80077d0:	08007811 	.word	0x08007811
 80077d4:	08007811 	.word	0x08007811
 80077d8:	08007811 	.word	0x08007811
 80077dc:	08007809 	.word	0x08007809
 80077e0:	2301      	movs	r3, #1
 80077e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077e6:	e326      	b.n	8007e36 <UART_SetConfig+0x7ae>
 80077e8:	2304      	movs	r3, #4
 80077ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077ee:	e322      	b.n	8007e36 <UART_SetConfig+0x7ae>
 80077f0:	2308      	movs	r3, #8
 80077f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077f6:	e31e      	b.n	8007e36 <UART_SetConfig+0x7ae>
 80077f8:	2310      	movs	r3, #16
 80077fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077fe:	e31a      	b.n	8007e36 <UART_SetConfig+0x7ae>
 8007800:	2320      	movs	r3, #32
 8007802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007806:	e316      	b.n	8007e36 <UART_SetConfig+0x7ae>
 8007808:	2340      	movs	r3, #64	; 0x40
 800780a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800780e:	e312      	b.n	8007e36 <UART_SetConfig+0x7ae>
 8007810:	2380      	movs	r3, #128	; 0x80
 8007812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007816:	e30e      	b.n	8007e36 <UART_SetConfig+0x7ae>
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a69      	ldr	r2, [pc, #420]	; (80079c4 <UART_SetConfig+0x33c>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d130      	bne.n	8007884 <UART_SetConfig+0x1fc>
 8007822:	4b67      	ldr	r3, [pc, #412]	; (80079c0 <UART_SetConfig+0x338>)
 8007824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007826:	f003 0307 	and.w	r3, r3, #7
 800782a:	2b05      	cmp	r3, #5
 800782c:	d826      	bhi.n	800787c <UART_SetConfig+0x1f4>
 800782e:	a201      	add	r2, pc, #4	; (adr r2, 8007834 <UART_SetConfig+0x1ac>)
 8007830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007834:	0800784d 	.word	0x0800784d
 8007838:	08007855 	.word	0x08007855
 800783c:	0800785d 	.word	0x0800785d
 8007840:	08007865 	.word	0x08007865
 8007844:	0800786d 	.word	0x0800786d
 8007848:	08007875 	.word	0x08007875
 800784c:	2300      	movs	r3, #0
 800784e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007852:	e2f0      	b.n	8007e36 <UART_SetConfig+0x7ae>
 8007854:	2304      	movs	r3, #4
 8007856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800785a:	e2ec      	b.n	8007e36 <UART_SetConfig+0x7ae>
 800785c:	2308      	movs	r3, #8
 800785e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007862:	e2e8      	b.n	8007e36 <UART_SetConfig+0x7ae>
 8007864:	2310      	movs	r3, #16
 8007866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800786a:	e2e4      	b.n	8007e36 <UART_SetConfig+0x7ae>
 800786c:	2320      	movs	r3, #32
 800786e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007872:	e2e0      	b.n	8007e36 <UART_SetConfig+0x7ae>
 8007874:	2340      	movs	r3, #64	; 0x40
 8007876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800787a:	e2dc      	b.n	8007e36 <UART_SetConfig+0x7ae>
 800787c:	2380      	movs	r3, #128	; 0x80
 800787e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007882:	e2d8      	b.n	8007e36 <UART_SetConfig+0x7ae>
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a4f      	ldr	r2, [pc, #316]	; (80079c8 <UART_SetConfig+0x340>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d130      	bne.n	80078f0 <UART_SetConfig+0x268>
 800788e:	4b4c      	ldr	r3, [pc, #304]	; (80079c0 <UART_SetConfig+0x338>)
 8007890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007892:	f003 0307 	and.w	r3, r3, #7
 8007896:	2b05      	cmp	r3, #5
 8007898:	d826      	bhi.n	80078e8 <UART_SetConfig+0x260>
 800789a:	a201      	add	r2, pc, #4	; (adr r2, 80078a0 <UART_SetConfig+0x218>)
 800789c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078a0:	080078b9 	.word	0x080078b9
 80078a4:	080078c1 	.word	0x080078c1
 80078a8:	080078c9 	.word	0x080078c9
 80078ac:	080078d1 	.word	0x080078d1
 80078b0:	080078d9 	.word	0x080078d9
 80078b4:	080078e1 	.word	0x080078e1
 80078b8:	2300      	movs	r3, #0
 80078ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078be:	e2ba      	b.n	8007e36 <UART_SetConfig+0x7ae>
 80078c0:	2304      	movs	r3, #4
 80078c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078c6:	e2b6      	b.n	8007e36 <UART_SetConfig+0x7ae>
 80078c8:	2308      	movs	r3, #8
 80078ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078ce:	e2b2      	b.n	8007e36 <UART_SetConfig+0x7ae>
 80078d0:	2310      	movs	r3, #16
 80078d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078d6:	e2ae      	b.n	8007e36 <UART_SetConfig+0x7ae>
 80078d8:	2320      	movs	r3, #32
 80078da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078de:	e2aa      	b.n	8007e36 <UART_SetConfig+0x7ae>
 80078e0:	2340      	movs	r3, #64	; 0x40
 80078e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078e6:	e2a6      	b.n	8007e36 <UART_SetConfig+0x7ae>
 80078e8:	2380      	movs	r3, #128	; 0x80
 80078ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078ee:	e2a2      	b.n	8007e36 <UART_SetConfig+0x7ae>
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a35      	ldr	r2, [pc, #212]	; (80079cc <UART_SetConfig+0x344>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d130      	bne.n	800795c <UART_SetConfig+0x2d4>
 80078fa:	4b31      	ldr	r3, [pc, #196]	; (80079c0 <UART_SetConfig+0x338>)
 80078fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078fe:	f003 0307 	and.w	r3, r3, #7
 8007902:	2b05      	cmp	r3, #5
 8007904:	d826      	bhi.n	8007954 <UART_SetConfig+0x2cc>
 8007906:	a201      	add	r2, pc, #4	; (adr r2, 800790c <UART_SetConfig+0x284>)
 8007908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800790c:	08007925 	.word	0x08007925
 8007910:	0800792d 	.word	0x0800792d
 8007914:	08007935 	.word	0x08007935
 8007918:	0800793d 	.word	0x0800793d
 800791c:	08007945 	.word	0x08007945
 8007920:	0800794d 	.word	0x0800794d
 8007924:	2300      	movs	r3, #0
 8007926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800792a:	e284      	b.n	8007e36 <UART_SetConfig+0x7ae>
 800792c:	2304      	movs	r3, #4
 800792e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007932:	e280      	b.n	8007e36 <UART_SetConfig+0x7ae>
 8007934:	2308      	movs	r3, #8
 8007936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800793a:	e27c      	b.n	8007e36 <UART_SetConfig+0x7ae>
 800793c:	2310      	movs	r3, #16
 800793e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007942:	e278      	b.n	8007e36 <UART_SetConfig+0x7ae>
 8007944:	2320      	movs	r3, #32
 8007946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800794a:	e274      	b.n	8007e36 <UART_SetConfig+0x7ae>
 800794c:	2340      	movs	r3, #64	; 0x40
 800794e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007952:	e270      	b.n	8007e36 <UART_SetConfig+0x7ae>
 8007954:	2380      	movs	r3, #128	; 0x80
 8007956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800795a:	e26c      	b.n	8007e36 <UART_SetConfig+0x7ae>
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a1b      	ldr	r2, [pc, #108]	; (80079d0 <UART_SetConfig+0x348>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d142      	bne.n	80079ec <UART_SetConfig+0x364>
 8007966:	4b16      	ldr	r3, [pc, #88]	; (80079c0 <UART_SetConfig+0x338>)
 8007968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800796a:	f003 0307 	and.w	r3, r3, #7
 800796e:	2b05      	cmp	r3, #5
 8007970:	d838      	bhi.n	80079e4 <UART_SetConfig+0x35c>
 8007972:	a201      	add	r2, pc, #4	; (adr r2, 8007978 <UART_SetConfig+0x2f0>)
 8007974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007978:	08007991 	.word	0x08007991
 800797c:	08007999 	.word	0x08007999
 8007980:	080079a1 	.word	0x080079a1
 8007984:	080079a9 	.word	0x080079a9
 8007988:	080079d5 	.word	0x080079d5
 800798c:	080079dd 	.word	0x080079dd
 8007990:	2300      	movs	r3, #0
 8007992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007996:	e24e      	b.n	8007e36 <UART_SetConfig+0x7ae>
 8007998:	2304      	movs	r3, #4
 800799a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800799e:	e24a      	b.n	8007e36 <UART_SetConfig+0x7ae>
 80079a0:	2308      	movs	r3, #8
 80079a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079a6:	e246      	b.n	8007e36 <UART_SetConfig+0x7ae>
 80079a8:	2310      	movs	r3, #16
 80079aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079ae:	e242      	b.n	8007e36 <UART_SetConfig+0x7ae>
 80079b0:	cfff69f3 	.word	0xcfff69f3
 80079b4:	58000c00 	.word	0x58000c00
 80079b8:	11fff4ff 	.word	0x11fff4ff
 80079bc:	40011000 	.word	0x40011000
 80079c0:	58024400 	.word	0x58024400
 80079c4:	40004400 	.word	0x40004400
 80079c8:	40004800 	.word	0x40004800
 80079cc:	40004c00 	.word	0x40004c00
 80079d0:	40005000 	.word	0x40005000
 80079d4:	2320      	movs	r3, #32
 80079d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079da:	e22c      	b.n	8007e36 <UART_SetConfig+0x7ae>
 80079dc:	2340      	movs	r3, #64	; 0x40
 80079de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079e2:	e228      	b.n	8007e36 <UART_SetConfig+0x7ae>
 80079e4:	2380      	movs	r3, #128	; 0x80
 80079e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079ea:	e224      	b.n	8007e36 <UART_SetConfig+0x7ae>
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4ab1      	ldr	r2, [pc, #708]	; (8007cb8 <UART_SetConfig+0x630>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d176      	bne.n	8007ae4 <UART_SetConfig+0x45c>
 80079f6:	4bb1      	ldr	r3, [pc, #708]	; (8007cbc <UART_SetConfig+0x634>)
 80079f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80079fe:	2b28      	cmp	r3, #40	; 0x28
 8007a00:	d86c      	bhi.n	8007adc <UART_SetConfig+0x454>
 8007a02:	a201      	add	r2, pc, #4	; (adr r2, 8007a08 <UART_SetConfig+0x380>)
 8007a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a08:	08007aad 	.word	0x08007aad
 8007a0c:	08007add 	.word	0x08007add
 8007a10:	08007add 	.word	0x08007add
 8007a14:	08007add 	.word	0x08007add
 8007a18:	08007add 	.word	0x08007add
 8007a1c:	08007add 	.word	0x08007add
 8007a20:	08007add 	.word	0x08007add
 8007a24:	08007add 	.word	0x08007add
 8007a28:	08007ab5 	.word	0x08007ab5
 8007a2c:	08007add 	.word	0x08007add
 8007a30:	08007add 	.word	0x08007add
 8007a34:	08007add 	.word	0x08007add
 8007a38:	08007add 	.word	0x08007add
 8007a3c:	08007add 	.word	0x08007add
 8007a40:	08007add 	.word	0x08007add
 8007a44:	08007add 	.word	0x08007add
 8007a48:	08007abd 	.word	0x08007abd
 8007a4c:	08007add 	.word	0x08007add
 8007a50:	08007add 	.word	0x08007add
 8007a54:	08007add 	.word	0x08007add
 8007a58:	08007add 	.word	0x08007add
 8007a5c:	08007add 	.word	0x08007add
 8007a60:	08007add 	.word	0x08007add
 8007a64:	08007add 	.word	0x08007add
 8007a68:	08007ac5 	.word	0x08007ac5
 8007a6c:	08007add 	.word	0x08007add
 8007a70:	08007add 	.word	0x08007add
 8007a74:	08007add 	.word	0x08007add
 8007a78:	08007add 	.word	0x08007add
 8007a7c:	08007add 	.word	0x08007add
 8007a80:	08007add 	.word	0x08007add
 8007a84:	08007add 	.word	0x08007add
 8007a88:	08007acd 	.word	0x08007acd
 8007a8c:	08007add 	.word	0x08007add
 8007a90:	08007add 	.word	0x08007add
 8007a94:	08007add 	.word	0x08007add
 8007a98:	08007add 	.word	0x08007add
 8007a9c:	08007add 	.word	0x08007add
 8007aa0:	08007add 	.word	0x08007add
 8007aa4:	08007add 	.word	0x08007add
 8007aa8:	08007ad5 	.word	0x08007ad5
 8007aac:	2301      	movs	r3, #1
 8007aae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ab2:	e1c0      	b.n	8007e36 <UART_SetConfig+0x7ae>
 8007ab4:	2304      	movs	r3, #4
 8007ab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aba:	e1bc      	b.n	8007e36 <UART_SetConfig+0x7ae>
 8007abc:	2308      	movs	r3, #8
 8007abe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ac2:	e1b8      	b.n	8007e36 <UART_SetConfig+0x7ae>
 8007ac4:	2310      	movs	r3, #16
 8007ac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007aca:	e1b4      	b.n	8007e36 <UART_SetConfig+0x7ae>
 8007acc:	2320      	movs	r3, #32
 8007ace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ad2:	e1b0      	b.n	8007e36 <UART_SetConfig+0x7ae>
 8007ad4:	2340      	movs	r3, #64	; 0x40
 8007ad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ada:	e1ac      	b.n	8007e36 <UART_SetConfig+0x7ae>
 8007adc:	2380      	movs	r3, #128	; 0x80
 8007ade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ae2:	e1a8      	b.n	8007e36 <UART_SetConfig+0x7ae>
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a75      	ldr	r2, [pc, #468]	; (8007cc0 <UART_SetConfig+0x638>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d130      	bne.n	8007b50 <UART_SetConfig+0x4c8>
 8007aee:	4b73      	ldr	r3, [pc, #460]	; (8007cbc <UART_SetConfig+0x634>)
 8007af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007af2:	f003 0307 	and.w	r3, r3, #7
 8007af6:	2b05      	cmp	r3, #5
 8007af8:	d826      	bhi.n	8007b48 <UART_SetConfig+0x4c0>
 8007afa:	a201      	add	r2, pc, #4	; (adr r2, 8007b00 <UART_SetConfig+0x478>)
 8007afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b00:	08007b19 	.word	0x08007b19
 8007b04:	08007b21 	.word	0x08007b21
 8007b08:	08007b29 	.word	0x08007b29
 8007b0c:	08007b31 	.word	0x08007b31
 8007b10:	08007b39 	.word	0x08007b39
 8007b14:	08007b41 	.word	0x08007b41
 8007b18:	2300      	movs	r3, #0
 8007b1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b1e:	e18a      	b.n	8007e36 <UART_SetConfig+0x7ae>
 8007b20:	2304      	movs	r3, #4
 8007b22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b26:	e186      	b.n	8007e36 <UART_SetConfig+0x7ae>
 8007b28:	2308      	movs	r3, #8
 8007b2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b2e:	e182      	b.n	8007e36 <UART_SetConfig+0x7ae>
 8007b30:	2310      	movs	r3, #16
 8007b32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b36:	e17e      	b.n	8007e36 <UART_SetConfig+0x7ae>
 8007b38:	2320      	movs	r3, #32
 8007b3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b3e:	e17a      	b.n	8007e36 <UART_SetConfig+0x7ae>
 8007b40:	2340      	movs	r3, #64	; 0x40
 8007b42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b46:	e176      	b.n	8007e36 <UART_SetConfig+0x7ae>
 8007b48:	2380      	movs	r3, #128	; 0x80
 8007b4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b4e:	e172      	b.n	8007e36 <UART_SetConfig+0x7ae>
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a5b      	ldr	r2, [pc, #364]	; (8007cc4 <UART_SetConfig+0x63c>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d130      	bne.n	8007bbc <UART_SetConfig+0x534>
 8007b5a:	4b58      	ldr	r3, [pc, #352]	; (8007cbc <UART_SetConfig+0x634>)
 8007b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b5e:	f003 0307 	and.w	r3, r3, #7
 8007b62:	2b05      	cmp	r3, #5
 8007b64:	d826      	bhi.n	8007bb4 <UART_SetConfig+0x52c>
 8007b66:	a201      	add	r2, pc, #4	; (adr r2, 8007b6c <UART_SetConfig+0x4e4>)
 8007b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b6c:	08007b85 	.word	0x08007b85
 8007b70:	08007b8d 	.word	0x08007b8d
 8007b74:	08007b95 	.word	0x08007b95
 8007b78:	08007b9d 	.word	0x08007b9d
 8007b7c:	08007ba5 	.word	0x08007ba5
 8007b80:	08007bad 	.word	0x08007bad
 8007b84:	2300      	movs	r3, #0
 8007b86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b8a:	e154      	b.n	8007e36 <UART_SetConfig+0x7ae>
 8007b8c:	2304      	movs	r3, #4
 8007b8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b92:	e150      	b.n	8007e36 <UART_SetConfig+0x7ae>
 8007b94:	2308      	movs	r3, #8
 8007b96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007b9a:	e14c      	b.n	8007e36 <UART_SetConfig+0x7ae>
 8007b9c:	2310      	movs	r3, #16
 8007b9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ba2:	e148      	b.n	8007e36 <UART_SetConfig+0x7ae>
 8007ba4:	2320      	movs	r3, #32
 8007ba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007baa:	e144      	b.n	8007e36 <UART_SetConfig+0x7ae>
 8007bac:	2340      	movs	r3, #64	; 0x40
 8007bae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bb2:	e140      	b.n	8007e36 <UART_SetConfig+0x7ae>
 8007bb4:	2380      	movs	r3, #128	; 0x80
 8007bb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007bba:	e13c      	b.n	8007e36 <UART_SetConfig+0x7ae>
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a41      	ldr	r2, [pc, #260]	; (8007cc8 <UART_SetConfig+0x640>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	f040 8082 	bne.w	8007ccc <UART_SetConfig+0x644>
 8007bc8:	4b3c      	ldr	r3, [pc, #240]	; (8007cbc <UART_SetConfig+0x634>)
 8007bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bcc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007bd0:	2b28      	cmp	r3, #40	; 0x28
 8007bd2:	d86d      	bhi.n	8007cb0 <UART_SetConfig+0x628>
 8007bd4:	a201      	add	r2, pc, #4	; (adr r2, 8007bdc <UART_SetConfig+0x554>)
 8007bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bda:	bf00      	nop
 8007bdc:	08007c81 	.word	0x08007c81
 8007be0:	08007cb1 	.word	0x08007cb1
 8007be4:	08007cb1 	.word	0x08007cb1
 8007be8:	08007cb1 	.word	0x08007cb1
 8007bec:	08007cb1 	.word	0x08007cb1
 8007bf0:	08007cb1 	.word	0x08007cb1
 8007bf4:	08007cb1 	.word	0x08007cb1
 8007bf8:	08007cb1 	.word	0x08007cb1
 8007bfc:	08007c89 	.word	0x08007c89
 8007c00:	08007cb1 	.word	0x08007cb1
 8007c04:	08007cb1 	.word	0x08007cb1
 8007c08:	08007cb1 	.word	0x08007cb1
 8007c0c:	08007cb1 	.word	0x08007cb1
 8007c10:	08007cb1 	.word	0x08007cb1
 8007c14:	08007cb1 	.word	0x08007cb1
 8007c18:	08007cb1 	.word	0x08007cb1
 8007c1c:	08007c91 	.word	0x08007c91
 8007c20:	08007cb1 	.word	0x08007cb1
 8007c24:	08007cb1 	.word	0x08007cb1
 8007c28:	08007cb1 	.word	0x08007cb1
 8007c2c:	08007cb1 	.word	0x08007cb1
 8007c30:	08007cb1 	.word	0x08007cb1
 8007c34:	08007cb1 	.word	0x08007cb1
 8007c38:	08007cb1 	.word	0x08007cb1
 8007c3c:	08007c99 	.word	0x08007c99
 8007c40:	08007cb1 	.word	0x08007cb1
 8007c44:	08007cb1 	.word	0x08007cb1
 8007c48:	08007cb1 	.word	0x08007cb1
 8007c4c:	08007cb1 	.word	0x08007cb1
 8007c50:	08007cb1 	.word	0x08007cb1
 8007c54:	08007cb1 	.word	0x08007cb1
 8007c58:	08007cb1 	.word	0x08007cb1
 8007c5c:	08007ca1 	.word	0x08007ca1
 8007c60:	08007cb1 	.word	0x08007cb1
 8007c64:	08007cb1 	.word	0x08007cb1
 8007c68:	08007cb1 	.word	0x08007cb1
 8007c6c:	08007cb1 	.word	0x08007cb1
 8007c70:	08007cb1 	.word	0x08007cb1
 8007c74:	08007cb1 	.word	0x08007cb1
 8007c78:	08007cb1 	.word	0x08007cb1
 8007c7c:	08007ca9 	.word	0x08007ca9
 8007c80:	2301      	movs	r3, #1
 8007c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c86:	e0d6      	b.n	8007e36 <UART_SetConfig+0x7ae>
 8007c88:	2304      	movs	r3, #4
 8007c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c8e:	e0d2      	b.n	8007e36 <UART_SetConfig+0x7ae>
 8007c90:	2308      	movs	r3, #8
 8007c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c96:	e0ce      	b.n	8007e36 <UART_SetConfig+0x7ae>
 8007c98:	2310      	movs	r3, #16
 8007c9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c9e:	e0ca      	b.n	8007e36 <UART_SetConfig+0x7ae>
 8007ca0:	2320      	movs	r3, #32
 8007ca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ca6:	e0c6      	b.n	8007e36 <UART_SetConfig+0x7ae>
 8007ca8:	2340      	movs	r3, #64	; 0x40
 8007caa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cae:	e0c2      	b.n	8007e36 <UART_SetConfig+0x7ae>
 8007cb0:	2380      	movs	r3, #128	; 0x80
 8007cb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cb6:	e0be      	b.n	8007e36 <UART_SetConfig+0x7ae>
 8007cb8:	40011400 	.word	0x40011400
 8007cbc:	58024400 	.word	0x58024400
 8007cc0:	40007800 	.word	0x40007800
 8007cc4:	40007c00 	.word	0x40007c00
 8007cc8:	40011800 	.word	0x40011800
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4aad      	ldr	r2, [pc, #692]	; (8007f88 <UART_SetConfig+0x900>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d176      	bne.n	8007dc4 <UART_SetConfig+0x73c>
 8007cd6:	4bad      	ldr	r3, [pc, #692]	; (8007f8c <UART_SetConfig+0x904>)
 8007cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007cde:	2b28      	cmp	r3, #40	; 0x28
 8007ce0:	d86c      	bhi.n	8007dbc <UART_SetConfig+0x734>
 8007ce2:	a201      	add	r2, pc, #4	; (adr r2, 8007ce8 <UART_SetConfig+0x660>)
 8007ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ce8:	08007d8d 	.word	0x08007d8d
 8007cec:	08007dbd 	.word	0x08007dbd
 8007cf0:	08007dbd 	.word	0x08007dbd
 8007cf4:	08007dbd 	.word	0x08007dbd
 8007cf8:	08007dbd 	.word	0x08007dbd
 8007cfc:	08007dbd 	.word	0x08007dbd
 8007d00:	08007dbd 	.word	0x08007dbd
 8007d04:	08007dbd 	.word	0x08007dbd
 8007d08:	08007d95 	.word	0x08007d95
 8007d0c:	08007dbd 	.word	0x08007dbd
 8007d10:	08007dbd 	.word	0x08007dbd
 8007d14:	08007dbd 	.word	0x08007dbd
 8007d18:	08007dbd 	.word	0x08007dbd
 8007d1c:	08007dbd 	.word	0x08007dbd
 8007d20:	08007dbd 	.word	0x08007dbd
 8007d24:	08007dbd 	.word	0x08007dbd
 8007d28:	08007d9d 	.word	0x08007d9d
 8007d2c:	08007dbd 	.word	0x08007dbd
 8007d30:	08007dbd 	.word	0x08007dbd
 8007d34:	08007dbd 	.word	0x08007dbd
 8007d38:	08007dbd 	.word	0x08007dbd
 8007d3c:	08007dbd 	.word	0x08007dbd
 8007d40:	08007dbd 	.word	0x08007dbd
 8007d44:	08007dbd 	.word	0x08007dbd
 8007d48:	08007da5 	.word	0x08007da5
 8007d4c:	08007dbd 	.word	0x08007dbd
 8007d50:	08007dbd 	.word	0x08007dbd
 8007d54:	08007dbd 	.word	0x08007dbd
 8007d58:	08007dbd 	.word	0x08007dbd
 8007d5c:	08007dbd 	.word	0x08007dbd
 8007d60:	08007dbd 	.word	0x08007dbd
 8007d64:	08007dbd 	.word	0x08007dbd
 8007d68:	08007dad 	.word	0x08007dad
 8007d6c:	08007dbd 	.word	0x08007dbd
 8007d70:	08007dbd 	.word	0x08007dbd
 8007d74:	08007dbd 	.word	0x08007dbd
 8007d78:	08007dbd 	.word	0x08007dbd
 8007d7c:	08007dbd 	.word	0x08007dbd
 8007d80:	08007dbd 	.word	0x08007dbd
 8007d84:	08007dbd 	.word	0x08007dbd
 8007d88:	08007db5 	.word	0x08007db5
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d92:	e050      	b.n	8007e36 <UART_SetConfig+0x7ae>
 8007d94:	2304      	movs	r3, #4
 8007d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d9a:	e04c      	b.n	8007e36 <UART_SetConfig+0x7ae>
 8007d9c:	2308      	movs	r3, #8
 8007d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007da2:	e048      	b.n	8007e36 <UART_SetConfig+0x7ae>
 8007da4:	2310      	movs	r3, #16
 8007da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007daa:	e044      	b.n	8007e36 <UART_SetConfig+0x7ae>
 8007dac:	2320      	movs	r3, #32
 8007dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007db2:	e040      	b.n	8007e36 <UART_SetConfig+0x7ae>
 8007db4:	2340      	movs	r3, #64	; 0x40
 8007db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dba:	e03c      	b.n	8007e36 <UART_SetConfig+0x7ae>
 8007dbc:	2380      	movs	r3, #128	; 0x80
 8007dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dc2:	e038      	b.n	8007e36 <UART_SetConfig+0x7ae>
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a71      	ldr	r2, [pc, #452]	; (8007f90 <UART_SetConfig+0x908>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d130      	bne.n	8007e30 <UART_SetConfig+0x7a8>
 8007dce:	4b6f      	ldr	r3, [pc, #444]	; (8007f8c <UART_SetConfig+0x904>)
 8007dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dd2:	f003 0307 	and.w	r3, r3, #7
 8007dd6:	2b05      	cmp	r3, #5
 8007dd8:	d826      	bhi.n	8007e28 <UART_SetConfig+0x7a0>
 8007dda:	a201      	add	r2, pc, #4	; (adr r2, 8007de0 <UART_SetConfig+0x758>)
 8007ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007de0:	08007df9 	.word	0x08007df9
 8007de4:	08007e01 	.word	0x08007e01
 8007de8:	08007e09 	.word	0x08007e09
 8007dec:	08007e11 	.word	0x08007e11
 8007df0:	08007e19 	.word	0x08007e19
 8007df4:	08007e21 	.word	0x08007e21
 8007df8:	2302      	movs	r3, #2
 8007dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dfe:	e01a      	b.n	8007e36 <UART_SetConfig+0x7ae>
 8007e00:	2304      	movs	r3, #4
 8007e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e06:	e016      	b.n	8007e36 <UART_SetConfig+0x7ae>
 8007e08:	2308      	movs	r3, #8
 8007e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e0e:	e012      	b.n	8007e36 <UART_SetConfig+0x7ae>
 8007e10:	2310      	movs	r3, #16
 8007e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e16:	e00e      	b.n	8007e36 <UART_SetConfig+0x7ae>
 8007e18:	2320      	movs	r3, #32
 8007e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e1e:	e00a      	b.n	8007e36 <UART_SetConfig+0x7ae>
 8007e20:	2340      	movs	r3, #64	; 0x40
 8007e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e26:	e006      	b.n	8007e36 <UART_SetConfig+0x7ae>
 8007e28:	2380      	movs	r3, #128	; 0x80
 8007e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e2e:	e002      	b.n	8007e36 <UART_SetConfig+0x7ae>
 8007e30:	2380      	movs	r3, #128	; 0x80
 8007e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a55      	ldr	r2, [pc, #340]	; (8007f90 <UART_SetConfig+0x908>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	f040 80f8 	bne.w	8008032 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e42:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007e46:	2b20      	cmp	r3, #32
 8007e48:	dc46      	bgt.n	8007ed8 <UART_SetConfig+0x850>
 8007e4a:	2b02      	cmp	r3, #2
 8007e4c:	db75      	blt.n	8007f3a <UART_SetConfig+0x8b2>
 8007e4e:	3b02      	subs	r3, #2
 8007e50:	2b1e      	cmp	r3, #30
 8007e52:	d872      	bhi.n	8007f3a <UART_SetConfig+0x8b2>
 8007e54:	a201      	add	r2, pc, #4	; (adr r2, 8007e5c <UART_SetConfig+0x7d4>)
 8007e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e5a:	bf00      	nop
 8007e5c:	08007edf 	.word	0x08007edf
 8007e60:	08007f3b 	.word	0x08007f3b
 8007e64:	08007ee7 	.word	0x08007ee7
 8007e68:	08007f3b 	.word	0x08007f3b
 8007e6c:	08007f3b 	.word	0x08007f3b
 8007e70:	08007f3b 	.word	0x08007f3b
 8007e74:	08007ef7 	.word	0x08007ef7
 8007e78:	08007f3b 	.word	0x08007f3b
 8007e7c:	08007f3b 	.word	0x08007f3b
 8007e80:	08007f3b 	.word	0x08007f3b
 8007e84:	08007f3b 	.word	0x08007f3b
 8007e88:	08007f3b 	.word	0x08007f3b
 8007e8c:	08007f3b 	.word	0x08007f3b
 8007e90:	08007f3b 	.word	0x08007f3b
 8007e94:	08007f07 	.word	0x08007f07
 8007e98:	08007f3b 	.word	0x08007f3b
 8007e9c:	08007f3b 	.word	0x08007f3b
 8007ea0:	08007f3b 	.word	0x08007f3b
 8007ea4:	08007f3b 	.word	0x08007f3b
 8007ea8:	08007f3b 	.word	0x08007f3b
 8007eac:	08007f3b 	.word	0x08007f3b
 8007eb0:	08007f3b 	.word	0x08007f3b
 8007eb4:	08007f3b 	.word	0x08007f3b
 8007eb8:	08007f3b 	.word	0x08007f3b
 8007ebc:	08007f3b 	.word	0x08007f3b
 8007ec0:	08007f3b 	.word	0x08007f3b
 8007ec4:	08007f3b 	.word	0x08007f3b
 8007ec8:	08007f3b 	.word	0x08007f3b
 8007ecc:	08007f3b 	.word	0x08007f3b
 8007ed0:	08007f3b 	.word	0x08007f3b
 8007ed4:	08007f2d 	.word	0x08007f2d
 8007ed8:	2b40      	cmp	r3, #64	; 0x40
 8007eda:	d02a      	beq.n	8007f32 <UART_SetConfig+0x8aa>
 8007edc:	e02d      	b.n	8007f3a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007ede:	f7fe f865 	bl	8005fac <HAL_RCCEx_GetD3PCLK1Freq>
 8007ee2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007ee4:	e02f      	b.n	8007f46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ee6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007eea:	4618      	mov	r0, r3
 8007eec:	f7fe f874 	bl	8005fd8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ef4:	e027      	b.n	8007f46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ef6:	f107 0318 	add.w	r3, r7, #24
 8007efa:	4618      	mov	r0, r3
 8007efc:	f7fe f9c0 	bl	8006280 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007f00:	69fb      	ldr	r3, [r7, #28]
 8007f02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f04:	e01f      	b.n	8007f46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f06:	4b21      	ldr	r3, [pc, #132]	; (8007f8c <UART_SetConfig+0x904>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f003 0320 	and.w	r3, r3, #32
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d009      	beq.n	8007f26 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007f12:	4b1e      	ldr	r3, [pc, #120]	; (8007f8c <UART_SetConfig+0x904>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	08db      	lsrs	r3, r3, #3
 8007f18:	f003 0303 	and.w	r3, r3, #3
 8007f1c:	4a1d      	ldr	r2, [pc, #116]	; (8007f94 <UART_SetConfig+0x90c>)
 8007f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8007f22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007f24:	e00f      	b.n	8007f46 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007f26:	4b1b      	ldr	r3, [pc, #108]	; (8007f94 <UART_SetConfig+0x90c>)
 8007f28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f2a:	e00c      	b.n	8007f46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007f2c:	4b1a      	ldr	r3, [pc, #104]	; (8007f98 <UART_SetConfig+0x910>)
 8007f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f30:	e009      	b.n	8007f46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f38:	e005      	b.n	8007f46 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007f44:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007f46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	f000 81ee 	beq.w	800832a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f52:	4a12      	ldr	r2, [pc, #72]	; (8007f9c <UART_SetConfig+0x914>)
 8007f54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f58:	461a      	mov	r2, r3
 8007f5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f60:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	685a      	ldr	r2, [r3, #4]
 8007f66:	4613      	mov	r3, r2
 8007f68:	005b      	lsls	r3, r3, #1
 8007f6a:	4413      	add	r3, r2
 8007f6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d305      	bcc.n	8007f7e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d910      	bls.n	8007fa0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007f84:	e1d1      	b.n	800832a <UART_SetConfig+0xca2>
 8007f86:	bf00      	nop
 8007f88:	40011c00 	.word	0x40011c00
 8007f8c:	58024400 	.word	0x58024400
 8007f90:	58000c00 	.word	0x58000c00
 8007f94:	03d09000 	.word	0x03d09000
 8007f98:	003d0900 	.word	0x003d0900
 8007f9c:	08009fcc 	.word	0x08009fcc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	60bb      	str	r3, [r7, #8]
 8007fa6:	60fa      	str	r2, [r7, #12]
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fac:	4ac0      	ldr	r2, [pc, #768]	; (80082b0 <UART_SetConfig+0xc28>)
 8007fae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	603b      	str	r3, [r7, #0]
 8007fb8:	607a      	str	r2, [r7, #4]
 8007fba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fbe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007fc2:	f7f8 f9a5 	bl	8000310 <__aeabi_uldivmod>
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	460b      	mov	r3, r1
 8007fca:	4610      	mov	r0, r2
 8007fcc:	4619      	mov	r1, r3
 8007fce:	f04f 0200 	mov.w	r2, #0
 8007fd2:	f04f 0300 	mov.w	r3, #0
 8007fd6:	020b      	lsls	r3, r1, #8
 8007fd8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007fdc:	0202      	lsls	r2, r0, #8
 8007fde:	6979      	ldr	r1, [r7, #20]
 8007fe0:	6849      	ldr	r1, [r1, #4]
 8007fe2:	0849      	lsrs	r1, r1, #1
 8007fe4:	2000      	movs	r0, #0
 8007fe6:	460c      	mov	r4, r1
 8007fe8:	4605      	mov	r5, r0
 8007fea:	eb12 0804 	adds.w	r8, r2, r4
 8007fee:	eb43 0905 	adc.w	r9, r3, r5
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	469a      	mov	sl, r3
 8007ffa:	4693      	mov	fp, r2
 8007ffc:	4652      	mov	r2, sl
 8007ffe:	465b      	mov	r3, fp
 8008000:	4640      	mov	r0, r8
 8008002:	4649      	mov	r1, r9
 8008004:	f7f8 f984 	bl	8000310 <__aeabi_uldivmod>
 8008008:	4602      	mov	r2, r0
 800800a:	460b      	mov	r3, r1
 800800c:	4613      	mov	r3, r2
 800800e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008012:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008016:	d308      	bcc.n	800802a <UART_SetConfig+0x9a2>
 8008018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800801a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800801e:	d204      	bcs.n	800802a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008026:	60da      	str	r2, [r3, #12]
 8008028:	e17f      	b.n	800832a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800802a:	2301      	movs	r3, #1
 800802c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008030:	e17b      	b.n	800832a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	69db      	ldr	r3, [r3, #28]
 8008036:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800803a:	f040 80bd 	bne.w	80081b8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800803e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008042:	2b20      	cmp	r3, #32
 8008044:	dc48      	bgt.n	80080d8 <UART_SetConfig+0xa50>
 8008046:	2b00      	cmp	r3, #0
 8008048:	db7b      	blt.n	8008142 <UART_SetConfig+0xaba>
 800804a:	2b20      	cmp	r3, #32
 800804c:	d879      	bhi.n	8008142 <UART_SetConfig+0xaba>
 800804e:	a201      	add	r2, pc, #4	; (adr r2, 8008054 <UART_SetConfig+0x9cc>)
 8008050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008054:	080080df 	.word	0x080080df
 8008058:	080080e7 	.word	0x080080e7
 800805c:	08008143 	.word	0x08008143
 8008060:	08008143 	.word	0x08008143
 8008064:	080080ef 	.word	0x080080ef
 8008068:	08008143 	.word	0x08008143
 800806c:	08008143 	.word	0x08008143
 8008070:	08008143 	.word	0x08008143
 8008074:	080080ff 	.word	0x080080ff
 8008078:	08008143 	.word	0x08008143
 800807c:	08008143 	.word	0x08008143
 8008080:	08008143 	.word	0x08008143
 8008084:	08008143 	.word	0x08008143
 8008088:	08008143 	.word	0x08008143
 800808c:	08008143 	.word	0x08008143
 8008090:	08008143 	.word	0x08008143
 8008094:	0800810f 	.word	0x0800810f
 8008098:	08008143 	.word	0x08008143
 800809c:	08008143 	.word	0x08008143
 80080a0:	08008143 	.word	0x08008143
 80080a4:	08008143 	.word	0x08008143
 80080a8:	08008143 	.word	0x08008143
 80080ac:	08008143 	.word	0x08008143
 80080b0:	08008143 	.word	0x08008143
 80080b4:	08008143 	.word	0x08008143
 80080b8:	08008143 	.word	0x08008143
 80080bc:	08008143 	.word	0x08008143
 80080c0:	08008143 	.word	0x08008143
 80080c4:	08008143 	.word	0x08008143
 80080c8:	08008143 	.word	0x08008143
 80080cc:	08008143 	.word	0x08008143
 80080d0:	08008143 	.word	0x08008143
 80080d4:	08008135 	.word	0x08008135
 80080d8:	2b40      	cmp	r3, #64	; 0x40
 80080da:	d02e      	beq.n	800813a <UART_SetConfig+0xab2>
 80080dc:	e031      	b.n	8008142 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080de:	f7fc fd99 	bl	8004c14 <HAL_RCC_GetPCLK1Freq>
 80080e2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80080e4:	e033      	b.n	800814e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80080e6:	f7fc fdab 	bl	8004c40 <HAL_RCC_GetPCLK2Freq>
 80080ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80080ec:	e02f      	b.n	800814e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080f2:	4618      	mov	r0, r3
 80080f4:	f7fd ff70 	bl	8005fd8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80080f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080fc:	e027      	b.n	800814e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080fe:	f107 0318 	add.w	r3, r7, #24
 8008102:	4618      	mov	r0, r3
 8008104:	f7fe f8bc 	bl	8006280 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008108:	69fb      	ldr	r3, [r7, #28]
 800810a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800810c:	e01f      	b.n	800814e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800810e:	4b69      	ldr	r3, [pc, #420]	; (80082b4 <UART_SetConfig+0xc2c>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f003 0320 	and.w	r3, r3, #32
 8008116:	2b00      	cmp	r3, #0
 8008118:	d009      	beq.n	800812e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800811a:	4b66      	ldr	r3, [pc, #408]	; (80082b4 <UART_SetConfig+0xc2c>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	08db      	lsrs	r3, r3, #3
 8008120:	f003 0303 	and.w	r3, r3, #3
 8008124:	4a64      	ldr	r2, [pc, #400]	; (80082b8 <UART_SetConfig+0xc30>)
 8008126:	fa22 f303 	lsr.w	r3, r2, r3
 800812a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800812c:	e00f      	b.n	800814e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800812e:	4b62      	ldr	r3, [pc, #392]	; (80082b8 <UART_SetConfig+0xc30>)
 8008130:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008132:	e00c      	b.n	800814e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008134:	4b61      	ldr	r3, [pc, #388]	; (80082bc <UART_SetConfig+0xc34>)
 8008136:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008138:	e009      	b.n	800814e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800813a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800813e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008140:	e005      	b.n	800814e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8008142:	2300      	movs	r3, #0
 8008144:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008146:	2301      	movs	r3, #1
 8008148:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800814c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800814e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008150:	2b00      	cmp	r3, #0
 8008152:	f000 80ea 	beq.w	800832a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800815a:	4a55      	ldr	r2, [pc, #340]	; (80082b0 <UART_SetConfig+0xc28>)
 800815c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008160:	461a      	mov	r2, r3
 8008162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008164:	fbb3 f3f2 	udiv	r3, r3, r2
 8008168:	005a      	lsls	r2, r3, #1
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	085b      	lsrs	r3, r3, #1
 8008170:	441a      	add	r2, r3
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	fbb2 f3f3 	udiv	r3, r2, r3
 800817a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800817c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800817e:	2b0f      	cmp	r3, #15
 8008180:	d916      	bls.n	80081b0 <UART_SetConfig+0xb28>
 8008182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008188:	d212      	bcs.n	80081b0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800818a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800818c:	b29b      	uxth	r3, r3
 800818e:	f023 030f 	bic.w	r3, r3, #15
 8008192:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008196:	085b      	lsrs	r3, r3, #1
 8008198:	b29b      	uxth	r3, r3
 800819a:	f003 0307 	and.w	r3, r3, #7
 800819e:	b29a      	uxth	r2, r3
 80081a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80081a2:	4313      	orrs	r3, r2
 80081a4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80081ac:	60da      	str	r2, [r3, #12]
 80081ae:	e0bc      	b.n	800832a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80081b0:	2301      	movs	r3, #1
 80081b2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80081b6:	e0b8      	b.n	800832a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80081b8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80081bc:	2b20      	cmp	r3, #32
 80081be:	dc4b      	bgt.n	8008258 <UART_SetConfig+0xbd0>
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	f2c0 8087 	blt.w	80082d4 <UART_SetConfig+0xc4c>
 80081c6:	2b20      	cmp	r3, #32
 80081c8:	f200 8084 	bhi.w	80082d4 <UART_SetConfig+0xc4c>
 80081cc:	a201      	add	r2, pc, #4	; (adr r2, 80081d4 <UART_SetConfig+0xb4c>)
 80081ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081d2:	bf00      	nop
 80081d4:	0800825f 	.word	0x0800825f
 80081d8:	08008267 	.word	0x08008267
 80081dc:	080082d5 	.word	0x080082d5
 80081e0:	080082d5 	.word	0x080082d5
 80081e4:	0800826f 	.word	0x0800826f
 80081e8:	080082d5 	.word	0x080082d5
 80081ec:	080082d5 	.word	0x080082d5
 80081f0:	080082d5 	.word	0x080082d5
 80081f4:	0800827f 	.word	0x0800827f
 80081f8:	080082d5 	.word	0x080082d5
 80081fc:	080082d5 	.word	0x080082d5
 8008200:	080082d5 	.word	0x080082d5
 8008204:	080082d5 	.word	0x080082d5
 8008208:	080082d5 	.word	0x080082d5
 800820c:	080082d5 	.word	0x080082d5
 8008210:	080082d5 	.word	0x080082d5
 8008214:	0800828f 	.word	0x0800828f
 8008218:	080082d5 	.word	0x080082d5
 800821c:	080082d5 	.word	0x080082d5
 8008220:	080082d5 	.word	0x080082d5
 8008224:	080082d5 	.word	0x080082d5
 8008228:	080082d5 	.word	0x080082d5
 800822c:	080082d5 	.word	0x080082d5
 8008230:	080082d5 	.word	0x080082d5
 8008234:	080082d5 	.word	0x080082d5
 8008238:	080082d5 	.word	0x080082d5
 800823c:	080082d5 	.word	0x080082d5
 8008240:	080082d5 	.word	0x080082d5
 8008244:	080082d5 	.word	0x080082d5
 8008248:	080082d5 	.word	0x080082d5
 800824c:	080082d5 	.word	0x080082d5
 8008250:	080082d5 	.word	0x080082d5
 8008254:	080082c7 	.word	0x080082c7
 8008258:	2b40      	cmp	r3, #64	; 0x40
 800825a:	d037      	beq.n	80082cc <UART_SetConfig+0xc44>
 800825c:	e03a      	b.n	80082d4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800825e:	f7fc fcd9 	bl	8004c14 <HAL_RCC_GetPCLK1Freq>
 8008262:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008264:	e03c      	b.n	80082e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008266:	f7fc fceb 	bl	8004c40 <HAL_RCC_GetPCLK2Freq>
 800826a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800826c:	e038      	b.n	80082e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800826e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008272:	4618      	mov	r0, r3
 8008274:	f7fd feb0 	bl	8005fd8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800827a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800827c:	e030      	b.n	80082e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800827e:	f107 0318 	add.w	r3, r7, #24
 8008282:	4618      	mov	r0, r3
 8008284:	f7fd fffc 	bl	8006280 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008288:	69fb      	ldr	r3, [r7, #28]
 800828a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800828c:	e028      	b.n	80082e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800828e:	4b09      	ldr	r3, [pc, #36]	; (80082b4 <UART_SetConfig+0xc2c>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f003 0320 	and.w	r3, r3, #32
 8008296:	2b00      	cmp	r3, #0
 8008298:	d012      	beq.n	80082c0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800829a:	4b06      	ldr	r3, [pc, #24]	; (80082b4 <UART_SetConfig+0xc2c>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	08db      	lsrs	r3, r3, #3
 80082a0:	f003 0303 	and.w	r3, r3, #3
 80082a4:	4a04      	ldr	r2, [pc, #16]	; (80082b8 <UART_SetConfig+0xc30>)
 80082a6:	fa22 f303 	lsr.w	r3, r2, r3
 80082aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80082ac:	e018      	b.n	80082e0 <UART_SetConfig+0xc58>
 80082ae:	bf00      	nop
 80082b0:	08009fcc 	.word	0x08009fcc
 80082b4:	58024400 	.word	0x58024400
 80082b8:	03d09000 	.word	0x03d09000
 80082bc:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80082c0:	4b24      	ldr	r3, [pc, #144]	; (8008354 <UART_SetConfig+0xccc>)
 80082c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082c4:	e00c      	b.n	80082e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80082c6:	4b24      	ldr	r3, [pc, #144]	; (8008358 <UART_SetConfig+0xcd0>)
 80082c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082ca:	e009      	b.n	80082e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082d2:	e005      	b.n	80082e0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80082d4:	2300      	movs	r3, #0
 80082d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80082d8:	2301      	movs	r3, #1
 80082da:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80082de:	bf00      	nop
    }

    if (pclk != 0U)
 80082e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d021      	beq.n	800832a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ea:	4a1c      	ldr	r2, [pc, #112]	; (800835c <UART_SetConfig+0xcd4>)
 80082ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082f0:	461a      	mov	r2, r3
 80082f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082f4:	fbb3 f2f2 	udiv	r2, r3, r2
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	085b      	lsrs	r3, r3, #1
 80082fe:	441a      	add	r2, r3
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	fbb2 f3f3 	udiv	r3, r2, r3
 8008308:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800830a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800830c:	2b0f      	cmp	r3, #15
 800830e:	d909      	bls.n	8008324 <UART_SetConfig+0xc9c>
 8008310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008312:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008316:	d205      	bcs.n	8008324 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800831a:	b29a      	uxth	r2, r3
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	60da      	str	r2, [r3, #12]
 8008322:	e002      	b.n	800832a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008324:	2301      	movs	r3, #1
 8008326:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	2201      	movs	r2, #1
 800832e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	2201      	movs	r2, #1
 8008336:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	2200      	movs	r2, #0
 800833e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	2200      	movs	r2, #0
 8008344:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008346:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800834a:	4618      	mov	r0, r3
 800834c:	3748      	adds	r7, #72	; 0x48
 800834e:	46bd      	mov	sp, r7
 8008350:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008354:	03d09000 	.word	0x03d09000
 8008358:	003d0900 	.word	0x003d0900
 800835c:	08009fcc 	.word	0x08009fcc

08008360 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008360:	b480      	push	{r7}
 8008362:	b083      	sub	sp, #12
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800836c:	f003 0308 	and.w	r3, r3, #8
 8008370:	2b00      	cmp	r3, #0
 8008372:	d00a      	beq.n	800838a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	430a      	orrs	r2, r1
 8008388:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800838e:	f003 0301 	and.w	r3, r3, #1
 8008392:	2b00      	cmp	r3, #0
 8008394:	d00a      	beq.n	80083ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	430a      	orrs	r2, r1
 80083aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083b0:	f003 0302 	and.w	r3, r3, #2
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d00a      	beq.n	80083ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	430a      	orrs	r2, r1
 80083cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083d2:	f003 0304 	and.w	r3, r3, #4
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d00a      	beq.n	80083f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	430a      	orrs	r2, r1
 80083ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083f4:	f003 0310 	and.w	r3, r3, #16
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d00a      	beq.n	8008412 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	689b      	ldr	r3, [r3, #8]
 8008402:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	430a      	orrs	r2, r1
 8008410:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008416:	f003 0320 	and.w	r3, r3, #32
 800841a:	2b00      	cmp	r3, #0
 800841c:	d00a      	beq.n	8008434 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	689b      	ldr	r3, [r3, #8]
 8008424:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	430a      	orrs	r2, r1
 8008432:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800843c:	2b00      	cmp	r3, #0
 800843e:	d01a      	beq.n	8008476 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	430a      	orrs	r2, r1
 8008454:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800845a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800845e:	d10a      	bne.n	8008476 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	430a      	orrs	r2, r1
 8008474:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800847a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800847e:	2b00      	cmp	r3, #0
 8008480:	d00a      	beq.n	8008498 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	430a      	orrs	r2, r1
 8008496:	605a      	str	r2, [r3, #4]
  }
}
 8008498:	bf00      	nop
 800849a:	370c      	adds	r7, #12
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr

080084a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b098      	sub	sp, #96	; 0x60
 80084a8:	af02      	add	r7, sp, #8
 80084aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2200      	movs	r2, #0
 80084b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80084b4:	f7fa fb44 	bl	8002b40 <HAL_GetTick>
 80084b8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f003 0308 	and.w	r3, r3, #8
 80084c4:	2b08      	cmp	r3, #8
 80084c6:	d12f      	bne.n	8008528 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80084cc:	9300      	str	r3, [sp, #0]
 80084ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084d0:	2200      	movs	r2, #0
 80084d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f000 f88e 	bl	80085f8 <UART_WaitOnFlagUntilTimeout>
 80084dc:	4603      	mov	r3, r0
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d022      	beq.n	8008528 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ea:	e853 3f00 	ldrex	r3, [r3]
 80084ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80084f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084f6:	653b      	str	r3, [r7, #80]	; 0x50
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	461a      	mov	r2, r3
 80084fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008500:	647b      	str	r3, [r7, #68]	; 0x44
 8008502:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008504:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008506:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008508:	e841 2300 	strex	r3, r2, [r1]
 800850c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800850e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008510:	2b00      	cmp	r3, #0
 8008512:	d1e6      	bne.n	80084e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2220      	movs	r2, #32
 8008518:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2200      	movs	r2, #0
 8008520:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008524:	2303      	movs	r3, #3
 8008526:	e063      	b.n	80085f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f003 0304 	and.w	r3, r3, #4
 8008532:	2b04      	cmp	r3, #4
 8008534:	d149      	bne.n	80085ca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008536:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800853a:	9300      	str	r3, [sp, #0]
 800853c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800853e:	2200      	movs	r2, #0
 8008540:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f000 f857 	bl	80085f8 <UART_WaitOnFlagUntilTimeout>
 800854a:	4603      	mov	r3, r0
 800854c:	2b00      	cmp	r3, #0
 800854e:	d03c      	beq.n	80085ca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008558:	e853 3f00 	ldrex	r3, [r3]
 800855c:	623b      	str	r3, [r7, #32]
   return(result);
 800855e:	6a3b      	ldr	r3, [r7, #32]
 8008560:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008564:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	461a      	mov	r2, r3
 800856c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800856e:	633b      	str	r3, [r7, #48]	; 0x30
 8008570:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008572:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008574:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008576:	e841 2300 	strex	r3, r2, [r1]
 800857a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800857c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800857e:	2b00      	cmp	r3, #0
 8008580:	d1e6      	bne.n	8008550 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	3308      	adds	r3, #8
 8008588:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	e853 3f00 	ldrex	r3, [r3]
 8008590:	60fb      	str	r3, [r7, #12]
   return(result);
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f023 0301 	bic.w	r3, r3, #1
 8008598:	64bb      	str	r3, [r7, #72]	; 0x48
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	3308      	adds	r3, #8
 80085a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80085a2:	61fa      	str	r2, [r7, #28]
 80085a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a6:	69b9      	ldr	r1, [r7, #24]
 80085a8:	69fa      	ldr	r2, [r7, #28]
 80085aa:	e841 2300 	strex	r3, r2, [r1]
 80085ae:	617b      	str	r3, [r7, #20]
   return(result);
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d1e5      	bne.n	8008582 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2220      	movs	r2, #32
 80085ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2200      	movs	r2, #0
 80085c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085c6:	2303      	movs	r3, #3
 80085c8:	e012      	b.n	80085f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2220      	movs	r2, #32
 80085ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2220      	movs	r2, #32
 80085d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2200      	movs	r2, #0
 80085de:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2200      	movs	r2, #0
 80085ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80085ee:	2300      	movs	r3, #0
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3758      	adds	r7, #88	; 0x58
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}

080085f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b084      	sub	sp, #16
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	60f8      	str	r0, [r7, #12]
 8008600:	60b9      	str	r1, [r7, #8]
 8008602:	603b      	str	r3, [r7, #0]
 8008604:	4613      	mov	r3, r2
 8008606:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008608:	e04f      	b.n	80086aa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800860a:	69bb      	ldr	r3, [r7, #24]
 800860c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008610:	d04b      	beq.n	80086aa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008612:	f7fa fa95 	bl	8002b40 <HAL_GetTick>
 8008616:	4602      	mov	r2, r0
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	1ad3      	subs	r3, r2, r3
 800861c:	69ba      	ldr	r2, [r7, #24]
 800861e:	429a      	cmp	r2, r3
 8008620:	d302      	bcc.n	8008628 <UART_WaitOnFlagUntilTimeout+0x30>
 8008622:	69bb      	ldr	r3, [r7, #24]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d101      	bne.n	800862c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008628:	2303      	movs	r3, #3
 800862a:	e04e      	b.n	80086ca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f003 0304 	and.w	r3, r3, #4
 8008636:	2b00      	cmp	r3, #0
 8008638:	d037      	beq.n	80086aa <UART_WaitOnFlagUntilTimeout+0xb2>
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	2b80      	cmp	r3, #128	; 0x80
 800863e:	d034      	beq.n	80086aa <UART_WaitOnFlagUntilTimeout+0xb2>
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	2b40      	cmp	r3, #64	; 0x40
 8008644:	d031      	beq.n	80086aa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	69db      	ldr	r3, [r3, #28]
 800864c:	f003 0308 	and.w	r3, r3, #8
 8008650:	2b08      	cmp	r3, #8
 8008652:	d110      	bne.n	8008676 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	2208      	movs	r2, #8
 800865a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800865c:	68f8      	ldr	r0, [r7, #12]
 800865e:	f000 f839 	bl	80086d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2208      	movs	r2, #8
 8008666:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2200      	movs	r2, #0
 800866e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8008672:	2301      	movs	r3, #1
 8008674:	e029      	b.n	80086ca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	69db      	ldr	r3, [r3, #28]
 800867c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008680:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008684:	d111      	bne.n	80086aa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800868e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008690:	68f8      	ldr	r0, [r7, #12]
 8008692:	f000 f81f 	bl	80086d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2220      	movs	r2, #32
 800869a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2200      	movs	r2, #0
 80086a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80086a6:	2303      	movs	r3, #3
 80086a8:	e00f      	b.n	80086ca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	69da      	ldr	r2, [r3, #28]
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	4013      	ands	r3, r2
 80086b4:	68ba      	ldr	r2, [r7, #8]
 80086b6:	429a      	cmp	r2, r3
 80086b8:	bf0c      	ite	eq
 80086ba:	2301      	moveq	r3, #1
 80086bc:	2300      	movne	r3, #0
 80086be:	b2db      	uxtb	r3, r3
 80086c0:	461a      	mov	r2, r3
 80086c2:	79fb      	ldrb	r3, [r7, #7]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d0a0      	beq.n	800860a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80086c8:	2300      	movs	r3, #0
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3710      	adds	r7, #16
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
	...

080086d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b095      	sub	sp, #84	; 0x54
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086e4:	e853 3f00 	ldrex	r3, [r3]
 80086e8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80086ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80086f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	461a      	mov	r2, r3
 80086f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086fa:	643b      	str	r3, [r7, #64]	; 0x40
 80086fc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008700:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008702:	e841 2300 	strex	r3, r2, [r1]
 8008706:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800870a:	2b00      	cmp	r3, #0
 800870c:	d1e6      	bne.n	80086dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	3308      	adds	r3, #8
 8008714:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008716:	6a3b      	ldr	r3, [r7, #32]
 8008718:	e853 3f00 	ldrex	r3, [r3]
 800871c:	61fb      	str	r3, [r7, #28]
   return(result);
 800871e:	69fa      	ldr	r2, [r7, #28]
 8008720:	4b1e      	ldr	r3, [pc, #120]	; (800879c <UART_EndRxTransfer+0xc8>)
 8008722:	4013      	ands	r3, r2
 8008724:	64bb      	str	r3, [r7, #72]	; 0x48
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	3308      	adds	r3, #8
 800872c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800872e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008730:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008732:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008734:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008736:	e841 2300 	strex	r3, r2, [r1]
 800873a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800873c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873e:	2b00      	cmp	r3, #0
 8008740:	d1e5      	bne.n	800870e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008746:	2b01      	cmp	r3, #1
 8008748:	d118      	bne.n	800877c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	e853 3f00 	ldrex	r3, [r3]
 8008756:	60bb      	str	r3, [r7, #8]
   return(result);
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	f023 0310 	bic.w	r3, r3, #16
 800875e:	647b      	str	r3, [r7, #68]	; 0x44
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	461a      	mov	r2, r3
 8008766:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008768:	61bb      	str	r3, [r7, #24]
 800876a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800876c:	6979      	ldr	r1, [r7, #20]
 800876e:	69ba      	ldr	r2, [r7, #24]
 8008770:	e841 2300 	strex	r3, r2, [r1]
 8008774:	613b      	str	r3, [r7, #16]
   return(result);
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d1e6      	bne.n	800874a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2220      	movs	r2, #32
 8008780:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2200      	movs	r2, #0
 8008788:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2200      	movs	r2, #0
 800878e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008790:	bf00      	nop
 8008792:	3754      	adds	r7, #84	; 0x54
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr
 800879c:	effffffe 	.word	0xeffffffe

080087a0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b085      	sub	sp, #20
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80087ae:	2b01      	cmp	r3, #1
 80087b0:	d101      	bne.n	80087b6 <HAL_UARTEx_DisableFifoMode+0x16>
 80087b2:	2302      	movs	r3, #2
 80087b4:	e027      	b.n	8008806 <HAL_UARTEx_DisableFifoMode+0x66>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2201      	movs	r2, #1
 80087ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2224      	movs	r2, #36	; 0x24
 80087c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	681a      	ldr	r2, [r3, #0]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f022 0201 	bic.w	r2, r2, #1
 80087dc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80087e4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2200      	movs	r2, #0
 80087ea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	68fa      	ldr	r2, [r7, #12]
 80087f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2220      	movs	r2, #32
 80087f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2200      	movs	r2, #0
 8008800:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008804:	2300      	movs	r3, #0
}
 8008806:	4618      	mov	r0, r3
 8008808:	3714      	adds	r7, #20
 800880a:	46bd      	mov	sp, r7
 800880c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008810:	4770      	bx	lr

08008812 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008812:	b580      	push	{r7, lr}
 8008814:	b084      	sub	sp, #16
 8008816:	af00      	add	r7, sp, #0
 8008818:	6078      	str	r0, [r7, #4]
 800881a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008822:	2b01      	cmp	r3, #1
 8008824:	d101      	bne.n	800882a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008826:	2302      	movs	r3, #2
 8008828:	e02d      	b.n	8008886 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2201      	movs	r2, #1
 800882e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2224      	movs	r2, #36	; 0x24
 8008836:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	681a      	ldr	r2, [r3, #0]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f022 0201 	bic.w	r2, r2, #1
 8008850:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	689b      	ldr	r3, [r3, #8]
 8008858:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	683a      	ldr	r2, [r7, #0]
 8008862:	430a      	orrs	r2, r1
 8008864:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f000 f850 	bl	800890c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	68fa      	ldr	r2, [r7, #12]
 8008872:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2220      	movs	r2, #32
 8008878:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2200      	movs	r2, #0
 8008880:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008884:	2300      	movs	r3, #0
}
 8008886:	4618      	mov	r0, r3
 8008888:	3710      	adds	r7, #16
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}

0800888e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800888e:	b580      	push	{r7, lr}
 8008890:	b084      	sub	sp, #16
 8008892:	af00      	add	r7, sp, #0
 8008894:	6078      	str	r0, [r7, #4]
 8008896:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800889e:	2b01      	cmp	r3, #1
 80088a0:	d101      	bne.n	80088a6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80088a2:	2302      	movs	r3, #2
 80088a4:	e02d      	b.n	8008902 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2201      	movs	r2, #1
 80088aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2224      	movs	r2, #36	; 0x24
 80088b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	681a      	ldr	r2, [r3, #0]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f022 0201 	bic.w	r2, r2, #1
 80088cc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	683a      	ldr	r2, [r7, #0]
 80088de:	430a      	orrs	r2, r1
 80088e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f000 f812 	bl	800890c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	68fa      	ldr	r2, [r7, #12]
 80088ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2220      	movs	r2, #32
 80088f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2200      	movs	r2, #0
 80088fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008900:	2300      	movs	r3, #0
}
 8008902:	4618      	mov	r0, r3
 8008904:	3710      	adds	r7, #16
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}
	...

0800890c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800890c:	b480      	push	{r7}
 800890e:	b085      	sub	sp, #20
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008918:	2b00      	cmp	r3, #0
 800891a:	d108      	bne.n	800892e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2201      	movs	r2, #1
 8008920:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2201      	movs	r2, #1
 8008928:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800892c:	e031      	b.n	8008992 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800892e:	2310      	movs	r3, #16
 8008930:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008932:	2310      	movs	r3, #16
 8008934:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	689b      	ldr	r3, [r3, #8]
 800893c:	0e5b      	lsrs	r3, r3, #25
 800893e:	b2db      	uxtb	r3, r3
 8008940:	f003 0307 	and.w	r3, r3, #7
 8008944:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	0f5b      	lsrs	r3, r3, #29
 800894e:	b2db      	uxtb	r3, r3
 8008950:	f003 0307 	and.w	r3, r3, #7
 8008954:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008956:	7bbb      	ldrb	r3, [r7, #14]
 8008958:	7b3a      	ldrb	r2, [r7, #12]
 800895a:	4911      	ldr	r1, [pc, #68]	; (80089a0 <UARTEx_SetNbDataToProcess+0x94>)
 800895c:	5c8a      	ldrb	r2, [r1, r2]
 800895e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008962:	7b3a      	ldrb	r2, [r7, #12]
 8008964:	490f      	ldr	r1, [pc, #60]	; (80089a4 <UARTEx_SetNbDataToProcess+0x98>)
 8008966:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008968:	fb93 f3f2 	sdiv	r3, r3, r2
 800896c:	b29a      	uxth	r2, r3
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008974:	7bfb      	ldrb	r3, [r7, #15]
 8008976:	7b7a      	ldrb	r2, [r7, #13]
 8008978:	4909      	ldr	r1, [pc, #36]	; (80089a0 <UARTEx_SetNbDataToProcess+0x94>)
 800897a:	5c8a      	ldrb	r2, [r1, r2]
 800897c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008980:	7b7a      	ldrb	r2, [r7, #13]
 8008982:	4908      	ldr	r1, [pc, #32]	; (80089a4 <UARTEx_SetNbDataToProcess+0x98>)
 8008984:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008986:	fb93 f3f2 	sdiv	r3, r3, r2
 800898a:	b29a      	uxth	r2, r3
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008992:	bf00      	nop
 8008994:	3714      	adds	r7, #20
 8008996:	46bd      	mov	sp, r7
 8008998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899c:	4770      	bx	lr
 800899e:	bf00      	nop
 80089a0:	08009fe4 	.word	0x08009fe4
 80089a4:	08009fec 	.word	0x08009fec

080089a8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b085      	sub	sp, #20
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	4603      	mov	r3, r0
 80089b0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80089b2:	2300      	movs	r3, #0
 80089b4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80089b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80089ba:	2b84      	cmp	r3, #132	; 0x84
 80089bc:	d005      	beq.n	80089ca <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80089be:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	4413      	add	r3, r2
 80089c6:	3303      	adds	r3, #3
 80089c8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80089ca:	68fb      	ldr	r3, [r7, #12]
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3714      	adds	r7, #20
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr

080089d8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80089dc:	f000 fb14 	bl	8009008 <vTaskStartScheduler>
  
  return osOK;
 80089e0:	2300      	movs	r3, #0
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	bd80      	pop	{r7, pc}

080089e6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80089e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089e8:	b089      	sub	sp, #36	; 0x24
 80089ea:	af04      	add	r7, sp, #16
 80089ec:	6078      	str	r0, [r7, #4]
 80089ee:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	695b      	ldr	r3, [r3, #20]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d020      	beq.n	8008a3a <osThreadCreate+0x54>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	699b      	ldr	r3, [r3, #24]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d01c      	beq.n	8008a3a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	685c      	ldr	r4, [r3, #4]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	691e      	ldr	r6, [r3, #16]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008a12:	4618      	mov	r0, r3
 8008a14:	f7ff ffc8 	bl	80089a8 <makeFreeRtosPriority>
 8008a18:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	695b      	ldr	r3, [r3, #20]
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008a22:	9202      	str	r2, [sp, #8]
 8008a24:	9301      	str	r3, [sp, #4]
 8008a26:	9100      	str	r1, [sp, #0]
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	4632      	mov	r2, r6
 8008a2c:	4629      	mov	r1, r5
 8008a2e:	4620      	mov	r0, r4
 8008a30:	f000 f8d9 	bl	8008be6 <xTaskCreateStatic>
 8008a34:	4603      	mov	r3, r0
 8008a36:	60fb      	str	r3, [r7, #12]
 8008a38:	e01c      	b.n	8008a74 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	685c      	ldr	r4, [r3, #4]
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008a46:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f7ff ffaa 	bl	80089a8 <makeFreeRtosPriority>
 8008a54:	4602      	mov	r2, r0
 8008a56:	f107 030c 	add.w	r3, r7, #12
 8008a5a:	9301      	str	r3, [sp, #4]
 8008a5c:	9200      	str	r2, [sp, #0]
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	4632      	mov	r2, r6
 8008a62:	4629      	mov	r1, r5
 8008a64:	4620      	mov	r0, r4
 8008a66:	f000 f91b 	bl	8008ca0 <xTaskCreate>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	2b01      	cmp	r3, #1
 8008a6e:	d001      	beq.n	8008a74 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008a70:	2300      	movs	r3, #0
 8008a72:	e000      	b.n	8008a76 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008a74:	68fb      	ldr	r3, [r7, #12]
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3714      	adds	r7, #20
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008a7e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008a7e:	b480      	push	{r7}
 8008a80:	b083      	sub	sp, #12
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f103 0208 	add.w	r2, r3, #8
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f04f 32ff 	mov.w	r2, #4294967295
 8008a96:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f103 0208 	add.w	r2, r3, #8
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f103 0208 	add.w	r2, r3, #8
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008ab2:	bf00      	nop
 8008ab4:	370c      	adds	r7, #12
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abc:	4770      	bx	lr

08008abe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008abe:	b480      	push	{r7}
 8008ac0:	b083      	sub	sp, #12
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008acc:	bf00      	nop
 8008ace:	370c      	adds	r7, #12
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad6:	4770      	bx	lr

08008ad8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b085      	sub	sp, #20
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	68fa      	ldr	r2, [r7, #12]
 8008aec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	689a      	ldr	r2, [r3, #8]
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	689b      	ldr	r3, [r3, #8]
 8008afa:	683a      	ldr	r2, [r7, #0]
 8008afc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	683a      	ldr	r2, [r7, #0]
 8008b02:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	687a      	ldr	r2, [r7, #4]
 8008b08:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	1c5a      	adds	r2, r3, #1
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	601a      	str	r2, [r3, #0]
}
 8008b14:	bf00      	nop
 8008b16:	3714      	adds	r7, #20
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1e:	4770      	bx	lr

08008b20 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008b20:	b480      	push	{r7}
 8008b22:	b085      	sub	sp, #20
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b36:	d103      	bne.n	8008b40 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	691b      	ldr	r3, [r3, #16]
 8008b3c:	60fb      	str	r3, [r7, #12]
 8008b3e:	e00c      	b.n	8008b5a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	3308      	adds	r3, #8
 8008b44:	60fb      	str	r3, [r7, #12]
 8008b46:	e002      	b.n	8008b4e <vListInsert+0x2e>
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	60fb      	str	r3, [r7, #12]
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	68ba      	ldr	r2, [r7, #8]
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d2f6      	bcs.n	8008b48 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	685a      	ldr	r2, [r3, #4]
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	683a      	ldr	r2, [r7, #0]
 8008b68:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	68fa      	ldr	r2, [r7, #12]
 8008b6e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	683a      	ldr	r2, [r7, #0]
 8008b74:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	687a      	ldr	r2, [r7, #4]
 8008b7a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	1c5a      	adds	r2, r3, #1
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	601a      	str	r2, [r3, #0]
}
 8008b86:	bf00      	nop
 8008b88:	3714      	adds	r7, #20
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr

08008b92 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008b92:	b480      	push	{r7}
 8008b94:	b085      	sub	sp, #20
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	691b      	ldr	r3, [r3, #16]
 8008b9e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	687a      	ldr	r2, [r7, #4]
 8008ba6:	6892      	ldr	r2, [r2, #8]
 8008ba8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	689b      	ldr	r3, [r3, #8]
 8008bae:	687a      	ldr	r2, [r7, #4]
 8008bb0:	6852      	ldr	r2, [r2, #4]
 8008bb2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	d103      	bne.n	8008bc6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	689a      	ldr	r2, [r3, #8]
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	1e5a      	subs	r2, r3, #1
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3714      	adds	r7, #20
 8008bde:	46bd      	mov	sp, r7
 8008be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be4:	4770      	bx	lr

08008be6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008be6:	b580      	push	{r7, lr}
 8008be8:	b08e      	sub	sp, #56	; 0x38
 8008bea:	af04      	add	r7, sp, #16
 8008bec:	60f8      	str	r0, [r7, #12]
 8008bee:	60b9      	str	r1, [r7, #8]
 8008bf0:	607a      	str	r2, [r7, #4]
 8008bf2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d10a      	bne.n	8008c10 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bfe:	f383 8811 	msr	BASEPRI, r3
 8008c02:	f3bf 8f6f 	isb	sy
 8008c06:	f3bf 8f4f 	dsb	sy
 8008c0a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008c0c:	bf00      	nop
 8008c0e:	e7fe      	b.n	8008c0e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d10a      	bne.n	8008c2c <xTaskCreateStatic+0x46>
	__asm volatile
 8008c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c1a:	f383 8811 	msr	BASEPRI, r3
 8008c1e:	f3bf 8f6f 	isb	sy
 8008c22:	f3bf 8f4f 	dsb	sy
 8008c26:	61fb      	str	r3, [r7, #28]
}
 8008c28:	bf00      	nop
 8008c2a:	e7fe      	b.n	8008c2a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008c2c:	2354      	movs	r3, #84	; 0x54
 8008c2e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	2b54      	cmp	r3, #84	; 0x54
 8008c34:	d00a      	beq.n	8008c4c <xTaskCreateStatic+0x66>
	__asm volatile
 8008c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c3a:	f383 8811 	msr	BASEPRI, r3
 8008c3e:	f3bf 8f6f 	isb	sy
 8008c42:	f3bf 8f4f 	dsb	sy
 8008c46:	61bb      	str	r3, [r7, #24]
}
 8008c48:	bf00      	nop
 8008c4a:	e7fe      	b.n	8008c4a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008c4c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d01e      	beq.n	8008c92 <xTaskCreateStatic+0xac>
 8008c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d01b      	beq.n	8008c92 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c5c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c62:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c66:	2202      	movs	r2, #2
 8008c68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	9303      	str	r3, [sp, #12]
 8008c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c72:	9302      	str	r3, [sp, #8]
 8008c74:	f107 0314 	add.w	r3, r7, #20
 8008c78:	9301      	str	r3, [sp, #4]
 8008c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c7c:	9300      	str	r3, [sp, #0]
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	68b9      	ldr	r1, [r7, #8]
 8008c84:	68f8      	ldr	r0, [r7, #12]
 8008c86:	f000 f850 	bl	8008d2a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008c8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008c8c:	f000 f8d4 	bl	8008e38 <prvAddNewTaskToReadyList>
 8008c90:	e001      	b.n	8008c96 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008c92:	2300      	movs	r3, #0
 8008c94:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008c96:	697b      	ldr	r3, [r7, #20]
	}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3728      	adds	r7, #40	; 0x28
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}

08008ca0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b08c      	sub	sp, #48	; 0x30
 8008ca4:	af04      	add	r7, sp, #16
 8008ca6:	60f8      	str	r0, [r7, #12]
 8008ca8:	60b9      	str	r1, [r7, #8]
 8008caa:	603b      	str	r3, [r7, #0]
 8008cac:	4613      	mov	r3, r2
 8008cae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008cb0:	88fb      	ldrh	r3, [r7, #6]
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f000 ff3f 	bl	8009b38 <pvPortMalloc>
 8008cba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d00e      	beq.n	8008ce0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008cc2:	2054      	movs	r0, #84	; 0x54
 8008cc4:	f000 ff38 	bl	8009b38 <pvPortMalloc>
 8008cc8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008cca:	69fb      	ldr	r3, [r7, #28]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d003      	beq.n	8008cd8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008cd0:	69fb      	ldr	r3, [r7, #28]
 8008cd2:	697a      	ldr	r2, [r7, #20]
 8008cd4:	631a      	str	r2, [r3, #48]	; 0x30
 8008cd6:	e005      	b.n	8008ce4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008cd8:	6978      	ldr	r0, [r7, #20]
 8008cda:	f000 fff9 	bl	8009cd0 <vPortFree>
 8008cde:	e001      	b.n	8008ce4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008ce4:	69fb      	ldr	r3, [r7, #28]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d017      	beq.n	8008d1a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008cea:	69fb      	ldr	r3, [r7, #28]
 8008cec:	2200      	movs	r2, #0
 8008cee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008cf2:	88fa      	ldrh	r2, [r7, #6]
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	9303      	str	r3, [sp, #12]
 8008cf8:	69fb      	ldr	r3, [r7, #28]
 8008cfa:	9302      	str	r3, [sp, #8]
 8008cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cfe:	9301      	str	r3, [sp, #4]
 8008d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d02:	9300      	str	r3, [sp, #0]
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	68b9      	ldr	r1, [r7, #8]
 8008d08:	68f8      	ldr	r0, [r7, #12]
 8008d0a:	f000 f80e 	bl	8008d2a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008d0e:	69f8      	ldr	r0, [r7, #28]
 8008d10:	f000 f892 	bl	8008e38 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008d14:	2301      	movs	r3, #1
 8008d16:	61bb      	str	r3, [r7, #24]
 8008d18:	e002      	b.n	8008d20 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8008d1e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008d20:	69bb      	ldr	r3, [r7, #24]
	}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3720      	adds	r7, #32
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}

08008d2a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008d2a:	b580      	push	{r7, lr}
 8008d2c:	b088      	sub	sp, #32
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	60f8      	str	r0, [r7, #12]
 8008d32:	60b9      	str	r1, [r7, #8]
 8008d34:	607a      	str	r2, [r7, #4]
 8008d36:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d3c:	6879      	ldr	r1, [r7, #4]
 8008d3e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008d42:	440b      	add	r3, r1
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	4413      	add	r3, r2
 8008d48:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008d4a:	69bb      	ldr	r3, [r7, #24]
 8008d4c:	f023 0307 	bic.w	r3, r3, #7
 8008d50:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008d52:	69bb      	ldr	r3, [r7, #24]
 8008d54:	f003 0307 	and.w	r3, r3, #7
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d00a      	beq.n	8008d72 <prvInitialiseNewTask+0x48>
	__asm volatile
 8008d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d60:	f383 8811 	msr	BASEPRI, r3
 8008d64:	f3bf 8f6f 	isb	sy
 8008d68:	f3bf 8f4f 	dsb	sy
 8008d6c:	617b      	str	r3, [r7, #20]
}
 8008d6e:	bf00      	nop
 8008d70:	e7fe      	b.n	8008d70 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d01f      	beq.n	8008db8 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d78:	2300      	movs	r3, #0
 8008d7a:	61fb      	str	r3, [r7, #28]
 8008d7c:	e012      	b.n	8008da4 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008d7e:	68ba      	ldr	r2, [r7, #8]
 8008d80:	69fb      	ldr	r3, [r7, #28]
 8008d82:	4413      	add	r3, r2
 8008d84:	7819      	ldrb	r1, [r3, #0]
 8008d86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d88:	69fb      	ldr	r3, [r7, #28]
 8008d8a:	4413      	add	r3, r2
 8008d8c:	3334      	adds	r3, #52	; 0x34
 8008d8e:	460a      	mov	r2, r1
 8008d90:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008d92:	68ba      	ldr	r2, [r7, #8]
 8008d94:	69fb      	ldr	r3, [r7, #28]
 8008d96:	4413      	add	r3, r2
 8008d98:	781b      	ldrb	r3, [r3, #0]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d006      	beq.n	8008dac <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d9e:	69fb      	ldr	r3, [r7, #28]
 8008da0:	3301      	adds	r3, #1
 8008da2:	61fb      	str	r3, [r7, #28]
 8008da4:	69fb      	ldr	r3, [r7, #28]
 8008da6:	2b0f      	cmp	r3, #15
 8008da8:	d9e9      	bls.n	8008d7e <prvInitialiseNewTask+0x54>
 8008daa:	e000      	b.n	8008dae <prvInitialiseNewTask+0x84>
			{
				break;
 8008dac:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db0:	2200      	movs	r2, #0
 8008db2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008db6:	e003      	b.n	8008dc0 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dba:	2200      	movs	r2, #0
 8008dbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dc2:	2b06      	cmp	r3, #6
 8008dc4:	d901      	bls.n	8008dca <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008dc6:	2306      	movs	r3, #6
 8008dc8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008dce:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008dd4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd8:	2200      	movs	r2, #0
 8008dda:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dde:	3304      	adds	r3, #4
 8008de0:	4618      	mov	r0, r3
 8008de2:	f7ff fe6c 	bl	8008abe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de8:	3318      	adds	r3, #24
 8008dea:	4618      	mov	r0, r3
 8008dec:	f7ff fe67 	bl	8008abe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008df4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df8:	f1c3 0207 	rsb	r2, r3, #7
 8008dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dfe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e04:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e08:	2200      	movs	r2, #0
 8008e0a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e0e:	2200      	movs	r2, #0
 8008e10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008e14:	683a      	ldr	r2, [r7, #0]
 8008e16:	68f9      	ldr	r1, [r7, #12]
 8008e18:	69b8      	ldr	r0, [r7, #24]
 8008e1a:	f000 fc7d 	bl	8009718 <pxPortInitialiseStack>
 8008e1e:	4602      	mov	r2, r0
 8008e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e22:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d002      	beq.n	8008e30 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e2e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e30:	bf00      	nop
 8008e32:	3720      	adds	r7, #32
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}

08008e38 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b082      	sub	sp, #8
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008e40:	f000 fd98 	bl	8009974 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008e44:	4b2a      	ldr	r3, [pc, #168]	; (8008ef0 <prvAddNewTaskToReadyList+0xb8>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	3301      	adds	r3, #1
 8008e4a:	4a29      	ldr	r2, [pc, #164]	; (8008ef0 <prvAddNewTaskToReadyList+0xb8>)
 8008e4c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008e4e:	4b29      	ldr	r3, [pc, #164]	; (8008ef4 <prvAddNewTaskToReadyList+0xbc>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d109      	bne.n	8008e6a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008e56:	4a27      	ldr	r2, [pc, #156]	; (8008ef4 <prvAddNewTaskToReadyList+0xbc>)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008e5c:	4b24      	ldr	r3, [pc, #144]	; (8008ef0 <prvAddNewTaskToReadyList+0xb8>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	d110      	bne.n	8008e86 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008e64:	f000 fb16 	bl	8009494 <prvInitialiseTaskLists>
 8008e68:	e00d      	b.n	8008e86 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008e6a:	4b23      	ldr	r3, [pc, #140]	; (8008ef8 <prvAddNewTaskToReadyList+0xc0>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d109      	bne.n	8008e86 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008e72:	4b20      	ldr	r3, [pc, #128]	; (8008ef4 <prvAddNewTaskToReadyList+0xbc>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d802      	bhi.n	8008e86 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008e80:	4a1c      	ldr	r2, [pc, #112]	; (8008ef4 <prvAddNewTaskToReadyList+0xbc>)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008e86:	4b1d      	ldr	r3, [pc, #116]	; (8008efc <prvAddNewTaskToReadyList+0xc4>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	3301      	adds	r3, #1
 8008e8c:	4a1b      	ldr	r2, [pc, #108]	; (8008efc <prvAddNewTaskToReadyList+0xc4>)
 8008e8e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e94:	2201      	movs	r2, #1
 8008e96:	409a      	lsls	r2, r3
 8008e98:	4b19      	ldr	r3, [pc, #100]	; (8008f00 <prvAddNewTaskToReadyList+0xc8>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	4a18      	ldr	r2, [pc, #96]	; (8008f00 <prvAddNewTaskToReadyList+0xc8>)
 8008ea0:	6013      	str	r3, [r2, #0]
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ea6:	4613      	mov	r3, r2
 8008ea8:	009b      	lsls	r3, r3, #2
 8008eaa:	4413      	add	r3, r2
 8008eac:	009b      	lsls	r3, r3, #2
 8008eae:	4a15      	ldr	r2, [pc, #84]	; (8008f04 <prvAddNewTaskToReadyList+0xcc>)
 8008eb0:	441a      	add	r2, r3
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	3304      	adds	r3, #4
 8008eb6:	4619      	mov	r1, r3
 8008eb8:	4610      	mov	r0, r2
 8008eba:	f7ff fe0d 	bl	8008ad8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008ebe:	f000 fd89 	bl	80099d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008ec2:	4b0d      	ldr	r3, [pc, #52]	; (8008ef8 <prvAddNewTaskToReadyList+0xc0>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d00e      	beq.n	8008ee8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008eca:	4b0a      	ldr	r3, [pc, #40]	; (8008ef4 <prvAddNewTaskToReadyList+0xbc>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d207      	bcs.n	8008ee8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008ed8:	4b0b      	ldr	r3, [pc, #44]	; (8008f08 <prvAddNewTaskToReadyList+0xd0>)
 8008eda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ede:	601a      	str	r2, [r3, #0]
 8008ee0:	f3bf 8f4f 	dsb	sy
 8008ee4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ee8:	bf00      	nop
 8008eea:	3708      	adds	r7, #8
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}
 8008ef0:	240005d8 	.word	0x240005d8
 8008ef4:	240004d8 	.word	0x240004d8
 8008ef8:	240005e4 	.word	0x240005e4
 8008efc:	240005f4 	.word	0x240005f4
 8008f00:	240005e0 	.word	0x240005e0
 8008f04:	240004dc 	.word	0x240004dc
 8008f08:	e000ed04 	.word	0xe000ed04

08008f0c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b08a      	sub	sp, #40	; 0x28
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8008f16:	2300      	movs	r3, #0
 8008f18:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d10a      	bne.n	8008f36 <vTaskDelayUntil+0x2a>
	__asm volatile
 8008f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f24:	f383 8811 	msr	BASEPRI, r3
 8008f28:	f3bf 8f6f 	isb	sy
 8008f2c:	f3bf 8f4f 	dsb	sy
 8008f30:	617b      	str	r3, [r7, #20]
}
 8008f32:	bf00      	nop
 8008f34:	e7fe      	b.n	8008f34 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d10a      	bne.n	8008f52 <vTaskDelayUntil+0x46>
	__asm volatile
 8008f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f40:	f383 8811 	msr	BASEPRI, r3
 8008f44:	f3bf 8f6f 	isb	sy
 8008f48:	f3bf 8f4f 	dsb	sy
 8008f4c:	613b      	str	r3, [r7, #16]
}
 8008f4e:	bf00      	nop
 8008f50:	e7fe      	b.n	8008f50 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8008f52:	4b2a      	ldr	r3, [pc, #168]	; (8008ffc <vTaskDelayUntil+0xf0>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d00a      	beq.n	8008f70 <vTaskDelayUntil+0x64>
	__asm volatile
 8008f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f5e:	f383 8811 	msr	BASEPRI, r3
 8008f62:	f3bf 8f6f 	isb	sy
 8008f66:	f3bf 8f4f 	dsb	sy
 8008f6a:	60fb      	str	r3, [r7, #12]
}
 8008f6c:	bf00      	nop
 8008f6e:	e7fe      	b.n	8008f6e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8008f70:	f000 f8aa 	bl	80090c8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8008f74:	4b22      	ldr	r3, [pc, #136]	; (8009000 <vTaskDelayUntil+0xf4>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	683a      	ldr	r2, [r7, #0]
 8008f80:	4413      	add	r3, r2
 8008f82:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	6a3a      	ldr	r2, [r7, #32]
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d20b      	bcs.n	8008fa6 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	69fa      	ldr	r2, [r7, #28]
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d211      	bcs.n	8008fbc <vTaskDelayUntil+0xb0>
 8008f98:	69fa      	ldr	r2, [r7, #28]
 8008f9a:	6a3b      	ldr	r3, [r7, #32]
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d90d      	bls.n	8008fbc <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8008fa4:	e00a      	b.n	8008fbc <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	69fa      	ldr	r2, [r7, #28]
 8008fac:	429a      	cmp	r2, r3
 8008fae:	d303      	bcc.n	8008fb8 <vTaskDelayUntil+0xac>
 8008fb0:	69fa      	ldr	r2, [r7, #28]
 8008fb2:	6a3b      	ldr	r3, [r7, #32]
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d901      	bls.n	8008fbc <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8008fb8:	2301      	movs	r3, #1
 8008fba:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	69fa      	ldr	r2, [r7, #28]
 8008fc0:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8008fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d006      	beq.n	8008fd6 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8008fc8:	69fa      	ldr	r2, [r7, #28]
 8008fca:	6a3b      	ldr	r3, [r7, #32]
 8008fcc:	1ad3      	subs	r3, r2, r3
 8008fce:	2100      	movs	r1, #0
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f000 fb3b 	bl	800964c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8008fd6:	f000 f885 	bl	80090e4 <xTaskResumeAll>
 8008fda:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008fdc:	69bb      	ldr	r3, [r7, #24]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d107      	bne.n	8008ff2 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8008fe2:	4b08      	ldr	r3, [pc, #32]	; (8009004 <vTaskDelayUntil+0xf8>)
 8008fe4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fe8:	601a      	str	r2, [r3, #0]
 8008fea:	f3bf 8f4f 	dsb	sy
 8008fee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008ff2:	bf00      	nop
 8008ff4:	3728      	adds	r7, #40	; 0x28
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}
 8008ffa:	bf00      	nop
 8008ffc:	24000600 	.word	0x24000600
 8009000:	240005dc 	.word	0x240005dc
 8009004:	e000ed04 	.word	0xe000ed04

08009008 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b08a      	sub	sp, #40	; 0x28
 800900c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800900e:	2300      	movs	r3, #0
 8009010:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009012:	2300      	movs	r3, #0
 8009014:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009016:	463a      	mov	r2, r7
 8009018:	1d39      	adds	r1, r7, #4
 800901a:	f107 0308 	add.w	r3, r7, #8
 800901e:	4618      	mov	r0, r3
 8009020:	f7f8 fd16 	bl	8001a50 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009024:	6839      	ldr	r1, [r7, #0]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	68ba      	ldr	r2, [r7, #8]
 800902a:	9202      	str	r2, [sp, #8]
 800902c:	9301      	str	r3, [sp, #4]
 800902e:	2300      	movs	r3, #0
 8009030:	9300      	str	r3, [sp, #0]
 8009032:	2300      	movs	r3, #0
 8009034:	460a      	mov	r2, r1
 8009036:	491e      	ldr	r1, [pc, #120]	; (80090b0 <vTaskStartScheduler+0xa8>)
 8009038:	481e      	ldr	r0, [pc, #120]	; (80090b4 <vTaskStartScheduler+0xac>)
 800903a:	f7ff fdd4 	bl	8008be6 <xTaskCreateStatic>
 800903e:	4603      	mov	r3, r0
 8009040:	4a1d      	ldr	r2, [pc, #116]	; (80090b8 <vTaskStartScheduler+0xb0>)
 8009042:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009044:	4b1c      	ldr	r3, [pc, #112]	; (80090b8 <vTaskStartScheduler+0xb0>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d002      	beq.n	8009052 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800904c:	2301      	movs	r3, #1
 800904e:	617b      	str	r3, [r7, #20]
 8009050:	e001      	b.n	8009056 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009052:	2300      	movs	r3, #0
 8009054:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	2b01      	cmp	r3, #1
 800905a:	d116      	bne.n	800908a <vTaskStartScheduler+0x82>
	__asm volatile
 800905c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009060:	f383 8811 	msr	BASEPRI, r3
 8009064:	f3bf 8f6f 	isb	sy
 8009068:	f3bf 8f4f 	dsb	sy
 800906c:	613b      	str	r3, [r7, #16]
}
 800906e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009070:	4b12      	ldr	r3, [pc, #72]	; (80090bc <vTaskStartScheduler+0xb4>)
 8009072:	f04f 32ff 	mov.w	r2, #4294967295
 8009076:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009078:	4b11      	ldr	r3, [pc, #68]	; (80090c0 <vTaskStartScheduler+0xb8>)
 800907a:	2201      	movs	r2, #1
 800907c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800907e:	4b11      	ldr	r3, [pc, #68]	; (80090c4 <vTaskStartScheduler+0xbc>)
 8009080:	2200      	movs	r2, #0
 8009082:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009084:	f000 fbd4 	bl	8009830 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009088:	e00e      	b.n	80090a8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009090:	d10a      	bne.n	80090a8 <vTaskStartScheduler+0xa0>
	__asm volatile
 8009092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009096:	f383 8811 	msr	BASEPRI, r3
 800909a:	f3bf 8f6f 	isb	sy
 800909e:	f3bf 8f4f 	dsb	sy
 80090a2:	60fb      	str	r3, [r7, #12]
}
 80090a4:	bf00      	nop
 80090a6:	e7fe      	b.n	80090a6 <vTaskStartScheduler+0x9e>
}
 80090a8:	bf00      	nop
 80090aa:	3718      	adds	r7, #24
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}
 80090b0:	08009fb4 	.word	0x08009fb4
 80090b4:	08009465 	.word	0x08009465
 80090b8:	240005fc 	.word	0x240005fc
 80090bc:	240005f8 	.word	0x240005f8
 80090c0:	240005e4 	.word	0x240005e4
 80090c4:	240005dc 	.word	0x240005dc

080090c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80090c8:	b480      	push	{r7}
 80090ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80090cc:	4b04      	ldr	r3, [pc, #16]	; (80090e0 <vTaskSuspendAll+0x18>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	3301      	adds	r3, #1
 80090d2:	4a03      	ldr	r2, [pc, #12]	; (80090e0 <vTaskSuspendAll+0x18>)
 80090d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80090d6:	bf00      	nop
 80090d8:	46bd      	mov	sp, r7
 80090da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090de:	4770      	bx	lr
 80090e0:	24000600 	.word	0x24000600

080090e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b084      	sub	sp, #16
 80090e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80090ea:	2300      	movs	r3, #0
 80090ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80090ee:	2300      	movs	r3, #0
 80090f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80090f2:	4b41      	ldr	r3, [pc, #260]	; (80091f8 <xTaskResumeAll+0x114>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d10a      	bne.n	8009110 <xTaskResumeAll+0x2c>
	__asm volatile
 80090fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090fe:	f383 8811 	msr	BASEPRI, r3
 8009102:	f3bf 8f6f 	isb	sy
 8009106:	f3bf 8f4f 	dsb	sy
 800910a:	603b      	str	r3, [r7, #0]
}
 800910c:	bf00      	nop
 800910e:	e7fe      	b.n	800910e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009110:	f000 fc30 	bl	8009974 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009114:	4b38      	ldr	r3, [pc, #224]	; (80091f8 <xTaskResumeAll+0x114>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	3b01      	subs	r3, #1
 800911a:	4a37      	ldr	r2, [pc, #220]	; (80091f8 <xTaskResumeAll+0x114>)
 800911c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800911e:	4b36      	ldr	r3, [pc, #216]	; (80091f8 <xTaskResumeAll+0x114>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d161      	bne.n	80091ea <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009126:	4b35      	ldr	r3, [pc, #212]	; (80091fc <xTaskResumeAll+0x118>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d05d      	beq.n	80091ea <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800912e:	e02e      	b.n	800918e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009130:	4b33      	ldr	r3, [pc, #204]	; (8009200 <xTaskResumeAll+0x11c>)
 8009132:	68db      	ldr	r3, [r3, #12]
 8009134:	68db      	ldr	r3, [r3, #12]
 8009136:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	3318      	adds	r3, #24
 800913c:	4618      	mov	r0, r3
 800913e:	f7ff fd28 	bl	8008b92 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	3304      	adds	r3, #4
 8009146:	4618      	mov	r0, r3
 8009148:	f7ff fd23 	bl	8008b92 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009150:	2201      	movs	r2, #1
 8009152:	409a      	lsls	r2, r3
 8009154:	4b2b      	ldr	r3, [pc, #172]	; (8009204 <xTaskResumeAll+0x120>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4313      	orrs	r3, r2
 800915a:	4a2a      	ldr	r2, [pc, #168]	; (8009204 <xTaskResumeAll+0x120>)
 800915c:	6013      	str	r3, [r2, #0]
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009162:	4613      	mov	r3, r2
 8009164:	009b      	lsls	r3, r3, #2
 8009166:	4413      	add	r3, r2
 8009168:	009b      	lsls	r3, r3, #2
 800916a:	4a27      	ldr	r2, [pc, #156]	; (8009208 <xTaskResumeAll+0x124>)
 800916c:	441a      	add	r2, r3
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	3304      	adds	r3, #4
 8009172:	4619      	mov	r1, r3
 8009174:	4610      	mov	r0, r2
 8009176:	f7ff fcaf 	bl	8008ad8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800917e:	4b23      	ldr	r3, [pc, #140]	; (800920c <xTaskResumeAll+0x128>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009184:	429a      	cmp	r2, r3
 8009186:	d302      	bcc.n	800918e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009188:	4b21      	ldr	r3, [pc, #132]	; (8009210 <xTaskResumeAll+0x12c>)
 800918a:	2201      	movs	r2, #1
 800918c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800918e:	4b1c      	ldr	r3, [pc, #112]	; (8009200 <xTaskResumeAll+0x11c>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d1cc      	bne.n	8009130 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d001      	beq.n	80091a0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800919c:	f000 fa18 	bl	80095d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80091a0:	4b1c      	ldr	r3, [pc, #112]	; (8009214 <xTaskResumeAll+0x130>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d010      	beq.n	80091ce <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80091ac:	f000 f846 	bl	800923c <xTaskIncrementTick>
 80091b0:	4603      	mov	r3, r0
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d002      	beq.n	80091bc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80091b6:	4b16      	ldr	r3, [pc, #88]	; (8009210 <xTaskResumeAll+0x12c>)
 80091b8:	2201      	movs	r2, #1
 80091ba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	3b01      	subs	r3, #1
 80091c0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d1f1      	bne.n	80091ac <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80091c8:	4b12      	ldr	r3, [pc, #72]	; (8009214 <xTaskResumeAll+0x130>)
 80091ca:	2200      	movs	r2, #0
 80091cc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80091ce:	4b10      	ldr	r3, [pc, #64]	; (8009210 <xTaskResumeAll+0x12c>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d009      	beq.n	80091ea <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80091d6:	2301      	movs	r3, #1
 80091d8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80091da:	4b0f      	ldr	r3, [pc, #60]	; (8009218 <xTaskResumeAll+0x134>)
 80091dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091e0:	601a      	str	r2, [r3, #0]
 80091e2:	f3bf 8f4f 	dsb	sy
 80091e6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80091ea:	f000 fbf3 	bl	80099d4 <vPortExitCritical>

	return xAlreadyYielded;
 80091ee:	68bb      	ldr	r3, [r7, #8]
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3710      	adds	r7, #16
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}
 80091f8:	24000600 	.word	0x24000600
 80091fc:	240005d8 	.word	0x240005d8
 8009200:	24000598 	.word	0x24000598
 8009204:	240005e0 	.word	0x240005e0
 8009208:	240004dc 	.word	0x240004dc
 800920c:	240004d8 	.word	0x240004d8
 8009210:	240005ec 	.word	0x240005ec
 8009214:	240005e8 	.word	0x240005e8
 8009218:	e000ed04 	.word	0xe000ed04

0800921c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800921c:	b480      	push	{r7}
 800921e:	b083      	sub	sp, #12
 8009220:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009222:	4b05      	ldr	r3, [pc, #20]	; (8009238 <xTaskGetTickCount+0x1c>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009228:	687b      	ldr	r3, [r7, #4]
}
 800922a:	4618      	mov	r0, r3
 800922c:	370c      	adds	r7, #12
 800922e:	46bd      	mov	sp, r7
 8009230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009234:	4770      	bx	lr
 8009236:	bf00      	nop
 8009238:	240005dc 	.word	0x240005dc

0800923c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b086      	sub	sp, #24
 8009240:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009242:	2300      	movs	r3, #0
 8009244:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009246:	4b4e      	ldr	r3, [pc, #312]	; (8009380 <xTaskIncrementTick+0x144>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	2b00      	cmp	r3, #0
 800924c:	f040 808e 	bne.w	800936c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009250:	4b4c      	ldr	r3, [pc, #304]	; (8009384 <xTaskIncrementTick+0x148>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	3301      	adds	r3, #1
 8009256:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009258:	4a4a      	ldr	r2, [pc, #296]	; (8009384 <xTaskIncrementTick+0x148>)
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d120      	bne.n	80092a6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009264:	4b48      	ldr	r3, [pc, #288]	; (8009388 <xTaskIncrementTick+0x14c>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d00a      	beq.n	8009284 <xTaskIncrementTick+0x48>
	__asm volatile
 800926e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009272:	f383 8811 	msr	BASEPRI, r3
 8009276:	f3bf 8f6f 	isb	sy
 800927a:	f3bf 8f4f 	dsb	sy
 800927e:	603b      	str	r3, [r7, #0]
}
 8009280:	bf00      	nop
 8009282:	e7fe      	b.n	8009282 <xTaskIncrementTick+0x46>
 8009284:	4b40      	ldr	r3, [pc, #256]	; (8009388 <xTaskIncrementTick+0x14c>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	60fb      	str	r3, [r7, #12]
 800928a:	4b40      	ldr	r3, [pc, #256]	; (800938c <xTaskIncrementTick+0x150>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4a3e      	ldr	r2, [pc, #248]	; (8009388 <xTaskIncrementTick+0x14c>)
 8009290:	6013      	str	r3, [r2, #0]
 8009292:	4a3e      	ldr	r2, [pc, #248]	; (800938c <xTaskIncrementTick+0x150>)
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	6013      	str	r3, [r2, #0]
 8009298:	4b3d      	ldr	r3, [pc, #244]	; (8009390 <xTaskIncrementTick+0x154>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	3301      	adds	r3, #1
 800929e:	4a3c      	ldr	r2, [pc, #240]	; (8009390 <xTaskIncrementTick+0x154>)
 80092a0:	6013      	str	r3, [r2, #0]
 80092a2:	f000 f995 	bl	80095d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80092a6:	4b3b      	ldr	r3, [pc, #236]	; (8009394 <xTaskIncrementTick+0x158>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	693a      	ldr	r2, [r7, #16]
 80092ac:	429a      	cmp	r2, r3
 80092ae:	d348      	bcc.n	8009342 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80092b0:	4b35      	ldr	r3, [pc, #212]	; (8009388 <xTaskIncrementTick+0x14c>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d104      	bne.n	80092c4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092ba:	4b36      	ldr	r3, [pc, #216]	; (8009394 <xTaskIncrementTick+0x158>)
 80092bc:	f04f 32ff 	mov.w	r2, #4294967295
 80092c0:	601a      	str	r2, [r3, #0]
					break;
 80092c2:	e03e      	b.n	8009342 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092c4:	4b30      	ldr	r3, [pc, #192]	; (8009388 <xTaskIncrementTick+0x14c>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	68db      	ldr	r3, [r3, #12]
 80092ca:	68db      	ldr	r3, [r3, #12]
 80092cc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	685b      	ldr	r3, [r3, #4]
 80092d2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80092d4:	693a      	ldr	r2, [r7, #16]
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	429a      	cmp	r2, r3
 80092da:	d203      	bcs.n	80092e4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80092dc:	4a2d      	ldr	r2, [pc, #180]	; (8009394 <xTaskIncrementTick+0x158>)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80092e2:	e02e      	b.n	8009342 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	3304      	adds	r3, #4
 80092e8:	4618      	mov	r0, r3
 80092ea:	f7ff fc52 	bl	8008b92 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d004      	beq.n	8009300 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	3318      	adds	r3, #24
 80092fa:	4618      	mov	r0, r3
 80092fc:	f7ff fc49 	bl	8008b92 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009304:	2201      	movs	r2, #1
 8009306:	409a      	lsls	r2, r3
 8009308:	4b23      	ldr	r3, [pc, #140]	; (8009398 <xTaskIncrementTick+0x15c>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4313      	orrs	r3, r2
 800930e:	4a22      	ldr	r2, [pc, #136]	; (8009398 <xTaskIncrementTick+0x15c>)
 8009310:	6013      	str	r3, [r2, #0]
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009316:	4613      	mov	r3, r2
 8009318:	009b      	lsls	r3, r3, #2
 800931a:	4413      	add	r3, r2
 800931c:	009b      	lsls	r3, r3, #2
 800931e:	4a1f      	ldr	r2, [pc, #124]	; (800939c <xTaskIncrementTick+0x160>)
 8009320:	441a      	add	r2, r3
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	3304      	adds	r3, #4
 8009326:	4619      	mov	r1, r3
 8009328:	4610      	mov	r0, r2
 800932a:	f7ff fbd5 	bl	8008ad8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009332:	4b1b      	ldr	r3, [pc, #108]	; (80093a0 <xTaskIncrementTick+0x164>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009338:	429a      	cmp	r2, r3
 800933a:	d3b9      	bcc.n	80092b0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800933c:	2301      	movs	r3, #1
 800933e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009340:	e7b6      	b.n	80092b0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009342:	4b17      	ldr	r3, [pc, #92]	; (80093a0 <xTaskIncrementTick+0x164>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009348:	4914      	ldr	r1, [pc, #80]	; (800939c <xTaskIncrementTick+0x160>)
 800934a:	4613      	mov	r3, r2
 800934c:	009b      	lsls	r3, r3, #2
 800934e:	4413      	add	r3, r2
 8009350:	009b      	lsls	r3, r3, #2
 8009352:	440b      	add	r3, r1
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	2b01      	cmp	r3, #1
 8009358:	d901      	bls.n	800935e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800935a:	2301      	movs	r3, #1
 800935c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800935e:	4b11      	ldr	r3, [pc, #68]	; (80093a4 <xTaskIncrementTick+0x168>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d007      	beq.n	8009376 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8009366:	2301      	movs	r3, #1
 8009368:	617b      	str	r3, [r7, #20]
 800936a:	e004      	b.n	8009376 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800936c:	4b0e      	ldr	r3, [pc, #56]	; (80093a8 <xTaskIncrementTick+0x16c>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	3301      	adds	r3, #1
 8009372:	4a0d      	ldr	r2, [pc, #52]	; (80093a8 <xTaskIncrementTick+0x16c>)
 8009374:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009376:	697b      	ldr	r3, [r7, #20]
}
 8009378:	4618      	mov	r0, r3
 800937a:	3718      	adds	r7, #24
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}
 8009380:	24000600 	.word	0x24000600
 8009384:	240005dc 	.word	0x240005dc
 8009388:	24000590 	.word	0x24000590
 800938c:	24000594 	.word	0x24000594
 8009390:	240005f0 	.word	0x240005f0
 8009394:	240005f8 	.word	0x240005f8
 8009398:	240005e0 	.word	0x240005e0
 800939c:	240004dc 	.word	0x240004dc
 80093a0:	240004d8 	.word	0x240004d8
 80093a4:	240005ec 	.word	0x240005ec
 80093a8:	240005e8 	.word	0x240005e8

080093ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80093ac:	b480      	push	{r7}
 80093ae:	b087      	sub	sp, #28
 80093b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80093b2:	4b27      	ldr	r3, [pc, #156]	; (8009450 <vTaskSwitchContext+0xa4>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d003      	beq.n	80093c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80093ba:	4b26      	ldr	r3, [pc, #152]	; (8009454 <vTaskSwitchContext+0xa8>)
 80093bc:	2201      	movs	r2, #1
 80093be:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80093c0:	e03f      	b.n	8009442 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80093c2:	4b24      	ldr	r3, [pc, #144]	; (8009454 <vTaskSwitchContext+0xa8>)
 80093c4:	2200      	movs	r2, #0
 80093c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093c8:	4b23      	ldr	r3, [pc, #140]	; (8009458 <vTaskSwitchContext+0xac>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	fab3 f383 	clz	r3, r3
 80093d4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80093d6:	7afb      	ldrb	r3, [r7, #11]
 80093d8:	f1c3 031f 	rsb	r3, r3, #31
 80093dc:	617b      	str	r3, [r7, #20]
 80093de:	491f      	ldr	r1, [pc, #124]	; (800945c <vTaskSwitchContext+0xb0>)
 80093e0:	697a      	ldr	r2, [r7, #20]
 80093e2:	4613      	mov	r3, r2
 80093e4:	009b      	lsls	r3, r3, #2
 80093e6:	4413      	add	r3, r2
 80093e8:	009b      	lsls	r3, r3, #2
 80093ea:	440b      	add	r3, r1
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d10a      	bne.n	8009408 <vTaskSwitchContext+0x5c>
	__asm volatile
 80093f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f6:	f383 8811 	msr	BASEPRI, r3
 80093fa:	f3bf 8f6f 	isb	sy
 80093fe:	f3bf 8f4f 	dsb	sy
 8009402:	607b      	str	r3, [r7, #4]
}
 8009404:	bf00      	nop
 8009406:	e7fe      	b.n	8009406 <vTaskSwitchContext+0x5a>
 8009408:	697a      	ldr	r2, [r7, #20]
 800940a:	4613      	mov	r3, r2
 800940c:	009b      	lsls	r3, r3, #2
 800940e:	4413      	add	r3, r2
 8009410:	009b      	lsls	r3, r3, #2
 8009412:	4a12      	ldr	r2, [pc, #72]	; (800945c <vTaskSwitchContext+0xb0>)
 8009414:	4413      	add	r3, r2
 8009416:	613b      	str	r3, [r7, #16]
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	685a      	ldr	r2, [r3, #4]
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	605a      	str	r2, [r3, #4]
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	685a      	ldr	r2, [r3, #4]
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	3308      	adds	r3, #8
 800942a:	429a      	cmp	r2, r3
 800942c:	d104      	bne.n	8009438 <vTaskSwitchContext+0x8c>
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	685b      	ldr	r3, [r3, #4]
 8009432:	685a      	ldr	r2, [r3, #4]
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	605a      	str	r2, [r3, #4]
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	685b      	ldr	r3, [r3, #4]
 800943c:	68db      	ldr	r3, [r3, #12]
 800943e:	4a08      	ldr	r2, [pc, #32]	; (8009460 <vTaskSwitchContext+0xb4>)
 8009440:	6013      	str	r3, [r2, #0]
}
 8009442:	bf00      	nop
 8009444:	371c      	adds	r7, #28
 8009446:	46bd      	mov	sp, r7
 8009448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944c:	4770      	bx	lr
 800944e:	bf00      	nop
 8009450:	24000600 	.word	0x24000600
 8009454:	240005ec 	.word	0x240005ec
 8009458:	240005e0 	.word	0x240005e0
 800945c:	240004dc 	.word	0x240004dc
 8009460:	240004d8 	.word	0x240004d8

08009464 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b082      	sub	sp, #8
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800946c:	f000 f852 	bl	8009514 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009470:	4b06      	ldr	r3, [pc, #24]	; (800948c <prvIdleTask+0x28>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	2b01      	cmp	r3, #1
 8009476:	d9f9      	bls.n	800946c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009478:	4b05      	ldr	r3, [pc, #20]	; (8009490 <prvIdleTask+0x2c>)
 800947a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800947e:	601a      	str	r2, [r3, #0]
 8009480:	f3bf 8f4f 	dsb	sy
 8009484:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009488:	e7f0      	b.n	800946c <prvIdleTask+0x8>
 800948a:	bf00      	nop
 800948c:	240004dc 	.word	0x240004dc
 8009490:	e000ed04 	.word	0xe000ed04

08009494 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b082      	sub	sp, #8
 8009498:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800949a:	2300      	movs	r3, #0
 800949c:	607b      	str	r3, [r7, #4]
 800949e:	e00c      	b.n	80094ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80094a0:	687a      	ldr	r2, [r7, #4]
 80094a2:	4613      	mov	r3, r2
 80094a4:	009b      	lsls	r3, r3, #2
 80094a6:	4413      	add	r3, r2
 80094a8:	009b      	lsls	r3, r3, #2
 80094aa:	4a12      	ldr	r2, [pc, #72]	; (80094f4 <prvInitialiseTaskLists+0x60>)
 80094ac:	4413      	add	r3, r2
 80094ae:	4618      	mov	r0, r3
 80094b0:	f7ff fae5 	bl	8008a7e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	3301      	adds	r3, #1
 80094b8:	607b      	str	r3, [r7, #4]
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2b06      	cmp	r3, #6
 80094be:	d9ef      	bls.n	80094a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80094c0:	480d      	ldr	r0, [pc, #52]	; (80094f8 <prvInitialiseTaskLists+0x64>)
 80094c2:	f7ff fadc 	bl	8008a7e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80094c6:	480d      	ldr	r0, [pc, #52]	; (80094fc <prvInitialiseTaskLists+0x68>)
 80094c8:	f7ff fad9 	bl	8008a7e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80094cc:	480c      	ldr	r0, [pc, #48]	; (8009500 <prvInitialiseTaskLists+0x6c>)
 80094ce:	f7ff fad6 	bl	8008a7e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80094d2:	480c      	ldr	r0, [pc, #48]	; (8009504 <prvInitialiseTaskLists+0x70>)
 80094d4:	f7ff fad3 	bl	8008a7e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80094d8:	480b      	ldr	r0, [pc, #44]	; (8009508 <prvInitialiseTaskLists+0x74>)
 80094da:	f7ff fad0 	bl	8008a7e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80094de:	4b0b      	ldr	r3, [pc, #44]	; (800950c <prvInitialiseTaskLists+0x78>)
 80094e0:	4a05      	ldr	r2, [pc, #20]	; (80094f8 <prvInitialiseTaskLists+0x64>)
 80094e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80094e4:	4b0a      	ldr	r3, [pc, #40]	; (8009510 <prvInitialiseTaskLists+0x7c>)
 80094e6:	4a05      	ldr	r2, [pc, #20]	; (80094fc <prvInitialiseTaskLists+0x68>)
 80094e8:	601a      	str	r2, [r3, #0]
}
 80094ea:	bf00      	nop
 80094ec:	3708      	adds	r7, #8
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
 80094f2:	bf00      	nop
 80094f4:	240004dc 	.word	0x240004dc
 80094f8:	24000568 	.word	0x24000568
 80094fc:	2400057c 	.word	0x2400057c
 8009500:	24000598 	.word	0x24000598
 8009504:	240005ac 	.word	0x240005ac
 8009508:	240005c4 	.word	0x240005c4
 800950c:	24000590 	.word	0x24000590
 8009510:	24000594 	.word	0x24000594

08009514 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b082      	sub	sp, #8
 8009518:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800951a:	e019      	b.n	8009550 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800951c:	f000 fa2a 	bl	8009974 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009520:	4b10      	ldr	r3, [pc, #64]	; (8009564 <prvCheckTasksWaitingTermination+0x50>)
 8009522:	68db      	ldr	r3, [r3, #12]
 8009524:	68db      	ldr	r3, [r3, #12]
 8009526:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	3304      	adds	r3, #4
 800952c:	4618      	mov	r0, r3
 800952e:	f7ff fb30 	bl	8008b92 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009532:	4b0d      	ldr	r3, [pc, #52]	; (8009568 <prvCheckTasksWaitingTermination+0x54>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	3b01      	subs	r3, #1
 8009538:	4a0b      	ldr	r2, [pc, #44]	; (8009568 <prvCheckTasksWaitingTermination+0x54>)
 800953a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800953c:	4b0b      	ldr	r3, [pc, #44]	; (800956c <prvCheckTasksWaitingTermination+0x58>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	3b01      	subs	r3, #1
 8009542:	4a0a      	ldr	r2, [pc, #40]	; (800956c <prvCheckTasksWaitingTermination+0x58>)
 8009544:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009546:	f000 fa45 	bl	80099d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f000 f810 	bl	8009570 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009550:	4b06      	ldr	r3, [pc, #24]	; (800956c <prvCheckTasksWaitingTermination+0x58>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d1e1      	bne.n	800951c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009558:	bf00      	nop
 800955a:	bf00      	nop
 800955c:	3708      	adds	r7, #8
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}
 8009562:	bf00      	nop
 8009564:	240005ac 	.word	0x240005ac
 8009568:	240005d8 	.word	0x240005d8
 800956c:	240005c0 	.word	0x240005c0

08009570 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009570:	b580      	push	{r7, lr}
 8009572:	b084      	sub	sp, #16
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800957e:	2b00      	cmp	r3, #0
 8009580:	d108      	bne.n	8009594 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009586:	4618      	mov	r0, r3
 8009588:	f000 fba2 	bl	8009cd0 <vPortFree>
				vPortFree( pxTCB );
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f000 fb9f 	bl	8009cd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009592:	e018      	b.n	80095c6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800959a:	2b01      	cmp	r3, #1
 800959c:	d103      	bne.n	80095a6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f000 fb96 	bl	8009cd0 <vPortFree>
	}
 80095a4:	e00f      	b.n	80095c6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80095ac:	2b02      	cmp	r3, #2
 80095ae:	d00a      	beq.n	80095c6 <prvDeleteTCB+0x56>
	__asm volatile
 80095b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b4:	f383 8811 	msr	BASEPRI, r3
 80095b8:	f3bf 8f6f 	isb	sy
 80095bc:	f3bf 8f4f 	dsb	sy
 80095c0:	60fb      	str	r3, [r7, #12]
}
 80095c2:	bf00      	nop
 80095c4:	e7fe      	b.n	80095c4 <prvDeleteTCB+0x54>
	}
 80095c6:	bf00      	nop
 80095c8:	3710      	adds	r7, #16
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
	...

080095d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80095d0:	b480      	push	{r7}
 80095d2:	b083      	sub	sp, #12
 80095d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80095d6:	4b0c      	ldr	r3, [pc, #48]	; (8009608 <prvResetNextTaskUnblockTime+0x38>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d104      	bne.n	80095ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80095e0:	4b0a      	ldr	r3, [pc, #40]	; (800960c <prvResetNextTaskUnblockTime+0x3c>)
 80095e2:	f04f 32ff 	mov.w	r2, #4294967295
 80095e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80095e8:	e008      	b.n	80095fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095ea:	4b07      	ldr	r3, [pc, #28]	; (8009608 <prvResetNextTaskUnblockTime+0x38>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	68db      	ldr	r3, [r3, #12]
 80095f0:	68db      	ldr	r3, [r3, #12]
 80095f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	4a04      	ldr	r2, [pc, #16]	; (800960c <prvResetNextTaskUnblockTime+0x3c>)
 80095fa:	6013      	str	r3, [r2, #0]
}
 80095fc:	bf00      	nop
 80095fe:	370c      	adds	r7, #12
 8009600:	46bd      	mov	sp, r7
 8009602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009606:	4770      	bx	lr
 8009608:	24000590 	.word	0x24000590
 800960c:	240005f8 	.word	0x240005f8

08009610 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009610:	b480      	push	{r7}
 8009612:	b083      	sub	sp, #12
 8009614:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009616:	4b0b      	ldr	r3, [pc, #44]	; (8009644 <xTaskGetSchedulerState+0x34>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d102      	bne.n	8009624 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800961e:	2301      	movs	r3, #1
 8009620:	607b      	str	r3, [r7, #4]
 8009622:	e008      	b.n	8009636 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009624:	4b08      	ldr	r3, [pc, #32]	; (8009648 <xTaskGetSchedulerState+0x38>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d102      	bne.n	8009632 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800962c:	2302      	movs	r3, #2
 800962e:	607b      	str	r3, [r7, #4]
 8009630:	e001      	b.n	8009636 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009632:	2300      	movs	r3, #0
 8009634:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009636:	687b      	ldr	r3, [r7, #4]
	}
 8009638:	4618      	mov	r0, r3
 800963a:	370c      	adds	r7, #12
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr
 8009644:	240005e4 	.word	0x240005e4
 8009648:	24000600 	.word	0x24000600

0800964c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b084      	sub	sp, #16
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009656:	4b29      	ldr	r3, [pc, #164]	; (80096fc <prvAddCurrentTaskToDelayedList+0xb0>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800965c:	4b28      	ldr	r3, [pc, #160]	; (8009700 <prvAddCurrentTaskToDelayedList+0xb4>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	3304      	adds	r3, #4
 8009662:	4618      	mov	r0, r3
 8009664:	f7ff fa95 	bl	8008b92 <uxListRemove>
 8009668:	4603      	mov	r3, r0
 800966a:	2b00      	cmp	r3, #0
 800966c:	d10b      	bne.n	8009686 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800966e:	4b24      	ldr	r3, [pc, #144]	; (8009700 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009674:	2201      	movs	r2, #1
 8009676:	fa02 f303 	lsl.w	r3, r2, r3
 800967a:	43da      	mvns	r2, r3
 800967c:	4b21      	ldr	r3, [pc, #132]	; (8009704 <prvAddCurrentTaskToDelayedList+0xb8>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4013      	ands	r3, r2
 8009682:	4a20      	ldr	r2, [pc, #128]	; (8009704 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009684:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800968c:	d10a      	bne.n	80096a4 <prvAddCurrentTaskToDelayedList+0x58>
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d007      	beq.n	80096a4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009694:	4b1a      	ldr	r3, [pc, #104]	; (8009700 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	3304      	adds	r3, #4
 800969a:	4619      	mov	r1, r3
 800969c:	481a      	ldr	r0, [pc, #104]	; (8009708 <prvAddCurrentTaskToDelayedList+0xbc>)
 800969e:	f7ff fa1b 	bl	8008ad8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80096a2:	e026      	b.n	80096f2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80096a4:	68fa      	ldr	r2, [r7, #12]
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	4413      	add	r3, r2
 80096aa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80096ac:	4b14      	ldr	r3, [pc, #80]	; (8009700 <prvAddCurrentTaskToDelayedList+0xb4>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	68ba      	ldr	r2, [r7, #8]
 80096b2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80096b4:	68ba      	ldr	r2, [r7, #8]
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	429a      	cmp	r2, r3
 80096ba:	d209      	bcs.n	80096d0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096bc:	4b13      	ldr	r3, [pc, #76]	; (800970c <prvAddCurrentTaskToDelayedList+0xc0>)
 80096be:	681a      	ldr	r2, [r3, #0]
 80096c0:	4b0f      	ldr	r3, [pc, #60]	; (8009700 <prvAddCurrentTaskToDelayedList+0xb4>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	3304      	adds	r3, #4
 80096c6:	4619      	mov	r1, r3
 80096c8:	4610      	mov	r0, r2
 80096ca:	f7ff fa29 	bl	8008b20 <vListInsert>
}
 80096ce:	e010      	b.n	80096f2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096d0:	4b0f      	ldr	r3, [pc, #60]	; (8009710 <prvAddCurrentTaskToDelayedList+0xc4>)
 80096d2:	681a      	ldr	r2, [r3, #0]
 80096d4:	4b0a      	ldr	r3, [pc, #40]	; (8009700 <prvAddCurrentTaskToDelayedList+0xb4>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	3304      	adds	r3, #4
 80096da:	4619      	mov	r1, r3
 80096dc:	4610      	mov	r0, r2
 80096de:	f7ff fa1f 	bl	8008b20 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80096e2:	4b0c      	ldr	r3, [pc, #48]	; (8009714 <prvAddCurrentTaskToDelayedList+0xc8>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	68ba      	ldr	r2, [r7, #8]
 80096e8:	429a      	cmp	r2, r3
 80096ea:	d202      	bcs.n	80096f2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80096ec:	4a09      	ldr	r2, [pc, #36]	; (8009714 <prvAddCurrentTaskToDelayedList+0xc8>)
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	6013      	str	r3, [r2, #0]
}
 80096f2:	bf00      	nop
 80096f4:	3710      	adds	r7, #16
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}
 80096fa:	bf00      	nop
 80096fc:	240005dc 	.word	0x240005dc
 8009700:	240004d8 	.word	0x240004d8
 8009704:	240005e0 	.word	0x240005e0
 8009708:	240005c4 	.word	0x240005c4
 800970c:	24000594 	.word	0x24000594
 8009710:	24000590 	.word	0x24000590
 8009714:	240005f8 	.word	0x240005f8

08009718 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009718:	b480      	push	{r7}
 800971a:	b085      	sub	sp, #20
 800971c:	af00      	add	r7, sp, #0
 800971e:	60f8      	str	r0, [r7, #12]
 8009720:	60b9      	str	r1, [r7, #8]
 8009722:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	3b04      	subs	r3, #4
 8009728:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009730:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	3b04      	subs	r3, #4
 8009736:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	f023 0201 	bic.w	r2, r3, #1
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	3b04      	subs	r3, #4
 8009746:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009748:	4a0c      	ldr	r2, [pc, #48]	; (800977c <pxPortInitialiseStack+0x64>)
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	3b14      	subs	r3, #20
 8009752:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009754:	687a      	ldr	r2, [r7, #4]
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	3b04      	subs	r3, #4
 800975e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	f06f 0202 	mvn.w	r2, #2
 8009766:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	3b20      	subs	r3, #32
 800976c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800976e:	68fb      	ldr	r3, [r7, #12]
}
 8009770:	4618      	mov	r0, r3
 8009772:	3714      	adds	r7, #20
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr
 800977c:	08009781 	.word	0x08009781

08009780 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009780:	b480      	push	{r7}
 8009782:	b085      	sub	sp, #20
 8009784:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009786:	2300      	movs	r3, #0
 8009788:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800978a:	4b12      	ldr	r3, [pc, #72]	; (80097d4 <prvTaskExitError+0x54>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009792:	d00a      	beq.n	80097aa <prvTaskExitError+0x2a>
	__asm volatile
 8009794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009798:	f383 8811 	msr	BASEPRI, r3
 800979c:	f3bf 8f6f 	isb	sy
 80097a0:	f3bf 8f4f 	dsb	sy
 80097a4:	60fb      	str	r3, [r7, #12]
}
 80097a6:	bf00      	nop
 80097a8:	e7fe      	b.n	80097a8 <prvTaskExitError+0x28>
	__asm volatile
 80097aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ae:	f383 8811 	msr	BASEPRI, r3
 80097b2:	f3bf 8f6f 	isb	sy
 80097b6:	f3bf 8f4f 	dsb	sy
 80097ba:	60bb      	str	r3, [r7, #8]
}
 80097bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80097be:	bf00      	nop
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d0fc      	beq.n	80097c0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80097c6:	bf00      	nop
 80097c8:	bf00      	nop
 80097ca:	3714      	adds	r7, #20
 80097cc:	46bd      	mov	sp, r7
 80097ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d2:	4770      	bx	lr
 80097d4:	24000010 	.word	0x24000010
	...

080097e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80097e0:	4b07      	ldr	r3, [pc, #28]	; (8009800 <pxCurrentTCBConst2>)
 80097e2:	6819      	ldr	r1, [r3, #0]
 80097e4:	6808      	ldr	r0, [r1, #0]
 80097e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097ea:	f380 8809 	msr	PSP, r0
 80097ee:	f3bf 8f6f 	isb	sy
 80097f2:	f04f 0000 	mov.w	r0, #0
 80097f6:	f380 8811 	msr	BASEPRI, r0
 80097fa:	4770      	bx	lr
 80097fc:	f3af 8000 	nop.w

08009800 <pxCurrentTCBConst2>:
 8009800:	240004d8 	.word	0x240004d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009804:	bf00      	nop
 8009806:	bf00      	nop

08009808 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009808:	4808      	ldr	r0, [pc, #32]	; (800982c <prvPortStartFirstTask+0x24>)
 800980a:	6800      	ldr	r0, [r0, #0]
 800980c:	6800      	ldr	r0, [r0, #0]
 800980e:	f380 8808 	msr	MSP, r0
 8009812:	f04f 0000 	mov.w	r0, #0
 8009816:	f380 8814 	msr	CONTROL, r0
 800981a:	b662      	cpsie	i
 800981c:	b661      	cpsie	f
 800981e:	f3bf 8f4f 	dsb	sy
 8009822:	f3bf 8f6f 	isb	sy
 8009826:	df00      	svc	0
 8009828:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800982a:	bf00      	nop
 800982c:	e000ed08 	.word	0xe000ed08

08009830 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b086      	sub	sp, #24
 8009834:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009836:	4b46      	ldr	r3, [pc, #280]	; (8009950 <xPortStartScheduler+0x120>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	4a46      	ldr	r2, [pc, #280]	; (8009954 <xPortStartScheduler+0x124>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d10a      	bne.n	8009856 <xPortStartScheduler+0x26>
	__asm volatile
 8009840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009844:	f383 8811 	msr	BASEPRI, r3
 8009848:	f3bf 8f6f 	isb	sy
 800984c:	f3bf 8f4f 	dsb	sy
 8009850:	613b      	str	r3, [r7, #16]
}
 8009852:	bf00      	nop
 8009854:	e7fe      	b.n	8009854 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009856:	4b3e      	ldr	r3, [pc, #248]	; (8009950 <xPortStartScheduler+0x120>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4a3f      	ldr	r2, [pc, #252]	; (8009958 <xPortStartScheduler+0x128>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d10a      	bne.n	8009876 <xPortStartScheduler+0x46>
	__asm volatile
 8009860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009864:	f383 8811 	msr	BASEPRI, r3
 8009868:	f3bf 8f6f 	isb	sy
 800986c:	f3bf 8f4f 	dsb	sy
 8009870:	60fb      	str	r3, [r7, #12]
}
 8009872:	bf00      	nop
 8009874:	e7fe      	b.n	8009874 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009876:	4b39      	ldr	r3, [pc, #228]	; (800995c <xPortStartScheduler+0x12c>)
 8009878:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	781b      	ldrb	r3, [r3, #0]
 800987e:	b2db      	uxtb	r3, r3
 8009880:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	22ff      	movs	r2, #255	; 0xff
 8009886:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	781b      	ldrb	r3, [r3, #0]
 800988c:	b2db      	uxtb	r3, r3
 800988e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009890:	78fb      	ldrb	r3, [r7, #3]
 8009892:	b2db      	uxtb	r3, r3
 8009894:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009898:	b2da      	uxtb	r2, r3
 800989a:	4b31      	ldr	r3, [pc, #196]	; (8009960 <xPortStartScheduler+0x130>)
 800989c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800989e:	4b31      	ldr	r3, [pc, #196]	; (8009964 <xPortStartScheduler+0x134>)
 80098a0:	2207      	movs	r2, #7
 80098a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80098a4:	e009      	b.n	80098ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80098a6:	4b2f      	ldr	r3, [pc, #188]	; (8009964 <xPortStartScheduler+0x134>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	3b01      	subs	r3, #1
 80098ac:	4a2d      	ldr	r2, [pc, #180]	; (8009964 <xPortStartScheduler+0x134>)
 80098ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80098b0:	78fb      	ldrb	r3, [r7, #3]
 80098b2:	b2db      	uxtb	r3, r3
 80098b4:	005b      	lsls	r3, r3, #1
 80098b6:	b2db      	uxtb	r3, r3
 80098b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80098ba:	78fb      	ldrb	r3, [r7, #3]
 80098bc:	b2db      	uxtb	r3, r3
 80098be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098c2:	2b80      	cmp	r3, #128	; 0x80
 80098c4:	d0ef      	beq.n	80098a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80098c6:	4b27      	ldr	r3, [pc, #156]	; (8009964 <xPortStartScheduler+0x134>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f1c3 0307 	rsb	r3, r3, #7
 80098ce:	2b04      	cmp	r3, #4
 80098d0:	d00a      	beq.n	80098e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80098d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d6:	f383 8811 	msr	BASEPRI, r3
 80098da:	f3bf 8f6f 	isb	sy
 80098de:	f3bf 8f4f 	dsb	sy
 80098e2:	60bb      	str	r3, [r7, #8]
}
 80098e4:	bf00      	nop
 80098e6:	e7fe      	b.n	80098e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80098e8:	4b1e      	ldr	r3, [pc, #120]	; (8009964 <xPortStartScheduler+0x134>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	021b      	lsls	r3, r3, #8
 80098ee:	4a1d      	ldr	r2, [pc, #116]	; (8009964 <xPortStartScheduler+0x134>)
 80098f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80098f2:	4b1c      	ldr	r3, [pc, #112]	; (8009964 <xPortStartScheduler+0x134>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80098fa:	4a1a      	ldr	r2, [pc, #104]	; (8009964 <xPortStartScheduler+0x134>)
 80098fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	b2da      	uxtb	r2, r3
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009906:	4b18      	ldr	r3, [pc, #96]	; (8009968 <xPortStartScheduler+0x138>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4a17      	ldr	r2, [pc, #92]	; (8009968 <xPortStartScheduler+0x138>)
 800990c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009910:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009912:	4b15      	ldr	r3, [pc, #84]	; (8009968 <xPortStartScheduler+0x138>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	4a14      	ldr	r2, [pc, #80]	; (8009968 <xPortStartScheduler+0x138>)
 8009918:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800991c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800991e:	f000 f8dd 	bl	8009adc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009922:	4b12      	ldr	r3, [pc, #72]	; (800996c <xPortStartScheduler+0x13c>)
 8009924:	2200      	movs	r2, #0
 8009926:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009928:	f000 f8fc 	bl	8009b24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800992c:	4b10      	ldr	r3, [pc, #64]	; (8009970 <xPortStartScheduler+0x140>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4a0f      	ldr	r2, [pc, #60]	; (8009970 <xPortStartScheduler+0x140>)
 8009932:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009936:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009938:	f7ff ff66 	bl	8009808 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800993c:	f7ff fd36 	bl	80093ac <vTaskSwitchContext>
	prvTaskExitError();
 8009940:	f7ff ff1e 	bl	8009780 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009944:	2300      	movs	r3, #0
}
 8009946:	4618      	mov	r0, r3
 8009948:	3718      	adds	r7, #24
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}
 800994e:	bf00      	nop
 8009950:	e000ed00 	.word	0xe000ed00
 8009954:	410fc271 	.word	0x410fc271
 8009958:	410fc270 	.word	0x410fc270
 800995c:	e000e400 	.word	0xe000e400
 8009960:	24000604 	.word	0x24000604
 8009964:	24000608 	.word	0x24000608
 8009968:	e000ed20 	.word	0xe000ed20
 800996c:	24000010 	.word	0x24000010
 8009970:	e000ef34 	.word	0xe000ef34

08009974 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009974:	b480      	push	{r7}
 8009976:	b083      	sub	sp, #12
 8009978:	af00      	add	r7, sp, #0
	__asm volatile
 800997a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800997e:	f383 8811 	msr	BASEPRI, r3
 8009982:	f3bf 8f6f 	isb	sy
 8009986:	f3bf 8f4f 	dsb	sy
 800998a:	607b      	str	r3, [r7, #4]
}
 800998c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800998e:	4b0f      	ldr	r3, [pc, #60]	; (80099cc <vPortEnterCritical+0x58>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	3301      	adds	r3, #1
 8009994:	4a0d      	ldr	r2, [pc, #52]	; (80099cc <vPortEnterCritical+0x58>)
 8009996:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009998:	4b0c      	ldr	r3, [pc, #48]	; (80099cc <vPortEnterCritical+0x58>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	2b01      	cmp	r3, #1
 800999e:	d10f      	bne.n	80099c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80099a0:	4b0b      	ldr	r3, [pc, #44]	; (80099d0 <vPortEnterCritical+0x5c>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	b2db      	uxtb	r3, r3
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d00a      	beq.n	80099c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80099aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ae:	f383 8811 	msr	BASEPRI, r3
 80099b2:	f3bf 8f6f 	isb	sy
 80099b6:	f3bf 8f4f 	dsb	sy
 80099ba:	603b      	str	r3, [r7, #0]
}
 80099bc:	bf00      	nop
 80099be:	e7fe      	b.n	80099be <vPortEnterCritical+0x4a>
	}
}
 80099c0:	bf00      	nop
 80099c2:	370c      	adds	r7, #12
 80099c4:	46bd      	mov	sp, r7
 80099c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ca:	4770      	bx	lr
 80099cc:	24000010 	.word	0x24000010
 80099d0:	e000ed04 	.word	0xe000ed04

080099d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80099d4:	b480      	push	{r7}
 80099d6:	b083      	sub	sp, #12
 80099d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80099da:	4b12      	ldr	r3, [pc, #72]	; (8009a24 <vPortExitCritical+0x50>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d10a      	bne.n	80099f8 <vPortExitCritical+0x24>
	__asm volatile
 80099e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e6:	f383 8811 	msr	BASEPRI, r3
 80099ea:	f3bf 8f6f 	isb	sy
 80099ee:	f3bf 8f4f 	dsb	sy
 80099f2:	607b      	str	r3, [r7, #4]
}
 80099f4:	bf00      	nop
 80099f6:	e7fe      	b.n	80099f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80099f8:	4b0a      	ldr	r3, [pc, #40]	; (8009a24 <vPortExitCritical+0x50>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	3b01      	subs	r3, #1
 80099fe:	4a09      	ldr	r2, [pc, #36]	; (8009a24 <vPortExitCritical+0x50>)
 8009a00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009a02:	4b08      	ldr	r3, [pc, #32]	; (8009a24 <vPortExitCritical+0x50>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d105      	bne.n	8009a16 <vPortExitCritical+0x42>
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009a14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009a16:	bf00      	nop
 8009a18:	370c      	adds	r7, #12
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a20:	4770      	bx	lr
 8009a22:	bf00      	nop
 8009a24:	24000010 	.word	0x24000010
	...

08009a30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009a30:	f3ef 8009 	mrs	r0, PSP
 8009a34:	f3bf 8f6f 	isb	sy
 8009a38:	4b15      	ldr	r3, [pc, #84]	; (8009a90 <pxCurrentTCBConst>)
 8009a3a:	681a      	ldr	r2, [r3, #0]
 8009a3c:	f01e 0f10 	tst.w	lr, #16
 8009a40:	bf08      	it	eq
 8009a42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009a46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a4a:	6010      	str	r0, [r2, #0]
 8009a4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009a50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009a54:	f380 8811 	msr	BASEPRI, r0
 8009a58:	f3bf 8f4f 	dsb	sy
 8009a5c:	f3bf 8f6f 	isb	sy
 8009a60:	f7ff fca4 	bl	80093ac <vTaskSwitchContext>
 8009a64:	f04f 0000 	mov.w	r0, #0
 8009a68:	f380 8811 	msr	BASEPRI, r0
 8009a6c:	bc09      	pop	{r0, r3}
 8009a6e:	6819      	ldr	r1, [r3, #0]
 8009a70:	6808      	ldr	r0, [r1, #0]
 8009a72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a76:	f01e 0f10 	tst.w	lr, #16
 8009a7a:	bf08      	it	eq
 8009a7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009a80:	f380 8809 	msr	PSP, r0
 8009a84:	f3bf 8f6f 	isb	sy
 8009a88:	4770      	bx	lr
 8009a8a:	bf00      	nop
 8009a8c:	f3af 8000 	nop.w

08009a90 <pxCurrentTCBConst>:
 8009a90:	240004d8 	.word	0x240004d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009a94:	bf00      	nop
 8009a96:	bf00      	nop

08009a98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b082      	sub	sp, #8
 8009a9c:	af00      	add	r7, sp, #0
	__asm volatile
 8009a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa2:	f383 8811 	msr	BASEPRI, r3
 8009aa6:	f3bf 8f6f 	isb	sy
 8009aaa:	f3bf 8f4f 	dsb	sy
 8009aae:	607b      	str	r3, [r7, #4]
}
 8009ab0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009ab2:	f7ff fbc3 	bl	800923c <xTaskIncrementTick>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d003      	beq.n	8009ac4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009abc:	4b06      	ldr	r3, [pc, #24]	; (8009ad8 <xPortSysTickHandler+0x40>)
 8009abe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ac2:	601a      	str	r2, [r3, #0]
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	f383 8811 	msr	BASEPRI, r3
}
 8009ace:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009ad0:	bf00      	nop
 8009ad2:	3708      	adds	r7, #8
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}
 8009ad8:	e000ed04 	.word	0xe000ed04

08009adc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009adc:	b480      	push	{r7}
 8009ade:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009ae0:	4b0b      	ldr	r3, [pc, #44]	; (8009b10 <vPortSetupTimerInterrupt+0x34>)
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009ae6:	4b0b      	ldr	r3, [pc, #44]	; (8009b14 <vPortSetupTimerInterrupt+0x38>)
 8009ae8:	2200      	movs	r2, #0
 8009aea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009aec:	4b0a      	ldr	r3, [pc, #40]	; (8009b18 <vPortSetupTimerInterrupt+0x3c>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4a0a      	ldr	r2, [pc, #40]	; (8009b1c <vPortSetupTimerInterrupt+0x40>)
 8009af2:	fba2 2303 	umull	r2, r3, r2, r3
 8009af6:	099b      	lsrs	r3, r3, #6
 8009af8:	4a09      	ldr	r2, [pc, #36]	; (8009b20 <vPortSetupTimerInterrupt+0x44>)
 8009afa:	3b01      	subs	r3, #1
 8009afc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009afe:	4b04      	ldr	r3, [pc, #16]	; (8009b10 <vPortSetupTimerInterrupt+0x34>)
 8009b00:	2207      	movs	r2, #7
 8009b02:	601a      	str	r2, [r3, #0]
}
 8009b04:	bf00      	nop
 8009b06:	46bd      	mov	sp, r7
 8009b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0c:	4770      	bx	lr
 8009b0e:	bf00      	nop
 8009b10:	e000e010 	.word	0xe000e010
 8009b14:	e000e018 	.word	0xe000e018
 8009b18:	24000000 	.word	0x24000000
 8009b1c:	10624dd3 	.word	0x10624dd3
 8009b20:	e000e014 	.word	0xe000e014

08009b24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009b24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009b34 <vPortEnableVFP+0x10>
 8009b28:	6801      	ldr	r1, [r0, #0]
 8009b2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009b2e:	6001      	str	r1, [r0, #0]
 8009b30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009b32:	bf00      	nop
 8009b34:	e000ed88 	.word	0xe000ed88

08009b38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b08a      	sub	sp, #40	; 0x28
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009b40:	2300      	movs	r3, #0
 8009b42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009b44:	f7ff fac0 	bl	80090c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009b48:	4b5b      	ldr	r3, [pc, #364]	; (8009cb8 <pvPortMalloc+0x180>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d101      	bne.n	8009b54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009b50:	f000 f920 	bl	8009d94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009b54:	4b59      	ldr	r3, [pc, #356]	; (8009cbc <pvPortMalloc+0x184>)
 8009b56:	681a      	ldr	r2, [r3, #0]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	4013      	ands	r3, r2
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	f040 8093 	bne.w	8009c88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d01d      	beq.n	8009ba4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009b68:	2208      	movs	r2, #8
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	4413      	add	r3, r2
 8009b6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f003 0307 	and.w	r3, r3, #7
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d014      	beq.n	8009ba4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f023 0307 	bic.w	r3, r3, #7
 8009b80:	3308      	adds	r3, #8
 8009b82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f003 0307 	and.w	r3, r3, #7
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d00a      	beq.n	8009ba4 <pvPortMalloc+0x6c>
	__asm volatile
 8009b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b92:	f383 8811 	msr	BASEPRI, r3
 8009b96:	f3bf 8f6f 	isb	sy
 8009b9a:	f3bf 8f4f 	dsb	sy
 8009b9e:	617b      	str	r3, [r7, #20]
}
 8009ba0:	bf00      	nop
 8009ba2:	e7fe      	b.n	8009ba2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d06e      	beq.n	8009c88 <pvPortMalloc+0x150>
 8009baa:	4b45      	ldr	r3, [pc, #276]	; (8009cc0 <pvPortMalloc+0x188>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	429a      	cmp	r2, r3
 8009bb2:	d869      	bhi.n	8009c88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009bb4:	4b43      	ldr	r3, [pc, #268]	; (8009cc4 <pvPortMalloc+0x18c>)
 8009bb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009bb8:	4b42      	ldr	r3, [pc, #264]	; (8009cc4 <pvPortMalloc+0x18c>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009bbe:	e004      	b.n	8009bca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bcc:	685b      	ldr	r3, [r3, #4]
 8009bce:	687a      	ldr	r2, [r7, #4]
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d903      	bls.n	8009bdc <pvPortMalloc+0xa4>
 8009bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d1f1      	bne.n	8009bc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009bdc:	4b36      	ldr	r3, [pc, #216]	; (8009cb8 <pvPortMalloc+0x180>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009be2:	429a      	cmp	r2, r3
 8009be4:	d050      	beq.n	8009c88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009be6:	6a3b      	ldr	r3, [r7, #32]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	2208      	movs	r2, #8
 8009bec:	4413      	add	r3, r2
 8009bee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf2:	681a      	ldr	r2, [r3, #0]
 8009bf4:	6a3b      	ldr	r3, [r7, #32]
 8009bf6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bfa:	685a      	ldr	r2, [r3, #4]
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	1ad2      	subs	r2, r2, r3
 8009c00:	2308      	movs	r3, #8
 8009c02:	005b      	lsls	r3, r3, #1
 8009c04:	429a      	cmp	r2, r3
 8009c06:	d91f      	bls.n	8009c48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	4413      	add	r3, r2
 8009c0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c10:	69bb      	ldr	r3, [r7, #24]
 8009c12:	f003 0307 	and.w	r3, r3, #7
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d00a      	beq.n	8009c30 <pvPortMalloc+0xf8>
	__asm volatile
 8009c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c1e:	f383 8811 	msr	BASEPRI, r3
 8009c22:	f3bf 8f6f 	isb	sy
 8009c26:	f3bf 8f4f 	dsb	sy
 8009c2a:	613b      	str	r3, [r7, #16]
}
 8009c2c:	bf00      	nop
 8009c2e:	e7fe      	b.n	8009c2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c32:	685a      	ldr	r2, [r3, #4]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	1ad2      	subs	r2, r2, r3
 8009c38:	69bb      	ldr	r3, [r7, #24]
 8009c3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c3e:	687a      	ldr	r2, [r7, #4]
 8009c40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009c42:	69b8      	ldr	r0, [r7, #24]
 8009c44:	f000 f908 	bl	8009e58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009c48:	4b1d      	ldr	r3, [pc, #116]	; (8009cc0 <pvPortMalloc+0x188>)
 8009c4a:	681a      	ldr	r2, [r3, #0]
 8009c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4e:	685b      	ldr	r3, [r3, #4]
 8009c50:	1ad3      	subs	r3, r2, r3
 8009c52:	4a1b      	ldr	r2, [pc, #108]	; (8009cc0 <pvPortMalloc+0x188>)
 8009c54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009c56:	4b1a      	ldr	r3, [pc, #104]	; (8009cc0 <pvPortMalloc+0x188>)
 8009c58:	681a      	ldr	r2, [r3, #0]
 8009c5a:	4b1b      	ldr	r3, [pc, #108]	; (8009cc8 <pvPortMalloc+0x190>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	429a      	cmp	r2, r3
 8009c60:	d203      	bcs.n	8009c6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009c62:	4b17      	ldr	r3, [pc, #92]	; (8009cc0 <pvPortMalloc+0x188>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4a18      	ldr	r2, [pc, #96]	; (8009cc8 <pvPortMalloc+0x190>)
 8009c68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c6c:	685a      	ldr	r2, [r3, #4]
 8009c6e:	4b13      	ldr	r3, [pc, #76]	; (8009cbc <pvPortMalloc+0x184>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	431a      	orrs	r2, r3
 8009c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009c7e:	4b13      	ldr	r3, [pc, #76]	; (8009ccc <pvPortMalloc+0x194>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	3301      	adds	r3, #1
 8009c84:	4a11      	ldr	r2, [pc, #68]	; (8009ccc <pvPortMalloc+0x194>)
 8009c86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009c88:	f7ff fa2c 	bl	80090e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c8c:	69fb      	ldr	r3, [r7, #28]
 8009c8e:	f003 0307 	and.w	r3, r3, #7
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d00a      	beq.n	8009cac <pvPortMalloc+0x174>
	__asm volatile
 8009c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c9a:	f383 8811 	msr	BASEPRI, r3
 8009c9e:	f3bf 8f6f 	isb	sy
 8009ca2:	f3bf 8f4f 	dsb	sy
 8009ca6:	60fb      	str	r3, [r7, #12]
}
 8009ca8:	bf00      	nop
 8009caa:	e7fe      	b.n	8009caa <pvPortMalloc+0x172>
	return pvReturn;
 8009cac:	69fb      	ldr	r3, [r7, #28]
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3728      	adds	r7, #40	; 0x28
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}
 8009cb6:	bf00      	nop
 8009cb8:	24004214 	.word	0x24004214
 8009cbc:	24004228 	.word	0x24004228
 8009cc0:	24004218 	.word	0x24004218
 8009cc4:	2400420c 	.word	0x2400420c
 8009cc8:	2400421c 	.word	0x2400421c
 8009ccc:	24004220 	.word	0x24004220

08009cd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b086      	sub	sp, #24
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d04d      	beq.n	8009d7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009ce2:	2308      	movs	r3, #8
 8009ce4:	425b      	negs	r3, r3
 8009ce6:	697a      	ldr	r2, [r7, #20]
 8009ce8:	4413      	add	r3, r2
 8009cea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009cf0:	693b      	ldr	r3, [r7, #16]
 8009cf2:	685a      	ldr	r2, [r3, #4]
 8009cf4:	4b24      	ldr	r3, [pc, #144]	; (8009d88 <vPortFree+0xb8>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	4013      	ands	r3, r2
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d10a      	bne.n	8009d14 <vPortFree+0x44>
	__asm volatile
 8009cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d02:	f383 8811 	msr	BASEPRI, r3
 8009d06:	f3bf 8f6f 	isb	sy
 8009d0a:	f3bf 8f4f 	dsb	sy
 8009d0e:	60fb      	str	r3, [r7, #12]
}
 8009d10:	bf00      	nop
 8009d12:	e7fe      	b.n	8009d12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d00a      	beq.n	8009d32 <vPortFree+0x62>
	__asm volatile
 8009d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d20:	f383 8811 	msr	BASEPRI, r3
 8009d24:	f3bf 8f6f 	isb	sy
 8009d28:	f3bf 8f4f 	dsb	sy
 8009d2c:	60bb      	str	r3, [r7, #8]
}
 8009d2e:	bf00      	nop
 8009d30:	e7fe      	b.n	8009d30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009d32:	693b      	ldr	r3, [r7, #16]
 8009d34:	685a      	ldr	r2, [r3, #4]
 8009d36:	4b14      	ldr	r3, [pc, #80]	; (8009d88 <vPortFree+0xb8>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	4013      	ands	r3, r2
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d01e      	beq.n	8009d7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009d40:	693b      	ldr	r3, [r7, #16]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d11a      	bne.n	8009d7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009d48:	693b      	ldr	r3, [r7, #16]
 8009d4a:	685a      	ldr	r2, [r3, #4]
 8009d4c:	4b0e      	ldr	r3, [pc, #56]	; (8009d88 <vPortFree+0xb8>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	43db      	mvns	r3, r3
 8009d52:	401a      	ands	r2, r3
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009d58:	f7ff f9b6 	bl	80090c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	685a      	ldr	r2, [r3, #4]
 8009d60:	4b0a      	ldr	r3, [pc, #40]	; (8009d8c <vPortFree+0xbc>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	4413      	add	r3, r2
 8009d66:	4a09      	ldr	r2, [pc, #36]	; (8009d8c <vPortFree+0xbc>)
 8009d68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009d6a:	6938      	ldr	r0, [r7, #16]
 8009d6c:	f000 f874 	bl	8009e58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009d70:	4b07      	ldr	r3, [pc, #28]	; (8009d90 <vPortFree+0xc0>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	3301      	adds	r3, #1
 8009d76:	4a06      	ldr	r2, [pc, #24]	; (8009d90 <vPortFree+0xc0>)
 8009d78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009d7a:	f7ff f9b3 	bl	80090e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009d7e:	bf00      	nop
 8009d80:	3718      	adds	r7, #24
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}
 8009d86:	bf00      	nop
 8009d88:	24004228 	.word	0x24004228
 8009d8c:	24004218 	.word	0x24004218
 8009d90:	24004224 	.word	0x24004224

08009d94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009d94:	b480      	push	{r7}
 8009d96:	b085      	sub	sp, #20
 8009d98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009d9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009d9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009da0:	4b27      	ldr	r3, [pc, #156]	; (8009e40 <prvHeapInit+0xac>)
 8009da2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	f003 0307 	and.w	r3, r3, #7
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d00c      	beq.n	8009dc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	3307      	adds	r3, #7
 8009db2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	f023 0307 	bic.w	r3, r3, #7
 8009dba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009dbc:	68ba      	ldr	r2, [r7, #8]
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	1ad3      	subs	r3, r2, r3
 8009dc2:	4a1f      	ldr	r2, [pc, #124]	; (8009e40 <prvHeapInit+0xac>)
 8009dc4:	4413      	add	r3, r2
 8009dc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009dcc:	4a1d      	ldr	r2, [pc, #116]	; (8009e44 <prvHeapInit+0xb0>)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009dd2:	4b1c      	ldr	r3, [pc, #112]	; (8009e44 <prvHeapInit+0xb0>)
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	68ba      	ldr	r2, [r7, #8]
 8009ddc:	4413      	add	r3, r2
 8009dde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009de0:	2208      	movs	r2, #8
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	1a9b      	subs	r3, r3, r2
 8009de6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	f023 0307 	bic.w	r3, r3, #7
 8009dee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	4a15      	ldr	r2, [pc, #84]	; (8009e48 <prvHeapInit+0xb4>)
 8009df4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009df6:	4b14      	ldr	r3, [pc, #80]	; (8009e48 <prvHeapInit+0xb4>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009dfe:	4b12      	ldr	r3, [pc, #72]	; (8009e48 <prvHeapInit+0xb4>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	2200      	movs	r2, #0
 8009e04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	68fa      	ldr	r2, [r7, #12]
 8009e0e:	1ad2      	subs	r2, r2, r3
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009e14:	4b0c      	ldr	r3, [pc, #48]	; (8009e48 <prvHeapInit+0xb4>)
 8009e16:	681a      	ldr	r2, [r3, #0]
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	685b      	ldr	r3, [r3, #4]
 8009e20:	4a0a      	ldr	r2, [pc, #40]	; (8009e4c <prvHeapInit+0xb8>)
 8009e22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	4a09      	ldr	r2, [pc, #36]	; (8009e50 <prvHeapInit+0xbc>)
 8009e2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009e2c:	4b09      	ldr	r3, [pc, #36]	; (8009e54 <prvHeapInit+0xc0>)
 8009e2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009e32:	601a      	str	r2, [r3, #0]
}
 8009e34:	bf00      	nop
 8009e36:	3714      	adds	r7, #20
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3e:	4770      	bx	lr
 8009e40:	2400060c 	.word	0x2400060c
 8009e44:	2400420c 	.word	0x2400420c
 8009e48:	24004214 	.word	0x24004214
 8009e4c:	2400421c 	.word	0x2400421c
 8009e50:	24004218 	.word	0x24004218
 8009e54:	24004228 	.word	0x24004228

08009e58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009e58:	b480      	push	{r7}
 8009e5a:	b085      	sub	sp, #20
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009e60:	4b28      	ldr	r3, [pc, #160]	; (8009f04 <prvInsertBlockIntoFreeList+0xac>)
 8009e62:	60fb      	str	r3, [r7, #12]
 8009e64:	e002      	b.n	8009e6c <prvInsertBlockIntoFreeList+0x14>
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	60fb      	str	r3, [r7, #12]
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	687a      	ldr	r2, [r7, #4]
 8009e72:	429a      	cmp	r2, r3
 8009e74:	d8f7      	bhi.n	8009e66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	685b      	ldr	r3, [r3, #4]
 8009e7e:	68ba      	ldr	r2, [r7, #8]
 8009e80:	4413      	add	r3, r2
 8009e82:	687a      	ldr	r2, [r7, #4]
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d108      	bne.n	8009e9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	685a      	ldr	r2, [r3, #4]
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	685b      	ldr	r3, [r3, #4]
 8009e90:	441a      	add	r2, r3
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	685b      	ldr	r3, [r3, #4]
 8009ea2:	68ba      	ldr	r2, [r7, #8]
 8009ea4:	441a      	add	r2, r3
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	d118      	bne.n	8009ee0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681a      	ldr	r2, [r3, #0]
 8009eb2:	4b15      	ldr	r3, [pc, #84]	; (8009f08 <prvInsertBlockIntoFreeList+0xb0>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	429a      	cmp	r2, r3
 8009eb8:	d00d      	beq.n	8009ed6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	685a      	ldr	r2, [r3, #4]
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	685b      	ldr	r3, [r3, #4]
 8009ec4:	441a      	add	r2, r3
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	681a      	ldr	r2, [r3, #0]
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	601a      	str	r2, [r3, #0]
 8009ed4:	e008      	b.n	8009ee8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009ed6:	4b0c      	ldr	r3, [pc, #48]	; (8009f08 <prvInsertBlockIntoFreeList+0xb0>)
 8009ed8:	681a      	ldr	r2, [r3, #0]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	601a      	str	r2, [r3, #0]
 8009ede:	e003      	b.n	8009ee8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	681a      	ldr	r2, [r3, #0]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009ee8:	68fa      	ldr	r2, [r7, #12]
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	429a      	cmp	r2, r3
 8009eee:	d002      	beq.n	8009ef6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	687a      	ldr	r2, [r7, #4]
 8009ef4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ef6:	bf00      	nop
 8009ef8:	3714      	adds	r7, #20
 8009efa:	46bd      	mov	sp, r7
 8009efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f00:	4770      	bx	lr
 8009f02:	bf00      	nop
 8009f04:	2400420c 	.word	0x2400420c
 8009f08:	24004214 	.word	0x24004214

08009f0c <memset>:
 8009f0c:	4402      	add	r2, r0
 8009f0e:	4603      	mov	r3, r0
 8009f10:	4293      	cmp	r3, r2
 8009f12:	d100      	bne.n	8009f16 <memset+0xa>
 8009f14:	4770      	bx	lr
 8009f16:	f803 1b01 	strb.w	r1, [r3], #1
 8009f1a:	e7f9      	b.n	8009f10 <memset+0x4>

08009f1c <__libc_init_array>:
 8009f1c:	b570      	push	{r4, r5, r6, lr}
 8009f1e:	4d0d      	ldr	r5, [pc, #52]	; (8009f54 <__libc_init_array+0x38>)
 8009f20:	4c0d      	ldr	r4, [pc, #52]	; (8009f58 <__libc_init_array+0x3c>)
 8009f22:	1b64      	subs	r4, r4, r5
 8009f24:	10a4      	asrs	r4, r4, #2
 8009f26:	2600      	movs	r6, #0
 8009f28:	42a6      	cmp	r6, r4
 8009f2a:	d109      	bne.n	8009f40 <__libc_init_array+0x24>
 8009f2c:	4d0b      	ldr	r5, [pc, #44]	; (8009f5c <__libc_init_array+0x40>)
 8009f2e:	4c0c      	ldr	r4, [pc, #48]	; (8009f60 <__libc_init_array+0x44>)
 8009f30:	f000 f818 	bl	8009f64 <_init>
 8009f34:	1b64      	subs	r4, r4, r5
 8009f36:	10a4      	asrs	r4, r4, #2
 8009f38:	2600      	movs	r6, #0
 8009f3a:	42a6      	cmp	r6, r4
 8009f3c:	d105      	bne.n	8009f4a <__libc_init_array+0x2e>
 8009f3e:	bd70      	pop	{r4, r5, r6, pc}
 8009f40:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f44:	4798      	blx	r3
 8009f46:	3601      	adds	r6, #1
 8009f48:	e7ee      	b.n	8009f28 <__libc_init_array+0xc>
 8009f4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f4e:	4798      	blx	r3
 8009f50:	3601      	adds	r6, #1
 8009f52:	e7f2      	b.n	8009f3a <__libc_init_array+0x1e>
 8009f54:	08009ffc 	.word	0x08009ffc
 8009f58:	08009ffc 	.word	0x08009ffc
 8009f5c:	08009ffc 	.word	0x08009ffc
 8009f60:	0800a000 	.word	0x0800a000

08009f64 <_init>:
 8009f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f66:	bf00      	nop
 8009f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f6a:	bc08      	pop	{r3}
 8009f6c:	469e      	mov	lr, r3
 8009f6e:	4770      	bx	lr

08009f70 <_fini>:
 8009f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f72:	bf00      	nop
 8009f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f76:	bc08      	pop	{r3}
 8009f78:	469e      	mov	lr, r3
 8009f7a:	4770      	bx	lr
