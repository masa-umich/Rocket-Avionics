
droptest-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009dc4  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800a094  0800a094  0000b094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a10c  0800a10c  0000b10c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a114  0800a114  0000b114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a118  0800a118  0000b118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  24000000  0800a11c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004218  24000014  0800a130  0000c014  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400422c  0800a130  0000c22c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000c014  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001cdec  00000000  00000000  0000c042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003aea  00000000  00000000  00028e2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000016c8  00000000  00000000  0002c918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001192  00000000  00000000  0002dfe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034eb4  00000000  00000000  0002f172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001dc20  00000000  00000000  00064026  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014f4c6  00000000  00000000  00081c46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d110c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005f38  00000000  00000000  001d1150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007f  00000000  00000000  001d7088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000014 	.word	0x24000014
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800a07c 	.word	0x0800a07c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000018 	.word	0x24000018
 800030c:	0800a07c 	.word	0x0800a07c

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96a 	b.w	80005fc <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	460c      	mov	r4, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14e      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034c:	4694      	mov	ip, r2
 800034e:	458c      	cmp	ip, r1
 8000350:	4686      	mov	lr, r0
 8000352:	fab2 f282 	clz	r2, r2
 8000356:	d962      	bls.n	800041e <__udivmoddi4+0xde>
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0320 	rsb	r3, r2, #32
 800035e:	4091      	lsls	r1, r2
 8000360:	fa20 f303 	lsr.w	r3, r0, r3
 8000364:	fa0c fc02 	lsl.w	ip, ip, r2
 8000368:	4319      	orrs	r1, r3
 800036a:	fa00 fe02 	lsl.w	lr, r0, r2
 800036e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000372:	fa1f f68c 	uxth.w	r6, ip
 8000376:	fbb1 f4f7 	udiv	r4, r1, r7
 800037a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037e:	fb07 1114 	mls	r1, r7, r4, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb04 f106 	mul.w	r1, r4, r6
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f104 30ff 	add.w	r0, r4, #4294967295
 8000396:	f080 8112 	bcs.w	80005be <__udivmoddi4+0x27e>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 810f 	bls.w	80005be <__udivmoddi4+0x27e>
 80003a0:	3c02      	subs	r4, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a59      	subs	r1, r3, r1
 80003a6:	fa1f f38e 	uxth.w	r3, lr
 80003aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ae:	fb07 1110 	mls	r1, r7, r0, r1
 80003b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b6:	fb00 f606 	mul.w	r6, r0, r6
 80003ba:	429e      	cmp	r6, r3
 80003bc:	d90a      	bls.n	80003d4 <__udivmoddi4+0x94>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c6:	f080 80fc 	bcs.w	80005c2 <__udivmoddi4+0x282>
 80003ca:	429e      	cmp	r6, r3
 80003cc:	f240 80f9 	bls.w	80005c2 <__udivmoddi4+0x282>
 80003d0:	4463      	add	r3, ip
 80003d2:	3802      	subs	r0, #2
 80003d4:	1b9b      	subs	r3, r3, r6
 80003d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003da:	2100      	movs	r1, #0
 80003dc:	b11d      	cbz	r5, 80003e6 <__udivmoddi4+0xa6>
 80003de:	40d3      	lsrs	r3, r2
 80003e0:	2200      	movs	r2, #0
 80003e2:	e9c5 3200 	strd	r3, r2, [r5]
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d905      	bls.n	80003fa <__udivmoddi4+0xba>
 80003ee:	b10d      	cbz	r5, 80003f4 <__udivmoddi4+0xb4>
 80003f0:	e9c5 0100 	strd	r0, r1, [r5]
 80003f4:	2100      	movs	r1, #0
 80003f6:	4608      	mov	r0, r1
 80003f8:	e7f5      	b.n	80003e6 <__udivmoddi4+0xa6>
 80003fa:	fab3 f183 	clz	r1, r3
 80003fe:	2900      	cmp	r1, #0
 8000400:	d146      	bne.n	8000490 <__udivmoddi4+0x150>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d302      	bcc.n	800040c <__udivmoddi4+0xcc>
 8000406:	4290      	cmp	r0, r2
 8000408:	f0c0 80f0 	bcc.w	80005ec <__udivmoddi4+0x2ac>
 800040c:	1a86      	subs	r6, r0, r2
 800040e:	eb64 0303 	sbc.w	r3, r4, r3
 8000412:	2001      	movs	r0, #1
 8000414:	2d00      	cmp	r5, #0
 8000416:	d0e6      	beq.n	80003e6 <__udivmoddi4+0xa6>
 8000418:	e9c5 6300 	strd	r6, r3, [r5]
 800041c:	e7e3      	b.n	80003e6 <__udivmoddi4+0xa6>
 800041e:	2a00      	cmp	r2, #0
 8000420:	f040 8090 	bne.w	8000544 <__udivmoddi4+0x204>
 8000424:	eba1 040c 	sub.w	r4, r1, ip
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa1f f78c 	uxth.w	r7, ip
 8000430:	2101      	movs	r1, #1
 8000432:	fbb4 f6f8 	udiv	r6, r4, r8
 8000436:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800043a:	fb08 4416 	mls	r4, r8, r6, r4
 800043e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000442:	fb07 f006 	mul.w	r0, r7, r6
 8000446:	4298      	cmp	r0, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x11c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x11a>
 8000454:	4298      	cmp	r0, r3
 8000456:	f200 80cd 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 800045a:	4626      	mov	r6, r4
 800045c:	1a1c      	subs	r4, r3, r0
 800045e:	fa1f f38e 	uxth.w	r3, lr
 8000462:	fbb4 f0f8 	udiv	r0, r4, r8
 8000466:	fb08 4410 	mls	r4, r8, r0, r4
 800046a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046e:	fb00 f707 	mul.w	r7, r0, r7
 8000472:	429f      	cmp	r7, r3
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x148>
 8000476:	eb1c 0303 	adds.w	r3, ip, r3
 800047a:	f100 34ff 	add.w	r4, r0, #4294967295
 800047e:	d202      	bcs.n	8000486 <__udivmoddi4+0x146>
 8000480:	429f      	cmp	r7, r3
 8000482:	f200 80b0 	bhi.w	80005e6 <__udivmoddi4+0x2a6>
 8000486:	4620      	mov	r0, r4
 8000488:	1bdb      	subs	r3, r3, r7
 800048a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048e:	e7a5      	b.n	80003dc <__udivmoddi4+0x9c>
 8000490:	f1c1 0620 	rsb	r6, r1, #32
 8000494:	408b      	lsls	r3, r1
 8000496:	fa22 f706 	lsr.w	r7, r2, r6
 800049a:	431f      	orrs	r7, r3
 800049c:	fa20 fc06 	lsr.w	ip, r0, r6
 80004a0:	fa04 f301 	lsl.w	r3, r4, r1
 80004a4:	ea43 030c 	orr.w	r3, r3, ip
 80004a8:	40f4      	lsrs	r4, r6
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	0c38      	lsrs	r0, r7, #16
 80004b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b4:	fbb4 fef0 	udiv	lr, r4, r0
 80004b8:	fa1f fc87 	uxth.w	ip, r7
 80004bc:	fb00 441e 	mls	r4, r0, lr, r4
 80004c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c4:	fb0e f90c 	mul.w	r9, lr, ip
 80004c8:	45a1      	cmp	r9, r4
 80004ca:	fa02 f201 	lsl.w	r2, r2, r1
 80004ce:	d90a      	bls.n	80004e6 <__udivmoddi4+0x1a6>
 80004d0:	193c      	adds	r4, r7, r4
 80004d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d6:	f080 8084 	bcs.w	80005e2 <__udivmoddi4+0x2a2>
 80004da:	45a1      	cmp	r9, r4
 80004dc:	f240 8081 	bls.w	80005e2 <__udivmoddi4+0x2a2>
 80004e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e4:	443c      	add	r4, r7
 80004e6:	eba4 0409 	sub.w	r4, r4, r9
 80004ea:	fa1f f983 	uxth.w	r9, r3
 80004ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80004f2:	fb00 4413 	mls	r4, r0, r3, r4
 80004f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fe:	45a4      	cmp	ip, r4
 8000500:	d907      	bls.n	8000512 <__udivmoddi4+0x1d2>
 8000502:	193c      	adds	r4, r7, r4
 8000504:	f103 30ff 	add.w	r0, r3, #4294967295
 8000508:	d267      	bcs.n	80005da <__udivmoddi4+0x29a>
 800050a:	45a4      	cmp	ip, r4
 800050c:	d965      	bls.n	80005da <__udivmoddi4+0x29a>
 800050e:	3b02      	subs	r3, #2
 8000510:	443c      	add	r4, r7
 8000512:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000516:	fba0 9302 	umull	r9, r3, r0, r2
 800051a:	eba4 040c 	sub.w	r4, r4, ip
 800051e:	429c      	cmp	r4, r3
 8000520:	46ce      	mov	lr, r9
 8000522:	469c      	mov	ip, r3
 8000524:	d351      	bcc.n	80005ca <__udivmoddi4+0x28a>
 8000526:	d04e      	beq.n	80005c6 <__udivmoddi4+0x286>
 8000528:	b155      	cbz	r5, 8000540 <__udivmoddi4+0x200>
 800052a:	ebb8 030e 	subs.w	r3, r8, lr
 800052e:	eb64 040c 	sbc.w	r4, r4, ip
 8000532:	fa04 f606 	lsl.w	r6, r4, r6
 8000536:	40cb      	lsrs	r3, r1
 8000538:	431e      	orrs	r6, r3
 800053a:	40cc      	lsrs	r4, r1
 800053c:	e9c5 6400 	strd	r6, r4, [r5]
 8000540:	2100      	movs	r1, #0
 8000542:	e750      	b.n	80003e6 <__udivmoddi4+0xa6>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f103 	lsr.w	r1, r0, r3
 800054c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000550:	fa24 f303 	lsr.w	r3, r4, r3
 8000554:	4094      	lsls	r4, r2
 8000556:	430c      	orrs	r4, r1
 8000558:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800055c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000560:	fa1f f78c 	uxth.w	r7, ip
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3110 	mls	r1, r8, r0, r3
 800056c:	0c23      	lsrs	r3, r4, #16
 800056e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000572:	fb00 f107 	mul.w	r1, r0, r7
 8000576:	4299      	cmp	r1, r3
 8000578:	d908      	bls.n	800058c <__udivmoddi4+0x24c>
 800057a:	eb1c 0303 	adds.w	r3, ip, r3
 800057e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000582:	d22c      	bcs.n	80005de <__udivmoddi4+0x29e>
 8000584:	4299      	cmp	r1, r3
 8000586:	d92a      	bls.n	80005de <__udivmoddi4+0x29e>
 8000588:	3802      	subs	r0, #2
 800058a:	4463      	add	r3, ip
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b2a4      	uxth	r4, r4
 8000590:	fbb3 f1f8 	udiv	r1, r3, r8
 8000594:	fb08 3311 	mls	r3, r8, r1, r3
 8000598:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800059c:	fb01 f307 	mul.w	r3, r1, r7
 80005a0:	42a3      	cmp	r3, r4
 80005a2:	d908      	bls.n	80005b6 <__udivmoddi4+0x276>
 80005a4:	eb1c 0404 	adds.w	r4, ip, r4
 80005a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005ac:	d213      	bcs.n	80005d6 <__udivmoddi4+0x296>
 80005ae:	42a3      	cmp	r3, r4
 80005b0:	d911      	bls.n	80005d6 <__udivmoddi4+0x296>
 80005b2:	3902      	subs	r1, #2
 80005b4:	4464      	add	r4, ip
 80005b6:	1ae4      	subs	r4, r4, r3
 80005b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005bc:	e739      	b.n	8000432 <__udivmoddi4+0xf2>
 80005be:	4604      	mov	r4, r0
 80005c0:	e6f0      	b.n	80003a4 <__udivmoddi4+0x64>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e706      	b.n	80003d4 <__udivmoddi4+0x94>
 80005c6:	45c8      	cmp	r8, r9
 80005c8:	d2ae      	bcs.n	8000528 <__udivmoddi4+0x1e8>
 80005ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80005d2:	3801      	subs	r0, #1
 80005d4:	e7a8      	b.n	8000528 <__udivmoddi4+0x1e8>
 80005d6:	4631      	mov	r1, r6
 80005d8:	e7ed      	b.n	80005b6 <__udivmoddi4+0x276>
 80005da:	4603      	mov	r3, r0
 80005dc:	e799      	b.n	8000512 <__udivmoddi4+0x1d2>
 80005de:	4630      	mov	r0, r6
 80005e0:	e7d4      	b.n	800058c <__udivmoddi4+0x24c>
 80005e2:	46d6      	mov	lr, sl
 80005e4:	e77f      	b.n	80004e6 <__udivmoddi4+0x1a6>
 80005e6:	4463      	add	r3, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e74d      	b.n	8000488 <__udivmoddi4+0x148>
 80005ec:	4606      	mov	r6, r0
 80005ee:	4623      	mov	r3, r4
 80005f0:	4608      	mov	r0, r1
 80005f2:	e70f      	b.n	8000414 <__udivmoddi4+0xd4>
 80005f4:	3e02      	subs	r6, #2
 80005f6:	4463      	add	r3, ip
 80005f8:	e730      	b.n	800045c <__udivmoddi4+0x11c>
 80005fa:	bf00      	nop

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <BAR_presConvert>:
 */

#include "LPS22HBTR.h"

//Pressure convert
float BAR_presConvert(uint8_t XL_Byte, uint8_t L_Byte, uint8_t H_Byte) {
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	71fb      	strb	r3, [r7, #7]
 800060a:	460b      	mov	r3, r1
 800060c:	71bb      	strb	r3, [r7, #6]
 800060e:	4613      	mov	r3, r2
 8000610:	717b      	strb	r3, [r7, #5]
    //Cast to 24 bit int with 2s compliment
    int32_t pres_raw = (H_Byte << 16) | (L_Byte << 8) | (XL_Byte);
 8000612:	797b      	ldrb	r3, [r7, #5]
 8000614:	041a      	lsls	r2, r3, #16
 8000616:	79bb      	ldrb	r3, [r7, #6]
 8000618:	021b      	lsls	r3, r3, #8
 800061a:	431a      	orrs	r2, r3
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	4313      	orrs	r3, r2
 8000620:	60fb      	str	r3, [r7, #12]
    float pres = (float)(pres_raw / (float)BAR_PRES_SCALING_FACTOR); // Convert the 24 bit number to a pressure in hPa
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	ee07 3a90 	vmov	s15, r3
 8000628:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800062c:	eddf 6a07 	vldr	s13, [pc, #28]	@ 800064c <BAR_presConvert+0x4c>
 8000630:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000634:	edc7 7a02 	vstr	s15, [r7, #8]
    return pres;
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	ee07 3a90 	vmov	s15, r3
}
 800063e:	eeb0 0a67 	vmov.f32	s0, s15
 8000642:	3714      	adds	r7, #20
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr
 800064c:	45800000 	.word	0x45800000

08000650 <BAR_tempConvert>:
    float alt = (1 - pow(pres / BAR_SEA_LEVEL_PRESS, 0.1903)) * 145366.45 * 0.3048; // Convert to meters above sea level
    return alt;
}

//Temperature convert
float BAR_tempConvert(uint8_t L_Byte, uint8_t H_Byte) {
 8000650:	b480      	push	{r7}
 8000652:	b085      	sub	sp, #20
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	460a      	mov	r2, r1
 800065a:	71fb      	strb	r3, [r7, #7]
 800065c:	4613      	mov	r3, r2
 800065e:	71bb      	strb	r3, [r7, #6]
    int16_t temp_raw = (int16_t)(H_Byte << 8) | L_Byte; // Combine the two bytes into one 16 bit number. This is already formatted for an int16_t
 8000660:	79bb      	ldrb	r3, [r7, #6]
 8000662:	021b      	lsls	r3, r3, #8
 8000664:	b21a      	sxth	r2, r3
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	b21b      	sxth	r3, r3
 800066a:	4313      	orrs	r3, r2
 800066c:	81fb      	strh	r3, [r7, #14]

    float temp = (float)temp_raw / (float)BAR_TEMP_SCALING_FACTOR; // Convert to degrees C
 800066e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000672:	ee07 3a90 	vmov	s15, r3
 8000676:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800067a:	eddf 6a08 	vldr	s13, [pc, #32]	@ 800069c <BAR_tempConvert+0x4c>
 800067e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000682:	edc7 7a02 	vstr	s15, [r7, #8]

    return temp;
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	ee07 3a90 	vmov	s15, r3
}
 800068c:	eeb0 0a67 	vmov.f32	s0, s15
 8000690:	3714      	adds	r7, #20
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	42c80000 	.word	0x42c80000

080006a0 <BAR_chipSelect>:

//Chip select
void BAR_chipSelect(BAR* BAR) {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BAR->CS_GPIO_Port, BAR->CS_GPIO_Pin, 0); //CS pin
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	6898      	ldr	r0, [r3, #8]
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	899b      	ldrh	r3, [r3, #12]
 80006b0:	2200      	movs	r2, #0
 80006b2:	4619      	mov	r1, r3
 80006b4:	f002 fd24 	bl	8003100 <HAL_GPIO_WritePin>
}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <BAR_chipRelease>:

//Chip release
void BAR_chipRelease(BAR* BAR) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BAR->CS_GPIO_Port, BAR->CS_GPIO_Pin, 1); //CS pin
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	6898      	ldr	r0, [r3, #8]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	899b      	ldrh	r3, [r3, #12]
 80006d0:	2201      	movs	r2, #1
 80006d2:	4619      	mov	r1, r3
 80006d4:	f002 fd14 	bl	8003100 <HAL_GPIO_WritePin>
}
 80006d8:	bf00      	nop
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <BAR_read>:

//Read register from barometer
HAL_StatusTypeDef BAR_read(BAR* BAR, uint8_t reg_addr, uint8_t* rx_buffer, uint8_t num_bytes) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b086      	sub	sp, #24
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	60f8      	str	r0, [r7, #12]
 80006e8:	607a      	str	r2, [r7, #4]
 80006ea:	461a      	mov	r2, r3
 80006ec:	460b      	mov	r3, r1
 80006ee:	72fb      	strb	r3, [r7, #11]
 80006f0:	4613      	mov	r3, r2
 80006f2:	72bb      	strb	r3, [r7, #10]
	uint8_t reg_buffer[1] = {reg_addr | 0x80};  // Set register for reading
 80006f4:	7afb      	ldrb	r3, [r7, #11]
 80006f6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	753b      	strb	r3, [r7, #20]

	HAL_StatusTypeDef status;

	taskENTER_CRITICAL();
 80006fe:	f009 f9c3 	bl	8009a88 <vPortEnterCritical>

	BAR_chipSelect(BAR);
 8000702:	68f8      	ldr	r0, [r7, #12]
 8000704:	f7ff ffcc 	bl	80006a0 <BAR_chipSelect>
	HAL_SPI_Transmit(BAR->hspi, (uint8_t *)reg_buffer, 1, BAR->SPI_TIMEOUT);
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	6818      	ldr	r0, [r3, #0]
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	889b      	ldrh	r3, [r3, #4]
 8000710:	f107 0114 	add.w	r1, r7, #20
 8000714:	2201      	movs	r2, #1
 8000716:	f006 fa07 	bl	8006b28 <HAL_SPI_Transmit>
	status = HAL_SPI_Receive(BAR->hspi, (uint8_t *)rx_buffer, num_bytes, BAR->SPI_TIMEOUT);
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	6818      	ldr	r0, [r3, #0]
 800071e:	7abb      	ldrb	r3, [r7, #10]
 8000720:	b29a      	uxth	r2, r3
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	889b      	ldrh	r3, [r3, #4]
 8000726:	6879      	ldr	r1, [r7, #4]
 8000728:	f006 fbec 	bl	8006f04 <HAL_SPI_Receive>
 800072c:	4603      	mov	r3, r0
 800072e:	75fb      	strb	r3, [r7, #23]
	BAR_chipRelease(BAR);
 8000730:	68f8      	ldr	r0, [r7, #12]
 8000732:	f7ff ffc5 	bl	80006c0 <BAR_chipRelease>

	taskEXIT_CRITICAL();
 8000736:	f009 f9d9 	bl	8009aec <vPortExitCritical>
	return status;
 800073a:	7dfb      	ldrb	r3, [r7, #23]
}
 800073c:	4618      	mov	r0, r3
 800073e:	3718      	adds	r7, #24
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}

08000744 <BAR_write>:

//Write register from barometer
HAL_StatusTypeDef BAR_write(BAR* BAR, uint8_t* tx_buffer, uint8_t num_bytes) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b086      	sub	sp, #24
 8000748:	af00      	add	r7, sp, #0
 800074a:	60f8      	str	r0, [r7, #12]
 800074c:	60b9      	str	r1, [r7, #8]
 800074e:	4613      	mov	r3, r2
 8000750:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status;

	taskENTER_CRITICAL();
 8000752:	f009 f999 	bl	8009a88 <vPortEnterCritical>

	BAR_chipSelect(BAR);
 8000756:	68f8      	ldr	r0, [r7, #12]
 8000758:	f7ff ffa2 	bl	80006a0 <BAR_chipSelect>
	status = HAL_SPI_Transmit(BAR->hspi, (uint8_t *)tx_buffer, num_bytes + 1, BAR->SPI_TIMEOUT);
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	6818      	ldr	r0, [r3, #0]
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	b29b      	uxth	r3, r3
 8000764:	3301      	adds	r3, #1
 8000766:	b29a      	uxth	r2, r3
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	889b      	ldrh	r3, [r3, #4]
 800076c:	68b9      	ldr	r1, [r7, #8]
 800076e:	f006 f9db 	bl	8006b28 <HAL_SPI_Transmit>
 8000772:	4603      	mov	r3, r0
 8000774:	75fb      	strb	r3, [r7, #23]
	BAR_chipRelease(BAR);
 8000776:	68f8      	ldr	r0, [r7, #12]
 8000778:	f7ff ffa2 	bl	80006c0 <BAR_chipRelease>

	taskEXIT_CRITICAL();
 800077c:	f009 f9b6 	bl	8009aec <vPortExitCritical>
	return status;
 8000780:	7dfb      	ldrb	r3, [r7, #23]
}
 8000782:	4618      	mov	r0, r3
 8000784:	3718      	adds	r7, #24
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}

0800078a <BAR_init>:

//Initialize barometer with default settings
int BAR_init(BAR* BAR) {
 800078a:	b580      	push	{r7, lr}
 800078c:	b082      	sub	sp, #8
 800078e:	af00      	add	r7, sp, #0
 8000790:	6078      	str	r0, [r7, #4]
    BAR_chipRelease(BAR); // Make sure the chip is not selected
 8000792:	6878      	ldr	r0, [r7, #4]
 8000794:	f7ff ff94 	bl	80006c0 <BAR_chipRelease>
	BAR_Reset(BAR); // Reset the barometer, built-in delay for reboot
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f000 f8d4 	bl	8000946 <BAR_Reset>

    // Set default configs
    BAR_send(BAR, BAR_CTRL1_C, BAR_DEFAULT_CONF_CTRL1_C);
 800079e:	223a      	movs	r2, #58	@ 0x3a
 80007a0:	2110      	movs	r1, #16
 80007a2:	6878      	ldr	r0, [r7, #4]
 80007a4:	f000 f862 	bl	800086c <BAR_send>
    BAR_send(BAR, BAR_CTRL2_C, BAR_DEFAULT_CONF_CTRL2_C);
 80007a8:	2210      	movs	r2, #16
 80007aa:	2111      	movs	r1, #17
 80007ac:	6878      	ldr	r0, [r7, #4]
 80007ae:	f000 f85d 	bl	800086c <BAR_send>

    return BAR_whoami(BAR);
 80007b2:	6878      	ldr	r0, [r7, #4]
 80007b4:	f000 f881 	bl	80008ba <BAR_whoami>
 80007b8:	4603      	mov	r3, r0
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
	...

080007c4 <BAR_getPres>:

//Get pressure from barometer
int BAR_getPres(BAR* BAR, float* pres) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	6039      	str	r1, [r7, #0]
    uint8_t buffer[3] = {0,0,0};
 80007ce:	4a11      	ldr	r2, [pc, #68]	@ (8000814 <BAR_getPres+0x50>)
 80007d0:	f107 030c 	add.w	r3, r7, #12
 80007d4:	6812      	ldr	r2, [r2, #0]
 80007d6:	4611      	mov	r1, r2
 80007d8:	8019      	strh	r1, [r3, #0]
 80007da:	3302      	adds	r3, #2
 80007dc:	0c12      	lsrs	r2, r2, #16
 80007de:	701a      	strb	r2, [r3, #0]
    //Wait for pressure data to be ready
    BAR_waitForPres(BAR); // Blocks until the pressure data is ready
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f000 f882 	bl	80008ea <BAR_waitForPres>

    //Read pressure data
    BAR_read(BAR, BAR_PRESS_OUT_XL, buffer, 3);
 80007e6:	f107 020c 	add.w	r2, r7, #12
 80007ea:	2303      	movs	r3, #3
 80007ec:	2128      	movs	r1, #40	@ 0x28
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	f7ff ff76 	bl	80006e0 <BAR_read>
    *pres = BAR_presConvert(buffer[0], buffer[1], buffer[2]);
 80007f4:	7b3b      	ldrb	r3, [r7, #12]
 80007f6:	7b79      	ldrb	r1, [r7, #13]
 80007f8:	7bba      	ldrb	r2, [r7, #14]
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff ff00 	bl	8000600 <BAR_presConvert>
 8000800:	eef0 7a40 	vmov.f32	s15, s0
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	edc3 7a00 	vstr	s15, [r3]
    return 0;
 800080a:	2300      	movs	r3, #0
}
 800080c:	4618      	mov	r0, r3
 800080e:	3710      	adds	r7, #16
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	0800a094 	.word	0x0800a094

08000818 <BAR_getTemp>:
    BAR_read(BAR, BAR_PRESS_OUT_XL, buffer, 3);
    *alt = BAR_altConvert(buffer[0], buffer[1], buffer[2], BAR_SEA_LEVEL_PRESS);
    return 0;
}

int BAR_getTemp(BAR* BAR, float* temp) {
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	6039      	str	r1, [r7, #0]
    uint8_t buffer[3] = {0,0};
 8000822:	4a11      	ldr	r2, [pc, #68]	@ (8000868 <BAR_getTemp+0x50>)
 8000824:	f107 030c 	add.w	r3, r7, #12
 8000828:	6812      	ldr	r2, [r2, #0]
 800082a:	4611      	mov	r1, r2
 800082c:	8019      	strh	r1, [r3, #0]
 800082e:	3302      	adds	r3, #2
 8000830:	0c12      	lsrs	r2, r2, #16
 8000832:	701a      	strb	r2, [r3, #0]

    //Wait for temperature data to be ready
    BAR_waitForTemp(BAR); // Blocks until the temperature data is ready
 8000834:	6878      	ldr	r0, [r7, #4]
 8000836:	f000 f86f 	bl	8000918 <BAR_waitForTemp>

    //Read temperature data
    BAR_read(BAR, BAR_TEMP_OUT_L, buffer, 2);
 800083a:	f107 020c 	add.w	r2, r7, #12
 800083e:	2302      	movs	r3, #2
 8000840:	212b      	movs	r1, #43	@ 0x2b
 8000842:	6878      	ldr	r0, [r7, #4]
 8000844:	f7ff ff4c 	bl	80006e0 <BAR_read>
    *temp = BAR_tempConvert(buffer[0], buffer[1]);
 8000848:	7b3b      	ldrb	r3, [r7, #12]
 800084a:	7b7a      	ldrb	r2, [r7, #13]
 800084c:	4611      	mov	r1, r2
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff fefe 	bl	8000650 <BAR_tempConvert>
 8000854:	eef0 7a40 	vmov.f32	s15, s0
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	edc3 7a00 	vstr	s15, [r3]
    return 0;
 800085e:	2300      	movs	r3, #0
}
 8000860:	4618      	mov	r0, r3
 8000862:	3710      	adds	r7, #16
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	0800a094 	.word	0x0800a094

0800086c <BAR_send>:

//Send command to barometer
int BAR_send(BAR* BAR, uint8_t cmd, uint8_t value) {
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	460b      	mov	r3, r1
 8000876:	70fb      	strb	r3, [r7, #3]
 8000878:	4613      	mov	r3, r2
 800087a:	70bb      	strb	r3, [r7, #2]
	uint8_t buffer[2] = {0,0};
 800087c:	2300      	movs	r3, #0
 800087e:	81bb      	strh	r3, [r7, #12]
	//Send command
	buffer[0] = cmd;
 8000880:	78fb      	ldrb	r3, [r7, #3]
 8000882:	733b      	strb	r3, [r7, #12]
	buffer[1] = value;
 8000884:	78bb      	ldrb	r3, [r7, #2]
 8000886:	737b      	strb	r3, [r7, #13]
	BAR_write(BAR, buffer, 1);
 8000888:	f107 030c 	add.w	r3, r7, #12
 800088c:	2201      	movs	r2, #1
 800088e:	4619      	mov	r1, r3
 8000890:	6878      	ldr	r0, [r7, #4]
 8000892:	f7ff ff57 	bl	8000744 <BAR_write>
	//Check that it wrote successfully
	BAR_read(BAR, cmd, &buffer[0], 1);
 8000896:	f107 020c 	add.w	r2, r7, #12
 800089a:	78f9      	ldrb	r1, [r7, #3]
 800089c:	2301      	movs	r3, #1
 800089e:	6878      	ldr	r0, [r7, #4]
 80008a0:	f7ff ff1e 	bl	80006e0 <BAR_read>
    if (buffer[0]!=value) {
 80008a4:	7b3b      	ldrb	r3, [r7, #12]
 80008a6:	78ba      	ldrb	r2, [r7, #2]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	d001      	beq.n	80008b0 <BAR_send+0x44>
        return 1; //Error
 80008ac:	2301      	movs	r3, #1
 80008ae:	e000      	b.n	80008b2 <BAR_send+0x46>
    }

	return 0;
 80008b0:	2300      	movs	r3, #0
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3710      	adds	r7, #16
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}

080008ba <BAR_whoami>:

//Return 0 is WHO_AM_I register can be read, 1 otherwise
int BAR_whoami(BAR* BAR) {
 80008ba:	b580      	push	{r7, lr}
 80008bc:	b084      	sub	sp, #16
 80008be:	af00      	add	r7, sp, #0
 80008c0:	6078      	str	r0, [r7, #4]
	uint8_t buffer = 0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	73fb      	strb	r3, [r7, #15]
	//Read WHO_AM_I register
	BAR_read(BAR, BAR_WHO_AM_I_REG_ADDR, &buffer, 1);
 80008c6:	f107 020f 	add.w	r2, r7, #15
 80008ca:	2301      	movs	r3, #1
 80008cc:	210f      	movs	r1, #15
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	f7ff ff06 	bl	80006e0 <BAR_read>
	//Check if WHO_AM_I register is correct
	if (buffer != BAR_WHO_AM_I_REG_VAL) {
 80008d4:	7bfb      	ldrb	r3, [r7, #15]
 80008d6:	2bb1      	cmp	r3, #177	@ 0xb1
 80008d8:	d002      	beq.n	80008e0 <BAR_whoami+0x26>
		return -1;
 80008da:	f04f 33ff 	mov.w	r3, #4294967295
 80008de:	e000      	b.n	80008e2 <BAR_whoami+0x28>
	}
	return 0;
 80008e0:	2300      	movs	r3, #0
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3710      	adds	r7, #16
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <BAR_waitForPres>:

//Waits / blocks for the pressure data to be ready
int BAR_waitForPres(BAR* BAR) {
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b084      	sub	sp, #16
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
    uint8_t status = 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	73fb      	strb	r3, [r7, #15]
    do {
    	BAR_read(BAR, BAR_STATUS_REG, &status, 1);
 80008f6:	f107 020f 	add.w	r2, r7, #15
 80008fa:	2301      	movs	r3, #1
 80008fc:	2127      	movs	r1, #39	@ 0x27
 80008fe:	6878      	ldr	r0, [r7, #4]
 8000900:	f7ff feee 	bl	80006e0 <BAR_read>
    } while (!(status & 0x2));
 8000904:	7bfb      	ldrb	r3, [r7, #15]
 8000906:	f003 0302 	and.w	r3, r3, #2
 800090a:	2b00      	cmp	r3, #0
 800090c:	d0f3      	beq.n	80008f6 <BAR_waitForPres+0xc>
    return 0;
 800090e:	2300      	movs	r3, #0
}
 8000910:	4618      	mov	r0, r3
 8000912:	3710      	adds	r7, #16
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <BAR_waitForTemp>:

//Waits / blocks for the temperature data to be ready
int BAR_waitForTemp(BAR* BAR) {
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0;
 8000920:	2300      	movs	r3, #0
 8000922:	73fb      	strb	r3, [r7, #15]
    do {
    	BAR_read(BAR, BAR_STATUS_REG, &status, 1);
 8000924:	f107 020f 	add.w	r2, r7, #15
 8000928:	2301      	movs	r3, #1
 800092a:	2127      	movs	r1, #39	@ 0x27
 800092c:	6878      	ldr	r0, [r7, #4]
 800092e:	f7ff fed7 	bl	80006e0 <BAR_read>
    } while (!(status & 0x1));
 8000932:	7bfb      	ldrb	r3, [r7, #15]
 8000934:	f003 0301 	and.w	r3, r3, #1
 8000938:	2b00      	cmp	r3, #0
 800093a:	d0f3      	beq.n	8000924 <BAR_waitForTemp+0xc>
    return 0;
 800093c:	2300      	movs	r3, #0
}
 800093e:	4618      	mov	r0, r3
 8000940:	3710      	adds	r7, #16
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <BAR_Reset>:

// Software and memory reset
int BAR_Reset(BAR* BAR) {
 8000946:	b580      	push	{r7, lr}
 8000948:	b082      	sub	sp, #8
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
    BAR_send(BAR, BAR_CTRL2_C, BAR_SW_RESET);
 800094e:	2284      	movs	r2, #132	@ 0x84
 8000950:	2111      	movs	r1, #17
 8000952:	6878      	ldr	r0, [r7, #4]
 8000954:	f7ff ff8a 	bl	800086c <BAR_send>

    HAL_Delay(50); // Ensure the reset is complete
 8000958:	2032      	movs	r0, #50	@ 0x32
 800095a:	f002 f909 	bl	8002b70 <HAL_Delay>
    return 0;
 800095e:	2300      	movs	r3, #0
}
 8000960:	4618      	mov	r0, r3
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}

08000968 <IMU_accelConvert>:

    return temp;
}

//IMU convert
float IMU_accelConvert(uint8_t H_Byte, uint8_t L_Byte) {
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	460a      	mov	r2, r1
 8000972:	71fb      	strb	r3, [r7, #7]
 8000974:	4613      	mov	r3, r2
 8000976:	71bb      	strb	r3, [r7, #6]
	int16_t accel_raw = (int16_t)(H_Byte << 8) + L_Byte; // Combine the two bytes into one 16 bit number. This is already formatted for an int16_t
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	021b      	lsls	r3, r3, #8
 800097c:	b29a      	uxth	r2, r3
 800097e:	79bb      	ldrb	r3, [r7, #6]
 8000980:	b29b      	uxth	r3, r3
 8000982:	4413      	add	r3, r2
 8000984:	b29b      	uxth	r3, r3
 8000986:	81fb      	strh	r3, [r7, #14]

	float accel = (accel_raw*IMU_SCALING_FACTOR_ACCEL)*IMU_g; // Convert to m/s^2
 8000988:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800098c:	ee07 3a90 	vmov	s15, r3
 8000990:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000994:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8000998:	ee27 7a87 	vmul.f32	s14, s15, s14
 800099c:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80009c4 <IMU_accelConvert+0x5c>
 80009a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009a4:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80009c8 <IMU_accelConvert+0x60>
 80009a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009ac:	edc7 7a02 	vstr	s15, [r7, #8]

	return accel;
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	ee07 3a90 	vmov	s15, r3
}
 80009b6:	eeb0 0a67 	vmov.f32	s0, s15
 80009ba:	3714      	adds	r7, #20
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr
 80009c4:	46fffe00 	.word	0x46fffe00
 80009c8:	411ce80a 	.word	0x411ce80a

080009cc <IMU_gyroConvert>:

//Gyro convert
float IMU_gyroConvert(uint8_t H_Byte, uint8_t L_Byte) {
 80009cc:	b480      	push	{r7}
 80009ce:	b085      	sub	sp, #20
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4603      	mov	r3, r0
 80009d4:	460a      	mov	r2, r1
 80009d6:	71fb      	strb	r3, [r7, #7]
 80009d8:	4613      	mov	r3, r2
 80009da:	71bb      	strb	r3, [r7, #6]
	int16_t gyro_raw = (int16_t)(H_Byte << 8) + L_Byte; // Combine the two bytes into one 16 bit number. This is already formatted for an int16_t
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	021b      	lsls	r3, r3, #8
 80009e0:	b29a      	uxth	r2, r3
 80009e2:	79bb      	ldrb	r3, [r7, #6]
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	4413      	add	r3, r2
 80009e8:	b29b      	uxth	r3, r3
 80009ea:	81fb      	strh	r3, [r7, #14]

	float gyro = gyro_raw*IMU_SCALING_FACTOR_GYRO; // Convert to dps
 80009ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80009f0:	ee07 3a90 	vmov	s15, r3
 80009f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009f8:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8000a20 <IMU_gyroConvert+0x54>
 80009fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000a00:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8000a24 <IMU_gyroConvert+0x58>
 8000a04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a08:	edc7 7a02 	vstr	s15, [r7, #8]

	return gyro;
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	ee07 3a90 	vmov	s15, r3
}
 8000a12:	eeb0 0a67 	vmov.f32	s0, s15
 8000a16:	3714      	adds	r7, #20
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	44fa0000 	.word	0x44fa0000
 8000a24:	46fffe00 	.word	0x46fffe00

08000a28 <IMU_read>:

//Read register from IMU
HAL_StatusTypeDef IMU_read(IMU* IMU, uint8_t reg_addr, uint8_t* rx_buffer, uint8_t num_bytes) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b088      	sub	sp, #32
 8000a2c:	af02      	add	r7, sp, #8
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	607a      	str	r2, [r7, #4]
 8000a32:	461a      	mov	r2, r3
 8000a34:	460b      	mov	r3, r1
 8000a36:	72fb      	strb	r3, [r7, #11]
 8000a38:	4613      	mov	r3, r2
 8000a3a:	72bb      	strb	r3, [r7, #10]
	HAL_StatusTypeDef status;

	taskENTER_CRITICAL();
 8000a3c:	f009 f824 	bl	8009a88 <vPortEnterCritical>

	HAL_I2C_Master_Transmit(IMU->hi2c, IMU_I2C_ADDR, &reg_addr, 1, IMU->I2C_TIMEOUT);
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	6818      	ldr	r0, [r3, #0]
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	889b      	ldrh	r3, [r3, #4]
 8000a48:	f107 020b 	add.w	r2, r7, #11
 8000a4c:	9300      	str	r3, [sp, #0]
 8000a4e:	2301      	movs	r3, #1
 8000a50:	21d4      	movs	r1, #212	@ 0xd4
 8000a52:	f002 fc0b 	bl	800326c <HAL_I2C_Master_Transmit>
	status = HAL_I2C_Master_Receive(IMU->hi2c, IMU_I2C_ADDR, (uint8_t *)rx_buffer, num_bytes, IMU->I2C_TIMEOUT);
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	6818      	ldr	r0, [r3, #0]
 8000a5a:	7abb      	ldrb	r3, [r7, #10]
 8000a5c:	b29a      	uxth	r2, r3
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	889b      	ldrh	r3, [r3, #4]
 8000a62:	9300      	str	r3, [sp, #0]
 8000a64:	4613      	mov	r3, r2
 8000a66:	687a      	ldr	r2, [r7, #4]
 8000a68:	21d4      	movs	r1, #212	@ 0xd4
 8000a6a:	f002 fd17 	bl	800349c <HAL_I2C_Master_Receive>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	75fb      	strb	r3, [r7, #23]

	taskEXIT_CRITICAL();
 8000a72:	f009 f83b 	bl	8009aec <vPortExitCritical>
	return status;
 8000a76:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3718      	adds	r7, #24
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <IMU_write>:

//Write register from IMU
HAL_StatusTypeDef IMU_write(IMU* IMU, uint8_t* tx_buffer, uint8_t num_bytes) {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b088      	sub	sp, #32
 8000a84:	af02      	add	r7, sp, #8
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	60b9      	str	r1, [r7, #8]
 8000a8a:	4613      	mov	r3, r2
 8000a8c:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status;

	taskENTER_CRITICAL();
 8000a8e:	f008 fffb 	bl	8009a88 <vPortEnterCritical>

	status = HAL_I2C_Master_Transmit(IMU->hi2c, IMU_I2C_ADDR, (uint8_t *)tx_buffer, num_bytes + 1, IMU->I2C_TIMEOUT);
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	6818      	ldr	r0, [r3, #0]
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	b29a      	uxth	r2, r3
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	889b      	ldrh	r3, [r3, #4]
 8000aa2:	9300      	str	r3, [sp, #0]
 8000aa4:	4613      	mov	r3, r2
 8000aa6:	68ba      	ldr	r2, [r7, #8]
 8000aa8:	21d4      	movs	r1, #212	@ 0xd4
 8000aaa:	f002 fbdf 	bl	800326c <HAL_I2C_Master_Transmit>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	75fb      	strb	r3, [r7, #23]

	taskEXIT_CRITICAL();
 8000ab2:	f009 f81b 	bl	8009aec <vPortExitCritical>
	return status;
 8000ab6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3718      	adds	r7, #24
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <IMU_init>:

//Initialize IMU
int IMU_init(IMU* IMU) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
	uint8_t buffer[12];

	//Main control register
	//This needs to be set first because this determines how
	//future register controls work
	buffer[0] = IMU_CTRL3_C;
 8000ac8:	2312      	movs	r3, #18
 8000aca:	733b      	strb	r3, [r7, #12]
	buffer[1] = IMU_DEFAULT_CONF_CTRL3_C;
 8000acc:	2304      	movs	r3, #4
 8000ace:	737b      	strb	r3, [r7, #13]
	IMU_write(IMU, buffer, 1);
 8000ad0:	f107 030c 	add.w	r3, r7, #12
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f7ff ffd1 	bl	8000a80 <IMU_write>

	//Read WHO_AM_I register
	IMU_read(IMU, IMU_WHO_AM_I_REG_ADDR, buffer, 1);
 8000ade:	f107 020c 	add.w	r2, r7, #12
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	210f      	movs	r1, #15
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f7ff ff9e 	bl	8000a28 <IMU_read>
	//Check if WHO_AM_I register is correct
	if (buffer[0] != IMU_WHO_AM_I_REG_VAL) {
 8000aec:	7b3b      	ldrb	r3, [r7, #12]
 8000aee:	2b6c      	cmp	r3, #108	@ 0x6c
 8000af0:	d002      	beq.n	8000af8 <IMU_init+0x38>
		return -1;
 8000af2:	f04f 33ff 	mov.w	r3, #4294967295
 8000af6:	e016      	b.n	8000b26 <IMU_init+0x66>
	}

	//Set up accelerometer
	buffer[0] = IMU_CTRL1_XL;
 8000af8:	2310      	movs	r3, #16
 8000afa:	733b      	strb	r3, [r7, #12]
	buffer[1] = IMU_DEFAULT_CONF_ACCEL; // 01010000 208hz, + or - 4g range
 8000afc:	2350      	movs	r3, #80	@ 0x50
 8000afe:	737b      	strb	r3, [r7, #13]
	IMU_write(IMU, buffer, 1);
 8000b00:	f107 030c 	add.w	r3, r7, #12
 8000b04:	2201      	movs	r2, #1
 8000b06:	4619      	mov	r1, r3
 8000b08:	6878      	ldr	r0, [r7, #4]
 8000b0a:	f7ff ffb9 	bl	8000a80 <IMU_write>

	//Set up gyroscope
	buffer[0] = IMU_CTRL2_G;
 8000b0e:	2311      	movs	r3, #17
 8000b10:	733b      	strb	r3, [r7, #12]
	buffer[1] = IMU_DEFAULT_CONF_GYRO; // 01011100 208hz, + or - 2000dps range
 8000b12:	235c      	movs	r3, #92	@ 0x5c
 8000b14:	737b      	strb	r3, [r7, #13]
	IMU_write(IMU, buffer, 1);
 8000b16:	f107 030c 	add.w	r3, r7, #12
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	6878      	ldr	r0, [r7, #4]
 8000b20:	f7ff ffae 	bl	8000a80 <IMU_write>
	buffer[0] = IMU_CTRL10_C;
	buffer[1] = IMU_DEFAULT_CONF_CTRL10_C;
	IMU_write(IMU, buffer, 1);
	*/

	return 0;
 8000b24:	2300      	movs	r3, #0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3718      	adds	r7, #24
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <IMU_getAccel>:

//Get acceleration from IMU
int IMU_getAccel(IMU* IMU, Accel* accel) {
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b084      	sub	sp, #16
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
 8000b36:	6039      	str	r1, [r7, #0]
	uint8_t buf[6];

	IMU_read(IMU, IMU_OUTX_L_A, buf, 6);
 8000b38:	f107 0208 	add.w	r2, r7, #8
 8000b3c:	2306      	movs	r3, #6
 8000b3e:	2128      	movs	r1, #40	@ 0x28
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f7ff ff71 	bl	8000a28 <IMU_read>
	//We are able to do a single read because when doing multiple reads, it will automatically increment the register address
	//This is good not only for code duplication, but also reduces overhead
	//The option to disable this is in the datasheet under CTRL3_C
	accel->XL_x = IMU_accelConvert(buf[1], buf[0]) + IMU->XL_x_offset;
 8000b46:	7a7b      	ldrb	r3, [r7, #9]
 8000b48:	7a3a      	ldrb	r2, [r7, #8]
 8000b4a:	4611      	mov	r1, r2
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff ff0b 	bl	8000968 <IMU_accelConvert>
 8000b52:	eeb0 7a40 	vmov.f32	s14, s0
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	edd3 7a02 	vldr	s15, [r3, #8]
 8000b5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	edc3 7a00 	vstr	s15, [r3]
	accel->XL_y = IMU_accelConvert(buf[3], buf[2]) + IMU->XL_y_offset;
 8000b66:	7afb      	ldrb	r3, [r7, #11]
 8000b68:	7aba      	ldrb	r2, [r7, #10]
 8000b6a:	4611      	mov	r1, r2
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff fefb 	bl	8000968 <IMU_accelConvert>
 8000b72:	eeb0 7a40 	vmov.f32	s14, s0
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	edd3 7a03 	vldr	s15, [r3, #12]
 8000b7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	edc3 7a01 	vstr	s15, [r3, #4]
	accel->XL_z = IMU_accelConvert(buf[5], buf[4]) + IMU->XL_z_offset;
 8000b86:	7b7b      	ldrb	r3, [r7, #13]
 8000b88:	7b3a      	ldrb	r2, [r7, #12]
 8000b8a:	4611      	mov	r1, r2
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff feeb 	bl	8000968 <IMU_accelConvert>
 8000b92:	eeb0 7a40 	vmov.f32	s14, s0
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	edd3 7a04 	vldr	s15, [r3, #16]
 8000b9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	edc3 7a02 	vstr	s15, [r3, #8]

	return 0;
 8000ba6:	2300      	movs	r3, #0
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3710      	adds	r7, #16
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <IMU_getAngRate>:

//Get angular rate from IMU
int IMU_getAngRate(IMU* IMU, AngRate* AngRate) {
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	6039      	str	r1, [r7, #0]
	uint8_t buf[6];

	IMU_read(IMU, IMU_OUTX_L_G, buf, 6);
 8000bba:	f107 0208 	add.w	r2, r7, #8
 8000bbe:	2306      	movs	r3, #6
 8000bc0:	2122      	movs	r1, #34	@ 0x22
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	f7ff ff30 	bl	8000a28 <IMU_read>
	//Same as before, we can do a single read
	AngRate->G_x = IMU_gyroConvert(buf[1], buf[0])+IMU->G_x_offset;
 8000bc8:	7a7b      	ldrb	r3, [r7, #9]
 8000bca:	7a3a      	ldrb	r2, [r7, #8]
 8000bcc:	4611      	mov	r1, r2
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff fefc 	bl	80009cc <IMU_gyroConvert>
 8000bd4:	eeb0 7a40 	vmov.f32	s14, s0
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	edd3 7a05 	vldr	s15, [r3, #20]
 8000bde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	edc3 7a00 	vstr	s15, [r3]
	AngRate->G_y = IMU_gyroConvert(buf[3], buf[2])+IMU->G_y_offset;
 8000be8:	7afb      	ldrb	r3, [r7, #11]
 8000bea:	7aba      	ldrb	r2, [r7, #10]
 8000bec:	4611      	mov	r1, r2
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff feec 	bl	80009cc <IMU_gyroConvert>
 8000bf4:	eeb0 7a40 	vmov.f32	s14, s0
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	edd3 7a06 	vldr	s15, [r3, #24]
 8000bfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	edc3 7a01 	vstr	s15, [r3, #4]
	AngRate->G_z = IMU_gyroConvert(buf[5], buf[4])+IMU->G_z_offset;
 8000c08:	7b7b      	ldrb	r3, [r7, #13]
 8000c0a:	7b3a      	ldrb	r2, [r7, #12]
 8000c0c:	4611      	mov	r1, r2
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff fedc 	bl	80009cc <IMU_gyroConvert>
 8000c14:	eeb0 7a40 	vmov.f32	s14, s0
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	edd3 7a07 	vldr	s15, [r3, #28]
 8000c1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	edc3 7a02 	vstr	s15, [r3, #8]

	return 0;
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3710      	adds	r7, #16
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <spi_transmit>:
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param tx         <uint8_t*>           Data buffer to transmit
 * @param size       <uint16_t>           Number of bytes to transmit
 */
static void spi_transmit(W25N01GV_Flash *flash, uint8_t *tx, uint16_t size) {
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b084      	sub	sp, #16
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	60f8      	str	r0, [r7, #12]
 8000c3a:	60b9      	str	r1, [r7, #8]
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	80fb      	strh	r3, [r7, #6]

	taskENTER_CRITICAL();
 8000c40:	f008 ff22 	bl	8009a88 <vPortEnterCritical>
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_ACTIVE);  // Select chip
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	f8d3 0208 	ldr.w	r0, [r3, #520]	@ 0x208
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	f8b3 320c 	ldrh.w	r3, [r3, #524]	@ 0x20c
 8000c50:	2200      	movs	r2, #0
 8000c52:	4619      	mov	r1, r3
 8000c54:	f002 fa54 	bl	8003100 <HAL_GPIO_WritePin>
	// Transmit data and store the status code
	flash->last_HAL_status = HAL_SPI_Transmit(flash->SPI_bus, tx, size, W25N01GV_SPI_TIMEOUT);
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	f8d3 0204 	ldr.w	r0, [r3, #516]	@ 0x204
 8000c5e:	88fa      	ldrh	r2, [r7, #6]
 8000c60:	23ff      	movs	r3, #255	@ 0xff
 8000c62:	68b9      	ldr	r1, [r7, #8]
 8000c64:	f005 ff60 	bl	8006b28 <HAL_SPI_Transmit>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	f883 2214 	strb.w	r2, [r3, #532]	@ 0x214
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_INACTIVE);  // Release chip
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	f8d3 0208 	ldr.w	r0, [r3, #520]	@ 0x208
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	f8b3 320c 	ldrh.w	r3, [r3, #524]	@ 0x20c
 8000c7e:	2201      	movs	r2, #1
 8000c80:	4619      	mov	r1, r3
 8000c82:	f002 fa3d 	bl	8003100 <HAL_GPIO_WritePin>
	taskEXIT_CRITICAL();
 8000c86:	f008 ff31 	bl	8009aec <vPortExitCritical>

}
 8000c8a:	bf00      	nop
 8000c8c:	3710      	adds	r7, #16
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <spi_transmit_receive>:
 * @param tx_size    <uint16_t>           Number of bytes to transmit
 * @param rx         <uint8_t*>           Buffer to receive data
 * @param rx_size    <uint16_t>           Number of bytes to receive
 */
static void spi_transmit_receive(W25N01GV_Flash *flash, uint8_t *tx,
		uint16_t tx_size,	uint8_t *rx, uint16_t rx_size) {
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b084      	sub	sp, #16
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	60f8      	str	r0, [r7, #12]
 8000c9a:	60b9      	str	r1, [r7, #8]
 8000c9c:	603b      	str	r3, [r7, #0]
 8000c9e:	4613      	mov	r3, r2
 8000ca0:	80fb      	strh	r3, [r7, #6]

	taskENTER_CRITICAL();
 8000ca2:	f008 fef1 	bl	8009a88 <vPortEnterCritical>
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_ACTIVE);  // Select chip
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	f8d3 0208 	ldr.w	r0, [r3, #520]	@ 0x208
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	f8b3 320c 	ldrh.w	r3, [r3, #524]	@ 0x20c
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	f002 fa23 	bl	8003100 <HAL_GPIO_WritePin>
	// Transmit/receive, and store the status code
	flash->last_HAL_status = HAL_SPI_Transmit(flash->SPI_bus, tx, tx_size, W25N01GV_SPI_TIMEOUT);
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	f8d3 0204 	ldr.w	r0, [r3, #516]	@ 0x204
 8000cc0:	88fa      	ldrh	r2, [r7, #6]
 8000cc2:	23ff      	movs	r3, #255	@ 0xff
 8000cc4:	68b9      	ldr	r1, [r7, #8]
 8000cc6:	f005 ff2f 	bl	8006b28 <HAL_SPI_Transmit>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	461a      	mov	r2, r3
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	f883 2214 	strb.w	r2, [r3, #532]	@ 0x214
	flash->last_HAL_status = HAL_SPI_Receive(flash->SPI_bus, rx, rx_size, W25N01GV_SPI_TIMEOUT);
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	f8d3 0204 	ldr.w	r0, [r3, #516]	@ 0x204
 8000cda:	8b3a      	ldrh	r2, [r7, #24]
 8000cdc:	23ff      	movs	r3, #255	@ 0xff
 8000cde:	6839      	ldr	r1, [r7, #0]
 8000ce0:	f006 f910 	bl	8006f04 <HAL_SPI_Receive>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	f883 2214 	strb.w	r2, [r3, #532]	@ 0x214
	// TODO the Transmit status will get lost, should it still be stored like this?
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_INACTIVE);  // Release chip
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	f8d3 0208 	ldr.w	r0, [r3, #520]	@ 0x208
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	f8b3 320c 	ldrh.w	r3, [r3, #524]	@ 0x20c
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	f002 f9ff 	bl	8003100 <HAL_GPIO_WritePin>
	taskEXIT_CRITICAL();
 8000d02:	f008 fef3 	bl	8009aec <vPortExitCritical>

}
 8000d06:	bf00      	nop
 8000d08:	3710      	adds	r7, #16
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <read_status_register>:
 *
 * @param flash        <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param register_adr <uint8_t>            The address of the status register to be read
 * @retval The contents of the 8 bit status register specified by the user
 */
static uint8_t read_status_register(W25N01GV_Flash *flash, uint8_t register_adr) {
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b086      	sub	sp, #24
 8000d12:	af02      	add	r7, sp, #8
 8000d14:	6078      	str	r0, [r7, #4]
 8000d16:	460b      	mov	r3, r1
 8000d18:	70fb      	strb	r3, [r7, #3]
	uint8_t tx[2] = {W25N01GV_READ_STATUS_REGISTER, register_adr};
 8000d1a:	230f      	movs	r3, #15
 8000d1c:	733b      	strb	r3, [r7, #12]
 8000d1e:	78fb      	ldrb	r3, [r7, #3]
 8000d20:	737b      	strb	r3, [r7, #13]
	uint8_t rx[1];

	spi_transmit_receive(flash, tx, 2, rx, 1);
 8000d22:	f107 0308 	add.w	r3, r7, #8
 8000d26:	f107 010c 	add.w	r1, r7, #12
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	9200      	str	r2, [sp, #0]
 8000d2e:	2202      	movs	r2, #2
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f7ff ffae 	bl	8000c92 <spi_transmit_receive>

	return *rx;
 8000d36:	7a3b      	ldrb	r3, [r7, #8]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3710      	adds	r7, #16
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <flash_is_busy>:
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @retval 0 if the device is busy,  nonzero integer (1) if it's not.
 *
 * TODO: make sure if flash is broken/not plugged in it doens't return the wrong value/cause infinite loops
 */
static uint8_t flash_is_busy(W25N01GV_Flash *flash) {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
	uint8_t status_register = read_status_register(flash, W25N01GV_SR3_STATUS_REG_ADR);
 8000d48:	21c0      	movs	r1, #192	@ 0xc0
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f7ff ffdf 	bl	8000d0e <read_status_register>
 8000d50:	4603      	mov	r3, r0
 8000d52:	73fb      	strb	r3, [r7, #15]
	return status_register & W25N01GV_SR3_OPERATION_IN_PROGRESS;
 8000d54:	7bfb      	ldrb	r3, [r7, #15]
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	b2db      	uxtb	r3, r3
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3710      	adds	r7, #16
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <wait_for_operation>:
 * right now it's a duct tape solution
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param timeout    <uint32_t>           Maximum time to wait in nanoseconds.
 */
static void wait_for_operation(W25N01GV_Flash *flash, uint32_t timeout) {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
	uint32_t count = 0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60fb      	str	r3, [r7, #12]
	while (flash_is_busy(flash) && count < 6*timeout) {
 8000d72:	e002      	b.n	8000d7a <wait_for_operation+0x16>
		++count;
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	3301      	adds	r3, #1
 8000d78:	60fb      	str	r3, [r7, #12]
	while (flash_is_busy(flash) && count < 6*timeout) {
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f7ff ffe0 	bl	8000d40 <flash_is_busy>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d008      	beq.n	8000d98 <wait_for_operation+0x34>
 8000d86:	683a      	ldr	r2, [r7, #0]
 8000d88:	4613      	mov	r3, r2
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	4413      	add	r3, r2
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	461a      	mov	r2, r3
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d3ed      	bcc.n	8000d74 <wait_for_operation+0x10>
	}
}
 8000d98:	bf00      	nop
 8000d9a:	3710      	adds	r7, #16
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <write_status_register>:
 * @param register_adr       <uint8_t>            The address of the status register to be written to
 * @param register_write_val <uint8_t>            The 8bit value to write to the status register
 * 	Note: this will overwrite all values in the register
 */
static void write_status_register(W25N01GV_Flash *flash, uint8_t register_adr,
		uint8_t register_write_val) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	460b      	mov	r3, r1
 8000daa:	70fb      	strb	r3, [r7, #3]
 8000dac:	4613      	mov	r3, r2
 8000dae:	70bb      	strb	r3, [r7, #2]
	uint8_t tx[3] = {W25N01GV_WRITE_STATUS_REGISTER, register_adr, register_write_val};
 8000db0:	231f      	movs	r3, #31
 8000db2:	733b      	strb	r3, [r7, #12]
 8000db4:	78fb      	ldrb	r3, [r7, #3]
 8000db6:	737b      	strb	r3, [r7, #13]
 8000db8:	78bb      	ldrb	r3, [r7, #2]
 8000dba:	73bb      	strb	r3, [r7, #14]

	spi_transmit(flash, tx, 3);
 8000dbc:	f107 030c 	add.w	r3, r7, #12
 8000dc0:	2203      	movs	r2, #3
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f7ff ff34 	bl	8000c32 <spi_transmit>

	wait_for_operation(flash, W25N01GV_WRITE_STATUS_REGISTER_TIME_NS);
 8000dca:	2132      	movs	r1, #50	@ 0x32
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f7ff ffc9 	bl	8000d64 <wait_for_operation>
}
 8000dd2:	bf00      	nop
 8000dd4:	3710      	adds	r7, #16
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <load_page>:
 * datasheet pg 38
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param page_num   <uint16_t>           Page number of data to load to the device's buffer
 */
static void load_page(W25N01GV_Flash *flash, uint16_t page_num) {
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b084      	sub	sp, #16
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
 8000de2:	460b      	mov	r3, r1
 8000de4:	807b      	strh	r3, [r7, #2]
	uint8_t page_num_8bit_array[2] = W25N01GV_UNPACK_UINT16_TO_2_BYTES(page_num);
 8000de6:	887b      	ldrh	r3, [r7, #2]
 8000de8:	0a1b      	lsrs	r3, r3, #8
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	733b      	strb	r3, [r7, #12]
 8000df0:	887b      	ldrh	r3, [r7, #2]
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	737b      	strb	r3, [r7, #13]
	uint8_t tx[4] = {W25N01GV_PAGE_DATA_READ, 0, page_num_8bit_array[0], page_num_8bit_array[1]};  // 2nd byte is unused
 8000df6:	2313      	movs	r3, #19
 8000df8:	723b      	strb	r3, [r7, #8]
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	727b      	strb	r3, [r7, #9]
 8000dfe:	7b3b      	ldrb	r3, [r7, #12]
 8000e00:	72bb      	strb	r3, [r7, #10]
 8000e02:	7b7b      	ldrb	r3, [r7, #13]
 8000e04:	72fb      	strb	r3, [r7, #11]

	spi_transmit(flash, tx, 4);
 8000e06:	f107 0308 	add.w	r3, r7, #8
 8000e0a:	2204      	movs	r2, #4
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f7ff ff0f 	bl	8000c32 <spi_transmit>

	// TODO currently assumes ECC is always on, but needs to be more flexible
  wait_for_operation(flash, W25N01GV_READ_PAGE_DATA_ECC_ON_MAX_TIME_US * 1000);  // Wait for the page to load
 8000e14:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f7ff ffa3 	bl	8000d64 <wait_for_operation>
}
 8000e1e:	bf00      	nop
 8000e20:	3710      	adds	r7, #16
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <unlock_flash>:
 *
 * datasheet pg 15, 21
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void unlock_flash(W25N01GV_Flash *flash) {
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b084      	sub	sp, #16
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
	// Read the current contents of the protection register
	uint8_t protection_register = read_status_register(flash, W25N01GV_SR1_PROTECTION_REG_ADR);
 8000e2e:	21a0      	movs	r1, #160	@ 0xa0
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f7ff ff6c 	bl	8000d0e <read_status_register>
 8000e36:	4603      	mov	r3, r0
 8000e38:	73fb      	strb	r3, [r7, #15]

	// Remove the block protect bits, and only keep the 3 non-protect bits, if they're already enabled.
	uint8_t unlocked_protection_register = protection_register & ~(W25N01GV_SR1_BLOCK_PROTECT_BP3
 8000e3a:	7bfb      	ldrb	r3, [r7, #15]
 8000e3c:	f023 037c 	bic.w	r3, r3, #124	@ 0x7c
 8000e40:	73bb      	strb	r3, [r7, #14]
			| W25N01GV_SR1_BLOCK_PROTECT_BP1
			| W25N01GV_SR1_BLOCK_PROTECT_BP0
			| W25N01GV_SR1_BLOCK_PROTECT_TB);

	// Write the new value of the status register block protect bits off
	write_status_register(flash, W25N01GV_SR1_PROTECTION_REG_ADR, unlocked_protection_register);
 8000e42:	7bbb      	ldrb	r3, [r7, #14]
 8000e44:	461a      	mov	r2, r3
 8000e46:	21a0      	movs	r1, #160	@ 0xa0
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f7ff ffa9 	bl	8000da0 <write_status_register>
}
 8000e4e:	bf00      	nop
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <lock_flash>:
 *
 * datasheet pg 15, 21
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void lock_flash(W25N01GV_Flash *flash) {
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b084      	sub	sp, #16
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
	// Read the current contents of the protection register
	uint8_t protection_register = read_status_register(flash, W25N01GV_SR1_PROTECTION_REG_ADR);
 8000e5e:	21a0      	movs	r1, #160	@ 0xa0
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f7ff ff54 	bl	8000d0e <read_status_register>
 8000e66:	4603      	mov	r3, r0
 8000e68:	73fb      	strb	r3, [r7, #15]

	// Enabling bits BP3 and BP2 and disabling the others will lock the entire 128MB memory array
	// First remove all protection bits
	uint8_t locked_protection_register = protection_register & ~(W25N01GV_SR1_BLOCK_PROTECT_BP3
 8000e6a:	7bfb      	ldrb	r3, [r7, #15]
 8000e6c:	f023 037c 	bic.w	r3, r3, #124	@ 0x7c
 8000e70:	73bb      	strb	r3, [r7, #14]
			| W25N01GV_SR1_BLOCK_PROTECT_BP1
			| W25N01GV_SR1_BLOCK_PROTECT_BP0
			| W25N01GV_SR1_BLOCK_PROTECT_TB);

	// Then add on the bits that are needed to lock flash
	locked_protection_register = protection_register
 8000e72:	7bfb      	ldrb	r3, [r7, #15]
 8000e74:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000e78:	73bb      	strb	r3, [r7, #14]
			| (W25N01GV_SR1_BLOCK_PROTECT_BP3 | W25N01GV_SR1_BLOCK_PROTECT_BP2);

	write_status_register(flash, W25N01GV_SR1_PROTECTION_REG_ADR, locked_protection_register);
 8000e7a:	7bbb      	ldrb	r3, [r7, #14]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	21a0      	movs	r1, #160	@ 0xa0
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f7ff ff8d 	bl	8000da0 <write_status_register>
}
 8000e86:	bf00      	nop
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <enable_write>:
 *
 * datasheet pg 30
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void enable_write(W25N01GV_Flash *flash) {
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b084      	sub	sp, #16
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
	uint8_t tx[1] = { W25N01GV_WRITE_ENABLE };
 8000e96:	2306      	movs	r3, #6
 8000e98:	733b      	strb	r3, [r7, #12]
	spi_transmit(flash, tx, 1);
 8000e9a:	f107 030c 	add.w	r3, r7, #12
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f7ff fec5 	bl	8000c32 <spi_transmit>
}
 8000ea8:	bf00      	nop
 8000eaa:	3710      	adds	r7, #16
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <disable_write>:
 *
 * datasheet pg 30
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void disable_write(W25N01GV_Flash *flash) {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	uint8_t tx[1] = { W25N01GV_WRITE_DISABLE };
 8000eb8:	2304      	movs	r3, #4
 8000eba:	733b      	strb	r3, [r7, #12]
	spi_transmit(flash, tx, 1);
 8000ebc:	f107 030c 	add.w	r3, r7, #12
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f7ff feb4 	bl	8000c32 <spi_transmit>
}
 8000eca:	bf00      	nop
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <write_page_to_buffer>:
 * @param data       <uint8_t*>           Data array containing data to write to flash
 * @param num_bytes  <uint16_t>           Number of bytes to write
 * @param column_adr <uint16_t>           Byte in buffer to start writing at
 */
static void write_page_to_buffer(W25N01GV_Flash *flash, uint8_t *data,
		uint16_t num_bytes, uint16_t column_adr) {
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b086      	sub	sp, #24
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	60f8      	str	r0, [r7, #12]
 8000eda:	60b9      	str	r1, [r7, #8]
 8000edc:	4611      	mov	r1, r2
 8000ede:	461a      	mov	r2, r3
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	80fb      	strh	r3, [r7, #6]
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	80bb      	strh	r3, [r7, #4]

	uint8_t column_adr_8bit_array[2] = W25N01GV_UNPACK_UINT16_TO_2_BYTES(column_adr);
 8000ee8:	88bb      	ldrh	r3, [r7, #4]
 8000eea:	0a1b      	lsrs	r3, r3, #8
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	753b      	strb	r3, [r7, #20]
 8000ef2:	88bb      	ldrh	r3, [r7, #4]
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	757b      	strb	r3, [r7, #21]
	uint8_t tx1[3] = {W25N01GV_LOAD_PROGRAM_DATA, column_adr_8bit_array[0], column_adr_8bit_array[1]};
 8000ef8:	2302      	movs	r3, #2
 8000efa:	743b      	strb	r3, [r7, #16]
 8000efc:	7d3b      	ldrb	r3, [r7, #20]
 8000efe:	747b      	strb	r3, [r7, #17]
 8000f00:	7d7b      	ldrb	r3, [r7, #21]
 8000f02:	74bb      	strb	r3, [r7, #18]

	// Ignore all data that would be written to column 2048 and after.
	// You don't want to overwrite the extra memory at the end of the page.
	// (If the onboard ECC is turned on, this happens automatically, but just in case)
	if (num_bytes > W25N01GV_BYTES_PER_PAGE)
 8000f04:	88fb      	ldrh	r3, [r7, #6]
 8000f06:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000f0a:	d902      	bls.n	8000f12 <write_page_to_buffer+0x40>
		num_bytes = W25N01GV_BYTES_PER_PAGE;
 8000f0c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000f10:	80fb      	strh	r3, [r7, #6]

	// Not using spi_transmit() because I didn't want to mess with combining the tx arrays
	taskENTER_CRITICAL();
 8000f12:	f008 fdb9 	bl	8009a88 <vPortEnterCritical>
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_ACTIVE);
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	f8d3 0208 	ldr.w	r0, [r3, #520]	@ 0x208
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	f8b3 320c 	ldrh.w	r3, [r3, #524]	@ 0x20c
 8000f22:	2200      	movs	r2, #0
 8000f24:	4619      	mov	r1, r3
 8000f26:	f002 f8eb 	bl	8003100 <HAL_GPIO_WritePin>
	flash->last_HAL_status = HAL_SPI_Transmit(flash->SPI_bus, tx1, 3, W25N01GV_SPI_TIMEOUT);
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	f8d3 0204 	ldr.w	r0, [r3, #516]	@ 0x204
 8000f30:	f107 0110 	add.w	r1, r7, #16
 8000f34:	23ff      	movs	r3, #255	@ 0xff
 8000f36:	2203      	movs	r2, #3
 8000f38:	f005 fdf6 	bl	8006b28 <HAL_SPI_Transmit>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	461a      	mov	r2, r3
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	f883 2214 	strb.w	r2, [r3, #532]	@ 0x214
	flash->last_HAL_status = HAL_SPI_Transmit(flash->SPI_bus, data, num_bytes, W25N01GV_SPI_TIMEOUT);
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	f8d3 0204 	ldr.w	r0, [r3, #516]	@ 0x204
 8000f4c:	88fa      	ldrh	r2, [r7, #6]
 8000f4e:	23ff      	movs	r3, #255	@ 0xff
 8000f50:	68b9      	ldr	r1, [r7, #8]
 8000f52:	f005 fde9 	bl	8006b28 <HAL_SPI_Transmit>
 8000f56:	4603      	mov	r3, r0
 8000f58:	461a      	mov	r2, r3
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	f883 2214 	strb.w	r2, [r3, #532]	@ 0x214
	HAL_GPIO_WritePin(flash->cs_base, flash->cs_pin, W25N01GV_CS_INACTIVE);
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	f8d3 0208 	ldr.w	r0, [r3, #520]	@ 0x208
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	f8b3 320c 	ldrh.w	r3, [r3, #524]	@ 0x20c
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	4619      	mov	r1, r3
 8000f70:	f002 f8c6 	bl	8003100 <HAL_GPIO_WritePin>
	taskEXIT_CRITICAL();
 8000f74:	f008 fdba 	bl	8009aec <vPortExitCritical>
}
 8000f78:	bf00      	nop
 8000f7a:	3718      	adds	r7, #24
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <program_buffer_to_memory>:
 * datasheet pg 37
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param page_adr   <uint16_t>           The page for the buffer to be written to.
 */
static void program_buffer_to_memory(W25N01GV_Flash *flash, uint16_t page_adr) {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	460b      	mov	r3, r1
 8000f8a:	807b      	strh	r3, [r7, #2]
	uint8_t page_adr_8bit_array[2] = W25N01GV_UNPACK_UINT16_TO_2_BYTES(page_adr);
 8000f8c:	887b      	ldrh	r3, [r7, #2]
 8000f8e:	0a1b      	lsrs	r3, r3, #8
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	733b      	strb	r3, [r7, #12]
 8000f96:	887b      	ldrh	r3, [r7, #2]
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	737b      	strb	r3, [r7, #13]
	uint8_t tx[4] = {W25N01GV_PROGRAM_EXECUTE, 0, page_adr_8bit_array[0], page_adr_8bit_array[1]};  // 2nd byte unused
 8000f9c:	2310      	movs	r3, #16
 8000f9e:	723b      	strb	r3, [r7, #8]
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	727b      	strb	r3, [r7, #9]
 8000fa4:	7b3b      	ldrb	r3, [r7, #12]
 8000fa6:	72bb      	strb	r3, [r7, #10]
 8000fa8:	7b7b      	ldrb	r3, [r7, #13]
 8000faa:	72fb      	strb	r3, [r7, #11]

	spi_transmit(flash, tx, 4);
 8000fac:	f107 0308 	add.w	r3, r7, #8
 8000fb0:	2204      	movs	r2, #4
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f7ff fe3c 	bl	8000c32 <spi_transmit>
	wait_for_operation(flash, W25N01GV_PAGE_PROGRAM_MAX_TIME_US * 1000);	 // Wait for the data to be written to memory
 8000fba:	4904      	ldr	r1, [pc, #16]	@ (8000fcc <program_buffer_to_memory+0x4c>)
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f7ff fed1 	bl	8000d64 <wait_for_operation>
}
 8000fc2:	bf00      	nop
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	000aae60 	.word	0x000aae60

08000fd0 <get_write_failure_status>:
 * datasheet pg 20
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @retval 0x08 if it detects a write failure, 0 if no write failures were detected
 */
static uint8_t get_write_failure_status(W25N01GV_Flash *flash) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
	// If it can't read from flash, it will automatically return a write failure
	if (ping_flash(flash)) {
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f000 fb0d 	bl	80015f8 <ping_flash>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d00d      	beq.n	8001000 <get_write_failure_status+0x30>
		uint8_t status_register = read_status_register(flash, W25N01GV_SR3_STATUS_REG_ADR);
 8000fe4:	21c0      	movs	r1, #192	@ 0xc0
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f7ff fe91 	bl	8000d0e <read_status_register>
 8000fec:	4603      	mov	r3, r0
 8000fee:	73fb      	strb	r3, [r7, #15]
		flash->last_write_failure_status = status_register & W25N01GV_SR3_PROGRAM_FAILURE;
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
 8000ff2:	f003 0308 	and.w	r3, r3, #8
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f883 2216 	strb.w	r2, [r3, #534]	@ 0x216
 8000ffe:	e003      	b.n	8001008 <get_write_failure_status+0x38>
	}
	else {
		flash->last_write_failure_status = W25N01GV_SR3_PROGRAM_FAILURE;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2208      	movs	r2, #8
 8001004:	f883 2216 	strb.w	r2, [r3, #534]	@ 0x216
	}

	return flash->last_write_failure_status;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f893 3216 	ldrb.w	r3, [r3, #534]	@ 0x216
}
 800100e:	4618      	mov	r0, r3
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <get_erase_failure_status>:
 * datasheet pg 20
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @retval 0x04 if it detects an erase failure, 0 if no erase failures were detected
 */
static uint8_t get_erase_failure_status(W25N01GV_Flash *flash) {
 8001016:	b580      	push	{r7, lr}
 8001018:	b084      	sub	sp, #16
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
	// If it can't read from flash, it will automatically return an erase failure
	if (ping_flash(flash)) {
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f000 faea 	bl	80015f8 <ping_flash>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d00d      	beq.n	8001046 <get_erase_failure_status+0x30>
		uint8_t status_register = read_status_register(flash, W25N01GV_SR3_STATUS_REG_ADR);
 800102a:	21c0      	movs	r1, #192	@ 0xc0
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f7ff fe6e 	bl	8000d0e <read_status_register>
 8001032:	4603      	mov	r3, r0
 8001034:	73fb      	strb	r3, [r7, #15]
		flash->last_erase_failure_status = status_register & W25N01GV_SR3_ERASE_FAILURE;
 8001036:	7bfb      	ldrb	r3, [r7, #15]
 8001038:	f003 0304 	and.w	r3, r3, #4
 800103c:	b2da      	uxtb	r2, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f883 2217 	strb.w	r2, [r3, #535]	@ 0x217
 8001044:	e003      	b.n	800104e <get_erase_failure_status+0x38>
	}
	else {
		flash->last_erase_failure_status = W25N01GV_SR3_ERASE_FAILURE;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2204      	movs	r2, #4
 800104a:	f883 2217 	strb.w	r2, [r3, #535]	@ 0x217
	}

	return flash->last_erase_failure_status;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f893 3217 	ldrb.w	r3, [r3, #535]	@ 0x217

}
 8001054:	4618      	mov	r0, r3
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <erase_block>:
 * erase (between 0 and W25N01GV_NUM_PAGES-1), not the block number (0 to 1023).
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 * @param page_adr   <uint16_t>           Address of the page whose block should be erased
 */
static void erase_block(W25N01GV_Flash *flash, uint16_t page_adr) {
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	460b      	mov	r3, r1
 8001066:	807b      	strh	r3, [r7, #2]
	enable_write(flash);	// Set WEL bit high, it will automatically be set back to 0 after the command executes
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f7ff ff10 	bl	8000e8e <enable_write>

	uint8_t page_adr_8bit_array[2] = W25N01GV_UNPACK_UINT16_TO_2_BYTES(page_adr);
 800106e:	887b      	ldrh	r3, [r7, #2]
 8001070:	0a1b      	lsrs	r3, r3, #8
 8001072:	b29b      	uxth	r3, r3
 8001074:	b2db      	uxtb	r3, r3
 8001076:	733b      	strb	r3, [r7, #12]
 8001078:	887b      	ldrh	r3, [r7, #2]
 800107a:	b2db      	uxtb	r3, r3
 800107c:	737b      	strb	r3, [r7, #13]
	uint8_t tx[4] = {W25N01GV_ERASE_BLOCK, 0, page_adr_8bit_array[0], page_adr_8bit_array[1]};	// 2nd byte unused
 800107e:	23d8      	movs	r3, #216	@ 0xd8
 8001080:	723b      	strb	r3, [r7, #8]
 8001082:	2300      	movs	r3, #0
 8001084:	727b      	strb	r3, [r7, #9]
 8001086:	7b3b      	ldrb	r3, [r7, #12]
 8001088:	72bb      	strb	r3, [r7, #10]
 800108a:	7b7b      	ldrb	r3, [r7, #13]
 800108c:	72fb      	strb	r3, [r7, #11]
	spi_transmit(flash, tx, 4);
 800108e:	f107 0308 	add.w	r3, r7, #8
 8001092:	2204      	movs	r2, #4
 8001094:	4619      	mov	r1, r3
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff fdcb 	bl	8000c32 <spi_transmit>

	disable_write(flash);	// Disable WEL just in case the erase block command doens't execute
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f7ff ff07 	bl	8000eb0 <disable_write>

	wait_for_operation(flash, W25N01GV_BLOCK_ERASE_MAX_TIME_MS * 1000000);  // Wait for it to finish erasing
 80010a2:	4905      	ldr	r1, [pc, #20]	@ (80010b8 <erase_block+0x5c>)
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff fe5d 	bl	8000d64 <wait_for_operation>

	get_erase_failure_status(flash);
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff ffb3 	bl	8001016 <get_erase_failure_status>
}
 80010b0:	bf00      	nop
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	003d0900 	.word	0x003d0900

080010bc <get_ECC_status>:
 *
 * datasheet pg 20
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void get_ECC_status(W25N01GV_Flash *flash) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]

	// If it can read from flash properly, check the ECC bits as normal
	if (ping_flash(flash)) {
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f000 fa97 	bl	80015f8 <ping_flash>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d033      	beq.n	8001138 <get_ECC_status+0x7c>
		uint8_t status_register, ECC1, ECC0;

		status_register = read_status_register(flash, W25N01GV_SR3_STATUS_REG_ADR);
 80010d0:	21c0      	movs	r1, #192	@ 0xc0
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff fe1b 	bl	8000d0e <read_status_register>
 80010d8:	4603      	mov	r3, r0
 80010da:	73fb      	strb	r3, [r7, #15]
		ECC1 = status_register & W25N01GV_SR3_ECC_STATUS_BIT_1;
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
 80010de:	f003 0320 	and.w	r3, r3, #32
 80010e2:	73bb      	strb	r3, [r7, #14]
		ECC0 = status_register & W25N01GV_SR3_ECC_STATUS_BIT_0;
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
 80010e6:	f003 0310 	and.w	r3, r3, #16
 80010ea:	737b      	strb	r3, [r7, #13]

		// Return status according to table on datasheet pg 20
		if (!ECC1 && !ECC0)
 80010ec:	7bbb      	ldrb	r3, [r7, #14]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d107      	bne.n	8001102 <get_ECC_status+0x46>
 80010f2:	7b7b      	ldrb	r3, [r7, #13]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d104      	bne.n	8001102 <get_ECC_status+0x46>
			flash->last_read_ECC_status = SUCCESS_NO_CORRECTIONS;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2200      	movs	r2, #0
 80010fc:	f883 2215 	strb.w	r2, [r3, #533]	@ 0x215
 8001100:	e01f      	b.n	8001142 <get_ECC_status+0x86>
		else if (!ECC1 && ECC0)
 8001102:	7bbb      	ldrb	r3, [r7, #14]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d107      	bne.n	8001118 <get_ECC_status+0x5c>
 8001108:	7b7b      	ldrb	r3, [r7, #13]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d004      	beq.n	8001118 <get_ECC_status+0x5c>
			flash->last_read_ECC_status = SUCCESS_WITH_CORRECTIONS;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2201      	movs	r2, #1
 8001112:	f883 2215 	strb.w	r2, [r3, #533]	@ 0x215
 8001116:	e014      	b.n	8001142 <get_ECC_status+0x86>
		else if (ECC1 && !ECC0)
 8001118:	7bbb      	ldrb	r3, [r7, #14]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d007      	beq.n	800112e <get_ECC_status+0x72>
 800111e:	7b7b      	ldrb	r3, [r7, #13]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d104      	bne.n	800112e <get_ECC_status+0x72>
			flash->last_read_ECC_status = ERROR_ONE_PAGE;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2202      	movs	r2, #2
 8001128:	f883 2215 	strb.w	r2, [r3, #533]	@ 0x215
 800112c:	e009      	b.n	8001142 <get_ECC_status+0x86>
		else  // else if (ECC1 && ECC0)
			flash->last_read_ECC_status = ERROR_MULTIPLE_PAGES;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2203      	movs	r2, #3
 8001132:	f883 2215 	strb.w	r2, [r3, #533]	@ 0x215

	}
	else {  // Otherwise record the read error
		flash->last_read_ECC_status = READ_ERROR_NO_ECC_STATUS;
	}
}
 8001136:	e004      	b.n	8001142 <get_ECC_status+0x86>
		flash->last_read_ECC_status = READ_ERROR_NO_ECC_STATUS;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2204      	movs	r2, #4
 800113c:	f883 2215 	strb.w	r2, [r3, #533]	@ 0x215
}
 8001140:	e7ff      	b.n	8001142 <get_ECC_status+0x86>
 8001142:	bf00      	nop
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <read_flash_buffer>:
 * @param buffer      <uint8_t*>           Array to read the contents of the device's buffer into
 * @param num_bytes   <uint16_t>           Number of bytes to read into buffer
 * @param column_adr  <uint16_t>           Starting column address of the data to be read in
 */
static void read_flash_buffer(W25N01GV_Flash *flash, uint8_t *buffer,
		uint16_t num_bytes, uint16_t column_adr) {
 800114a:	b580      	push	{r7, lr}
 800114c:	b088      	sub	sp, #32
 800114e:	af02      	add	r7, sp, #8
 8001150:	60f8      	str	r0, [r7, #12]
 8001152:	60b9      	str	r1, [r7, #8]
 8001154:	4611      	mov	r1, r2
 8001156:	461a      	mov	r2, r3
 8001158:	460b      	mov	r3, r1
 800115a:	80fb      	strh	r3, [r7, #6]
 800115c:	4613      	mov	r3, r2
 800115e:	80bb      	strh	r3, [r7, #4]

	uint8_t column_adr_8bit_array[2] = W25N01GV_UNPACK_UINT16_TO_2_BYTES(column_adr);
 8001160:	88bb      	ldrh	r3, [r7, #4]
 8001162:	0a1b      	lsrs	r3, r3, #8
 8001164:	b29b      	uxth	r3, r3
 8001166:	b2db      	uxtb	r3, r3
 8001168:	753b      	strb	r3, [r7, #20]
 800116a:	88bb      	ldrh	r3, [r7, #4]
 800116c:	b2db      	uxtb	r3, r3
 800116e:	757b      	strb	r3, [r7, #21]
	uint8_t tx[4] = {W25N01GV_READ_DATA, column_adr_8bit_array[0], column_adr_8bit_array[1], 0};  // last byte is unused
 8001170:	2303      	movs	r3, #3
 8001172:	743b      	strb	r3, [r7, #16]
 8001174:	7d3b      	ldrb	r3, [r7, #20]
 8001176:	747b      	strb	r3, [r7, #17]
 8001178:	7d7b      	ldrb	r3, [r7, #21]
 800117a:	74bb      	strb	r3, [r7, #18]
 800117c:	2300      	movs	r3, #0
 800117e:	74fb      	strb	r3, [r7, #19]

	spi_transmit_receive(flash, tx, 4, buffer, num_bytes);
 8001180:	f107 0110 	add.w	r1, r7, #16
 8001184:	88fb      	ldrh	r3, [r7, #6]
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	2204      	movs	r2, #4
 800118c:	68f8      	ldr	r0, [r7, #12]
 800118e:	f7ff fd80 	bl	8000c92 <spi_transmit_receive>
}
 8001192:	bf00      	nop
 8001194:	3718      	adds	r7, #24
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <read_bytes_from_page>:
 * @param num_bytes  <uint16_t>           Number of bytes to read in (see note on range)
 * @param page_adr   <uint16_t>           The page to read data from
 * @param column_adr <uint16_t>           The column to start reading data from
 */
static void read_bytes_from_page(W25N01GV_Flash *flash, uint8_t *buffer, uint16_t num_bytes,
		uint16_t page_adr, uint16_t column_adr) {
 800119a:	b580      	push	{r7, lr}
 800119c:	b084      	sub	sp, #16
 800119e:	af00      	add	r7, sp, #0
 80011a0:	60f8      	str	r0, [r7, #12]
 80011a2:	60b9      	str	r1, [r7, #8]
 80011a4:	4611      	mov	r1, r2
 80011a6:	461a      	mov	r2, r3
 80011a8:	460b      	mov	r3, r1
 80011aa:	80fb      	strh	r3, [r7, #6]
 80011ac:	4613      	mov	r3, r2
 80011ae:	80bb      	strh	r3, [r7, #4]

	load_page(flash, page_adr);  // Load the page into flash's buffer
 80011b0:	88bb      	ldrh	r3, [r7, #4]
 80011b2:	4619      	mov	r1, r3
 80011b4:	68f8      	ldr	r0, [r7, #12]
 80011b6:	f7ff fe10 	bl	8000dda <load_page>
	read_flash_buffer(flash, buffer, num_bytes, column_adr);
 80011ba:	8b3b      	ldrh	r3, [r7, #24]
 80011bc:	88fa      	ldrh	r2, [r7, #6]
 80011be:	68b9      	ldr	r1, [r7, #8]
 80011c0:	68f8      	ldr	r0, [r7, #12]
 80011c2:	f7ff ffc2 	bl	800114a <read_flash_buffer>

	get_ECC_status(flash);
 80011c6:	68f8      	ldr	r0, [r7, #12]
 80011c8:	f7ff ff78 	bl	80010bc <get_ECC_status>
}
 80011cc:	bf00      	nop
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <write_bytes_to_page>:
 * @param num_bytes  <uint16_t>           Number of bytes to write to flash
 * @param page_adr   <uint16_t>           Page to write data to
 * @param column_adr <uint16_t>           Column of page to start writing data at
 */
static void write_bytes_to_page(W25N01GV_Flash *flash, uint8_t *data, uint16_t num_bytes,
		uint16_t page_adr, uint16_t column_adr) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	4611      	mov	r1, r2
 80011e0:	461a      	mov	r2, r3
 80011e2:	460b      	mov	r3, r1
 80011e4:	80fb      	strh	r3, [r7, #6]
 80011e6:	4613      	mov	r3, r2
 80011e8:	80bb      	strh	r3, [r7, #4]

	enable_write(flash);
 80011ea:	68f8      	ldr	r0, [r7, #12]
 80011ec:	f7ff fe4f 	bl	8000e8e <enable_write>

	write_page_to_buffer(flash, data, num_bytes, column_adr);
 80011f0:	8b3b      	ldrh	r3, [r7, #24]
 80011f2:	88fa      	ldrh	r2, [r7, #6]
 80011f4:	68b9      	ldr	r1, [r7, #8]
 80011f6:	68f8      	ldr	r0, [r7, #12]
 80011f8:	f7ff fe6b 	bl	8000ed2 <write_page_to_buffer>
	program_buffer_to_memory(flash, page_adr);
 80011fc:	88bb      	ldrh	r3, [r7, #4]
 80011fe:	4619      	mov	r1, r3
 8001200:	68f8      	ldr	r0, [r7, #12]
 8001202:	f7ff febd 	bl	8000f80 <program_buffer_to_memory>

	// This will happen automatically if program_buffer_to_memory() succeeds, but just in case it fails ;)
	disable_write(flash);
 8001206:	68f8      	ldr	r0, [r7, #12]
 8001208:	f7ff fe52 	bl	8000eb0 <disable_write>

	get_write_failure_status(flash);
 800120c:	68f8      	ldr	r0, [r7, #12]
 800120e:	f7ff fedf 	bl	8000fd0 <get_write_failure_status>
}
 8001212:	bf00      	nop
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <enable_ECC>:
 *
 * datasheet pg 18
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void enable_ECC(W25N01GV_Flash *flash) {
 800121a:	b580      	push	{r7, lr}
 800121c:	b084      	sub	sp, #16
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
	uint8_t config_reg_read = read_status_register(flash, W25N01GV_SR2_CONFIG_REG_ADR);
 8001222:	21b0      	movs	r1, #176	@ 0xb0
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff fd72 	bl	8000d0e <read_status_register>
 800122a:	4603      	mov	r3, r0
 800122c:	73fb      	strb	r3, [r7, #15]
	uint8_t ECC_enabled_register = config_reg_read | W25N01GV_SR2_ECC_ENABLE;	 // OR: turn bit on
 800122e:	7bfb      	ldrb	r3, [r7, #15]
 8001230:	f043 0310 	orr.w	r3, r3, #16
 8001234:	73bb      	strb	r3, [r7, #14]

	if (ECC_enabled_register != config_reg_read)
 8001236:	7bba      	ldrb	r2, [r7, #14]
 8001238:	7bfb      	ldrb	r3, [r7, #15]
 800123a:	429a      	cmp	r2, r3
 800123c:	d005      	beq.n	800124a <enable_ECC+0x30>
		write_status_register(flash, W25N01GV_SR2_CONFIG_REG_ADR, ECC_enabled_register);
 800123e:	7bbb      	ldrb	r3, [r7, #14]
 8001240:	461a      	mov	r2, r3
 8001242:	21b0      	movs	r1, #176	@ 0xb0
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff fdab 	bl	8000da0 <write_status_register>
}
 800124a:	bf00      	nop
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <enable_buffer_mode>:
 *
 * datasheet pg 18
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void enable_buffer_mode(W25N01GV_Flash *flash) {
 8001252:	b580      	push	{r7, lr}
 8001254:	b084      	sub	sp, #16
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
	uint8_t config_reg_read = read_status_register(flash, W25N01GV_SR2_CONFIG_REG_ADR);
 800125a:	21b0      	movs	r1, #176	@ 0xb0
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f7ff fd56 	bl	8000d0e <read_status_register>
 8001262:	4603      	mov	r3, r0
 8001264:	73fb      	strb	r3, [r7, #15]
	uint8_t buffer_enabled_register = config_reg_read | W25N01GV_SR2_BUFFER_READ_MODE;	// OR: turn bit on
 8001266:	7bfb      	ldrb	r3, [r7, #15]
 8001268:	f043 0308 	orr.w	r3, r3, #8
 800126c:	73bb      	strb	r3, [r7, #14]
	if (buffer_enabled_register != config_reg_read)
 800126e:	7bba      	ldrb	r2, [r7, #14]
 8001270:	7bfb      	ldrb	r3, [r7, #15]
 8001272:	429a      	cmp	r2, r3
 8001274:	d005      	beq.n	8001282 <enable_buffer_mode+0x30>
		write_status_register(flash, W25N01GV_SR2_CONFIG_REG_ADR, buffer_enabled_register);
 8001276:	7bbb      	ldrb	r3, [r7, #14]
 8001278:	461a      	mov	r2, r3
 800127a:	21b0      	movs	r1, #176	@ 0xb0
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f7ff fd8f 	bl	8000da0 <write_status_register>
}
 8001282:	bf00      	nop
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <find_write_ptr>:
 * flash->next_free_column can also be 2048).
 * See various comments about flash->write_buffer for explanation.
 *
 * @param flash      <W25N01GV_Flash*>    Struct used to store flash pins and addresses
 */
static void find_write_ptr(W25N01GV_Flash *flash) {
 800128a:	b580      	push	{r7, lr}
 800128c:	f6ad 0d28 	subw	sp, sp, #2088	@ 0x828
 8001290:	af02      	add	r7, sp, #8
 8001292:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8001296:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 800129a:	6018      	str	r0, [r3, #0]
	uint8_t read_buffer[2048];

	// First check page 0 for if flash has already been erased.
	// Checking this case first because it's probably pretty common.
	read_bytes_from_page(flash, read_buffer, 2048, 0, 0);
 800129c:	f107 0108 	add.w	r1, r7, #8
 80012a0:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80012a4:	f6a3 001c 	subw	r0, r3, #2076	@ 0x81c
 80012a8:	2300      	movs	r3, #0
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	2300      	movs	r3, #0
 80012ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80012b2:	6800      	ldr	r0, [r0, #0]
 80012b4:	f7ff ff71 	bl	800119a <read_bytes_from_page>
	uint8_t first_page_empty = 1;
 80012b8:	2301      	movs	r3, #1
 80012ba:	f887 381f 	strb.w	r3, [r7, #2079]	@ 0x81f
	for (uint16_t b = 0; b < 2048; b++) {
 80012be:	2300      	movs	r3, #0
 80012c0:	f8a7 381c 	strh.w	r3, [r7, #2076]	@ 0x81c
 80012c4:	e010      	b.n	80012e8 <find_write_ptr+0x5e>
		if (read_buffer[b] != 0xFF) {
 80012c6:	f8b7 381c 	ldrh.w	r3, [r7, #2076]	@ 0x81c
 80012ca:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 80012ce:	f6a2 0218 	subw	r2, r2, #2072	@ 0x818
 80012d2:	5cd3      	ldrb	r3, [r2, r3]
 80012d4:	2bff      	cmp	r3, #255	@ 0xff
 80012d6:	d002      	beq.n	80012de <find_write_ptr+0x54>
			first_page_empty = 0;
 80012d8:	2300      	movs	r3, #0
 80012da:	f887 381f 	strb.w	r3, [r7, #2079]	@ 0x81f
	for (uint16_t b = 0; b < 2048; b++) {
 80012de:	f8b7 381c 	ldrh.w	r3, [r7, #2076]	@ 0x81c
 80012e2:	3301      	adds	r3, #1
 80012e4:	f8a7 381c 	strh.w	r3, [r7, #2076]	@ 0x81c
 80012e8:	f8b7 381c 	ldrh.w	r3, [r7, #2076]	@ 0x81c
 80012ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80012f0:	d3e9      	bcc.n	80012c6 <find_write_ptr+0x3c>
		}
	}
	if (first_page_empty) {
 80012f2:	f897 381f 	ldrb.w	r3, [r7, #2079]	@ 0x81f
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d010      	beq.n	800131c <find_write_ptr+0x92>
		flash->current_page = 0;
 80012fa:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80012fe:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2200      	movs	r2, #0
 8001306:	f8a3 2210 	strh.w	r2, [r3, #528]	@ 0x210
		flash->next_free_column = 0;
 800130a:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800130e:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2200      	movs	r2, #0
 8001316:	f8a3 2212 	strh.w	r2, [r3, #530]	@ 0x212
		return;
 800131a:	e132      	b.n	8001582 <find_write_ptr+0x2f8>
	}

	// Binary search on all of flash to find the last page written to.

	// min and max declared as 32bit because W25N01GV_NUM_PAGES > largest uint16_t
	uint32_t min = 0;  // inclusive
 800131c:	2300      	movs	r3, #0
 800131e:	f8c7 3818 	str.w	r3, [r7, #2072]	@ 0x818
	uint32_t max = W25N01GV_NUM_PAGES;  // exclusive
 8001322:	f64f 73c0 	movw	r3, #65472	@ 0xffc0
 8001326:	f8c7 3814 	str.w	r3, [r7, #2068]	@ 0x814
	uint16_t cur_search_page;

	while (max - min > 1) {  // Keep looping until you narrow range down a single page
 800132a:	e046      	b.n	80013ba <find_write_ptr+0x130>
		cur_search_page = min + (max-min) / 2;
 800132c:	f8d7 2814 	ldr.w	r2, [r7, #2068]	@ 0x814
 8001330:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	085b      	lsrs	r3, r3, #1
 8001338:	b29a      	uxth	r2, r3
 800133a:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 800133e:	b29b      	uxth	r3, r3
 8001340:	4413      	add	r3, r2
 8001342:	f8a7 380a 	strh.w	r3, [r7, #2058]	@ 0x80a

		// Read cur_search_page and check if it's empty
		read_bytes_from_page(flash, read_buffer, 2048, cur_search_page, 0);
 8001346:	f8b7 380a 	ldrh.w	r3, [r7, #2058]	@ 0x80a
 800134a:	f107 0108 	add.w	r1, r7, #8
 800134e:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8001352:	f6a2 001c 	subw	r0, r2, #2076	@ 0x81c
 8001356:	2200      	movs	r2, #0
 8001358:	9200      	str	r2, [sp, #0]
 800135a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800135e:	6800      	ldr	r0, [r0, #0]
 8001360:	f7ff ff1b 	bl	800119a <read_bytes_from_page>
		uint8_t cur_page_empty = 1;
 8001364:	2301      	movs	r3, #1
 8001366:	f887 3813 	strb.w	r3, [r7, #2067]	@ 0x813
		for (uint16_t b = 0; b < 2048; b++) {
 800136a:	2300      	movs	r3, #0
 800136c:	f8a7 3810 	strh.w	r3, [r7, #2064]	@ 0x810
 8001370:	e011      	b.n	8001396 <find_write_ptr+0x10c>
			if (read_buffer[b] != 0xFF) {
 8001372:	f8b7 3810 	ldrh.w	r3, [r7, #2064]	@ 0x810
 8001376:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 800137a:	f6a2 0218 	subw	r2, r2, #2072	@ 0x818
 800137e:	5cd3      	ldrb	r3, [r2, r3]
 8001380:	2bff      	cmp	r3, #255	@ 0xff
 8001382:	d003      	beq.n	800138c <find_write_ptr+0x102>
				cur_page_empty = 0;
 8001384:	2300      	movs	r3, #0
 8001386:	f887 3813 	strb.w	r3, [r7, #2067]	@ 0x813
				break;
 800138a:	e009      	b.n	80013a0 <find_write_ptr+0x116>
		for (uint16_t b = 0; b < 2048; b++) {
 800138c:	f8b7 3810 	ldrh.w	r3, [r7, #2064]	@ 0x810
 8001390:	3301      	adds	r3, #1
 8001392:	f8a7 3810 	strh.w	r3, [r7, #2064]	@ 0x810
 8001396:	f8b7 3810 	ldrh.w	r3, [r7, #2064]	@ 0x810
 800139a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800139e:	d3e8      	bcc.n	8001372 <find_write_ptr+0xe8>
			}
		}

		if (cur_page_empty)  // Found an empty page - move to the left sector
 80013a0:	f897 3813 	ldrb.w	r3, [r7, #2067]	@ 0x813
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d004      	beq.n	80013b2 <find_write_ptr+0x128>
			max = cur_search_page;
 80013a8:	f8b7 380a 	ldrh.w	r3, [r7, #2058]	@ 0x80a
 80013ac:	f8c7 3814 	str.w	r3, [r7, #2068]	@ 0x814
 80013b0:	e003      	b.n	80013ba <find_write_ptr+0x130>
		else  // Found a non-empty page - move to the right sector
			min = cur_search_page;  // Don't completely exclude it from range
 80013b2:	f8b7 380a 	ldrh.w	r3, [r7, #2058]	@ 0x80a
 80013b6:	f8c7 3818 	str.w	r3, [r7, #2072]	@ 0x818
	while (max - min > 1) {  // Keep looping until you narrow range down a single page
 80013ba:	f8d7 2814 	ldr.w	r2, [r7, #2068]	@ 0x814
 80013be:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d8b1      	bhi.n	800132c <find_write_ptr+0xa2>
	}
	// Breaks out of the loop when range is narrowed down to [min, min+1),
	flash->current_page = min;
 80013c8:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 80013cc:	b29a      	uxth	r2, r3
 80013ce:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80013d2:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f8a3 2210 	strh.w	r2, [r3, #528]	@ 0x210

	// After finding flash->current_page, do a linear search on that page
	// to find flash->next_free_address
	read_bytes_from_page(flash, read_buffer, 2048, flash->current_page, 0);
 80013dc:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80013e0:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f8b3 3210 	ldrh.w	r3, [r3, #528]	@ 0x210
 80013ea:	f107 0108 	add.w	r1, r7, #8
 80013ee:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 80013f2:	f6a2 001c 	subw	r0, r2, #2076	@ 0x81c
 80013f6:	2200      	movs	r2, #0
 80013f8:	9200      	str	r2, [sp, #0]
 80013fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80013fe:	6800      	ldr	r0, [r0, #0]
 8001400:	f7ff fecb 	bl	800119a <read_bytes_from_page>
	// (last byte is non-0xFF) then the write pointer should actually be the
	// first byte of the next page (breaking out of the while loop guaranteed
	// that page min+1 is empty).	If that is the last page in flash, handle
	// accordingly to make get_bytes_remaining() return 0.

	if (read_buffer[2047] != 0xFF) {  // aforementioned edge case
 8001404:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8001408:	f6a3 0318 	subw	r3, r3, #2072	@ 0x818
 800140c:	f893 37ff 	ldrb.w	r3, [r3, #2047]	@ 0x7ff
 8001410:	2bff      	cmp	r3, #255	@ 0xff
 8001412:	d02d      	beq.n	8001470 <find_write_ptr+0x1e6>
		if (flash->current_page == W25N01GV_NUM_PAGES-1) {  // no room left in flash
 8001414:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8001418:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f8b3 3210 	ldrh.w	r3, [r3, #528]	@ 0x210
 8001422:	f64f 72bf 	movw	r2, #65471	@ 0xffbf
 8001426:	4293      	cmp	r3, r2
 8001428:	d109      	bne.n	800143e <find_write_ptr+0x1b4>
			flash->next_free_column = 2048;
 800142a:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800142e:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001438:	f8a3 2212 	strh.w	r2, [r3, #530]	@ 0x212
		else {  // go to start of next page
			flash->current_page++;
			flash->next_free_column = 0;
		}

		return;
 800143c:	e0a1      	b.n	8001582 <find_write_ptr+0x2f8>
			flash->current_page++;
 800143e:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8001442:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f8b3 3210 	ldrh.w	r3, [r3, #528]	@ 0x210
 800144c:	3301      	adds	r3, #1
 800144e:	b29a      	uxth	r2, r3
 8001450:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8001454:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f8a3 2210 	strh.w	r2, [r3, #528]	@ 0x210
			flash->next_free_column = 0;
 800145e:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8001462:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2200      	movs	r2, #0
 800146a:	f8a3 2212 	strh.w	r2, [r3, #530]	@ 0x212
		return;
 800146e:	e088      	b.n	8001582 <find_write_ptr+0x2f8>
	}
	else {  // normal linear search
		// Start at the end and search backwards for the first non-empty byte
		uint8_t page_empty = 1;
 8001470:	2301      	movs	r3, #1
 8001472:	f887 380d 	strb.w	r3, [r7, #2061]	@ 0x80d
		for (int16_t b = 2047; b >= 0; b--) {
 8001476:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800147a:	f8a7 380e 	strh.w	r3, [r7, #2062]	@ 0x80e
 800147e:	e01e      	b.n	80014be <find_write_ptr+0x234>
			if (read_buffer[b] != 0xFF) {
 8001480:	f9b7 380e 	ldrsh.w	r3, [r7, #2062]	@ 0x80e
 8001484:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8001488:	f6a2 0218 	subw	r2, r2, #2072	@ 0x818
 800148c:	5cd3      	ldrb	r3, [r2, r3]
 800148e:	2bff      	cmp	r3, #255	@ 0xff
 8001490:	d00e      	beq.n	80014b0 <find_write_ptr+0x226>
				flash->next_free_column = b+1;
 8001492:	f8b7 380e 	ldrh.w	r3, [r7, #2062]	@ 0x80e
 8001496:	3301      	adds	r3, #1
 8001498:	b29a      	uxth	r2, r3
 800149a:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800149e:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f8a3 2212 	strh.w	r2, [r3, #530]	@ 0x212
				page_empty = 0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	f887 380d 	strb.w	r3, [r7, #2061]	@ 0x80d
				break;
 80014ae:	e00a      	b.n	80014c6 <find_write_ptr+0x23c>
		for (int16_t b = 2047; b >= 0; b--) {
 80014b0:	f9b7 380e 	ldrsh.w	r3, [r7, #2062]	@ 0x80e
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	3b01      	subs	r3, #1
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	f8a7 380e 	strh.w	r3, [r7, #2062]	@ 0x80e
 80014be:	f9b7 380e 	ldrsh.w	r3, [r7, #2062]	@ 0x80e
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	dadc      	bge.n	8001480 <find_write_ptr+0x1f6>

	// flash->next_free_column should only ever be at the beginning of one of the sectors on a page.
	// If the user's last byte(s) written are 0xFF, then the previous loop will treat it as empty memory.
	// This if block maintains the 512 byte framing.
	// At this point in the code, flash->current_page is not empty and flash is not completely full.
	if (flash->next_free_column <= 512)
 80014c6:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80014ca:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f8b3 3212 	ldrh.w	r3, [r3, #530]	@ 0x212
 80014d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80014d8:	d809      	bhi.n	80014ee <find_write_ptr+0x264>
		flash->next_free_column = 512;
 80014da:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80014de:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014e8:	f8a3 2212 	strh.w	r2, [r3, #530]	@ 0x212
 80014ec:	e049      	b.n	8001582 <find_write_ptr+0x2f8>
	else if (flash->next_free_column <= 1024)
 80014ee:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80014f2:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f8b3 3212 	ldrh.w	r3, [r3, #530]	@ 0x212
 80014fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001500:	d809      	bhi.n	8001516 <find_write_ptr+0x28c>
		flash->next_free_column = 1024;
 8001502:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8001506:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001510:	f8a3 2212 	strh.w	r2, [r3, #530]	@ 0x212
 8001514:	e035      	b.n	8001582 <find_write_ptr+0x2f8>
	else if (flash->next_free_column <= 1536)
 8001516:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800151a:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f8b3 3212 	ldrh.w	r3, [r3, #530]	@ 0x212
 8001524:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8001528:	d809      	bhi.n	800153e <find_write_ptr+0x2b4>
		flash->next_free_column = 1536;
 800152a:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800152e:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8001538:	f8a3 2212 	strh.w	r2, [r3, #530]	@ 0x212
 800153c:	e021      	b.n	8001582 <find_write_ptr+0x2f8>
	else if (flash->next_free_column < 2048) {  // Increment to next page
 800153e:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8001542:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f8b3 3212 	ldrh.w	r3, [r3, #530]	@ 0x212
 800154c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001550:	d217      	bcs.n	8001582 <find_write_ptr+0x2f8>
		flash->next_free_column = 0;
 8001552:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8001556:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2200      	movs	r2, #0
 800155e:	f8a3 2212 	strh.w	r2, [r3, #530]	@ 0x212
		flash->current_page++;
 8001562:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8001566:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f8b3 3210 	ldrh.w	r3, [r3, #528]	@ 0x210
 8001570:	3301      	adds	r3, #1
 8001572:	b29a      	uxth	r2, r3
 8001574:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8001578:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f8a3 2210 	strh.w	r2, [r3, #528]	@ 0x210
	}
}
 8001582:	f507 6702 	add.w	r7, r7, #2080	@ 0x820
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <init_flash>:


/* Public function definitions */

void init_flash(W25N01GV_Flash *flash, SPI_HandleTypeDef *SPI_bus_in,
		GPIO_TypeDef *cs_base_in,	uint16_t cs_pin_in) {
 800158a:	b580      	push	{r7, lr}
 800158c:	b084      	sub	sp, #16
 800158e:	af00      	add	r7, sp, #0
 8001590:	60f8      	str	r0, [r7, #12]
 8001592:	60b9      	str	r1, [r7, #8]
 8001594:	607a      	str	r2, [r7, #4]
 8001596:	807b      	strh	r3, [r7, #2]
	flash->SPI_bus = SPI_bus_in;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	68ba      	ldr	r2, [r7, #8]
 800159c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
	flash->cs_base = cs_base_in;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
	flash->cs_pin = cs_pin_in;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	887a      	ldrh	r2, [r7, #2]
 80015ac:	f8a3 220c 	strh.w	r2, [r3, #524]	@ 0x20c
	flash->next_page_to_read = 0;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2200      	movs	r2, #0
 80015b4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

	flash->last_HAL_status = HAL_OK;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 2214 	strb.w	r2, [r3, #532]	@ 0x214
	flash->last_read_ECC_status = SUCCESS_NO_CORRECTIONS;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2200      	movs	r2, #0
 80015c4:	f883 2215 	strb.w	r2, [r3, #533]	@ 0x215
	flash->last_write_failure_status = 0;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2200      	movs	r2, #0
 80015cc:	f883 2216 	strb.w	r2, [r3, #534]	@ 0x216
	flash->last_erase_failure_status = 0;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2200      	movs	r2, #0
 80015d4:	f883 2217 	strb.w	r2, [r3, #535]	@ 0x217

	reset_flash(flash);
 80015d8:	68f8      	ldr	r0, [r7, #12]
 80015da:	f000 f835 	bl	8001648 <reset_flash>

	enable_ECC(flash);  // Should be enabled by default, but enable ECC just in case
 80015de:	68f8      	ldr	r0, [r7, #12]
 80015e0:	f7ff fe1b 	bl	800121a <enable_ECC>
	enable_buffer_mode(flash);  // -IG models start with buffer mode by default, -IT models don't
 80015e4:	68f8      	ldr	r0, [r7, #12]
 80015e6:	f7ff fe34 	bl	8001252 <enable_buffer_mode>
	// As of the time of writing this, MASA uses the -IG model.

	find_write_ptr(flash);
 80015ea:	68f8      	ldr	r0, [r7, #12]
 80015ec:	f7ff fe4d 	bl	800128a <find_write_ptr>
}
 80015f0:	bf00      	nop
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <ping_flash>:

uint8_t ping_flash(W25N01GV_Flash *flash) {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b088      	sub	sp, #32
 80015fc:	af02      	add	r7, sp, #8
 80015fe:	6078      	str	r0, [r7, #4]

	uint8_t tx[2] = {W25N01GV_READ_JEDEC_ID, 0};	// Second byte is unused
 8001600:	239f      	movs	r3, #159	@ 0x9f
 8001602:	823b      	strh	r3, [r7, #16]
	uint8_t rx[3];

	spi_transmit_receive(flash, tx, 2, rx, 3);
 8001604:	f107 030c 	add.w	r3, r7, #12
 8001608:	f107 0110 	add.w	r1, r7, #16
 800160c:	2203      	movs	r2, #3
 800160e:	9200      	str	r2, [sp, #0]
 8001610:	2202      	movs	r2, #2
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff fb3d 	bl	8000c92 <spi_transmit_receive>
	uint8_t manufacturer_ID = rx[0];
 8001618:	7b3b      	ldrb	r3, [r7, #12]
 800161a:	75fb      	strb	r3, [r7, #23]
	uint16_t device_ID = W25N01GV_PACK_2_BYTES_TO_UINT16(rx+1);
 800161c:	7b7b      	ldrb	r3, [r7, #13]
 800161e:	021b      	lsls	r3, r3, #8
 8001620:	b29b      	uxth	r3, r3
 8001622:	7bba      	ldrb	r2, [r7, #14]
 8001624:	4413      	add	r3, r2
 8001626:	82bb      	strh	r3, [r7, #20]

	if (manufacturer_ID == W25N01GV_MANUFACTURER_ID && device_ID == W25N01GV_DEVICE_ID)
 8001628:	7dfb      	ldrb	r3, [r7, #23]
 800162a:	2bef      	cmp	r3, #239	@ 0xef
 800162c:	d106      	bne.n	800163c <ping_flash+0x44>
 800162e:	8abb      	ldrh	r3, [r7, #20]
 8001630:	f64a 2221 	movw	r2, #43553	@ 0xaa21
 8001634:	4293      	cmp	r3, r2
 8001636:	d101      	bne.n	800163c <ping_flash+0x44>
		return 1;
 8001638:	2301      	movs	r3, #1
 800163a:	e000      	b.n	800163e <ping_flash+0x46>
	else
		return 0;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3718      	adds	r7, #24
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
	...

08001648 <reset_flash>:

uint8_t reset_flash(W25N01GV_Flash *flash) {
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
	// The reset command will corrupt data if given while another
	// operation is taking place, so just return in that case
	if (flash_is_busy(flash))  // TODO: replace with wait_for_operation? idk honestly
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7ff fb75 	bl	8000d40 <flash_is_busy>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <reset_flash+0x18>
		return 0;
 800165c:	2300      	movs	r3, #0
 800165e:	e00d      	b.n	800167c <reset_flash+0x34>

	// Otherwise send the reset command
	uint8_t tx[1] = { W25N01GV_DEVICE_RESET };
 8001660:	23ff      	movs	r3, #255	@ 0xff
 8001662:	733b      	strb	r3, [r7, #12]
	spi_transmit(flash, tx, 1);
 8001664:	f107 030c 	add.w	r3, r7, #12
 8001668:	2201      	movs	r2, #1
 800166a:	4619      	mov	r1, r3
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f7ff fae0 	bl	8000c32 <spi_transmit>

	// Wait for it to reset
	wait_for_operation(flash, W25N01GV_RESET_MAX_TIME_US * 1000);
 8001672:	4904      	ldr	r1, [pc, #16]	@ (8001684 <reset_flash+0x3c>)
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f7ff fb75 	bl	8000d64 <wait_for_operation>

	return 1;
 800167a:	2301      	movs	r3, #1
}
 800167c:	4618      	mov	r0, r3
 800167e:	3710      	adds	r7, #16
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	0007a120 	.word	0x0007a120

08001688 <write_to_flash_contiguous>:
 * data can fit in flash's remaining space.
 * flash->write_buffer is not full == flash->write_buffer_size < W25N01GV_SECTOR_SIZE.
 * Flash is unlocked.
 *
 */
static uint16_t write_to_flash_contiguous(W25N01GV_Flash *flash, uint8_t *data, uint32_t num_bytes) {
 8001688:	b580      	push	{r7, lr}
 800168a:	b088      	sub	sp, #32
 800168c:	af02      	add	r7, sp, #8
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
	if (num_bytes % 512 != 0) {
		asm("nop");
	}
	*/

	uint32_t write_counter = 0;  // Track how many bytes have been written so far
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]
	uint16_t write_failures = 0;  // Track write errors
 8001698:	2300      	movs	r3, #0
 800169a:	827b      	strh	r3, [r7, #18]

	while (write_counter < num_bytes) {
 800169c:	e05a      	b.n	8001754 <write_to_flash_contiguous+0xcc>

		// If there's not enough space on the page, only write as much as will fit
		uint16_t num_bytes_to_write_on_page = num_bytes - write_counter;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	823b      	strh	r3, [r7, #16]
		if (num_bytes_to_write_on_page > W25N01GV_BYTES_PER_PAGE - flash->next_free_column)
 80016aa:	8a3a      	ldrh	r2, [r7, #16]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f8b3 3212 	ldrh.w	r3, [r3, #530]	@ 0x212
 80016b2:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80016b6:	429a      	cmp	r2, r3
 80016b8:	dd05      	ble.n	80016c6 <write_to_flash_contiguous+0x3e>
			num_bytes_to_write_on_page = W25N01GV_BYTES_PER_PAGE - flash->next_free_column;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f8b3 3212 	ldrh.w	r3, [r3, #530]	@ 0x212
 80016c0:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80016c4:	823b      	strh	r3, [r7, #16]

		// Write the array (or a part of it if it's too long for one page) to flash
		write_bytes_to_page(flash, data + write_counter, num_bytes_to_write_on_page,
 80016c6:	68ba      	ldr	r2, [r7, #8]
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	18d1      	adds	r1, r2, r3
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f8b3 0210 	ldrh.w	r0, [r3, #528]	@ 0x210
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f8b3 3212 	ldrh.w	r3, [r3, #530]	@ 0x212
 80016d8:	8a3a      	ldrh	r2, [r7, #16]
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	4603      	mov	r3, r0
 80016de:	68f8      	ldr	r0, [r7, #12]
 80016e0:	f7ff fd78 	bl	80011d4 <write_bytes_to_page>
				flash->current_page, flash->next_free_column);

		// Check if the page was written to correctly
		if (flash->last_write_failure_status)
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f893 3216 	ldrb.w	r3, [r3, #534]	@ 0x216
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d002      	beq.n	80016f4 <write_to_flash_contiguous+0x6c>
			write_failures++;
 80016ee:	8a7b      	ldrh	r3, [r7, #18]
 80016f0:	3301      	adds	r3, #1
 80016f2:	827b      	strh	r3, [r7, #18]

		write_counter += num_bytes_to_write_on_page;
 80016f4:	8a3b      	ldrh	r3, [r7, #16]
 80016f6:	697a      	ldr	r2, [r7, #20]
 80016f8:	4413      	add	r3, r2
 80016fa:	617b      	str	r3, [r7, #20]

		// If there's room left over at the end of the page,
		// increment the column counter and leave the page counter the same
		if (flash->next_free_column + num_bytes_to_write_on_page < W25N01GV_BYTES_PER_PAGE)
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f8b3 3212 	ldrh.w	r3, [r3, #530]	@ 0x212
 8001702:	461a      	mov	r2, r3
 8001704:	8a3b      	ldrh	r3, [r7, #16]
 8001706:	4413      	add	r3, r2
 8001708:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800170c:	da09      	bge.n	8001722 <write_to_flash_contiguous+0x9a>
			flash->next_free_column += num_bytes_to_write_on_page;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f8b3 2212 	ldrh.w	r2, [r3, #530]	@ 0x212
 8001714:	8a3b      	ldrh	r3, [r7, #16]
 8001716:	4413      	add	r3, r2
 8001718:	b29a      	uxth	r2, r3
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	f8a3 2212 	strh.w	r2, [r3, #530]	@ 0x212
 8001720:	e018      	b.n	8001754 <write_to_flash_contiguous+0xcc>

		// If it fills the current page and runs out of pages, set the column counter over
		// the limit so it can't write again (will make get_bytes_remaining() return 0)
		else if (flash->current_page == W25N01GV_NUM_PAGES-1)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	f8b3 3210 	ldrh.w	r3, [r3, #528]	@ 0x210
 8001728:	f64f 72bf 	movw	r2, #65471	@ 0xffbf
 800172c:	4293      	cmp	r3, r2
 800172e:	d105      	bne.n	800173c <write_to_flash_contiguous+0xb4>
			flash->next_free_column = W25N01GV_BYTES_PER_PAGE;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001736:	f8a3 2212 	strh.w	r2, [r3, #530]	@ 0x212
 800173a:	e00b      	b.n	8001754 <write_to_flash_contiguous+0xcc>

		// Otherwise if there's more pages left, bring the address counter to the next page
		// and reset the column counter
		else {
			flash->next_free_column = 0;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2200      	movs	r2, #0
 8001740:	f8a3 2212 	strh.w	r2, [r3, #530]	@ 0x212
			flash->current_page++;  // This function can assume it won't run out of pages
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f8b3 3210 	ldrh.w	r3, [r3, #528]	@ 0x210
 800174a:	3301      	adds	r3, #1
 800174c:	b29a      	uxth	r2, r3
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f8a3 2210 	strh.w	r2, [r3, #528]	@ 0x210
	while (write_counter < num_bytes) {
 8001754:	697a      	ldr	r2, [r7, #20]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	429a      	cmp	r2, r3
 800175a:	d3a0      	bcc.n	800169e <write_to_flash_contiguous+0x16>
			|| flash->next_free_column == 2048)) {
		asm("nop");
	}
	*/

	return write_failures;
 800175c:	8a7b      	ldrh	r3, [r7, #18]
}
 800175e:	4618      	mov	r0, r3
 8001760:	3718      	adds	r7, #24
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <write_to_flash>:

uint16_t write_to_flash(W25N01GV_Flash *flash, uint8_t *data, uint32_t num_bytes) {
 8001768:	b580      	push	{r7, lr}
 800176a:	b08c      	sub	sp, #48	@ 0x30
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]

	// If there's not enough space, truncate the data
	uint32_t bytes_remaining = get_bytes_remaining(flash);
 8001774:	68f8      	ldr	r0, [r7, #12]
 8001776:	f000 f923 	bl	80019c0 <get_bytes_remaining>
 800177a:	6238      	str	r0, [r7, #32]
	if (num_bytes > bytes_remaining)
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	6a3b      	ldr	r3, [r7, #32]
 8001780:	429a      	cmp	r2, r3
 8001782:	d901      	bls.n	8001788 <write_to_flash+0x20>
		num_bytes = bytes_remaining;
 8001784:	6a3b      	ldr	r3, [r7, #32]
 8001786:	607b      	str	r3, [r7, #4]

	uint16_t write_failures = 0;  // Track write failures
 8001788:	2300      	movs	r3, #0
 800178a:	85fb      	strh	r3, [r7, #46]	@ 0x2e

	// Copy the front end into the write_buffer
	uint8_t buffer_full = 0;  // Used to decide whether or not to write buffer contents to flash
 800178c:	2300      	movs	r3, #0
 800178e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

	// If write_buffer is not empty and data fills it completely
	if (flash->write_buffer_size > 0 && flash->write_buffer_size + num_bytes >= W25N01GV_SECTOR_SIZE) {
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f8b3 320e 	ldrh.w	r3, [r3, #526]	@ 0x20e
 8001798:	2b00      	cmp	r3, #0
 800179a:	d035      	beq.n	8001808 <write_to_flash+0xa0>
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f8b3 320e 	ldrh.w	r3, [r3, #526]	@ 0x20e
 80017a2:	461a      	mov	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	4413      	add	r3, r2
 80017a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80017ac:	d32c      	bcc.n	8001808 <write_to_flash+0xa0>
		// Copy data into write_buffer until it's full,
		uint16_t num_bytes_to_copy = W25N01GV_SECTOR_SIZE - flash->write_buffer_size;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	f8b3 320e 	ldrh.w	r3, [r3, #526]	@ 0x20e
 80017b4:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80017b8:	83fb      	strh	r3, [r7, #30]
		for (uint16_t i = 0; i < num_bytes_to_copy; ++i) {
 80017ba:	2300      	movs	r3, #0
 80017bc:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80017be:	e00e      	b.n	80017de <write_to_flash+0x76>
			flash->write_buffer[flash->write_buffer_size + i] = data[i];
 80017c0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80017c2:	68ba      	ldr	r2, [r7, #8]
 80017c4:	441a      	add	r2, r3
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	f8b3 320e 	ldrh.w	r3, [r3, #526]	@ 0x20e
 80017cc:	4619      	mov	r1, r3
 80017ce:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80017d0:	440b      	add	r3, r1
 80017d2:	7811      	ldrb	r1, [r2, #0]
 80017d4:	68fa      	ldr	r2, [r7, #12]
 80017d6:	54d1      	strb	r1, [r2, r3]
		for (uint16_t i = 0; i < num_bytes_to_copy; ++i) {
 80017d8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80017da:	3301      	adds	r3, #1
 80017dc:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80017de:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80017e0:	8bfb      	ldrh	r3, [r7, #30]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d3ec      	bcc.n	80017c0 <write_to_flash+0x58>
		}
		flash->write_buffer_size = W25N01GV_SECTOR_SIZE;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017ec:	f8a3 220e 	strh.w	r2, [r3, #526]	@ 0x20e
		buffer_full = 1;
 80017f0:	2301      	movs	r3, #1
 80017f2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

		// Adjust data and num_bytes to reflect the front end being chopped off
		data += num_bytes_to_copy;
 80017f6:	8bfb      	ldrh	r3, [r7, #30]
 80017f8:	68ba      	ldr	r2, [r7, #8]
 80017fa:	4413      	add	r3, r2
 80017fc:	60bb      	str	r3, [r7, #8]
		num_bytes -= num_bytes_to_copy;
 80017fe:	8bfb      	ldrh	r3, [r7, #30]
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	607b      	str	r3, [r7, #4]
	if (flash->write_buffer_size > 0 && flash->write_buffer_size + num_bytes >= W25N01GV_SECTOR_SIZE) {
 8001806:	e02a      	b.n	800185e <write_to_flash+0xf6>
	}
	// If data doesn't fill write_buffer completely
	else if (flash->write_buffer_size + num_bytes < W25N01GV_SECTOR_SIZE) {
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f8b3 320e 	ldrh.w	r3, [r3, #526]	@ 0x20e
 800180e:	461a      	mov	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4413      	add	r3, r2
 8001814:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001818:	d221      	bcs.n	800185e <write_to_flash+0xf6>
		// Copy all data into write_buffer and return
		for (uint16_t i = 0; i < num_bytes; ++i) {
 800181a:	2300      	movs	r3, #0
 800181c:	853b      	strh	r3, [r7, #40]	@ 0x28
 800181e:	e00e      	b.n	800183e <write_to_flash+0xd6>
			flash->write_buffer[flash->write_buffer_size + i] = data[i];
 8001820:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001822:	68ba      	ldr	r2, [r7, #8]
 8001824:	441a      	add	r2, r3
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f8b3 320e 	ldrh.w	r3, [r3, #526]	@ 0x20e
 800182c:	4619      	mov	r1, r3
 800182e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001830:	440b      	add	r3, r1
 8001832:	7811      	ldrb	r1, [r2, #0]
 8001834:	68fa      	ldr	r2, [r7, #12]
 8001836:	54d1      	strb	r1, [r2, r3]
		for (uint16_t i = 0; i < num_bytes; ++i) {
 8001838:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800183a:	3301      	adds	r3, #1
 800183c:	853b      	strh	r3, [r7, #40]	@ 0x28
 800183e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	429a      	cmp	r2, r3
 8001844:	d8ec      	bhi.n	8001820 <write_to_flash+0xb8>
		}
		flash->write_buffer_size += num_bytes;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f8b3 220e 	ldrh.w	r2, [r3, #526]	@ 0x20e
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	b29b      	uxth	r3, r3
 8001850:	4413      	add	r3, r2
 8001852:	b29a      	uxth	r2, r3
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f8a3 220e 	strh.w	r2, [r3, #526]	@ 0x20e

		return 0;
 800185a:	2300      	movs	r3, #0
 800185c:	e049      	b.n	80018f2 <write_to_flash+0x18a>

	// At this point, data and num_bytes should be adjusted so it starts at a multiple address.
	// Use integer division to find out where the last unit is.
	// If there are less than W25N01GV_SECTOR_SIZE, then end_size == num_bytes and end_arr == data,
	// so anything in data that doesn't get written in this function will get stored in write_buffer
	uint32_t new_data_size = (num_bytes / W25N01GV_SECTOR_SIZE) * W25N01GV_SECTOR_SIZE;
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	4b26      	ldr	r3, [pc, #152]	@ (80018fc <write_to_flash+0x194>)
 8001862:	4013      	ands	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
	uint16_t end_size = num_bytes % W25N01GV_SECTOR_SIZE;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	b29b      	uxth	r3, r3
 800186a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800186e:	82fb      	strh	r3, [r7, #22]
	uint8_t* end_arr = data + new_data_size;
 8001870:	68ba      	ldr	r2, [r7, #8]
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	4413      	add	r3, r2
 8001876:	613b      	str	r3, [r7, #16]

	unlock_flash(flash);
 8001878:	68f8      	ldr	r0, [r7, #12]
 800187a:	f7ff fad4 	bl	8000e26 <unlock_flash>

	// If the buffer got filled, write the buffer to flash using write_to_flash_contiguous()
	if (buffer_full) {
 800187e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001882:	2b00      	cmp	r3, #0
 8001884:	d00f      	beq.n	80018a6 <write_to_flash+0x13e>
		write_failures += write_to_flash_contiguous(flash, flash->write_buffer, W25N01GV_SECTOR_SIZE);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800188c:	4619      	mov	r1, r3
 800188e:	68f8      	ldr	r0, [r7, #12]
 8001890:	f7ff fefa 	bl	8001688 <write_to_flash_contiguous>
 8001894:	4603      	mov	r3, r0
 8001896:	461a      	mov	r2, r3
 8001898:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800189a:	4413      	add	r3, r2
 800189c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		flash->write_buffer_size = 0;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2200      	movs	r2, #0
 80018a2:	f8a3 220e 	strh.w	r2, [r3, #526]	@ 0x20e
	}

	// Write the processed array into flash using write_to_flash_contiguous()
	if (new_data_size > 0) {
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d009      	beq.n	80018c0 <write_to_flash+0x158>
		write_failures += write_to_flash_contiguous(flash, data, new_data_size);
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	68b9      	ldr	r1, [r7, #8]
 80018b0:	68f8      	ldr	r0, [r7, #12]
 80018b2:	f7ff fee9 	bl	8001688 <write_to_flash_contiguous>
 80018b6:	4603      	mov	r3, r0
 80018b8:	461a      	mov	r2, r3
 80018ba:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80018bc:	4413      	add	r3, r2
 80018be:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	}

	lock_flash(flash);
 80018c0:	68f8      	ldr	r0, [r7, #12]
 80018c2:	f7ff fac8 	bl	8000e56 <lock_flash>

	// Copy the remaining data, if any, into write_buffer
	for (uint16_t i = 0; i < end_size; ++i) {
 80018c6:	2300      	movs	r3, #0
 80018c8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80018ca:	e009      	b.n	80018e0 <write_to_flash+0x178>
		flash->write_buffer[i] = end_arr[i];
 80018cc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	441a      	add	r2, r3
 80018d2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80018d4:	7811      	ldrb	r1, [r2, #0]
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i = 0; i < end_size; ++i) {
 80018da:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80018dc:	3301      	adds	r3, #1
 80018de:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80018e0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80018e2:	8afb      	ldrh	r3, [r7, #22]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d3f1      	bcc.n	80018cc <write_to_flash+0x164>
	}
	flash->write_buffer_size = end_size;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	8afa      	ldrh	r2, [r7, #22]
 80018ec:	f8a3 220e 	strh.w	r2, [r3, #526]	@ 0x20e

	return write_failures;
 80018f0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e

}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3730      	adds	r7, #48	@ 0x30
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	fffffe00 	.word	0xfffffe00

08001900 <reset_flash_read_pointer>:
	lock_flash(flash);

	return write_failures;
}

void reset_flash_read_pointer(W25N01GV_Flash *flash) {
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
	flash->next_page_to_read = 0;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <read_next_2KB_from_flash>:

void read_next_2KB_from_flash(W25N01GV_Flash *flash, uint8_t *buffer) {
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af02      	add	r7, sp, #8
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
	read_bytes_from_page(flash, buffer,	W25N01GV_BYTES_PER_PAGE, flash->next_page_to_read, 0);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800192c:	b29b      	uxth	r3, r3
 800192e:	2200      	movs	r2, #0
 8001930:	9200      	str	r2, [sp, #0]
 8001932:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001936:	6839      	ldr	r1, [r7, #0]
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7ff fc2e 	bl	800119a <read_bytes_from_page>
	flash->next_page_to_read++;  // Increment the page read counter
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001944:	1c5a      	adds	r2, r3, #1
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

	get_ECC_status(flash);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7ff fbb5 	bl	80010bc <get_ECC_status>
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <erase_flash>:

uint16_t erase_flash(W25N01GV_Flash *flash) {
 800195a:	b580      	push	{r7, lr}
 800195c:	b084      	sub	sp, #16
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
	uint16_t erase_failures = 0;
 8001962:	2300      	movs	r3, #0
 8001964:	81fb      	strh	r3, [r7, #14]

	unlock_flash(flash);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff fa5d 	bl	8000e26 <unlock_flash>

	// Loop through every block to erase them one by one
	// Ignore the last block, which is reserved for pseudo-eeprom functionality
	for (uint16_t block_count = 0; block_count < W25N01GV_NUM_BLOCKS-1; block_count++) {
 800196c:	2300      	movs	r3, #0
 800196e:	81bb      	strh	r3, [r7, #12]
 8001970:	e011      	b.n	8001996 <erase_flash+0x3c>
		erase_block(flash, block_count * W25N01GV_PAGES_PER_BLOCK);  // Address of first page in each block
 8001972:	89bb      	ldrh	r3, [r7, #12]
 8001974:	019b      	lsls	r3, r3, #6
 8001976:	b29b      	uxth	r3, r3
 8001978:	4619      	mov	r1, r3
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f7ff fb6e 	bl	800105c <erase_block>

		// Check if the erase failed
		if (flash->last_erase_failure_status)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f893 3217 	ldrb.w	r3, [r3, #535]	@ 0x217
 8001986:	2b00      	cmp	r3, #0
 8001988:	d002      	beq.n	8001990 <erase_flash+0x36>
			erase_failures++;
 800198a:	89fb      	ldrh	r3, [r7, #14]
 800198c:	3301      	adds	r3, #1
 800198e:	81fb      	strh	r3, [r7, #14]
	for (uint16_t block_count = 0; block_count < W25N01GV_NUM_BLOCKS-1; block_count++) {
 8001990:	89bb      	ldrh	r3, [r7, #12]
 8001992:	3301      	adds	r3, #1
 8001994:	81bb      	strh	r3, [r7, #12]
 8001996:	89bb      	ldrh	r3, [r7, #12]
 8001998:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 800199c:	4293      	cmp	r3, r2
 800199e:	d9e8      	bls.n	8001972 <erase_flash+0x18>
	}

	lock_flash(flash);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f7ff fa58 	bl	8000e56 <lock_flash>

	// Reset the address pointer after erasing
	find_write_ptr(flash);  // Don't manually set addr pointers to ensure it actually erases
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7ff fc6f 	bl	800128a <find_write_ptr>
	flash->write_buffer_size = 0;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f8a3 220e 	strh.w	r2, [r3, #526]	@ 0x20e

	return erase_failures;
 80019b4:	89fb      	ldrh	r3, [r7, #14]
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
	...

080019c0 <get_bytes_remaining>:

uint32_t get_bytes_remaining(W25N01GV_Flash *flash) {
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
	return ((W25N01GV_NUM_BLOCKS-1) * W25N01GV_PAGES_PER_BLOCK * W25N01GV_BYTES_PER_PAGE)
			- (flash->current_page * W25N01GV_BYTES_PER_PAGE + flash->next_free_column)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f8b3 3210 	ldrh.w	r3, [r3, #528]	@ 0x210
 80019ce:	02db      	lsls	r3, r3, #11
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	f8b2 2212 	ldrh.w	r2, [r2, #530]	@ 0x212
 80019d6:	441a      	add	r2, r3
 80019d8:	4b05      	ldr	r3, [pc, #20]	@ (80019f0 <get_bytes_remaining+0x30>)
 80019da:	1a9b      	subs	r3, r3, r2
			- flash->write_buffer_size;
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	f8b2 220e 	ldrh.w	r2, [r2, #526]	@ 0x20e
 80019e2:	1a9b      	subs	r3, r3, r2

	// write_buffer hasn't been written to flash yet, but its size needs to be counted
	// to get an accurate count for the user.
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	07fe0000 	.word	0x07fe0000

080019f4 <add_test_delimiter>:
	}

	return num_bad_blocks;
}

void add_test_delimiter(W25N01GV_Flash *flash) {
 80019f4:	b580      	push	{r7, lr}
 80019f6:	f6ad 0d08 	subw	sp, sp, #2056	@ 0x808
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	f607 0308 	addw	r3, r7, #2056	@ 0x808
 8001a00:	f6a3 0304 	subw	r3, r3, #2052	@ 0x804
 8001a04:	6018      	str	r0, [r3, #0]
	// This is kind of dumb but it works
	uint8_t delimiter_arr[W25N01GV_BYTES_PER_PAGE] = { 0 };
 8001a06:	f607 0308 	addw	r3, r7, #2056	@ 0x808
 8001a0a:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	3304      	adds	r3, #4
 8001a14:	f240 72fc 	movw	r2, #2044	@ 0x7fc
 8001a18:	2100      	movs	r1, #0
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f008 fb02 	bl	800a024 <memset>

	// Fill an entire page worth of bytes with 0's
	write_to_flash(flash, delimiter_arr, W25N01GV_BYTES_PER_PAGE);
 8001a20:	f107 0108 	add.w	r1, r7, #8
 8001a24:	f607 0308 	addw	r3, r7, #2056	@ 0x808
 8001a28:	f6a3 0304 	subw	r3, r3, #2052	@ 0x804
 8001a2c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001a30:	6818      	ldr	r0, [r3, #0]
 8001a32:	f7ff fe99 	bl	8001768 <write_to_flash>
}
 8001a36:	bf00      	nop
 8001a38:	f607 0708 	addw	r7, r7, #2056	@ 0x808
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	4a07      	ldr	r2, [pc, #28]	@ (8001a6c <vApplicationGetIdleTaskMemory+0x2c>)
 8001a50:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	4a06      	ldr	r2, [pc, #24]	@ (8001a70 <vApplicationGetIdleTaskMemory+0x30>)
 8001a56:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2280      	movs	r2, #128	@ 0x80
 8001a5c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001a5e:	bf00      	nop
 8001a60:	3714      	adds	r7, #20
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	24000030 	.word	0x24000030
 8001a70:	24000084 	.word	0x24000084

08001a74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a74:	b5b0      	push	{r4, r5, r7, lr}
 8001a76:	b088      	sub	sp, #32
 8001a78:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a7a:	f000 ffe7 	bl	8002a4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a7e:	f000 f825 	bl	8001acc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a82:	f000 fa0b 	bl	8001e9c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001a86:	f000 f891 	bl	8001bac <MX_I2C1_Init>
  MX_SPI1_Init();
 8001a8a:	f000 f90f 	bl	8001cac <MX_SPI1_Init>
  MX_I2C5_Init();
 8001a8e:	f000 f8cd 	bl	8001c2c <MX_I2C5_Init>
  MX_SPI6_Init();
 8001a92:	f000 f961 	bl	8001d58 <MX_SPI6_Init>
  MX_USART3_UART_Init();
 8001a96:	f000 f9b5 	bl	8001e04 <MX_USART3_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 3072);
 8001a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac4 <main+0x50>)
 8001a9c:	1d3c      	adds	r4, r7, #4
 8001a9e:	461d      	mov	r5, r3
 8001aa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001aa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001aa4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001aa8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001aac:	1d3b      	adds	r3, r7, #4
 8001aae:	2100      	movs	r1, #0
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f007 f810 	bl	8008ad6 <osThreadCreate>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	4a03      	ldr	r2, [pc, #12]	@ (8001ac8 <main+0x54>)
 8001aba:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001abc:	f007 f804 	bl	8008ac8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ac0:	bf00      	nop
 8001ac2:	e7fd      	b.n	8001ac0 <main+0x4c>
 8001ac4:	0800a0a4 	.word	0x0800a0a4
 8001ac8:	240004d0 	.word	0x240004d0

08001acc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b09c      	sub	sp, #112	@ 0x70
 8001ad0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ad2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ad6:	224c      	movs	r2, #76	@ 0x4c
 8001ad8:	2100      	movs	r1, #0
 8001ada:	4618      	mov	r0, r3
 8001adc:	f008 faa2 	bl	800a024 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ae0:	1d3b      	adds	r3, r7, #4
 8001ae2:	2220      	movs	r2, #32
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f008 fa9c 	bl	800a024 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001aec:	2004      	movs	r0, #4
 8001aee:	f002 f993 	bl	8003e18 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001af2:	2300      	movs	r3, #0
 8001af4:	603b      	str	r3, [r7, #0]
 8001af6:	4b2c      	ldr	r3, [pc, #176]	@ (8001ba8 <SystemClock_Config+0xdc>)
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001afe:	4a2a      	ldr	r2, [pc, #168]	@ (8001ba8 <SystemClock_Config+0xdc>)
 8001b00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b04:	6193      	str	r3, [r2, #24]
 8001b06:	4b28      	ldr	r3, [pc, #160]	@ (8001ba8 <SystemClock_Config+0xdc>)
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001b0e:	603b      	str	r3, [r7, #0]
 8001b10:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001b12:	bf00      	nop
 8001b14:	4b24      	ldr	r3, [pc, #144]	@ (8001ba8 <SystemClock_Config+0xdc>)
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b20:	d1f8      	bne.n	8001b14 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b22:	2302      	movs	r3, #2
 8001b24:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001b26:	2301      	movs	r3, #1
 8001b28:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001b2a:	2340      	movs	r3, #64	@ 0x40
 8001b2c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b32:	2300      	movs	r3, #0
 8001b34:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b36:	2304      	movs	r3, #4
 8001b38:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001b3a:	230c      	movs	r3, #12
 8001b3c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001b42:	2303      	movs	r3, #3
 8001b44:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001b46:	2302      	movs	r3, #2
 8001b48:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001b4a:	230c      	movs	r3, #12
 8001b4c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001b52:	2300      	movs	r3, #0
 8001b54:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f002 f998 	bl	8003e90 <HAL_RCC_OscConfig>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001b66:	f000 fc71 	bl	800244c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b6a:	233f      	movs	r3, #63	@ 0x3f
 8001b6c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001b72:	2300      	movs	r3, #0
 8001b74:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001b76:	2300      	movs	r3, #0
 8001b78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001b7e:	2340      	movs	r3, #64	@ 0x40
 8001b80:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001b82:	2300      	movs	r3, #0
 8001b84:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001b86:	2300      	movs	r3, #0
 8001b88:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b8a:	1d3b      	adds	r3, r7, #4
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f002 fd58 	bl	8004644 <HAL_RCC_ClockConfig>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001b9a:	f000 fc57 	bl	800244c <Error_Handler>
  }
}
 8001b9e:	bf00      	nop
 8001ba0:	3770      	adds	r7, #112	@ 0x70
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	58024800 	.word	0x58024800

08001bac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001bb0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c20 <MX_I2C1_Init+0x74>)
 8001bb2:	4a1c      	ldr	r2, [pc, #112]	@ (8001c24 <MX_I2C1_Init+0x78>)
 8001bb4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8001bb6:	4b1a      	ldr	r3, [pc, #104]	@ (8001c20 <MX_I2C1_Init+0x74>)
 8001bb8:	4a1b      	ldr	r2, [pc, #108]	@ (8001c28 <MX_I2C1_Init+0x7c>)
 8001bba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001bbc:	4b18      	ldr	r3, [pc, #96]	@ (8001c20 <MX_I2C1_Init+0x74>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bc2:	4b17      	ldr	r3, [pc, #92]	@ (8001c20 <MX_I2C1_Init+0x74>)
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bc8:	4b15      	ldr	r3, [pc, #84]	@ (8001c20 <MX_I2C1_Init+0x74>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001bce:	4b14      	ldr	r3, [pc, #80]	@ (8001c20 <MX_I2C1_Init+0x74>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001bd4:	4b12      	ldr	r3, [pc, #72]	@ (8001c20 <MX_I2C1_Init+0x74>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bda:	4b11      	ldr	r3, [pc, #68]	@ (8001c20 <MX_I2C1_Init+0x74>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001be0:	4b0f      	ldr	r3, [pc, #60]	@ (8001c20 <MX_I2C1_Init+0x74>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001be6:	480e      	ldr	r0, [pc, #56]	@ (8001c20 <MX_I2C1_Init+0x74>)
 8001be8:	f001 faa4 	bl	8003134 <HAL_I2C_Init>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001bf2:	f000 fc2b 	bl	800244c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	4809      	ldr	r0, [pc, #36]	@ (8001c20 <MX_I2C1_Init+0x74>)
 8001bfa:	f001 ffeb 	bl	8003bd4 <HAL_I2CEx_ConfigAnalogFilter>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001c04:	f000 fc22 	bl	800244c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001c08:	2100      	movs	r1, #0
 8001c0a:	4805      	ldr	r0, [pc, #20]	@ (8001c20 <MX_I2C1_Init+0x74>)
 8001c0c:	f002 f82d 	bl	8003c6a <HAL_I2CEx_ConfigDigitalFilter>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001c16:	f000 fc19 	bl	800244c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	24000284 	.word	0x24000284
 8001c24:	40005400 	.word	0x40005400
 8001c28:	00707cbb 	.word	0x00707cbb

08001c2c <MX_I2C5_Init>:
  * @brief I2C5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C5_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C5_Init 0 */

  /* USER CODE BEGIN I2C5_Init 1 */

  /* USER CODE END I2C5_Init 1 */
  hi2c5.Instance = I2C5;
 8001c30:	4b1b      	ldr	r3, [pc, #108]	@ (8001ca0 <MX_I2C5_Init+0x74>)
 8001c32:	4a1c      	ldr	r2, [pc, #112]	@ (8001ca4 <MX_I2C5_Init+0x78>)
 8001c34:	601a      	str	r2, [r3, #0]
  hi2c5.Init.Timing = 0x00707CBB;
 8001c36:	4b1a      	ldr	r3, [pc, #104]	@ (8001ca0 <MX_I2C5_Init+0x74>)
 8001c38:	4a1b      	ldr	r2, [pc, #108]	@ (8001ca8 <MX_I2C5_Init+0x7c>)
 8001c3a:	605a      	str	r2, [r3, #4]
  hi2c5.Init.OwnAddress1 = 0;
 8001c3c:	4b18      	ldr	r3, [pc, #96]	@ (8001ca0 <MX_I2C5_Init+0x74>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	609a      	str	r2, [r3, #8]
  hi2c5.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c42:	4b17      	ldr	r3, [pc, #92]	@ (8001ca0 <MX_I2C5_Init+0x74>)
 8001c44:	2201      	movs	r2, #1
 8001c46:	60da      	str	r2, [r3, #12]
  hi2c5.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c48:	4b15      	ldr	r3, [pc, #84]	@ (8001ca0 <MX_I2C5_Init+0x74>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	611a      	str	r2, [r3, #16]
  hi2c5.Init.OwnAddress2 = 0;
 8001c4e:	4b14      	ldr	r3, [pc, #80]	@ (8001ca0 <MX_I2C5_Init+0x74>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	615a      	str	r2, [r3, #20]
  hi2c5.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c54:	4b12      	ldr	r3, [pc, #72]	@ (8001ca0 <MX_I2C5_Init+0x74>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	619a      	str	r2, [r3, #24]
  hi2c5.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c5a:	4b11      	ldr	r3, [pc, #68]	@ (8001ca0 <MX_I2C5_Init+0x74>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	61da      	str	r2, [r3, #28]
  hi2c5.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c60:	4b0f      	ldr	r3, [pc, #60]	@ (8001ca0 <MX_I2C5_Init+0x74>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c5) != HAL_OK)
 8001c66:	480e      	ldr	r0, [pc, #56]	@ (8001ca0 <MX_I2C5_Init+0x74>)
 8001c68:	f001 fa64 	bl	8003134 <HAL_I2C_Init>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <MX_I2C5_Init+0x4a>
  {
    Error_Handler();
 8001c72:	f000 fbeb 	bl	800244c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c5, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c76:	2100      	movs	r1, #0
 8001c78:	4809      	ldr	r0, [pc, #36]	@ (8001ca0 <MX_I2C5_Init+0x74>)
 8001c7a:	f001 ffab 	bl	8003bd4 <HAL_I2CEx_ConfigAnalogFilter>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_I2C5_Init+0x5c>
  {
    Error_Handler();
 8001c84:	f000 fbe2 	bl	800244c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c5, 0) != HAL_OK)
 8001c88:	2100      	movs	r1, #0
 8001c8a:	4805      	ldr	r0, [pc, #20]	@ (8001ca0 <MX_I2C5_Init+0x74>)
 8001c8c:	f001 ffed 	bl	8003c6a <HAL_I2CEx_ConfigDigitalFilter>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_I2C5_Init+0x6e>
  {
    Error_Handler();
 8001c96:	f000 fbd9 	bl	800244c <Error_Handler>
  }
  /* USER CODE BEGIN I2C5_Init 2 */

  /* USER CODE END I2C5_Init 2 */

}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	240002d8 	.word	0x240002d8
 8001ca4:	40006400 	.word	0x40006400
 8001ca8:	00707cbb 	.word	0x00707cbb

08001cac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001cb0:	4b27      	ldr	r3, [pc, #156]	@ (8001d50 <MX_SPI1_Init+0xa4>)
 8001cb2:	4a28      	ldr	r2, [pc, #160]	@ (8001d54 <MX_SPI1_Init+0xa8>)
 8001cb4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cb6:	4b26      	ldr	r3, [pc, #152]	@ (8001d50 <MX_SPI1_Init+0xa4>)
 8001cb8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001cbc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cbe:	4b24      	ldr	r3, [pc, #144]	@ (8001d50 <MX_SPI1_Init+0xa4>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cc4:	4b22      	ldr	r3, [pc, #136]	@ (8001d50 <MX_SPI1_Init+0xa4>)
 8001cc6:	2207      	movs	r2, #7
 8001cc8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cca:	4b21      	ldr	r3, [pc, #132]	@ (8001d50 <MX_SPI1_Init+0xa4>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cd0:	4b1f      	ldr	r3, [pc, #124]	@ (8001d50 <MX_SPI1_Init+0xa4>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001cd6:	4b1e      	ldr	r3, [pc, #120]	@ (8001d50 <MX_SPI1_Init+0xa4>)
 8001cd8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001cdc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001cde:	4b1c      	ldr	r3, [pc, #112]	@ (8001d50 <MX_SPI1_Init+0xa4>)
 8001ce0:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 8001ce4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8001d50 <MX_SPI1_Init+0xa4>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cec:	4b18      	ldr	r3, [pc, #96]	@ (8001d50 <MX_SPI1_Init+0xa4>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cf2:	4b17      	ldr	r3, [pc, #92]	@ (8001d50 <MX_SPI1_Init+0xa4>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001cf8:	4b15      	ldr	r3, [pc, #84]	@ (8001d50 <MX_SPI1_Init+0xa4>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001cfe:	4b14      	ldr	r3, [pc, #80]	@ (8001d50 <MX_SPI1_Init+0xa4>)
 8001d00:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d04:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001d06:	4b12      	ldr	r3, [pc, #72]	@ (8001d50 <MX_SPI1_Init+0xa4>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001d0c:	4b10      	ldr	r3, [pc, #64]	@ (8001d50 <MX_SPI1_Init+0xa4>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001d12:	4b0f      	ldr	r3, [pc, #60]	@ (8001d50 <MX_SPI1_Init+0xa4>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001d18:	4b0d      	ldr	r3, [pc, #52]	@ (8001d50 <MX_SPI1_Init+0xa4>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8001d50 <MX_SPI1_Init+0xa4>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001d24:	4b0a      	ldr	r3, [pc, #40]	@ (8001d50 <MX_SPI1_Init+0xa4>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001d2a:	4b09      	ldr	r3, [pc, #36]	@ (8001d50 <MX_SPI1_Init+0xa4>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001d30:	4b07      	ldr	r3, [pc, #28]	@ (8001d50 <MX_SPI1_Init+0xa4>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001d36:	4b06      	ldr	r3, [pc, #24]	@ (8001d50 <MX_SPI1_Init+0xa4>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d3c:	4804      	ldr	r0, [pc, #16]	@ (8001d50 <MX_SPI1_Init+0xa4>)
 8001d3e:	f004 fdcf 	bl	80068e0 <HAL_SPI_Init>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001d48:	f000 fb80 	bl	800244c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d4c:	bf00      	nop
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	2400032c 	.word	0x2400032c
 8001d54:	40013000 	.word	0x40013000

08001d58 <MX_SPI6_Init>:
  * @brief SPI6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI6_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  /* SPI6 parameter configuration*/
  hspi6.Instance = SPI6;
 8001d5c:	4b27      	ldr	r3, [pc, #156]	@ (8001dfc <MX_SPI6_Init+0xa4>)
 8001d5e:	4a28      	ldr	r2, [pc, #160]	@ (8001e00 <MX_SPI6_Init+0xa8>)
 8001d60:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 8001d62:	4b26      	ldr	r3, [pc, #152]	@ (8001dfc <MX_SPI6_Init+0xa4>)
 8001d64:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001d68:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 8001d6a:	4b24      	ldr	r3, [pc, #144]	@ (8001dfc <MX_SPI6_Init+0xa4>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d70:	4b22      	ldr	r3, [pc, #136]	@ (8001dfc <MX_SPI6_Init+0xa4>)
 8001d72:	2207      	movs	r2, #7
 8001d74:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d76:	4b21      	ldr	r3, [pc, #132]	@ (8001dfc <MX_SPI6_Init+0xa4>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d7c:	4b1f      	ldr	r3, [pc, #124]	@ (8001dfc <MX_SPI6_Init+0xa4>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 8001d82:	4b1e      	ldr	r3, [pc, #120]	@ (8001dfc <MX_SPI6_Init+0xa4>)
 8001d84:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001d88:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001d8a:	4b1c      	ldr	r3, [pc, #112]	@ (8001dfc <MX_SPI6_Init+0xa4>)
 8001d8c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001d90:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d92:	4b1a      	ldr	r3, [pc, #104]	@ (8001dfc <MX_SPI6_Init+0xa4>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d98:	4b18      	ldr	r3, [pc, #96]	@ (8001dfc <MX_SPI6_Init+0xa4>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d9e:	4b17      	ldr	r3, [pc, #92]	@ (8001dfc <MX_SPI6_Init+0xa4>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi6.Init.CRCPolynomial = 0x0;
 8001da4:	4b15      	ldr	r3, [pc, #84]	@ (8001dfc <MX_SPI6_Init+0xa4>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001daa:	4b14      	ldr	r3, [pc, #80]	@ (8001dfc <MX_SPI6_Init+0xa4>)
 8001dac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001db0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001db2:	4b12      	ldr	r3, [pc, #72]	@ (8001dfc <MX_SPI6_Init+0xa4>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001db8:	4b10      	ldr	r3, [pc, #64]	@ (8001dfc <MX_SPI6_Init+0xa4>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001dbe:	4b0f      	ldr	r3, [pc, #60]	@ (8001dfc <MX_SPI6_Init+0xa4>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001dc4:	4b0d      	ldr	r3, [pc, #52]	@ (8001dfc <MX_SPI6_Init+0xa4>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001dca:	4b0c      	ldr	r3, [pc, #48]	@ (8001dfc <MX_SPI6_Init+0xa4>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8001dfc <MX_SPI6_Init+0xa4>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001dd6:	4b09      	ldr	r3, [pc, #36]	@ (8001dfc <MX_SPI6_Init+0xa4>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001ddc:	4b07      	ldr	r3, [pc, #28]	@ (8001dfc <MX_SPI6_Init+0xa4>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001de2:	4b06      	ldr	r3, [pc, #24]	@ (8001dfc <MX_SPI6_Init+0xa4>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 8001de8:	4804      	ldr	r0, [pc, #16]	@ (8001dfc <MX_SPI6_Init+0xa4>)
 8001dea:	f004 fd79 	bl	80068e0 <HAL_SPI_Init>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <MX_SPI6_Init+0xa0>
  {
    Error_Handler();
 8001df4:	f000 fb2a 	bl	800244c <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 8001df8:	bf00      	nop
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	240003b4 	.word	0x240003b4
 8001e00:	58001400 	.word	0x58001400

08001e04 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e08:	4b22      	ldr	r3, [pc, #136]	@ (8001e94 <MX_USART3_UART_Init+0x90>)
 8001e0a:	4a23      	ldr	r2, [pc, #140]	@ (8001e98 <MX_USART3_UART_Init+0x94>)
 8001e0c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001e0e:	4b21      	ldr	r3, [pc, #132]	@ (8001e94 <MX_USART3_UART_Init+0x90>)
 8001e10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e14:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e16:	4b1f      	ldr	r3, [pc, #124]	@ (8001e94 <MX_USART3_UART_Init+0x90>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e1c:	4b1d      	ldr	r3, [pc, #116]	@ (8001e94 <MX_USART3_UART_Init+0x90>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e22:	4b1c      	ldr	r3, [pc, #112]	@ (8001e94 <MX_USART3_UART_Init+0x90>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e28:	4b1a      	ldr	r3, [pc, #104]	@ (8001e94 <MX_USART3_UART_Init+0x90>)
 8001e2a:	220c      	movs	r2, #12
 8001e2c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e2e:	4b19      	ldr	r3, [pc, #100]	@ (8001e94 <MX_USART3_UART_Init+0x90>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e34:	4b17      	ldr	r3, [pc, #92]	@ (8001e94 <MX_USART3_UART_Init+0x90>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e3a:	4b16      	ldr	r3, [pc, #88]	@ (8001e94 <MX_USART3_UART_Init+0x90>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e40:	4b14      	ldr	r3, [pc, #80]	@ (8001e94 <MX_USART3_UART_Init+0x90>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e46:	4b13      	ldr	r3, [pc, #76]	@ (8001e94 <MX_USART3_UART_Init+0x90>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e4c:	4811      	ldr	r0, [pc, #68]	@ (8001e94 <MX_USART3_UART_Init+0x90>)
 8001e4e:	f005 fbb4 	bl	80075ba <HAL_UART_Init>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001e58:	f000 faf8 	bl	800244c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	480d      	ldr	r0, [pc, #52]	@ (8001e94 <MX_USART3_UART_Init+0x90>)
 8001e60:	f006 fd4f 	bl	8008902 <HAL_UARTEx_SetTxFifoThreshold>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001e6a:	f000 faef 	bl	800244c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e6e:	2100      	movs	r1, #0
 8001e70:	4808      	ldr	r0, [pc, #32]	@ (8001e94 <MX_USART3_UART_Init+0x90>)
 8001e72:	f006 fd84 	bl	800897e <HAL_UARTEx_SetRxFifoThreshold>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001e7c:	f000 fae6 	bl	800244c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001e80:	4804      	ldr	r0, [pc, #16]	@ (8001e94 <MX_USART3_UART_Init+0x90>)
 8001e82:	f006 fd05 	bl	8008890 <HAL_UARTEx_DisableFifoMode>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001e8c:	f000 fade 	bl	800244c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e90:	bf00      	nop
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	2400043c 	.word	0x2400043c
 8001e98:	40004800 	.word	0x40004800

08001e9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b08c      	sub	sp, #48	@ 0x30
 8001ea0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea2:	f107 031c 	add.w	r3, r7, #28
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	605a      	str	r2, [r3, #4]
 8001eac:	609a      	str	r2, [r3, #8]
 8001eae:	60da      	str	r2, [r3, #12]
 8001eb0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001eb2:	4b7e      	ldr	r3, [pc, #504]	@ (80020ac <MX_GPIO_Init+0x210>)
 8001eb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eb8:	4a7c      	ldr	r2, [pc, #496]	@ (80020ac <MX_GPIO_Init+0x210>)
 8001eba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ebe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ec2:	4b7a      	ldr	r3, [pc, #488]	@ (80020ac <MX_GPIO_Init+0x210>)
 8001ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ec8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ecc:	61bb      	str	r3, [r7, #24]
 8001ece:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ed0:	4b76      	ldr	r3, [pc, #472]	@ (80020ac <MX_GPIO_Init+0x210>)
 8001ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ed6:	4a75      	ldr	r2, [pc, #468]	@ (80020ac <MX_GPIO_Init+0x210>)
 8001ed8:	f043 0304 	orr.w	r3, r3, #4
 8001edc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ee0:	4b72      	ldr	r3, [pc, #456]	@ (80020ac <MX_GPIO_Init+0x210>)
 8001ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ee6:	f003 0304 	and.w	r3, r3, #4
 8001eea:	617b      	str	r3, [r7, #20]
 8001eec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eee:	4b6f      	ldr	r3, [pc, #444]	@ (80020ac <MX_GPIO_Init+0x210>)
 8001ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ef4:	4a6d      	ldr	r2, [pc, #436]	@ (80020ac <MX_GPIO_Init+0x210>)
 8001ef6:	f043 0301 	orr.w	r3, r3, #1
 8001efa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001efe:	4b6b      	ldr	r3, [pc, #428]	@ (80020ac <MX_GPIO_Init+0x210>)
 8001f00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	613b      	str	r3, [r7, #16]
 8001f0a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f0c:	4b67      	ldr	r3, [pc, #412]	@ (80020ac <MX_GPIO_Init+0x210>)
 8001f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f12:	4a66      	ldr	r2, [pc, #408]	@ (80020ac <MX_GPIO_Init+0x210>)
 8001f14:	f043 0310 	orr.w	r3, r3, #16
 8001f18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f1c:	4b63      	ldr	r3, [pc, #396]	@ (80020ac <MX_GPIO_Init+0x210>)
 8001f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f22:	f003 0310 	and.w	r3, r3, #16
 8001f26:	60fb      	str	r3, [r7, #12]
 8001f28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f2a:	4b60      	ldr	r3, [pc, #384]	@ (80020ac <MX_GPIO_Init+0x210>)
 8001f2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f30:	4a5e      	ldr	r2, [pc, #376]	@ (80020ac <MX_GPIO_Init+0x210>)
 8001f32:	f043 0308 	orr.w	r3, r3, #8
 8001f36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f3a:	4b5c      	ldr	r3, [pc, #368]	@ (80020ac <MX_GPIO_Init+0x210>)
 8001f3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f40:	f003 0308 	and.w	r3, r3, #8
 8001f44:	60bb      	str	r3, [r7, #8]
 8001f46:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f48:	4b58      	ldr	r3, [pc, #352]	@ (80020ac <MX_GPIO_Init+0x210>)
 8001f4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f4e:	4a57      	ldr	r2, [pc, #348]	@ (80020ac <MX_GPIO_Init+0x210>)
 8001f50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f58:	4b54      	ldr	r3, [pc, #336]	@ (80020ac <MX_GPIO_Init+0x210>)
 8001f5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f62:	607b      	str	r3, [r7, #4]
 8001f64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f66:	4b51      	ldr	r3, [pc, #324]	@ (80020ac <MX_GPIO_Init+0x210>)
 8001f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f6c:	4a4f      	ldr	r2, [pc, #316]	@ (80020ac <MX_GPIO_Init+0x210>)
 8001f6e:	f043 0302 	orr.w	r3, r3, #2
 8001f72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f76:	4b4d      	ldr	r3, [pc, #308]	@ (80020ac <MX_GPIO_Init+0x210>)
 8001f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	603b      	str	r3, [r7, #0]
 8001f82:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI6_CS_GPIO_Port, SPI6_CS_Pin, GPIO_PIN_RESET);
 8001f84:	2200      	movs	r2, #0
 8001f86:	2110      	movs	r1, #16
 8001f88:	4849      	ldr	r0, [pc, #292]	@ (80020b0 <MX_GPIO_Init+0x214>)
 8001f8a:	f001 f8b9 	bl	8003100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_DIO3_GPIO_Port, MCU_DIO3_Pin, GPIO_PIN_RESET);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f94:	4847      	ldr	r0, [pc, #284]	@ (80020b4 <MX_GPIO_Init+0x218>)
 8001f96:	f001 f8b3 	bl	8003100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, MCU_DIO2_Pin|MCU_DIO1_Pin|SPI1_CS_Pin|EEPROM_WC_Pin, GPIO_PIN_RESET);
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f44f 614c 	mov.w	r1, #3264	@ 0xcc0
 8001fa0:	4845      	ldr	r0, [pc, #276]	@ (80020b8 <MX_GPIO_Init+0x21c>)
 8001fa2:	f001 f8ad 	bl	8003100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_LED_R_GPIO_Port, MCU_LED_R_Pin, GPIO_PIN_RESET);
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001fac:	4843      	ldr	r0, [pc, #268]	@ (80020bc <MX_GPIO_Init+0x220>)
 8001fae:	f001 f8a7 	bl	8003100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, MCU_LED_G_Pin|MCU_LED_B_Pin, GPIO_PIN_RESET);
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	2103      	movs	r1, #3
 8001fb6:	4842      	ldr	r0, [pc, #264]	@ (80020c0 <MX_GPIO_Init+0x224>)
 8001fb8:	f001 f8a2 	bl	8003100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MODE_SWITCH_Pin */
  GPIO_InitStruct.Pin = MODE_SWITCH_Pin;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MODE_SWITCH_GPIO_Port, &GPIO_InitStruct);
 8001fc8:	f107 031c 	add.w	r3, r7, #28
 8001fcc:	4619      	mov	r1, r3
 8001fce:	483d      	ldr	r0, [pc, #244]	@ (80020c4 <MX_GPIO_Init+0x228>)
 8001fd0:	f000 fed6 	bl	8002d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI6_CS_Pin */
  GPIO_InitStruct.Pin = SPI6_CS_Pin;
 8001fd4:	2310      	movs	r3, #16
 8001fd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI6_CS_GPIO_Port, &GPIO_InitStruct);
 8001fe4:	f107 031c 	add.w	r3, r7, #28
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4831      	ldr	r0, [pc, #196]	@ (80020b0 <MX_GPIO_Init+0x214>)
 8001fec:	f000 fec8 	bl	8002d80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE11 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001ff0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001ff4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffe:	2300      	movs	r3, #0
 8002000:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002002:	2305      	movs	r3, #5
 8002004:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002006:	f107 031c 	add.w	r3, r7, #28
 800200a:	4619      	mov	r1, r3
 800200c:	482c      	ldr	r0, [pc, #176]	@ (80020c0 <MX_GPIO_Init+0x224>)
 800200e:	f000 feb7 	bl	8002d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_DIO3_Pin */
  GPIO_InitStruct.Pin = MCU_DIO3_Pin;
 8002012:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002016:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002018:	2301      	movs	r3, #1
 800201a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201c:	2300      	movs	r3, #0
 800201e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002020:	2300      	movs	r3, #0
 8002022:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(MCU_DIO3_GPIO_Port, &GPIO_InitStruct);
 8002024:	f107 031c 	add.w	r3, r7, #28
 8002028:	4619      	mov	r1, r3
 800202a:	4822      	ldr	r0, [pc, #136]	@ (80020b4 <MX_GPIO_Init+0x218>)
 800202c:	f000 fea8 	bl	8002d80 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_DIO2_Pin MCU_DIO1_Pin SPI1_CS_Pin EEPROM_WC_Pin */
  GPIO_InitStruct.Pin = MCU_DIO2_Pin|MCU_DIO1_Pin|SPI1_CS_Pin|EEPROM_WC_Pin;
 8002030:	f44f 634c 	mov.w	r3, #3264	@ 0xcc0
 8002034:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002036:	2301      	movs	r3, #1
 8002038:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203a:	2300      	movs	r3, #0
 800203c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203e:	2300      	movs	r3, #0
 8002040:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002042:	f107 031c 	add.w	r3, r7, #28
 8002046:	4619      	mov	r1, r3
 8002048:	481b      	ldr	r0, [pc, #108]	@ (80020b8 <MX_GPIO_Init+0x21c>)
 800204a:	f000 fe99 	bl	8002d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800204e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002052:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002054:	2303      	movs	r3, #3
 8002056:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002058:	2300      	movs	r3, #0
 800205a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800205c:	f107 031c 	add.w	r3, r7, #28
 8002060:	4619      	mov	r1, r3
 8002062:	4816      	ldr	r0, [pc, #88]	@ (80020bc <MX_GPIO_Init+0x220>)
 8002064:	f000 fe8c 	bl	8002d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_LED_R_Pin */
  GPIO_InitStruct.Pin = MCU_LED_R_Pin;
 8002068:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800206c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800206e:	2301      	movs	r3, #1
 8002070:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002072:	2300      	movs	r3, #0
 8002074:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002076:	2300      	movs	r3, #0
 8002078:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(MCU_LED_R_GPIO_Port, &GPIO_InitStruct);
 800207a:	f107 031c 	add.w	r3, r7, #28
 800207e:	4619      	mov	r1, r3
 8002080:	480e      	ldr	r0, [pc, #56]	@ (80020bc <MX_GPIO_Init+0x220>)
 8002082:	f000 fe7d 	bl	8002d80 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCU_LED_G_Pin MCU_LED_B_Pin */
  GPIO_InitStruct.Pin = MCU_LED_G_Pin|MCU_LED_B_Pin;
 8002086:	2303      	movs	r3, #3
 8002088:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800208a:	2301      	movs	r3, #1
 800208c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208e:	2300      	movs	r3, #0
 8002090:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002092:	2300      	movs	r3, #0
 8002094:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002096:	f107 031c 	add.w	r3, r7, #28
 800209a:	4619      	mov	r1, r3
 800209c:	4808      	ldr	r0, [pc, #32]	@ (80020c0 <MX_GPIO_Init+0x224>)
 800209e:	f000 fe6f 	bl	8002d80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80020a2:	bf00      	nop
 80020a4:	3730      	adds	r7, #48	@ 0x30
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	58024400 	.word	0x58024400
 80020b0:	58020000 	.word	0x58020000
 80020b4:	58020c00 	.word	0x58020c00
 80020b8:	58021800 	.word	0x58021800
 80020bc:	58020400 	.word	0x58020400
 80020c0:	58021000 	.word	0x58021000
 80020c4:	58020800 	.word	0x58020800

080020c8 <getTimestamp>:
        float accel[3];
        float gyro[3];
    } values;
};

uint64_t getTimestamp(void) {
 80020c8:	b5b0      	push	{r4, r5, r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
	uint32_t timestamp = HAL_GetTick();
 80020ce:	f000 fd43 	bl	8002b58 <HAL_GetTick>
 80020d2:	6078      	str	r0, [r7, #4]
	return (uint64_t)timestamp;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	461c      	mov	r4, r3
 80020da:	4615      	mov	r5, r2
 80020dc:	4622      	mov	r2, r4
 80020de:	462b      	mov	r3, r5
}
 80020e0:	4610      	mov	r0, r2
 80020e2:	4619      	mov	r1, r3
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080020ec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	f5ad 5d93 	sub.w	sp, sp, #4704	@ 0x1260
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80020f8:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80020fc:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  TickType_t xLastWakeTime;
  const TickType_t xFrequency = 100; //Milliseconds
 80020fe:	2364      	movs	r3, #100	@ 0x64
 8002100:	f241 225c 	movw	r2, #4700	@ 0x125c
 8002104:	443a      	add	r2, r7
 8002106:	6013      	str	r3, [r2, #0]
  xLastWakeTime = xTaskGetTickCount();
 8002108:	f007 f90a 	bl	8009320 <xTaskGetTickCount>
 800210c:	4603      	mov	r3, r0
 800210e:	f241 2254 	movw	r2, #4692	@ 0x1254
 8002112:	443a      	add	r2, r7
 8002114:	6013      	str	r3, [r2, #0]
  float pres = 0.0;
 8002116:	f04f 0300 	mov.w	r3, #0
 800211a:	f241 2250 	movw	r2, #4688	@ 0x1250
 800211e:	443a      	add	r2, r7
 8002120:	6013      	str	r3, [r2, #0]
  float temp = 0.0;
 8002122:	f04f 0300 	mov.w	r3, #0
 8002126:	f241 224c 	movw	r2, #4684	@ 0x124c
 800212a:	443a      	add	r2, r7
 800212c:	6013      	str	r3, [r2, #0]
  #define block_offset (uint16_t)100*40
  Accel accel = {0};
 800212e:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 8002132:	2200      	movs	r2, #0
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	605a      	str	r2, [r3, #4]
 8002138:	609a      	str	r2, [r3, #8]
  AngRate gyro = {0};
 800213a:	f241 2334 	movw	r3, #4660	@ 0x1234
 800213e:	443b      	add	r3, r7
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	605a      	str	r2, [r3, #4]
 8002146:	609a      	str	r2, [r3, #8]

  IMU IMU1 = {0};
 8002148:	f241 2314 	movw	r3, #4628	@ 0x1214
 800214c:	443b      	add	r3, r7
 800214e:	2220      	movs	r2, #32
 8002150:	2100      	movs	r1, #0
 8002152:	4618      	mov	r0, r3
 8002154:	f007 ff66 	bl	800a024 <memset>
  IMU1.hi2c = &hi2c5;
 8002158:	4bb3      	ldr	r3, [pc, #716]	@ (8002428 <StartDefaultTask+0x33c>)
 800215a:	f241 2214 	movw	r2, #4628	@ 0x1214
 800215e:	443a      	add	r2, r7
 8002160:	6013      	str	r3, [r2, #0]
  IMU1.I2C_TIMEOUT = 1000;
 8002162:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002166:	f241 2218 	movw	r2, #4632	@ 0x1218
 800216a:	443a      	add	r2, r7
 800216c:	8013      	strh	r3, [r2, #0]
  IMU1.G_x_offset = 0;
 800216e:	f04f 0300 	mov.w	r3, #0
 8002172:	f241 2228 	movw	r2, #4648	@ 0x1228
 8002176:	443a      	add	r2, r7
 8002178:	6013      	str	r3, [r2, #0]
  IMU1.G_y_offset = 0;
 800217a:	f04f 0300 	mov.w	r3, #0
 800217e:	f241 222c 	movw	r2, #4652	@ 0x122c
 8002182:	443a      	add	r2, r7
 8002184:	6013      	str	r3, [r2, #0]
  IMU1.G_z_offset = 0;
 8002186:	f04f 0300 	mov.w	r3, #0
 800218a:	f241 2230 	movw	r2, #4656	@ 0x1230
 800218e:	443a      	add	r2, r7
 8002190:	6013      	str	r3, [r2, #0]
  IMU1.XL_x_offset = 0;
 8002192:	f04f 0300 	mov.w	r3, #0
 8002196:	f241 221c 	movw	r2, #4636	@ 0x121c
 800219a:	443a      	add	r2, r7
 800219c:	6013      	str	r3, [r2, #0]
  IMU1.XL_y_offset = 0;
 800219e:	f04f 0300 	mov.w	r3, #0
 80021a2:	f507 5291 	add.w	r2, r7, #4640	@ 0x1220
 80021a6:	6013      	str	r3, [r2, #0]
  IMU1.XL_z_offset = 0;
 80021a8:	f04f 0300 	mov.w	r3, #0
 80021ac:	f241 2224 	movw	r2, #4644	@ 0x1224
 80021b0:	443a      	add	r2, r7
 80021b2:	6013      	str	r3, [r2, #0]

  BAR BAR1 = {0};
 80021b4:	f241 13fc 	movw	r3, #4604	@ 0x11fc
 80021b8:	443b      	add	r3, r7
 80021ba:	2200      	movs	r2, #0
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	605a      	str	r2, [r3, #4]
 80021c0:	609a      	str	r2, [r3, #8]
 80021c2:	60da      	str	r2, [r3, #12]
 80021c4:	611a      	str	r2, [r3, #16]
 80021c6:	615a      	str	r2, [r3, #20]
  BAR1.hspi = &hspi6;
 80021c8:	4b98      	ldr	r3, [pc, #608]	@ (800242c <StartDefaultTask+0x340>)
 80021ca:	f241 12fc 	movw	r2, #4604	@ 0x11fc
 80021ce:	443a      	add	r2, r7
 80021d0:	6013      	str	r3, [r2, #0]
  BAR1.SPI_TIMEOUT = 1000;
 80021d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021d6:	f507 5290 	add.w	r2, r7, #4608	@ 0x1200
 80021da:	8013      	strh	r3, [r2, #0]
  BAR1.CS_GPIO_Port = GPIOA;
 80021dc:	4b94      	ldr	r3, [pc, #592]	@ (8002430 <StartDefaultTask+0x344>)
 80021de:	f241 2204 	movw	r2, #4612	@ 0x1204
 80021e2:	443a      	add	r2, r7
 80021e4:	6013      	str	r3, [r2, #0]
  BAR1.CS_GPIO_Pin = GPIO_PIN_4;
 80021e6:	2310      	movs	r3, #16
 80021e8:	f241 2208 	movw	r2, #4616	@ 0x1208
 80021ec:	443a      	add	r2, r7
 80021ee:	8013      	strh	r3, [r2, #0]
  BAR1.pres_offset = 0;
 80021f0:	f04f 0300 	mov.w	r3, #0
 80021f4:	f241 220c 	movw	r2, #4620	@ 0x120c
 80021f8:	443a      	add	r2, r7
 80021fa:	6013      	str	r3, [r2, #0]
  BAR1.alt_offset = 0;
 80021fc:	f04f 0300 	mov.w	r3, #0
 8002200:	f241 2210 	movw	r2, #4624	@ 0x1210
 8002204:	443a      	add	r2, r7
 8002206:	6013      	str	r3, [r2, #0]

  union Data data;

  W25N01GV_Flash flash;
  init_flash(&flash, &hspi1, GPIOG, GPIO_PIN_10);
 8002208:	f607 70b8 	addw	r0, r7, #4024	@ 0xfb8
 800220c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002210:	4a88      	ldr	r2, [pc, #544]	@ (8002434 <StartDefaultTask+0x348>)
 8002212:	4989      	ldr	r1, [pc, #548]	@ (8002438 <StartDefaultTask+0x34c>)
 8002214:	f7ff f9b9 	bl	800158a <init_flash>

  if (IMU_init(&IMU1)) {
 8002218:	f241 2314 	movw	r3, #4628	@ 0x1214
 800221c:	443b      	add	r3, r7
 800221e:	4618      	mov	r0, r3
 8002220:	f7fe fc4e 	bl	8000ac0 <IMU_init>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <StartDefaultTask+0x142>
  	Error_Handler(); //We have not read the who am I register, so something is probably wrong
 800222a:	f000 f90f 	bl	800244c <Error_Handler>
  }

  if (BAR_init(&BAR1)) {
 800222e:	f241 13fc 	movw	r3, #4604	@ 0x11fc
 8002232:	443b      	add	r3, r7
 8002234:	4618      	mov	r0, r3
 8002236:	f7fe faa8 	bl	800078a <BAR_init>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <StartDefaultTask+0x158>
	  Error_Handler(); //We have not read the who am I register, so something is probably wrong
 8002240:	f000 f904 	bl	800244c <Error_Handler>
  }

  // Detect if the jumper is on read or write mode
  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0)) { // Read mode
 8002244:	2101      	movs	r1, #1
 8002246:	487d      	ldr	r0, [pc, #500]	@ (800243c <StartDefaultTask+0x350>)
 8002248:	f000 ff42 	bl	80030d0 <HAL_GPIO_ReadPin>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d031      	beq.n	80022b6 <StartDefaultTask+0x1ca>

	  //finish_flash_write(&flash); // Finish writing, if we haven't already
	  HAL_Delay(10000); // 10 second delay so that the client can setup
 8002252:	f242 7010 	movw	r0, #10000	@ 0x2710
 8002256:	f000 fc8b 	bl	8002b70 <HAL_Delay>
	  uint32_t page = 0;
 800225a:	2300      	movs	r3, #0
 800225c:	f241 2258 	movw	r2, #4696	@ 0x1258
 8002260:	443a      	add	r2, r7
 8002262:	6013      	str	r3, [r2, #0]
	  uint8_t read_buffer[W25N01GV_BYTES_PER_PAGE];  // W25N01GV_BYTES_PER_PAGE == 2048 == 2KB
	  reset_flash_read_pointer(&flash);
 8002264:	f607 73b8 	addw	r3, r7, #4024	@ 0xfb8
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff fb49 	bl	8001900 <reset_flash_read_pointer>

	  while (page < flash.current_page) {
 800226e:	e014      	b.n	800229a <StartDefaultTask+0x1ae>
		  read_next_2KB_from_flash(&flash, read_buffer);
 8002270:	4b73      	ldr	r3, [pc, #460]	@ (8002440 <StartDefaultTask+0x354>)
 8002272:	f503 5393 	add.w	r3, r3, #4704	@ 0x1260
 8002276:	443b      	add	r3, r7
 8002278:	f607 72b8 	addw	r2, r7, #4024	@ 0xfb8
 800227c:	4619      	mov	r1, r3
 800227e:	4610      	mov	r0, r2
 8002280:	f7ff fb4c 	bl	800191c <read_next_2KB_from_flash>
		  HAL_UART_Transmit(&huart3, read_buffer, sizeof(read_buffer), 1000);
 8002284:	496e      	ldr	r1, [pc, #440]	@ (8002440 <StartDefaultTask+0x354>)
 8002286:	f501 5393 	add.w	r3, r1, #4704	@ 0x1260
 800228a:	19d9      	adds	r1, r3, r7
 800228c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002290:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002294:	486b      	ldr	r0, [pc, #428]	@ (8002444 <StartDefaultTask+0x358>)
 8002296:	f005 f9e0 	bl	800765a <HAL_UART_Transmit>
	  while (page < flash.current_page) {
 800229a:	f507 5393 	add.w	r3, r7, #4704	@ 0x1260
 800229e:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 80022a2:	f8b3 3210 	ldrh.w	r3, [r3, #528]	@ 0x210
 80022a6:	461a      	mov	r2, r3
 80022a8:	f241 2358 	movw	r3, #4696	@ 0x1258
 80022ac:	443b      	add	r3, r7
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d3dd      	bcc.n	8002270 <StartDefaultTask+0x184>
		  write_to_flash(&flash, data.bytes, 40);
	  }
	  finish_flash_write(&flash);
  }
  /* USER CODE END 5 */
}
 80022b4:	e0b4      	b.n	8002420 <StartDefaultTask+0x334>
	  erase_flash(&flash);
 80022b6:	f607 73b8 	addw	r3, r7, #4024	@ 0xfb8
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7ff fb4d 	bl	800195a <erase_flash>
	  add_test_delimiter(&flash);
 80022c0:	f607 73b8 	addw	r3, r7, #4024	@ 0xfb8
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff fb95 	bl	80019f4 <add_test_delimiter>
	  uint8_t flash_offset[block_offset] = {0x00};
 80022ca:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80022ce:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 80022d2:	2200      	movs	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	3304      	adds	r3, #4
 80022d8:	f640 729c 	movw	r2, #3996	@ 0xf9c
 80022dc:	2100      	movs	r1, #0
 80022de:	4618      	mov	r0, r3
 80022e0:	f007 fea0 	bl	800a024 <memset>
	  write_to_flash(&flash, flash_offset, block_offset);
 80022e4:	4b56      	ldr	r3, [pc, #344]	@ (8002440 <StartDefaultTask+0x354>)
 80022e6:	f503 5393 	add.w	r3, r3, #4704	@ 0x1260
 80022ea:	443b      	add	r3, r7
 80022ec:	f607 70b8 	addw	r0, r7, #4024	@ 0xfb8
 80022f0:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80022f4:	4619      	mov	r1, r3
 80022f6:	f7ff fa37 	bl	8001768 <write_to_flash>
	  uint8_t data_start_header[10] = {0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00};
 80022fa:	f507 5393 	add.w	r3, r7, #4704	@ 0x1260
 80022fe:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8002302:	4a51      	ldr	r2, [pc, #324]	@ (8002448 <StartDefaultTask+0x35c>)
 8002304:	ca07      	ldmia	r2, {r0, r1, r2}
 8002306:	c303      	stmia	r3!, {r0, r1}
 8002308:	801a      	strh	r2, [r3, #0]
	  write_to_flash(&flash, data_start_header, 10);
 800230a:	f607 71ac 	addw	r1, r7, #4012	@ 0xfac
 800230e:	f607 73b8 	addw	r3, r7, #4024	@ 0xfb8
 8002312:	220a      	movs	r2, #10
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff fa27 	bl	8001768 <write_to_flash>
		  vTaskDelayUntil(&xLastWakeTime, xFrequency);
 800231a:	f241 2354 	movw	r3, #4692	@ 0x1254
 800231e:	443b      	add	r3, r7
 8002320:	f241 225c 	movw	r2, #4700	@ 0x125c
 8002324:	443a      	add	r2, r7
 8002326:	6811      	ldr	r1, [r2, #0]
 8002328:	4618      	mov	r0, r3
 800232a:	f006 fe6b 	bl	8009004 <vTaskDelayUntil>
		  BAR_getPres(&BAR1, &pres);
 800232e:	f241 2250 	movw	r2, #4688	@ 0x1250
 8002332:	443a      	add	r2, r7
 8002334:	f241 13fc 	movw	r3, #4604	@ 0x11fc
 8002338:	443b      	add	r3, r7
 800233a:	4611      	mov	r1, r2
 800233c:	4618      	mov	r0, r3
 800233e:	f7fe fa41 	bl	80007c4 <BAR_getPres>
		  BAR_getTemp(&BAR1, &temp);
 8002342:	f241 224c 	movw	r2, #4684	@ 0x124c
 8002346:	443a      	add	r2, r7
 8002348:	f241 13fc 	movw	r3, #4604	@ 0x11fc
 800234c:	443b      	add	r3, r7
 800234e:	4611      	mov	r1, r2
 8002350:	4618      	mov	r0, r3
 8002352:	f7fe fa61 	bl	8000818 <BAR_getTemp>
		  IMU_getAccel(&IMU1, &accel);
 8002356:	f507 5292 	add.w	r2, r7, #4672	@ 0x1240
 800235a:	f241 2314 	movw	r3, #4628	@ 0x1214
 800235e:	443b      	add	r3, r7
 8002360:	4611      	mov	r1, r2
 8002362:	4618      	mov	r0, r3
 8002364:	f7fe fbe3 	bl	8000b2e <IMU_getAccel>
		  IMU_getAngRate(&IMU1, &gyro);
 8002368:	f241 2234 	movw	r2, #4660	@ 0x1234
 800236c:	443a      	add	r2, r7
 800236e:	f241 2314 	movw	r3, #4628	@ 0x1214
 8002372:	443b      	add	r3, r7
 8002374:	4611      	mov	r1, r2
 8002376:	4618      	mov	r0, r3
 8002378:	f7fe fc1a 	bl	8000bb0 <IMU_getAngRate>
		  data.values.timestamp = getTimestamp();
 800237c:	f7ff fea4 	bl	80020c8 <getTimestamp>
 8002380:	4602      	mov	r2, r0
 8002382:	460b      	mov	r3, r1
 8002384:	f241 11d0 	movw	r1, #4560	@ 0x11d0
 8002388:	4439      	add	r1, r7
 800238a:	e9c1 2300 	strd	r2, r3, [r1]
		  data.values.pressure = pres;
 800238e:	f241 2350 	movw	r3, #4688	@ 0x1250
 8002392:	443b      	add	r3, r7
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f241 12d8 	movw	r2, #4568	@ 0x11d8
 800239a:	443a      	add	r2, r7
 800239c:	6013      	str	r3, [r2, #0]
		  data.values.temperature = temp;
 800239e:	f241 234c 	movw	r3, #4684	@ 0x124c
 80023a2:	443b      	add	r3, r7
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f241 12dc 	movw	r2, #4572	@ 0x11dc
 80023aa:	443a      	add	r2, r7
 80023ac:	6013      	str	r3, [r2, #0]
		  data.values.accel[0] = accel.XL_x;
 80023ae:	f507 5392 	add.w	r3, r7, #4672	@ 0x1240
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f507 528f 	add.w	r2, r7, #4576	@ 0x11e0
 80023b8:	6013      	str	r3, [r2, #0]
		  data.values.accel[1] = accel.XL_y;
 80023ba:	f241 2344 	movw	r3, #4676	@ 0x1244
 80023be:	443b      	add	r3, r7
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f241 12e4 	movw	r2, #4580	@ 0x11e4
 80023c6:	443a      	add	r2, r7
 80023c8:	6013      	str	r3, [r2, #0]
		  data.values.accel[2] = accel.XL_z;
 80023ca:	f241 2348 	movw	r3, #4680	@ 0x1248
 80023ce:	443b      	add	r3, r7
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f241 12e8 	movw	r2, #4584	@ 0x11e8
 80023d6:	443a      	add	r2, r7
 80023d8:	6013      	str	r3, [r2, #0]
		  data.values.gyro[0] = gyro.G_x;
 80023da:	f241 2334 	movw	r3, #4660	@ 0x1234
 80023de:	443b      	add	r3, r7
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f241 12ec 	movw	r2, #4588	@ 0x11ec
 80023e6:	443a      	add	r2, r7
 80023e8:	6013      	str	r3, [r2, #0]
		  data.values.gyro[1] = gyro.G_y;
 80023ea:	f241 2338 	movw	r3, #4664	@ 0x1238
 80023ee:	443b      	add	r3, r7
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f241 12f0 	movw	r2, #4592	@ 0x11f0
 80023f6:	443a      	add	r2, r7
 80023f8:	6013      	str	r3, [r2, #0]
		  data.values.gyro[2] = gyro.G_z;
 80023fa:	f241 233c 	movw	r3, #4668	@ 0x123c
 80023fe:	443b      	add	r3, r7
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f241 12f4 	movw	r2, #4596	@ 0x11f4
 8002406:	443a      	add	r2, r7
 8002408:	6013      	str	r3, [r2, #0]
		  write_to_flash(&flash, data.bytes, 40);
 800240a:	f241 11d0 	movw	r1, #4560	@ 0x11d0
 800240e:	4439      	add	r1, r7
 8002410:	f607 73b8 	addw	r3, r7, #4024	@ 0xfb8
 8002414:	2228      	movs	r2, #40	@ 0x28
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff f9a6 	bl	8001768 <write_to_flash>
		  vTaskDelayUntil(&xLastWakeTime, xFrequency);
 800241c:	bf00      	nop
 800241e:	e77c      	b.n	800231a <StartDefaultTask+0x22e>
}
 8002420:	f507 5793 	add.w	r7, r7, #4704	@ 0x1260
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	240002d8 	.word	0x240002d8
 800242c:	240003b4 	.word	0x240003b4
 8002430:	58020000 	.word	0x58020000
 8002434:	58021800 	.word	0x58021800
 8002438:	2400032c 	.word	0x2400032c
 800243c:	58020800 	.word	0x58020800
 8002440:	ffffedac 	.word	0xffffedac
 8002444:	2400043c 	.word	0x2400043c
 8002448:	0800a0c0 	.word	0x0800a0c0

0800244c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002450:	b672      	cpsid	i
}
 8002452:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002454:	bf00      	nop
 8002456:	e7fd      	b.n	8002454 <Error_Handler+0x8>

08002458 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 800245e:	f107 0308 	add.w	r3, r7, #8
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]
 8002466:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002468:	4b11      	ldr	r3, [pc, #68]	@ (80024b0 <HAL_MspInit+0x58>)
 800246a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800246e:	4a10      	ldr	r2, [pc, #64]	@ (80024b0 <HAL_MspInit+0x58>)
 8002470:	f043 0302 	orr.w	r3, r3, #2
 8002474:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002478:	4b0d      	ldr	r3, [pc, #52]	@ (80024b0 <HAL_MspInit+0x58>)
 800247a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	607b      	str	r3, [r7, #4]
 8002484:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002486:	2200      	movs	r2, #0
 8002488:	210f      	movs	r1, #15
 800248a:	f06f 0001 	mvn.w	r0, #1
 800248e:	f000 fc50 	bl	8002d32 <HAL_NVIC_SetPriority>

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 8002492:	2300      	movs	r3, #0
 8002494:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8002496:	2300      	movs	r3, #0
 8002498:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 800249a:	f107 0308 	add.w	r3, r7, #8
 800249e:	4618      	mov	r0, r3
 80024a0:	f001 fc30 	bl	8003d04 <HAL_PWR_ConfigPVD>

  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 80024a4:	f001 fca8 	bl	8003df8 <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024a8:	bf00      	nop
 80024aa:	3710      	adds	r7, #16
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	58024400 	.word	0x58024400

080024b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b0ba      	sub	sp, #232	@ 0xe8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024bc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	605a      	str	r2, [r3, #4]
 80024c6:	609a      	str	r2, [r3, #8]
 80024c8:	60da      	str	r2, [r3, #12]
 80024ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024cc:	f107 0318 	add.w	r3, r7, #24
 80024d0:	22b8      	movs	r2, #184	@ 0xb8
 80024d2:	2100      	movs	r1, #0
 80024d4:	4618      	mov	r0, r3
 80024d6:	f007 fda5 	bl	800a024 <memset>
  if(hi2c->Instance==I2C1)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a4d      	ldr	r2, [pc, #308]	@ (8002614 <HAL_I2C_MspInit+0x160>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d146      	bne.n	8002572 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80024e4:	f04f 0208 	mov.w	r2, #8
 80024e8:	f04f 0300 	mov.w	r3, #0
 80024ec:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 80024f0:	2300      	movs	r3, #0
 80024f2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024f6:	f107 0318 	add.w	r3, r7, #24
 80024fa:	4618      	mov	r0, r3
 80024fc:	f002 fc2e 	bl	8004d5c <HAL_RCCEx_PeriphCLKConfig>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002506:	f7ff ffa1 	bl	800244c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800250a:	4b43      	ldr	r3, [pc, #268]	@ (8002618 <HAL_I2C_MspInit+0x164>)
 800250c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002510:	4a41      	ldr	r2, [pc, #260]	@ (8002618 <HAL_I2C_MspInit+0x164>)
 8002512:	f043 0302 	orr.w	r3, r3, #2
 8002516:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800251a:	4b3f      	ldr	r3, [pc, #252]	@ (8002618 <HAL_I2C_MspInit+0x164>)
 800251c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	617b      	str	r3, [r7, #20]
 8002526:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002528:	23c0      	movs	r3, #192	@ 0xc0
 800252a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800252e:	2312      	movs	r3, #18
 8002530:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002534:	2300      	movs	r3, #0
 8002536:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800253a:	2300      	movs	r3, #0
 800253c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002540:	2304      	movs	r3, #4
 8002542:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002546:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800254a:	4619      	mov	r1, r3
 800254c:	4833      	ldr	r0, [pc, #204]	@ (800261c <HAL_I2C_MspInit+0x168>)
 800254e:	f000 fc17 	bl	8002d80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002552:	4b31      	ldr	r3, [pc, #196]	@ (8002618 <HAL_I2C_MspInit+0x164>)
 8002554:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002558:	4a2f      	ldr	r2, [pc, #188]	@ (8002618 <HAL_I2C_MspInit+0x164>)
 800255a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800255e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002562:	4b2d      	ldr	r3, [pc, #180]	@ (8002618 <HAL_I2C_MspInit+0x164>)
 8002564:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002568:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800256c:	613b      	str	r3, [r7, #16]
 800256e:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C5_MspInit 1 */

  /* USER CODE END I2C5_MspInit 1 */
  }

}
 8002570:	e04b      	b.n	800260a <HAL_I2C_MspInit+0x156>
  else if(hi2c->Instance==I2C5)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a2a      	ldr	r2, [pc, #168]	@ (8002620 <HAL_I2C_MspInit+0x16c>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d146      	bne.n	800260a <HAL_I2C_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C5;
 800257c:	f04f 0208 	mov.w	r2, #8
 8002580:	f04f 0300 	mov.w	r3, #0
 8002584:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002588:	2300      	movs	r3, #0
 800258a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800258e:	f107 0318 	add.w	r3, r7, #24
 8002592:	4618      	mov	r0, r3
 8002594:	f002 fbe2 	bl	8004d5c <HAL_RCCEx_PeriphCLKConfig>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <HAL_I2C_MspInit+0xee>
      Error_Handler();
 800259e:	f7ff ff55 	bl	800244c <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002618 <HAL_I2C_MspInit+0x164>)
 80025a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025a8:	4a1b      	ldr	r2, [pc, #108]	@ (8002618 <HAL_I2C_MspInit+0x164>)
 80025aa:	f043 0304 	orr.w	r3, r3, #4
 80025ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80025b2:	4b19      	ldr	r3, [pc, #100]	@ (8002618 <HAL_I2C_MspInit+0x164>)
 80025b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025b8:	f003 0304 	and.w	r3, r3, #4
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80025c0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80025c4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025c8:	2312      	movs	r3, #18
 80025ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025ce:	2301      	movs	r3, #1
 80025d0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025d4:	2303      	movs	r3, #3
 80025d6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C5;
 80025da:	2304      	movs	r3, #4
 80025dc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025e0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80025e4:	4619      	mov	r1, r3
 80025e6:	480f      	ldr	r0, [pc, #60]	@ (8002624 <HAL_I2C_MspInit+0x170>)
 80025e8:	f000 fbca 	bl	8002d80 <HAL_GPIO_Init>
    __HAL_RCC_I2C5_CLK_ENABLE();
 80025ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002618 <HAL_I2C_MspInit+0x164>)
 80025ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80025f2:	4a09      	ldr	r2, [pc, #36]	@ (8002618 <HAL_I2C_MspInit+0x164>)
 80025f4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80025f8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80025fc:	4b06      	ldr	r3, [pc, #24]	@ (8002618 <HAL_I2C_MspInit+0x164>)
 80025fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002602:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002606:	60bb      	str	r3, [r7, #8]
 8002608:	68bb      	ldr	r3, [r7, #8]
}
 800260a:	bf00      	nop
 800260c:	37e8      	adds	r7, #232	@ 0xe8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	40005400 	.word	0x40005400
 8002618:	58024400 	.word	0x58024400
 800261c:	58020400 	.word	0x58020400
 8002620:	40006400 	.word	0x40006400
 8002624:	58020800 	.word	0x58020800

08002628 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b0bc      	sub	sp, #240	@ 0xf0
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002630:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	605a      	str	r2, [r3, #4]
 800263a:	609a      	str	r2, [r3, #8]
 800263c:	60da      	str	r2, [r3, #12]
 800263e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002640:	f107 0320 	add.w	r3, r7, #32
 8002644:	22b8      	movs	r2, #184	@ 0xb8
 8002646:	2100      	movs	r1, #0
 8002648:	4618      	mov	r0, r3
 800264a:	f007 fceb 	bl	800a024 <memset>
  if(hspi->Instance==SPI1)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a5e      	ldr	r2, [pc, #376]	@ (80027cc <HAL_SPI_MspInit+0x1a4>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d145      	bne.n	80026e4 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002658:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800265c:	f04f 0300 	mov.w	r3, #0
 8002660:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002664:	2300      	movs	r3, #0
 8002666:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002668:	f107 0320 	add.w	r3, r7, #32
 800266c:	4618      	mov	r0, r3
 800266e:	f002 fb75 	bl	8004d5c <HAL_RCCEx_PeriphCLKConfig>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002678:	f7ff fee8 	bl	800244c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800267c:	4b54      	ldr	r3, [pc, #336]	@ (80027d0 <HAL_SPI_MspInit+0x1a8>)
 800267e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002682:	4a53      	ldr	r2, [pc, #332]	@ (80027d0 <HAL_SPI_MspInit+0x1a8>)
 8002684:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002688:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800268c:	4b50      	ldr	r3, [pc, #320]	@ (80027d0 <HAL_SPI_MspInit+0x1a8>)
 800268e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002692:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002696:	61fb      	str	r3, [r7, #28]
 8002698:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800269a:	4b4d      	ldr	r3, [pc, #308]	@ (80027d0 <HAL_SPI_MspInit+0x1a8>)
 800269c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026a0:	4a4b      	ldr	r2, [pc, #300]	@ (80027d0 <HAL_SPI_MspInit+0x1a8>)
 80026a2:	f043 0302 	orr.w	r3, r3, #2
 80026a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80026aa:	4b49      	ldr	r3, [pc, #292]	@ (80027d0 <HAL_SPI_MspInit+0x1a8>)
 80026ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	61bb      	str	r3, [r7, #24]
 80026b6:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PB3(JTDO/TRACESWO)     ------> SPI1_SCK
    PB4(NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80026b8:	2338      	movs	r3, #56	@ 0x38
 80026ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026be:	2302      	movs	r3, #2
 80026c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c4:	2300      	movs	r3, #0
 80026c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ca:	2300      	movs	r3, #0
 80026cc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80026d0:	2305      	movs	r3, #5
 80026d2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026d6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80026da:	4619      	mov	r1, r3
 80026dc:	483d      	ldr	r0, [pc, #244]	@ (80027d4 <HAL_SPI_MspInit+0x1ac>)
 80026de:	f000 fb4f 	bl	8002d80 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }

}
 80026e2:	e06f      	b.n	80027c4 <HAL_SPI_MspInit+0x19c>
  else if(hspi->Instance==SPI6)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a3b      	ldr	r2, [pc, #236]	@ (80027d8 <HAL_SPI_MspInit+0x1b0>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d16a      	bne.n	80027c4 <HAL_SPI_MspInit+0x19c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
 80026ee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80026f2:	f04f 0300 	mov.w	r3, #0
 80026f6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_D3PCLK1;
 80026fa:	2300      	movs	r3, #0
 80026fc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002700:	f107 0320 	add.w	r3, r7, #32
 8002704:	4618      	mov	r0, r3
 8002706:	f002 fb29 	bl	8004d5c <HAL_RCCEx_PeriphCLKConfig>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <HAL_SPI_MspInit+0xec>
      Error_Handler();
 8002710:	f7ff fe9c 	bl	800244c <Error_Handler>
    __HAL_RCC_SPI6_CLK_ENABLE();
 8002714:	4b2e      	ldr	r3, [pc, #184]	@ (80027d0 <HAL_SPI_MspInit+0x1a8>)
 8002716:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800271a:	4a2d      	ldr	r2, [pc, #180]	@ (80027d0 <HAL_SPI_MspInit+0x1a8>)
 800271c:	f043 0320 	orr.w	r3, r3, #32
 8002720:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002724:	4b2a      	ldr	r3, [pc, #168]	@ (80027d0 <HAL_SPI_MspInit+0x1a8>)
 8002726:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800272a:	f003 0320 	and.w	r3, r3, #32
 800272e:	617b      	str	r3, [r7, #20]
 8002730:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002732:	4b27      	ldr	r3, [pc, #156]	@ (80027d0 <HAL_SPI_MspInit+0x1a8>)
 8002734:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002738:	4a25      	ldr	r2, [pc, #148]	@ (80027d0 <HAL_SPI_MspInit+0x1a8>)
 800273a:	f043 0301 	orr.w	r3, r3, #1
 800273e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002742:	4b23      	ldr	r3, [pc, #140]	@ (80027d0 <HAL_SPI_MspInit+0x1a8>)
 8002744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	613b      	str	r3, [r7, #16]
 800274e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002750:	4b1f      	ldr	r3, [pc, #124]	@ (80027d0 <HAL_SPI_MspInit+0x1a8>)
 8002752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002756:	4a1e      	ldr	r2, [pc, #120]	@ (80027d0 <HAL_SPI_MspInit+0x1a8>)
 8002758:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800275c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002760:	4b1b      	ldr	r3, [pc, #108]	@ (80027d0 <HAL_SPI_MspInit+0x1a8>)
 8002762:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002766:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800276a:	60fb      	str	r3, [r7, #12]
 800276c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800276e:	2360      	movs	r3, #96	@ 0x60
 8002770:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002774:	2302      	movs	r3, #2
 8002776:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277a:	2300      	movs	r3, #0
 800277c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002780:	2300      	movs	r3, #0
 8002782:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 8002786:	2308      	movs	r3, #8
 8002788:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800278c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002790:	4619      	mov	r1, r3
 8002792:	4812      	ldr	r0, [pc, #72]	@ (80027dc <HAL_SPI_MspInit+0x1b4>)
 8002794:	f000 faf4 	bl	8002d80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002798:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800279c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a0:	2302      	movs	r3, #2
 80027a2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a6:	2300      	movs	r3, #0
 80027a8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ac:	2300      	movs	r3, #0
 80027ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 80027b2:	2305      	movs	r3, #5
 80027b4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80027b8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80027bc:	4619      	mov	r1, r3
 80027be:	4808      	ldr	r0, [pc, #32]	@ (80027e0 <HAL_SPI_MspInit+0x1b8>)
 80027c0:	f000 fade 	bl	8002d80 <HAL_GPIO_Init>
}
 80027c4:	bf00      	nop
 80027c6:	37f0      	adds	r7, #240	@ 0xf0
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	40013000 	.word	0x40013000
 80027d0:	58024400 	.word	0x58024400
 80027d4:	58020400 	.word	0x58020400
 80027d8:	58001400 	.word	0x58001400
 80027dc:	58020000 	.word	0x58020000
 80027e0:	58021800 	.word	0x58021800

080027e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b0b8      	sub	sp, #224	@ 0xe0
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ec:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	605a      	str	r2, [r3, #4]
 80027f6:	609a      	str	r2, [r3, #8]
 80027f8:	60da      	str	r2, [r3, #12]
 80027fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027fc:	f107 0310 	add.w	r3, r7, #16
 8002800:	22b8      	movs	r2, #184	@ 0xb8
 8002802:	2100      	movs	r1, #0
 8002804:	4618      	mov	r0, r3
 8002806:	f007 fc0d 	bl	800a024 <memset>
  if(huart->Instance==USART3)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a27      	ldr	r2, [pc, #156]	@ (80028ac <HAL_UART_MspInit+0xc8>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d146      	bne.n	80028a2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002814:	f04f 0202 	mov.w	r2, #2
 8002818:	f04f 0300 	mov.w	r3, #0
 800281c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002820:	2300      	movs	r3, #0
 8002822:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002826:	f107 0310 	add.w	r3, r7, #16
 800282a:	4618      	mov	r0, r3
 800282c:	f002 fa96 	bl	8004d5c <HAL_RCCEx_PeriphCLKConfig>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002836:	f7ff fe09 	bl	800244c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800283a:	4b1d      	ldr	r3, [pc, #116]	@ (80028b0 <HAL_UART_MspInit+0xcc>)
 800283c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002840:	4a1b      	ldr	r2, [pc, #108]	@ (80028b0 <HAL_UART_MspInit+0xcc>)
 8002842:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002846:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800284a:	4b19      	ldr	r3, [pc, #100]	@ (80028b0 <HAL_UART_MspInit+0xcc>)
 800284c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002850:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002858:	4b15      	ldr	r3, [pc, #84]	@ (80028b0 <HAL_UART_MspInit+0xcc>)
 800285a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800285e:	4a14      	ldr	r2, [pc, #80]	@ (80028b0 <HAL_UART_MspInit+0xcc>)
 8002860:	f043 0308 	orr.w	r3, r3, #8
 8002864:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002868:	4b11      	ldr	r3, [pc, #68]	@ (80028b0 <HAL_UART_MspInit+0xcc>)
 800286a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800286e:	f003 0308 	and.w	r3, r3, #8
 8002872:	60bb      	str	r3, [r7, #8]
 8002874:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002876:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800287a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287e:	2302      	movs	r3, #2
 8002880:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002884:	2300      	movs	r3, #0
 8002886:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800288a:	2300      	movs	r3, #0
 800288c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002890:	2307      	movs	r3, #7
 8002892:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002896:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800289a:	4619      	mov	r1, r3
 800289c:	4805      	ldr	r0, [pc, #20]	@ (80028b4 <HAL_UART_MspInit+0xd0>)
 800289e:	f000 fa6f 	bl	8002d80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80028a2:	bf00      	nop
 80028a4:	37e0      	adds	r7, #224	@ 0xe0
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	40004800 	.word	0x40004800
 80028b0:	58024400 	.word	0x58024400
 80028b4:	58020c00 	.word	0x58020c00

080028b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028bc:	bf00      	nop
 80028be:	e7fd      	b.n	80028bc <NMI_Handler+0x4>

080028c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028c4:	bf00      	nop
 80028c6:	e7fd      	b.n	80028c4 <HardFault_Handler+0x4>

080028c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028cc:	bf00      	nop
 80028ce:	e7fd      	b.n	80028cc <MemManage_Handler+0x4>

080028d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028d4:	bf00      	nop
 80028d6:	e7fd      	b.n	80028d4 <BusFault_Handler+0x4>

080028d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028dc:	bf00      	nop
 80028de:	e7fd      	b.n	80028dc <UsageFault_Handler+0x4>

080028e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028e4:	bf00      	nop
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028f2:	f000 f91d 	bl	8002b30 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80028f6:	f006 ff0f 	bl	8009718 <xTaskGetSchedulerState>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d001      	beq.n	8002904 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002900:	f007 f952 	bl	8009ba8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002904:	bf00      	nop
 8002906:	bd80      	pop	{r7, pc}

08002908 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800290c:	4b32      	ldr	r3, [pc, #200]	@ (80029d8 <SystemInit+0xd0>)
 800290e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002912:	4a31      	ldr	r2, [pc, #196]	@ (80029d8 <SystemInit+0xd0>)
 8002914:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002918:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800291c:	4b2f      	ldr	r3, [pc, #188]	@ (80029dc <SystemInit+0xd4>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 030f 	and.w	r3, r3, #15
 8002924:	2b06      	cmp	r3, #6
 8002926:	d807      	bhi.n	8002938 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002928:	4b2c      	ldr	r3, [pc, #176]	@ (80029dc <SystemInit+0xd4>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f023 030f 	bic.w	r3, r3, #15
 8002930:	4a2a      	ldr	r2, [pc, #168]	@ (80029dc <SystemInit+0xd4>)
 8002932:	f043 0307 	orr.w	r3, r3, #7
 8002936:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002938:	4b29      	ldr	r3, [pc, #164]	@ (80029e0 <SystemInit+0xd8>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a28      	ldr	r2, [pc, #160]	@ (80029e0 <SystemInit+0xd8>)
 800293e:	f043 0301 	orr.w	r3, r3, #1
 8002942:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002944:	4b26      	ldr	r3, [pc, #152]	@ (80029e0 <SystemInit+0xd8>)
 8002946:	2200      	movs	r2, #0
 8002948:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800294a:	4b25      	ldr	r3, [pc, #148]	@ (80029e0 <SystemInit+0xd8>)
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	4924      	ldr	r1, [pc, #144]	@ (80029e0 <SystemInit+0xd8>)
 8002950:	4b24      	ldr	r3, [pc, #144]	@ (80029e4 <SystemInit+0xdc>)
 8002952:	4013      	ands	r3, r2
 8002954:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002956:	4b21      	ldr	r3, [pc, #132]	@ (80029dc <SystemInit+0xd4>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0308 	and.w	r3, r3, #8
 800295e:	2b00      	cmp	r3, #0
 8002960:	d007      	beq.n	8002972 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002962:	4b1e      	ldr	r3, [pc, #120]	@ (80029dc <SystemInit+0xd4>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f023 030f 	bic.w	r3, r3, #15
 800296a:	4a1c      	ldr	r2, [pc, #112]	@ (80029dc <SystemInit+0xd4>)
 800296c:	f043 0307 	orr.w	r3, r3, #7
 8002970:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002972:	4b1b      	ldr	r3, [pc, #108]	@ (80029e0 <SystemInit+0xd8>)
 8002974:	2200      	movs	r2, #0
 8002976:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002978:	4b19      	ldr	r3, [pc, #100]	@ (80029e0 <SystemInit+0xd8>)
 800297a:	2200      	movs	r2, #0
 800297c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800297e:	4b18      	ldr	r3, [pc, #96]	@ (80029e0 <SystemInit+0xd8>)
 8002980:	2200      	movs	r2, #0
 8002982:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002984:	4b16      	ldr	r3, [pc, #88]	@ (80029e0 <SystemInit+0xd8>)
 8002986:	4a18      	ldr	r2, [pc, #96]	@ (80029e8 <SystemInit+0xe0>)
 8002988:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800298a:	4b15      	ldr	r3, [pc, #84]	@ (80029e0 <SystemInit+0xd8>)
 800298c:	4a17      	ldr	r2, [pc, #92]	@ (80029ec <SystemInit+0xe4>)
 800298e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002990:	4b13      	ldr	r3, [pc, #76]	@ (80029e0 <SystemInit+0xd8>)
 8002992:	4a17      	ldr	r2, [pc, #92]	@ (80029f0 <SystemInit+0xe8>)
 8002994:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002996:	4b12      	ldr	r3, [pc, #72]	@ (80029e0 <SystemInit+0xd8>)
 8002998:	2200      	movs	r2, #0
 800299a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800299c:	4b10      	ldr	r3, [pc, #64]	@ (80029e0 <SystemInit+0xd8>)
 800299e:	4a14      	ldr	r2, [pc, #80]	@ (80029f0 <SystemInit+0xe8>)
 80029a0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80029a2:	4b0f      	ldr	r3, [pc, #60]	@ (80029e0 <SystemInit+0xd8>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80029a8:	4b0d      	ldr	r3, [pc, #52]	@ (80029e0 <SystemInit+0xd8>)
 80029aa:	4a11      	ldr	r2, [pc, #68]	@ (80029f0 <SystemInit+0xe8>)
 80029ac:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80029ae:	4b0c      	ldr	r3, [pc, #48]	@ (80029e0 <SystemInit+0xd8>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80029b4:	4b0a      	ldr	r3, [pc, #40]	@ (80029e0 <SystemInit+0xd8>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a09      	ldr	r2, [pc, #36]	@ (80029e0 <SystemInit+0xd8>)
 80029ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029be:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80029c0:	4b07      	ldr	r3, [pc, #28]	@ (80029e0 <SystemInit+0xd8>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80029c6:	4b0b      	ldr	r3, [pc, #44]	@ (80029f4 <SystemInit+0xec>)
 80029c8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80029cc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80029ce:	bf00      	nop
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr
 80029d8:	e000ed00 	.word	0xe000ed00
 80029dc:	52002000 	.word	0x52002000
 80029e0:	58024400 	.word	0x58024400
 80029e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80029e8:	02020200 	.word	0x02020200
 80029ec:	01ff0000 	.word	0x01ff0000
 80029f0:	01010280 	.word	0x01010280
 80029f4:	52004000 	.word	0x52004000

080029f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80029f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002a30 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80029fc:	f7ff ff84 	bl	8002908 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a00:	480c      	ldr	r0, [pc, #48]	@ (8002a34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a02:	490d      	ldr	r1, [pc, #52]	@ (8002a38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a04:	4a0d      	ldr	r2, [pc, #52]	@ (8002a3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a08:	e002      	b.n	8002a10 <LoopCopyDataInit>

08002a0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a0e:	3304      	adds	r3, #4

08002a10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a14:	d3f9      	bcc.n	8002a0a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a16:	4a0a      	ldr	r2, [pc, #40]	@ (8002a40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a18:	4c0a      	ldr	r4, [pc, #40]	@ (8002a44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a1c:	e001      	b.n	8002a22 <LoopFillZerobss>

08002a1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a20:	3204      	adds	r2, #4

08002a22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a24:	d3fb      	bcc.n	8002a1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a26:	f007 fb05 	bl	800a034 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a2a:	f7ff f823 	bl	8001a74 <main>
  bx  lr
 8002a2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a30:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002a34:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002a38:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8002a3c:	0800a11c 	.word	0x0800a11c
  ldr r2, =_sbss
 8002a40:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 8002a44:	2400422c 	.word	0x2400422c

08002a48 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a48:	e7fe      	b.n	8002a48 <ADC3_IRQHandler>
	...

08002a4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a52:	2003      	movs	r0, #3
 8002a54:	f000 f962 	bl	8002d1c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002a58:	f001 ffaa 	bl	80049b0 <HAL_RCC_GetSysClockFreq>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	4b15      	ldr	r3, [pc, #84]	@ (8002ab4 <HAL_Init+0x68>)
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	0a1b      	lsrs	r3, r3, #8
 8002a64:	f003 030f 	and.w	r3, r3, #15
 8002a68:	4913      	ldr	r1, [pc, #76]	@ (8002ab8 <HAL_Init+0x6c>)
 8002a6a:	5ccb      	ldrb	r3, [r1, r3]
 8002a6c:	f003 031f 	and.w	r3, r3, #31
 8002a70:	fa22 f303 	lsr.w	r3, r2, r3
 8002a74:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a76:	4b0f      	ldr	r3, [pc, #60]	@ (8002ab4 <HAL_Init+0x68>)
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	f003 030f 	and.w	r3, r3, #15
 8002a7e:	4a0e      	ldr	r2, [pc, #56]	@ (8002ab8 <HAL_Init+0x6c>)
 8002a80:	5cd3      	ldrb	r3, [r2, r3]
 8002a82:	f003 031f 	and.w	r3, r3, #31
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	fa22 f303 	lsr.w	r3, r2, r3
 8002a8c:	4a0b      	ldr	r2, [pc, #44]	@ (8002abc <HAL_Init+0x70>)
 8002a8e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a90:	4a0b      	ldr	r2, [pc, #44]	@ (8002ac0 <HAL_Init+0x74>)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a96:	200f      	movs	r0, #15
 8002a98:	f000 f814 	bl	8002ac4 <HAL_InitTick>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e002      	b.n	8002aac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002aa6:	f7ff fcd7 	bl	8002458 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3708      	adds	r7, #8
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	58024400 	.word	0x58024400
 8002ab8:	0800a0d4 	.word	0x0800a0d4
 8002abc:	24000004 	.word	0x24000004
 8002ac0:	24000000 	.word	0x24000000

08002ac4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002acc:	4b15      	ldr	r3, [pc, #84]	@ (8002b24 <HAL_InitTick+0x60>)
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e021      	b.n	8002b1c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002ad8:	4b13      	ldr	r3, [pc, #76]	@ (8002b28 <HAL_InitTick+0x64>)
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	4b11      	ldr	r3, [pc, #68]	@ (8002b24 <HAL_InitTick+0x60>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ae6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aee:	4618      	mov	r0, r3
 8002af0:	f000 f939 	bl	8002d66 <HAL_SYSTICK_Config>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e00e      	b.n	8002b1c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2b0f      	cmp	r3, #15
 8002b02:	d80a      	bhi.n	8002b1a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b04:	2200      	movs	r2, #0
 8002b06:	6879      	ldr	r1, [r7, #4]
 8002b08:	f04f 30ff 	mov.w	r0, #4294967295
 8002b0c:	f000 f911 	bl	8002d32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b10:	4a06      	ldr	r2, [pc, #24]	@ (8002b2c <HAL_InitTick+0x68>)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
 8002b18:	e000      	b.n	8002b1c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3708      	adds	r7, #8
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	2400000c 	.word	0x2400000c
 8002b28:	24000000 	.word	0x24000000
 8002b2c:	24000008 	.word	0x24000008

08002b30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b34:	4b06      	ldr	r3, [pc, #24]	@ (8002b50 <HAL_IncTick+0x20>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	461a      	mov	r2, r3
 8002b3a:	4b06      	ldr	r3, [pc, #24]	@ (8002b54 <HAL_IncTick+0x24>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4413      	add	r3, r2
 8002b40:	4a04      	ldr	r2, [pc, #16]	@ (8002b54 <HAL_IncTick+0x24>)
 8002b42:	6013      	str	r3, [r2, #0]
}
 8002b44:	bf00      	nop
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	2400000c 	.word	0x2400000c
 8002b54:	240004d4 	.word	0x240004d4

08002b58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b5c:	4b03      	ldr	r3, [pc, #12]	@ (8002b6c <HAL_GetTick+0x14>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	240004d4 	.word	0x240004d4

08002b70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b78:	f7ff ffee 	bl	8002b58 <HAL_GetTick>
 8002b7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b88:	d005      	beq.n	8002b96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8002bb4 <HAL_Delay+0x44>)
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	4413      	add	r3, r2
 8002b94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b96:	bf00      	nop
 8002b98:	f7ff ffde 	bl	8002b58 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d8f7      	bhi.n	8002b98 <HAL_Delay+0x28>
  {
  }
}
 8002ba8:	bf00      	nop
 8002baa:	bf00      	nop
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	2400000c 	.word	0x2400000c

08002bb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f003 0307 	and.w	r3, r3, #7
 8002bc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8002bf8 <__NVIC_SetPriorityGrouping+0x40>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bce:	68ba      	ldr	r2, [r7, #8]
 8002bd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002be0:	4b06      	ldr	r3, [pc, #24]	@ (8002bfc <__NVIC_SetPriorityGrouping+0x44>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002be6:	4a04      	ldr	r2, [pc, #16]	@ (8002bf8 <__NVIC_SetPriorityGrouping+0x40>)
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	60d3      	str	r3, [r2, #12]
}
 8002bec:	bf00      	nop
 8002bee:	3714      	adds	r7, #20
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr
 8002bf8:	e000ed00 	.word	0xe000ed00
 8002bfc:	05fa0000 	.word	0x05fa0000

08002c00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c04:	4b04      	ldr	r3, [pc, #16]	@ (8002c18 <__NVIC_GetPriorityGrouping+0x18>)
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	0a1b      	lsrs	r3, r3, #8
 8002c0a:	f003 0307 	and.w	r3, r3, #7
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr
 8002c18:	e000ed00 	.word	0xe000ed00

08002c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	4603      	mov	r3, r0
 8002c24:	6039      	str	r1, [r7, #0]
 8002c26:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002c28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	db0a      	blt.n	8002c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	490c      	ldr	r1, [pc, #48]	@ (8002c68 <__NVIC_SetPriority+0x4c>)
 8002c36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c3a:	0112      	lsls	r2, r2, #4
 8002c3c:	b2d2      	uxtb	r2, r2
 8002c3e:	440b      	add	r3, r1
 8002c40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c44:	e00a      	b.n	8002c5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	b2da      	uxtb	r2, r3
 8002c4a:	4908      	ldr	r1, [pc, #32]	@ (8002c6c <__NVIC_SetPriority+0x50>)
 8002c4c:	88fb      	ldrh	r3, [r7, #6]
 8002c4e:	f003 030f 	and.w	r3, r3, #15
 8002c52:	3b04      	subs	r3, #4
 8002c54:	0112      	lsls	r2, r2, #4
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	440b      	add	r3, r1
 8002c5a:	761a      	strb	r2, [r3, #24]
}
 8002c5c:	bf00      	nop
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	e000e100 	.word	0xe000e100
 8002c6c:	e000ed00 	.word	0xe000ed00

08002c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b089      	sub	sp, #36	@ 0x24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f003 0307 	and.w	r3, r3, #7
 8002c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	f1c3 0307 	rsb	r3, r3, #7
 8002c8a:	2b04      	cmp	r3, #4
 8002c8c:	bf28      	it	cs
 8002c8e:	2304      	movcs	r3, #4
 8002c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	3304      	adds	r3, #4
 8002c96:	2b06      	cmp	r3, #6
 8002c98:	d902      	bls.n	8002ca0 <NVIC_EncodePriority+0x30>
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	3b03      	subs	r3, #3
 8002c9e:	e000      	b.n	8002ca2 <NVIC_EncodePriority+0x32>
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cae:	43da      	mvns	r2, r3
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	401a      	ands	r2, r3
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc2:	43d9      	mvns	r1, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cc8:	4313      	orrs	r3, r2
         );
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3724      	adds	r7, #36	@ 0x24
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
	...

08002cd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ce8:	d301      	bcc.n	8002cee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cea:	2301      	movs	r3, #1
 8002cec:	e00f      	b.n	8002d0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cee:	4a0a      	ldr	r2, [pc, #40]	@ (8002d18 <SysTick_Config+0x40>)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cf6:	210f      	movs	r1, #15
 8002cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cfc:	f7ff ff8e 	bl	8002c1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d00:	4b05      	ldr	r3, [pc, #20]	@ (8002d18 <SysTick_Config+0x40>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d06:	4b04      	ldr	r3, [pc, #16]	@ (8002d18 <SysTick_Config+0x40>)
 8002d08:	2207      	movs	r2, #7
 8002d0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	e000e010 	.word	0xe000e010

08002d1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f7ff ff47 	bl	8002bb8 <__NVIC_SetPriorityGrouping>
}
 8002d2a:	bf00      	nop
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b086      	sub	sp, #24
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	4603      	mov	r3, r0
 8002d3a:	60b9      	str	r1, [r7, #8]
 8002d3c:	607a      	str	r2, [r7, #4]
 8002d3e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d40:	f7ff ff5e 	bl	8002c00 <__NVIC_GetPriorityGrouping>
 8002d44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	68b9      	ldr	r1, [r7, #8]
 8002d4a:	6978      	ldr	r0, [r7, #20]
 8002d4c:	f7ff ff90 	bl	8002c70 <NVIC_EncodePriority>
 8002d50:	4602      	mov	r2, r0
 8002d52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d56:	4611      	mov	r1, r2
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7ff ff5f 	bl	8002c1c <__NVIC_SetPriority>
}
 8002d5e:	bf00      	nop
 8002d60:	3718      	adds	r7, #24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b082      	sub	sp, #8
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f7ff ffb2 	bl	8002cd8 <SysTick_Config>
 8002d74:	4603      	mov	r3, r0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
	...

08002d80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b089      	sub	sp, #36	@ 0x24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002d8e:	4b86      	ldr	r3, [pc, #536]	@ (8002fa8 <HAL_GPIO_Init+0x228>)
 8002d90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002d92:	e18c      	b.n	80030ae <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	2101      	movs	r1, #1
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002da0:	4013      	ands	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f000 817e 	beq.w	80030a8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f003 0303 	and.w	r3, r3, #3
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d005      	beq.n	8002dc4 <HAL_GPIO_Init+0x44>
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f003 0303 	and.w	r3, r3, #3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d130      	bne.n	8002e26 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	2203      	movs	r2, #3
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	43db      	mvns	r3, r3
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	68da      	ldr	r2, [r3, #12]
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002e02:	43db      	mvns	r3, r3
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	4013      	ands	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	091b      	lsrs	r3, r3, #4
 8002e10:	f003 0201 	and.w	r2, r3, #1
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f003 0303 	and.w	r3, r3, #3
 8002e2e:	2b03      	cmp	r3, #3
 8002e30:	d017      	beq.n	8002e62 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	2203      	movs	r2, #3
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	43db      	mvns	r3, r3
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	4013      	ands	r3, r2
 8002e48:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	689a      	ldr	r2, [r3, #8]
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	fa02 f303 	lsl.w	r3, r2, r3
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f003 0303 	and.w	r3, r3, #3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d123      	bne.n	8002eb6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	08da      	lsrs	r2, r3, #3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	3208      	adds	r2, #8
 8002e76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	f003 0307 	and.w	r3, r3, #7
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	220f      	movs	r2, #15
 8002e86:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8a:	43db      	mvns	r3, r3
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	691a      	ldr	r2, [r3, #16]
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	f003 0307 	and.w	r3, r3, #7
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	08da      	lsrs	r2, r3, #3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	3208      	adds	r2, #8
 8002eb0:	69b9      	ldr	r1, [r7, #24]
 8002eb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	2203      	movs	r2, #3
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f003 0203 	and.w	r2, r3, #3
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	fa02 f303 	lsl.w	r3, r2, r3
 8002ede:	69ba      	ldr	r2, [r7, #24]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	69ba      	ldr	r2, [r7, #24]
 8002ee8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f000 80d8 	beq.w	80030a8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ef8:	4b2c      	ldr	r3, [pc, #176]	@ (8002fac <HAL_GPIO_Init+0x22c>)
 8002efa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002efe:	4a2b      	ldr	r2, [pc, #172]	@ (8002fac <HAL_GPIO_Init+0x22c>)
 8002f00:	f043 0302 	orr.w	r3, r3, #2
 8002f04:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002f08:	4b28      	ldr	r3, [pc, #160]	@ (8002fac <HAL_GPIO_Init+0x22c>)
 8002f0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	60fb      	str	r3, [r7, #12]
 8002f14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f16:	4a26      	ldr	r2, [pc, #152]	@ (8002fb0 <HAL_GPIO_Init+0x230>)
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	089b      	lsrs	r3, r3, #2
 8002f1c:	3302      	adds	r3, #2
 8002f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	f003 0303 	and.w	r3, r3, #3
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	220f      	movs	r2, #15
 8002f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f32:	43db      	mvns	r3, r3
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	4013      	ands	r3, r2
 8002f38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a1d      	ldr	r2, [pc, #116]	@ (8002fb4 <HAL_GPIO_Init+0x234>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d04a      	beq.n	8002fd8 <HAL_GPIO_Init+0x258>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a1c      	ldr	r2, [pc, #112]	@ (8002fb8 <HAL_GPIO_Init+0x238>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d02b      	beq.n	8002fa2 <HAL_GPIO_Init+0x222>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a1b      	ldr	r2, [pc, #108]	@ (8002fbc <HAL_GPIO_Init+0x23c>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d025      	beq.n	8002f9e <HAL_GPIO_Init+0x21e>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a1a      	ldr	r2, [pc, #104]	@ (8002fc0 <HAL_GPIO_Init+0x240>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d01f      	beq.n	8002f9a <HAL_GPIO_Init+0x21a>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a19      	ldr	r2, [pc, #100]	@ (8002fc4 <HAL_GPIO_Init+0x244>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d019      	beq.n	8002f96 <HAL_GPIO_Init+0x216>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a18      	ldr	r2, [pc, #96]	@ (8002fc8 <HAL_GPIO_Init+0x248>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d013      	beq.n	8002f92 <HAL_GPIO_Init+0x212>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a17      	ldr	r2, [pc, #92]	@ (8002fcc <HAL_GPIO_Init+0x24c>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d00d      	beq.n	8002f8e <HAL_GPIO_Init+0x20e>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a16      	ldr	r2, [pc, #88]	@ (8002fd0 <HAL_GPIO_Init+0x250>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d007      	beq.n	8002f8a <HAL_GPIO_Init+0x20a>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a15      	ldr	r2, [pc, #84]	@ (8002fd4 <HAL_GPIO_Init+0x254>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d101      	bne.n	8002f86 <HAL_GPIO_Init+0x206>
 8002f82:	2309      	movs	r3, #9
 8002f84:	e029      	b.n	8002fda <HAL_GPIO_Init+0x25a>
 8002f86:	230a      	movs	r3, #10
 8002f88:	e027      	b.n	8002fda <HAL_GPIO_Init+0x25a>
 8002f8a:	2307      	movs	r3, #7
 8002f8c:	e025      	b.n	8002fda <HAL_GPIO_Init+0x25a>
 8002f8e:	2306      	movs	r3, #6
 8002f90:	e023      	b.n	8002fda <HAL_GPIO_Init+0x25a>
 8002f92:	2305      	movs	r3, #5
 8002f94:	e021      	b.n	8002fda <HAL_GPIO_Init+0x25a>
 8002f96:	2304      	movs	r3, #4
 8002f98:	e01f      	b.n	8002fda <HAL_GPIO_Init+0x25a>
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e01d      	b.n	8002fda <HAL_GPIO_Init+0x25a>
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	e01b      	b.n	8002fda <HAL_GPIO_Init+0x25a>
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e019      	b.n	8002fda <HAL_GPIO_Init+0x25a>
 8002fa6:	bf00      	nop
 8002fa8:	58000080 	.word	0x58000080
 8002fac:	58024400 	.word	0x58024400
 8002fb0:	58000400 	.word	0x58000400
 8002fb4:	58020000 	.word	0x58020000
 8002fb8:	58020400 	.word	0x58020400
 8002fbc:	58020800 	.word	0x58020800
 8002fc0:	58020c00 	.word	0x58020c00
 8002fc4:	58021000 	.word	0x58021000
 8002fc8:	58021400 	.word	0x58021400
 8002fcc:	58021800 	.word	0x58021800
 8002fd0:	58021c00 	.word	0x58021c00
 8002fd4:	58022400 	.word	0x58022400
 8002fd8:	2300      	movs	r3, #0
 8002fda:	69fa      	ldr	r2, [r7, #28]
 8002fdc:	f002 0203 	and.w	r2, r2, #3
 8002fe0:	0092      	lsls	r2, r2, #2
 8002fe2:	4093      	lsls	r3, r2
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fea:	4938      	ldr	r1, [pc, #224]	@ (80030cc <HAL_GPIO_Init+0x34c>)
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	089b      	lsrs	r3, r3, #2
 8002ff0:	3302      	adds	r3, #2
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ff8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	43db      	mvns	r3, r3
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	4013      	ands	r3, r2
 8003008:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d003      	beq.n	800301e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	4313      	orrs	r3, r2
 800301c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800301e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003026:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	43db      	mvns	r3, r3
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	4013      	ands	r3, r2
 8003036:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d003      	beq.n	800304c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	4313      	orrs	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800304c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	43db      	mvns	r3, r3
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	4013      	ands	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d003      	beq.n	8003078 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	4313      	orrs	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	43db      	mvns	r3, r3
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	4013      	ands	r3, r2
 800308c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800309a:	69ba      	ldr	r2, [r7, #24]
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	4313      	orrs	r3, r2
 80030a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	3301      	adds	r3, #1
 80030ac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	fa22 f303 	lsr.w	r3, r2, r3
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	f47f ae6b 	bne.w	8002d94 <HAL_GPIO_Init+0x14>
  }
}
 80030be:	bf00      	nop
 80030c0:	bf00      	nop
 80030c2:	3724      	adds	r7, #36	@ 0x24
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr
 80030cc:	58000400 	.word	0x58000400

080030d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	460b      	mov	r3, r1
 80030da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	691a      	ldr	r2, [r3, #16]
 80030e0:	887b      	ldrh	r3, [r7, #2]
 80030e2:	4013      	ands	r3, r2
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d002      	beq.n	80030ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80030e8:	2301      	movs	r3, #1
 80030ea:	73fb      	strb	r3, [r7, #15]
 80030ec:	e001      	b.n	80030f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80030ee:	2300      	movs	r3, #0
 80030f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80030f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3714      	adds	r7, #20
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	460b      	mov	r3, r1
 800310a:	807b      	strh	r3, [r7, #2]
 800310c:	4613      	mov	r3, r2
 800310e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003110:	787b      	ldrb	r3, [r7, #1]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d003      	beq.n	800311e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003116:	887a      	ldrh	r2, [r7, #2]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800311c:	e003      	b.n	8003126 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800311e:	887b      	ldrh	r3, [r7, #2]
 8003120:	041a      	lsls	r2, r3, #16
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	619a      	str	r2, [r3, #24]
}
 8003126:	bf00      	nop
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
	...

08003134 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e08b      	b.n	800325e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d106      	bne.n	8003160 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f7ff f9aa 	bl	80024b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2224      	movs	r2, #36	@ 0x24
 8003164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f022 0201 	bic.w	r2, r2, #1
 8003176:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685a      	ldr	r2, [r3, #4]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003184:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003194:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d107      	bne.n	80031ae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	689a      	ldr	r2, [r3, #8]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80031aa:	609a      	str	r2, [r3, #8]
 80031ac:	e006      	b.n	80031bc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	689a      	ldr	r2, [r3, #8]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80031ba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d108      	bne.n	80031d6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031d2:	605a      	str	r2, [r3, #4]
 80031d4:	e007      	b.n	80031e6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	685a      	ldr	r2, [r3, #4]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	6859      	ldr	r1, [r3, #4]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	4b1d      	ldr	r3, [pc, #116]	@ (8003268 <HAL_I2C_Init+0x134>)
 80031f2:	430b      	orrs	r3, r1
 80031f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68da      	ldr	r2, [r3, #12]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003204:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	691a      	ldr	r2, [r3, #16]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	430a      	orrs	r2, r1
 800321e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	69d9      	ldr	r1, [r3, #28]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a1a      	ldr	r2, [r3, #32]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	430a      	orrs	r2, r1
 800322e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f042 0201 	orr.w	r2, r2, #1
 800323e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2220      	movs	r2, #32
 800324a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	02008000 	.word	0x02008000

0800326c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b088      	sub	sp, #32
 8003270:	af02      	add	r7, sp, #8
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	607a      	str	r2, [r7, #4]
 8003276:	461a      	mov	r2, r3
 8003278:	460b      	mov	r3, r1
 800327a:	817b      	strh	r3, [r7, #10]
 800327c:	4613      	mov	r3, r2
 800327e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003286:	b2db      	uxtb	r3, r3
 8003288:	2b20      	cmp	r3, #32
 800328a:	f040 80fd 	bne.w	8003488 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003294:	2b01      	cmp	r3, #1
 8003296:	d101      	bne.n	800329c <HAL_I2C_Master_Transmit+0x30>
 8003298:	2302      	movs	r3, #2
 800329a:	e0f6      	b.n	800348a <HAL_I2C_Master_Transmit+0x21e>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80032a4:	f7ff fc58 	bl	8002b58 <HAL_GetTick>
 80032a8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	9300      	str	r3, [sp, #0]
 80032ae:	2319      	movs	r3, #25
 80032b0:	2201      	movs	r2, #1
 80032b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80032b6:	68f8      	ldr	r0, [r7, #12]
 80032b8:	f000 fa0a 	bl	80036d0 <I2C_WaitOnFlagUntilTimeout>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e0e1      	b.n	800348a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2221      	movs	r2, #33	@ 0x21
 80032ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2210      	movs	r2, #16
 80032d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	893a      	ldrh	r2, [r7, #8]
 80032e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	2bff      	cmp	r3, #255	@ 0xff
 80032f6:	d906      	bls.n	8003306 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	22ff      	movs	r2, #255	@ 0xff
 80032fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80032fe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003302:	617b      	str	r3, [r7, #20]
 8003304:	e007      	b.n	8003316 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800330a:	b29a      	uxth	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003310:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003314:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800331a:	2b00      	cmp	r3, #0
 800331c:	d024      	beq.n	8003368 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003322:	781a      	ldrb	r2, [r3, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800332e:	1c5a      	adds	r2, r3, #1
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003338:	b29b      	uxth	r3, r3
 800333a:	3b01      	subs	r3, #1
 800333c:	b29a      	uxth	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003346:	3b01      	subs	r3, #1
 8003348:	b29a      	uxth	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003352:	b2db      	uxtb	r3, r3
 8003354:	3301      	adds	r3, #1
 8003356:	b2da      	uxtb	r2, r3
 8003358:	8979      	ldrh	r1, [r7, #10]
 800335a:	4b4e      	ldr	r3, [pc, #312]	@ (8003494 <HAL_I2C_Master_Transmit+0x228>)
 800335c:	9300      	str	r3, [sp, #0]
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	68f8      	ldr	r0, [r7, #12]
 8003362:	f000 fc05 	bl	8003b70 <I2C_TransferConfig>
 8003366:	e066      	b.n	8003436 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800336c:	b2da      	uxtb	r2, r3
 800336e:	8979      	ldrh	r1, [r7, #10]
 8003370:	4b48      	ldr	r3, [pc, #288]	@ (8003494 <HAL_I2C_Master_Transmit+0x228>)
 8003372:	9300      	str	r3, [sp, #0]
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	f000 fbfa 	bl	8003b70 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800337c:	e05b      	b.n	8003436 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	6a39      	ldr	r1, [r7, #32]
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f000 f9fd 	bl	8003782 <I2C_WaitOnTXISFlagUntilTimeout>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e07b      	b.n	800348a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003396:	781a      	ldrb	r2, [r3, #0]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a2:	1c5a      	adds	r2, r3, #1
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	3b01      	subs	r3, #1
 80033b0:	b29a      	uxth	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033ba:	3b01      	subs	r3, #1
 80033bc:	b29a      	uxth	r2, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d034      	beq.n	8003436 <HAL_I2C_Master_Transmit+0x1ca>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d130      	bne.n	8003436 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	9300      	str	r3, [sp, #0]
 80033d8:	6a3b      	ldr	r3, [r7, #32]
 80033da:	2200      	movs	r2, #0
 80033dc:	2180      	movs	r1, #128	@ 0x80
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f000 f976 	bl	80036d0 <I2C_WaitOnFlagUntilTimeout>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e04d      	b.n	800348a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	2bff      	cmp	r3, #255	@ 0xff
 80033f6:	d90e      	bls.n	8003416 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	22ff      	movs	r2, #255	@ 0xff
 80033fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003402:	b2da      	uxtb	r2, r3
 8003404:	8979      	ldrh	r1, [r7, #10]
 8003406:	2300      	movs	r3, #0
 8003408:	9300      	str	r3, [sp, #0]
 800340a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	f000 fbae 	bl	8003b70 <I2C_TransferConfig>
 8003414:	e00f      	b.n	8003436 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800341a:	b29a      	uxth	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003424:	b2da      	uxtb	r2, r3
 8003426:	8979      	ldrh	r1, [r7, #10]
 8003428:	2300      	movs	r3, #0
 800342a:	9300      	str	r3, [sp, #0]
 800342c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003430:	68f8      	ldr	r0, [r7, #12]
 8003432:	f000 fb9d 	bl	8003b70 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800343a:	b29b      	uxth	r3, r3
 800343c:	2b00      	cmp	r3, #0
 800343e:	d19e      	bne.n	800337e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	6a39      	ldr	r1, [r7, #32]
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f000 f9e3 	bl	8003810 <I2C_WaitOnSTOPFlagUntilTimeout>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e01a      	b.n	800348a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2220      	movs	r2, #32
 800345a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	6859      	ldr	r1, [r3, #4]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	4b0c      	ldr	r3, [pc, #48]	@ (8003498 <HAL_I2C_Master_Transmit+0x22c>)
 8003468:	400b      	ands	r3, r1
 800346a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2220      	movs	r2, #32
 8003470:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003484:	2300      	movs	r3, #0
 8003486:	e000      	b.n	800348a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003488:	2302      	movs	r3, #2
  }
}
 800348a:	4618      	mov	r0, r3
 800348c:	3718      	adds	r7, #24
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	80002000 	.word	0x80002000
 8003498:	fe00e800 	.word	0xfe00e800

0800349c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b088      	sub	sp, #32
 80034a0:	af02      	add	r7, sp, #8
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	607a      	str	r2, [r7, #4]
 80034a6:	461a      	mov	r2, r3
 80034a8:	460b      	mov	r3, r1
 80034aa:	817b      	strh	r3, [r7, #10]
 80034ac:	4613      	mov	r3, r2
 80034ae:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	2b20      	cmp	r3, #32
 80034ba:	f040 80db 	bne.w	8003674 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d101      	bne.n	80034cc <HAL_I2C_Master_Receive+0x30>
 80034c8:	2302      	movs	r3, #2
 80034ca:	e0d4      	b.n	8003676 <HAL_I2C_Master_Receive+0x1da>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80034d4:	f7ff fb40 	bl	8002b58 <HAL_GetTick>
 80034d8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	2319      	movs	r3, #25
 80034e0:	2201      	movs	r2, #1
 80034e2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f000 f8f2 	bl	80036d0 <I2C_WaitOnFlagUntilTimeout>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e0bf      	b.n	8003676 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2222      	movs	r2, #34	@ 0x22
 80034fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2210      	movs	r2, #16
 8003502:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	893a      	ldrh	r2, [r7, #8]
 8003516:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003522:	b29b      	uxth	r3, r3
 8003524:	2bff      	cmp	r3, #255	@ 0xff
 8003526:	d90e      	bls.n	8003546 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	22ff      	movs	r2, #255	@ 0xff
 800352c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003532:	b2da      	uxtb	r2, r3
 8003534:	8979      	ldrh	r1, [r7, #10]
 8003536:	4b52      	ldr	r3, [pc, #328]	@ (8003680 <HAL_I2C_Master_Receive+0x1e4>)
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800353e:	68f8      	ldr	r0, [r7, #12]
 8003540:	f000 fb16 	bl	8003b70 <I2C_TransferConfig>
 8003544:	e06d      	b.n	8003622 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800354a:	b29a      	uxth	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003554:	b2da      	uxtb	r2, r3
 8003556:	8979      	ldrh	r1, [r7, #10]
 8003558:	4b49      	ldr	r3, [pc, #292]	@ (8003680 <HAL_I2C_Master_Receive+0x1e4>)
 800355a:	9300      	str	r3, [sp, #0]
 800355c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f000 fb05 	bl	8003b70 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003566:	e05c      	b.n	8003622 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	6a39      	ldr	r1, [r7, #32]
 800356c:	68f8      	ldr	r0, [r7, #12]
 800356e:	f000 f993 	bl	8003898 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d001      	beq.n	800357c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e07c      	b.n	8003676 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003586:	b2d2      	uxtb	r2, r2
 8003588:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358e:	1c5a      	adds	r2, r3, #1
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003598:	3b01      	subs	r3, #1
 800359a:	b29a      	uxth	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	3b01      	subs	r3, #1
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d034      	beq.n	8003622 <HAL_I2C_Master_Receive+0x186>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d130      	bne.n	8003622 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	9300      	str	r3, [sp, #0]
 80035c4:	6a3b      	ldr	r3, [r7, #32]
 80035c6:	2200      	movs	r2, #0
 80035c8:	2180      	movs	r1, #128	@ 0x80
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f000 f880 	bl	80036d0 <I2C_WaitOnFlagUntilTimeout>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e04d      	b.n	8003676 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035de:	b29b      	uxth	r3, r3
 80035e0:	2bff      	cmp	r3, #255	@ 0xff
 80035e2:	d90e      	bls.n	8003602 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	22ff      	movs	r2, #255	@ 0xff
 80035e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ee:	b2da      	uxtb	r2, r3
 80035f0:	8979      	ldrh	r1, [r7, #10]
 80035f2:	2300      	movs	r3, #0
 80035f4:	9300      	str	r3, [sp, #0]
 80035f6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f000 fab8 	bl	8003b70 <I2C_TransferConfig>
 8003600:	e00f      	b.n	8003622 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003606:	b29a      	uxth	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003610:	b2da      	uxtb	r2, r3
 8003612:	8979      	ldrh	r1, [r7, #10]
 8003614:	2300      	movs	r3, #0
 8003616:	9300      	str	r3, [sp, #0]
 8003618:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800361c:	68f8      	ldr	r0, [r7, #12]
 800361e:	f000 faa7 	bl	8003b70 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003626:	b29b      	uxth	r3, r3
 8003628:	2b00      	cmp	r3, #0
 800362a:	d19d      	bne.n	8003568 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800362c:	697a      	ldr	r2, [r7, #20]
 800362e:	6a39      	ldr	r1, [r7, #32]
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f000 f8ed 	bl	8003810 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d001      	beq.n	8003640 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e01a      	b.n	8003676 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2220      	movs	r2, #32
 8003646:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	6859      	ldr	r1, [r3, #4]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	4b0c      	ldr	r3, [pc, #48]	@ (8003684 <HAL_I2C_Master_Receive+0x1e8>)
 8003654:	400b      	ands	r3, r1
 8003656:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2220      	movs	r2, #32
 800365c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003670:	2300      	movs	r3, #0
 8003672:	e000      	b.n	8003676 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003674:	2302      	movs	r3, #2
  }
}
 8003676:	4618      	mov	r0, r3
 8003678:	3718      	adds	r7, #24
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	80002400 	.word	0x80002400
 8003684:	fe00e800 	.word	0xfe00e800

08003688 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b02      	cmp	r3, #2
 800369c:	d103      	bne.n	80036a6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2200      	movs	r2, #0
 80036a4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	f003 0301 	and.w	r3, r3, #1
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d007      	beq.n	80036c4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	699a      	ldr	r2, [r3, #24]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f042 0201 	orr.w	r2, r2, #1
 80036c2:	619a      	str	r2, [r3, #24]
  }
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	603b      	str	r3, [r7, #0]
 80036dc:	4613      	mov	r3, r2
 80036de:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036e0:	e03b      	b.n	800375a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	6839      	ldr	r1, [r7, #0]
 80036e6:	68f8      	ldr	r0, [r7, #12]
 80036e8:	f000 f962 	bl	80039b0 <I2C_IsErrorOccurred>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e041      	b.n	800377a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036fc:	d02d      	beq.n	800375a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036fe:	f7ff fa2b 	bl	8002b58 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	683a      	ldr	r2, [r7, #0]
 800370a:	429a      	cmp	r2, r3
 800370c:	d302      	bcc.n	8003714 <I2C_WaitOnFlagUntilTimeout+0x44>
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d122      	bne.n	800375a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	699a      	ldr	r2, [r3, #24]
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	4013      	ands	r3, r2
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	429a      	cmp	r2, r3
 8003722:	bf0c      	ite	eq
 8003724:	2301      	moveq	r3, #1
 8003726:	2300      	movne	r3, #0
 8003728:	b2db      	uxtb	r3, r3
 800372a:	461a      	mov	r2, r3
 800372c:	79fb      	ldrb	r3, [r7, #7]
 800372e:	429a      	cmp	r2, r3
 8003730:	d113      	bne.n	800375a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003736:	f043 0220 	orr.w	r2, r3, #32
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2220      	movs	r2, #32
 8003742:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e00f      	b.n	800377a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	699a      	ldr	r2, [r3, #24]
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	4013      	ands	r3, r2
 8003764:	68ba      	ldr	r2, [r7, #8]
 8003766:	429a      	cmp	r2, r3
 8003768:	bf0c      	ite	eq
 800376a:	2301      	moveq	r3, #1
 800376c:	2300      	movne	r3, #0
 800376e:	b2db      	uxtb	r3, r3
 8003770:	461a      	mov	r2, r3
 8003772:	79fb      	ldrb	r3, [r7, #7]
 8003774:	429a      	cmp	r2, r3
 8003776:	d0b4      	beq.n	80036e2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b084      	sub	sp, #16
 8003786:	af00      	add	r7, sp, #0
 8003788:	60f8      	str	r0, [r7, #12]
 800378a:	60b9      	str	r1, [r7, #8]
 800378c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800378e:	e033      	b.n	80037f8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	68b9      	ldr	r1, [r7, #8]
 8003794:	68f8      	ldr	r0, [r7, #12]
 8003796:	f000 f90b 	bl	80039b0 <I2C_IsErrorOccurred>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e031      	b.n	8003808 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037aa:	d025      	beq.n	80037f8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ac:	f7ff f9d4 	bl	8002b58 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	68ba      	ldr	r2, [r7, #8]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d302      	bcc.n	80037c2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d11a      	bne.n	80037f8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d013      	beq.n	80037f8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037d4:	f043 0220 	orr.w	r2, r3, #32
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2220      	movs	r2, #32
 80037e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e007      	b.n	8003808 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b02      	cmp	r3, #2
 8003804:	d1c4      	bne.n	8003790 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	3710      	adds	r7, #16
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800381c:	e02f      	b.n	800387e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	68b9      	ldr	r1, [r7, #8]
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f000 f8c4 	bl	80039b0 <I2C_IsErrorOccurred>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e02d      	b.n	800388e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003832:	f7ff f991 	bl	8002b58 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	68ba      	ldr	r2, [r7, #8]
 800383e:	429a      	cmp	r2, r3
 8003840:	d302      	bcc.n	8003848 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d11a      	bne.n	800387e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	f003 0320 	and.w	r3, r3, #32
 8003852:	2b20      	cmp	r3, #32
 8003854:	d013      	beq.n	800387e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800385a:	f043 0220 	orr.w	r2, r3, #32
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2220      	movs	r2, #32
 8003866:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e007      	b.n	800388e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	f003 0320 	and.w	r3, r3, #32
 8003888:	2b20      	cmp	r3, #32
 800388a:	d1c8      	bne.n	800381e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
	...

08003898 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b086      	sub	sp, #24
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038a4:	2300      	movs	r3, #0
 80038a6:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80038a8:	e071      	b.n	800398e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	68b9      	ldr	r1, [r7, #8]
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f000 f87e 	bl	80039b0 <I2C_IsErrorOccurred>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	f003 0320 	and.w	r3, r3, #32
 80038c8:	2b20      	cmp	r3, #32
 80038ca:	d13b      	bne.n	8003944 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80038cc:	7dfb      	ldrb	r3, [r7, #23]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d138      	bne.n	8003944 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	f003 0304 	and.w	r3, r3, #4
 80038dc:	2b04      	cmp	r3, #4
 80038de:	d105      	bne.n	80038ec <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80038e8:	2300      	movs	r3, #0
 80038ea:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	f003 0310 	and.w	r3, r3, #16
 80038f6:	2b10      	cmp	r3, #16
 80038f8:	d121      	bne.n	800393e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2210      	movs	r2, #16
 8003900:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2204      	movs	r2, #4
 8003906:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2220      	movs	r2, #32
 800390e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	6859      	ldr	r1, [r3, #4]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	4b24      	ldr	r3, [pc, #144]	@ (80039ac <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800391c:	400b      	ands	r3, r1
 800391e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2220      	movs	r2, #32
 8003924:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	75fb      	strb	r3, [r7, #23]
 800393c:	e002      	b.n	8003944 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2200      	movs	r2, #0
 8003942:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003944:	f7ff f908 	bl	8002b58 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	68ba      	ldr	r2, [r7, #8]
 8003950:	429a      	cmp	r2, r3
 8003952:	d302      	bcc.n	800395a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d119      	bne.n	800398e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800395a:	7dfb      	ldrb	r3, [r7, #23]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d116      	bne.n	800398e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	f003 0304 	and.w	r3, r3, #4
 800396a:	2b04      	cmp	r3, #4
 800396c:	d00f      	beq.n	800398e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003972:	f043 0220 	orr.w	r2, r3, #32
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2220      	movs	r2, #32
 800397e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	f003 0304 	and.w	r3, r3, #4
 8003998:	2b04      	cmp	r3, #4
 800399a:	d002      	beq.n	80039a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800399c:	7dfb      	ldrb	r3, [r7, #23]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d083      	beq.n	80038aa <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80039a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3718      	adds	r7, #24
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	fe00e800 	.word	0xfe00e800

080039b0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b08a      	sub	sp, #40	@ 0x28
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039bc:	2300      	movs	r3, #0
 80039be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80039ca:	2300      	movs	r3, #0
 80039cc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	f003 0310 	and.w	r3, r3, #16
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d068      	beq.n	8003aae <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2210      	movs	r2, #16
 80039e2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80039e4:	e049      	b.n	8003a7a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ec:	d045      	beq.n	8003a7a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80039ee:	f7ff f8b3 	bl	8002b58 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	68ba      	ldr	r2, [r7, #8]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d302      	bcc.n	8003a04 <I2C_IsErrorOccurred+0x54>
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d13a      	bne.n	8003a7a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a0e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a16:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a26:	d121      	bne.n	8003a6c <I2C_IsErrorOccurred+0xbc>
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a2e:	d01d      	beq.n	8003a6c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003a30:	7cfb      	ldrb	r3, [r7, #19]
 8003a32:	2b20      	cmp	r3, #32
 8003a34:	d01a      	beq.n	8003a6c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003a44:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003a46:	f7ff f887 	bl	8002b58 <HAL_GetTick>
 8003a4a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a4c:	e00e      	b.n	8003a6c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003a4e:	f7ff f883 	bl	8002b58 <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	2b19      	cmp	r3, #25
 8003a5a:	d907      	bls.n	8003a6c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003a5c:	6a3b      	ldr	r3, [r7, #32]
 8003a5e:	f043 0320 	orr.w	r3, r3, #32
 8003a62:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003a6a:	e006      	b.n	8003a7a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	699b      	ldr	r3, [r3, #24]
 8003a72:	f003 0320 	and.w	r3, r3, #32
 8003a76:	2b20      	cmp	r3, #32
 8003a78:	d1e9      	bne.n	8003a4e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	f003 0320 	and.w	r3, r3, #32
 8003a84:	2b20      	cmp	r3, #32
 8003a86:	d003      	beq.n	8003a90 <I2C_IsErrorOccurred+0xe0>
 8003a88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d0aa      	beq.n	80039e6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003a90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d103      	bne.n	8003aa0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2220      	movs	r2, #32
 8003a9e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003aa0:	6a3b      	ldr	r3, [r7, #32]
 8003aa2:	f043 0304 	orr.w	r3, r3, #4
 8003aa6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00b      	beq.n	8003ad8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003ac0:	6a3b      	ldr	r3, [r7, #32]
 8003ac2:	f043 0301 	orr.w	r3, r3, #1
 8003ac6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ad0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00b      	beq.n	8003afa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003ae2:	6a3b      	ldr	r3, [r7, #32]
 8003ae4:	f043 0308 	orr.w	r3, r3, #8
 8003ae8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003af2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d00b      	beq.n	8003b1c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003b04:	6a3b      	ldr	r3, [r7, #32]
 8003b06:	f043 0302 	orr.w	r3, r3, #2
 8003b0a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b14:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003b1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d01c      	beq.n	8003b5e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003b24:	68f8      	ldr	r0, [r7, #12]
 8003b26:	f7ff fdaf 	bl	8003688 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	6859      	ldr	r1, [r3, #4]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	4b0d      	ldr	r3, [pc, #52]	@ (8003b6c <I2C_IsErrorOccurred+0x1bc>)
 8003b36:	400b      	ands	r3, r1
 8003b38:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b3e:	6a3b      	ldr	r3, [r7, #32]
 8003b40:	431a      	orrs	r2, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2220      	movs	r2, #32
 8003b4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003b5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3728      	adds	r7, #40	@ 0x28
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	fe00e800 	.word	0xfe00e800

08003b70 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b087      	sub	sp, #28
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	607b      	str	r3, [r7, #4]
 8003b7a:	460b      	mov	r3, r1
 8003b7c:	817b      	strh	r3, [r7, #10]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b82:	897b      	ldrh	r3, [r7, #10]
 8003b84:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b88:	7a7b      	ldrb	r3, [r7, #9]
 8003b8a:	041b      	lsls	r3, r3, #16
 8003b8c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b90:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b96:	6a3b      	ldr	r3, [r7, #32]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003b9e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685a      	ldr	r2, [r3, #4]
 8003ba6:	6a3b      	ldr	r3, [r7, #32]
 8003ba8:	0d5b      	lsrs	r3, r3, #21
 8003baa:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003bae:	4b08      	ldr	r3, [pc, #32]	@ (8003bd0 <I2C_TransferConfig+0x60>)
 8003bb0:	430b      	orrs	r3, r1
 8003bb2:	43db      	mvns	r3, r3
 8003bb4:	ea02 0103 	and.w	r1, r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003bc2:	bf00      	nop
 8003bc4:	371c      	adds	r7, #28
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	03ff63ff 	.word	0x03ff63ff

08003bd4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b20      	cmp	r3, #32
 8003be8:	d138      	bne.n	8003c5c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d101      	bne.n	8003bf8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	e032      	b.n	8003c5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2224      	movs	r2, #36	@ 0x24
 8003c04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f022 0201 	bic.w	r2, r2, #1
 8003c16:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003c26:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	6819      	ldr	r1, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	430a      	orrs	r2, r1
 8003c36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f042 0201 	orr.w	r2, r2, #1
 8003c46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	e000      	b.n	8003c5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c5c:	2302      	movs	r3, #2
  }
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	370c      	adds	r7, #12
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr

08003c6a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c6a:	b480      	push	{r7}
 8003c6c:	b085      	sub	sp, #20
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
 8003c72:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	2b20      	cmp	r3, #32
 8003c7e:	d139      	bne.n	8003cf4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d101      	bne.n	8003c8e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	e033      	b.n	8003cf6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2224      	movs	r2, #36	@ 0x24
 8003c9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 0201 	bic.w	r2, r2, #1
 8003cac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003cbc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	021b      	lsls	r3, r3, #8
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f042 0201 	orr.w	r2, r2, #1
 8003cde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	e000      	b.n	8003cf6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003cf4:	2302      	movs	r3, #2
  }
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3714      	adds	r7, #20
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
	...

08003d04 <HAL_PWR_ConfigPVD>:
  *         driver. All combination are allowed: wake up only Cortex-M7, wake up
  *         only Cortex-M4 or wake up Cortex-M7 and Cortex-M4.
  * @retval None.
  */
void HAL_PWR_ConfigPVD (PWR_PVDTypeDef *sConfigPVD)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  /* Check the PVD configuration parameter */
  if (sConfigPVD == NULL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d069      	beq.n	8003de6 <HAL_PWR_ConfigPVD+0xe2>
  /* Check the parameters */
  assert_param (IS_PWR_PVD_LEVEL (sConfigPVD->PVDLevel));
  assert_param (IS_PWR_PVD_MODE (sConfigPVD->Mode));

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG (PWR->CR1, PWR_CR1_PLS, sConfigPVD->PVDLevel);
 8003d12:	4b38      	ldr	r3, [pc, #224]	@ (8003df4 <HAL_PWR_ConfigPVD+0xf0>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4935      	ldr	r1, [pc, #212]	@ (8003df4 <HAL_PWR_ConfigPVD+0xf0>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	600b      	str	r3, [r1, #0]

  /* Clear previous config */
#if !defined (DUAL_CORE)
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT ();
 8003d24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d2c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d34:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __HAL_PWR_PVD_EXTI_DISABLE_IT ();
 8003d38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d40:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d48:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* !defined (DUAL_CORE) */

  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE ();
 8003d4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d5a:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE ();
 8003d5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d6a:	6053      	str	r3, [r2, #4]

#if !defined (DUAL_CORE)
  /* Interrupt mode configuration */
  if ((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d009      	beq.n	8003d8c <HAL_PWR_ConfigPVD+0x88>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT ();
 8003d78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d80:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d88:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  }

  /* Event mode configuration */
  if ((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d009      	beq.n	8003dac <HAL_PWR_ConfigPVD+0xa8>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT ();
 8003d98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003da0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003da4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003da8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  }
#endif /* !defined (DUAL_CORE) */

  /* Rising edge configuration */
  if ((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f003 0301 	and.w	r3, r3, #1
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d007      	beq.n	8003dc8 <HAL_PWR_ConfigPVD+0xc4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE ();
 8003db8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003dc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dc6:	6013      	str	r3, [r2, #0]
  }

  /* Falling edge configuration */
  if ((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d009      	beq.n	8003de8 <HAL_PWR_ConfigPVD+0xe4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE ();
 8003dd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003dde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003de2:	6053      	str	r3, [r2, #4]
 8003de4:	e000      	b.n	8003de8 <HAL_PWR_ConfigPVD+0xe4>
    return;
 8003de6:	bf00      	nop
  }
}
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	58024800 	.word	0x58024800

08003df8 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Programmable Voltage Detector (PVD).
  * @retval None.
  */
void HAL_PWR_EnablePVD (void)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT (PWR->CR1, PWR_CR1_PVDEN);
 8003dfc:	4b05      	ldr	r3, [pc, #20]	@ (8003e14 <HAL_PWR_EnablePVD+0x1c>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a04      	ldr	r2, [pc, #16]	@ (8003e14 <HAL_PWR_EnablePVD+0x1c>)
 8003e02:	f043 0310 	orr.w	r3, r3, #16
 8003e06:	6013      	str	r3, [r2, #0]
}
 8003e08:	bf00      	nop
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	58024800 	.word	0x58024800

08003e18 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003e20:	4b1a      	ldr	r3, [pc, #104]	@ (8003e8c <HAL_PWREx_ConfigSupply+0x74>)
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	f003 0307 	and.w	r3, r3, #7
 8003e28:	2b06      	cmp	r3, #6
 8003e2a:	d00a      	beq.n	8003e42 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003e2c:	4b17      	ldr	r3, [pc, #92]	@ (8003e8c <HAL_PWREx_ConfigSupply+0x74>)
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d001      	beq.n	8003e3e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e022      	b.n	8003e84 <HAL_PWREx_ConfigSupply+0x6c>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	e020      	b.n	8003e84 <HAL_PWREx_ConfigSupply+0x6c>
//    }
//  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2b1e      	cmp	r3, #30
 8003e46:	d008      	beq.n	8003e5a <HAL_PWREx_ConfigSupply+0x42>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2b2e      	cmp	r3, #46	@ 0x2e
 8003e4c:	d005      	beq.n	8003e5a <HAL_PWREx_ConfigSupply+0x42>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2b1d      	cmp	r3, #29
 8003e52:	d002      	beq.n	8003e5a <HAL_PWREx_ConfigSupply+0x42>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2b2d      	cmp	r3, #45	@ 0x2d
 8003e58:	d113      	bne.n	8003e82 <HAL_PWREx_ConfigSupply+0x6a>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003e5a:	f7fe fe7d 	bl	8002b58 <HAL_GetTick>
 8003e5e:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003e60:	e009      	b.n	8003e76 <HAL_PWREx_ConfigSupply+0x5e>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003e62:	f7fe fe79 	bl	8002b58 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003e70:	d901      	bls.n	8003e76 <HAL_PWREx_ConfigSupply+0x5e>
      {
        return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e006      	b.n	8003e84 <HAL_PWREx_ConfigSupply+0x6c>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003e76:	4b05      	ldr	r3, [pc, #20]	@ (8003e8c <HAL_PWREx_ConfigSupply+0x74>)
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	f003 0311 	and.w	r3, r3, #17
 8003e7e:	2b11      	cmp	r3, #17
 8003e80:	d1ef      	bne.n	8003e62 <HAL_PWREx_ConfigSupply+0x4a>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3710      	adds	r7, #16
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	58024800 	.word	0x58024800

08003e90 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b08c      	sub	sp, #48	@ 0x30
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d101      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e3c8      	b.n	8004634 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	f000 8087 	beq.w	8003fbe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eb0:	4b88      	ldr	r3, [pc, #544]	@ (80040d4 <HAL_RCC_OscConfig+0x244>)
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003eba:	4b86      	ldr	r3, [pc, #536]	@ (80040d4 <HAL_RCC_OscConfig+0x244>)
 8003ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ebe:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ec2:	2b10      	cmp	r3, #16
 8003ec4:	d007      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x46>
 8003ec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ec8:	2b18      	cmp	r3, #24
 8003eca:	d110      	bne.n	8003eee <HAL_RCC_OscConfig+0x5e>
 8003ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ece:	f003 0303 	and.w	r3, r3, #3
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d10b      	bne.n	8003eee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ed6:	4b7f      	ldr	r3, [pc, #508]	@ (80040d4 <HAL_RCC_OscConfig+0x244>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d06c      	beq.n	8003fbc <HAL_RCC_OscConfig+0x12c>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d168      	bne.n	8003fbc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e3a2      	b.n	8004634 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ef6:	d106      	bne.n	8003f06 <HAL_RCC_OscConfig+0x76>
 8003ef8:	4b76      	ldr	r3, [pc, #472]	@ (80040d4 <HAL_RCC_OscConfig+0x244>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a75      	ldr	r2, [pc, #468]	@ (80040d4 <HAL_RCC_OscConfig+0x244>)
 8003efe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f02:	6013      	str	r3, [r2, #0]
 8003f04:	e02e      	b.n	8003f64 <HAL_RCC_OscConfig+0xd4>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10c      	bne.n	8003f28 <HAL_RCC_OscConfig+0x98>
 8003f0e:	4b71      	ldr	r3, [pc, #452]	@ (80040d4 <HAL_RCC_OscConfig+0x244>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a70      	ldr	r2, [pc, #448]	@ (80040d4 <HAL_RCC_OscConfig+0x244>)
 8003f14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f18:	6013      	str	r3, [r2, #0]
 8003f1a:	4b6e      	ldr	r3, [pc, #440]	@ (80040d4 <HAL_RCC_OscConfig+0x244>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a6d      	ldr	r2, [pc, #436]	@ (80040d4 <HAL_RCC_OscConfig+0x244>)
 8003f20:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f24:	6013      	str	r3, [r2, #0]
 8003f26:	e01d      	b.n	8003f64 <HAL_RCC_OscConfig+0xd4>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f30:	d10c      	bne.n	8003f4c <HAL_RCC_OscConfig+0xbc>
 8003f32:	4b68      	ldr	r3, [pc, #416]	@ (80040d4 <HAL_RCC_OscConfig+0x244>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a67      	ldr	r2, [pc, #412]	@ (80040d4 <HAL_RCC_OscConfig+0x244>)
 8003f38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f3c:	6013      	str	r3, [r2, #0]
 8003f3e:	4b65      	ldr	r3, [pc, #404]	@ (80040d4 <HAL_RCC_OscConfig+0x244>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a64      	ldr	r2, [pc, #400]	@ (80040d4 <HAL_RCC_OscConfig+0x244>)
 8003f44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f48:	6013      	str	r3, [r2, #0]
 8003f4a:	e00b      	b.n	8003f64 <HAL_RCC_OscConfig+0xd4>
 8003f4c:	4b61      	ldr	r3, [pc, #388]	@ (80040d4 <HAL_RCC_OscConfig+0x244>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a60      	ldr	r2, [pc, #384]	@ (80040d4 <HAL_RCC_OscConfig+0x244>)
 8003f52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f56:	6013      	str	r3, [r2, #0]
 8003f58:	4b5e      	ldr	r3, [pc, #376]	@ (80040d4 <HAL_RCC_OscConfig+0x244>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a5d      	ldr	r2, [pc, #372]	@ (80040d4 <HAL_RCC_OscConfig+0x244>)
 8003f5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d013      	beq.n	8003f94 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f6c:	f7fe fdf4 	bl	8002b58 <HAL_GetTick>
 8003f70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f72:	e008      	b.n	8003f86 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f74:	f7fe fdf0 	bl	8002b58 <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	2b64      	cmp	r3, #100	@ 0x64
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e356      	b.n	8004634 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f86:	4b53      	ldr	r3, [pc, #332]	@ (80040d4 <HAL_RCC_OscConfig+0x244>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d0f0      	beq.n	8003f74 <HAL_RCC_OscConfig+0xe4>
 8003f92:	e014      	b.n	8003fbe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f94:	f7fe fde0 	bl	8002b58 <HAL_GetTick>
 8003f98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003f9a:	e008      	b.n	8003fae <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f9c:	f7fe fddc 	bl	8002b58 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b64      	cmp	r3, #100	@ 0x64
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e342      	b.n	8004634 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003fae:	4b49      	ldr	r3, [pc, #292]	@ (80040d4 <HAL_RCC_OscConfig+0x244>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1f0      	bne.n	8003f9c <HAL_RCC_OscConfig+0x10c>
 8003fba:	e000      	b.n	8003fbe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0302 	and.w	r3, r3, #2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f000 808c 	beq.w	80040e4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fcc:	4b41      	ldr	r3, [pc, #260]	@ (80040d4 <HAL_RCC_OscConfig+0x244>)
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003fd4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003fd6:	4b3f      	ldr	r3, [pc, #252]	@ (80040d4 <HAL_RCC_OscConfig+0x244>)
 8003fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fda:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003fdc:	6a3b      	ldr	r3, [r7, #32]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d007      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x162>
 8003fe2:	6a3b      	ldr	r3, [r7, #32]
 8003fe4:	2b18      	cmp	r3, #24
 8003fe6:	d137      	bne.n	8004058 <HAL_RCC_OscConfig+0x1c8>
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	f003 0303 	and.w	r3, r3, #3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d132      	bne.n	8004058 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ff2:	4b38      	ldr	r3, [pc, #224]	@ (80040d4 <HAL_RCC_OscConfig+0x244>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0304 	and.w	r3, r3, #4
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d005      	beq.n	800400a <HAL_RCC_OscConfig+0x17a>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e314      	b.n	8004634 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800400a:	4b32      	ldr	r3, [pc, #200]	@ (80040d4 <HAL_RCC_OscConfig+0x244>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f023 0219 	bic.w	r2, r3, #25
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	492f      	ldr	r1, [pc, #188]	@ (80040d4 <HAL_RCC_OscConfig+0x244>)
 8004018:	4313      	orrs	r3, r2
 800401a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800401c:	f7fe fd9c 	bl	8002b58 <HAL_GetTick>
 8004020:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004022:	e008      	b.n	8004036 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004024:	f7fe fd98 	bl	8002b58 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b02      	cmp	r3, #2
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e2fe      	b.n	8004634 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004036:	4b27      	ldr	r3, [pc, #156]	@ (80040d4 <HAL_RCC_OscConfig+0x244>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0304 	and.w	r3, r3, #4
 800403e:	2b00      	cmp	r3, #0
 8004040:	d0f0      	beq.n	8004024 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004042:	4b24      	ldr	r3, [pc, #144]	@ (80040d4 <HAL_RCC_OscConfig+0x244>)
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	061b      	lsls	r3, r3, #24
 8004050:	4920      	ldr	r1, [pc, #128]	@ (80040d4 <HAL_RCC_OscConfig+0x244>)
 8004052:	4313      	orrs	r3, r2
 8004054:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004056:	e045      	b.n	80040e4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d026      	beq.n	80040ae <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004060:	4b1c      	ldr	r3, [pc, #112]	@ (80040d4 <HAL_RCC_OscConfig+0x244>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f023 0219 	bic.w	r2, r3, #25
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	4919      	ldr	r1, [pc, #100]	@ (80040d4 <HAL_RCC_OscConfig+0x244>)
 800406e:	4313      	orrs	r3, r2
 8004070:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004072:	f7fe fd71 	bl	8002b58 <HAL_GetTick>
 8004076:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004078:	e008      	b.n	800408c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800407a:	f7fe fd6d 	bl	8002b58 <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	2b02      	cmp	r3, #2
 8004086:	d901      	bls.n	800408c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e2d3      	b.n	8004634 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800408c:	4b11      	ldr	r3, [pc, #68]	@ (80040d4 <HAL_RCC_OscConfig+0x244>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0304 	and.w	r3, r3, #4
 8004094:	2b00      	cmp	r3, #0
 8004096:	d0f0      	beq.n	800407a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004098:	4b0e      	ldr	r3, [pc, #56]	@ (80040d4 <HAL_RCC_OscConfig+0x244>)
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	061b      	lsls	r3, r3, #24
 80040a6:	490b      	ldr	r1, [pc, #44]	@ (80040d4 <HAL_RCC_OscConfig+0x244>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	604b      	str	r3, [r1, #4]
 80040ac:	e01a      	b.n	80040e4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040ae:	4b09      	ldr	r3, [pc, #36]	@ (80040d4 <HAL_RCC_OscConfig+0x244>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a08      	ldr	r2, [pc, #32]	@ (80040d4 <HAL_RCC_OscConfig+0x244>)
 80040b4:	f023 0301 	bic.w	r3, r3, #1
 80040b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ba:	f7fe fd4d 	bl	8002b58 <HAL_GetTick>
 80040be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80040c0:	e00a      	b.n	80040d8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040c2:	f7fe fd49 	bl	8002b58 <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d903      	bls.n	80040d8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e2af      	b.n	8004634 <HAL_RCC_OscConfig+0x7a4>
 80040d4:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80040d8:	4b96      	ldr	r3, [pc, #600]	@ (8004334 <HAL_RCC_OscConfig+0x4a4>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0304 	and.w	r3, r3, #4
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d1ee      	bne.n	80040c2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0310 	and.w	r3, r3, #16
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d06a      	beq.n	80041c6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040f0:	4b90      	ldr	r3, [pc, #576]	@ (8004334 <HAL_RCC_OscConfig+0x4a4>)
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80040f8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80040fa:	4b8e      	ldr	r3, [pc, #568]	@ (8004334 <HAL_RCC_OscConfig+0x4a4>)
 80040fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040fe:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	2b08      	cmp	r3, #8
 8004104:	d007      	beq.n	8004116 <HAL_RCC_OscConfig+0x286>
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	2b18      	cmp	r3, #24
 800410a:	d11b      	bne.n	8004144 <HAL_RCC_OscConfig+0x2b4>
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	f003 0303 	and.w	r3, r3, #3
 8004112:	2b01      	cmp	r3, #1
 8004114:	d116      	bne.n	8004144 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004116:	4b87      	ldr	r3, [pc, #540]	@ (8004334 <HAL_RCC_OscConfig+0x4a4>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800411e:	2b00      	cmp	r3, #0
 8004120:	d005      	beq.n	800412e <HAL_RCC_OscConfig+0x29e>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	2b80      	cmp	r3, #128	@ 0x80
 8004128:	d001      	beq.n	800412e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e282      	b.n	8004634 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800412e:	4b81      	ldr	r3, [pc, #516]	@ (8004334 <HAL_RCC_OscConfig+0x4a4>)
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	061b      	lsls	r3, r3, #24
 800413c:	497d      	ldr	r1, [pc, #500]	@ (8004334 <HAL_RCC_OscConfig+0x4a4>)
 800413e:	4313      	orrs	r3, r2
 8004140:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004142:	e040      	b.n	80041c6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	69db      	ldr	r3, [r3, #28]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d023      	beq.n	8004194 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800414c:	4b79      	ldr	r3, [pc, #484]	@ (8004334 <HAL_RCC_OscConfig+0x4a4>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a78      	ldr	r2, [pc, #480]	@ (8004334 <HAL_RCC_OscConfig+0x4a4>)
 8004152:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004156:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004158:	f7fe fcfe 	bl	8002b58 <HAL_GetTick>
 800415c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800415e:	e008      	b.n	8004172 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004160:	f7fe fcfa 	bl	8002b58 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b02      	cmp	r3, #2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e260      	b.n	8004634 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004172:	4b70      	ldr	r3, [pc, #448]	@ (8004334 <HAL_RCC_OscConfig+0x4a4>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800417a:	2b00      	cmp	r3, #0
 800417c:	d0f0      	beq.n	8004160 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800417e:	4b6d      	ldr	r3, [pc, #436]	@ (8004334 <HAL_RCC_OscConfig+0x4a4>)
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	061b      	lsls	r3, r3, #24
 800418c:	4969      	ldr	r1, [pc, #420]	@ (8004334 <HAL_RCC_OscConfig+0x4a4>)
 800418e:	4313      	orrs	r3, r2
 8004190:	60cb      	str	r3, [r1, #12]
 8004192:	e018      	b.n	80041c6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004194:	4b67      	ldr	r3, [pc, #412]	@ (8004334 <HAL_RCC_OscConfig+0x4a4>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a66      	ldr	r2, [pc, #408]	@ (8004334 <HAL_RCC_OscConfig+0x4a4>)
 800419a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800419e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a0:	f7fe fcda 	bl	8002b58 <HAL_GetTick>
 80041a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80041a6:	e008      	b.n	80041ba <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80041a8:	f7fe fcd6 	bl	8002b58 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d901      	bls.n	80041ba <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e23c      	b.n	8004634 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80041ba:	4b5e      	ldr	r3, [pc, #376]	@ (8004334 <HAL_RCC_OscConfig+0x4a4>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1f0      	bne.n	80041a8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0308 	and.w	r3, r3, #8
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d036      	beq.n	8004240 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d019      	beq.n	800420e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041da:	4b56      	ldr	r3, [pc, #344]	@ (8004334 <HAL_RCC_OscConfig+0x4a4>)
 80041dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041de:	4a55      	ldr	r2, [pc, #340]	@ (8004334 <HAL_RCC_OscConfig+0x4a4>)
 80041e0:	f043 0301 	orr.w	r3, r3, #1
 80041e4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041e6:	f7fe fcb7 	bl	8002b58 <HAL_GetTick>
 80041ea:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80041ec:	e008      	b.n	8004200 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041ee:	f7fe fcb3 	bl	8002b58 <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d901      	bls.n	8004200 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e219      	b.n	8004634 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004200:	4b4c      	ldr	r3, [pc, #304]	@ (8004334 <HAL_RCC_OscConfig+0x4a4>)
 8004202:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004204:	f003 0302 	and.w	r3, r3, #2
 8004208:	2b00      	cmp	r3, #0
 800420a:	d0f0      	beq.n	80041ee <HAL_RCC_OscConfig+0x35e>
 800420c:	e018      	b.n	8004240 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800420e:	4b49      	ldr	r3, [pc, #292]	@ (8004334 <HAL_RCC_OscConfig+0x4a4>)
 8004210:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004212:	4a48      	ldr	r2, [pc, #288]	@ (8004334 <HAL_RCC_OscConfig+0x4a4>)
 8004214:	f023 0301 	bic.w	r3, r3, #1
 8004218:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800421a:	f7fe fc9d 	bl	8002b58 <HAL_GetTick>
 800421e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004220:	e008      	b.n	8004234 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004222:	f7fe fc99 	bl	8002b58 <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	2b02      	cmp	r3, #2
 800422e:	d901      	bls.n	8004234 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e1ff      	b.n	8004634 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004234:	4b3f      	ldr	r3, [pc, #252]	@ (8004334 <HAL_RCC_OscConfig+0x4a4>)
 8004236:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1f0      	bne.n	8004222 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0320 	and.w	r3, r3, #32
 8004248:	2b00      	cmp	r3, #0
 800424a:	d036      	beq.n	80042ba <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	699b      	ldr	r3, [r3, #24]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d019      	beq.n	8004288 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004254:	4b37      	ldr	r3, [pc, #220]	@ (8004334 <HAL_RCC_OscConfig+0x4a4>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a36      	ldr	r2, [pc, #216]	@ (8004334 <HAL_RCC_OscConfig+0x4a4>)
 800425a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800425e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004260:	f7fe fc7a 	bl	8002b58 <HAL_GetTick>
 8004264:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004266:	e008      	b.n	800427a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004268:	f7fe fc76 	bl	8002b58 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2b02      	cmp	r3, #2
 8004274:	d901      	bls.n	800427a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e1dc      	b.n	8004634 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800427a:	4b2e      	ldr	r3, [pc, #184]	@ (8004334 <HAL_RCC_OscConfig+0x4a4>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d0f0      	beq.n	8004268 <HAL_RCC_OscConfig+0x3d8>
 8004286:	e018      	b.n	80042ba <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004288:	4b2a      	ldr	r3, [pc, #168]	@ (8004334 <HAL_RCC_OscConfig+0x4a4>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a29      	ldr	r2, [pc, #164]	@ (8004334 <HAL_RCC_OscConfig+0x4a4>)
 800428e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004292:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004294:	f7fe fc60 	bl	8002b58 <HAL_GetTick>
 8004298:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800429a:	e008      	b.n	80042ae <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800429c:	f7fe fc5c 	bl	8002b58 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e1c2      	b.n	8004634 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80042ae:	4b21      	ldr	r3, [pc, #132]	@ (8004334 <HAL_RCC_OscConfig+0x4a4>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1f0      	bne.n	800429c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0304 	and.w	r3, r3, #4
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f000 8086 	beq.w	80043d4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80042c8:	4b1b      	ldr	r3, [pc, #108]	@ (8004338 <HAL_RCC_OscConfig+0x4a8>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a1a      	ldr	r2, [pc, #104]	@ (8004338 <HAL_RCC_OscConfig+0x4a8>)
 80042ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042d4:	f7fe fc40 	bl	8002b58 <HAL_GetTick>
 80042d8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042da:	e008      	b.n	80042ee <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042dc:	f7fe fc3c 	bl	8002b58 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b64      	cmp	r3, #100	@ 0x64
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e1a2      	b.n	8004634 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042ee:	4b12      	ldr	r3, [pc, #72]	@ (8004338 <HAL_RCC_OscConfig+0x4a8>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d0f0      	beq.n	80042dc <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d106      	bne.n	8004310 <HAL_RCC_OscConfig+0x480>
 8004302:	4b0c      	ldr	r3, [pc, #48]	@ (8004334 <HAL_RCC_OscConfig+0x4a4>)
 8004304:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004306:	4a0b      	ldr	r2, [pc, #44]	@ (8004334 <HAL_RCC_OscConfig+0x4a4>)
 8004308:	f043 0301 	orr.w	r3, r3, #1
 800430c:	6713      	str	r3, [r2, #112]	@ 0x70
 800430e:	e032      	b.n	8004376 <HAL_RCC_OscConfig+0x4e6>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d111      	bne.n	800433c <HAL_RCC_OscConfig+0x4ac>
 8004318:	4b06      	ldr	r3, [pc, #24]	@ (8004334 <HAL_RCC_OscConfig+0x4a4>)
 800431a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800431c:	4a05      	ldr	r2, [pc, #20]	@ (8004334 <HAL_RCC_OscConfig+0x4a4>)
 800431e:	f023 0301 	bic.w	r3, r3, #1
 8004322:	6713      	str	r3, [r2, #112]	@ 0x70
 8004324:	4b03      	ldr	r3, [pc, #12]	@ (8004334 <HAL_RCC_OscConfig+0x4a4>)
 8004326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004328:	4a02      	ldr	r2, [pc, #8]	@ (8004334 <HAL_RCC_OscConfig+0x4a4>)
 800432a:	f023 0304 	bic.w	r3, r3, #4
 800432e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004330:	e021      	b.n	8004376 <HAL_RCC_OscConfig+0x4e6>
 8004332:	bf00      	nop
 8004334:	58024400 	.word	0x58024400
 8004338:	58024800 	.word	0x58024800
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	2b05      	cmp	r3, #5
 8004342:	d10c      	bne.n	800435e <HAL_RCC_OscConfig+0x4ce>
 8004344:	4b83      	ldr	r3, [pc, #524]	@ (8004554 <HAL_RCC_OscConfig+0x6c4>)
 8004346:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004348:	4a82      	ldr	r2, [pc, #520]	@ (8004554 <HAL_RCC_OscConfig+0x6c4>)
 800434a:	f043 0304 	orr.w	r3, r3, #4
 800434e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004350:	4b80      	ldr	r3, [pc, #512]	@ (8004554 <HAL_RCC_OscConfig+0x6c4>)
 8004352:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004354:	4a7f      	ldr	r2, [pc, #508]	@ (8004554 <HAL_RCC_OscConfig+0x6c4>)
 8004356:	f043 0301 	orr.w	r3, r3, #1
 800435a:	6713      	str	r3, [r2, #112]	@ 0x70
 800435c:	e00b      	b.n	8004376 <HAL_RCC_OscConfig+0x4e6>
 800435e:	4b7d      	ldr	r3, [pc, #500]	@ (8004554 <HAL_RCC_OscConfig+0x6c4>)
 8004360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004362:	4a7c      	ldr	r2, [pc, #496]	@ (8004554 <HAL_RCC_OscConfig+0x6c4>)
 8004364:	f023 0301 	bic.w	r3, r3, #1
 8004368:	6713      	str	r3, [r2, #112]	@ 0x70
 800436a:	4b7a      	ldr	r3, [pc, #488]	@ (8004554 <HAL_RCC_OscConfig+0x6c4>)
 800436c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800436e:	4a79      	ldr	r2, [pc, #484]	@ (8004554 <HAL_RCC_OscConfig+0x6c4>)
 8004370:	f023 0304 	bic.w	r3, r3, #4
 8004374:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d015      	beq.n	80043aa <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800437e:	f7fe fbeb 	bl	8002b58 <HAL_GetTick>
 8004382:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004384:	e00a      	b.n	800439c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004386:	f7fe fbe7 	bl	8002b58 <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004394:	4293      	cmp	r3, r2
 8004396:	d901      	bls.n	800439c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e14b      	b.n	8004634 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800439c:	4b6d      	ldr	r3, [pc, #436]	@ (8004554 <HAL_RCC_OscConfig+0x6c4>)
 800439e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043a0:	f003 0302 	and.w	r3, r3, #2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d0ee      	beq.n	8004386 <HAL_RCC_OscConfig+0x4f6>
 80043a8:	e014      	b.n	80043d4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043aa:	f7fe fbd5 	bl	8002b58 <HAL_GetTick>
 80043ae:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80043b0:	e00a      	b.n	80043c8 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043b2:	f7fe fbd1 	bl	8002b58 <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d901      	bls.n	80043c8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e135      	b.n	8004634 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80043c8:	4b62      	ldr	r3, [pc, #392]	@ (8004554 <HAL_RCC_OscConfig+0x6c4>)
 80043ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043cc:	f003 0302 	and.w	r3, r3, #2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1ee      	bne.n	80043b2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f000 812a 	beq.w	8004632 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80043de:	4b5d      	ldr	r3, [pc, #372]	@ (8004554 <HAL_RCC_OscConfig+0x6c4>)
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80043e6:	2b18      	cmp	r3, #24
 80043e8:	f000 80ba 	beq.w	8004560 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	f040 8095 	bne.w	8004520 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043f6:	4b57      	ldr	r3, [pc, #348]	@ (8004554 <HAL_RCC_OscConfig+0x6c4>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a56      	ldr	r2, [pc, #344]	@ (8004554 <HAL_RCC_OscConfig+0x6c4>)
 80043fc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004400:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004402:	f7fe fba9 	bl	8002b58 <HAL_GetTick>
 8004406:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004408:	e008      	b.n	800441c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800440a:	f7fe fba5 	bl	8002b58 <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	2b02      	cmp	r3, #2
 8004416:	d901      	bls.n	800441c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e10b      	b.n	8004634 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800441c:	4b4d      	ldr	r3, [pc, #308]	@ (8004554 <HAL_RCC_OscConfig+0x6c4>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1f0      	bne.n	800440a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004428:	4b4a      	ldr	r3, [pc, #296]	@ (8004554 <HAL_RCC_OscConfig+0x6c4>)
 800442a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800442c:	4b4a      	ldr	r3, [pc, #296]	@ (8004558 <HAL_RCC_OscConfig+0x6c8>)
 800442e:	4013      	ands	r3, r2
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004438:	0112      	lsls	r2, r2, #4
 800443a:	430a      	orrs	r2, r1
 800443c:	4945      	ldr	r1, [pc, #276]	@ (8004554 <HAL_RCC_OscConfig+0x6c4>)
 800443e:	4313      	orrs	r3, r2
 8004440:	628b      	str	r3, [r1, #40]	@ 0x28
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004446:	3b01      	subs	r3, #1
 8004448:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004450:	3b01      	subs	r3, #1
 8004452:	025b      	lsls	r3, r3, #9
 8004454:	b29b      	uxth	r3, r3
 8004456:	431a      	orrs	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800445c:	3b01      	subs	r3, #1
 800445e:	041b      	lsls	r3, r3, #16
 8004460:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004464:	431a      	orrs	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800446a:	3b01      	subs	r3, #1
 800446c:	061b      	lsls	r3, r3, #24
 800446e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004472:	4938      	ldr	r1, [pc, #224]	@ (8004554 <HAL_RCC_OscConfig+0x6c4>)
 8004474:	4313      	orrs	r3, r2
 8004476:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004478:	4b36      	ldr	r3, [pc, #216]	@ (8004554 <HAL_RCC_OscConfig+0x6c4>)
 800447a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800447c:	4a35      	ldr	r2, [pc, #212]	@ (8004554 <HAL_RCC_OscConfig+0x6c4>)
 800447e:	f023 0301 	bic.w	r3, r3, #1
 8004482:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004484:	4b33      	ldr	r3, [pc, #204]	@ (8004554 <HAL_RCC_OscConfig+0x6c4>)
 8004486:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004488:	4b34      	ldr	r3, [pc, #208]	@ (800455c <HAL_RCC_OscConfig+0x6cc>)
 800448a:	4013      	ands	r3, r2
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004490:	00d2      	lsls	r2, r2, #3
 8004492:	4930      	ldr	r1, [pc, #192]	@ (8004554 <HAL_RCC_OscConfig+0x6c4>)
 8004494:	4313      	orrs	r3, r2
 8004496:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004498:	4b2e      	ldr	r3, [pc, #184]	@ (8004554 <HAL_RCC_OscConfig+0x6c4>)
 800449a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800449c:	f023 020c 	bic.w	r2, r3, #12
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a4:	492b      	ldr	r1, [pc, #172]	@ (8004554 <HAL_RCC_OscConfig+0x6c4>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80044aa:	4b2a      	ldr	r3, [pc, #168]	@ (8004554 <HAL_RCC_OscConfig+0x6c4>)
 80044ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ae:	f023 0202 	bic.w	r2, r3, #2
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044b6:	4927      	ldr	r1, [pc, #156]	@ (8004554 <HAL_RCC_OscConfig+0x6c4>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80044bc:	4b25      	ldr	r3, [pc, #148]	@ (8004554 <HAL_RCC_OscConfig+0x6c4>)
 80044be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c0:	4a24      	ldr	r2, [pc, #144]	@ (8004554 <HAL_RCC_OscConfig+0x6c4>)
 80044c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044c8:	4b22      	ldr	r3, [pc, #136]	@ (8004554 <HAL_RCC_OscConfig+0x6c4>)
 80044ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044cc:	4a21      	ldr	r2, [pc, #132]	@ (8004554 <HAL_RCC_OscConfig+0x6c4>)
 80044ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80044d4:	4b1f      	ldr	r3, [pc, #124]	@ (8004554 <HAL_RCC_OscConfig+0x6c4>)
 80044d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044d8:	4a1e      	ldr	r2, [pc, #120]	@ (8004554 <HAL_RCC_OscConfig+0x6c4>)
 80044da:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80044e0:	4b1c      	ldr	r3, [pc, #112]	@ (8004554 <HAL_RCC_OscConfig+0x6c4>)
 80044e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044e4:	4a1b      	ldr	r2, [pc, #108]	@ (8004554 <HAL_RCC_OscConfig+0x6c4>)
 80044e6:	f043 0301 	orr.w	r3, r3, #1
 80044ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044ec:	4b19      	ldr	r3, [pc, #100]	@ (8004554 <HAL_RCC_OscConfig+0x6c4>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a18      	ldr	r2, [pc, #96]	@ (8004554 <HAL_RCC_OscConfig+0x6c4>)
 80044f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f8:	f7fe fb2e 	bl	8002b58 <HAL_GetTick>
 80044fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80044fe:	e008      	b.n	8004512 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004500:	f7fe fb2a 	bl	8002b58 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b02      	cmp	r3, #2
 800450c:	d901      	bls.n	8004512 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e090      	b.n	8004634 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004512:	4b10      	ldr	r3, [pc, #64]	@ (8004554 <HAL_RCC_OscConfig+0x6c4>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d0f0      	beq.n	8004500 <HAL_RCC_OscConfig+0x670>
 800451e:	e088      	b.n	8004632 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004520:	4b0c      	ldr	r3, [pc, #48]	@ (8004554 <HAL_RCC_OscConfig+0x6c4>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a0b      	ldr	r2, [pc, #44]	@ (8004554 <HAL_RCC_OscConfig+0x6c4>)
 8004526:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800452a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800452c:	f7fe fb14 	bl	8002b58 <HAL_GetTick>
 8004530:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004532:	e008      	b.n	8004546 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004534:	f7fe fb10 	bl	8002b58 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b02      	cmp	r3, #2
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e076      	b.n	8004634 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004546:	4b03      	ldr	r3, [pc, #12]	@ (8004554 <HAL_RCC_OscConfig+0x6c4>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1f0      	bne.n	8004534 <HAL_RCC_OscConfig+0x6a4>
 8004552:	e06e      	b.n	8004632 <HAL_RCC_OscConfig+0x7a2>
 8004554:	58024400 	.word	0x58024400
 8004558:	fffffc0c 	.word	0xfffffc0c
 800455c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004560:	4b36      	ldr	r3, [pc, #216]	@ (800463c <HAL_RCC_OscConfig+0x7ac>)
 8004562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004564:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004566:	4b35      	ldr	r3, [pc, #212]	@ (800463c <HAL_RCC_OscConfig+0x7ac>)
 8004568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800456a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004570:	2b01      	cmp	r3, #1
 8004572:	d031      	beq.n	80045d8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	f003 0203 	and.w	r2, r3, #3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800457e:	429a      	cmp	r2, r3
 8004580:	d12a      	bne.n	80045d8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	091b      	lsrs	r3, r3, #4
 8004586:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800458e:	429a      	cmp	r2, r3
 8004590:	d122      	bne.n	80045d8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800459c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800459e:	429a      	cmp	r2, r3
 80045a0:	d11a      	bne.n	80045d8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	0a5b      	lsrs	r3, r3, #9
 80045a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045ae:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d111      	bne.n	80045d8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	0c1b      	lsrs	r3, r3, #16
 80045b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045c0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d108      	bne.n	80045d8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	0e1b      	lsrs	r3, r3, #24
 80045ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045d2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d001      	beq.n	80045dc <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e02b      	b.n	8004634 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80045dc:	4b17      	ldr	r3, [pc, #92]	@ (800463c <HAL_RCC_OscConfig+0x7ac>)
 80045de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045e0:	08db      	lsrs	r3, r3, #3
 80045e2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80045e6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d01f      	beq.n	8004632 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80045f2:	4b12      	ldr	r3, [pc, #72]	@ (800463c <HAL_RCC_OscConfig+0x7ac>)
 80045f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045f6:	4a11      	ldr	r2, [pc, #68]	@ (800463c <HAL_RCC_OscConfig+0x7ac>)
 80045f8:	f023 0301 	bic.w	r3, r3, #1
 80045fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80045fe:	f7fe faab 	bl	8002b58 <HAL_GetTick>
 8004602:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004604:	bf00      	nop
 8004606:	f7fe faa7 	bl	8002b58 <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800460e:	4293      	cmp	r3, r2
 8004610:	d0f9      	beq.n	8004606 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004612:	4b0a      	ldr	r3, [pc, #40]	@ (800463c <HAL_RCC_OscConfig+0x7ac>)
 8004614:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004616:	4b0a      	ldr	r3, [pc, #40]	@ (8004640 <HAL_RCC_OscConfig+0x7b0>)
 8004618:	4013      	ands	r3, r2
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800461e:	00d2      	lsls	r2, r2, #3
 8004620:	4906      	ldr	r1, [pc, #24]	@ (800463c <HAL_RCC_OscConfig+0x7ac>)
 8004622:	4313      	orrs	r3, r2
 8004624:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004626:	4b05      	ldr	r3, [pc, #20]	@ (800463c <HAL_RCC_OscConfig+0x7ac>)
 8004628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800462a:	4a04      	ldr	r2, [pc, #16]	@ (800463c <HAL_RCC_OscConfig+0x7ac>)
 800462c:	f043 0301 	orr.w	r3, r3, #1
 8004630:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3730      	adds	r7, #48	@ 0x30
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	58024400 	.word	0x58024400
 8004640:	ffff0007 	.word	0xffff0007

08004644 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b086      	sub	sp, #24
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d101      	bne.n	8004658 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e19c      	b.n	8004992 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004658:	4b8a      	ldr	r3, [pc, #552]	@ (8004884 <HAL_RCC_ClockConfig+0x240>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 030f 	and.w	r3, r3, #15
 8004660:	683a      	ldr	r2, [r7, #0]
 8004662:	429a      	cmp	r2, r3
 8004664:	d910      	bls.n	8004688 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004666:	4b87      	ldr	r3, [pc, #540]	@ (8004884 <HAL_RCC_ClockConfig+0x240>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f023 020f 	bic.w	r2, r3, #15
 800466e:	4985      	ldr	r1, [pc, #532]	@ (8004884 <HAL_RCC_ClockConfig+0x240>)
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	4313      	orrs	r3, r2
 8004674:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004676:	4b83      	ldr	r3, [pc, #524]	@ (8004884 <HAL_RCC_ClockConfig+0x240>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 030f 	and.w	r3, r3, #15
 800467e:	683a      	ldr	r2, [r7, #0]
 8004680:	429a      	cmp	r2, r3
 8004682:	d001      	beq.n	8004688 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e184      	b.n	8004992 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0304 	and.w	r3, r3, #4
 8004690:	2b00      	cmp	r3, #0
 8004692:	d010      	beq.n	80046b6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	691a      	ldr	r2, [r3, #16]
 8004698:	4b7b      	ldr	r3, [pc, #492]	@ (8004888 <HAL_RCC_ClockConfig+0x244>)
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d908      	bls.n	80046b6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80046a4:	4b78      	ldr	r3, [pc, #480]	@ (8004888 <HAL_RCC_ClockConfig+0x244>)
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	4975      	ldr	r1, [pc, #468]	@ (8004888 <HAL_RCC_ClockConfig+0x244>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0308 	and.w	r3, r3, #8
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d010      	beq.n	80046e4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	695a      	ldr	r2, [r3, #20]
 80046c6:	4b70      	ldr	r3, [pc, #448]	@ (8004888 <HAL_RCC_ClockConfig+0x244>)
 80046c8:	69db      	ldr	r3, [r3, #28]
 80046ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d908      	bls.n	80046e4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80046d2:	4b6d      	ldr	r3, [pc, #436]	@ (8004888 <HAL_RCC_ClockConfig+0x244>)
 80046d4:	69db      	ldr	r3, [r3, #28]
 80046d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	496a      	ldr	r1, [pc, #424]	@ (8004888 <HAL_RCC_ClockConfig+0x244>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0310 	and.w	r3, r3, #16
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d010      	beq.n	8004712 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	699a      	ldr	r2, [r3, #24]
 80046f4:	4b64      	ldr	r3, [pc, #400]	@ (8004888 <HAL_RCC_ClockConfig+0x244>)
 80046f6:	69db      	ldr	r3, [r3, #28]
 80046f8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d908      	bls.n	8004712 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004700:	4b61      	ldr	r3, [pc, #388]	@ (8004888 <HAL_RCC_ClockConfig+0x244>)
 8004702:	69db      	ldr	r3, [r3, #28]
 8004704:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	495e      	ldr	r1, [pc, #376]	@ (8004888 <HAL_RCC_ClockConfig+0x244>)
 800470e:	4313      	orrs	r3, r2
 8004710:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0320 	and.w	r3, r3, #32
 800471a:	2b00      	cmp	r3, #0
 800471c:	d010      	beq.n	8004740 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	69da      	ldr	r2, [r3, #28]
 8004722:	4b59      	ldr	r3, [pc, #356]	@ (8004888 <HAL_RCC_ClockConfig+0x244>)
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800472a:	429a      	cmp	r2, r3
 800472c:	d908      	bls.n	8004740 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800472e:	4b56      	ldr	r3, [pc, #344]	@ (8004888 <HAL_RCC_ClockConfig+0x244>)
 8004730:	6a1b      	ldr	r3, [r3, #32]
 8004732:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	69db      	ldr	r3, [r3, #28]
 800473a:	4953      	ldr	r1, [pc, #332]	@ (8004888 <HAL_RCC_ClockConfig+0x244>)
 800473c:	4313      	orrs	r3, r2
 800473e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0302 	and.w	r3, r3, #2
 8004748:	2b00      	cmp	r3, #0
 800474a:	d010      	beq.n	800476e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	68da      	ldr	r2, [r3, #12]
 8004750:	4b4d      	ldr	r3, [pc, #308]	@ (8004888 <HAL_RCC_ClockConfig+0x244>)
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	f003 030f 	and.w	r3, r3, #15
 8004758:	429a      	cmp	r2, r3
 800475a:	d908      	bls.n	800476e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800475c:	4b4a      	ldr	r3, [pc, #296]	@ (8004888 <HAL_RCC_ClockConfig+0x244>)
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	f023 020f 	bic.w	r2, r3, #15
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	4947      	ldr	r1, [pc, #284]	@ (8004888 <HAL_RCC_ClockConfig+0x244>)
 800476a:	4313      	orrs	r3, r2
 800476c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	2b00      	cmp	r3, #0
 8004778:	d055      	beq.n	8004826 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800477a:	4b43      	ldr	r3, [pc, #268]	@ (8004888 <HAL_RCC_ClockConfig+0x244>)
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	4940      	ldr	r1, [pc, #256]	@ (8004888 <HAL_RCC_ClockConfig+0x244>)
 8004788:	4313      	orrs	r3, r2
 800478a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	2b02      	cmp	r3, #2
 8004792:	d107      	bne.n	80047a4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004794:	4b3c      	ldr	r3, [pc, #240]	@ (8004888 <HAL_RCC_ClockConfig+0x244>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d121      	bne.n	80047e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e0f6      	b.n	8004992 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	2b03      	cmp	r3, #3
 80047aa:	d107      	bne.n	80047bc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80047ac:	4b36      	ldr	r3, [pc, #216]	@ (8004888 <HAL_RCC_ClockConfig+0x244>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d115      	bne.n	80047e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e0ea      	b.n	8004992 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d107      	bne.n	80047d4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80047c4:	4b30      	ldr	r3, [pc, #192]	@ (8004888 <HAL_RCC_ClockConfig+0x244>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d109      	bne.n	80047e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e0de      	b.n	8004992 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047d4:	4b2c      	ldr	r3, [pc, #176]	@ (8004888 <HAL_RCC_ClockConfig+0x244>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0304 	and.w	r3, r3, #4
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d101      	bne.n	80047e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e0d6      	b.n	8004992 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80047e4:	4b28      	ldr	r3, [pc, #160]	@ (8004888 <HAL_RCC_ClockConfig+0x244>)
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	f023 0207 	bic.w	r2, r3, #7
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	4925      	ldr	r1, [pc, #148]	@ (8004888 <HAL_RCC_ClockConfig+0x244>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047f6:	f7fe f9af 	bl	8002b58 <HAL_GetTick>
 80047fa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047fc:	e00a      	b.n	8004814 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047fe:	f7fe f9ab 	bl	8002b58 <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	f241 3288 	movw	r2, #5000	@ 0x1388
 800480c:	4293      	cmp	r3, r2
 800480e:	d901      	bls.n	8004814 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e0be      	b.n	8004992 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004814:	4b1c      	ldr	r3, [pc, #112]	@ (8004888 <HAL_RCC_ClockConfig+0x244>)
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	00db      	lsls	r3, r3, #3
 8004822:	429a      	cmp	r2, r3
 8004824:	d1eb      	bne.n	80047fe <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	2b00      	cmp	r3, #0
 8004830:	d010      	beq.n	8004854 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	68da      	ldr	r2, [r3, #12]
 8004836:	4b14      	ldr	r3, [pc, #80]	@ (8004888 <HAL_RCC_ClockConfig+0x244>)
 8004838:	699b      	ldr	r3, [r3, #24]
 800483a:	f003 030f 	and.w	r3, r3, #15
 800483e:	429a      	cmp	r2, r3
 8004840:	d208      	bcs.n	8004854 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004842:	4b11      	ldr	r3, [pc, #68]	@ (8004888 <HAL_RCC_ClockConfig+0x244>)
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	f023 020f 	bic.w	r2, r3, #15
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	490e      	ldr	r1, [pc, #56]	@ (8004888 <HAL_RCC_ClockConfig+0x244>)
 8004850:	4313      	orrs	r3, r2
 8004852:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004854:	4b0b      	ldr	r3, [pc, #44]	@ (8004884 <HAL_RCC_ClockConfig+0x240>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 030f 	and.w	r3, r3, #15
 800485c:	683a      	ldr	r2, [r7, #0]
 800485e:	429a      	cmp	r2, r3
 8004860:	d214      	bcs.n	800488c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004862:	4b08      	ldr	r3, [pc, #32]	@ (8004884 <HAL_RCC_ClockConfig+0x240>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f023 020f 	bic.w	r2, r3, #15
 800486a:	4906      	ldr	r1, [pc, #24]	@ (8004884 <HAL_RCC_ClockConfig+0x240>)
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	4313      	orrs	r3, r2
 8004870:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004872:	4b04      	ldr	r3, [pc, #16]	@ (8004884 <HAL_RCC_ClockConfig+0x240>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 030f 	and.w	r3, r3, #15
 800487a:	683a      	ldr	r2, [r7, #0]
 800487c:	429a      	cmp	r2, r3
 800487e:	d005      	beq.n	800488c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e086      	b.n	8004992 <HAL_RCC_ClockConfig+0x34e>
 8004884:	52002000 	.word	0x52002000
 8004888:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0304 	and.w	r3, r3, #4
 8004894:	2b00      	cmp	r3, #0
 8004896:	d010      	beq.n	80048ba <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	691a      	ldr	r2, [r3, #16]
 800489c:	4b3f      	ldr	r3, [pc, #252]	@ (800499c <HAL_RCC_ClockConfig+0x358>)
 800489e:	699b      	ldr	r3, [r3, #24]
 80048a0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d208      	bcs.n	80048ba <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80048a8:	4b3c      	ldr	r3, [pc, #240]	@ (800499c <HAL_RCC_ClockConfig+0x358>)
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	4939      	ldr	r1, [pc, #228]	@ (800499c <HAL_RCC_ClockConfig+0x358>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0308 	and.w	r3, r3, #8
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d010      	beq.n	80048e8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	695a      	ldr	r2, [r3, #20]
 80048ca:	4b34      	ldr	r3, [pc, #208]	@ (800499c <HAL_RCC_ClockConfig+0x358>)
 80048cc:	69db      	ldr	r3, [r3, #28]
 80048ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d208      	bcs.n	80048e8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80048d6:	4b31      	ldr	r3, [pc, #196]	@ (800499c <HAL_RCC_ClockConfig+0x358>)
 80048d8:	69db      	ldr	r3, [r3, #28]
 80048da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	492e      	ldr	r1, [pc, #184]	@ (800499c <HAL_RCC_ClockConfig+0x358>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0310 	and.w	r3, r3, #16
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d010      	beq.n	8004916 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	699a      	ldr	r2, [r3, #24]
 80048f8:	4b28      	ldr	r3, [pc, #160]	@ (800499c <HAL_RCC_ClockConfig+0x358>)
 80048fa:	69db      	ldr	r3, [r3, #28]
 80048fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004900:	429a      	cmp	r2, r3
 8004902:	d208      	bcs.n	8004916 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004904:	4b25      	ldr	r3, [pc, #148]	@ (800499c <HAL_RCC_ClockConfig+0x358>)
 8004906:	69db      	ldr	r3, [r3, #28]
 8004908:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	699b      	ldr	r3, [r3, #24]
 8004910:	4922      	ldr	r1, [pc, #136]	@ (800499c <HAL_RCC_ClockConfig+0x358>)
 8004912:	4313      	orrs	r3, r2
 8004914:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0320 	and.w	r3, r3, #32
 800491e:	2b00      	cmp	r3, #0
 8004920:	d010      	beq.n	8004944 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	69da      	ldr	r2, [r3, #28]
 8004926:	4b1d      	ldr	r3, [pc, #116]	@ (800499c <HAL_RCC_ClockConfig+0x358>)
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800492e:	429a      	cmp	r2, r3
 8004930:	d208      	bcs.n	8004944 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004932:	4b1a      	ldr	r3, [pc, #104]	@ (800499c <HAL_RCC_ClockConfig+0x358>)
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	69db      	ldr	r3, [r3, #28]
 800493e:	4917      	ldr	r1, [pc, #92]	@ (800499c <HAL_RCC_ClockConfig+0x358>)
 8004940:	4313      	orrs	r3, r2
 8004942:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004944:	f000 f834 	bl	80049b0 <HAL_RCC_GetSysClockFreq>
 8004948:	4602      	mov	r2, r0
 800494a:	4b14      	ldr	r3, [pc, #80]	@ (800499c <HAL_RCC_ClockConfig+0x358>)
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	0a1b      	lsrs	r3, r3, #8
 8004950:	f003 030f 	and.w	r3, r3, #15
 8004954:	4912      	ldr	r1, [pc, #72]	@ (80049a0 <HAL_RCC_ClockConfig+0x35c>)
 8004956:	5ccb      	ldrb	r3, [r1, r3]
 8004958:	f003 031f 	and.w	r3, r3, #31
 800495c:	fa22 f303 	lsr.w	r3, r2, r3
 8004960:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004962:	4b0e      	ldr	r3, [pc, #56]	@ (800499c <HAL_RCC_ClockConfig+0x358>)
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	f003 030f 	and.w	r3, r3, #15
 800496a:	4a0d      	ldr	r2, [pc, #52]	@ (80049a0 <HAL_RCC_ClockConfig+0x35c>)
 800496c:	5cd3      	ldrb	r3, [r2, r3]
 800496e:	f003 031f 	and.w	r3, r3, #31
 8004972:	693a      	ldr	r2, [r7, #16]
 8004974:	fa22 f303 	lsr.w	r3, r2, r3
 8004978:	4a0a      	ldr	r2, [pc, #40]	@ (80049a4 <HAL_RCC_ClockConfig+0x360>)
 800497a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800497c:	4a0a      	ldr	r2, [pc, #40]	@ (80049a8 <HAL_RCC_ClockConfig+0x364>)
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004982:	4b0a      	ldr	r3, [pc, #40]	@ (80049ac <HAL_RCC_ClockConfig+0x368>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4618      	mov	r0, r3
 8004988:	f7fe f89c 	bl	8002ac4 <HAL_InitTick>
 800498c:	4603      	mov	r3, r0
 800498e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004990:	7bfb      	ldrb	r3, [r7, #15]
}
 8004992:	4618      	mov	r0, r3
 8004994:	3718      	adds	r7, #24
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	58024400 	.word	0x58024400
 80049a0:	0800a0d4 	.word	0x0800a0d4
 80049a4:	24000004 	.word	0x24000004
 80049a8:	24000000 	.word	0x24000000
 80049ac:	24000008 	.word	0x24000008

080049b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b089      	sub	sp, #36	@ 0x24
 80049b4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049b6:	4bb3      	ldr	r3, [pc, #716]	@ (8004c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80049be:	2b18      	cmp	r3, #24
 80049c0:	f200 8155 	bhi.w	8004c6e <HAL_RCC_GetSysClockFreq+0x2be>
 80049c4:	a201      	add	r2, pc, #4	@ (adr r2, 80049cc <HAL_RCC_GetSysClockFreq+0x1c>)
 80049c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ca:	bf00      	nop
 80049cc:	08004a31 	.word	0x08004a31
 80049d0:	08004c6f 	.word	0x08004c6f
 80049d4:	08004c6f 	.word	0x08004c6f
 80049d8:	08004c6f 	.word	0x08004c6f
 80049dc:	08004c6f 	.word	0x08004c6f
 80049e0:	08004c6f 	.word	0x08004c6f
 80049e4:	08004c6f 	.word	0x08004c6f
 80049e8:	08004c6f 	.word	0x08004c6f
 80049ec:	08004a57 	.word	0x08004a57
 80049f0:	08004c6f 	.word	0x08004c6f
 80049f4:	08004c6f 	.word	0x08004c6f
 80049f8:	08004c6f 	.word	0x08004c6f
 80049fc:	08004c6f 	.word	0x08004c6f
 8004a00:	08004c6f 	.word	0x08004c6f
 8004a04:	08004c6f 	.word	0x08004c6f
 8004a08:	08004c6f 	.word	0x08004c6f
 8004a0c:	08004a5d 	.word	0x08004a5d
 8004a10:	08004c6f 	.word	0x08004c6f
 8004a14:	08004c6f 	.word	0x08004c6f
 8004a18:	08004c6f 	.word	0x08004c6f
 8004a1c:	08004c6f 	.word	0x08004c6f
 8004a20:	08004c6f 	.word	0x08004c6f
 8004a24:	08004c6f 	.word	0x08004c6f
 8004a28:	08004c6f 	.word	0x08004c6f
 8004a2c:	08004a63 	.word	0x08004a63
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a30:	4b94      	ldr	r3, [pc, #592]	@ (8004c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0320 	and.w	r3, r3, #32
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d009      	beq.n	8004a50 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a3c:	4b91      	ldr	r3, [pc, #580]	@ (8004c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	08db      	lsrs	r3, r3, #3
 8004a42:	f003 0303 	and.w	r3, r3, #3
 8004a46:	4a90      	ldr	r2, [pc, #576]	@ (8004c88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004a48:	fa22 f303 	lsr.w	r3, r2, r3
 8004a4c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004a4e:	e111      	b.n	8004c74 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004a50:	4b8d      	ldr	r3, [pc, #564]	@ (8004c88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004a52:	61bb      	str	r3, [r7, #24]
      break;
 8004a54:	e10e      	b.n	8004c74 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004a56:	4b8d      	ldr	r3, [pc, #564]	@ (8004c8c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004a58:	61bb      	str	r3, [r7, #24]
      break;
 8004a5a:	e10b      	b.n	8004c74 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004a5c:	4b8c      	ldr	r3, [pc, #560]	@ (8004c90 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004a5e:	61bb      	str	r3, [r7, #24]
      break;
 8004a60:	e108      	b.n	8004c74 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a62:	4b88      	ldr	r3, [pc, #544]	@ (8004c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a66:	f003 0303 	and.w	r3, r3, #3
 8004a6a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004a6c:	4b85      	ldr	r3, [pc, #532]	@ (8004c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a70:	091b      	lsrs	r3, r3, #4
 8004a72:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a76:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004a78:	4b82      	ldr	r3, [pc, #520]	@ (8004c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a7c:	f003 0301 	and.w	r3, r3, #1
 8004a80:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004a82:	4b80      	ldr	r3, [pc, #512]	@ (8004c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a86:	08db      	lsrs	r3, r3, #3
 8004a88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	fb02 f303 	mul.w	r3, r2, r3
 8004a92:	ee07 3a90 	vmov	s15, r3
 8004a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a9a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f000 80e1 	beq.w	8004c68 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	f000 8083 	beq.w	8004bb4 <HAL_RCC_GetSysClockFreq+0x204>
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	f200 80a1 	bhi.w	8004bf8 <HAL_RCC_GetSysClockFreq+0x248>
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d003      	beq.n	8004ac4 <HAL_RCC_GetSysClockFreq+0x114>
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d056      	beq.n	8004b70 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004ac2:	e099      	b.n	8004bf8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ac4:	4b6f      	ldr	r3, [pc, #444]	@ (8004c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0320 	and.w	r3, r3, #32
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d02d      	beq.n	8004b2c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ad0:	4b6c      	ldr	r3, [pc, #432]	@ (8004c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	08db      	lsrs	r3, r3, #3
 8004ad6:	f003 0303 	and.w	r3, r3, #3
 8004ada:	4a6b      	ldr	r2, [pc, #428]	@ (8004c88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004adc:	fa22 f303 	lsr.w	r3, r2, r3
 8004ae0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	ee07 3a90 	vmov	s15, r3
 8004ae8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	ee07 3a90 	vmov	s15, r3
 8004af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004afa:	4b62      	ldr	r3, [pc, #392]	@ (8004c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b02:	ee07 3a90 	vmov	s15, r3
 8004b06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b0e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004c94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b26:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004b2a:	e087      	b.n	8004c3c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	ee07 3a90 	vmov	s15, r3
 8004b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b36:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004c98 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004b3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b3e:	4b51      	ldr	r3, [pc, #324]	@ (8004c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b46:	ee07 3a90 	vmov	s15, r3
 8004b4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b52:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004c94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004b6e:	e065      	b.n	8004c3c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	ee07 3a90 	vmov	s15, r3
 8004b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b7a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004c9c <HAL_RCC_GetSysClockFreq+0x2ec>
 8004b7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b82:	4b40      	ldr	r3, [pc, #256]	@ (8004c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b8a:	ee07 3a90 	vmov	s15, r3
 8004b8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b92:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b96:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004c94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ba2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004bb2:	e043      	b.n	8004c3c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	ee07 3a90 	vmov	s15, r3
 8004bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bbe:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004ca0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004bc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bc6:	4b2f      	ldr	r3, [pc, #188]	@ (8004c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bce:	ee07 3a90 	vmov	s15, r3
 8004bd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004bda:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004c94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004bde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004be2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004be6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bf2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004bf6:	e021      	b.n	8004c3c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	ee07 3a90 	vmov	s15, r3
 8004bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c02:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004c9c <HAL_RCC_GetSysClockFreq+0x2ec>
 8004c06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c0a:	4b1e      	ldr	r3, [pc, #120]	@ (8004c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c12:	ee07 3a90 	vmov	s15, r3
 8004c16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c1e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004c94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004c3a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004c3c:	4b11      	ldr	r3, [pc, #68]	@ (8004c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c40:	0a5b      	lsrs	r3, r3, #9
 8004c42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c46:	3301      	adds	r3, #1
 8004c48:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	ee07 3a90 	vmov	s15, r3
 8004c50:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c54:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c60:	ee17 3a90 	vmov	r3, s15
 8004c64:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004c66:	e005      	b.n	8004c74 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	61bb      	str	r3, [r7, #24]
      break;
 8004c6c:	e002      	b.n	8004c74 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004c6e:	4b07      	ldr	r3, [pc, #28]	@ (8004c8c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004c70:	61bb      	str	r3, [r7, #24]
      break;
 8004c72:	bf00      	nop
  }

  return sysclockfreq;
 8004c74:	69bb      	ldr	r3, [r7, #24]
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3724      	adds	r7, #36	@ 0x24
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	58024400 	.word	0x58024400
 8004c88:	03d09000 	.word	0x03d09000
 8004c8c:	003d0900 	.word	0x003d0900
 8004c90:	017d7840 	.word	0x017d7840
 8004c94:	46000000 	.word	0x46000000
 8004c98:	4c742400 	.word	0x4c742400
 8004c9c:	4a742400 	.word	0x4a742400
 8004ca0:	4bbebc20 	.word	0x4bbebc20

08004ca4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004caa:	f7ff fe81 	bl	80049b0 <HAL_RCC_GetSysClockFreq>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	4b10      	ldr	r3, [pc, #64]	@ (8004cf4 <HAL_RCC_GetHCLKFreq+0x50>)
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	0a1b      	lsrs	r3, r3, #8
 8004cb6:	f003 030f 	and.w	r3, r3, #15
 8004cba:	490f      	ldr	r1, [pc, #60]	@ (8004cf8 <HAL_RCC_GetHCLKFreq+0x54>)
 8004cbc:	5ccb      	ldrb	r3, [r1, r3]
 8004cbe:	f003 031f 	and.w	r3, r3, #31
 8004cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8004cc6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004cc8:	4b0a      	ldr	r3, [pc, #40]	@ (8004cf4 <HAL_RCC_GetHCLKFreq+0x50>)
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	f003 030f 	and.w	r3, r3, #15
 8004cd0:	4a09      	ldr	r2, [pc, #36]	@ (8004cf8 <HAL_RCC_GetHCLKFreq+0x54>)
 8004cd2:	5cd3      	ldrb	r3, [r2, r3]
 8004cd4:	f003 031f 	and.w	r3, r3, #31
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	fa22 f303 	lsr.w	r3, r2, r3
 8004cde:	4a07      	ldr	r2, [pc, #28]	@ (8004cfc <HAL_RCC_GetHCLKFreq+0x58>)
 8004ce0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004ce2:	4a07      	ldr	r2, [pc, #28]	@ (8004d00 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004ce8:	4b04      	ldr	r3, [pc, #16]	@ (8004cfc <HAL_RCC_GetHCLKFreq+0x58>)
 8004cea:	681b      	ldr	r3, [r3, #0]
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3708      	adds	r7, #8
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	58024400 	.word	0x58024400
 8004cf8:	0800a0d4 	.word	0x0800a0d4
 8004cfc:	24000004 	.word	0x24000004
 8004d00:	24000000 	.word	0x24000000

08004d04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004d08:	f7ff ffcc 	bl	8004ca4 <HAL_RCC_GetHCLKFreq>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	4b06      	ldr	r3, [pc, #24]	@ (8004d28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d10:	69db      	ldr	r3, [r3, #28]
 8004d12:	091b      	lsrs	r3, r3, #4
 8004d14:	f003 0307 	and.w	r3, r3, #7
 8004d18:	4904      	ldr	r1, [pc, #16]	@ (8004d2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d1a:	5ccb      	ldrb	r3, [r1, r3]
 8004d1c:	f003 031f 	and.w	r3, r3, #31
 8004d20:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	58024400 	.word	0x58024400
 8004d2c:	0800a0d4 	.word	0x0800a0d4

08004d30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004d34:	f7ff ffb6 	bl	8004ca4 <HAL_RCC_GetHCLKFreq>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	4b06      	ldr	r3, [pc, #24]	@ (8004d54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d3c:	69db      	ldr	r3, [r3, #28]
 8004d3e:	0a1b      	lsrs	r3, r3, #8
 8004d40:	f003 0307 	and.w	r3, r3, #7
 8004d44:	4904      	ldr	r1, [pc, #16]	@ (8004d58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d46:	5ccb      	ldrb	r3, [r1, r3]
 8004d48:	f003 031f 	and.w	r3, r3, #31
 8004d4c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	58024400 	.word	0x58024400
 8004d58:	0800a0d4 	.word	0x0800a0d4

08004d5c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d60:	b0c6      	sub	sp, #280	@ 0x118
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d68:	2300      	movs	r3, #0
 8004d6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d6e:	2300      	movs	r3, #0
 8004d70:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d7c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004d80:	2500      	movs	r5, #0
 8004d82:	ea54 0305 	orrs.w	r3, r4, r5
 8004d86:	d049      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004d88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d8e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004d92:	d02f      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004d94:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004d98:	d828      	bhi.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004d9a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004d9e:	d01a      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004da0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004da4:	d822      	bhi.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d003      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004daa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004dae:	d007      	beq.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004db0:	e01c      	b.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004db2:	4bab      	ldr	r3, [pc, #684]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db6:	4aaa      	ldr	r2, [pc, #680]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004db8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004dbc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004dbe:	e01a      	b.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dc4:	3308      	adds	r3, #8
 8004dc6:	2102      	movs	r1, #2
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f001 fc25 	bl	8006618 <RCCEx_PLL2_Config>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004dd4:	e00f      	b.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004dd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dda:	3328      	adds	r3, #40	@ 0x28
 8004ddc:	2102      	movs	r1, #2
 8004dde:	4618      	mov	r0, r3
 8004de0:	f001 fccc 	bl	800677c <RCCEx_PLL3_Config>
 8004de4:	4603      	mov	r3, r0
 8004de6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004dea:	e004      	b.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004df2:	e000      	b.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004df4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004df6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d10a      	bne.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004dfe:	4b98      	ldr	r3, [pc, #608]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004e00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e02:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004e06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e0c:	4a94      	ldr	r2, [pc, #592]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004e0e:	430b      	orrs	r3, r1
 8004e10:	6513      	str	r3, [r2, #80]	@ 0x50
 8004e12:	e003      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e18:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004e1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e24:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004e28:	f04f 0900 	mov.w	r9, #0
 8004e2c:	ea58 0309 	orrs.w	r3, r8, r9
 8004e30:	d047      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004e32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e38:	2b04      	cmp	r3, #4
 8004e3a:	d82a      	bhi.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004e3c:	a201      	add	r2, pc, #4	@ (adr r2, 8004e44 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e42:	bf00      	nop
 8004e44:	08004e59 	.word	0x08004e59
 8004e48:	08004e67 	.word	0x08004e67
 8004e4c:	08004e7d 	.word	0x08004e7d
 8004e50:	08004e9b 	.word	0x08004e9b
 8004e54:	08004e9b 	.word	0x08004e9b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e58:	4b81      	ldr	r3, [pc, #516]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e5c:	4a80      	ldr	r2, [pc, #512]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004e5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004e64:	e01a      	b.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e6a:	3308      	adds	r3, #8
 8004e6c:	2100      	movs	r1, #0
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f001 fbd2 	bl	8006618 <RCCEx_PLL2_Config>
 8004e74:	4603      	mov	r3, r0
 8004e76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004e7a:	e00f      	b.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e80:	3328      	adds	r3, #40	@ 0x28
 8004e82:	2100      	movs	r1, #0
 8004e84:	4618      	mov	r0, r3
 8004e86:	f001 fc79 	bl	800677c <RCCEx_PLL3_Config>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004e90:	e004      	b.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004e98:	e000      	b.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004e9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d10a      	bne.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ea4:	4b6e      	ldr	r3, [pc, #440]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004ea6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ea8:	f023 0107 	bic.w	r1, r3, #7
 8004eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004eb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eb2:	4a6b      	ldr	r2, [pc, #428]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004eb4:	430b      	orrs	r3, r1
 8004eb6:	6513      	str	r3, [r2, #80]	@ 0x50
 8004eb8:	e003      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ebe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004ec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eca:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8004ece:	f04f 0b00 	mov.w	fp, #0
 8004ed2:	ea5a 030b 	orrs.w	r3, sl, fp
 8004ed6:	d05b      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004ed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004edc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004ee0:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8004ee4:	d03b      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8004ee6:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8004eea:	d834      	bhi.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004eec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004ef0:	d037      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004ef2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004ef6:	d82e      	bhi.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004ef8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004efc:	d033      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004efe:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004f02:	d828      	bhi.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004f04:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f08:	d01a      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8004f0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f0e:	d822      	bhi.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d003      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8004f14:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f18:	d007      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004f1a:	e01c      	b.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f1c:	4b50      	ldr	r3, [pc, #320]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f20:	4a4f      	ldr	r2, [pc, #316]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004f28:	e01e      	b.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f2e:	3308      	adds	r3, #8
 8004f30:	2100      	movs	r1, #0
 8004f32:	4618      	mov	r0, r3
 8004f34:	f001 fb70 	bl	8006618 <RCCEx_PLL2_Config>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004f3e:	e013      	b.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f44:	3328      	adds	r3, #40	@ 0x28
 8004f46:	2100      	movs	r1, #0
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f001 fc17 	bl	800677c <RCCEx_PLL3_Config>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004f54:	e008      	b.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004f5c:	e004      	b.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004f5e:	bf00      	nop
 8004f60:	e002      	b.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004f62:	bf00      	nop
 8004f64:	e000      	b.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004f66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d10b      	bne.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004f70:	4b3b      	ldr	r3, [pc, #236]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f74:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f7c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004f80:	4a37      	ldr	r2, [pc, #220]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004f82:	430b      	orrs	r3, r1
 8004f84:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f86:	e003      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f8c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f98:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004f9c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004fa6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004faa:	460b      	mov	r3, r1
 8004fac:	4313      	orrs	r3, r2
 8004fae:	d05d      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004fb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fb4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004fb8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004fbc:	d03b      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004fbe:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004fc2:	d834      	bhi.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004fc4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004fc8:	d037      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8004fca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004fce:	d82e      	bhi.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004fd0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004fd4:	d033      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8004fd6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004fda:	d828      	bhi.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004fdc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004fe0:	d01a      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8004fe2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004fe6:	d822      	bhi.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d003      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004fec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ff0:	d007      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004ff2:	e01c      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ff4:	4b1a      	ldr	r3, [pc, #104]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff8:	4a19      	ldr	r2, [pc, #100]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004ffa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ffe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005000:	e01e      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005002:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005006:	3308      	adds	r3, #8
 8005008:	2100      	movs	r1, #0
 800500a:	4618      	mov	r0, r3
 800500c:	f001 fb04 	bl	8006618 <RCCEx_PLL2_Config>
 8005010:	4603      	mov	r3, r0
 8005012:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005016:	e013      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005018:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800501c:	3328      	adds	r3, #40	@ 0x28
 800501e:	2100      	movs	r1, #0
 8005020:	4618      	mov	r0, r3
 8005022:	f001 fbab 	bl	800677c <RCCEx_PLL3_Config>
 8005026:	4603      	mov	r3, r0
 8005028:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800502c:	e008      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005034:	e004      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005036:	bf00      	nop
 8005038:	e002      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800503a:	bf00      	nop
 800503c:	e000      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800503e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005040:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005044:	2b00      	cmp	r3, #0
 8005046:	d10d      	bne.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005048:	4b05      	ldr	r3, [pc, #20]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800504a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800504c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005050:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005054:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005058:	4a01      	ldr	r2, [pc, #4]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800505a:	430b      	orrs	r3, r1
 800505c:	6593      	str	r3, [r2, #88]	@ 0x58
 800505e:	e005      	b.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005060:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005064:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005068:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800506c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005074:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005078:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800507c:	2300      	movs	r3, #0
 800507e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005082:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005086:	460b      	mov	r3, r1
 8005088:	4313      	orrs	r3, r2
 800508a:	d03a      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800508c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005092:	2b30      	cmp	r3, #48	@ 0x30
 8005094:	d01f      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8005096:	2b30      	cmp	r3, #48	@ 0x30
 8005098:	d819      	bhi.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x372>
 800509a:	2b20      	cmp	r3, #32
 800509c:	d00c      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800509e:	2b20      	cmp	r3, #32
 80050a0:	d815      	bhi.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x372>
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d019      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80050a6:	2b10      	cmp	r3, #16
 80050a8:	d111      	bne.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050aa:	4baa      	ldr	r3, [pc, #680]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80050ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ae:	4aa9      	ldr	r2, [pc, #676]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80050b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80050b6:	e011      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80050b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050bc:	3308      	adds	r3, #8
 80050be:	2102      	movs	r1, #2
 80050c0:	4618      	mov	r0, r3
 80050c2:	f001 faa9 	bl	8006618 <RCCEx_PLL2_Config>
 80050c6:	4603      	mov	r3, r0
 80050c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80050cc:	e006      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80050d4:	e002      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80050d6:	bf00      	nop
 80050d8:	e000      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80050da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d10a      	bne.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80050e4:	4b9b      	ldr	r3, [pc, #620]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80050e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050e8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80050ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050f2:	4a98      	ldr	r2, [pc, #608]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80050f4:	430b      	orrs	r3, r1
 80050f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80050f8:	e003      	b.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050fe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005102:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800510a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800510e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005112:	2300      	movs	r3, #0
 8005114:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005118:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800511c:	460b      	mov	r3, r1
 800511e:	4313      	orrs	r3, r2
 8005120:	d051      	beq.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005122:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005126:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005128:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800512c:	d035      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800512e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005132:	d82e      	bhi.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005134:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005138:	d031      	beq.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x442>
 800513a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800513e:	d828      	bhi.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005140:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005144:	d01a      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005146:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800514a:	d822      	bhi.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800514c:	2b00      	cmp	r3, #0
 800514e:	d003      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005150:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005154:	d007      	beq.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8005156:	e01c      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005158:	4b7e      	ldr	r3, [pc, #504]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800515a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800515c:	4a7d      	ldr	r2, [pc, #500]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800515e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005162:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005164:	e01c      	b.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005166:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800516a:	3308      	adds	r3, #8
 800516c:	2100      	movs	r1, #0
 800516e:	4618      	mov	r0, r3
 8005170:	f001 fa52 	bl	8006618 <RCCEx_PLL2_Config>
 8005174:	4603      	mov	r3, r0
 8005176:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800517a:	e011      	b.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800517c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005180:	3328      	adds	r3, #40	@ 0x28
 8005182:	2100      	movs	r1, #0
 8005184:	4618      	mov	r0, r3
 8005186:	f001 faf9 	bl	800677c <RCCEx_PLL3_Config>
 800518a:	4603      	mov	r3, r0
 800518c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005190:	e006      	b.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005198:	e002      	b.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800519a:	bf00      	nop
 800519c:	e000      	b.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800519e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d10a      	bne.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80051a8:	4b6a      	ldr	r3, [pc, #424]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80051aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051ac:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80051b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051b6:	4a67      	ldr	r2, [pc, #412]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80051b8:	430b      	orrs	r3, r1
 80051ba:	6513      	str	r3, [r2, #80]	@ 0x50
 80051bc:	e003      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80051c2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80051c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ce:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80051d2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80051d6:	2300      	movs	r3, #0
 80051d8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80051dc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80051e0:	460b      	mov	r3, r1
 80051e2:	4313      	orrs	r3, r2
 80051e4:	d053      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80051e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80051f0:	d033      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80051f2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80051f6:	d82c      	bhi.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80051f8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80051fc:	d02f      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x502>
 80051fe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005202:	d826      	bhi.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005204:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005208:	d02b      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800520a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800520e:	d820      	bhi.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005210:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005214:	d012      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8005216:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800521a:	d81a      	bhi.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800521c:	2b00      	cmp	r3, #0
 800521e:	d022      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8005220:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005224:	d115      	bne.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005226:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800522a:	3308      	adds	r3, #8
 800522c:	2101      	movs	r1, #1
 800522e:	4618      	mov	r0, r3
 8005230:	f001 f9f2 	bl	8006618 <RCCEx_PLL2_Config>
 8005234:	4603      	mov	r3, r0
 8005236:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800523a:	e015      	b.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800523c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005240:	3328      	adds	r3, #40	@ 0x28
 8005242:	2101      	movs	r1, #1
 8005244:	4618      	mov	r0, r3
 8005246:	f001 fa99 	bl	800677c <RCCEx_PLL3_Config>
 800524a:	4603      	mov	r3, r0
 800524c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005250:	e00a      	b.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005258:	e006      	b.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800525a:	bf00      	nop
 800525c:	e004      	b.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800525e:	bf00      	nop
 8005260:	e002      	b.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005262:	bf00      	nop
 8005264:	e000      	b.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005266:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005268:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800526c:	2b00      	cmp	r3, #0
 800526e:	d10a      	bne.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005270:	4b38      	ldr	r3, [pc, #224]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005272:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005274:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005278:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800527c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800527e:	4a35      	ldr	r2, [pc, #212]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005280:	430b      	orrs	r3, r1
 8005282:	6513      	str	r3, [r2, #80]	@ 0x50
 8005284:	e003      	b.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005286:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800528a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800528e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005296:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800529a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800529e:	2300      	movs	r3, #0
 80052a0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80052a4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80052a8:	460b      	mov	r3, r1
 80052aa:	4313      	orrs	r3, r2
 80052ac:	d058      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80052ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80052b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80052ba:	d033      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80052bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80052c0:	d82c      	bhi.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80052c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052c6:	d02f      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80052c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052cc:	d826      	bhi.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80052ce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80052d2:	d02b      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80052d4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80052d8:	d820      	bhi.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80052da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80052de:	d012      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80052e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80052e4:	d81a      	bhi.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d022      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80052ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80052ee:	d115      	bne.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80052f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052f4:	3308      	adds	r3, #8
 80052f6:	2101      	movs	r1, #1
 80052f8:	4618      	mov	r0, r3
 80052fa:	f001 f98d 	bl	8006618 <RCCEx_PLL2_Config>
 80052fe:	4603      	mov	r3, r0
 8005300:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005304:	e015      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005306:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800530a:	3328      	adds	r3, #40	@ 0x28
 800530c:	2101      	movs	r1, #1
 800530e:	4618      	mov	r0, r3
 8005310:	f001 fa34 	bl	800677c <RCCEx_PLL3_Config>
 8005314:	4603      	mov	r3, r0
 8005316:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800531a:	e00a      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005322:	e006      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005324:	bf00      	nop
 8005326:	e004      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005328:	bf00      	nop
 800532a:	e002      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800532c:	bf00      	nop
 800532e:	e000      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005330:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005332:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005336:	2b00      	cmp	r3, #0
 8005338:	d10e      	bne.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800533a:	4b06      	ldr	r3, [pc, #24]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800533c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800533e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005342:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005346:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800534a:	4a02      	ldr	r2, [pc, #8]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800534c:	430b      	orrs	r3, r1
 800534e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005350:	e006      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8005352:	bf00      	nop
 8005354:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005358:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800535c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005360:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005368:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800536c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005370:	2300      	movs	r3, #0
 8005372:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005376:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800537a:	460b      	mov	r3, r1
 800537c:	4313      	orrs	r3, r2
 800537e:	d037      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005380:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005384:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005386:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800538a:	d00e      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800538c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005390:	d816      	bhi.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005392:	2b00      	cmp	r3, #0
 8005394:	d018      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8005396:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800539a:	d111      	bne.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800539c:	4bc4      	ldr	r3, [pc, #784]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800539e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a0:	4ac3      	ldr	r2, [pc, #780]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80053a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80053a8:	e00f      	b.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80053aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053ae:	3308      	adds	r3, #8
 80053b0:	2101      	movs	r1, #1
 80053b2:	4618      	mov	r0, r3
 80053b4:	f001 f930 	bl	8006618 <RCCEx_PLL2_Config>
 80053b8:	4603      	mov	r3, r0
 80053ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80053be:	e004      	b.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80053c6:	e000      	b.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80053c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d10a      	bne.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80053d2:	4bb7      	ldr	r3, [pc, #732]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80053d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053d6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80053da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053e0:	4ab3      	ldr	r2, [pc, #716]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80053e2:	430b      	orrs	r3, r1
 80053e4:	6513      	str	r3, [r2, #80]	@ 0x50
 80053e6:	e003      	b.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80053ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80053f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80053fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005400:	2300      	movs	r3, #0
 8005402:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005406:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800540a:	460b      	mov	r3, r1
 800540c:	4313      	orrs	r3, r2
 800540e:	d039      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005410:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005414:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005416:	2b03      	cmp	r3, #3
 8005418:	d81c      	bhi.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800541a:	a201      	add	r2, pc, #4	@ (adr r2, 8005420 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800541c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005420:	0800545d 	.word	0x0800545d
 8005424:	08005431 	.word	0x08005431
 8005428:	0800543f 	.word	0x0800543f
 800542c:	0800545d 	.word	0x0800545d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005430:	4b9f      	ldr	r3, [pc, #636]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005434:	4a9e      	ldr	r2, [pc, #632]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005436:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800543a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800543c:	e00f      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800543e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005442:	3308      	adds	r3, #8
 8005444:	2102      	movs	r1, #2
 8005446:	4618      	mov	r0, r3
 8005448:	f001 f8e6 	bl	8006618 <RCCEx_PLL2_Config>
 800544c:	4603      	mov	r3, r0
 800544e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005452:	e004      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800545a:	e000      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800545c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800545e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005462:	2b00      	cmp	r3, #0
 8005464:	d10a      	bne.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005466:	4b92      	ldr	r3, [pc, #584]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800546a:	f023 0103 	bic.w	r1, r3, #3
 800546e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005472:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005474:	4a8e      	ldr	r2, [pc, #568]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005476:	430b      	orrs	r3, r1
 8005478:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800547a:	e003      	b.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800547c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005480:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005484:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800548c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005490:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005494:	2300      	movs	r3, #0
 8005496:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800549a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800549e:	460b      	mov	r3, r1
 80054a0:	4313      	orrs	r3, r2
 80054a2:	f000 8099 	beq.w	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054a6:	4b83      	ldr	r3, [pc, #524]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a82      	ldr	r2, [pc, #520]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80054ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80054b2:	f7fd fb51 	bl	8002b58 <HAL_GetTick>
 80054b6:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80054ba:	e00b      	b.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054bc:	f7fd fb4c 	bl	8002b58 <HAL_GetTick>
 80054c0:	4602      	mov	r2, r0
 80054c2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	2b64      	cmp	r3, #100	@ 0x64
 80054ca:	d903      	bls.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80054d2:	e005      	b.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80054d4:	4b77      	ldr	r3, [pc, #476]	@ (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d0ed      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80054e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d173      	bne.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80054e8:	4b71      	ldr	r3, [pc, #452]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80054ea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80054ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80054f4:	4053      	eors	r3, r2
 80054f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d015      	beq.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80054fe:	4b6c      	ldr	r3, [pc, #432]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005500:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005502:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005506:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800550a:	4b69      	ldr	r3, [pc, #420]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800550c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800550e:	4a68      	ldr	r2, [pc, #416]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005510:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005514:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005516:	4b66      	ldr	r3, [pc, #408]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800551a:	4a65      	ldr	r2, [pc, #404]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800551c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005520:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005522:	4a63      	ldr	r2, [pc, #396]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005524:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005528:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800552a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800552e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005532:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005536:	d118      	bne.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005538:	f7fd fb0e 	bl	8002b58 <HAL_GetTick>
 800553c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005540:	e00d      	b.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005542:	f7fd fb09 	bl	8002b58 <HAL_GetTick>
 8005546:	4602      	mov	r2, r0
 8005548:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800554c:	1ad2      	subs	r2, r2, r3
 800554e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005552:	429a      	cmp	r2, r3
 8005554:	d903      	bls.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800555c:	e005      	b.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800555e:	4b54      	ldr	r3, [pc, #336]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005560:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005562:	f003 0302 	and.w	r3, r3, #2
 8005566:	2b00      	cmp	r3, #0
 8005568:	d0eb      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800556a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800556e:	2b00      	cmp	r3, #0
 8005570:	d129      	bne.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005572:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005576:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800557a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800557e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005582:	d10e      	bne.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005584:	4b4a      	ldr	r3, [pc, #296]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800558c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005590:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005594:	091a      	lsrs	r2, r3, #4
 8005596:	4b48      	ldr	r3, [pc, #288]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005598:	4013      	ands	r3, r2
 800559a:	4a45      	ldr	r2, [pc, #276]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800559c:	430b      	orrs	r3, r1
 800559e:	6113      	str	r3, [r2, #16]
 80055a0:	e005      	b.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x852>
 80055a2:	4b43      	ldr	r3, [pc, #268]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	4a42      	ldr	r2, [pc, #264]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80055a8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80055ac:	6113      	str	r3, [r2, #16]
 80055ae:	4b40      	ldr	r3, [pc, #256]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80055b0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80055b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80055ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055be:	4a3c      	ldr	r2, [pc, #240]	@ (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80055c0:	430b      	orrs	r3, r1
 80055c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80055c4:	e008      	b.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80055c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80055ca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80055ce:	e003      	b.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80055d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80055d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e0:	f002 0301 	and.w	r3, r2, #1
 80055e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80055e8:	2300      	movs	r3, #0
 80055ea:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80055ee:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80055f2:	460b      	mov	r3, r1
 80055f4:	4313      	orrs	r3, r2
 80055f6:	f000 808f 	beq.w	8005718 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80055fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005600:	2b28      	cmp	r3, #40	@ 0x28
 8005602:	d871      	bhi.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8005604:	a201      	add	r2, pc, #4	@ (adr r2, 800560c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8005606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800560a:	bf00      	nop
 800560c:	080056f1 	.word	0x080056f1
 8005610:	080056e9 	.word	0x080056e9
 8005614:	080056e9 	.word	0x080056e9
 8005618:	080056e9 	.word	0x080056e9
 800561c:	080056e9 	.word	0x080056e9
 8005620:	080056e9 	.word	0x080056e9
 8005624:	080056e9 	.word	0x080056e9
 8005628:	080056e9 	.word	0x080056e9
 800562c:	080056bd 	.word	0x080056bd
 8005630:	080056e9 	.word	0x080056e9
 8005634:	080056e9 	.word	0x080056e9
 8005638:	080056e9 	.word	0x080056e9
 800563c:	080056e9 	.word	0x080056e9
 8005640:	080056e9 	.word	0x080056e9
 8005644:	080056e9 	.word	0x080056e9
 8005648:	080056e9 	.word	0x080056e9
 800564c:	080056d3 	.word	0x080056d3
 8005650:	080056e9 	.word	0x080056e9
 8005654:	080056e9 	.word	0x080056e9
 8005658:	080056e9 	.word	0x080056e9
 800565c:	080056e9 	.word	0x080056e9
 8005660:	080056e9 	.word	0x080056e9
 8005664:	080056e9 	.word	0x080056e9
 8005668:	080056e9 	.word	0x080056e9
 800566c:	080056f1 	.word	0x080056f1
 8005670:	080056e9 	.word	0x080056e9
 8005674:	080056e9 	.word	0x080056e9
 8005678:	080056e9 	.word	0x080056e9
 800567c:	080056e9 	.word	0x080056e9
 8005680:	080056e9 	.word	0x080056e9
 8005684:	080056e9 	.word	0x080056e9
 8005688:	080056e9 	.word	0x080056e9
 800568c:	080056f1 	.word	0x080056f1
 8005690:	080056e9 	.word	0x080056e9
 8005694:	080056e9 	.word	0x080056e9
 8005698:	080056e9 	.word	0x080056e9
 800569c:	080056e9 	.word	0x080056e9
 80056a0:	080056e9 	.word	0x080056e9
 80056a4:	080056e9 	.word	0x080056e9
 80056a8:	080056e9 	.word	0x080056e9
 80056ac:	080056f1 	.word	0x080056f1
 80056b0:	58024400 	.word	0x58024400
 80056b4:	58024800 	.word	0x58024800
 80056b8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80056bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056c0:	3308      	adds	r3, #8
 80056c2:	2101      	movs	r1, #1
 80056c4:	4618      	mov	r0, r3
 80056c6:	f000 ffa7 	bl	8006618 <RCCEx_PLL2_Config>
 80056ca:	4603      	mov	r3, r0
 80056cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80056d0:	e00f      	b.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80056d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056d6:	3328      	adds	r3, #40	@ 0x28
 80056d8:	2101      	movs	r1, #1
 80056da:	4618      	mov	r0, r3
 80056dc:	f001 f84e 	bl	800677c <RCCEx_PLL3_Config>
 80056e0:	4603      	mov	r3, r0
 80056e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80056e6:	e004      	b.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80056ee:	e000      	b.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80056f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d10a      	bne.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80056fa:	4bbf      	ldr	r3, [pc, #764]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80056fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056fe:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005702:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005706:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005708:	4abb      	ldr	r2, [pc, #748]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800570a:	430b      	orrs	r3, r1
 800570c:	6553      	str	r3, [r2, #84]	@ 0x54
 800570e:	e003      	b.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005710:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005714:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005718:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800571c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005720:	f002 0302 	and.w	r3, r2, #2
 8005724:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005728:	2300      	movs	r3, #0
 800572a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800572e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005732:	460b      	mov	r3, r1
 8005734:	4313      	orrs	r3, r2
 8005736:	d041      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005738:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800573c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800573e:	2b05      	cmp	r3, #5
 8005740:	d824      	bhi.n	800578c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8005742:	a201      	add	r2, pc, #4	@ (adr r2, 8005748 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8005744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005748:	08005795 	.word	0x08005795
 800574c:	08005761 	.word	0x08005761
 8005750:	08005777 	.word	0x08005777
 8005754:	08005795 	.word	0x08005795
 8005758:	08005795 	.word	0x08005795
 800575c:	08005795 	.word	0x08005795
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005760:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005764:	3308      	adds	r3, #8
 8005766:	2101      	movs	r1, #1
 8005768:	4618      	mov	r0, r3
 800576a:	f000 ff55 	bl	8006618 <RCCEx_PLL2_Config>
 800576e:	4603      	mov	r3, r0
 8005770:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005774:	e00f      	b.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005776:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800577a:	3328      	adds	r3, #40	@ 0x28
 800577c:	2101      	movs	r1, #1
 800577e:	4618      	mov	r0, r3
 8005780:	f000 fffc 	bl	800677c <RCCEx_PLL3_Config>
 8005784:	4603      	mov	r3, r0
 8005786:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800578a:	e004      	b.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005792:	e000      	b.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8005794:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005796:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800579a:	2b00      	cmp	r3, #0
 800579c:	d10a      	bne.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800579e:	4b96      	ldr	r3, [pc, #600]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80057a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057a2:	f023 0107 	bic.w	r1, r3, #7
 80057a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057ac:	4a92      	ldr	r2, [pc, #584]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80057ae:	430b      	orrs	r3, r1
 80057b0:	6553      	str	r3, [r2, #84]	@ 0x54
 80057b2:	e003      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80057b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80057bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c4:	f002 0304 	and.w	r3, r2, #4
 80057c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80057cc:	2300      	movs	r3, #0
 80057ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80057d2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80057d6:	460b      	mov	r3, r1
 80057d8:	4313      	orrs	r3, r2
 80057da:	d044      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80057dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057e4:	2b05      	cmp	r3, #5
 80057e6:	d825      	bhi.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80057e8:	a201      	add	r2, pc, #4	@ (adr r2, 80057f0 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80057ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ee:	bf00      	nop
 80057f0:	0800583d 	.word	0x0800583d
 80057f4:	08005809 	.word	0x08005809
 80057f8:	0800581f 	.word	0x0800581f
 80057fc:	0800583d 	.word	0x0800583d
 8005800:	0800583d 	.word	0x0800583d
 8005804:	0800583d 	.word	0x0800583d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005808:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800580c:	3308      	adds	r3, #8
 800580e:	2101      	movs	r1, #1
 8005810:	4618      	mov	r0, r3
 8005812:	f000 ff01 	bl	8006618 <RCCEx_PLL2_Config>
 8005816:	4603      	mov	r3, r0
 8005818:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800581c:	e00f      	b.n	800583e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800581e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005822:	3328      	adds	r3, #40	@ 0x28
 8005824:	2101      	movs	r1, #1
 8005826:	4618      	mov	r0, r3
 8005828:	f000 ffa8 	bl	800677c <RCCEx_PLL3_Config>
 800582c:	4603      	mov	r3, r0
 800582e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005832:	e004      	b.n	800583e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800583a:	e000      	b.n	800583e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800583c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800583e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005842:	2b00      	cmp	r3, #0
 8005844:	d10b      	bne.n	800585e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005846:	4b6c      	ldr	r3, [pc, #432]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800584a:	f023 0107 	bic.w	r1, r3, #7
 800584e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005852:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005856:	4a68      	ldr	r2, [pc, #416]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005858:	430b      	orrs	r3, r1
 800585a:	6593      	str	r3, [r2, #88]	@ 0x58
 800585c:	e003      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800585e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005862:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005866:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800586a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800586e:	f002 0320 	and.w	r3, r2, #32
 8005872:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005876:	2300      	movs	r3, #0
 8005878:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800587c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005880:	460b      	mov	r3, r1
 8005882:	4313      	orrs	r3, r2
 8005884:	d055      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005886:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800588a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800588e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005892:	d033      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8005894:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005898:	d82c      	bhi.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800589a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800589e:	d02f      	beq.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80058a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058a4:	d826      	bhi.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80058a6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80058aa:	d02b      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80058ac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80058b0:	d820      	bhi.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80058b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058b6:	d012      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80058b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058bc:	d81a      	bhi.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d022      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80058c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80058c6:	d115      	bne.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058cc:	3308      	adds	r3, #8
 80058ce:	2100      	movs	r1, #0
 80058d0:	4618      	mov	r0, r3
 80058d2:	f000 fea1 	bl	8006618 <RCCEx_PLL2_Config>
 80058d6:	4603      	mov	r3, r0
 80058d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80058dc:	e015      	b.n	800590a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80058de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058e2:	3328      	adds	r3, #40	@ 0x28
 80058e4:	2102      	movs	r1, #2
 80058e6:	4618      	mov	r0, r3
 80058e8:	f000 ff48 	bl	800677c <RCCEx_PLL3_Config>
 80058ec:	4603      	mov	r3, r0
 80058ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80058f2:	e00a      	b.n	800590a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80058fa:	e006      	b.n	800590a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80058fc:	bf00      	nop
 80058fe:	e004      	b.n	800590a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005900:	bf00      	nop
 8005902:	e002      	b.n	800590a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005904:	bf00      	nop
 8005906:	e000      	b.n	800590a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005908:	bf00      	nop
    }

    if (ret == HAL_OK)
 800590a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800590e:	2b00      	cmp	r3, #0
 8005910:	d10b      	bne.n	800592a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005912:	4b39      	ldr	r3, [pc, #228]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005914:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005916:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800591a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800591e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005922:	4a35      	ldr	r2, [pc, #212]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005924:	430b      	orrs	r3, r1
 8005926:	6553      	str	r3, [r2, #84]	@ 0x54
 8005928:	e003      	b.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800592a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800592e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005932:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800593e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005942:	2300      	movs	r3, #0
 8005944:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005948:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800594c:	460b      	mov	r3, r1
 800594e:	4313      	orrs	r3, r2
 8005950:	d058      	beq.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005952:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005956:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800595a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800595e:	d033      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8005960:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005964:	d82c      	bhi.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005966:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800596a:	d02f      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800596c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005970:	d826      	bhi.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005972:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005976:	d02b      	beq.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005978:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800597c:	d820      	bhi.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800597e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005982:	d012      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8005984:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005988:	d81a      	bhi.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800598a:	2b00      	cmp	r3, #0
 800598c:	d022      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800598e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005992:	d115      	bne.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005994:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005998:	3308      	adds	r3, #8
 800599a:	2100      	movs	r1, #0
 800599c:	4618      	mov	r0, r3
 800599e:	f000 fe3b 	bl	8006618 <RCCEx_PLL2_Config>
 80059a2:	4603      	mov	r3, r0
 80059a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80059a8:	e015      	b.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80059aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059ae:	3328      	adds	r3, #40	@ 0x28
 80059b0:	2102      	movs	r1, #2
 80059b2:	4618      	mov	r0, r3
 80059b4:	f000 fee2 	bl	800677c <RCCEx_PLL3_Config>
 80059b8:	4603      	mov	r3, r0
 80059ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80059be:	e00a      	b.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80059c6:	e006      	b.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80059c8:	bf00      	nop
 80059ca:	e004      	b.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80059cc:	bf00      	nop
 80059ce:	e002      	b.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80059d0:	bf00      	nop
 80059d2:	e000      	b.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80059d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d10e      	bne.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80059de:	4b06      	ldr	r3, [pc, #24]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80059e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059e2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80059e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80059ee:	4a02      	ldr	r2, [pc, #8]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80059f0:	430b      	orrs	r3, r1
 80059f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80059f4:	e006      	b.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80059f6:	bf00      	nop
 80059f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a00:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005a04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a0c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005a10:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005a14:	2300      	movs	r3, #0
 8005a16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005a1a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005a1e:	460b      	mov	r3, r1
 8005a20:	4313      	orrs	r3, r2
 8005a22:	d055      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a28:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a2c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005a30:	d033      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8005a32:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005a36:	d82c      	bhi.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005a38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a3c:	d02f      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8005a3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a42:	d826      	bhi.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005a44:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005a48:	d02b      	beq.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8005a4a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005a4e:	d820      	bhi.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005a50:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a54:	d012      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8005a56:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a5a:	d81a      	bhi.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d022      	beq.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005a60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a64:	d115      	bne.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a6a:	3308      	adds	r3, #8
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f000 fdd2 	bl	8006618 <RCCEx_PLL2_Config>
 8005a74:	4603      	mov	r3, r0
 8005a76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005a7a:	e015      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a80:	3328      	adds	r3, #40	@ 0x28
 8005a82:	2102      	movs	r1, #2
 8005a84:	4618      	mov	r0, r3
 8005a86:	f000 fe79 	bl	800677c <RCCEx_PLL3_Config>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005a90:	e00a      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005a98:	e006      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005a9a:	bf00      	nop
 8005a9c:	e004      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005a9e:	bf00      	nop
 8005aa0:	e002      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005aa2:	bf00      	nop
 8005aa4:	e000      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005aa6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005aa8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d10b      	bne.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005ab0:	4ba0      	ldr	r3, [pc, #640]	@ (8005d34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005ab2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ab4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005ab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005abc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ac0:	4a9c      	ldr	r2, [pc, #624]	@ (8005d34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005ac2:	430b      	orrs	r3, r1
 8005ac4:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ac6:	e003      	b.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ac8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005acc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8005ad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad8:	f002 0308 	and.w	r3, r2, #8
 8005adc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005ae6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005aea:	460b      	mov	r3, r1
 8005aec:	4313      	orrs	r3, r2
 8005aee:	d01e      	beq.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8005af0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005af4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005af8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005afc:	d10c      	bne.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005afe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b02:	3328      	adds	r3, #40	@ 0x28
 8005b04:	2102      	movs	r1, #2
 8005b06:	4618      	mov	r0, r3
 8005b08:	f000 fe38 	bl	800677c <RCCEx_PLL3_Config>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d002      	beq.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8005b18:	4b86      	ldr	r3, [pc, #536]	@ (8005d34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005b1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b1c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005b20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b28:	4a82      	ldr	r2, [pc, #520]	@ (8005d34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005b2a:	430b      	orrs	r3, r1
 8005b2c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005b2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b36:	f002 0310 	and.w	r3, r2, #16
 8005b3a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005b3e:	2300      	movs	r3, #0
 8005b40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005b44:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005b48:	460b      	mov	r3, r1
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	d01e      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005b4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b5a:	d10c      	bne.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005b5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b60:	3328      	adds	r3, #40	@ 0x28
 8005b62:	2102      	movs	r1, #2
 8005b64:	4618      	mov	r0, r3
 8005b66:	f000 fe09 	bl	800677c <RCCEx_PLL3_Config>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d002      	beq.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005b76:	4b6f      	ldr	r3, [pc, #444]	@ (8005d34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b7a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005b7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b86:	4a6b      	ldr	r2, [pc, #428]	@ (8005d34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005b88:	430b      	orrs	r3, r1
 8005b8a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b94:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005b98:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005b9e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	d03e      	beq.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005bb0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005bb4:	d022      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8005bb6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005bba:	d81b      	bhi.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d003      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8005bc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bc4:	d00b      	beq.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8005bc6:	e015      	b.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bcc:	3308      	adds	r3, #8
 8005bce:	2100      	movs	r1, #0
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f000 fd21 	bl	8006618 <RCCEx_PLL2_Config>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005bdc:	e00f      	b.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005bde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005be2:	3328      	adds	r3, #40	@ 0x28
 8005be4:	2102      	movs	r1, #2
 8005be6:	4618      	mov	r0, r3
 8005be8:	f000 fdc8 	bl	800677c <RCCEx_PLL3_Config>
 8005bec:	4603      	mov	r3, r0
 8005bee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005bf2:	e004      	b.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005bfa:	e000      	b.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8005bfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bfe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d10b      	bne.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005c06:	4b4b      	ldr	r3, [pc, #300]	@ (8005d34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005c08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c0a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005c0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c12:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005c16:	4a47      	ldr	r2, [pc, #284]	@ (8005d34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005c18:	430b      	orrs	r3, r1
 8005c1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c1c:	e003      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c1e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c22:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c2e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005c32:	673b      	str	r3, [r7, #112]	@ 0x70
 8005c34:	2300      	movs	r3, #0
 8005c36:	677b      	str	r3, [r7, #116]	@ 0x74
 8005c38:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	d03b      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c4a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005c4e:	d01f      	beq.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8005c50:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005c54:	d818      	bhi.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8005c56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c5a:	d003      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8005c5c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c60:	d007      	beq.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8005c62:	e011      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c64:	4b33      	ldr	r3, [pc, #204]	@ (8005d34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c68:	4a32      	ldr	r2, [pc, #200]	@ (8005d34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005c6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005c70:	e00f      	b.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c76:	3328      	adds	r3, #40	@ 0x28
 8005c78:	2101      	movs	r1, #1
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f000 fd7e 	bl	800677c <RCCEx_PLL3_Config>
 8005c80:	4603      	mov	r3, r0
 8005c82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8005c86:	e004      	b.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005c8e:	e000      	b.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8005c90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c92:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d10b      	bne.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c9a:	4b26      	ldr	r3, [pc, #152]	@ (8005d34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005c9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c9e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005ca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ca6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005caa:	4a22      	ldr	r2, [pc, #136]	@ (8005d34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005cac:	430b      	orrs	r3, r1
 8005cae:	6553      	str	r3, [r2, #84]	@ 0x54
 8005cb0:	e003      	b.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cb2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005cb6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005cba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005cc6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005cc8:	2300      	movs	r3, #0
 8005cca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005ccc:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005cd0:	460b      	mov	r3, r1
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	d034      	beq.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005cd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d003      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8005ce0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ce4:	d007      	beq.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8005ce6:	e011      	b.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ce8:	4b12      	ldr	r3, [pc, #72]	@ (8005d34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cec:	4a11      	ldr	r2, [pc, #68]	@ (8005d34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005cee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005cf2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005cf4:	e00e      	b.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005cf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cfa:	3308      	adds	r3, #8
 8005cfc:	2102      	movs	r1, #2
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f000 fc8a 	bl	8006618 <RCCEx_PLL2_Config>
 8005d04:	4603      	mov	r3, r0
 8005d06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005d0a:	e003      	b.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005d12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d10d      	bne.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005d1c:	4b05      	ldr	r3, [pc, #20]	@ (8005d34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005d1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d20:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d2a:	4a02      	ldr	r2, [pc, #8]	@ (8005d34 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005d2c:	430b      	orrs	r3, r1
 8005d2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005d30:	e006      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8005d32:	bf00      	nop
 8005d34:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d3c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005d40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d48:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005d4c:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d4e:	2300      	movs	r3, #0
 8005d50:	667b      	str	r3, [r7, #100]	@ 0x64
 8005d52:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005d56:	460b      	mov	r3, r1
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	d00c      	beq.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d60:	3328      	adds	r3, #40	@ 0x28
 8005d62:	2102      	movs	r1, #2
 8005d64:	4618      	mov	r0, r3
 8005d66:	f000 fd09 	bl	800677c <RCCEx_PLL3_Config>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d002      	beq.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005d76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d7e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005d82:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005d84:	2300      	movs	r3, #0
 8005d86:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d88:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	d036      	beq.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d96:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d98:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d9c:	d018      	beq.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8005d9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005da2:	d811      	bhi.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005da4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005da8:	d014      	beq.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8005daa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005dae:	d80b      	bhi.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d011      	beq.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005db4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005db8:	d106      	bne.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dba:	4bb7      	ldr	r3, [pc, #732]	@ (8006098 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dbe:	4ab6      	ldr	r2, [pc, #728]	@ (8006098 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005dc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005dc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005dc6:	e008      	b.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005dce:	e004      	b.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005dd0:	bf00      	nop
 8005dd2:	e002      	b.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005dd4:	bf00      	nop
 8005dd6:	e000      	b.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005dd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dda:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d10a      	bne.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005de2:	4bad      	ldr	r3, [pc, #692]	@ (8006098 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005de4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005de6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005dea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005df0:	4aa9      	ldr	r2, [pc, #676]	@ (8006098 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005df2:	430b      	orrs	r3, r1
 8005df4:	6553      	str	r3, [r2, #84]	@ 0x54
 8005df6:	e003      	b.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005df8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005dfc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e08:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005e0c:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e0e:	2300      	movs	r3, #0
 8005e10:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e12:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005e16:	460b      	mov	r3, r1
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	d009      	beq.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005e1c:	4b9e      	ldr	r3, [pc, #632]	@ (8006098 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005e1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e20:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005e24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e2a:	4a9b      	ldr	r2, [pc, #620]	@ (8006098 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005e2c:	430b      	orrs	r3, r1
 8005e2e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e38:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005e3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e3e:	2300      	movs	r3, #0
 8005e40:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e42:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005e46:	460b      	mov	r3, r1
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	d009      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005e4c:	4b92      	ldr	r3, [pc, #584]	@ (8006098 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005e4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e50:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e58:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e5a:	4a8f      	ldr	r2, [pc, #572]	@ (8006098 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005e5c:	430b      	orrs	r3, r1
 8005e5e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e68:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005e6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e6e:	2300      	movs	r3, #0
 8005e70:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e72:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005e76:	460b      	mov	r3, r1
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	d00e      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005e7c:	4b86      	ldr	r3, [pc, #536]	@ (8006098 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005e7e:	691b      	ldr	r3, [r3, #16]
 8005e80:	4a85      	ldr	r2, [pc, #532]	@ (8006098 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005e82:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005e86:	6113      	str	r3, [r2, #16]
 8005e88:	4b83      	ldr	r3, [pc, #524]	@ (8006098 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005e8a:	6919      	ldr	r1, [r3, #16]
 8005e8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e90:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005e94:	4a80      	ldr	r2, [pc, #512]	@ (8006098 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005e96:	430b      	orrs	r3, r1
 8005e98:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005e9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005ea6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005eac:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	d009      	beq.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005eb6:	4b78      	ldr	r3, [pc, #480]	@ (8006098 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005eba:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ec2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ec4:	4a74      	ldr	r2, [pc, #464]	@ (8006098 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005ec6:	430b      	orrs	r3, r1
 8005ec8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005eca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005ed6:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ed8:	2300      	movs	r3, #0
 8005eda:	637b      	str	r3, [r7, #52]	@ 0x34
 8005edc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005ee0:	460b      	mov	r3, r1
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	d00a      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005ee6:	4b6c      	ldr	r3, [pc, #432]	@ (8006098 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005ee8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eea:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005eee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ef6:	4a68      	ldr	r2, [pc, #416]	@ (8006098 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005ef8:	430b      	orrs	r3, r1
 8005efa:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f04:	2100      	movs	r1, #0
 8005f06:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005f08:	f003 0301 	and.w	r3, r3, #1
 8005f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f0e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005f12:	460b      	mov	r3, r1
 8005f14:	4313      	orrs	r3, r2
 8005f16:	d011      	beq.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f1c:	3308      	adds	r3, #8
 8005f1e:	2100      	movs	r1, #0
 8005f20:	4618      	mov	r0, r3
 8005f22:	f000 fb79 	bl	8006618 <RCCEx_PLL2_Config>
 8005f26:	4603      	mov	r3, r0
 8005f28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005f2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d003      	beq.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f38:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005f3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f44:	2100      	movs	r1, #0
 8005f46:	6239      	str	r1, [r7, #32]
 8005f48:	f003 0302 	and.w	r3, r3, #2
 8005f4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f4e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005f52:	460b      	mov	r3, r1
 8005f54:	4313      	orrs	r3, r2
 8005f56:	d011      	beq.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f5c:	3308      	adds	r3, #8
 8005f5e:	2101      	movs	r1, #1
 8005f60:	4618      	mov	r0, r3
 8005f62:	f000 fb59 	bl	8006618 <RCCEx_PLL2_Config>
 8005f66:	4603      	mov	r3, r0
 8005f68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005f6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d003      	beq.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f84:	2100      	movs	r1, #0
 8005f86:	61b9      	str	r1, [r7, #24]
 8005f88:	f003 0304 	and.w	r3, r3, #4
 8005f8c:	61fb      	str	r3, [r7, #28]
 8005f8e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005f92:	460b      	mov	r3, r1
 8005f94:	4313      	orrs	r3, r2
 8005f96:	d011      	beq.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f9c:	3308      	adds	r3, #8
 8005f9e:	2102      	movs	r1, #2
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f000 fb39 	bl	8006618 <RCCEx_PLL2_Config>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005fac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d003      	beq.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fb4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005fb8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc4:	2100      	movs	r1, #0
 8005fc6:	6139      	str	r1, [r7, #16]
 8005fc8:	f003 0308 	and.w	r3, r3, #8
 8005fcc:	617b      	str	r3, [r7, #20]
 8005fce:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	d011      	beq.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fdc:	3328      	adds	r3, #40	@ 0x28
 8005fde:	2100      	movs	r1, #0
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f000 fbcb 	bl	800677c <RCCEx_PLL3_Config>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8005fec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d003      	beq.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ff4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ff8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005ffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006004:	2100      	movs	r1, #0
 8006006:	60b9      	str	r1, [r7, #8]
 8006008:	f003 0310 	and.w	r3, r3, #16
 800600c:	60fb      	str	r3, [r7, #12]
 800600e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006012:	460b      	mov	r3, r1
 8006014:	4313      	orrs	r3, r2
 8006016:	d011      	beq.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006018:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800601c:	3328      	adds	r3, #40	@ 0x28
 800601e:	2101      	movs	r1, #1
 8006020:	4618      	mov	r0, r3
 8006022:	f000 fbab 	bl	800677c <RCCEx_PLL3_Config>
 8006026:	4603      	mov	r3, r0
 8006028:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800602c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006030:	2b00      	cmp	r3, #0
 8006032:	d003      	beq.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006034:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006038:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800603c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006044:	2100      	movs	r1, #0
 8006046:	6039      	str	r1, [r7, #0]
 8006048:	f003 0320 	and.w	r3, r3, #32
 800604c:	607b      	str	r3, [r7, #4]
 800604e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006052:	460b      	mov	r3, r1
 8006054:	4313      	orrs	r3, r2
 8006056:	d011      	beq.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800605c:	3328      	adds	r3, #40	@ 0x28
 800605e:	2102      	movs	r1, #2
 8006060:	4618      	mov	r0, r3
 8006062:	f000 fb8b 	bl	800677c <RCCEx_PLL3_Config>
 8006066:	4603      	mov	r3, r0
 8006068:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800606c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006070:	2b00      	cmp	r3, #0
 8006072:	d003      	beq.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006074:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006078:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800607c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8006080:	2b00      	cmp	r3, #0
 8006082:	d101      	bne.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8006084:	2300      	movs	r3, #0
 8006086:	e000      	b.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8006088:	2301      	movs	r3, #1
}
 800608a:	4618      	mov	r0, r3
 800608c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8006090:	46bd      	mov	sp, r7
 8006092:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006096:	bf00      	nop
 8006098:	58024400 	.word	0x58024400

0800609c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80060a0:	f7fe fe00 	bl	8004ca4 <HAL_RCC_GetHCLKFreq>
 80060a4:	4602      	mov	r2, r0
 80060a6:	4b06      	ldr	r3, [pc, #24]	@ (80060c0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80060a8:	6a1b      	ldr	r3, [r3, #32]
 80060aa:	091b      	lsrs	r3, r3, #4
 80060ac:	f003 0307 	and.w	r3, r3, #7
 80060b0:	4904      	ldr	r1, [pc, #16]	@ (80060c4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80060b2:	5ccb      	ldrb	r3, [r1, r3]
 80060b4:	f003 031f 	and.w	r3, r3, #31
 80060b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80060bc:	4618      	mov	r0, r3
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	58024400 	.word	0x58024400
 80060c4:	0800a0d4 	.word	0x0800a0d4

080060c8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b089      	sub	sp, #36	@ 0x24
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80060d0:	4ba1      	ldr	r3, [pc, #644]	@ (8006358 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060d4:	f003 0303 	and.w	r3, r3, #3
 80060d8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80060da:	4b9f      	ldr	r3, [pc, #636]	@ (8006358 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060de:	0b1b      	lsrs	r3, r3, #12
 80060e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80060e4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80060e6:	4b9c      	ldr	r3, [pc, #624]	@ (8006358 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ea:	091b      	lsrs	r3, r3, #4
 80060ec:	f003 0301 	and.w	r3, r3, #1
 80060f0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80060f2:	4b99      	ldr	r3, [pc, #612]	@ (8006358 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060f6:	08db      	lsrs	r3, r3, #3
 80060f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80060fc:	693a      	ldr	r2, [r7, #16]
 80060fe:	fb02 f303 	mul.w	r3, r2, r3
 8006102:	ee07 3a90 	vmov	s15, r3
 8006106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800610a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	2b00      	cmp	r3, #0
 8006112:	f000 8111 	beq.w	8006338 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	2b02      	cmp	r3, #2
 800611a:	f000 8083 	beq.w	8006224 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800611e:	69bb      	ldr	r3, [r7, #24]
 8006120:	2b02      	cmp	r3, #2
 8006122:	f200 80a1 	bhi.w	8006268 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d003      	beq.n	8006134 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	2b01      	cmp	r3, #1
 8006130:	d056      	beq.n	80061e0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006132:	e099      	b.n	8006268 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006134:	4b88      	ldr	r3, [pc, #544]	@ (8006358 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f003 0320 	and.w	r3, r3, #32
 800613c:	2b00      	cmp	r3, #0
 800613e:	d02d      	beq.n	800619c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006140:	4b85      	ldr	r3, [pc, #532]	@ (8006358 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	08db      	lsrs	r3, r3, #3
 8006146:	f003 0303 	and.w	r3, r3, #3
 800614a:	4a84      	ldr	r2, [pc, #528]	@ (800635c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800614c:	fa22 f303 	lsr.w	r3, r2, r3
 8006150:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	ee07 3a90 	vmov	s15, r3
 8006158:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	ee07 3a90 	vmov	s15, r3
 8006162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006166:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800616a:	4b7b      	ldr	r3, [pc, #492]	@ (8006358 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800616c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800616e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006172:	ee07 3a90 	vmov	s15, r3
 8006176:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800617a:	ed97 6a03 	vldr	s12, [r7, #12]
 800617e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006360 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006182:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006186:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800618a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800618e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006196:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800619a:	e087      	b.n	80062ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	ee07 3a90 	vmov	s15, r3
 80061a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061a6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006364 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80061aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061ae:	4b6a      	ldr	r3, [pc, #424]	@ (8006358 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061b6:	ee07 3a90 	vmov	s15, r3
 80061ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061be:	ed97 6a03 	vldr	s12, [r7, #12]
 80061c2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006360 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80061c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061de:	e065      	b.n	80062ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	ee07 3a90 	vmov	s15, r3
 80061e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ea:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006368 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80061ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061f2:	4b59      	ldr	r3, [pc, #356]	@ (8006358 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061fa:	ee07 3a90 	vmov	s15, r3
 80061fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006202:	ed97 6a03 	vldr	s12, [r7, #12]
 8006206:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006360 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800620a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800620e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006212:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006216:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800621a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800621e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006222:	e043      	b.n	80062ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	ee07 3a90 	vmov	s15, r3
 800622a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800622e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800636c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006232:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006236:	4b48      	ldr	r3, [pc, #288]	@ (8006358 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006238:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800623a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800623e:	ee07 3a90 	vmov	s15, r3
 8006242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006246:	ed97 6a03 	vldr	s12, [r7, #12]
 800624a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006360 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800624e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006252:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006256:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800625a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800625e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006262:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006266:	e021      	b.n	80062ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	ee07 3a90 	vmov	s15, r3
 800626e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006272:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006368 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006276:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800627a:	4b37      	ldr	r3, [pc, #220]	@ (8006358 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800627c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800627e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006282:	ee07 3a90 	vmov	s15, r3
 8006286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800628a:	ed97 6a03 	vldr	s12, [r7, #12]
 800628e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006360 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006292:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006296:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800629a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800629e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062aa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80062ac:	4b2a      	ldr	r3, [pc, #168]	@ (8006358 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062b0:	0a5b      	lsrs	r3, r3, #9
 80062b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062b6:	ee07 3a90 	vmov	s15, r3
 80062ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80062c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80062ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062d2:	ee17 2a90 	vmov	r2, s15
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80062da:	4b1f      	ldr	r3, [pc, #124]	@ (8006358 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062de:	0c1b      	lsrs	r3, r3, #16
 80062e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062e4:	ee07 3a90 	vmov	s15, r3
 80062e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80062f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80062f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006300:	ee17 2a90 	vmov	r2, s15
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006308:	4b13      	ldr	r3, [pc, #76]	@ (8006358 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800630a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800630c:	0e1b      	lsrs	r3, r3, #24
 800630e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006312:	ee07 3a90 	vmov	s15, r3
 8006316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800631a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800631e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006322:	edd7 6a07 	vldr	s13, [r7, #28]
 8006326:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800632a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800632e:	ee17 2a90 	vmov	r2, s15
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006336:	e008      	b.n	800634a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	609a      	str	r2, [r3, #8]
}
 800634a:	bf00      	nop
 800634c:	3724      	adds	r7, #36	@ 0x24
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr
 8006356:	bf00      	nop
 8006358:	58024400 	.word	0x58024400
 800635c:	03d09000 	.word	0x03d09000
 8006360:	46000000 	.word	0x46000000
 8006364:	4c742400 	.word	0x4c742400
 8006368:	4a742400 	.word	0x4a742400
 800636c:	4bbebc20 	.word	0x4bbebc20

08006370 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006370:	b480      	push	{r7}
 8006372:	b089      	sub	sp, #36	@ 0x24
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006378:	4ba1      	ldr	r3, [pc, #644]	@ (8006600 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800637a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800637c:	f003 0303 	and.w	r3, r3, #3
 8006380:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006382:	4b9f      	ldr	r3, [pc, #636]	@ (8006600 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006386:	0d1b      	lsrs	r3, r3, #20
 8006388:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800638c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800638e:	4b9c      	ldr	r3, [pc, #624]	@ (8006600 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006392:	0a1b      	lsrs	r3, r3, #8
 8006394:	f003 0301 	and.w	r3, r3, #1
 8006398:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800639a:	4b99      	ldr	r3, [pc, #612]	@ (8006600 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800639c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800639e:	08db      	lsrs	r3, r3, #3
 80063a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80063a4:	693a      	ldr	r2, [r7, #16]
 80063a6:	fb02 f303 	mul.w	r3, r2, r3
 80063aa:	ee07 3a90 	vmov	s15, r3
 80063ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063b2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	f000 8111 	beq.w	80065e0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	2b02      	cmp	r3, #2
 80063c2:	f000 8083 	beq.w	80064cc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	f200 80a1 	bhi.w	8006510 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d003      	beq.n	80063dc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d056      	beq.n	8006488 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80063da:	e099      	b.n	8006510 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063dc:	4b88      	ldr	r3, [pc, #544]	@ (8006600 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 0320 	and.w	r3, r3, #32
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d02d      	beq.n	8006444 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80063e8:	4b85      	ldr	r3, [pc, #532]	@ (8006600 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	08db      	lsrs	r3, r3, #3
 80063ee:	f003 0303 	and.w	r3, r3, #3
 80063f2:	4a84      	ldr	r2, [pc, #528]	@ (8006604 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80063f4:	fa22 f303 	lsr.w	r3, r2, r3
 80063f8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	ee07 3a90 	vmov	s15, r3
 8006400:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	ee07 3a90 	vmov	s15, r3
 800640a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800640e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006412:	4b7b      	ldr	r3, [pc, #492]	@ (8006600 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800641a:	ee07 3a90 	vmov	s15, r3
 800641e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006422:	ed97 6a03 	vldr	s12, [r7, #12]
 8006426:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006608 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800642a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800642e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006432:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006436:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800643a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800643e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006442:	e087      	b.n	8006554 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	ee07 3a90 	vmov	s15, r3
 800644a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800644e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800660c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006452:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006456:	4b6a      	ldr	r3, [pc, #424]	@ (8006600 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800645a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800645e:	ee07 3a90 	vmov	s15, r3
 8006462:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006466:	ed97 6a03 	vldr	s12, [r7, #12]
 800646a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006608 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800646e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006472:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006476:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800647a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800647e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006482:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006486:	e065      	b.n	8006554 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	ee07 3a90 	vmov	s15, r3
 800648e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006492:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006610 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006496:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800649a:	4b59      	ldr	r3, [pc, #356]	@ (8006600 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800649c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800649e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064a2:	ee07 3a90 	vmov	s15, r3
 80064a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80064ae:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006608 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80064b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80064ca:	e043      	b.n	8006554 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	ee07 3a90 	vmov	s15, r3
 80064d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064d6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006614 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80064da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064de:	4b48      	ldr	r3, [pc, #288]	@ (8006600 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064e6:	ee07 3a90 	vmov	s15, r3
 80064ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80064f2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006608 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80064f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006502:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800650a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800650e:	e021      	b.n	8006554 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	ee07 3a90 	vmov	s15, r3
 8006516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800651a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006610 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800651e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006522:	4b37      	ldr	r3, [pc, #220]	@ (8006600 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800652a:	ee07 3a90 	vmov	s15, r3
 800652e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006532:	ed97 6a03 	vldr	s12, [r7, #12]
 8006536:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006608 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800653a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800653e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006542:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006546:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800654a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800654e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006552:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006554:	4b2a      	ldr	r3, [pc, #168]	@ (8006600 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006558:	0a5b      	lsrs	r3, r3, #9
 800655a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800655e:	ee07 3a90 	vmov	s15, r3
 8006562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006566:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800656a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800656e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006572:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006576:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800657a:	ee17 2a90 	vmov	r2, s15
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006582:	4b1f      	ldr	r3, [pc, #124]	@ (8006600 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006586:	0c1b      	lsrs	r3, r3, #16
 8006588:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800658c:	ee07 3a90 	vmov	s15, r3
 8006590:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006594:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006598:	ee37 7a87 	vadd.f32	s14, s15, s14
 800659c:	edd7 6a07 	vldr	s13, [r7, #28]
 80065a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065a8:	ee17 2a90 	vmov	r2, s15
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80065b0:	4b13      	ldr	r3, [pc, #76]	@ (8006600 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065b4:	0e1b      	lsrs	r3, r3, #24
 80065b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065ba:	ee07 3a90 	vmov	s15, r3
 80065be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80065c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80065ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80065ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065d6:	ee17 2a90 	vmov	r2, s15
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80065de:	e008      	b.n	80065f2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	609a      	str	r2, [r3, #8]
}
 80065f2:	bf00      	nop
 80065f4:	3724      	adds	r7, #36	@ 0x24
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr
 80065fe:	bf00      	nop
 8006600:	58024400 	.word	0x58024400
 8006604:	03d09000 	.word	0x03d09000
 8006608:	46000000 	.word	0x46000000
 800660c:	4c742400 	.word	0x4c742400
 8006610:	4a742400 	.word	0x4a742400
 8006614:	4bbebc20 	.word	0x4bbebc20

08006618 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006622:	2300      	movs	r3, #0
 8006624:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006626:	4b53      	ldr	r3, [pc, #332]	@ (8006774 <RCCEx_PLL2_Config+0x15c>)
 8006628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800662a:	f003 0303 	and.w	r3, r3, #3
 800662e:	2b03      	cmp	r3, #3
 8006630:	d101      	bne.n	8006636 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	e099      	b.n	800676a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006636:	4b4f      	ldr	r3, [pc, #316]	@ (8006774 <RCCEx_PLL2_Config+0x15c>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a4e      	ldr	r2, [pc, #312]	@ (8006774 <RCCEx_PLL2_Config+0x15c>)
 800663c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006640:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006642:	f7fc fa89 	bl	8002b58 <HAL_GetTick>
 8006646:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006648:	e008      	b.n	800665c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800664a:	f7fc fa85 	bl	8002b58 <HAL_GetTick>
 800664e:	4602      	mov	r2, r0
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	1ad3      	subs	r3, r2, r3
 8006654:	2b02      	cmp	r3, #2
 8006656:	d901      	bls.n	800665c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006658:	2303      	movs	r3, #3
 800665a:	e086      	b.n	800676a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800665c:	4b45      	ldr	r3, [pc, #276]	@ (8006774 <RCCEx_PLL2_Config+0x15c>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006664:	2b00      	cmp	r3, #0
 8006666:	d1f0      	bne.n	800664a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006668:	4b42      	ldr	r3, [pc, #264]	@ (8006774 <RCCEx_PLL2_Config+0x15c>)
 800666a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800666c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	031b      	lsls	r3, r3, #12
 8006676:	493f      	ldr	r1, [pc, #252]	@ (8006774 <RCCEx_PLL2_Config+0x15c>)
 8006678:	4313      	orrs	r3, r2
 800667a:	628b      	str	r3, [r1, #40]	@ 0x28
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	3b01      	subs	r3, #1
 8006682:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	3b01      	subs	r3, #1
 800668c:	025b      	lsls	r3, r3, #9
 800668e:	b29b      	uxth	r3, r3
 8006690:	431a      	orrs	r2, r3
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	3b01      	subs	r3, #1
 8006698:	041b      	lsls	r3, r3, #16
 800669a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800669e:	431a      	orrs	r2, r3
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	3b01      	subs	r3, #1
 80066a6:	061b      	lsls	r3, r3, #24
 80066a8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80066ac:	4931      	ldr	r1, [pc, #196]	@ (8006774 <RCCEx_PLL2_Config+0x15c>)
 80066ae:	4313      	orrs	r3, r2
 80066b0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80066b2:	4b30      	ldr	r3, [pc, #192]	@ (8006774 <RCCEx_PLL2_Config+0x15c>)
 80066b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066b6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	695b      	ldr	r3, [r3, #20]
 80066be:	492d      	ldr	r1, [pc, #180]	@ (8006774 <RCCEx_PLL2_Config+0x15c>)
 80066c0:	4313      	orrs	r3, r2
 80066c2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80066c4:	4b2b      	ldr	r3, [pc, #172]	@ (8006774 <RCCEx_PLL2_Config+0x15c>)
 80066c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066c8:	f023 0220 	bic.w	r2, r3, #32
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	699b      	ldr	r3, [r3, #24]
 80066d0:	4928      	ldr	r1, [pc, #160]	@ (8006774 <RCCEx_PLL2_Config+0x15c>)
 80066d2:	4313      	orrs	r3, r2
 80066d4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80066d6:	4b27      	ldr	r3, [pc, #156]	@ (8006774 <RCCEx_PLL2_Config+0x15c>)
 80066d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066da:	4a26      	ldr	r2, [pc, #152]	@ (8006774 <RCCEx_PLL2_Config+0x15c>)
 80066dc:	f023 0310 	bic.w	r3, r3, #16
 80066e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80066e2:	4b24      	ldr	r3, [pc, #144]	@ (8006774 <RCCEx_PLL2_Config+0x15c>)
 80066e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80066e6:	4b24      	ldr	r3, [pc, #144]	@ (8006778 <RCCEx_PLL2_Config+0x160>)
 80066e8:	4013      	ands	r3, r2
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	69d2      	ldr	r2, [r2, #28]
 80066ee:	00d2      	lsls	r2, r2, #3
 80066f0:	4920      	ldr	r1, [pc, #128]	@ (8006774 <RCCEx_PLL2_Config+0x15c>)
 80066f2:	4313      	orrs	r3, r2
 80066f4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80066f6:	4b1f      	ldr	r3, [pc, #124]	@ (8006774 <RCCEx_PLL2_Config+0x15c>)
 80066f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066fa:	4a1e      	ldr	r2, [pc, #120]	@ (8006774 <RCCEx_PLL2_Config+0x15c>)
 80066fc:	f043 0310 	orr.w	r3, r3, #16
 8006700:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d106      	bne.n	8006716 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006708:	4b1a      	ldr	r3, [pc, #104]	@ (8006774 <RCCEx_PLL2_Config+0x15c>)
 800670a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800670c:	4a19      	ldr	r2, [pc, #100]	@ (8006774 <RCCEx_PLL2_Config+0x15c>)
 800670e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006712:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006714:	e00f      	b.n	8006736 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	2b01      	cmp	r3, #1
 800671a:	d106      	bne.n	800672a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800671c:	4b15      	ldr	r3, [pc, #84]	@ (8006774 <RCCEx_PLL2_Config+0x15c>)
 800671e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006720:	4a14      	ldr	r2, [pc, #80]	@ (8006774 <RCCEx_PLL2_Config+0x15c>)
 8006722:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006726:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006728:	e005      	b.n	8006736 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800672a:	4b12      	ldr	r3, [pc, #72]	@ (8006774 <RCCEx_PLL2_Config+0x15c>)
 800672c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800672e:	4a11      	ldr	r2, [pc, #68]	@ (8006774 <RCCEx_PLL2_Config+0x15c>)
 8006730:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006734:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006736:	4b0f      	ldr	r3, [pc, #60]	@ (8006774 <RCCEx_PLL2_Config+0x15c>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a0e      	ldr	r2, [pc, #56]	@ (8006774 <RCCEx_PLL2_Config+0x15c>)
 800673c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006740:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006742:	f7fc fa09 	bl	8002b58 <HAL_GetTick>
 8006746:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006748:	e008      	b.n	800675c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800674a:	f7fc fa05 	bl	8002b58 <HAL_GetTick>
 800674e:	4602      	mov	r2, r0
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	2b02      	cmp	r3, #2
 8006756:	d901      	bls.n	800675c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006758:	2303      	movs	r3, #3
 800675a:	e006      	b.n	800676a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800675c:	4b05      	ldr	r3, [pc, #20]	@ (8006774 <RCCEx_PLL2_Config+0x15c>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006764:	2b00      	cmp	r3, #0
 8006766:	d0f0      	beq.n	800674a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006768:	7bfb      	ldrb	r3, [r7, #15]
}
 800676a:	4618      	mov	r0, r3
 800676c:	3710      	adds	r7, #16
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	58024400 	.word	0x58024400
 8006778:	ffff0007 	.word	0xffff0007

0800677c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006786:	2300      	movs	r3, #0
 8006788:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800678a:	4b53      	ldr	r3, [pc, #332]	@ (80068d8 <RCCEx_PLL3_Config+0x15c>)
 800678c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800678e:	f003 0303 	and.w	r3, r3, #3
 8006792:	2b03      	cmp	r3, #3
 8006794:	d101      	bne.n	800679a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e099      	b.n	80068ce <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800679a:	4b4f      	ldr	r3, [pc, #316]	@ (80068d8 <RCCEx_PLL3_Config+0x15c>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a4e      	ldr	r2, [pc, #312]	@ (80068d8 <RCCEx_PLL3_Config+0x15c>)
 80067a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80067a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067a6:	f7fc f9d7 	bl	8002b58 <HAL_GetTick>
 80067aa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80067ac:	e008      	b.n	80067c0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80067ae:	f7fc f9d3 	bl	8002b58 <HAL_GetTick>
 80067b2:	4602      	mov	r2, r0
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	1ad3      	subs	r3, r2, r3
 80067b8:	2b02      	cmp	r3, #2
 80067ba:	d901      	bls.n	80067c0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80067bc:	2303      	movs	r3, #3
 80067be:	e086      	b.n	80068ce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80067c0:	4b45      	ldr	r3, [pc, #276]	@ (80068d8 <RCCEx_PLL3_Config+0x15c>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d1f0      	bne.n	80067ae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80067cc:	4b42      	ldr	r3, [pc, #264]	@ (80068d8 <RCCEx_PLL3_Config+0x15c>)
 80067ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067d0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	051b      	lsls	r3, r3, #20
 80067da:	493f      	ldr	r1, [pc, #252]	@ (80068d8 <RCCEx_PLL3_Config+0x15c>)
 80067dc:	4313      	orrs	r3, r2
 80067de:	628b      	str	r3, [r1, #40]	@ 0x28
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	3b01      	subs	r3, #1
 80067e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	3b01      	subs	r3, #1
 80067f0:	025b      	lsls	r3, r3, #9
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	431a      	orrs	r2, r3
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	3b01      	subs	r3, #1
 80067fc:	041b      	lsls	r3, r3, #16
 80067fe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006802:	431a      	orrs	r2, r3
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	691b      	ldr	r3, [r3, #16]
 8006808:	3b01      	subs	r3, #1
 800680a:	061b      	lsls	r3, r3, #24
 800680c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006810:	4931      	ldr	r1, [pc, #196]	@ (80068d8 <RCCEx_PLL3_Config+0x15c>)
 8006812:	4313      	orrs	r3, r2
 8006814:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006816:	4b30      	ldr	r3, [pc, #192]	@ (80068d8 <RCCEx_PLL3_Config+0x15c>)
 8006818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800681a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	695b      	ldr	r3, [r3, #20]
 8006822:	492d      	ldr	r1, [pc, #180]	@ (80068d8 <RCCEx_PLL3_Config+0x15c>)
 8006824:	4313      	orrs	r3, r2
 8006826:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006828:	4b2b      	ldr	r3, [pc, #172]	@ (80068d8 <RCCEx_PLL3_Config+0x15c>)
 800682a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800682c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	699b      	ldr	r3, [r3, #24]
 8006834:	4928      	ldr	r1, [pc, #160]	@ (80068d8 <RCCEx_PLL3_Config+0x15c>)
 8006836:	4313      	orrs	r3, r2
 8006838:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800683a:	4b27      	ldr	r3, [pc, #156]	@ (80068d8 <RCCEx_PLL3_Config+0x15c>)
 800683c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800683e:	4a26      	ldr	r2, [pc, #152]	@ (80068d8 <RCCEx_PLL3_Config+0x15c>)
 8006840:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006844:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006846:	4b24      	ldr	r3, [pc, #144]	@ (80068d8 <RCCEx_PLL3_Config+0x15c>)
 8006848:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800684a:	4b24      	ldr	r3, [pc, #144]	@ (80068dc <RCCEx_PLL3_Config+0x160>)
 800684c:	4013      	ands	r3, r2
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	69d2      	ldr	r2, [r2, #28]
 8006852:	00d2      	lsls	r2, r2, #3
 8006854:	4920      	ldr	r1, [pc, #128]	@ (80068d8 <RCCEx_PLL3_Config+0x15c>)
 8006856:	4313      	orrs	r3, r2
 8006858:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800685a:	4b1f      	ldr	r3, [pc, #124]	@ (80068d8 <RCCEx_PLL3_Config+0x15c>)
 800685c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800685e:	4a1e      	ldr	r2, [pc, #120]	@ (80068d8 <RCCEx_PLL3_Config+0x15c>)
 8006860:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006864:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d106      	bne.n	800687a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800686c:	4b1a      	ldr	r3, [pc, #104]	@ (80068d8 <RCCEx_PLL3_Config+0x15c>)
 800686e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006870:	4a19      	ldr	r2, [pc, #100]	@ (80068d8 <RCCEx_PLL3_Config+0x15c>)
 8006872:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006876:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006878:	e00f      	b.n	800689a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	2b01      	cmp	r3, #1
 800687e:	d106      	bne.n	800688e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006880:	4b15      	ldr	r3, [pc, #84]	@ (80068d8 <RCCEx_PLL3_Config+0x15c>)
 8006882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006884:	4a14      	ldr	r2, [pc, #80]	@ (80068d8 <RCCEx_PLL3_Config+0x15c>)
 8006886:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800688a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800688c:	e005      	b.n	800689a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800688e:	4b12      	ldr	r3, [pc, #72]	@ (80068d8 <RCCEx_PLL3_Config+0x15c>)
 8006890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006892:	4a11      	ldr	r2, [pc, #68]	@ (80068d8 <RCCEx_PLL3_Config+0x15c>)
 8006894:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006898:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800689a:	4b0f      	ldr	r3, [pc, #60]	@ (80068d8 <RCCEx_PLL3_Config+0x15c>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a0e      	ldr	r2, [pc, #56]	@ (80068d8 <RCCEx_PLL3_Config+0x15c>)
 80068a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068a6:	f7fc f957 	bl	8002b58 <HAL_GetTick>
 80068aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80068ac:	e008      	b.n	80068c0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80068ae:	f7fc f953 	bl	8002b58 <HAL_GetTick>
 80068b2:	4602      	mov	r2, r0
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	1ad3      	subs	r3, r2, r3
 80068b8:	2b02      	cmp	r3, #2
 80068ba:	d901      	bls.n	80068c0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80068bc:	2303      	movs	r3, #3
 80068be:	e006      	b.n	80068ce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80068c0:	4b05      	ldr	r3, [pc, #20]	@ (80068d8 <RCCEx_PLL3_Config+0x15c>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d0f0      	beq.n	80068ae <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80068cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3710      	adds	r7, #16
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	58024400 	.word	0x58024400
 80068dc:	ffff0007 	.word	0xffff0007

080068e0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b084      	sub	sp, #16
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d101      	bne.n	80068f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	e10f      	b.n	8006b12 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a87      	ldr	r2, [pc, #540]	@ (8006b1c <HAL_SPI_Init+0x23c>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d00f      	beq.n	8006922 <HAL_SPI_Init+0x42>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a86      	ldr	r2, [pc, #536]	@ (8006b20 <HAL_SPI_Init+0x240>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d00a      	beq.n	8006922 <HAL_SPI_Init+0x42>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a84      	ldr	r2, [pc, #528]	@ (8006b24 <HAL_SPI_Init+0x244>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d005      	beq.n	8006922 <HAL_SPI_Init+0x42>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	2b0f      	cmp	r3, #15
 800691c:	d901      	bls.n	8006922 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e0f7      	b.n	8006b12 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 fe2e 	bl	8007584 <SPI_GetPacketSize>
 8006928:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a7b      	ldr	r2, [pc, #492]	@ (8006b1c <HAL_SPI_Init+0x23c>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d00c      	beq.n	800694e <HAL_SPI_Init+0x6e>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a79      	ldr	r2, [pc, #484]	@ (8006b20 <HAL_SPI_Init+0x240>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d007      	beq.n	800694e <HAL_SPI_Init+0x6e>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a78      	ldr	r2, [pc, #480]	@ (8006b24 <HAL_SPI_Init+0x244>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d002      	beq.n	800694e <HAL_SPI_Init+0x6e>
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2b08      	cmp	r3, #8
 800694c:	d811      	bhi.n	8006972 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006952:	4a72      	ldr	r2, [pc, #456]	@ (8006b1c <HAL_SPI_Init+0x23c>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d009      	beq.n	800696c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a70      	ldr	r2, [pc, #448]	@ (8006b20 <HAL_SPI_Init+0x240>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d004      	beq.n	800696c <HAL_SPI_Init+0x8c>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a6f      	ldr	r2, [pc, #444]	@ (8006b24 <HAL_SPI_Init+0x244>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d104      	bne.n	8006976 <HAL_SPI_Init+0x96>
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2b10      	cmp	r3, #16
 8006970:	d901      	bls.n	8006976 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	e0cd      	b.n	8006b12 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800697c:	b2db      	uxtb	r3, r3
 800697e:	2b00      	cmp	r3, #0
 8006980:	d106      	bne.n	8006990 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f7fb fe4c 	bl	8002628 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2202      	movs	r2, #2
 8006994:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f022 0201 	bic.w	r2, r2, #1
 80069a6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80069b2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	699b      	ldr	r3, [r3, #24]
 80069b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80069bc:	d119      	bne.n	80069f2 <HAL_SPI_Init+0x112>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80069c6:	d103      	bne.n	80069d0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d008      	beq.n	80069e2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d10c      	bne.n	80069f2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80069dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80069e0:	d107      	bne.n	80069f2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80069f0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d00f      	beq.n	8006a1e <HAL_SPI_Init+0x13e>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	68db      	ldr	r3, [r3, #12]
 8006a02:	2b06      	cmp	r3, #6
 8006a04:	d90b      	bls.n	8006a1e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	430a      	orrs	r2, r1
 8006a1a:	601a      	str	r2, [r3, #0]
 8006a1c:	e007      	b.n	8006a2e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006a2c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	69da      	ldr	r2, [r3, #28]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a36:	431a      	orrs	r2, r3
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	431a      	orrs	r2, r3
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a40:	ea42 0103 	orr.w	r1, r2, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	68da      	ldr	r2, [r3, #12]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	430a      	orrs	r2, r1
 8006a4e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a58:	431a      	orrs	r2, r3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a5e:	431a      	orrs	r2, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	699b      	ldr	r3, [r3, #24]
 8006a64:	431a      	orrs	r2, r3
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	431a      	orrs	r2, r3
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	695b      	ldr	r3, [r3, #20]
 8006a70:	431a      	orrs	r2, r3
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a1b      	ldr	r3, [r3, #32]
 8006a76:	431a      	orrs	r2, r3
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	431a      	orrs	r2, r3
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a82:	431a      	orrs	r2, r3
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	431a      	orrs	r2, r3
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a8e:	ea42 0103 	orr.w	r1, r2, r3
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	430a      	orrs	r2, r1
 8006a9c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d113      	bne.n	8006ace <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006ab8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006acc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f022 0201 	bic.w	r2, r2, #1
 8006adc:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d00a      	beq.n	8006b00 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	430a      	orrs	r2, r1
 8006afe:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8006b10:	2300      	movs	r3, #0
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3710      	adds	r7, #16
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	40013000 	.word	0x40013000
 8006b20:	40003800 	.word	0x40003800
 8006b24:	40003c00 	.word	0x40003c00

08006b28 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b088      	sub	sp, #32
 8006b2c:	af02      	add	r7, sp, #8
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	603b      	str	r3, [r7, #0]
 8006b34:	4613      	mov	r3, r2
 8006b36:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	3320      	adds	r3, #32
 8006b3e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b40:	f7fc f80a 	bl	8002b58 <HAL_GetTick>
 8006b44:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d001      	beq.n	8006b56 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8006b52:	2302      	movs	r3, #2
 8006b54:	e1d1      	b.n	8006efa <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d002      	beq.n	8006b62 <HAL_SPI_Transmit+0x3a>
 8006b5c:	88fb      	ldrh	r3, [r7, #6]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d101      	bne.n	8006b66 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	e1c9      	b.n	8006efa <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d101      	bne.n	8006b74 <HAL_SPI_Transmit+0x4c>
 8006b70:	2302      	movs	r3, #2
 8006b72:	e1c2      	b.n	8006efa <HAL_SPI_Transmit+0x3d2>
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2203      	movs	r2, #3
 8006b80:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	68ba      	ldr	r2, [r7, #8]
 8006b90:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	88fa      	ldrh	r2, [r7, #6]
 8006b96:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	88fa      	ldrh	r2, [r7, #6]
 8006b9e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8006bcc:	d108      	bne.n	8006be0 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006bdc:	601a      	str	r2, [r3, #0]
 8006bde:	e009      	b.n	8006bf4 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8006bf2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	685a      	ldr	r2, [r3, #4]
 8006bfa:	4b96      	ldr	r3, [pc, #600]	@ (8006e54 <HAL_SPI_Transmit+0x32c>)
 8006bfc:	4013      	ands	r3, r2
 8006bfe:	88f9      	ldrh	r1, [r7, #6]
 8006c00:	68fa      	ldr	r2, [r7, #12]
 8006c02:	6812      	ldr	r2, [r2, #0]
 8006c04:	430b      	orrs	r3, r1
 8006c06:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f042 0201 	orr.w	r2, r2, #1
 8006c16:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006c20:	d107      	bne.n	8006c32 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c30:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	2b0f      	cmp	r3, #15
 8006c38:	d947      	bls.n	8006cca <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006c3a:	e03f      	b.n	8006cbc <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	695b      	ldr	r3, [r3, #20]
 8006c42:	f003 0302 	and.w	r3, r3, #2
 8006c46:	2b02      	cmp	r3, #2
 8006c48:	d114      	bne.n	8006c74 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	6812      	ldr	r2, [r2, #0]
 8006c54:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c5a:	1d1a      	adds	r2, r3, #4
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	3b01      	subs	r3, #1
 8006c6a:	b29a      	uxth	r2, r3
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006c72:	e023      	b.n	8006cbc <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c74:	f7fb ff70 	bl	8002b58 <HAL_GetTick>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	1ad3      	subs	r3, r2, r3
 8006c7e:	683a      	ldr	r2, [r7, #0]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d803      	bhi.n	8006c8c <HAL_SPI_Transmit+0x164>
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c8a:	d102      	bne.n	8006c92 <HAL_SPI_Transmit+0x16a>
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d114      	bne.n	8006cbc <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006c92:	68f8      	ldr	r0, [r7, #12]
 8006c94:	f000 fba8 	bl	80073e8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c9e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006cb8:	2303      	movs	r3, #3
 8006cba:	e11e      	b.n	8006efa <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d1b9      	bne.n	8006c3c <HAL_SPI_Transmit+0x114>
 8006cc8:	e0f1      	b.n	8006eae <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	2b07      	cmp	r3, #7
 8006cd0:	f240 80e6 	bls.w	8006ea0 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006cd4:	e05d      	b.n	8006d92 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	695b      	ldr	r3, [r3, #20]
 8006cdc:	f003 0302 	and.w	r3, r3, #2
 8006ce0:	2b02      	cmp	r3, #2
 8006ce2:	d132      	bne.n	8006d4a <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d918      	bls.n	8006d22 <HAL_SPI_Transmit+0x1fa>
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d014      	beq.n	8006d22 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	6812      	ldr	r2, [r2, #0]
 8006d02:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d08:	1d1a      	adds	r2, r3, #4
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	3b02      	subs	r3, #2
 8006d18:	b29a      	uxth	r2, r3
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006d20:	e037      	b.n	8006d92 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d26:	881a      	ldrh	r2, [r3, #0]
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d30:	1c9a      	adds	r2, r3, #2
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	b29a      	uxth	r2, r3
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006d48:	e023      	b.n	8006d92 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d4a:	f7fb ff05 	bl	8002b58 <HAL_GetTick>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	1ad3      	subs	r3, r2, r3
 8006d54:	683a      	ldr	r2, [r7, #0]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d803      	bhi.n	8006d62 <HAL_SPI_Transmit+0x23a>
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d60:	d102      	bne.n	8006d68 <HAL_SPI_Transmit+0x240>
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d114      	bne.n	8006d92 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006d68:	68f8      	ldr	r0, [r7, #12]
 8006d6a:	f000 fb3d 	bl	80073e8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d74:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2201      	movs	r2, #1
 8006d82:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006d8e:	2303      	movs	r3, #3
 8006d90:	e0b3      	b.n	8006efa <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d19b      	bne.n	8006cd6 <HAL_SPI_Transmit+0x1ae>
 8006d9e:	e086      	b.n	8006eae <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	695b      	ldr	r3, [r3, #20]
 8006da6:	f003 0302 	and.w	r3, r3, #2
 8006daa:	2b02      	cmp	r3, #2
 8006dac:	d154      	bne.n	8006e58 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	2b03      	cmp	r3, #3
 8006db8:	d918      	bls.n	8006dec <HAL_SPI_Transmit+0x2c4>
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dbe:	2b40      	cmp	r3, #64	@ 0x40
 8006dc0:	d914      	bls.n	8006dec <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	6812      	ldr	r2, [r2, #0]
 8006dcc:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dd2:	1d1a      	adds	r2, r3, #4
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	3b04      	subs	r3, #4
 8006de2:	b29a      	uxth	r2, r3
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006dea:	e059      	b.n	8006ea0 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d917      	bls.n	8006e28 <HAL_SPI_Transmit+0x300>
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d013      	beq.n	8006e28 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e04:	881a      	ldrh	r2, [r3, #0]
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e0e:	1c9a      	adds	r2, r3, #2
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	3b02      	subs	r3, #2
 8006e1e:	b29a      	uxth	r2, r3
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006e26:	e03b      	b.n	8006ea0 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	3320      	adds	r3, #32
 8006e32:	7812      	ldrb	r2, [r2, #0]
 8006e34:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e3a:	1c5a      	adds	r2, r3, #1
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	3b01      	subs	r3, #1
 8006e4a:	b29a      	uxth	r2, r3
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006e52:	e025      	b.n	8006ea0 <HAL_SPI_Transmit+0x378>
 8006e54:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e58:	f7fb fe7e 	bl	8002b58 <HAL_GetTick>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	1ad3      	subs	r3, r2, r3
 8006e62:	683a      	ldr	r2, [r7, #0]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d803      	bhi.n	8006e70 <HAL_SPI_Transmit+0x348>
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e6e:	d102      	bne.n	8006e76 <HAL_SPI_Transmit+0x34e>
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d114      	bne.n	8006ea0 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006e76:	68f8      	ldr	r0, [r7, #12]
 8006e78:	f000 fab6 	bl	80073e8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e82:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006e9c:	2303      	movs	r3, #3
 8006e9e:	e02c      	b.n	8006efa <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	f47f af79 	bne.w	8006da0 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	9300      	str	r3, [sp, #0]
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	2108      	movs	r1, #8
 8006eb8:	68f8      	ldr	r0, [r7, #12]
 8006eba:	f000 fb35 	bl	8007528 <SPI_WaitOnFlagUntilTimeout>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d007      	beq.n	8006ed4 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006eca:	f043 0220 	orr.w	r2, r3, #32
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006ed4:	68f8      	ldr	r0, [r7, #12]
 8006ed6:	f000 fa87 	bl	80073e8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2201      	movs	r2, #1
 8006ede:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d001      	beq.n	8006ef8 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e000      	b.n	8006efa <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8006ef8:	2300      	movs	r3, #0
  }
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3718      	adds	r7, #24
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	bf00      	nop

08006f04 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b088      	sub	sp, #32
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	60b9      	str	r1, [r7, #8]
 8006f0e:	603b      	str	r3, [r7, #0]
 8006f10:	4613      	mov	r3, r2
 8006f12:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f18:	095b      	lsrs	r3, r3, #5
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	3301      	adds	r3, #1
 8006f1e:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	3330      	adds	r3, #48	@ 0x30
 8006f26:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f28:	f7fb fe16 	bl	8002b58 <HAL_GetTick>
 8006f2c:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d001      	beq.n	8006f3e <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8006f3a:	2302      	movs	r3, #2
 8006f3c:	e250      	b.n	80073e0 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d002      	beq.n	8006f4a <HAL_SPI_Receive+0x46>
 8006f44:	88fb      	ldrh	r3, [r7, #6]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d101      	bne.n	8006f4e <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e248      	b.n	80073e0 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d101      	bne.n	8006f5c <HAL_SPI_Receive+0x58>
 8006f58:	2302      	movs	r3, #2
 8006f5a:	e241      	b.n	80073e0 <HAL_SPI_Receive+0x4dc>
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2204      	movs	r2, #4
 8006f68:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	68ba      	ldr	r2, [r7, #8]
 8006f78:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	88fa      	ldrh	r2, [r7, #6]
 8006f7e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	88fa      	ldrh	r2, [r7, #6]
 8006f86:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2200      	movs	r2, #0
 8006f94:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8006fb4:	d108      	bne.n	8006fc8 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006fc4:	601a      	str	r2, [r3, #0]
 8006fc6:	e009      	b.n	8006fdc <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8006fda:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	685a      	ldr	r2, [r3, #4]
 8006fe2:	4b95      	ldr	r3, [pc, #596]	@ (8007238 <HAL_SPI_Receive+0x334>)
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	88f9      	ldrh	r1, [r7, #6]
 8006fe8:	68fa      	ldr	r2, [r7, #12]
 8006fea:	6812      	ldr	r2, [r2, #0]
 8006fec:	430b      	orrs	r3, r1
 8006fee:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f042 0201 	orr.w	r2, r2, #1
 8006ffe:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007008:	d107      	bne.n	800701a <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007018:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	2b0f      	cmp	r3, #15
 8007020:	d96c      	bls.n	80070fc <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8007022:	e064      	b.n	80070ee <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	695b      	ldr	r3, [r3, #20]
 800702a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	695b      	ldr	r3, [r3, #20]
 8007032:	f003 0301 	and.w	r3, r3, #1
 8007036:	2b01      	cmp	r3, #1
 8007038:	d114      	bne.n	8007064 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007042:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007044:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800704a:	1d1a      	adds	r2, r3, #4
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007056:	b29b      	uxth	r3, r3
 8007058:	3b01      	subs	r3, #1
 800705a:	b29a      	uxth	r2, r3
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007062:	e044      	b.n	80070ee <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800706a:	b29b      	uxth	r3, r3
 800706c:	8bfa      	ldrh	r2, [r7, #30]
 800706e:	429a      	cmp	r2, r3
 8007070:	d919      	bls.n	80070a6 <HAL_SPI_Receive+0x1a2>
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007078:	2b00      	cmp	r3, #0
 800707a:	d014      	beq.n	80070a6 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681a      	ldr	r2, [r3, #0]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007084:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007086:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800708c:	1d1a      	adds	r2, r3, #4
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007098:	b29b      	uxth	r3, r3
 800709a:	3b01      	subs	r3, #1
 800709c:	b29a      	uxth	r2, r3
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80070a4:	e023      	b.n	80070ee <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070a6:	f7fb fd57 	bl	8002b58 <HAL_GetTick>
 80070aa:	4602      	mov	r2, r0
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	1ad3      	subs	r3, r2, r3
 80070b0:	683a      	ldr	r2, [r7, #0]
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d803      	bhi.n	80070be <HAL_SPI_Receive+0x1ba>
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070bc:	d102      	bne.n	80070c4 <HAL_SPI_Receive+0x1c0>
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d114      	bne.n	80070ee <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80070c4:	68f8      	ldr	r0, [r7, #12]
 80070c6:	f000 f98f 	bl	80073e8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070d0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2201      	movs	r2, #1
 80070de:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2200      	movs	r2, #0
 80070e6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80070ea:	2303      	movs	r3, #3
 80070ec:	e178      	b.n	80073e0 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d194      	bne.n	8007024 <HAL_SPI_Receive+0x120>
 80070fa:	e15e      	b.n	80073ba <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	2b07      	cmp	r3, #7
 8007102:	f240 8153 	bls.w	80073ac <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8007106:	e08f      	b.n	8007228 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	695b      	ldr	r3, [r3, #20]
 800710e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	695b      	ldr	r3, [r3, #20]
 8007116:	f003 0301 	and.w	r3, r3, #1
 800711a:	2b01      	cmp	r3, #1
 800711c:	d114      	bne.n	8007148 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007122:	69ba      	ldr	r2, [r7, #24]
 8007124:	8812      	ldrh	r2, [r2, #0]
 8007126:	b292      	uxth	r2, r2
 8007128:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800712e:	1c9a      	adds	r2, r3, #2
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800713a:	b29b      	uxth	r3, r3
 800713c:	3b01      	subs	r3, #1
 800713e:	b29a      	uxth	r2, r3
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007146:	e06f      	b.n	8007228 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800714e:	b29b      	uxth	r3, r3
 8007150:	8bfa      	ldrh	r2, [r7, #30]
 8007152:	429a      	cmp	r2, r3
 8007154:	d924      	bls.n	80071a0 <HAL_SPI_Receive+0x29c>
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800715c:	2b00      	cmp	r3, #0
 800715e:	d01f      	beq.n	80071a0 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007164:	69ba      	ldr	r2, [r7, #24]
 8007166:	8812      	ldrh	r2, [r2, #0]
 8007168:	b292      	uxth	r2, r2
 800716a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007170:	1c9a      	adds	r2, r3, #2
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800717a:	69ba      	ldr	r2, [r7, #24]
 800717c:	8812      	ldrh	r2, [r2, #0]
 800717e:	b292      	uxth	r2, r2
 8007180:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007186:	1c9a      	adds	r2, r3, #2
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007192:	b29b      	uxth	r3, r3
 8007194:	3b02      	subs	r3, #2
 8007196:	b29a      	uxth	r2, r3
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800719e:	e043      	b.n	8007228 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d119      	bne.n	80071e0 <HAL_SPI_Receive+0x2dc>
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d014      	beq.n	80071e0 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071ba:	69ba      	ldr	r2, [r7, #24]
 80071bc:	8812      	ldrh	r2, [r2, #0]
 80071be:	b292      	uxth	r2, r2
 80071c0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071c6:	1c9a      	adds	r2, r3, #2
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	3b01      	subs	r3, #1
 80071d6:	b29a      	uxth	r2, r3
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80071de:	e023      	b.n	8007228 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071e0:	f7fb fcba 	bl	8002b58 <HAL_GetTick>
 80071e4:	4602      	mov	r2, r0
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	1ad3      	subs	r3, r2, r3
 80071ea:	683a      	ldr	r2, [r7, #0]
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d803      	bhi.n	80071f8 <HAL_SPI_Receive+0x2f4>
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071f6:	d102      	bne.n	80071fe <HAL_SPI_Receive+0x2fa>
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d114      	bne.n	8007228 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80071fe:	68f8      	ldr	r0, [r7, #12]
 8007200:	f000 f8f2 	bl	80073e8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800720a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2201      	movs	r2, #1
 8007218:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2200      	movs	r2, #0
 8007220:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007224:	2303      	movs	r3, #3
 8007226:	e0db      	b.n	80073e0 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800722e:	b29b      	uxth	r3, r3
 8007230:	2b00      	cmp	r3, #0
 8007232:	f47f af69 	bne.w	8007108 <HAL_SPI_Receive+0x204>
 8007236:	e0c0      	b.n	80073ba <HAL_SPI_Receive+0x4b6>
 8007238:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	695b      	ldr	r3, [r3, #20]
 8007242:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	695b      	ldr	r3, [r3, #20]
 800724a:	f003 0301 	and.w	r3, r3, #1
 800724e:	2b01      	cmp	r3, #1
 8007250:	d117      	bne.n	8007282 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800725e:	7812      	ldrb	r2, [r2, #0]
 8007260:	b2d2      	uxtb	r2, r2
 8007262:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007268:	1c5a      	adds	r2, r3, #1
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007274:	b29b      	uxth	r3, r3
 8007276:	3b01      	subs	r3, #1
 8007278:	b29a      	uxth	r2, r3
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007280:	e094      	b.n	80073ac <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007288:	b29b      	uxth	r3, r3
 800728a:	8bfa      	ldrh	r2, [r7, #30]
 800728c:	429a      	cmp	r2, r3
 800728e:	d946      	bls.n	800731e <HAL_SPI_Receive+0x41a>
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007296:	2b00      	cmp	r3, #0
 8007298:	d041      	beq.n	800731e <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80072a6:	7812      	ldrb	r2, [r2, #0]
 80072a8:	b2d2      	uxtb	r2, r2
 80072aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80072b0:	1c5a      	adds	r2, r3, #1
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80072c2:	7812      	ldrb	r2, [r2, #0]
 80072c4:	b2d2      	uxtb	r2, r2
 80072c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80072cc:	1c5a      	adds	r2, r3, #1
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80072de:	7812      	ldrb	r2, [r2, #0]
 80072e0:	b2d2      	uxtb	r2, r2
 80072e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80072e8:	1c5a      	adds	r2, r3, #1
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80072fa:	7812      	ldrb	r2, [r2, #0]
 80072fc:	b2d2      	uxtb	r2, r2
 80072fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007304:	1c5a      	adds	r2, r3, #1
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007310:	b29b      	uxth	r3, r3
 8007312:	3b04      	subs	r3, #4
 8007314:	b29a      	uxth	r2, r3
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800731c:	e046      	b.n	80073ac <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007324:	b29b      	uxth	r3, r3
 8007326:	2b03      	cmp	r3, #3
 8007328:	d81c      	bhi.n	8007364 <HAL_SPI_Receive+0x460>
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8007330:	2b00      	cmp	r3, #0
 8007332:	d017      	beq.n	8007364 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007340:	7812      	ldrb	r2, [r2, #0]
 8007342:	b2d2      	uxtb	r2, r2
 8007344:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800734a:	1c5a      	adds	r2, r3, #1
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007356:	b29b      	uxth	r3, r3
 8007358:	3b01      	subs	r3, #1
 800735a:	b29a      	uxth	r2, r3
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007362:	e023      	b.n	80073ac <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007364:	f7fb fbf8 	bl	8002b58 <HAL_GetTick>
 8007368:	4602      	mov	r2, r0
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	1ad3      	subs	r3, r2, r3
 800736e:	683a      	ldr	r2, [r7, #0]
 8007370:	429a      	cmp	r2, r3
 8007372:	d803      	bhi.n	800737c <HAL_SPI_Receive+0x478>
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800737a:	d102      	bne.n	8007382 <HAL_SPI_Receive+0x47e>
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d114      	bne.n	80073ac <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007382:	68f8      	ldr	r0, [r7, #12]
 8007384:	f000 f830 	bl	80073e8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800738e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2201      	movs	r2, #1
 800739c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80073a8:	2303      	movs	r3, #3
 80073aa:	e019      	b.n	80073e0 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	f47f af41 	bne.w	800723c <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80073ba:	68f8      	ldr	r0, [r7, #12]
 80073bc:	f000 f814 	bl	80073e8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2201      	movs	r2, #1
 80073c4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d001      	beq.n	80073de <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 80073da:	2301      	movs	r3, #1
 80073dc:	e000      	b.n	80073e0 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 80073de:	2300      	movs	r3, #0
  }
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3720      	adds	r7, #32
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b085      	sub	sp, #20
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	695b      	ldr	r3, [r3, #20]
 80073f6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	699a      	ldr	r2, [r3, #24]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f042 0208 	orr.w	r2, r2, #8
 8007406:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	699a      	ldr	r2, [r3, #24]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f042 0210 	orr.w	r2, r2, #16
 8007416:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f022 0201 	bic.w	r2, r2, #1
 8007426:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	6919      	ldr	r1, [r3, #16]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	4b3c      	ldr	r3, [pc, #240]	@ (8007524 <SPI_CloseTransfer+0x13c>)
 8007434:	400b      	ands	r3, r1
 8007436:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	689a      	ldr	r2, [r3, #8]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007446:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800744e:	b2db      	uxtb	r3, r3
 8007450:	2b04      	cmp	r3, #4
 8007452:	d014      	beq.n	800747e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f003 0320 	and.w	r3, r3, #32
 800745a:	2b00      	cmp	r3, #0
 800745c:	d00f      	beq.n	800747e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007464:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	699a      	ldr	r2, [r3, #24]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f042 0220 	orr.w	r2, r2, #32
 800747c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007484:	b2db      	uxtb	r3, r3
 8007486:	2b03      	cmp	r3, #3
 8007488:	d014      	beq.n	80074b4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007490:	2b00      	cmp	r3, #0
 8007492:	d00f      	beq.n	80074b4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800749a:	f043 0204 	orr.w	r2, r3, #4
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	699a      	ldr	r2, [r3, #24]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80074b2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d00f      	beq.n	80074de <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074c4:	f043 0201 	orr.w	r2, r3, #1
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	699a      	ldr	r2, [r3, #24]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80074dc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d00f      	beq.n	8007508 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074ee:	f043 0208 	orr.w	r2, r3, #8
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	699a      	ldr	r2, [r3, #24]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007506:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2200      	movs	r2, #0
 800750c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8007518:	bf00      	nop
 800751a:	3714      	adds	r7, #20
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr
 8007524:	fffffc90 	.word	0xfffffc90

08007528 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	60f8      	str	r0, [r7, #12]
 8007530:	60b9      	str	r1, [r7, #8]
 8007532:	603b      	str	r3, [r7, #0]
 8007534:	4613      	mov	r3, r2
 8007536:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007538:	e010      	b.n	800755c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800753a:	f7fb fb0d 	bl	8002b58 <HAL_GetTick>
 800753e:	4602      	mov	r2, r0
 8007540:	69bb      	ldr	r3, [r7, #24]
 8007542:	1ad3      	subs	r3, r2, r3
 8007544:	683a      	ldr	r2, [r7, #0]
 8007546:	429a      	cmp	r2, r3
 8007548:	d803      	bhi.n	8007552 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007550:	d102      	bne.n	8007558 <SPI_WaitOnFlagUntilTimeout+0x30>
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d101      	bne.n	800755c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007558:	2303      	movs	r3, #3
 800755a:	e00f      	b.n	800757c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	695a      	ldr	r2, [r3, #20]
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	4013      	ands	r3, r2
 8007566:	68ba      	ldr	r2, [r7, #8]
 8007568:	429a      	cmp	r2, r3
 800756a:	bf0c      	ite	eq
 800756c:	2301      	moveq	r3, #1
 800756e:	2300      	movne	r3, #0
 8007570:	b2db      	uxtb	r3, r3
 8007572:	461a      	mov	r2, r3
 8007574:	79fb      	ldrb	r3, [r7, #7]
 8007576:	429a      	cmp	r2, r3
 8007578:	d0df      	beq.n	800753a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800757a:	2300      	movs	r3, #0
}
 800757c:	4618      	mov	r0, r3
 800757e:	3710      	adds	r7, #16
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007584:	b480      	push	{r7}
 8007586:	b085      	sub	sp, #20
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007590:	095b      	lsrs	r3, r3, #5
 8007592:	3301      	adds	r3, #1
 8007594:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	68db      	ldr	r3, [r3, #12]
 800759a:	3301      	adds	r3, #1
 800759c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	3307      	adds	r3, #7
 80075a2:	08db      	lsrs	r3, r3, #3
 80075a4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	68fa      	ldr	r2, [r7, #12]
 80075aa:	fb02 f303 	mul.w	r3, r2, r3
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3714      	adds	r7, #20
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr

080075ba <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075ba:	b580      	push	{r7, lr}
 80075bc:	b082      	sub	sp, #8
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d101      	bne.n	80075cc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075c8:	2301      	movs	r3, #1
 80075ca:	e042      	b.n	8007652 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d106      	bne.n	80075e4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f7fb f900 	bl	80027e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2224      	movs	r2, #36	@ 0x24
 80075e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f022 0201 	bic.w	r2, r2, #1
 80075fa:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007600:	2b00      	cmp	r3, #0
 8007602:	d002      	beq.n	800760a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 ff23 	bl	8008450 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 f8b4 	bl	8007778 <UART_SetConfig>
 8007610:	4603      	mov	r3, r0
 8007612:	2b01      	cmp	r3, #1
 8007614:	d101      	bne.n	800761a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	e01b      	b.n	8007652 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	685a      	ldr	r2, [r3, #4]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007628:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	689a      	ldr	r2, [r3, #8]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007638:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f042 0201 	orr.w	r2, r2, #1
 8007648:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 ffa2 	bl	8008594 <UART_CheckIdleState>
 8007650:	4603      	mov	r3, r0
}
 8007652:	4618      	mov	r0, r3
 8007654:	3708      	adds	r7, #8
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}

0800765a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800765a:	b580      	push	{r7, lr}
 800765c:	b08a      	sub	sp, #40	@ 0x28
 800765e:	af02      	add	r7, sp, #8
 8007660:	60f8      	str	r0, [r7, #12]
 8007662:	60b9      	str	r1, [r7, #8]
 8007664:	603b      	str	r3, [r7, #0]
 8007666:	4613      	mov	r3, r2
 8007668:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007670:	2b20      	cmp	r3, #32
 8007672:	d17b      	bne.n	800776c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d002      	beq.n	8007680 <HAL_UART_Transmit+0x26>
 800767a:	88fb      	ldrh	r3, [r7, #6]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d101      	bne.n	8007684 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007680:	2301      	movs	r3, #1
 8007682:	e074      	b.n	800776e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2200      	movs	r2, #0
 8007688:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2221      	movs	r2, #33	@ 0x21
 8007690:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007694:	f7fb fa60 	bl	8002b58 <HAL_GetTick>
 8007698:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	88fa      	ldrh	r2, [r7, #6]
 800769e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	88fa      	ldrh	r2, [r7, #6]
 80076a6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076b2:	d108      	bne.n	80076c6 <HAL_UART_Transmit+0x6c>
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	691b      	ldr	r3, [r3, #16]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d104      	bne.n	80076c6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80076bc:	2300      	movs	r3, #0
 80076be:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	61bb      	str	r3, [r7, #24]
 80076c4:	e003      	b.n	80076ce <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80076ca:	2300      	movs	r3, #0
 80076cc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80076ce:	e030      	b.n	8007732 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	9300      	str	r3, [sp, #0]
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	2200      	movs	r2, #0
 80076d8:	2180      	movs	r1, #128	@ 0x80
 80076da:	68f8      	ldr	r0, [r7, #12]
 80076dc:	f001 f804 	bl	80086e8 <UART_WaitOnFlagUntilTimeout>
 80076e0:	4603      	mov	r3, r0
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d005      	beq.n	80076f2 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2220      	movs	r2, #32
 80076ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80076ee:	2303      	movs	r3, #3
 80076f0:	e03d      	b.n	800776e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80076f2:	69fb      	ldr	r3, [r7, #28]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d10b      	bne.n	8007710 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80076f8:	69bb      	ldr	r3, [r7, #24]
 80076fa:	881b      	ldrh	r3, [r3, #0]
 80076fc:	461a      	mov	r2, r3
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007706:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007708:	69bb      	ldr	r3, [r7, #24]
 800770a:	3302      	adds	r3, #2
 800770c:	61bb      	str	r3, [r7, #24]
 800770e:	e007      	b.n	8007720 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007710:	69fb      	ldr	r3, [r7, #28]
 8007712:	781a      	ldrb	r2, [r3, #0]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800771a:	69fb      	ldr	r3, [r7, #28]
 800771c:	3301      	adds	r3, #1
 800771e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007726:	b29b      	uxth	r3, r3
 8007728:	3b01      	subs	r3, #1
 800772a:	b29a      	uxth	r2, r3
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007738:	b29b      	uxth	r3, r3
 800773a:	2b00      	cmp	r3, #0
 800773c:	d1c8      	bne.n	80076d0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	9300      	str	r3, [sp, #0]
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	2200      	movs	r2, #0
 8007746:	2140      	movs	r1, #64	@ 0x40
 8007748:	68f8      	ldr	r0, [r7, #12]
 800774a:	f000 ffcd 	bl	80086e8 <UART_WaitOnFlagUntilTimeout>
 800774e:	4603      	mov	r3, r0
 8007750:	2b00      	cmp	r3, #0
 8007752:	d005      	beq.n	8007760 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2220      	movs	r2, #32
 8007758:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800775c:	2303      	movs	r3, #3
 800775e:	e006      	b.n	800776e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2220      	movs	r2, #32
 8007764:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007768:	2300      	movs	r3, #0
 800776a:	e000      	b.n	800776e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800776c:	2302      	movs	r3, #2
  }
}
 800776e:	4618      	mov	r0, r3
 8007770:	3720      	adds	r7, #32
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
	...

08007778 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007778:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800777c:	b092      	sub	sp, #72	@ 0x48
 800777e:	af00      	add	r7, sp, #0
 8007780:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007782:	2300      	movs	r3, #0
 8007784:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	689a      	ldr	r2, [r3, #8]
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	691b      	ldr	r3, [r3, #16]
 8007790:	431a      	orrs	r2, r3
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	695b      	ldr	r3, [r3, #20]
 8007796:	431a      	orrs	r2, r3
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	69db      	ldr	r3, [r3, #28]
 800779c:	4313      	orrs	r3, r2
 800779e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	4bbe      	ldr	r3, [pc, #760]	@ (8007aa0 <UART_SetConfig+0x328>)
 80077a8:	4013      	ands	r3, r2
 80077aa:	697a      	ldr	r2, [r7, #20]
 80077ac:	6812      	ldr	r2, [r2, #0]
 80077ae:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80077b0:	430b      	orrs	r3, r1
 80077b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	68da      	ldr	r2, [r3, #12]
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	430a      	orrs	r2, r1
 80077c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	699b      	ldr	r3, [r3, #24]
 80077ce:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4ab3      	ldr	r2, [pc, #716]	@ (8007aa4 <UART_SetConfig+0x32c>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d004      	beq.n	80077e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	6a1b      	ldr	r3, [r3, #32]
 80077de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80077e0:	4313      	orrs	r3, r2
 80077e2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	689a      	ldr	r2, [r3, #8]
 80077ea:	4baf      	ldr	r3, [pc, #700]	@ (8007aa8 <UART_SetConfig+0x330>)
 80077ec:	4013      	ands	r3, r2
 80077ee:	697a      	ldr	r2, [r7, #20]
 80077f0:	6812      	ldr	r2, [r2, #0]
 80077f2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80077f4:	430b      	orrs	r3, r1
 80077f6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077fe:	f023 010f 	bic.w	r1, r3, #15
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	430a      	orrs	r2, r1
 800780c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4aa6      	ldr	r2, [pc, #664]	@ (8007aac <UART_SetConfig+0x334>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d177      	bne.n	8007908 <UART_SetConfig+0x190>
 8007818:	4ba5      	ldr	r3, [pc, #660]	@ (8007ab0 <UART_SetConfig+0x338>)
 800781a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800781c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007820:	2b28      	cmp	r3, #40	@ 0x28
 8007822:	d86d      	bhi.n	8007900 <UART_SetConfig+0x188>
 8007824:	a201      	add	r2, pc, #4	@ (adr r2, 800782c <UART_SetConfig+0xb4>)
 8007826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800782a:	bf00      	nop
 800782c:	080078d1 	.word	0x080078d1
 8007830:	08007901 	.word	0x08007901
 8007834:	08007901 	.word	0x08007901
 8007838:	08007901 	.word	0x08007901
 800783c:	08007901 	.word	0x08007901
 8007840:	08007901 	.word	0x08007901
 8007844:	08007901 	.word	0x08007901
 8007848:	08007901 	.word	0x08007901
 800784c:	080078d9 	.word	0x080078d9
 8007850:	08007901 	.word	0x08007901
 8007854:	08007901 	.word	0x08007901
 8007858:	08007901 	.word	0x08007901
 800785c:	08007901 	.word	0x08007901
 8007860:	08007901 	.word	0x08007901
 8007864:	08007901 	.word	0x08007901
 8007868:	08007901 	.word	0x08007901
 800786c:	080078e1 	.word	0x080078e1
 8007870:	08007901 	.word	0x08007901
 8007874:	08007901 	.word	0x08007901
 8007878:	08007901 	.word	0x08007901
 800787c:	08007901 	.word	0x08007901
 8007880:	08007901 	.word	0x08007901
 8007884:	08007901 	.word	0x08007901
 8007888:	08007901 	.word	0x08007901
 800788c:	080078e9 	.word	0x080078e9
 8007890:	08007901 	.word	0x08007901
 8007894:	08007901 	.word	0x08007901
 8007898:	08007901 	.word	0x08007901
 800789c:	08007901 	.word	0x08007901
 80078a0:	08007901 	.word	0x08007901
 80078a4:	08007901 	.word	0x08007901
 80078a8:	08007901 	.word	0x08007901
 80078ac:	080078f1 	.word	0x080078f1
 80078b0:	08007901 	.word	0x08007901
 80078b4:	08007901 	.word	0x08007901
 80078b8:	08007901 	.word	0x08007901
 80078bc:	08007901 	.word	0x08007901
 80078c0:	08007901 	.word	0x08007901
 80078c4:	08007901 	.word	0x08007901
 80078c8:	08007901 	.word	0x08007901
 80078cc:	080078f9 	.word	0x080078f9
 80078d0:	2301      	movs	r3, #1
 80078d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078d6:	e326      	b.n	8007f26 <UART_SetConfig+0x7ae>
 80078d8:	2304      	movs	r3, #4
 80078da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078de:	e322      	b.n	8007f26 <UART_SetConfig+0x7ae>
 80078e0:	2308      	movs	r3, #8
 80078e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078e6:	e31e      	b.n	8007f26 <UART_SetConfig+0x7ae>
 80078e8:	2310      	movs	r3, #16
 80078ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ee:	e31a      	b.n	8007f26 <UART_SetConfig+0x7ae>
 80078f0:	2320      	movs	r3, #32
 80078f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078f6:	e316      	b.n	8007f26 <UART_SetConfig+0x7ae>
 80078f8:	2340      	movs	r3, #64	@ 0x40
 80078fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078fe:	e312      	b.n	8007f26 <UART_SetConfig+0x7ae>
 8007900:	2380      	movs	r3, #128	@ 0x80
 8007902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007906:	e30e      	b.n	8007f26 <UART_SetConfig+0x7ae>
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a69      	ldr	r2, [pc, #420]	@ (8007ab4 <UART_SetConfig+0x33c>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d130      	bne.n	8007974 <UART_SetConfig+0x1fc>
 8007912:	4b67      	ldr	r3, [pc, #412]	@ (8007ab0 <UART_SetConfig+0x338>)
 8007914:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007916:	f003 0307 	and.w	r3, r3, #7
 800791a:	2b05      	cmp	r3, #5
 800791c:	d826      	bhi.n	800796c <UART_SetConfig+0x1f4>
 800791e:	a201      	add	r2, pc, #4	@ (adr r2, 8007924 <UART_SetConfig+0x1ac>)
 8007920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007924:	0800793d 	.word	0x0800793d
 8007928:	08007945 	.word	0x08007945
 800792c:	0800794d 	.word	0x0800794d
 8007930:	08007955 	.word	0x08007955
 8007934:	0800795d 	.word	0x0800795d
 8007938:	08007965 	.word	0x08007965
 800793c:	2300      	movs	r3, #0
 800793e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007942:	e2f0      	b.n	8007f26 <UART_SetConfig+0x7ae>
 8007944:	2304      	movs	r3, #4
 8007946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800794a:	e2ec      	b.n	8007f26 <UART_SetConfig+0x7ae>
 800794c:	2308      	movs	r3, #8
 800794e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007952:	e2e8      	b.n	8007f26 <UART_SetConfig+0x7ae>
 8007954:	2310      	movs	r3, #16
 8007956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800795a:	e2e4      	b.n	8007f26 <UART_SetConfig+0x7ae>
 800795c:	2320      	movs	r3, #32
 800795e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007962:	e2e0      	b.n	8007f26 <UART_SetConfig+0x7ae>
 8007964:	2340      	movs	r3, #64	@ 0x40
 8007966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800796a:	e2dc      	b.n	8007f26 <UART_SetConfig+0x7ae>
 800796c:	2380      	movs	r3, #128	@ 0x80
 800796e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007972:	e2d8      	b.n	8007f26 <UART_SetConfig+0x7ae>
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a4f      	ldr	r2, [pc, #316]	@ (8007ab8 <UART_SetConfig+0x340>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d130      	bne.n	80079e0 <UART_SetConfig+0x268>
 800797e:	4b4c      	ldr	r3, [pc, #304]	@ (8007ab0 <UART_SetConfig+0x338>)
 8007980:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007982:	f003 0307 	and.w	r3, r3, #7
 8007986:	2b05      	cmp	r3, #5
 8007988:	d826      	bhi.n	80079d8 <UART_SetConfig+0x260>
 800798a:	a201      	add	r2, pc, #4	@ (adr r2, 8007990 <UART_SetConfig+0x218>)
 800798c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007990:	080079a9 	.word	0x080079a9
 8007994:	080079b1 	.word	0x080079b1
 8007998:	080079b9 	.word	0x080079b9
 800799c:	080079c1 	.word	0x080079c1
 80079a0:	080079c9 	.word	0x080079c9
 80079a4:	080079d1 	.word	0x080079d1
 80079a8:	2300      	movs	r3, #0
 80079aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ae:	e2ba      	b.n	8007f26 <UART_SetConfig+0x7ae>
 80079b0:	2304      	movs	r3, #4
 80079b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079b6:	e2b6      	b.n	8007f26 <UART_SetConfig+0x7ae>
 80079b8:	2308      	movs	r3, #8
 80079ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079be:	e2b2      	b.n	8007f26 <UART_SetConfig+0x7ae>
 80079c0:	2310      	movs	r3, #16
 80079c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079c6:	e2ae      	b.n	8007f26 <UART_SetConfig+0x7ae>
 80079c8:	2320      	movs	r3, #32
 80079ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ce:	e2aa      	b.n	8007f26 <UART_SetConfig+0x7ae>
 80079d0:	2340      	movs	r3, #64	@ 0x40
 80079d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079d6:	e2a6      	b.n	8007f26 <UART_SetConfig+0x7ae>
 80079d8:	2380      	movs	r3, #128	@ 0x80
 80079da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079de:	e2a2      	b.n	8007f26 <UART_SetConfig+0x7ae>
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a35      	ldr	r2, [pc, #212]	@ (8007abc <UART_SetConfig+0x344>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d130      	bne.n	8007a4c <UART_SetConfig+0x2d4>
 80079ea:	4b31      	ldr	r3, [pc, #196]	@ (8007ab0 <UART_SetConfig+0x338>)
 80079ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079ee:	f003 0307 	and.w	r3, r3, #7
 80079f2:	2b05      	cmp	r3, #5
 80079f4:	d826      	bhi.n	8007a44 <UART_SetConfig+0x2cc>
 80079f6:	a201      	add	r2, pc, #4	@ (adr r2, 80079fc <UART_SetConfig+0x284>)
 80079f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079fc:	08007a15 	.word	0x08007a15
 8007a00:	08007a1d 	.word	0x08007a1d
 8007a04:	08007a25 	.word	0x08007a25
 8007a08:	08007a2d 	.word	0x08007a2d
 8007a0c:	08007a35 	.word	0x08007a35
 8007a10:	08007a3d 	.word	0x08007a3d
 8007a14:	2300      	movs	r3, #0
 8007a16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a1a:	e284      	b.n	8007f26 <UART_SetConfig+0x7ae>
 8007a1c:	2304      	movs	r3, #4
 8007a1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a22:	e280      	b.n	8007f26 <UART_SetConfig+0x7ae>
 8007a24:	2308      	movs	r3, #8
 8007a26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a2a:	e27c      	b.n	8007f26 <UART_SetConfig+0x7ae>
 8007a2c:	2310      	movs	r3, #16
 8007a2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a32:	e278      	b.n	8007f26 <UART_SetConfig+0x7ae>
 8007a34:	2320      	movs	r3, #32
 8007a36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a3a:	e274      	b.n	8007f26 <UART_SetConfig+0x7ae>
 8007a3c:	2340      	movs	r3, #64	@ 0x40
 8007a3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a42:	e270      	b.n	8007f26 <UART_SetConfig+0x7ae>
 8007a44:	2380      	movs	r3, #128	@ 0x80
 8007a46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a4a:	e26c      	b.n	8007f26 <UART_SetConfig+0x7ae>
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a1b      	ldr	r2, [pc, #108]	@ (8007ac0 <UART_SetConfig+0x348>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d142      	bne.n	8007adc <UART_SetConfig+0x364>
 8007a56:	4b16      	ldr	r3, [pc, #88]	@ (8007ab0 <UART_SetConfig+0x338>)
 8007a58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a5a:	f003 0307 	and.w	r3, r3, #7
 8007a5e:	2b05      	cmp	r3, #5
 8007a60:	d838      	bhi.n	8007ad4 <UART_SetConfig+0x35c>
 8007a62:	a201      	add	r2, pc, #4	@ (adr r2, 8007a68 <UART_SetConfig+0x2f0>)
 8007a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a68:	08007a81 	.word	0x08007a81
 8007a6c:	08007a89 	.word	0x08007a89
 8007a70:	08007a91 	.word	0x08007a91
 8007a74:	08007a99 	.word	0x08007a99
 8007a78:	08007ac5 	.word	0x08007ac5
 8007a7c:	08007acd 	.word	0x08007acd
 8007a80:	2300      	movs	r3, #0
 8007a82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a86:	e24e      	b.n	8007f26 <UART_SetConfig+0x7ae>
 8007a88:	2304      	movs	r3, #4
 8007a8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a8e:	e24a      	b.n	8007f26 <UART_SetConfig+0x7ae>
 8007a90:	2308      	movs	r3, #8
 8007a92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a96:	e246      	b.n	8007f26 <UART_SetConfig+0x7ae>
 8007a98:	2310      	movs	r3, #16
 8007a9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a9e:	e242      	b.n	8007f26 <UART_SetConfig+0x7ae>
 8007aa0:	cfff69f3 	.word	0xcfff69f3
 8007aa4:	58000c00 	.word	0x58000c00
 8007aa8:	11fff4ff 	.word	0x11fff4ff
 8007aac:	40011000 	.word	0x40011000
 8007ab0:	58024400 	.word	0x58024400
 8007ab4:	40004400 	.word	0x40004400
 8007ab8:	40004800 	.word	0x40004800
 8007abc:	40004c00 	.word	0x40004c00
 8007ac0:	40005000 	.word	0x40005000
 8007ac4:	2320      	movs	r3, #32
 8007ac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aca:	e22c      	b.n	8007f26 <UART_SetConfig+0x7ae>
 8007acc:	2340      	movs	r3, #64	@ 0x40
 8007ace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ad2:	e228      	b.n	8007f26 <UART_SetConfig+0x7ae>
 8007ad4:	2380      	movs	r3, #128	@ 0x80
 8007ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ada:	e224      	b.n	8007f26 <UART_SetConfig+0x7ae>
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4ab1      	ldr	r2, [pc, #708]	@ (8007da8 <UART_SetConfig+0x630>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d176      	bne.n	8007bd4 <UART_SetConfig+0x45c>
 8007ae6:	4bb1      	ldr	r3, [pc, #708]	@ (8007dac <UART_SetConfig+0x634>)
 8007ae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007aea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007aee:	2b28      	cmp	r3, #40	@ 0x28
 8007af0:	d86c      	bhi.n	8007bcc <UART_SetConfig+0x454>
 8007af2:	a201      	add	r2, pc, #4	@ (adr r2, 8007af8 <UART_SetConfig+0x380>)
 8007af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af8:	08007b9d 	.word	0x08007b9d
 8007afc:	08007bcd 	.word	0x08007bcd
 8007b00:	08007bcd 	.word	0x08007bcd
 8007b04:	08007bcd 	.word	0x08007bcd
 8007b08:	08007bcd 	.word	0x08007bcd
 8007b0c:	08007bcd 	.word	0x08007bcd
 8007b10:	08007bcd 	.word	0x08007bcd
 8007b14:	08007bcd 	.word	0x08007bcd
 8007b18:	08007ba5 	.word	0x08007ba5
 8007b1c:	08007bcd 	.word	0x08007bcd
 8007b20:	08007bcd 	.word	0x08007bcd
 8007b24:	08007bcd 	.word	0x08007bcd
 8007b28:	08007bcd 	.word	0x08007bcd
 8007b2c:	08007bcd 	.word	0x08007bcd
 8007b30:	08007bcd 	.word	0x08007bcd
 8007b34:	08007bcd 	.word	0x08007bcd
 8007b38:	08007bad 	.word	0x08007bad
 8007b3c:	08007bcd 	.word	0x08007bcd
 8007b40:	08007bcd 	.word	0x08007bcd
 8007b44:	08007bcd 	.word	0x08007bcd
 8007b48:	08007bcd 	.word	0x08007bcd
 8007b4c:	08007bcd 	.word	0x08007bcd
 8007b50:	08007bcd 	.word	0x08007bcd
 8007b54:	08007bcd 	.word	0x08007bcd
 8007b58:	08007bb5 	.word	0x08007bb5
 8007b5c:	08007bcd 	.word	0x08007bcd
 8007b60:	08007bcd 	.word	0x08007bcd
 8007b64:	08007bcd 	.word	0x08007bcd
 8007b68:	08007bcd 	.word	0x08007bcd
 8007b6c:	08007bcd 	.word	0x08007bcd
 8007b70:	08007bcd 	.word	0x08007bcd
 8007b74:	08007bcd 	.word	0x08007bcd
 8007b78:	08007bbd 	.word	0x08007bbd
 8007b7c:	08007bcd 	.word	0x08007bcd
 8007b80:	08007bcd 	.word	0x08007bcd
 8007b84:	08007bcd 	.word	0x08007bcd
 8007b88:	08007bcd 	.word	0x08007bcd
 8007b8c:	08007bcd 	.word	0x08007bcd
 8007b90:	08007bcd 	.word	0x08007bcd
 8007b94:	08007bcd 	.word	0x08007bcd
 8007b98:	08007bc5 	.word	0x08007bc5
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ba2:	e1c0      	b.n	8007f26 <UART_SetConfig+0x7ae>
 8007ba4:	2304      	movs	r3, #4
 8007ba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007baa:	e1bc      	b.n	8007f26 <UART_SetConfig+0x7ae>
 8007bac:	2308      	movs	r3, #8
 8007bae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bb2:	e1b8      	b.n	8007f26 <UART_SetConfig+0x7ae>
 8007bb4:	2310      	movs	r3, #16
 8007bb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bba:	e1b4      	b.n	8007f26 <UART_SetConfig+0x7ae>
 8007bbc:	2320      	movs	r3, #32
 8007bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bc2:	e1b0      	b.n	8007f26 <UART_SetConfig+0x7ae>
 8007bc4:	2340      	movs	r3, #64	@ 0x40
 8007bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bca:	e1ac      	b.n	8007f26 <UART_SetConfig+0x7ae>
 8007bcc:	2380      	movs	r3, #128	@ 0x80
 8007bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bd2:	e1a8      	b.n	8007f26 <UART_SetConfig+0x7ae>
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a75      	ldr	r2, [pc, #468]	@ (8007db0 <UART_SetConfig+0x638>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d130      	bne.n	8007c40 <UART_SetConfig+0x4c8>
 8007bde:	4b73      	ldr	r3, [pc, #460]	@ (8007dac <UART_SetConfig+0x634>)
 8007be0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007be2:	f003 0307 	and.w	r3, r3, #7
 8007be6:	2b05      	cmp	r3, #5
 8007be8:	d826      	bhi.n	8007c38 <UART_SetConfig+0x4c0>
 8007bea:	a201      	add	r2, pc, #4	@ (adr r2, 8007bf0 <UART_SetConfig+0x478>)
 8007bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bf0:	08007c09 	.word	0x08007c09
 8007bf4:	08007c11 	.word	0x08007c11
 8007bf8:	08007c19 	.word	0x08007c19
 8007bfc:	08007c21 	.word	0x08007c21
 8007c00:	08007c29 	.word	0x08007c29
 8007c04:	08007c31 	.word	0x08007c31
 8007c08:	2300      	movs	r3, #0
 8007c0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c0e:	e18a      	b.n	8007f26 <UART_SetConfig+0x7ae>
 8007c10:	2304      	movs	r3, #4
 8007c12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c16:	e186      	b.n	8007f26 <UART_SetConfig+0x7ae>
 8007c18:	2308      	movs	r3, #8
 8007c1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c1e:	e182      	b.n	8007f26 <UART_SetConfig+0x7ae>
 8007c20:	2310      	movs	r3, #16
 8007c22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c26:	e17e      	b.n	8007f26 <UART_SetConfig+0x7ae>
 8007c28:	2320      	movs	r3, #32
 8007c2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c2e:	e17a      	b.n	8007f26 <UART_SetConfig+0x7ae>
 8007c30:	2340      	movs	r3, #64	@ 0x40
 8007c32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c36:	e176      	b.n	8007f26 <UART_SetConfig+0x7ae>
 8007c38:	2380      	movs	r3, #128	@ 0x80
 8007c3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c3e:	e172      	b.n	8007f26 <UART_SetConfig+0x7ae>
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a5b      	ldr	r2, [pc, #364]	@ (8007db4 <UART_SetConfig+0x63c>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d130      	bne.n	8007cac <UART_SetConfig+0x534>
 8007c4a:	4b58      	ldr	r3, [pc, #352]	@ (8007dac <UART_SetConfig+0x634>)
 8007c4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c4e:	f003 0307 	and.w	r3, r3, #7
 8007c52:	2b05      	cmp	r3, #5
 8007c54:	d826      	bhi.n	8007ca4 <UART_SetConfig+0x52c>
 8007c56:	a201      	add	r2, pc, #4	@ (adr r2, 8007c5c <UART_SetConfig+0x4e4>)
 8007c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c5c:	08007c75 	.word	0x08007c75
 8007c60:	08007c7d 	.word	0x08007c7d
 8007c64:	08007c85 	.word	0x08007c85
 8007c68:	08007c8d 	.word	0x08007c8d
 8007c6c:	08007c95 	.word	0x08007c95
 8007c70:	08007c9d 	.word	0x08007c9d
 8007c74:	2300      	movs	r3, #0
 8007c76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c7a:	e154      	b.n	8007f26 <UART_SetConfig+0x7ae>
 8007c7c:	2304      	movs	r3, #4
 8007c7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c82:	e150      	b.n	8007f26 <UART_SetConfig+0x7ae>
 8007c84:	2308      	movs	r3, #8
 8007c86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c8a:	e14c      	b.n	8007f26 <UART_SetConfig+0x7ae>
 8007c8c:	2310      	movs	r3, #16
 8007c8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c92:	e148      	b.n	8007f26 <UART_SetConfig+0x7ae>
 8007c94:	2320      	movs	r3, #32
 8007c96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c9a:	e144      	b.n	8007f26 <UART_SetConfig+0x7ae>
 8007c9c:	2340      	movs	r3, #64	@ 0x40
 8007c9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ca2:	e140      	b.n	8007f26 <UART_SetConfig+0x7ae>
 8007ca4:	2380      	movs	r3, #128	@ 0x80
 8007ca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007caa:	e13c      	b.n	8007f26 <UART_SetConfig+0x7ae>
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a41      	ldr	r2, [pc, #260]	@ (8007db8 <UART_SetConfig+0x640>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	f040 8082 	bne.w	8007dbc <UART_SetConfig+0x644>
 8007cb8:	4b3c      	ldr	r3, [pc, #240]	@ (8007dac <UART_SetConfig+0x634>)
 8007cba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cbc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007cc0:	2b28      	cmp	r3, #40	@ 0x28
 8007cc2:	d86d      	bhi.n	8007da0 <UART_SetConfig+0x628>
 8007cc4:	a201      	add	r2, pc, #4	@ (adr r2, 8007ccc <UART_SetConfig+0x554>)
 8007cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cca:	bf00      	nop
 8007ccc:	08007d71 	.word	0x08007d71
 8007cd0:	08007da1 	.word	0x08007da1
 8007cd4:	08007da1 	.word	0x08007da1
 8007cd8:	08007da1 	.word	0x08007da1
 8007cdc:	08007da1 	.word	0x08007da1
 8007ce0:	08007da1 	.word	0x08007da1
 8007ce4:	08007da1 	.word	0x08007da1
 8007ce8:	08007da1 	.word	0x08007da1
 8007cec:	08007d79 	.word	0x08007d79
 8007cf0:	08007da1 	.word	0x08007da1
 8007cf4:	08007da1 	.word	0x08007da1
 8007cf8:	08007da1 	.word	0x08007da1
 8007cfc:	08007da1 	.word	0x08007da1
 8007d00:	08007da1 	.word	0x08007da1
 8007d04:	08007da1 	.word	0x08007da1
 8007d08:	08007da1 	.word	0x08007da1
 8007d0c:	08007d81 	.word	0x08007d81
 8007d10:	08007da1 	.word	0x08007da1
 8007d14:	08007da1 	.word	0x08007da1
 8007d18:	08007da1 	.word	0x08007da1
 8007d1c:	08007da1 	.word	0x08007da1
 8007d20:	08007da1 	.word	0x08007da1
 8007d24:	08007da1 	.word	0x08007da1
 8007d28:	08007da1 	.word	0x08007da1
 8007d2c:	08007d89 	.word	0x08007d89
 8007d30:	08007da1 	.word	0x08007da1
 8007d34:	08007da1 	.word	0x08007da1
 8007d38:	08007da1 	.word	0x08007da1
 8007d3c:	08007da1 	.word	0x08007da1
 8007d40:	08007da1 	.word	0x08007da1
 8007d44:	08007da1 	.word	0x08007da1
 8007d48:	08007da1 	.word	0x08007da1
 8007d4c:	08007d91 	.word	0x08007d91
 8007d50:	08007da1 	.word	0x08007da1
 8007d54:	08007da1 	.word	0x08007da1
 8007d58:	08007da1 	.word	0x08007da1
 8007d5c:	08007da1 	.word	0x08007da1
 8007d60:	08007da1 	.word	0x08007da1
 8007d64:	08007da1 	.word	0x08007da1
 8007d68:	08007da1 	.word	0x08007da1
 8007d6c:	08007d99 	.word	0x08007d99
 8007d70:	2301      	movs	r3, #1
 8007d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d76:	e0d6      	b.n	8007f26 <UART_SetConfig+0x7ae>
 8007d78:	2304      	movs	r3, #4
 8007d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d7e:	e0d2      	b.n	8007f26 <UART_SetConfig+0x7ae>
 8007d80:	2308      	movs	r3, #8
 8007d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d86:	e0ce      	b.n	8007f26 <UART_SetConfig+0x7ae>
 8007d88:	2310      	movs	r3, #16
 8007d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d8e:	e0ca      	b.n	8007f26 <UART_SetConfig+0x7ae>
 8007d90:	2320      	movs	r3, #32
 8007d92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d96:	e0c6      	b.n	8007f26 <UART_SetConfig+0x7ae>
 8007d98:	2340      	movs	r3, #64	@ 0x40
 8007d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d9e:	e0c2      	b.n	8007f26 <UART_SetConfig+0x7ae>
 8007da0:	2380      	movs	r3, #128	@ 0x80
 8007da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007da6:	e0be      	b.n	8007f26 <UART_SetConfig+0x7ae>
 8007da8:	40011400 	.word	0x40011400
 8007dac:	58024400 	.word	0x58024400
 8007db0:	40007800 	.word	0x40007800
 8007db4:	40007c00 	.word	0x40007c00
 8007db8:	40011800 	.word	0x40011800
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4aad      	ldr	r2, [pc, #692]	@ (8008078 <UART_SetConfig+0x900>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d176      	bne.n	8007eb4 <UART_SetConfig+0x73c>
 8007dc6:	4bad      	ldr	r3, [pc, #692]	@ (800807c <UART_SetConfig+0x904>)
 8007dc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007dce:	2b28      	cmp	r3, #40	@ 0x28
 8007dd0:	d86c      	bhi.n	8007eac <UART_SetConfig+0x734>
 8007dd2:	a201      	add	r2, pc, #4	@ (adr r2, 8007dd8 <UART_SetConfig+0x660>)
 8007dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd8:	08007e7d 	.word	0x08007e7d
 8007ddc:	08007ead 	.word	0x08007ead
 8007de0:	08007ead 	.word	0x08007ead
 8007de4:	08007ead 	.word	0x08007ead
 8007de8:	08007ead 	.word	0x08007ead
 8007dec:	08007ead 	.word	0x08007ead
 8007df0:	08007ead 	.word	0x08007ead
 8007df4:	08007ead 	.word	0x08007ead
 8007df8:	08007e85 	.word	0x08007e85
 8007dfc:	08007ead 	.word	0x08007ead
 8007e00:	08007ead 	.word	0x08007ead
 8007e04:	08007ead 	.word	0x08007ead
 8007e08:	08007ead 	.word	0x08007ead
 8007e0c:	08007ead 	.word	0x08007ead
 8007e10:	08007ead 	.word	0x08007ead
 8007e14:	08007ead 	.word	0x08007ead
 8007e18:	08007e8d 	.word	0x08007e8d
 8007e1c:	08007ead 	.word	0x08007ead
 8007e20:	08007ead 	.word	0x08007ead
 8007e24:	08007ead 	.word	0x08007ead
 8007e28:	08007ead 	.word	0x08007ead
 8007e2c:	08007ead 	.word	0x08007ead
 8007e30:	08007ead 	.word	0x08007ead
 8007e34:	08007ead 	.word	0x08007ead
 8007e38:	08007e95 	.word	0x08007e95
 8007e3c:	08007ead 	.word	0x08007ead
 8007e40:	08007ead 	.word	0x08007ead
 8007e44:	08007ead 	.word	0x08007ead
 8007e48:	08007ead 	.word	0x08007ead
 8007e4c:	08007ead 	.word	0x08007ead
 8007e50:	08007ead 	.word	0x08007ead
 8007e54:	08007ead 	.word	0x08007ead
 8007e58:	08007e9d 	.word	0x08007e9d
 8007e5c:	08007ead 	.word	0x08007ead
 8007e60:	08007ead 	.word	0x08007ead
 8007e64:	08007ead 	.word	0x08007ead
 8007e68:	08007ead 	.word	0x08007ead
 8007e6c:	08007ead 	.word	0x08007ead
 8007e70:	08007ead 	.word	0x08007ead
 8007e74:	08007ead 	.word	0x08007ead
 8007e78:	08007ea5 	.word	0x08007ea5
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e82:	e050      	b.n	8007f26 <UART_SetConfig+0x7ae>
 8007e84:	2304      	movs	r3, #4
 8007e86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e8a:	e04c      	b.n	8007f26 <UART_SetConfig+0x7ae>
 8007e8c:	2308      	movs	r3, #8
 8007e8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e92:	e048      	b.n	8007f26 <UART_SetConfig+0x7ae>
 8007e94:	2310      	movs	r3, #16
 8007e96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e9a:	e044      	b.n	8007f26 <UART_SetConfig+0x7ae>
 8007e9c:	2320      	movs	r3, #32
 8007e9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ea2:	e040      	b.n	8007f26 <UART_SetConfig+0x7ae>
 8007ea4:	2340      	movs	r3, #64	@ 0x40
 8007ea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007eaa:	e03c      	b.n	8007f26 <UART_SetConfig+0x7ae>
 8007eac:	2380      	movs	r3, #128	@ 0x80
 8007eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007eb2:	e038      	b.n	8007f26 <UART_SetConfig+0x7ae>
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a71      	ldr	r2, [pc, #452]	@ (8008080 <UART_SetConfig+0x908>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d130      	bne.n	8007f20 <UART_SetConfig+0x7a8>
 8007ebe:	4b6f      	ldr	r3, [pc, #444]	@ (800807c <UART_SetConfig+0x904>)
 8007ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ec2:	f003 0307 	and.w	r3, r3, #7
 8007ec6:	2b05      	cmp	r3, #5
 8007ec8:	d826      	bhi.n	8007f18 <UART_SetConfig+0x7a0>
 8007eca:	a201      	add	r2, pc, #4	@ (adr r2, 8007ed0 <UART_SetConfig+0x758>)
 8007ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ed0:	08007ee9 	.word	0x08007ee9
 8007ed4:	08007ef1 	.word	0x08007ef1
 8007ed8:	08007ef9 	.word	0x08007ef9
 8007edc:	08007f01 	.word	0x08007f01
 8007ee0:	08007f09 	.word	0x08007f09
 8007ee4:	08007f11 	.word	0x08007f11
 8007ee8:	2302      	movs	r3, #2
 8007eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007eee:	e01a      	b.n	8007f26 <UART_SetConfig+0x7ae>
 8007ef0:	2304      	movs	r3, #4
 8007ef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ef6:	e016      	b.n	8007f26 <UART_SetConfig+0x7ae>
 8007ef8:	2308      	movs	r3, #8
 8007efa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007efe:	e012      	b.n	8007f26 <UART_SetConfig+0x7ae>
 8007f00:	2310      	movs	r3, #16
 8007f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f06:	e00e      	b.n	8007f26 <UART_SetConfig+0x7ae>
 8007f08:	2320      	movs	r3, #32
 8007f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f0e:	e00a      	b.n	8007f26 <UART_SetConfig+0x7ae>
 8007f10:	2340      	movs	r3, #64	@ 0x40
 8007f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f16:	e006      	b.n	8007f26 <UART_SetConfig+0x7ae>
 8007f18:	2380      	movs	r3, #128	@ 0x80
 8007f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f1e:	e002      	b.n	8007f26 <UART_SetConfig+0x7ae>
 8007f20:	2380      	movs	r3, #128	@ 0x80
 8007f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a55      	ldr	r2, [pc, #340]	@ (8008080 <UART_SetConfig+0x908>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	f040 80f8 	bne.w	8008122 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007f32:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007f36:	2b20      	cmp	r3, #32
 8007f38:	dc46      	bgt.n	8007fc8 <UART_SetConfig+0x850>
 8007f3a:	2b02      	cmp	r3, #2
 8007f3c:	db75      	blt.n	800802a <UART_SetConfig+0x8b2>
 8007f3e:	3b02      	subs	r3, #2
 8007f40:	2b1e      	cmp	r3, #30
 8007f42:	d872      	bhi.n	800802a <UART_SetConfig+0x8b2>
 8007f44:	a201      	add	r2, pc, #4	@ (adr r2, 8007f4c <UART_SetConfig+0x7d4>)
 8007f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f4a:	bf00      	nop
 8007f4c:	08007fcf 	.word	0x08007fcf
 8007f50:	0800802b 	.word	0x0800802b
 8007f54:	08007fd7 	.word	0x08007fd7
 8007f58:	0800802b 	.word	0x0800802b
 8007f5c:	0800802b 	.word	0x0800802b
 8007f60:	0800802b 	.word	0x0800802b
 8007f64:	08007fe7 	.word	0x08007fe7
 8007f68:	0800802b 	.word	0x0800802b
 8007f6c:	0800802b 	.word	0x0800802b
 8007f70:	0800802b 	.word	0x0800802b
 8007f74:	0800802b 	.word	0x0800802b
 8007f78:	0800802b 	.word	0x0800802b
 8007f7c:	0800802b 	.word	0x0800802b
 8007f80:	0800802b 	.word	0x0800802b
 8007f84:	08007ff7 	.word	0x08007ff7
 8007f88:	0800802b 	.word	0x0800802b
 8007f8c:	0800802b 	.word	0x0800802b
 8007f90:	0800802b 	.word	0x0800802b
 8007f94:	0800802b 	.word	0x0800802b
 8007f98:	0800802b 	.word	0x0800802b
 8007f9c:	0800802b 	.word	0x0800802b
 8007fa0:	0800802b 	.word	0x0800802b
 8007fa4:	0800802b 	.word	0x0800802b
 8007fa8:	0800802b 	.word	0x0800802b
 8007fac:	0800802b 	.word	0x0800802b
 8007fb0:	0800802b 	.word	0x0800802b
 8007fb4:	0800802b 	.word	0x0800802b
 8007fb8:	0800802b 	.word	0x0800802b
 8007fbc:	0800802b 	.word	0x0800802b
 8007fc0:	0800802b 	.word	0x0800802b
 8007fc4:	0800801d 	.word	0x0800801d
 8007fc8:	2b40      	cmp	r3, #64	@ 0x40
 8007fca:	d02a      	beq.n	8008022 <UART_SetConfig+0x8aa>
 8007fcc:	e02d      	b.n	800802a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007fce:	f7fe f865 	bl	800609c <HAL_RCCEx_GetD3PCLK1Freq>
 8007fd2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007fd4:	e02f      	b.n	8008036 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f7fe f874 	bl	80060c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fe4:	e027      	b.n	8008036 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fe6:	f107 0318 	add.w	r3, r7, #24
 8007fea:	4618      	mov	r0, r3
 8007fec:	f7fe f9c0 	bl	8006370 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ff4:	e01f      	b.n	8008036 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ff6:	4b21      	ldr	r3, [pc, #132]	@ (800807c <UART_SetConfig+0x904>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f003 0320 	and.w	r3, r3, #32
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d009      	beq.n	8008016 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008002:	4b1e      	ldr	r3, [pc, #120]	@ (800807c <UART_SetConfig+0x904>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	08db      	lsrs	r3, r3, #3
 8008008:	f003 0303 	and.w	r3, r3, #3
 800800c:	4a1d      	ldr	r2, [pc, #116]	@ (8008084 <UART_SetConfig+0x90c>)
 800800e:	fa22 f303 	lsr.w	r3, r2, r3
 8008012:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008014:	e00f      	b.n	8008036 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008016:	4b1b      	ldr	r3, [pc, #108]	@ (8008084 <UART_SetConfig+0x90c>)
 8008018:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800801a:	e00c      	b.n	8008036 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800801c:	4b1a      	ldr	r3, [pc, #104]	@ (8008088 <UART_SetConfig+0x910>)
 800801e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008020:	e009      	b.n	8008036 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008022:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008026:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008028:	e005      	b.n	8008036 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800802a:	2300      	movs	r3, #0
 800802c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800802e:	2301      	movs	r3, #1
 8008030:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008034:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008036:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008038:	2b00      	cmp	r3, #0
 800803a:	f000 81ee 	beq.w	800841a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008042:	4a12      	ldr	r2, [pc, #72]	@ (800808c <UART_SetConfig+0x914>)
 8008044:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008048:	461a      	mov	r2, r3
 800804a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800804c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008050:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	685a      	ldr	r2, [r3, #4]
 8008056:	4613      	mov	r3, r2
 8008058:	005b      	lsls	r3, r3, #1
 800805a:	4413      	add	r3, r2
 800805c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800805e:	429a      	cmp	r2, r3
 8008060:	d305      	bcc.n	800806e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	685b      	ldr	r3, [r3, #4]
 8008066:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008068:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800806a:	429a      	cmp	r2, r3
 800806c:	d910      	bls.n	8008090 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800806e:	2301      	movs	r3, #1
 8008070:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008074:	e1d1      	b.n	800841a <UART_SetConfig+0xca2>
 8008076:	bf00      	nop
 8008078:	40011c00 	.word	0x40011c00
 800807c:	58024400 	.word	0x58024400
 8008080:	58000c00 	.word	0x58000c00
 8008084:	03d09000 	.word	0x03d09000
 8008088:	003d0900 	.word	0x003d0900
 800808c:	0800a0e4 	.word	0x0800a0e4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008090:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008092:	2200      	movs	r2, #0
 8008094:	60bb      	str	r3, [r7, #8]
 8008096:	60fa      	str	r2, [r7, #12]
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800809c:	4ac0      	ldr	r2, [pc, #768]	@ (80083a0 <UART_SetConfig+0xc28>)
 800809e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	2200      	movs	r2, #0
 80080a6:	603b      	str	r3, [r7, #0]
 80080a8:	607a      	str	r2, [r7, #4]
 80080aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80080b2:	f7f8 f92d 	bl	8000310 <__aeabi_uldivmod>
 80080b6:	4602      	mov	r2, r0
 80080b8:	460b      	mov	r3, r1
 80080ba:	4610      	mov	r0, r2
 80080bc:	4619      	mov	r1, r3
 80080be:	f04f 0200 	mov.w	r2, #0
 80080c2:	f04f 0300 	mov.w	r3, #0
 80080c6:	020b      	lsls	r3, r1, #8
 80080c8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80080cc:	0202      	lsls	r2, r0, #8
 80080ce:	6979      	ldr	r1, [r7, #20]
 80080d0:	6849      	ldr	r1, [r1, #4]
 80080d2:	0849      	lsrs	r1, r1, #1
 80080d4:	2000      	movs	r0, #0
 80080d6:	460c      	mov	r4, r1
 80080d8:	4605      	mov	r5, r0
 80080da:	eb12 0804 	adds.w	r8, r2, r4
 80080de:	eb43 0905 	adc.w	r9, r3, r5
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	2200      	movs	r2, #0
 80080e8:	469a      	mov	sl, r3
 80080ea:	4693      	mov	fp, r2
 80080ec:	4652      	mov	r2, sl
 80080ee:	465b      	mov	r3, fp
 80080f0:	4640      	mov	r0, r8
 80080f2:	4649      	mov	r1, r9
 80080f4:	f7f8 f90c 	bl	8000310 <__aeabi_uldivmod>
 80080f8:	4602      	mov	r2, r0
 80080fa:	460b      	mov	r3, r1
 80080fc:	4613      	mov	r3, r2
 80080fe:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008102:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008106:	d308      	bcc.n	800811a <UART_SetConfig+0x9a2>
 8008108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800810a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800810e:	d204      	bcs.n	800811a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008116:	60da      	str	r2, [r3, #12]
 8008118:	e17f      	b.n	800841a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800811a:	2301      	movs	r3, #1
 800811c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008120:	e17b      	b.n	800841a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	69db      	ldr	r3, [r3, #28]
 8008126:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800812a:	f040 80bd 	bne.w	80082a8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800812e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008132:	2b20      	cmp	r3, #32
 8008134:	dc48      	bgt.n	80081c8 <UART_SetConfig+0xa50>
 8008136:	2b00      	cmp	r3, #0
 8008138:	db7b      	blt.n	8008232 <UART_SetConfig+0xaba>
 800813a:	2b20      	cmp	r3, #32
 800813c:	d879      	bhi.n	8008232 <UART_SetConfig+0xaba>
 800813e:	a201      	add	r2, pc, #4	@ (adr r2, 8008144 <UART_SetConfig+0x9cc>)
 8008140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008144:	080081cf 	.word	0x080081cf
 8008148:	080081d7 	.word	0x080081d7
 800814c:	08008233 	.word	0x08008233
 8008150:	08008233 	.word	0x08008233
 8008154:	080081df 	.word	0x080081df
 8008158:	08008233 	.word	0x08008233
 800815c:	08008233 	.word	0x08008233
 8008160:	08008233 	.word	0x08008233
 8008164:	080081ef 	.word	0x080081ef
 8008168:	08008233 	.word	0x08008233
 800816c:	08008233 	.word	0x08008233
 8008170:	08008233 	.word	0x08008233
 8008174:	08008233 	.word	0x08008233
 8008178:	08008233 	.word	0x08008233
 800817c:	08008233 	.word	0x08008233
 8008180:	08008233 	.word	0x08008233
 8008184:	080081ff 	.word	0x080081ff
 8008188:	08008233 	.word	0x08008233
 800818c:	08008233 	.word	0x08008233
 8008190:	08008233 	.word	0x08008233
 8008194:	08008233 	.word	0x08008233
 8008198:	08008233 	.word	0x08008233
 800819c:	08008233 	.word	0x08008233
 80081a0:	08008233 	.word	0x08008233
 80081a4:	08008233 	.word	0x08008233
 80081a8:	08008233 	.word	0x08008233
 80081ac:	08008233 	.word	0x08008233
 80081b0:	08008233 	.word	0x08008233
 80081b4:	08008233 	.word	0x08008233
 80081b8:	08008233 	.word	0x08008233
 80081bc:	08008233 	.word	0x08008233
 80081c0:	08008233 	.word	0x08008233
 80081c4:	08008225 	.word	0x08008225
 80081c8:	2b40      	cmp	r3, #64	@ 0x40
 80081ca:	d02e      	beq.n	800822a <UART_SetConfig+0xab2>
 80081cc:	e031      	b.n	8008232 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081ce:	f7fc fd99 	bl	8004d04 <HAL_RCC_GetPCLK1Freq>
 80081d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80081d4:	e033      	b.n	800823e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80081d6:	f7fc fdab 	bl	8004d30 <HAL_RCC_GetPCLK2Freq>
 80081da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80081dc:	e02f      	b.n	800823e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80081e2:	4618      	mov	r0, r3
 80081e4:	f7fd ff70 	bl	80060c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80081e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081ec:	e027      	b.n	800823e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081ee:	f107 0318 	add.w	r3, r7, #24
 80081f2:	4618      	mov	r0, r3
 80081f4:	f7fe f8bc 	bl	8006370 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80081f8:	69fb      	ldr	r3, [r7, #28]
 80081fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081fc:	e01f      	b.n	800823e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80081fe:	4b69      	ldr	r3, [pc, #420]	@ (80083a4 <UART_SetConfig+0xc2c>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f003 0320 	and.w	r3, r3, #32
 8008206:	2b00      	cmp	r3, #0
 8008208:	d009      	beq.n	800821e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800820a:	4b66      	ldr	r3, [pc, #408]	@ (80083a4 <UART_SetConfig+0xc2c>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	08db      	lsrs	r3, r3, #3
 8008210:	f003 0303 	and.w	r3, r3, #3
 8008214:	4a64      	ldr	r2, [pc, #400]	@ (80083a8 <UART_SetConfig+0xc30>)
 8008216:	fa22 f303 	lsr.w	r3, r2, r3
 800821a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800821c:	e00f      	b.n	800823e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800821e:	4b62      	ldr	r3, [pc, #392]	@ (80083a8 <UART_SetConfig+0xc30>)
 8008220:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008222:	e00c      	b.n	800823e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008224:	4b61      	ldr	r3, [pc, #388]	@ (80083ac <UART_SetConfig+0xc34>)
 8008226:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008228:	e009      	b.n	800823e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800822a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800822e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008230:	e005      	b.n	800823e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8008232:	2300      	movs	r3, #0
 8008234:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008236:	2301      	movs	r3, #1
 8008238:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800823c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800823e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008240:	2b00      	cmp	r3, #0
 8008242:	f000 80ea 	beq.w	800841a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800824a:	4a55      	ldr	r2, [pc, #340]	@ (80083a0 <UART_SetConfig+0xc28>)
 800824c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008250:	461a      	mov	r2, r3
 8008252:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008254:	fbb3 f3f2 	udiv	r3, r3, r2
 8008258:	005a      	lsls	r2, r3, #1
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	085b      	lsrs	r3, r3, #1
 8008260:	441a      	add	r2, r3
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	fbb2 f3f3 	udiv	r3, r2, r3
 800826a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800826c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800826e:	2b0f      	cmp	r3, #15
 8008270:	d916      	bls.n	80082a0 <UART_SetConfig+0xb28>
 8008272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008274:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008278:	d212      	bcs.n	80082a0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800827a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800827c:	b29b      	uxth	r3, r3
 800827e:	f023 030f 	bic.w	r3, r3, #15
 8008282:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008286:	085b      	lsrs	r3, r3, #1
 8008288:	b29b      	uxth	r3, r3
 800828a:	f003 0307 	and.w	r3, r3, #7
 800828e:	b29a      	uxth	r2, r3
 8008290:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008292:	4313      	orrs	r3, r2
 8008294:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800829c:	60da      	str	r2, [r3, #12]
 800829e:	e0bc      	b.n	800841a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80082a0:	2301      	movs	r3, #1
 80082a2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80082a6:	e0b8      	b.n	800841a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80082a8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80082ac:	2b20      	cmp	r3, #32
 80082ae:	dc4b      	bgt.n	8008348 <UART_SetConfig+0xbd0>
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	f2c0 8087 	blt.w	80083c4 <UART_SetConfig+0xc4c>
 80082b6:	2b20      	cmp	r3, #32
 80082b8:	f200 8084 	bhi.w	80083c4 <UART_SetConfig+0xc4c>
 80082bc:	a201      	add	r2, pc, #4	@ (adr r2, 80082c4 <UART_SetConfig+0xb4c>)
 80082be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c2:	bf00      	nop
 80082c4:	0800834f 	.word	0x0800834f
 80082c8:	08008357 	.word	0x08008357
 80082cc:	080083c5 	.word	0x080083c5
 80082d0:	080083c5 	.word	0x080083c5
 80082d4:	0800835f 	.word	0x0800835f
 80082d8:	080083c5 	.word	0x080083c5
 80082dc:	080083c5 	.word	0x080083c5
 80082e0:	080083c5 	.word	0x080083c5
 80082e4:	0800836f 	.word	0x0800836f
 80082e8:	080083c5 	.word	0x080083c5
 80082ec:	080083c5 	.word	0x080083c5
 80082f0:	080083c5 	.word	0x080083c5
 80082f4:	080083c5 	.word	0x080083c5
 80082f8:	080083c5 	.word	0x080083c5
 80082fc:	080083c5 	.word	0x080083c5
 8008300:	080083c5 	.word	0x080083c5
 8008304:	0800837f 	.word	0x0800837f
 8008308:	080083c5 	.word	0x080083c5
 800830c:	080083c5 	.word	0x080083c5
 8008310:	080083c5 	.word	0x080083c5
 8008314:	080083c5 	.word	0x080083c5
 8008318:	080083c5 	.word	0x080083c5
 800831c:	080083c5 	.word	0x080083c5
 8008320:	080083c5 	.word	0x080083c5
 8008324:	080083c5 	.word	0x080083c5
 8008328:	080083c5 	.word	0x080083c5
 800832c:	080083c5 	.word	0x080083c5
 8008330:	080083c5 	.word	0x080083c5
 8008334:	080083c5 	.word	0x080083c5
 8008338:	080083c5 	.word	0x080083c5
 800833c:	080083c5 	.word	0x080083c5
 8008340:	080083c5 	.word	0x080083c5
 8008344:	080083b7 	.word	0x080083b7
 8008348:	2b40      	cmp	r3, #64	@ 0x40
 800834a:	d037      	beq.n	80083bc <UART_SetConfig+0xc44>
 800834c:	e03a      	b.n	80083c4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800834e:	f7fc fcd9 	bl	8004d04 <HAL_RCC_GetPCLK1Freq>
 8008352:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008354:	e03c      	b.n	80083d0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008356:	f7fc fceb 	bl	8004d30 <HAL_RCC_GetPCLK2Freq>
 800835a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800835c:	e038      	b.n	80083d0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800835e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008362:	4618      	mov	r0, r3
 8008364:	f7fd feb0 	bl	80060c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800836a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800836c:	e030      	b.n	80083d0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800836e:	f107 0318 	add.w	r3, r7, #24
 8008372:	4618      	mov	r0, r3
 8008374:	f7fd fffc 	bl	8006370 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008378:	69fb      	ldr	r3, [r7, #28]
 800837a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800837c:	e028      	b.n	80083d0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800837e:	4b09      	ldr	r3, [pc, #36]	@ (80083a4 <UART_SetConfig+0xc2c>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f003 0320 	and.w	r3, r3, #32
 8008386:	2b00      	cmp	r3, #0
 8008388:	d012      	beq.n	80083b0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800838a:	4b06      	ldr	r3, [pc, #24]	@ (80083a4 <UART_SetConfig+0xc2c>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	08db      	lsrs	r3, r3, #3
 8008390:	f003 0303 	and.w	r3, r3, #3
 8008394:	4a04      	ldr	r2, [pc, #16]	@ (80083a8 <UART_SetConfig+0xc30>)
 8008396:	fa22 f303 	lsr.w	r3, r2, r3
 800839a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800839c:	e018      	b.n	80083d0 <UART_SetConfig+0xc58>
 800839e:	bf00      	nop
 80083a0:	0800a0e4 	.word	0x0800a0e4
 80083a4:	58024400 	.word	0x58024400
 80083a8:	03d09000 	.word	0x03d09000
 80083ac:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80083b0:	4b24      	ldr	r3, [pc, #144]	@ (8008444 <UART_SetConfig+0xccc>)
 80083b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083b4:	e00c      	b.n	80083d0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80083b6:	4b24      	ldr	r3, [pc, #144]	@ (8008448 <UART_SetConfig+0xcd0>)
 80083b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083ba:	e009      	b.n	80083d0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80083c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083c2:	e005      	b.n	80083d0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80083c4:	2300      	movs	r3, #0
 80083c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80083c8:	2301      	movs	r3, #1
 80083ca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80083ce:	bf00      	nop
    }

    if (pclk != 0U)
 80083d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d021      	beq.n	800841a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083da:	4a1c      	ldr	r2, [pc, #112]	@ (800844c <UART_SetConfig+0xcd4>)
 80083dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083e0:	461a      	mov	r2, r3
 80083e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083e4:	fbb3 f2f2 	udiv	r2, r3, r2
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	085b      	lsrs	r3, r3, #1
 80083ee:	441a      	add	r2, r3
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80083f8:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083fc:	2b0f      	cmp	r3, #15
 80083fe:	d909      	bls.n	8008414 <UART_SetConfig+0xc9c>
 8008400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008402:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008406:	d205      	bcs.n	8008414 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800840a:	b29a      	uxth	r2, r3
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	60da      	str	r2, [r3, #12]
 8008412:	e002      	b.n	800841a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008414:	2301      	movs	r3, #1
 8008416:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	2201      	movs	r2, #1
 800841e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	2201      	movs	r2, #1
 8008426:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	2200      	movs	r2, #0
 800842e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	2200      	movs	r2, #0
 8008434:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008436:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800843a:	4618      	mov	r0, r3
 800843c:	3748      	adds	r7, #72	@ 0x48
 800843e:	46bd      	mov	sp, r7
 8008440:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008444:	03d09000 	.word	0x03d09000
 8008448:	003d0900 	.word	0x003d0900
 800844c:	0800a0e4 	.word	0x0800a0e4

08008450 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008450:	b480      	push	{r7}
 8008452:	b083      	sub	sp, #12
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800845c:	f003 0308 	and.w	r3, r3, #8
 8008460:	2b00      	cmp	r3, #0
 8008462:	d00a      	beq.n	800847a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	430a      	orrs	r2, r1
 8008478:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800847e:	f003 0301 	and.w	r3, r3, #1
 8008482:	2b00      	cmp	r3, #0
 8008484:	d00a      	beq.n	800849c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	430a      	orrs	r2, r1
 800849a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084a0:	f003 0302 	and.w	r3, r3, #2
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d00a      	beq.n	80084be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	430a      	orrs	r2, r1
 80084bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084c2:	f003 0304 	and.w	r3, r3, #4
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d00a      	beq.n	80084e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	430a      	orrs	r2, r1
 80084de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084e4:	f003 0310 	and.w	r3, r3, #16
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d00a      	beq.n	8008502 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	430a      	orrs	r2, r1
 8008500:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008506:	f003 0320 	and.w	r3, r3, #32
 800850a:	2b00      	cmp	r3, #0
 800850c:	d00a      	beq.n	8008524 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	430a      	orrs	r2, r1
 8008522:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008528:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800852c:	2b00      	cmp	r3, #0
 800852e:	d01a      	beq.n	8008566 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	430a      	orrs	r2, r1
 8008544:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800854a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800854e:	d10a      	bne.n	8008566 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	430a      	orrs	r2, r1
 8008564:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800856a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800856e:	2b00      	cmp	r3, #0
 8008570:	d00a      	beq.n	8008588 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	430a      	orrs	r2, r1
 8008586:	605a      	str	r2, [r3, #4]
  }
}
 8008588:	bf00      	nop
 800858a:	370c      	adds	r7, #12
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr

08008594 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b098      	sub	sp, #96	@ 0x60
 8008598:	af02      	add	r7, sp, #8
 800859a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2200      	movs	r2, #0
 80085a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80085a4:	f7fa fad8 	bl	8002b58 <HAL_GetTick>
 80085a8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f003 0308 	and.w	r3, r3, #8
 80085b4:	2b08      	cmp	r3, #8
 80085b6:	d12f      	bne.n	8008618 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80085bc:	9300      	str	r3, [sp, #0]
 80085be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80085c0:	2200      	movs	r2, #0
 80085c2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 f88e 	bl	80086e8 <UART_WaitOnFlagUntilTimeout>
 80085cc:	4603      	mov	r3, r0
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d022      	beq.n	8008618 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085da:	e853 3f00 	ldrex	r3, [r3]
 80085de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80085e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80085e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	461a      	mov	r2, r3
 80085ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80085f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80085f2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80085f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80085f8:	e841 2300 	strex	r3, r2, [r1]
 80085fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80085fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008600:	2b00      	cmp	r3, #0
 8008602:	d1e6      	bne.n	80085d2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2220      	movs	r2, #32
 8008608:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008614:	2303      	movs	r3, #3
 8008616:	e063      	b.n	80086e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f003 0304 	and.w	r3, r3, #4
 8008622:	2b04      	cmp	r3, #4
 8008624:	d149      	bne.n	80086ba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008626:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800862a:	9300      	str	r3, [sp, #0]
 800862c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800862e:	2200      	movs	r2, #0
 8008630:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f000 f857 	bl	80086e8 <UART_WaitOnFlagUntilTimeout>
 800863a:	4603      	mov	r3, r0
 800863c:	2b00      	cmp	r3, #0
 800863e:	d03c      	beq.n	80086ba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008648:	e853 3f00 	ldrex	r3, [r3]
 800864c:	623b      	str	r3, [r7, #32]
   return(result);
 800864e:	6a3b      	ldr	r3, [r7, #32]
 8008650:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008654:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	461a      	mov	r2, r3
 800865c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800865e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008660:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008662:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008664:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008666:	e841 2300 	strex	r3, r2, [r1]
 800866a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800866c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800866e:	2b00      	cmp	r3, #0
 8008670:	d1e6      	bne.n	8008640 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	3308      	adds	r3, #8
 8008678:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	e853 3f00 	ldrex	r3, [r3]
 8008680:	60fb      	str	r3, [r7, #12]
   return(result);
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	f023 0301 	bic.w	r3, r3, #1
 8008688:	64bb      	str	r3, [r7, #72]	@ 0x48
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	3308      	adds	r3, #8
 8008690:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008692:	61fa      	str	r2, [r7, #28]
 8008694:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008696:	69b9      	ldr	r1, [r7, #24]
 8008698:	69fa      	ldr	r2, [r7, #28]
 800869a:	e841 2300 	strex	r3, r2, [r1]
 800869e:	617b      	str	r3, [r7, #20]
   return(result);
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d1e5      	bne.n	8008672 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2220      	movs	r2, #32
 80086aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2200      	movs	r2, #0
 80086b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80086b6:	2303      	movs	r3, #3
 80086b8:	e012      	b.n	80086e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2220      	movs	r2, #32
 80086be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2220      	movs	r2, #32
 80086c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2200      	movs	r2, #0
 80086ce:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2200      	movs	r2, #0
 80086d4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2200      	movs	r2, #0
 80086da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80086de:	2300      	movs	r3, #0
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3758      	adds	r7, #88	@ 0x58
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b084      	sub	sp, #16
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	60f8      	str	r0, [r7, #12]
 80086f0:	60b9      	str	r1, [r7, #8]
 80086f2:	603b      	str	r3, [r7, #0]
 80086f4:	4613      	mov	r3, r2
 80086f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086f8:	e04f      	b.n	800879a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086fa:	69bb      	ldr	r3, [r7, #24]
 80086fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008700:	d04b      	beq.n	800879a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008702:	f7fa fa29 	bl	8002b58 <HAL_GetTick>
 8008706:	4602      	mov	r2, r0
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	1ad3      	subs	r3, r2, r3
 800870c:	69ba      	ldr	r2, [r7, #24]
 800870e:	429a      	cmp	r2, r3
 8008710:	d302      	bcc.n	8008718 <UART_WaitOnFlagUntilTimeout+0x30>
 8008712:	69bb      	ldr	r3, [r7, #24]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d101      	bne.n	800871c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008718:	2303      	movs	r3, #3
 800871a:	e04e      	b.n	80087ba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f003 0304 	and.w	r3, r3, #4
 8008726:	2b00      	cmp	r3, #0
 8008728:	d037      	beq.n	800879a <UART_WaitOnFlagUntilTimeout+0xb2>
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	2b80      	cmp	r3, #128	@ 0x80
 800872e:	d034      	beq.n	800879a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	2b40      	cmp	r3, #64	@ 0x40
 8008734:	d031      	beq.n	800879a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	69db      	ldr	r3, [r3, #28]
 800873c:	f003 0308 	and.w	r3, r3, #8
 8008740:	2b08      	cmp	r3, #8
 8008742:	d110      	bne.n	8008766 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	2208      	movs	r2, #8
 800874a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800874c:	68f8      	ldr	r0, [r7, #12]
 800874e:	f000 f839 	bl	80087c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2208      	movs	r2, #8
 8008756:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2200      	movs	r2, #0
 800875e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008762:	2301      	movs	r3, #1
 8008764:	e029      	b.n	80087ba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	69db      	ldr	r3, [r3, #28]
 800876c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008770:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008774:	d111      	bne.n	800879a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800877e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008780:	68f8      	ldr	r0, [r7, #12]
 8008782:	f000 f81f 	bl	80087c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2220      	movs	r2, #32
 800878a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2200      	movs	r2, #0
 8008792:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008796:	2303      	movs	r3, #3
 8008798:	e00f      	b.n	80087ba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	69da      	ldr	r2, [r3, #28]
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	4013      	ands	r3, r2
 80087a4:	68ba      	ldr	r2, [r7, #8]
 80087a6:	429a      	cmp	r2, r3
 80087a8:	bf0c      	ite	eq
 80087aa:	2301      	moveq	r3, #1
 80087ac:	2300      	movne	r3, #0
 80087ae:	b2db      	uxtb	r3, r3
 80087b0:	461a      	mov	r2, r3
 80087b2:	79fb      	ldrb	r3, [r7, #7]
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d0a0      	beq.n	80086fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80087b8:	2300      	movs	r3, #0
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3710      	adds	r7, #16
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
	...

080087c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b095      	sub	sp, #84	@ 0x54
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087d4:	e853 3f00 	ldrex	r3, [r3]
 80087d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80087da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80087e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	461a      	mov	r2, r3
 80087e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80087ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80087ec:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80087f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80087f2:	e841 2300 	strex	r3, r2, [r1]
 80087f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80087f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d1e6      	bne.n	80087cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	3308      	adds	r3, #8
 8008804:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008806:	6a3b      	ldr	r3, [r7, #32]
 8008808:	e853 3f00 	ldrex	r3, [r3]
 800880c:	61fb      	str	r3, [r7, #28]
   return(result);
 800880e:	69fa      	ldr	r2, [r7, #28]
 8008810:	4b1e      	ldr	r3, [pc, #120]	@ (800888c <UART_EndRxTransfer+0xc8>)
 8008812:	4013      	ands	r3, r2
 8008814:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	3308      	adds	r3, #8
 800881c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800881e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008820:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008822:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008824:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008826:	e841 2300 	strex	r3, r2, [r1]
 800882a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800882c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800882e:	2b00      	cmp	r3, #0
 8008830:	d1e5      	bne.n	80087fe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008836:	2b01      	cmp	r3, #1
 8008838:	d118      	bne.n	800886c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	e853 3f00 	ldrex	r3, [r3]
 8008846:	60bb      	str	r3, [r7, #8]
   return(result);
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	f023 0310 	bic.w	r3, r3, #16
 800884e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	461a      	mov	r2, r3
 8008856:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008858:	61bb      	str	r3, [r7, #24]
 800885a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800885c:	6979      	ldr	r1, [r7, #20]
 800885e:	69ba      	ldr	r2, [r7, #24]
 8008860:	e841 2300 	strex	r3, r2, [r1]
 8008864:	613b      	str	r3, [r7, #16]
   return(result);
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d1e6      	bne.n	800883a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2220      	movs	r2, #32
 8008870:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2200      	movs	r2, #0
 8008878:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2200      	movs	r2, #0
 800887e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008880:	bf00      	nop
 8008882:	3754      	adds	r7, #84	@ 0x54
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr
 800888c:	effffffe 	.word	0xeffffffe

08008890 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008890:	b480      	push	{r7}
 8008892:	b085      	sub	sp, #20
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800889e:	2b01      	cmp	r3, #1
 80088a0:	d101      	bne.n	80088a6 <HAL_UARTEx_DisableFifoMode+0x16>
 80088a2:	2302      	movs	r3, #2
 80088a4:	e027      	b.n	80088f6 <HAL_UARTEx_DisableFifoMode+0x66>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2201      	movs	r2, #1
 80088aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2224      	movs	r2, #36	@ 0x24
 80088b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	681a      	ldr	r2, [r3, #0]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f022 0201 	bic.w	r2, r2, #1
 80088cc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80088d4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2200      	movs	r2, #0
 80088da:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	68fa      	ldr	r2, [r7, #12]
 80088e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2220      	movs	r2, #32
 80088e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2200      	movs	r2, #0
 80088f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80088f4:	2300      	movs	r3, #0
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3714      	adds	r7, #20
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr

08008902 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008902:	b580      	push	{r7, lr}
 8008904:	b084      	sub	sp, #16
 8008906:	af00      	add	r7, sp, #0
 8008908:	6078      	str	r0, [r7, #4]
 800890a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008912:	2b01      	cmp	r3, #1
 8008914:	d101      	bne.n	800891a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008916:	2302      	movs	r3, #2
 8008918:	e02d      	b.n	8008976 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2201      	movs	r2, #1
 800891e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2224      	movs	r2, #36	@ 0x24
 8008926:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	681a      	ldr	r2, [r3, #0]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f022 0201 	bic.w	r2, r2, #1
 8008940:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	689b      	ldr	r3, [r3, #8]
 8008948:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	683a      	ldr	r2, [r7, #0]
 8008952:	430a      	orrs	r2, r1
 8008954:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 f850 	bl	80089fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	68fa      	ldr	r2, [r7, #12]
 8008962:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2220      	movs	r2, #32
 8008968:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008974:	2300      	movs	r3, #0
}
 8008976:	4618      	mov	r0, r3
 8008978:	3710      	adds	r7, #16
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}

0800897e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800897e:	b580      	push	{r7, lr}
 8008980:	b084      	sub	sp, #16
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
 8008986:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800898e:	2b01      	cmp	r3, #1
 8008990:	d101      	bne.n	8008996 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008992:	2302      	movs	r3, #2
 8008994:	e02d      	b.n	80089f2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2201      	movs	r2, #1
 800899a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2224      	movs	r2, #36	@ 0x24
 80089a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	681a      	ldr	r2, [r3, #0]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f022 0201 	bic.w	r2, r2, #1
 80089bc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	689b      	ldr	r3, [r3, #8]
 80089c4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	683a      	ldr	r2, [r7, #0]
 80089ce:	430a      	orrs	r2, r1
 80089d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 f812 	bl	80089fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	68fa      	ldr	r2, [r7, #12]
 80089de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2220      	movs	r2, #32
 80089e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2200      	movs	r2, #0
 80089ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80089f0:	2300      	movs	r3, #0
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3710      	adds	r7, #16
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
	...

080089fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b085      	sub	sp, #20
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d108      	bne.n	8008a1e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2201      	movs	r2, #1
 8008a18:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008a1c:	e031      	b.n	8008a82 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008a1e:	2310      	movs	r3, #16
 8008a20:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008a22:	2310      	movs	r3, #16
 8008a24:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	689b      	ldr	r3, [r3, #8]
 8008a2c:	0e5b      	lsrs	r3, r3, #25
 8008a2e:	b2db      	uxtb	r3, r3
 8008a30:	f003 0307 	and.w	r3, r3, #7
 8008a34:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	689b      	ldr	r3, [r3, #8]
 8008a3c:	0f5b      	lsrs	r3, r3, #29
 8008a3e:	b2db      	uxtb	r3, r3
 8008a40:	f003 0307 	and.w	r3, r3, #7
 8008a44:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008a46:	7bbb      	ldrb	r3, [r7, #14]
 8008a48:	7b3a      	ldrb	r2, [r7, #12]
 8008a4a:	4911      	ldr	r1, [pc, #68]	@ (8008a90 <UARTEx_SetNbDataToProcess+0x94>)
 8008a4c:	5c8a      	ldrb	r2, [r1, r2]
 8008a4e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008a52:	7b3a      	ldrb	r2, [r7, #12]
 8008a54:	490f      	ldr	r1, [pc, #60]	@ (8008a94 <UARTEx_SetNbDataToProcess+0x98>)
 8008a56:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008a58:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a5c:	b29a      	uxth	r2, r3
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008a64:	7bfb      	ldrb	r3, [r7, #15]
 8008a66:	7b7a      	ldrb	r2, [r7, #13]
 8008a68:	4909      	ldr	r1, [pc, #36]	@ (8008a90 <UARTEx_SetNbDataToProcess+0x94>)
 8008a6a:	5c8a      	ldrb	r2, [r1, r2]
 8008a6c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008a70:	7b7a      	ldrb	r2, [r7, #13]
 8008a72:	4908      	ldr	r1, [pc, #32]	@ (8008a94 <UARTEx_SetNbDataToProcess+0x98>)
 8008a74:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008a76:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a7a:	b29a      	uxth	r2, r3
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008a82:	bf00      	nop
 8008a84:	3714      	adds	r7, #20
 8008a86:	46bd      	mov	sp, r7
 8008a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8c:	4770      	bx	lr
 8008a8e:	bf00      	nop
 8008a90:	0800a0fc 	.word	0x0800a0fc
 8008a94:	0800a104 	.word	0x0800a104

08008a98 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b085      	sub	sp, #20
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008aa6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008aaa:	2b84      	cmp	r3, #132	@ 0x84
 8008aac:	d005      	beq.n	8008aba <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008aae:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	4413      	add	r3, r2
 8008ab6:	3303      	adds	r3, #3
 8008ab8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008aba:	68fb      	ldr	r3, [r7, #12]
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3714      	adds	r7, #20
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac6:	4770      	bx	lr

08008ac8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008acc:	f000 fb1a 	bl	8009104 <vTaskStartScheduler>
  
  return osOK;
 8008ad0:	2300      	movs	r3, #0
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	bd80      	pop	{r7, pc}

08008ad6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008ad6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ad8:	b089      	sub	sp, #36	@ 0x24
 8008ada:	af04      	add	r7, sp, #16
 8008adc:	6078      	str	r0, [r7, #4]
 8008ade:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	695b      	ldr	r3, [r3, #20]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d020      	beq.n	8008b2a <osThreadCreate+0x54>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	699b      	ldr	r3, [r3, #24]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d01c      	beq.n	8008b2a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	685c      	ldr	r4, [r3, #4]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	691e      	ldr	r6, [r3, #16]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008b02:	4618      	mov	r0, r3
 8008b04:	f7ff ffc8 	bl	8008a98 <makeFreeRtosPriority>
 8008b08:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	695b      	ldr	r3, [r3, #20]
 8008b0e:	687a      	ldr	r2, [r7, #4]
 8008b10:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008b12:	9202      	str	r2, [sp, #8]
 8008b14:	9301      	str	r3, [sp, #4]
 8008b16:	9100      	str	r1, [sp, #0]
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	4632      	mov	r2, r6
 8008b1c:	4629      	mov	r1, r5
 8008b1e:	4620      	mov	r0, r4
 8008b20:	f000 f8d9 	bl	8008cd6 <xTaskCreateStatic>
 8008b24:	4603      	mov	r3, r0
 8008b26:	60fb      	str	r3, [r7, #12]
 8008b28:	e01c      	b.n	8008b64 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	685c      	ldr	r4, [r3, #4]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008b36:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f7ff ffaa 	bl	8008a98 <makeFreeRtosPriority>
 8008b44:	4602      	mov	r2, r0
 8008b46:	f107 030c 	add.w	r3, r7, #12
 8008b4a:	9301      	str	r3, [sp, #4]
 8008b4c:	9200      	str	r2, [sp, #0]
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	4632      	mov	r2, r6
 8008b52:	4629      	mov	r1, r5
 8008b54:	4620      	mov	r0, r4
 8008b56:	f000 f91e 	bl	8008d96 <xTaskCreate>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	d001      	beq.n	8008b64 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008b60:	2300      	movs	r3, #0
 8008b62:	e000      	b.n	8008b66 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008b64:	68fb      	ldr	r3, [r7, #12]
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3714      	adds	r7, #20
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008b6e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008b6e:	b480      	push	{r7}
 8008b70:	b083      	sub	sp, #12
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f103 0208 	add.w	r2, r3, #8
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f04f 32ff 	mov.w	r2, #4294967295
 8008b86:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f103 0208 	add.w	r2, r3, #8
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f103 0208 	add.w	r2, r3, #8
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008ba2:	bf00      	nop
 8008ba4:	370c      	adds	r7, #12
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr

08008bae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008bae:	b480      	push	{r7}
 8008bb0:	b083      	sub	sp, #12
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008bbc:	bf00      	nop
 8008bbe:	370c      	adds	r7, #12
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc6:	4770      	bx	lr

08008bc8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b085      	sub	sp, #20
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	68fa      	ldr	r2, [r7, #12]
 8008bdc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	689a      	ldr	r2, [r3, #8]
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	689b      	ldr	r3, [r3, #8]
 8008bea:	683a      	ldr	r2, [r7, #0]
 8008bec:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	683a      	ldr	r2, [r7, #0]
 8008bf2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	687a      	ldr	r2, [r7, #4]
 8008bf8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	1c5a      	adds	r2, r3, #1
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	601a      	str	r2, [r3, #0]
}
 8008c04:	bf00      	nop
 8008c06:	3714      	adds	r7, #20
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr

08008c10 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008c10:	b480      	push	{r7}
 8008c12:	b085      	sub	sp, #20
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c26:	d103      	bne.n	8008c30 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	691b      	ldr	r3, [r3, #16]
 8008c2c:	60fb      	str	r3, [r7, #12]
 8008c2e:	e00c      	b.n	8008c4a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	3308      	adds	r3, #8
 8008c34:	60fb      	str	r3, [r7, #12]
 8008c36:	e002      	b.n	8008c3e <vListInsert+0x2e>
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	60fb      	str	r3, [r7, #12]
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	68ba      	ldr	r2, [r7, #8]
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d2f6      	bcs.n	8008c38 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	685a      	ldr	r2, [r3, #4]
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	683a      	ldr	r2, [r7, #0]
 8008c58:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	68fa      	ldr	r2, [r7, #12]
 8008c5e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	683a      	ldr	r2, [r7, #0]
 8008c64:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	1c5a      	adds	r2, r3, #1
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	601a      	str	r2, [r3, #0]
}
 8008c76:	bf00      	nop
 8008c78:	3714      	adds	r7, #20
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c80:	4770      	bx	lr

08008c82 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008c82:	b480      	push	{r7}
 8008c84:	b085      	sub	sp, #20
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	691b      	ldr	r3, [r3, #16]
 8008c8e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	687a      	ldr	r2, [r7, #4]
 8008c96:	6892      	ldr	r2, [r2, #8]
 8008c98:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	689b      	ldr	r3, [r3, #8]
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	6852      	ldr	r2, [r2, #4]
 8008ca2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	685b      	ldr	r3, [r3, #4]
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d103      	bne.n	8008cb6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	689a      	ldr	r2, [r3, #8]
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	1e5a      	subs	r2, r3, #1
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3714      	adds	r7, #20
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd4:	4770      	bx	lr

08008cd6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008cd6:	b580      	push	{r7, lr}
 8008cd8:	b08e      	sub	sp, #56	@ 0x38
 8008cda:	af04      	add	r7, sp, #16
 8008cdc:	60f8      	str	r0, [r7, #12]
 8008cde:	60b9      	str	r1, [r7, #8]
 8008ce0:	607a      	str	r2, [r7, #4]
 8008ce2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008ce4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d10b      	bne.n	8008d02 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008cea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cee:	f383 8811 	msr	BASEPRI, r3
 8008cf2:	f3bf 8f6f 	isb	sy
 8008cf6:	f3bf 8f4f 	dsb	sy
 8008cfa:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008cfc:	bf00      	nop
 8008cfe:	bf00      	nop
 8008d00:	e7fd      	b.n	8008cfe <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d10b      	bne.n	8008d20 <xTaskCreateStatic+0x4a>
	__asm volatile
 8008d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d0c:	f383 8811 	msr	BASEPRI, r3
 8008d10:	f3bf 8f6f 	isb	sy
 8008d14:	f3bf 8f4f 	dsb	sy
 8008d18:	61fb      	str	r3, [r7, #28]
}
 8008d1a:	bf00      	nop
 8008d1c:	bf00      	nop
 8008d1e:	e7fd      	b.n	8008d1c <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008d20:	2354      	movs	r3, #84	@ 0x54
 8008d22:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	2b54      	cmp	r3, #84	@ 0x54
 8008d28:	d00b      	beq.n	8008d42 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008d2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d2e:	f383 8811 	msr	BASEPRI, r3
 8008d32:	f3bf 8f6f 	isb	sy
 8008d36:	f3bf 8f4f 	dsb	sy
 8008d3a:	61bb      	str	r3, [r7, #24]
}
 8008d3c:	bf00      	nop
 8008d3e:	bf00      	nop
 8008d40:	e7fd      	b.n	8008d3e <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008d42:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008d44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d01e      	beq.n	8008d88 <xTaskCreateStatic+0xb2>
 8008d4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d01b      	beq.n	8008d88 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d52:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d56:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008d58:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d5c:	2202      	movs	r2, #2
 8008d5e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008d62:	2300      	movs	r3, #0
 8008d64:	9303      	str	r3, [sp, #12]
 8008d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d68:	9302      	str	r3, [sp, #8]
 8008d6a:	f107 0314 	add.w	r3, r7, #20
 8008d6e:	9301      	str	r3, [sp, #4]
 8008d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d72:	9300      	str	r3, [sp, #0]
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	687a      	ldr	r2, [r7, #4]
 8008d78:	68b9      	ldr	r1, [r7, #8]
 8008d7a:	68f8      	ldr	r0, [r7, #12]
 8008d7c:	f000 f850 	bl	8008e20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008d80:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008d82:	f000 f8d5 	bl	8008f30 <prvAddNewTaskToReadyList>
 8008d86:	e001      	b.n	8008d8c <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008d8c:	697b      	ldr	r3, [r7, #20]
	}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3728      	adds	r7, #40	@ 0x28
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}

08008d96 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008d96:	b580      	push	{r7, lr}
 8008d98:	b08c      	sub	sp, #48	@ 0x30
 8008d9a:	af04      	add	r7, sp, #16
 8008d9c:	60f8      	str	r0, [r7, #12]
 8008d9e:	60b9      	str	r1, [r7, #8]
 8008da0:	603b      	str	r3, [r7, #0]
 8008da2:	4613      	mov	r3, r2
 8008da4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008da6:	88fb      	ldrh	r3, [r7, #6]
 8008da8:	009b      	lsls	r3, r3, #2
 8008daa:	4618      	mov	r0, r3
 8008dac:	f000 ff4c 	bl	8009c48 <pvPortMalloc>
 8008db0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d00e      	beq.n	8008dd6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008db8:	2054      	movs	r0, #84	@ 0x54
 8008dba:	f000 ff45 	bl	8009c48 <pvPortMalloc>
 8008dbe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008dc0:	69fb      	ldr	r3, [r7, #28]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d003      	beq.n	8008dce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008dc6:	69fb      	ldr	r3, [r7, #28]
 8008dc8:	697a      	ldr	r2, [r7, #20]
 8008dca:	631a      	str	r2, [r3, #48]	@ 0x30
 8008dcc:	e005      	b.n	8008dda <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008dce:	6978      	ldr	r0, [r7, #20]
 8008dd0:	f001 f808 	bl	8009de4 <vPortFree>
 8008dd4:	e001      	b.n	8008dda <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008dda:	69fb      	ldr	r3, [r7, #28]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d017      	beq.n	8008e10 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008de0:	69fb      	ldr	r3, [r7, #28]
 8008de2:	2200      	movs	r2, #0
 8008de4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008de8:	88fa      	ldrh	r2, [r7, #6]
 8008dea:	2300      	movs	r3, #0
 8008dec:	9303      	str	r3, [sp, #12]
 8008dee:	69fb      	ldr	r3, [r7, #28]
 8008df0:	9302      	str	r3, [sp, #8]
 8008df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008df4:	9301      	str	r3, [sp, #4]
 8008df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008df8:	9300      	str	r3, [sp, #0]
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	68b9      	ldr	r1, [r7, #8]
 8008dfe:	68f8      	ldr	r0, [r7, #12]
 8008e00:	f000 f80e 	bl	8008e20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008e04:	69f8      	ldr	r0, [r7, #28]
 8008e06:	f000 f893 	bl	8008f30 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	61bb      	str	r3, [r7, #24]
 8008e0e:	e002      	b.n	8008e16 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008e10:	f04f 33ff 	mov.w	r3, #4294967295
 8008e14:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008e16:	69bb      	ldr	r3, [r7, #24]
	}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3720      	adds	r7, #32
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b088      	sub	sp, #32
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	60f8      	str	r0, [r7, #12]
 8008e28:	60b9      	str	r1, [r7, #8]
 8008e2a:	607a      	str	r2, [r7, #4]
 8008e2c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008e32:	6879      	ldr	r1, [r7, #4]
 8008e34:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8008e38:	440b      	add	r3, r1
 8008e3a:	009b      	lsls	r3, r3, #2
 8008e3c:	4413      	add	r3, r2
 8008e3e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008e40:	69bb      	ldr	r3, [r7, #24]
 8008e42:	f023 0307 	bic.w	r3, r3, #7
 8008e46:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008e48:	69bb      	ldr	r3, [r7, #24]
 8008e4a:	f003 0307 	and.w	r3, r3, #7
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d00b      	beq.n	8008e6a <prvInitialiseNewTask+0x4a>
	__asm volatile
 8008e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e56:	f383 8811 	msr	BASEPRI, r3
 8008e5a:	f3bf 8f6f 	isb	sy
 8008e5e:	f3bf 8f4f 	dsb	sy
 8008e62:	617b      	str	r3, [r7, #20]
}
 8008e64:	bf00      	nop
 8008e66:	bf00      	nop
 8008e68:	e7fd      	b.n	8008e66 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d01f      	beq.n	8008eb0 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e70:	2300      	movs	r3, #0
 8008e72:	61fb      	str	r3, [r7, #28]
 8008e74:	e012      	b.n	8008e9c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008e76:	68ba      	ldr	r2, [r7, #8]
 8008e78:	69fb      	ldr	r3, [r7, #28]
 8008e7a:	4413      	add	r3, r2
 8008e7c:	7819      	ldrb	r1, [r3, #0]
 8008e7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e80:	69fb      	ldr	r3, [r7, #28]
 8008e82:	4413      	add	r3, r2
 8008e84:	3334      	adds	r3, #52	@ 0x34
 8008e86:	460a      	mov	r2, r1
 8008e88:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008e8a:	68ba      	ldr	r2, [r7, #8]
 8008e8c:	69fb      	ldr	r3, [r7, #28]
 8008e8e:	4413      	add	r3, r2
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d006      	beq.n	8008ea4 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e96:	69fb      	ldr	r3, [r7, #28]
 8008e98:	3301      	adds	r3, #1
 8008e9a:	61fb      	str	r3, [r7, #28]
 8008e9c:	69fb      	ldr	r3, [r7, #28]
 8008e9e:	2b0f      	cmp	r3, #15
 8008ea0:	d9e9      	bls.n	8008e76 <prvInitialiseNewTask+0x56>
 8008ea2:	e000      	b.n	8008ea6 <prvInitialiseNewTask+0x86>
			{
				break;
 8008ea4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008eae:	e003      	b.n	8008eb8 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eba:	2b06      	cmp	r3, #6
 8008ebc:	d901      	bls.n	8008ec2 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008ebe:	2306      	movs	r3, #6
 8008ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ec4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ec6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ecc:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ed6:	3304      	adds	r3, #4
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f7ff fe68 	bl	8008bae <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ee0:	3318      	adds	r3, #24
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f7ff fe63 	bl	8008bae <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008eec:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ef0:	f1c3 0207 	rsb	r2, r3, #7
 8008ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ef6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008efa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008efc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f00:	2200      	movs	r2, #0
 8008f02:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f06:	2200      	movs	r2, #0
 8008f08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008f0c:	683a      	ldr	r2, [r7, #0]
 8008f0e:	68f9      	ldr	r1, [r7, #12]
 8008f10:	69b8      	ldr	r0, [r7, #24]
 8008f12:	f000 fc85 	bl	8009820 <pxPortInitialiseStack>
 8008f16:	4602      	mov	r2, r0
 8008f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f1a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d002      	beq.n	8008f28 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f26:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f28:	bf00      	nop
 8008f2a:	3720      	adds	r7, #32
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}

08008f30 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b082      	sub	sp, #8
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008f38:	f000 fda6 	bl	8009a88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008f3c:	4b2a      	ldr	r3, [pc, #168]	@ (8008fe8 <prvAddNewTaskToReadyList+0xb8>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	3301      	adds	r3, #1
 8008f42:	4a29      	ldr	r2, [pc, #164]	@ (8008fe8 <prvAddNewTaskToReadyList+0xb8>)
 8008f44:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008f46:	4b29      	ldr	r3, [pc, #164]	@ (8008fec <prvAddNewTaskToReadyList+0xbc>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d109      	bne.n	8008f62 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008f4e:	4a27      	ldr	r2, [pc, #156]	@ (8008fec <prvAddNewTaskToReadyList+0xbc>)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008f54:	4b24      	ldr	r3, [pc, #144]	@ (8008fe8 <prvAddNewTaskToReadyList+0xb8>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	2b01      	cmp	r3, #1
 8008f5a:	d110      	bne.n	8008f7e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008f5c:	f000 fb1e 	bl	800959c <prvInitialiseTaskLists>
 8008f60:	e00d      	b.n	8008f7e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008f62:	4b23      	ldr	r3, [pc, #140]	@ (8008ff0 <prvAddNewTaskToReadyList+0xc0>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d109      	bne.n	8008f7e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008f6a:	4b20      	ldr	r3, [pc, #128]	@ (8008fec <prvAddNewTaskToReadyList+0xbc>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d802      	bhi.n	8008f7e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008f78:	4a1c      	ldr	r2, [pc, #112]	@ (8008fec <prvAddNewTaskToReadyList+0xbc>)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008f7e:	4b1d      	ldr	r3, [pc, #116]	@ (8008ff4 <prvAddNewTaskToReadyList+0xc4>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	3301      	adds	r3, #1
 8008f84:	4a1b      	ldr	r2, [pc, #108]	@ (8008ff4 <prvAddNewTaskToReadyList+0xc4>)
 8008f86:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f8c:	2201      	movs	r2, #1
 8008f8e:	409a      	lsls	r2, r3
 8008f90:	4b19      	ldr	r3, [pc, #100]	@ (8008ff8 <prvAddNewTaskToReadyList+0xc8>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4313      	orrs	r3, r2
 8008f96:	4a18      	ldr	r2, [pc, #96]	@ (8008ff8 <prvAddNewTaskToReadyList+0xc8>)
 8008f98:	6013      	str	r3, [r2, #0]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f9e:	4613      	mov	r3, r2
 8008fa0:	009b      	lsls	r3, r3, #2
 8008fa2:	4413      	add	r3, r2
 8008fa4:	009b      	lsls	r3, r3, #2
 8008fa6:	4a15      	ldr	r2, [pc, #84]	@ (8008ffc <prvAddNewTaskToReadyList+0xcc>)
 8008fa8:	441a      	add	r2, r3
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	3304      	adds	r3, #4
 8008fae:	4619      	mov	r1, r3
 8008fb0:	4610      	mov	r0, r2
 8008fb2:	f7ff fe09 	bl	8008bc8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008fb6:	f000 fd99 	bl	8009aec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008fba:	4b0d      	ldr	r3, [pc, #52]	@ (8008ff0 <prvAddNewTaskToReadyList+0xc0>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d00e      	beq.n	8008fe0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8008fec <prvAddNewTaskToReadyList+0xbc>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	d207      	bcs.n	8008fe0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8009000 <prvAddNewTaskToReadyList+0xd0>)
 8008fd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008fd6:	601a      	str	r2, [r3, #0]
 8008fd8:	f3bf 8f4f 	dsb	sy
 8008fdc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008fe0:	bf00      	nop
 8008fe2:	3708      	adds	r7, #8
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}
 8008fe8:	240005d8 	.word	0x240005d8
 8008fec:	240004d8 	.word	0x240004d8
 8008ff0:	240005e4 	.word	0x240005e4
 8008ff4:	240005f4 	.word	0x240005f4
 8008ff8:	240005e0 	.word	0x240005e0
 8008ffc:	240004dc 	.word	0x240004dc
 8009000:	e000ed04 	.word	0xe000ed04

08009004 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8009004:	b580      	push	{r7, lr}
 8009006:	b08a      	sub	sp, #40	@ 0x28
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
 800900c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800900e:	2300      	movs	r3, #0
 8009010:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d10b      	bne.n	8009030 <vTaskDelayUntil+0x2c>
	__asm volatile
 8009018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800901c:	f383 8811 	msr	BASEPRI, r3
 8009020:	f3bf 8f6f 	isb	sy
 8009024:	f3bf 8f4f 	dsb	sy
 8009028:	617b      	str	r3, [r7, #20]
}
 800902a:	bf00      	nop
 800902c:	bf00      	nop
 800902e:	e7fd      	b.n	800902c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d10b      	bne.n	800904e <vTaskDelayUntil+0x4a>
	__asm volatile
 8009036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800903a:	f383 8811 	msr	BASEPRI, r3
 800903e:	f3bf 8f6f 	isb	sy
 8009042:	f3bf 8f4f 	dsb	sy
 8009046:	613b      	str	r3, [r7, #16]
}
 8009048:	bf00      	nop
 800904a:	bf00      	nop
 800904c:	e7fd      	b.n	800904a <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 800904e:	4b2a      	ldr	r3, [pc, #168]	@ (80090f8 <vTaskDelayUntil+0xf4>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d00b      	beq.n	800906e <vTaskDelayUntil+0x6a>
	__asm volatile
 8009056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800905a:	f383 8811 	msr	BASEPRI, r3
 800905e:	f3bf 8f6f 	isb	sy
 8009062:	f3bf 8f4f 	dsb	sy
 8009066:	60fb      	str	r3, [r7, #12]
}
 8009068:	bf00      	nop
 800906a:	bf00      	nop
 800906c:	e7fd      	b.n	800906a <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 800906e:	f000 f8ab 	bl	80091c8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8009072:	4b22      	ldr	r3, [pc, #136]	@ (80090fc <vTaskDelayUntil+0xf8>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	683a      	ldr	r2, [r7, #0]
 800907e:	4413      	add	r3, r2
 8009080:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	6a3a      	ldr	r2, [r7, #32]
 8009088:	429a      	cmp	r2, r3
 800908a:	d20b      	bcs.n	80090a4 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	69fa      	ldr	r2, [r7, #28]
 8009092:	429a      	cmp	r2, r3
 8009094:	d211      	bcs.n	80090ba <vTaskDelayUntil+0xb6>
 8009096:	69fa      	ldr	r2, [r7, #28]
 8009098:	6a3b      	ldr	r3, [r7, #32]
 800909a:	429a      	cmp	r2, r3
 800909c:	d90d      	bls.n	80090ba <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800909e:	2301      	movs	r3, #1
 80090a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80090a2:	e00a      	b.n	80090ba <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	69fa      	ldr	r2, [r7, #28]
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d303      	bcc.n	80090b6 <vTaskDelayUntil+0xb2>
 80090ae:	69fa      	ldr	r2, [r7, #28]
 80090b0:	6a3b      	ldr	r3, [r7, #32]
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d901      	bls.n	80090ba <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80090b6:	2301      	movs	r3, #1
 80090b8:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	69fa      	ldr	r2, [r7, #28]
 80090be:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80090c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d006      	beq.n	80090d4 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80090c6:	69fa      	ldr	r2, [r7, #28]
 80090c8:	6a3b      	ldr	r3, [r7, #32]
 80090ca:	1ad3      	subs	r3, r2, r3
 80090cc:	2100      	movs	r1, #0
 80090ce:	4618      	mov	r0, r3
 80090d0:	f000 fb40 	bl	8009754 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80090d4:	f000 f886 	bl	80091e4 <xTaskResumeAll>
 80090d8:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80090da:	69bb      	ldr	r3, [r7, #24]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d107      	bne.n	80090f0 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 80090e0:	4b07      	ldr	r3, [pc, #28]	@ (8009100 <vTaskDelayUntil+0xfc>)
 80090e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090e6:	601a      	str	r2, [r3, #0]
 80090e8:	f3bf 8f4f 	dsb	sy
 80090ec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80090f0:	bf00      	nop
 80090f2:	3728      	adds	r7, #40	@ 0x28
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}
 80090f8:	24000600 	.word	0x24000600
 80090fc:	240005dc 	.word	0x240005dc
 8009100:	e000ed04 	.word	0xe000ed04

08009104 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b08a      	sub	sp, #40	@ 0x28
 8009108:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800910a:	2300      	movs	r3, #0
 800910c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800910e:	2300      	movs	r3, #0
 8009110:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009112:	463a      	mov	r2, r7
 8009114:	1d39      	adds	r1, r7, #4
 8009116:	f107 0308 	add.w	r3, r7, #8
 800911a:	4618      	mov	r0, r3
 800911c:	f7f8 fc90 	bl	8001a40 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009120:	6839      	ldr	r1, [r7, #0]
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	68ba      	ldr	r2, [r7, #8]
 8009126:	9202      	str	r2, [sp, #8]
 8009128:	9301      	str	r3, [sp, #4]
 800912a:	2300      	movs	r3, #0
 800912c:	9300      	str	r3, [sp, #0]
 800912e:	2300      	movs	r3, #0
 8009130:	460a      	mov	r2, r1
 8009132:	491f      	ldr	r1, [pc, #124]	@ (80091b0 <vTaskStartScheduler+0xac>)
 8009134:	481f      	ldr	r0, [pc, #124]	@ (80091b4 <vTaskStartScheduler+0xb0>)
 8009136:	f7ff fdce 	bl	8008cd6 <xTaskCreateStatic>
 800913a:	4603      	mov	r3, r0
 800913c:	4a1e      	ldr	r2, [pc, #120]	@ (80091b8 <vTaskStartScheduler+0xb4>)
 800913e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009140:	4b1d      	ldr	r3, [pc, #116]	@ (80091b8 <vTaskStartScheduler+0xb4>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d002      	beq.n	800914e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009148:	2301      	movs	r3, #1
 800914a:	617b      	str	r3, [r7, #20]
 800914c:	e001      	b.n	8009152 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800914e:	2300      	movs	r3, #0
 8009150:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	2b01      	cmp	r3, #1
 8009156:	d116      	bne.n	8009186 <vTaskStartScheduler+0x82>
	__asm volatile
 8009158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800915c:	f383 8811 	msr	BASEPRI, r3
 8009160:	f3bf 8f6f 	isb	sy
 8009164:	f3bf 8f4f 	dsb	sy
 8009168:	613b      	str	r3, [r7, #16]
}
 800916a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800916c:	4b13      	ldr	r3, [pc, #76]	@ (80091bc <vTaskStartScheduler+0xb8>)
 800916e:	f04f 32ff 	mov.w	r2, #4294967295
 8009172:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009174:	4b12      	ldr	r3, [pc, #72]	@ (80091c0 <vTaskStartScheduler+0xbc>)
 8009176:	2201      	movs	r2, #1
 8009178:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800917a:	4b12      	ldr	r3, [pc, #72]	@ (80091c4 <vTaskStartScheduler+0xc0>)
 800917c:	2200      	movs	r2, #0
 800917e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009180:	f000 fbde 	bl	8009940 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009184:	e00f      	b.n	80091a6 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800918c:	d10b      	bne.n	80091a6 <vTaskStartScheduler+0xa2>
	__asm volatile
 800918e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009192:	f383 8811 	msr	BASEPRI, r3
 8009196:	f3bf 8f6f 	isb	sy
 800919a:	f3bf 8f4f 	dsb	sy
 800919e:	60fb      	str	r3, [r7, #12]
}
 80091a0:	bf00      	nop
 80091a2:	bf00      	nop
 80091a4:	e7fd      	b.n	80091a2 <vTaskStartScheduler+0x9e>
}
 80091a6:	bf00      	nop
 80091a8:	3718      	adds	r7, #24
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
 80091ae:	bf00      	nop
 80091b0:	0800a0cc 	.word	0x0800a0cc
 80091b4:	0800956d 	.word	0x0800956d
 80091b8:	240005fc 	.word	0x240005fc
 80091bc:	240005f8 	.word	0x240005f8
 80091c0:	240005e4 	.word	0x240005e4
 80091c4:	240005dc 	.word	0x240005dc

080091c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80091c8:	b480      	push	{r7}
 80091ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80091cc:	4b04      	ldr	r3, [pc, #16]	@ (80091e0 <vTaskSuspendAll+0x18>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	3301      	adds	r3, #1
 80091d2:	4a03      	ldr	r2, [pc, #12]	@ (80091e0 <vTaskSuspendAll+0x18>)
 80091d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80091d6:	bf00      	nop
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr
 80091e0:	24000600 	.word	0x24000600

080091e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b084      	sub	sp, #16
 80091e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80091ea:	2300      	movs	r3, #0
 80091ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80091ee:	2300      	movs	r3, #0
 80091f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80091f2:	4b42      	ldr	r3, [pc, #264]	@ (80092fc <xTaskResumeAll+0x118>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d10b      	bne.n	8009212 <xTaskResumeAll+0x2e>
	__asm volatile
 80091fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091fe:	f383 8811 	msr	BASEPRI, r3
 8009202:	f3bf 8f6f 	isb	sy
 8009206:	f3bf 8f4f 	dsb	sy
 800920a:	603b      	str	r3, [r7, #0]
}
 800920c:	bf00      	nop
 800920e:	bf00      	nop
 8009210:	e7fd      	b.n	800920e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009212:	f000 fc39 	bl	8009a88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009216:	4b39      	ldr	r3, [pc, #228]	@ (80092fc <xTaskResumeAll+0x118>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	3b01      	subs	r3, #1
 800921c:	4a37      	ldr	r2, [pc, #220]	@ (80092fc <xTaskResumeAll+0x118>)
 800921e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009220:	4b36      	ldr	r3, [pc, #216]	@ (80092fc <xTaskResumeAll+0x118>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d161      	bne.n	80092ec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009228:	4b35      	ldr	r3, [pc, #212]	@ (8009300 <xTaskResumeAll+0x11c>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d05d      	beq.n	80092ec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009230:	e02e      	b.n	8009290 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009232:	4b34      	ldr	r3, [pc, #208]	@ (8009304 <xTaskResumeAll+0x120>)
 8009234:	68db      	ldr	r3, [r3, #12]
 8009236:	68db      	ldr	r3, [r3, #12]
 8009238:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	3318      	adds	r3, #24
 800923e:	4618      	mov	r0, r3
 8009240:	f7ff fd1f 	bl	8008c82 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	3304      	adds	r3, #4
 8009248:	4618      	mov	r0, r3
 800924a:	f7ff fd1a 	bl	8008c82 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009252:	2201      	movs	r2, #1
 8009254:	409a      	lsls	r2, r3
 8009256:	4b2c      	ldr	r3, [pc, #176]	@ (8009308 <xTaskResumeAll+0x124>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4313      	orrs	r3, r2
 800925c:	4a2a      	ldr	r2, [pc, #168]	@ (8009308 <xTaskResumeAll+0x124>)
 800925e:	6013      	str	r3, [r2, #0]
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009264:	4613      	mov	r3, r2
 8009266:	009b      	lsls	r3, r3, #2
 8009268:	4413      	add	r3, r2
 800926a:	009b      	lsls	r3, r3, #2
 800926c:	4a27      	ldr	r2, [pc, #156]	@ (800930c <xTaskResumeAll+0x128>)
 800926e:	441a      	add	r2, r3
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	3304      	adds	r3, #4
 8009274:	4619      	mov	r1, r3
 8009276:	4610      	mov	r0, r2
 8009278:	f7ff fca6 	bl	8008bc8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009280:	4b23      	ldr	r3, [pc, #140]	@ (8009310 <xTaskResumeAll+0x12c>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009286:	429a      	cmp	r2, r3
 8009288:	d302      	bcc.n	8009290 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800928a:	4b22      	ldr	r3, [pc, #136]	@ (8009314 <xTaskResumeAll+0x130>)
 800928c:	2201      	movs	r2, #1
 800928e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009290:	4b1c      	ldr	r3, [pc, #112]	@ (8009304 <xTaskResumeAll+0x120>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d1cc      	bne.n	8009232 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d001      	beq.n	80092a2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800929e:	f000 fa1b 	bl	80096d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80092a2:	4b1d      	ldr	r3, [pc, #116]	@ (8009318 <xTaskResumeAll+0x134>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d010      	beq.n	80092d0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80092ae:	f000 f847 	bl	8009340 <xTaskIncrementTick>
 80092b2:	4603      	mov	r3, r0
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d002      	beq.n	80092be <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80092b8:	4b16      	ldr	r3, [pc, #88]	@ (8009314 <xTaskResumeAll+0x130>)
 80092ba:	2201      	movs	r2, #1
 80092bc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	3b01      	subs	r3, #1
 80092c2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d1f1      	bne.n	80092ae <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80092ca:	4b13      	ldr	r3, [pc, #76]	@ (8009318 <xTaskResumeAll+0x134>)
 80092cc:	2200      	movs	r2, #0
 80092ce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80092d0:	4b10      	ldr	r3, [pc, #64]	@ (8009314 <xTaskResumeAll+0x130>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d009      	beq.n	80092ec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80092d8:	2301      	movs	r3, #1
 80092da:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80092dc:	4b0f      	ldr	r3, [pc, #60]	@ (800931c <xTaskResumeAll+0x138>)
 80092de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80092e2:	601a      	str	r2, [r3, #0]
 80092e4:	f3bf 8f4f 	dsb	sy
 80092e8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80092ec:	f000 fbfe 	bl	8009aec <vPortExitCritical>

	return xAlreadyYielded;
 80092f0:	68bb      	ldr	r3, [r7, #8]
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3710      	adds	r7, #16
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}
 80092fa:	bf00      	nop
 80092fc:	24000600 	.word	0x24000600
 8009300:	240005d8 	.word	0x240005d8
 8009304:	24000598 	.word	0x24000598
 8009308:	240005e0 	.word	0x240005e0
 800930c:	240004dc 	.word	0x240004dc
 8009310:	240004d8 	.word	0x240004d8
 8009314:	240005ec 	.word	0x240005ec
 8009318:	240005e8 	.word	0x240005e8
 800931c:	e000ed04 	.word	0xe000ed04

08009320 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009320:	b480      	push	{r7}
 8009322:	b083      	sub	sp, #12
 8009324:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009326:	4b05      	ldr	r3, [pc, #20]	@ (800933c <xTaskGetTickCount+0x1c>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800932c:	687b      	ldr	r3, [r7, #4]
}
 800932e:	4618      	mov	r0, r3
 8009330:	370c      	adds	r7, #12
 8009332:	46bd      	mov	sp, r7
 8009334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009338:	4770      	bx	lr
 800933a:	bf00      	nop
 800933c:	240005dc 	.word	0x240005dc

08009340 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b086      	sub	sp, #24
 8009344:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009346:	2300      	movs	r3, #0
 8009348:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800934a:	4b4f      	ldr	r3, [pc, #316]	@ (8009488 <xTaskIncrementTick+0x148>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	2b00      	cmp	r3, #0
 8009350:	f040 808f 	bne.w	8009472 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009354:	4b4d      	ldr	r3, [pc, #308]	@ (800948c <xTaskIncrementTick+0x14c>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	3301      	adds	r3, #1
 800935a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800935c:	4a4b      	ldr	r2, [pc, #300]	@ (800948c <xTaskIncrementTick+0x14c>)
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d121      	bne.n	80093ac <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009368:	4b49      	ldr	r3, [pc, #292]	@ (8009490 <xTaskIncrementTick+0x150>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d00b      	beq.n	800938a <xTaskIncrementTick+0x4a>
	__asm volatile
 8009372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009376:	f383 8811 	msr	BASEPRI, r3
 800937a:	f3bf 8f6f 	isb	sy
 800937e:	f3bf 8f4f 	dsb	sy
 8009382:	603b      	str	r3, [r7, #0]
}
 8009384:	bf00      	nop
 8009386:	bf00      	nop
 8009388:	e7fd      	b.n	8009386 <xTaskIncrementTick+0x46>
 800938a:	4b41      	ldr	r3, [pc, #260]	@ (8009490 <xTaskIncrementTick+0x150>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	60fb      	str	r3, [r7, #12]
 8009390:	4b40      	ldr	r3, [pc, #256]	@ (8009494 <xTaskIncrementTick+0x154>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4a3e      	ldr	r2, [pc, #248]	@ (8009490 <xTaskIncrementTick+0x150>)
 8009396:	6013      	str	r3, [r2, #0]
 8009398:	4a3e      	ldr	r2, [pc, #248]	@ (8009494 <xTaskIncrementTick+0x154>)
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	6013      	str	r3, [r2, #0]
 800939e:	4b3e      	ldr	r3, [pc, #248]	@ (8009498 <xTaskIncrementTick+0x158>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	3301      	adds	r3, #1
 80093a4:	4a3c      	ldr	r2, [pc, #240]	@ (8009498 <xTaskIncrementTick+0x158>)
 80093a6:	6013      	str	r3, [r2, #0]
 80093a8:	f000 f996 	bl	80096d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80093ac:	4b3b      	ldr	r3, [pc, #236]	@ (800949c <xTaskIncrementTick+0x15c>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	693a      	ldr	r2, [r7, #16]
 80093b2:	429a      	cmp	r2, r3
 80093b4:	d348      	bcc.n	8009448 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80093b6:	4b36      	ldr	r3, [pc, #216]	@ (8009490 <xTaskIncrementTick+0x150>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d104      	bne.n	80093ca <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093c0:	4b36      	ldr	r3, [pc, #216]	@ (800949c <xTaskIncrementTick+0x15c>)
 80093c2:	f04f 32ff 	mov.w	r2, #4294967295
 80093c6:	601a      	str	r2, [r3, #0]
					break;
 80093c8:	e03e      	b.n	8009448 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093ca:	4b31      	ldr	r3, [pc, #196]	@ (8009490 <xTaskIncrementTick+0x150>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	68db      	ldr	r3, [r3, #12]
 80093d0:	68db      	ldr	r3, [r3, #12]
 80093d2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	685b      	ldr	r3, [r3, #4]
 80093d8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80093da:	693a      	ldr	r2, [r7, #16]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	429a      	cmp	r2, r3
 80093e0:	d203      	bcs.n	80093ea <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80093e2:	4a2e      	ldr	r2, [pc, #184]	@ (800949c <xTaskIncrementTick+0x15c>)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80093e8:	e02e      	b.n	8009448 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	3304      	adds	r3, #4
 80093ee:	4618      	mov	r0, r3
 80093f0:	f7ff fc47 	bl	8008c82 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d004      	beq.n	8009406 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	3318      	adds	r3, #24
 8009400:	4618      	mov	r0, r3
 8009402:	f7ff fc3e 	bl	8008c82 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800940a:	2201      	movs	r2, #1
 800940c:	409a      	lsls	r2, r3
 800940e:	4b24      	ldr	r3, [pc, #144]	@ (80094a0 <xTaskIncrementTick+0x160>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4313      	orrs	r3, r2
 8009414:	4a22      	ldr	r2, [pc, #136]	@ (80094a0 <xTaskIncrementTick+0x160>)
 8009416:	6013      	str	r3, [r2, #0]
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800941c:	4613      	mov	r3, r2
 800941e:	009b      	lsls	r3, r3, #2
 8009420:	4413      	add	r3, r2
 8009422:	009b      	lsls	r3, r3, #2
 8009424:	4a1f      	ldr	r2, [pc, #124]	@ (80094a4 <xTaskIncrementTick+0x164>)
 8009426:	441a      	add	r2, r3
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	3304      	adds	r3, #4
 800942c:	4619      	mov	r1, r3
 800942e:	4610      	mov	r0, r2
 8009430:	f7ff fbca 	bl	8008bc8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009438:	4b1b      	ldr	r3, [pc, #108]	@ (80094a8 <xTaskIncrementTick+0x168>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800943e:	429a      	cmp	r2, r3
 8009440:	d3b9      	bcc.n	80093b6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009442:	2301      	movs	r3, #1
 8009444:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009446:	e7b6      	b.n	80093b6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009448:	4b17      	ldr	r3, [pc, #92]	@ (80094a8 <xTaskIncrementTick+0x168>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800944e:	4915      	ldr	r1, [pc, #84]	@ (80094a4 <xTaskIncrementTick+0x164>)
 8009450:	4613      	mov	r3, r2
 8009452:	009b      	lsls	r3, r3, #2
 8009454:	4413      	add	r3, r2
 8009456:	009b      	lsls	r3, r3, #2
 8009458:	440b      	add	r3, r1
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	2b01      	cmp	r3, #1
 800945e:	d901      	bls.n	8009464 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009460:	2301      	movs	r3, #1
 8009462:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009464:	4b11      	ldr	r3, [pc, #68]	@ (80094ac <xTaskIncrementTick+0x16c>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d007      	beq.n	800947c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800946c:	2301      	movs	r3, #1
 800946e:	617b      	str	r3, [r7, #20]
 8009470:	e004      	b.n	800947c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009472:	4b0f      	ldr	r3, [pc, #60]	@ (80094b0 <xTaskIncrementTick+0x170>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	3301      	adds	r3, #1
 8009478:	4a0d      	ldr	r2, [pc, #52]	@ (80094b0 <xTaskIncrementTick+0x170>)
 800947a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800947c:	697b      	ldr	r3, [r7, #20]
}
 800947e:	4618      	mov	r0, r3
 8009480:	3718      	adds	r7, #24
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
 8009486:	bf00      	nop
 8009488:	24000600 	.word	0x24000600
 800948c:	240005dc 	.word	0x240005dc
 8009490:	24000590 	.word	0x24000590
 8009494:	24000594 	.word	0x24000594
 8009498:	240005f0 	.word	0x240005f0
 800949c:	240005f8 	.word	0x240005f8
 80094a0:	240005e0 	.word	0x240005e0
 80094a4:	240004dc 	.word	0x240004dc
 80094a8:	240004d8 	.word	0x240004d8
 80094ac:	240005ec 	.word	0x240005ec
 80094b0:	240005e8 	.word	0x240005e8

080094b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80094b4:	b480      	push	{r7}
 80094b6:	b087      	sub	sp, #28
 80094b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80094ba:	4b27      	ldr	r3, [pc, #156]	@ (8009558 <vTaskSwitchContext+0xa4>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d003      	beq.n	80094ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80094c2:	4b26      	ldr	r3, [pc, #152]	@ (800955c <vTaskSwitchContext+0xa8>)
 80094c4:	2201      	movs	r2, #1
 80094c6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80094c8:	e040      	b.n	800954c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80094ca:	4b24      	ldr	r3, [pc, #144]	@ (800955c <vTaskSwitchContext+0xa8>)
 80094cc:	2200      	movs	r2, #0
 80094ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094d0:	4b23      	ldr	r3, [pc, #140]	@ (8009560 <vTaskSwitchContext+0xac>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	fab3 f383 	clz	r3, r3
 80094dc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80094de:	7afb      	ldrb	r3, [r7, #11]
 80094e0:	f1c3 031f 	rsb	r3, r3, #31
 80094e4:	617b      	str	r3, [r7, #20]
 80094e6:	491f      	ldr	r1, [pc, #124]	@ (8009564 <vTaskSwitchContext+0xb0>)
 80094e8:	697a      	ldr	r2, [r7, #20]
 80094ea:	4613      	mov	r3, r2
 80094ec:	009b      	lsls	r3, r3, #2
 80094ee:	4413      	add	r3, r2
 80094f0:	009b      	lsls	r3, r3, #2
 80094f2:	440b      	add	r3, r1
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d10b      	bne.n	8009512 <vTaskSwitchContext+0x5e>
	__asm volatile
 80094fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094fe:	f383 8811 	msr	BASEPRI, r3
 8009502:	f3bf 8f6f 	isb	sy
 8009506:	f3bf 8f4f 	dsb	sy
 800950a:	607b      	str	r3, [r7, #4]
}
 800950c:	bf00      	nop
 800950e:	bf00      	nop
 8009510:	e7fd      	b.n	800950e <vTaskSwitchContext+0x5a>
 8009512:	697a      	ldr	r2, [r7, #20]
 8009514:	4613      	mov	r3, r2
 8009516:	009b      	lsls	r3, r3, #2
 8009518:	4413      	add	r3, r2
 800951a:	009b      	lsls	r3, r3, #2
 800951c:	4a11      	ldr	r2, [pc, #68]	@ (8009564 <vTaskSwitchContext+0xb0>)
 800951e:	4413      	add	r3, r2
 8009520:	613b      	str	r3, [r7, #16]
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	685b      	ldr	r3, [r3, #4]
 8009526:	685a      	ldr	r2, [r3, #4]
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	605a      	str	r2, [r3, #4]
 800952c:	693b      	ldr	r3, [r7, #16]
 800952e:	685a      	ldr	r2, [r3, #4]
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	3308      	adds	r3, #8
 8009534:	429a      	cmp	r2, r3
 8009536:	d104      	bne.n	8009542 <vTaskSwitchContext+0x8e>
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	685a      	ldr	r2, [r3, #4]
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	605a      	str	r2, [r3, #4]
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	68db      	ldr	r3, [r3, #12]
 8009548:	4a07      	ldr	r2, [pc, #28]	@ (8009568 <vTaskSwitchContext+0xb4>)
 800954a:	6013      	str	r3, [r2, #0]
}
 800954c:	bf00      	nop
 800954e:	371c      	adds	r7, #28
 8009550:	46bd      	mov	sp, r7
 8009552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009556:	4770      	bx	lr
 8009558:	24000600 	.word	0x24000600
 800955c:	240005ec 	.word	0x240005ec
 8009560:	240005e0 	.word	0x240005e0
 8009564:	240004dc 	.word	0x240004dc
 8009568:	240004d8 	.word	0x240004d8

0800956c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b082      	sub	sp, #8
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009574:	f000 f852 	bl	800961c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009578:	4b06      	ldr	r3, [pc, #24]	@ (8009594 <prvIdleTask+0x28>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	2b01      	cmp	r3, #1
 800957e:	d9f9      	bls.n	8009574 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009580:	4b05      	ldr	r3, [pc, #20]	@ (8009598 <prvIdleTask+0x2c>)
 8009582:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009586:	601a      	str	r2, [r3, #0]
 8009588:	f3bf 8f4f 	dsb	sy
 800958c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009590:	e7f0      	b.n	8009574 <prvIdleTask+0x8>
 8009592:	bf00      	nop
 8009594:	240004dc 	.word	0x240004dc
 8009598:	e000ed04 	.word	0xe000ed04

0800959c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b082      	sub	sp, #8
 80095a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80095a2:	2300      	movs	r3, #0
 80095a4:	607b      	str	r3, [r7, #4]
 80095a6:	e00c      	b.n	80095c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80095a8:	687a      	ldr	r2, [r7, #4]
 80095aa:	4613      	mov	r3, r2
 80095ac:	009b      	lsls	r3, r3, #2
 80095ae:	4413      	add	r3, r2
 80095b0:	009b      	lsls	r3, r3, #2
 80095b2:	4a12      	ldr	r2, [pc, #72]	@ (80095fc <prvInitialiseTaskLists+0x60>)
 80095b4:	4413      	add	r3, r2
 80095b6:	4618      	mov	r0, r3
 80095b8:	f7ff fad9 	bl	8008b6e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	3301      	adds	r3, #1
 80095c0:	607b      	str	r3, [r7, #4]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2b06      	cmp	r3, #6
 80095c6:	d9ef      	bls.n	80095a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80095c8:	480d      	ldr	r0, [pc, #52]	@ (8009600 <prvInitialiseTaskLists+0x64>)
 80095ca:	f7ff fad0 	bl	8008b6e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80095ce:	480d      	ldr	r0, [pc, #52]	@ (8009604 <prvInitialiseTaskLists+0x68>)
 80095d0:	f7ff facd 	bl	8008b6e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80095d4:	480c      	ldr	r0, [pc, #48]	@ (8009608 <prvInitialiseTaskLists+0x6c>)
 80095d6:	f7ff faca 	bl	8008b6e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80095da:	480c      	ldr	r0, [pc, #48]	@ (800960c <prvInitialiseTaskLists+0x70>)
 80095dc:	f7ff fac7 	bl	8008b6e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80095e0:	480b      	ldr	r0, [pc, #44]	@ (8009610 <prvInitialiseTaskLists+0x74>)
 80095e2:	f7ff fac4 	bl	8008b6e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80095e6:	4b0b      	ldr	r3, [pc, #44]	@ (8009614 <prvInitialiseTaskLists+0x78>)
 80095e8:	4a05      	ldr	r2, [pc, #20]	@ (8009600 <prvInitialiseTaskLists+0x64>)
 80095ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80095ec:	4b0a      	ldr	r3, [pc, #40]	@ (8009618 <prvInitialiseTaskLists+0x7c>)
 80095ee:	4a05      	ldr	r2, [pc, #20]	@ (8009604 <prvInitialiseTaskLists+0x68>)
 80095f0:	601a      	str	r2, [r3, #0]
}
 80095f2:	bf00      	nop
 80095f4:	3708      	adds	r7, #8
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
 80095fa:	bf00      	nop
 80095fc:	240004dc 	.word	0x240004dc
 8009600:	24000568 	.word	0x24000568
 8009604:	2400057c 	.word	0x2400057c
 8009608:	24000598 	.word	0x24000598
 800960c:	240005ac 	.word	0x240005ac
 8009610:	240005c4 	.word	0x240005c4
 8009614:	24000590 	.word	0x24000590
 8009618:	24000594 	.word	0x24000594

0800961c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b082      	sub	sp, #8
 8009620:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009622:	e019      	b.n	8009658 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009624:	f000 fa30 	bl	8009a88 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009628:	4b10      	ldr	r3, [pc, #64]	@ (800966c <prvCheckTasksWaitingTermination+0x50>)
 800962a:	68db      	ldr	r3, [r3, #12]
 800962c:	68db      	ldr	r3, [r3, #12]
 800962e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	3304      	adds	r3, #4
 8009634:	4618      	mov	r0, r3
 8009636:	f7ff fb24 	bl	8008c82 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800963a:	4b0d      	ldr	r3, [pc, #52]	@ (8009670 <prvCheckTasksWaitingTermination+0x54>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	3b01      	subs	r3, #1
 8009640:	4a0b      	ldr	r2, [pc, #44]	@ (8009670 <prvCheckTasksWaitingTermination+0x54>)
 8009642:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009644:	4b0b      	ldr	r3, [pc, #44]	@ (8009674 <prvCheckTasksWaitingTermination+0x58>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	3b01      	subs	r3, #1
 800964a:	4a0a      	ldr	r2, [pc, #40]	@ (8009674 <prvCheckTasksWaitingTermination+0x58>)
 800964c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800964e:	f000 fa4d 	bl	8009aec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f000 f810 	bl	8009678 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009658:	4b06      	ldr	r3, [pc, #24]	@ (8009674 <prvCheckTasksWaitingTermination+0x58>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d1e1      	bne.n	8009624 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009660:	bf00      	nop
 8009662:	bf00      	nop
 8009664:	3708      	adds	r7, #8
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
 800966a:	bf00      	nop
 800966c:	240005ac 	.word	0x240005ac
 8009670:	240005d8 	.word	0x240005d8
 8009674:	240005c0 	.word	0x240005c0

08009678 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009678:	b580      	push	{r7, lr}
 800967a:	b084      	sub	sp, #16
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009686:	2b00      	cmp	r3, #0
 8009688:	d108      	bne.n	800969c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800968e:	4618      	mov	r0, r3
 8009690:	f000 fba8 	bl	8009de4 <vPortFree>
				vPortFree( pxTCB );
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f000 fba5 	bl	8009de4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800969a:	e019      	b.n	80096d0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80096a2:	2b01      	cmp	r3, #1
 80096a4:	d103      	bne.n	80096ae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f000 fb9c 	bl	8009de4 <vPortFree>
	}
 80096ac:	e010      	b.n	80096d0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80096b4:	2b02      	cmp	r3, #2
 80096b6:	d00b      	beq.n	80096d0 <prvDeleteTCB+0x58>
	__asm volatile
 80096b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096bc:	f383 8811 	msr	BASEPRI, r3
 80096c0:	f3bf 8f6f 	isb	sy
 80096c4:	f3bf 8f4f 	dsb	sy
 80096c8:	60fb      	str	r3, [r7, #12]
}
 80096ca:	bf00      	nop
 80096cc:	bf00      	nop
 80096ce:	e7fd      	b.n	80096cc <prvDeleteTCB+0x54>
	}
 80096d0:	bf00      	nop
 80096d2:	3710      	adds	r7, #16
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}

080096d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80096d8:	b480      	push	{r7}
 80096da:	b083      	sub	sp, #12
 80096dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80096de:	4b0c      	ldr	r3, [pc, #48]	@ (8009710 <prvResetNextTaskUnblockTime+0x38>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d104      	bne.n	80096f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80096e8:	4b0a      	ldr	r3, [pc, #40]	@ (8009714 <prvResetNextTaskUnblockTime+0x3c>)
 80096ea:	f04f 32ff 	mov.w	r2, #4294967295
 80096ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80096f0:	e008      	b.n	8009704 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096f2:	4b07      	ldr	r3, [pc, #28]	@ (8009710 <prvResetNextTaskUnblockTime+0x38>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	68db      	ldr	r3, [r3, #12]
 80096f8:	68db      	ldr	r3, [r3, #12]
 80096fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	685b      	ldr	r3, [r3, #4]
 8009700:	4a04      	ldr	r2, [pc, #16]	@ (8009714 <prvResetNextTaskUnblockTime+0x3c>)
 8009702:	6013      	str	r3, [r2, #0]
}
 8009704:	bf00      	nop
 8009706:	370c      	adds	r7, #12
 8009708:	46bd      	mov	sp, r7
 800970a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970e:	4770      	bx	lr
 8009710:	24000590 	.word	0x24000590
 8009714:	240005f8 	.word	0x240005f8

08009718 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009718:	b480      	push	{r7}
 800971a:	b083      	sub	sp, #12
 800971c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800971e:	4b0b      	ldr	r3, [pc, #44]	@ (800974c <xTaskGetSchedulerState+0x34>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d102      	bne.n	800972c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009726:	2301      	movs	r3, #1
 8009728:	607b      	str	r3, [r7, #4]
 800972a:	e008      	b.n	800973e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800972c:	4b08      	ldr	r3, [pc, #32]	@ (8009750 <xTaskGetSchedulerState+0x38>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d102      	bne.n	800973a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009734:	2302      	movs	r3, #2
 8009736:	607b      	str	r3, [r7, #4]
 8009738:	e001      	b.n	800973e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800973a:	2300      	movs	r3, #0
 800973c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800973e:	687b      	ldr	r3, [r7, #4]
	}
 8009740:	4618      	mov	r0, r3
 8009742:	370c      	adds	r7, #12
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr
 800974c:	240005e4 	.word	0x240005e4
 8009750:	24000600 	.word	0x24000600

08009754 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b084      	sub	sp, #16
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800975e:	4b29      	ldr	r3, [pc, #164]	@ (8009804 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009764:	4b28      	ldr	r3, [pc, #160]	@ (8009808 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	3304      	adds	r3, #4
 800976a:	4618      	mov	r0, r3
 800976c:	f7ff fa89 	bl	8008c82 <uxListRemove>
 8009770:	4603      	mov	r3, r0
 8009772:	2b00      	cmp	r3, #0
 8009774:	d10b      	bne.n	800978e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009776:	4b24      	ldr	r3, [pc, #144]	@ (8009808 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800977c:	2201      	movs	r2, #1
 800977e:	fa02 f303 	lsl.w	r3, r2, r3
 8009782:	43da      	mvns	r2, r3
 8009784:	4b21      	ldr	r3, [pc, #132]	@ (800980c <prvAddCurrentTaskToDelayedList+0xb8>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	4013      	ands	r3, r2
 800978a:	4a20      	ldr	r2, [pc, #128]	@ (800980c <prvAddCurrentTaskToDelayedList+0xb8>)
 800978c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009794:	d10a      	bne.n	80097ac <prvAddCurrentTaskToDelayedList+0x58>
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d007      	beq.n	80097ac <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800979c:	4b1a      	ldr	r3, [pc, #104]	@ (8009808 <prvAddCurrentTaskToDelayedList+0xb4>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	3304      	adds	r3, #4
 80097a2:	4619      	mov	r1, r3
 80097a4:	481a      	ldr	r0, [pc, #104]	@ (8009810 <prvAddCurrentTaskToDelayedList+0xbc>)
 80097a6:	f7ff fa0f 	bl	8008bc8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80097aa:	e026      	b.n	80097fa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80097ac:	68fa      	ldr	r2, [r7, #12]
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	4413      	add	r3, r2
 80097b2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80097b4:	4b14      	ldr	r3, [pc, #80]	@ (8009808 <prvAddCurrentTaskToDelayedList+0xb4>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	68ba      	ldr	r2, [r7, #8]
 80097ba:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80097bc:	68ba      	ldr	r2, [r7, #8]
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	429a      	cmp	r2, r3
 80097c2:	d209      	bcs.n	80097d8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80097c4:	4b13      	ldr	r3, [pc, #76]	@ (8009814 <prvAddCurrentTaskToDelayedList+0xc0>)
 80097c6:	681a      	ldr	r2, [r3, #0]
 80097c8:	4b0f      	ldr	r3, [pc, #60]	@ (8009808 <prvAddCurrentTaskToDelayedList+0xb4>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	3304      	adds	r3, #4
 80097ce:	4619      	mov	r1, r3
 80097d0:	4610      	mov	r0, r2
 80097d2:	f7ff fa1d 	bl	8008c10 <vListInsert>
}
 80097d6:	e010      	b.n	80097fa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80097d8:	4b0f      	ldr	r3, [pc, #60]	@ (8009818 <prvAddCurrentTaskToDelayedList+0xc4>)
 80097da:	681a      	ldr	r2, [r3, #0]
 80097dc:	4b0a      	ldr	r3, [pc, #40]	@ (8009808 <prvAddCurrentTaskToDelayedList+0xb4>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	3304      	adds	r3, #4
 80097e2:	4619      	mov	r1, r3
 80097e4:	4610      	mov	r0, r2
 80097e6:	f7ff fa13 	bl	8008c10 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80097ea:	4b0c      	ldr	r3, [pc, #48]	@ (800981c <prvAddCurrentTaskToDelayedList+0xc8>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	68ba      	ldr	r2, [r7, #8]
 80097f0:	429a      	cmp	r2, r3
 80097f2:	d202      	bcs.n	80097fa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80097f4:	4a09      	ldr	r2, [pc, #36]	@ (800981c <prvAddCurrentTaskToDelayedList+0xc8>)
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	6013      	str	r3, [r2, #0]
}
 80097fa:	bf00      	nop
 80097fc:	3710      	adds	r7, #16
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}
 8009802:	bf00      	nop
 8009804:	240005dc 	.word	0x240005dc
 8009808:	240004d8 	.word	0x240004d8
 800980c:	240005e0 	.word	0x240005e0
 8009810:	240005c4 	.word	0x240005c4
 8009814:	24000594 	.word	0x24000594
 8009818:	24000590 	.word	0x24000590
 800981c:	240005f8 	.word	0x240005f8

08009820 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009820:	b480      	push	{r7}
 8009822:	b085      	sub	sp, #20
 8009824:	af00      	add	r7, sp, #0
 8009826:	60f8      	str	r0, [r7, #12]
 8009828:	60b9      	str	r1, [r7, #8]
 800982a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	3b04      	subs	r3, #4
 8009830:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009838:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	3b04      	subs	r3, #4
 800983e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	f023 0201 	bic.w	r2, r3, #1
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	3b04      	subs	r3, #4
 800984e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009850:	4a0c      	ldr	r2, [pc, #48]	@ (8009884 <pxPortInitialiseStack+0x64>)
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	3b14      	subs	r3, #20
 800985a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800985c:	687a      	ldr	r2, [r7, #4]
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	3b04      	subs	r3, #4
 8009866:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	f06f 0202 	mvn.w	r2, #2
 800986e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	3b20      	subs	r3, #32
 8009874:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009876:	68fb      	ldr	r3, [r7, #12]
}
 8009878:	4618      	mov	r0, r3
 800987a:	3714      	adds	r7, #20
 800987c:	46bd      	mov	sp, r7
 800987e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009882:	4770      	bx	lr
 8009884:	08009889 	.word	0x08009889

08009888 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009888:	b480      	push	{r7}
 800988a:	b085      	sub	sp, #20
 800988c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800988e:	2300      	movs	r3, #0
 8009890:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009892:	4b13      	ldr	r3, [pc, #76]	@ (80098e0 <prvTaskExitError+0x58>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800989a:	d00b      	beq.n	80098b4 <prvTaskExitError+0x2c>
	__asm volatile
 800989c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098a0:	f383 8811 	msr	BASEPRI, r3
 80098a4:	f3bf 8f6f 	isb	sy
 80098a8:	f3bf 8f4f 	dsb	sy
 80098ac:	60fb      	str	r3, [r7, #12]
}
 80098ae:	bf00      	nop
 80098b0:	bf00      	nop
 80098b2:	e7fd      	b.n	80098b0 <prvTaskExitError+0x28>
	__asm volatile
 80098b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098b8:	f383 8811 	msr	BASEPRI, r3
 80098bc:	f3bf 8f6f 	isb	sy
 80098c0:	f3bf 8f4f 	dsb	sy
 80098c4:	60bb      	str	r3, [r7, #8]
}
 80098c6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80098c8:	bf00      	nop
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d0fc      	beq.n	80098ca <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80098d0:	bf00      	nop
 80098d2:	bf00      	nop
 80098d4:	3714      	adds	r7, #20
 80098d6:	46bd      	mov	sp, r7
 80098d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098dc:	4770      	bx	lr
 80098de:	bf00      	nop
 80098e0:	24000010 	.word	0x24000010
	...

080098f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80098f0:	4b07      	ldr	r3, [pc, #28]	@ (8009910 <pxCurrentTCBConst2>)
 80098f2:	6819      	ldr	r1, [r3, #0]
 80098f4:	6808      	ldr	r0, [r1, #0]
 80098f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098fa:	f380 8809 	msr	PSP, r0
 80098fe:	f3bf 8f6f 	isb	sy
 8009902:	f04f 0000 	mov.w	r0, #0
 8009906:	f380 8811 	msr	BASEPRI, r0
 800990a:	4770      	bx	lr
 800990c:	f3af 8000 	nop.w

08009910 <pxCurrentTCBConst2>:
 8009910:	240004d8 	.word	0x240004d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009914:	bf00      	nop
 8009916:	bf00      	nop

08009918 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009918:	4808      	ldr	r0, [pc, #32]	@ (800993c <prvPortStartFirstTask+0x24>)
 800991a:	6800      	ldr	r0, [r0, #0]
 800991c:	6800      	ldr	r0, [r0, #0]
 800991e:	f380 8808 	msr	MSP, r0
 8009922:	f04f 0000 	mov.w	r0, #0
 8009926:	f380 8814 	msr	CONTROL, r0
 800992a:	b662      	cpsie	i
 800992c:	b661      	cpsie	f
 800992e:	f3bf 8f4f 	dsb	sy
 8009932:	f3bf 8f6f 	isb	sy
 8009936:	df00      	svc	0
 8009938:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800993a:	bf00      	nop
 800993c:	e000ed08 	.word	0xe000ed08

08009940 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b086      	sub	sp, #24
 8009944:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009946:	4b47      	ldr	r3, [pc, #284]	@ (8009a64 <xPortStartScheduler+0x124>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	4a47      	ldr	r2, [pc, #284]	@ (8009a68 <xPortStartScheduler+0x128>)
 800994c:	4293      	cmp	r3, r2
 800994e:	d10b      	bne.n	8009968 <xPortStartScheduler+0x28>
	__asm volatile
 8009950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009954:	f383 8811 	msr	BASEPRI, r3
 8009958:	f3bf 8f6f 	isb	sy
 800995c:	f3bf 8f4f 	dsb	sy
 8009960:	613b      	str	r3, [r7, #16]
}
 8009962:	bf00      	nop
 8009964:	bf00      	nop
 8009966:	e7fd      	b.n	8009964 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009968:	4b3e      	ldr	r3, [pc, #248]	@ (8009a64 <xPortStartScheduler+0x124>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4a3f      	ldr	r2, [pc, #252]	@ (8009a6c <xPortStartScheduler+0x12c>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d10b      	bne.n	800998a <xPortStartScheduler+0x4a>
	__asm volatile
 8009972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009976:	f383 8811 	msr	BASEPRI, r3
 800997a:	f3bf 8f6f 	isb	sy
 800997e:	f3bf 8f4f 	dsb	sy
 8009982:	60fb      	str	r3, [r7, #12]
}
 8009984:	bf00      	nop
 8009986:	bf00      	nop
 8009988:	e7fd      	b.n	8009986 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800998a:	4b39      	ldr	r3, [pc, #228]	@ (8009a70 <xPortStartScheduler+0x130>)
 800998c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	781b      	ldrb	r3, [r3, #0]
 8009992:	b2db      	uxtb	r3, r3
 8009994:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	22ff      	movs	r2, #255	@ 0xff
 800999a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	781b      	ldrb	r3, [r3, #0]
 80099a0:	b2db      	uxtb	r3, r3
 80099a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80099a4:	78fb      	ldrb	r3, [r7, #3]
 80099a6:	b2db      	uxtb	r3, r3
 80099a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80099ac:	b2da      	uxtb	r2, r3
 80099ae:	4b31      	ldr	r3, [pc, #196]	@ (8009a74 <xPortStartScheduler+0x134>)
 80099b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80099b2:	4b31      	ldr	r3, [pc, #196]	@ (8009a78 <xPortStartScheduler+0x138>)
 80099b4:	2207      	movs	r2, #7
 80099b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80099b8:	e009      	b.n	80099ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80099ba:	4b2f      	ldr	r3, [pc, #188]	@ (8009a78 <xPortStartScheduler+0x138>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	3b01      	subs	r3, #1
 80099c0:	4a2d      	ldr	r2, [pc, #180]	@ (8009a78 <xPortStartScheduler+0x138>)
 80099c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80099c4:	78fb      	ldrb	r3, [r7, #3]
 80099c6:	b2db      	uxtb	r3, r3
 80099c8:	005b      	lsls	r3, r3, #1
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80099ce:	78fb      	ldrb	r3, [r7, #3]
 80099d0:	b2db      	uxtb	r3, r3
 80099d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099d6:	2b80      	cmp	r3, #128	@ 0x80
 80099d8:	d0ef      	beq.n	80099ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80099da:	4b27      	ldr	r3, [pc, #156]	@ (8009a78 <xPortStartScheduler+0x138>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f1c3 0307 	rsb	r3, r3, #7
 80099e2:	2b04      	cmp	r3, #4
 80099e4:	d00b      	beq.n	80099fe <xPortStartScheduler+0xbe>
	__asm volatile
 80099e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099ea:	f383 8811 	msr	BASEPRI, r3
 80099ee:	f3bf 8f6f 	isb	sy
 80099f2:	f3bf 8f4f 	dsb	sy
 80099f6:	60bb      	str	r3, [r7, #8]
}
 80099f8:	bf00      	nop
 80099fa:	bf00      	nop
 80099fc:	e7fd      	b.n	80099fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80099fe:	4b1e      	ldr	r3, [pc, #120]	@ (8009a78 <xPortStartScheduler+0x138>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	021b      	lsls	r3, r3, #8
 8009a04:	4a1c      	ldr	r2, [pc, #112]	@ (8009a78 <xPortStartScheduler+0x138>)
 8009a06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009a08:	4b1b      	ldr	r3, [pc, #108]	@ (8009a78 <xPortStartScheduler+0x138>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009a10:	4a19      	ldr	r2, [pc, #100]	@ (8009a78 <xPortStartScheduler+0x138>)
 8009a12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	b2da      	uxtb	r2, r3
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009a1c:	4b17      	ldr	r3, [pc, #92]	@ (8009a7c <xPortStartScheduler+0x13c>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4a16      	ldr	r2, [pc, #88]	@ (8009a7c <xPortStartScheduler+0x13c>)
 8009a22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009a26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009a28:	4b14      	ldr	r3, [pc, #80]	@ (8009a7c <xPortStartScheduler+0x13c>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	4a13      	ldr	r2, [pc, #76]	@ (8009a7c <xPortStartScheduler+0x13c>)
 8009a2e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009a32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009a34:	f000 f8da 	bl	8009bec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009a38:	4b11      	ldr	r3, [pc, #68]	@ (8009a80 <xPortStartScheduler+0x140>)
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009a3e:	f000 f8f9 	bl	8009c34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009a42:	4b10      	ldr	r3, [pc, #64]	@ (8009a84 <xPortStartScheduler+0x144>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	4a0f      	ldr	r2, [pc, #60]	@ (8009a84 <xPortStartScheduler+0x144>)
 8009a48:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009a4c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009a4e:	f7ff ff63 	bl	8009918 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009a52:	f7ff fd2f 	bl	80094b4 <vTaskSwitchContext>
	prvTaskExitError();
 8009a56:	f7ff ff17 	bl	8009888 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009a5a:	2300      	movs	r3, #0
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3718      	adds	r7, #24
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}
 8009a64:	e000ed00 	.word	0xe000ed00
 8009a68:	410fc271 	.word	0x410fc271
 8009a6c:	410fc270 	.word	0x410fc270
 8009a70:	e000e400 	.word	0xe000e400
 8009a74:	24000604 	.word	0x24000604
 8009a78:	24000608 	.word	0x24000608
 8009a7c:	e000ed20 	.word	0xe000ed20
 8009a80:	24000010 	.word	0x24000010
 8009a84:	e000ef34 	.word	0xe000ef34

08009a88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b083      	sub	sp, #12
 8009a8c:	af00      	add	r7, sp, #0
	__asm volatile
 8009a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a92:	f383 8811 	msr	BASEPRI, r3
 8009a96:	f3bf 8f6f 	isb	sy
 8009a9a:	f3bf 8f4f 	dsb	sy
 8009a9e:	607b      	str	r3, [r7, #4]
}
 8009aa0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009aa2:	4b10      	ldr	r3, [pc, #64]	@ (8009ae4 <vPortEnterCritical+0x5c>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	3301      	adds	r3, #1
 8009aa8:	4a0e      	ldr	r2, [pc, #56]	@ (8009ae4 <vPortEnterCritical+0x5c>)
 8009aaa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009aac:	4b0d      	ldr	r3, [pc, #52]	@ (8009ae4 <vPortEnterCritical+0x5c>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	2b01      	cmp	r3, #1
 8009ab2:	d110      	bne.n	8009ad6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8009ae8 <vPortEnterCritical+0x60>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	b2db      	uxtb	r3, r3
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d00b      	beq.n	8009ad6 <vPortEnterCritical+0x4e>
	__asm volatile
 8009abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ac2:	f383 8811 	msr	BASEPRI, r3
 8009ac6:	f3bf 8f6f 	isb	sy
 8009aca:	f3bf 8f4f 	dsb	sy
 8009ace:	603b      	str	r3, [r7, #0]
}
 8009ad0:	bf00      	nop
 8009ad2:	bf00      	nop
 8009ad4:	e7fd      	b.n	8009ad2 <vPortEnterCritical+0x4a>
	}
}
 8009ad6:	bf00      	nop
 8009ad8:	370c      	adds	r7, #12
 8009ada:	46bd      	mov	sp, r7
 8009adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae0:	4770      	bx	lr
 8009ae2:	bf00      	nop
 8009ae4:	24000010 	.word	0x24000010
 8009ae8:	e000ed04 	.word	0xe000ed04

08009aec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009aec:	b480      	push	{r7}
 8009aee:	b083      	sub	sp, #12
 8009af0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009af2:	4b12      	ldr	r3, [pc, #72]	@ (8009b3c <vPortExitCritical+0x50>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d10b      	bne.n	8009b12 <vPortExitCritical+0x26>
	__asm volatile
 8009afa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009afe:	f383 8811 	msr	BASEPRI, r3
 8009b02:	f3bf 8f6f 	isb	sy
 8009b06:	f3bf 8f4f 	dsb	sy
 8009b0a:	607b      	str	r3, [r7, #4]
}
 8009b0c:	bf00      	nop
 8009b0e:	bf00      	nop
 8009b10:	e7fd      	b.n	8009b0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009b12:	4b0a      	ldr	r3, [pc, #40]	@ (8009b3c <vPortExitCritical+0x50>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	3b01      	subs	r3, #1
 8009b18:	4a08      	ldr	r2, [pc, #32]	@ (8009b3c <vPortExitCritical+0x50>)
 8009b1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009b1c:	4b07      	ldr	r3, [pc, #28]	@ (8009b3c <vPortExitCritical+0x50>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d105      	bne.n	8009b30 <vPortExitCritical+0x44>
 8009b24:	2300      	movs	r3, #0
 8009b26:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009b2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009b30:	bf00      	nop
 8009b32:	370c      	adds	r7, #12
 8009b34:	46bd      	mov	sp, r7
 8009b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3a:	4770      	bx	lr
 8009b3c:	24000010 	.word	0x24000010

08009b40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009b40:	f3ef 8009 	mrs	r0, PSP
 8009b44:	f3bf 8f6f 	isb	sy
 8009b48:	4b15      	ldr	r3, [pc, #84]	@ (8009ba0 <pxCurrentTCBConst>)
 8009b4a:	681a      	ldr	r2, [r3, #0]
 8009b4c:	f01e 0f10 	tst.w	lr, #16
 8009b50:	bf08      	it	eq
 8009b52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009b56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b5a:	6010      	str	r0, [r2, #0]
 8009b5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009b60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009b64:	f380 8811 	msr	BASEPRI, r0
 8009b68:	f3bf 8f4f 	dsb	sy
 8009b6c:	f3bf 8f6f 	isb	sy
 8009b70:	f7ff fca0 	bl	80094b4 <vTaskSwitchContext>
 8009b74:	f04f 0000 	mov.w	r0, #0
 8009b78:	f380 8811 	msr	BASEPRI, r0
 8009b7c:	bc09      	pop	{r0, r3}
 8009b7e:	6819      	ldr	r1, [r3, #0]
 8009b80:	6808      	ldr	r0, [r1, #0]
 8009b82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b86:	f01e 0f10 	tst.w	lr, #16
 8009b8a:	bf08      	it	eq
 8009b8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009b90:	f380 8809 	msr	PSP, r0
 8009b94:	f3bf 8f6f 	isb	sy
 8009b98:	4770      	bx	lr
 8009b9a:	bf00      	nop
 8009b9c:	f3af 8000 	nop.w

08009ba0 <pxCurrentTCBConst>:
 8009ba0:	240004d8 	.word	0x240004d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009ba4:	bf00      	nop
 8009ba6:	bf00      	nop

08009ba8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b082      	sub	sp, #8
 8009bac:	af00      	add	r7, sp, #0
	__asm volatile
 8009bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bb2:	f383 8811 	msr	BASEPRI, r3
 8009bb6:	f3bf 8f6f 	isb	sy
 8009bba:	f3bf 8f4f 	dsb	sy
 8009bbe:	607b      	str	r3, [r7, #4]
}
 8009bc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009bc2:	f7ff fbbd 	bl	8009340 <xTaskIncrementTick>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d003      	beq.n	8009bd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009bcc:	4b06      	ldr	r3, [pc, #24]	@ (8009be8 <xPortSysTickHandler+0x40>)
 8009bce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009bd2:	601a      	str	r2, [r3, #0]
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	f383 8811 	msr	BASEPRI, r3
}
 8009bde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009be0:	bf00      	nop
 8009be2:	3708      	adds	r7, #8
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}
 8009be8:	e000ed04 	.word	0xe000ed04

08009bec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009bec:	b480      	push	{r7}
 8009bee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8009c20 <vPortSetupTimerInterrupt+0x34>)
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8009c24 <vPortSetupTimerInterrupt+0x38>)
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8009c28 <vPortSetupTimerInterrupt+0x3c>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	4a0a      	ldr	r2, [pc, #40]	@ (8009c2c <vPortSetupTimerInterrupt+0x40>)
 8009c02:	fba2 2303 	umull	r2, r3, r2, r3
 8009c06:	099b      	lsrs	r3, r3, #6
 8009c08:	4a09      	ldr	r2, [pc, #36]	@ (8009c30 <vPortSetupTimerInterrupt+0x44>)
 8009c0a:	3b01      	subs	r3, #1
 8009c0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009c0e:	4b04      	ldr	r3, [pc, #16]	@ (8009c20 <vPortSetupTimerInterrupt+0x34>)
 8009c10:	2207      	movs	r2, #7
 8009c12:	601a      	str	r2, [r3, #0]
}
 8009c14:	bf00      	nop
 8009c16:	46bd      	mov	sp, r7
 8009c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1c:	4770      	bx	lr
 8009c1e:	bf00      	nop
 8009c20:	e000e010 	.word	0xe000e010
 8009c24:	e000e018 	.word	0xe000e018
 8009c28:	24000000 	.word	0x24000000
 8009c2c:	10624dd3 	.word	0x10624dd3
 8009c30:	e000e014 	.word	0xe000e014

08009c34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009c34:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009c44 <vPortEnableVFP+0x10>
 8009c38:	6801      	ldr	r1, [r0, #0]
 8009c3a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009c3e:	6001      	str	r1, [r0, #0]
 8009c40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009c42:	bf00      	nop
 8009c44:	e000ed88 	.word	0xe000ed88

08009c48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b08a      	sub	sp, #40	@ 0x28
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009c50:	2300      	movs	r3, #0
 8009c52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009c54:	f7ff fab8 	bl	80091c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009c58:	4b5c      	ldr	r3, [pc, #368]	@ (8009dcc <pvPortMalloc+0x184>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d101      	bne.n	8009c64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009c60:	f000 f924 	bl	8009eac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009c64:	4b5a      	ldr	r3, [pc, #360]	@ (8009dd0 <pvPortMalloc+0x188>)
 8009c66:	681a      	ldr	r2, [r3, #0]
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	4013      	ands	r3, r2
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	f040 8095 	bne.w	8009d9c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d01e      	beq.n	8009cb6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009c78:	2208      	movs	r2, #8
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	4413      	add	r3, r2
 8009c7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f003 0307 	and.w	r3, r3, #7
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d015      	beq.n	8009cb6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f023 0307 	bic.w	r3, r3, #7
 8009c90:	3308      	adds	r3, #8
 8009c92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f003 0307 	and.w	r3, r3, #7
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d00b      	beq.n	8009cb6 <pvPortMalloc+0x6e>
	__asm volatile
 8009c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ca2:	f383 8811 	msr	BASEPRI, r3
 8009ca6:	f3bf 8f6f 	isb	sy
 8009caa:	f3bf 8f4f 	dsb	sy
 8009cae:	617b      	str	r3, [r7, #20]
}
 8009cb0:	bf00      	nop
 8009cb2:	bf00      	nop
 8009cb4:	e7fd      	b.n	8009cb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d06f      	beq.n	8009d9c <pvPortMalloc+0x154>
 8009cbc:	4b45      	ldr	r3, [pc, #276]	@ (8009dd4 <pvPortMalloc+0x18c>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	687a      	ldr	r2, [r7, #4]
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	d86a      	bhi.n	8009d9c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009cc6:	4b44      	ldr	r3, [pc, #272]	@ (8009dd8 <pvPortMalloc+0x190>)
 8009cc8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009cca:	4b43      	ldr	r3, [pc, #268]	@ (8009dd8 <pvPortMalloc+0x190>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009cd0:	e004      	b.n	8009cdc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cd4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	687a      	ldr	r2, [r7, #4]
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	d903      	bls.n	8009cee <pvPortMalloc+0xa6>
 8009ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d1f1      	bne.n	8009cd2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009cee:	4b37      	ldr	r3, [pc, #220]	@ (8009dcc <pvPortMalloc+0x184>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009cf4:	429a      	cmp	r2, r3
 8009cf6:	d051      	beq.n	8009d9c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009cf8:	6a3b      	ldr	r3, [r7, #32]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	2208      	movs	r2, #8
 8009cfe:	4413      	add	r3, r2
 8009d00:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d04:	681a      	ldr	r2, [r3, #0]
 8009d06:	6a3b      	ldr	r3, [r7, #32]
 8009d08:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d0c:	685a      	ldr	r2, [r3, #4]
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	1ad2      	subs	r2, r2, r3
 8009d12:	2308      	movs	r3, #8
 8009d14:	005b      	lsls	r3, r3, #1
 8009d16:	429a      	cmp	r2, r3
 8009d18:	d920      	bls.n	8009d5c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009d1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	4413      	add	r3, r2
 8009d20:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d22:	69bb      	ldr	r3, [r7, #24]
 8009d24:	f003 0307 	and.w	r3, r3, #7
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d00b      	beq.n	8009d44 <pvPortMalloc+0xfc>
	__asm volatile
 8009d2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d30:	f383 8811 	msr	BASEPRI, r3
 8009d34:	f3bf 8f6f 	isb	sy
 8009d38:	f3bf 8f4f 	dsb	sy
 8009d3c:	613b      	str	r3, [r7, #16]
}
 8009d3e:	bf00      	nop
 8009d40:	bf00      	nop
 8009d42:	e7fd      	b.n	8009d40 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d46:	685a      	ldr	r2, [r3, #4]
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	1ad2      	subs	r2, r2, r3
 8009d4c:	69bb      	ldr	r3, [r7, #24]
 8009d4e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d52:	687a      	ldr	r2, [r7, #4]
 8009d54:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009d56:	69b8      	ldr	r0, [r7, #24]
 8009d58:	f000 f90a 	bl	8009f70 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009d5c:	4b1d      	ldr	r3, [pc, #116]	@ (8009dd4 <pvPortMalloc+0x18c>)
 8009d5e:	681a      	ldr	r2, [r3, #0]
 8009d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d62:	685b      	ldr	r3, [r3, #4]
 8009d64:	1ad3      	subs	r3, r2, r3
 8009d66:	4a1b      	ldr	r2, [pc, #108]	@ (8009dd4 <pvPortMalloc+0x18c>)
 8009d68:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009d6a:	4b1a      	ldr	r3, [pc, #104]	@ (8009dd4 <pvPortMalloc+0x18c>)
 8009d6c:	681a      	ldr	r2, [r3, #0]
 8009d6e:	4b1b      	ldr	r3, [pc, #108]	@ (8009ddc <pvPortMalloc+0x194>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	429a      	cmp	r2, r3
 8009d74:	d203      	bcs.n	8009d7e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009d76:	4b17      	ldr	r3, [pc, #92]	@ (8009dd4 <pvPortMalloc+0x18c>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	4a18      	ldr	r2, [pc, #96]	@ (8009ddc <pvPortMalloc+0x194>)
 8009d7c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d80:	685a      	ldr	r2, [r3, #4]
 8009d82:	4b13      	ldr	r3, [pc, #76]	@ (8009dd0 <pvPortMalloc+0x188>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	431a      	orrs	r2, r3
 8009d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d8a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d8e:	2200      	movs	r2, #0
 8009d90:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009d92:	4b13      	ldr	r3, [pc, #76]	@ (8009de0 <pvPortMalloc+0x198>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	3301      	adds	r3, #1
 8009d98:	4a11      	ldr	r2, [pc, #68]	@ (8009de0 <pvPortMalloc+0x198>)
 8009d9a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009d9c:	f7ff fa22 	bl	80091e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009da0:	69fb      	ldr	r3, [r7, #28]
 8009da2:	f003 0307 	and.w	r3, r3, #7
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d00b      	beq.n	8009dc2 <pvPortMalloc+0x17a>
	__asm volatile
 8009daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dae:	f383 8811 	msr	BASEPRI, r3
 8009db2:	f3bf 8f6f 	isb	sy
 8009db6:	f3bf 8f4f 	dsb	sy
 8009dba:	60fb      	str	r3, [r7, #12]
}
 8009dbc:	bf00      	nop
 8009dbe:	bf00      	nop
 8009dc0:	e7fd      	b.n	8009dbe <pvPortMalloc+0x176>
	return pvReturn;
 8009dc2:	69fb      	ldr	r3, [r7, #28]
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3728      	adds	r7, #40	@ 0x28
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}
 8009dcc:	24004214 	.word	0x24004214
 8009dd0:	24004228 	.word	0x24004228
 8009dd4:	24004218 	.word	0x24004218
 8009dd8:	2400420c 	.word	0x2400420c
 8009ddc:	2400421c 	.word	0x2400421c
 8009de0:	24004220 	.word	0x24004220

08009de4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b086      	sub	sp, #24
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d04f      	beq.n	8009e96 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009df6:	2308      	movs	r3, #8
 8009df8:	425b      	negs	r3, r3
 8009dfa:	697a      	ldr	r2, [r7, #20]
 8009dfc:	4413      	add	r3, r2
 8009dfe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009e00:	697b      	ldr	r3, [r7, #20]
 8009e02:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	685a      	ldr	r2, [r3, #4]
 8009e08:	4b25      	ldr	r3, [pc, #148]	@ (8009ea0 <vPortFree+0xbc>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4013      	ands	r3, r2
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d10b      	bne.n	8009e2a <vPortFree+0x46>
	__asm volatile
 8009e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e16:	f383 8811 	msr	BASEPRI, r3
 8009e1a:	f3bf 8f6f 	isb	sy
 8009e1e:	f3bf 8f4f 	dsb	sy
 8009e22:	60fb      	str	r3, [r7, #12]
}
 8009e24:	bf00      	nop
 8009e26:	bf00      	nop
 8009e28:	e7fd      	b.n	8009e26 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d00b      	beq.n	8009e4a <vPortFree+0x66>
	__asm volatile
 8009e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e36:	f383 8811 	msr	BASEPRI, r3
 8009e3a:	f3bf 8f6f 	isb	sy
 8009e3e:	f3bf 8f4f 	dsb	sy
 8009e42:	60bb      	str	r3, [r7, #8]
}
 8009e44:	bf00      	nop
 8009e46:	bf00      	nop
 8009e48:	e7fd      	b.n	8009e46 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009e4a:	693b      	ldr	r3, [r7, #16]
 8009e4c:	685a      	ldr	r2, [r3, #4]
 8009e4e:	4b14      	ldr	r3, [pc, #80]	@ (8009ea0 <vPortFree+0xbc>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	4013      	ands	r3, r2
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d01e      	beq.n	8009e96 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009e58:	693b      	ldr	r3, [r7, #16]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d11a      	bne.n	8009e96 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	685a      	ldr	r2, [r3, #4]
 8009e64:	4b0e      	ldr	r3, [pc, #56]	@ (8009ea0 <vPortFree+0xbc>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	43db      	mvns	r3, r3
 8009e6a:	401a      	ands	r2, r3
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009e70:	f7ff f9aa 	bl	80091c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009e74:	693b      	ldr	r3, [r7, #16]
 8009e76:	685a      	ldr	r2, [r3, #4]
 8009e78:	4b0a      	ldr	r3, [pc, #40]	@ (8009ea4 <vPortFree+0xc0>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	4413      	add	r3, r2
 8009e7e:	4a09      	ldr	r2, [pc, #36]	@ (8009ea4 <vPortFree+0xc0>)
 8009e80:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009e82:	6938      	ldr	r0, [r7, #16]
 8009e84:	f000 f874 	bl	8009f70 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009e88:	4b07      	ldr	r3, [pc, #28]	@ (8009ea8 <vPortFree+0xc4>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	3301      	adds	r3, #1
 8009e8e:	4a06      	ldr	r2, [pc, #24]	@ (8009ea8 <vPortFree+0xc4>)
 8009e90:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009e92:	f7ff f9a7 	bl	80091e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009e96:	bf00      	nop
 8009e98:	3718      	adds	r7, #24
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}
 8009e9e:	bf00      	nop
 8009ea0:	24004228 	.word	0x24004228
 8009ea4:	24004218 	.word	0x24004218
 8009ea8:	24004224 	.word	0x24004224

08009eac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009eac:	b480      	push	{r7}
 8009eae:	b085      	sub	sp, #20
 8009eb0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009eb2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8009eb6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009eb8:	4b27      	ldr	r3, [pc, #156]	@ (8009f58 <prvHeapInit+0xac>)
 8009eba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	f003 0307 	and.w	r3, r3, #7
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d00c      	beq.n	8009ee0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	3307      	adds	r3, #7
 8009eca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f023 0307 	bic.w	r3, r3, #7
 8009ed2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009ed4:	68ba      	ldr	r2, [r7, #8]
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	1ad3      	subs	r3, r2, r3
 8009eda:	4a1f      	ldr	r2, [pc, #124]	@ (8009f58 <prvHeapInit+0xac>)
 8009edc:	4413      	add	r3, r2
 8009ede:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009ee4:	4a1d      	ldr	r2, [pc, #116]	@ (8009f5c <prvHeapInit+0xb0>)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009eea:	4b1c      	ldr	r3, [pc, #112]	@ (8009f5c <prvHeapInit+0xb0>)
 8009eec:	2200      	movs	r2, #0
 8009eee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	68ba      	ldr	r2, [r7, #8]
 8009ef4:	4413      	add	r3, r2
 8009ef6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009ef8:	2208      	movs	r2, #8
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	1a9b      	subs	r3, r3, r2
 8009efe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	f023 0307 	bic.w	r3, r3, #7
 8009f06:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	4a15      	ldr	r2, [pc, #84]	@ (8009f60 <prvHeapInit+0xb4>)
 8009f0c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009f0e:	4b14      	ldr	r3, [pc, #80]	@ (8009f60 <prvHeapInit+0xb4>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	2200      	movs	r2, #0
 8009f14:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009f16:	4b12      	ldr	r3, [pc, #72]	@ (8009f60 <prvHeapInit+0xb4>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	68fa      	ldr	r2, [r7, #12]
 8009f26:	1ad2      	subs	r2, r2, r3
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8009f60 <prvHeapInit+0xb4>)
 8009f2e:	681a      	ldr	r2, [r3, #0]
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	685b      	ldr	r3, [r3, #4]
 8009f38:	4a0a      	ldr	r2, [pc, #40]	@ (8009f64 <prvHeapInit+0xb8>)
 8009f3a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	685b      	ldr	r3, [r3, #4]
 8009f40:	4a09      	ldr	r2, [pc, #36]	@ (8009f68 <prvHeapInit+0xbc>)
 8009f42:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009f44:	4b09      	ldr	r3, [pc, #36]	@ (8009f6c <prvHeapInit+0xc0>)
 8009f46:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009f4a:	601a      	str	r2, [r3, #0]
}
 8009f4c:	bf00      	nop
 8009f4e:	3714      	adds	r7, #20
 8009f50:	46bd      	mov	sp, r7
 8009f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f56:	4770      	bx	lr
 8009f58:	2400060c 	.word	0x2400060c
 8009f5c:	2400420c 	.word	0x2400420c
 8009f60:	24004214 	.word	0x24004214
 8009f64:	2400421c 	.word	0x2400421c
 8009f68:	24004218 	.word	0x24004218
 8009f6c:	24004228 	.word	0x24004228

08009f70 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009f70:	b480      	push	{r7}
 8009f72:	b085      	sub	sp, #20
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009f78:	4b28      	ldr	r3, [pc, #160]	@ (800a01c <prvInsertBlockIntoFreeList+0xac>)
 8009f7a:	60fb      	str	r3, [r7, #12]
 8009f7c:	e002      	b.n	8009f84 <prvInsertBlockIntoFreeList+0x14>
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	60fb      	str	r3, [r7, #12]
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	687a      	ldr	r2, [r7, #4]
 8009f8a:	429a      	cmp	r2, r3
 8009f8c:	d8f7      	bhi.n	8009f7e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	685b      	ldr	r3, [r3, #4]
 8009f96:	68ba      	ldr	r2, [r7, #8]
 8009f98:	4413      	add	r3, r2
 8009f9a:	687a      	ldr	r2, [r7, #4]
 8009f9c:	429a      	cmp	r2, r3
 8009f9e:	d108      	bne.n	8009fb2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	685a      	ldr	r2, [r3, #4]
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	685b      	ldr	r3, [r3, #4]
 8009fa8:	441a      	add	r2, r3
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	68ba      	ldr	r2, [r7, #8]
 8009fbc:	441a      	add	r2, r3
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	429a      	cmp	r2, r3
 8009fc4:	d118      	bne.n	8009ff8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681a      	ldr	r2, [r3, #0]
 8009fca:	4b15      	ldr	r3, [pc, #84]	@ (800a020 <prvInsertBlockIntoFreeList+0xb0>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	429a      	cmp	r2, r3
 8009fd0:	d00d      	beq.n	8009fee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	685a      	ldr	r2, [r3, #4]
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	441a      	add	r2, r3
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	681a      	ldr	r2, [r3, #0]
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	601a      	str	r2, [r3, #0]
 8009fec:	e008      	b.n	800a000 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009fee:	4b0c      	ldr	r3, [pc, #48]	@ (800a020 <prvInsertBlockIntoFreeList+0xb0>)
 8009ff0:	681a      	ldr	r2, [r3, #0]
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	601a      	str	r2, [r3, #0]
 8009ff6:	e003      	b.n	800a000 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	681a      	ldr	r2, [r3, #0]
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a000:	68fa      	ldr	r2, [r7, #12]
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	429a      	cmp	r2, r3
 800a006:	d002      	beq.n	800a00e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	687a      	ldr	r2, [r7, #4]
 800a00c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a00e:	bf00      	nop
 800a010:	3714      	adds	r7, #20
 800a012:	46bd      	mov	sp, r7
 800a014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a018:	4770      	bx	lr
 800a01a:	bf00      	nop
 800a01c:	2400420c 	.word	0x2400420c
 800a020:	24004214 	.word	0x24004214

0800a024 <memset>:
 800a024:	4402      	add	r2, r0
 800a026:	4603      	mov	r3, r0
 800a028:	4293      	cmp	r3, r2
 800a02a:	d100      	bne.n	800a02e <memset+0xa>
 800a02c:	4770      	bx	lr
 800a02e:	f803 1b01 	strb.w	r1, [r3], #1
 800a032:	e7f9      	b.n	800a028 <memset+0x4>

0800a034 <__libc_init_array>:
 800a034:	b570      	push	{r4, r5, r6, lr}
 800a036:	4d0d      	ldr	r5, [pc, #52]	@ (800a06c <__libc_init_array+0x38>)
 800a038:	4c0d      	ldr	r4, [pc, #52]	@ (800a070 <__libc_init_array+0x3c>)
 800a03a:	1b64      	subs	r4, r4, r5
 800a03c:	10a4      	asrs	r4, r4, #2
 800a03e:	2600      	movs	r6, #0
 800a040:	42a6      	cmp	r6, r4
 800a042:	d109      	bne.n	800a058 <__libc_init_array+0x24>
 800a044:	4d0b      	ldr	r5, [pc, #44]	@ (800a074 <__libc_init_array+0x40>)
 800a046:	4c0c      	ldr	r4, [pc, #48]	@ (800a078 <__libc_init_array+0x44>)
 800a048:	f000 f818 	bl	800a07c <_init>
 800a04c:	1b64      	subs	r4, r4, r5
 800a04e:	10a4      	asrs	r4, r4, #2
 800a050:	2600      	movs	r6, #0
 800a052:	42a6      	cmp	r6, r4
 800a054:	d105      	bne.n	800a062 <__libc_init_array+0x2e>
 800a056:	bd70      	pop	{r4, r5, r6, pc}
 800a058:	f855 3b04 	ldr.w	r3, [r5], #4
 800a05c:	4798      	blx	r3
 800a05e:	3601      	adds	r6, #1
 800a060:	e7ee      	b.n	800a040 <__libc_init_array+0xc>
 800a062:	f855 3b04 	ldr.w	r3, [r5], #4
 800a066:	4798      	blx	r3
 800a068:	3601      	adds	r6, #1
 800a06a:	e7f2      	b.n	800a052 <__libc_init_array+0x1e>
 800a06c:	0800a114 	.word	0x0800a114
 800a070:	0800a114 	.word	0x0800a114
 800a074:	0800a114 	.word	0x0800a114
 800a078:	0800a118 	.word	0x0800a118

0800a07c <_init>:
 800a07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a07e:	bf00      	nop
 800a080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a082:	bc08      	pop	{r3}
 800a084:	469e      	mov	lr, r3
 800a086:	4770      	bx	lr

0800a088 <_fini>:
 800a088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a08a:	bf00      	nop
 800a08c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a08e:	bc08      	pop	{r3}
 800a090:	469e      	mov	lr, r3
 800a092:	4770      	bx	lr
